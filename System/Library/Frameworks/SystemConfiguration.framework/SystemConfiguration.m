CFArrayRef SCNetworkProxiesCopyMatching(const void *a1, __CFString *a2, const __CFString *a3)
{
  uint64_t vars8;

  return _SCNetworkProxiesCopyMatchingInternal(a1, a2, a3, 0);
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_3(uint64_t a1)
{
  v2 = *(const void **)(a1 + 32);
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID) {
    __SCDynamicStoreSetDispatchQueue_block_invoke_3_cold_1();
  }
  mach_port_destruct(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 64), 0, *(void *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  v4 = *(NSObject **)(a1 + 56);

  dispatch_release(v4);
}

uint64_t __updateServerPort_block_invoke(uint64_t a1)
{
  uint64_t result = _sc_server;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _sc_server;
  if (result)
  {
    if (**(_DWORD **)(a1 + 40) == result)
    {
      _sc_server = __SCDynamicStoreServerPort(*(kern_return_t **)(a1 + 56), 1);
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      uint64_t result = _sc_server;
    }
  }
  else
  {
    uint64_t result = __SCDynamicStoreServerPort(*(kern_return_t **)(a1 + 56), 0);
    _sc_server = result;
  }
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

uint64_t __SCDynamicStoreServerPort(kern_return_t *a1, int a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v62 = 0;
  if (getenv("SCD_SERVER"))
  {
    uint64_t result = 0;
    *a1 = 1102;
  }
  else
  {
    unsigned int v6 = 0;
    *(void *)&long long v4 = 67109120;
    long long v59 = v4;
    *(void *)&long long v4 = 67109378;
    long long v60 = v4;
    while (1)
    {
      if (xpc_user_sessions_enabled())
      {
        int v63 = 0;
        if (xpc_user_sessions_get_foreground_uid() == -101)
        {
          v7 = __log_SCDynamicStore_log;
          if (!__log_SCDynamicStore_log)
          {
            v7 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
            __log_SCDynamicStore_log = (uint64_t)v7;
          }
          uint64_t v8 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
          {
            uint64_t v9 = _os_log_pack_size();
            v17 = (char *)&v59
                - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            v18 = (_DWORD *)_os_log_pack_fill();
            int v19 = v63;
            _DWORD *v18 = v59;
            v18[1] = v19;
            __SC_log_send(3, (uint64_t)v7, v8, v17);
          }
          int v20 = 1102;
        }
        else
        {
          int v20 = bootstrap_look_up_per_user();
        }
      }
      else
      {
        int v20 = bootstrap_look_up2();
      }
      *a1 = v20;
      if (v20 != 1102) {
        break;
      }
      int v63 = 0;
      if (get_sysctl_val("kern.willshutdown", &v63) && v63 || get_sysctl_val("kern.willuserspacereboot", &v63) && v63)
      {
        v48 = __log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          v48 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v48;
        }
        uint64_t v49 = _SC_syslog_os_log_mapping(6);
        uint64_t result = __SC_log_enabled(6, v48, (os_log_type_t)v49);
        if (result)
        {
          uint64_t v50 = _os_log_pack_size();
          v58 = (char *)&v59
              - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v48, v49, v58);
          return 0;
        }
        return result;
      }
      if (!a2) {
        return 0;
      }
      v21 = __log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        v21 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v21;
      }
      int v22 = v6 >= 3 ? 3 : 6;
      uint64_t v23 = _SC_syslog_os_log_mapping(v22);
      if (__SC_log_enabled(v22, v21, (os_log_type_t)v23))
      {
        uint64_t v24 = _os_log_pack_size();
        unsigned int v61 = v6;
        v32 = (char *)&v59 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        v34 = bootstrap_strerror(*a1);
        *(_DWORD *)uint64_t v33 = v60;
        *(_DWORD *)(v33 + 4) = v6 + 1;
        *(_WORD *)(v33 + 8) = 2080;
        *(void *)(v33 + 10) = v34;
        __SC_log_send(v22, (uint64_t)v21, v23, v32);
        unsigned int v6 = v61;
      }
      if (v6 == 3) {
        return 0;
      }
      usleep(0xC350u);
      ++v6;
    }
    if (v20) {
      return 0;
    }
    if (v6)
    {
      v35 = __log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        v35 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v35;
      }
      uint64_t v36 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v35, (os_log_type_t)v36))
      {
        uint64_t v37 = _os_log_pack_size();
        v45 = (char *)&v59 - ((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v46 = _os_log_pack_fill();
        v47 = "ies";
        if (v6 == 1) {
          v47 = "y";
        }
        *(_DWORD *)uint64_t v46 = v60;
        *(_DWORD *)(v46 + 4) = v6;
        *(_WORD *)(v46 + 8) = 2080;
        *(void *)(v46 + 10) = v47;
        __SC_log_send(6, (uint64_t)v35, v36, v45);
      }
    }
    return v62;
  }
  return result;
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs)
    {
LABEL_12:
      _SCErrorSet(3001);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
    if (!prefs) {
      goto LABEL_12;
    }
  }
  uint64_t v4 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) != v4) {
    goto LABEL_12;
  }
  if (queue)
  {
    return __SCPreferencesScheduleWithRunLoop((uint64_t)prefs, 0, 0, queue);
  }
  else
  {
    return __SCPreferencesUnscheduleFromRunLoop((uint64_t)prefs, 0, 0);
  }
}

uint64_t reachUpdateAndUnlock(uint64_t a1)
{
  *(unsigned char *)(a1 + 113) = 1;
  v2 = *(__CFRunLoopSource **)(a1 + 120);
  if (v2)
  {
    if (*(void *)(a1 + 176))
    {
      CFRunLoopSourceSignal(v2);
      _SC_signalRunLoop((const void *)a1, *(__CFRunLoopSource **)(a1 + 120), *(CFArrayRef *)(a1 + 176));
    }
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if (result) {
      reachUpdateAndUnlock_cold_1();
    }
  }
  else
  {
    return reachPerformAndUnlock(a1);
  }
  return result;
}

uint64_t reachPerformAndUnlock(uint64_t a1)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 112))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 128);
    uint64_t v4 = *(void *)(a1 + 144);
    v3 = *(uint64_t (**)(void))(a1 + 152);
    if (v3)
    {
      uint64_t v4 = v3(*(void *)(a1 + 144));
      v5 = *(uint64_t (**)(uint64_t))(a1 + 160);
    }
    else
    {
      v5 = 0;
    }
    uint64_t FlagsFromPath = __SCNetworkReachabilityGetFlagsFromPath(a1 + 193, (uint64_t)"Perform", *(nw_path_t *)(a1 + 248), *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 272), *(void *)(a1 + 280), *(unsigned __int8 *)(a1 + 288), *(_DWORD *)(a1 + 292));
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if (result) {
      reachPerformAndUnlock_cold_2();
    }
    if (v2)
    {
      int v20 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        int v20 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v20;
      }
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v20, (os_log_type_t)v21))
      {
        uint64_t v22 = _os_log_pack_size();
        v32[0] = v32;
        uint64_t v30 = (char *)v32 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v31 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v31 = 136315394;
        *(void *)(v31 + 4) = a1 + 193;
        *(_WORD *)(v31 + 12) = 1024;
        *(_DWORD *)(v31 + 14) = FlagsFromPath;
        __SC_log_send(7, (uint64_t)v20, v21, v30);
      }
      uint64_t result = v2(a1, FlagsFromPath, v4);
    }
    if (v5) {
      return v5(v4);
    }
  }
  else
  {
    unsigned int v6 = __log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      unsigned int v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v6;
    }
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)v32 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = a1 + 193;
      __SC_log_send(6, (uint64_t)v6, v7, v16);
    }
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
    if (result) {
      reachPerformAndUnlock_cold_1();
    }
  }
  return result;
}

void _SC_signalRunLoop(const void *a1, __CFRunLoopSource *a2, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 4; ; i += 3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i - 4);
      if (CFEqual(a1, ValueAtIndex)) {
        break;
      }
      CFIndex v10 = i - 1;
      if (v10 >= v7) {
        return;
      }
    }
    uint64_t v11 = (__CFRunLoop *)CFArrayGetValueAtIndex(theArray, i - 3);
    if (v11)
    {
      uint64_t v12 = v11;
      if (i - 1 < v7)
      {
        while (1)
        {
          uint64_t v13 = CFArrayGetValueAtIndex(theArray, i - 1);
          if (CFEqual(a1, v13))
          {
            uint64_t v14 = CFArrayGetValueAtIndex(theArray, i);
            if (!CFEqual(v12, v14)) {
              break;
            }
          }
          CFIndex v15 = i + 2;
          i += 3;
          if (v15 >= v7)
          {
            uint64_t v11 = v12;
            goto LABEL_23;
          }
        }
        for (CFIndex j = 0; j < v7; j += 3)
        {
          uint64_t v17 = CFArrayGetValueAtIndex(theArray, j);
          if (CFEqual(a1, v17))
          {
            v18 = (__CFRunLoop *)CFArrayGetValueAtIndex(theArray, j + 1);
            CFRunLoopMode v19 = CFRunLoopCopyCurrentMode(v18);
            if (v19)
            {
              CFStringRef v20 = v19;
              if (CFRunLoopIsWaiting(v18))
              {
                int v21 = CFRunLoopContainsSource(v18, a2, v20);
                CFRelease(v20);
                if (v21)
                {
                  uint64_t v11 = v18;
                  goto LABEL_23;
                }
              }
              else
              {
                CFRelease(v20);
              }
            }
          }
        }
        uint64_t v11 = v12;
      }
LABEL_23:
      CFRunLoopWakeUp(v11);
    }
  }
}

dispatch_queue_t __storeQueue_block_invoke()
{
  _sc_store_sessions = (uint64_t)CFSetCreateMutable(0, 0, 0);
  dispatch_queue_t result = dispatch_queue_create("SCDynamicStore/client sessions", 0);
  storeQueue_q = (uint64_t)result;
  return result;
}

CFComparisonResult _SCNetworkInterfaceCompare(uint64_t a1, uint64_t a2)
{
  __endptr[1] = *(char **)MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a1 + 312);
  unsigned int v3 = *(_DWORD *)(a2 + 312);
  if (v2 != v3)
  {
    if (v2 < v3) {
      return -1;
    }
    else {
      return 1;
    }
  }
  if (*(unsigned __int8 *)(a1 + 176) != *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176)) {
      return -1;
    }
    else {
      return 1;
    }
  }
  if (!*(unsigned char *)(a1 + 176)) {
    goto LABEL_10;
  }
  unsigned int v6 = *(const void **)(a1 + 200);
  if (v6 == *(const void **)(a2 + 200)) {
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v6 || CFGetTypeID(v6) != TypeID) {
    return 1;
  }
  uint64_t v8 = *(const void **)(a2 + 200);
  CFTypeID v9 = CFStringGetTypeID();
  if (!v8 || CFGetTypeID(v8) != v9) {
    return -1;
  }
  CFComparisonResult v10 = CFStringCompare(*(CFStringRef *)(a1 + 200), *(CFStringRef *)(a2 + 200), 0);
  if (v10 == kCFCompareEqualTo)
  {
LABEL_10:
    CFStringRef v11 = *(const __CFString **)(a1 + 208);
    if (!v11 || !*(void *)(a2 + 208)) {
      goto LABEL_44;
    }
    CFArrayRef theArray = split_path(v11);
    CFIndex Count = CFArrayGetCount(theArray);
    CFArrayRef v13 = split_path(*(CFStringRef *)(a2 + 208));
    CFIndex v14 = CFArrayGetCount(v13);
    CFIndex v32 = v14;
    CFIndex v33 = Count;
    if (Count >= v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = Count;
    }
    if (v15 < 1)
    {
LABEL_38:
      if (v33 >= v32) {
        CFComparisonResult v10 = kCFCompareEqualTo;
      }
      else {
        CFComparisonResult v10 = kCFCompareLessThan;
      }
      goto LABEL_43;
    }
    CFIndex v16 = 0;
    while (1)
    {
      __endptr[0] = 0;
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v16);
      CFStringRef v18 = (const __CFString *)CFArrayGetValueAtIndex(v13, v16);
      CFRunLoopMode v19 = _SC_cfstring_to_cstring(ValueAtIndex, 0, 0, 0x8000100u);
      *__error() = 0;
      uint64_t v20 = strtoq((const char *)v19, __endptr, 16);
      if (!*v19 || *__endptr[0]) {
        break;
      }
      uint64_t v22 = v20;
      int v23 = *__error();
      CFAllocatorDeallocate(0, v19);
      if (v23) {
        goto LABEL_20;
      }
      CFRunLoopMode v19 = _SC_cfstring_to_cstring(v18, 0, 0, 0x8000100u);
      *__error() = 0;
      uint64_t v24 = strtoq((const char *)v19, __endptr, 16);
      if (!*v19 || *__endptr[0]) {
        break;
      }
      uint64_t v31 = v24;
      int v25 = *__error();
      CFAllocatorDeallocate(0, v19);
      if (v25) {
        goto LABEL_20;
      }
      if (v22 != v31)
      {
        if (v22 < v31) {
          CFComparisonResult v10 = kCFCompareLessThan;
        }
        else {
          CFComparisonResult v10 = kCFCompareGreaterThan;
        }
LABEL_43:
        CFRelease(theArray);
        CFRelease(v13);
        if (v10 == kCFCompareEqualTo)
        {
LABEL_44:
          CFStringRef v26 = *(const __CFString **)(a1 + 112);
          if (!v26
            || (CFStringRef v27 = *(const __CFString **)(a2 + 112)) == 0
            || (CFComparisonResult v10 = CFStringCompare(v26, v27, 0)) == kCFCompareEqualTo)
          {
            CFStringRef v28 = *(const __CFString **)(a1 + 120);
            if (v28 && (CFStringRef v29 = *(const __CFString **)(a2 + 120)) != 0) {
              return CFStringCompare(v28, v29, 0);
            }
            else {
              return 0;
            }
          }
        }
        return v10;
      }
LABEL_21:
      if (v15 == ++v16) {
        goto LABEL_38;
      }
    }
    CFAllocatorDeallocate(0, v19);
LABEL_20:
    CFComparisonResult v21 = CFStringCompare(ValueAtIndex, v18, 0);
    if (v21)
    {
      CFComparisonResult v10 = v21;
      goto LABEL_43;
    }
    goto LABEL_21;
  }
  return v10;
}

CFArrayRef split_path(CFStringRef theString)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0;
  CFStringFindAndReplace(MutableCopy, @"@", @"/", v4, 0);
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, MutableCopy, @"/");
  CFRelease(MutableCopy);
  return ArrayBySeparatingStrings;
}

uint64_t __SCNetworkReachabilityDeallocate(uint64_t a1)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = __log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    unsigned int v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v2;
  }
  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    _os_log_pack_size();
    CFRange v4 = (char *)v15 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = a1 + 193;
    __SC_log_send(7, (uint64_t)v2, v3, v4);
  }
  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityDeallocate_cold_2();
  }
  *(unsigned char *)(a1 + 112) = 0;
  unsigned int v6 = *(void **)(a1 + 88);
  if (v6)
  {
    nw_release(v6);
    *(void *)(a1 + 88) = 0;
  }
  CFIndex v7 = *(void **)(a1 + 96);
  if (v7)
  {
    nw_release(v7);
    *(void *)(a1 + 96) = 0;
  }
  uint64_t v8 = *(void **)(a1 + 104);
  if (v8)
  {
    nw_release(v8);
    *(void *)(a1 + 104) = 0;
  }
  CFTypeID v9 = *(void **)(a1 + 232);
  if (v9)
  {
    nw_release(v9);
    *(void *)(a1 + 232) = 0;
  }
  CFComparisonResult v10 = *(void **)(a1 + 248);
  if (v10)
  {
    nw_release(v10);
    *(void *)(a1 + 248) = 0;
  }
  CFStringRef v11 = *(void **)(a1 + 256);
  if (v11)
  {
    nw_release(v11);
    *(void *)(a1 + 256) = 0;
  }
  uint64_t v12 = *(void **)(a1 + 280);
  if (v12)
  {
    nw_release(v12);
    *(void *)(a1 + 280) = 0;
  }
  CFArrayRef v13 = *(void (**)(void))(a1 + 160);
  if (v13) {
    v13(*(void *)(a1 + 144));
  }
  if (pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityDeallocate_cold_1();
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
}

CFStringRef SCNetworkServiceGetServiceID(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) == v2) {
    return (CFStringRef)*((void *)service + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) == v2 && *((void *)service + 4))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
    Boolean PrefsEnabled = __getPrefsEnabled(*((const __SCPreferences **)service + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return PrefsEnabled;
  }
LABEL_7:
  _SCErrorSet(1002);
  return 0;
}

BOOL __getPrefsEnabled(const __SCPreferences *a1, const __CFString *a2)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  return !Value || CFGetTypeID(Value) != TypeID || !CFDictionaryContainsKey(Value, @"__INACTIVE__");
}

BOOL _SCSerializeData(const void *a1, vm_address_t *a2, vm_size_t *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDataGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  mach_error_t v7 = __CFDataCopyVMData((const __CFData *)a1, a2, a3);
  if (!v7) {
    return 1;
  }
  mach_error_t v8 = v7;
  CFTypeID v9 = _SC_LOG_DEFAULT();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v9, (os_log_type_t)v10);
  if (result)
  {
    _os_log_pack_size();
    uint64_t v12 = (char *)v15 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    CFIndex v14 = mach_error_string(v8);
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = v14;
    __SC_log_send(5, (uint64_t)v9, v10, v12);
    return 0;
  }
  return result;
}

uint64_t __CFDataCopyVMData(const __CFData *a1, vm_address_t *a2, vm_size_t *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  v12[0] = (vm_address_t)CFDataGetBytePtr(a1);
  vm_size_t Length = CFDataGetLength(a1);
  uint64_t v7 = vm_allocate(*MEMORY[0x1E4F14960], v12, Length, 1);
  if (v7)
  {
    vm_address_t v8 = 0;
    vm_size_t Length = 0;
  }
  else
  {
    CFTypeID v9 = (void *)v12[0];
    BytePtr = CFDataGetBytePtr(a1);
    memcpy(v9, BytePtr, Length);
    vm_address_t v8 = v12[0];
  }
  *a2 = v8;
  *a3 = Length;
  return v7;
}

BOOL _SCUnserializeString(CFStringRef *a1, const __CFData *a2, UInt8 *bytes, CFIndex length)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFStringRef v5 = CFStringCreateFromExternalRepresentation(0, a2, 0x8000100u);
    *a1 = v5;
    if (v5) {
      return 1;
    }
  }
  else
  {
    CFDataRef v9 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    *a1 = CFStringCreateFromExternalRepresentation(0, v9, 0x8000100u);
    CFRelease(v9);
    mach_error_t v10 = MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], bytes, length);
    if (v10)
    {
      mach_error_t v11 = v10;
      uint64_t v12 = _SC_LOG_DEFAULT();
      uint64_t v13 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
      {
        _os_log_pack_size();
        CFIndex v14 = (char *)v20 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        CFIndex v16 = mach_error_string(v11);
        *(_DWORD *)uint64_t v15 = 136315138;
        *(void *)(v15 + 4) = v16;
        __SC_log_send(5, (uint64_t)v12, v13, v14);
      }
    }
    if (*a1) {
      return 1;
    }
  }
  uint64_t v17 = _SC_LOG_DEFAULT();
  uint64_t v18 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v17, (os_log_type_t)v18);
  if (result)
  {
    _os_log_pack_size();
    CFRunLoopMode v19 = (char *)v20 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v17, v18, v19);
    return 0;
  }
  return result;
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  unsigned int v6 = (pthread_mutex_t *)((char *)target + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilitySetCallback_cold_2();
  }
  uint64_t v7 = (void (*)(void))*((void *)target + 20);
  if (v7) {
    v7(*((void *)target + 18));
  }
  *((_OWORD *)target + 9) = 0u;
  *((void *)target + 16) = callout;
  *((_OWORD *)target + 10) = 0u;
  if (context)
  {
    long long v8 = *(_OWORD *)&context->version;
    long long v9 = *(_OWORD *)&context->retain;
    *((void *)target + 21) = context->copyDescription;
    *(_OWORD *)((char *)target + 136) = v8;
    *(_OWORD *)((char *)target + 152) = v9;
    retain = context->retain;
    if (retain) {
      *((void *)target + 18) = ((uint64_t (*)(void *))retain)(context->info);
    }
  }
  if (pthread_mutex_unlock(v6)) {
    SCNetworkReachabilitySetCallback_cold_1();
  }
  return 1;
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs)
    {
LABEL_11:
      _SCErrorSet(3001);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
    if (!prefs) {
      goto LABEL_11;
    }
  }
  uint64_t v6 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) != v6) {
    goto LABEL_11;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
  uint64_t v7 = (void (*)(void))*((void *)prefs + 31);
  if (v7) {
    v7(*((void *)prefs + 29));
  }
  *(_OWORD *)((char *)prefs + 232) = 0u;
  *((void *)prefs + 27) = callout;
  *(_OWORD *)((char *)prefs + 248) = 0u;
  if (context)
  {
    long long v8 = *(_OWORD *)&context->version;
    long long v9 = *(_OWORD *)&context->retain;
    *((void *)prefs + 32) = context->copyDescription;
    *((_OWORD *)prefs + 14) = v8;
    *((_OWORD *)prefs + 15) = v9;
    retain = context->retain;
    if (retain) {
      *((void *)prefs + 29) = ((uint64_t (*)(void *))retain)(context->info);
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)prefs + 16));
  return 1;
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithName(CFAllocatorRef allocator, const char *nodename)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (nodename && *nodename)
  {
    *(void *)&address.sa_len = 0;
    *(void *)&address.sa_data[6] = 0;
    int v22 = 0;
    uint64_t v21 = 0;
    if (_SC_string_to_sockaddr((char *)nodename, 0, (in_addr *)&address, 0x1CuLL))
    {
      return SCNetworkReachabilityCreateWithAddress(allocator, &address);
    }
    else
    {
      Private = __SCNetworkReachabilityCreatePrivate();
      CFRange v4 = (const __SCNetworkReachability *)Private;
      if (Private)
      {
        *((_DWORD *)Private + 20) = 2;
        *((void *)Private + 11) = nw_endpoint_create_host(nodename, "0");
        uint64_t v7 = __log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          uint64_t v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v7;
        }
        uint64_t v8 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
        {
          uint64_t v9 = _os_log_pack_size();
          uint64_t v17 = (char *)&v19
              - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v18 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v18 = 136315650;
          *(void *)(v18 + 4) = (char *)v4 + 193;
          *(_WORD *)(v18 + 12) = 2080;
          *(void *)(v18 + 14) = "create w/name";
          *(_WORD *)(v18 + 22) = 2112;
          *(void *)(v18 + 24) = v4;
          __SC_log_send(7, (uint64_t)v7, v8, v17);
        }
      }
    }
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
  return v4;
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = is_valid_address(&address->sa_len);
  if (!v2)
  {
    _SCErrorSet(1002);
    return 0;
  }
  uint64_t v3 = v2;
  Private = __SCNetworkReachabilityCreatePrivate();
  CFStringRef v5 = (const __SCNetworkReachability *)Private;
  if (Private)
  {
    *((_DWORD *)Private + 20) = 0;
    int v6 = v3[1];
    if (v6 == 30)
    {
      if (!*((_DWORD *)v3 + 2) && !*((_DWORD *)v3 + 3) && !*((_DWORD *)v3 + 4))
      {
        uint64_t v7 = v3 + 20;
LABEL_6:
        if (!*v7) {
          goto LABEL_13;
        }
      }
    }
    else if (v6 == 2)
    {
      uint64_t v7 = v3 + 4;
      goto LABEL_6;
    }
    *((void *)Private + 13) = nw_endpoint_create_address((const sockaddr *)v3);
LABEL_13:
    uint64_t v8 = __log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      uint64_t v8 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v8;
    }
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)v21 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 136315650;
      *(void *)(v19 + 4) = (char *)v5 + 193;
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = "create w/address";
      *(_WORD *)(v19 + 22) = 2112;
      *(void *)(v19 + 24) = v5;
      __SC_log_send(7, (uint64_t)v8, v9, v18);
    }
  }
  return v5;
}

char *__SCNetworkReachabilityCreatePrivate()
{
  if (__SCNetworkReachabilityInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  v1 = (char *)Instance;
  if (Instance)
  {
    if (pthread_mutex_init((pthread_mutex_t *)(Instance + 16), &lock_attr)) {
      __SCNetworkReachabilityCreatePrivate_cold_1();
    }
    if (_sc_log >= 1) {
      snprintf(v1 + 193, 0x20uLL, "[%p] ", v1);
    }
  }
  return v1;
}

unsigned __int8 *is_valid_address(unsigned __int8 *a1)
{
  v1 = a1;
  v38[1] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return v1;
  }
  unsigned int v2 = *a1;
  if (v2 > 0x80) {
    return 0;
  }
  int v3 = a1[1];
  if (v3 == 30)
  {
    if (v2 <= 0x1B)
    {
      if ((is_valid_address_warned & 1) == 0)
      {
        CFRange v4 = __log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          CFRange v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v4;
        }
        uint64_t v5 = _SC_syslog_os_log_mapping(4);
        if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
          goto LABEL_25;
        }
        uint64_t v18 = _os_log_pack_size();
        uint64_t v14 = (char *)v38 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        int v26 = *v1;
        *(_DWORD *)uint64_t v15 = 67109376;
        *(_DWORD *)(v15 + 4) = v26;
        *(_WORD *)(v15 + 8) = 2048;
        uint64_t v17 = 28;
LABEL_17:
        *(void *)(v15 + 10) = v17;
LABEL_24:
        __SC_log_send(4, (uint64_t)v4, v5, v14);
LABEL_25:
        v1 = 0;
        is_valid_address_warned = 1;
        return v1;
      }
      return 0;
    }
    return v1;
  }
  if (v3 != 2)
  {
    if ((is_valid_address_warned & 1) == 0)
    {
      CFRange v4 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFRange v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v4;
      }
      uint64_t v5 = _SC_syslog_os_log_mapping(4);
      if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
        goto LABEL_25;
      }
      uint64_t v27 = _os_log_pack_size();
      uint64_t v14 = (char *)v38 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      v35 = (_DWORD *)_os_log_pack_fill();
      int v36 = v1[1];
      _DWORD *v35 = 67109120;
      v35[1] = v36;
      goto LABEL_24;
    }
    return 0;
  }
  if (v2 <= 0xF)
  {
    if ((is_valid_address_warned & 1) == 0)
    {
      CFRange v4 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFRange v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v4;
      }
      uint64_t v5 = _SC_syslog_os_log_mapping(4);
      if (!__SC_log_enabled(4, v4, (os_log_type_t)v5)) {
        goto LABEL_25;
      }
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)v38 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      int v16 = *v1;
      *(_DWORD *)uint64_t v15 = 67109376;
      *(_DWORD *)(v15 + 4) = v16;
      *(_WORD *)(v15 + 8) = 2048;
      uint64_t v17 = 16;
      goto LABEL_17;
    }
    return 0;
  }
  return v1;
}

in_addr *_SC_string_to_sockaddr(char *a1, int a2, in_addr *a3, size_t a4)
{
  uint64_t v8 = a3;
  if (!a3)
  {
    a4 = 128;
    uint64_t v8 = (in_addr *)CFAllocatorAllocate(0, 128, 0);
  }
  bzero(v8, a4);
  BOOL v9 = a2 == 2 || a2 == 0;
  if (v9 && a4 >= 0x10 && inet_aton(a1, v8 + 1) == 1)
  {
    LOWORD(v8->s_addr) = 528;
    return v8;
  }
  BOOL v10 = a2 == 30 || a2 == 0;
  if (v10 && a4 >= 0x1C && inet_pton(30, a1, &v8[2]) == 1)
  {
    LOWORD(v8->s_addr) = 7708;
    uint64_t v11 = strchr(a1, 37);
    if (v11) {
      v8[6].s_addr = if_nametoindex(v11 + 1);
    }
    int s_addr_low = LOBYTE(v8[2].s_addr);
    if (s_addr_low == 255)
    {
      char v14 = BYTE1(v8[2].s_addr);
      if ((v14 & 0xF0) == 0x30 || (v14 & 0xF) != 2) {
        return v8;
      }
    }
    else if (s_addr_low != 254 || (BYTE1(v8[2].s_addr) & 0xC0) != 0x80)
    {
      return v8;
    }
    unsigned int s_addr_high = HIWORD(v8[2].s_addr);
    HIWORD(v8[2].s_addr) = 0;
    if (!v8[6].s_addr) {
      v8[6].s_addr = __rev16(s_addr_high);
    }
  }
  else
  {
    if (v8 != a3) {
      CFAllocatorDeallocate(0, v8);
    }
    return 0;
  }
  return v8;
}

CFArrayRef _SCNetworkProxiesCopyMatchingInternal(const void *a1, __CFString *a2, const __CFString *Value, const __CFDictionary *a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    goto LABEL_60;
  }
  CFTypeRef cf = 0;
  memset(uu, 0, sizeof(uu));
  values = 0;
  uuid_clear(uu);
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == v9)
  {
    CFDictionaryRef Value = (const __CFString *)CFDictionaryGetValue(a4, @"Interface");
    CFTypeID v10 = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) != v10) {
      CFDictionaryRef Value = 0;
    }
    a2 = (__CFString *)CFDictionaryGetValue(a4, @"Server");
    CFTypeID v11 = CFStringGetTypeID();
    if (a2 && CFGetTypeID(a2) != v11) {
      a2 = 0;
    }
    CFUUIDRef v12 = (const __CFUUID *)CFDictionaryGetValue(a4, @"UUID");
    CFTypeID v13 = CFUUIDGetTypeID();
    if (v12 && CFGetTypeID(v12) == v13)
    {
      CFUUIDBytes v49 = CFUUIDGetUUIDBytes(v12);
      uuid_copy(uu, &v49.byte0);
    }
  }
  if (Value)
  {
    CFTypeID v14 = CFStringGetTypeID();
    if (CFGetTypeID(Value) == v14 && CFStringGetLength(Value))
    {
      uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)a1, @"__SCOPED__");
      if (v15)
      {
        int v16 = v15;
        CFTypeID v17 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v16) != v17) {
          goto LABEL_21;
        }
        Copy = (void *)CFDictionaryGetValue((CFDictionaryRef)v16, Value);
        values = Copy;
        if (!Copy)
        {
          _SCErrorSet(0);
          return (CFArrayRef)Copy;
        }
        CFTypeID v19 = CFDictionaryGetTypeID();
        if (CFGetTypeID(Copy) != v19)
        {
LABEL_21:
          int v20 = 1001;
LABEL_61:
          _SCErrorSet(v20);
          return 0;
        }
        return CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      }
      if (CFDictionaryContainsKey((CFDictionaryRef)a1, @"BypassAllowed")
        && (ne_session_always_on_vpn_configs_present() & 1) != 0)
      {
LABEL_56:
        CFStringRef v28 = 0;
        goto LABEL_57;
      }
LABEL_60:
      int v20 = 0;
      goto LABEL_61;
    }
LABEL_52:
    int v20 = 1002;
    goto LABEL_61;
  }
  int valuePtr = VPNAppLayerGetMatchingServiceIdentifier(0, uu);
  if (valuePtr >= 1)
  {
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"__SERVICES__");
    if (!v21) {
      goto LABEL_64;
    }
    CFDictionaryRef v22 = v21;
    CFTypeID v23 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v22) == v23)
    {
      CFNumberRef v24 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
      values = (void *)CFDictionaryGetValue(v22, v24);
      CFRelease(v24);
      uint64_t v25 = values;
      if (!values)
      {
        LODWORD(v21) = 0;
LABEL_64:
        _SCErrorSet((int)v21);
        values = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
        Copy = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
        v47 = values;
LABEL_65:
        CFRelease(v47);
        return (CFArrayRef)Copy;
      }
      CFTypeID v26 = CFDictionaryGetTypeID();
      if (CFGetTypeID(v25) == v26) {
        return CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
      }
    }
    LODWORD(v21) = 1001;
    goto LABEL_64;
  }
  if (!a2) {
    goto LABEL_56;
  }
  CFStringRef v27 = _SC_trimDomain(a2);
  if (!v27) {
    goto LABEL_52;
  }
  CFStringRef v28 = v27;
  CFIndex Length = CFStringGetLength(v27);
  uint64_t v30 = CFDictionaryGetValue((CFDictionaryRef)a1, @"__SUPPLEMENTAL__");
  if (!v30) {
    goto LABEL_57;
  }
  uint64_t v31 = v30;
  CFTypeID v32 = CFArrayGetTypeID();
  if (CFGetTypeID(v31) != v32)
  {
    _SCErrorSet(1001);
    Copy = 0;
    goto LABEL_59;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v31);
  if (Count < 1) {
    goto LABEL_57;
  }
  CFIndex v34 = Count;
  CFArrayRef Mutable = 0;
  for (CFIndex i = 0; i != v34; ++i)
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v31, i);
    values = ValueAtIndex;
    CFTypeID v38 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v38)
      {
        CFStringRef v39 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)values, @"__MATCH_DOMAIN__");
        CFTypeID v40 = CFStringGetTypeID();
        if (v39)
        {
          if (CFGetTypeID(v39) == v40)
          {
            CFIndex v41 = CFStringGetLength(v39);
            if (v41 < 1
              || (CFIndex v42 = v41, v56.location = 0,
                             v56.length = Length,
                             CFStringFindWithOptions(v28, v39, v56, 0xDuLL, 0))
              && (Length <= v42
               || (v57.location = 0,
                   v57.length = Length - v42,
                   CFStringFindWithOptions(v28, @".", v57, 0xDuLL, 0))))
            {
              if (!Mutable) {
                CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              }
              CFIndex v43 = CFArrayGetCount(Mutable);
              CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)values);
              CFTypeRef cf = MutableCopy;
              CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, @"__MATCH_DOMAIN__");
              if (v43)
              {
                v55.location = 0;
                v55.length = v43;
                if (CFArrayContainsValue(Mutable, v55, MutableCopy))
                {
LABEL_48:
                  CFRelease(cf);
                  continue;
                }
                CFMutableStringRef MutableCopy = (void *)cf;
              }
              CFArrayAppendValue(Mutable, MutableCopy);
              goto LABEL_48;
            }
          }
        }
      }
    }
  }
  if (Mutable)
  {
    Copy = CFArrayCreateCopy(0, Mutable);
    CFTypeRef v45 = Mutable;
    goto LABEL_58;
  }
LABEL_57:
  CFMutableDictionaryRef v46 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a1);
  CFTypeRef cf = v46;
  CFDictionaryRemoveValue(v46, @"__SCOPED__");
  CFDictionaryRemoveValue(v46, @"__SERVICES__");
  CFDictionaryRemoveValue(v46, @"__SUPPLEMENTAL__");
  Copy = CFArrayCreate(0, &cf, 1, MEMORY[0x1E4F1D510]);
  CFTypeRef v45 = cf;
LABEL_58:
  CFRelease(v45);
  if (v28)
  {
LABEL_59:
    v47 = (void *)v28;
    goto LABEL_65;
  }
  return (CFArrayRef)Copy;
}

CFStringRef _SCCopyDescription(const void *a1, const __CFDictionary *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = 0;
  value = 0;
  CFTypeID v4 = CFGetTypeID(a1);
  if (!a2 || !CFDictionaryGetValueIfPresent(a2, @"PREFIX1", (const void **)&value)) {
    value = &stru_1EDD23408;
  }
  if (v4 == CFStringGetTypeID()) {
    return CFStringCreateWithFormat(0, a2, @"%@%@", value, a1);
  }
  if (v4 == CFBooleanGetTypeID())
  {
    uint64_t v6 = value;
    int v7 = CFBooleanGetValue((CFBooleanRef)a1);
    uint64_t v8 = "TRUE";
    if (!v7) {
      uint64_t v8 = "FALSE";
    }
    return CFStringCreateWithFormat(0, a2, @"%@%s", v6, v8);
  }
  if (v4 != CFDataGetTypeID())
  {
    if (v4 != CFNumberGetTypeID())
    {
      if (v4 == CFDateGetTypeID())
      {
        LODWORD(v55) = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        unsigned int v50 = 0;
        uint64_t v15 = CFCalendarCreateWithIdentifier(0, (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
        CFTimeZoneRef v16 = CFTimeZoneCopySystem();
        CFCalendarSetTimeZone(v15, v16);
        CFRelease(v16);
        MEMORY[0x192FA6C50](a1);
        CFCalendarDecomposeAbsoluteTime(v15, v17, "MdyHms", &v55, (char *)&v52 + 4, &v52, (char *)&v51 + 4, &v51, &v50);
        CFRelease(v15);
        return CFStringCreateWithFormat(0, a2, @"%@%02d/%02d/%04d %02d:%02d:%02d", value, v55, HIDWORD(v52), v52, HIDWORD(v51), v51, v50);
      }
      if (a2)
      {
        if (!CFDictionaryGetValueIfPresent(a2, @"PREFIX2", (const void **)&v53)) {
          uint64_t v53 = value;
        }
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a2);
      }
      else
      {
        uint64_t v53 = value;
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFTypeID v19 = MutableCopy;
      if (!MutableCopy) {
        _SCCopyDescription_cold_1();
      }
      if (v4 == CFArrayGetTypeID())
      {
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        CFArrayRef Mutable = CFStringCreateMutable(0, 0);
        CFStringAppendFormat(Mutable, a2, @"%@<array> {", value);
        CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
        if (Count < 1) {
          goto LABEL_51;
        }
        CFIndex v21 = Count;
        CFDictionaryRef v22 = (unint64_t)Count < 0x21
            ? (const void **)&v55
            : (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
        v72.location = 0;
        v72.length = v21;
        CFArrayGetValues((CFArrayRef)a1, v72, v22);
        for (uint64_t i = 0; i != v21; ++i)
        {
          CFStringRef v27 = CFStringCreateWithFormat(0, 0, @"%ld", i);
          CFStringRef v28 = CFStringCreateMutable(0, 0);
          CFStringAppendFormat(v28, a2, @"%@  %@ : ", v53, v27);
          uint64_t v29 = CFStringCreateMutable(0, 0);
          CFStringAppendFormat(v29, a2, @"%@  ", v53);
          CFDictionarySetValue(v19, @"PREFIX1", v28);
          CFDictionarySetValue(v19, @"PREFIX2", v29);
          CFRelease(v28);
          CFRelease(v29);
          CFRelease(v27);
          uint64_t v30 = (const void *)_SCCopyDescription(v22[i], v19);
          CFStringAppendFormat(Mutable, a2, @"\n%@", v30);
          CFRelease(v30);
        }
        if (v22 == (const void **)&v55) {
          goto LABEL_51;
        }
        uint64_t v31 = v22;
LABEL_50:
        CFAllocatorDeallocate(0, v31);
LABEL_51:
        CFStringAppendFormat(Mutable, a2, @"\n%@}", v53);
        CFRelease(v19);
        return Mutable;
      }
      if (v4 == CFDictionaryGetTypeID())
      {
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        CFArrayRef Mutable = CFStringCreateMutable(0, 0);
        CFStringAppendFormat(Mutable, a2, @"%@<dictionary> {", value);
        CFIndex v23 = CFDictionaryGetCount((CFDictionaryRef)a1);
        if (v23 < 1) {
          goto LABEL_51;
        }
        CFIndex v24 = v23;
        if ((unint64_t)v23 < 0x21) {
          uint64_t v25 = (const void **)&v55;
        }
        else {
          uint64_t v25 = (const void **)CFAllocatorAllocate(0, 8 * v23, 0);
        }
        CFDictionaryGetKeysAndValues((CFDictionaryRef)a1, v25, 0);
        CFTypeID v32 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        for (uint64_t j = 0; j != v24; ++j)
          CFArrayAppendValue(v32, v25[j]);
        CFIndex v34 = isA_CFString(*v25);
        v35 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFString;
        if (v34
          || (int v36 = isA_CFNumber(*v25),
              v35 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFNumber,
              v36)
          || (uint64_t v37 = isA_CFDate(*v25),
              v35 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))compare_CFDate,
              v37))
        {
          v73.location = 0;
          v73.length = v24;
          CFArraySortValues(v32, v73, v35, 0);
        }
        ptr = v25;
        CFUUIDBytes v49 = v32;
        CFIndex v38 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v32, v38);
          uint64_t v40 = _SCCopyDescription(ValueAtIndex, 0);
          CFIndex v41 = v24;
          CFIndex v42 = CFStringCreateMutable(0, 0);
          CFStringAppendFormat(v42, a2, @"%@  %@ : ", v53, v40);
          CFIndex v43 = CFStringCreateMutable(0, 0);
          CFStringAppendFormat(v43, a2, @"%@  ", v53);
          CFDictionarySetValue(v19, @"PREFIX1", v42);
          CFDictionarySetValue(v19, @"PREFIX2", v43);
          uint64_t v44 = v42;
          CFIndex v24 = v41;
          CFRelease(v44);
          CFRelease(v43);
          CFTypeRef v45 = (const void *)v40;
          CFTypeID v32 = v49;
          CFRelease(v45);
          CFMutableDictionaryRef v46 = CFDictionaryGetValue((CFDictionaryRef)a1, ValueAtIndex);
          v47 = (const void *)_SCCopyDescription(v46, v19);
          CFStringAppendFormat(Mutable, a2, @"\n%@", v47);
          CFRelease(v47);
          ++v38;
        }
        while (v41 != v38);
        CFRelease(v49);
        uint64_t v31 = ptr;
        if (ptr == (const void **)&v55) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      CFRelease(v19);
    }
    return CFStringCreateWithFormat(0, a2, @"%@%@", value, a1);
  }
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, a2, @"%@<data> 0x", value);
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  CFIndex Length = CFDataGetLength((CFDataRef)a1);
  if (Length >= 1)
  {
    CFIndex v13 = Length;
    do
    {
      unsigned int v14 = *BytePtr++;
      CFStringAppendFormat(Mutable, 0, @"%02x", v14);
      --v13;
    }
    while (v13);
  }
  return Mutable;
}

void SCPrint(int a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1) {
    __SCPrint(a2, a3, (uint64_t)&a9, 0, 0);
  }
}

void __SCPrint(FILE *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  v12[0] = 0;
  CFStringRef v8 = (const __CFString *)_CFStringCreateWithFormatAndArgumentsAux();
  CFTypeID v9 = _SC_cfstring_to_cstring_ext(v8, 0, 0, 0x8000100u, 0x3Fu, v12);
  CFRelease(v8);
  if (v9)
  {
    pthread_mutex_lock(&lock);
    if (a4)
    {
      memset(&v11, 0, sizeof(v11));
      v10.tv_sec = 0;
      *(void *)&v10.tv_usec = 0;
      gettimeofday(&v10, 0);
      localtime_r(&v10.tv_sec, &v11);
      fprintf(a1, "%2d:%02d:%02d.%03d ", v11.tm_hour, v11.tm_min, v11.tm_sec, v10.tv_usec / 1000);
    }
    fwrite(v9, v12[0], 1uLL, a1);
    if (a5) {
      fputc(10, a1);
    }
    fflush(a1);
    pthread_mutex_unlock(&lock);
    CFAllocatorDeallocate(0, v9);
  }
}

UInt8 *_SC_cfstring_to_cstring_ext(const __CFString *a1, UInt8 *a2, CFIndex a3, CFStringEncoding a4, UInt8 a5, void *a6)
{
  usedBufLen[1] = *MEMORY[0x1E4F143B8];
  usedBufLen[0] = 0;
  if (a1) {
    CFStringRef v11 = a1;
  }
  else {
    CFStringRef v11 = &stru_1EDD23408;
  }
  CFIndex Length = CFStringGetLength(v11);
  v15.location = 0;
  v15.length = Length;
  if (CFStringGetBytes(v11, v15, a4, a5, 0, 0, 0, usedBufLen) < Length)
  {
    if (!a2) {
      return a2;
    }
    goto LABEL_9;
  }
  if (a2)
  {
    if (usedBufLen[0] >= a3)
    {
LABEL_9:
      *a2 = 0;
      return 0;
    }
  }
  else
  {
    a3 = usedBufLen[0] + 1;
    a2 = (UInt8 *)CFAllocatorAllocate(0, usedBufLen[0] + 1, 0);
    if (!a2) {
      return a2;
    }
  }
  v16.location = 0;
  v16.length = Length;
  CFStringGetBytes(v11, v16, a4, a5, 0, a2, a3, usedBufLen);
  a2[usedBufLen[0]] = 0;
  if (a6) {
    *a6 = usedBufLen[0];
  }
  return a2;
}

CFMutableStringRef _SC_trimDomain(CFMutableStringRef MutableCopy)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (MutableCopy)
  {
    if (CFGetTypeID(MutableCopy) != TypeID) {
      return 0;
    }
    uint64_t Length = CFStringGetLength(MutableCopy);
    if (Length >= 1
      && ((v5.location = 0, v5.length = 1, CFStringFindWithOptions(MutableCopy, @".", v5, 8uLL, 0))
       || (v6.location = 0, v6.length = Length, CFStringFindWithOptions(MutableCopy, @".", v6, 0xCuLL, 0))))
    {
      CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(0, 0, MutableCopy);
      CFStringTrim(MutableCopy, @".");
      if (!CFStringGetLength(MutableCopy)) {
        goto LABEL_9;
      }
    }
    else
    {
      CFRetain(MutableCopy);
      if (!Length)
      {
LABEL_9:
        CFRelease(MutableCopy);
        return 0;
      }
    }
  }
  return MutableCopy;
}

uint64_t VPNAppLayerGetMatchingServiceIdentifier(int a1, const unsigned __int8 *a2)
{
  if (!ne_session_app_vpn_configs_present()) {
    return 0xFFFFFFFFLL;
  }
  CFTypeID v4 = (void *)copy_path_for_app(g_null_audit, a1, a2, 0, 0, 0);
  if (v4 && nw_path_is_flow_divert()) {
    uint64_t flow_divert_unit = nw_path_get_flow_divert_unit();
  }
  else {
    uint64_t flow_divert_unit = 0xFFFFFFFFLL;
  }
  nw_release(v4);
  return flow_divert_unit;
}

uint64_t __SCDynamicStoreCreatePrivate(uint64_t a1, const void *a2, uint64_t a3, long long *a4)
{
  return __SCDynamicStoreCreateInternal(a1, a2, a3, a4, 0);
}

CFArrayRef SCNetworkSetGetServiceOrder(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_12:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_12;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_12;
  }
  CFArrayRef result = (CFArrayRef)SCPreferencesPathKeyCreateSetNetworkGlobalEntity(0, *((void *)set + 2), @"IPv4");
  if (!result) {
    return result;
  }
  CFArrayRef v4 = result;
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), (CFStringRef)result);
  CFRelease(v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(Value, @"ServiceOrder");
  CFTypeID v8 = CFArrayGetTypeID();
  if (!v7) {
    return 0;
  }
  if (CFGetTypeID(v7) == v8) {
    return v7;
  }
  else {
    return 0;
  }
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkGlobalEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Global", a3, *MEMORY[0x1E4F143B8]);
}

void __SCPreferencesDeallocate(uint64_t a1)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    uint64_t v2 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v2;
  }
  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    _os_log_pack_size();
    CFArrayRef v4 = (char *)v23 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v5 + 4) = a1;
    __SC_log_send(7, (uint64_t)v2, v3, v4);
  }
  if (*(unsigned char *)(a1 + 112)) {
    __SCPreferencesUpdateLockedState(a1, 0);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 288);
  if (v6)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v6 + 296), *(const void **)(a1 + 88));
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    CFRelease(*(CFTypeRef *)(a1 + 288));
  }
  CFArrayRef v7 = *(const void **)(a1 + 296);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeID v8 = *(const void **)(a1 + 80);
  if (v8) {
    CFRelease(v8);
  }
  CFTypeID v9 = *(const void **)(a1 + 88);
  if (v9) {
    CFRelease(v9);
  }
  timeval v10 = *(const void **)(a1 + 96);
  if (v10) {
    CFRelease(v10);
  }
  CFStringRef v11 = *(void **)(a1 + 104);
  if (v11) {
    CFAllocatorDeallocate(0, v11);
  }
  int v12 = *(_DWORD *)(a1 + 116);
  if (v12 != -1)
  {
    if (*(void *)(a1 + 120))
    {
      unlink(*(const char **)(a1 + 120));
      int v12 = *(_DWORD *)(a1 + 116);
    }
    close(v12);
  }
  CFIndex v13 = *(void **)(a1 + 120);
  if (v13) {
    CFAllocatorDeallocate(0, v13);
  }
  unsigned int v14 = *(const void **)(a1 + 144);
  if (v14) {
    CFRelease(v14);
  }
  CFRange v15 = *(const void **)(a1 + 160);
  if (v15) {
    CFRelease(v15);
  }
  CFRange v16 = *(const void **)(a1 + 176);
  if (v16) {
    CFRelease(v16);
  }
  CFAbsoluteTime v17 = *(const void **)(a1 + 184);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 192);
  if (v18) {
    CFRelease(v18);
  }
  CFTypeID v19 = *(void (**)(void))(a1 + 248);
  if (v19) {
    v19(*(void *)(a1 + 232));
  }
  int v20 = *(const void **)(a1 + 280);
  if (v20) {
    CFRelease(v20);
  }
  CFIndex v21 = *(const void **)(a1 + 312);
  if (v21) {
    CFRelease(v21);
  }
  mach_port_t v22 = *(_DWORD *)(a1 + 320);
  if (v22)
  {
    _SCHelperExec(v22, 107, 0, 0, 0);
    _SCHelperClose((mach_port_t *)(a1 + 320));
  }
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (__SCPreferencesInitialize_initialized == -1)
  {
    if (!prefs) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
    if (!prefs) {
      goto LABEL_19;
    }
  }
  uint64_t v2 = __kSCPreferencesTypeID;
  if (CFGetTypeID(prefs) == v2)
  {
    uint64_t v3 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      CFIndex v13 = (char *)&v19 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = *((void *)prefs + 13);
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v15;
      __SC_log_send(7, (uint64_t)v3, v4, v13);
    }
    if (*((void *)prefs + 39))
    {
      HIDWORD(v19) = 0;
      mach_port_t v16 = *((_DWORD *)prefs + 80);
      if (v16)
      {
        if (!_SCHelperExec(v16, 108, 0, (_DWORD *)&v19 + 1, 0) && *((_DWORD *)prefs + 80)) {
          _SCHelperClose((mach_port_t *)prefs + 80);
        }
      }
    }
    CFAbsoluteTime v17 = (const void *)*((void *)prefs + 35);
    if (v17)
    {
      CFRelease(v17);
      *((void *)prefs + 35) = 0;
    }
    uint64_t v18 = (const void *)*((void *)prefs + 18);
    if (v18)
    {
      CFRelease(v18);
      *((void *)prefs + 18) = 0;
    }
    *((_WORD *)prefs + 152) = 0;
    return;
  }
LABEL_19:

  _SCErrorSet(3001);
}

Boolean SCNetworkReachabilityScheduleWithRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  context.version = 0;
  context.info = target;
  context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
  context.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))reachRLSCopyDescription;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x1E4F1C238];
  context.schedule = 0;
  context.cancel = 0;
  context.hash = (CFHashCode (__cdecl *)(const void *))MEMORY[0x1E4F1C240];
  context.perform = (void (__cdecl *)(void *))reachPerform;
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = __kSCNetworkReachabilityTypeID;
  CFTypeID v7 = CFGetTypeID(target);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_15;
  }
  if (pthread_mutex_lock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilityScheduleWithRunLoop_cold_4();
  }
  if (*((unsigned char *)target + 112))
  {
    if (*((void *)target + 15))
    {
      CFArrayRef v8 = (const __CFArray *)*((void *)target + 22);
      if (v8)
      {
        if (!_SC_isScheduled(0, runLoop, runLoopMode, v8)) {
          CFRunLoopAddSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
        }
        _SC_schedule(target, runLoop, runLoopMode, *((CFMutableArrayRef *)target + 22));
        if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
          SCNetworkReachabilityScheduleWithRunLoop_cold_3();
        }
        LOBYTE(v9) = 1;
        return v9;
      }
    }
    if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
      SCNetworkReachabilityScheduleWithRunLoop_cold_2();
    }
LABEL_15:
    _SCErrorSet(1002);
    LOBYTE(v9) = 0;
    return v9;
  }
  *((void *)target + 15) = CFRunLoopSourceCreate(0, 0, &context);
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *((void *)target + 22) = Mutable;
  if (!_SC_isScheduled(0, runLoop, runLoopMode, Mutable)) {
    CFRunLoopAddSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
  }
  _SC_schedule(target, runLoop, runLoopMode, *((CFMutableArrayRef *)target + 22));
  if (_callback_queue_once != -1) {
    dispatch_once(&_callback_queue_once, &__block_literal_global_127);
  }
  int v9 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, _callback_queue_q);
  if (!v9 && _SC_unschedule(target, runLoop, runLoopMode, *((CFArrayRef *)target + 22), 0))
  {
    if (CFArrayGetCount(*((CFArrayRef *)target + 22)))
    {
      if (!_SC_isScheduled(0, runLoop, runLoopMode, *((CFArrayRef *)target + 22))) {
        CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
      }
    }
    else
    {
      CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
      CFRelease(*((CFTypeRef *)target + 22));
      *((void *)target + 22) = 0;
      CFRunLoopSourceInvalidate(*((CFRunLoopSourceRef *)target + 15));
      CFRelease(*((CFTypeRef *)target + 15));
      *((void *)target + 15) = 0;
    }
  }
  if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilityScheduleWithRunLoop_cold_1();
  }
  return v9;
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_8;
    }
  }
  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(target) != v4) {
    goto LABEL_8;
  }
  if (pthread_mutex_lock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilitySetDispatchQueue_cold_2();
  }
  Boolean v5 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, queue);
  if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilitySetDispatchQueue_cold_1();
  }
  return v5;
}

uint64_t __SCNetworkReachabilitySetDispatchQueue(uint64_t a1, NSObject *a2)
{
  block[17] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 184);
  if (!a2)
  {
    if (v3 && *(unsigned char *)(a1 + 112))
    {
      *(_WORD *)(a1 + 112) = 0;
      nw_path_evaluator_cancel();
      *(void *)(a1 + 240) = 0;
      nw_release(*(void **)(a1 + 248));
      *(void *)(a1 + 248) = 0;
      nw_release(*(void **)(a1 + 256));
      *(void *)(a1 + 256) = 0;
      nw_release(*(void **)(a1 + 280));
      *(void *)(a1 + 280) = 0;
      uint64_t v19 = *(void *)(a1 + 264);
      if (v19)
      {
        nw_retain(*(void **)(a1 + 264));
        uint64_t v20 = *(NSObject **)(a1 + 184);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke_3;
        block[3] = &__block_descriptor_tmp_135_0;
        block[4] = v19;
        dispatch_async(v20, block);
      }
      CFIndex v21 = *(NSObject **)(a1 + 184);
      if (v21)
      {
        dispatch_release(v21);
        *(void *)(a1 + 184) = 0;
      }
      mach_port_t v22 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        mach_port_t v22 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v22;
      }
      uint64_t v23 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v22, (os_log_type_t)v23))
      {
        uint64_t v24 = _os_log_pack_size();
        CFTypeID v32 = (char *)block
            - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v33 = 136315138;
        *(void *)(v33 + 4) = a1 + 193;
        __SC_log_send(7, (uint64_t)v22, v23, v32);
        return 1;
      }
      return 1;
    }
LABEL_22:
    _SCErrorSet(1002);
    return 0;
  }
  if (v3 || *(unsigned char *)(a1 + 112)) {
    goto LABEL_22;
  }
  Boolean v5 = __log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    Boolean v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v5;
  }
  uint64_t v6 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
  {
    uint64_t v7 = _os_log_pack_size();
    uint64_t v15 = (char *)block - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = a1 + 193;
    __SC_log_send(7, (uint64_t)v5, v6, v15);
  }
  dispatch_retain(a2);
  nw_path_evaluator_cancel();
  unsigned int v17 = *(_DWORD *)(a1 + 80);
  if (v17 < 2 || v17 == 3)
  {
    uint64_t v18 = (NSObject **)(a1 + 104);
    goto LABEL_24;
  }
  if (v17 == 2)
  {
    uint64_t v18 = (NSObject **)(a1 + 88);
LABEL_24:
    v35 = *v18;
    goto LABEL_25;
  }
  v35 = 0;
LABEL_25:
  evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
  *(void *)(a1 + 240) = evaluator_for_endpoint;
  *(void *)(a1 + 184) = a2;
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 113) = *(_DWORD *)(a1 + 80) < 2u;
  nw_release(*(void **)(a1 + 248));
  uint64_t v37 = nw_path_evaluator_copy_path();
  *(void *)(a1 + 248) = v37;
  if (*(_DWORD *)(a1 + 80) <= 1u)
  {
    CrazyIvan46Path = __SCNetworkReachabilityCreateCrazyIvan46Path(v37, v35, *(NSObject **)(a1 + 232), 0);
    if (CrazyIvan46Path)
    {
      CFStringRef v39 = CrazyIvan46Path;
      nw_release(*(void **)(a1 + 248));
      *(void *)(a1 + 248) = v39;
    }
  }
  nw_release(*(void **)(a1 + 256));
  *(void *)(a1 + 256) = nw_path_copy_derived_parameters();
  *(_DWORD *)(a1 + 272) = 0;
  nw_release(*(void **)(a1 + 280));
  *(void *)(a1 + 280) = 0;
  __SCNetworkReachabilityRestartResolver((void **)a1, (uint64_t)"Scheduled, start DNS");
  CFRetain((CFTypeRef)a1);
  block[11] = MEMORY[0x1E4F143A8];
  block[12] = 0x40000000;
  block[13] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke;
  block[14] = &__block_descriptor_tmp_130;
  block[15] = a1;
  block[16] = evaluator_for_endpoint;
  nw_path_evaluator_set_cancel_handler();
  block[5] = MEMORY[0x1E4F143A8];
  block[6] = 0x40000000;
  block[7] = ____SCNetworkReachabilitySetDispatchQueue_block_invoke_2;
  block[8] = &__block_descriptor_tmp_134_0;
  block[9] = a1;
  block[10] = v35;
  if ((nw_path_evaluator_set_update_handler() & 1) == 0)
  {
    *(void *)(a1 + 240) = 0;
    nw_release(evaluator_for_endpoint);
    CFRelease((CFTypeRef)a1);
  }
  return 1;
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!target)
    {
LABEL_21:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!target) {
      goto LABEL_21;
    }
  }
  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(target) != v4) {
    goto LABEL_21;
  }
  if (pthread_mutex_lock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilityGetFlags_cold_2();
  }
  if (!*((unsigned char *)target + 112))
  {
    unsigned int v5 = *((_DWORD *)target + 20);
    if (v5 < 2 || v5 == 3)
    {
      uint64_t v6 = (NSObject **)((char *)target + 104);
    }
    else
    {
      if (v5 != 2)
      {
        uint64_t v7 = 0;
LABEL_14:
        evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
        uint64_t v9 = nw_path_evaluator_copy_path();
        uint64_t v10 = v9;
        if (*((_DWORD *)target + 20) <= 1u)
        {
          CrazyIvan46Path = __SCNetworkReachabilityCreateCrazyIvan46Path(v9, v7, *((NSObject **)target + 29), 0);
          if (CrazyIvan46Path)
          {
            uint64_t v12 = CrazyIvan46Path;
            nw_release(v10);
            uint64_t v10 = v12;
          }
        }
        *flags = __SCNetworkReachabilityGetFlagsFromPath((uint64_t)target + 193, (uint64_t)"GetFlags", v10, 0, 0, 0, 0, 0);
        nw_release(v10);
        nw_release(evaluator_for_endpoint);
        goto LABEL_18;
      }
      uint64_t v6 = (NSObject **)((char *)target + 88);
    }
    uint64_t v7 = *v6;
    goto LABEL_14;
  }
  *flags = __SCNetworkReachabilityGetFlagsFromPath((uint64_t)target + 193, (uint64_t)"GetFlags", *((nw_path_t *)target + 31), *((_DWORD *)target + 20), *((_DWORD *)target + 68), *((void *)target + 35), *((unsigned __int8 *)target + 288), *((_DWORD *)target + 73));
  *((unsigned char *)target + 113) = 1;
LABEL_18:
  if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilityGetFlags_cold_1();
  }
  return 1;
}

NSObject *__SCNetworkReachabilityCreateCrazyIvan46Path(NSObject *a1, NSObject *a2, NSObject *a3, int a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  nw_path_status_t status = nw_path_get_status(a1);
  uint64_t v8 = 0;
  if (!a2 || status != nw_path_status_unsatisfied) {
    return v8;
  }
  if (nw_endpoint_get_type(a2) != nw_endpoint_type_address || nw_endpoint_get_address(a2)->sa_family != 2) {
    return 0;
  }
  if (a4)
  {
    int required_interface_index = 0;
    uint64_t v29 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    __memcpy_chk();
    if (a3) {
      int required_interface_index = nw_parameters_get_required_interface_index();
    }
    if ((int)nw_nat64_copy_prefixes() >= 1)
    {
      *(void *)&address[4] = 0;
      *(void *)&address[12] = 0;
      uint64_t v32 = 0;
      *(_WORD *)sockaddr address = 7708;
      *(_WORD *)&address[2] = __rev16(nw_endpoint_get_port(a2));
      nw_nat64_synthesize_v6();
      nw_endpoint_t v9 = nw_endpoint_create_address((const sockaddr *)address);
      evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
      uint64_t v8 = nw_path_evaluator_copy_path();
      if (nw_path_get_status(v8) == nw_path_status_unsatisfied)
      {
        nw_release(v8);
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v13 = __log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v13;
        }
        uint64_t v14 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
        {
          uint64_t v15 = _os_log_pack_size();
          uint64_t v23 = (char *)&v29
              - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v13, v14, v23);
        }
      }
      nw_release(evaluator_for_endpoint);
      nw_release(v9);
      free(v29);
      return v8;
    }
    return 0;
  }
  if (a3) {
    nw_parameters_t v12 = nw_parameters_copy(a3);
  }
  else {
    nw_parameters_t v12 = nw_parameters_create();
  }
  nw_parameters_t v24 = v12;
  nw_parameters_set_required_address_family();
  uint64_t v25 = (void *)nw_path_create_evaluator_for_endpoint();
  uint64_t v8 = nw_path_evaluator_copy_path();
  if (nw_path_get_status(v8) == nw_path_status_unsatisfied)
  {
    nw_release(v8);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v26 = __log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      uint64_t v26 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v26;
    }
    uint64_t v27 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v26, (os_log_type_t)v27))
    {
      _os_log_pack_size();
      uint64_t v28 = (char *)&v29 - ((((uint64_t (*)(void))MEMORY[0x1F4188790])() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v26, v27, v28);
    }
  }
  nw_release(v25);
  nw_release(v24);
  return v8;
}

void __SCNetworkReachabilityRestartResolver(void **cf, uint64_t a2)
{
  block[5] = *MEMORY[0x1E4F143B8];
  if (cf && !*((unsigned char *)cf + 192) && *((_DWORD *)cf + 20) >= 2u)
  {
    CFRetain(cf);
    uint64_t v4 = cf[33];
    if (v4)
    {
      nw_retain(cf[33]);
      unsigned int v5 = cf[23];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ____SCNetworkReachabilityRestartResolver_block_invoke;
      block[3] = &__block_descriptor_tmp_136;
      block[4] = v4;
      dispatch_async(v5, block);
    }
    if (cf[31]) {
      uint64_t v6 = nw_resolver_create_with_path();
    }
    else {
      uint64_t v6 = nw_resolver_create_with_endpoint();
    }
    uint64_t v7 = (void *)v6;
    if (v6)
    {
      cf[33] = (void *)v6;
      v20[6] = MEMORY[0x1E4F143A8];
      v20[7] = 0x40000000;
      v20[8] = ____SCNetworkReachabilityRestartResolver_block_invoke_137;
      v20[9] = &__block_descriptor_tmp_138_0;
      v20[10] = cf;
      v20[11] = v6;
      nw_resolver_set_cancel_handler();
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      void v20[2] = ____SCNetworkReachabilityRestartResolver_block_invoke_2;
      v20[3] = &__block_descriptor_tmp_143;
      v20[4] = cf;
      v20[5] = a2;
      if (nw_resolver_set_update_handler()) {
        return;
      }
      nw_release(v7);
    }
    else
    {
      uint64_t v8 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v8 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v8;
      }
      uint64_t v9 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v8, (os_log_type_t)v9))
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v18 = (char *)v20 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = (char *)cf + 193;
        __SC_log_send(3, (uint64_t)v8, v9, v18);
      }
    }
    cf[33] = 0;
    CFRelease(cf);
  }
}

char *_SC_sockaddr_to_string(uint64_t a1, void *a2, unint64_t a3)
{
  bzero(a2, a3);
  int v6 = *(unsigned __int8 *)(a1 + 1);
  if (v6 == 30)
  {
    CFArrayRef result = (char *)inet_ntop(30, (const void *)(a1 + 8), (char *)a2, a3);
    if (*(_DWORD *)(a1 + 24))
    {
      CFArrayRef result = (char *)strlen((const char *)a2);
      if ((unint64_t)(result + 17) <= a3)
      {
        result[(void)a2] = 37;
        uint64_t v8 = &result[(void)a2 + 1];
        unsigned int v9 = *(_DWORD *)(a1 + 24);
        return if_indextoname(v9, v8);
      }
    }
  }
  else if (v6 == 2)
  {
    return (char *)inet_ntop(2, (const void *)(a1 + 4), (char *)a2, a3);
  }
  else
  {
    return (char *)snprintf((char *)a2, a3, "unexpected address family %d", *(unsigned __int8 *)(a1 + 1));
  }
  return result;
}

CFArrayRef SCNetworkSetCopyServices(SCNetworkSetRef set)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_34:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_34;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_34;
  }
  CFStringRef SetNetworkService = SCPreferencesPathKeyCreateSetNetworkService(0, *((void *)set + 2), 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), SetNetworkService);
  CFRelease(SetNetworkService);
  if (!Value)
  {
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(0, 0, v10);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count < 1) {
    return Mutable;
  }
  CFIndex v8 = Count;
  memset(v69, 0, sizeof(v69));
  CFMutableArrayRef v65 = Mutable;
  if ((unint64_t)Count < 0x11) {
    unsigned int v9 = (const void **)v69;
  }
  else {
    unsigned int v9 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
  }
  CFDictionaryGetKeysAndValues(Value, v9, 0);
  uint64_t v12 = 0;
  long long v66 = @"Interface";
  *(void *)&long long v13 = 138412546;
  long long v68 = v13;
  *(void *)&long long v13 = 138412802;
  long long v67 = v13;
  do
  {
    SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity(0, *((void *)set + 2), (uint64_t)v9[v12], 0);
    CFStringRef Link = SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    CFRelease(SetNetworkServiceEntity);
    if (!Link)
    {
      uint64_t v32 = __log_SCNetworkConfiguration();
      uint64_t v33 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v32, (os_log_type_t)v33)) {
        goto LABEL_29;
      }
      uint64_t v34 = _os_log_pack_size();
      CFIndex v42 = (char *)v64 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v43 = _os_log_pack_fill();
      uint64_t v44 = v9[v12];
      uint64_t v45 = *((void *)set + 2);
      *(_DWORD *)uint64_t v43 = v68;
      *(void *)(v43 + 4) = v44;
      *(_WORD *)(v43 + 12) = 2112;
      *(void *)(v43 + 14) = v45;
      uint64_t v46 = (uint64_t)v32;
      uint64_t v47 = v33;
      v48 = v42;
LABEL_25:
      __SC_log_send(6, v46, v47, v48);
      goto LABEL_29;
    }
    if (!SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), Link))
    {
      CFUUIDBytes v49 = __log_SCNetworkConfiguration();
      uint64_t v50 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v49, (os_log_type_t)v50)) {
        goto LABEL_29;
      }
      uint64_t v51 = _os_log_pack_size();
      long long v59 = (char *)v64 - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v60 = _os_log_pack_fill();
      long long v61 = v9[v12];
      uint64_t v62 = *((void *)set + 2);
      *(_DWORD *)uint64_t v60 = v67;
      *(void *)(v60 + 4) = v61;
      *(_WORD *)(v60 + 12) = 2112;
      *(void *)(v60 + 14) = v62;
      *(_WORD *)(v60 + 22) = 2112;
      *(void *)(v60 + 24) = Link;
      uint64_t v46 = (uint64_t)v49;
      uint64_t v47 = v50;
      v48 = v59;
      goto LABEL_25;
    }
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, Link, @"/");
    if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
      CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)ValueAtIndex, 0);
      if (CFEqual(NetworkServiceEntity, Link))
      {
        CFStringRef v19 = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)ValueAtIndex, (uint64_t)v66);
        CFDictionaryRef v20 = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), v19);
        CFRelease(v19);
        if (__SCNetworkInterfaceEntityIsPPTP(v20))
        {
          uint64_t v21 = __log_SCNetworkConfiguration();
          uint64_t v22 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
          {
            uint64_t v23 = _os_log_pack_size();
            v64[1] = v64;
            uint64_t v31 = (char *)v64
                - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v21, v22, v31);
          }
        }
        else
        {
          Private = __SCNetworkServiceCreatePrivate(0, *((const void **)set + 3), ValueAtIndex, 0);
          CFArrayAppendValue(v65, Private);
          CFRelease(Private);
        }
      }
      CFRelease(NetworkServiceEntity);
    }
    CFRelease(ArrayBySeparatingStrings);
LABEL_29:
    ++v12;
  }
  while (v8 != v12);
  if (v9 != (const void **)v69) {
    CFAllocatorDeallocate(0, v9);
  }
  return v65;
}

CFDictionaryRef SCPreferencesPathGetValue(SCPreferencesRef prefs, CFStringRef path)
{
  v7[1] = *(const __CFDictionary **)MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0;
  }
  value = 0;
  v7[0] = 0;
  if (!getPath(prefs, path, v7)) {
    return 0;
  }
  CFDictionaryRef v3 = v7[0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID && CFDictionaryGetValueIfPresent(v3, @"__LINK__", (const void **)&value))
  {
    if (getPath(prefs, (const __CFString *)value, v7)) {
      return v7[0];
    }
    else {
      return 0;
    }
  }
  return v3;
}

uint64_t getPath(const __SCPreferences *a1, const __CFString *a2, const __CFDictionary **a3)
{
  v21[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFArrayRef v5 = normalizePath(a2);
  if (!v5)
  {
    _SCErrorSet(1004);
    return 0;
  }
  CFArrayRef v6 = v5;
  v21[0] = 0;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFArrayRef v17 = v6;
    goto LABEL_22;
  }
  CFIndex v8 = Count;
  CFDictionaryRef v9 = 0;
  uint64_t v10 = 0;
  while (2)
  {
    CFIndex v11 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v11);
      if (v11)
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v9, ValueAtIndex);
      }
      else
      {
        CFStringRef v14 = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
        CFDictionaryRef Value = (const __CFDictionary *)SCPreferencesGetValue(a1, v14);
      }
      CFDictionaryRef v9 = Value;
      if (!Value) {
        goto LABEL_19;
      }
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v9) != TypeID) {
        goto LABEL_19;
      }
      if (v11 < v8 - 1 && CFDictionaryGetValueIfPresent(v9, @"__LINK__", v21)) {
        break;
      }
      if (v8 == ++v11)
      {
        *a3 = v9;
        uint64_t v19 = 1;
        goto LABEL_23;
      }
    }
    if (v10 == 8)
    {
      int v18 = 3006;
      goto LABEL_20;
    }
    uint64_t v16 = normalizePath((const __CFString *)v21[0]);
    if (!v16)
    {
LABEL_19:
      int v18 = 1004;
LABEL_20:
      _SCErrorSet(v18);
      uint64_t v19 = 0;
      goto LABEL_23;
    }
    CFArrayRef v17 = v16;
    ++v10;
    v22.location = v11 + 1;
    v22.length = ~v11 + v8;
    CFArrayAppendArray(v16, v6, v22);
    CFRelease(v6);
    CFIndex v8 = CFArrayGetCount(v17);
    CFArrayRef v6 = v17;
    if (v8 >= 1) {
      continue;
    }
    break;
  }
LABEL_22:
  __SCPreferencesAccess((uint64_t)a1);
  *a3 = (const __CFDictionary *)*((void *)a1 + 35);
  uint64_t v19 = 1;
  CFArrayRef v6 = v17;
LABEL_23:
  CFRelease(v6);
  return v19;
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    CFPropertyListRef result = CFDictionaryGetValue(*((CFDictionaryRef *)prefs + 35), key);
    if (result) {
      return result;
    }
    int v5 = 1004;
  }
  else
  {
    int v5 = 3001;
  }
  _SCErrorSet(v5);
  return 0;
}

void __SCPreferencesAccess(uint64_t a1)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  if (*(unsigned char *)(a1 + 304)) {
    return;
  }
  CFAllocatorRef v3 = v2;
  memset(&v109, 0, sizeof(v109));
  uint64_t v4 = &unk_1EB284000;
  if (!access(*(const char **)(a1 + 104), 4))
  {
    int v16 = open(*(const char **)(a1 + 104), 0, 420);
    if (v16 != -1)
    {
      int v17 = v16;
      if (fstat(v16, &v109) != -1)
      {
        char v18 = 0;
        goto LABEL_46;
      }
      uint64_t v21 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v21;
      }
      uint64_t v22 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v21, (os_log_type_t)v22))
      {
        uint64_t v23 = _os_log_pack_size();
        uint64_t v31 = (char *)&v105
            - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v32 = _os_log_pack_fill();
        uint64_t v33 = __error();
        uint64_t v34 = strerror(*v33);
        *(_DWORD *)uint64_t v32 = 136315138;
        *(void *)(v32 + 4) = v34;
        __SC_log_send(5, (uint64_t)v21, v22, v31);
      }
      char v18 = 0;
LABEL_45:
      memset(&v109, 0, sizeof(v109));
LABEL_46:
      CFUUIDBytes v49 = *(const void **)(a1 + 144);
      if (v49) {
        CFRelease(v49);
      }
      *(void *)(a1 + 144) = __SCPSignatureFromStatbuf(&v109.st_dev);
      if (v109.st_size < 1) {
        goto LABEL_70;
      }
      CFErrorRef error = 0;
      CFArrayRef Mutable = CFDataCreateMutable(v3, v109.st_size);
      CFDataSetLength(Mutable, v109.st_size);
      BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
      ssize_t v52 = read(v17, BytePtr, v109.st_size);
      if (v52 == v109.st_size)
      {
        CFDictionaryRef v53 = (const __CFDictionary *)CFPropertyListCreateWithData(v3, Mutable, 0, 0, &error);
        CFRelease(Mutable);
        if (v53)
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (CFGetTypeID(v53) == TypeID)
          {
            *(void *)(a1 + 280) = CFDictionaryCreateMutableCopy(v3, 0, v53);
            CFRelease(v53);
            processHardwareDependency(a1);
            goto LABEL_70;
          }
          v80 = __log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            v80 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v80;
          }
          uint64_t v81 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v80, (os_log_type_t)v81))
          {
            uint64_t v82 = _os_log_pack_size();
            v90 = (char *)&v105
                - ((MEMORY[0x1F4188790](v82, v83, v84, v85, v86, v87, v88, v89) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v80, v81, v90);
            uint64_t v4 = &unk_1EB284000;
          }
          CFErrorRef v66 = v53;
        }
        else
        {
          if (!error) {
            goto LABEL_70;
          }
          long long v67 = __log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            long long v67 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v67;
          }
          uint64_t v68 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v67, (os_log_type_t)v68))
          {
            uint64_t v69 = _os_log_pack_size();
            v77 = (char *)&v105
                - ((MEMORY[0x1F4188790](v69, v70, v71, v72, v73, v74, v75, v76) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v78 = _os_log_pack_fill();
            CFErrorRef v79 = error;
            *(_DWORD *)uint64_t v78 = 138412290;
            *(void *)(v78 + 4) = v79;
            __SC_log_send(5, (uint64_t)v67, v68, v77);
          }
          CFErrorRef v66 = error;
        }
      }
      else
      {
        uint64_t v55 = __log_SCPreferences_log;
        if (!__log_SCPreferences_log)
        {
          uint64_t v55 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
          __log_SCPreferences_log = (uint64_t)v55;
        }
        uint64_t v56 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v55, (os_log_type_t)v56))
        {
          uint64_t v57 = _os_log_pack_size();
          CFMutableArrayRef v65 = (char *)&v105
              - ((MEMORY[0x1F4188790](v57, v58, v59, v60, v61, v62, v63, v64) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v55, v56, v65);
          uint64_t v4 = &unk_1EB284000;
        }
        CFErrorRef v66 = Mutable;
      }
      CFRelease(v66);
LABEL_70:
      if ((v18 & 1) == 0) {
        close(v17);
      }
      goto LABEL_72;
    }
  }
  int v5 = *__error();
  if (v5 != 13)
  {
    if (v5 == 2) {
      goto LABEL_44;
    }
    if (v5 != 1) {
      goto LABEL_28;
    }
  }
  if (!*(void *)(a1 + 312))
  {
LABEL_28:
    uint64_t v19 = *(void *)(a1 + 104);
    CFDictionaryRef v20 = __error();
    log_open_error(v19, *v20);
    goto LABEL_44;
  }
  CFErrorRef error = 0;
  int v107 = 0;
  CFDataRef v106 = 0;
  CFArrayRef v6 = (mach_port_t *)(a1 + 320);
  mach_port_t v7 = *(_DWORD *)(a1 + 320);
  if (!v7)
  {
    if (!__SCPreferencesCreate_helper(a1)) {
      goto LABEL_40;
    }
    mach_port_t v7 = *v6;
  }
  if (!_SCHelperExec(v7, 101, 0, &v107, &v106)) {
    goto LABEL_36;
  }
  int v8 = v107;
  if (v107)
  {
LABEL_39:
    _SCErrorSet(v8);
LABEL_40:
    uint64_t v35 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v35 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v35;
    }
    uint64_t v36 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
    {
      uint64_t v37 = _os_log_pack_size();
      uint64_t v45 = (char *)&v105 - ((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v46 = _os_log_pack_fill();
      int v47 = SCError();
      v48 = SCErrorString(v47);
      *(_DWORD *)uint64_t v46 = 136315138;
      *(void *)(v46 + 4) = v48;
      __SC_log_send(5, (uint64_t)v35, v36, v45);
      int v17 = -1;
      char v18 = 1;
      goto LABEL_45;
    }
LABEL_44:
    int v17 = -1;
    char v18 = 1;
    goto LABEL_45;
  }
  if (!v106 || (int v9 = _SCUnserialize((CFPropertyListRef *)&error, v106, 0, 0), CFRelease(v106), !v9))
  {
LABEL_36:
    if (*v6) {
      _SCHelperClose((mach_port_t *)(a1 + 320));
    }
    int v8 = 1003;
    int v107 = 1003;
    goto LABEL_39;
  }
  CFErrorRef v10 = error;
  CFTypeID v11 = CFDictionaryGetTypeID();
  if (!v10 || CFGetTypeID(v10) != v11) {
    goto LABEL_34;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(error, @"preferences");
  CFTypeID v13 = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) != v13) {
    CFDictionaryRef Value = 0;
  }
  CFStringRef v14 = CFDictionaryGetValue(error, @"signature");
  CFTypeID v15 = CFDataGetTypeID();
  if (!v14) {
    goto LABEL_34;
  }
  if (CFGetTypeID(v14) != v15) {
    CFStringRef v14 = 0;
  }
  if (!Value || !v14)
  {
LABEL_34:
    if (error) {
      CFRelease(error);
    }
    goto LABEL_36;
  }
  *(void *)(a1 + 280) = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)Value);
  *(void *)(a1 + 144) = CFRetain(v14);
  *(unsigned char *)(a1 + 304) = 1;
  CFRelease(error);
LABEL_72:
  if (!*(void *)(a1 + 280))
  {
    *(void *)(a1 + 280) = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(unsigned char *)(a1 + 305) = 0;
  }
  v91 = *((void *)v4 + 78);
  if (!v91)
  {
    v91 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    *((void *)v4 + 78) = v91;
  }
  uint64_t v92 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v91, (os_log_type_t)v92))
  {
    uint64_t v93 = _os_log_pack_size();
    v101 = (char *)&v105 - ((MEMORY[0x1F4188790](v93, v94, v95, v96, v97, v98, v99, v100) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v102 = _os_log_pack_fill();
    uint64_t v103 = *(void *)(a1 + 104);
    CFDataRef v104 = __SCPreferencesPrefsSize(a1);
    *(_DWORD *)uint64_t v102 = 136315394;
    *(void *)(v102 + 4) = v103;
    *(_WORD *)(v102 + 12) = 2048;
    *(void *)(v102 + 14) = v104;
    __SC_log_send(7, (uint64_t)v91, v92, v101);
  }
  *(unsigned char *)(a1 + 304) = 1;
}

void *_SCErrorSet(int a1)
{
  CFPropertyListRef result = __SCGetThreadSpecificData();
  *(_DWORD *)CFPropertyListRef result = a1;
  return result;
}

void *__SCGetThreadSpecificData()
{
  if (__SCThreadSpecificKeyInitialize_tsKeyInitialized != -1) {
    dispatch_once(&__SCThreadSpecificKeyInitialize_tsKeyInitialized, &__block_literal_global_60);
  }
  v0 = pthread_getspecific(tsDataKey);
  if (!v0)
  {
    v0 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], 24, 0);
    *(_DWORD *)v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
    pthread_setspecific(tsDataKey, v0);
  }
  return v0;
}

CFArrayRef normalizePath(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }
  if (!CFStringHasPrefix(a1, @"/")) {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a1, @"/");
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, ArrayBySeparatingStrings);
  CFRelease(ArrayBySeparatingStrings);
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    unint64_t v6 = Count + 1;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v6 - 2);
      if (!CFStringGetLength(ValueAtIndex)) {
        CFArrayRemoveValueAtIndex(MutableCopy, v6 - 2);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return MutableCopy;
}

CFStringRef SCPreferencesPathKeyCreateNetworkServiceEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@", @"NetworkServices", a2, a3, v5);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@", @"NetworkServices", a2, v4, v5);
  }
}

uint64_t __SCNetworkReachabilityGetFlagsFromPath(uint64_t a1, uint64_t a2, nw_path_t path, unsigned int a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = 0;
  ssize_t v52 = &v51;
  uint64_t v53 = 0x2000000000;
  int v54 = 2;
  uint64_t v47 = 0;
  v48 = &v47;
  uint64_t v49 = 0x2000000000;
  uint64_t v50 = "???";
  if (path)
  {
    nw_path_status_t status = nw_path_get_status(path);
    switch(status)
    {
      case nw_path_status_satisfiable:
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        *((_DWORD *)v52 + 6) = 7;
        v48[3] = (uint64_t)"nw_path_status_satisfiable";
        if (nw_path_get_vpn_config_id())
        {
          CFDictionaryRef v20 = "nw_path_status_satisfiable, OnDemand";
          int v21 = 32;
        }
        else
        {
          if (!nw_path_uses_interface_type(path, nw_interface_type_cellular)) {
            break;
          }
          CFDictionaryRef v20 = "nw_path_status_satisfiable, WWAN";
          int v21 = 0x40000;
        }
        *((_DWORD *)v52 + 6) |= v21;
        v48[3] = (uint64_t)v20;
        break;
      case nw_path_status_unsatisfied:
        *((_DWORD *)v52 + 6) = 0;
        v48[3] = (uint64_t)"nw_path_status_unsatisfied";
        if (nw_path_uses_interface_type(path, nw_interface_type_cellular))
        {
          *((_DWORD *)v52 + 6) |= 0x40000u;
          v48[3] = (uint64_t)"nw_path_status_unsatisfied, WWAN";
        }
        break;
      case nw_path_status_satisfied:
        uint64_t v55 = 0;
        uint64_t v56 = &v55;
        uint64_t v57 = 0x2000000000;
        char v58 = 1;
        *((_DWORD *)v52 + 6) = 2;
        v48[3] = (uint64_t)"nw_path_status_satisfied";
        if (nw_path_uses_interface_type(path, nw_interface_type_cellular))
        {
          *((_DWORD *)v52 + 6) |= 0x40001u;
          v48[3] = (uint64_t)"nw_path_status_satisfied, cellular";
        }
        int v17 = (void *)nw_path_copy_netagent_dictionary();
        if (v17)
        {
          char v18 = v17;
          if (xpc_dictionary_get_count(v17))
          {
            applier[0] = MEMORY[0x1E4F143A8];
            applier[1] = 0x40000000;
            applier[2] = ____SCNetworkReachabilityGetFlagsFromPath_block_invoke;
            applier[3] = &unk_1E55BB988;
            applier[4] = &v51;
            applier[5] = &v47;
            unsigned int v45 = a4;
            int v46 = a5;
            applier[6] = &v55;
            applier[7] = a6;
            xpc_dictionary_apply(v18, applier);
          }
          xpc_release(v18);
        }
        if (a4 >= 2)
        {
          if (*((unsigned char *)v56 + 24))
          {
            if (a5 == 2 && !nw_array_get_count())
            {
              *((_DWORD *)v52 + 6) = 0;
              uint64_t v19 = "nw_path_status_satisfied, DNS not reachable";
              goto LABEL_39;
            }
            if (a7)
            {
              *((_DWORD *)v52 + 6) = a8;
              uint64_t v19 = "nw_path_status_satisfied, resolved endpoint flags";
LABEL_39:
              v48[3] = (uint64_t)v19;
              goto LABEL_40;
            }
          }
          goto LABEL_40;
        }
        if (nw_path_is_direct()) {
          goto LABEL_25;
        }
        uint64_t v22 = nw_path_copy_endpoint();
        if (v22)
        {
          uint64_t v23 = v22;
          if (nw_endpoint_get_type(v22) == nw_endpoint_type_address)
          {
            sockaddr address = nw_endpoint_get_address(v23);
            if (address)
            {
              if (address->sa_family == 2 && *(__int16 *)&address->sa_data[2] == -343)
              {
                uint64_t v25 = nw_path_copy_interface();
                if (v25)
                {
                  uint64_t v26 = v25;
                  nw_interface_type_t type = nw_interface_get_type(v25);
                  if (type == nw_interface_type_wired
                    || type == nw_interface_type_wifi && nw_interface_get_subtype() != 1002)
                  {
                    nw_release(v26);
                    nw_release(v23);
LABEL_25:
                    *((_DWORD *)v52 + 6) |= 0x20000u;
                    v48[3] = (uint64_t)"nw_path_status_satisfied, by address, direct";
                    goto LABEL_37;
                  }
                  nw_release(v26);
                }
              }
            }
          }
          nw_release(v23);
        }
LABEL_37:
        if (nw_path_is_local())
        {
          *((_DWORD *)v52 + 6) |= 0x10000u;
          uint64_t v19 = "nw_path_status_satisfied, by address, local";
          goto LABEL_39;
        }
LABEL_40:
        _Block_object_dispose(&v55, 8);
        break;
      default:
        break;
    }
  }
  uint64_t v28 = __log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    uint64_t v28 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v28;
  }
  uint64_t v29 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v28, (os_log_type_t)v29))
  {
    uint64_t v30 = _os_log_pack_size();
    uint64_t v38 = (char *)applier - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v39 = _os_log_pack_fill();
    int v40 = *((_DWORD *)v52 + 6);
    uint64_t v41 = v48[3];
    *(_DWORD *)uint64_t v39 = 136315906;
    *(void *)(v39 + 4) = a1;
    *(_WORD *)(v39 + 12) = 2080;
    *(void *)(v39 + 14) = a2;
    *(_WORD *)(v39 + 22) = 1024;
    *(_DWORD *)(v39 + 24) = v40;
    *(_WORD *)(v39 + 28) = 2080;
    *(void *)(v39 + 30) = v41;
    __SC_log_send(7, (uint64_t)v28, v29, v38);
  }
  int v42 = *((_DWORD *)v52 + 6);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  return v42 & 0xFFFFFF;
}

uint64_t _SC_syslog_os_log_mapping(int a1)
{
  if ((a1 ^ (a1 >> 31)) >= 8) {
    return 0;
  }
  else {
    return (0x201000000101010uLL >> (8 * (a1 ^ (a1 >> 31))));
  }
}

BOOL __SC_log_enabled(int a1, os_log_t oslog, os_log_type_t type)
{
  if (os_log_type_enabled(oslog, type)) {
    return 1;
  }
  if (_sc_log != 1)
  {
    if (a1 < 6) {
      return 1;
    }
    BOOL v4 = _sc_verbose && a1 == 6;
    if (v4 || _sc_debug != 0) {
      return 1;
    }
  }
  if (_SC_isInstallEnvironment_once != -1) {
    dispatch_once(&_SC_isInstallEnvironment_once, &__block_literal_global_0);
  }
  if (!_SC_isInstallEnvironment_is_install) {
    return 0;
  }
  if (a1 < 6) {
    return 1;
  }
  if (a1 != 6) {
    return _sc_debug != 0;
  }
  if (_SC_isAppleInternal_once != -1) {
    dispatch_once(&_SC_isAppleInternal_once, &__block_literal_global_63);
  }
  BOOL result = 1;
  if (!_SC_isAppleInternal_isInternal && !_sc_debug) {
    return 0;
  }
  return result;
}

__CFData *__SCPSignatureFromStatbuf(int *a1)
{
  CFArrayRef Mutable = CFDataCreateMutable(0, 40);
  CFDataSetLength(Mutable, 40);
  BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
  uint64_t v4 = *((void *)a1 + 1);
  *(void *)BytePtr = *a1;
  *((void *)BytePtr + 1) = v4;
  *((_OWORD *)BytePtr + 1) = *((_OWORD *)a1 + 3);
  *((void *)BytePtr + 4) = *((void *)a1 + 12);
  return Mutable;
}

void *__SCNetworkServiceCreatePrivate(uint64_t a1, const void *a2, const __CFString *a3, const void *a4)
{
  if (__SCNetworkServiceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    Instance[4] = v8;
    Instance[2] = CFStringCreateCopy(0, a3);
    if (a4) {
      CFTypeRef v9 = CFRetain(a4);
    }
    else {
      CFTypeRef v9 = 0;
    }
    Instance[3] = v9;
  }
  return Instance;
}

CFDictionaryRef __SCNetworkInterfaceEntityIsPPTP(const __CFDictionary *result)
{
  if (result)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(result, @"SubType");
    return (const __CFDictionary *)(Value && CFEqual(Value, @"PPTP"));
  }
  return result;
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkServiceEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Service", a3, a4);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Service", a3);
  }
}

CFStringRef SCPreferencesPathGetLink(SCPreferencesRef prefs, CFStringRef path)
{
  v6[1] = *(const __CFDictionary **)MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0;
  }
  value = 0;
  v6[0] = 0;
  if (!getPath(prefs, path, v6)) {
    return 0;
  }
  CFDictionaryRef v2 = v6[0];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID) {
    return 0;
  }
  if (CFDictionaryGetValueIfPresent(v2, @"__LINK__", (const void **)&value)) {
    return (CFStringRef)value;
  }
  else {
    return 0;
  }
}

void __SC_log_send2(int a1, uint64_t a2, uint64_t a3, int a4, char *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _sc_log;
  if (a4) {
    mach_port_t v7 = a5;
  }
  else {
    mach_port_t v7 = 0;
  }
  if (a4) {
    CFTypeRef v8 = 0;
  }
  else {
    CFTypeRef v8 = a5;
  }
  if (_sc_log < 1)
  {
    if (v7)
    {
      mach_get_times();
      uint64_t v10 = os_log_pack_compose();
      goto LABEL_16;
    }
LABEL_15:
    char v9 = 1;
LABEL_17:
    if (a1 < 6 || (_sc_verbose ? (BOOL v11 = a1 == 6) : (BOOL v11 = 0), !v11 ? (v12 = _sc_debug == 0) : (v12 = 0), !v12))
    {
      pthread_mutex_lock(&lock);
      CFTypeID v13 = (FILE **)MEMORY[0x1E4F143D8];
      if (v6 == 2)
      {
        memset(&v15, 0, sizeof(v15));
        v14.tv_sec = 0;
        *(void *)&v14.tv_usec = 0;
        if (v9)
        {
          gettimeofday(&v14, 0);
        }
        else
        {
          v14.tv_sec = (__darwin_time_t)(v7 + 8);
          v14.tv_usec = (unint64_t)(v7 + 16) / 0x3E8;
        }
        localtime_r(&v14.tv_sec, &v15);
        fprintf(*v13, "%2d:%02d:%02d.%03d ", v15.tm_hour, v15.tm_min, v15.tm_sec, v14.tv_usec / 1000);
      }
      fprintf(*v13, "%s\n", v8);
      fflush(*v13);
      pthread_mutex_unlock(&lock);
    }
    goto LABEL_31;
  }
  if (!v7)
  {
    if (_sc_log == 1) {
      return;
    }
    goto LABEL_15;
  }
  if (_sc_log != 1)
  {
    uint64_t v10 = os_log_pack_send_and_compose();
LABEL_16:
    CFTypeRef v8 = (char *)v10;
    char v9 = 0;
    goto LABEL_17;
  }
  os_log_pack_send();
  char v9 = 0;
LABEL_31:
  if ((v9 & 1) == 0 && v8 != &v16) {
    free(v8);
  }
}

void __SC_log_send(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  __SC_log_send2(a1, a2, a3, 1, a4);
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkService(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a3) {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Service", a3, v5);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Service", v4, v5);
  }
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)SCPreferencesCreateWithOptions(allocator, name, prefsID, @"UseEntitlement", 0);
}

void __SCNetworkServiceDeallocate(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFDictionaryRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  int v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (entity) {
    return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@/%@/%@", domain, @"Network", @"Service", serviceID, entity, v6);
  }
  else {
    return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@/%@", domain, @"Network", @"Service", serviceID, v5, v6);
  }
}

CFTypeRef __SCDynamicStoreCopyValueCommon(uint64_t a1, const __CFString *a2, int a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  v22[0] = a1;
  uint64_t v20 = 0;
  CFTypeRef cf = 0;
  vm_size_t v19 = 0;
  memset(length, 0, sizeof(length));
  uint64_t v16 = 0;
  value = 0;
  _SCErrorSet(0);
  if (!__SCDynamicStoreNormalize((uint64_t)v22, 1)) {
    return 0;
  }
  uint64_t v5 = v22[0];
  if (*(unsigned char *)(v22[0] + 200))
  {
    CFDictionaryRef v6 = *(const __CFDictionary **)(v22[0] + 216);
    if (v6)
    {
      if (CFDictionaryGetValueIfPresent(v6, a2, (const void **)&value)) {
        return CFRetain(value);
      }
    }
    CFArrayRef v7 = *(const __CFArray **)(v5 + 224);
    if (v7)
    {
      v23.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 224));
      v23.location = 0;
      if (CFArrayContainsValue(v7, v23, a2))
      {
        int v8 = 1004;
LABEL_30:
        _SCErrorSet(v8);
        return 0;
      }
    }
    CFDictionaryRef v9 = *(const __CFDictionary **)(v5 + 208);
    if (v9)
    {
      if (CFDictionaryGetValueIfPresent(v9, a2, (const void **)&value)) {
        return CFRetain(value);
      }
    }
  }
  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v20, &v19)) {
    goto LABEL_29;
  }
  do
    uint64_t v11 = configget(*(_DWORD *)(v5 + 40), v20, v19, &length[1], length, (_DWORD *)&v16 + 1, &v16);
  while (__SCDynamicStoreCheckRetryAndHandleError(v22[0], v11, &v16, (uint64_t)"SCDynamicStoreCopyValue configget()"));
  CFRelease(cf);
  int v12 = v16;
  int v8 = __SCDynamicStoreMapInternalStatus(v16, a3);
  LODWORD(v16) = v8;
  if (v8)
  {
    if (*(void *)&length[1])
    {
      MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], *(void *)&length[1], length[0]);
      int v8 = v16;
    }
    if (!a3) {
      int v8 = v12;
    }
    goto LABEL_30;
  }
  if (!_SCUnserialize((CFPropertyListRef *)&value, 0, *(UInt8 **)&length[1], length[0]))
  {
LABEL_29:
    int v8 = 1001;
    goto LABEL_30;
  }
  if (*(unsigned char *)(v5 + 200))
  {
    CFTypeID v13 = value;
    if (value)
    {
      CFArrayRef Mutable = *(__CFDictionary **)(v5 + 208);
      if (!Mutable)
      {
        CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(v5 + 208) = Mutable;
        CFTypeID v13 = value;
      }
      CFDictionarySetValue(Mutable, a2, v13);
    }
  }
  if (a3) {
    int v15 = v16;
  }
  else {
    int v15 = v12;
  }
  _SCErrorSet(v15);
  return value;
}

uint64_t _SCUnserialize(CFPropertyListRef *a1, const __CFData *a2, UInt8 *bytes, CFIndex length)
{
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  error[0] = 0;
  if (a2)
  {
    CFPropertyListRef v5 = CFPropertyListCreateWithData(0, a2, 0, 0, error);
    *a1 = v5;
    if (v5) {
      return 1;
    }
  }
  else
  {
    CFDataRef v9 = CFDataCreateWithBytesNoCopy(0, bytes, length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    *a1 = CFPropertyListCreateWithData(0, v9, 0, 0, error);
    CFRelease(v9);
    mach_error_t v10 = MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], bytes, length);
    if (v10)
    {
      mach_error_t v11 = v10;
      int v12 = _SC_LOG_DEFAULT();
      uint64_t v13 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v22 = (char *)error
            - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        uint64_t v24 = mach_error_string(v11);
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v23 + 4) = v24;
        __SC_log_send(5, (uint64_t)v12, v13, v22);
      }
    }
    if (*a1) {
      return 1;
    }
  }
  if (error[0])
  {
    uint64_t v25 = _SC_LOG_DEFAULT();
    uint64_t v26 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
    {
      uint64_t v27 = _os_log_pack_size();
      uint64_t v35 = (char *)error - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v36 = _os_log_pack_fill();
      CFErrorRef v37 = error[0];
      *(_DWORD *)uint64_t v36 = 138412290;
      *(void *)(v36 + 4) = v37;
      __SC_log_send(5, (uint64_t)v25, v26, v35);
    }
    CFRelease(error[0]);
  }
  _SCErrorSet(1001);
  return 0;
}

uint64_t __SCDynamicStoreMapInternalStatus(uint64_t result, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  switch(result)
  {
    case 0x2712:
      if (!a2) {
        return 1003;
      }
      uint64_t v2 = MEMORY[0x1E4F143A8];
      uint64_t v3 = 0x40000000;
      uint64_t v4 = ___SC_crash_once_block_invoke;
      CFPropertyListRef v5 = &__block_descriptor_tmp_120;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      CFDictionaryRef v6 = "SCDynamicStore write denied : missing entitlement";
      if (_SC_crash_once_once == -1) {
        return 1003;
      }
LABEL_15:
      dispatch_once(&_SC_crash_once_once, &v2);
      return 1003;
    case 0x2774:
      if (a2)
      {
        uint64_t v2 = MEMORY[0x1E4F143A8];
        uint64_t v3 = 0x40000000;
        uint64_t v4 = ___SC_crash_once_block_invoke;
        CFPropertyListRef v5 = &__block_descriptor_tmp_120;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        CFDictionaryRef v6 = "SCDynamicStore read allowed: missing entitlement";
        if (_SC_crash_once_once != -1) {
          dispatch_once(&_SC_crash_once_once, &v2);
        }
      }
      return 0;
    case 0x2713:
      if (!a2) {
        return 1003;
      }
      uint64_t v2 = MEMORY[0x1E4F143A8];
      uint64_t v3 = 0x40000000;
      uint64_t v4 = ___SC_crash_once_block_invoke;
      CFPropertyListRef v5 = &__block_descriptor_tmp_120;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      CFDictionaryRef v6 = "SCDynamicStore read denied: missing entitlement";
      if (_SC_crash_once_once == -1) {
        return 1003;
      }
      goto LABEL_15;
  }
  return result;
}

uint64_t SCPreferencesCreateWithOptions(const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, __CFString *a4, const __CFDictionary *a5)
{
  v37[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  v37[0] = 0;
  if (a5 && (CFTypeID TypeID = CFDictionaryGetTypeID(), CFGetTypeID(a5) != TypeID))
  {
    _SCErrorSet(1002);
    return 0;
  }
  else
  {
    if (a4
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          ApplicationBundleID = (const void *)_SC_getApplicationBundleID(),
          CFDictionaryAddValue(Mutable, @"CallerInfo", ApplicationBundleID),
          Mutable))
    {
      _SCSerialize(Mutable, v37, 0, 0);
      CFRelease(Mutable);
      CFDataRef v13 = v37[0];
    }
    else
    {
      CFDataRef v13 = 0;
    }
    uint64_t v14 = __SCPreferencesCreate(a1, a2, a3, v13, a5);
    if (v14)
    {
      if (a5) {
        uint64_t v15 = "options";
      }
      else {
        uint64_t v15 = "";
      }
      uint64_t v16 = "authorization";
      if (a4 == @"UseEntitlement") {
        BOOL v17 = "entitlement" != "";
      }
      else {
        BOOL v17 = "authorization" != "";
      }
      if (a4 == @"UseEntitlement") {
        uint64_t v16 = "entitlement";
      }
      if (a4) {
        BOOL v18 = v17;
      }
      else {
        BOOL v18 = 0;
      }
      if (a4) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = "";
      }
      uint64_t v20 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v20;
      }
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v20, (os_log_type_t)v21))
      {
        uint64_t v22 = _os_log_pack_size();
        v36[1] = v36;
        uint64_t v30 = (char *)v36 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v31 = _os_log_pack_fill();
        if (a5) {
          BOOL v32 = "options" == "";
        }
        else {
          BOOL v32 = 1;
        }
        int v33 = !v32;
        *(_DWORD *)uint64_t v31 = 136315906;
        *(void *)(v31 + 4) = v15;
        *(_WORD *)(v31 + 12) = 2080;
        if ((v33 & v18) != 0) {
          uint64_t v34 = " + ";
        }
        else {
          uint64_t v34 = "";
        }
        *(void *)(v31 + 14) = v34;
        *(_WORD *)(v31 + 22) = 2080;
        *(void *)(v31 + 24) = v19;
        *(_WORD *)(v31 + 32) = 2112;
        *(void *)(v31 + 34) = v14;
        __SC_log_send(7, (uint64_t)v20, v21, v30);
      }
    }
    if (v37[0]) {
      CFRelease(v37[0]);
    }
  }
  return v14;
}

uint64_t __SCPreferencesCreate(const __CFAllocator *a1, const __CFString *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  if (__SCPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = Instance;
  if (Instance)
  {
    pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0);
    *(_DWORD *)(v11 + 116) = -1;
    *(unsigned char *)(v11 + 306) = geteuid() == 0;
    *(void *)(v11 + 80) = CFStringCreateCopy(a1, a2);
    if (a3) {
      *(void *)(v11 + 88) = CFStringCreateCopy(a1, a3);
    }
    if (a4) {
      *(void *)(v11 + 312) = CFRetain(a4);
    }
    if (a5) {
      *(void *)(v11 + 96) = CFDictionaryCreateCopy(a1, a5);
    }
    int v12 = (const char *)__SCPreferencesPath(a1, a3);
    *(void *)(v11 + 104) = v12;
    if (v12)
    {
      int v13 = access(v12, 4);
      if (!v13)
      {
LABEL_18:
        _SCErrorSet(v13);
        return v11;
      }
      int v14 = *__error();
      switch(v14)
      {
        case 13:
          goto LABEL_29;
        case 2:
          int v13 = 3003;
          goto LABEL_18;
        case 1:
LABEL_29:
          if (*(void *)(v11 + 312))
          {
            int v13 = 0;
            goto LABEL_18;
          }
          uint64_t v31 = *(void *)(v11 + 104);
          BOOL v32 = __error();
          log_open_error(v31, *v32);
          int v29 = 1003;
LABEL_24:
          CFRelease((CFTypeRef)v11);
          _SCErrorSet(v29);
          return 0;
      }
      uint64_t v15 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v15 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v15;
      }
      uint64_t v16 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v15, (os_log_type_t)v16))
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v25 = (char *)v33 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = __error();
        uint64_t v28 = strerror(*v27);
        *(_DWORD *)uint64_t v26 = 136315138;
        *(void *)(v26 + 4) = v28;
        __SC_log_send(5, (uint64_t)v15, v16, v25);
        int v29 = 1001;
        goto LABEL_24;
      }
    }
    int v29 = 1001;
    goto LABEL_24;
  }
  return v11;
}

uint64_t __SCPreferencesScheduleWithRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3, NSObject *a4)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (*(void *)(a1 + 272)) {
    goto LABEL_2;
  }
  if (!a4)
  {
    if (*(unsigned char *)(a1 + 200)) {
      goto LABEL_9;
    }
LABEL_13:
    if (!*(void *)(a1 + 152))
    {
      if (!__SCPreferencesAddSession(a1)) {
        goto LABEL_3;
      }
      if (!*(void *)(a1 + 152)) {
        __SCPreferencesScheduleWithRunLoop_cold_1();
      }
    }
    __SCPreferencesAddSessionKeys((CFStringRef)a1);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(Mutable, *(const void **)(a1 + 184));
    CFArrayAppendValue(Mutable, *(const void **)(a1 + 192));
    int v12 = SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), Mutable, 0);
    CFRelease(Mutable);
    if (v12)
    {
      if (!a2) {
        goto LABEL_20;
      }
      CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0, *(SCDynamicStoreRef *)(a1 + 152), 0);
      *(void *)(a1 + 208) = RunLoopSource;
      if (RunLoopSource)
      {
        *(void *)(a1 + 264) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
LABEL_20:
        int v14 = __log_SCPreferences_log;
        if (!__log_SCPreferences_log)
        {
          int v14 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
          __log_SCPreferences_log = (uint64_t)v14;
        }
        uint64_t v15 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v14, (os_log_type_t)v15))
        {
          uint64_t v16 = _os_log_pack_size();
          uint64_t v24 = (char *)v39
              - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(7, (uint64_t)v14, v15, v24);
        }
        *(unsigned char *)(a1 + 200) = 1;
        if (a4)
        {
          if (!SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), a4))
          {
            *(unsigned char *)(a1 + 200) = 0;
            SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), 0, 0);
            __SCPreferencesRemoveSession(a1);
            goto LABEL_3;
          }
          *(void *)(a1 + 272) = a4;
          dispatch_retain(a4);
LABEL_12:
          uint64_t v9 = 1;
          goto LABEL_4;
        }
LABEL_9:
        if (!_SC_isScheduled(0, a2, a3, *(CFArrayRef *)(a1 + 264))) {
          CFRunLoopAddSource(a2, *(CFRunLoopSourceRef *)(a1 + 208), a3);
        }
        _SC_schedule((void *)a1, a2, a3, *(CFMutableArrayRef *)(a1 + 264));
        goto LABEL_12;
      }
      uint64_t v25 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v25 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v25, (os_log_type_t)v26)) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v25 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v25 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v25, (os_log_type_t)v26)) {
        goto LABEL_3;
      }
    }
    uint64_t v27 = _os_log_pack_size();
    uint64_t v35 = (char *)v39 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v36 = _os_log_pack_fill();
    int v37 = SCError();
    uint64_t v38 = SCErrorString(v37);
    *(_DWORD *)uint64_t v36 = 136315138;
    *(void *)(v36 + 4) = v38;
    __SC_log_send(3, (uint64_t)v25, v26, v35);
    goto LABEL_3;
  }
  if (!*(unsigned char *)(a1 + 200)) {
    goto LABEL_13;
  }
LABEL_2:
  _SCErrorSet(1002);
LABEL_3:
  uint64_t v9 = 0;
LABEL_4:
  pthread_mutex_unlock(v8);
  return v9;
}

void rlsSchedule(mach_port_context_t context, __CFRunLoop *a2, const __CFString *a3, __n128 a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(context + 120))
  {
    v9.version = 0;
    v9.info = (void *)context;
    v9.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
    v9.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
    v9.copyDescription = (CFStringRef (__cdecl *)(const void *))notifyMPCopyDescription;
    mach_port_t v7 = __SCDynamicStoreAddNotificationPort(context, a4);
    if (!v7) {
      return;
    }
    uint64_t v8 = _SC_CFMachPortCreateWithPort((uint64_t)"SCDynamicStore", v7, (void (__cdecl *)(CFMachPortRef, void *, CFIndex, void *))rlsCallback, &v9);
    *(void *)(context + 120) = v8;
    if (a2)
    {
      *(void *)(context + 128) = CFMachPortCreateRunLoopSource(0, v8, 0);
      *(void *)(context + 56) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    }
  }
  if (*(void *)(context + 128))
  {
    *(_DWORD *)(context + 48) = 4;
    if (!_SC_isScheduled((const void *)context, a2, a3, *(CFArrayRef *)(context + 56))) {
      CFRunLoopAddSource(a2, *(CFRunLoopSourceRef *)(context + 128), a3);
    }
    _SC_schedule((void *)context, a2, a3, *(CFMutableArrayRef *)(context + 56));
  }
}

void _SC_schedule(void *value, const void *a2, const void *a3, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
  CFArrayAppendValue(theArray, a2);

  CFArrayAppendValue(theArray, a3);
}

uint64_t _SC_isScheduled(const void *a1, const void *a2, const void *a3, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  while (1)
  {
    if (!a1 || (uint64_t v11 = CFArrayGetValueAtIndex(theArray, v10), CFEqual(a1, v11)))
    {
      if (!a2 || (int v12 = CFArrayGetValueAtIndex(theArray, v10 + 1), CFEqual(a2, v12)))
      {
        if (!a3) {
          break;
        }
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10 + 2);
        if (CFEqual(a3, ValueAtIndex)) {
          break;
        }
      }
    }
    v10 += 3;
    if (v10 >= v9) {
      return 0;
    }
  }
  return 1;
}

BOOL __SCPreferencesAddSession(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  context.version = 0;
  context.info = (void *)a1;
  context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
  context.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
  if (*(_DWORD *)(a1 + 168))
  {
LABEL_2:
    ++*(_DWORD *)(a1 + 168);
    return 1;
  }
  SCDynamicStoreRef v4 = SCDynamicStoreCreate(v2, *(CFStringRef *)(a1 + 80), (SCDynamicStoreCallBack)prefsNotify, &context);
  *(void *)(a1 + 152) = v4;
  CFPropertyListRef v5 = __log_SCPreferences_log;
  if (v4)
  {
    if (!__log_SCPreferences_log)
    {
      CFPropertyListRef v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v5;
    }
    uint64_t v6 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)&context - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v5, v6, v15);
    }
    goto LABEL_2;
  }
  if (!__log_SCPreferences_log)
  {
    CFPropertyListRef v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v5;
  }
  uint64_t v16 = _SC_syslog_os_log_mapping(3);
  BOOL result = __SC_log_enabled(3, v5, (os_log_type_t)v16);
  if (result)
  {
    uint64_t v17 = _os_log_pack_size();
    uint64_t v25 = (char *)&context - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v26 = _os_log_pack_fill();
    int v27 = SCError();
    uint64_t v28 = SCErrorString(v27);
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v26 + 4) = v28;
    __SC_log_send(3, (uint64_t)v5, v16, v25);
    return 0;
  }
  return result;
}

SCDynamicStoreRef SCDynamicStoreCreateWithOptions(CFAllocatorRef allocator, CFStringRef name, CFDictionaryRef storeOptions, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  Internal = (void *)__SCDynamicStoreCreateInternal((uint64_t)allocator, 0, (uint64_t)callout, (long long *)&context->version, 1);
  if (Internal)
  {
    uint64_t ApplicationBundleID = _SC_getApplicationBundleID();
    Internal[3] = CFStringCreateWithFormat(0, 0, @"%@:%@", ApplicationBundleID, name);
    if (storeOptions) {
      Internal[4] = CFRetain(storeOptions);
    }
    if (!__SCDynamicStoreAddSession((uint64_t)Internal))
    {
      CFRelease(Internal);
      return 0;
    }
  }
  return (SCDynamicStoreRef)Internal;
}

uint64_t __SCDynamicStoreCreateInternal(uint64_t a1, const void *a2, uint64_t a3, long long *a4, int a5)
{
  block[7] = *MEMORY[0x1E4F143B8];
  if (__SCDynamicStoreInitialize_initialized != -1) {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_61);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a5) {
      *(void *)(Instance + 16) = dispatch_queue_create("SCDynamicStore object", 0);
    }
    if (a2) {
      CFTypeRef v10 = CFRetain(a2);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *(void *)(Instance + 24) = v10;
    *(_DWORD *)(Instance + 48) = 0;
    *(void *)(Instance + 72) = a3;
    if (a4)
    {
      long long v11 = *a4;
      long long v12 = a4[1];
      *(void *)(Instance + 112) = *((void *)a4 + 4);
      *(_OWORD *)(Instance + 80) = v11;
      *(_OWORD *)(Instance + 96) = v12;
      uint64_t v13 = (uint64_t (*)(void))*((void *)a4 + 2);
      if (v13) {
        *(void *)(Instance + 88) = v13(*((void *)a4 + 1));
      }
    }
    *(_DWORD *)(Instance + 192) = -1;
    if (a5)
    {
      uint64_t v16 = 0;
      uint64_t v17 = &v16;
      uint64_t v18 = 0x2000000000;
      char v19 = 0;
      if (storeQueue_once != -1) {
        dispatch_once(&storeQueue_once, &__block_literal_global_3);
      }
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      void v15[2] = ____SCDynamicStoreCreateInternal_block_invoke;
      v15[3] = &unk_1E55BB2B8;
      v15[4] = &v16;
      v15[5] = Instance;
      dispatch_sync((dispatch_queue_t)storeQueue_q, v15);
      if (*((unsigned char *)v17 + 24))
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___SC_crash_once_block_invoke;
        block[3] = &__block_descriptor_tmp_120;
        block[5] = 0;
        void block[6] = 0;
        block[4] = "Excessive number of SCDynamicStore sessions";
        if (_SC_crash_once_once != -1) {
          dispatch_once(&_SC_crash_once_once, block);
        }
      }
      _Block_object_dispose(&v16, 8);
    }
  }
  else
  {
    _SCErrorSet(1001);
  }
  return Instance;
}

uint64_t _SC_getApplicationBundleID()
{
  if (_SC_getApplicationBundleID_once != -1) {
    dispatch_once(&_SC_getApplicationBundleID_once, &__block_literal_global_12);
  }
  return _SC_getApplicationBundleID_bundleID;
}

uint64_t __SCDynamicStoreAddSession(uint64_t a1)
{
  v42[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  v42[0] = 0;
  CFDataRef v39 = 0;
  vm_size_t v40 = 0;
  vm_size_t v37 = 0;
  uint64_t v38 = 0;
  mach_port_t v35 = 0;
  int v36 = 1001;
  if (!_SCSerializeString(*(const __CFString **)(a1 + 24), v42, (vm_address_t *)&v41, &v40)) {
    goto LABEL_18;
  }
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2 && !_SCSerialize(v2, &v39, (vm_address_t *)&v38, &v37))
  {
    CFRelease(v42[0]);
LABEL_18:
    int v5 = 0;
    goto LABEL_19;
  }
  mach_port_t v35 = 0;
  updateServerPort(a1, (uint64_t)&v35, (uint64_t)&v36);
  mach_port_t v3 = v35;
  if (v35)
  {
    while (1)
    {
      int v4 = configopen(v3, v41, v40, v38, v37, (_DWORD *)(a1 + 40), &v36);
      int v5 = v4;
      if (v4 != -308 && v4 != 268435459) {
        break;
      }
      updateServerPort(a1, (uint64_t)&v35, (uint64_t)&v36);
      mach_port_t v3 = v35;
      if (!v35) {
        goto LABEL_15;
      }
    }
    if (v4) {
      int v36 = v4;
    }
  }
  else
  {
    int v5 = 0;
  }
LABEL_15:
  CFRelease(v42[0]);
  if (v39) {
    CFRelease(v39);
  }
LABEL_19:
  if (!v36) {
    return 1;
  }
  if (v36 == 1102)
  {
    uint64_t v7 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v7 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v7;
    }
    if (v5) {
      int v8 = 3;
    }
    else {
      int v8 = 6;
    }
    uint64_t v9 = _SC_syslog_os_log_mapping(v8);
    if (__SC_log_enabled(v8, v7, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)&v35 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(v8, (uint64_t)v7, v9, v18);
    }
    int v36 = 2002;
  }
  else
  {
    uint64_t v20 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v20;
    }
    if (v5) {
      int v21 = 3;
    }
    else {
      int v21 = 6;
    }
    uint64_t v22 = _SC_syslog_os_log_mapping(v21);
    if (__SC_log_enabled(v21, v20, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v31 = (char *)&v35 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      int v33 = v36;
      uint64_t v34 = SCErrorString(v36);
      *(_DWORD *)uint64_t v32 = 67109378;
      *(_DWORD *)(v32 + 4) = v33;
      *(_WORD *)(v32 + 8) = 2080;
      *(void *)(v32 + 10) = v34;
      __SC_log_send(v21, (uint64_t)v20, v22, v31);
    }
  }
  _SCErrorSet(v36);
  return 0;
}

BOOL _SCSerializeString(const __CFString *a1, CFDataRef *a2, vm_address_t *a3, vm_size_t *a4)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  if (a2)
  {
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, a1, 0x8000100u, 0);
    if (ExternalRepresentation)
    {
      CFDataRef v10 = ExternalRepresentation;
      *a2 = ExternalRepresentation;
      BOOL result = 1;
      if (a3 && a4)
      {
        *a3 = (vm_address_t)CFDataGetBytePtr(v10);
        *a4 = CFDataGetLength(v10);
        return 1;
      }
      return result;
    }
LABEL_17:
    uint64_t v20 = _SC_LOG_DEFAULT();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
      _os_log_pack_size();
      uint64_t v22 = (char *)v23 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v20, v21, v22);
    }
    if (a2) {
      *a2 = 0;
    }
    BOOL result = 0;
    if (a3 && a4)
    {
      BOOL result = 0;
      *a3 = 0;
      *a4 = 0;
    }
    return result;
  }
  BOOL result = 0;
  if (!a3 || !a4) {
    return result;
  }
  CFDataRef v12 = CFStringCreateExternalRepresentation(0, a1, 0x8000100u, 0);
  if (!v12) {
    goto LABEL_17;
  }
  CFDataRef v13 = v12;
  mach_error_t v14 = __CFDataCopyVMData(v12, a3, a4);
  CFRelease(v13);
  if (!v14) {
    return 1;
  }
  uint64_t v15 = _SC_LOG_DEFAULT();
  uint64_t v16 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v15, (os_log_type_t)v16);
  if (result)
  {
    _os_log_pack_size();
    uint64_t v17 = (char *)v23 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    char v19 = mach_error_string(v14);
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)(v18 + 4) = v19;
    __SC_log_send(5, (uint64_t)v15, v16, v17);
    return 0;
  }
  return result;
}

void updateServerPort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  int v8 = 0;
  if (storeQueue_once != -1) {
    dispatch_once(&storeQueue_once, &__block_literal_global_3);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __updateServerPort_block_invoke;
  block[3] = &unk_1E55BB348;
  block[4] = v7;
  block[5] = a2;
  void block[6] = a1;
  block[7] = a3;
  dispatch_sync((dispatch_queue_t)storeQueue_q, block);
  _Block_object_dispose(v7, 8);
}

uint64_t configopen(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = 2;
  uint64_t v17 = a2;
  int v18 = 16777472;
  int v19 = a3;
  uint64_t v20 = a4;
  int v21 = 16777472;
  int v22 = a5;
  uint64_t v23 = *MEMORY[0x1E4F14068];
  int v24 = a3;
  int v25 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E2000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x3Cu, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988;
      }
      else if (msg.msgh_id == 20100)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v12 = 4294966996;
            if (HIDWORD(v17))
            {
              if (msg.msgh_remote_port) {
                uint64_t v12 = 4294966996;
              }
              else {
                uint64_t v12 = HIDWORD(v17);
              }
            }
          }
          else
          {
            uint64_t v12 = 4294966996;
          }
          goto LABEL_23;
        }
        uint64_t v12 = 4294966996;
        if (v16 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && HIWORD(v18) << 16 == 1114112)
        {
          uint64_t v12 = 0;
          int v13 = HIDWORD(v20);
          *a6 = v17;
          *a7 = v13;
          return v12;
        }
      }
      else
      {
        uint64_t v12 = 4294966995;
      }
LABEL_23:
      mach_msg_destroy(&msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  return v12;
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return SCDynamicStoreCreateWithOptions(allocator, name, 0, callout, context);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!store || CFGetTypeID(store) != TypeID)
  {
    int v6 = 2001;
    goto LABEL_10;
  }
  if (queue)
  {
    if (!*((_DWORD *)store + 10))
    {
      int v6 = 2002;
      goto LABEL_10;
    }
    if (*((void *)store + 17) || *((void *)store + 8) || *((_DWORD *)store + 12))
    {
      int v6 = 2003;
LABEL_10:
      _SCErrorSet(v6);
      LOBYTE(v7) = 0;
      return v7;
    }
    *((_DWORD *)store + 12) = 5;
    mach_port_name_t v7 = __SCDynamicStoreAddNotificationPort((mach_port_context_t)store, v5);
    if (v7)
    {
      *((void *)store + 17) = queue;
      dispatch_retain(queue);
      uint64_t v11 = dispatch_queue_create("SCDynamicStore notifications", 0);
      dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1E4F14458], v7, 0, v11);
      if (v12)
      {
        int v13 = v12;
        CFRetain(store);
        dispatch_set_context(v13, store);
        dispatch_set_finalizer_f(v13, (dispatch_function_t)dispatch_CFRelease);
        dispatch_retain(queue);
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 0x40000000;
        handler[2] = __SCDynamicStoreSetDispatchQueue_block_invoke;
        handler[3] = &__block_descriptor_tmp_14;
        mach_port_name_t v28 = v7;
        handler[4] = store;
        handler[5] = queue;
        handler[6] = store;
        dispatch_source_set_event_handler(v13, handler);
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 0x40000000;
        v25[2] = __SCDynamicStoreSetDispatchQueue_block_invoke_3;
        v25[3] = &__block_descriptor_tmp_15;
        mach_port_name_t v26 = v7;
        v25[4] = store;
        v25[5] = v11;
        v25[6] = v13;
        v25[7] = queue;
        dispatch_source_set_cancel_handler(v13, v25);
        *((void *)store + 18) = v13;
        dispatch_resume(v13);
        LOBYTE(v7) = 1;
        return v7;
      }
      mach_error_t v14 = __log_SCDynamicStore();
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        int v24 = (char *)v25 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v14, v15, v24);
      }
      mach_port_destruct(*MEMORY[0x1E4F14960], v7, 0, (mach_port_context_t)store);
      dispatch_release(v11);
      _SCErrorSet(1001);
      LOBYTE(v7) = 0;
    }
  }
  else
  {
    if (!*((void *)store + 17))
    {
      int v6 = 1002;
      goto LABEL_10;
    }
    LOBYTE(v7) = 1;
  }
  CFRetain(store);
  uint64_t v9 = *((void *)store + 18);
  if (v9)
  {
    dispatch_source_cancel(v9);
    *((void *)store + 18) = 0;
  }
  CFDataRef v10 = *((void *)store + 17);
  if (v10)
  {
    dispatch_release(v10);
    *((void *)store + 17) = 0;
  }
  *((_DWORD *)store + 12) = 0;
  CFRelease(store);
  return v7;
}

uint64_t __SCDynamicStoreAddNotificationPort(mach_port_context_t context, __n128 a2)
{
  kern_return_t v5;
  mach_error_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  kern_return_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  kern_return_t v35;
  char *v36;
  CFStringRef v37;
  UInt8 *v38;
  const char *v39;
  CFStringRef v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  mach_port_type_t v54;
  BOOL v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v72;
  __n128 *v73;
  void *v74;
  __n128 v75;
  mach_port_type_t ptype;
  mach_error_t v77;
  mach_port_name_t name[2];
  void block[2];
  void v80[5];
  mach_port_options_t options;
  uint64_t v82;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = v80;
  int v4 = (ipc_space_t *)MEMORY[0x1E4F14960];
  uint64_t v82 = v3;
  *(void *)name = 0;
  v77 = 0;
  a2.n128_u64[0] = 136315650;
  uint64_t v72 = a2;
  a2.n128_u64[0] = 136315138;
  uint64_t v75 = a2;
  do
  {
    while (1)
    {
      *(void *)&options.flags = 17;
      options.8 = 0uLL;
      __n128 v5 = mach_port_construct(*v4, &options, context, name);
      if (!v5) {
        break;
      }
      int v6 = v5;
      mach_port_name_t v7 = __log_SCDynamicStore();
      int v8 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
      {
        uint64_t v9 = _os_log_pack_size();
        uint64_t v17 = (char *)&v72 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = mach_error_string(v6);
        *(_DWORD *)uint64_t v18 = v75.n128_u32[0];
        *(void *)(v18 + 4) = v19;
        __SC_log_send(5, (uint64_t)v7, v8, v17);
      }
      if (v6 != 6 && v6 != 3) {
        goto LABEL_37;
      }
      usleep(0xC350u);
    }
    uint64_t v21 = mach_port_request_notification(*v4, name[0], 70, 1u, name[0], 0x15u, &name[1]);
    if (v21)
    {
      int v6 = v21;
      uint64_t v57 = __log_SCDynamicStore();
      char v58 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v57, (os_log_type_t)v58))
      {
        uint64_t v59 = _os_log_pack_size();
        long long v67 = (char *)&v72 - ((MEMORY[0x1F4188790](v59, v60, v61, v62, v63, v64, v65, v66) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v68 = _os_log_pack_fill();
        uint64_t v69 = mach_error_string(v6);
        *(_DWORD *)uint64_t v68 = v75.n128_u32[0];
        *(void *)(v68 + 4) = v69;
        __SC_log_send(5, (uint64_t)v57, v58, v67);
      }
      goto LABEL_37;
    }
    if (name[1])
    {
      uint64_t v22 = __log_SCDynamicStore();
      uint64_t v23 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
      {
        int v24 = _os_log_pack_size();
        uint64_t v32 = (char *)&v72 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v22, v23, v32);
      }
    }
    int v33 = notifyviaport(*(_DWORD *)(context + 40), name[0], 0, &v77);
    uint64_t v34 = v33;
    switch(v33)
    {
      case 0xFFFFFECC:
        goto LABEL_29;
      case 0:
        continue;
      case 0x10000003:
        mach_port_deallocate(*v4, name[0]);
LABEL_29:
        mach_port_destruct(*v4, name[0], 0, context);
        name[0] = 0;
        continue;
    }
    pnw_interface_type_t type = 0;
    mach_port_t v35 = mach_port_type(*v4, name[0], &ptype);
    int v36 = mach_error_string(v34);
    vm_size_t v37 = CFStringCreateWithFormat(0, 0, @"SCDynamicStore notifyviaport() failed: %s", v36);
    uint64_t v38 = _SC_cfstring_to_cstring(v37, 0, 0, 0x600u);
    CFRelease(v37);
    CFDataRef v39 = getprogname();
    vm_size_t v40 = CFStringCreateWithFormat(0, 0, @"A SCDynamicStore error has been detected by \"%s\"", v39);
    uint64_t v41 = __log_SCDynamicStore();
    int v42 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v41, (os_log_type_t)v42))
    {
      uint64_t v43 = _os_log_pack_size();
      uint64_t v73 = &v72;
      uint64_t v51 = (char *)&v72 - ((MEMORY[0x1F4188790](v43, v44, v45, v46, v47, v48, v49, v50) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      ssize_t v52 = _os_log_pack_fill();
      uint64_t v53 = mach_error_string(v34);
      int v54 = ptype;
      uint64_t v55 = (ptype & 0x150000) != 0 && v35 == 0;
      *(_DWORD *)ssize_t v52 = v72.n128_u32[0];
      uint64_t v56 = "";
      if (v55) {
        uint64_t v56 = "w/send";
      }
      *(void *)(v52 + 4) = v53;
      *(_WORD *)(v52 + 12) = 2080;
      *(void *)(v52 + 14) = v56;
      *(_WORD *)(v52 + 22) = 1024;
      *(_DWORD *)(v52 + 24) = v54;
      __SC_log_send(3, (uint64_t)v41, v42, v51);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    v80[0] = ___SC_crash_once_block_invoke_0;
    v80[1] = &__block_descriptor_tmp_16;
    v80[2] = v38;
    v80[3] = @"SCDynamicStore notify mach port error";
    v80[4] = v40;
    if (_SC_crash_once_once_0 != -1) {
      dispatch_once(&_SC_crash_once_once_0, block);
    }
    CFAllocatorDeallocate(0, v38);
    CFRelease(v40);
    if (v34) {
      goto LABEL_29;
    }
  }
  while (__SCDynamicStoreCheckRetryAndHandleError(context, v34, &v77, (uint64_t)"SCDynamicStore callback notifyviaport()"));
  uint64_t v70 = name[0];
  if (v77 && name[0])
  {
    mach_port_destruct(*v4, name[0], 0, context);
    int v6 = v77;
LABEL_37:
    _SCErrorSet(v6);
    return 0;
  }
  return v70;
}

uint64_t notifyviaport(int a1, int a2, int a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  int v12 = 1114112;
  uint64_t v13 = *MEMORY[0x1E4F14068];
  int v14 = a3;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = -2147478253;
  *(void *)&msg[16] = 0x4E3500000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x34u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 20121)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 40)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v8 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a4 = v12;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = *(_DWORD *)&msg[32] == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  v19[0] = (uint64_t)store;
  uint64_t v17 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  vm_size_t v16 = 0;
  vm_size_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = 0;
  int v6 = __SCDynamicStoreNormalize((uint64_t)v19, 0);
  if (!v6) {
    return v6;
  }
  if (keys && !_SCSerialize(keys, (CFDataRef *)&cf, (vm_address_t *)&v17, &v16)) {
    goto LABEL_23;
  }
  if (patterns && !_SCSerialize(patterns, (CFDataRef *)&v15, (vm_address_t *)&v14, &v13))
  {
    if (cf) {
      CFRelease(cf);
    }
LABEL_23:
    int v8 = 1001;
LABEL_24:
    _SCErrorSet(v8);
    LOBYTE(v6) = 0;
    return v6;
  }
  do
    uint64_t v7 = notifyset(*((_DWORD *)store + 10), v17, v16, v14, v13, &v12);
  while (__SCDynamicStoreCheckRetryAndHandleError(v19[0], v7, &v12, (uint64_t)"SCDynamicStoreSetNotificationKeys notifyset()"));
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  int v8 = v12;
  if (v12) {
    goto LABEL_24;
  }
  if (keys) {
    keys = CFArrayCreateMutableCopy(0, 0, keys);
  }
  BOOL v9 = (const void *)*((void *)store + 21);
  if (v9) {
    CFRelease(v9);
  }
  *((void *)store + 21) = keys;
  if (patterns) {
    patterns = CFArrayCreateMutableCopy(0, 0, patterns);
  }
  CFDataRef v10 = (const void *)*((void *)store + 22);
  if (v10) {
    CFRelease(v10);
  }
  *((void *)store + 22) = patterns;
  LOBYTE(v6) = 1;
  return v6;
}

uint64_t __SCDynamicStoreCheckRetryAndHandleError(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 == 268435459) {
    goto LABEL_4;
  }
  uint64_t v7 = a2;
  if (!a2) {
    return 0;
  }
  if (a2 == -308)
  {
LABEL_4:
    int v8 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ____SCDynamicStoreCheckRetryAndHandleError_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    block[4] = a1;
    dispatch_sync(v8, block);
    uint64_t v32 = 0;
    int v33 = &v32;
    uint64_t v34 = 0x2000000000;
    char v35 = 0;
    BOOL v9 = *(NSObject **)(a1 + 16);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 0x40000000;
    v31[2] = ____SCDynamicStoreReconnect_block_invoke;
    v31[3] = &unk_1E55BB320;
    v31[4] = &v32;
    v31[5] = a1;
    dispatch_sync(v9, v31);
    int v10 = *((unsigned __int8 *)v33 + 24);
    _Block_object_dispose(&v32, 8);
    if (v10) {
      return 1;
    }
    uint64_t v7 = SCError();
  }
  if (v7 != 2002)
  {
    int v12 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      int v12 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v12;
    }
    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      uint64_t v22 = (char *)block - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      int v24 = SCErrorString(v7);
      *(_DWORD *)uint64_t v23 = 136315650;
      *(void *)(v23 + 4) = a4;
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)(v23 + 14) = v24;
      *(_WORD *)(v23 + 22) = 1024;
      *(_DWORD *)(v23 + 24) = v7;
      __SC_log_send(5, (uint64_t)v12, v13, v22);
    }
    *(_DWORD *)(a1 + 40) = 0;
    int v25 = SCErrorString(v7);
    CFStringRef v26 = CFStringCreateWithFormat(0, 0, @"CheckRetryAndHandleError \"%s\" failed: %s (%d)", a4, v25, v7);
    uint64_t v27 = _SC_cfstring_to_cstring(v26, 0, 0, 0x600u);
    CFRelease(v26);
    mach_port_name_t v28 = getprogname();
    CFStringRef v29 = CFStringCreateWithFormat(0, 0, @"A SCDynamicStore error has been detected by \"%s\".", v28);
    _SC_crash((const char *)v27, @"CheckRetryAndHandleError", (uint64_t)v29);
    CFAllocatorDeallocate(0, v27);
    CFRelease(v29);
  }
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t __SCDynamicStoreNormalize(uint64_t a1, int a2)
{
  if (!a1) {
    __SCDynamicStoreNormalize_cold_1();
  }
  uint64_t v3 = *(const void **)a1;
  if (a2 && !v3)
  {
    if (__SCDynamicStoreNullSession_initialized != -1) {
      dispatch_once(&__SCDynamicStoreNullSession_initialized, &__block_literal_global_41);
    }
    uint64_t v3 = (const void *)S_null_session;
    *(void *)a1 = S_null_session;
    if (!v3) {
      return 0;
    }
  }
  if (__SCDynamicStoreInitialize_initialized == -1)
  {
    if (!v3) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_61);
    if (!v3) {
      goto LABEL_15;
    }
  }
  uint64_t v4 = __kSCDynamicStoreTypeID;
  if (CFGetTypeID(v3) == v4)
  {
    if (*(_DWORD *)(*(void *)a1 + 40)) {
      return 1;
    }
    int v6 = 2002;
    goto LABEL_16;
  }
LABEL_15:
  int v6 = 2001;
LABEL_16:
  _SCErrorSet(v6);
  return 0;
}

BOOL _SCSerialize(CFPropertyListRef propertyList, CFDataRef *a2, vm_address_t *a3, vm_size_t *a4)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    BOOL result = 0;
    if (!a3 || !a4) {
      return result;
    }
    CFDataRef Data = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      CFDataRef v12 = Data;
      mach_error_t v13 = __CFDataCopyVMData(Data, a3, a4);
      CFRelease(v12);
      if (!v13) {
        return 1;
      }
      uint64_t v14 = _SC_LOG_DEFAULT();
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v14, (os_log_type_t)v15);
      if (result)
      {
        uint64_t v16 = _os_log_pack_size();
        int v24 = (char *)v38 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        CFStringRef v26 = mach_error_string(v13);
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)(v25 + 4) = v26;
        __SC_log_send(5, (uint64_t)v14, v15, v24);
        return 0;
      }
      return result;
    }
LABEL_13:
    uint64_t v27 = _SC_LOG_DEFAULT();
    uint64_t v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, (os_log_type_t)v28))
    {
      uint64_t v29 = _os_log_pack_size();
      vm_size_t v37 = (char *)v38 - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v27, v28, v37);
    }
    if (a2) {
      *a2 = 0;
    }
    BOOL result = 0;
    if (a3 && a4)
    {
      BOOL result = 0;
      *a4 = 0;
      *a3 = 0;
    }
    return result;
  }
  CFDataRef v8 = CFPropertyListCreateData(0, propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!v8) {
    goto LABEL_13;
  }
  CFDataRef v9 = v8;
  *a2 = v8;
  BOOL result = 1;
  if (a3 && a4)
  {
    *a3 = (vm_address_t)CFDataGetBytePtr(v9);
    *a4 = CFDataGetLength(v9);
    return 1;
  }
  return result;
}

uint64_t notifyset(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v14 = 2;
  uint64_t v15 = a2;
  int v16 = 16777472;
  int v17 = a3;
  uint64_t v18 = a4;
  int v19 = 16777472;
  int v20 = a5;
  uint64_t v21 = *MEMORY[0x1E4F14068];
  int v22 = a3;
  int v23 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E3900000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3162115, 0x4Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!v9)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (msg.msgh_id == 20125)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v10 = HIDWORD(v15);
              if (!HIDWORD(v15))
              {
                *a6 = v16;
                return v10;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v11 = 1;
            }
            else {
              BOOL v11 = HIDWORD(v15) == 0;
            }
            if (v11) {
              uint64_t v10 = 4294966996;
            }
            else {
              uint64_t v10 = HIDWORD(v15);
            }
            goto LABEL_22;
          }
        }
        uint64_t v10 = 4294966996;
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  return v10;
}

CFTypeID SCDynamicStoreGetTypeID(void)
{
  if (__SCDynamicStoreInitialize_initialized != -1) {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_61);
  }
  return __kSCDynamicStoreTypeID;
}

void processHardwareDependency(uint64_t a1)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  value[0] = 0;
  if (__SCPreferencesUsingDefaultPrefs(a1))
  {
    CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 96);
    if (!v2
      || !CFDictionaryGetValueIfPresent(v2, @"allow-model-conflict", (const void **)value)
      || (v3 = value[0], CFTypeID TypeID = CFBooleanGetTypeID(), !v3)
      || CFGetTypeID(v3) != TypeID
      || !CFBooleanGetValue((CFBooleanRef)value[0]))
    {
      __n128 v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 280), @"Model");
      int v6 = (const void *)_SC_hw_model(0);
      if (v5)
      {
        uint64_t v7 = v6;
        if (v5 != v6 && (!v6 || !CFEqual(v5, v6)))
        {
          CFDataRef v8 = __log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            CFDataRef v8 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v8;
          }
          uint64_t v9 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
          {
            uint64_t v10 = _os_log_pack_size();
            uint64_t v18 = (char *)value
                - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v19 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v19 = 138412546;
            *(void *)(v19 + 4) = v5;
            *(_WORD *)(v19 + 12) = 2112;
            *(void *)(v19 + 14) = v7;
            __SC_log_send(5, (uint64_t)v8, v9, v18);
          }
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 280));
          *(unsigned char *)(a1 + 305) = 1;
        }
      }
    }
  }
}

uint64_t __SCPreferencesUsingDefaultPrefs(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  v1 = *(const char **)(a1 + 104);
  if (v1)
  {
    CFDictionaryRef v2 = (const char *)__SCPreferencesPath(0, 0);
    if (v2)
    {
      uint64_t v3 = (char *)v2;
      v1 = (const char *)(strcmp(v1, v2) == 0);
      CFAllocatorDeallocate(0, v3);
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v1;
}

CFStringRef __SCPreferencesAddSessionKeys(CFStringRef result)
{
  CFStringRef v1 = result;
  if (!result[5].length)
  {
    BOOL result = _SCPNotificationKey(0, (const __CFString *)result[2].length, 2);
    v1[5].length = (uint64_t)result;
  }
  if (!v1[6].isa)
  {
    BOOL result = _SCPNotificationKey(0, (const __CFString *)v1[2].length, 3);
    v1[6].isa = (void *)result;
  }
  return result;
}

CFStringRef _SCPNotificationKey(const __CFAllocator *a1, const __CFString *a2, int a3)
{
  if ((a3 - 1) > 2) {
    return 0;
  }
  uint64_t v4 = off_1E55BB490[a3 - 1];
  __n128 v5 = (const char *)__SCPreferencesPath(a1, a2);
  if (!v5) {
    return 0;
  }
  int v6 = (char *)v5;
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(a1, v5, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  CFStringRef v8 = CFStringCreateWithFormat(a1, 0, @"%@%@:%@", @"Prefs:", v4, v7);
  CFRelease(v7);
  CFAllocatorDeallocate(0, v6);
  return v8;
}

void *__SCPreferencesPath(CFAllocatorRef alloc, CFStringRef theString)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if (!theString)
  {
    CFStringRef Copy = CFStringCreateWithFormat(alloc, 0, @"%s%@/%@", "", @"/Library/Preferences/SystemConfiguration", @"preferences.plist");
    goto LABEL_5;
  }
  if (CFStringHasPrefix(theString, @"/"))
  {
    CFStringRef Copy = CFStringCreateCopy(alloc, theString);
LABEL_5:
    CFStringRef v5 = Copy;
    goto LABEL_6;
  }
  if (!CFEqual(theString, @"preferences.plist")) {
    CFEqual(theString, @"NetworkInterfaces.plist");
  }
  CFStringRef v5 = CFStringCreateWithFormat(alloc, 0, @"%s%@/%@", "", @"/Library/Preferences/SystemConfiguration", theString);
  if (CFStringHasSuffix(theString, @".xml"))
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(alloc, 0, v5);
    v22.location = CFStringGetLength(MutableCopy) - 4;
    v22.length = 4;
    CFStringReplace(MutableCopy, v22, @".plist");
    CFRelease(v5);
    CFStringRef v5 = MutableCopy;
  }
LABEL_6:
  int v6 = _SC_cfstring_to_cstring(v5, 0, 0, 0x600u);
  if (!v6)
  {
    CFIndex MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v5);
    int v6 = CFAllocatorAllocate(0, MaximumSizeOfFileSystemRepresentation, 0);
    if (!CFStringGetFileSystemRepresentation(v5, (char *)v6, MaximumSizeOfFileSystemRepresentation))
    {
      CFStringRef v8 = __log_SCPreferences();
      uint64_t v9 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v18 = (char *)v21 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v8, v9, v18);
      }
      CFAllocatorDeallocate(0, v6);
      int v6 = 0;
    }
  }
  CFRelease(v5);
  return v6;
}

UInt8 *_SC_cfstring_to_cstring(const __CFString *a1, UInt8 *a2, CFIndex a3, CFStringEncoding a4)
{
  return _SC_cfstring_to_cstring_ext(a1, a2, a3, a4, 0, 0);
}

CFMachPortRef _SC_CFMachPortCreateWithPort(uint64_t a1, mach_port_t a2, void (__cdecl *a3)(CFMachPortRef, void *, CFIndex, void *), CFMachPortContext *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  HIBYTE(v25) = 0;
  CFMachPortRef v6 = CFMachPortCreateWithPort(0, a2, a3, a4, (Boolean *)&v25 + 7);
  if (!v6 || HIBYTE(v25))
  {
    CFStringRef v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)&v25 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315394;
      *(void *)(v18 + 4) = a1;
      *(_WORD *)(v18 + 12) = 2048;
      *(void *)(v18 + 14) = a2;
      __SC_log_send(5, (uint64_t)v7, v8, v17);
    }
    if (v6) {
      CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%s: CFMachPortCreateWithPort recycled, [old] port = %@", a1, v6);
    }
    else {
      CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%s: CFMachPortCreateWithPort returned NULL", a1);
    }
    CFStringRef v20 = v19;
    uint64_t v21 = _SC_cfstring_to_cstring_ext(v19, 0, 0, 0x600u, 0, 0);
    CFRelease(v20);
    CFRange v22 = getprogname();
    CFStringRef v23 = CFStringCreateWithFormat(0, 0, @"A recycled mach_port has been detected by \"%s\".", v22);
    _SC_crash((const char *)v21, @"CFMachPort error", (uint64_t)v23);
    CFAllocatorDeallocate(0, v21);
    CFRelease(v23);
  }
  return v6;
}

uint64_t configget(int a1, uint64_t a2, int a3, void *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)&rcv_name[16] = 0x100000000;
  uint64_t v23 = 0;
  long long v24 = 0u;
  *(_OWORD *)rcv_name = 0u;
  uint64_t v20 = a2;
  int v21 = 16777472;
  int v22 = a3;
  uint64_t v23 = *MEMORY[0x1E4F14068];
  int v25 = 0;
  LODWORD(v24) = a3;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = special_reply_port;
  int v18 = -2147478253;
  *(void *)&rcv_name[12] = 0x4E2A00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v18);
    mach_port_name_t special_reply_port = *(_DWORD *)&rcv_name[8];
  }
  uint64_t v13 = mach_msg((mach_msg_header_t *)&v18, 3162115, 0x38u, 0x48u, special_reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!v13)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 20110)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 36)
          {
            uint64_t v14 = 4294966996;
            if (HIDWORD(v20))
            {
              if (*(_DWORD *)&rcv_name[4]) {
                uint64_t v14 = 4294966996;
              }
              else {
                uint64_t v14 = HIDWORD(v20);
              }
            }
          }
          else
          {
            uint64_t v14 = 4294966996;
          }
          goto LABEL_24;
        }
        uint64_t v14 = 4294966996;
        if (*(_DWORD *)&rcv_name[20] == 1 && *(_DWORD *)rcv_name == 64 && !*(_DWORD *)&rcv_name[4] && HIBYTE(v21) == 1)
        {
          int v15 = v22;
          if (v22 == v24)
          {
            uint64_t v14 = 0;
            *a4 = v20;
            *a5 = v15;
            int v16 = DWORD2(v24);
            *a6 = DWORD1(v24);
            *a7 = v16;
            return v14;
          }
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
LABEL_24:
      mach_msg_destroy((mach_msg_header_t *)&v18);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  return v14;
}

CFRunLoopSourceRef SCDynamicStoreCreateRunLoopSource(CFAllocatorRef allocator, SCDynamicStoreRef store, CFIndex order)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  v8[0] = store;
  if (!__SCDynamicStoreNormalize((uint64_t)v8, 0)) {
    return 0;
  }
  if ((*((_DWORD *)store + 12) | 4) != 4)
  {
    _SCErrorSet(2003);
    return 0;
  }
  CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)store + 8);
  if (result) {
    goto LABEL_6;
  }
  v7.version = 0;
  v7.info = (void *)v8[0];
  v7.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
  v7.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
  v7.copyDescription = (CFStringRef (__cdecl *)(const void *))rlsCopyDescription;
  v7.equal = (Boolean (__cdecl *)(const void *, const void *))MEMORY[0x1E4F1C238];
  v7.hash = (CFHashCode (__cdecl *)(const void *))MEMORY[0x1E4F1C240];
  v7.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))rlsSchedule;
  v7.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))rlsCancel;
  v7.perform = (void (__cdecl *)(void *))rlsPerform;
  CFRunLoopSourceRef result = CFRunLoopSourceCreate(allocator, order, &v7);
  *((void *)store + 8) = result;
  if (result || (_SCErrorSet(1001), (CFRunLoopSourceRef result = (CFRunLoopSourceRef)*((void *)store + 8)) != 0))
  {
LABEL_6:
    CFRetain(result);
    return (CFRunLoopSourceRef)*((void *)store + 8);
  }
  return result;
}

uint64_t _SC_hw_model(int a1)
{
  if (_SC_hw_model_once != -1) {
    dispatch_once(&_SC_hw_model_once, &__block_literal_global_9);
  }
  CFDictionaryRef v2 = &_SC_hw_model_model_trimmed;
  if (!a1) {
    CFDictionaryRef v2 = &_SC_hw_model_model;
  }
  return *v2;
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) == v2) {
    return (CFStringRef)*((void *)interface + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

uint64_t _SCNetworkInterfaceGetIORegistryEntryID(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@/%@", domain, @"Network", @"Global", entity);
}

dispatch_queue_t ___callback_queue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("SCNetworkReachability.callback", 0);
  _callback_queue_q = (uint64_t)result;
  return result;
}

void SCLog(int a1, int a2, CFStringRef theString, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = 0;
  if (!a1) {
    return;
  }
  if (_sc_log < 1)
  {
    uint64_t v13 = &a9;
LABEL_12:
    uint64_t v12 = (FILE **)MEMORY[0x1E4F143C8];
    if ((~a2 & 6) != 0) {
      uint64_t v12 = (FILE **)MEMORY[0x1E4F143D8];
    }
    __SCPrint(*v12, (uint64_t)theString, (uint64_t)v13, _sc_log == 2, 1);
    return;
  }
  int v11 = _sc_log;
  if (_sc_log >= 2) {
    uint64_t v13 = &a9;
  }
  if (CFStringGetCStringPtr(theString, 0x8000100u))
  {
    if (!_SC_LOG_DEFAULT_log) {
      _SC_LOG_DEFAULT_log = (uint64_t)os_log_create("com.apple.SystemConfiguration", "");
    }
    os_log_with_args();
  }
  if (v11 >= 2) {
    goto LABEL_12;
  }
}

void __SCNetworkInterfaceDeallocate(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  CFMachPortRef v6 = (const void *)a1[9];
  if (v6) {
    CFRelease(v6);
  }
  CFRunLoopSourceContext v7 = (const void *)a1[10];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[11];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[12];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)a1[13];
  if (v10) {
    CFRelease(v10);
  }
  int v11 = (const void *)a1[14];
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)a1[15];
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)a1[18];
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)a1[19];
  if (v14) {
    CFRelease(v14);
  }
  int v15 = (const void *)a1[20];
  if (v15) {
    CFRelease(v15);
  }
  int v16 = (const void *)a1[21];
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = (const void *)a1[23];
  if (v17) {
    CFRelease(v17);
  }
  int v18 = (const void *)a1[25];
  if (v18) {
    CFRelease(v18);
  }
  CFStringRef v19 = (const void *)a1[26];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)a1[28];
  if (v20) {
    CFRelease(v20);
  }
  int v21 = (const void *)a1[29];
  if (v21) {
    CFRelease(v21);
  }
  int v22 = (const void *)a1[31];
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = (const void *)a1[32];
  if (v23) {
    CFRelease(v23);
  }
  long long v24 = (const void *)a1[33];
  if (v24) {
    CFRelease(v24);
  }
  int v25 = (const void *)a1[34];
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = (const void *)a1[35];
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = (const void *)a1[37];
  if (v27) {
    CFRelease(v27);
  }
  uint64_t v28 = (const void *)a1[36];
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = (const void *)a1[40];
  if (v29) {
    CFRelease(v29);
  }
  uint64_t v30 = (const void *)a1[41];
  if (v30) {
    CFRelease(v30);
  }
  uint64_t v31 = (const void *)a1[42];
  if (v31) {
    CFRelease(v31);
  }
  uint64_t v32 = (const void *)a1[44];
  if (v32) {
    CFRelease(v32);
  }
  uint64_t v33 = (const void *)a1[45];
  if (v33) {
    CFRelease(v33);
  }
  uint64_t v34 = (const void *)a1[47];
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = (const void *)a1[48];
  if (v35) {
    CFRelease(v35);
  }
  uint64_t v36 = (const void *)a1[49];
  if (v36) {
    CFRelease(v36);
  }
  vm_size_t v37 = (const void *)a1[50];
  if (v37)
  {
    CFRelease(v37);
  }
}

void __SCThreadSpecificDataFinalize(void *ptr)
{
  if (ptr)
  {
    uint64_t v2 = (const void *)ptr[1];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)ptr[2];
    if (v3) {
      CFRelease(v3);
    }
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFAllocatorDeallocate(v4, ptr);
  }
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) == v2) {
    return (SCNetworkInterfaceRef)*((void *)interface + 9);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

void __SCDynamicStoreDeallocate(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  pthread_setcanceltype(2, &v10);
  if (*(void *)(a1 + 144)) {
    _SC_crash("SCDynamicStore OVER-RELEASED (notification still active)", 0, 0);
  }
  if (*(void *)(a1 + 16))
  {
    if (storeQueue_once != -1) {
      dispatch_once(&storeQueue_once, &__block_literal_global_3);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ____SCDynamicStoreDeallocate_block_invoke;
    block[3] = &__block_descriptor_tmp_63;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)storeQueue_q, block);
  }
  SCDynamicStoreNotifyCancel(a1);
  mach_port_name_t v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
    *(_DWORD *)(a1 + 40) = 0;
  }
  pthread_setcanceltype(0, &v10);
  pthread_testcancel();
  uint64_t v3 = *(void (**)(void))(a1 + 104);
  if (v3) {
    v3(*(void *)(a1 + 88));
  }
  CFAllocatorRef v4 = *(const void **)(a1 + 168);
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = *(const void **)(a1 + 176);
  if (v5) {
    CFRelease(v5);
  }
  CFMachPortRef v6 = *(const void **)(a1 + 24);
  if (v6) {
    CFRelease(v6);
  }
  CFRunLoopSourceContext v7 = *(const void **)(a1 + 32);
  if (v7) {
    CFRelease(v7);
  }
  if (*(unsigned char *)(a1 + 200)) {
    _SCDynamicStoreCacheClose(a1);
  }
  uint64_t v8 = *(NSObject **)(a1 + 16);
  if (v8) {
    dispatch_release(v8);
  }
}

uint64_t SCDynamicStoreNotifyCancel(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!a1 || CFGetTypeID((CFTypeRef)a1) != TypeID)
  {
    int v5 = 2001;
LABEL_9:
    _SCErrorSet(v5);
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 0:
      return 1;
    case 5:
      SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)a1, 0);
      return 1;
    case 4:
      CFAllocatorRef v4 = *(__CFRunLoopSource **)(a1 + 64);
      if (v4)
      {
        *(void *)(a1 + 64) = 0;
        CFRunLoopSourceInvalidate(v4);
        CFRelease(v4);
      }
      return 1;
  }
  mach_port_t v11 = 0;
  mach_port_t v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
  {
    mach_port_t v10 = 2002;
    mach_port_t v11 = 2002;
LABEL_18:
    int v5 = v10;
    goto LABEL_9;
  }
  uint64_t v8 = notifycancel(v7, &v11);
  int v9 = __SCDynamicStoreCheckRetryAndHandleError(a1, v8, &v11, (uint64_t)"SCDynamicStoreNotifyCancel notifycancel()");
  uint64_t result = 1;
  if (!v9)
  {
    mach_port_t v10 = v11;
    if (v11) {
      goto LABEL_18;
    }
  }
  return result;
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (entity) {
    return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@/%@/%@", domain, @"Network", @"Interface", ifname, entity, v6);
  }
  else {
    return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@/%@", domain, @"Network", @"Interface", ifname, v5, v6);
  }
}

Boolean SCPreferencesScheduleWithRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
    if (prefs) {
      goto LABEL_3;
    }
LABEL_10:
    _SCErrorSet(1002);
    return 0;
  }
  if (!prefs) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v6 = __kSCPreferencesTypeID;
  CFTypeID v7 = CFGetTypeID(prefs);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_10;
  }

  return __SCPreferencesScheduleWithRunLoop((uint64_t)prefs, runLoop, runLoopMode, 0);
}

uint64_t _SCNetworkInterfaceGetFamilyType(const __CFNumber *interface)
{
  uint64_t result = *((void *)interface + 33);
  if (!result)
  {
    update_ift_family(interface);
    return *((void *)interface + 33);
  }
  return result;
}

CFNumberRef update_ift_family(CFNumberRef interface)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*((void *)interface + 33))
  {
    CFNumberRef v1 = interface;
    if (!*((void *)interface + 34))
    {
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
      long long v5 = 0u;
      long long v6 = 0u;
      if (BSDName)
      {
        if (_SC_cfstring_to_cstring(BSDName, (UInt8 *)&v5, 16, 0x600u))
        {
          int v3 = socket(2, 2, 0);
          if (v3 != -1)
          {
            int v4 = v3;
            if (ioctl(v3, 0xC020699FuLL, &v5) == -1) {
              *(void *)((char *)&v6 + 4) = 0;
            }
            close(v4);
          }
        }
      }
      *((void *)v1 + 33) = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v6 + 4);
      interface = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v6 + 8);
      *((void *)v1 + 34) = interface;
    }
  }
  return interface;
}

__CFArray *_SCNetworkInterfaceCopyAllWithPreferences(const __SCPreferences *a1)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if (__wait_for_IOKit_to_quiesce_iokit_quiet != -1) {
    dispatch_once(&__wait_for_IOKit_to_quiesce_iokit_quiet, &__block_literal_global_655);
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  int v3 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v3)
  {
    int v4 = v3;
    add_interfaces(Mutable, v3);
    CFRelease(v4);
  }
  keys[0] = @"IOProviderClass";
  keys[1] = @"IOSerialBSDClientType";
  values[0] = @"IOSerialBSDClient";
  values[1] = @"IOSerialStream";
  CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MatchingInterfaces = findMatchingInterfaces(v5, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface, @"HiddenPort", 0, 0);
  CFRelease(v5);
  if (MatchingInterfaces)
  {
    add_interfaces(Mutable, MatchingInterfaces);
    CFRelease(MatchingInterfaces);
  }
  uint64_t v7 = a1;
  if (a1 || (uint64_t v7 = SCPreferencesCreate(0, @"SCNetworkInterfaceCopyAll", 0)) != 0)
  {
    CFArrayRef v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(v7);
    if (v8)
    {
      CFArrayRef v9 = v8;
      add_interfaces(Mutable, v8);
      CFRelease(v9);
    }
    CFArrayRef v10 = SCVLANInterfaceCopyAll(v7);
    if (v10)
    {
      CFArrayRef v11 = v10;
      add_interfaces(Mutable, v10);
      CFRelease(v11);
    }
    if (!a1) {
      CFRelease(v7);
    }
  }
  uint64_t Count = CFArrayGetCount(Mutable);
  if (Count >= 2)
  {
    v16.length = Count;
    v16.location = 0;
    CFArraySortValues(Mutable, v16, (CFComparatorFunction)_SCNetworkInterfaceCompare, 0);
  }
  return Mutable;
}

void add_interfaces(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex)) {
        CFArrayAppendValue(a1, ValueAtIndex);
      }
    }
  }
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_9:
      int v4 = 1002;
      goto LABEL_10;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_9;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_9;
  }
  int v3 = (void *)*((void *)interface + 9);
  if (!v3 || v3 == &__kSCNetworkInterfaceIPv4) {
    return (CFStringRef)*((void *)interface + 14);
  }
  int v4 = 0;
LABEL_10:
  _SCErrorSet(v4);
  return 0;
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  int v3 = (const __SCPreferences *)__SCPreferencesCreate(allocator, name, prefsID, 0, 0);
  if (v3)
  {
    int v4 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v4 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v4;
    }
    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)v17 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = v3;
      __SC_log_send(7, (uint64_t)v4, v5, v14);
    }
  }
  return v3;
}

__CFArray *__SCNetworkInterfaceCopyAll_IONetworkInterface(int a1)
{
  CFMutableDictionaryRef v2 = IOServiceMatching("IONetworkInterface");
  MatchingInterfaces = findMatchingInterfaces(v2, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processNetworkInterface, @"HiddenInterface", 0, a1);
  CFRelease(v2);
  return MatchingInterfaces;
}

CFArrayRef SCVLANInterfaceCopyAll(SCPreferencesRef prefs)
{
  context[3] = *MEMORY[0x1E4F143B8];
  if (__SCPreferencesUsingDefaultPrefs((uint64_t)prefs)) {
    Companion = 0;
  }
  else {
    Companion = SCPreferencesCreateCompanion((uint64_t)prefs, @"NetworkInterfaces.plist");
  }
  context[0] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  context[1] = Companion;
  context[2] = prefs;
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"VirtualNetworkInterfaces", @"VLAN");
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFAllocatorRef v6 = CFGetAllocator(Value);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v6, Value);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)add_configured_interface_0, context);
    CFRelease(Copy);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  return (CFArrayRef)context[0];
}

uint64_t SCBridgeInterfaceCopyAll(const __SCPreferences *a1)
{
  context[3] = *MEMORY[0x1E4F143B8];
  if (__SCPreferencesUsingDefaultPrefs((uint64_t)a1)) {
    Companion = 0;
  }
  else {
    Companion = SCPreferencesCreateCompanion((uint64_t)a1, @"NetworkInterfaces.plist");
  }
  context[1] = Companion;
  context[2] = a1;
  context[0] = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"VirtualNetworkInterfaces", @"Bridge");
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFAllocatorRef v6 = CFGetAllocator(Value);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v6, Value);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)add_configured_interface, context);
    CFRelease(Copy);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  return context[0];
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_11:
    _SCErrorSet(1002);
    return 0;
  }
  if (!service) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_11;
  }
  if (!*((void *)service + 3))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), @"Interface");
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID) {
        *((void *)service + 3) = _SCNetworkInterfaceCreateWithEntity(0, Value, (uint64_t)service);
      }
    }
  }
  return (SCNetworkInterfaceRef)*((void *)service + 3);
}

SCNetworkInterfaceRef _SCNetworkInterfaceCreateWithEntity(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v99 = 0;
  value = 0;
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if ((_UNKNOWN *)a3 == &__SCNetworkInterfaceSearchExternal)
  {
    uint64_t v5 = 0;
    BOOL v7 = 0;
    int v6 = 0;
    a3 = 0;
  }
  else if ((_UNKNOWN *)a3 == &__SCNetworkInterfaceSearchSystem)
  {
    uint64_t v5 = 0;
    a3 = 0;
    BOOL v7 = 1;
    int v6 = 1;
  }
  else if (a3)
  {
    uint64_t v5 = *(const __SCPreferences **)(a3 + 32);
    int v6 = 0;
    BOOL v7 = !_SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v5);
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
    BOOL v7 = 1;
  }
  uint64_t v8 = (__CFString *)CFDictionaryGetValue(a2, @"Type");
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = @"Ethernet";
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v9 || CFGetTypeID(v9) != TypeID) {
    return 0;
  }
  CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(a2, @"SubType");
  uint64_t v12 = @"PPP";
  if (CFEqual(v9, @"PPP") || CFEqual(v9, @"VPN"))
  {
    CFTypeID v13 = CFStringGetTypeID();
    if (!v11 || CFGetTypeID(v11) != v13) {
      return 0;
    }
  }
  CFStringRef v98 = (const __CFString *)CFDictionaryGetValue(a2, @"DeviceName");
  CFStringRef v97 = (const __CFString *)CFDictionaryGetValue(a2, @"DeviceUniqueIdentifier");
  if (CFEqual(v9, @"Ethernet")
    || CFEqual(v9, @"FireWire")
    || CFEqual(v9, @"Cellular")
    || CFEqual(v9, @"PPP") && CFEqual(v11, @"PPPoE"))
  {
    CFTypeID v14 = CFStringGetTypeID();
    if (!v98) {
      return 0;
    }
    CFIndex Count = (CFIndex)v11;
    if (CFGetTypeID(v98) != v14) {
      return 0;
    }
    uint64_t v15 = CFEqual(v98, @"lo0");
    if (v15)
    {
      uint64_t Copy = (uint64_t)__SCNetworkInterfaceCreateCopy(v15, (uint64_t)&__kSCNetworkInterfaceLoopback, 0, 0);
      uint64_t v12 = @"PPP";
      CFStringRef v11 = (const __CFString *)Count;
      goto LABEL_112;
    }
    if (__SCNetworkInterfaceCacheCopy(v98, (uint64_t *)&v99))
    {
      MatchingInterfaces = v99;
      uint64_t v12 = @"PPP";
      CFStringRef v11 = (const __CFString *)Count;
      if (v99) {
        goto LABEL_44;
      }
      goto LABEL_92;
    }
    if (v7)
    {
      uint64_t v12 = @"PPP";
      if (_SC_cfstring_to_cstring(v98, (UInt8 *)&keys, 16, 0x8000100u))
      {
        CFDictionaryRef v19 = _SC_IONetworkInterfaceBSDNameMatching((char *)&keys);
        if (v19)
        {
          CFDictionaryRef v20 = v19;
          MatchingInterfaces = findMatchingInterfaces(v19, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processNetworkInterface, @"HiddenInterface", v6, 1);
          uint64_t v99 = MatchingInterfaces;
          __SCNetworkInterfaceCacheAdd(v98, MatchingInterfaces);
          CFRelease(v20);
LABEL_42:
          CFStringRef v11 = (const __CFString *)Count;
          goto LABEL_43;
        }
        __SCNetworkInterfaceCacheAdd(v98, 0);
      }
      CFStringRef v11 = (const __CFString *)Count;
LABEL_92:
      CFIndex Count = (CFIndex)@"PPP";
LABEL_93:
      LODWORD(v95) = v7;
      BOOL v34 = !v7;
      goto LABEL_118;
    }
    MatchingInterfaces = v99;
    uint64_t v12 = @"PPP";
    goto LABEL_42;
  }
  if (CFEqual(v9, @"PPP"))
  {
    if (CFEqual(v11, @"PPPSerial"))
    {
      if (!isA_CFString(v98)) {
        return 0;
      }
      if (!v7)
      {
        MatchingInterfaces = 0;
        goto LABEL_43;
      }
      keys = @"IOProviderClass";
      uint64_t v103 = @"IOTTYBaseName";
      values[0] = @"IOSerialBSDClient";
      values[1] = (void *)v98;
      CFDictionaryRef v18 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFArrayRef v95 = findMatchingInterfaces(v18, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface, @"HiddenPort", v6, 1);
      uint64_t v99 = v95;
      CFRelease(v18);
      if (v97)
      {
LABEL_36:
        MatchingInterfaces = v95;
        goto LABEL_43;
      }
      CFArrayRef v81 = v95;
      if (v95)
      {
        CFIndex Count = CFArrayGetCount(v95);
        if (Count >= 1)
        {
          if (*((void *)CFArrayGetValueAtIndex(v95, 0) + 15)) {
            goto LABEL_36;
          }
          CFIndex v82 = 1;
          do
          {
            CFIndex v83 = v82;
            if (Count == v82) {
              break;
            }
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v95, v82);
            CFIndex v82 = v83 + 1;
          }
          while (!ValueAtIndex[15]);
          BOOL v29 = v83 < Count;
          CFArrayRef v81 = v95;
          if (v29)
          {
            MatchingInterfaces = v95;
            goto LABEL_43;
          }
        }
        CFRelease(v81);
      }
      uint64_t v103 = @"IOTTYDevice";
      CFDictionaryRef v88 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      MatchingInterfaces = findMatchingInterfaces(v88, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))processSerialInterface, @"HiddenPort", v6, 1);
      uint64_t v99 = MatchingInterfaces;
      CFRelease(v88);
LABEL_43:
      if (MatchingInterfaces)
      {
LABEL_44:
        CFIndex v21 = CFArrayGetCount(MatchingInterfaces);
        if (!v21) {
          goto LABEL_51;
        }
        uint64_t v22 = v21;
        if (v21 == 1)
        {
          uint64_t Copy = (uint64_t)CFArrayGetValueAtIndex(MatchingInterfaces, 0);
          CFStringRef v23 = *(const __CFString **)(Copy + 120);
          if (v97 == v23 || v97 && v23 && CFEqual(v97, v23))
          {
            CFRetain((CFTypeRef)Copy);
            goto LABEL_111;
          }
LABEL_51:
          if (CFEqual(v9, @"Ethernet")
            && (!CFDictionaryGetValueIfPresent(a2, @"UserDefinedName", (const void **)&value)
             || !CFEqual(value, @"Bluetooth PAN")))
          {
            uint64_t v28 = v5;
            if (v5 || (uint64_t v28 = SCPreferencesCreate(0, @"SCNetworkInterface", 0)) != 0)
            {
              if (CFDictionaryContainsKey(a2, @"_NO_BRIDGE_INTERFACES_")
                || (uint64_t Copy = (uint64_t)findBridgeInterface(v28, v98)) == 0)
              {
                if (CFDictionaryContainsKey(a2, @"_NO_VLAN_INTERFACES_")) {
                  uint64_t Copy = 0;
                }
                else {
                  uint64_t Copy = (uint64_t)findVLANInterface(v28, v98);
                }
              }
              if (v5) {
                uint64_t v5 = v28;
              }
              else {
                CFRelease(v28);
              }
              goto LABEL_111;
            }
            uint64_t v5 = 0;
          }
          uint64_t Copy = 0;
LABEL_111:
          CFRelease(v99);
          goto LABEL_112;
        }
        CFArrayRef v95 = MatchingInterfaces;
        CFIndex Count = (CFIndex)@"PPP";
        uint64_t v94 = (unsigned char *)v21;
        if (v97)
        {
          if (v21 >= 1)
          {
            uint64_t v24 = 0;
            for (CFIndex i = 0; (unsigned char *)i != v94; ++i)
            {
              uint64_t Copy = (uint64_t)CFArrayGetValueAtIndex(v95, i);
              CFStringRef v26 = *(const __CFString **)(Copy + 120);
              if (v97 == v26 || v26 && CFEqual(v97, v26))
              {
                if (v24) {
                  goto LABEL_107;
                }
              }
              else
              {
                uint64_t Copy = v24;
              }
              uint64_t v24 = Copy;
            }
LABEL_106:
            if (Copy) {
              goto LABEL_110;
            }
          }
        }
        else
        {
          if (CFDictionaryGetValueIfPresent(a2, @"UserDefinedName", (const void **)&value)) {
            BOOL v29 = v22 < 1;
          }
          else {
            BOOL v29 = 1;
          }
          if (!v29)
          {
            uint64_t v30 = 0;
            CFIndex v31 = 0;
            while (1)
            {
              uint64_t v32 = (CFStringRef *)CFArrayGetValueAtIndex(v95, v31);
              uint64_t Copy = (uint64_t)v32;
              if (!v32[15]
                || (CFStringRef NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName(v32)) == 0
                || value == NonLocalizedDisplayName
                || value && CFEqual(value, NonLocalizedDisplayName))
              {
                if (v30)
                {
                  uint64_t Copy = 0;
                  goto LABEL_106;
                }
              }
              else
              {
                uint64_t Copy = v30;
              }
              ++v31;
              uint64_t v30 = Copy;
              if (v94 == (unsigned char *)v31) {
                goto LABEL_106;
              }
            }
          }
        }
LABEL_107:
        uint64_t v35 = __log_SCNetworkConfiguration();
        unsigned int v36 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
        {
          uint64_t v37 = _os_log_pack_size();
          unsigned int v93 = v36;
          uint64_t v94 = v92;
          unsigned int v45 = &v92[-((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0)];
          __error();
          uint64_t v46 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v46 = 138412290;
          *(void *)(v46 + 4) = v98;
          __SC_log_send(5, (uint64_t)v35, v93, v45);
        }
        uint64_t Copy = (uint64_t)CFArrayGetValueAtIndex(v95, 0);
LABEL_110:
        CFRetain((CFTypeRef)Copy);
        uint64_t v12 = (__CFString *)Count;
        goto LABEL_111;
      }
      goto LABEL_92;
    }
    if (CFEqual(v11, @"L2TP"))
    {
      CFStringRef v27 = @"L2TP";
    }
    else if (CFEqual(v11, @"PPTP"))
    {
      CFStringRef v27 = @"PPTP";
    }
    else
    {
      CFStringRef v27 = v11;
    }
    goto LABEL_214;
  }
  if (CFEqual(v9, @"6to4"))
  {
    if (!isA_CFString(v98)) {
      return 0;
    }
    CFStringRef v27 = @"6to4";
    goto LABEL_214;
  }
  if (CFEqual(v9, @"IPSec"))
  {
    CFStringRef v27 = @"IPSec";
LABEL_214:
    uint64_t v86 = SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v27);
    goto LABEL_215;
  }
  uint64_t v85 = CFEqual(v9, @"Loopback");
  if (v85)
  {
    uint64_t v86 = (void *)__SCNetworkInterfaceCreateCopy(v85, (uint64_t)&__kSCNetworkInterfaceLoopback, 0, 0);
LABEL_215:
    uint64_t Copy = (uint64_t)v86;
    goto LABEL_112;
  }
  CFIndex Count = (CFIndex)@"PPP";
  if (CFEqual(v9, @"VPN"))
  {
    if (CFStringFind(v11, @".", 0).location == -1) {
      goto LABEL_93;
    }
    CFStringRef v87 = v11;
  }
  else
  {
    if (CFStringFind(v9, @".", 0).location == -1 || v98) {
      goto LABEL_93;
    }
    CFStringRef v87 = v9;
  }
  uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v87);
  uint64_t v12 = (__CFString *)Count;
LABEL_112:
  if (Copy && v7) {
    goto LABEL_158;
  }
  CFIndex Count = (CFIndex)v12;
  BOOL v34 = !v7;
  if (v7 || !Copy)
  {
    LODWORD(v95) = v7;
  }
  else
  {
    CFRelease((CFTypeRef)Copy);
    LODWORD(v95) = 0;
    BOOL v34 = 1;
  }
LABEL_118:
  CFStringRef v47 = v97;
  uint64_t Copy = __SCNetworkInterfaceCreatePrivate(0, 0, 0, 0);
  *(void *)(Copy + 128) = v9;
  *(void *)(Copy + 136) = v11;
  if (v98) {
    CFStringRef v48 = CFStringCreateCopy(0, v98);
  }
  else {
    CFStringRef v48 = 0;
  }
  *(void *)(Copy + 112) = v48;
  CFStringRef v49 = 0;
  if (v47) {
    CFStringRef v49 = CFStringCreateCopy(0, v47);
  }
  *(void *)(Copy + 120) = v49;
  CFStringRef v50 = (const __CFString *)CFDictionaryGetValue(a2, @"UserDefinedName");
  CFTypeID v51 = CFStringGetTypeID();
  if (!v50) {
    goto LABEL_137;
  }
  CFTypeID v52 = v51;
  CFTypeID v53 = CFGetTypeID(v50);
  BOOL v54 = v53 == v52;
  if (v53 == v52) {
    CFStringRef v55 = v50;
  }
  else {
    CFStringRef v55 = 0;
  }
  if (!v54 || !v34)
  {
    CFStringRef v50 = v55;
LABEL_137:
    uint64_t v12 = (__CFString *)Count;
    goto LABEL_138;
  }
  CFRetain(v55);
  uint64_t v57 = *(const void **)(Copy + 32);
  uint64_t v12 = (__CFString *)Count;
  if (v57) {
    CFRelease(v57);
  }
  *(void *)(Copy + 32) = v55;
  CFRetain(v55);
  char v58 = *(const void **)(Copy + 40);
  if (v58) {
    CFRelease(v58);
  }
  *(void *)(Copy + 40) = v55;
LABEL_138:
  if (CFEqual(v9, @"Ethernet"))
  {
    if ((v95 & 1) == 0)
    {
      BridgeInterface = findBridgeInterface(v5, v98);
      if (BridgeInterface || (BridgeInterface = findVLANInterface(v5, v98)) != 0)
      {
        CFRelease((CFTypeRef)Copy);
        uint64_t Copy = (uint64_t)BridgeInterface;
LABEL_155:
        __SCNetworkInterfaceCacheAdd1(v98, (const void *)Copy);
        goto LABEL_156;
      }
    }
    uint64_t v59 = CFDictionaryGetValue(a2, @"Hardware");
    CFTypeID v60 = CFStringGetTypeID();
    if (v59 && CFGetTypeID(v59) == v60 && CFEqual(v59, @"AirPort"))
    {
      *(void *)(Copy + 16) = @"IEEE80211";
      *(void *)(Copy + 48) = @"airport";
      int v61 = 12;
LABEL_153:
      *(_DWORD *)(Copy + 312) = v61;
LABEL_154:
      *(unsigned char *)(Copy + 176) = 1;
      goto LABEL_155;
    }
    *(void *)(Copy + 16) = @"Ethernet";
    if (__SCNetworkInterfaceMatchesName(v50, @"ether")
      || __SCNetworkInterfaceMatchesName(v50, @"multiether"))
    {
      int v61 = 7;
      goto LABEL_153;
    }
    v77 = @"iPhone";
    if (__SCNetworkInterfaceMatchesName(v50, @"iPhone")
      || __SCNetworkInterfaceMatchesName(v50, @"X-iPhone")
      || (v77 = @"iPad", __SCNetworkInterfaceMatchesName(v50, @"iPad"))
      || __SCNetworkInterfaceMatchesName(v50, @"X-iPad"))
    {
      *(void *)(Copy + 48) = v77;
      int v74 = 16;
    }
    else
    {
      if (__SCNetworkInterfaceMatchesName(v50, @"thunderbolt")
        || __SCNetworkInterfaceMatchesName(v50, @"multithunderbolt"))
      {
        *(void *)(Copy + 48) = @"thunderbolt";
        int v61 = 13;
        goto LABEL_153;
      }
      if (__SCNetworkInterfaceMatchesName(v50, @"bluetooth-pan-gn"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-gn";
        int v74 = 18;
      }
      else if (__SCNetworkInterfaceMatchesName(v50, @"bluetooth-pan-nap"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-nap";
        int v74 = 19;
      }
      else if (__SCNetworkInterfaceMatchesName(v50, @"bluetooth-pan-u"))
      {
        *(void *)(Copy + 48) = @"bluetooth-pan-u";
        int v74 = 20;
      }
      else
      {
        int v74 = 7;
      }
    }
LABEL_190:
    *(_DWORD *)(Copy + 312) = v74;
    goto LABEL_155;
  }
  if (CFEqual(v9, @"FireWire"))
  {
    *(void *)(Copy + 16) = @"FireWire";
    *(_DWORD *)(Copy + 312) = 11;
    if (!__SCNetworkInterfaceMatchesName(v50, @"firewire")) {
      goto LABEL_155;
    }
    goto LABEL_154;
  }
  if (!CFEqual(v9, v12) || !v11)
  {
    if (CFEqual(v9, @"VPN") && v11) {
      goto LABEL_194;
    }
    if (CFEqual(v9, @"IPSec"))
    {
      CFRelease((CFTypeRef)Copy);
      CFStringRef v76 = @"IPSec";
LABEL_182:
      uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v76);
      goto LABEL_156;
    }
    if (CFEqual(v9, @"6to4"))
    {
      CFRelease((CFTypeRef)Copy);
      if (isA_CFString(v98))
      {
        CFStringRef v76 = @"6to4";
        goto LABEL_182;
      }
    }
    else
    {
      if (CFEqual(v9, @"PointToPoint"))
      {
        *(void *)(Copy + 16) = @"PointToPoint";
        goto LABEL_156;
      }
      if (CFEqual(v9, @"Loopback"))
      {
        CFRelease((CFTypeRef)Copy);
        uint64_t Copy = (uint64_t)__SCNetworkInterfaceCreateCopy(v89, (uint64_t)&__kSCNetworkInterfaceLoopback, 0, 0);
        goto LABEL_156;
      }
      if (CFStringFind(v9, @".", 0).location != -1)
      {
        pthread_mutex_lock(&lock_1);
        CFMutableDictionaryRef Mutable = (__CFSet *)vendor_interface_types;
        if (!vendor_interface_types)
        {
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
          vendor_interface_types = (uint64_t)Mutable;
        }
        CFSetAddValue(Mutable, v9);
        *(void *)(Copy + 16) = CFSetGetValue((CFSetRef)vendor_interface_types, v9);
        pthread_mutex_unlock(&lock_1);
        goto LABEL_156;
      }
      CFRelease((CFTypeRef)Copy);
    }
    return 0;
  }
  if (CFEqual(v11, @"PPPoE"))
  {
    uint64_t v73 = CFDictionaryGetValue(a2, @"Hardware");
    if (isA_CFString(v73) && CFEqual(v73, @"AirPort"))
    {
      int v74 = 12;
      uint64_t v75 = @"IEEE80211";
    }
    else
    {
      int v74 = 7;
      uint64_t v75 = @"Ethernet";
    }
    *(void *)(Copy + 16) = v75;
    goto LABEL_190;
  }
  if (!CFEqual(v11, @"PPPSerial"))
  {
LABEL_194:
    CFRelease((CFTypeRef)Copy);
    uint64_t Copy = (uint64_t)SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)&__kSCNetworkInterfaceIPv4, v11);
    if (!Copy) {
      return (SCNetworkInterfaceRef)Copy;
    }
    goto LABEL_156;
  }
  uint64_t v78 = v12;
  CFStringRef v79 = v98;
  if (CFStringHasPrefix(v98, @"Bluetooth"))
  {
    *(void *)(Copy + 16) = @"Bluetooth";
    int v80 = 3;
  }
  else if (CFStringHasPrefix(v79, @"wwan"))
  {
    *(void *)(Copy + 16) = @"WWAN";
    int v80 = 4;
  }
  else
  {
    *(void *)(Copy + 16) = @"Modem";
    int v80 = 2;
  }
  *(_DWORD *)(Copy + 312) = v80;
  uint64_t v12 = v78;
LABEL_156:
  CFBooleanRef v63 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"HiddenConfiguration");
  *(unsigned char *)(Copy + 192) = getBooleanValue(v63);
  if (CFDictionaryContainsKey(a2, @"TrustRequired")) {
    *(unsigned char *)(Copy + 240) = 1;
  }
LABEL_158:
  if (a3)
  {
    __SCNetworkInterfaceSetService(Copy, a3);
    if (CFEqual(*(CFTypeRef *)(Copy + 16), @"Bridge"))
    {
      CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)Copy);
      if (MemberInterfaces)
      {
        CFArrayRef v65 = MemberInterfaces;
        CFIndex v66 = CFArrayGetCount(MemberInterfaces);
        if (v66 >= 1)
        {
          CFIndex v67 = v66;
          for (CFIndex j = 0; j != v67; ++j)
          {
            uint64_t v69 = CFArrayGetValueAtIndex(v65, j);
            __SCNetworkInterfaceSetService((uint64_t)v69, a3);
          }
        }
      }
    }
    if (CFEqual(*(CFTypeRef *)(Copy + 16), @"VLAN"))
    {
      SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface((SCVLANInterfaceRef)Copy);
      if (PhysicalInterface) {
        __SCNetworkInterfaceSetService((uint64_t)PhysicalInterface, a3);
      }
    }
  }
  if (CFEqual(v9, v12))
  {
    CFStringRef v71 = @"PPP";
LABEL_171:
    SCNetworkInterfaceRef v72 = SCNetworkInterfaceCreateWithInterface((SCNetworkInterfaceRef)Copy, v71);
    CFRelease((CFTypeRef)Copy);
    return v72;
  }
  if (CFEqual(v9, @"VPN"))
  {
    CFStringRef v71 = @"VPN";
    goto LABEL_171;
  }
  return (SCNetworkInterfaceRef)Copy;
}

CFTypeRef __SCNetworkInterfaceSetService(uint64_t a1, uint64_t a2)
{
  int v4 = *(const void **)(a1 + 80);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 80) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 96);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 96) = 0;
  }
  int v6 = *(const void **)(a2 + 32);
  if (v6) {
    *(void *)(a1 + 80) = CFRetain(v6);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 16);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    *(void *)(a1 + 96) = result;
  }
  return result;
}

BOOL _SCNetworkConfigurationBypassSystemInterfaces(uint64_t a1)
{
  char NetworkConfigurationFlags = __SCPreferencesGetNetworkConfigurationFlags(a1);
  if ((NetworkConfigurationFlags & 3) != 0) {
    return NetworkConfigurationFlags & 1;
  }
  else {
    return __SCPreferencesUsingDefaultPrefs(a1) == 0;
  }
}

uint64_t __SCPreferencesGetNetworkConfigurationFlags(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 308);
  }
  return result;
}

__CFArray *findMatchingInterfaces(const void *a1, unsigned int (*a2)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *), const __CFString *a3, int a4, int a5)
{
  kern_return_t MatchingServices;
  kern_return_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  __CFArray *Mutable;
  uint64_t v25;
  uint64_t v26;
  _DWORD *Interface;
  const void *v28;
  uint64_t v30;
  uint64_t v31;

  CFIndex v31 = *MEMORY[0x1E4F143B8];
  HIDWORD(v30) = 0;
  CFRetain(a1);
  MatchingServices = IOServiceGetMatchingServices(masterPort, (CFDictionaryRef)a1, (io_iterator_t *)&v30 + 1);
  if (MatchingServices)
  {
    CFStringRef v11 = MatchingServices;
    uint64_t v12 = __log_SCNetworkConfiguration();
    CFTypeID v13 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
    {
      CFTypeID v14 = _os_log_pack_size();
      uint64_t v22 = (char *)&v30 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      CFStringRef v23 = (_DWORD *)_os_log_pack_fill();
      *CFStringRef v23 = 67109120;
      v23[1] = v11;
      __SC_log_send(6, (uint64_t)v12, v13, v22);
    }
    return 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    int v25 = IOIteratorNext(HIDWORD(v30));
    if (v25)
    {
      CFStringRef v26 = v25;
      do
      {
        Interface = (_DWORD *)createInterface(v26, a2, a3, a4);
        if (Interface)
        {
          uint64_t v28 = Interface;
          if (a5 || !_SCNetworkInterfaceIsApplePreconfigured(Interface)) {
            CFArrayAppendValue(Mutable, v28);
          }
          CFRelease(v28);
        }
        IOObjectRelease(v26);
        CFStringRef v26 = IOIteratorNext(HIDWORD(v30));
      }
      while (v26);
    }
    IOObjectRelease(HIDWORD(v30));
  }
  return Mutable;
}

uint64_t createInterface(uint64_t entry, unsigned int (*a2)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *), const __CFString *a3, int a4)
{
  kern_return_t ParentEntry;
  kern_return_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  __CFDictionary *v28;
  CFBooleanRef Value;
  unsigned __int8 v30;
  kern_return_t v31;
  kern_return_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  kern_return_t RegistryEntryID;
  kern_return_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _DWORD *v59;
  uint64_t Private;
  CFStringRef v61;
  uint64_t v62;
  CFDictionaryRef v63;
  CFDictionaryRef v64;
  CFTypeID TypeID;
  CFTypeRef v66;
  const void *v67;
  CFTypeID v68;
  CFBooleanRef v69;
  CFBooleanRef v70;
  CFBooleanRef v71;
  CFBooleanRef v72;
  CFTypeID v73;
  uint64_t entryID;
  io_registry_entry_t parent[2];
  CFStringRef v76[2];

  v76[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  entryID = 0;
  *(void *)parent = 0;
  v76[0] = @"name";
  if (a3 && (CFBooleanRef v7 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", a3, 0, 3u)) != 0)
  {
    CFBooleanRef v8 = v7;
    BooleanCFDictionaryRef Value = getBooleanValue(v7);
    CFRelease(v8);
    if (!a4 && BooleanValue)
    {
      uint64_t v10 = 0;
      CFStringRef v11 = 0;
      uint64_t v12 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    LOBYTE(BooleanValue) = 0;
  }
  CFTypeID v13 = copyIORegistryProperties(entry, (CFStringRef *)off_1E55BC900, 12);
  ParentEntry = IORegistryEntryGetParentEntry(entry, "IOService", parent);
  if (ParentEntry)
  {
    uint64_t v15 = ParentEntry;
    CFRange v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      CFDictionaryRef v18 = _os_log_pack_size();
      CFStringRef v26 = (char *)&parent[-2]
          - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      CFStringRef v27 = (_DWORD *)_os_log_pack_fill();
      *CFStringRef v27 = 67109120;
      v27[1] = v15;
      __SC_log_send(6, (uint64_t)v16, v17, v26);
    }
    uint64_t v12 = 0;
    CFStringRef v11 = 0;
LABEL_18:
    uint64_t v10 = 0;
    goto LABEL_19;
  }
  uint64_t v28 = copyIORegistryProperties(parent[0], (CFStringRef *)off_1E55BC960, 3);
  CFStringRef v11 = v28;
  if (v28)
  {
    CFDictionaryRef Value = (const __CFBoolean *)CFDictionaryGetValue(v28, @"SelfNamed");
    uint64_t v30 = getBooleanValue(Value);
  }
  else
  {
    uint64_t v30 = 0;
  }
  CFIndex v31 = IORegistryEntryGetParentEntry(parent[0], "IOService", &parent[1]);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = __log_SCNetworkConfiguration();
    BOOL v34 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v33, (os_log_type_t)v34))
    {
      uint64_t v35 = _os_log_pack_size();
      uint64_t v43 = (char *)&parent[-2]
          - ((MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v44 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v44 = 67109120;
      v44[1] = v32;
      __SC_log_send(6, (uint64_t)v33, v34, v43);
    }
    uint64_t v12 = 0;
    goto LABEL_18;
  }
  uint64_t v10 = copyIORegistryProperties(parent[1], v76, 1);
  RegistryEntryID = IORegistryEntryGetRegistryEntryID(entry, &entryID);
  if (RegistryEntryID)
  {
    CFStringRef v47 = RegistryEntryID;
    CFStringRef v48 = __log_SCNetworkConfiguration();
    CFStringRef v49 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v48, (os_log_type_t)v49))
    {
      CFStringRef v50 = _os_log_pack_size();
      char v58 = (char *)&parent[-2]
          - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v59 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v59 = 67109120;
      v59[1] = v47;
      __SC_log_send(6, (uint64_t)v48, v49, v58);
    }
  }
  else
  {
    Private = __SCNetworkInterfaceCreatePrivate(0, 0, 0, 0);
    if (!Private) {
      createInterface_cold_1();
    }
    uint64_t v12 = Private;
    *(unsigned char *)(Private + 193) = BooleanValue;
    int v61 = __SC_IORegistryEntryCopyPath(entry);
    uint64_t v62 = entryID;
    *(void *)(v12 + 208) = v61;
    *(void *)(v12 + 216) = v62;
    *(unsigned char *)(v12 + 242) = v30;
    CFBooleanRef v63 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(entry, "IOService", @"NetworkConfigurationOverrides", 0, 3u);
    if (v63)
    {
      uint64_t v64 = v63;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v64) == TypeID) {
        *(void *)(v12 + 224) = CFDictionaryCreateMutableCopy(0, 0, v64);
      }
      CFRelease(v64);
    }
    if (a2(v12, entry, v13, parent[0], v11, parent[1], v10))
    {
      CFIndex v66 = IORegistryEntrySearchCFProperty(entry, "IOService", @"New Interface Detected Action", 0, 3u);
      if (v66)
      {
        CFIndex v67 = v66;
        uint64_t v68 = CFStringGetTypeID();
        if (CFGetTypeID(v67) == v68) {
          *(void *)(v12 + 184) = CFRetain(v67);
        }
        CFRelease(v67);
      }
      uint64_t v69 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", @"HiddenConfiguration", 0, 3u);
      if (v69)
      {
        uint64_t v70 = v69;
        *(unsigned char *)(v12 + 192) = getBooleanValue(v69);
        CFRelease(v70);
      }
      CFStringRef v71 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", @"TrustRequired", 0, 3u);
      if (v71)
      {
        SCNetworkInterfaceRef v72 = v71;
        uint64_t v73 = CFBooleanGetTypeID();
        if (CFGetTypeID(v72) == v73) {
          *(unsigned char *)(v12 + 240) = CFBooleanGetValue(v72);
        }
        CFRelease(v72);
      }
      goto LABEL_19;
    }
    CFRelease((CFTypeRef)v12);
  }
  uint64_t v12 = 0;
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
LABEL_21:
  if (parent[0]) {
    IOObjectRelease(parent[0]);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (parent[1]) {
    IOObjectRelease(parent[1]);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v12;
}

__CFDictionary *copyIORegistryProperties(io_registry_entry_t a1, CFStringRef *a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a3 >= 1)
  {
    do
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, *a2, 0, 0);
      if (CFProperty)
      {
        CFBooleanRef v8 = CFProperty;
        CFDictionaryAddValue(Mutable, *a2, CFProperty);
        CFRelease(v8);
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  return Mutable;
}

uint64_t __SCNetworkInterfaceCreatePrivate(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    *(void *)(Instance + 72) = v8;
    if (a3) {
      CFTypeRef v9 = CFRetain(a3);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *(void *)(Instance + 80) = v9;
    if (a4) {
      CFTypeRef v10 = CFRetain(a4);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *(void *)(Instance + 96) = v10;
    *(_DWORD *)(Instance + 312) = 24;
  }
  return Instance;
}

BOOL processNetworkInterface(uint64_t a1, io_registry_entry_t a2, CFDictionaryRef theDict, io_object_t a4, const __CFDictionary *a5, io_registry_entry_t a6, const __CFDictionary *a7)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  int v94 = 0;
  int valuePtr = -1;
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"IOInterfaceType");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || !CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr))
  {
    CFDictionaryRef v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v18, (os_log_type_t)v19);
    if (!result) {
      return result;
    }
    uint64_t v21 = _os_log_pack_size();
    BOOL v29 = (char *)&parent[-2]
        - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v30 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v30 = 138412290;
    *(void *)(v30 + 4) = theDict;
    __SC_log_send(6, (uint64_t)v18, v19, v29);
    return 0;
  }
  *(void *)(a1 + 248) = CFRetain(Value);
  if (valuePtr == 6)
  {
    if (IOObjectConformsTo(a4, "IO80211Controller")
      || IOObjectConformsTo(a4, "AirPortPCI")
      || IOObjectConformsTo(a4, "AirPortDriver"))
    {
      *(void *)(a1 + 16) = @"IEEE80211";
      *(void *)(a1 + 128) = @"Ethernet";
      int v31 = 12;
    }
    else if (IOObjectConformsTo(a4, "AppleThunderboltIPPort"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v31 = 13;
    }
    else if (IOObjectConformsTo(a4, "IOBluetoothBNEPDriver"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v31 = 18;
    }
    else if (IOObjectConformsTo(a4, "AppleUSBEthernetHost"))
    {
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v31 = 15;
    }
    else
    {
      if (!IOObjectConformsTo(a4, "AppleUSBCDCECMData"))
      {
        if (IOObjectConformsTo(a4, "IOUserEthernetController")) {
          *(unsigned char *)(a1 + 243) = 1;
        }
LABEL_18:
        uint64_t v32 = *(__CFString **)(a1 + 16);
        if (v32) {
          goto LABEL_63;
        }
        CFTypeRef v33 = IORegistryEntrySearchCFProperty(a2, "IOService", @"InterfaceRole", 0, 3u);
        if (!v33)
        {
LABEL_56:
          uint64_t v32 = *(__CFString **)(a1 + 16);
          if (!v32)
          {
            CFStringRef v58 = (const __CFString *)CFDictionaryGetValue(a7, @"name");
            CFStringRef v59 = IOCopyCFStringValue(v58);
            if (v59)
            {
              CFStringRef v60 = v59;
              if (CFEqual(v59, @"radio"))
              {
                *(void *)(a1 + 16) = @"Ethernet";
                *(void *)(a1 + 128) = @"Ethernet";
                *(_DWORD *)(a1 + 312) = 14;
              }
              CFRelease(v60);
            }
            uint64_t v32 = *(__CFString **)(a1 + 16);
            if (!v32)
            {
              uint64_t v32 = @"Ethernet";
              *(void *)(a1 + 16) = @"Ethernet";
              *(void *)(a1 + 128) = @"Ethernet";
              *(_DWORD *)(a1 + 312) = 7;
              *(unsigned char *)(a1 + 316) = 1;
            }
          }
LABEL_63:
          if (!CFEqual(v32, @"IEEE80211")) {
            *(unsigned char *)(a1 + 344) = 1;
          }
          CFBooleanRef v61 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IOBuiltin");
          CFTypeID v62 = CFBooleanGetTypeID();
          if (v61 && CFGetTypeID(v61) == v62
            || (CFBooleanRef v61 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IOPrimaryInterface"),
                CFTypeID v63 = CFBooleanGetTypeID(),
                v61)
            && CFGetTypeID(v61) == v63)
          {
            int v64 = CFBooleanGetValue(v61);
          }
          else
          {
            int v64 = isBuiltin(a2);
          }
          *(unsigned char *)(a1 + 176) = v64;
          if (!v64 && CFEqual(*(CFTypeRef *)(a1 + 16), @"IEEE80211")) {
            *(unsigned char *)(a1 + 176) = 1;
          }
          CFBooleanRef v65 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"IsEphemeral");
          *(unsigned char *)(a1 + 241) = getBooleanValue(v65);
          CFBooleanRef v66 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"SupportsVMNETBridgedMode");
          *(unsigned char *)(a1 + 244) = getBooleanValue(v66);
          CFStringRef v67 = (const __CFString *)CFDictionaryGetValue(theDict, @"IOLocation");
          CFStringRef v68 = IOCopyCFStringValue(v67);
          *(void *)(a1 + 200) = v68;
          if (v68 && !CFStringGetLength(v68))
          {
            CFRelease(*(CFTypeRef *)(a1 + 200));
            *(void *)(a1 + 200) = 0;
          }
          uint64_t v69 = CFDictionaryGetValue(a5, @"IOFeatures");
          CFTypeID v70 = CFNumberGetTypeID();
          if (v69
            && CFGetTypeID(v69) == v70
            && CFNumberGetValue((CFNumberRef)v69, kCFNumberIntType, &v94)
            && (v94 & 6) != 0)
          {
            *(unsigned char *)(a1 + 368) = 1;
          }
          if (CFEqual(*(CFTypeRef *)(a1 + 16), @"IEEE80211"))
          {
            uint64_t v38 = @"airport";
            goto LABEL_84;
          }
          switch(*(_DWORD *)(a1 + 312))
          {
            case 0xD:
              CFStringRef v77 = *(const __CFString **)(a1 + 200);
              if (v77 && CFStringGetLength(v77))
              {
                uint64_t v78 = @"multithunderbolt";
                goto LABEL_106;
              }
              uint64_t v38 = @"thunderbolt";
              goto LABEL_84;
            case 0xE:
              *(void *)(a1 + 48) = @"wireless";
              CFStringRef v79 = &stru_1EDD23408;
              goto LABEL_107;
            case 0x12:
              uint64_t v38 = @"bluetooth-pan-gn";
              goto LABEL_84;
            case 0x13:
              uint64_t v38 = @"bluetooth-pan-nap";
              goto LABEL_84;
            case 0x14:
              uint64_t v38 = @"bluetooth-pan-u";
              goto LABEL_84;
            default:
              if (*(unsigned char *)(a1 + 176))
              {
                CFStringRef v80 = *(const __CFString **)(a1 + 200);
                if (!v80 || !CFStringGetLength(v80))
                {
                  uint64_t v38 = @"ether";
                  goto LABEL_84;
                }
                uint64_t v78 = @"multiether";
LABEL_106:
                *(void *)(a1 + 48) = v78;
                CFStringRef v79 = *(__CFString **)(a1 + 200);
LABEL_107:
                uint64_t v17 = (void *)CFRetain(v79);
                goto LABEL_9;
              }
              parent[0] = 0;
              CFTypeRef v81 = IORegistryEntrySearchCFProperty(a2, "IOService", @"IOProviderClass", 0, 3u);
              if (!v81) {
                goto LABEL_152;
              }
              CFTypeRef v82 = v81;
              io_registry_entry_t v83 = a2;
              break;
          }
          while (CFEqual(v82, @"IOSkywalkEthernetInterface"))
          {
            CFRelease(v82);
            if (!IORegistryEntryGetParentEntry(v83, "IOService", parent))
            {
              io_registry_entry_t v83 = parent[0];
              parent[0] = 0;
              CFTypeRef v82 = IORegistryEntrySearchCFProperty(v83, "IOService", @"IOProviderClass", 0, 3u);
              if (v82) {
                continue;
              }
            }
            goto LABEL_152;
          }
          if (!CFEqual(v82, @"IOPCIDevice"))
          {
            io_object_t v88 = a2;
            while (!CFEqual(v82, @"IOUSBDevice")
                 && !CFEqual(v82, @"IOUSBInterface")
                 && !CFEqual(v82, @"IOUSBHostInterface"))
            {
              if (_SC_isAppleInternal_once_3 != -1) {
                dispatch_once(&_SC_isAppleInternal_once_3, &__block_literal_global_621);
              }
              if (_SC_isAppleInternal_isInternal_3 && IOObjectConformsTo(v88, "IOUserEthernetController")) {
                break;
              }
              io_registry_entry_t v89 = a4;
              if (v88 == a2 || (io_registry_entry_t v89 = a6, v88 == a4))
              {
                CFRelease(v82);
                CFTypeRef v82 = IORegistryEntrySearchCFProperty(v89, "IOService", @"IOProviderClass", 0, 3u);
                io_object_t v88 = v89;
                if (v82) {
                  continue;
                }
              }
              goto LABEL_139;
            }
            processUSBInterface((void *)a1, a2);
            if (!update_interface_name((void *)a1, a2, 1))
            {
              *(void *)(a1 + 48) = @"usb-ether";
              *(void *)(a1 + 56) = IODictionaryCopyBSDName(theDict);
            }
LABEL_139:
            if (!*(void *)(a1 + 48)) {
              update_interface_name((void *)a1, a2, 0);
            }
            if (!v82) {
              goto LABEL_152;
            }
            goto LABEL_151;
          }
          CFMutableStringRef v92 = 0;
          *(void *)parent = 0;
          if (update_interface_name((void *)a1, a2, 0)
            || !pci_slot_info(a2, valuePtr, &v92, (CFStringRef *)parent))
          {
LABEL_151:
            CFRelease(v82);
LABEL_152:
            if (*(void *)(a1 + 48)) {
              goto LABEL_85;
            }
            CFRange v16 = @"generic-ether";
LABEL_8:
            *(void *)(a1 + 48) = v16;
            uint64_t v17 = (void *)IODictionaryCopyBSDName(theDict);
LABEL_9:
            *(void *)(a1 + 56) = v17;
            goto LABEL_85;
          }
          int v84 = isThunderbolt(a2);
          uint64_t v85 = *(void *)parent;
          if (v84)
          {
            if (*(void *)parent)
            {
              CFMutableStringRef v86 = v92;
              CFStringRef v87 = @"thunderbolt-multiether";
LABEL_147:
              *(void *)(a1 + 48) = v87;
              *(void *)(a1 + 56) = v86;
              *(void *)(a1 + 64) = v85;
              goto LABEL_151;
            }
            CFMutableStringRef v90 = v92;
            v91 = @"thunderbolt-ether";
          }
          else
          {
            if (*(void *)parent)
            {
              CFMutableStringRef v86 = v92;
              CFStringRef v87 = @"pci-multiether";
              goto LABEL_147;
            }
            CFMutableStringRef v90 = v92;
            v91 = @"pci-ether";
          }
          *(void *)(a1 + 48) = v91;
          *(void *)(a1 + 56) = v90;
          goto LABEL_151;
        }
        BOOL v34 = v33;
        CFTypeID v35 = CFStringGetTypeID();
        if (CFGetTypeID(v34) == v35)
        {
          if (CFEqual(v34, @"Bluetooth PAN"))
          {
            int v36 = 18;
LABEL_54:
            *(void *)(a1 + 16) = @"Ethernet";
            *(void *)(a1 + 128) = @"Ethernet";
            *(_DWORD *)(a1 + 312) = v36;
            goto LABEL_55;
          }
          if (CFEqual(v34, @"Bluetooth PAN-NAP"))
          {
            int v36 = 19;
            goto LABEL_54;
          }
          if (CFEqual(v34, @"Bluetooth P2P"))
          {
            int v36 = 20;
            goto LABEL_54;
          }
          if (CFEqual(v34, @"CarPlay"))
          {
            int v36 = 21;
            goto LABEL_54;
          }
          if (CFEqual(v34, @"VMNET"))
          {
            int v36 = 23;
            goto LABEL_54;
          }
        }
LABEL_55:
        CFRelease(v34);
        goto LABEL_56;
      }
      *(void *)(a1 + 16) = @"Ethernet";
      *(void *)(a1 + 128) = @"Ethernet";
      int v31 = 17;
    }
    *(_DWORD *)(a1 + 312) = v31;
    goto LABEL_18;
  }
  if (valuePtr != 144)
  {
    if (valuePtr == 255)
    {
      *(void *)(a1 + 16) = @"Cellular";
      *(void *)(a1 + 128) = @"Cellular";
      *(unsigned char *)(a1 + 176) = 1;
      *(_DWORD *)(a1 + 312) = 22;
      CFRange v16 = @"cellular";
      goto LABEL_8;
    }
    uint64_t v39 = __log_SCNetworkConfiguration();
    uint64_t v40 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v39, (os_log_type_t)v40);
    if (!result) {
      return result;
    }
    uint64_t v41 = _os_log_pack_size();
    CFStringRef v49 = (char *)&parent[-2]
        - ((MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    CFStringRef v50 = (_DWORD *)_os_log_pack_fill();
    int v51 = valuePtr;
    *CFStringRef v50 = 67109120;
    v50[1] = v51;
    __SC_log_send(6, (uint64_t)v39, v40, v49);
    return 0;
  }
  *(void *)(a1 + 16) = @"FireWire";
  *(void *)(a1 + 128) = @"FireWire";
  int v37 = isBuiltin(a2);
  *(unsigned char *)(a1 + 176) = v37;
  *(_DWORD *)(a1 + 312) = 11;
  if (!v37)
  {
    CFMutableStringRef v92 = 0;
    *(void *)parent = 0;
    if (update_interface_name((void *)a1, a2, 0)
      || !pci_slot_info(a2, valuePtr, &v92, (CFStringRef *)parent))
    {
      goto LABEL_85;
    }
    int v52 = isThunderbolt(a2);
    uint64_t v53 = *(void *)parent;
    if (v52)
    {
      if (*(void *)parent)
      {
        CFMutableStringRef v54 = v92;
        CFStringRef v55 = @"thunderbolt-multifirewire";
LABEL_38:
        *(void *)(a1 + 48) = v55;
        *(void *)(a1 + 56) = v54;
        *(void *)(a1 + 64) = v53;
        goto LABEL_85;
      }
      CFMutableStringRef v56 = v92;
      uint64_t v57 = @"thunderbolt-firewire";
    }
    else
    {
      if (*(void *)parent)
      {
        CFMutableStringRef v54 = v92;
        CFStringRef v55 = @"pci-multifirewire";
        goto LABEL_38;
      }
      CFMutableStringRef v56 = v92;
      uint64_t v57 = @"pci-firewire";
    }
    *(void *)(a1 + 48) = v57;
    *(void *)(a1 + 56) = v56;
    goto LABEL_85;
  }
  uint64_t v38 = @"firewire";
LABEL_84:
  *(void *)(a1 + 48) = v38;
LABEL_85:
  *(void *)(a1 + 112) = IODictionaryCopyBSDName(theDict);
  CFStringRef v71 = CFDictionaryGetValue(a5, @"IOMACAddress");
  CFTypeID v72 = CFDataGetTypeID();
  if (v71 && CFGetTypeID(v71) == v72) {
    *(void *)(a1 + 160) = CFRetain(v71);
  }
  uint64_t v73 = CFDictionaryGetValue(theDict, @"IOInterfaceNamePrefix");
  CFTypeID v74 = CFStringGetTypeID();
  if (v73 && CFGetTypeID(v73) == v74) {
    *(void *)(a1 + 232) = CFRetain(v73);
  }
  uint64_t v75 = CFDictionaryGetValue(theDict, @"IOInterfaceUnit");
  CFTypeID v76 = CFNumberGetTypeID();
  if (v75 && CFGetTypeID(v75) == v76)
  {
    if (CFNumberGetValue((CFNumberRef)v75, kCFNumberIntType, &v94)) {
      *(void *)(a1 + 256) = CFRetain(v75);
    }
  }
  merge_override(a1, a2, @"PPP");
  return 1;
}

CFBooleanRef getBooleanValue(const __CFBoolean *result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFBooleanRef v1 = result;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (CFGetTypeID(v1) == TypeID)
    {
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    }
    else
    {
      CFTypeID v3 = CFNumberGetTypeID();
      if (CFGetTypeID(v1) == v3)
      {
        int valuePtr = 0;
        if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr)) {
          BOOL v4 = valuePtr == 0;
        }
        else {
          BOOL v4 = 1;
        }
        return (const __CFBoolean *)!v4;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef IOCopyCFStringValue(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1)
  {
    CFDataGetTypeID();
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID)
  {
    return CFStringCreateCopy(0, a1);
  }
  CFTypeID v4 = CFDataGetTypeID();
  if (CFGetTypeID(a1) != v4) {
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);

  return CFStringCreateWithCString(0, BytePtr, 0x8000100u);
}

CFStringRef IODictionaryCopyBSDName(const __CFDictionary *a1)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"BSD Name");
  if (Value)
  {
    return IOCopyCFStringValue(Value);
  }
  else
  {
    CFTypeID v4 = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
    uint64_t v5 = CFDictionaryGetValue(a1, @"IOInterfaceUnit");
    CFTypeID TypeID = CFStringGetTypeID();
    if (v4 && CFGetTypeID(v4) == TypeID && (CFTypeID v7 = CFNumberGetTypeID(), v5) && CFGetTypeID(v5) == v7) {
      return CFStringCreateWithFormat(0, 0, @"%@%@", v4, v5);
    }
    else {
      return 0;
    }
  }
}

void merge_override(uint64_t a1, io_registry_entry_t a2, const void *a3)
{
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"Device%@Overrides", a3);
  CFTypeRef v7 = IORegistryEntrySearchCFProperty(a2, "IOService", v6, 0, 3u);
  CFRelease(v6);
  if (v7)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v7) == TypeID)
    {
      CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a1 + 224);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(a1 + 224) = Mutable;
      }
      CFDictionarySetValue(Mutable, a3, v7);
    }
    CFRelease(v7);
  }
}

CFStringRef __SC_IORegistryEntryCopyPath(uint64_t a1)
{
  io_registry_entry_t v1 = a1;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(cStr, 0, sizeof(cStr));
  int v2 = MEMORY[0x192FA7510](a1, "IOService", cStr);
  if (v2 != -536870206)
  {
    if (!v2) {
      return CFStringCreateWithCString(0, (const char *)cStr, 0x8000100u);
    }
    return 0;
  }
  io_registry_entry_t parent = 0;
  if (IORegistryEntryGetParentEntry(v1, "IOService", &parent)) {
    return 0;
  }
  uint64_t v5 = __SC_IORegistryEntryCopyPath(parent);
  if (v5)
  {
    CFStringRef v6 = (const void *)v5;
    memset(name, 0, sizeof(name));
    if (IORegistryEntryGetNameInPlane(v1, "IOService", name))
    {
      CFStringRef v3 = 0;
    }
    else
    {
      memset(location, 0, sizeof(location));
      if (IORegistryEntryGetLocationInPlane(v1, "IOService", location)) {
        CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@/%s", v6, name);
      }
      else {
        CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@/%s@%s", v6, name, location);
      }
      CFStringRef v3 = v7;
    }
    CFRelease(v6);
  }
  else
  {
    CFStringRef v3 = 0;
  }
  IOObjectRelease(parent);
  return v3;
}

uint64_t update_interface_name(void *a1, io_registry_entry_t entry, int a3)
{
  CFTypeRef v5 = IORegistryEntrySearchCFProperty(entry, "IOService", @"Product Name", 0, 3u);
  uint64_t v6 = (uint64_t)v5;
  if (a3 && !v5)
  {
    CFStringRef v7 = (const void *)a1[35];
    if (!v7) {
      return 0;
    }
    uint64_t v6 = (uint64_t)CFRetain(v7);
  }
  if (!v6) {
    return v6;
  }
  CFStringRef v8 = IOCopyCFStringValue((const __CFString *)v6);
  CFRelease((CFTypeRef)v6);
  if (!v8) {
    return 0;
  }
  if (CFStringGetLength(v8) < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    CFTypeRef v9 = (const void *)a1[4];
    if (v9) {
      CFRelease(v9);
    }
    a1[4] = CFRetain(v8);
    CFTypeRef v10 = (const void *)a1[5];
    if (v10)
    {
      CFRelease(v10);
      a1[5] = 0;
    }
    uint64_t v6 = 1;
    if (bundle) {
      a1[5] = copy_interface_string((__CFBundle *)bundle, v8, 1);
    }
  }
  CFRelease(v8);
  return v6;
}

uint64_t __SCNetworkInterfaceCacheCopy(const void *a1, uint64_t *a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = __SCGetThreadSpecificData();
  uint64_t result = 0;
  if (a1)
  {
    uint64_t v6 = v4[1];
    if (v6)
    {
      uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)v4[1], a1);
      *a2 = result;
      if (result)
      {
        if (result == *MEMORY[0x1E4F1D260]) {
          *a2 = 0;
        }
        else {
          CFRetain((CFTypeRef)result);
        }
        CFStringRef v7 = __log_SCNetworkConfiguration();
        uint64_t v8 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
        {
          uint64_t v9 = _os_log_pack_size();
          uint64_t v17 = (char *)v21 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v18 = _os_log_pack_fill();
          uint64_t v19 = *a2;
          *(_DWORD *)uint64_t v18 = 134218498;
          *(void *)(v18 + 4) = v6;
          if (v19) {
            CFDictionaryRef v20 = "";
          }
          else {
            CFDictionaryRef v20 = "no ";
          }
          *(_WORD *)(v18 + 12) = 2080;
          *(void *)(v18 + 14) = v20;
          *(_WORD *)(v18 + 22) = 2112;
          *(void *)(v18 + 24) = a1;
          __SC_log_send(7, (uint64_t)v7, v8, v17);
          return 1;
        }
        else
        {
          return 1;
        }
      }
    }
  }
  return result;
}

void __SCNetworkInterfaceCacheAdd(const void *a1, const void *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  CFTypeID v4 = __SCGetThreadSpecificData();
  if (a1)
  {
    CFTypeRef v5 = (__CFDictionary *)v4[1];
    if (v5)
    {
      if (!a2) {
        a2 = (const void *)*MEMORY[0x1E4F1D260];
      }
      uint64_t v6 = __log_SCNetworkConfiguration();
      uint64_t v7 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
      {
        uint64_t v8 = _os_log_pack_size();
        uint64_t v16 = (char *)v18 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 134218242;
        *(void *)(v17 + 4) = v5;
        *(_WORD *)(v17 + 12) = 2112;
        *(void *)(v17 + 14) = a1;
        __SC_log_send(7, (uint64_t)v6, v7, v16);
      }
      CFDictionaryAddValue(v5, a1, a2);
    }
  }
}

CFDictionaryRef _SC_IONetworkInterfaceBSDNameMatching(char *cStr)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E55BB1F8;
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  v4[0] = v1;
  v4[1] = @"IONetworkInterface";
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, v4, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v1);
  return v2;
}

uint64_t _SCNetworkInterfaceIsApplePreconfigured(_DWORD *cf)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    uint64_t result = _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)cf);
    if (!result) {
      return result;
    }
    if (_SCNetworkInterfaceIsBuiltin((unsigned __int8 *)cf)) {
      return 1;
    }
    CFTypeID v4 = (const void *)*((void *)cf + 36);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (v4)
    {
      if (CFGetTypeID(v4) == TypeID)
      {
        int valuePtr = 0;
        if (CFNumberGetValue(*((CFNumberRef *)cf + 36), kCFNumberIntType, &valuePtr))
        {
          if (valuePtr == 1452) {
            return 1;
          }
        }
      }
    }
    if (_SCNetworkInterfaceIsCarPlay(cf))
    {
      CFDictionaryRef v6 = (const __CFDictionary *)*((void *)cf + 28);
      if (v6)
      {
        if (CFDictionaryContainsKey(v6, @"IPv4")
          || CFDictionaryContainsKey(*((CFDictionaryRef *)cf + 28), @"IPv6"))
        {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsHiddenConfiguration(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[192];
  }
  return 0;
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return __SCDynamicStoreCopyValueCommon((uint64_t)store, key, 1);
}

CFStringRef SCDynamicStoreKeyCreateComputerName(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreate(allocator, @"%@/%@", @"Setup:", @"System");
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (nameEncoding) {
    *nameEncoding = 134217984;
  }
  CFStringRef v4 = SCDynamicStoreKeyCreate(0, @"%@/%@", @"Setup:", @"System");
  CFDictionaryRef v5 = (const __CFDictionary *)__SCDynamicStoreCopyValueCommon((uint64_t)store, v4, 0);
  CFRelease(v4);
  if (v5)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v5) == TypeID)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v5, @"ComputerName");
      CFTypeID v8 = CFStringGetTypeID();
      if (!Value)
      {
LABEL_12:
        int v10 = 1004;
LABEL_13:
        _SCErrorSet(v10);
        CFRelease(v5);
        return Value;
      }
      if (CFGetTypeID(Value) == v8)
      {
        CFRetain(Value);
        if (SCError() == 10100) {
          report_missing_entitlement("SCDynamicStoreCopyComputerName");
        }
        if (nameEncoding)
        {
          CFStringEncoding v9 = getNameEncoding(v5);
          int v10 = 0;
          *nameEncoding = v9;
        }
        else
        {
          int v10 = 0;
        }
        goto LABEL_13;
      }
    }
    CFStringRef Value = 0;
    goto LABEL_12;
  }
  int v11 = SCError();
  if (v11 == 10003)
  {
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v14 = 0x40000000;
    uint64_t v15 = ___SC_crash_once_block_invoke_1;
    uint64_t v16 = &__block_descriptor_tmp_9;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = "SCDynamicStoreCopyComputerName() access denied, missing entitlement";
    if (_SC_crash_once_once_1 == -1) {
      return 0;
    }
LABEL_25:
    dispatch_once(&_SC_crash_once_once_1, &block);
    return 0;
  }
  if (v11 == 1003)
  {
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v14 = 0x40000000;
    uint64_t v15 = ___SC_crash_once_block_invoke_1;
    uint64_t v16 = &__block_descriptor_tmp_9;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = "SCDynamicStoreCopyComputerName() access denied by policy";
    if (_SC_crash_once_once_1 == -1) {
      return 0;
    }
    goto LABEL_25;
  }

  return (CFStringRef)_SCPreferencesCopyComputerName(0, nameEncoding);
}

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  va_start(va, fmt);
  return CFStringCreateWithFormatAndArguments(allocator, 0, fmt, va);
}

int SCError(void)
{
  return *(_DWORD *)__SCGetThreadSpecificData();
}

uint64_t _SCNetworkInterfaceGetIOInterfaceType(uint64_t a1)
{
  return *(void *)(a1 + 248);
}

void __SCNetworkSetDeallocate(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  CFRelease(*(CFTypeRef *)(a1 + 24));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t _SCUnserializeData(CFDataRef *a1, const UInt8 *a2, CFIndex a3)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  *a1 = CFDataCreate(0, a2, a3);
  mach_error_t v5 = MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], a2, a3);
  if (!v5) {
    return 1;
  }
  mach_error_t v6 = v5;
  uint64_t v7 = _SC_LOG_DEFAULT();
  uint64_t v8 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
  {
    _os_log_pack_size();
    CFStringEncoding v9 = (char *)v13 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    int v11 = mach_error_string(v6);
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v11;
    __SC_log_send(5, (uint64_t)v7, v8, v9);
  }
  _SCErrorSet(1001);
  return 0;
}

CFArrayRef SCNetworkInterfaceCopyAll(void)
{
  return _SCNetworkInterfaceCopyAllWithPreferences(0);
}

uint64_t _SCNetworkInterfaceGetFamilySubType(const __CFNumber *interface)
{
  uint64_t result = *((void *)interface + 34);
  if (!result)
  {
    update_ift_family(interface);
    return *((void *)interface + 34);
  }
  return result;
}

uint64_t reachPerform(uint64_t a1)
{
  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    reachPerform_cold_1();
  }

  return reachPerformAndUnlock(a1);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef allocator, CFStringRef domain)
{
  return CFStringCreateWithFormat(allocator, 0, @"%@/%@/%@", domain, @"Network", @"Interface", *MEMORY[0x1E4F143B8]);
}

void dispatch_CFRelease(CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
  }
}

void dispatch_CFRelease_0(CFTypeRef cf)
{
  if (cf)
  {
    CFRelease(cf);
  }
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  v20[0] = (uint64_t)store;
  uint64_t v18 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v16 = 0;
  vm_size_t v17 = 0;
  vm_size_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v20, 1)) {
    return 0;
  }
  uint64_t v5 = v20[0];
  if (!*(unsigned char *)(v20[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v18, &v17))
    {
      if (_SCSerialize(value, (CFDataRef *)&v16, (vm_address_t *)&v15, &v14))
      {
        do
          uint64_t v10 = configset(*(_DWORD *)(v5 + 40), v18, v17, v15, v14, 0, (int *)&v13, (_DWORD *)&v13 + 1);
        while (__SCDynamicStoreCheckRetryAndHandleError(v20[0], v10, (_DWORD *)&v13 + 1, (uint64_t)"SCDynamicStoreSetValue configset()"));
        CFRelease(cf);
        CFRelease(v16);
        Boolean v9 = 1;
        int v11 = __SCDynamicStoreMapInternalStatus(HIDWORD(v13), 1);
        HIDWORD(v13) = v11;
        if (!v11) {
          return v9;
        }
        goto LABEL_16;
      }
      CFRelease(cf);
    }
    int v11 = 1002;
LABEL_16:
    _SCErrorSet(v11);
    return 0;
  }
  CFArrayRef v6 = *(const __CFArray **)(v20[0] + 224);
  if (v6)
  {
    v21.length = CFArrayGetCount(*(CFArrayRef *)(v20[0] + 224));
    v21.io_name_t location = 0;
    FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v6, v21, key);
    if (FirstIndexOfValue != -1) {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 224), FirstIndexOfValue);
    }
  }
  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(v5 + 216);
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(v5 + 216) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
  return 1;
}

uint64_t configset(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int *a7, _DWORD *a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v18 = 2;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  uint64_t v22 = a4;
  int v23 = 16777472;
  int v24 = a5;
  uint64_t v25 = *MEMORY[0x1E4F14068];
  int v26 = a3;
  int v27 = a5;
  int v28 = a6;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E2B00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v12 = mach_msg(&msg, 3162115, 0x50u, 0x34u, special_reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988;
      }
      else if (msg.msgh_id == 20111)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v13 = HIDWORD(v19);
              if (!HIDWORD(v19))
              {
                int v16 = v21;
                *a7 = v20;
                *a8 = v16;
                return v13;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v14 = 1;
            }
            else {
              BOOL v14 = HIDWORD(v19) == 0;
            }
            if (v14) {
              uint64_t v13 = 4294966996;
            }
            else {
              uint64_t v13 = HIDWORD(v19);
            }
            goto LABEL_22;
          }
        }
        uint64_t v13 = 4294966996;
      }
      else
      {
        uint64_t v13 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  return v13;
}

CFStringRef SCNetworkSetGetSetID(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) == v2) {
    return (CFStringRef)*((void *)set + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

uint64_t SCDynamicStoreAddWatchedKey(uint64_t a1, __CFString *a2, int a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v14[0] = a1;
  vm_size_t v11 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v14, 0);
  if (!result) {
    return result;
  }
  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
  {
    int v8 = 1001;
LABEL_8:
    _SCErrorSet(v8);
    return 0;
  }
  do
    uint64_t v7 = notifyadd(*(_DWORD *)(a1 + 40), v12, v11, a3, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError(v14[0], v7, &v10, (uint64_t)"SCDynamicStoreAddWatchedKey notifyadd()"));
  CFRelease(cf);
  int v8 = v10;
  if (v10) {
    goto LABEL_8;
  }
  if (a3) {
    Boolean v9 = (__CFArray **)(a1 + 176);
  }
  else {
    Boolean v9 = (__CFArray **)(a1 + 168);
  }
  addKey(v9, a2);
  return 1;
}

uint64_t notifyadd(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1E4F14068];
  int v18 = a3;
  int v19 = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E3200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v8 = mach_msg(&msg, 3162115, 0x3Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (msg.msgh_id == 20118)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v9 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a5 = v15;
                return v9;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = HIDWORD(v14) == 0;
            }
            if (v10) {
              uint64_t v9 = 4294966996;
            }
            else {
              uint64_t v9 = HIDWORD(v14);
            }
            goto LABEL_22;
          }
        }
        uint64_t v9 = 4294966996;
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v9;
    }
    mig_dealloc_special_reply_port();
  }
  return v9;
}

void addKey(__CFArray **a1, void *value)
{
  CFMutableDictionaryRef Mutable = *a1;
  if (!Mutable)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *a1 = Mutable;
  }

  CFArrayAppendValue(Mutable, value);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFStringRef Value = (const __CFString *)SCPreferencesGetValue(prefs, @"CurrentSet");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, Value, @"/");
  uint64_t v5 = 0;
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 3)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
    CFStringRef Set = SCPreferencesPathKeyCreateSet(0, (uint64_t)ValueAtIndex);
    if (CFEqual(Set, Value))
    {
      uint64_t Private = __SCNetworkSetCreatePrivate(prefs, ValueAtIndex);
      if (!Private) {
        SCNetworkSetCopyCurrent_cold_1();
      }
      uint64_t v5 = (const __SCNetworkSet *)Private;
      *(unsigned char *)(Private + 40) = 1;
    }
    else
    {
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        int v19 = (char *)v21 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v9, v10, v19);
      }
      uint64_t v5 = 0;
    }
    CFRelease(Set);
  }
  CFRelease(ArrayBySeparatingStrings);
  return v5;
}

CFStringRef SCNetworkSetGetName(SCNetworkSetRef set)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_7;
  }
  CFStringRef result = (CFStringRef)*((void *)set + 4);
  if (!result)
  {
    CFStringRef result = (CFStringRef)_SCNetworkSetCopyUserDefinedName(set);
    *((void *)set + 4) = result;
  }
  return result;
}

CFTypeRef _SCNetworkSetCopyUserDefinedName(CFTypeRef cf)
{
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (cf) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!cf) {
    return 0;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    return 0;
  }
  CFStringRef Set = SCPreferencesPathKeyCreateSet(0, *((void *)cf + 2));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 3), Set);
  CFRelease(Set);
  if (!Value) {
    return 0;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFArrayRef v6 = CFDictionaryGetValue(Value, @"UserDefinedName");
  CFTypeID v7 = CFStringGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7) {
    return 0;
  }

  return CFRetain(v6);
}

CFStringRef SCPreferencesPathKeyCreateSet(const __CFAllocator *a1, uint64_t a2)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@/%@", @"Sets", a2);
}

CFArrayRef SCNetworkSetCopyAll(SCPreferencesRef prefs)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFStringRef Sets = SCPreferencesPathKeyCreateSets(0);
  SCPreferencesRef v31 = prefs;
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, Sets);
  CFRelease(Sets);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID) {
      return 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFIndex Count = CFDictionaryGetCount(Value);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      memset(v34, 0, sizeof(v34));
      memset(v33, 0, sizeof(v33));
      if ((unint64_t)Count < 0x11)
      {
        uint64_t v8 = (const void **)v33;
        CFTypeID v7 = (const void **)v34;
      }
      else
      {
        CFTypeID v7 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
        uint64_t v8 = (const void **)CFAllocatorAllocate(0, 8 * v6, 0);
      }
      CFDictionaryGetKeysAndValues(Value, v7, v8);
      uint64_t v11 = 0;
      *(void *)&long long v12 = 138412290;
      long long v30 = v12;
      do
      {
        uint64_t v13 = v8[v11];
        CFTypeID v14 = CFDictionaryGetTypeID();
        if (v13 && CFGetTypeID(v13) == v14)
        {
          uint64_t Private = (unsigned char *)__SCNetworkSetCreatePrivate(v31, (const __CFString *)v7[v11]);
          if (!Private) {
            SCNetworkSetCopyAll_cold_1();
          }
          uint64_t v16 = Private;
          Private[40] = 1;
          CFArrayAppendValue(Mutable, Private);
          CFRelease(v16);
        }
        else
        {
          uint64_t v17 = __log_SCNetworkConfiguration();
          uint64_t v18 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v17, (os_log_type_t)v18))
          {
            uint64_t v19 = _os_log_pack_size();
            int v27 = (char *)&v30
                - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v28 = _os_log_pack_fill();
            uint64_t v29 = v7[v11];
            *(_DWORD *)uint64_t v28 = v30;
            *(void *)(v28 + 4) = v29;
            __SC_log_send(6, (uint64_t)v17, v18, v27);
          }
        }
        ++v11;
      }
      while (v6 != v11);
      if (v7 != (const void **)v34)
      {
        CFAllocatorDeallocate(0, v7);
        CFAllocatorDeallocate(0, v8);
      }
    }
    return Mutable;
  }
  else
  {
    uint64_t v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(0, 0, v9);
  }
}

uint64_t __SCNetworkSetCreatePrivate(const void *a1, const __CFString *a2)
{
  if (__SCNetworkSetInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0, a2);
    *(void *)(Instance + 24) = CFRetain(a1);
  }
  return Instance;
}

CFStringRef SCPreferencesPathKeyCreateSets(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@", @"Sets");
}

_DWORD *__add_state_handler_block_invoke()
{
  v37[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  v37[0] = 0;
  uint64_t v0 = _sc_store_max;
  if (_sc_store_advise) {
    uint64_t v1 = _sc_store_advise;
  }
  else {
    uint64_t v1 = 25;
  }
  CFIndex Count = CFSetGetCount((CFSetRef)_sc_store_sessions);
  CFStringRef v3 = 0;
  if ((v0 & 0x8000000000000000) == 0 && Count && Count >= v1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFSetApplyFunction((CFSetRef)_sc_store_sessions, (CFSetApplierFunction)addSessionReference, Mutable);
    if (!CFDictionaryGetCount(Mutable))
    {
      CFDataRef v22 = Mutable;
      goto LABEL_29;
    }
    BOOL v6 = _SCSerialize(Mutable, v37, 0, 0);
    CFRelease(Mutable);
    int64_t v7 = 0;
    size_t v8 = 200;
    if (v6 && v37[0])
    {
      CFIndex Length = CFDataGetLength(v37[0]);
      size_t v8 = Length + 200;
      if ((unint64_t)(Length + 200) > 0x8000)
      {
        uint64_t v10 = __log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          uint64_t v10 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v10;
        }
        uint64_t v11 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          uint64_t v20 = (char *)v37
              - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v21 = 134218240;
          *(void *)(v21 + 4) = v8;
          *(_WORD *)(v21 + 12) = 2048;
          *(void *)(v21 + 14) = 0x8000;
          __SC_log_send(3, (uint64_t)v10, v11, v20);
        }
        goto LABEL_28;
      }
      int64_t v7 = Length;
    }
    uint64_t v23 = malloc_type_calloc(1uLL, v8, 0x9DA70040uLL);
    if (!v23)
    {
      uint64_t v25 = __log_SCDynamicStore_log;
      if (!__log_SCDynamicStore_log)
      {
        uint64_t v25 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        __log_SCDynamicStore_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, (os_log_type_t)v26))
      {
        uint64_t v27 = _os_log_pack_size();
        uint64_t v35 = (char *)v37 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(3, (uint64_t)v25, v26, v35);
      }
LABEL_28:
      CFDataRef v22 = v37[0];
      if (!v37[0]) {
        return 0;
      }
LABEL_29:
      CFRelease(v22);
      return 0;
    }
    CFStringRef v3 = v23;
    *uint64_t v23 = 1;
    v23[1] = v7;
    __strlcpy_chk();
    if (v7 >= 1)
    {
      BytePtr = CFDataGetBytePtr(v37[0]);
      memcpy(v3 + 50, BytePtr, v7);
    }
    if (v37[0]) {
      CFRelease(v37[0]);
    }
  }
  return v3;
}

__CFString *__SCPreferencesCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCPreferences %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"io_name_t name = %@", *(void *)(a1 + 80));
  CFStringRef v4 = *(__CFString **)(a1 + 88);
  if (!v4) {
    CFStringRef v4 = @"[default]";
  }
  CFStringAppendFormat(Mutable, 0, @", id = %@", v4);
  CFStringAppendFormat(Mutable, 0, @", path = %s", *(void *)(a1 + 104));
  if (*(unsigned char *)(a1 + 304)) {
    CFStringAppendFormat(Mutable, 0, @", accessed");
  }
  if (*(unsigned char *)(a1 + 305)) {
    CFStringAppendFormat(Mutable, 0, @", changed");
  }
  if (*(unsigned char *)(a1 + 112)) {
    CFStringAppendFormat(Mutable, 0, @", locked");
  }
  if (*(_DWORD *)(a1 + 320)) {
    CFStringAppendFormat(Mutable, 0, @", helper port = 0x%x", *(unsigned int *)(a1 + 320));
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

uint64_t __SCPreferencesUnscheduleFromRunLoop(uint64_t a1, void *a2, const __CFString *a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  BOOL v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!a2)
  {
    if (*(void *)(a1 + 272))
    {
      int64_t v7 = (void *)(a1 + 272);
      SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 152), 0);
      dispatch_release(*(dispatch_object_t *)(a1 + 272));
LABEL_10:
      void *v7 = 0;
      size_t v8 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        size_t v8 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v8;
      }
      uint64_t v9 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
      {
        uint64_t v10 = _os_log_pack_size();
        uint64_t v18 = (char *)v22 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(7, (uint64_t)v8, v9, v18);
      }
      *(unsigned char *)(a1 + 200) = 0;
      SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 152), 0, 0);
      CFArrayRef v19 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
      if (v19) {
        CFRelease(v19);
      }
      __SCPreferencesRemoveSession(a1);
      goto LABEL_17;
    }
LABEL_18:
    _SCErrorSet(1002);
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  if (!*(unsigned char *)(a1 + 200)
    || *(void *)(a1 + 272)
    || !_SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 264), 0))
  {
    goto LABEL_18;
  }
  if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 264)))
  {
    int64_t v7 = (void *)(a1 + 208);
    CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 208), a3);
    CFRelease(*(CFTypeRef *)(a1 + 264));
    *(void *)(a1 + 264) = 0;
    CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 208));
    CFRelease(*(CFTypeRef *)(a1 + 208));
    goto LABEL_10;
  }
  if (!_SC_isScheduled(0, a2, a3, *(CFArrayRef *)(a1 + 264))) {
    CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 208), a3);
  }
LABEL_17:
  uint64_t v20 = 1;
LABEL_19:
  pthread_mutex_unlock(v6);
  return v20;
}

void __SCPreferencesRemoveSession(uint64_t a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 168);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 == v2)
  {
    *(_DWORD *)(a1 + 168) = v3;
    if (!v3)
    {
      CFRelease(*(CFTypeRef *)(a1 + 152));
      *(void *)(a1 + 152) = 0;
      uint64_t v5 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v5;
      }
      uint64_t v6 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v15 = (char *)v16 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(7, (uint64_t)v5, v6, v15);
      }
    }
  }
}

CFArrayRef SCDynamicStoreCopyNotifiedKeys(SCDynamicStoreRef store)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  bytes = 0;
  v8[0] = (uint64_t)store;
  CFArrayRef v5 = 0;
  CFIndex length = 0;
  if (__SCDynamicStoreNormalize((uint64_t)v8, 0))
  {
    do
      uint64_t v2 = notifychanges(*((_DWORD *)store + 10), &bytes, (_DWORD *)&length + 1, &length);
    while (__SCDynamicStoreCheckRetryAndHandleError(v8[0], v2, &length, (uint64_t)"SCDynamicStoreCopyNotifiedKeys notifychanges()"));
    int v3 = length;
    if (length)
    {
      if (bytes)
      {
        MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], bytes, HIDWORD(length));
        int v3 = length;
      }
    }
    else
    {
      if (_SCUnserialize((CFPropertyListRef *)&v5, 0, bytes, HIDWORD(length))) {
        return v5;
      }
      int v3 = 1001;
    }
    _SCErrorSet(v3);
  }
  return 0;
}

uint64_t notifychanges(int a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x4E3400000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v9 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x18u, 0x44u, special_reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) > 0xE || ((1 << (v9 - 2)) & 0x4003) == 0)
  {
    if (!v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 20120)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            uint64_t v10 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8]) {
                uint64_t v10 = 4294966996;
              }
              else {
                uint64_t v10 = *(unsigned int *)&msg[32];
              }
            }
          }
          else
          {
            uint64_t v10 = 4294966996;
          }
          goto LABEL_24;
        }
        uint64_t v10 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v14) == 1)
        {
          int v11 = DWORD1(v14);
          if (DWORD1(v14) == v15)
          {
            uint64_t v10 = 0;
            *a2 = *(void *)&msg[28];
            *a3 = v11;
            *a4 = DWORD1(v15);
            return v10;
          }
        }
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
LABEL_24:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_special_reply_port();
  }
  return v10;
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  CFDataRef v25 = 0;
  v26[0] = (uint64_t)store;
  vm_size_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  vm_size_t v20 = 0;
  vm_size_t v17 = 0;
  uint64_t v18 = 0;
  unsigned int v16 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v26, 1)) {
    return 0;
  }
  if (keysToSet)
  {
    CFDictionaryRef v7 = _SCSerializeMultiple(keysToSet);
    if (!v7) {
      goto LABEL_21;
    }
    CFDictionaryRef v8 = v7;
    BOOL v9 = _SCSerialize(v7, &v25, (vm_address_t *)&v24, &v23);
    CFRelease(v8);
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (keysToRemove && !_SCSerialize(keysToRemove, (CFDataRef *)&cf, (vm_address_t *)&v21, &v20))
  {
    CFDataRef v14 = v25;
    if (!v25)
    {
LABEL_21:
      int v13 = 1002;
LABEL_22:
      _SCErrorSet(v13);
      return 0;
    }
LABEL_20:
    CFRelease(v14);
    goto LABEL_21;
  }
  if (keysToNotify && !_SCSerialize(keysToNotify, (CFDataRef *)&v19, (vm_address_t *)&v18, &v17))
  {
    if (v25) {
      CFRelease(v25);
    }
    CFDataRef v14 = (CFDataRef)cf;
    if (!cf) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v10 = v26[0];
  do
    uint64_t v11 = configset_m(*(_DWORD *)(v10 + 40), v24, v23, v21, v20, v18, v17, (int *)&v16);
  while (__SCDynamicStoreCheckRetryAndHandleError(v26[0], v11, &v16, (uint64_t)"SCDynamicStoreSetMultiple configset_m()"));
  if (v25) {
    CFRelease(v25);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  Boolean v12 = 1;
  int v13 = __SCDynamicStoreMapInternalStatus(v16, 1);
  unsigned int v16 = v13;
  if (v13) {
    goto LABEL_22;
  }
  return v12;
}

uint64_t configset_m(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int *a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v16 = 3;
  uint64_t v17 = a2;
  int v18 = 16777472;
  int v19 = a3;
  uint64_t v20 = a4;
  int v21 = 16777472;
  int v22 = a5;
  uint64_t v23 = a6;
  int v24 = 16777472;
  int v25 = a7;
  uint64_t v26 = *MEMORY[0x1E4F14068];
  int v27 = a3;
  int v28 = a5;
  int v29 = a7;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E3100000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3162115, 0x60u, 0x30u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988;
      }
      else if (msg.msgh_id == 20117)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v17);
              if (!HIDWORD(v17))
              {
                *a8 = v18;
                return v12;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v17) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996;
            }
            else {
              uint64_t v12 = HIDWORD(v17);
            }
            goto LABEL_22;
          }
        }
        uint64_t v12 = 4294966996;
      }
      else
      {
        uint64_t v12 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  return v12;
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    int v3 = 3001;
    goto LABEL_27;
  }
  if (!*((unsigned char *)prefs + 112))
  {
    int v3 = 1007;
    goto LABEL_27;
  }
  if (!*((void *)prefs + 39))
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
    CFStringRef v4 = (const void *)*((void *)prefs + 20);
    if (v4)
    {
      CFRelease(v4);
      *((void *)prefs + 20) = 0;
    }
    int v5 = *((_DWORD *)prefs + 29);
    if (v5 != -1)
    {
      if (*((void *)prefs + 15))
      {
        unlink(*((const char **)prefs + 15));
        int v5 = *((_DWORD *)prefs + 29);
      }
      close(v5);
      *((_DWORD *)prefs + 29) = -1;
    }
    uint64_t v25 = 0;
    v23.tv_sec = 0;
    *(void *)&v23.tv_usec = 0;
    gettimeofday(&v23, 0);
    __darwin_time_t v6 = v23.tv_sec - *((void *)prefs + 16);
    __darwin_time_t v24 = v6;
    int v7 = v23.tv_usec - *((_DWORD *)prefs + 34);
    LODWORD(v25) = v7;
    if (v7 < 0)
    {
      __darwin_time_t v24 = --v6;
      LODWORD(v25) = v7 + 1000000;
    }
    if (v6 >= 1) {
      reportDelay_0((uint64_t)prefs, &v24);
    }
    CFDictionaryRef v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      int v18 = (char *)&v22 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      uint64_t v20 = *((void *)prefs + 13);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = v20;
      __SC_log_send(7, (uint64_t)v8, v9, v18);
    }
    __SCPreferencesUpdateLockedState((uint64_t)prefs, 0);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)prefs + 16));
    return 1;
  }
  LODWORD(v24) = 0;
  mach_port_t v2 = *((_DWORD *)prefs + 80);
  if (!v2)
  {
LABEL_26:
    int v3 = 1003;
    LODWORD(v24) = 1003;
    goto LABEL_27;
  }
  if (!_SCHelperExec(v2, 106, 0, &v24, 0))
  {
    if (*((_DWORD *)prefs + 80)) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
    goto LABEL_26;
  }
  int v3 = v24;
  if (!v24)
  {
    __SCPreferencesUpdateLockedState((uint64_t)prefs, 0);
    return 1;
  }
LABEL_27:
  _SCErrorSet(v3);
  return 0;
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  value[4] = *(void **)MEMORY[0x1E4F143B8];
  __darwin_time_t v93 = 0;
  uint64_t v94 = 0;
  if (!prefs)
  {
    int v3 = 3001;
    goto LABEL_5;
  }
  if (*((unsigned char *)prefs + 112))
  {
    int v3 = 1006;
    goto LABEL_5;
  }
  int v6 = wait;
  memset(&v97, 0, sizeof(v97));
  memset(&v96, 0, sizeof(v96));
  if (!*((void *)prefs + 39))
  {
    if (!*((unsigned char *)prefs + 306))
    {
      int v3 = 1003;
      goto LABEL_5;
    }
    value[0] = 0;
    CFDictionaryRef v10 = (const __CFDictionary *)*((void *)prefs + 12);
    if (!v10
      || !CFDictionaryGetValueIfPresent(v10, @"avoid-deadlock", (const void **)value)
      || (v11 = value[0], CFTypeID TypeID = CFBooleanGetTypeID(), !v11)
      || CFGetTypeID(v11) != TypeID
      || CFBooleanGetValue((CFBooleanRef)value[0]))
    {
      if (__SCPreferencesUsingDefaultPrefs((uint64_t)prefs)
        && avoid_SCNetworkConfiguration_deadlock_once != -1)
      {
        dispatch_once(&avoid_SCNetworkConfiguration_deadlock_once, &__block_literal_global_5);
      }
    }
    uint64_t v13 = (pthread_mutex_t *)((char *)prefs + 16);
    pthread_mutex_lock((pthread_mutex_t *)((char *)prefs + 16));
    __SCPreferencesAddSessionKeys((CFStringRef)prefs);
    if (!*((void *)prefs + 15))
    {
      uint64_t v14 = (const char *)*((void *)prefs + 13);
      size_t v15 = strlen(v14) + 6;
      uint64_t v16 = (char *)CFAllocatorAllocate(0, v15, 0);
      *((void *)prefs + 15) = v16;
      snprintf(v16, v15, "%s-lock", v14);
    }
    v95.tv_sec = 0;
    *(void *)&v95.tv_usec = 0;
    gettimeofday(&v95, 0);
    if (*((void *)prefs + 22))
    {
LABEL_30:
      if (!lockWithSCDynamicStore((uint64_t)prefs, v6))
      {
        int v57 = 1001;
        goto LABEL_83;
      }
LABEL_31:
      gettimeofday((timeval *)prefs + 8, 0);
      __darwin_time_t v18 = *((void *)prefs + 16) - v95.tv_sec;
      __darwin_time_t v93 = v18;
      int v19 = *((_DWORD *)prefs + 34) - v95.tv_usec;
      LODWORD(v94) = v19;
      if (v19 < 0)
      {
        __darwin_time_t v93 = --v18;
        LODWORD(v94) = v19 + 1000000;
      }
      if (!*((unsigned char *)prefs + 304)) {
        goto LABEL_38;
      }
      if (stat(*((const char **)prefs + 13), &v97) == -1)
      {
        if (*__error() != 2)
        {
          CFStringRef v58 = __log_SCPreferences();
          uint64_t v59 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v58, (os_log_type_t)v59))
          {
            uint64_t v60 = _os_log_pack_size();
            CFStringRef v68 = v13;
            uint64_t v69 = (char *)&v92
                - ((MEMORY[0x1F4188790](v60, v61, v62, v63, v64, v65, v66, v67) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v70 = _os_log_pack_fill();
            CFStringRef v71 = __error();
            CFTypeID v72 = strerror(*v71);
            *(_DWORD *)uint64_t v70 = 136315138;
            *(void *)(v70 + 4) = v72;
            uint64_t v73 = v69;
            uint64_t v13 = v68;
            __SC_log_send(6, (uint64_t)v58, v59, v73);
          }
          goto LABEL_73;
        }
        memset(&v97, 0, sizeof(v97));
      }
      uint64_t v20 = __SCPSignatureFromStatbuf(&v97.st_dev);
      int v21 = CFEqual(*((CFTypeRef *)prefs + 18), v20);
      CFRelease(v20);
      if (v21)
      {
LABEL_38:
        if (v18 >= 1) {
          reportDelay((uint64_t)prefs, &v93, 0);
        }
        uint64_t v22 = __log_SCPreferences();
        uint64_t v23 = _SC_syslog_os_log_mapping(7);
        if (__SC_log_enabled(7, v22, (os_log_type_t)v23))
        {
          uint64_t v24 = _os_log_pack_size();
          uint64_t v32 = v13;
          uint64_t v33 = (char *)&v92
              - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v34 = _os_log_pack_fill();
          uint64_t v35 = *((void *)prefs + 13);
          *(_DWORD *)uint64_t v34 = 136315138;
          *(void *)(v34 + 4) = v35;
          int v36 = v33;
          uint64_t v13 = v32;
          __SC_log_send(7, (uint64_t)v22, v23, v36);
        }
        Boolean v4 = 1;
        __SCPreferencesUpdateLockedState((uint64_t)prefs, 1);
        pthread_mutex_unlock(v13);
        return v4;
      }
LABEL_73:
      unlink(*((const char **)prefs + 15));
      if (v18 >= 1) {
        reportDelay((uint64_t)prefs, &v93, 1);
      }
      int v57 = 3005;
      goto LABEL_83;
    }
    if (v6) {
      int v37 = 545;
    }
    else {
      int v37 = 549;
    }
    *(void *)&long long v17 = 136315138;
    long long v92 = v17;
    while (1)
    {
      int v38 = open(*((const char **)prefs + 15), v37, 420);
      *((_DWORD *)prefs + 29) = v38;
      if (v38 != -1) {
        break;
      }
      int v40 = *__error();
      if (v40 <= 34)
      {
        if (v40 != 2) {
          goto LABEL_80;
        }
        CFStringRef v41 = (const __CFString *)*((void *)prefs + 11);
        if (v41 && CFStringHasPrefix(v41, @"/")) {
          goto LABEL_81;
        }
        if (createParentDirectory())
        {
          int v40 = *__error();
LABEL_80:
          if (v40 == 30) {
            goto LABEL_31;
          }
LABEL_81:
          int v57 = *__error();
          CFTypeID v74 = __log_SCPreferences();
          uint64_t v75 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v74, (os_log_type_t)v75))
          {
            uint64_t v76 = _os_log_pack_size();
            CFStringRef v77 = v13;
            uint64_t v85 = (char *)&v92
                - ((MEMORY[0x1F4188790](v76, v78, v79, v80, v81, v82, v83, v84) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v86 = _os_log_pack_fill();
            CFStringRef v87 = __error();
            io_object_t v88 = strerror(*v87);
            *(_DWORD *)uint64_t v86 = v92;
            *(void *)(v86 + 4) = v88;
            uint64_t v13 = v77;
            __SC_log_send(5, (uint64_t)v74, v75, v85);
          }
LABEL_83:
          int v89 = *((_DWORD *)prefs + 29);
          if (v89 != -1)
          {
            close(v89);
            *((_DWORD *)prefs + 29) = -1;
          }
          pthread_mutex_unlock(v13);
          int v3 = v57;
LABEL_5:
          _SCErrorSet(v3);
          return 0;
        }
        uint64_t v42 = __log_SCPreferences();
        uint64_t v43 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v42, (os_log_type_t)v43))
        {
          uint64_t v44 = _os_log_pack_size();
          int v52 = v13;
          uint64_t v53 = (char *)&v92
              - ((MEMORY[0x1F4188790](v44, v45, v46, v47, v48, v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v54 = _os_log_pack_fill();
          uint64_t v55 = *((void *)prefs + 13);
          *(_DWORD *)uint64_t v54 = v92;
          *(void *)(v54 + 4) = v55;
          CFMutableStringRef v56 = v53;
          uint64_t v13 = v52;
          __SC_log_send(6, (uint64_t)v42, v43, v56);
        }
        goto LABEL_57;
      }
      if (v40 != 45)
      {
        if (v40 == 35)
        {
          int v57 = 3002;
          goto LABEL_83;
        }
        goto LABEL_81;
      }
      if (has_O_EXLOCK((uint64_t)prefs))
      {
        *__error() = 45;
        goto LABEL_81;
      }
      CFStringRef v39 = _SCPNotificationKey(0, *((const __CFString **)prefs + 11), 1);
      *((void *)prefs + 22) = v39;
LABEL_58:
      if (v39) {
        goto LABEL_30;
      }
    }
    if (stat(*((const char **)prefs + 15), &v97) != -1
      && fstat(*((_DWORD *)prefs + 29), &v96) != -1
      && v97.st_dev == v96.st_dev
      && v97.st_ino == v96.st_ino)
    {
      pid_t v90 = getpid();
      snprintf((char *)value, 0x20uLL, "%d\n", v90);
      size_t v91 = strlen((const char *)value);
      write(*((_DWORD *)prefs + 29), value, v91);
      goto LABEL_31;
    }
    close(*((_DWORD *)prefs + 29));
    *((_DWORD *)prefs + 29) = -1;
LABEL_57:
    CFStringRef v39 = (CFStringRef)*((void *)prefs + 22);
    goto LABEL_58;
  }
  int v7 = (mach_port_t *)((char *)prefs + 320);
  mach_port_t v8 = *((_DWORD *)prefs + 80);
  if (!v8)
  {
    if (!__SCPreferencesCreate_helper((uint64_t)prefs)) {
      return 0;
    }
    mach_port_t v8 = *v7;
  }
  LODWORD(value[0]) = 0;
  if (v6) {
    int v9 = 103;
  }
  else {
    int v9 = 102;
  }
  if (!_SCHelperExec(v8, v9, *((const __CFData **)prefs + 18), value, 0))
  {
    if (*v7) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
    int v3 = 1003;
    LODWORD(value[0]) = 1003;
    goto LABEL_5;
  }
  int v3 = (int)value[0];
  if (LODWORD(value[0])) {
    goto LABEL_5;
  }
  Boolean v4 = 1;
  __SCPreferencesUpdateLockedState((uint64_t)prefs, 1);
  return v4;
}

os_log_t __log_SCPreferences()
{
  os_log_t result = (os_log_t)__log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)result;
  }
  return result;
}

void __SCPreferencesUpdateLockedState(uint64_t a1, char a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__SCPreferencesUpdateLockedState_once != -1) {
    dispatch_once(&__SCPreferencesUpdateLockedState_once, &__block_literal_global_4);
  }
  *(unsigned char *)(a1 + 112) = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ____SCPreferencesUpdateLockedState_block_invoke_41;
  block[3] = &__block_descriptor_tmp_42;
  char v5 = a2;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)__SCPreferencesUpdateLockedState_lockedQueue, block);
}

uint64_t _SC_CFBundleGet()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!_SC_CFBundleGet_bundle)
  {
    CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.SystemConfiguration");
    _SC_CFBundleGet_bundle = (uint64_t)BundleWithIdentifier;
    if (BundleWithIdentifier)
    {
      CFRetain(BundleWithIdentifier);
    }
    else
    {
      int v1 = _SC_LOG_DEFAULT();
      uint64_t v2 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v1, (os_log_type_t)v2))
      {
        uint64_t v3 = _os_log_pack_size();
        uint64_t v11 = &v33[-((MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v12 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v12 = 138412290;
        *(void *)(v12 + 4) = @"com.apple.SystemConfiguration";
        __SC_log_send(5, (uint64_t)v1, v2, v11);
      }
      uint64_t v13 = getenv("DYLD_FRAMEWORK_PATH");
      if (v13)
      {
        uint64_t v14 = v13;
        size_t v15 = strlen(v13);
        if (v15)
        {
          while (v15 >= 2)
          {
            size_t v16 = v15 - 1;
            int v17 = v14[--v15];
            if (v17 != 47)
            {
              if (v16 + 1 >= 5 && !strncmp(&v14[v16 - 3], "~sym", 4uLL) && v16 + 57 <= 0x3FF)
              {
                __strlcpy_chk();
                strlcpy(&v33[v16 + 5], "~dst", 1027 - v16);
                strlcat((char *)&v34[v16 + 1], "/System/Library/Frameworks/SystemConfiguration.framework", 1023 - v16);
                CFURLRef v18 = CFURLCreateFromFileSystemRepresentation(0, v34, v16 + 57, 1u);
                _SC_CFBundleGet_bundle = (uint64_t)CFBundleCreate(0, v18);
                CFRelease(v18);
              }
              break;
            }
          }
        }
      }
      if (!_SC_CFBundleGet_bundle)
      {
        CFURLRef v19 = CFURLCreateWithFileSystemPath(0, @"/System/Library/Frameworks/SystemConfiguration.framework", kCFURLPOSIXPathStyle, 1u);
        _SC_CFBundleGet_bundle = (uint64_t)CFBundleCreate(0, v19);
        CFRelease(v19);
        if (!_SC_CFBundleGet_bundle)
        {
          uint64_t v20 = _SC_LOG_DEFAULT();
          uint64_t v21 = _SC_syslog_os_log_mapping(3);
          if (__SC_log_enabled(3, v20, (os_log_type_t)v21))
          {
            uint64_t v22 = _os_log_pack_size();
            uint64_t v30 = &v33[-((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0)];
            __error();
            uint64_t v31 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v31 = 138412290;
            *(void *)(v31 + 4) = @"com.apple.SystemConfiguration";
            __SC_log_send(3, (uint64_t)v20, v21, v30);
          }
        }
      }
    }
  }
  return _SC_CFBundleGet_bundle;
}

__CFString *__SCNetworkReachabilityCopyDescription(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v3 = (pthread_mutex_t *)(a1 + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)(a1 + 16))) {
    __SCNetworkReachabilityCopyDescription_cold_2();
  }
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkReachability %p [%p]> {", a1, v2);
  CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
  CFMutableStringRef v6 = CFStringCreateMutable(v5, 0);
  unsigned int v7 = *(_DWORD *)(a1 + 80);
  if (v7 < 2)
  {
    uint64_t v10 = *(NSObject **)(a1 + 96);
    if (v10)
    {
      sockaddr address = nw_endpoint_get_address(v10);
      _SC_sockaddr_to_string((uint64_t)address, v27, 0x40uLL);
      CFStringAppendFormat(v6, 0, @"local sockaddr address = %s", v27);
    }
    uint64_t v12 = *(NSObject **)(a1 + 104);
    if (v12)
    {
      uint64_t v13 = nw_endpoint_get_address(v12);
      _SC_sockaddr_to_string((uint64_t)v13, v27, 0x40uLL);
      if (*(void *)(a1 + 96)) {
        uint64_t v14 = ", ";
      }
      else {
        uint64_t v14 = "";
      }
      if (*(_DWORD *)(a1 + 80) == 1) {
        size_t v15 = "remote ";
      }
      else {
        size_t v15 = "";
      }
      CFStringAppendFormat(v6, 0, @"%s%ssockaddr address = %s", v14, v15, v27);
    }
    else
    {
      CFStringAppendFormat(v6, 0, @"default path", v24, v26);
    }
  }
  else if (v7 == 2)
  {
    hostio_name_t name = nw_endpoint_get_hostname(*(nw_endpoint_t *)(a1 + 88));
    CFStringAppendFormat(v6, 0, @"io_name_t name = %s", hostname, v26);
  }
  else if (v7 == 3)
  {
    uint64_t v8 = *(NSObject **)(a1 + 104);
    if (v8)
    {
      uint64_t v9 = nw_endpoint_get_address(v8);
      _SC_sockaddr_to_string((uint64_t)v9, v27, 0x40uLL);
      CFStringAppendFormat(v6, 0, @"ptr = %s", v27, v26);
    }
  }
  if (*(void *)(a1 + 232))
  {
    uint64_t required_interface_index = nw_parameters_get_required_interface_index();
    if (required_interface_index) {
      CFStringAppendFormat(v6, 0, @", if_index = %u", required_interface_index);
    }
  }
  CFStringAppend(Mutable, v6);
  CFRelease(v6);
  if (*(_DWORD *)(a1 + 80) >= 2u)
  {
    int v17 = *(_DWORD *)(a1 + 272);
    if (*(void *)(a1 + 264))
    {
      if (!v17)
      {
        CFStringAppendFormat(Mutable, 0, @" (DNS query active)");
        goto LABEL_34;
      }
    }
    else if (!v17)
    {
      goto LABEL_34;
    }
    if (v17 == 2) {
      CFURLRef v18 = "complete";
    }
    else {
      CFURLRef v18 = "in progress";
    }
    CFStringAppendFormat(Mutable, 0, @" (%s"), v18;
    if (nw_array_get_count()) {
      nw_array_apply();
    }
    else {
      CFStringAppendFormat(Mutable, 0, @", no addresses");
    }
    CFStringAppendFormat(Mutable, 0, @""));
  }
LABEL_34:
  if (*(unsigned char *)(a1 + 192)) {
    CFStringAppendFormat(Mutable, 0, @", !resolve");
  }
  if (*(unsigned char *)(a1 + 112))
  {
    CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)a1);
    uint64_t FlagsFromPath = __SCNetworkReachabilityGetFlagsFromPath(a1 + 193, (uint64_t)"CopyTargetFlags", *(nw_path_t *)(a1 + 248), *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 272), *(void *)(a1 + 280), *(unsigned __int8 *)(a1 + 288), *(_DWORD *)(a1 + 292));
    if (*(unsigned char *)(a1 + 288)) {
      uint64_t interface_index = *(unsigned int *)(a1 + 296);
    }
    else {
      uint64_t interface_index = nw_path_get_interface_index();
    }
    CFStringRef v22 = CFStringCreateWithFormat(v19, 0, @"flags = 0x%08x, if_index = %u", FlagsFromPath, interface_index);
    CFStringAppendFormat(Mutable, 0, @", %@", v22);
    CFRelease(v22);
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  if (pthread_mutex_unlock(v3)) {
    __SCNetworkReachabilityCopyDescription_cold_1();
  }
  return Mutable;
}

uint64_t SCNetworkCategoryGetTypeID()
{
  if (__SCNetworkCategoryInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryInitialize_initialized, &__block_literal_global);
  }
  return __kSCNetworkCategoryTypeID;
}

uint64_t SCNetworkCategoryCopyAll(const __SCPreferences *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CFStringRef Categories = SCPreferencesPathKeyCreateCategories(0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, Categories);
  CFRelease(Categories);
  if (Value)
  {
    SCDynamicStoreContext context = a1;
    uint64_t v6 = 0;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyAllApplier, &context);
    return v6;
  }
  else
  {
    _SCErrorSet(1004);
    return 0;
  }
}

void copyAllApplier(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    uint64_t v7 = (const void *)__SCNetworkCategoryCreate(*(const void **)a3, a1);
    CFMutableDictionaryRef Mutable = *(__CFArray **)(a3 + 8);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *(void *)(a3 + 8) = Mutable;
    }
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
  }
}

uint64_t SCNetworkCategoryCreate(const void *a1, const __CFString *a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __SCNetworkCategoryCreate(a1, a2);
  if (v2)
  {
    uint64_t v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = (char *)v16 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)(v14 + 4) = "SCNetworkCategoryCreate";
      *(_WORD *)(v14 + 12) = 2112;
      *(void *)(v14 + 14) = v2;
      __SC_log_send(7, (uint64_t)v3, v4, v13);
    }
  }
  return v2;
}

uint64_t __SCNetworkCategoryCreate(const void *a1, const __CFString *a2)
{
  if (__SCNetworkCategoryInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryInitialize_initialized, &__block_literal_global);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0, a2);
    *(void *)(Instance + 24) = CFRetain(a1);
  }
  return Instance;
}

uint64_t SCNetworkCategoryAddService(uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CFStringRef CategoryService = SCPreferencesPathKeyCreateCategoryService(0, *(void *)(a1 + 16), a2, (uint64_t)ServiceID);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    _SCErrorSet(1005);
    uint64_t v9 = 0;
  }
  else
  {
    CFDictionaryRef v10 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v9 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService, v10);
    CFRelease(v10);
  }
  CFRelease(CategoryService);
  return v9;
}

uint64_t SCNetworkCategoryRemoveService(uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CFStringRef CategoryService = SCPreferencesPathKeyCreateCategoryService(0, *(void *)(a1 + 16), a2, (uint64_t)ServiceID);
  uint64_t v8 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  SCNetworkServiceRemove(service);
  CFRelease(CategoryService);
  return v8;
}

uint64_t SCNetworkCategoryCopyServices(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CFStringRef CategoryService = SCPreferencesPathKeyCreateCategoryService(0, *(void *)(a1 + 16), a2, 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryService);
  CFRelease(CategoryService);
  if (Value)
  {
    uint64_t context = *(void *)(a1 + 24);
    uint64_t v7 = 0;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyServicesApplier, &context);
    return v7;
  }
  else
  {
    _SCErrorSet(1004);
    return 0;
  }
}

void copyServicesApplier(const __CFString *a1, const void *a2, SCPreferencesRef *a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      SCNetworkServiceRef v7 = SCNetworkServiceCopy(*a3, a1);
      if (v7)
      {
        SCNetworkServiceRef v8 = v7;
        CFMutableDictionaryRef Mutable = a3[1];
        if (!Mutable)
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          a3[1] = Mutable;
        }
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
      }
    }
  }
}

uint64_t SCNetworkCategoryCopyValues(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  CFStringRef Category = SCPreferencesPathKeyCreateCategory(0, *(void *)(a1 + 16));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), Category);
  CFRelease(Category);
  if (Value)
  {
    v5[0] = 0;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)copyValuesApplier, v5);
    return v5[0];
  }
  else
  {
    _SCErrorSet(1004);
    return 0;
  }
}

void copyValuesApplier(const void *a1, const void *a2, __CFArray **a3)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    CFMutableDictionaryRef Mutable = *a3;
    if (!*a3)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *a3 = Mutable;
    }
    CFArrayAppendValue(Mutable, a1);
  }
}

uint64_t SCNetworkCategorySetServiceQoSMarkingPolicy(uint64_t a1, uint64_t a2, SCNetworkServiceRef service, const __CFDictionary *a4)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CFStringRef CategoryServiceEntity = SCPreferencesPathKeyCreateCategoryServiceEntity(0, *(void *)(a1 + 16), a2, (uint64_t)ServiceID, @"QoSMarkingPolicy");
  uint64_t v9 = *(const __SCPreferences **)(a1 + 24);
  if (a4) {
    uint64_t v10 = SCPreferencesPathSetValue(v9, CategoryServiceEntity, a4);
  }
  else {
    uint64_t v10 = SCPreferencesPathRemoveValue(v9, CategoryServiceEntity);
  }
  uint64_t v11 = v10;
  CFRelease(CategoryServiceEntity);
  return v11;
}

CFDictionaryRef SCNetworkCategoryGetServiceQoSMarkingPolicy(uint64_t a1, uint64_t a2, SCNetworkServiceRef service)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  CFStringRef CategoryServiceEntity = SCPreferencesPathKeyCreateCategoryServiceEntity(0, *(void *)(a1 + 16), a2, (uint64_t)ServiceID, @"QoSMarkingPolicy");
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), CategoryServiceEntity);
  CFRelease(CategoryServiceEntity);
  if (!Value) {
    _SCErrorSet(1004);
  }
  return Value;
}

void __SCNetworkCategoryDeallocate(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t __SCNetworkCategoryEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = *(const void **)(a1 + 16);
  uint64_t v3 = *(const void **)(a2 + 16);

  return CFEqual(v2, v3);
}

CFHashCode __SCNetworkCategoryHash(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 16);

  return CFHash(v1);
}

__CFString *__SCNetworkCategoryCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<%s %p [%p]> { ID = %@ }", "SCNetworkCategory", a1, v2, a1[2]);
  return Mutable;
}

const void *isA_CFString(const void *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

CFComparisonResult compare_CFString(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

const void *isA_CFNumber(const void *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

CFComparisonResult compare_CFNumber(const __CFNumber *a1, const __CFNumber *a2)
{
  return CFNumberCompare(a1, a2, 0);
}

const void *isA_CFDate(const void *a1)
{
  CFTypeID TypeID = CFDateGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

CFComparisonResult compare_CFDate(const __CFDate *a1, const __CFDate *a2)
{
  return CFDateCompare(a1, a2, 0);
}

uint64_t _SC_isInstallEnvironment()
{
  if (_SC_isInstallEnvironment_once != -1) {
    dispatch_once(&_SC_isInstallEnvironment_once, &__block_literal_global_0);
  }
  return _SC_isInstallEnvironment_is_install;
}

os_log_t _SC_LOG_DEFAULT()
{
  os_log_t result = (os_log_t)_SC_LOG_DEFAULT_log;
  if (!_SC_LOG_DEFAULT_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "");
    _SC_LOG_DEFAULT_log = (uint64_t)result;
  }
  return result;
}

void __SC_Log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (_sc_log < 1) {
    goto LABEL_4;
  }
  if (_sc_log >= 2)
  {
    os_log_with_args();
LABEL_4:
    __SCPrint((FILE *)*MEMORY[0x1E4F143D8], a2, (uint64_t)&a9, _sc_log == 2, 1);
    return;
  }
  os_log_with_args();
}

CFErrorRef SCCopyLastError(void)
{
  uint64_t v0 = 0;
  CFIndex v1 = *(int *)__SCGetThreadSpecificData();
  while (sc_errmsgs[v0] != v1)
  {
    v0 += 4;
    if (v0 == 80)
    {
      CFAllocatorRef v2 = (const __CFString **)MEMORY[0x1E4F1D150];
      if ((v1 - 1) < 0x6A) {
        CFAllocatorRef v2 = (const __CFString **)MEMORY[0x1E4F1D160];
      }
      CFStringRef v3 = *v2;
      return CFErrorCreate(0, v3, v1, 0);
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFStringRef v6 = CFStringCreateWithCString(0, *(const char **)&sc_errmsgs[v0 + 2], 0x600u);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D140], v6);
  CFRelease(v6);
  SCNetworkServiceRef v7 = CFErrorCreate(0, @"com.apple.SystemConfiguration", v1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

const char *__cdecl SCErrorString(int status)
{
  for (uint64_t i = 0; i != 80; i += 4)
  {
    if (sc_errmsgs[i] == status) {
      return *(const char **)&sc_errmsgs[i + 2];
    }
  }
  if ((status - 1) <= 0x69)
  {
LABEL_5:
    return strerror(status);
  }
  if (status > 0x451)
  {
    os_log_t result = mach_error_string(status);
    if (result) {
      return result;
    }
    goto LABEL_5;
  }

  return bootstrap_strerror(status);
}

void *_SC_dlopen(char *__path)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (_SC_dlopen_once != -1) {
    dispatch_once(&_SC_dlopen_once, &__block_literal_global_1);
  }
  if (!_SC_dlopen_suffix || (memset(&v5, 0, sizeof(v5)), __strlcpy_chk(), __strlcat_chk(), stat(v4, &v5) < 0)) {
    CFAllocatorRef v2 = __path;
  }
  else {
    CFAllocatorRef v2 = v4;
  }
  return dlopen(v2, 5);
}

void _SC_sendMachMessage(mach_port_t a1, mach_msg_id_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(void *)&v2.msgh_bits = 0x1800000013;
  v2.msgh_remote_port = a1;
  v2.msgh_local_port = 0;
  v2.msgh_voucher_port = 0;
  v2.msgh_id = a2;
  if ((mach_msg(&v2, 17, 0x18u, 0, 0, 0, 0) - 268435459) <= 1) {
    mach_msg_destroy(&v2);
  }
}

CFDictionaryRef _SCSerializeMultiple(const __CFDictionary *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)keys = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)values = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  CFIndex Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count < 1)
  {
    stat v5 = (const void **)v13;
    uint64_t v6 = (const void **)values;
    uint64_t v4 = (const void **)keys;
LABEL_9:
    CFDictionaryRef v9 = CFDictionaryCreate(0, v4, v6, v3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    if ((unint64_t)Count < 0x21)
    {
      stat v5 = (const void **)v13;
      uint64_t v6 = (const void **)values;
      uint64_t v4 = (const void **)keys;
    }
    else
    {
      uint64_t v4 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      stat v5 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
      uint64_t v6 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
    }
    bzero(v6, 8 * v3);
    CFDictionaryGetKeysAndValues(a1, v4, v5);
    uint64_t v7 = 0;
    CFIndex v8 = v3;
    while (1)
    {
      v6[v7] = 0;
      if (!_SCSerialize(v5[v7], (CFDataRef *)&v6[v7], 0, 0)) {
        break;
      }
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    CFDictionaryRef v9 = 0;
  }
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v11 = v6[i];
      if (v11) {
        CFRelease(v11);
      }
    }
    if (v4 != (const void **)keys)
    {
      CFAllocatorDeallocate(0, v4);
      CFAllocatorDeallocate(0, v5);
      CFAllocatorDeallocate(0, v6);
    }
  }
  return v9;
}

CFDictionaryRef _SCUnserializeMultiple(const __CFDictionary *a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)keys = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)values = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  CFIndex Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count < 1)
  {
    stat v5 = (const void **)v13;
    uint64_t v6 = (const void **)values;
    uint64_t v4 = (const void **)keys;
LABEL_9:
    CFDictionaryRef v9 = CFDictionaryCreate(0, v4, v6, v3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    if ((unint64_t)Count < 0x21)
    {
      stat v5 = (const void **)v13;
      uint64_t v6 = (const void **)values;
      uint64_t v4 = (const void **)keys;
    }
    else
    {
      uint64_t v4 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      stat v5 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
      uint64_t v6 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
    }
    bzero(v6, 8 * v3);
    CFDictionaryGetKeysAndValues(a1, v4, v5);
    uint64_t v7 = 0;
    CFIndex v8 = v3;
    while (_SCUnserialize(&v6[v7], (const __CFData *)v5[v7], 0, 0))
    {
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    CFDictionaryRef v9 = 0;
  }
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v11 = v6[i];
      if (v11) {
        CFRelease(v11);
      }
    }
    if (v4 != (const void **)keys)
    {
      CFAllocatorDeallocate(0, v4);
      CFAllocatorDeallocate(0, v5);
      CFAllocatorDeallocate(0, v6);
    }
  }
  return v9;
}

CFPropertyListRef _SCCreatePropertyListFromResource(const __CFURL *a1)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  CFNumberRef propertyValueTypeRefPtr = 0;
  valuePtr[0] = 0;
  if (CFURLCopyResourcePropertyForKey(a1, (CFStringRef)*MEMORY[0x1E4F1D640], &propertyValueTypeRefPtr, 0)) {
    BOOL v2 = propertyValueTypeRefPtr == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    CFIndex v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = (char *)&v35 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 138412290;
      *(void *)(v14 + 4) = a1;
      int v15 = 5;
LABEL_15:
      __SC_log_send(v15, (uint64_t)v3, v4, v13);
    }
    return 0;
  }
  int Value = CFNumberGetValue(propertyValueTypeRefPtr, kCFNumberSInt64Type, valuePtr);
  CFRelease(propertyValueTypeRefPtr);
  if (Value) {
    BOOL v17 = valuePtr[0] == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    CFIndex v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v13 = (char *)&v35 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 138412290;
      *(void *)(v26 + 4) = a1;
      int v15 = 6;
      goto LABEL_15;
    }
    return 0;
  }
  long long v29 = CFReadStreamCreateWithFile(0, a1);
  if (!v29) {
    return 0;
  }
  uint64_t v30 = v29;
  if (CFReadStreamOpen(v29))
  {
    long long v31 = (UInt8 *)CFAllocatorAllocate(0, valuePtr[0], 0);
    CFIndex v32 = CFReadStreamRead(v30, v31, valuePtr[0]);
    CFPropertyListRef v27 = 0;
    if (v32 == valuePtr[0])
    {
      CFDataRef v33 = CFDataCreateWithBytesNoCopy(0, v31, v32, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      if (v33)
      {
        CFDataRef v34 = v33;
        CFPropertyListRef v27 = CFPropertyListCreateWithData(0, v33, 0, 0, 0);
        CFRelease(v34);
      }
      else
      {
        CFPropertyListRef v27 = 0;
      }
    }
    CFAllocatorDeallocate(0, v31);
    CFReadStreamClose(v30);
  }
  else
  {
    CFPropertyListRef v27 = 0;
  }
  CFRelease(v30);
  return v27;
}

uint64_t _SC_unschedule(const void *a1, const void *a2, const void *a3, CFArrayRef theArray, int a5)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    return 0;
  }
  else
  {
    CFIndex v11 = Count;
    unsigned __int8 v12 = 0;
    CFIndex v13 = 0;
    do
    {
      while (1)
      {
        if (!a1 || (uint64_t v14 = CFArrayGetValueAtIndex(theArray, v13), CFEqual(a1, v14)))
        {
          if (!a2 || (int v15 = CFArrayGetValueAtIndex(theArray, v13 + 1), CFEqual(a2, v15)))
          {
            if (!a3) {
              break;
            }
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v13 + 2);
            if (CFEqual(a3, ValueAtIndex)) {
              break;
            }
          }
        }
        v13 += 3;
        if (v13 >= v11) {
          return v12;
        }
      }
      CFArrayRemoveValueAtIndex(theArray, v13 + 2);
      CFArrayRemoveValueAtIndex(theArray, v13 + 1);
      CFArrayRemoveValueAtIndex(theArray, v13);
      unsigned __int8 v12 = 1;
      if (!a5) {
        break;
      }
      v11 -= 3;
    }
    while (v13 < v11);
  }
  return v12;
}

void _SC_crash(const char *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (_SC_isAppleInternal_once_0 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_0, &__block_literal_global_64);
  }
  if (_SC_isAppleInternal_isInternal_0)
  {
    if (a1) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = "_SC_crash() called w/o \"crash_info\"";
    }
    qword_1E91CA1E0 = (uint64_t)v6;
    uint64_t v7 = _SC_LOG_DEFAULT();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v10 = v6;
      _os_log_impl(&dword_18E26B000, v7, OS_LOG_TYPE_FAULT, "%s", buf, 0xCu);
    }
    if (a2 && a3 && (_SC_ReportCrash_warned & 1) == 0)
    {
      CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%@\n\nPlease collect the crash report and file a Radar.", a3);
      CFUserNotificationDisplayNotice(0.0, 0, 0, 0, 0, a2, v8, 0);
      CFRelease(v8);
      _SC_ReportCrash_warned = 1;
    }
    qword_1E91CA1E0 = 0;
  }
}

void _SC_logMachPortStatus()
{
  *(void *)&v35[13] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  uint64_t v0 = _SC_LOG_DEFAULT();
  uint64_t v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, (os_log_type_t)v1))
  {
    uint64_t v2 = _os_log_pack_size();
    uint64_t v10 = (char *)&v30 - ((MEMORY[0x1F4188790](v2, v3, v4, v5, v6, v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v0, v1, v10);
  }
  if (!MEMORY[0x192FA7CC0](*MEMORY[0x1E4F14960], &v32, (char *)&v30 + 4, &v31, &v30))
  {
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
    if (HIDWORD(v30))
    {
      for (unint64_t i = 0; i < HIDWORD(v30); ++i)
      {
        uint64_t v13 = v31;
        if (!*(_DWORD *)(v31 + 4 * i))
        {
          long long v16 = &v33;
          goto LABEL_15;
        }
        __int16 v33 = 10272;
        int v14 = *(_DWORD *)(v31 + 4 * i);
        int v15 = &v34;
        if ((v14 & 0x10000) != 0)
        {
          char v34 = 83;
          int v14 = *(_DWORD *)(v31 + 4 * i);
          int v15 = v35;
          if ((v14 & 0x20000) == 0)
          {
LABEL_9:
            if ((v14 & 0x40000) == 0) {
              goto LABEL_10;
            }
            goto LABEL_19;
          }
        }
        else if ((v14 & 0x20000) == 0)
        {
          goto LABEL_9;
        }
        *v15++ = 82;
        int v14 = *(_DWORD *)(v13 + 4 * i);
        if ((v14 & 0x40000) == 0)
        {
LABEL_10:
          if ((v14 & 0x80000) != 0) {
            goto LABEL_20;
          }
          goto LABEL_11;
        }
LABEL_19:
        *v15++ = 79;
        int v14 = *(_DWORD *)(v31 + 4 * i);
        if ((v14 & 0x80000) != 0)
        {
LABEL_20:
          *v15++ = 80;
          if ((*(_DWORD *)(v31 + 4 * i) & 0x100000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          *v15++ = 68;
          goto LABEL_13;
        }
LABEL_11:
        if ((v14 & 0x100000) != 0) {
          goto LABEL_12;
        }
LABEL_13:
        *int v15 = 41;
        long long v16 = (__int16 *)(v15 + 1);
LABEL_15:
        *(unsigned char *)long long v16 = 0;
        CFStringAppendFormat(Mutable, 0, @" %u%s", *(unsigned int *)(v32 + 4 * i), &v33, v30);
      }
    }
    BOOL v17 = _SC_LOG_DEFAULT();
    uint64_t v18 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      CFPropertyListRef v27 = (char *)&v30 - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      int v29 = HIDWORD(v30);
      *(_DWORD *)uint64_t v28 = 67109378;
      *(_DWORD *)(v28 + 4) = v29;
      *(_WORD *)(v28 + 8) = 2112;
      *(void *)(v28 + 10) = Mutable;
      __SC_log_send(7, (uint64_t)v17, v18, v27);
    }
    CFRelease(Mutable);
  }
}

BOOL _SC_checkMachPortReceive(uint64_t a1, uint64_t name)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  pnw_interface_type_t type = 0;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  int v4 = 0;
  if (_SC_getMachPortReferences(name, &ptype, 0, (uint64_t)&v4, (integer_t *)v5, 0, 0, 0, a1)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v4 == 0;
  }
  return !v2;
}

uint64_t _SC_getMachPortReferences(uint64_t name, mach_port_type_t *ptype, uint64_t a3, uint64_t a4, integer_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v48 = a9;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  BOOL v17 = (ipc_space_read_t *)MEMORY[0x1E4F14960];
  uint64_t v18 = mach_port_type(*MEMORY[0x1E4F14960], name, ptype);
  if (!v18)
  {
    if (a3)
    {
      if (*((unsigned char *)ptype + 2))
      {
        uint64_t v34 = MEMORY[0x192FA7C90](*v17, name, 0, a3);
        if (v34)
        {
          uint64_t v19 = v34;
          uint64_t v20 = _SC_LOG_DEFAULT();
          uint64_t v21 = _SC_syslog_os_log_mapping(7);
          if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
            return v19;
          }
          goto LABEL_3;
        }
      }
    }
    if (!a4 || !a5 || (*((unsigned char *)ptype + 2) & 2) == 0) {
      goto LABEL_38;
    }
    uint64_t v37 = MEMORY[0x192FA7C90](*v17, name, 1, a4);
    if (v37)
    {
      uint64_t v19 = v37;
      uint64_t v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
        return v19;
      }
      goto LABEL_3;
    }
    mach_msg_type_number_t port_info_outCnt = 10;
    uint64_t attributes = mach_port_get_attributes(*v17, name, 2, a5, &port_info_outCnt);
    if (attributes)
    {
      uint64_t v19 = attributes;
      uint64_t v20 = _SC_LOG_DEFAULT();
      uint64_t v21 = _SC_syslog_os_log_mapping(7);
      if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
        return v19;
      }
    }
    else
    {
LABEL_38:
      if (a6 && (*((unsigned char *)ptype + 2) & 4) != 0 && (uint64_t v35 = MEMORY[0x192FA7C90](*v17, name, 2, a6), v35))
      {
        uint64_t v19 = v35;
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }
      else if (a7 && (*((unsigned char *)ptype + 2) & 8) != 0 && (uint64_t v36 = MEMORY[0x192FA7C90](*v17, name, 3, a7), v36))
      {
        uint64_t v19 = v36;
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }
      else
      {
        if (!a8 || (*((unsigned char *)ptype + 2) & 0x10) == 0) {
          return 0;
        }
        uint64_t v19 = MEMORY[0x192FA7C90](*v17, name, 4, a8);
        if (!v19) {
          return v19;
        }
        uint64_t v20 = _SC_LOG_DEFAULT();
        uint64_t v21 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v20, (os_log_type_t)v21)) {
          return v19;
        }
      }
    }
    uint64_t v39 = _os_log_pack_size();
    uint64_t v30 = (char *)&v47 - ((MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    goto LABEL_4;
  }
  uint64_t v19 = v18;
  uint64_t v20 = _SC_LOG_DEFAULT();
  uint64_t v21 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v20, (os_log_type_t)v21))
  {
LABEL_3:
    uint64_t v22 = _os_log_pack_size();
    uint64_t v30 = (char *)&v47 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
LABEL_4:
    uint64_t v31 = _os_log_pack_fill();
    uint64_t v32 = mach_error_string(v19);
    *(_DWORD *)uint64_t v31 = 136315650;
    *(void *)(v31 + 4) = v48;
    *(_WORD *)(v31 + 12) = 1024;
    *(_DWORD *)(v31 + 14) = name;
    *(_WORD *)(v31 + 18) = 2080;
    *(void *)(v31 + 20) = v32;
    __SC_log_send(7, (uint64_t)v20, v21, v30);
  }
  return v19;
}

BOOL _SC_checkMachPortSend(uint64_t a1, uint64_t name)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  pnw_interface_type_t type = 0;
  int v5 = 0;
  uint64_t v4 = 0;
  int MachPortReferences = _SC_getMachPortReferences(name, &ptype, (uint64_t)&v5, 0, 0, (uint64_t)&v4 + 4, 0, (uint64_t)&v4, a1);
  BOOL result = 0;
  if (!MachPortReferences) {
    return (v5 | HIDWORD(v4) | v4) != 0;
  }
  return result;
}

void _SC_logMachPortReferences(uint64_t a1, uint64_t name)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  pnw_interface_type_t type = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v18 = 0;
  v24[0] = 0;
  if (a1)
  {
    __strlcpy_chk();
    __strlcat_chk();
    if (!(v25 ^ 0x2020 | v26)) {
      LOBYTE(v25) = 58;
    }
  }
  if (!_SC_getMachPortReferences(name, &ptype, (uint64_t)&v20 + 4, (uint64_t)&v20, (integer_t *)v21, (uint64_t)&v19 + 4, (uint64_t)&v19, (uint64_t)&v18, (uint64_t)v24))
  {
    uint64_t v3 = _SC_LOG_DEFAULT();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = (char *)&v17 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      if (v22) {
        int v15 = ", no more senders";
      }
      else {
        int v15 = "";
      }
      if ((ptype & 0x100000) != 0) {
        long long v16 = ", dead name request";
      }
      else {
        long long v16 = "";
      }
      __os_log_helper_1_2_10_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_8_32_8_32(v14, (uint64_t)v24, name, name, SHIDWORD(v20), v20, SHIDWORD(v19), v19, v18, (uint64_t)v15, (uint64_t)v16);
      __SC_log_send(7, (uint64_t)v3, v4, v13);
    }
  }
}

double __os_log_helper_1_2_10_8_32_4_0_4_0_4_0_4_0_4_0_4_0_4_0_8_32_8_32(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  *(void *)&double result = 136317442;
  *(_DWORD *)a1 = 136317442;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  *(_WORD *)(a1 + 36) = 1024;
  *(_DWORD *)(a1 + 38) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  *(_WORD *)(a1 + 48) = 1024;
  *(_DWORD *)(a1 + 50) = a9;
  *(_WORD *)(a1 + 54) = 2080;
  *(void *)(a1 + 56) = a10;
  *(_WORD *)(a1 + 64) = 2080;
  *(void *)(a1 + 66) = a11;
  return result;
}

__CFString *_SC_copyBacktrace()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(v15, 0, sizeof(v15));
  int v0 = backtrace((void **)v15, 64);
  if (v0 == -1)
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      _os_log_pack_size();
      uint64_t v10 = (char *)v15 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = __error();
      uint64_t v13 = strerror(*v12);
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = v13;
      __SC_log_send(5, (uint64_t)v8, v9, v10);
    }
    return 0;
  }
  else
  {
    int v1 = v0;
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
    uint64_t v3 = backtrace_symbols((void *const *)v15, v1);
    if (v3)
    {
      uint64_t v4 = v3;
      if (v1 >= 1)
      {
        uint64_t v5 = v1;
        uint64_t v6 = v3;
        do
        {
          uint64_t v7 = (uint64_t)*v6++;
          CFStringAppendFormat(Mutable, 0, @"%s\n", v7);
          --v5;
        }
        while (v5);
      }
      free(v4);
    }
  }
  return Mutable;
}

BOOL _SC_getconninfo(int a1, _OWORD *a2, _OWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  if (a2)
  {
    a2[6] = 0uLL;
    a2[7] = 0uLL;
    a2[4] = 0uLL;
    a2[5] = 0uLL;
    a2[2] = 0uLL;
    a2[3] = 0uLL;
    *a2 = 0uLL;
    a2[1] = 0uLL;
    *(void *)&long long v23 = a2;
    DWORD2(v23) = 128;
  }
  if (a3)
  {
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    *(void *)&long long v24 = a3;
    DWORD2(v24) = 128;
  }
  if (ioctl(a1, 0xC0407398uLL))
  {
    uint64_t v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v7, (os_log_type_t)v8);
    if (result)
    {
      uint64_t v10 = _os_log_pack_size();
      int v18 = (char *)&v22 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      uint64_t v20 = __error();
      uint64_t v21 = strerror(*v20);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = v21;
      __SC_log_send(5, (uint64_t)v7, v8, v18);
      return 0;
    }
  }
  else
  {
    if (a4) {
      *a4 = DWORD2(v22);
    }
    if (a5) {
      *a5 = DWORD1(v22);
    }
    return 1;
  }
  return result;
}

CFStringRef _SC_copyInterfaceUUID(const __CFString *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(&c, 0, sizeof(c));
  v4[0] = 0;
  v4[1] = 0;
  _SC_cfstring_to_cstring_ext(a1, (UInt8 *)v4, 16, 0x8000100u, 0, 0);
  *(_OWORD *)md = 0u;
  long long v7 = 0u;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, v4, 0x10u);
  CC_SHA256_Final(md, &c);
  CFUUIDRef v1 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)md);
  CFStringRef v2 = CFUUIDCreateString(0, v1);
  CFRelease(v1);
  return v2;
}

void _SCDPluginExecInit()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFMachPortContext v4 = *(CFMachPortContext *)byte_1EDD20458;
  childReaped = (uint64_t)CFMachPortCreate(0, (CFMachPortCallBack)childrenReaped, &v4, 0);
  LODWORD(v5.__sigaction_u.__sa_handler) = 1;
  uint64_t v0 = *MEMORY[0x1E4F14960];
  uint64_t Port = CFMachPortGetPort((CFMachPortRef)childReaped);
  if (MEMORY[0x192FA7CE0](v0, Port, 1, &v5, 1)) {
    perror("mach_port_set_attributes");
  }
  CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(0, (CFMachPortRef)childReaped, 0);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
  CFRelease(RunLoopSource);
  v5.__sigaction_u.__sa_handler = (void (__cdecl *)(int))reaper;
  *(void *)&v5.sa_mask = 0xA00000000;
  if (sigaction(20, &v5, 0) == -1) {
    perror("sigaction");
  }
}

CFStringRef childReapedMPCopyDescription()
{
  return CFStringCreateWithFormat(0, 0, @"<SIGCHLD MP>");
}

void childrenReaped()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (initializeLock_initialized != -1) {
    dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
  }
  uint64_t v0 = 0;
  do
  {
    memset(&v16, 0, sizeof(v16));
    int v15 = 0;
    pid_t v1 = wait4(-1, &v15, 1, &v16);
    if (!v1) {
      break;
    }
    int v2 = v1;
    if (v1 == -1)
    {
      if (*__error() != 10) {
        perror("wait4");
      }
      break;
    }
    pthread_mutex_lock(&lock_0);
    uint64_t v3 = activeChildren;
    if (activeChildren)
    {
      if (*(_DWORD *)activeChildren == v2)
      {
        uint64_t v4 = 0;
LABEL_12:
        *(_DWORD *)(v3 + 24) = v15;
        timeval ru_stime = v16.ru_stime;
        *(timeval *)(v3 + 32) = v16.ru_utime;
        long long v8 = *(_OWORD *)&v16.ru_idrss;
        long long v7 = *(_OWORD *)&v16.ru_minflt;
        long long v9 = *(_OWORD *)&v16.ru_maxrss;
        *(timeval *)(v3 + 48) = ru_stime;
        *(_OWORD *)(v3 + 64) = v9;
        long long v10 = *(_OWORD *)&v16.ru_nvcsw;
        long long v12 = *(_OWORD *)&v16.ru_oublock;
        long long v11 = *(_OWORD *)&v16.ru_msgrcv;
        *(_OWORD *)(v3 + 112) = *(_OWORD *)&v16.ru_nswap;
        *(_OWORD *)(v3 + 128) = v12;
        *(_OWORD *)(v3 + 144) = v11;
        *(_OWORD *)(v3 + 160) = v10;
        *(_OWORD *)(v3 + 80) = v8;
        *(_OWORD *)(v3 + 96) = v7;
        if (v4) {
          uint64_t v13 = (uint64_t *)(v4 + 176);
        }
        else {
          uint64_t v13 = &activeChildren;
        }
        *uint64_t v13 = *(void *)(v3 + 176);
        *(void *)(v3 + 176) = v0;
        uint64_t v0 = (unsigned int *)v3;
      }
      else
      {
        uint64_t v5 = activeChildren;
        while (1)
        {
          uint64_t v3 = *(void *)(v5 + 176);
          if (!v3) {
            break;
          }
          uint64_t v4 = v5;
          uint64_t v5 = *(void *)(v5 + 176);
          if (*(_DWORD *)v3 == v2) {
            goto LABEL_12;
          }
        }
      }
    }
    pthread_mutex_unlock(&lock_0);
  }
  while (v2 > 0);
  LODWORD(v16.ru_utime.tv_sec) = 0x80000;
  if (sigprocmask(2, (const sigset_t *)&v16, 0) == -1)
  {
    perror("sigprocmask(SIG_UNBLOCK)");
    if (!v0) {
      return;
    }
  }
  else if (!v0)
  {
    return;
  }
  do
  {
    uint64_t v14 = (unsigned int *)*((void *)v0 + 22);
    (*((void (**)(void, void, unsigned int *, void))v0 + 1))(*v0, v0[6], v0 + 8, *((void *)v0 + 2));
    CFAllocatorDeallocate(0, v0);
    uint64_t v0 = v14;
  }
  while (v14);
}

void reaper()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sigset_t v1 = 0x80000;
  if (sigprocmask(1, &v1, 0) == -1) {
    perror("sigprocmask(SIG_BLOCK)");
  }
  mach_port_t Port = CFMachPortGetPort((CFMachPortRef)childReaped);
  _SC_sendMachMessage(Port, 0);
}

uint64_t _SCDPluginSpawnCommand(uint64_t a1, uint64_t a2, const char *a3, char *const *a4, void (*a5)(posix_spawn_file_actions_t *, posix_spawnattr_t *, uint64_t), uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  posix_spawnattr_t v18 = 0;
  posix_spawn_file_actions_t v19 = 0;
  long long v12 = *_NSGetEnviron();
  pid_t v17 = 0;
  if (initializeLock_initialized != -1) {
    dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
  }
  pthread_mutex_lock(&lock_0);
  if (!childReaped) {
    _SCDPluginExecInit();
  }
  posix_spawnattr_init(&v18);
  posix_spawn_file_actions_init(&v19);
  posix_spawnattr_setflags(&v18, 0x4000);
  if (a5)
  {
    a5(&v19, &v18, a6);
  }
  else
  {
    posix_spawn_file_actions_addopen(&v19, 0, "/dev/null", 2, 0);
    posix_spawn_file_actions_adddup2(&v19, 0, 1);
    posix_spawn_file_actions_adddup2(&v19, 0, 2);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v21 = a3;
    _os_log_impl(&dword_18E26B000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "spawn: %s", buf, 0xCu);
  }
  int v13 = posix_spawn(&v17, a3, &v19, &v18, a4, v12);
  posix_spawnattr_destroy(&v18);
  posix_spawn_file_actions_destroy(&v19);
  if (v13 || !v17)
  {
    int v15 = *__error();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      _SCDPluginSpawnCommand_cold_1(v15);
    }
    *__error() = v15;
    pid_t v17 = -1;
  }
  else if (a1)
  {
    uint64_t v14 = CFAllocatorAllocate(0, 184, 0);
    *uint64_t v14 = 0u;
    v14[1] = 0u;
    *((void *)v14 + 22) = 0;
    uint64_t v14[2] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[10] = 0u;
    *(_DWORD *)uint64_t v14 = v17;
    *((void *)v14 + 1) = a1;
    *((void *)v14 + 2) = a2;
    *((void *)v14 + 22) = activeChildren;
    activeChildren = (uint64_t)v14;
  }
  pthread_mutex_unlock(&lock_0);
  return v17;
}

uint64_t _SCDPluginExecCommand2(uint64_t a1, uint64_t a2, uid_t a3, gid_t a4, const char *a5, char *const *a6, void (*a7)(uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  gid_t v16 = getegid();
  uid_t v17 = geteuid();
  uint64_t v31 = 0;
  if (!a7 && v17 == a3 && v16 == a4)
  {
    return _SCDPluginSpawnCommand(a1, a2, a5, a6, 0, 0);
  }
  else
  {
    if (initializeLock_initialized != -1) {
      dispatch_once(&initializeLock_initialized, &__block_literal_global_2);
    }
    memset(&v32, 0, sizeof(v32));
    pthread_mutex_lock(&lock_0);
    pw_io_name_t name = 0;
    if (!getpwuid_r(a3, &v32, v35, 0x400uLL, &v31) && v31) {
      pw_io_name_t name = v31->pw_name;
    }
    if (!childReaped) {
      _SCDPluginExecInit();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v34 = a5;
      _os_log_impl(&dword_18E26B000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "fork/exec: %s", buf, 0xCu);
    }
    uint64_t v20 = fork();
    uint64_t v21 = v20;
    if (v20 == -1)
    {
      int v23 = *__error();
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        _SCDPluginExecCommand2_cold_1(v23);
      }
      *__error() = v23;
    }
    else
    {
      if (!v20)
      {
        if (a7)
        {
          a7(0, a8);
        }
        else
        {
          int v24 = getdtablesize();
          if (v24 >= 1)
          {
            unsigned int v25 = v24 + 1;
            do
            {
              close(v25 - 2);
              --v25;
            }
            while (v25 > 1);
          }
          int v26 = open("/dev/null", 2, 0);
          if (v26 != -1)
          {
            unsigned int v27 = v26;
            dup2(v26, 0);
            dup2(v27, 1);
            dup2(v27, 2);
            if (v27 >= 3) {
              close(v27);
            }
          }
        }
        gid_t v28 = getegid();
        uid_t v29 = geteuid();
        if (v28 != a4) {
          setgid(a4);
        }
        if (v29 == a3)
        {
          if (v28 != a4 && pw_name) {
            initgroups(pw_name, a4);
          }
        }
        else
        {
          if (pw_name) {
            initgroups(pw_name, a4);
          }
          setuid(a3);
        }
        if (setenv("PATH", "/bin:/sbin:/usr/bin:/usr/sbin", 0) == -1)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            _SCDPluginExecCommand2_cold_2();
          }
          exit(71);
        }
        execv(a5, a6);
        uint64_t v30 = __error();
        _exit(*(unsigned __int8 *)v30);
      }
      if (a7) {
        a7(v20, a8);
      }
      if (a1)
      {
        uint64_t v22 = CFAllocatorAllocate(0, 184, 0);
        *uint64_t v22 = 0u;
        v22[1] = 0u;
        void v22[2] = 0u;
        v22[3] = 0u;
        v22[4] = 0u;
        v22[5] = 0u;
        v22[6] = 0u;
        v22[7] = 0u;
        v22[8] = 0u;
        v22[9] = 0u;
        v22[10] = 0u;
        *(_DWORD *)uint64_t v22 = v21;
        *((void *)v22 + 1) = a1;
        *((void *)v22 + 2) = a2;
        *((void *)v22 + 22) = activeChildren;
        activeChildren = (uint64_t)v22;
      }
    }
    pthread_mutex_unlock(&lock_0);
    return v21;
  }
}

uint64_t _SCDPluginExecCommand(uint64_t a1, uint64_t a2, uid_t a3, gid_t a4, const char *a5, char *const *a6)
{
  return _SCDPluginExecCommand2(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t __initializeLock_block_invoke()
{
  return pthread_mutex_init(&lock_0, 0);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t _SCDynamicStoreSetSessionWatchLimit(uint64_t result)
{
  _sc_store_max = result;
  _sc_store_advise = result;
  return result;
}

os_log_t __log_SCDynamicStore()
{
  os_log_t result = (os_log_t)__log_SCDynamicStore_log;
  if (!__log_SCDynamicStore_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    __log_SCDynamicStore_log = (uint64_t)result;
  }
  return result;
}

uint64_t __SCDynamicStoreReconnectNotifications(uint64_t a1)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 == 5)
  {
    uint64_t v5 = *(NSObject **)(a1 + 136);
    if (v5) {
      dispatch_retain(*(dispatch_object_t *)(a1 + 136));
    }
    CFArrayRef Copy = 0;
  }
  else
  {
    if (v2 == 4 && (CFArrayRef v3 = *(const __CFArray **)(a1 + 56)) != 0) {
      CFArrayRef Copy = CFArrayCreateCopy(0, v3);
    }
    else {
      CFArrayRef Copy = 0;
    }
    uint64_t v5 = 0;
  }
  if (!SCDynamicStoreNotifyCancel(a1))
  {
    uint64_t v6 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v6;
    }
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      gid_t v16 = (char *)v89 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      int v18 = SCError();
      posix_spawn_file_actions_t v19 = SCErrorString(v18);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v19;
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
  }
  if (*(_OWORD *)(a1 + 168) == 0)
  {
    uint64_t v20 = 1;
  }
  else
  {
    uint64_t v20 = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)a1, *(CFArrayRef *)(a1 + 168), *(CFArrayRef *)(a1 + 176));
    if (!v20)
    {
      int v43 = SCError();
      if (v43 != 1102)
      {
        int v44 = v43;
        uint64_t v45 = __log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          uint64_t v45 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v45;
        }
        uint64_t v46 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v45, (os_log_type_t)v46))
        {
          uint64_t v47 = _os_log_pack_size();
          uint64_t v55 = (char *)v89
              - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v56 = _os_log_pack_fill();
          int v57 = SCErrorString(v44);
          *(_DWORD *)uint64_t v56 = 136315138;
          *(void *)(v56 + 4) = v57;
          __SC_log_send(5, (uint64_t)v45, v46, v55);
        }
      }
      goto LABEL_39;
    }
  }
  if (v2 == 5)
  {
    uint64_t v20 = SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)a1, v5);
    if (!v20)
    {
      int v28 = SCError();
      if (v28 != 1102)
      {
        int v29 = v28;
        uint64_t v30 = __log_SCDynamicStore_log;
        if (!__log_SCDynamicStore_log)
        {
          uint64_t v30 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          __log_SCDynamicStore_log = (uint64_t)v30;
        }
        uint64_t v31 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v30, (os_log_type_t)v31))
        {
          uint64_t v32 = _os_log_pack_size();
          uint64_t v40 = (char *)v89
              - ((MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v41 = _os_log_pack_fill();
          uint64_t v42 = SCErrorString(v29);
          *(_DWORD *)uint64_t v41 = 136315138;
          *(void *)(v41 + 4) = v42;
          __SC_log_send(5, (uint64_t)v30, v31, v40);
        }
      }
      uint64_t v20 = 0;
    }
LABEL_44:
    if (v5) {
      dispatch_release(v5);
    }
    goto LABEL_53;
  }
  if (v2 != 4)
  {
    _SCErrorSet(1001);
LABEL_39:
    uint64_t v20 = 0;
    goto LABEL_40;
  }
  CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0, (SCDynamicStoreRef)a1, 0);
  if (RunLoopSource)
  {
    uint64_t v22 = RunLoopSource;
    if (Copy)
    {
      CFIndex Count = CFArrayGetCount(Copy);
      if (Count >= 1)
      {
        CFIndex v24 = Count;
        for (CFIndex i = 0; i < v24; i += 3)
        {
          CFStringRef ValueAtIndex = (__CFRunLoop *)CFArrayGetValueAtIndex(Copy, i + 1);
          CFStringRef v27 = (const __CFString *)CFArrayGetValueAtIndex(Copy, i + 2);
          CFRunLoopAddSource(ValueAtIndex, v22, v27);
        }
      }
    }
    CFRelease(v22);
LABEL_40:
    if (v2 != 5)
    {
      if (v2 != 4 || !Copy) {
        goto LABEL_53;
      }
LABEL_52:
      CFRelease(Copy);
      goto LABEL_53;
    }
    goto LABEL_44;
  }
  int v58 = SCError();
  if (v58 != 1102)
  {
    int v59 = v58;
    uint64_t v60 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v60 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v60;
    }
    uint64_t v61 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v60, (os_log_type_t)v61))
    {
      uint64_t v62 = _os_log_pack_size();
      uint64_t v70 = (char *)v89 - ((MEMORY[0x1F4188790](v62, v63, v64, v65, v66, v67, v68, v69) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v71 = _os_log_pack_fill();
      CFTypeID v72 = SCErrorString(v59);
      *(_DWORD *)uint64_t v71 = 136315138;
      *(void *)(v71 + 4) = v72;
      __SC_log_send(5, (uint64_t)v60, v61, v70);
    }
  }
  uint64_t v20 = 0;
  if (Copy) {
    goto LABEL_52;
  }
LABEL_53:
  if (!v20)
  {
    int v73 = SCError();
    CFTypeID v74 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      CFTypeID v74 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v74;
    }
    uint64_t v75 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v74, (os_log_type_t)v75))
    {
      uint64_t v76 = _os_log_pack_size();
      uint64_t v84 = (char *)v89 - ((MEMORY[0x1F4188790](v76, v77, v78, v79, v80, v81, v82, v83) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v85 = _os_log_pack_fill();
      uint64_t v86 = "failed";
      uint64_t v87 = *((void *)&notifyType + v2);
      if (v73 == 1102) {
        uint64_t v86 = "shutdown";
      }
      *(_DWORD *)uint64_t v85 = 136315394;
      *(void *)(v85 + 4) = v86;
      *(_WORD *)(v85 + 12) = 2080;
      *(void *)(v85 + 14) = v87;
      __SC_log_send(5, (uint64_t)v74, v75, v84);
    }
  }
  pushDisconnect(a1);
  return v20;
}

uint64_t pushDisconnect(uint64_t result)
{
  uint64_t v1 = result;
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(result + 152);
  if (v2)
  {
    uint64_t v4 = *(void *)(result + 88);
    CFArrayRef v3 = *(uint64_t (**)(void))(result + 96);
    if (v3)
    {
      uint64_t v4 = v3(*(void *)(result + 88));
      uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 104);
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v6 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v6;
    }
    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      gid_t v16 = (char *)v17 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v6, v7, v16);
    }
    os_log_t result = v2(v1, v4);
    if (v5) {
      return v5(v4);
    }
  }
  else
  {
    *(unsigned char *)(result + 160) = 1;
  }
  return result;
}

uint64_t SCDynamicStoreSetDisconnectCallBack(void *cf, uint64_t a2)
{
  if (__SCDynamicStoreInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCDynamicStoreInitialize_initialized, &__block_literal_global_61);
    if (!cf) {
      goto LABEL_6;
    }
  }
  uint64_t v4 = __kSCDynamicStoreTypeID;
  if (CFGetTypeID(cf) == v4)
  {
    cf[19] = a2;
    return 1;
  }
LABEL_6:
  _SCErrorSet(2001);
  return 0;
}

void addSessionReference(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = *(const __CFString **)(a1 + 24);
  if (v2)
  {
    int valuePtr = 0;
    value = 0;
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v2);
    CFArrayRef v6 = *(const __CFArray **)(a1 + 168);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 168), 0);
        CFStringAppendFormat(MutableCopy, 0, @":k[0/%ld]=%@", v8, ValueAtIndex);
      }
    }
    CFArrayRef v10 = *(const __CFArray **)(a1 + 176);
    if (v10)
    {
      CFIndex v11 = CFArrayGetCount(v10);
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        uint64_t v13 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
        CFStringAppendFormat(MutableCopy, 0, @":p[0/%ld]=%@", v12, v13);
      }
    }
    if (CFDictionaryGetValueIfPresent(a2, MutableCopy, (const void **)&value)
      && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
    {
      int v14 = valuePtr + 1;
    }
    else
    {
      int v14 = 1;
    }
    int valuePtr = v14;
    value = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(a2, MutableCopy, value);
    CFRelease(value);
    CFRelease(MutableCopy);
  }
}

void logSessionReference(uint64_t a1, uint64_t a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __log_SCDynamicStore_log;
  if (!__log_SCDynamicStore_log)
  {
    uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    __log_SCDynamicStore_log = (uint64_t)v4;
  }
  uint64_t v5 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v4, (os_log_type_t)v5))
  {
    _os_log_pack_size();
    CFArrayRef v6 = (char *)v8 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 138412546;
    *(void *)(v7 + 4) = a2;
    *(_WORD *)(v7 + 12) = 2112;
    *(void *)(v7 + 14) = a1;
    __SC_log_send(3, (uint64_t)v4, v5, v6);
  }
}

BOOL get_sysctl_val(const char *a1, _DWORD *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v34 = 0;
  size_t v33 = 4;
  if (sysctlbyname(a1, &v34, &v33, 0, 0))
  {
    uint64_t v4 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v4;
    }
    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v4, (os_log_type_t)v5);
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)&v32 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = __error();
      int v18 = strerror(*v17);
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = a1;
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v18;
      __SC_log_send(5, (uint64_t)v4, v5, v15);
      return 0;
    }
  }
  else
  {
    *a2 = v34;
    posix_spawn_file_actions_t v19 = __log_SCDynamicStore_log;
    if (!__log_SCDynamicStore_log)
    {
      posix_spawn_file_actions_t v19 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
      __log_SCDynamicStore_log = (uint64_t)v19;
    }
    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      int v29 = (char *)&v32 - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      int v31 = v34;
      *(_DWORD *)uint64_t v30 = 136315394;
      *(void *)(v30 + 4) = a1;
      *(_WORD *)(v30 + 12) = 1024;
      *(_DWORD *)(v30 + 14) = v31;
      __SC_log_send(6, (uint64_t)v19, v20, v29);
    }
    return 1;
  }
  return result;
}

void childForkHandler()
{
  _sc_server = 0;
}

__CFString *__SCDynamicStoreCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCDynamicStore %p [%p]> {", a1, v2);
  if (*(_DWORD *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0, @"server port = 0x%x", *(unsigned int *)(a1 + 40));
  }
  else {
    CFStringAppendFormat(Mutable, 0, @"server not (no longer) available", v6);
  }
  if (*(void *)(a1 + 152)) {
    CFStringAppendFormat(Mutable, 0, @", disconnect = %p", *(void *)(a1 + 152));
  }
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      CFStringAppendFormat(Mutable, 0, @", waiting for a notification", v7);
      break;
    case 2:
      CFStringAppendFormat(Mutable, 0, @", mach port notifications", v7);
      break;
    case 3:
      CFStringAppendFormat(Mutable, 0, @", FD notifications", v7);
      break;
    case 4:
      CFStringAppendFormat(Mutable, 0, @", runloop notifications");
      CFStringAppendFormat(Mutable, 0, @" {callout = %p", *(void *)(a1 + 72));
      CFStringAppendFormat(Mutable, 0, @", info = %p", *(void *)(a1 + 88));
      CFStringAppendFormat(Mutable, 0, @", rls = %p", *(void *)(a1 + 64));
      CFStringAppendFormat(Mutable, 0, @", notify rls = %@", *(void *)(a1 + 128));
      goto LABEL_16;
    case 5:
      CFStringAppendFormat(Mutable, 0, @", dispatch notifications");
      CFStringAppendFormat(Mutable, 0, @" {callout = %p", *(void *)(a1 + 72));
      CFStringAppendFormat(Mutable, 0, @", info = %p", *(void *)(a1 + 88));
      CFStringAppendFormat(Mutable, 0, @", queue = %p", *(void *)(a1 + 136));
      CFStringAppendFormat(Mutable, 0, @", source = %p", *(void *)(a1 + 144));
LABEL_16:
      CFStringAppendFormat(Mutable, 0, @"}", v8);
      break;
    default:
      if (*(void *)(a1 + 72)) {
        uint64_t v4 = " (yet)";
      }
      else {
        uint64_t v4 = "";
      }
      CFStringAppendFormat(Mutable, 0, @", notification delivery not requested%s", v4);
      break;
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

CFArrayRef SCDynamicStoreCopyKeyList(SCDynamicStoreRef store, CFStringRef pattern)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  v13[0] = (uint64_t)store;
  uint64_t v11 = 0;
  CFTypeRef cf = 0;
  bytes = 0;
  vm_size_t v10 = 0;
  CFArrayRef v7 = 0;
  CFIndex length = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v13, 1)) {
    return 0;
  }
  if (_SCSerializeString(pattern, (CFDataRef *)&cf, (vm_address_t *)&v11, &v10))
  {
    uint64_t v3 = v13[0];
    do
      uint64_t v4 = configlist(*(_DWORD *)(v3 + 40), v11, v10, 1u, &bytes, (unsigned int *)&length + 1, &length);
    while (__SCDynamicStoreCheckRetryAndHandleError(v13[0], v4, &length, (uint64_t)"SCDynamicStoreCopyKeyList configlist()"));
    CFRelease(cf);
    int v5 = length;
    if (length)
    {
      if (bytes)
      {
        MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], bytes, HIDWORD(length));
        int v5 = length;
      }
      goto LABEL_11;
    }
    if (_SCUnserialize((CFPropertyListRef *)&v7, 0, bytes, HIDWORD(length))) {
      return v7;
    }
  }
  int v5 = 1001;
LABEL_11:
  _SCErrorSet(v5);
  return 0;
}

Boolean SCDynamicStoreAddTemporaryValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  v17[0] = (uint64_t)store;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  vm_size_t v14 = 0;
  vm_size_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v17, 0)) {
    return 0;
  }
  if (!_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v15, &v14)) {
    goto LABEL_8;
  }
  if (!_SCSerialize(value, (CFDataRef *)&v13, (vm_address_t *)&v12, &v11))
  {
    CFRelease(cf);
LABEL_8:
    int v8 = 1001;
LABEL_9:
    _SCErrorSet(v8);
    return 0;
  }
  do
    uint64_t v6 = configadd_s(*((_DWORD *)store + 10), v15, v14, v12, v11, (int *)&v10 + 1, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError(v17[0], v6, &v10, (uint64_t)"SCDynamicStoreAddTemporaryValue configadd_s()"));
  CFRelease(cf);
  CFRelease(v13);
  Boolean v7 = 1;
  int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
  LODWORD(v10) = v8;
  if (v8) {
    goto LABEL_9;
  }
  return v7;
}

Boolean SCDynamicStoreAddValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  CFDataRef v16 = 0;
  v17[0] = (uint64_t)store;
  vm_size_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = 0;
  vm_size_t v11 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v17, 1)) {
    return 0;
  }
  if (!_SCSerializeString(key, &v16, (vm_address_t *)&v15, &v14)) {
    goto LABEL_9;
  }
  if (!_SCSerialize(value, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
  {
    CFRelease(v16);
LABEL_9:
    int v8 = 1001;
LABEL_10:
    _SCErrorSet(v8);
    return 0;
  }
  uint64_t v5 = v17[0];
  do
    uint64_t v6 = configadd(*(_DWORD *)(v5 + 40), v15, v14, v12, v11, (int *)&v10 + 1, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError(v17[0], v6, &v10, (uint64_t)"SCDynamicStoreAddValue configadd()"));
  CFRelease(v16);
  CFRelease(cf);
  Boolean v7 = 1;
  int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
  LODWORD(v10) = v8;
  if (v8) {
    goto LABEL_10;
  }
  return v7;
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  CFDataRef v18 = 0;
  v19[0] = (uint64_t)store;
  uint64_t v17 = 0;
  CFTypeRef v15 = 0;
  vm_size_t v16 = 0;
  vm_size_t v13 = 0;
  uint64_t v14 = 0;
  memset(length, 0, sizeof(length));
  CFTypeRef cf = 0;
  int v10 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v19, 1)) {
    return 0;
  }
  if (keys && !_SCSerialize(keys, &v18, (vm_address_t *)&v17, &v16))
  {
LABEL_15:
    _SCErrorSet(1001);
    return 0;
  }
  if (patterns && !_SCSerialize(patterns, (CFDataRef *)&v15, (vm_address_t *)&v14, &v13))
  {
    if (v18) {
      CFRelease(v18);
    }
    goto LABEL_15;
  }
  uint64_t v5 = v19[0];
  do
    uint64_t v6 = configget_m(*(_DWORD *)(v5 + 40), v17, v16, v14, v13, &length[1], length, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError(v19[0], v6, &v10, (uint64_t)"SCDynamicStoreCopyMultiple configget_m()"));
  int v7 = v10;
  if (v10)
  {
    if (*(void *)&length[1])
    {
      MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], *(void *)&length[1], length[0]);
      int v7 = v10;
    }
    goto LABEL_18;
  }
  if (!_SCUnserialize(&cf, 0, *(UInt8 **)&length[1], length[0]))
  {
    int v7 = 1001;
LABEL_18:
    _SCErrorSet(v7);
    CFDictionaryRef v8 = 0;
    goto LABEL_19;
  }
  CFDictionaryRef v8 = _SCUnserializeMultiple((const __CFDictionary *)cf);
  CFRelease(cf);
LABEL_19:
  if (v18) {
    CFRelease(v18);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v8;
}

Boolean SCDynamicStoreRemoveValue(SCDynamicStoreRef store, CFStringRef key)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v14[0] = (uint64_t)store;
  vm_size_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v10 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v14, 1)) {
    return 0;
  }
  uint64_t v3 = v14[0];
  if (!*(unsigned char *)(v14[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
    {
      do
        uint64_t v7 = configremove(*(_DWORD *)(v3 + 40), v12, v11, (int *)&v10);
      while (__SCDynamicStoreCheckRetryAndHandleError(v14[0], v7, &v10, (uint64_t)"SCDynamicStoreRemoveValue configremove()"));
      CFRelease(cf);
      Boolean v6 = 1;
      int v8 = __SCDynamicStoreMapInternalStatus(v10, 1);
      unsigned int v10 = v8;
      if (!v8) {
        return v6;
      }
    }
    else
    {
      int v8 = 1001;
    }
    _SCErrorSet(v8);
    return 0;
  }
  uint64_t v4 = *(__CFDictionary **)(v14[0] + 216);
  if (v4) {
    CFDictionaryRemoveValue(v4, key);
  }
  CFArrayRef Mutable = *(const __CFArray **)(v3 + 224);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v3 + 224) = Mutable;
  }
  v15.CFIndex length = CFArrayGetCount(Mutable);
  v15.io_name_t location = 0;
  if (!CFArrayContainsValue(Mutable, v15, key)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 224), key);
  }
  return 1;
}

Boolean SCDynamicStoreNotifyValue(SCDynamicStoreRef store, CFStringRef key)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v13[0] = (uint64_t)store;
  vm_size_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v9 = 0;
  if (!__SCDynamicStoreNormalize((uint64_t)v13, 1)) {
    return 0;
  }
  uint64_t v3 = v13[0];
  if (!*(unsigned char *)(v13[0] + 200))
  {
    if (_SCSerializeString(key, (CFDataRef *)&cf, (vm_address_t *)&v11, &v10))
    {
      do
        uint64_t v6 = confignotify(*(_DWORD *)(v3 + 40), v11, v10, (int *)&v9);
      while (__SCDynamicStoreCheckRetryAndHandleError(v13[0], v6, &v9, (uint64_t)"SCDynamicStoreNotifyValue confignotify()"));
      CFRelease(cf);
      Boolean v5 = 1;
      int v7 = __SCDynamicStoreMapInternalStatus(v9, 1);
      unsigned int v9 = v7;
      if (!v7) {
        return v5;
      }
    }
    else
    {
      int v7 = 1001;
    }
    _SCErrorSet(v7);
    return 0;
  }
  CFArrayRef Mutable = *(const __CFArray **)(v13[0] + 232);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    *(void *)(v3 + 232) = Mutable;
  }
  v14.CFIndex length = CFArrayGetCount(Mutable);
  v14.io_name_t location = 0;
  if (!CFArrayContainsValue(Mutable, v14, key)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(v3 + 232), key);
  }
  return 1;
}

uint64_t SCDynamicStoreRemoveWatchedKey(uint64_t a1, const __CFString *a2, int a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v14[0] = a1;
  vm_size_t v11 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v14, 0);
  if (!result) {
    return result;
  }
  if (!_SCSerializeString(a2, (CFDataRef *)&cf, (vm_address_t *)&v12, &v11))
  {
    int v8 = 1001;
LABEL_8:
    _SCErrorSet(v8);
    return 0;
  }
  do
    uint64_t v7 = notifyremove(*(_DWORD *)(a1 + 40), v12, v11, a3, &v10);
  while (__SCDynamicStoreCheckRetryAndHandleError(v14[0], v7, &v10, (uint64_t)"SCDynamicStoreRemoveWatchedKey notifyremove()"));
  CFRelease(cf);
  int v8 = v10;
  if (v10) {
    goto LABEL_8;
  }
  if (a3) {
    CFArrayRef v9 = *(const __CFArray **)(a1 + 176);
  }
  else {
    CFArrayRef v9 = *(const __CFArray **)(a1 + 168);
  }
  removeKey(v9, a2);
  return 1;
}

void removeKey(const __CFArray *a1, const void *a2)
{
  if (a1)
  {
    v6.CFIndex length = CFArrayGetCount(a1);
    v6.io_name_t location = 0;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(a1, v6, a2);
    CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  }
}

uint64_t SCDynamicStoreNotifyWait(mach_port_context_t a1)
{
  guard[1] = *MEMORY[0x1E4F143B8];
  guard[0] = a1;
  int v8 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)guard, 0);
  if (result)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      int v4 = 2003;
      goto LABEL_4;
    }
    uint64_t result = __SCDynamicStoreAddNotificationPort(guard[0], v3);
    if (result)
    {
      mach_port_name_t v5 = result;
      *(_DWORD *)(a1 + 48) = 1;
      int v6 = waitForMachMessage(result);
      *(_DWORD *)(a1 + 48) = 0;
      if (v6 != 70)
      {
        if (v6 != -1)
        {
          uint64_t v7 = notifycancel(*(_DWORD *)(a1 + 40), (mach_port_t *)&v8);
          if (__SCDynamicStoreCheckRetryAndHandleError(guard[0], v7, &v8, (uint64_t)"SCDynamicStoreNotifyWait notifycancel()"))int v8 = 0; {
          __SCDynamicStoreRemoveNotificationPort(guard[0], v5);
          }
          int v4 = v8;
          if (!v8) {
            return 1;
          }
          goto LABEL_4;
        }
        mach_port_mod_refs(*MEMORY[0x1E4F14960], v5, 1u, -1);
      }
      int v4 = 2002;
LABEL_4:
      _SCErrorSet(v4);
      return 0;
    }
  }
  return result;
}

uint64_t waitForMachMessage(mach_port_name_t rcv_name)
{
  mach_msg_return_t v1;
  mach_error_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned char msg[32];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  int v22;
  uint64_t v23;

  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  uint64_t v20 = 0u;
  uint64_t v21 = 0u;
  CFDataRef v18 = 0u;
  posix_spawn_file_actions_t v19 = 0u;
  memset(msg, 0, sizeof(msg));
  uint64_t v1 = mach_msg((mach_msg_header_t *)msg, 2, 0, 0x64u, rcv_name, 0, 0);
  if (!v1) {
    return *(unsigned int *)&msg[20];
  }
  CFAllocatorRef v2 = v1;
  __n128 v3 = __log_SCDynamicStore();
  int v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
    mach_port_name_t v5 = _os_log_pack_size();
    vm_size_t v13 = &msg[-((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    CFRange v14 = _os_log_pack_fill();
    CFRange v15 = mach_error_string(v2);
    *(_DWORD *)CFRange v14 = 136315138;
    *(void *)(v14 + 4) = v15;
    __SC_log_send(5, (uint64_t)v3, v4, v13);
  }
  return 0xFFFFFFFFLL;
}

uint64_t __SCDynamicStoreRemoveNotificationPort(mach_port_context_t guard, mach_port_name_t a2)
{
  ipc_space_t v3 = *MEMORY[0x1E4F14960];

  return mach_port_destruct(v3, a2, 0, guard);
}

__CFString *rlsCopyDescription(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCDynamicStore RLS> {");
  CFStringAppendFormat(Mutable, 0, @"store = %p", a1);
  if (*(_DWORD *)(a1 + 48) == 4)
  {
    CFStringAppendFormat(Mutable, 0, @", callout = %p", *(void *)(a1 + 72));
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      int v4 = *(uint64_t (**)(void))(a1 + 112);
      if (v4)
      {
        mach_port_name_t v5 = (const void *)v4();
        if (v5)
        {
LABEL_8:
          CFStringAppendFormat(Mutable, 0, @", uint64_t context = %@", v5);
          CFRelease(v5);
          goto LABEL_9;
        }
        uint64_t v3 = *(void *)(a1 + 88);
      }
    }
    mach_port_name_t v5 = CFStringCreateWithFormat(0, 0, @"<SCDynamicStore context %p>", v3);
    if (!v5) {
      mach_port_name_t v5 = CFRetain(@"<no description>");
    }
    goto LABEL_8;
  }
LABEL_9:
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

void rlsCancel(mach_port_context_t a1, __CFRunLoop *a2, const __CFString *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 128) && _SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 56), 0))
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 56)))
    {
      if (!_SC_isScheduled((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 56)))
      {
        int v6 = *(__CFRunLoopSource **)(a1 + 128);
        CFRunLoopRemoveSource(a2, v6, a3);
      }
      return;
    }
    CFRunLoopRemoveSource(a2, *(CFRunLoopSourceRef *)(a1 + 128), a3);
  }
  mach_port_t v15 = 0;
  uint64_t v7 = *(__CFMachPort **)(a1 + 120);
  if (v7) {
    mach_port_name_t Port = CFMachPortGetPort(v7);
  }
  else {
    mach_port_name_t Port = 0;
  }
  CFArrayRef v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
  int v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 56) = 0;
  }
  vm_size_t v11 = *(__CFRunLoopSource **)(a1 + 128);
  if (v11)
  {
    CFRunLoopSourceInvalidate(v11);
    CFRelease(*(CFTypeRef *)(a1 + 128));
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v12 = *(__CFMachPort **)(a1 + 120);
  if (v12)
  {
    CFMachPortInvalidate(v12);
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(void *)(a1 + 120) = 0;
  }
  mach_port_t v13 = *(_DWORD *)(a1 + 40);
  if (v13)
  {
    uint64_t v14 = notifycancel(v13, &v15);
    if (__SCDynamicStoreCheckRetryAndHandleError(a1, v14, &v15, (uint64_t)"rlsCancel notifycancel()")) {
      mach_port_t v15 = 0;
    }
  }
  if (Port) {
    mach_port_destruct(*MEMORY[0x1E4F14960], Port, 0, a1);
  }
  if (!v15) {
    *(_DWORD *)(a1 + 48) = 0;
  }
}

void rlsPerform(uint64_t a1)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = SCDynamicStoreCopyNotifiedKeys((SCDynamicStoreRef)a1);
  CFArrayRef v3 = v2;
  if (*(unsigned char *)(a1 + 160))
  {
    *(unsigned char *)(a1 + 160) = 0;
    if (!v2) {
      CFArrayRef v3 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
    }
  }
  else
  {
    if (!v2) {
      return;
    }
    if (!CFArrayGetCount(v2)) {
      goto LABEL_21;
    }
  }
  int v4 = *(void (**)(uint64_t, CFArrayRef, uint64_t))(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 88);
  mach_port_name_t v5 = *(uint64_t (**)(void))(a1 + 96);
  if (v5)
  {
    uint64_t v6 = v5(*(void *)(a1 + 88));
    uint64_t v7 = *(void (**)(uint64_t))(a1 + 104);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 48);
  CFArrayRef v9 = __log_SCDynamicStore();
  uint64_t v10 = _SC_syslog_os_log_mapping(7);
  BOOL v11 = __SC_log_enabled(7, v9, (os_log_type_t)v10);
  if (!v8 || !v4)
  {
    if (!v11) {
      goto LABEL_18;
    }
    uint64_t v34 = _os_log_pack_size();
    int v31 = (char *)v42 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    uint64_t v32 = (uint64_t)v9;
    uint64_t v33 = v10;
    goto LABEL_17;
  }
  if (v11)
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v20 = (char *)v42 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v9, v10, v20);
  }
  v4(a1, v3, v6);
  uint64_t v21 = __log_SCDynamicStore();
  uint64_t v22 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v21, (os_log_type_t)v22))
  {
    uint64_t v23 = _os_log_pack_size();
    int v31 = (char *)v42 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    uint64_t v32 = (uint64_t)v21;
    uint64_t v33 = v22;
LABEL_17:
    __SC_log_send(7, v32, v33, v31);
  }
LABEL_18:
  if (v7) {
    v7(v6);
  }
  if (v3) {
LABEL_21:
  }
    CFRelease(v3);
}

void __SCDynamicStoreSetDispatchQueue_block_invoke(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  int v16;
  const void *v17;
  CFTypeID TypeID;
  NSObject *v19;
  uint64_t v20;
  void block[6];
  int v23;
  unsigned char msg[32];
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  unsigned char v29[28];
  uint64_t v30;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v26 = 0u;
  uint64_t v27 = 0u;
  uint64_t v25 = 0u;
  memset(msg, 0, sizeof(msg));
  CFArrayRef v2 = mach_msg((mach_msg_header_t *)msg, 2, 0, 0x7Cu, *(_DWORD *)(a1 + 56), 0, 0);
  if (v2)
  {
    CFArrayRef v3 = v2;
    int v4 = __log_SCDynamicStore();
    mach_port_name_t v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)&block[-1] - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v15 = 67109120;
      v15[1] = v3;
      __SC_log_send(5, (uint64_t)v4, v5, v14);
    }
  }
  else
  {
    uint64_t v16 = *(_DWORD *)&msg[20];
    mach_msg_destroy((mach_msg_header_t *)msg);
    uint64_t v17 = *(const void **)(a1 + 32);
    CFTypeID TypeID = SCDynamicStoreGetTypeID();
    if (!v17 || CFGetTypeID(v17) != TypeID) {
      __SCDynamicStoreSetDispatchQueue_block_invoke_cold_1();
    }
    CFRetain(*(CFTypeRef *)(a1 + 32));
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SCDynamicStoreSetDispatchQueue_block_invoke_2;
    block[3] = &__block_descriptor_tmp_4;
    uint64_t v23 = v16;
    uint64_t v19 = *(NSObject **)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    block[4] = *(void *)(a1 + 32);
    void block[5] = v20;
    dispatch_async(v19, block);
  }
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_2(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 70) {
    __SCDynamicStoreReconnectNotifications(*(void *)(a1 + 32));
  }
  rlsPerform(*(void *)(a1 + 40));
  CFArrayRef v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

CFStringRef notifyMPCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<SCDynamicStore notification MP> {store = %p}", a1);
}

void rlsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a2 + 20) == 70) {
    __SCDynamicStoreReconnectNotifications(a4);
  }
  mach_port_name_t v5 = *(__CFRunLoopSource **)(a4 + 64);
  if (v5)
  {
    CFRunLoopSourceSignal(v5);
  }
}

uint64_t SCDynamicStoreNotifyFileDescriptor(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = a1;
  *(void *)uint64_t v27 = -1;
  uint64_t v25 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)&v26, 0);
  if (result)
  {
    if (*(_DWORD *)(a1 + 48))
    {
      _SCErrorSet(2003);
      return 0;
    }
    if (pipe(v27) == -1)
    {
      CFArrayRef v9 = __error();
      _SCErrorSet(*v9);
      uint64_t v10 = __log_SCDynamicStore();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
      {
LABEL_12:
        uint64_t v13 = _os_log_pack_size();
        uint64_t v21 = (char *)&v25 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = __error();
        uint64_t v24 = strerror(*v23);
        *(_DWORD *)uint64_t v22 = 136315138;
        *(void *)(v22 + 4) = v24;
        __SC_log_send(3, (uint64_t)v10, v11, v21);
      }
    }
    else
    {
      HIDWORD(v25) = 0;
      if ((fileport_makeport() & 0x80000000) == 0)
      {
        do
          uint64_t v7 = notifyviafd(*(_DWORD *)(a1 + 40), SHIDWORD(v25), a2, (int *)&v25);
        while (__SCDynamicStoreCheckRetryAndHandleError(v26, v7, &v25, (uint64_t)"SCDynamicStoreNotifyFileDescriptor notifyviafd()"));
        if (v7)
        {
          int v8 = v7;
        }
        else
        {
          int v8 = v25;
          if (!v25)
          {
            close(v27[1]);
            *a3 = v27[0];
            *(_DWORD *)(a1 + 48) = 3;
            return 1;
          }
        }
        _SCErrorSet(v8);
        goto LABEL_15;
      }
      uint64_t v12 = __error();
      _SCErrorSet(*v12);
      uint64_t v10 = __log_SCDynamicStore();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11)) {
        goto LABEL_12;
      }
    }
LABEL_15:
    if (v27[0] != -1) {
      close(v27[0]);
    }
    if (v27[1] != -1) {
      close(v27[1]);
    }
    return 0;
  }
  return result;
}

_xpc_connection_s *CategoryManagerConnectionCreate(dispatch_queue_t targetq, uint64_t a2)
{
  handler[6] = *MEMORY[0x1E4F143B8];
  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.NetworkCategoryManager", targetq, 2uLL);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __CategoryManagerConnectionCreate_block_invoke;
  handler[3] = &unk_1E55BB470;
  handler[4] = a2;
  handler[5] = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_activate(mach_service);
  return mach_service;
}

uint64_t __CategoryManagerConnectionCreate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = 0;
  CategoryManagerHandleResponse(a2, 1, (int *)&v4);
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 40), v4);
  }
  return result;
}

size_t CategoryManagerHandleResponse(void *a1, int a2, int *a3)
{
  v84[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x192FA8830]();
  if (v6 == MEMORY[0x1E4F14590])
  {
    if (a2)
    {
      size_t result = xpc_dictionary_get_count(a1);
      if (!result)
      {
        int v48 = 3;
        goto LABEL_31;
      }
      uint64_t v22 = _SC_LOG_DEFAULT();
      uint64_t v23 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v22, (os_log_type_t)v23);
      if (result)
      {
        uint64_t v24 = _os_log_pack_size();
        uint64_t v32 = (char *)v84 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v33 = 136315138;
        *(void *)(v33 + 4) = "CategoryManagerHandleResponse";
        uint64_t v21 = (uint64_t)v22;
        uint64_t v34 = v23;
        uint64_t v35 = v32;
LABEL_28:
        __SC_log_send(5, v21, v34, v35);
        int v48 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      if (a1 == (void *)MEMORY[0x1E4F14528])
      {
        int int64 = 2;
      }
      else
      {
        int int64 = xpc_dictionary_get_int64(a1, "Error");
        if (!int64)
        {
          int v48 = 0;
          size_t result = 1;
          goto LABEL_31;
        }
      }
      uint64_t v37 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v37, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v74 = _os_log_pack_size();
        uint64_t v19 = (char *)v84 - ((MEMORY[0x1F4188790](v74, v75, v76, v77, v78, v79, v80, v81) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v82 = _os_log_pack_fill();
        uint64_t v83 = strerror(int64);
        *(_DWORD *)uint64_t v82 = 136315650;
        *(void *)(v82 + 4) = "CategoryManagerHandleResponse";
        *(_WORD *)(v82 + 12) = 2080;
        *(void *)(v82 + 14) = v83;
        *(_WORD *)(v82 + 22) = 1024;
        *(_DWORD *)(v82 + 24) = int64;
        goto LABEL_26;
      }
    }
LABEL_30:
    int v48 = 0;
    goto LABEL_31;
  }
  uint64_t v7 = v6;
  if (v6 != MEMORY[0x1E4F145A8])
  {
    int v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
    if (result)
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v19 = (char *)v84 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)(v20 + 4) = "CategoryManagerHandleResponse";
      *(_WORD *)(v20 + 12) = 2048;
      *(void *)(v20 + 14) = v7;
      uint64_t v21 = (uint64_t)v8;
LABEL_27:
      uint64_t v34 = v9;
      uint64_t v35 = v19;
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  if (a1 == (void *)MEMORY[0x1E4F14520])
  {
    uint64_t v49 = _SC_LOG_DEFAULT();
    uint64_t v50 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v49, (os_log_type_t)v50);
    if (result)
    {
      uint64_t v51 = _os_log_pack_size();
      int v59 = (char *)v84 - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v60 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v60 = 136315138;
      *(void *)(v60 + 4) = "CategoryManagerHandleResponse";
      __SC_log_send(5, (uint64_t)v49, v50, v59);
      int v48 = 2;
LABEL_29:
      size_t result = 0;
      goto LABEL_31;
    }
    int v48 = 2;
  }
  else
  {
    if (a1 != (void *)MEMORY[0x1E4F14528])
    {
      string = xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x1E4F14530]);
      uint64_t v37 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      size_t result = __SC_log_enabled(5, v37, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v38 = _os_log_pack_size();
        uint64_t v19 = (char *)v84 - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v46 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v46 = 136315394;
        *(void *)(v46 + 4) = "CategoryManagerHandleResponse";
        *(_WORD *)(v46 + 12) = 2080;
        *(void *)(v46 + 14) = string;
LABEL_26:
        uint64_t v21 = (uint64_t)v37;
        goto LABEL_27;
      }
      goto LABEL_30;
    }
    uint64_t v61 = _SC_LOG_DEFAULT();
    uint64_t v62 = _SC_syslog_os_log_mapping(5);
    size_t result = __SC_log_enabled(5, v61, (os_log_type_t)v62);
    if (result)
    {
      uint64_t v63 = _os_log_pack_size();
      uint64_t v71 = (char *)v84 - ((MEMORY[0x1F4188790](v63, v64, v65, v66, v67, v68, v69, v70) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v72 = _os_log_pack_fill();
      int v73 = "[async]";
      if (!a2) {
        int v73 = "";
      }
      *(_DWORD *)uint64_t v72 = 136315394;
      *(void *)(v72 + 4) = "CategoryManagerHandleResponse";
      *(_WORD *)(v72 + 12) = 2080;
      *(void *)(v72 + 14) = v73;
      __SC_log_send(5, (uint64_t)v61, v62, v71);
      int v48 = 1;
      goto LABEL_29;
    }
    int v48 = 1;
  }
LABEL_31:
  if (a3) {
    *a3 = v48;
  }
  return result;
}

uint64_t CategoryManagerConnectionRegister(_xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, unsigned int a4)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v5 = register_request_create(a2, a3, a4);
  xpc_object_t v6 = CategoryManagerSendRequest(a1, v5);
  xpc_release(v5);
  if (v6)
  {
    if (v6 == (xpc_object_t)MEMORY[0x1E4F14528])
    {
      int64_t int64 = 2;
    }
    else
    {
      int64_t int64 = xpc_dictionary_get_int64(v6, "Error");
      if (!int64)
      {
LABEL_11:
        xpc_release(v6);
        return int64;
      }
    }
    uint64_t v20 = _SC_LOG_DEFAULT();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
      uint64_t v22 = _os_log_pack_size();
      uint64_t v30 = (char *)v34 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      uint64_t v32 = strerror(int64);
      *(_DWORD *)uint64_t v31 = 136315650;
      *(void *)(v31 + 4) = "CategoryManagerConnectionRegister";
      *(_WORD *)(v31 + 12) = 2080;
      *(void *)(v31 + 14) = v32;
      *(_WORD *)(v31 + 22) = 1024;
      *(_DWORD *)(v31 + 24) = int64;
      __SC_log_send(5, (uint64_t)v20, v21, v30);
    }
    goto LABEL_11;
  }
  int v8 = _SC_LOG_DEFAULT();
  uint64_t v9 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v18 = (char *)v34 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)(v19 + 4) = "CategoryManagerConnectionRegister";
    __SC_log_send(5, (uint64_t)v8, v9, v18);
  }
  return 22;
}

xpc_object_t register_request_create(const __CFString *a1, const __CFString *a2, unsigned int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "Type", 1);
  uint64_t v7 = getprogname();
  if (v7) {
    xpc_dictionary_set_string(v6, "ProcessName", v7);
  }
  if (!a1)
  {
    xpc_dictionary_set_string(v6, "Category", 0);
    if (!a2) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  int v8 = _SC_cfstring_to_cstring(a1, 0, 0, 0x8000100u);
  xpc_dictionary_set_string(v6, "Category", (const char *)v8);
  if (v8) {
    CFAllocatorDeallocate(0, v8);
  }
  if (a2)
  {
LABEL_9:
    uint64_t v9 = _SC_cfstring_to_cstring(a2, 0, 0, 0x8000100u);
    xpc_dictionary_set_string(v6, "InterfaceName", (const char *)v9);
    if (v9) {
      CFAllocatorDeallocate(0, v9);
    }
  }
LABEL_11:
  xpc_dictionary_set_int64(v6, "Flags", a3);
  return v6;
}

xpc_object_t CategoryManagerSendRequest(_xpc_connection_s *a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  HIDWORD(v19) = 0;
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(a1, a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    while (!CategoryManagerHandleResponse(v5, 0, (int *)&v19 + 1) && HIDWORD(v19) == 2)
    {
      xpc_release(v5);
      HIDWORD(v19) = 0;
      xpc_object_t v5 = xpc_connection_send_message_with_reply_sync(a1, a2);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    xpc_object_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)&v19 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = "CategoryManagerSendRequest";
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
    return 0;
  }
  return v5;
}

void CategoryManagerConnectionSynchronize(_xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, unsigned int a4, const __CFString *a5)
{
  xpc_object_t v7 = register_request_create(a2, a3, a4);
  xpc_connection_send_message(a1, v7);
  xpc_release(v7);
  xpc_object_t v8 = activate_request_create(a5);
  xpc_connection_send_message(a1, v8);

  xpc_release(v8);
}

xpc_object_t activate_request_create(const __CFString *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v2, "Type", 2);
  if (a1)
  {
    CFArrayRef v3 = _SC_cfstring_to_cstring(a1, 0, 0, 0x8000100u);
    xpc_dictionary_set_string(v2, "Value", (const char *)v3);
    if (v3) {
      CFAllocatorDeallocate(0, v3);
    }
  }
  return v2;
}

uint64_t CategoryManagerConnectionActivateValue(_xpc_connection_s *a1, const __CFString *a2)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = activate_request_create(a2);
  xpc_object_t v4 = CategoryManagerSendRequest(a1, v3);
  xpc_release(v3);
  if (v4)
  {
    if (v4 == (xpc_object_t)MEMORY[0x1E4F14528])
    {
      int64_t int64 = 2;
    }
    else
    {
      int64_t int64 = xpc_dictionary_get_int64(v4, "Error");
      if (!int64)
      {
LABEL_11:
        xpc_release(v4);
        return int64;
      }
    }
    uint64_t v18 = _SC_LOG_DEFAULT();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v28 = (char *)v32 - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      uint64_t v30 = strerror(int64);
      *(_DWORD *)uint64_t v29 = 136315650;
      *(void *)(v29 + 4) = "CategoryManagerConnectionActivateValue";
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v29 + 14) = v30;
      *(_WORD *)(v29 + 22) = 1024;
      *(_DWORD *)(v29 + 24) = int64;
      __SC_log_send(5, (uint64_t)v18, v19, v28);
    }
    goto LABEL_11;
  }
  xpc_object_t v6 = _SC_LOG_DEFAULT();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)v32 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 136315138;
    *(void *)(v17 + 4) = "CategoryManagerConnectionActivateValue";
    __SC_log_send(5, (uint64_t)v6, v7, v16);
  }
  return 22;
}

CFStringRef CategoryManagerConnectionCopyActiveValue(_xpc_connection_s *a1, int *a2)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v4, "Type", 3);
  xpc_object_t v5 = CategoryManagerSendRequest(a1, v4);
  xpc_release(v4);
  if (!v5)
  {
    uint64_t v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)v35 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = "CategoryManagerConnectionCopyActiveValue";
      __SC_log_send(5, (uint64_t)v7, v8, v17);
      int int64 = 22;
      CFStringRef v19 = 0;
    }
    else
    {
      CFStringRef v19 = 0;
      int int64 = 22;
    }
    goto LABEL_14;
  }
  if (v5 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    int int64 = 2;
LABEL_8:
    uint64_t v20 = _SC_LOG_DEFAULT();
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
    {
      uint64_t v22 = _os_log_pack_size();
      uint64_t v30 = (char *)v35 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      uint64_t v32 = strerror(int64);
      *(_DWORD *)uint64_t v31 = 136315650;
      *(void *)(v31 + 4) = "CategoryManagerConnectionCopyActiveValue";
      *(_WORD *)(v31 + 12) = 2080;
      *(void *)(v31 + 14) = v32;
      *(_WORD *)(v31 + 22) = 1024;
      *(_DWORD *)(v31 + 24) = int64;
      __SC_log_send(5, (uint64_t)v20, v21, v30);
    }
    goto LABEL_10;
  }
  int int64 = xpc_dictionary_get_int64(v5, "Error");
  if (int64) {
    goto LABEL_8;
  }
LABEL_10:
  string = xpc_dictionary_get_string(v5, "ActiveValue");
  if (string) {
    CFStringRef v19 = CFStringCreateWithCString(0, string, 0x8000100u);
  }
  else {
    CFStringRef v19 = 0;
  }
  xpc_release(v5);
LABEL_14:
  *a2 = int64;
  return v19;
}

CFStringRef CategoryManagerConnectionCopyActiveValueNoSession(_xpc_connection_s *a1, const __CFString *a2, const __CFString *a3, int *a4)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v8, "Type", 3);
  if (a2)
  {
    uint64_t v9 = _SC_cfstring_to_cstring(a2, 0, 0, 0x8000100u);
    xpc_dictionary_set_string(v8, "Category", (const char *)v9);
    if (v9) {
      CFAllocatorDeallocate(0, v9);
    }
  }
  if (a3)
  {
    uint64_t v10 = _SC_cfstring_to_cstring(a3, 0, 0, 0x8000100u);
    xpc_dictionary_set_string(v8, "InterfaceName", (const char *)v10);
    if (v10) {
      CFAllocatorDeallocate(0, v10);
    }
  }
  xpc_object_t v11 = CategoryManagerSendRequest(a1, v8);
  xpc_release(v8);
  if (!v11)
  {
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v23 = (char *)v41 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 136315138;
      *(void *)(v24 + 4) = "CategoryManagerConnectionCopyActiveValueNoSession";
      __SC_log_send(5, (uint64_t)v13, v14, v23);
      int int64 = 22;
      CFStringRef v25 = 0;
    }
    else
    {
      CFStringRef v25 = 0;
      int int64 = 22;
    }
    goto LABEL_20;
  }
  if (v11 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    int int64 = 2;
LABEL_14:
    uint64_t v26 = _SC_LOG_DEFAULT();
    uint64_t v27 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v26, (os_log_type_t)v27))
    {
      uint64_t v28 = _os_log_pack_size();
      uint64_t v36 = (char *)v41 - ((MEMORY[0x1F4188790](v28, v29, v30, v31, v32, v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      uint64_t v38 = strerror(int64);
      *(_DWORD *)uint64_t v37 = 136315650;
      *(void *)(v37 + 4) = "CategoryManagerConnectionCopyActiveValueNoSession";
      *(_WORD *)(v37 + 12) = 2080;
      *(void *)(v37 + 14) = v38;
      *(_WORD *)(v37 + 22) = 1024;
      *(_DWORD *)(v37 + 24) = int64;
      __SC_log_send(5, (uint64_t)v26, v27, v36);
    }
    goto LABEL_16;
  }
  int int64 = xpc_dictionary_get_int64(v11, "Error");
  if (int64) {
    goto LABEL_14;
  }
LABEL_16:
  string = xpc_dictionary_get_string(v11, "ActiveValue");
  if (string) {
    CFStringRef v25 = CFStringCreateWithCString(0, string, 0x8000100u);
  }
  else {
    CFStringRef v25 = 0;
  }
  xpc_release(v11);
LABEL_20:
  *a4 = int64;
  return v25;
}

uint64_t SCDynamicStoreSnapshot(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = a1;
  int v4 = 0;
  uint64_t result = __SCDynamicStoreNormalize((uint64_t)v5, 1);
  if (result)
  {
    uint64_t v2 = v5[0];
    do
      uint64_t v3 = snapshot(*(_DWORD *)(v2 + 40), (mach_port_t *)&v4);
    while (__SCDynamicStoreCheckRetryAndHandleError(v5[0], v3, &v4, (uint64_t)"SCDynamicStoreSnapshot snapshot()"));
    if (v4)
    {
      _SCErrorSet(v4);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t __SCPreferencesSetNetworkConfigurationFlags(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 308) = a2;
  }
  return result;
}

BOOL __SCPreferencesIsEmpty(uint64_t a1)
{
  if (!a1) {
    __SCPreferencesIsEmpty_cold_1();
  }
  __SCPreferencesAccess(a1);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 280);
  return !v2 || CFDictionaryGetCount(v2) == 0;
}

CFDataRef __SCPreferencesPrefsSize(uint64_t a1)
{
  CFDataRef result = *(const __CFData **)(a1 + 144);
  if (result) {
    return (const __CFData *)*((void *)CFDataGetBytePtr(result) + 4);
  }
  return result;
}

CFDataRef SCPreferencesGetSignature(SCPreferencesRef prefs)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    return (CFDataRef)*((void *)prefs + 18);
  }
  else
  {
    _SCErrorSet(3001);
    return 0;
  }
}

CFStringRef SCDynamicStoreKeyCreatePreferences(const __CFAllocator *a1, const __CFString *a2, int a3)
{
  return _SCPNotificationKey(a1, a2, a3);
}

uint64_t __SCPreferencesCreate_helper(uint64_t a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  int v15 = 0;
  pid_t valuePtr = getpid();
  CFDictionaryRef v2 = (mach_port_t *)(a1 + 320);
  if (!_SCHelperOpen(*(const __CFData **)(a1 + 312), (mach_port_name_t *)(a1 + 320))) {
    goto LABEL_19;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v4 = Mutable;
  xpc_object_t v5 = *(const void **)(a1 + 88);
  if (v5) {
    CFDictionarySetValue(Mutable, @"prefsID", v5);
  }
  xpc_object_t v6 = *(const void **)(a1 + 96);
  if (v6) {
    CFDictionarySetValue(v4, @"options", v6);
  }
  CFDictionarySetValue(v4, @"name", *(const void **)(a1 + 80));
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v4, @"PID", v7);
  CFRelease(v7);
  xpc_object_t v8 = getprogname();
  CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
  CFDictionarySetValue(v4, @"PROC_NAME", v9);
  CFRelease(v9);
  BOOL v10 = _SCSerialize(v4, (CFDataRef *)cf, 0, 0);
  CFRelease(v4);
  if (!cf[0] || !v10) {
    goto LABEL_19;
  }
  int v11 = _SCHelperExec(*v2, 100, (const __CFData *)cf[0], &v15, 0);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v11)
  {
    int v12 = v15;
    if (!v15) {
      return 1;
    }
  }
  else
  {
LABEL_19:
    if (*v2) {
      _SCHelperClose(v2);
    }
    int v12 = 1003;
    int v15 = 1003;
  }
  _SCErrorSet(v12);
  return 0;
}

void log_open_error(uint64_t a1, int a2)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  if (log_open_error_once != -1) {
    dispatch_once(&log_open_error_once, &__block_literal_global_51);
  }
  getpid();
  int v3 = sandbox_check();
  if (v3 == 1)
  {
    uint64_t v20 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v20;
    }
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v20, (os_log_type_t)v21)) {
      return;
    }
    uint64_t v22 = _os_log_pack_size();
    uint64_t v30 = (char *)v42 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_17:
    uint64_t v17 = (uint64_t)v20;
    uint64_t v18 = v21;
    uint64_t v19 = v30;
    goto LABEL_18;
  }
  if (v3)
  {
    uint64_t v20 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v20;
    }
    uint64_t v21 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v20, (os_log_type_t)v21)) {
      return;
    }
    uint64_t v31 = _os_log_pack_size();
    uint64_t v30 = (char *)v42 - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v39 = _os_log_pack_fill();
    uint64_t v40 = __error();
    uint64_t v41 = strerror(*v40);
    *(_DWORD *)uint64_t v39 = 136315138;
    *(void *)(v39 + 4) = v41;
    goto LABEL_17;
  }
  int v4 = __log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    int v4 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v4;
  }
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = (char *)v42 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    uint64_t v16 = strerror(a2);
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = v16;
    uint64_t v17 = (uint64_t)v4;
    uint64_t v18 = v5;
    uint64_t v19 = v14;
LABEL_18:
    __SC_log_send(5, v17, v18, v19);
  }
}

void *SCPreferencesCreateCompanion(uint64_t a1, const __CFString *a2)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  value[0] = 0;
  if (a2)
  {
    v46.CFIndex length = CFStringGetLength(a2);
    v46.io_name_t location = 0;
    if (CFStringFindWithOptions(a2, @"/", v46, 4uLL, 0)) {
      goto LABEL_13;
    }
  }
  else
  {
    a2 = @"preferences.plist";
  }
  CFStringRef v5 = *(const __CFString **)(a1 + 88);
  if (!v5)
  {
    if (!CFEqual(a2, @"preferences.plist"))
    {
      CFAllocatorRef v11 = v4;
      goto LABEL_15;
    }
LABEL_13:
    _SCErrorSet(1002);
    return 0;
  }
  CFIndex Length = CFStringGetLength(v5);
  result.io_name_t location = 0;
  result.CFIndex length = 0;
  v47.io_name_t location = 0;
  v47.CFIndex length = Length;
  if (!CFStringFindWithOptions(*(CFStringRef *)(a1 + 88), @"/", v47, 4uLL, &result))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 88), a2)) {
      goto LABEL_13;
    }
    CFAllocatorRef v11 = 0;
LABEL_15:
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v11, 0, a2);
    goto LABEL_16;
  }
  v7.io_name_t location = result.location + 1;
  result.io_name_t location = v7.location;
  if (Length <= v7.location) {
    goto LABEL_13;
  }
  result.CFIndex length = Length - v7.location;
  v7.CFIndex length = Length - v7.location;
  CFStringRef v8 = CFStringCreateWithSubstring(v4, *(CFStringRef *)(a1 + 88), v7);
  int v9 = CFEqual(v8, a2);
  CFRelease(v8);
  if (v9) {
    goto LABEL_13;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, *(CFStringRef *)(a1 + 88));
  CFStringReplace(MutableCopy, result, a2);
LABEL_16:
  if (!MutableCopy) {
    SCPreferencesCreateCompanion_cold_1();
  }
  uint64_t v13 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 296);
  if (v14 && CFDictionaryGetValueIfPresent(v14, MutableCopy, (const void **)value) && value[0])
  {
    uint64_t v15 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      uint64_t v15 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v15;
    }
    uint64_t v16 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v25 = (char *)&result
          - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      uint64_t v27 = value[0];
      *(_DWORD *)uint64_t v26 = 138412290;
      *(void *)(v26 + 4) = v27;
      __SC_log_send(7, (uint64_t)v15, v16, v25);
    }
    CFRetain(value[0]);
  }
  else
  {
    uint64_t v28 = (void *)__SCPreferencesCreate(v4, *(const __CFString **)(a1 + 80), MutableCopy, *(const void **)(a1 + 312), *(const __CFDictionary **)(a1 + 96));
    value[0] = v28;
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = __log_SCPreferences_log;
      if (!__log_SCPreferences_log)
      {
        uint64_t v30 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
        __log_SCPreferences_log = (uint64_t)v30;
      }
      uint64_t v31 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v30, (os_log_type_t)v31))
      {
        uint64_t v32 = _os_log_pack_size();
        uint64_t v40 = (char *)&result
            - ((MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v41 = _os_log_pack_fill();
        uint64_t v42 = value[0];
        *(_DWORD *)uint64_t v41 = 138412290;
        *(void *)(v41 + 4) = v42;
        __SC_log_send(7, (uint64_t)v30, v31, v40);
      }
      v29[36] = CFRetain((CFTypeRef)a1);
      CFArrayRef Mutable = *(__CFDictionary **)(a1 + 296);
      if (!Mutable)
      {
        CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
        *(void *)(a1 + 296) = Mutable;
      }
      CFDictionarySetValue(Mutable, MutableCopy, value[0]);
    }
  }
  pthread_mutex_unlock(v13);
  CFRelease(MutableCopy);
  return value[0];
}

CFTypeID SCPreferencesGetTypeID(void)
{
  if (__SCPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
  }
  return __kSCPreferencesTypeID;
}

void prefsNotify(int a1, CFArrayRef theArray, uint64_t a3)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      LODWORD(v8) = 0;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
        if (CFEqual(ValueAtIndex, *(CFTypeRef *)(a3 + 184)))
        {
          uint64_t v8 = v8 | 1;
        }
        else if (CFEqual(ValueAtIndex, *(CFTypeRef *)(a3 + 192)))
        {
          uint64_t v8 = v8 | 2;
        }
        else
        {
          uint64_t v8 = v8;
        }
        ++v7;
      }
      while (v6 != v7);
      if (v8)
      {
        pthread_mutex_lock((pthread_mutex_t *)(a3 + 16));
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 216);
        uint64_t v12 = *(void *)(a3 + 232);
        CFAllocatorRef v11 = *(uint64_t (**)(void))(a3 + 240);
        if (v11)
        {
          uint64_t v12 = v11(*(void *)(a3 + 232));
          uint64_t v13 = *(void (**)(uint64_t))(a3 + 248);
        }
        else
        {
          uint64_t v13 = 0;
        }
        pthread_mutex_unlock((pthread_mutex_t *)(a3 + 16));
        if (v10)
        {
          CFDictionaryRef v14 = __log_SCPreferences_log;
          if (!__log_SCPreferences_log)
          {
            CFDictionaryRef v14 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
            __log_SCPreferences_log = (uint64_t)v14;
          }
          uint64_t v15 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v14, (os_log_type_t)v15))
          {
            uint64_t v16 = _os_log_pack_size();
            uint64_t v24 = (char *)v29
                - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v25 = _os_log_pack_fill();
            uint64_t v26 = "commit";
            uint64_t v27 = "";
            if ((v8 & 1) == 0) {
              uint64_t v26 = "";
            }
            uint64_t v28 = ", ";
            if ((~v8 & 3) != 0) {
              uint64_t v28 = "";
            }
            *(_DWORD *)uint64_t v25 = 136315650;
            *(void *)(v25 + 4) = v26;
            *(_WORD *)(v25 + 12) = 2080;
            *(void *)(v25 + 14) = v28;
            if ((v8 & 2) != 0) {
              uint64_t v27 = "apply";
            }
            *(_WORD *)(v25 + 22) = 2080;
            *(void *)(v25 + 24) = v27;
            __SC_log_send(7, (uint64_t)v14, v15, v24);
          }
          v10(a3, v8, v12);
        }
        if (v13) {
          v13(v12);
        }
      }
    }
  }
}

void appendLockedPreferences(int a1, uint64_t a2, __CFString *theString)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v6 = "";
  if (Length > 0) {
    CFIndex v6 = "\n";
  }
  CFStringAppendFormat(theString, 0, @"%s%@", v6, a2);
}

Boolean SCPreferencesUnscheduleFromRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCPreferencesInitialize_initialized, &__block_literal_global_64_0);
    if (prefs) {
      goto LABEL_3;
    }
LABEL_10:
    _SCErrorSet(1002);
    return 0;
  }
  if (!prefs) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v6 = __kSCPreferencesTypeID;
  CFTypeID v7 = CFGetTypeID(prefs);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_10;
  }

  return __SCPreferencesUnscheduleFromRunLoop((uint64_t)prefs, runLoop, runLoopMode);
}

void __SCPreferencesHandleInternalStatus(int *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  if (*a1 == 10003)
  {
    int v3 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v2 == 10002)
  {
    int v3 = __log_SCPreferences_log;
    if (!__log_SCPreferences_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
      __log_SCPreferences_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v2 != 10001) {
    return;
  }
  int v3 = __log_SCPreferences_log;
  if (!__log_SCPreferences_log)
  {
    int v3 = os_log_create("com.apple.SystemConfiguration", "SCPreferences");
    __log_SCPreferences_log = (uint64_t)v3;
  }
  uint64_t v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
LABEL_15:
    _os_log_pack_size();
    CFStringRef v5 = (char *)v6 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v3, v4, v5);
  }
LABEL_16:
  *a1 = 1003;
}

void __log_open_error_block_invoke()
{
  log_open_error_sb_nw_interface_type_t type = 1;
  if (_SC_isAppleInternal_once_1 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_1, &__block_literal_global_55);
  }
  if (!_SC_isAppleInternal_isInternal_1) {
    log_open_error_sb_type |= *MEMORY[0x1E4F14100];
  }
}

BOOL lockWithSCDynamicStore(uint64_t a1, int a2)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  if (!__SCPreferencesAddSession(a1)) {
    return 0;
  }
  if (!SCDynamicStoreAddWatchedKey(*(void *)(a1 + 152), *(__CFString **)(a1 + 176), 0))
  {
    int v13 = SCError();
    uint64_t v15 = __log_SCPreferences();
    uint64_t v16 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v17 = _os_log_pack_size();
    uint64_t v25 = (char *)v40 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v15, v16, v25);
    int v14 = 1;
LABEL_20:
    BOOL v8 = 0;
    goto LABEL_25;
  }
  SCDynamicStoreRef v4 = SCDynamicStoreCreate(0, *(CFStringRef *)(a1 + 80), 0, 0);
  *(void *)(a1 + 160) = v4;
  if (!v4)
  {
    int v13 = SCError();
    uint64_t v15 = __log_SCPreferences();
    uint64_t v16 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v6 = CFDateCreate(0, Current);
  int v7 = SCDynamicStoreAddTemporaryValue(*(SCDynamicStoreRef *)(a1 + 160), *(CFStringRef *)(a1 + 176), v6);
  CFRelease(v6);
  BOOL v8 = v7 != 0;
  if (v7 || !a2)
  {
LABEL_9:
    if (v8) {
      int v13 = 0;
    }
    else {
      int v13 = 3002;
    }
    int v14 = !v8;
    goto LABEL_25;
  }
  while (1)
  {
    if (!SCDynamicStoreNotifyWait(*(void *)(a1 + 152)))
    {
      int v13 = SCError();
      uint64_t v15 = __log_SCPreferences();
      uint64_t v16 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v15, (os_log_type_t)v16)) {
        goto LABEL_24;
      }
      goto LABEL_19;
    }
    CFArrayRef v9 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
    if (!v9) {
      break;
    }
    CFRelease(v9);
    CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
    CFDateRef v11 = CFDateCreate(0, v10);
    int v12 = SCDynamicStoreAddTemporaryValue(*(SCDynamicStoreRef *)(a1 + 160), *(CFStringRef *)(a1 + 176), v11);
    CFRelease(v11);
    BOOL v8 = v12 != 0;
    if (v12) {
      goto LABEL_9;
    }
  }
  uint64_t v26 = __log_SCPreferences();
  uint64_t v27 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v26, (os_log_type_t)v27))
  {
    uint64_t v28 = _os_log_pack_size();
    uint64_t v36 = (char *)v40 - ((MEMORY[0x1F4188790](v28, v29, v30, v31, v32, v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v26, v27, v36);
    int v14 = 1;
    int v13 = 0;
    goto LABEL_20;
  }
  int v13 = 0;
LABEL_24:
  BOOL v8 = 0;
  int v14 = 1;
LABEL_25:
  SCDynamicStoreRemoveWatchedKey(*(void *)(a1 + 152), *(const __CFString **)(a1 + 176), 0);
  CFArrayRef v37 = SCDynamicStoreCopyNotifiedKeys(*(SCDynamicStoreRef *)(a1 + 152));
  if (v37) {
    CFRelease(v37);
  }
  __SCPreferencesRemoveSession(a1);
  if (v14)
  {
    uint64_t v38 = *(const void **)(a1 + 160);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(a1 + 160) = 0;
    }
  }
  if (v13) {
    _SCErrorSet(v13);
  }
  return v8;
}

uint64_t createParentDirectory()
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)__strlcpy_chk() >= 0x400 || (uint64_t v0 = strrchr(v70, 47)) == 0 || v0 == v70)
  {
    *__error() = 2;
    return 0xFFFFFFFFLL;
  }
  int v2 = v0;
  char *v0 = 0;
  unint64_t v3 = 0x1E91CA000uLL;
  *(void *)&long long v1 = 136315138;
  long long v66 = v1;
  SCDynamicStoreRef v4 = v70;
LABEL_5:
  char v5 = *v2;
  char *v2 = 0;
  while (1)
  {
    if (!mkdir(v70, 0x1EDu))
    {
      gid_t gr_gid = *(_DWORD *)(v3 + 200);
      if (gr_gid == -1)
      {
        memset(&v68, 0, sizeof(v68));
        uint64_t v67 = 0;
        if (getgrnam_r("wheel", &v68, v69, 0x100uLL, &v67) || !v67)
        {
          BOOL v8 = __log_SCPreferences();
          uint64_t v9 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
          {
            uint64_t v10 = _os_log_pack_size();
            uint64_t v18 = (char *)&v66
                - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v19 = _os_log_pack_fill();
            uint64_t v20 = __error();
            uint64_t v21 = strerror(*v20);
            *(_DWORD *)uint64_t v19 = v66;
            *(void *)(v19 + 4) = v21;
            uint64_t v22 = v18;
            unint64_t v3 = 0x1E91CA000uLL;
            __SC_log_send(5, (uint64_t)v8, v9, v22);
          }
          gid_t gr_gid = 0;
        }
        else
        {
          gid_t gr_gid = v67->gr_gid;
        }
        *(_DWORD *)(v3 + 200) = gr_gid;
      }
      if (chown(v70, 0xFFFFFFFF, gr_gid) == -1)
      {
        uint64_t v23 = __log_SCPreferences();
        uint64_t v24 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
        {
          uint64_t v25 = _os_log_pack_size();
          uint64_t v33 = (char *)&v66
              - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v34 = _os_log_pack_fill();
          uint64_t v35 = __error();
          uint64_t v36 = strerror(*v35);
          *(_DWORD *)uint64_t v34 = v66;
          *(void *)(v34 + 4) = v36;
          unint64_t v3 = 0x1E91CA000;
          __SC_log_send(5, (uint64_t)v23, v24, v33);
        }
      }
      if (chmod(v70, 0x1EDu) == -1)
      {
        CFArrayRef v37 = __log_SCPreferences();
        uint64_t v38 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v37, (os_log_type_t)v38))
        {
          uint64_t v39 = _os_log_pack_size();
          CFRange v47 = (char *)&v66
              - ((MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v48 = _os_log_pack_fill();
          uint64_t v49 = __error();
          uint64_t v50 = strerror(*v49);
          *(_DWORD *)uint64_t v48 = v66;
          *(void *)(v48 + 4) = v50;
          unint64_t v3 = 0x1E91CA000;
          __SC_log_send(5, (uint64_t)v37, v38, v47);
        }
      }
      uint64_t result = 0;
      if (!v2 || v4 == v70) {
        return result;
      }
      goto LABEL_31;
    }
    if (*__error() != 2 || v4 != v70) {
      break;
    }
    if (!v2) {
      goto LABEL_36;
    }
LABEL_31:
    char *v2 = v5;
    int v2 = strchr(v4 + 1, 47);
    SCDynamicStoreRef v4 = v2;
    if (v2) {
      goto LABEL_5;
    }
    char v5 = 0;
  }
  if (*__error() == 30) {
    return 0xFFFFFFFFLL;
  }
  int v7 = __error();
  if (v2 && *v7 == 17) {
    goto LABEL_31;
  }
LABEL_36:
  uint64_t v52 = __log_SCPreferences();
  uint64_t v53 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v52, (os_log_type_t)v53))
  {
    uint64_t v54 = _os_log_pack_size();
    uint64_t v62 = (char *)&v66 - ((MEMORY[0x1F4188790](v54, v55, v56, v57, v58, v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v63 = _os_log_pack_fill();
    uint64_t v64 = __error();
    uint64_t v65 = strerror(*v64);
    *(_DWORD *)uint64_t v63 = v66;
    *(void *)(v63 + 4) = v65;
    __SC_log_send(5, (uint64_t)v52, v53, v62);
    return 0xFFFFFFFFLL;
  }
  return 0xFFFFFFFFLL;
}

BOOL has_O_EXLOCK(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  memset(&v38, 0, 512);
  int v2 = open(*(const char **)(a1 + 120), 513);
  if (v2 == -1)
  {
    CFDateRef v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)&v37[-1] - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
  }
  else
  {
    int v3 = v2;
    int v4 = fstatfs(v2, &v38);
    unlink(*(const char **)(a1 + 120));
    close(v3);
    if (v4 == -1)
    {
      CFDateRef v6 = __log_SCPreferences();
      uint64_t v7 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
      if (!result) {
        return result;
      }
      uint64_t v17 = _os_log_pack_size();
      uint64_t v16 = (char *)&v37[-1]
          - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
    }
    else
    {
      v37[0] = 5;
      v37[1] = 2147614720;
      CFDataRef v37[2] = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      int v41 = 0;
      if (getattrlist(v38.f_mntonname, v37, &v39, 0x24uLL, 0) != -1) {
        return (BYTE9(v39) & 2) != 0 && (BYTE9(v40) & 2) != 0;
      }
      CFDateRef v6 = __log_SCPreferences();
      uint64_t v7 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
      if (!result) {
        return result;
      }
      uint64_t v25 = _os_log_pack_size();
      uint64_t v16 = (char *)&v37[-1]
          - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
    }
  }
  uint64_t v33 = _os_log_pack_fill();
  uint64_t v34 = __error();
  uint64_t v35 = strerror(*v34);
  *(_DWORD *)uint64_t v33 = 136315138;
  *(void *)(v33 + 4) = v35;
  __SC_log_send(5, (uint64_t)v6, v7, v16);
  return 0;
}

void reportDelay(uint64_t a1, uint64_t *a2, int a3)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  CFDateRef v6 = __log_SCPreferences();
  uint64_t v7 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)v23 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    uint64_t v18 = *(void *)(a1 + 80);
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v20 = *a2;
    int v21 = *((_DWORD *)a2 + 2) / 1000;
    uint64_t v22 = " (stale)";
    *(_DWORD *)uint64_t v17 = 138413314;
    if (!a3) {
      uint64_t v22 = "";
    }
    *(void *)(v17 + 4) = v18;
    *(_WORD *)(v17 + 12) = 2112;
    *(void *)(v17 + 14) = v19;
    *(_WORD *)(v17 + 22) = 1024;
    *(_DWORD *)(v17 + 24) = v20;
    *(_WORD *)(v17 + 28) = 1024;
    *(_DWORD *)(v17 + 30) = v21;
    *(_WORD *)(v17 + 34) = 2080;
    *(void *)(v17 + 36) = v22;
    __SC_log_send(3, (uint64_t)v6, v7, v16);
  }
}

void __wait_for_PreferencesMonitor()
{
  v20[1] = *MEMORY[0x1E4F143B8];
  qword_1E91CA1E0 = (uint64_t)"Waiting for configd/PreferencesMonitor";
  SCDynamicStoreRef v0 = SCDynamicStoreCreate(0, @"__wait_for_PreferencesMonitor", 0, 0);
  if (!v0)
  {
    qword_1E91CA1E0 = 0;
    return;
  }
  long long v1 = v0;
  CFArrayRef v2 = CFArrayCreate(0, (const void **)&kSCDynamicStoreDomainSetup, 1, MEMORY[0x1E4F1D510]);
  int v3 = SCDynamicStoreSetNotificationKeys(v1, v2, 0);
  CFRelease(v2);
  if (v3)
  {
    while (1)
    {
      CFPropertyListRef v4 = SCDynamicStoreCopyValue(v1, @"Setup:");
      if (v4)
      {
        CFRelease(v4);
        goto LABEL_13;
      }
      if (!SCDynamicStoreNotifyWait((mach_port_context_t)v1)) {
        break;
      }
      CFArrayRef v5 = SCDynamicStoreCopyNotifiedKeys(v1);
      if (v5) {
        CFRelease(v5);
      }
    }
    CFDateRef v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v6, (os_log_type_t)v7)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CFDateRef v6 = __log_SCPreferences();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
LABEL_12:
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)v20 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    int v18 = SCError();
    uint64_t v19 = SCErrorString(v18);
    *(_DWORD *)uint64_t v17 = 136315138;
    *(void *)(v17 + 4) = v19;
    __SC_log_send(5, (uint64_t)v6, v7, v16);
  }
LABEL_13:
  qword_1E91CA1E0 = 0;
  CFRelease(v1);
}

void reportDelay_0(uint64_t a1, uint64_t *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  CFPropertyListRef v4 = __log_SCPreferences();
  uint64_t v5 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = (char *)v20 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = *(void *)(a1 + 88);
    uint64_t v18 = *a2;
    int v19 = *((_DWORD *)a2 + 2) / 1000;
    *(_DWORD *)uint64_t v15 = 138413058;
    *(void *)(v15 + 4) = v16;
    *(_WORD *)(v15 + 12) = 2112;
    *(void *)(v15 + 14) = v17;
    *(_WORD *)(v15 + 22) = 1024;
    *(_DWORD *)(v15 + 24) = v18;
    *(_WORD *)(v15 + 28) = 1024;
    *(_DWORD *)(v15 + 30) = v19;
    __SC_log_send(3, (uint64_t)v4, v5, v14);
  }
}

CFArrayRef SCPreferencesCopyKeyList(SCPreferencesRef prefs)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    CFAllocatorRef v2 = CFGetAllocator(prefs);
    CFIndex Count = CFDictionaryGetCount(*((CFDictionaryRef *)prefs + 35));
    if (Count < 1)
    {
      uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      return CFArrayCreate(v2, 0, 0, v8);
    }
    else
    {
      CFIndex v4 = Count;
      uint64_t v5 = (const void **)CFAllocatorAllocate(v2, 8 * Count, 0);
      CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)prefs + 35), v5, 0);
      CFArrayRef v6 = CFArrayCreate(v2, v5, v4, MEMORY[0x1E4F1D510]);
      CFAllocatorDeallocate(v2, v5);
      return v6;
    }
  }
  else
  {
    _SCErrorSet(3001);
    return 0;
  }
}

uint64_t __SCNetworkConfigurationBackup(const __SCPreferences *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  result.io_name_t location = 0;
  result.CFIndex length = 0;
  CFArrayRef v6 = __log_SCNetworkConfiguration();
  uint64_t v7 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)&v26 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 138412290;
    *(void *)(v17 + 4) = a2;
    __SC_log_send(5, (uint64_t)v6, v7, v16);
  }
  if (*((void *)a1 + 11)) {
    CFStringRef v18 = (const __CFString *)*((void *)a1 + 11);
  }
  else {
    CFStringRef v18 = @"preferences.plist";
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v18);
  v30.CFIndex length = CFStringGetLength(MutableCopy);
  v30.io_name_t location = 0;
  if (CFStringFindWithOptions(MutableCopy, @"/", v30, 4uLL, &result))
  {
    v29.CFIndex length = result.location + 1;
    result.io_name_t location = 0;
    result.CFIndex length = v29.length;
    v29.io_name_t location = 0;
    CFStringReplace(MutableCopy, v29, &stru_1EDD23408);
  }
  CFIndex Length = CFStringGetLength(MutableCopy);
  CFStringInsert(MutableCopy, Length - 6, @"-");
  CFIndex v21 = CFStringGetLength(MutableCopy);
  CFStringInsert(MutableCopy, v21 - 6, a2);
  Companion = (const __SCPreferences *)SCPreferencesCreateCompanion(a3, MutableCopy);
  CFRelease(MutableCopy);
  if (!Companion) {
    return 0;
  }
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, @"/");
  SCPreferencesPathSetValue(Companion, @"/", Value);
  uint64_t v24 = SCPreferencesCommitChanges(Companion);
  CFRelease(Companion);
  return v24;
}

uint64_t __SCNetworkConfigurationSaveModel(const __SCPreferences *a1, const void *a2)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  CFIndex v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = (char *)v19 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 138412290;
    *(void *)(v15 + 4) = a2;
    __SC_log_send(5, (uint64_t)v4, v5, v14);
  }
  CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"preferences-%@.plist", a2);
  uint64_t v17 = savePreferences(a1, v16, (uint64_t)&stru_1EDD23408, @"Model", a2);
  CFRelease(v16);
  return v17;
}

uint64_t savePreferences(const __SCPreferences *a1, const __CFString *a2, uint64_t a3, const __CFString *a4, const void *a5)
{
  v32[7] = *MEMORY[0x1E4F143B8];
  v32[0] = @"CurrentSet";
  v32[1] = @"Model";
  void v32[2] = @"NetworkServices";
  v32[3] = @"Sets";
  v32[4] = @"System";
  v32[5] = @"__VERSION__";
  v32[6] = @"VirtualNetworkInterfaces";
  CFStringRef v31 = a2;
  Companion = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)a1, a2);
  for (uint64_t i = 0; i != 7; ++i)
  {
    CFStringRef v11 = (const __CFString *)v32[i];
    CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@%@", a3, v11);
    CFPropertyListRef Value = SCPreferencesGetValue(a1, v12);
    if (Value)
    {
      SCPreferencesSetValue(Companion, v11, Value);
      SCPreferencesRemoveValue(a1, v12);
    }
    CFRelease(v12);
  }
  if (a4) {
    SCPreferencesSetValue(Companion, a4, a5);
  }
  uint64_t v14 = SCPreferencesCommitChanges(Companion);
  CFRelease(Companion);
  if (!v14)
  {
    uint64_t v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v25 = (char *)&v30 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      int v27 = SCError();
      uint64_t v28 = SCErrorString(v27);
      *(_DWORD *)uint64_t v26 = 138412546;
      *(void *)(v26 + 4) = v31;
      *(_WORD *)(v26 + 12) = 2080;
      *(void *)(v26 + 14) = v28;
      __SC_log_send(3, (uint64_t)v15, v16, v25);
    }
  }
  return v14;
}

uint64_t __SCNetworkConfigurationUpgrade(const __SCPreferences **a1, uint64_t *a2, int a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  int valuePtr = 20191120;
  if (a1) {
    Companion = *a1;
  }
  else {
    Companion = 0;
  }
  BOOL v7 = a2 != 0;
  if (!a2)
  {
    uint64_t v8 = 0;
LABEL_11:
    if (a1) {
      BOOL v11 = Companion == 0;
    }
    else {
      BOOL v11 = 1;
    }
    int v14 = !v11 && a2 != 0 && v8 == 0;
    goto LABEL_29;
  }
  uint64_t v8 = (const __SCPreferences *)*a2;
  if (!a1 && v8)
  {
    Companion = (const __SCPreferences *)SCPreferencesCreateCompanion(*a2, 0);
    if (!Companion)
    {
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10)) {
        goto LABEL_66;
      }
      return 0;
    }
    goto LABEL_11;
  }
  int v14 = 0;
  if (a1 && Companion && !v8)
  {
    uint64_t v15 = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)Companion, @"NetworkInterfaces.plist");
    if (!v15)
    {
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
LABEL_66:
        uint64_t v76 = _os_log_pack_size();
        uint64_t v84 = (char *)v89 - ((MEMORY[0x1F4188790](v76, v77, v78, v79, v80, v81, v82, v83) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v85 = _os_log_pack_fill();
        int v86 = SCError();
        uint64_t v87 = SCErrorString(v86);
        *(_DWORD *)uint64_t v85 = 136315138;
        *(void *)(v85 + 4) = v87;
        __SC_log_send(3, (uint64_t)v9, v10, v84);
      }
      return 0;
    }
    uint64_t v8 = v15;
    BOOL v7 = 0;
    int v14 = 1;
  }
  else
  {
    BOOL v7 = 0;
  }
LABEL_29:
  if (needsUpdate(Companion) || needsUpdate(v8))
  {
    uint64_t v16 = lockWithSync(Companion);
    if (!v16)
    {
      uint64_t v32 = __log_SCNetworkConfiguration();
      uint64_t v33 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v32, (os_log_type_t)v33))
      {
        uint64_t v34 = _os_log_pack_size();
        uint64_t v42 = (char *)v89 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v43 = _os_log_pack_fill();
        int v44 = SCError();
        uint64_t v45 = SCErrorString(v44);
        *(_DWORD *)uint64_t v43 = 136315138;
        *(void *)(v43 + 4) = v45;
        __SC_log_send(3, (uint64_t)v32, v33, v42);
      }
      goto LABEL_39;
    }
    if (v8)
    {
      uint64_t v17 = lockWithSync(v8);
      if (!v17)
      {
        uint64_t v18 = __log_SCNetworkConfiguration();
        uint64_t v19 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v18, (os_log_type_t)v19))
        {
          uint64_t v20 = _os_log_pack_size();
          uint64_t v28 = (char *)v89
              - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v29 = _os_log_pack_fill();
          int v30 = SCError();
          CFStringRef v31 = SCErrorString(v30);
          *(_DWORD *)uint64_t v29 = 136315138;
          *(void *)(v29 + 4) = v31;
          __SC_log_send(3, (uint64_t)v18, v19, v28);
        }
        SCPreferencesUnlock(Companion);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v17 = v16;
    }
    __SCNetworkConfigurationClean(Companion, v8);
    CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SCPreferencesSetValue(Companion, @"__VERSION__", v46);
    CFRelease(v46);
    if (v8)
    {
      CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      SCPreferencesSetValue(v8, @"__VERSION__", v47);
      CFRelease(v47);
    }
    if (!a3)
    {
LABEL_51:
      SCPreferencesUnlock(Companion);
      if (v8)
      {
        if (a3)
        {
          if (v17)
          {
            uint64_t v17 = SCPreferencesCommitChanges(v8);
            if (!v17)
            {
              uint64_t v62 = __log_SCNetworkConfiguration();
              uint64_t v63 = _SC_syslog_os_log_mapping(3);
              if (__SC_log_enabled(3, v62, (os_log_type_t)v63))
              {
                uint64_t v64 = _os_log_pack_size();
                uint64_t v72 = (char *)v89
                    - ((MEMORY[0x1F4188790](v64, v65, v66, v67, v68, v69, v70, v71) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v73 = _os_log_pack_fill();
                int v74 = SCError();
                uint64_t v75 = SCErrorString(v74);
                *(_DWORD *)uint64_t v73 = 136315138;
                *(void *)(v73 + 4) = v75;
                __SC_log_send(3, (uint64_t)v62, v63, v72);
              }
              uint64_t v17 = 0;
            }
          }
        }
        SCPreferencesUnlock(v8);
      }
      goto LABEL_59;
    }
    if (SCPreferencesCommitChanges(Companion))
    {
      uint64_t v17 = SCPreferencesApplyChanges(Companion);
      if (v17) {
        goto LABEL_51;
      }
      uint64_t v48 = __log_SCNetworkConfiguration();
      uint64_t v49 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v48, (os_log_type_t)v49)) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v48 = __log_SCNetworkConfiguration();
      uint64_t v49 = _SC_syslog_os_log_mapping(3);
      if (!__SC_log_enabled(3, v48, (os_log_type_t)v49))
      {
LABEL_50:
        uint64_t v17 = 0;
        goto LABEL_51;
      }
    }
    uint64_t v50 = _os_log_pack_size();
    v89[1] = v89;
    uint64_t v58 = (char *)v89 - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v59 = _os_log_pack_fill();
    int v60 = SCError();
    uint64_t v61 = SCErrorString(v60);
    *(_DWORD *)uint64_t v59 = 136315138;
    *(void *)(v59 + 4) = v61;
    __SC_log_send(3, (uint64_t)v48, v49, v58);
    goto LABEL_50;
  }
LABEL_39:
  uint64_t v17 = 0;
LABEL_59:
  if (v7) {
    CFRelease(Companion);
  }
  if (v14)
  {
    if (v17) {
      *a2 = (uint64_t)CFRetain(v8);
    }
    CFRelease(v8);
  }
  return v17;
}

const __SCPreferences *needsUpdate(const __SCPreferences *result)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  if (result)
  {
    CFPropertyListRef Value = SCPreferencesGetValue(result, @"__VERSION__");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)) {
      return (const __SCPreferences *)(valuePtr != 20191120);
    }
    else {
      return (const __SCPreferences *)1;
    }
  }
  return result;
}

uint64_t lockWithSync(const __SCPreferences *a1)
{
  if (!a1) {
    lockWithSync_cold_1();
  }
  uint64_t result = SCPreferencesLock(a1, 1u);
  if (!result)
  {
    if (SCError() == 3005)
    {
      SCPreferencesSynchronize(a1);
      return SCPreferencesLock(a1, 1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t __SCNetworkConfigurationClean(const __SCPreferences *a1, const __SCPreferences *a2)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)SCPreferencesCopyKeyList(a1);
  if (v4)
  {
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @" : %@", @"Sets");
    CFIndex Count = CFArrayGetCount((CFArrayRef)v4);
    if (Count < 1)
    {
      CFArrayRef Mutable = 0;
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      CFArrayRef Mutable = 0;
      uint64_t v10 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v4, v8);
        if (CFStringHasSuffix(ValueAtIndex, v5))
        {
          if (!Mutable) {
            CFArrayRef Mutable = CFSetCreateMutable(0, 0, v10);
          }
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, ValueAtIndex);
          CFStringTrim(MutableCopy, v5);
          CFSetAddValue(Mutable, MutableCopy);
          CFRelease(MutableCopy);
        }
        ++v8;
      }
      while (v7 != v8);
    }
    CFRelease(v5);
    CFRelease((CFTypeRef)v4);
    if (Mutable)
    {
      CFSetApplyFunction(Mutable, (CFSetApplierFunction)thinInlineBackup, a1);
      CFRelease(Mutable);
      uint64_t v13 = __log_SCNetworkConfiguration();
      uint64_t v14 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
      {
        uint64_t v15 = _os_log_pack_size();
        uint64_t v23 = (char *)v68 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v13, v14, v23);
      }
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  CFArrayRef v24 = SCPreferencesCopyKeyList(a1);
  if (v24)
  {
    CFArrayRef v25 = v24;
    CFStringRef v26 = CFStringCreateWithFormat(0, 0, @":%@", @"Sets");
    CFIndex v27 = CFArrayGetCount(v25);
    if (v27 < 1)
    {
      int v30 = 0;
    }
    else
    {
      CFIndex v28 = v27;
      CFIndex v29 = 0;
      int v30 = 0;
      CFStringRef v31 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
      do
      {
        CFStringRef v32 = (const __CFString *)CFArrayGetValueAtIndex(v25, v29);
        if (CFStringHasSuffix(v32, v26))
        {
          if (!v30) {
            int v30 = CFSetCreateMutable(0, 0, v31);
          }
          uint64_t v33 = CFStringCreateMutableCopy(0, 0, v32);
          CFStringTrim(v33, v26);
          CFSetAddValue(v30, v33);
          CFRelease(v33);
        }
        ++v29;
      }
      while (v28 != v29);
    }
    CFRelease(v26);
    CFRelease(v25);
    if (v30)
    {
      CFSetApplyFunction(v30, (CFSetApplierFunction)thinInlineModel, a1);
      CFRelease(v30);
      uint64_t v34 = __log_SCNetworkConfiguration();
      uint64_t v35 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v34, (os_log_type_t)v35))
      {
        uint64_t v4 = 1;
        if (!a2) {
          goto LABEL_38;
        }
        goto LABEL_31;
      }
      uint64_t v36 = _os_log_pack_size();
      int v44 = (char *)v68 - ((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v34, v35, v44);
      uint64_t v4 = 1;
    }
  }
  if (!a2) {
    goto LABEL_38;
  }
LABEL_31:
  if (__SCNetworkConfigurationCleanHiddenInterfaces(a1, a2))
  {
    uint64_t v45 = __log_SCNetworkConfiguration();
    uint64_t v46 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v45, (os_log_type_t)v46))
    {
      uint64_t v47 = _os_log_pack_size();
      uint64_t v55 = (char *)v68 - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v45, v46, v55);
    }
    uint64_t v4 = 1;
  }
LABEL_38:
  if (__SCNetworkConfigurationCleanServiceOrderIssues(a1))
  {
    uint64_t v56 = __log_SCNetworkConfiguration();
    uint64_t v57 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v56, (os_log_type_t)v57))
    {
      uint64_t v58 = _os_log_pack_size();
      uint64_t v66 = (char *)v68 - ((MEMORY[0x1F4188790](v58, v59, v60, v61, v62, v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v56, v57, v66);
    }
    return 1;
  }
  return v4;
}

uint64_t __SCNetworkConfigurationCleanHiddenInterfaces(const __SCPreferences *a1, const __SCPreferences *a2)
{
  SCPreferencesRef v267 = a2;
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  v269 = a1;
  CFArrayRef v4 = SCNetworkServiceCopyAll(a1);
  CFArrayRef v5 = v4;
  CFArrayRef v275 = Mutable;
  CFArrayRef v270 = v4;
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      *(void *)&long long v7 = 138412546;
      long long v271 = v7;
      *(void *)&long long v7 = 138412802;
      long long v265 = v7;
      *(void *)&long long v7 = 138413314;
      long long v266 = v7;
      CFIndex v268 = Count;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v9);
        if (!SCNetworkServiceGetEnabled(ValueAtIndex)) {
          break;
        }
        Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (!BSDName)
        {
          BOOL v53 = _sc_log != 1 && _sc_debug == 0;
          CFArrayRef Mutable = v275;
          if (v53) {
            goto LABEL_89;
          }
          uint64_t v51 = __log_SCNetworkConfiguration();
          uint64_t v52 = _SC_syslog_os_log_mapping(6);
          if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
            goto LABEL_89;
          }
          goto LABEL_56;
        }
        CFStringRef v13 = BSDName;
        int IsHiddenConfiguration = _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)Interface);
        uint64_t v15 = "hidden";
        if (IsHiddenConfiguration) {
          goto LABEL_8;
        }
        CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(Interface);
        int HasPrefix = CFStringHasPrefix(LocalizedDisplayName, @"Apple TV");
        uint64_t v15 = "effectively hidden";
        if (HasPrefix) {
          goto LABEL_8;
        }
        uint64_t v68 = 0;
        do
        {
          if (v68 == 4) {
            goto LABEL_65;
          }
        }
        while (!CFStringHasPrefix(LocalizedDisplayName, off_1E55BB590[++v68]));
        uint64_t v15 = "effectively hidden";
        if ((unint64_t)(v68 - 1) < 4)
        {
LABEL_8:
          *(void *)&long long v273 = v15;
          uint64_t v18 = SCNetworkServiceGetInterface(ValueAtIndex);
          *(void *)&long long v274 = v13;
          if (v18)
          {
            uint64_t v19 = SCNetworkServiceCreate(v269, v18);
            if (v19)
            {
              uint64_t v20 = v19;
              *(void *)&long long v272 = v9;
              SCNetworkServiceEstablishDefaultConfiguration(v19);
              CFArrayRef v21 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
              CFArrayRef v22 = SCNetworkServiceCopyProtocols(ValueAtIndex);
              if (v22)
              {
                CFArrayRef v23 = v22;
                CFIndex v24 = CFArrayGetCount(v22);
                if (v24 >= 1)
                {
                  CFIndex v25 = v24;
                  for (CFIndex i = 0; i != v25; ++i)
                  {
                    CFIndex v27 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v23, i);
                    CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(v27);
                    v277.CFIndex length = CFArrayGetCount(v21);
                    v277.io_name_t location = 0;
                    if (!CFArrayContainsValue(v21, v277, ProtocolType)) {
                      CFArrayAppendValue(v21, ProtocolType);
                    }
                  }
                }
                CFRelease(v23);
              }
              CFArrayRef v29 = SCNetworkServiceCopyProtocols(v20);
              if (v29)
              {
                CFArrayRef v30 = v29;
                CFIndex v31 = CFArrayGetCount(v29);
                if (v31 >= 1)
                {
                  CFIndex v32 = v31;
                  for (CFIndex j = 0; j != v32; ++j)
                  {
                    uint64_t v34 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v30, j);
                    CFStringRef v35 = SCNetworkProtocolGetProtocolType(v34);
                    v278.CFIndex length = CFArrayGetCount(v21);
                    v278.io_name_t location = 0;
                    if (!CFArrayContainsValue(v21, v278, v35)) {
                      CFArrayAppendValue(v21, v35);
                    }
                  }
                }
                CFRelease(v30);
              }
              CFIndex v36 = CFArrayGetCount(v21);
              CFIndex v37 = v36 - 1;
              if (v36 >= 1)
              {
                CFIndex v38 = 0;
                CFStringRef Copy = 0;
                while (1)
                {
                  CFStringRef v40 = (const __CFString *)CFArrayGetValueAtIndex(v21, v38);
                  uint64_t v41 = SCNetworkServiceCopyProtocol(ValueAtIndex, v40);
                  SCNetworkProtocolRef v42 = SCNetworkServiceCopyProtocol(v20, v40);
                  uint64_t v43 = v42;
                  if (v41 && v42)
                  {
                    int Enabled = SCNetworkProtocolGetEnabled(v41);
                    int v45 = SCNetworkProtocolGetEnabled(v43);
                    CFStringRef v46 = @"conflicting %@ enable/disable";
                    if (Enabled != v45) {
                      goto LABEL_34;
                    }
                    CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v41);
                    CFDictionaryRef v48 = SCNetworkProtocolGetConfiguration(v43);
                    if (Configuration != v48)
                    {
                      if (!Configuration) {
                        goto LABEL_33;
                      }
                      CFStringRef v46 = @"conflicting %@ configuration";
                      if (v48)
                      {
                        int v49 = CFEqual(Configuration, v48);
                        if (v49) {
                          goto LABEL_43;
                        }
LABEL_33:
                        CFStringRef v46 = @"conflicting %@ configuration";
                      }
LABEL_34:
                      CFStringRef Copy = CFStringCreateWithFormat(0, 0, v46, v40);
                      int v49 = 0;
                      goto LABEL_43;
                    }
                    int v49 = 1;
                  }
                  else
                  {
                    CFStringRef Copy = CFStringCreateWithFormat(0, 0, @"conflicting %@ enable/disable", v40);
                    int v49 = 0;
                    if (!v41)
                    {
                      if (!v43) {
                        goto LABEL_38;
                      }
LABEL_37:
                      CFRelease(v43);
                      goto LABEL_38;
                    }
                  }
LABEL_43:
                  CFRelease(v41);
                  if (v43) {
                    goto LABEL_37;
                  }
LABEL_38:
                  if (v49)
                  {
                    BOOL v50 = v37 == v38++;
                    if (!v50) {
                      continue;
                    }
                  }
                  goto LABEL_72;
                }
              }
              CFStringRef Copy = 0;
LABEL_72:
              SCNetworkServiceRemove(v20);
              CFRelease(v20);
              CFRelease(v21);
              CFArrayRef v5 = v270;
              CFIndex v8 = v268;
              CFIndex v9 = v272;
LABEL_73:
              BOOL v85 = _sc_log == 1 || _sc_debug != 0;
              CFArrayRef Mutable = v275;
              if (Copy)
              {
                if (v85)
                {
                  int v86 = __log_SCNetworkConfiguration();
                  uint64_t v87 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v86, (os_log_type_t)v87))
                  {
                    uint64_t v88 = _os_log_pack_size();
                    CFIndex v96 = v9;
                    stat v97 = (char *)&v265
                        - ((MEMORY[0x1F4188790](v88, v89, v90, v91, v92, v93, v94, v95) + 15) & 0xFFFFFFFFFFFFFFF0);
                    __error();
                    uint64_t v98 = _os_log_pack_fill();
                    CFStringRef ServiceID = SCNetworkServiceGetServiceID(ValueAtIndex);
                    CFStringRef Name = SCNetworkServiceGetName(ValueAtIndex);
                    *(_DWORD *)uint64_t v98 = v266;
                    *(void *)(v98 + 4) = ServiceID;
                    CFIndex v8 = v268;
                    *(_WORD *)(v98 + 12) = 2112;
                    *(void *)(v98 + 14) = Name;
                    *(_WORD *)(v98 + 22) = 2112;
                    *(void *)(v98 + 24) = v274;
                    *(_WORD *)(v98 + 32) = 2080;
                    *(void *)(v98 + 34) = v273;
                    *(_WORD *)(v98 + 42) = 2112;
                    *(void *)(v98 + 44) = Copy;
                    CFArrayRef Mutable = v275;
                    v101 = v97;
                    CFIndex v9 = v96;
                    __SC_log_send(6, (uint64_t)v86, v87, v101);
                    CFArrayRef v5 = v270;
                  }
                }
                CFRelease(Copy);
              }
              else
              {
                if (v85)
                {
                  uint64_t v102 = __log_SCNetworkConfiguration();
                  uint64_t v103 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v102, (os_log_type_t)v103))
                  {
                    uint64_t v104 = _os_log_pack_size();
                    v112 = (char *)&v265
                         - ((MEMORY[0x1F4188790](v104, v105, v106, v107, v108, v109, v110, v111) + 15) & 0xFFFFFFFFFFFFFFF0);
                    __error();
                    CFArrayRef Mutable = v275;
                    uint64_t v113 = _os_log_pack_fill();
                    *(_DWORD *)uint64_t v113 = v271;
                    *(void *)(v113 + 4) = v274;
                    *(_WORD *)(v113 + 12) = 2080;
                    *(void *)(v113 + 14) = v273;
                    __SC_log_send(6, (uint64_t)v102, v103, v112);
                  }
                }
                v279.CFIndex length = CFArrayGetCount(Mutable);
                v279.io_name_t location = 0;
                v114 = (const void *)v274;
                if (!CFArrayContainsValue(Mutable, v279, (const void *)v274)) {
                  CFArrayAppendValue(Mutable, v114);
                }
              }
              goto LABEL_89;
            }
            CFStringRef v67 = @"could not create service for interface";
          }
          else
          {
            CFStringRef v67 = @"could not get interface for service";
          }
          CFStringRef Copy = CFStringCreateCopy(0, v67);
          goto LABEL_73;
        }
LABEL_65:
        BOOL v70 = _sc_log != 1 && _sc_debug == 0;
        CFArrayRef Mutable = v275;
        if (v70) {
          goto LABEL_89;
        }
        uint64_t v51 = __log_SCNetworkConfiguration();
        uint64_t v52 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
          goto LABEL_89;
        }
        uint64_t v71 = _os_log_pack_size();
        CFStringRef v79 = v13;
        uint64_t v62 = (char *)&v265
            - ((MEMORY[0x1F4188790](v71, v72, v73, v74, v75, v76, v77, v78) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v80 = _os_log_pack_fill();
        CFIndex v81 = v9;
        CFStringRef v82 = SCNetworkServiceGetServiceID(ValueAtIndex);
        CFStringRef v83 = SCNetworkServiceGetName(ValueAtIndex);
        *(_DWORD *)uint64_t v80 = v265;
        *(void *)(v80 + 4) = v82;
        CFIndex v9 = v81;
        *(_WORD *)(v80 + 12) = 2112;
        *(void *)(v80 + 14) = v83;
        *(_WORD *)(v80 + 22) = 2112;
        *(void *)(v80 + 24) = v79;
LABEL_57:
        CFArrayRef Mutable = v275;
        __SC_log_send(6, (uint64_t)v51, v52, v62);
        CFArrayRef v5 = v270;
LABEL_89:
        if (++v9 == v8) {
          goto LABEL_90;
        }
      }
      BOOL v50 = _sc_log != 1 && _sc_debug == 0;
      if (v50) {
        goto LABEL_89;
      }
      uint64_t v51 = __log_SCNetworkConfiguration();
      uint64_t v52 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
        goto LABEL_89;
      }
LABEL_56:
      uint64_t v54 = _os_log_pack_size();
      uint64_t v62 = (char *)&v265 - ((MEMORY[0x1F4188790](v54, v55, v56, v57, v58, v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v63 = _os_log_pack_fill();
      CFIndex v64 = v9;
      CFStringRef v65 = SCNetworkServiceGetServiceID(ValueAtIndex);
      CFStringRef v66 = SCNetworkServiceGetName(ValueAtIndex);
      *(_DWORD *)uint64_t v63 = v271;
      *(void *)(v63 + 4) = v65;
      CFIndex v9 = v64;
      *(_WORD *)(v63 + 12) = 2112;
      *(void *)(v63 + 14) = v66;
      goto LABEL_57;
    }
  }
LABEL_90:
  CFArrayRef v115 = (const __CFArray *)SCBridgeInterfaceCopyAll(v269);
  if (v115)
  {
    CFArrayRef v116 = v115;
    *(void *)&long long v272 = CFArrayGetCount(v115);
    if ((uint64_t)v272 >= 1)
    {
      CFIndex v118 = 0;
      *(void *)&long long v117 = 138412290;
      long long v273 = v117;
      *(void *)&long long v271 = v116;
      do
      {
        *(void *)&long long v274 = v118;
        v119 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v116, v118);
        CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v119);
        if (MemberInterfaces)
        {
          CFArrayRef v121 = MemberInterfaces;
          CFIndex v122 = CFArrayGetCount(MemberInterfaces);
          if (v122 >= 1)
          {
            CFIndex v123 = v122;
            for (CFIndex k = 0; k != v123; ++k)
            {
              v125 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v121, k);
              CFStringRef v126 = SCNetworkInterfaceGetBSDName(v125);
              if (v126)
              {
                CFStringRef v127 = v126;
                if (thinRemove(Mutable, v126))
                {
                  if (_sc_log == 1 || _sc_debug != 0)
                  {
                    v129 = __log_SCNetworkConfiguration();
                    uint64_t v130 = _SC_syslog_os_log_mapping(6);
                    if (__SC_log_enabled(6, v129, (os_log_type_t)v130))
                    {
                      uint64_t v131 = _os_log_pack_size();
                      v139 = (char *)&v265
                           - ((MEMORY[0x1F4188790](v131, v132, v133, v134, v135, v136, v137, v138) + 15) & 0xFFFFFFFFFFFFFFF0);
                      __error();
                      CFArrayRef Mutable = v275;
                      uint64_t v140 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v140 = v273;
                      *(void *)(v140 + 4) = v127;
                      __SC_log_send(6, (uint64_t)v129, v130, v139);
                    }
                  }
                }
              }
            }
          }
        }
        CFIndex v118 = v274 + 1;
        CFArrayRef v116 = (const __CFArray *)v271;
      }
      while ((void)v274 + 1 != (void)v272);
    }
    CFRelease(v116);
    CFArrayRef v5 = v270;
  }
  CFArrayRef v141 = SCVLANInterfaceCopyAll(v269);
  if (v141)
  {
    CFArrayRef v142 = v141;
    CFIndex v143 = CFArrayGetCount(v141);
    if (v143 >= 1)
    {
      CFIndex v145 = v143;
      CFIndex v146 = 0;
      *(void *)&long long v144 = 138412290;
      long long v274 = v144;
      do
      {
        v147 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v142, v146);
        SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v147);
        CFStringRef v149 = SCNetworkInterfaceGetBSDName(PhysicalInterface);
        if (v149)
        {
          CFStringRef v150 = v149;
          if (thinRemove(Mutable, v149))
          {
            if (_sc_log == 1 || _sc_debug != 0)
            {
              v152 = __log_SCNetworkConfiguration();
              uint64_t v153 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v152, (os_log_type_t)v153))
              {
                uint64_t v154 = _os_log_pack_size();
                v162 = (char *)&v265
                     - ((MEMORY[0x1F4188790](v154, v155, v156, v157, v158, v159, v160, v161) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                CFArrayRef Mutable = v275;
                uint64_t v163 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v163 = v274;
                *(void *)(v163 + 4) = v150;
                __SC_log_send(6, (uint64_t)v152, v153, v162);
              }
            }
          }
        }
        ++v146;
      }
      while (v145 != v146);
    }
    CFRelease(v142);
    CFArrayRef v5 = v270;
  }
  if (!v5) {
    goto LABEL_145;
  }
  CFIndex v164 = CFArrayGetCount(v5);
  if (v164 < 1) {
    goto LABEL_145;
  }
  CFIndex v166 = v164;
  int v167 = 0;
  CFIndex v168 = 0;
  v169 = &_sc_log;
  *(void *)&long long v165 = 138412802;
  long long v272 = v165;
  do
  {
    v170 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, v168);
    v171 = SCNetworkServiceGetInterface(v170);
    CFStringRef v172 = SCNetworkInterfaceGetBSDName(v171);
    if (v172)
    {
      CFStringRef v173 = v172;
      v280.CFIndex length = CFArrayGetCount(Mutable);
      v280.io_name_t location = 0;
      if (CFArrayContainsValue(Mutable, v280, v173))
      {
        if (*v169 == 1 || _sc_debug != 0 || _sc_verbose != 0)
        {
          v176 = __log_SCNetworkConfiguration();
          uint64_t v177 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v176, (os_log_type_t)v177))
          {
            uint64_t v178 = _os_log_pack_size();
            *(void *)&long long v273 = &v265;
            uint64_t v186 = MEMORY[0x1F4188790](v178, v179, v180, v181, v182, v183, v184, v185);
            LODWORD(v274) = v167;
            v187 = (char *)&v265 - ((v186 + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v188 = _os_log_pack_fill();
            v189 = v169;
            CFStringRef v190 = SCNetworkServiceGetServiceID(v170);
            CFStringRef v191 = SCNetworkServiceGetName(v170);
            *(_DWORD *)uint64_t v188 = v272;
            *(void *)(v188 + 4) = v190;
            v169 = v189;
            *(_WORD *)(v188 + 12) = 2112;
            *(void *)(v188 + 14) = v191;
            *(_WORD *)(v188 + 22) = 2112;
            *(void *)(v188 + 24) = v173;
            CFArrayRef Mutable = v275;
            v192 = v187;
            int v167 = v274;
            __SC_log_send(6, (uint64_t)v176, v177, v192);
            CFArrayRef v5 = v270;
          }
        }
        SCNetworkServiceRemove(v170);
        ++v167;
      }
    }
    ++v168;
  }
  while (v166 != v168);
  if (v167 > 0)
  {
    BOOL v193 = *v169 != 1 && _sc_debug == 0;
    if (v193
      || (v194 = __log_SCNetworkConfiguration(),
          uint64_t v195 = _SC_syslog_os_log_mapping(5),
          !__SC_log_enabled(5, v194, (os_log_type_t)v195)))
    {
      uint64_t v207 = 1;
    }
    else
    {
      uint64_t v196 = _os_log_pack_size();
      v204 = (char *)&v265
           - ((MEMORY[0x1F4188790](v196, v197, v198, v199, v200, v201, v202, v203) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v205 = _os_log_pack_fill();
      v206 = "s";
      if (v167 == 1) {
        v206 = "";
      }
      *(_DWORD *)uint64_t v205 = 67109378;
      *(_DWORD *)(v205 + 4) = v167;
      *(_WORD *)(v205 + 8) = 2080;
      *(void *)(v205 + 10) = v206;
      __SC_log_send(5, (uint64_t)v194, v195, v204);
      uint64_t v207 = 1;
    }
  }
  else
  {
LABEL_145:
    uint64_t v207 = 0;
  }
  CFArrayRef Value = (const __CFArray *)SCPreferencesGetValue(v267, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFIndex v210 = CFArrayGetCount(Value);
    CFArrayRef v211 = v275;
    if (v210 >= 1)
    {
      LODWORD(v271) = v207;
      v212 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      CFIndex v213 = CFArrayGetCount(Value);
      if (v213 >= 1)
      {
        CFIndex v215 = v213;
        v216 = 0;
        CFIndex v217 = 0;
        *(void *)&long long v214 = 138412290;
        long long v272 = v214;
        *(void *)&long long v273 = v212;
        while (1)
        {
          CFDictionaryRef v218 = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v217);
          v219 = CFDictionaryGetValue(v218, @"BSD Name");
          v281.CFIndex length = CFArrayGetCount(v211);
          v281.io_name_t location = 0;
          if (CFArrayContainsValue(v211, v281, v219))
          {
            int v220 = CFDictionaryContainsKey(v218, @"Active");
            BOOL v222 = _sc_log == 1 || _sc_debug != 0;
            if (!v220)
            {
              if (_sc_verbose) {
                BOOL v222 = 1;
              }
              if (v222)
              {
                v237 = __log_SCNetworkConfiguration();
                uint64_t v238 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v237, (os_log_type_t)v238))
                {
                  uint64_t v239 = _os_log_pack_size();
                  int v247 = (int)v216;
                  v216 = (char *)&v265
                       - ((MEMORY[0x1F4188790](v239, v240, v241, v242, v243, v244, v245, v246) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  CFArrayRef v211 = v275;
                  uint64_t v248 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v248 = v272;
                  *(void *)(v248 + 4) = v219;
                  v249 = v216;
                  LODWORD(v216) = v247;
                  __SC_log_send(6, (uint64_t)v237, v238, v249);
                  v212 = (__CFArray *)v273;
                }
              }
              v216 = (char *)(v216 + 1);
              goto LABEL_169;
            }
            if (v222)
            {
              v223 = __log_SCNetworkConfiguration();
              uint64_t v224 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v223, (os_log_type_t)v224))
              {
                uint64_t v225 = _os_log_pack_size();
                *(void *)&long long v274 = &v265;
                v233 = v216;
                v234 = (char *)&v265
                     - ((MEMORY[0x1F4188790](v225, v226, v227, v228, v229, v230, v231, v232) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                CFArrayRef v211 = v275;
                uint64_t v235 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v235 = v272;
                *(void *)(v235 + 4) = v219;
                v236 = v234;
                v216 = v233;
                v212 = (__CFArray *)v273;
                __SC_log_send(6, (uint64_t)v223, v224, v236);
              }
            }
          }
          CFArrayAppendValue(v212, v218);
LABEL_169:
          if (v215 == ++v217) {
            goto LABEL_177;
          }
        }
      }
      LODWORD(v216) = 0;
LABEL_177:
      SCPreferencesSetValue(v267, @"Interfaces", v212);
      CFRelease(v212);
      CFArrayRef v5 = v270;
      uint64_t v207 = v271;
      if ((int)v216 > 0)
      {
        BOOL v251 = _sc_log != 1 && _sc_debug == 0;
        if (v251
          || (v252 = __log_SCNetworkConfiguration(),
              uint64_t v253 = _SC_syslog_os_log_mapping(6),
              !__SC_log_enabled(6, v252, (os_log_type_t)v253)))
        {
          uint64_t v207 = 1;
        }
        else
        {
          uint64_t v254 = _os_log_pack_size();
          v262 = (char *)&v265
               - ((MEMORY[0x1F4188790](v254, v255, v256, v257, v258, v259, v260, v261) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          CFArrayRef v211 = v275;
          uint64_t v263 = _os_log_pack_fill();
          v264 = "s";
          if (v216 == 1) {
            v264 = "";
          }
          *(_DWORD *)uint64_t v263 = 67109378;
          *(_DWORD *)(v263 + 4) = v216;
          *(_WORD *)(v263 + 8) = 2080;
          *(void *)(v263 + 10) = v264;
          __SC_log_send(6, (uint64_t)v252, v253, v262);
          uint64_t v207 = 1;
        }
      }
    }
  }
  else
  {
    CFArrayRef v211 = v275;
  }
  if (v5) {
    CFRelease(v5);
  }
  CFRelease(v211);
  return v207;
}

uint64_t __SCNetworkConfigurationCleanServiceOrderIssues(const __SCPreferences *a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  SCPreferencesRef v70 = a1;
  CFArrayRef v1 = SCNetworkSetCopyAll(a1);
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFIndex Count = CFArrayGetCount(v1);
    if (Count < 1)
    {
      LOBYTE(v6) = 0;
      goto LABEL_47;
    }
    CFIndex v5 = Count;
    int v6 = 0;
    CFIndex v7 = 0;
    *(void *)&long long v4 = 138412546;
    long long v68 = v4;
    CFIndex v63 = Count;
    CFArrayRef v64 = v2;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v2, v7);
      CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
      CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
      if (!ServiceOrder) {
        goto LABEL_43;
      }
      CFArrayRef v10 = ServiceOrder;
      CFIndex v11 = CFArrayGetCount(ServiceOrder);
      if (v11 < 1) {
        goto LABEL_43;
      }
      CFIndex v12 = v11;
      SCNetworkSetRef v65 = ValueAtIndex;
      CFIndex v67 = v7;
      CFSetRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v10);
      CFIndex v15 = 0;
      do
      {
        CFStringRef v16 = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v15);
        if (CFSetContainsValue(Mutable, v16))
        {
          if (_sc_log == 1 || _sc_debug != 0)
          {
            uint64_t v18 = __log_SCNetworkConfiguration();
            uint64_t v19 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
            {
              uint64_t v20 = _os_log_pack_size();
              CFIndex v28 = (char *)&v62
                  - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v29 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v29 = v68;
              *(void *)(v29 + 4) = SetID;
              *(_WORD *)(v29 + 12) = 2112;
              *(void *)(v29 + 14) = v16;
              uint64_t v30 = (uint64_t)v18;
              uint64_t v31 = v19;
              CFIndex v32 = v28;
              goto LABEL_14;
            }
          }
          goto LABEL_24;
        }
        CFSetAddValue(Mutable, v16);
        SCNetworkServiceRef v33 = SCNetworkServiceCopy(v70, v16);
        if (!v33)
        {
          if (_sc_log == 1 || _sc_debug != 0)
          {
            CFIndex v36 = __log_SCNetworkConfiguration();
            uint64_t v37 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v36, (os_log_type_t)v37))
            {
              uint64_t v38 = _os_log_pack_size();
              CFStringRef v46 = (char *)&v62
                  - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v47 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v47 = v68;
              *(void *)(v47 + 4) = SetID;
              *(_WORD *)(v47 + 12) = 2112;
              *(void *)(v47 + 14) = v16;
              uint64_t v30 = (uint64_t)v36;
              uint64_t v31 = v37;
              CFIndex v32 = v46;
LABEL_14:
              __SC_log_send(5, v30, v31, v32);
            }
          }
LABEL_24:
          CFArrayRemoveValueAtIndex(MutableCopy, v15);
          --v12;
          goto LABEL_25;
        }
        SCNetworkServiceRef v34 = v33;
        if (__SCNetworkServiceExists((uint64_t)v33))
        {
          CFRelease(v34);
          ++v15;
          continue;
        }
        if (_sc_log == 1 || _sc_debug != 0)
        {
          int v49 = __log_SCNetworkConfiguration();
          uint64_t v50 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v49, (os_log_type_t)v50))
          {
            uint64_t v51 = _os_log_pack_size();
            CFStringRef v66 = &v62;
            uint64_t v59 = (char *)&v62
                - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v60 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v60 = v68;
            *(void *)(v60 + 4) = SetID;
            *(_WORD *)(v60 + 12) = 2112;
            *(void *)(v60 + 14) = v16;
            __SC_log_send(5, (uint64_t)v49, v50, v59);
          }
        }
        CFArrayRemoveValueAtIndex(MutableCopy, v15);
        --v12;
        CFRelease(v34);
LABEL_25:
        int v6 = 1;
      }
      while (v15 < v12);
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (MutableCopy)
      {
        CFArrayRef v2 = v64;
        if (v6) {
          SCNetworkSetSetServiceOrder(v65, MutableCopy);
        }
        CFRelease(MutableCopy);
      }
      else
      {
        CFArrayRef v2 = v64;
      }
      CFIndex v5 = v63;
      CFIndex v7 = v67;
LABEL_43:
      if (++v7 == v5)
      {
LABEL_47:
        CFRelease(v2);
        return v6;
      }
    }
  }
  LOBYTE(v6) = 0;
  return v6;
}

void thinInlineBackup(const __CFString *a1, const __SCPreferences *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = (char *)&v20 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 138412290;
    *(void *)(v15 + 4) = a1;
    __SC_log_send(5, (uint64_t)v4, v5, v14);
  }
  CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"%@ : ", a1);
  uint64_t v17 = _SC_cfstring_to_cstring(a1, 0, 0, 0x600u);
  if (!v17) {
    goto LABEL_8;
  }
  uint64_t v18 = v17;
  memset(&v20, 0, sizeof(v20));
  if (!strptime((const char *)v17, "%Y-%m-%d %H:%M:%S", &v20))
  {
    CFAllocatorDeallocate(0, v18);
LABEL_8:
    CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"preferences-%@.plist", a1);
    goto LABEL_9;
  }
  CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"preferences-%4d-%02d-%02d-%02d%02d%02d.plist", (v20.tm_year + 1900), (v20.tm_mon + 1), v20.tm_mday, v20.tm_hour, v20.tm_min, v20.tm_sec);
  CFAllocatorDeallocate(0, v18);
  if (!v19) {
    goto LABEL_8;
  }
LABEL_9:
  savePreferences(a2, v19, (uint64_t)v16, 0, 0);
  CFRelease(v19);
  CFRelease(v16);
}

void thinInlineModel(const void *a1, const __SCPreferences *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  long long v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = (char *)v18 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 138412290;
    *(void *)(v15 + 4) = a1;
    __SC_log_send(5, (uint64_t)v4, v5, v14);
  }
  CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"%@:", a1);
  CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"preferences-%@.plist", a1);
  savePreferences(a2, v17, (uint64_t)v16, @"Model", a1);
  CFRelease(v17);
  CFRelease(v16);
}

uint64_t thinRemove(const __CFArray *a1, const void *a2)
{
  v6.CFIndex length = CFArrayGetCount(a1);
  v6.io_name_t location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue == -1) {
    return 0;
  }
  CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  return 1;
}

Boolean SCPreferencesAddValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  if (!prefs)
  {
    int v6 = 3001;
    goto LABEL_5;
  }
  __SCPreferencesAccess((uint64_t)prefs);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)prefs + 35), key))
  {
    int v6 = 1005;
LABEL_5:
    _SCErrorSet(v6);
    return 0;
  }
  CFDictionaryAddValue(*((CFMutableDictionaryRef *)prefs + 35), key, value);
  Boolean result = 1;
  *((unsigned char *)prefs + 305) = 1;
  return result;
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)prefs + 35), key, value);
    Boolean result = 1;
    *((unsigned char *)prefs + 305) = 1;
  }
  else
  {
    _SCErrorSet(3001);
    return 0;
  }
  return result;
}

uint64_t SCPreferencesRemoveAllValues(uint64_t a1)
{
  if (a1)
  {
    __SCPreferencesAccess(a1);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 280));
    uint64_t result = 1;
    *(unsigned char *)(a1 + 305) = 1;
  }
  else
  {
    _SCErrorSet(3001);
    return 0;
  }
  return result;
}

Boolean SCPreferencesRemoveValue(SCPreferencesRef prefs, CFStringRef key)
{
  if (prefs)
  {
    __SCPreferencesAccess((uint64_t)prefs);
    if (CFDictionaryContainsKey(*((CFDictionaryRef *)prefs + 35), key))
    {
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)prefs + 35), key);
      Boolean result = 1;
      *((unsigned char *)prefs + 305) = 1;
      return result;
    }
    int v5 = 1004;
  }
  else
  {
    int v5 = 3001;
  }
  _SCErrorSet(v5);
  return 0;
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    _SCErrorSet(3001);
    return 0;
  }
  memset(&v240, 0, sizeof(v240));
  int v2 = *((unsigned __int8 *)prefs + 112);
  if (!*((unsigned char *)prefs + 112) && !SCPreferencesLock(prefs, 1u))
  {
    CFStringRef v16 = __log_SCPreferences();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = (char *)&v238 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v16, v17, v26);
    }
    return 0;
  }
  if (*((void *)prefs + 39))
  {
    if (__SCPreferencesCommitChanges_helper((uint64_t)prefs))
    {
      *((unsigned char *)prefs + 305) = 0;
      Boolean v3 = 1;
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (!*((unsigned char *)prefs + 305)) {
    goto LABEL_48;
  }
  if (__SCPreferencesIsEmpty((uint64_t)prefs))
  {
    value = 0;
    CFDictionaryRef v4 = (const __CFDictionary *)*((void *)prefs + 12);
    if (v4)
    {
      if (CFDictionaryGetValueIfPresent(v4, @"remove-when-empty", (const void **)&value))
      {
        int v5 = value;
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (v5)
        {
          if (CFGetTypeID(v5) == TypeID && CFBooleanGetValue((CFBooleanRef)value))
          {
            unlink(*((const char **)prefs + 13));
            memset(&v240, 0, sizeof(v240));
            goto LABEL_43;
          }
        }
      }
    }
  }
  uint64_t v7 = (const std::__fs::filesystem::path *)*((void *)prefs + 13);
  value = 0;
  if (stat((const char *)v7, &v240) == -1)
  {
    if (*__error() != 2)
    {
      uint64_t v90 = __error();
      _SCErrorSet(*v90);
      uint64_t v91 = __log_SCPreferences();
      uint64_t v92 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v91, (os_log_type_t)v92))
      {
        uint64_t v93 = _os_log_pack_size();
        v101 = (char *)&v238
             - ((MEMORY[0x1F4188790](v93, v94, v95, v96, v97, v98, v99, v100) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v102 = _os_log_pack_fill();
        uint64_t v103 = __error();
        uint64_t v104 = strerror(*v103);
        *(_DWORD *)uint64_t v102 = 136315138;
        *(void *)(v102 + 4) = v104;
        __SC_log_send(6, (uint64_t)v91, v92, v101);
      }
      goto LABEL_78;
    }
    memset(&v240, 0, sizeof(v240));
    v240.st_mode = 420;
    v240.st_uid = geteuid();
    v240.st_gid = getegid();
  }
  size_t v8 = strlen((const char *)v7) + 5;
  uint64_t v9 = (std::__fs::filesystem::path *)CFAllocatorAllocate(0, v8, 0);
  snprintf((char *)v9, v8, "%s-new", (const char *)v7);
  CFDictionaryRef v10 = (const __CFDictionary *)*((void *)prefs + 12);
  if (!v10 || !CFDictionaryGetValueIfPresent(v10, @"ProtectionClass", (const void **)&value))
  {
    int v27 = open((const char *)v9, 513, v240.st_mode);
    goto LABEL_31;
  }
  uint64_t v11 = value;
  CFTypeID v12 = CFStringGetTypeID();
  if (v11)
  {
    if (CFGetTypeID(v11) == v12 && CFStringGetLength((CFStringRef)value) == 1)
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)value, 0x600u);
      if (CStringPtr)
      {
        int v14 = *(unsigned __int8 *)CStringPtr;
        if ((v14 - 71) >= 0xFFFFFFFA)
        {
          int v27 = open_dprotected_np((const char *)v9, 513, v14 - 64, 0, v240.st_mode);
LABEL_31:
          int v28 = v27;
          if (v27 == -1)
          {
            uint64_t v75 = __error();
            _SCErrorSet(*v75);
            uint64_t v76 = __log_SCPreferences();
            uint64_t v77 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v76, (os_log_type_t)v77))
            {
              uint64_t v78 = _os_log_pack_size();
              int v86 = (char *)&v238
                  - ((MEMORY[0x1F4188790](v78, v79, v80, v81, v82, v83, v84, v85) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v87 = _os_log_pack_fill();
              uint64_t v88 = __error();
              uint64_t v89 = strerror(*v88);
              *(_DWORD *)uint64_t v87 = 136315138;
              *(void *)(v87 + 4) = v89;
              __SC_log_send(5, (uint64_t)v76, v77, v86);
            }
          }
          else
          {
            fchown(v27, v240.st_uid, v240.st_gid);
            fchmod(v28, v240.st_mode);
            CFDataRef Data = CFPropertyListCreateData(0, *((CFPropertyListRef *)prefs + 35), kCFPropertyListBinaryFormat_v1_0, 0, 0);
            if (!Data)
            {
              _SCErrorSet(1001);
              uint64_t v105 = __log_SCPreferences();
              uint64_t v106 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v105, (os_log_type_t)v106))
              {
                uint64_t v107 = _os_log_pack_size();
                CFArrayRef v115 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v107, v108, v109, v110, v111, v112, v113, v114) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                __SC_log_send(6, (uint64_t)v105, v106, v115);
              }
              CFArrayRef v116 = __log_SCPreferences();
              uint64_t v117 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v116, (os_log_type_t)v117))
              {
                uint64_t v118 = _os_log_pack_size();
                CFStringRef v126 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v118, v119, v120, v121, v122, v123, v124, v125) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v127 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v127 = 136315138;
                *(void *)(v127 + 4) = v7;
                __SC_log_send(6, (uint64_t)v116, v117, v126);
              }
              CFAllocatorDeallocate(0, v9);
              close(v28);
              goto LABEL_78;
            }
            CFDataRef v30 = Data;
            BytePtr = CFDataGetBytePtr(Data);
            CFIndex Length = CFDataGetLength(v30);
            if (Length)
            {
              CFIndex v33 = Length;
              size_t v34 = Length;
              do
              {
                ssize_t v35 = write(v28, BytePtr, v34);
                if (v35 == -1)
                {
                  if (*__error() != 4) {
                    goto LABEL_67;
                  }
                  ssize_t v35 = 0;
                }
                BytePtr += v35;
                v34 -= v35;
              }
              while (v34);
              if (v33 != -1) {
                goto LABEL_40;
              }
LABEL_67:
              v128 = __error();
              _SCErrorSet(*v128);
              v129 = __log_SCPreferences();
              uint64_t v130 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v129, (os_log_type_t)v130))
              {
                uint64_t v131 = _os_log_pack_size();
                v139 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v131, v132, v133, v134, v135, v136, v137, v138) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v140 = _os_log_pack_fill();
                CFArrayRef v141 = __error();
                CFArrayRef v142 = strerror(*v141);
                *(_DWORD *)uint64_t v140 = 136315138;
                *(void *)(v140 + 4) = v142;
                __SC_log_send(6, (uint64_t)v129, v130, v139);
              }
              CFIndex v143 = __log_SCPreferences();
              uint64_t v144 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v143, (os_log_type_t)v144))
              {
                uint64_t v145 = _os_log_pack_size();
                uint64_t v153 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v145, v146, v147, v148, v149, v150, v151, v152) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v154 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v154 = 136315138;
                *(void *)(v154 + 4) = v9;
                __SC_log_send(6, (uint64_t)v143, v144, v153);
              }
              unlink((const char *)v9);
              CFAllocatorDeallocate(0, v9);
              close(v28);
              goto LABEL_77;
            }
LABEL_40:
            if (close(v28) == -1)
            {
              uint64_t v155 = __error();
              _SCErrorSet(*v155);
              uint64_t v156 = __log_SCPreferences();
              uint64_t v157 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v156, (os_log_type_t)v157))
              {
                uint64_t v158 = _os_log_pack_size();
                CFIndex v166 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v158, v159, v160, v161, v162, v163, v164, v165) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v167 = _os_log_pack_fill();
                CFIndex v168 = __error();
                v169 = strerror(*v168);
                *(_DWORD *)uint64_t v167 = 136315138;
                *(void *)(v167 + 4) = v169;
                __SC_log_send(6, (uint64_t)v156, v157, v166);
              }
              v170 = __log_SCPreferences();
              uint64_t v171 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v170, (os_log_type_t)v171))
              {
                uint64_t v172 = _os_log_pack_size();
                uint64_t v180 = (char *)&v238
                     - ((MEMORY[0x1F4188790](v172, v173, v174, v175, v176, v177, v178, v179) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v181 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v181 = 136315138;
                *(void *)(v181 + 4) = v9;
                __SC_log_send(6, (uint64_t)v170, v171, v180);
              }
              unlink((const char *)v9);
              CFAllocatorDeallocate(0, v9);
LABEL_77:
              CFRelease(v30);
              goto LABEL_78;
            }
            CFRelease(v30);
            rename(v9, v7, v36);
            if (v37 != -1)
            {
              CFAllocatorDeallocate(0, v9);
              if (stat((const char *)v7, &v240) == -1)
              {
                CFArrayRef v211 = __error();
                _SCErrorSet(*v211);
                v212 = __log_SCPreferences();
                uint64_t v213 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v212, (os_log_type_t)v213))
                {
                  uint64_t v214 = _os_log_pack_size();
                  BOOL v222 = (char *)&v238
                       - ((MEMORY[0x1F4188790](v214, v215, v216, v217, v218, v219, v220, v221) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  uint64_t v223 = _os_log_pack_fill();
                  uint64_t v224 = __error();
                  uint64_t v225 = strerror(*v224);
                  *(_DWORD *)uint64_t v223 = 136315138;
                  *(void *)(v223 + 4) = v225;
                  __SC_log_send(6, (uint64_t)v212, v213, v222);
                }
                uint64_t v226 = __log_SCPreferences();
                uint64_t v227 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v226, (os_log_type_t)v227))
                {
                  uint64_t v228 = _os_log_pack_size();
                  v236 = (char *)&v238
                       - ((MEMORY[0x1F4188790](v228, v229, v230, v231, v232, v233, v234, v235) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  uint64_t v237 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v237 = 136315138;
                  *(void *)(v237 + 4) = v9;
                  __SC_log_send(6, (uint64_t)v226, v227, v236);
                }
                goto LABEL_78;
              }
LABEL_43:
              uint64_t v38 = (const void *)*((void *)prefs + 18);
              if (v38) {
                CFRelease(v38);
              }
              *((void *)prefs + 18) = __SCPSignatureFromStatbuf(&v240.st_dev);
              if (*((unsigned char *)prefs + 305))
              {
                uint64_t v39 = __log_SCPreferences();
                uint64_t v40 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v39, (os_log_type_t)v40))
                {
                  uint64_t v41 = _os_log_pack_size();
                  int v49 = (char *)&v238
                      - ((MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  uint64_t v50 = _os_log_pack_fill();
                  uint64_t v51 = *((void *)prefs + 13);
                  CFDataRef v52 = __SCPreferencesPrefsSize((uint64_t)prefs);
                  *(_DWORD *)uint64_t v50 = 136315394;
                  *(void *)(v50 + 4) = v51;
                  *(_WORD *)(v50 + 12) = 2048;
                  *(void *)(v50 + 14) = v52;
LABEL_50:
                  __SC_log_send(6, (uint64_t)v39, v40, v49);
                  goto LABEL_51;
                }
                goto LABEL_51;
              }
LABEL_48:
              uint64_t v39 = __log_SCPreferences();
              uint64_t v40 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v39, (os_log_type_t)v40))
              {
                uint64_t v53 = _os_log_pack_size();
                int v49 = (char *)&v238
                    - ((MEMORY[0x1F4188790](v53, v54, v55, v56, v57, v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v61 = _os_log_pack_fill();
                uint64_t v62 = *((void *)prefs + 13);
                *(_DWORD *)uint64_t v61 = 136315138;
                *(void *)(v61 + 4) = v62;
                goto LABEL_50;
              }
LABEL_51:
              int v63 = SCDynamicStoreNotifyValue(0, *((CFStringRef *)prefs + 23));
              if (v63)
              {
                Boolean v3 = v63;
                *((unsigned char *)prefs + 305) = 0;
                goto LABEL_79;
              }
              CFArrayRef v64 = __log_SCPreferences();
              uint64_t v65 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v64, (os_log_type_t)v65))
              {
                uint64_t v66 = _os_log_pack_size();
                uint64_t v74 = (char *)&v238
                    - ((MEMORY[0x1F4188790](v66, v67, v68, v69, v70, v71, v72, v73) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                *(_WORD *)_os_log_pack_fill() = 0;
                __SC_log_send(6, (uint64_t)v64, v65, v74);
              }
              int v15 = 1001;
              goto LABEL_56;
            }
            uint64_t v184 = __error();
            _SCErrorSet(*v184);
            uint64_t v185 = __log_SCPreferences();
            uint64_t v186 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v185, (os_log_type_t)v186))
            {
              uint64_t v187 = _os_log_pack_size();
              uint64_t v195 = (char *)&v238
                   - ((MEMORY[0x1F4188790](v187, v188, v189, v190, v191, v192, v193, v194) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v196 = _os_log_pack_fill();
              uint64_t v197 = __error();
              uint64_t v198 = strerror(*v197);
              *(_DWORD *)uint64_t v196 = 136315138;
              *(void *)(v196 + 4) = v198;
              __SC_log_send(6, (uint64_t)v185, v186, v195);
            }
            uint64_t v199 = __log_SCPreferences();
            uint64_t v200 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v199, (os_log_type_t)v200))
            {
              uint64_t v201 = _os_log_pack_size();
              v209 = (char *)&v238
                   - ((MEMORY[0x1F4188790](v201, v202, v203, v204, v205, v206, v207, v208) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v210 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v210 = 136315394;
              *(void *)(v210 + 4) = v9;
              *(_WORD *)(v210 + 12) = 2080;
              *(void *)(v210 + 14) = v7;
              __SC_log_send(6, (uint64_t)v199, v200, v209);
            }
          }
          CFAllocatorDeallocate(0, v9);
          goto LABEL_78;
        }
      }
    }
  }
  int v15 = 1002;
LABEL_56:
  _SCErrorSet(v15);
LABEL_78:
  Boolean v3 = 0;
LABEL_79:
  if (!v2)
  {
    int v182 = SCError();
    SCPreferencesUnlock(prefs);
    _SCErrorSet(v182);
  }
  return v3;
}

uint64_t __SCPreferencesCommitChanges_helper(uint64_t a1)
{
  v34[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  v34[0] = 0;
  int v33 = 0;
  CFTypeRef v32 = 0;
  mach_port_t v2 = *(_DWORD *)(a1 + 320);
  if (v2)
  {
    Boolean v3 = (mach_port_t *)(a1 + 320);
    if (*(unsigned char *)(a1 + 305))
    {
      if (!_SCSerialize(*(CFPropertyListRef *)(a1 + 280), v34, 0, 0))
      {
        int v33 = 1001;
        if (_sc_verbose)
        {
          uint64_t v7 = __log_SCPreferences();
          uint64_t v8 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v7, (os_log_type_t)v8))
          {
            uint64_t v9 = _os_log_pack_size();
            uint64_t v17 = (char *)&v32
                - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v7, v8, v17);
          }
          uint64_t v18 = __log_SCPreferences();
          uint64_t v19 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
          {
            uint64_t v20 = _os_log_pack_size();
            int v28 = (char *)&v32
                - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v29 = _os_log_pack_fill();
            uint64_t v30 = *(void *)(a1 + 104);
            *(_DWORD *)uint64_t v29 = 136315138;
            *(void *)(v29 + 4) = v30;
            __SC_log_send(5, (uint64_t)v18, v19, v28);
          }
        }
        goto LABEL_22;
      }
      mach_port_t v2 = *v3;
      CFDataRef v4 = v34[0];
    }
    else
    {
      CFDataRef v4 = 0;
    }
    int v5 = _SCHelperExec(v2, 104, v4, &v33, &v32);
    if (v34[0]) {
      CFRelease(v34[0]);
    }
    if (v5)
    {
      if (!v33)
      {
        if (*(unsigned char *)(a1 + 305))
        {
          int v6 = *(const void **)(a1 + 144);
          if (v6) {
            CFRelease(v6);
          }
          *(void *)(a1 + 144) = v32;
        }
        else if (v32)
        {
          CFRelease(v32);
        }
        *(unsigned char *)(a1 + 305) = 0;
        return 1;
      }
    }
    else if (*v3)
    {
      _SCHelperClose((mach_port_t *)(a1 + 320));
    }
  }
  else
  {
    int v33 = 1003;
  }
LABEL_22:
  if (v32) {
    CFRelease(v32);
  }
  _SCErrorSet(v33);
  return 0;
}

uint64_t SCNetworkInterfaceProviderCreate(const void *a1, const void *a2, uint64_t a3)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  if (!a1 || !a2 || a3)
  {
    int v11 = 1002;
LABEL_11:
    _SCErrorSet(v11);
    return 0;
  }
  uint64_t v5 = IPMonitorControlCreate();
  if (!v5)
  {
    int v11 = 1001;
    goto LABEL_11;
  }
  int v6 = (const void *)v5;
  values[0] = (void *)IPMonitorControlCopyInterfaceAdvisoryNotificationKey(@"[^/]+");
  CFArrayRef v7 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F1D510]);
  CFRelease(values[0]);
  uint64_t v8 = dispatch_queue_create("SCNetworkInterfaceProvider", 0);
  if (__SCNetworkInterfaceProviderRegisterClass_once != -1) {
    dispatch_once(&__SCNetworkInterfaceProviderRegisterClass_once, &__block_literal_global_6);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  uint64_t v10 = StoreObjectWrapperAllocate(Instance, v7, v8, &v13);
  CFRelease(v7);
  if (!v10)
  {
    dispatch_release(v8);
    CFRelease((CFTypeRef)Instance);
    CFRelease(v6);
    return 0;
  }
  *(void *)(Instance + 16) = v6;
  *(void *)(Instance + 24) = v10;
  *(void *)(Instance + 32) = v13;
  *(void *)(Instance + 40) = v8;
  *(void *)(Instance + 56) = CFRetain(a2);
  *(void *)(Instance + 64) = CFRetain(a1);
  return Instance;
}

const __SCDynamicStore *StoreObjectWrapperAllocate(uint64_t a1, const __CFArray *a2, NSObject *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  context.version = xmmword_1EDD20480;
  *(_OWORD *)&context.retain = *(_OWORD *)off_1EDD20490;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))qword_1EDD204A0;
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x10C0040AE459949uLL);
  *(void *)uint64_t v8 = a1;
  void v8[2] = 1;
  context.info = v8;
  uint64_t v9 = SCDynamicStoreCreate(0, @"SCNetworkInterfaceProvider", (SCDynamicStoreCallBack)StoreHandleChanges, &context);
  if (!v9)
  {
    uint64_t v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v23 = (char *)&context
          - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v24 + 4) = @"SCNetworkInterfaceProvider";
      __SC_log_send(5, (uint64_t)v13, v14, v23);
    }
    goto LABEL_12;
  }
  uint64_t v10 = v9;
  if (!SCDynamicStoreSetNotificationKeys(v9, 0, a2))
  {
    int v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
LABEL_10:
      uint64_t v25 = _os_log_pack_size();
      int v33 = (char *)&context
          - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v34 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v34 = 138412290;
      *(void *)(v34 + 4) = @"SCNetworkInterfaceProvider";
      __SC_log_send(5, (uint64_t)v11, v12, v33);
    }
LABEL_11:
    CFRelease(v10);
LABEL_12:
    ObjectWrapperRelease(v8);
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  if (a3 && !SCDynamicStoreSetDispatchQueue(v10, a3))
  {
    int v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12)) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_13:
  *a4 = v8;
  return v10;
}

uint64_t StoreHandleChanges(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *a3;
  if (*a3)
  {
    return SCNetworkInterfaceProviderCheck(result);
  }
  return result;
}

void SCNetworkInterfaceProviderSetEventHandler(uint64_t a1, uint64_t a2)
{
  void block[6] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    mach_port_t v2 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SCNetworkInterfaceProviderSetEventHandler_block_invoke;
    block[3] = &unk_1E55BB5C0;
    block[4] = a2;
    void block[5] = a1;
    dispatch_sync(v2, block);
  }
}

void __SCNetworkInterfaceProviderSetEventHandler_block_invoke(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v1 + 72))
  {
    mach_port_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v2, (os_log_type_t)v3)) {
      return;
    }
LABEL_6:
    CFDataRef v4 = (char *)v6 - ((_os_log_pack_size() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = "SCNetworkInterfaceProviderSetEventHandler_block_invoke";
    __SC_log_send(5, (uint64_t)v2, v3, v4);
    return;
  }
  if (*(void *)(v1 + 48))
  {
    mach_port_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v2, (os_log_type_t)v3)) {
      return;
    }
    goto LABEL_6;
  }
  *(void *)(*(void *)(a1 + 40) + 48) = _Block_copy(*(const void **)(a1 + 32));
}

void SCNetworkInterfaceProviderResume(uint64_t a1)
{
  v2[5] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = __SCNetworkInterfaceProviderResume_block_invoke;
  v2[3] = &__block_descriptor_tmp_3;
  v2[4] = a1;
  dispatch_async(v1, v2);
}

uint64_t __SCNetworkInterfaceProviderResume_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 1;
    return SCNetworkInterfaceProviderCheck(result);
  }
  return result;
}

uint64_t SCNetworkInterfaceProviderCheck(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 48))
    {
      uint64_t result = IPMonitorControlAnyInterfaceAdvisoryIsSet(*(void *)(result + 16));
      if (*(unsigned __int8 *)(v1 + 73) != result)
      {
        char v2 = result;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 48) + 16))();
        *(unsigned char *)(v1 + 73) = v2;
      }
    }
  }
  return result;
}

void __SCNetworkInterfaceProviderDeallocate(uint64_t a1)
{
  v2[5] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ____SCNetworkInterfaceProviderDeallocate_block_invoke;
    v2[3] = &__block_descriptor_tmp_5;
    v2[4] = a1;
    dispatch_sync(v1, v2);
  }
  else
  {
    SCNetworkInterfaceProviderDeallocate(a1);
  }
}

__CFString *__SCNetworkInterfaceProviderCopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFSetRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkInterfaceProvider %@ %@ <%p>", a1[8], a1[7], a1);
  return Mutable;
}

void SCNetworkInterfaceProviderDeallocate(uint64_t a1)
{
  *(unsigned char *)(a1 + 72) = 0;
  CFAllocatorRef v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 32);
  if (v3)
  {
    *(void *)uint64_t v3 = 0;
    ObjectWrapperRelease(v3);
    *(void *)(a1 + 32) = 0;
  }
  CFDataRef v4 = *(const __SCDynamicStore **)(a1 + 24);
  if (v4)
  {
    SCDynamicStoreSetDispatchQueue(v4, 0);
    uint64_t v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 24) = 0;
    }
  }
  int v6 = *(NSObject **)(a1 + 40);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(a1 + 40) = 0;
  }
  CFArrayRef v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    _Block_release(v7);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
}

void ObjectWrapperRelease(atomic_uint *a1)
{
  int add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit == 1)
  {
    free(a1);
  }
  else if (add_explicit <= 1)
  {
    ObjectWrapperRelease_cold_1();
  }
}

uint64_t ObjectWrapperRetain(uint64_t result)
{
  return result;
}

CFStringRef SCPreferencesPathCreateUniqueChild(SCPreferencesRef prefs, CFStringRef prefix)
{
  theDict[1] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    int v4 = 3001;
    goto LABEL_6;
  }
  theDict[0] = 0;
  if (getPath(prefs, prefix, theDict))
  {
    if (CFDictionaryContainsKey(theDict[0], @"__LINK__"))
    {
      int v4 = 1001;
LABEL_6:
      _SCErrorSet(v4);
      return 0;
    }
  }
  else if (SCError() != 1004)
  {
    return 0;
  }
  CFUUIDRef v6 = CFUUIDCreate(0);
  CFStringRef v7 = CFUUIDCreateString(0, v6);
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%@/%@", prefix, v7);
  CFRelease(v7);
  CFRelease(v6);
  CFDictionaryRef v8 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v8) {
    SCPreferencesPathCreateUniqueChild_cold_1();
  }
  CFDictionaryRef v9 = v8;
  if (!setPath((uint64_t)prefs, v5, v8))
  {
    CFRelease(v5);
    CFStringRef v5 = 0;
  }
  CFRelease(v9);
  return v5;
}

uint64_t setPath(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  CFDictionaryRef v3 = a3;
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a3 && (CFTypeID v5 = CFDictionaryGetTypeID(), CFGetTypeID(v3) != v5))
  {
    int v21 = 1002;
  }
  else
  {
    CFArrayRef v6 = normalizePath(a2);
    if (v6)
    {
      CFArrayRef v7 = v6;
      value[0] = 0;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count < 1)
      {
        CFArrayRef v20 = v7;
LABEL_26:
        __SCPreferencesAccess(a1);
        uint64_t v23 = *(const void **)(a1 + 280);
        if (v23) {
          CFRelease(v23);
        }
        if (v3) {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v3);
        }
        else {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        *(void *)(a1 + 280) = MutableCopy;
        uint64_t v22 = 1;
        *(unsigned char *)(a1 + 305) = 1;
        goto LABEL_52;
      }
      CFIndex v9 = Count;
      CFDictionaryRef v10 = 0;
      uint64_t v38 = 0;
      int v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (2)
      {
        CFIndex v12 = v9 - 1;
        CFSetRef Mutable = CFArrayCreateMutable(0, v9 - 1, v11);
        CFIndex v14 = v9 - 2;
        if ((unint64_t)v9 >= 2)
        {
          CFIndex v15 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v15);
            if (v15) {
              CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(v10, ValueAtIndex);
            }
            else {
              CFDictionaryRef v17 = (const __CFDictionary *)SCPreferencesGetValue((SCPreferencesRef)a1, ValueAtIndex);
            }
            CFDictionaryRef v10 = v17;
            if (v17)
            {
              CFArrayAppendValue(Mutable, v17);
              CFTypeID TypeID = CFDictionaryGetTypeID();
            }
            else
            {
              CFDictionaryRef v10 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              CFArrayAppendValue(Mutable, v10);
              CFRelease(v10);
              CFTypeID TypeID = CFDictionaryGetTypeID();
              if (!v10) {
                goto LABEL_30;
              }
            }
            if (CFGetTypeID(v10) != TypeID) {
              goto LABEL_30;
            }
            if (CFDictionaryGetValueIfPresent(v10, @"__LINK__", (const void **)value)) {
              break;
            }
            if (v12 == ++v15)
            {
              uint64_t v26 = CFArrayGetValueAtIndex(v7, v9 - 1);
              CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v9 - 2);
              uint64_t v28 = CFDictionaryGetValue(v27, v26);
              goto LABEL_36;
            }
          }
          if (v38 != 8)
          {
            uint64_t v19 = normalizePath((const __CFString *)value[0]);
            if (!v19)
            {
LABEL_30:
              int v25 = 1004;
              goto LABEL_31;
            }
            CFArrayRef v20 = v19;
            ++v38;
            v41.io_name_t location = v15 + 1;
            v41.CFIndex length = v12 - v15;
            CFArrayAppendArray(v19, v7, v41);
            CFRelease(v7);
            CFRelease(Mutable);
            CFIndex v9 = CFArrayGetCount(v20);
            CFArrayRef v7 = v20;
            int v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            if (v9 >= 1) {
              continue;
            }
            goto LABEL_26;
          }
          int v25 = 3006;
LABEL_31:
          _SCErrorSet(v25);
          uint64_t v22 = 0;
          if (!Mutable) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        break;
      }
      CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v7, v9 - 1);
      uint64_t v28 = SCPreferencesGetValue((SCPreferencesRef)a1, v29);
LABEL_36:
      uint64_t v30 = v28;
      if (v28)
      {
        CFTypeID v31 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v30) != v31)
        {
          int v25 = 1002;
          goto LABEL_31;
        }
      }
      if (v3) {
        CFDictionaryRef v3 = (const __CFDictionary *)CFRetain(v3);
      }
      CFStringRef v32 = (const __CFString *)CFArrayGetValueAtIndex(v7, v9 - 1);
      if (v9 == 1)
      {
        CFDictionaryRef v35 = v3;
        if (v3) {
          goto LABEL_47;
        }
      }
      else
      {
        do
        {
          CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v14);
          uint64_t v34 = CFDictionaryCreateMutableCopy(0, 0, v33);
          CFDictionaryRef v35 = v34;
          if (v3)
          {
            CFDictionarySetValue(v34, v32, v3);
            CFRelease(v3);
          }
          else
          {
            CFDictionaryRemoveValue(v34, v32);
            if (!CFDictionaryGetCount(v35))
            {
              CFRelease(v35);
              CFDictionaryRef v35 = 0;
            }
          }
          CFStringRef v32 = (const __CFString *)CFArrayGetValueAtIndex(v7, v14--);
          CFDictionaryRef v3 = v35;
        }
        while (v14 != -1);
        if (v35)
        {
LABEL_47:
          uint64_t v36 = SCPreferencesSetValue((SCPreferencesRef)a1, v32, v35);
          CFRelease(v35);
          uint64_t v22 = v36;
          if (!Mutable) {
            goto LABEL_51;
          }
LABEL_50:
          CFRelease(Mutable);
LABEL_51:
          CFArrayRef v20 = v7;
LABEL_52:
          CFRelease(v20);
          return v22;
        }
      }
      uint64_t v22 = SCPreferencesRemoveValue((SCPreferencesRef)a1, v32);
      if (!Mutable) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    int v21 = 1004;
  }
  _SCErrorSet(v21);
  return 0;
}

Boolean SCPreferencesPathSetValue(SCPreferencesRef prefs, CFStringRef path, CFDictionaryRef value)
{
  if (!prefs)
  {
    int v13 = 3001;
LABEL_20:
    _SCErrorSet(v13);
    return 0;
  }
  if (CFEqual(path, @"/CurrentSet"))
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (!value)
    {
      CFDictionaryGetTypeID();
LABEL_19:
      SCPrint(1, (FILE *)*MEMORY[0x1E4F143C8], @"SCPreferencesPathSetValue(, %@,) called with non-dictionary value\n", v15, v16, v17, v18, v19, (uint64_t)path);
      int v13 = 1002;
      goto LABEL_20;
    }
    if (CFGetTypeID(value) == TypeID)
    {
      if ((SCPreferencesPathSetValue_warned & 1) == 0)
      {
        SCPrint(1, (FILE *)*MEMORY[0x1E4F143C8], @"SCPreferencesPathSetValue(, %@,) called with non-dictionary value\n", v7, v8, v9, v10, v11, (uint64_t)path);
        SCPreferencesPathSetValue_warned = 1;
      }
      return SCPreferencesSetValue(prefs, @"CurrentSet", value);
    }
    CFTypeID v14 = CFDictionaryGetTypeID();
  }
  else
  {
    CFTypeID v14 = CFDictionaryGetTypeID();
    if (!value) {
      goto LABEL_19;
    }
  }
  if (CFGetTypeID(value) != v14) {
    goto LABEL_19;
  }

  return setPath((uint64_t)prefs, path, value);
}

Boolean SCPreferencesPathSetLink(SCPreferencesRef prefs, CFStringRef path, CFStringRef link)
{
  v11[1] = *(const __CFDictionary **)MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    int v10 = 3001;
    goto LABEL_8;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!link || CFGetTypeID(link) != TypeID)
  {
    int v10 = 1002;
LABEL_8:
    _SCErrorSet(v10);
    return 0;
  }
  if (getPath(prefs, link, v11))
  {
    CFSetRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"__LINK__", link);
    Boolean v8 = setPath((uint64_t)prefs, path, Mutable);
    CFRelease(Mutable);
    return v8;
  }
  return 0;
}

Boolean SCPreferencesPathRemoveValue(SCPreferencesRef prefs, CFStringRef path)
{
  v9[1] = *(const __CFDictionary **)MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    int v8 = 3001;
LABEL_7:
    _SCErrorSet(v8);
    return 0;
  }
  if (getPath(prefs, path, v9))
  {
    CFArrayRef v4 = normalizePath(path);
    if (v4)
    {
      CFArrayRef v5 = v4;
      Boolean v6 = setPath((uint64_t)prefs, path, 0);
      CFRelease(v5);
      return v6;
    }
    int v8 = 1004;
    goto LABEL_7;
  }
  return 0;
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!prefs)
  {
    _SCErrorSet(3001);
LABEL_10:
    LOBYTE(v5) = 0;
    return v5;
  }
  int v2 = *((unsigned __int8 *)prefs + 112);
  if (!*((unsigned char *)prefs + 112) && !SCPreferencesLock(prefs, 1u))
  {
    uint64_t v30 = __log_SCPreferences();
    uint64_t v31 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v30, (os_log_type_t)v31))
    {
      uint64_t v32 = _os_log_pack_size();
      uint64_t v40 = &v43[-((MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v30, v31, v40);
    }
    goto LABEL_10;
  }
  if (!*((void *)prefs + 39))
  {
    Boolean v6 = __log_SCPreferences();
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = &v43[-((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *((void *)prefs + 13);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v18;
      __SC_log_send(6, (uint64_t)v6, v7, v16);
    }
    int v5 = SCDynamicStoreNotifyValue(0, *((CFStringRef *)prefs + 24));
    if (v5) {
      goto LABEL_23;
    }
    uint64_t v19 = __log_SCPreferences();
    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      CFStringRef v29 = &v43[-((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v19, v20, v29);
    }
    int v4 = 1001;
    goto LABEL_22;
  }
  int v44 = 0;
  mach_port_t v3 = *((_DWORD *)prefs + 80);
  if (!v3) {
    goto LABEL_21;
  }
  if (!_SCHelperExec(v3, 105, 0, &v44, 0))
  {
    if (*((_DWORD *)prefs + 80)) {
      _SCHelperClose((mach_port_t *)prefs + 80);
    }
LABEL_21:
    int v4 = 1003;
    int v44 = 1003;
    goto LABEL_22;
  }
  int v4 = v44;
  if (!v44)
  {
    LOBYTE(v5) = 1;
    goto LABEL_23;
  }
LABEL_22:
  _SCErrorSet(v4);
  LOBYTE(v5) = 0;
LABEL_23:
  if (!v2)
  {
    int v41 = SCError();
    SCPreferencesUnlock(prefs);
    _SCErrorSet(v41);
  }
  return v5;
}

const void *_SCPreferencesCopyComputerName(const __SCPreferences *a1, _DWORD *a2)
{
  int v4 = a1;
  if (!a1)
  {
    int v4 = SCPreferencesCreate(0, @"_SCPreferencesCopyComputerName", 0);
    if (!v4) {
      return 0;
    }
  }
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"System", @"System");
  CFDictionaryRef Value = SCPreferencesPathGetValue(v4, v5);
  CFRelease(v5);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID) {
      goto LABEL_8;
    }
    uint64_t v8 = CFDictionaryGetValue(Value, @"ComputerName");
    CFTypeID v9 = CFStringGetTypeID();
    if (!v8) {
      goto LABEL_9;
    }
    if (CFGetTypeID(v8) == v9) {
      CFRetain(v8);
    }
    else {
LABEL_8:
    }
      uint64_t v8 = 0;
LABEL_9:
    if (a2) {
      *a2 = getNameEncoding(Value);
    }
    if (a1) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  uint64_t v8 = 0;
  if (!a1) {
LABEL_18:
  }
    CFRelease(v4);
LABEL_12:
  if (v8) {
    int v10 = 0;
  }
  else {
    int v10 = 1004;
  }
  _SCErrorSet(v10);
  return v8;
}

uint64_t getNameEncoding(const __CFDictionary *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, @"ComputerNameEncoding", (const void **)&value)
    && (v1 = value, CFTypeID TypeID = CFNumberGetTypeID(), v1)
    && CFGetTypeID(v1) == TypeID
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
  {
    return valuePtr;
  }
  else
  {
    return CFStringGetSystemEncoding();
  }
}

void report_missing_entitlement(const char *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (_SC_isAppleInternal_once_2 != -1) {
    dispatch_once(&_SC_isAppleInternal_once_2, &__block_literal_global_7);
  }
  if (_SC_isAppleInternal_isInternal_2)
  {
    int v2 = (const char *)get_contact_string_contact;
    if (!get_contact_string_contact)
    {
      mach_port_t v3 = SCPreferencesCreate(0, @"UserDefinedDeviceNameContact", @"/AppleInternal/Library/SystemConfiguration/PrivateStrings.plist");
      if (v3)
      {
        int v4 = v3;
        CFStringRef Value = (const __CFString *)SCPreferencesGetValue(v3, @"UserDefinedDeviceNameContact");
        CFTypeID TypeID = CFStringGetTypeID();
        if (Value && CFGetTypeID(Value) == TypeID)
        {
          CFRetain(Value);
          CFRelease(v4);
          get_contact_string_contact = (uint64_t)_SC_cfstring_to_cstring(Value, 0, 0, 0x8000100u);
          CFRelease(Value);
          int v2 = (const char *)get_contact_string_contact;
          goto LABEL_11;
        }
        CFRelease(v4);
      }
      int v2 = 0;
    }
LABEL_11:
    if (!v2) {
      int v2 = "privacy";
    }
    snprintf(__str, 0x100uLL, "%s() requires an entitlement, please contact %s", a1, v2);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_1;
    block[3] = &__block_descriptor_tmp_9;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = __str;
    if (_SC_crash_once_once_1 != -1) {
      dispatch_once(&_SC_crash_once_once_1, block);
    }
  }
}

Boolean SCPreferencesSetComputerName(SCPreferencesRef prefs, CFStringRef name, CFStringEncoding nameEncoding)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFStringEncoding valuePtr = nameEncoding;
  if (!name)
  {
    CFStringRef v6 = 0;
LABEL_7:
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"System", @"System");
    CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v7);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v11 = MutableCopy;
    if (v6 && CFStringGetLength(v6) >= 1)
    {
      CFDictionarySetValue(v11, @"ComputerName", v6);
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(v11, @"ComputerNameEncoding", v12);
      CFRelease(v12);
      CFDictionaryRemoveValue(v11, @"ComputerNameRegion");
      if (!valuePtr)
      {
        *(void *)&v35[12] = 0;
        _CFStringGetUserDefaultEncoding();
      }
    }
    else
    {
      CFDictionaryRemoveValue(v11, @"ComputerName");
      CFDictionaryRemoveValue(v11, @"ComputerNameEncoding");
      CFDictionaryRemoveValue(v11, @"ComputerNameRegion");
    }
    int v10 = __SCNetworkConfigurationSetValue(prefs, v7, v11, 0);
    if (!v10 || !__SCPreferencesUsingDefaultPrefs((uint64_t)prefs)) {
      goto LABEL_24;
    }
    uint64_t v13 = __log_SCPreferences();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL v15 = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (v6)
    {
      if (v15)
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v24 = &v35[-((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v25 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v25 = 138412290;
        *(void *)(v25 + 4) = v6;
LABEL_23:
        __SC_log_send(5, (uint64_t)v13, v14, v24);
      }
    }
    else if (v15)
    {
      uint64_t v26 = _os_log_pack_size();
      uint64_t v24 = &v35[-((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_23;
    }
LABEL_24:
    CFRelease(v7);
    CFRelease(v11);
    return v10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) == TypeID)
  {
    if (CFStringGetLength(name)) {
      CFStringRef v6 = name;
    }
    else {
      CFStringRef v6 = 0;
    }
    goto LABEL_7;
  }
  _SCErrorSet(1002);
  LOBYTE(v10) = 0;
  return v10;
}

const void *SCPreferencesGetHostName(const __SCPreferences *a1)
{
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"System", @"System");
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v2);
  CFRelease(v2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value
    || CFGetTypeID(Value) != TypeID
    || (v5 = CFDictionaryGetValue(Value, @"HostName"), CFTypeID v6 = CFStringGetTypeID(), !v5)
    || CFGetTypeID(v5) != v6)
  {
    _SCErrorSet(1004);
    return 0;
  }
  return v5;
}

uint64_t SCPreferencesSetHostName(const __SCPreferences *a1, const __CFString *a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    CFStringRef v5 = 0;
LABEL_7:
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"/%@/%@", @"System", @"System");
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v6);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    int v10 = MutableCopy;
    if (v5) {
      CFDictionarySetValue(MutableCopy, @"HostName", v5);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"HostName");
    }
    uint64_t v9 = __SCNetworkConfigurationSetValue(a1, v6, v10, 0);
    if (!v9 || !__SCPreferencesUsingDefaultPrefs((uint64_t)a1)) {
      goto LABEL_22;
    }
    uint64_t v11 = __log_SCPreferences();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    BOOL v13 = __SC_log_enabled(5, v11, (os_log_type_t)v12);
    if (v5)
    {
      if (v13)
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v22 = (char *)v33 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 138412290;
        *(void *)(v23 + 4) = v5;
LABEL_21:
        __SC_log_send(5, (uint64_t)v11, v12, v22);
      }
    }
    else if (v13)
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v22 = (char *)v33 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_21;
    }
LABEL_22:
    CFRelease(v6);
    CFRelease(v10);
    return v9;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(a2) == TypeID)
  {
    if (CFStringGetLength(a2)) {
      CFStringRef v5 = a2;
    }
    else {
      CFStringRef v5 = 0;
    }
    goto LABEL_7;
  }
  _SCErrorSet(1002);
  return 0;
}

const void *_SCPreferencesCopyLocalHostName(const __SCPreferences *a1)
{
  CFStringRef v2 = a1;
  if (!a1)
  {
    CFStringRef v2 = SCPreferencesCreate(0, @"_SCPreferencesCopyLocalHostName", 0);
    if (!v2) {
      return 0;
    }
  }
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"System", @"Network", @"HostNames");
  CFDictionaryRef Value = SCPreferencesPathGetValue(v2, v3);
  CFRelease(v3);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID) {
      goto LABEL_8;
    }
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"LocalHostName");
    CFTypeID v6 = CFStringGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v6)
      {
        CFRetain(Value);
        goto LABEL_9;
      }
LABEL_8:
      CFDictionaryRef Value = 0;
    }
  }
LABEL_9:
  if (!a1) {
    CFRelease(v2);
  }
  if (Value) {
    int v7 = 0;
  }
  else {
    int v7 = 1004;
  }
  _SCErrorSet(v7);
  return Value;
}

CFStringRef SCDynamicStoreKeyCreateHostNames(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreate(allocator, @"%@/%@/%@", @"Setup:", @"Network", @"HostNames", *MEMORY[0x1E4F143B8]);
}

CFStringRef SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef store)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = SCDynamicStoreKeyCreate(0, @"%@/%@/%@", @"Setup:", @"Network", @"HostNames");
  CFDictionaryRef v3 = (const __CFDictionary *)__SCDynamicStoreCopyValueCommon((uint64_t)store, v2, 0);
  CFRelease(v2);
  if (v3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == TypeID)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v3, @"LocalHostName");
      CFTypeID v6 = CFStringGetTypeID();
      if (!Value)
      {
LABEL_9:
        int v7 = 1004;
LABEL_10:
        _SCErrorSet(v7);
        CFRelease(v3);
        return Value;
      }
      if (CFGetTypeID(Value) == v6)
      {
        CFRetain(Value);
        if (SCError() == 10100) {
          report_missing_entitlement("SCDynamicStoreCopyLocalHostName");
        }
        int v7 = 0;
        goto LABEL_10;
      }
    }
    CFStringRef Value = 0;
    goto LABEL_9;
  }
  int v8 = SCError();
  if (v8 == 10003)
  {
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v11 = 0x40000000;
    uint64_t v12 = ___SC_crash_once_block_invoke_1;
    BOOL v13 = &__block_descriptor_tmp_9;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = "SCDynamicStoreCopyLocalHostName() access denied, missing entitlement";
    if (_SC_crash_once_once_1 == -1) {
      return 0;
    }
LABEL_21:
    dispatch_once(&_SC_crash_once_once_1, &block);
    return 0;
  }
  if (v8 == 1003)
  {
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v11 = 0x40000000;
    uint64_t v12 = ___SC_crash_once_block_invoke_1;
    BOOL v13 = &__block_descriptor_tmp_9;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = "SCDynamicStoreCopyLocalHostName() access denied by policy";
    if (_SC_crash_once_once_1 == -1) {
      return 0;
    }
    goto LABEL_21;
  }

  return (CFStringRef)_SCPreferencesCopyLocalHostName(0);
}

size_t _SC_stringIsValidDNSName(const char *a1)
{
  size_t result = strlen(a1);
  if (result)
  {
    size_t v3 = result;
    char v4 = 0;
    CFStringRef v5 = (unsigned __int8 *)(a1 + 1);
    uint64_t v6 = MEMORY[0x1E4F14390];
    while (1)
    {
      unsigned int v7 = (char)*(v5 - 1);
      BOOL v8 = v4 == 46 || v4 == 0;
      if (v8 || ((int v9 = *v5, v9 != 46) ? (v10 = v9 == 0) : (v10 = 1), v10))
      {
        if ((v7 & 0x80000000) != 0)
        {
          size_t result = __maskrune((char)*(v5 - 1), 0x500uLL);
          if (!result) {
            return result;
          }
        }
        else
        {
          size_t result = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x500;
          if (!result) {
            return result;
          }
        }
      }
      else
      {
        if ((v7 & 0x80000000) != 0) {
          int v11 = __maskrune((char)*(v5 - 1), 0x500uLL);
        }
        else {
          int v11 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x500;
        }
        if (v7 - 45 >= 2 && v11 == 0) {
          return 0;
        }
      }
      char v4 = v7;
      ++v5;
      if (!--v3) {
        return 1;
      }
    }
  }
  return result;
}

size_t _SC_CFStringIsValidDNSName(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  size_t v3 = _SC_cfstring_to_cstring(a1, 0, 0, 0x600u);
  if (!v3) {
    return 0;
  }
  char v4 = v3;
  IsValidDNSCFStringRef Name = _SC_stringIsValidDNSName((const char *)v3);
  CFAllocatorDeallocate(0, v4);
  return IsValidDNSName;
}

Boolean SCPreferencesSetLocalHostName(SCPreferencesRef prefs, CFStringRef name)
{
  CFStringRef v2 = name;
  v34[1] = *MEMORY[0x1E4F143B8];
  if (!name) {
    goto LABEL_8;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(v2) == TypeID)
  {
    CFIndex Length = CFStringGetLength(v2);
    if (Length < 1)
    {
      CFStringRef v2 = 0;
    }
    else
    {
      CFIndex v6 = Length;
      if (!_SC_CFStringIsValidDNSName(v2)) {
        goto LABEL_6;
      }
      v35.io_name_t location = 0;
      v35.CFIndex length = v6;
      if (CFStringFindWithOptions(v2, @".", v35, 0, 0)) {
        goto LABEL_6;
      }
    }
LABEL_8:
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"System", @"Network", @"HostNames");
    CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, v8);
    if (Value) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    }
    else {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    int v11 = MutableCopy;
    if (v2) {
      CFDictionarySetValue(MutableCopy, @"LocalHostName", v2);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"LocalHostName");
    }
    int v7 = __SCNetworkConfigurationSetValue(prefs, v8, v11, 0);
    if (!v7 || !__SCPreferencesUsingDefaultPrefs((uint64_t)prefs)) {
      goto LABEL_22;
    }
    uint64_t v12 = __log_SCPreferences();
    uint64_t v13 = _SC_syslog_os_log_mapping(5);
    BOOL v14 = __SC_log_enabled(5, v12, (os_log_type_t)v13);
    if (v2)
    {
      if (v14)
      {
        uint64_t v15 = _os_log_pack_size();
        uint64_t v23 = (char *)v34 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v24 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v24 = 138412290;
        *(void *)(v24 + 4) = v2;
LABEL_21:
        __SC_log_send(5, (uint64_t)v12, v13, v23);
      }
    }
    else if (v14)
    {
      uint64_t v25 = _os_log_pack_size();
      uint64_t v23 = (char *)v34 - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      goto LABEL_21;
    }
LABEL_22:
    CFRelease(v8);
    CFRelease(v11);
    return v7;
  }
LABEL_6:
  _SCErrorSet(1002);
  LOBYTE(v7) = 0;
  return v7;
}

BOOL _SC_CFStringIsValidNetBIOSName(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  return a1 && CFGetTypeID(a1) == TypeID && CFStringGetLength(a1) < 16;
}

CFStringRef SCDynamicStoreKeyCreateLocation(CFAllocatorRef allocator)
{
  return (CFStringRef)CFRetain(@"Setup:");
}

CFTypeID SCNetworkConnectionGetTypeID(void)
{
  if (__SCNetworkConnectionInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
  }
  return __kSCNetworkConnectionTypeID;
}

CFMutableArrayRef SCNetworkConnectionCopyAvailableServices(const __SCNetworkSet *a1)
{
  if (a1)
  {
    CFSetRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    size_t v3 = a1;
    goto LABEL_3;
  }
  uint64_t v12 = SCPreferencesCreate(0, @"SCNetworkConnectionCopyAvailableServices", 0);
  if (v12)
  {
    uint64_t v13 = v12;
    size_t v3 = SCNetworkSetCopyCurrent(v12);
    CFRelease(v13);
    CFSetRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!v3) {
      return Mutable;
    }
LABEL_3:
    CFArrayRef v4 = SCNetworkSetCopyServices(v3);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        for (CFIndex i = 0; i != v7; ++i)
        {
          CFStringRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v5, i);
          Interface = SCNetworkServiceGetInterface(ValueAtIndex);
          if (Interface)
          {
            CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
            if (CFEqual(InterfaceType, @"PPP")
              || CFEqual(InterfaceType, @"VPN")
              || CFEqual(InterfaceType, @"IPSec"))
            {
              CFArrayAppendValue(Mutable, ValueAtIndex);
            }
          }
        }
      }
      CFRelease(v5);
    }
    if (!a1) {
      CFRelease(v3);
    }
    return Mutable;
  }
  uint64_t v15 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];

  return CFArrayCreateMutable(0, 0, v15);
}

uint64_t SCNetworkConnectionCreateWithService(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    int v20 = 1002;
LABEL_10:
    _SCErrorSet(v20);
    return 0;
  }
  if (__SCNetworkServiceIsPPTP(a2))
  {
    int v9 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }
    uint64_t v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v19 = (char *)v35 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v19);
    }
    int v20 = 5002;
    goto LABEL_10;
  }
  uint64_t Private = __SCNetworkConnectionCreatePrivate(a1, a2, a3, a4);
  if (Private)
  {
    uint64_t v23 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v23 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v23;
    }
    uint64_t v24 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v23, (os_log_type_t)v24))
    {
      uint64_t v25 = _os_log_pack_size();
      uint64_t v33 = (char *)v35 - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v34 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)(v34 + 4) = Private + 88;
      *(_WORD *)(v34 + 12) = 2112;
      *(void *)(v34 + 14) = a2;
      __SC_log_send(7, (uint64_t)v23, v24, v33);
    }
  }
  return Private;
}

uint64_t __SCNetworkConnectionCreatePrivate(uint64_t a1, const void *a2, uint64_t a3, long long *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkConnectionInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_23;
  }
  uint64_t v8 = Instance;
  pthread_mutex_init((pthread_mutex_t *)(Instance + 16), 0);
  if (a2) {
    *(void *)(v8 + 80) = CFRetain(a2);
  }
  *(_DWORD *)(v8 + 160) = geteuid();
  *(_DWORD *)(v8 + 164) = getegid();
  *(_DWORD *)(v8 + 168) = getpid();
  *(void *)(v8 + 232) = a3;
  if (a4)
  {
    long long v9 = *a4;
    long long v10 = a4[1];
    *(void *)(v8 + 272) = *((void *)a4 + 4);
    *(_OWORD *)(v8 + 240) = v9;
    *(_OWORD *)(v8 + 256) = v10;
    uint64_t v11 = (uint64_t (*)(void))*((void *)a4 + 2);
    if (v11) {
      *(void *)(v8 + 248) = v11(*((void *)a4 + 1));
    }
  }
  *(_DWORD *)(v8 + 304) = 0;
  if (_sc_log >= 1) {
    snprintf((char *)(v8 + 88), 0x20uLL, "[%p] ", (const void *)v8);
  }
  if (ne_session_use_as_system_vpn() && *(void *)(v8 + 80))
  {
    _SCErrorSet(0);
    if (_SCNetworkServiceIsVPN(*(const __SCNetworkService **)(v8 + 80))) {
      goto LABEL_14;
    }
    if (SCError() != 1002) {
      return v8;
    }
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(v8 + 80));
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"Setup:", ServiceID, @"Interface");
    CFDictionaryRef v29 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v29)
    {
      if (CFGetTypeID(v29) == TypeID)
      {
        CFDictionaryRef Value = CFDictionaryGetValue(v29, @"Type");
        CFTypeID v32 = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == v32)
          {
            if (!CFEqual(Value, @"PPP"))
            {
              if (!CFEqual(Value, @"VPN"))
              {
                uint64_t v33 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
LABEL_44:
                int v47 = CFEqual(Value, *v33);
                CFRelease(v29);
                CFRelease(NetworkServiceEntity);
                if (!v47) {
                  return v8;
                }
LABEL_14:
                CFStringRef v12 = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(v8 + 80));
                CFStringRef v13 = v12;
                if (v12)
                {
                  *(_OWORD *)buffer = 0u;
                  memset(v50, 0, sizeof(v50));
                  if (CFStringGetCString(v12, buffer, 37, 0x8000100u))
                  {
                    memset(uu, 0, sizeof(uu));
                    if (!uuid_parse(buffer, uu))
                    {
                      uint64_t v34 = ne_session_create();
                      *(void *)(v8 + 344) = v34;
                      if (v34)
                      {
                        CFRange v35 = __log_SCNetworkConnection_log;
                        if (!__log_SCNetworkConnection_log)
                        {
                          CFRange v35 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                          __log_SCNetworkConnection_log = (uint64_t)v35;
                        }
                        uint64_t v36 = _SC_syslog_os_log_mapping(7);
                        if (__SC_log_enabled(7, v35, (os_log_type_t)v36))
                        {
                          uint64_t v37 = _os_log_pack_size();
                          uint64_t v45 = (char *)&uu[-((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0)];
                          __error();
                          uint64_t v46 = _os_log_pack_fill();
                          *(_DWORD *)uint64_t v46 = 136315138;
                          *(void *)(v46 + 4) = v8 + 88;
                          __SC_log_send(7, (uint64_t)v35, v36, v45);
                        }
                      }
                    }
                  }
                }
                if (!*(void *)(v8 + 344))
                {
                  uint64_t v14 = __log_SCNetworkConnection_log;
                  if (!__log_SCNetworkConnection_log)
                  {
                    uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                    __log_SCNetworkConnection_log = (uint64_t)v14;
                  }
                  uint64_t v15 = _SC_syslog_os_log_mapping(5);
                  if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
                  {
                    uint64_t v16 = _os_log_pack_size();
                    uint64_t v24 = (char *)&uu[-((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0)];
                    __error();
                    uint64_t v25 = _os_log_pack_fill();
                    *(_DWORD *)uint64_t v25 = 138412290;
                    *(void *)(v25 + 4) = v13;
                    __SC_log_send(5, (uint64_t)v14, v15, v24);
                  }
                  CFRelease((CFTypeRef)v8);
LABEL_23:
                  _SCErrorSet(1001);
                  return 0;
                }
                return v8;
              }
LABEL_42:
              CFRelease(v29);
              CFRelease(NetworkServiceEntity);
              goto LABEL_14;
            }
            CFDictionaryRef Value = CFDictionaryGetValue(v29, @"SubType");
            if (isA_CFString(Value))
            {
              if (!CFEqual(Value, @"PPTP"))
              {
                uint64_t v33 = (CFTypeRef *)&kSCValNetInterfaceSubTypeL2TP;
                goto LABEL_44;
              }
              goto LABEL_42;
            }
          }
        }
      }
      CFRelease(v29);
    }
    CFRelease(NetworkServiceEntity);
  }
  return v8;
}

SCNetworkConnectionRef SCNetworkConnectionCreateWithServiceID(CFAllocatorRef allocator, CFStringRef serviceID, SCNetworkConnectionCallBack callout, SCNetworkConnectionContext *context)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!serviceID || CFGetTypeID(serviceID) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }
  long long v9 = _SCNetworkServiceCopyActive(0, serviceID);
  if (!v9) {
    return 0;
  }
  long long v10 = v9;
  uint64_t v11 = (const __SCNetworkConnection *)SCNetworkConnectionCreateWithService((uint64_t)allocator, v9, (uint64_t)callout, (long long *)&context->version);
  CFRelease(v10);
  if (v11)
  {
    CFStringRef v12 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      CFStringRef v12 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v12;
    }
    uint64_t v13 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v12, (os_log_type_t)v13))
    {
      uint64_t v14 = _os_log_pack_size();
      uint64_t v22 = (char *)v25 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)(v23 + 4) = (char *)v11 + 88;
      *(_WORD *)(v23 + 12) = 2112;
      *(void *)(v23 + 14) = v10;
      __SC_log_send(7, (uint64_t)v12, v13, v22);
    }
  }
  return v11;
}

uint64_t SCNetworkConnectionCreate(uint64_t a1, uint64_t a2, long long *a3)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t Private = __SCNetworkConnectionCreatePrivate(a1, 0, a2, a3);
  if (Private)
  {
    CFArrayRef v4 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      CFArrayRef v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v4;
    }
    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)v17 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = Private + 88;
      __SC_log_send(7, (uint64_t)v4, v5, v14);
    }
  }
  return Private;
}

CFStringRef SCNetworkConnectionCopyServiceID(SCNetworkConnectionRef connection)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_10:
      int v6 = 1002;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_10;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_10;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (!v3)
  {
    int v6 = 5001;
LABEL_11:
    _SCErrorSet(v6);
    return 0;
  }
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3);

  return (CFStringRef)CFRetain(ServiceID);
}

uint64_t SCNetworkConnectionSetClientInfo(mach_port_name_t *cf, mach_port_name_t a2, mach_port_name_t a3, mach_port_name_t a4, mach_port_name_t a5)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_10:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_10;
    }
  }
  uint64_t v10 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v10) {
    goto LABEL_10;
  }
  mach_port_name_t v11 = cf[30];
  uint64_t v12 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (v11) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v11);
  }
  cf[30] = a2;
  if (a2) {
    mach_port_mod_refs(*v12, a2, 0, 1);
  }
  cf[40] = a3;
  cf[41] = a4;
  uint64_t result = 1;
  cf[42] = a5;
  return result;
}

uint64_t SCNetworkConnectionSetClientAuditInfo(uint64_t a1, void *a2, mach_port_name_t a3, mach_port_name_t a4, pid_t a5, const unsigned __int8 *a6, const char *a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v27 = 0uLL;
  long long v28 = 0uLL;
  if (*a2) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = a2[1] == 0;
  }
  if (v13 && a2[2] == 0 && a2[3] == 0)
  {
    mach_port_name_t v19 = 0;
    mach_port_name_t v17 = 0;
  }
  else
  {
    long long v16 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v16;
    mach_port_name_t v17 = audit_token_to_euid(&v26);
    long long v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v18;
    mach_port_name_t v19 = audit_token_to_egid(&v26);
    long long v20 = *((_OWORD *)a2 + 1);
    *(_OWORD *)v26.val = *(_OWORD *)a2;
    *(_OWORD *)&v26.val[4] = v20;
    a5 = audit_token_to_pid(&v26);
  }
  uint64_t result = SCNetworkConnectionSetClientInfo((mach_port_name_t *)a1, a3, v17, v19, a5);
  if (result)
  {
    mach_port_name_t v22 = *(_DWORD *)(a1 + 156);
    uint64_t v23 = (ipc_space_t *)MEMORY[0x1E4F14960];
    if (v22) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v22);
    }
    *(_DWORD *)(a1 + 156) = a4;
    if (a4) {
      mach_port_mod_refs(*v23, a4, 0, 1);
    }
    long long v24 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 140) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 124) = v24;
    if (a6 && !uuid_is_null(a6)) {
      uuid_copy((unsigned __int8 *)(a1 + 172), a6);
    }
    uint64_t v25 = *(const void **)(a1 + 192);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 192) = 0;
    }
    if (a7) {
      *(void *)(a1 + 192) = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a7, 0x8000100u);
    }
    return 1;
  }
  return result;
}

CFDictionaryRef SCNetworkConnectionCopyStatistics(SCNetworkConnectionRef connection)
{
  v21[1] = *(UInt8 **)MEMORY[0x1E4F143B8];
  v21[0] = 0;
  mach_error_t v19 = 1001;
  unsigned int v20 = 0;
  CFPropertyListRef v18 = 0;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_28:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_28;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_28;
  }
  size_t v3 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2000000000;
    uint64_t v17 = 0;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    CFArrayRef v4 = dispatch_semaphore_create(0);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v4);
    if (v15[3])
    {
      CFDictionaryRef v5 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject();
      xpc_release((xpc_object_t)v15[3]);
    }
    else
    {
      _SCErrorSet(1001);
      CFDictionaryRef v5 = 0;
    }
    _Block_object_dispose(&v14, 8);
  }
  else
  {
    while (1)
    {
      int v6 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v6) {
        break;
      }
      mach_error_t v7 = pppcontroller_copystatistics(v6, v21, &v20, &v19);
      if (!__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionCopyStatistics()", v7, &v19))
      {
        if (!v21[0]) {
          goto LABEL_16;
        }
        int v8 = _SCUnserialize(&v18, 0, v21[0], v20);
        int v9 = v19;
        if (!v8 && v19)
        {
          int v9 = SCError();
          mach_error_t v19 = v9;
        }
        if (v9 || (v11 = v18, CFTypeID TypeID = CFDictionaryGetTypeID(), v11) && CFGetTypeID(v11) == TypeID)
        {
LABEL_16:
          int v10 = v19;
          if (!v19) {
            break;
          }
        }
        else
        {
          int v10 = 1001;
          mach_error_t v19 = 1001;
        }
        if (v18)
        {
          CFRelease(v18);
          CFPropertyListRef v18 = 0;
          int v10 = v19;
        }
        _SCErrorSet(v10);
        break;
      }
    }
    pthread_mutex_unlock(v3);
    return (CFDictionaryRef)v18;
  }
  return v5;
}

intptr_t __SCNetworkConnectionCopyStatistics_block_invoke(uint64_t a1, xpc_object_t object)
{
  if (object) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_retain(object);
  }
  ne_session_release();
  size_t v3 = *(NSObject **)(a1 + 48);

  return dispatch_semaphore_signal(v3);
}

uint64_t __SCNetworkConnectionSessionPort(uint64_t a1)
{
  kern_return_t v16;
  int v17;
  int v18;
  int v19;
  mach_error_t v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  mach_port_name_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  int v39;
  unsigned int v40;
  SCDynamicStoreRef v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  NSObject *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  NSObject *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unsigned int v134;
  mach_port_name_t v135;
  uint64_t v136;
  long long v137;
  CFMachPortContext v138;
  kern_return_t v139;
  mach_port_name_t name[2];
  vm_size_t v141;
  uint64_t v142;
  CFDataRef v143[2];

  uint64_t v1 = a1;
  v143[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  CFArrayRef v142 = 0;
  v143[0] = 0;
  *(void *)io_name_t name = 0;
  CFArrayRef v141 = 0;
  v139 = 1001;
  size_t v3 = (mach_port_name_t *)(a1 + 200);
  uint64_t result = *(unsigned int *)(a1 + 200);
  if (result) {
    return result;
  }
  CFArrayRef v4 = *(const __SCNetworkService **)(v1 + 80);
  if (!v4)
  {
    mach_error_t inserted = 0;
    v139 = 5001;
    goto LABEL_88;
  }
  unint64_t v5 = 0x1E91CA000uLL;
  int v6 = scnc_server;
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v4);
  if (!_SCSerializeString(ServiceID, v143, (vm_address_t *)&v142, &v141))
  {
    mach_error_t inserted = 0;
    goto LABEL_88;
  }
  int v8 = *(__CFMachPort **)(v1 + 208);
  int v9 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (v8)
  {
    mach_port_name_t Port = CFMachPortGetPort(v8);
    CFMachPortInvalidate(*(CFMachPortRef *)(v1 + 208));
    CFRelease(*(CFTypeRef *)(v1 + 208));
    *(void *)(v1 + 208) = 0;
    mach_port_mod_refs(*v9, Port, 1u, -1);
  }
  mach_port_name_t v11 = audit_session_self();
  mach_error_t inserted = 0;
  uint64_t v134 = 0;
  unint64_t v13 = 0x1E91CA000uLL;
  *(void *)&long long v14 = 136315138;
  uint64_t v137 = v14;
  uint64_t v136 = v1;
  uint64_t v135 = v11;
  while (1)
  {
    if (*(void *)(v1 + 232)) {
      BOOL v15 = name[1] == 0;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = mach_port_allocate(*v9, 1u, &name[1]);
      if (v16)
      {
        mach_error_t inserted = v16;
        uint64_t v56 = *(NSObject **)(v13 + 832);
        if (!v56)
        {
          uint64_t v56 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          *(void *)(v13 + 832) = v56;
        }
        uint64_t v57 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v56, (os_log_type_t)v57))
        {
          uint64_t v58 = _os_log_pack_size();
          uint64_t v66 = (char *)&v134
              - ((MEMORY[0x1F4188790](v58, v59, v60, v61, v62, v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v67 = _os_log_pack_fill();
          uint64_t v68 = mach_error_string(inserted);
          *(_DWORD *)uint64_t v67 = v137;
          *(void *)(v67 + 4) = v68;
          __SC_log_send(3, (uint64_t)v56, v57, v66);
        }
      }
      else
      {
        mach_error_t inserted = mach_port_insert_right(*v9, name[1], name[1], 0x14u);
        if (!inserted) {
          goto LABEL_14;
        }
        uint64_t v69 = *(NSObject **)(v13 + 832);
        if (!v69)
        {
          uint64_t v69 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          *(void *)(v13 + 832) = v69;
        }
        uint64_t v70 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v69, (os_log_type_t)v70))
        {
LABEL_78:
          uint64_t v71 = _os_log_pack_size();
          uint64_t v79 = (char *)&v134
              - ((MEMORY[0x1F4188790](v71, v72, v73, v74, v75, v76, v77, v78) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v80 = _os_log_pack_fill();
          uint64_t v81 = mach_error_string(inserted);
          *(_DWORD *)uint64_t v80 = v137;
          *(void *)(v80 + 4) = v81;
          __SC_log_send(5, (uint64_t)v69, v70, v79);
        }
LABEL_79:
        mach_port_mod_refs(*v9, name[1], 1u, -1);
      }
      v139 = inserted;
      if (!v11) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
LABEL_14:
    if (!v6) {
      goto LABEL_37;
    }
    if (!*(_DWORD *)(v1 + 120)
      && !*(_DWORD *)(v1 + 156)
      && (uint64_t v17 = *(_DWORD *)(v1 + 160), v17 == geteuid())
      && (CFPropertyListRef v18 = *(_DWORD *)(v1 + 164), v18 == getegid())
      && (mach_error_t v19 = *(_DWORD *)(v1 + 168), v19 == getpid()))
    {
      unsigned int v20 = pppcontroller_attach(v6, v142, v141, *MEMORY[0x1E4F14638], name[1], v11, v3, &v139);
    }
    else
    {
      uint64_t v21 = *(_DWORD *)(v1 + 120) ? *(_DWORD *)(v1 + 120) : v11;
      mach_port_name_t v22 = *(_DWORD *)(v1 + 156) ? *(_DWORD *)(v1 + 156) : *MEMORY[0x1E4F14638];
      unsigned int v20 = pppcontroller_attach_proxy(v6, v142, v141, v22, name[1], v21, *(_DWORD *)(v1 + 160), *(_DWORD *)(v1 + 164), *(_DWORD *)(v1 + 168), v3, &v139);
    }
    mach_error_t inserted = v20;
    if (!v20) {
      break;
    }
    uint64_t v23 = *(NSObject **)(v13 + 832);
    if (!v23)
    {
      uint64_t v23 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 832) = v23;
    }
    long long v24 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v23, (os_log_type_t)v24))
    {
      uint64_t v25 = _os_log_pack_size();
      audit_token_t v26 = v5;
      long long v27 = v13;
      long long v28 = v3;
      uint64_t v36 = (char *)&v134 - ((MEMORY[0x1F4188790](v25, v29, v30, v31, v32, v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      uint64_t v38 = SCErrorString(inserted);
      *(_DWORD *)uint64_t v37 = v137;
      *(void *)(v37 + 4) = v38;
      size_t v3 = v28;
      unint64_t v13 = v27;
      unint64_t v5 = v26;
      __SC_log_send(6, (uint64_t)v23, v24, v36);
      mach_port_name_t v11 = v135;
      uint64_t v1 = v136;
    }
    if (inserted == 268435459)
    {
      int v9 = (ipc_space_t *)MEMORY[0x1E4F14960];
    }
    else
    {
      int v9 = (ipc_space_t *)MEMORY[0x1E4F14960];
      if (inserted != -308)
      {
        v139 = inserted;
        goto LABEL_72;
      }
      mach_port_mod_refs(*MEMORY[0x1E4F14960], name[1], 1u, -1);
      name[1] = 0;
    }
LABEL_37:
    pthread_mutex_lock(&scnc_lock);
    uint64_t v39 = *(_DWORD *)(v5 + 872);
    if (!v39) {
      goto LABEL_40;
    }
    if (v39 == v6)
    {
      scnc_server_io_name_t name = 0;
      mach_port_deallocate(*v9, v6);
LABEL_40:
      uint64_t v39 = __SCNetworkConnectionServerPort(&v139);
      *(_DWORD *)(v5 + 872) = v39;
    }
    pthread_mutex_unlock(&scnc_lock);
    int v6 = v39;
    if (!v39)
    {
      if (v139 != 1102) {
        goto LABEL_72;
      }
      uint64_t v40 = v134;
      if (v134)
      {
        if (v134 > 0x991) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v41 = SCDynamicStoreCreate(0, @"SCNetworkConnection connect", 0, 0);
        if (v41) {
          CFRelease(v41);
        }
      }
      uint64_t v134 = v40 + 50;
      usleep(0xC350u);
      int v6 = 0;
    }
  }
  if (v139)
  {
    uint64_t v42 = *(NSObject **)(v13 + 832);
    if (!v42)
    {
      uint64_t v42 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 832) = v42;
    }
    uint64_t v43 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v42, (os_log_type_t)v43))
    {
      uint64_t v44 = _os_log_pack_size();
      CFDataRef v52 = (char *)&v134 - ((MEMORY[0x1F4188790](v44, v45, v46, v47, v48, v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v53 = _os_log_pack_fill();
      uint64_t v54 = SCErrorString(v139);
      uint64_t v55 = ", w/session_port!=MACH_PORT_NULL";
      if (!*v3) {
        uint64_t v55 = "";
      }
      *(_DWORD *)uint64_t v53 = 136315394;
      *(void *)(v53 + 4) = v54;
      *(_WORD *)(v53 + 12) = 2080;
      *(void *)(v53 + 14) = v55;
      __SC_log_send(7, (uint64_t)v42, v43, v52);
    }
    if (*v3)
    {
      mach_port_deallocate(*v9, *v3);
      *size_t v3 = 0;
    }
    if (name[1])
    {
      mach_port_mod_refs(*v9, name[1], 1u, -1);
      mach_error_t inserted = 0;
      goto LABEL_85;
    }
    mach_error_t inserted = 0;
    if (!v11) {
      goto LABEL_88;
    }
LABEL_87:
    mach_port_deallocate(*v9, v11);
    goto LABEL_88;
  }
  mach_error_t inserted = 0;
LABEL_72:
  if (!name[1])
  {
LABEL_86:
    if (!v11) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (!*v3)
  {
    mach_port_mod_refs(*v9, name[1], 1u, -1);
    mach_port_deallocate(*v9, name[1]);
LABEL_85:
    name[1] = 0;
    goto LABEL_86;
  }
  v138.version = 0;
  v138.info = (void *)v1;
  v138.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
  v138.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
  v138.copyDescription = (CFStringRef (__cdecl *)(const void *))pppMPCopyDescription;
  mach_error_t inserted = mach_port_request_notification(*v9, name[1], 70, 1u, name[1], 0x15u, name);
  if (inserted)
  {
    uint64_t v69 = *(NSObject **)(v13 + 832);
    if (!v69)
    {
      uint64_t v69 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 832) = v69;
    }
    uint64_t v70 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v69, (os_log_type_t)v70)) {
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  if (name[0])
  {
    uint64_t v123 = *(NSObject **)(v13 + 832);
    if (!v123)
    {
      uint64_t v123 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      *(void *)(v13 + 832) = v123;
    }
    uint64_t v124 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v123, (os_log_type_t)v124))
    {
      uint64_t v125 = _os_log_pack_size();
      uint64_t v133 = (char *)&v134
           - ((MEMORY[0x1F4188790](v125, v126, v127, v128, v129, v130, v131, v132) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v123, v124, v133);
    }
  }
  *(void *)(v1 + 208) = _SC_CFMachPortCreateWithPort((uint64_t)"SCNetworkConnection", name[1], (void (__cdecl *)(CFMachPortRef, void *, CFIndex, void *))__SCNetworkConnectionMachCallBack, &v138);
  *(unsigned char *)(v1 + 216) = 0;
  if (v11) {
    goto LABEL_87;
  }
LABEL_88:
  if (v143[0]) {
    CFRelease(v143[0]);
  }
  if (v139 == 1102)
  {
    uint64_t v98 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v98 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v98;
    }
    if (inserted) {
      uint64_t v99 = 3;
    }
    else {
      uint64_t v99 = 5;
    }
    uint64_t v100 = _SC_syslog_os_log_mapping(v99);
    if (!__SC_log_enabled(v99, v98, (os_log_type_t)v100)) {
      goto LABEL_112;
    }
    v101 = _os_log_pack_size();
    uint64_t v109 = (char *)&v134
         - ((MEMORY[0x1F4188790](v101, v102, v103, v104, v105, v106, v107, v108) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v110 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v110 = 136315138;
    *(void *)(v110 + 4) = v1 + 88;
    uint64_t v94 = v99;
    uint64_t v95 = (uint64_t)v98;
  }
  else
  {
    if (!v139)
    {
      uint64_t v82 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v82 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v82;
      }
      uint64_t v83 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v82, (os_log_type_t)v83))
      {
        uint64_t v84 = _os_log_pack_size();
        uint64_t v92 = (char *)&v134
            - ((MEMORY[0x1F4188790](v84, v85, v86, v87, v88, v89, v90, v91) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v93 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v93 = 136315138;
        *(void *)(v93 + 4) = v1 + 88;
        uint64_t v94 = 7;
        uint64_t v95 = (uint64_t)v82;
        uint64_t v96 = v83;
        uint64_t v97 = v92;
        goto LABEL_111;
      }
      goto LABEL_112;
    }
    uint64_t v111 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v111 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v111;
    }
    if (inserted) {
      uint64_t v112 = 3;
    }
    else {
      uint64_t v112 = 5;
    }
    uint64_t v100 = _SC_syslog_os_log_mapping(v112);
    if (!__SC_log_enabled(v112, v111, (os_log_type_t)v100)) {
      goto LABEL_112;
    }
    uint64_t v113 = _os_log_pack_size();
    uint64_t v109 = (char *)&v134
         - ((MEMORY[0x1F4188790](v113, v114, v115, v116, v117, v118, v119, v120) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v121 = _os_log_pack_fill();
    uint64_t v122 = SCErrorString(v139);
    *(_DWORD *)uint64_t v121 = 136315394;
    *(void *)(v121 + 4) = v1 + 88;
    *(_WORD *)(v121 + 12) = 2080;
    *(void *)(v121 + 14) = v122;
    uint64_t v94 = v112;
    uint64_t v95 = (uint64_t)v111;
  }
  uint64_t v96 = v100;
  uint64_t v97 = v109;
LABEL_111:
  __SC_log_send(v94, v95, v96, v97);
LABEL_112:
  if (v139) {
    _SCErrorSet(v139);
  }
  return *v3;
}

uint64_t __SCNetworkConnectionNeedsRetry(uint64_t a1, uint64_t a2, mach_error_t a3, mach_error_t *a4)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 268435459:
      goto LABEL_4;
    case 0:
      return 0;
    case -308:
LABEL_4:
      mach_error_t v7 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        mach_error_t v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v7;
      }
      uint64_t v8 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
      {
        uint64_t v9 = _os_log_pack_size();
        uint64_t v17 = (char *)v34 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v18 = 136315138;
        *(void *)(v18 + 4) = a1 + 88;
        __SC_log_send(7, (uint64_t)v7, v8, v17);
      }
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(_DWORD *)(a1 + 200));
      break;
    default:
      uint64_t v21 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v21;
      }
      uint64_t v22 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v21, (os_log_type_t)v22))
      {
        uint64_t v23 = _os_log_pack_size();
        uint64_t v31 = (char *)v34 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v32 = _os_log_pack_fill();
        uint64_t v33 = mach_error_string(a3);
        *(_DWORD *)uint64_t v32 = 136315650;
        *(void *)(v32 + 4) = a1 + 88;
        *(_WORD *)(v32 + 12) = 2080;
        *(void *)(v32 + 14) = a2;
        *(_WORD *)(v32 + 22) = 2080;
        *(void *)(v32 + 24) = v33;
        __SC_log_send(5, (uint64_t)v21, v22, v31);
      }
      break;
  }
  *(_DWORD *)(a1 + 200) = 0;
  if ((a3 == 268435459 || a3 == -308) && __SCNetworkConnectionSessionPort(a1)) {
    return 1;
  }
  uint64_t result = 0;
  *a4 = a3;
  return result;
}

const void *isA_CFDictionary(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

uint64_t SCNetworkConnectionGetService(void *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[10];
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

SCNetworkConnectionStatus SCNetworkConnectionGetStatus(SCNetworkConnectionRef connection)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  mach_error_t v17 = 1001;
  SCNetworkConnectionStatus v18 = kSCNetworkConnectionInvalid;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_27:
      int v8 = 1002;
      goto LABEL_28;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_27;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_27;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (!v3 || (CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3), !CFStringGetLength(ServiceID)))
  {
    int v8 = 5001;
LABEL_28:
    _SCErrorSet(v8);
    return -1;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2000000000;
    int v16 = 0;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    unint64_t v5 = dispatch_semaphore_create(0);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_get_status();
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    unsigned int v6 = *((_DWORD *)v14 + 6) - 1;
    if (v6 > 4) {
      SCNetworkConnectionStatus v7 = kSCNetworkConnectionInvalid;
    }
    else {
      SCNetworkConnectionStatus v7 = dword_18E2E8460[v6];
    }
    _Block_object_dispose(&v13, 8);
  }
  else
  {
    for (unsigned int i = 0; ; i += 10)
    {
      do
      {
        int v10 = __SCNetworkConnectionSessionPort(connection);
        if (!v10) {
          goto LABEL_23;
        }
        mach_error_t v11 = pppcontroller_getstatus(v10, &v18, &v17);
      }
      while (__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionGetStatus()", v11, &v17));
      if (*((unsigned char *)connection + 216) || v17 != 5001 || i > 0xEF) {
        break;
      }
      usleep(0x2710u);
    }
    if (v17)
    {
      _SCErrorSet(v17);
LABEL_23:
      SCNetworkConnectionStatus v18 = kSCNetworkConnectionInvalid;
      goto LABEL_24;
    }
    *((unsigned char *)connection + 216) = 1;
LABEL_24:
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    return v18;
  }
  return v7;
}

intptr_t __SCNetworkConnectionGetStatus_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  ne_session_release();
  size_t v3 = *(NSObject **)(a1 + 48);

  return dispatch_semaphore_signal(v3);
}

uint64_t SCNetworkConnectionGetStatusFromNEStatus(int a1)
{
  if ((a1 - 1) > 4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18E2E8460[a1 - 1];
  }
}

CFDictionaryRef SCNetworkConnectionCopyExtendedStatus(SCNetworkConnectionRef connection)
{
  v24[1] = *(UInt8 **)MEMORY[0x1E4F143B8];
  v24[0] = 0;
  unsigned int v23 = 0;
  CFTypeRef cf = 0;
  mach_error_t v21 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_35:
      int v7 = 1002;
      goto LABEL_36;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_35;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_35;
  }
  size_t v3 = (const __SCNetworkService *)*((void *)connection + 10);
  if (!v3 || (CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3), !CFStringGetLength(ServiceID)))
  {
    int v7 = 5001;
LABEL_36:
    _SCErrorSet(v7);
    return 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v17 = 0;
    SCNetworkConnectionStatus v18 = &v17;
    uint64_t v19 = 0x2000000000;
    uint64_t v20 = 0;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    unint64_t v5 = dispatch_semaphore_create(0);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
    CFDictionaryRef v6 = (const __CFDictionary *)v18[3];
    if (!v6) {
      _SCErrorSet(1001);
    }
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    unsigned int v8 = 0;
    while (1)
    {
      int v9 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v9) {
        break;
      }
      mach_error_t v10 = pppcontroller_copyextendedstatus(v9, v24, &v23, &v21);
      if (!__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionCopyExtendedStatus()", v10, &v21))
      {
        if (v24[0])
        {
          int v11 = _SCUnserialize(&cf, 0, v24[0], v23);
          int v12 = v21;
          if (!v11 && v21)
          {
            int v12 = SCError();
            mach_error_t v21 = v12;
          }
          if (!v12)
          {
            CFTypeRef v13 = cf;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (!v13 || CFGetTypeID(v13) != TypeID)
            {
              int v15 = 1001;
              mach_error_t v21 = 1001;
LABEL_30:
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
                int v15 = v21;
              }
              _SCErrorSet(v15);
              break;
            }
          }
        }
        int v15 = v21;
        if (*((unsigned char *)connection + 216) || v21 != 5001 || v8 > 0xEF)
        {
          if (!v21)
          {
            *((unsigned char *)connection + 216) = 1;
            break;
          }
          goto LABEL_30;
        }
        v8 += 10;
        usleep(0x2710u);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    return (CFDictionaryRef)cf;
  }
  return v6;
}

intptr_t __SCNetworkConnectionCopyExtendedStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = _CFXPCCreateCFObjectFromXPCObject();
    ne_session_release();
    size_t v3 = *(NSObject **)(a1 + 48);
    return dispatch_semaphore_signal(v3);
  }
  else
  {
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    return ne_session_get_status();
  }
}

intptr_t __SCNetworkConnectionCopyExtendedStatus_block_invoke_2(uint64_t a1, int a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  if ((a2 - 1) >= 5)
  {
    unsigned int valuePtr = -1;
  }
  else
  {
    unsigned int valuePtr = dword_18E2E8460[a2 - 1];
    keys[0] = @"Status";
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryCreate(v3, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFRelease(values);
  }
  ne_session_release();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

Boolean SCNetworkConnectionStart(SCNetworkConnectionRef connection, CFDictionaryRef userOptions, Boolean linger)
{
  int v3 = linger;
  v74[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  uint64_t v73 = 0;
  v74[0] = 0;
  vm_size_t v72 = 0;
  int v71 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection) {
      goto LABEL_71;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_71;
    }
  }
  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v6) {
    goto LABEL_71;
  }
  if (!userOptions)
  {
    userOptions = (CFDictionaryRef)*((void *)connection + 40);
    goto LABEL_10;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(userOptions) != TypeID)
  {
LABEL_71:
    _SCErrorSet(1002);
    return 0;
  }
  if (*((void *)connection + 40))
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, userOptions);
    if (MutableCopy)
    {
      CFDictionaryRef v9 = MutableCopy;
      CFDictionaryApplyFunction(*((CFDictionaryRef *)connection + 40), (CFDictionaryApplierFunction)_SCNetworkConnectionMergeDictionaries, MutableCopy);
      CFRelease(*((CFTypeRef *)connection + 40));
      *((void *)connection + 40) = v9;
      userOptions = v9;
    }
  }
LABEL_10:
  if (debug >= 1)
  {
    mach_error_t v10 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      mach_error_t v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v10;
    }
    uint64_t v11 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v20 = &v70[-((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = (char *)connection + 88;
      __SC_log_send(6, (uint64_t)v10, v11, v20);
    }
    if (userOptions)
    {
      CFDictionaryRef v22 = CFDictionaryCreateMutableCopy(0, 0, userOptions);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v22, @"PPP");
      CFTypeID v24 = CFDictionaryGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v24)
        {
          uint64_t v25 = CFDictionaryGetValue(Value, @"AuthPasswordEncryption");
          CFTypeID v26 = CFStringGetTypeID();
          if (!v25 || CFGetTypeID(v25) != v26 || !CFEqual(v25, @"Keychain"))
          {
            uint64_t v27 = CFDictionaryCreateMutableCopy(0, 0, Value);
            CFDictionaryReplaceValue(v27, @"AuthPassword", @"******");
            CFDictionarySetValue(v22, @"PPP", v27);
            CFRelease(v27);
          }
        }
      }
      CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v22, @"L2TP");
      CFTypeID v29 = CFDictionaryGetTypeID();
      if (v28)
      {
        if (CFGetTypeID(v28) == v29)
        {
          uint64_t v30 = CFDictionaryGetValue(v28, @"IPSecSharedSecretEncryption");
          CFTypeID v31 = CFStringGetTypeID();
          if (!v30 || CFGetTypeID(v30) != v31 || !CFEqual(v30, @"Keychain"))
          {
            uint64_t v32 = CFDictionaryCreateMutableCopy(0, 0, v28);
            CFDictionaryReplaceValue(v32, @"IPSecSharedSecret", @"******");
            CFDictionarySetValue(v22, @"L2TP", v32);
            CFRelease(v32);
          }
        }
      }
      CFDictionaryRef v33 = (const __CFDictionary *)CFDictionaryGetValue(v22, @"IPSec");
      CFTypeID v34 = CFDictionaryGetTypeID();
      if (v33)
      {
        if (CFGetTypeID(v33) == v34)
        {
          CFRange v35 = CFDictionaryGetValue(v33, @"SharedSecretEncryption");
          CFTypeID v36 = CFStringGetTypeID();
          if (!v35 || CFGetTypeID(v35) != v36 || !CFEqual(v35, @"Keychain"))
          {
            uint64_t v37 = CFDictionaryCreateMutableCopy(0, 0, v33);
            CFDictionaryReplaceValue(v37, @"SharedSecret", @"******");
            CFDictionarySetValue(v22, @"IPSec", v37);
            CFRelease(v37);
          }
        }
      }
    }
    else
    {
      CFDictionaryRef v22 = 0;
    }
    uint64_t v38 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v38 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v38;
    }
    uint64_t v39 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v38, (os_log_type_t)v39))
    {
      uint64_t v40 = _os_log_pack_size();
      uint64_t v48 = &v70[-((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v49 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v49 = 138412290;
      *(void *)(v49 + 4) = v22;
      __SC_log_send(6, (uint64_t)v38, v39, v48);
    }
    if (v22) {
      CFRelease(v22);
    }
  }
  uint64_t v50 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  uint64_t v51 = (const void *)*((void *)connection + 42);
  if (v51)
  {
    CFRelease(v51);
    *((void *)connection + 42) = 0;
  }
  if (*((void *)connection + 43))
  {
    if (userOptions) {
      CFDataRef v52 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    }
    else {
      CFDataRef v52 = 0;
    }
    if (*((_DWORD *)connection + 39)) {
      ne_session_start_on_behalf_of();
    }
    else {
      ne_session_start_with_options();
    }
    ne_session_send_barrier();
    if (v52) {
      xpc_release(v52);
    }
  }
  else
  {
    if (userOptions && !_SCSerialize(userOptions, v74, (vm_address_t *)&v73, &v72))
    {
LABEL_68:
      Boolean v68 = 0;
      goto LABEL_69;
    }
    do
    {
      mach_port_t v53 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v53)
      {
        if (v74[0]) {
          CFRelease(v74[0]);
        }
        goto LABEL_68;
      }
      mach_error_t v54 = pppcontroller_start(v53, v73, v72, v3, &v71);
    }
    while (__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionStart()", v54, &v71));
    if (v74[0]) {
      CFRelease(v74[0]);
    }
    if (debug >= 1)
    {
      uint64_t v55 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v55 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v55;
      }
      uint64_t v56 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v55, (os_log_type_t)v56))
      {
        uint64_t v57 = _os_log_pack_size();
        uint64_t v65 = &v70[-((MEMORY[0x1F4188790](v57, v58, v59, v60, v61, v62, v63, v64) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v66 = _os_log_pack_fill();
        int v67 = v71;
        *(_DWORD *)uint64_t v66 = 136315394;
        *(void *)(v66 + 4) = (char *)connection + 88;
        *(_WORD *)(v66 + 12) = 1024;
        *(_DWORD *)(v66 + 14) = v67;
        __SC_log_send(6, (uint64_t)v55, v56, v65);
      }
    }
    if (v71)
    {
      _SCErrorSet(v71);
      goto LABEL_68;
    }
  }
  Boolean v68 = 1;
LABEL_69:
  pthread_mutex_unlock(v50);
  return v68;
}

void _SCNetworkConnectionMergeDictionaries(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

Boolean SCNetworkConnectionStop(SCNetworkConnectionRef connection, Boolean forceDisconnect)
{
  int v2 = forceDisconnect;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  mach_error_t v36 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_24:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_24;
    }
  }
  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v4) {
    goto LABEL_24;
  }
  if (debug >= 1)
  {
    unint64_t v5 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      unint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v5;
    }
    uint64_t v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = &v35[-((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = (char *)connection + 88;
      __SC_log_send(6, (uint64_t)v5, v6, v15);
    }
  }
  uint64_t v17 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    ne_session_stop();
    ne_session_send_barrier();
  }
  else
  {
    do
    {
      int v19 = __SCNetworkConnectionSessionPort((uint64_t)connection);
      if (!v19) {
        goto LABEL_21;
      }
      mach_error_t v20 = pppcontroller_stop(v19, v2, &v36);
    }
    while (__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionStop()", v20, &v36));
    if (debug >= 1)
    {
      uint64_t v21 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v21;
      }
      uint64_t v22 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
      {
        uint64_t v23 = _os_log_pack_size();
        CFTypeID v31 = &v35[-((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v32 = _os_log_pack_fill();
        mach_error_t v33 = v36;
        *(_DWORD *)uint64_t v32 = 136315394;
        *(void *)(v32 + 4) = (char *)connection + 88;
        *(_WORD *)(v32 + 12) = 1024;
        *(_DWORD *)(v32 + 14) = v33;
        __SC_log_send(6, (uint64_t)v21, v22, v31);
      }
    }
    if (v36)
    {
      _SCErrorSet(v36);
LABEL_21:
      Boolean v18 = 0;
      goto LABEL_22;
    }
  }
  Boolean v18 = 1;
LABEL_22:
  pthread_mutex_unlock(v17);
  return v18;
}

uint64_t SCNetworkConnectionSuspend(char *cf)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  mach_error_t v34 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_23;
  }
  if (debug >= 1)
  {
    int v3 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = &v33[-((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = cf + 88;
      __SC_log_send(6, (uint64_t)v3, v4, v13);
    }
  }
  uint64_t v15 = (pthread_mutex_t *)(cf + 16);
  pthread_mutex_lock((pthread_mutex_t *)(cf + 16));
  do
  {
    mach_port_t v16 = __SCNetworkConnectionSessionPort((uint64_t)cf);
    if (!v16) {
      goto LABEL_19;
    }
    mach_error_t v17 = pppcontroller_suspend(v16, (mach_port_t *)&v34);
  }
  while (__SCNetworkConnectionNeedsRetry((uint64_t)cf, (uint64_t)"SCNetworkConnectionSuspend()", v17, &v34));
  if (debug >= 1)
  {
    Boolean v18 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      Boolean v18 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v18;
    }
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v28 = &v33[-((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v29 = _os_log_pack_fill();
      mach_error_t v30 = v34;
      *(_DWORD *)uint64_t v29 = 136315394;
      *(void *)(v29 + 4) = cf + 88;
      *(_WORD *)(v29 + 12) = 1024;
      *(_DWORD *)(v29 + 14) = v30;
      __SC_log_send(6, (uint64_t)v18, v19, v28);
    }
  }
  if (v34)
  {
    _SCErrorSet(v34);
LABEL_19:
    uint64_t v31 = 0;
    goto LABEL_20;
  }
  uint64_t v31 = 1;
LABEL_20:
  pthread_mutex_unlock(v15);
  return v31;
}

uint64_t SCNetworkConnectionResume(char *cf)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  mach_error_t v34 = 1001;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_23;
  }
  if (debug >= 1)
  {
    int v3 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = &v33[-((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = cf + 88;
      __SC_log_send(6, (uint64_t)v3, v4, v13);
    }
  }
  uint64_t v15 = (pthread_mutex_t *)(cf + 16);
  pthread_mutex_lock((pthread_mutex_t *)(cf + 16));
  if (!*((void *)cf + 43))
  {
    do
    {
      mach_port_t v17 = __SCNetworkConnectionSessionPort((uint64_t)cf);
      if (!v17) {
        goto LABEL_20;
      }
      mach_error_t v18 = pppcontroller_resume(v17, (mach_port_t *)&v34);
    }
    while (__SCNetworkConnectionNeedsRetry((uint64_t)cf, (uint64_t)"SCNetworkConnectionResume()", v18, &v34));
    if (debug >= 1)
    {
      uint64_t v19 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v19 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v19;
      }
      uint64_t v20 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v19, (os_log_type_t)v20))
      {
        uint64_t v21 = _os_log_pack_size();
        uint64_t v29 = &v33[-((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v30 = _os_log_pack_fill();
        mach_error_t v31 = v34;
        *(_DWORD *)uint64_t v30 = 136315394;
        *(void *)(v30 + 4) = cf + 88;
        *(_WORD *)(v30 + 12) = 1024;
        *(_DWORD *)(v30 + 14) = v31;
        __SC_log_send(6, (uint64_t)v19, v20, v29);
      }
    }
    if (v34)
    {
      _SCErrorSet(v34);
LABEL_20:
      uint64_t v16 = 0;
      goto LABEL_21;
    }
  }
  uint64_t v16 = 1;
LABEL_21:
  pthread_mutex_unlock(v15);
  return v16;
}

uint64_t SCNetworkConnectionRefreshOnDemandState()
{
  return 0;
}

CFDictionaryRef SCNetworkConnectionCopyUserOptions(SCNetworkConnectionRef connection)
{
  v21[1] = *(UInt8 **)MEMORY[0x1E4F143B8];
  v21[0] = 0;
  mach_error_t v19 = 1001;
  unsigned int v20 = 0;
  CFDictionaryRef v18 = 0;
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_35:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_35;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v2) {
    goto LABEL_35;
  }
  int v3 = (pthread_mutex_t *)((char *)connection + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)connection + 16));
  if (*((void *)connection + 43))
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2000000000;
    uint64_t v17 = 0;
    ne_session_retain();
    pthread_mutex_unlock((pthread_mutex_t *)((char *)connection + 16));
    uint64_t v4 = dispatch_semaphore_create(0);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_get_info();
    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v4);
    if (v15[3] && MEMORY[0x192FA8830]() == MEMORY[0x1E4F14590])
    {
      if (xpc_dictionary_get_value((xpc_object_t)v15[3], "SessionLegacyUserConfiguration")) {
        CFDictionaryRef v5 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject();
      }
      else {
        CFDictionaryRef v5 = 0;
      }
      xpc_release((xpc_object_t)v15[3]);
    }
    else
    {
      CFDictionaryRef v5 = 0;
    }
    _Block_object_dispose(&v14, 8);
    return v5;
  }
  do
  {
    int v6 = __SCNetworkConnectionSessionPort((uint64_t)connection);
    if (!v6) {
      goto LABEL_30;
    }
    mach_error_t v7 = pppcontroller_copyuseroptions(v6, v21, &v20, &v19);
  }
  while (__SCNetworkConnectionNeedsRetry((uint64_t)connection, (uint64_t)"SCNetworkConnectionCopyUserOptions()", v7, &v19));
  if (!v21[0])
  {
    CFDictionaryRef v10 = 0;
LABEL_23:
    int v9 = v19;
    goto LABEL_24;
  }
  int v8 = _SCUnserialize((CFPropertyListRef *)&v18, 0, v21[0], v20);
  int v9 = v19;
  if (!v8 && v19)
  {
    int v9 = SCError();
    mach_error_t v19 = v9;
  }
  CFDictionaryRef v10 = v18;
  if (!v9 && v18)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v12 = CFGetTypeID(v10);
    CFDictionaryRef v10 = v18;
    if (v12 != TypeID)
    {
      int v9 = 1001;
      mach_error_t v19 = 1001;
LABEL_25:
      if (v10)
      {
        CFRelease(v10);
        CFDictionaryRef v18 = 0;
        int v9 = v19;
      }
      _SCErrorSet(v9);
      goto LABEL_30;
    }
    goto LABEL_23;
  }
LABEL_24:
  if (v9) {
    goto LABEL_25;
  }
  if (!v10) {
    CFDictionaryRef v18 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
LABEL_30:
  pthread_mutex_unlock(v3);
  return v18;
}

intptr_t __SCNetworkConnectionCopyUserOptions_block_invoke(uint64_t a1, xpc_object_t object)
{
  if (object) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = xpc_retain(object);
  }
  ne_session_release();
  int v3 = *(NSObject **)(a1 + 48);

  return dispatch_semaphore_signal(v3);
}

Boolean SCNetworkConnectionScheduleWithRunLoop(SCNetworkConnectionRef connection, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (connection) {
      goto LABEL_3;
    }
LABEL_10:
    _SCErrorSet(1002);
    return 0;
  }
  if (!connection) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v6 = __kSCNetworkConnectionTypeID;
  CFTypeID v7 = CFGetTypeID(connection);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_10;
  }

  return __SCNetworkConnectionScheduleWithRunLoop((uint64_t)connection, runLoop, runLoopMode, 0);
}

uint64_t __SCNetworkConnectionScheduleWithRunLoop(uint64_t a1, __CFRunLoop *a2, const __CFString *a3, NSObject *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  mach_error_t v49 = 1001;
  int v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!*(void *)(a1 + 232) || *(void *)(a1 + 288)) {
    goto LABEL_3;
  }
  if (!a4)
  {
    if (!*(unsigned char *)(a1 + 217)) {
      goto LABEL_11;
    }
LABEL_27:
    if (!_SC_isScheduled((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 280))) {
      CFRunLoopAddSource(a2, *(CFRunLoopSourceRef *)(a1 + 224), a3);
    }
    _SC_schedule((void *)a1, a2, a3, *(CFMutableArrayRef *)(a1 + 280));
    goto LABEL_30;
  }
  if (*(unsigned char *)(a1 + 217))
  {
LABEL_3:
    int v9 = 1002;
    goto LABEL_4;
  }
  do
  {
LABEL_11:
    if (*(void *)(a1 + 344))
    {
      if (!a2) {
        goto LABEL_20;
      }
      v48.version = 0;
      v48.info = (void *)a1;
      v48.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
      v48.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
      memset(&v48.copyDescription, 0, 40);
      v48.perform = (void (__cdecl *)(void *))__SCNetworkConnectionCallBack;
      CFRunLoopSourceRef RunLoopSource = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v48);
      goto LABEL_19;
    }
    int v12 = __SCNetworkConnectionSessionPort(a1);
    if (!v12) {
      goto LABEL_5;
    }
    mach_error_t v13 = pppcontroller_notification(v12, 1, &v49);
  }
  while (__SCNetworkConnectionNeedsRetry(a1, (uint64_t)"__SCNetworkConnectionScheduleWithRunLoop()", v13, &v49));
  int v9 = v49;
  if (v49) {
    goto LABEL_4;
  }
  if (a2)
  {
    CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(0, *(CFMachPortRef *)(a1 + 208), 0);
LABEL_19:
    *(void *)(a1 + 224) = RunLoopSource;
    *(void *)(a1 + 280) = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
LABEL_20:
  *(unsigned char *)(a1 + 217) = 1;
  if (!a4) {
    goto LABEL_27;
  }
  *(void *)(a1 + 288) = a4;
  dispatch_retain(a4);
  if (*(void *)(a1 + 344))
  {
LABEL_30:
    if (*(void *)(a1 + 344))
    {
      CFRetain((CFTypeRef)a1);
      if (__SCNetworkConnectionQueue_once != -1) {
        dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
      }
      v44[0] = MEMORY[0x1E4F143A8];
      v44[1] = 0x40000000;
      v44[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke_3;
      v44[3] = &__block_descriptor_tmp_142;
      v44[4] = a1;
      v44[5] = a1;
      ne_session_set_event_handler();
    }
    uint64_t v21 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v21;
    }
    uint64_t v22 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      mach_error_t v31 = (char *)v44 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)(v32 + 4) = a1 + 88;
      __SC_log_send(7, (uint64_t)v21, v22, v31);
    }
    uint64_t v10 = 1;
    goto LABEL_6;
  }
  uint64_t v15 = *(__CFMachPort **)(a1 + 208);
  mach_port_t Port = CFMachPortGetPort(v15);
  if (Port)
  {
    mach_port_t v17 = Port;
    uintptr_t v18 = Port;
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    dispatch_source_t v19 = dispatch_source_create(MEMORY[0x1E4F14458], v18, 0, (dispatch_queue_t)__SCNetworkConnectionQueue_q);
    if (v19)
    {
      unsigned int v20 = v19;
      CFRetain((CFTypeRef)a1);
      dispatch_set_context(v20, (void *)a1);
      dispatch_set_finalizer_f(v20, (dispatch_function_t)dispatch_CFRelease_0);
      CFRetain(v15);
      dispatch_retain(a4);
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 0x40000000;
      v46[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke;
      v46[3] = &__block_descriptor_tmp_139;
      mach_port_t v47 = v17;
      v46[4] = a1;
      v46[5] = a4;
      dispatch_source_set_event_handler(v20, v46);
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 0x40000000;
      v45[2] = ____SCNetworkConnectionScheduleWithRunLoop_block_invoke_2;
      v45[3] = &__block_descriptor_tmp_140;
      v45[4] = v15;
      v45[5] = v20;
      v45[6] = a4;
      dispatch_source_set_cancel_handler(v20, v45);
      *(void *)(a1 + 296) = v20;
      dispatch_resume(v20);
      goto LABEL_30;
    }
    mach_error_t v33 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      mach_error_t v33 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v33;
    }
    uint64_t v34 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v33, (os_log_type_t)v34))
    {
      uint64_t v35 = _os_log_pack_size();
      uint64_t v43 = (char *)v44 - ((MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v33, v34, v43);
    }
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 288));
  *(void *)(a1 + 288) = 0;
  int v9 = 1001;
LABEL_4:
  _SCErrorSet(v9);
LABEL_5:
  uint64_t v10 = 0;
LABEL_6:
  pthread_mutex_unlock(v8);
  return v10;
}

Boolean SCNetworkConnectionUnscheduleFromRunLoop(SCNetworkConnectionRef connection, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (connection) {
      goto LABEL_3;
    }
LABEL_10:
    _SCErrorSet(1002);
    return 0;
  }
  if (!connection) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v6 = __kSCNetworkConnectionTypeID;
  CFTypeID v7 = CFGetTypeID(connection);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_10;
  }

  return __SCNetworkConnectionUnscheduleFromRunLoop((uint64_t)connection, runLoop, runLoopMode);
}

uint64_t __SCNetworkConnectionUnscheduleFromRunLoop(uint64_t a1, void *a2, const __CFString *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  HIDWORD(v25) = 1001;
  CFRetain((CFTypeRef)a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2)
  {
    if (*(unsigned char *)(a1 + 217) && !*(void *)(a1 + 288))
    {
      if (!_SC_unschedule((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 280), 0))
      {
        int v21 = 1001;
        goto LABEL_20;
      }
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 280)))
      {
        if (!_SC_isScheduled((const void *)a1, a2, a3, *(CFArrayRef *)(a1 + 280))) {
          CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 224), a3);
        }
        goto LABEL_14;
      }
      CFTypeID v7 = (void *)(a1 + 224);
      CFRunLoopRemoveSource((CFRunLoopRef)a2, *(CFRunLoopSourceRef *)(a1 + 224), a3);
      CFRelease(*(CFTypeRef *)(a1 + 280));
      *(void *)(a1 + 280) = 0;
      CFRunLoopSourceInvalidate(*(CFRunLoopSourceRef *)(a1 + 224));
      CFRelease(*(CFTypeRef *)(a1 + 224));
      goto LABEL_11;
    }
LABEL_19:
    int v21 = 1002;
    goto LABEL_20;
  }
  uint64_t v6 = *(NSObject **)(a1 + 288);
  if (!v6) {
    goto LABEL_19;
  }
  CFTypeID v7 = (void *)(a1 + 288);
  if (*(void *)(a1 + 344)
    || !*(void *)(a1 + 296)
    || (dispatch_source_cancel(*(dispatch_source_t *)(a1 + 296)),
        *(void *)(a1 + 296) = 0,
        (uint64_t v6 = *(NSObject **)(a1 + 288)) != 0))
  {
    dispatch_release(v6);
LABEL_11:
    void *v7 = 0;
  }
  *(unsigned char *)(a1 + 217) = 0;
  if (!*(void *)(a1 + 344))
  {
    int v23 = __SCNetworkConnectionSessionPort(a1);
    if (!v23) {
      goto LABEL_21;
    }
    mach_error_t v24 = pppcontroller_notification(v23, 0, (_DWORD *)&v25 + 1);
    if (__SCNetworkConnectionNeedsRetry(a1, (uint64_t)"__SCNetworkConnectionUnscheduleFromRunLoop pppcontroller_notification()", v24, (mach_error_t *)&v25 + 1))
    {
      int v21 = 0;
      HIDWORD(v25) = 0;
      goto LABEL_33;
    }
    int v21 = HIDWORD(v25);
    if (!v24)
    {
LABEL_33:
      if (!v21) {
        goto LABEL_14;
      }
    }
LABEL_20:
    _SCErrorSet(v21);
LABEL_21:
    uint64_t v20 = 0;
    goto LABEL_22;
  }
  ne_session_cancel();
LABEL_14:
  int v8 = __log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    int v8 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v8;
  }
  uint64_t v9 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uintptr_t v18 = (char *)&v25 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)(v19 + 4) = a1 + 88;
    __SC_log_send(7, (uint64_t)v8, v9, v18);
  }
  uint64_t v20 = 1;
LABEL_22:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  CFRelease((CFTypeRef)a1);
  return v20;
}

Boolean SCNetworkConnectionSetDispatchQueue(SCNetworkConnectionRef connection, dispatch_queue_t queue)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!connection)
    {
LABEL_12:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!connection) {
      goto LABEL_12;
    }
  }
  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(connection) != v4) {
    goto LABEL_12;
  }
  if (queue)
  {
    return __SCNetworkConnectionScheduleWithRunLoop((uint64_t)connection, 0, 0, queue);
  }
  else
  {
    return __SCNetworkConnectionUnscheduleFromRunLoop((uint64_t)connection, 0, 0);
  }
}

uint64_t SCNetworkConnectionIsOnDemandSuspended(const __CFDictionary **cf)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_12:
      int v7 = 1002;
      goto LABEL_13;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_12;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_12;
  }
  CFDictionaryRef v3 = cf[39];
  if (v3)
  {
    int valuePtr = 0;
    CFDictionaryRef Value = CFDictionaryGetValue(v3, @"OnDemandSuspended");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID
        && CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)
        && valuePtr)
      {
        return 1;
      }
    }
  }
  int v7 = 0;
LABEL_13:
  _SCErrorSet(v7);
  return 0;
}

uint64_t SCNetworkConnectionTriggerOnDemandIfNeeded(const __CFString *a1, int a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  uint64_t v23 = 0;
  memset(buffer, 0, sizeof(buffer));
  pid_t v6 = getpid();
  geteuid();
  if (a1 && geteuid())
  {
    int v7 = _SC_cfstring_to_cstring(a1, 0, 0, 0x8000100u);
    int v8 = 0;
    if (proc_pidinfo(v6, 17, 1uLL, buffer, 56) == 56)
    {
      int v8 = (void *)ne_session_copy_policy_match();
      int service_action = ne_session_policy_match_get_service_action();
      if (service_action == 1 || a2 && service_action == 2)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        if (ne_session_policy_match_get_service())
        {
          xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
          if (v10)
          {
            uint64_t v11 = v10;
            xpc_dictionary_set_BOOL(v10, "is-on-demand", 1);
            xpc_dictionary_set_string(v11, "match-hostname", (const char *)v7);
            ne_session_policy_match_get_service_type();
            if (ne_session_create())
            {
              uint64_t v12 = dispatch_semaphore_create(0);
              dispatch_retain(v12);
              xpc_retain(v11);
              if (__SCNetworkConnectionQueue_once != -1) {
                dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
              }
              ne_session_get_status();
              if (a3) {
                dispatch_time_t v13 = dispatch_time(0, 1000000000 * a3);
              }
              else {
                dispatch_time_t v13 = -1;
              }
              dispatch_semaphore_wait(v12, v13);
              dispatch_release(v12);
              ne_session_release();
            }
            xpc_release(v11);
          }
        }
      }
    }
    if (v7) {
      CFAllocatorDeallocate(0, v7);
    }
    if (v8) {
      free(v8);
    }
  }
  uint64_t v14 = *((unsigned __int8 *)v17 + 24);
  _Block_object_dispose(&v16, 8);
  return v14;
}

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke(uint64_t a1, int a2)
{
  CFDictionaryRef v3 = *(NSObject **)(a1 + 40);
  if (a2 == 1)
  {
    dispatch_retain(v3);
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_set_event_handler();
    ne_session_start_with_options();
  }
  else
  {
    dispatch_semaphore_signal(v3);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 56));
}

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke_2(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    CFDictionaryRef v3 = *(NSObject **)(a1 + 40);
    dispatch_release(v3);
  }
  else if (a2 == 1)
  {
    dispatch_retain(*(dispatch_object_t *)(a1 + 40));
    if (__SCNetworkConnectionQueue_once != -1) {
      dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
    }
    ne_session_get_status();
  }
}

void __SCNetworkConnectionTriggerOnDemandIfNeeded_block_invoke_3(uint64_t a1, int a2)
{
  if (a2 != 2)
  {
    if (*(_DWORD *)(a1 + 56) == 3) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
    ne_session_cancel();
  }
  CFDictionaryRef v3 = *(NSObject **)(a1 + 48);

  dispatch_release(v3);
}

uint64_t SCNetworkConnectionCopyOnDemandInfo(CFDictionaryRef *cf, void *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_22:
      int v13 = 1002;
      goto LABEL_23;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_22;
  }
  if (!cf[10])
  {
    int v13 = 5001;
LABEL_23:
    _SCErrorSet(v13);
    return 0;
  }
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = -1;
  }
  CFDictionaryRef v7 = cf[39];
  if (v7)
  {
    if (a2)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(v7, @"RemoteAddress");
      CFTypeID TypeID = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID)
        {
          *a2 = Value;
          CFRetain(Value);
        }
      }
    }
    if (a3)
    {
      int valuePtr = 0;
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(cf[39], @"Status");
      CFTypeID v11 = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11)
        {
          if (CFNumberGetValue(v10, kCFNumberIntType, &valuePtr)) {
            *a3 = valuePtr;
          }
        }
      }
    }
  }
  return *((unsigned __int8 *)cf + 308);
}

uint64_t SCNetworkConnectionGetReachabilityInfo(CFDictionaryRef *cf, _DWORD *a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_23:
      int v13 = 1002;
      goto LABEL_24;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_23;
  }
  if (!cf[10])
  {
    int v13 = 5001;
LABEL_24:
    _SCErrorSet(v13);
    return 0;
  }
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  CFDictionaryRef v7 = cf[39];
  if (v7)
  {
    if (a2)
    {
      int valuePtr = 0;
      CFDictionaryRef Value = CFDictionaryGetValue(v7, @"ReachFlags");
      CFTypeID TypeID = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)) {
          *a2 = valuePtr;
        }
      }
    }
    if (a3)
    {
      int valuePtr = 0;
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(cf[39], @"ReachInterfaceIndex");
      CFTypeID v11 = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11)
        {
          if (CFNumberGetValue(v10, kCFNumberIntType, &valuePtr)) {
            *a3 = valuePtr;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t SCNetworkConnectionGetType(unsigned int *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      int v4 = 1002;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  if (*((void *)cf + 10))
  {
    _SCErrorSet(0);
    return cf[76];
  }
  int v4 = 5001;
LABEL_9:
  _SCErrorSet(v4);
  return 0;
}

uint64_t SCNetworkConnectionCopyFlowDivertToken()
{
  return 0;
}

CFDictionaryRef SCNetworkConnectionGetServiceIdentifier(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 80)) {
    return (const __CFDictionary *)0xFFFFFFFFLL;
  }
  unsigned int valuePtr = 0;
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 312);
  if (result)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(result, @"ServiceIdentifier");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _SC_domainEndsWithDomain(const __CFString *a1, const __CFString *cf1)
{
  CFStringRef v2 = cf1;
  if (CFEqual(cf1, @"*")) {
    return 1;
  }
  int HasSuffix = CFStringHasSuffix(a1, @".");
  if (HasSuffix)
  {
    v11.CFIndex length = CFStringGetLength(a1) - 1;
    v11.io_name_t location = 0;
    a1 = CFStringCreateWithSubstring(0, a1, v11);
    if (!a1) {
      return 0;
    }
  }
  int v6 = CFStringHasSuffix(v2, @".");
  if (v6)
  {
    v12.CFIndex length = CFStringGetLength(v2) - 1;
    v12.io_name_t location = 0;
    CFStringRef v2 = CFStringCreateWithSubstring(0, v2, v12);
    if (!v2)
    {
      uint64_t v4 = 0;
      int v7 = 0;
      if (!HasSuffix) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }
  if (!CFStringHasPrefix(v2, @"*."))
  {
    CFStringRef v9 = v2;
    goto LABEL_16;
  }
  v13.CFIndex length = CFStringGetLength(v2) - 2;
  v13.io_name_t location = 2;
  CFStringRef v8 = CFStringCreateWithSubstring(0, v2, v13);
  if (v8)
  {
    CFStringRef v9 = v8;
    if (v6) {
      CFRelease(v2);
    }
    int v7 = 1;
LABEL_16:
    uint64_t v4 = CFStringHasSuffix(a1, v9);
    CFStringRef v2 = v9;
    if (!HasSuffix) {
      goto LABEL_20;
    }
LABEL_19:
    CFRelease(a1);
    goto LABEL_20;
  }
  uint64_t v4 = 0;
  if (HasSuffix) {
    goto LABEL_19;
  }
LABEL_20:
  if (v7) {
    CFRelease(v2);
  }
  return v4;
}

uint64_t _SC_hostMatchesDomain(const __CFString *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFTypeID v5 = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v5) {
    return 0;
  }
  CFMutableStringRef StringByTrimmingDotsAndStars = _SC_createStringByTrimmingDotsAndStars(a1);
  CFMutableStringRef v7 = _SC_createStringByTrimmingDotsAndStars(a2);
  CFTypeID v8 = CFStringGetTypeID();
  if (StringByTrimmingDotsAndStars)
  {
    if (CFGetTypeID(StringByTrimmingDotsAndStars) != v8 || (CFTypeID v9 = CFStringGetTypeID(), !v7) || CFGetTypeID(v7) != v9)
    {
      uint64_t v13 = 0;
      goto LABEL_14;
    }
    CFIndex CountOfStringInString = _SC_getCountOfStringInString(StringByTrimmingDotsAndStars);
    CFIndex v11 = _SC_getCountOfStringInString(v7);
    if (CountOfStringInString == v11)
    {
      uint64_t HasSuffix = CFEqual(StringByTrimmingDotsAndStars, v7);
    }
    else
    {
      uint64_t v13 = 0;
      if (v11 < 1 || v11 >= CountOfStringInString)
      {
LABEL_14:
        CFRelease(StringByTrimmingDotsAndStars);
        if (!v7) {
          return v13;
        }
        goto LABEL_17;
      }
      v15.io_name_t location = 0;
      v15.CFIndex length = 0;
      CFStringReplace(v7, v15, @".");
      uint64_t HasSuffix = CFStringHasSuffix(StringByTrimmingDotsAndStars, v7);
    }
    uint64_t v13 = HasSuffix;
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  if (v7) {
LABEL_17:
  }
    CFRelease(v7);
  return v13;
}

CFMutableStringRef _SC_createStringByTrimmingDotsAndStars(CFStringRef theString)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!_SC_getNotDotOrStarCharacterSet_notDotOrStar)
  {
    CFCharacterSetRef v3 = CFCharacterSetCreateWithCharactersInString(v2, @".*");
    if (v3)
    {
      CFCharacterSetRef v4 = v3;
      _SC_getNotDotOrStarCharacterSet_notDotOrStar = (uint64_t)CFCharacterSetCreateInvertedSet(v2, v3);
      CFRelease(v4);
    }
  }
  CFCharacterSetRef v5 = (const __CFCharacterSet *)_SC_getNotDotOrStarCharacterSet_notDotOrStar;
  CFIndex Length = CFStringGetLength(theString);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v2, Length, theString);
  result.CFIndex location = 0;
  result.CFIndex length = 0;
  v12.CFIndex location = Length;
  v12.CFIndex length = 0;
  v16.CFIndex location = 0;
  v16.CFIndex length = Length;
  if (CFStringFindCharacterFromSet(theString, v5, v16, 0, &result))
  {
    v17.CFIndex location = 0;
    v17.CFIndex length = Length;
    CharacterFromCFStringRef Set = CFStringFindCharacterFromSet(theString, v5, v17, 4uLL, &v12);
    CFIndex location = v12.location;
    if (CharacterFromSet && (result.location == -1 || v12.location == -1 || result.location > v12.location))
    {
      CFRelease(MutableCopy);
      return 0;
    }
  }
  else
  {
    CFIndex location = Length;
  }
  if (Length > location + 1)
  {
    v15.CFIndex location = location + 1;
    v15.CFIndex length = Length - (location + 1);
    CFStringReplace(MutableCopy, v15, &stru_1EDD23408);
  }
  v10.CFIndex length = result.location;
  if (result.location >= 1)
  {
    v10.CFIndex location = 0;
    CFStringReplace(MutableCopy, v10, &stru_1EDD23408);
  }
  return MutableCopy;
}

CFIndex _SC_getCountOfStringInString(const __CFString *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v7.CFIndex length = CFStringGetLength(a1);
  v7.CFIndex location = 0;
  CFArrayRef Results = CFStringCreateArrayWithFindResults(v2, a1, @".", v7, 0);
  if (!Results) {
    return 0;
  }
  CFArrayRef v4 = Results;
  CFIndex Count = CFArrayGetCount(Results);
  CFRelease(v4);
  return Count;
}

uint64_t __SCNetworkConnectionCopyOnDemandInfoWithName(uint64_t a1, const __CFString *a2, int a3, CFTypeRef *a4, _DWORD *a5, CFTypeRef *a6)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  char v68 = 0;
  CFDictionaryRef v11 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
  if (!v11) {
    goto LABEL_60;
  }
  CFDictionaryRef v12 = v11;
  CFDictionaryRef v13 = (const __CFDictionary *)__SCNetworkConnectionCopyMatchingTriggerWithName(v11, a2, 0, a3, 0, &v68, 0);
  CFDictionaryRef v14 = v13;
  if (v13 && v68)
  {
    value = 0;
    int valuePtr = 0;
    if (!CFDictionaryGetValueIfPresent(v13, @"Status", (const void **)&value)
      || (v15 = value, CFTypeID TypeID = CFNumberGetTypeID(), !v15)
      || CFGetTypeID(v15) != TypeID
      || !CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
    {
      int valuePtr = 0;
    }
    if (a5) {
      *a5 = valuePtr;
    }
    if (a4)
    {
      CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(v14, @"ServiceID");
      *a4 = v17;
      CFTypeID v18 = CFStringGetTypeID();
      if (v17 && CFGetTypeID(v17) == v18)
      {
        *a4 = v17;
        if (CFStringGetLength(v17) >= 1)
        {
          CFRetain(*a4);
          goto LABEL_16;
        }
      }
      else
      {
        *a4 = 0;
      }
      uint64_t v36 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v36 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v36;
      }
      uint64_t v37 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v36, (os_log_type_t)v37))
      {
        uint64_t v38 = _os_log_pack_size();
        uint64_t v46 = &v65[-((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v47 = _os_log_pack_fill();
        CFRunLoopSourceContext v48 = " (on retry)";
        if (!a3) {
          CFRunLoopSourceContext v48 = "";
        }
        *(_DWORD *)uint64_t v47 = 136315138;
        *(void *)(v47 + 4) = v48;
        __SC_log_send(6, (uint64_t)v36, v37, v46);
      }
      *a4 = 0;
      int v19 = 1;
      if (!a6)
      {
LABEL_17:
        if (!v19)
        {
LABEL_18:
          uint64_t v20 = __log_SCNetworkConnection_log;
          if (!__log_SCNetworkConnection_log)
          {
            uint64_t v20 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
            __log_SCNetworkConnection_log = (uint64_t)v20;
          }
          uint64_t v21 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v20, (os_log_type_t)v21))
          {
            uint64_t v22 = _os_log_pack_size();
            uint64_t v30 = &v65[-((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0)];
            __error();
            uint64_t v31 = _os_log_pack_fill();
            uint64_t v32 = " (on retry)";
            int v33 = valuePtr;
            if (!a3) {
              uint64_t v32 = "";
            }
            *(_DWORD *)uint64_t v31 = 136315394;
            *(void *)(v31 + 4) = v32;
            *(_WORD *)(v31 + 12) = 1024;
            *(_DWORD *)(v31 + 14) = v33;
            __SC_log_send(6, (uint64_t)v20, v21, v30);
            int v34 = 1;
            goto LABEL_26;
          }
          int v35 = 0;
          int v34 = 1;
LABEL_56:
          CFRelease(v14);
          CFRelease(v12);
          if (v34) {
            return 1;
          }
          goto LABEL_59;
        }
LABEL_48:
        if (a4 && *a4)
        {
          CFRelease(*a4);
          *a4 = 0;
        }
        if (a6 && *a6)
        {
          CFRelease(*a6);
          int v34 = 0;
          *a6 = 0;
        }
        else
        {
          int v34 = 0;
        }
        int v35 = 1001;
        goto LABEL_56;
      }
LABEL_35:
      CFStringRef v49 = (const __CFString *)CFDictionaryGetValue(v14, @"RemoteAddress");
      *a6 = v49;
      CFTypeID v50 = CFStringGetTypeID();
      if (v49 && CFGetTypeID(v49) == v50)
      {
        *a6 = v49;
        if (CFStringGetLength(v49) >= 1)
        {
          CFRetain(*a6);
          if (!v19) {
            goto LABEL_18;
          }
          goto LABEL_48;
        }
      }
      else
      {
        *a6 = 0;
      }
      uint64_t v51 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        uint64_t v51 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v51;
      }
      uint64_t v52 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v51, (os_log_type_t)v52))
      {
        uint64_t v53 = _os_log_pack_size();
        uint64_t v61 = &v65[-((MEMORY[0x1F4188790](v53, v54, v55, v56, v57, v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v62 = _os_log_pack_fill();
        uint64_t v63 = " (on retry)";
        if (!a3) {
          uint64_t v63 = "";
        }
        *(_DWORD *)uint64_t v62 = 136315138;
        *(void *)(v62 + 4) = v63;
        __SC_log_send(6, (uint64_t)v51, v52, v61);
      }
      *a6 = 0;
      goto LABEL_48;
    }
LABEL_16:
    int v19 = 0;
    if (!a6) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
  if (v13)
  {
    int v34 = 0;
LABEL_26:
    int v35 = 0;
    goto LABEL_56;
  }
  CFRelease(v12);
  int v35 = 0;
LABEL_59:
  LODWORD(v11) = v35;
LABEL_60:
  _SCErrorSet((int)v11);
  return 0;
}

CFTypeRef __SCNetworkConnectionCopyOnDemandConfiguration()
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  checCFIndex k = 1;
  uint64_t state64 = 0;
  pthread_mutex_lock(&onDemand_notify_lock);
  int v0 = onDemand_notify_token;
  if (onDemand_notify_token == -1)
  {
    uint32_t v15 = notify_register_check("com.apple.system.SCNetworkConnectionOnDemand", &onDemand_notify_token);
    if (v15)
    {
      uint32_t v16 = v15;
      CFStringRef v17 = __log_SCNetworkConnection_log;
      if (!__log_SCNetworkConnection_log)
      {
        CFStringRef v17 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
        __log_SCNetworkConnection_log = (uint64_t)v17;
      }
      uint64_t v18 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
      {
        uint64_t v19 = _os_log_pack_size();
        uint64_t v27 = (char *)&v56 - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v28 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v28 = 67109120;
        v28[1] = v16;
        __SC_log_send(5, (uint64_t)v17, v18, v27);
      }
      goto LABEL_14;
    }
    int v0 = onDemand_notify_token;
    if (onDemand_notify_token == -1) {
      goto LABEL_15;
    }
  }
  uint32_t v1 = notify_check(v0, &check);
  if (v1)
  {
    uint32_t v2 = v1;
    CFCharacterSetRef v3 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      CFCharacterSetRef v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v3;
    }
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_8;
    }
    uint64_t v5 = _os_log_pack_size();
    CFDictionaryRef v13 = (char *)&v56 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
LABEL_7:
    CFDictionaryRef v14 = (_DWORD *)_os_log_pack_fill();
    *CFDictionaryRef v14 = 67109120;
    v14[1] = v2;
    __SC_log_send(5, (uint64_t)v3, v4, v13);
LABEL_8:
    notify_cancel(onDemand_notify_token);
LABEL_14:
    onDemand_notify_token = -1;
    goto LABEL_15;
  }
  if (check)
  {
    if (onDemand_notify_token != -1)
    {
      uint32_t state = notify_get_state(onDemand_notify_token, &state64);
      if (state)
      {
        uint32_t v2 = state;
        CFCharacterSetRef v3 = __log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          CFCharacterSetRef v3 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v3;
        }
        uint64_t v4 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
          goto LABEL_8;
        }
        uint64_t v48 = _os_log_pack_size();
        CFDictionaryRef v13 = (char *)&v56 - ((MEMORY[0x1F4188790](v48, v49, v50, v51, v52, v53, v54, v55) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        goto LABEL_7;
      }
    }
  }
LABEL_15:
  if (check || onDemand_force_refresh)
  {
    uint64_t v29 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v29 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v29;
    }
    uint64_t v30 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v29, (os_log_type_t)v30))
    {
      uint64_t v31 = _os_log_pack_size();
      uint64_t v39 = (char *)&v56 - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v40 = _os_log_pack_fill();
      if (onDemand_configuration) {
        uint64_t v41 = "updated";
      }
      else {
        uint64_t v41 = "fetched";
      }
      *(_DWORD *)uint64_t v40 = 136315138;
      *(void *)(v40 + 4) = v41;
      __SC_log_send(6, (uint64_t)v29, v30, v39);
    }
    if (onDemand_configuration)
    {
      CFRelease((CFTypeRef)onDemand_configuration);
      onDemand_configuration = 0;
    }
    if (state64 || onDemand_force_refresh)
    {
      CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"State:", @"OnDemand");
      onDemand_configuration = (uint64_t)SCDynamicStoreCopyValue(0, NetworkGlobalEntity);
      CFRelease(NetworkGlobalEntity);
      uint64_t v43 = (const void *)onDemand_configuration;
      if (onDemand_configuration)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (CFGetTypeID(v43) != TypeID)
        {
          CFRelease((CFTypeRef)onDemand_configuration);
          onDemand_configuration = 0;
        }
      }
    }
    onDemand_force_refresh = 0;
  }
  if (onDemand_configuration) {
    CFTypeRef v45 = CFRetain((CFTypeRef)onDemand_configuration);
  }
  else {
    CFTypeRef v45 = 0;
  }
  pthread_mutex_unlock(&onDemand_notify_lock);
  return v45;
}

const void *__SCNetworkConnectionCopyMatchingTriggerWithName(const __CFDictionary *a1, const __CFString *a2, int a3, int a4, CFTypeRef *a5, unsigned char *a6, CFTypeRef *a7)
{
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (a6) {
    *a6 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Triggers");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || (CFIndex Count = CFArrayGetCount((CFArrayRef)Value), Count < 1))
  {
    CFStringRef ValueAtIndex = 0;
    int v15 = 0;
    goto LABEL_79;
  }
  int v53 = a3;
  CFIndex v14 = 0;
  int v15 = 0;
  unint64_t v16 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v48 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v49 = (const void *)*MEMORY[0x1E4F1CFD0];
  int v52 = a4;
  uint64_t v57 = Value;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v14);
    CFTypeID v18 = CFDictionaryGetTypeID();
    if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v18) {
      goto LABEL_19;
    }
    uint64_t v19 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Action");
    CFTypeID v20 = CFStringGetTypeID();
    if (v19 && CFGetTypeID(v19) == v20 && CFEqual(v19, @"Connect"))
    {
      if (__SCNetworkConnectionShouldNeverMatch((const __CFDictionary *)ValueAtIndex, a2, v53))
      {
        CFStringRef ValueAtIndex = (const void *)v16;
LABEL_16:
        CFNumberRef Value = v57;
        goto LABEL_20;
      }
      int v54 = v15;
      CFStringRef Match = 0;
      int v35 = 0;
      uint64_t v36 = 0;
      CFNumberRef Value = v57;
    }
    else
    {
      CFNumberRef Value = v57;
      if (__SCNetworkConnectionShouldIgnoreTrigger((const __CFDictionary *)ValueAtIndex))
      {
        int v15 = 5002;
LABEL_19:
        CFStringRef ValueAtIndex = (const void *)v16;
        goto LABEL_20;
      }
      uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Action");
      uint64_t v22 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"ActionParameters");
      if (v21 && v22)
      {
        CFTypeRef cf = v22;
        if (!CFEqual(v21, @"EvaluateConnection")) {
          goto LABEL_19;
        }
        uint64_t v51 = v8;
        CFTypeID v23 = CFArrayGetTypeID();
        if (CFGetTypeID(cf) != v23 || (CFIndex v55 = CFArrayGetCount((CFArrayRef)cf), v55 < 1))
        {
          CFStringRef ValueAtIndex = (const void *)v16;
          goto LABEL_20;
        }
        int v54 = v15;
        uint64_t v46 = v9;
        uint64_t v47 = a7;
        CFIndex v24 = 0;
        while (1)
        {
          CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v24);
          CFTypeID v26 = CFDictionaryGetTypeID();
          if (v25)
          {
            if (CFGetTypeID(v25) == v26)
            {
              CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(v25, @"Domains");
              CFTypeID v28 = CFArrayGetTypeID();
              if (v27)
              {
                if (CFGetTypeID(v27) == v28)
                {
                  CFIndex v29 = CFArrayGetCount(v27);
                  if (v29 >= 1) {
                    break;
                  }
                }
              }
            }
          }
LABEL_38:
          if (++v24 == v55) {
            goto LABEL_39;
          }
        }
        CFIndex v30 = v29;
        CFIndex v31 = 0;
        while (1)
        {
          CFStringRef Match = (const __CFString *)CFArrayGetValueAtIndex(v27, v31);
          CFTypeID v33 = CFStringGetTypeID();
          if (Match)
          {
            if (CFGetTypeID(Match) == v33 && _SC_domainEndsWithDomain(a2, Match)) {
              break;
            }
          }
          if (v30 == ++v31) {
            goto LABEL_38;
          }
        }
        uint64_t v43 = CFDictionaryGetValue(v25, @"DomainAction");
        CFTypeID v44 = CFStringGetTypeID();
        if (v43 && CFGetTypeID(v43) == v44 && CFEqual(v43, @"NeverConnect"))
        {
LABEL_39:
          CFStringRef ValueAtIndex = (const void *)v16;
          uint64_t v8 = v51;
          uint64_t v9 = v46;
          a7 = v47;
          a4 = v52;
          goto LABEL_16;
        }
        uint64_t v36 = CFDictionaryGetValue(v25, @"RequiredURLStringProbe");
        int v35 = 1;
        uint64_t v8 = v51;
        uint64_t v9 = v46;
        a7 = v47;
        CFNumberRef Value = v57;
      }
      else
      {
        int v54 = v15;
        if (!a4
          && (CFStringRef v34 = __SCNetworkConnectionDomainGetMatch((const __CFDictionary *)ValueAtIndex, a2, 0),
              (unint64_t)v34 | v16))
        {
          CFStringRef Match = v34;
          int v35 = 0;
          if (!v34)
          {
LABEL_45:
            CFStringRef ValueAtIndex = (const void *)v16;
            a4 = v52;
            int v15 = v54;
            goto LABEL_20;
          }
        }
        else
        {
          int v35 = 1;
          CFStringRef Match = __SCNetworkConnectionDomainGetMatch((const __CFDictionary *)ValueAtIndex, a2, 1);
          if (!Match) {
            goto LABEL_45;
          }
        }
        uint64_t v36 = 0;
      }
      if (__SCNetworkConnectionShouldNeverMatch((const __CFDictionary *)ValueAtIndex, a2, v53)) {
        goto LABEL_45;
      }
    }
    if (v9)
    {
      int valuePtr = 2;
      if (*v9)
      {
        CFRelease(*v9);
        *uint64_t v9 = 0;
      }
      uint64_t v37 = v9;
      CFSetRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFNumberRef v39 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, @"OnDemandMatchInfoVPNType", v39);
      CFRelease(v39);
      if (Match) {
        CFDictionarySetValue(Mutable, @"OnDemandMatchInfoDomain", Match);
      }
      if (v35) {
        uint64_t v40 = v49;
      }
      else {
        uint64_t v40 = v48;
      }
      CFDictionarySetValue(Mutable, @"OnDemandMatchInfoOnRetry", v40);
      uint64_t v9 = v37;
      *uint64_t v37 = Mutable;
      CFNumberRef Value = v57;
    }
    a4 = v52;
    if (a7)
    {
      if (*a7)
      {
        CFRelease(*a7);
        *a7 = 0;
      }
      if (v36) {
        *a7 = CFRetain(v36);
      }
    }
    BOOL v41 = v52 || v35 == 0;
    BOOL v42 = !v41;
    if (v8 && !v42) {
      break;
    }
    int v15 = v54;
    if (!v42) {
      goto LABEL_81;
    }
LABEL_20:
    ++v14;
    unint64_t v16 = (unint64_t)ValueAtIndex;
    if (v14 == Count) {
      goto LABEL_81;
    }
  }
  *uint64_t v8 = 1;
  int v15 = v54;
LABEL_81:
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
LABEL_79:
  _SCErrorSet(v15);
  return ValueAtIndex;
}

Boolean SCNetworkConnectionCopyUserPreferences(CFDictionaryRef selectionOptions, CFStringRef *serviceID, CFDictionaryRef *userOptions)
{
  v30[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (selectionOptions) {
      goto LABEL_3;
    }
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
  if (!selectionOptions) {
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
LABEL_3:
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(selectionOptions, @"OnDemandHostName");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
  v30[0] = 0;
  int v29 = -1;
  CFBooleanRef v8 = (const __CFBoolean *)CFDictionaryGetValue(selectionOptions, @"OnDemandRetry");
  uint64_t v9 = CFBooleanGetTypeID();
  if (v8 && (v10 = v9, uint64_t v9 = CFGetTypeID(v8), v9 == v10))
  {
    uint64_t v9 = CFBooleanGetValue(v8);
    int v11 = v9;
  }
  else
  {
    int v11 = 1;
  }
  int v12 = __SCNetworkConnectionCopyOnDemandInfoWithName(v9, Value, v11, v30, &v29, 0);
  if (debug >= 2)
  {
    CFDictionaryRef v13 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      CFDictionaryRef v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v13;
    }
    uint64_t v14 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v28 = (uint64_t)&v28;
      CFTypeID v23 = (char *)&v28 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      int v25 = v29;
      *(_DWORD *)uint64_t v24 = 67109376;
      *(_DWORD *)(v24 + 4) = v12;
      *(_WORD *)(v24 + 8) = 1024;
      *(_DWORD *)(v24 + 10) = v25;
      __SC_log_send(6, (uint64_t)v13, v14, v23);
    }
  }
  if (!v12)
  {
    if (!v11) {
      return 0;
    }
    return __SCNetworkConnectionCopyUserPreferencesInternal(selectionOptions, serviceID, userOptions);
  }
  Boolean result = (Boolean)v30[0];
  if (v29 == 2)
  {
    if (v30[0])
    {
      CFRelease(v30[0]);
      return 0;
    }
  }
  else
  {
    *serviceID = (CFStringRef)v30[0];
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *userOptions = Mutable;
    CFDictionarySetValue(Mutable, @"OnDemandHostName", Value);
    return 1;
  }
  return result;
}

const void *isA_CFBoolean(const void *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

uint64_t __SCNetworkConnectionCopyUserPreferencesInternal(const __CFDictionary *a1, CFStringRef *a2, CFDictionaryRef *a3)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  checCFIndex k = 1;
  int v6 = notify_userprefs_token;
  if (notify_userprefs_token != -1) {
    goto LABEL_2;
  }
  uint32_t v20 = notify_register_check("com.apple.networkConnect", &notify_userprefs_token);
  if (v20)
  {
    uint32_t v8 = v20;
    uint64_t v9 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
      goto LABEL_13;
    }
    uint64_t v21 = _os_log_pack_size();
    uint64_t v19 = (char *)&v152 - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    goto LABEL_12;
  }
  notify_check(notify_userprefs_token, &check);
  checCFIndex k = 1;
  int v6 = notify_userprefs_token;
  if (notify_userprefs_token != -1)
  {
LABEL_2:
    uint32_t v7 = notify_check(v6, &check);
    if (!v7) {
      goto LABEL_14;
    }
    uint32_t v8 = v7;
    uint64_t v9 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v9 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v9;
    }
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
LABEL_13:
      notify_cancel(notify_userprefs_token);
      notify_userprefs_token = -1;
LABEL_14:
      if (!check) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    uint64_t v11 = _os_log_pack_size();
    uint64_t v19 = (char *)&v152 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
LABEL_12:
    int v29 = (_DWORD *)_os_log_pack_fill();
    *int v29 = 67109120;
    v29[1] = v8;
    __SC_log_send(5, (uint64_t)v9, v10, v19);
    goto LABEL_13;
  }
LABEL_15:
  CFPreferencesAppSynchronize(@"com.apple.networkConnect");
LABEL_16:
  *a2 = 0;
  *a3 = 0;
  if (a1)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"OnDemandHostName");
    if (Value)
    {
      CFStringRef v31 = Value;
      CFTypeID TypeID = CFStringGetTypeID();
    }
    else
    {
      CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(a1, @"OnDemandHostName");
      CFTypeID TypeID = CFStringGetTypeID();
      if (!v31) {
        goto LABEL_67;
      }
    }
    if (CFGetTypeID(v31) == TypeID)
    {
      uint64_t v38 = (__CFString *)CFDictionaryGetValue(a1, @"OnDemandPriority");
      CFTypeID v39 = CFStringGetTypeID();
      if (!v38 || CFGetTypeID(v38) != v39) {
        uint64_t v38 = @"Default";
      }
      uint64_t v164 = v38;
      CFStringRef v40 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v41 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
      CFArrayRef v42 = CFPreferencesCopyKeyList(@"com.apple.networkConnect", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
      CFTypeID v43 = CFArrayGetTypeID();
      if (v42)
      {
        if (CFGetTypeID(v42) != v43
          || (CFDictionaryRef v44 = CFPreferencesCopyMultiple(v42, @"com.apple.networkConnect", v40, v41),
              CFTypeID v45 = CFDictionaryGetTypeID(),
              !v44))
        {
          uint64_t v72 = 0;
          CFDictionaryRef v95 = v42;
          goto LABEL_100;
        }
        CFDictionaryRef v163 = v44;
        if (CFGetTypeID(v44) == v45)
        {
          CFIndex Count = CFArrayGetCount(v42);
          if (Count >= 1)
          {
            uint64_t v152 = @"OnDemandPriority";
            uint64_t v153 = a2;
            uint64_t v157 = a3;
            int v158 = 0;
            CFIndex v154 = 0;
            CFIndex v155 = 0;
            CFIndex v46 = 0;
            uint64_t v165 = @"PPP";
            uint64_t v161 = @"OnDemandEnabled";
            CFArrayRef v162 = v42;
            uint64_t v156 = @"OnDemandDomains";
            CFDictionaryRef v166 = a1;
            do
            {
              int valuePtr = 0;
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v42, v46);
              CFTypeID v48 = CFStringGetTypeID();
              if (ValueAtIndex)
              {
                if (CFGetTypeID(ValueAtIndex) == v48)
                {
                  CFArrayRef v49 = (const __CFArray *)CFDictionaryGetValue(v163, ValueAtIndex);
                  CFTypeID v50 = CFArrayGetTypeID();
                  if (v49)
                  {
                    if (CFGetTypeID(v49) == v50)
                    {
                      CFIndex v51 = CFArrayGetCount(v49);
                      if (v51 >= 1)
                      {
                        CFIndex v52 = v51;
                        for (CFIndex i = 0; i != v52; ++i)
                        {
                          CFDictionaryRef v54 = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, i);
                          CFTypeID v55 = CFDictionaryGetTypeID();
                          if (v54)
                          {
                            if (CFGetTypeID(v54) == v55)
                            {
                              CFDictionaryRef v56 = (const __CFDictionary *)CFDictionaryGetValue(v54, v165);
                              CFTypeID v57 = CFDictionaryGetTypeID();
                              if (v56)
                              {
                                if (CFGetTypeID(v56) == v57)
                                {
                                  CFNumberRef v58 = (const __CFNumber *)CFDictionaryGetValue(v56, v161);
                                  CFTypeID v59 = CFNumberGetTypeID();
                                  if (v58 && CFGetTypeID(v58) == v59)
                                  {
                                    CFNumberGetValue(v58, kCFNumberIntType, &valuePtr);
                                    CFArrayRef v42 = v162;
                                    if (valuePtr)
                                    {
                                      CFArrayRef v60 = (const __CFArray *)CFDictionaryGetValue(v56, v156);
                                      CFTypeID v61 = CFArrayGetTypeID();
                                      if (v60)
                                      {
                                        if (CFGetTypeID(v60) == v61)
                                        {
                                          CFIndex v160 = CFArrayGetCount(v60);
                                          if (v160 >= 1)
                                          {
                                            CFIndex v62 = 0;
                                            CFArrayRef v159 = v60;
                                            do
                                            {
                                              CFStringRef v63 = (const __CFString *)CFArrayGetValueAtIndex(v60, v62);
                                              CFTypeID v64 = CFStringGetTypeID();
                                              if (v63 && CFGetTypeID(v63) == v64)
                                              {
                                                CFArrayRef v42 = v162;
                                                if (!v158)
                                                {
                                                  if (CFStringCompare(v63, &stru_1EDD23408, 0)
                                                    && CFStringCompare(v63, @".", 0))
                                                  {
                                                    int v158 = 0;
                                                  }
                                                  else
                                                  {
                                                    int v158 = 1;
                                                    CFIndex v154 = v46;
                                                    CFIndex v155 = i;
                                                  }
                                                }
                                                if (_SC_domainEndsWithDomain(v31, v63))
                                                {
                                                  uint64_t v149 = v153;
                                                  *uint64_t v153 = ValueAtIndex;
                                                  CFRetain(ValueAtIndex);
                                                  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v54);
                                                  uint64_t v151 = v157;
                                                  *uint64_t v157 = MutableCopy;
                                                  CFDictionarySetValue(MutableCopy, @"OnDemandHostName", v31);
                                                  CFDictionarySetValue(*v151, v152, v164);
                                                  addPasswordFromKeychain(*v149, v151);
                                                  uint64_t v72 = 1;
                                                  a1 = v166;
LABEL_99:
                                                  CFRelease(v42);
                                                  CFDictionaryRef v95 = v163;
LABEL_100:
                                                  CFRelease(v95);
LABEL_101:
                                                  if (debug >= 2)
                                                  {
                                                    uint64_t v97 = __log_SCNetworkConnection_log;
                                                    if (!__log_SCNetworkConnection_log)
                                                    {
                                                      uint64_t v97 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                                                      __log_SCNetworkConnection_log = (uint64_t)v97;
                                                    }
                                                    uint64_t v98 = _SC_syslog_os_log_mapping(6);
                                                    if (__SC_log_enabled(6, v97, (os_log_type_t)v98))
                                                    {
                                                      uint64_t v99 = _os_log_pack_size();
                                                      uint64_t v107 = (char *)&v152
                                                           - ((MEMORY[0x1F4188790](v99, v100, v101, v102, v103, v104, v105, v106)+ 15) & 0xFFFFFFFFFFFFFFF0);
                                                      __error();
                                                      uint64_t v108 = _os_log_pack_fill();
                                                      uint64_t v109 = "succeeded";
                                                      if (!v72) {
                                                        uint64_t v109 = "failed";
                                                      }
                                                      *(_DWORD *)uint64_t v108 = 136315138;
                                                      *(void *)(v108 + 4) = v109;
                                                      __SC_log_send(6, (uint64_t)v97, v98, v107);
                                                    }
                                                    uint64_t v110 = __log_SCNetworkConnection_log;
                                                    if (!__log_SCNetworkConnection_log)
                                                    {
                                                      uint64_t v110 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
                                                      __log_SCNetworkConnection_log = (uint64_t)v110;
                                                    }
                                                    uint64_t v111 = _SC_syslog_os_log_mapping(6);
                                                    if (__SC_log_enabled(6, v110, (os_log_type_t)v111))
                                                    {
                                                      uint64_t v112 = _os_log_pack_size();
                                                      uint64_t v120 = (char *)&v152
                                                           - ((MEMORY[0x1F4188790](v112, v113, v114, v115, v116, v117, v118, v119)+ 15) & 0xFFFFFFFFFFFFFFF0);
                                                      __error();
                                                      uint64_t v121 = _os_log_pack_fill();
                                                      *(_DWORD *)uint64_t v121 = 138412290;
                                                      *(void *)(v121 + 4) = a1;
                                                      uint64_t v122 = (uint64_t)v110;
                                                      uint64_t v123 = v111;
                                                      goto LABEL_129;
                                                    }
                                                  }
                                                  return v72;
                                                }
                                              }
                                              else
                                              {
                                                CFArrayRef v42 = v162;
                                              }
                                              ++v62;
                                              CFArrayRef v60 = v159;
                                            }
                                            while (v160 != v62);
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    CFArrayRef v42 = v162;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v46;
              a1 = v166;
            }
            while (v46 != Count);
            if (v158)
            {
              CFStringRef v65 = (const __CFString *)CFArrayGetValueAtIndex(v42, v154);
              CFArrayRef v66 = (const __CFArray *)CFDictionaryGetValue(v163, v65);
              CFDictionaryRef v67 = (const __CFDictionary *)CFArrayGetValueAtIndex(v66, v155);
              char v68 = v153;
              *uint64_t v153 = v65;
              CFRetain(v65);
              uint64_t v69 = CFDictionaryCreateMutableCopy(0, 0, v67);
              uint64_t v70 = v157;
              *uint64_t v157 = v69;
              CFDictionarySetValue(v69, @"OnDemandHostName", v31);
              CFDictionarySetValue(*v70, v152, v164);
              CFStringRef v71 = *v68;
              CFArrayRef v42 = v162;
              addPasswordFromKeychain(v71, v70);
              uint64_t v72 = 1;
              goto LABEL_99;
            }
          }
        }
        uint64_t v72 = 0;
        goto LABEL_99;
      }
    }
LABEL_67:
    uint64_t v72 = 0;
    goto LABEL_101;
  }
  CFStringRef v33 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v34 = (const __CFString *)CFPreferencesCopyValue(@"ServiceID", @"com.apple.internetconnect", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v34)
  {
    CFStringRef v35 = v34;
    if (SCNetworkConnectionPrivateIsPPPService(v34, @"PPPSerial", @"PPPoE"))
    {
      CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"Setup:", v35, @"Interface");
      CFPropertyListRef v37 = SCDynamicStoreCopyValue(0, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
      if (v37)
      {
        CFRelease(v37);
        *a2 = (CFStringRef)CFRetain(v35);
        CFRelease(v35);
        goto LABEL_84;
      }
    }
    CFRelease(v35);
  }
  *a2 = 0;
  CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"Setup:", @"IPv4");
  if (!NetworkGlobalEntity)
  {
    int v96 = 1;
    fwrite("Error, Setup Key == NULL!\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    uint64_t v72 = 0;
    goto LABEL_122;
  }
  CFStringRef v74 = NetworkGlobalEntity;
  CFPropertyListRef v75 = SCDynamicStoreCopyValue(0, NetworkGlobalEntity);
  CFTypeID v76 = CFDictionaryGetTypeID();
  if (!v75 || CFGetTypeID(v75) != v76)
  {
    fwrite("no global IPv4 entity\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    int v84 = 0;
    goto LABEL_82;
  }
  uint64_t v77 = CFDictionaryGetValue((CFDictionaryRef)v75, @"ServiceOrder");
  CFTypeID v78 = CFArrayGetTypeID();
  if (!v77 || CFGetTypeID(v77) != v78)
  {
    fwrite("service order not specified\n", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
    goto LABEL_119;
  }
  CFIndex v79 = CFArrayGetCount((CFArrayRef)v77);
  if (v79 < 1)
  {
LABEL_119:
    CFRelease(v74);
    int v84 = 0;
    goto LABEL_120;
  }
  CFIndex v80 = v79;
  uint64_t v81 = a2;
  uint64_t v157 = a3;
  CFIndex v82 = 0;
  while (1)
  {
    CFStringRef v83 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v77, v82);
    if (SCNetworkConnectionPrivateIsPPPService(v83, @"PPPSerial", @"PPPoE")) {
      break;
    }
    if (v80 == ++v82)
    {
      int v84 = 0;
      a3 = v157;
      a2 = v81;
      goto LABEL_82;
    }
  }
  CFStringRef v148 = (const __CFString *)CFRetain(v83);
  a2 = v81;
  *uint64_t v81 = v148;
  int v84 = 1;
  a3 = v157;
LABEL_82:
  CFRelease(v74);
  if (!v75)
  {
    if (v84) {
      goto LABEL_84;
    }
LABEL_121:
    uint64_t v72 = 0;
    int v96 = 1;
    goto LABEL_122;
  }
LABEL_120:
  CFRelease(v75);
  if (!v84) {
    goto LABEL_121;
  }
LABEL_84:
  if (*a2)
  {
    CFArrayRef v85 = (const __CFArray *)CFPreferencesCopyValue(*a2, @"com.apple.networkConnect", v33, (CFStringRef)*MEMORY[0x1E4F1D3E0]);
    if (v85)
    {
      CFArrayRef v86 = v85;
      CFTypeID v87 = CFArrayGetTypeID();
      if (CFGetTypeID(v86) == v87)
      {
        CFIndex v88 = CFArrayGetCount(v86);
        if (v88 >= 1)
        {
          CFIndex v89 = v88;
          CFIndex v90 = 0;
          while (1)
          {
            CFDictionaryRef v91 = (const __CFDictionary *)CFArrayGetValueAtIndex(v86, v90);
            CFTypeID v92 = CFDictionaryGetTypeID();
            if (v91)
            {
              if (CFGetTypeID(v91) == v92)
              {
                uint64_t v93 = CFDictionaryGetValue(v91, @"ConnectByDefault");
                CFTypeID v94 = CFBooleanGetTypeID();
                if (v93)
                {
                  if (CFGetTypeID(v93) == v94 && CFBooleanGetValue((CFBooleanRef)v93)) {
                    break;
                  }
                }
              }
            }
            if (v89 == ++v90) {
              goto LABEL_95;
            }
          }
          *a3 = CFDictionaryCreateCopy(0, v91);
        }
LABEL_95:
        addPasswordFromKeychain(*a2, a3);
      }
      else
      {
        uint64_t v124 = __log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          uint64_t v124 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v124;
        }
        uint64_t v125 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v124, (os_log_type_t)v125))
        {
          uint64_t v126 = _os_log_pack_size();
          uint64_t v134 = (char *)&v152
               - ((MEMORY[0x1F4188790](v126, v127, v128, v129, v130, v131, v132, v133) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v124, v125, v134);
        }
      }
      CFRelease(v86);
    }
  }
  int v96 = 0;
  uint64_t v72 = 1;
LABEL_122:
  if (debug >= 2)
  {
    uint64_t v135 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v135 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v135;
    }
    uint64_t v136 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v135, (os_log_type_t)v136))
    {
      uint64_t v137 = _os_log_pack_size();
      uint64_t v120 = (char *)&v152
           - ((MEMORY[0x1F4188790](v137, v138, v139, v140, v141, v142, v143, v144) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v145 = _os_log_pack_fill();
      uint64_t v146 = @"succeeded";
      if (v96) {
        uint64_t v146 = @"failed";
      }
      *(_DWORD *)uint64_t v145 = 138412290;
      *(void *)(v145 + 4) = v146;
      uint64_t v122 = (uint64_t)v135;
      uint64_t v123 = v136;
LABEL_129:
      __SC_log_send(6, v122, v123, v120);
    }
  }
  return v72;
}

uint64_t SCNetworkConnectionOnDemandShouldRetryOnFailure(CFDictionaryRef *cf)
{
  if (__SCNetworkConnectionInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_16:
      int v10 = 1002;
      goto LABEL_17;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (!cf) {
      goto LABEL_16;
    }
  }
  uint64_t v2 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_16;
  }
  if (!cf[10])
  {
    int v10 = 5001;
LABEL_17:
    _SCErrorSet(v10);
    return 0;
  }
  CFDictionaryRef v3 = cf[40];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v3) {
    return 0;
  }
  if (CFGetTypeID(v3) != TypeID) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(cf[40], @"OnDemandMatchInfo");
  CFTypeID v6 = CFDictionaryGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != v6) {
    return 0;
  }
  uint32_t v7 = CFDictionaryGetValue((CFDictionaryRef)Value, @"OnDemandMatchInfoOnRetry");
  CFTypeID v8 = CFBooleanGetTypeID();
  if (!v7 || CFGetTypeID(v7) != v8) {
    return 0;
  }

  return CFBooleanGetValue((CFBooleanRef)v7);
}

uint64_t SCNetworkConnectionCanTunnelAddress(void *cf, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = a2;
  if (a3) {
    *a3 = 0;
  }
  if (a2)
  {
    int v6 = *(unsigned __int8 *)(a2 + 1);
    if (v6 != 30 && v6 != 2) {
      return 0;
    }
    if (__SCNetworkConnectionInitialize_initialized == -1)
    {
      if (!cf) {
        goto LABEL_42;
      }
    }
    else
    {
      dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
      if (!cf) {
        goto LABEL_42;
      }
    }
    uint64_t v8 = __kSCNetworkConnectionTypeID;
    if (CFGetTypeID(cf) == v8)
    {
      uint64_t v9 = (const __SCNetworkService *)cf[10];
      if (v9)
      {
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v9);
        CFTypeID TypeID = CFStringGetTypeID();
        if (ServiceID)
        {
          if (CFGetTypeID(ServiceID) == TypeID)
          {
            CFDictionaryRef v12 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
            if (v12)
            {
              CFDictionaryRef v13 = v12;
              CFDictionaryRef v14 = __SCNetworkConnectionCopyTriggerWithService(v12, ServiceID);
              if (v14)
              {
                CFDictionaryRef v15 = v14;
                uint64_t v16 = (const void *)cf[41];
                CFTypeID v17 = CFStringGetTypeID();
                if (v16
                  && CFGetTypeID(v16) == v17
                  && ((Value = CFDictionaryGetValue(v15, @"ProbeResults"), CFTypeID v19 = CFDictionaryGetTypeID(), !Value)
                   || CFGetTypeID(Value) != v19
                   || (uint32_t v20 = CFDictionaryGetValue((CFDictionaryRef)Value, v16), v21 = CFBooleanGetTypeID(), v20)
                   && CFGetTypeID(v20) == v21
                   && !CFBooleanGetValue((CFBooleanRef)v20))
                  || __SCNetworkConnectionAddressMatchesRedirectedDNS(v15, v4))
                {
                  uint64_t v4 = 1;
                  if (a3) {
                    *a3 = 1;
                  }
                  goto LABEL_39;
                }
                CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"TunneledNetworks");
                if (isA_CFDictionary(v23))
                {
                  if (v6 == 2)
                  {
                    CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(v23, @"IPv4");
                    if (isA_CFDictionary(v24))
                    {
                      uint64_t v25 = CFDictionaryGetValue(v24, @"IncludedRoutes");
                      if (__SCNetworkConnectionIPv4AddressMatchesRoutes(v4, v25))
                      {
                        uint64_t v26 = CFDictionaryGetValue(v24, @"ExcludedRoutes");
                        if (!__SCNetworkConnectionIPv4AddressMatchesRoutes(v4, v26))
                        {
LABEL_40:
                          uint64_t v4 = 1;
                          goto LABEL_39;
                        }
                      }
                    }
                  }
                  else
                  {
                    CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v23, @"IPv6");
                    if (isA_CFDictionary(v27))
                    {
                      uint64_t v28 = CFDictionaryGetValue(v27, @"IncludedRoutes");
                      if (__SCNetworkConnectionIPv6AddressMatchesRoutes(v4, v28))
                      {
                        int v29 = CFDictionaryGetValue(v27, @"ExcludedRoutes");
                        if (!__SCNetworkConnectionIPv6AddressMatchesRoutes(v4, v29)) {
                          goto LABEL_40;
                        }
                      }
                    }
                  }
                }
                uint64_t v4 = 0;
LABEL_39:
                CFRelease(v13);
                CFRelease(v15);
                return v4;
              }
              CFRelease(v13);
            }
          }
        }
        return 0;
      }
      int v22 = 5001;
LABEL_43:
      _SCErrorSet(v22);
      return 0;
    }
LABEL_42:
    int v22 = 1002;
    goto LABEL_43;
  }
  return v4;
}

CFDictionaryRef __SCNetworkConnectionCopyTriggerWithService(const __CFDictionary *a1, const void *a2)
{
  CFStringRef Value = CFDictionaryGetValue(a1, @"Triggers");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v9)
      {
        int v10 = CFDictionaryGetValue(ValueAtIndex, @"ServiceID");
        CFTypeID v11 = CFStringGetTypeID();
        if (v10)
        {
          if (CFGetTypeID(v10) == v11 && CFEqual(v10, a2)) {
            break;
          }
        }
      }
    }
    if (v6 == ++v7) {
      return 0;
    }
  }
  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

uint64_t __SCNetworkConnectionAddressMatchesRedirectedDNS(const __CFDictionary *a1, uint64_t a2)
{
  CFStringRef Value = CFDictionaryGetValue(a1, @"DNSRedirectDetected");
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  if (!CFBooleanGetValue((CFBooleanRef)Value)) {
    return 0;
  }
  CFIndex v6 = CFDictionaryGetValue(a1, @"DNSRedirectedAddresses");
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7) {
    return 0;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 != 30)
  {
    if (v8 == 2)
    {
      CFTypeID v9 = CFDictionaryGetValue((CFDictionaryRef)v6, @"IPv4");
      return __SCNetworkConnectionIPv4AddressMatchesRoutes(a2, v9);
    }
    return 0;
  }
  CFTypeID v11 = CFDictionaryGetValue((CFDictionaryRef)v6, @"IPv6");

  return __SCNetworkConnectionIPv6AddressMatchesRoutes(a2, v11);
}

uint64_t __SCNetworkConnectionIPv4AddressMatchesRoutes(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    return 0;
  }
  if (CFGetTypeID(a2) != TypeID) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Addresses");
  CFIndex v6 = (int *)CFDictionaryGetValue((CFDictionaryRef)a2, @"Masks");
  CFTypeID v7 = CFDataGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7) {
    return 0;
  }
  if (v6)
  {
    CFTypeID v8 = CFDataGetTypeID();
    if (CFGetTypeID(v6) != v8) {
      return 0;
    }
    CFIndex Length = CFDataGetLength((CFDataRef)Value);
    if (Length != CFDataGetLength((CFDataRef)v6)) {
      return 0;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    CFIndex v6 = (int *)CFDataGetBytePtr((CFDataRef)v6);
  }
  else
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
  }
  unint64_t v11 = CFDataGetLength((CFDataRef)Value);
  if (v11 < 4) {
    return 0;
  }
  unint64_t v13 = v11 >> 2;
  while (1)
  {
    int v14 = *(_DWORD *)BytePtr;
    if (!v6) {
      break;
    }
    int v15 = *v6++;
    if (((*(_DWORD *)(a1 + 4) ^ v14) & v15) == 0) {
      return 1;
    }
LABEL_18:
    uint64_t result = 0;
    BytePtr += 4;
    if (!--v13) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 4) != v14)
  {
    CFIndex v6 = 0;
    goto LABEL_18;
  }
  return 1;
}

uint64_t __SCNetworkConnectionIPv6AddressMatchesRoutes(uint64_t a1, const void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    return 0;
  }
  if (CFGetTypeID(a2) != TypeID) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"Addresses");
  CFIndex v6 = CFDictionaryGetValue((CFDictionaryRef)a2, @"Masks");
  CFTypeID v7 = CFDataGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7) {
    return 0;
  }
  if (v6)
  {
    CFTypeID v8 = CFDataGetTypeID();
    if (CFGetTypeID(v6) != v8) {
      return 0;
    }
    CFIndex Length = CFDataGetLength((CFDataRef)Value);
    if (Length != CFDataGetLength((CFDataRef)v6)) {
      return 0;
    }
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    unint64_t v11 = CFDataGetBytePtr((CFDataRef)v6);
  }
  else
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)Value);
    unint64_t v11 = 0;
  }
  unint64_t v12 = CFDataGetLength((CFDataRef)Value);
  if (v12 >= 0x10)
  {
    uint64_t v14 = 0;
    int v15 = (long long *)(a1 + 8);
    unint64_t v16 = v12 >> 4;
    while (1)
    {
      if (v6)
      {
        uint64_t v17 = 0;
        long long v18 = *v15;
        long long v22 = *(_OWORD *)BytePtr;
        long long v23 = v18;
        do
        {
          *((unsigned char *)&v22 + v17) &= v11[v17];
          ++v17;
        }
        while (v17 != 16);
        for (uint64_t i = 0; i != 16; ++i)
          *((unsigned char *)&v23 + i) &= v11[i];
        if ((void)v22 == (void)v23 && *((void *)&v22 + 1) == *((void *)&v23 + 1)) {
          return 1;
        }
        v11 += 16;
      }
      else if (*(void *)BytePtr == *(void *)v15 && *((void *)BytePtr + 1) == *(void *)(a1 + 16))
      {
        return 1;
      }
      uint64_t result = 0;
      BytePtr += 16;
      if (++v14 == v16) {
        return result;
      }
    }
  }
  return 0;
}

BOOL SCNetworkConnectionSelectServiceWithOptions(char *cf, const void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CFTypeRef v46 = 0;
  int valuePtr = -1;
  CFTypeRef cfa = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v42 = 0;
  if (__SCNetworkConnectionInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkConnectionInitialize_initialized, &__block_literal_global_8);
    if (cf) {
      goto LABEL_3;
    }
LABEL_5:
    _SCErrorSet(1002);
    CFDictionaryRef v5 = 0;
    CFDictionaryRef v6 = 0;
LABEL_6:
    CFTypeID v7 = 0;
    BOOL v8 = 0;
    goto LABEL_7;
  }
  if (!cf) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkConnectionTypeID;
  if (CFGetTypeID(cf) != v4 || *((void *)cf + 10)) {
    goto LABEL_5;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    CFStringRef v13 = 0;
    uint64_t v14 = 0;
    BOOL v16 = 0;
LABEL_28:
    int v17 = 1;
    goto LABEL_29;
  }
  unint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a2, @"NoUserPrefs");
  unint64_t v12 = CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandRetry");
  CFStringRef v13 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandAccountIdentifier");
  uint64_t v14 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"OnDemandHostName");
  CFTypeID v15 = CFBooleanGetTypeID();
  BOOL v16 = v11 && CFGetTypeID(v11) == v15 && CFBooleanGetValue((CFBooleanRef)v11) != 0;
  CFTypeID v31 = CFBooleanGetTypeID();
  if (!v12 || CFGetTypeID(v12) != v31) {
    goto LABEL_28;
  }
  int v17 = CFBooleanGetValue((CFBooleanRef)v12);
LABEL_29:
  CFDictionaryRef v5 = (const __CFDictionary *)__SCNetworkConnectionCopyOnDemandConfiguration();
  int v18 = *((_DWORD *)cf + 42);
  CFStringRef v19 = (const __CFString *)*((void *)cf + 24);
  long long v20 = *(_OWORD *)(cf + 140);
  *(_OWORD *)value = *(_OWORD *)(cf + 124);
  long long v48 = v20;
  CFStringRef v21 = VPNAppLayerCopyMatchingService(value, v18, (const unsigned __int8 *)cf + 172, v19, v14, v13);
  CFTypeRef cfa = v21;
  CFTypeID v22 = CFDictionaryGetTypeID();
  if (v21)
  {
    if (v5 && CFGetTypeID(v5) == v22)
    {
      CFDictionaryRef v23 = __SCNetworkConnectionCopyTriggerWithService(v5, v21);
      CFDictionaryRef v6 = v23;
      if (v23)
      {
        value[0] = 0;
        if (!CFDictionaryGetValueIfPresent(v23, @"Status", (const void **)value)
          || (uint64_t v24 = value[0], v25 = CFNumberGetTypeID(), !v24)
          || CFGetTypeID(v24) != v25
          || !CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
        {
          int valuePtr = -1;
        }
        if (__SCNetworkConnectionShouldIgnoreTrigger(v6) && valuePtr != 1 && valuePtr != 2)
        {
          CFRelease(v21);
          CFTypeRef cfa = 0;
          if (v46)
          {
            CFRelease(v46);
            CFTypeRef v46 = 0;
          }
          CFRelease(v6);
          CFTypeID v22 = CFDictionaryGetTypeID();
          goto LABEL_53;
        }
      }
    }
    else
    {
      CFDictionaryRef v6 = 0;
    }
    BOOL v8 = 1;
    if (!v17)
    {
      if (v46)
      {
        if (valuePtr != 1 && valuePtr != 2)
        {
          CFBooleanRef v26 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)v46, @"OnDemandMatchInfoOnRetry");
          if (v26) {
            BOOL v8 = CFBooleanGetValue(v26) == 0;
          }
        }
      }
    }
    *((_DWORD *)cf + 76) = 3;
    goto LABEL_80;
  }
  if (!v5)
  {
    char v27 = 1;
    goto LABEL_64;
  }
LABEL_53:
  char v27 = 0;
  if (CFGetTypeID(v5) == v22 && v14)
  {
    LOBYTE(value[0]) = 0;
    CFDictionaryRef v28 = (const __CFDictionary *)__SCNetworkConnectionCopyMatchingTriggerWithName(v5, v14, *((_DWORD *)cf + 42), v17, &v46, value, &v44);
    CFDictionaryRef v6 = v28;
    if (v28)
    {
      int v29 = CFDictionaryGetValue(v28, @"ServiceID");
      CFTypeRef cfa = v29;
      CFTypeID v30 = CFStringGetTypeID();
      if (v29 && CFGetTypeID(v29) == v30)
      {
        CFRetain(v29);
        *((_DWORD *)cf + 76) = 2;
      }
      else
      {
        CFTypeRef cfa = 0;
      }
      BOOL v8 = LOBYTE(value[0]) != 0;
      goto LABEL_80;
    }
    if (!v17)
    {
LABEL_75:
      BOOL v8 = 1;
      goto LABEL_80;
    }
    if (v46)
    {
      CFRelease(v46);
      CFTypeRef v46 = 0;
    }
    char v27 = 0;
    if (v16)
    {
LABEL_74:
      CFDictionaryRef v6 = 0;
      goto LABEL_75;
    }
    goto LABEL_65;
  }
LABEL_64:
  if (v16) {
    goto LABEL_74;
  }
LABEL_65:
  if (!__SCNetworkConnectionCopyUserPreferencesInternal((const __CFDictionary *)a2, (CFStringRef *)&cfa, (CFDictionaryRef *)&v42))goto LABEL_74; {
  CFTypeID v32 = CFDictionaryGetTypeID();
  }
  if (v27)
  {
    CFDictionaryRef v6 = 0;
  }
  else
  {
    CFDictionaryRef v6 = 0;
    if (CFGetTypeID(v5) == v32 && v5) {
      CFDictionaryRef v6 = __SCNetworkConnectionCopyTriggerWithService(v5, cfa);
    }
  }
  BOOL v8 = 1;
  *((_DWORD *)cf + 76) = 1;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, cf + 304);
  CFDictionarySetValue(Mutable, @"OnDemandMatchInfoVPNType", v34);
  CFRelease(v34);
  CFTypeRef v46 = Mutable;
LABEL_80:
  if (cfa)
  {
    CFStringRef v35 = _SCNetworkServiceCopyActive(0, (const __CFString *)cfa);
    *((void *)cf + 10) = v35;
    if (!v35)
    {
      _SCErrorSet(0);
      goto LABEL_6;
    }
    if (v6)
    {
      uint64_t v36 = (const void *)*((void *)cf + 39);
      if (v36) {
        CFRelease(v36);
      }
      *((void *)cf + 39) = v6;
      CFRetain(v6);
      int v37 = valuePtr;
      if (valuePtr == -1)
      {
        value[0] = 0;
        if (CFDictionaryGetValueIfPresent(v6, @"Status", (const void **)value)
          && isA_CFNumber(value[0])
          && CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt32Type, &valuePtr))
        {
          int v37 = valuePtr;
        }
        else
        {
          int v37 = -1;
          int valuePtr = -1;
        }
      }
      if (v37 == 2) {
        goto LABEL_101;
      }
      if (*((_DWORD *)cf + 76) == 3)
      {
        uint64_t v38 = CFDictionaryGetValue(v6, @"OnDemandMatchAppEnabled");
        if (!isA_CFBoolean(v38) || !CFBooleanGetValue((CFBooleanRef)v38)) {
          goto LABEL_101;
        }
      }
    }
    else if (*((_DWORD *)cf + 76) != 1)
    {
      goto LABEL_101;
    }
    cf[308] = 1;
LABEL_101:
    CFAllocatorRef v39 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v42) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(v39, 0, (CFDictionaryRef)v42);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(v39, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFTypeID v7 = MutableCopy;
    if (v14) {
      CFDictionarySetValue(MutableCopy, @"OnDemandHostName", v14);
    }
    if (cf[308] && v46) {
      CFDictionarySetValue(v7, @"OnDemandMatchInfo", v46);
    }
    *((void *)cf + 40) = v7;
    CFRetain(v7);
    CFTypeRef v41 = v44;
    if (v44)
    {
      *((void *)cf + 41) = v44;
      CFRetain(v41);
    }
LABEL_7:
    if (cfa) {
      CFRelease(cfa);
    }
    if (v5) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  _SCErrorSet(0);
  BOOL v8 = 0;
  CFTypeID v7 = 0;
  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  if (v6) {
    CFRelease(v6);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v44) {
    CFRelease(v44);
  }
  return v8;
}

BOOL __SCNetworkConnectionShouldIgnoreTrigger(const __CFDictionary *a1)
{
  CFStringRef Value = CFDictionaryGetValue(a1, @"Action");
  CFTypeID TypeID = CFStringGetTypeID();
  return Value
      && CFGetTypeID(Value) == TypeID
      && (CFEqual(Value, @"Ignore") || CFEqual(Value, @"Disconnect"));
}

const char *__SCNetworkConnectionGetControllerPortName()
{
  uint64_t result = (const char *)scnc_server_name;
  if (!scnc_server_name)
  {
    getpid();
    if (sandbox_check()) {
      uint64_t result = "com.apple.SystemConfiguration.PPPController";
    }
    else {
      uint64_t result = "com.apple.SystemConfiguration.PPPController-priv";
    }
    scnc_server_io_name_t name = (uint64_t)result;
  }
  return result;
}

void childForkHandler_0()
{
  scnc_server = 0;
  scnc_server_io_name_t name = 0;
}

uint64_t __SCNetworkConnectionDeallocate(uint64_t a1)
{
  v30[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    uint64_t v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v2;
  }
  uint64_t v3 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    unint64_t v12 = (char *)v30 - ((MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = a1 + 88;
    __SC_log_send(7, (uint64_t)v2, v3, v12);
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  mach_port_name_t v14 = *(_DWORD *)(a1 + 120);
  CFTypeID v15 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (v14) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v14);
  }
  mach_port_name_t v16 = *(_DWORD *)(a1 + 156);
  if (v16) {
    mach_port_deallocate(*v15, v16);
  }
  int v17 = *(const void **)(a1 + 192);
  if (v17) {
    CFRelease(v17);
  }
  int v18 = *(__CFRunLoopSource **)(a1 + 224);
  if (v18)
  {
    CFRunLoopSourceInvalidate(v18);
    CFRelease(*(CFTypeRef *)(a1 + 224));
  }
  CFStringRef v19 = *(const void **)(a1 + 280);
  if (v19) {
    CFRelease(v19);
  }
  long long v20 = *(__CFMachPort **)(a1 + 208);
  if (v20)
  {
    mach_port_name_t Port = CFMachPortGetPort(v20);
    CFMachPortInvalidate(*(CFMachPortRef *)(a1 + 208));
    CFRelease(*(CFTypeRef *)(a1 + 208));
    mach_port_mod_refs(*v15, Port, 1u, -1);
  }
  mach_port_name_t v22 = *(_DWORD *)(a1 + 200);
  if (v22) {
    mach_port_deallocate(*v15, v22);
  }
  CFDictionaryRef v23 = *(void (**)(void))(a1 + 264);
  if (v23) {
    v23(*(void *)(a1 + 248));
  }
  uint64_t v24 = *(const void **)(a1 + 80);
  if (v24) {
    CFRelease(v24);
  }
  CFTypeID v25 = *(const void **)(a1 + 312);
  if (v25) {
    CFRelease(v25);
  }
  CFBooleanRef v26 = *(const void **)(a1 + 320);
  if (v26) {
    CFRelease(v26);
  }
  char v27 = *(const void **)(a1 + 328);
  if (v27) {
    CFRelease(v27);
  }
  CFDictionaryRef v28 = *(const void **)(a1 + 336);
  if (v28) {
    CFRelease(v28);
  }
  uint64_t result = *(void *)(a1 + 344);
  if (result)
  {
    ne_session_set_event_handler();
    return ne_session_release();
  }
  return result;
}

__CFString *__SCNetworkConnectionCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkConnection, %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"service = %p", *(void *)(a1 + 80));
  if (*(_DWORD *)(a1 + 200)) {
    CFStringAppendFormat(Mutable, 0, @", server port = 0x%x", *(unsigned int *)(a1 + 200));
  }
  if (*(void *)(a1 + 344)) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @"using NetworkExtension = %s", v4);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

CFStringRef pppMPCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<SCNetworkConnection MP %p> {service = %@, callout = %p}", a1, *(void *)(a1 + 80), *(void *)(a1 + 232), *MEMORY[0x1E4F143B8]);
}

void __SCNetworkConnectionMachCallBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 20) == 70)
  {
    uint64_t v5 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v5;
    }
    uint64_t v6 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      CFTypeID v15 = (char *)v16 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v5, v6, v15);
    }
    __SCNetworkConnectionReconnectNotifications(a4);
  }
  __SCNetworkConnectionCallBack(a4);
}

uint64_t __SCNetworkConnectionServerPort(kern_return_t *a1)
{
  kern_return_t v4;
  uint64_t result;
  mach_port_t sp;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sp = 0;
  mach_port_t v2 = *MEMORY[0x1E4F14638];
  ControllerPortCFStringRef Name = __SCNetworkConnectionGetControllerPortName();
  uint64_t v4 = bootstrap_look_up(v2, ControllerPortName, &sp);
  *a1 = v4;
  if (!v4) {
    return sp;
  }
  uint64_t result = 0;
  scnc_server_io_name_t name = 0;
  return result;
}

void __SCNetworkConnectionReconnectNotifications(uint64_t a1)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  mach_port_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  CFArrayRef v3 = *(const __CFArray **)(a1 + 280);
  if (v3) {
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v4 = *(__CFRunLoopSource **)(a1 + 224);
  if (v4)
  {
    CFRunLoopSourceInvalidate(v4);
    CFRelease(*(CFTypeRef *)(a1 + 224));
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v5 = *(NSObject **)(a1 + 296);
  if (v5)
  {
    dispatch_source_cancel(v5);
    *(void *)(a1 + 296) = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 288) = 0;
    dispatch_retain(v6);
    *(unsigned char *)(a1 + 217) = 0;
    pthread_mutex_unlock(v2);
    if (!v3)
    {
      if (SCNetworkConnectionSetDispatchQueue((SCNetworkConnectionRef)a1, v6))
      {
        int v7 = 1;
      }
      else
      {
        if (SCError() != 1102)
        {
          CFAllocatorRef v39 = __log_SCNetworkConnection_log;
          if (!__log_SCNetworkConnection_log)
          {
            CFAllocatorRef v39 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
            __log_SCNetworkConnection_log = (uint64_t)v39;
          }
          uint64_t v40 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
          {
            uint64_t v41 = _os_log_pack_size();
            uint64_t v49 = (char *)v50
                - ((MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v39, v40, v49);
          }
        }
        int v7 = 0;
      }
      goto LABEL_25;
    }
LABEL_12:
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1)
    {
      int v7 = 1;
    }
    else
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (__CFRunLoop *)CFArrayGetValueAtIndex(v3, v10 + 1);
        CFStringRef v12 = (const __CFString *)CFArrayGetValueAtIndex(v3, v10 + 2);
        int v13 = SCNetworkConnectionScheduleWithRunLoop((SCNetworkConnectionRef)a1, ValueAtIndex, v12);
        if (!v13) {
          break;
        }
        int v7 = v13;
        v10 += 3;
        if (v10 >= v9) {
          goto LABEL_24;
        }
      }
      if (SCError() != 1102)
      {
        uint64_t v14 = __log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          uint64_t v14 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v14;
        }
        uint64_t v15 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
        {
          uint64_t v16 = _os_log_pack_size();
          uint64_t v24 = (char *)v50
              - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v14, v15, v24);
        }
      }
      int v7 = 0;
    }
LABEL_24:
    CFRelease(v3);
    if (!v6)
    {
LABEL_26:
      if (v7) {
        return;
      }
      goto LABEL_27;
    }
LABEL_25:
    dispatch_release(v6);
    goto LABEL_26;
  }
  *(unsigned char *)(a1 + 217) = 0;
  pthread_mutex_unlock(v2);
  if (v3) {
    goto LABEL_12;
  }
LABEL_27:
  CFTypeID v25 = __log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    CFTypeID v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v25;
  }
  uint64_t v26 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
  {
    uint64_t v27 = _os_log_pack_size();
    CFStringRef v35 = (char *)v50 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v36 = _os_log_pack_fill();
    int v37 = SCError();
    uint64_t v38 = "failed";
    if (v37 == 1102) {
      uint64_t v38 = "shutdown";
    }
    *(_DWORD *)uint64_t v36 = 136315138;
    *(void *)(v36 + 4) = v38;
    __SC_log_send(5, (uint64_t)v25, v26, v35);
  }
}

void __SCNetworkConnectionCallBack(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  mach_port_t v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (*(unsigned char *)(a1 + 217))
  {
    CFArrayRef v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 232);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 248);
      uint64_t v4 = *(uint64_t (**)(void))(a1 + 256);
      if (v4 && v5)
      {
        uint64_t v5 = v4(*(void *)(a1 + 248));
        uint64_t v6 = *(uint64_t (**)(uint64_t))(a1 + 264);
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (*(void *)(a1 + 344))
      {
LABEL_13:
        pthread_mutex_unlock(v2);
        uint64_t Status = SCNetworkConnectionGetStatus((SCNetworkConnectionRef)a1);
        __SCNetworkConnectionNotify(a1, v3, Status, v6, v5);
        CFRelease((CFTypeRef)a1);
        return;
      }
      CFRetain((CFTypeRef)a1);
      if (*(void *)(a1 + 280))
      {
        CFAbsoluteTime Current = CFRunLoopGetCurrent();
        if (!Current) {
          __SCNetworkConnectionCallBack_cold_2();
        }
        uint64_t v21 = Current;
        if (Current != CFRunLoopGetMain()) {
          goto LABEL_13;
        }
        CFRetain(v21);
        CFRunLoopMode v22 = CFRunLoopCopyCurrentMode(v21);
        pthread_mutex_unlock(v2);
        if (__SCNetworkConnectionQueue_once != -1) {
          dispatch_once(&__SCNetworkConnectionQueue_once, &__block_literal_global_119_0);
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ____SCNetworkConnectionCallBack_block_invoke;
        block[3] = &__block_descriptor_tmp_132;
        block[4] = a1;
        void block[5] = v21;
        void block[6] = v22;
        void block[7] = v3;
        void block[8] = v6;
        block[9] = v5;
        dispatch_async((dispatch_queue_t)__SCNetworkConnectionQueue_q, block);
      }
      else
      {
        uint64_t v23 = *(NSObject **)(a1 + 288);
        if (!v23) {
          __SCNetworkConnectionCallBack_cold_1();
        }
        pthread_mutex_unlock(v2);
        SCNetworkConnectionStatus v24 = SCNetworkConnectionGetStatus((SCNetworkConnectionRef)a1);
        CFRetain((CFTypeRef)a1);
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 0x40000000;
        uint64_t v26[2] = ____SCNetworkConnectionCallBackPerformDispatch_block_invoke;
        v26[3] = &__block_descriptor_tmp_135;
        v26[4] = a1;
        v26[5] = v3;
        SCNetworkConnectionStatus v27 = v24;
        v26[6] = v6;
        v26[7] = v5;
        dispatch_async(v23, v26);
        CFRelease((CFTypeRef)a1);
      }
    }
    else
    {
      pthread_mutex_unlock(v2);
    }
  }
  else
  {
    int v7 = __log_SCNetworkConnection_log;
    if (!__log_SCNetworkConnection_log)
    {
      int v7 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
      __log_SCNetworkConnection_log = (uint64_t)v7;
    }
    uint64_t v8 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)block - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = a1 + 88;
      __SC_log_send(6, (uint64_t)v7, v8, v17);
    }
    pthread_mutex_unlock(v2);
  }
}

uint64_t __SCNetworkConnectionNotify(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = __log_SCNetworkConnection_log;
  if (!__log_SCNetworkConnection_log)
  {
    uint64_t v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
    __log_SCNetworkConnection_log = (uint64_t)v10;
  }
  uint64_t v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v20 = (char *)v23 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 136315394;
    *(void *)(v21 + 4) = a1 + 88;
    *(_WORD *)(v21 + 12) = 1024;
    *(_DWORD *)(v21 + 14) = a3;
    __SC_log_send(7, (uint64_t)v10, v11, v20);
  }
  uint64_t result = a2(a1, a3, a5);
  if (a4)
  {
    if (a5) {
      return a4(a5);
    }
  }
  return result;
}

uint64_t __SCNetworkConnectionShouldNeverMatch(const __CFDictionary *a1, const __CFString *a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"OnDemandMatchDomainsNever");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, v10);
          CFTypeID v12 = CFStringGetTypeID();
          if (ValueAtIndex)
          {
            if (CFGetTypeID(ValueAtIndex) == v12 && _SC_domainEndsWithDomain(a2, ValueAtIndex)) {
              break;
            }
          }
          if (v9 == ++v10) {
            goto LABEL_9;
          }
        }
        uint64_t v21 = __log_SCNetworkConnection_log;
        if (!__log_SCNetworkConnection_log)
        {
          uint64_t v21 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConnection");
          __log_SCNetworkConnection_log = (uint64_t)v21;
        }
        uint64_t v22 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
        {
          uint64_t v23 = _os_log_pack_size();
          uint64_t v31 = (char *)&v32
              - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v21, v22, v31);
          return 1;
        }
        return 1;
      }
    }
  }
LABEL_9:
  if (a3)
  {
    CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(a1, @"PluginPIDs");
    CFTypeID v14 = CFArrayGetTypeID();
    if (v13)
    {
      if (CFGetTypeID(v13) == v14)
      {
        CFIndex v15 = CFArrayGetCount(v13);
        if (v15 >= 1)
        {
          CFIndex v16 = v15;
          CFIndex v17 = 0;
          while (1)
          {
            HIDWORD(v32) = 0;
            uint64_t v18 = CFArrayGetValueAtIndex(v13, v17);
            CFTypeID v19 = CFNumberGetTypeID();
            if (v18)
            {
              if (CFGetTypeID(v18) == v19
                && CFNumberGetValue((CFNumberRef)v18, kCFNumberIntType, (char *)&v32 + 4)
                && HIDWORD(v32) == a3)
              {
                break;
              }
            }
            if (v16 == ++v17) {
              return 0;
            }
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

CFStringRef __SCNetworkConnectionDomainGetMatch(const __CFDictionary *a1, const __CFString *a2, int a3)
{
  if (a3) {
    uint64_t v4 = @"OnDemandMatchDomainsOnRetry";
  }
  else {
    uint64_t v4 = @"OnDemandMatchDomainsAlways";
  }
  CFArrayRef Value = CFDictionaryGetValue(a1, v4);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return 0;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, v9);
    CFTypeID v11 = CFStringGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v11 && _SC_domainEndsWithDomain(a2, ValueAtIndex)) {
        break;
      }
    }
    if (v8 == ++v9) {
      return 0;
    }
  }
  return ValueAtIndex;
}

void addPasswordFromKeychain(const __CFString *a1, CFDictionaryRef *a2)
{
  if (*a2)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*a2, @"UniqueIdentifier");
    CFTypeID TypeID = CFStringGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID && SCNetworkConnectionPrivateIsPPPService(a1, @"L2TP", 0))
      {
        CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, Value);
        CFStringAppend(MutableCopy, @".SS");
        CFRelease(MutableCopy);
      }
    }
  }
}

CFStringRef SCNetworkConnectionPrivateIsPPPService(CFStringRef serviceID, const void *a2, const void *a3)
{
  CFStringRef result = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"Setup:", serviceID, @"Interface");
  if (!result) {
    return result;
  }
  CFStringRef v6 = result;
  CFDictionaryRef v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, result);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v8) == TypeID)
    {
      CFStringRef Value = CFDictionaryGetValue(v8, @"Type");
      CFTypeID v11 = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v11) {
          LODWORD(Value) = CFEqual(Value, @"PPP");
        }
        else {
          LODWORD(Value) = 0;
        }
      }
      CFArrayRef v13 = CFDictionaryGetValue(v8, @"SubType");
      CFTypeID v14 = CFStringGetTypeID();
      if (v13 && CFGetTypeID(v13) == v14)
      {
        int v15 = CFEqual(v13, a2);
        int v12 = v15;
        if (a3 && !v15) {
          int v12 = CFEqual(v13, a3);
        }
        goto LABEL_16;
      }
    }
    else
    {
      LODWORD(Value) = 0;
    }
    int v12 = 0;
LABEL_16:
    CFRelease(v8);
    goto LABEL_17;
  }
  LODWORD(Value) = 0;
  int v12 = 0;
LABEL_17:
  CFRelease(v6);
  if (Value) {
    BOOL v16 = v12 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  return (const __CFString *)!v16;
}

uint64_t SCUserPreferencesGetTypeID()
{
  if (__SCUserPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
  }
  return __kSCUserPreferencesTypeID;
}

uint64_t SCUserPreferencesGetUniqueID(void *cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[3];
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

uint64_t SCUserPreferencesIsForced(const __CFString **cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  CFStringRef v3 = cf[2];

  return CFPreferencesAppValueIsForced(v3, @"com.apple.networkConnect");
}

uint64_t SCUserPreferencesRemove(CFTypeRef cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  CFStringRef v3 = (const __CFString *)*((void *)cf + 2);
  uint64_t v4 = *((void *)cf + 3);

  return processPreferences(v3, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))removeCallout, v4, 0, 0);
}

uint64_t processPreferences(const __CFString *a1, uint64_t (*a2)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[1] = *(__CFArray **)MEMORY[0x1E4F143B8];
  v28[0] = 0;
  CFPreferencesAppSynchronize(@"com.apple.networkConnect");
  CFArrayRef v9 = (const __CFArray *)CFPreferencesCopyAppValue(a1, @"com.apple.networkConnect");
  if (v9)
  {
    CFArrayRef v10 = v9;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (CFGetTypeID(v10) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(v10);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        CFIndex v14 = 0;
        int v15 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v14);
          if (!ValueAtIndex) {
            processPreferences_cold_1();
          }
          CFIndex v17 = ValueAtIndex;
          CFTypeID v18 = CFDictionaryGetTypeID();
          if (CFGetTypeID(v17) != v18) {
            break;
          }
          CFTypeID v19 = (void *)a2(a1, v17, a3, a4, a5);
          if (v19) {
            goto LABEL_10;
          }
          int v15 = 1;
LABEL_13:
          if (v13 == ++v14) {
            goto LABEL_16;
          }
        }
        CFTypeID v19 = (void *)CFRetain(v17);
LABEL_10:
        if (!CFEqual(v17, v19)) {
          int v15 = 1;
        }
        addKey(v28, v19);
        CFRelease(v19);
        goto LABEL_13;
      }
    }
    int v15 = 0;
LABEL_16:
    CFRelease(v10);
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v20 = (void *)a2(a1, 0, a3, a4, a5);
  if (v20)
  {
    uint64_t v21 = v20;
    addKey(v28, v20);
    CFRelease(v21);
    uint64_t v22 = v28[0];
  }
  else
  {
    uint64_t v22 = v28[0];
    if (!v15)
    {
      uint64_t v23 = 1;
      if (!v28[0]) {
        return v23;
      }
      goto LABEL_25;
    }
  }
  if (CFPreferencesAppValueIsForced(a1, @"com.apple.networkConnect"))
  {
    uint64_t v23 = 0;
    if (!v22) {
      return v23;
    }
    goto LABEL_25;
  }
  logCFPreferencesChange(a1, v22);
  CFStringRef v24 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
  CFStringRef v25 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
  CFPreferencesSetValue(a1, v22, @"com.apple.networkConnect", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  uint64_t v23 = CFPreferencesSynchronize(@"com.apple.networkConnect", v24, v25);
  notify_post("com.apple.networkConnect");
  if (v22) {
LABEL_25:
  }
    CFRelease(v22);
  return v23;
}

CFTypeRef removeCallout(int a1, CFDictionaryRef theDict, const void *a3)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFEqual(Value, a3)) {
      return 0;
    }
  }

  return CFRetain(theDict);
}

uint64_t SCUserPreferencesSetCurrent(CFTypeRef cf)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  CFStringRef v3 = (const __CFString *)*((void *)cf + 2);
  uint64_t v4 = *((void *)cf + 3);

  return processPreferences(v3, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setCurrentCallout, v4, 0, 0);
}

__CFDictionary *setCurrentCallout(int a1, CFDictionaryRef theDict, const void *a3)
{
  if (!theDict) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, @"ConnectByDefault");
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3)) {
    CFDictionarySetValue(MutableCopy, @"ConnectByDefault", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyName(CFTypeRef cf)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cfa[0] = 0;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_8;
  }
  int v3 = processPreferences(*((const __CFString **)cf + 2), (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyNameCallout, *((void *)cf + 3), 0, (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v3 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0;
  }
  return result;
}

CFTypeRef copyNameCallout(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0;
    }
    CFArrayRef v10 = CFDictionaryGetValue(theDict, @"UserDefinedName");
    *a5 = v10;
    if (v10)
    {
      CFTypeRef v11 = v10;
      CFTypeID v12 = CFStringGetTypeID();
    }
    else
    {
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"PPP");
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v14 && CFGetTypeID(v14) == v15)
      {
        CFTypeRef v11 = CFDictionaryGetValue(v14, @"UserDefinedName");
        *a5 = v11;
      }
      else
      {
        CFTypeRef v11 = *a5;
      }
      CFTypeID v12 = CFStringGetTypeID();
      if (!v11) {
        goto LABEL_17;
      }
    }
    if (CFGetTypeID(v11) == v12)
    {
      *a5 = v11;
      CFRetain(v11);
      goto LABEL_18;
    }
LABEL_17:
    *a5 = 0;
  }
LABEL_18:

  return CFRetain(theDict);
}

uint64_t SCUserPreferencesSetName(CFTypeRef cf, const void *a2)
{
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_10:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v4 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_10;
  }
  if (a2)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(a2) != TypeID) {
      goto LABEL_10;
    }
  }
  CFStringRef v6 = (const __CFString *)*((void *)cf + 2);
  uint64_t v7 = *((void *)cf + 3);

  return processPreferences(v6, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setNameCallout, v7, (uint64_t)a2, 0);
}

__CFDictionary *setNameCallout(int a1, CFDictionaryRef theDict, const void *a3, const void *a4)
{
  if (!theDict) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (a4) {
      CFDictionarySetValue(MutableCopy, @"UserDefinedName", a4);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
    }
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"PPP");
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (v11)
    {
      if (CFGetTypeID(v11) == v12)
      {
        CFIndex v13 = CFDictionaryCreateMutableCopy(0, 0, v11);
        CFDictionaryRef v14 = v13;
        if (a4) {
          CFDictionarySetValue(v13, @"UserDefinedName", a4);
        }
        else {
          CFDictionaryRemoveValue(v13, @"UserDefinedName");
        }
        CFDictionarySetValue(MutableCopy, @"PPP", v14);
        CFRelease(v14);
      }
    }
  }
  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyInterfaceConfiguration(const void *a1, const void *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2
    && CFGetTypeID(a2) == TypeID
    && (DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a2)) != 0)
  {
    return SCUserPreferencesCopyInterfaceTypeConfiguration(a1, (uint64_t)DefaultConfigurationType);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

CFTypeRef SCUserPreferencesCopyInterfaceTypeConfiguration(CFTypeRef cf, uint64_t a2)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cfa[0] = 0;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v4 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_8;
  }
  int v5 = processPreferences(*((const __CFString **)cf + 2), (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyInterfaceConfigurationCallout, *((void *)cf + 3), a2, (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v5 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0;
  }
  return result;
}

CFTypeRef copyInterfaceConfigurationCallout(int a1, CFDictionaryRef theDict, const void *a3, const void *a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0;
    }
    CFDictionaryRef v11 = CFDictionaryGetValue(theDict, a4);
    *a5 = v11;
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (v11 && CFGetTypeID(v11) == v12)
    {
      *a5 = v11;
      CFRetain(v11);
    }
    else
    {
      *a5 = 0;
    }
  }

  return CFRetain(theDict);
}

uint64_t SCUserPreferencesSetInterfaceConfiguration(const void *a1, const void *a2, uint64_t a3)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2
    && CFGetTypeID(a2) == TypeID
    && (DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a2)) != 0)
  {
    return SCUserPreferencesSetInterfaceTypeConfiguration(a1, (uint64_t)DefaultConfigurationType, a3);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t SCUserPreferencesSetInterfaceTypeConfiguration(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_8;
  }
  CFStringRef v7 = (const __CFString *)*((void *)cf + 2);
  uint64_t v8 = *((void *)cf + 3);

  return processPreferences(v7, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setInterfaceConfigurationCallout, v8, a2, a3);
}

__CFDictionary *setInterfaceConfigurationCallout(int a1, CFDictionaryRef theDict, const void *a3, const void *a4, const void *a5)
{
  if (!theDict) {
    return 0;
  }
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (a5)
    {
      CFDictionarySetValue(MutableCopy, a4, a5);
      if (CFEqual(a4, @"PPP"))
      {
        CFTypeID v12 = CFDictionaryGetValue((CFDictionaryRef)a5, @"UserDefinedName");
        if (v12)
        {
          CFDictionarySetValue(MutableCopy, @"UserDefinedName", v12);
        }
        else
        {
          CFDictionaryRef v14 = CFDictionaryGetValue(MutableCopy, @"UserDefinedName");
          if (v14)
          {
            CFTypeID v15 = v14;
            BOOL v16 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a5);
            CFDictionarySetValue(v16, @"UserDefinedName", v15);
            CFDictionarySetValue(MutableCopy, a4, v16);
            CFRelease(v16);
          }
        }
      }
    }
    else
    {
      CFDictionaryRemoveValue(MutableCopy, a4);
    }
  }
  return MutableCopy;
}

CFTypeRef SCUserPreferencesCopyExtendedInterfaceConfiguration(CFTypeRef cf, const void *a2, const void *a3)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cfa[0] = 0;
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_11:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_11;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || !__SCNetworkInterfaceIsValidExtendedConfigurationType((const __SCNetworkInterface *)a2, a3, 0))
  {
    goto LABEL_11;
  }
  int v8 = processPreferences(*((const __CFString **)cf + 2), (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyInterfaceConfigurationCallout, *((void *)cf + 3), (uint64_t)a3, (uint64_t)cfa);
  CFTypeRef result = cfa[0];
  if (!v8 && cfa[0])
  {
    CFRelease(cfa[0]);
    return 0;
  }
  return result;
}

uint64_t SCUserPreferencesSetExtendedInterfaceConfiguration(CFTypeRef cf, const void *a2, const void *a3, uint64_t a4)
{
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_11:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v8 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v8) {
    goto LABEL_11;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || !__SCNetworkInterfaceIsValidExtendedConfigurationType((const __SCNetworkInterface *)a2, a3, 0))
  {
    goto LABEL_11;
  }
  CFStringRef v10 = (const __CFString *)*((void *)cf + 2);
  uint64_t v11 = *((void *)cf + 3);

  return processPreferences(v10, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))setInterfaceConfigurationCallout, v11, (uint64_t)a3, a4);
}

CFTypeRef SCNetworkConnectionCopyAllUserPreferences(const __SCNetworkConnection *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  CFStringRef v1 = SCNetworkConnectionCopyServiceID(a1);
  if (!processPreferences(v1, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyAllCallout, 0, 0, (uint64_t)cf)&& cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  CFRelease(v1);
  return cf[0];
}

CFTypeRef copyAllCallout(const __CFString *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, __CFArray **a5)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      uint64_t Private = __SCUserPreferencesCreatePrivate(a1, Value);
      if (Private)
      {
        uint64_t v11 = (const void *)Private;
        CFDictionaryRef Mutable = *a5;
        if (!*a5)
        {
          CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          *a5 = Mutable;
        }
        CFArrayAppendValue(Mutable, v11);
        CFRelease(v11);
      }
    }
  }

  return CFRetain(theDict);
}

CFTypeRef SCNetworkConnectionCopyCurrentUserPreferences(const __SCNetworkConnection *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  CFStringRef v1 = SCNetworkConnectionCopyServiceID(a1);
  if (!processPreferences(v1, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyCurrentCallout, 0, 0, (uint64_t)cf)&& cf[0])
  {
    CFRelease(cf[0]);
    cf[0] = 0;
  }
  CFRelease(v1);
  return cf[0];
}

CFTypeRef copyCurrentCallout(const __CFString *a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFStringRef v10 = CFDictionaryGetValue(theDict, @"ConnectByDefault");
      CFTypeID v11 = CFBooleanGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == v11 && CFBooleanGetValue((CFBooleanRef)v10)) {
          *a5 = __SCUserPreferencesCreatePrivate(a1, Value);
        }
      }
    }
  }

  return CFRetain(theDict);
}

uint64_t SCNetworkConnectionCreateUserPreferences(const __SCNetworkConnection *a1)
{
  CFStringRef v1 = SCNetworkConnectionCopyServiceID(a1);
  CFUUIDRef v2 = CFUUIDCreate(0);
  CFStringRef v3 = CFUUIDCreateString(0, v2);
  CFRelease(v2);
  uint64_t Private = __SCUserPreferencesCreatePrivate(v1, v3);
  if (Private) {
    processPreferences(v1, (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))createCallout, (uint64_t)v3, 0, 0);
  }
  CFRelease(v3);
  CFRelease(v1);
  return Private;
}

uint64_t __SCUserPreferencesCreatePrivate(const __CFString *a1, const __CFString *a2)
{
  if (__SCUserPreferencesInitialize_initialized != -1) {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0, a1);
    *(void *)(Instance + 24) = CFStringCreateCopy(0, a2);
  }
  return Instance;
}

__CFDictionary *createCallout(int a1, CFTypeRef cf, const void *a3)
{
  if (cf)
  {
    return (__CFDictionary *)CFRetain(cf);
  }
  else
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"UniqueIdentifier", a3);
    return Mutable;
  }
}

CFDictionaryRef SCUserPreferencesCopyStartOptions(void *cf)
{
  theDict[1] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  theDict[0] = 0;
  if (__SCUserPreferencesInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_49;
    }
  }
  else
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (!cf) {
      goto LABEL_49;
    }
  }
  uint64_t v2 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    processPreferences((const __CFString *)cf[2], (uint64_t (*)(const __CFString *, const void *, uint64_t, uint64_t, uint64_t))copyOptionsCallout, cf[3], 0, (uint64_t)theDict);
    if (!theDict[0]) {
      return theDict[0];
    }
    CFStringRef Value = CFDictionaryGetValue(theDict[0], @"PPP");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value
      || CFGetTypeID(Value) != TypeID
      || ((int v5 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"AuthPasswordEncryption")) != 0
        ? (uint64_t v6 = v5)
        : (uint64_t v6 = @"Keychain"),
          (CFTypeID v7 = CFStringGetTypeID(), !v6) || CFGetTypeID(v6) != v7 || !CFEqual(v6, @"Keychain")))
    {
LABEL_22:
      CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], @"IPSec");
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (v13)
      {
        if (CFGetTypeID(v13) == v14)
        {
          CFTypeID v15 = CFDictionaryGetValue(v13, @"AuthenticationMethod");
          CFTypeID v16 = CFStringGetTypeID();
          if (v15)
          {
            if (CFGetTypeID(v15) == v16 && CFEqual(v15, @"SharedSecret"))
            {
              CFIndex v17 = (__CFString *)CFDictionaryGetValue(v13, @"SharedSecretEncryption");
              CFTypeID v18 = v17 ? v17 : @"Keychain";
              CFTypeID v19 = CFStringGetTypeID();
              if (v18)
              {
                if (CFGetTypeID(v18) == v19 && CFEqual(v18, @"Keychain"))
                {
                  uint64_t v20 = (__CFString *)CFDictionaryGetValue(v13, @"SharedSecret");
                  CFTypeID v21 = CFStringGetTypeID();
                  if (!v20)
                  {
                    CFDataGetTypeID();
                    goto LABEL_39;
                  }
                  if (CFGetTypeID(v20) == v21)
                  {
                    CFRetain(v20);
LABEL_40:
                    uint64_t v24 = _SCSecKeychainPasswordItemCopy();
                    if (v24)
                    {
                      CFDataRef v25 = (const __CFData *)v24;
                      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v13);
                      BytePtr = CFDataGetBytePtr(v25);
                      CFIndex Length = CFDataGetLength(v25);
                      CFStringRef v29 = CFStringCreateWithBytes(0, BytePtr, Length, 0x8000100u, 0);
                      CFRelease(v25);
                      CFDictionarySetValue(MutableCopy, @"SharedSecret", v29);
                      CFRelease(v29);
                      CFDictionaryRemoveValue(MutableCopy, @"SharedSecretEncryption");
                      uint64_t v30 = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
                      CFDictionarySetValue(v30, @"IPSec", MutableCopy);
                      CFRelease(MutableCopy);
                      CFRelease(theDict[0]);
                      theDict[0] = v30;
                    }
                    else
                    {
                      uint64_t v31 = _SCSecKeychainCopySystemKeychain();
                      if (v31)
                      {
                        uint64_t v32 = (const void *)v31;
                        if (_SCSecKeychainPasswordItemExists())
                        {
                          uint64_t v33 = CFDictionaryCreateMutableCopy(0, 0, v13);
                          CFDictionarySetValue(v33, @"SharedSecret", v20);
                          CFDictionarySetValue(v33, @"SharedSecretEncryption", @"Keychain");
                          uint64_t v34 = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
                          CFDictionarySetValue(v34, @"IPSec", v33);
                          CFRelease(v33);
                          CFRelease(theDict[0]);
                          theDict[0] = v34;
                        }
                        CFRelease(v32);
                      }
                    }
                    CFRelease(v20);
                    return theDict[0];
                  }
                  CFTypeID v22 = CFDataGetTypeID();
                  if (CFGetTypeID(v20) != v22 || (CFDataGetLength((CFDataRef)v20) & 1) != 0)
                  {
LABEL_39:
                    CFStringRef UniqueID = (const __CFString *)SCUserPreferencesGetUniqueID(cf);
                    uint64_t v20 = CFStringCreateMutableCopy(0, 0, UniqueID);
                    CFStringAppend(v20, @".SS");
                    goto LABEL_40;
                  }
                }
              }
            }
          }
        }
      }
      return theDict[0];
    }
    uint64_t v8 = CFDictionaryGetValue((CFDictionaryRef)Value, @"AuthPassword");
    CFTypeID v9 = CFStringGetTypeID();
    if (v8)
    {
      if (CFGetTypeID(v8) == v9) {
        goto LABEL_20;
      }
      CFTypeID v10 = CFDataGetTypeID();
      if (CFGetTypeID(v8) == v10 && (CFDataGetLength((CFDataRef)v8) & 1) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      CFDataGetTypeID();
    }
    uint64_t v8 = (const void *)SCUserPreferencesGetUniqueID(cf);
LABEL_20:
    if (_SCSecKeychainPasswordItemExists())
    {
      CFTypeID v11 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)Value);
      CFDictionarySetValue(v11, @"AuthPassword", v8);
      CFDictionarySetValue(v11, @"AuthPasswordEncryption", @"Keychain");
      CFTypeID v12 = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
      CFDictionarySetValue(v12, @"PPP", v11);
      CFRelease(v11);
      CFRelease(theDict[0]);
      theDict[0] = v12;
    }
    goto LABEL_22;
  }
LABEL_49:
  _SCErrorSet(1002);
  return 0;
}

CFTypeRef copyOptionsCallout(int a1, CFDictionaryRef theDict, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, @"UniqueIdentifier");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, a3))
  {
    if (*a5) {
      CFRelease(*a5);
    }
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    *a5 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, @"UniqueIdentifier");
    CFDictionaryRemoveValue((CFMutableDictionaryRef)*a5, @"ConnectByDefault");
  }

  return CFRetain(theDict);
}

uint64_t SCNetworkConnectionStartWithUserPreferences(const __SCNetworkConnection *a1, void *cf, Boolean a3)
{
  CFDictionaryRef started = SCUserPreferencesCopyStartOptions(cf);
  uint64_t v6 = SCNetworkConnectionStart(a1, started, a3);
  if (started) {
    CFRelease(started);
  }
  return v6;
}

uint64_t SCUserPreferencesCheckInterfacePassword(void *a1, const void *a2, int a3)
{
  if (!checkUserPreferencesPassword(a1, a2, a3)) {
    return 0;
  }
  switch(a3)
  {
    case 1:
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_12;
    case 2:
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFTypeID v10 = copyUserSharedSecretID(v9, a1);
      CFTypeID v11 = @"SharedSecret";
      CFTypeID v12 = @"SharedSecretEncryption";
      CFDictionaryRef v13 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
      goto LABEL_6;
    case 4:
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFTypeID v10 = copyUserXAuthID(v9, a1);
      CFTypeID v11 = @"XAuthPassword";
      CFTypeID v12 = @"XAuthPasswordEncryption";
      CFDictionaryRef v13 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_6:
      uint64_t password = __extract_password(0, v9, v11, v12, *v13, (uint64_t)v10, 0);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeID v15 = v10;
      goto LABEL_14;
    case 5:
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_12:
      uint64_t password = __extract_password(0, v6, @"AuthPassword", @"AuthPasswordEncryption", *v8, (uint64_t)UserPasswordID, 0);
      if (!v6) {
        return password;
      }
      CFTypeID v15 = v6;
LABEL_14:
      CFRelease(v15);
      break;
    default:
      _SCErrorSet(1002);
      return 0;
  }
  return password;
}

uint64_t checkUserPreferencesPassword(CFTypeRef cf, const void *a2, int a3)
{
  if (__SCUserPreferencesInitialize_initialized != -1)
  {
    dispatch_once(&__SCUserPreferencesInitialize_initialized, &__block_literal_global_9);
    if (cf) {
      goto LABEL_3;
    }
LABEL_16:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v6 = __kSCUserPreferencesTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_16;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_16;
  }
  switch(a3)
  {
    case 1:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFDictionaryRef v9 = (CFTypeRef *)&kSCNetworkInterfaceTypePPP;
      goto LABEL_13;
    case 2:
      CFStringRef v10 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      if (!CFEqual(v10, @"PPP")) {
        goto LABEL_16;
      }
      Interface = SCNetworkInterfaceGetInterface((SCNetworkInterfaceRef)a2);
      if (!Interface) {
        goto LABEL_16;
      }
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
      CFDictionaryRef v9 = (CFTypeRef *)&kSCNetworkInterfaceTypeL2TP;
      goto LABEL_13;
    case 3:
      goto LABEL_16;
    case 4:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFDictionaryRef v9 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
      goto LABEL_13;
    case 5:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
      CFDictionaryRef v9 = (CFTypeRef *)kSCNetworkInterfaceTypeVPN;
LABEL_13:
      if (CFEqual(InterfaceType, *v9)) {
        goto LABEL_14;
      }
      goto LABEL_16;
    default:
LABEL_14:
      uint64_t result = 1;
      break;
  }
  return result;
}

const void *getUserPasswordID(const __CFDictionary *a1, void *cf)
{
  if (!a1
    || (Value = CFDictionaryGetValue(a1, @"AuthPasswordEncryption"), CFTypeID TypeID = CFStringGetTypeID(), !Value)
    || CFGetTypeID(Value) != TypeID
    || !CFEqual(Value, @"Keychain")
    || (uint64_t result = CFDictionaryGetValue(a1, @"AuthPassword")) == 0)
  {
    return (const void *)SCUserPreferencesGetUniqueID(cf);
  }
  return result;
}

__CFString *copyUserSharedSecretID(const __CFDictionary *a1, void *cf)
{
  if (a1
    && (Value = CFDictionaryGetValue(a1, @"SharedSecretEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(a1, @"SharedSecret")) != 0)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }
  else
  {
    CFStringRef UserPasswordID = (const __CFString *)getUserPasswordID(a1, cf);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, UserPasswordID);
    CFStringAppend(MutableCopy, @".SS");
  }
  return MutableCopy;
}

__CFString *copyUserXAuthID(const __CFDictionary *a1, void *cf)
{
  if (a1
    && (Value = CFDictionaryGetValue(a1, @"XAuthPasswordEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(a1, @"XAuthPassword")) != 0)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }
  else
  {
    CFStringRef UserPasswordID = (const __CFString *)getUserPasswordID(a1, cf);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, UserPasswordID);
    CFStringAppend(MutableCopy, @".XAUTH");
  }
  return MutableCopy;
}

uint64_t SCUserPreferencesCopyInterfacePassword(void *a1, const void *a2, int a3)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  if (!checkUserPreferencesPassword(a1, a2, a3)) {
    return 0;
  }
  switch(a3)
  {
    case 1:
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_12;
    case 2:
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      CFTypeID v11 = @"SharedSecret";
      CFTypeID v12 = @"SharedSecretEncryption";
      CFDictionaryRef v13 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
      goto LABEL_6;
    case 4:
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v9, a1);
      CFTypeID v11 = @"XAuthPassword";
      CFTypeID v12 = @"XAuthPasswordEncryption";
      CFDictionaryRef v13 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_6:
      __extract_password(0, v9, v11, v12, *v13, (uint64_t)v10, v16);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeID v14 = v10;
      goto LABEL_14;
    case 5:
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_12:
      __extract_password(0, v6, @"AuthPassword", @"AuthPasswordEncryption", *v8, (uint64_t)UserPasswordID, v16);
      if (!v6) {
        goto LABEL_15;
      }
      CFTypeID v14 = v6;
LABEL_14:
      CFRelease(v14);
LABEL_15:
      uint64_t result = v16[0];
      break;
    default:
      _SCErrorSet(1002);
      return 0;
  }
  return result;
}

uint64_t SCUserPreferencesRemoveInterfacePassword(void *a1, const void *a2, int a3)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!checkUserPreferencesPassword(a1, a2, a3)) {
    return 0;
  }
  switch(a3)
  {
    case 1:
      cf[0] = 0;
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_16;
    case 2:
      cf[0] = 0;
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      if (!__remove_password(0, v9, @"SharedSecret", @"SharedSecretEncryption", @"Keychain", (uint64_t)v10, (__CFDictionary **)cf))goto LABEL_21; {
      uint64_t v11 = SCUserPreferencesSetExtendedInterfaceConfiguration(a1, a2, @"IPSec", (uint64_t)cf[0]);
      }
      goto LABEL_8;
    case 4:
      cf[0] = 0;
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v9, a1);
      if (__remove_password(0, v9, @"XAuthPassword", @"XAuthPasswordEncryption", @"Keychain", (uint64_t)v10, (__CFDictionary **)cf))
      {
        uint64_t v11 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)cf[0]);
LABEL_8:
        uint64_t v12 = v11;
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
LABEL_21:
        uint64_t v12 = 0;
        if (v9) {
LABEL_11:
        }
          CFRelease(v9);
      }
      CFDictionaryRef v13 = v10;
LABEL_25:
      CFRelease(v13);
      return v12;
    case 5:
      cf[0] = 0;
      CFDictionaryRef v6 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef UserPasswordID = getUserPasswordID(v6, a1);
      uint64_t v8 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_16:
      if (!__remove_password(0, v6, @"AuthPassword", @"AuthPasswordEncryption", *v8, (uint64_t)UserPasswordID, (__CFDictionary **)cf))
      {
        uint64_t v12 = 0;
        if (!v6) {
          return v12;
        }
        goto LABEL_24;
      }
      uint64_t v12 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v6)
      {
LABEL_24:
        CFDictionaryRef v13 = v6;
        goto LABEL_25;
      }
      return v12;
    default:
      _SCErrorSet(1002);
      return 0;
  }
}

uint64_t SCUserPreferencesSetInterfacePassword(void *a1, const void *a2, int a3)
{
  if (!checkUserPreferencesPassword(a1, a2, a3)) {
    return 0;
  }
  CFDictionaryRef v6 = (__CFBundle *)_SC_CFBundleGet();
  switch(a3)
  {
    case 1:
      CFDictionaryRef v7 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef UserPasswordID = getUserPasswordID(v7, a1);
      if (v7) {
        CFDictionaryGetValue(v7, @"AuthName");
      }
      CFTypeID v16 = (__CFString *)SCUserPreferencesCopyName(a1);
      if (v6) {
        CFDictionaryRef v6 = (__CFBundle *)CFBundleCopyLocalizedString(v6, @"KEYCHAIN_KIND_PPP_PASSWORD", @"PPP Password", 0);
      }
      if (!_SCSecKeychainPasswordItemSet()) {
        goto LABEL_32;
      }
      if (v7) {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v7);
      }
      else {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      uint64_t v23 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"AuthPassword", UserPasswordID);
      uint64_t v24 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_58;
    case 2:
      CFDictionaryRef v9 = (const __CFDictionary *)SCUserPreferencesCopyExtendedInterfaceConfiguration(a1, a2, @"IPSec");
      CFStringRef v10 = copyUserSharedSecretID(v9, a1);
      CFTypeRef v11 = SCUserPreferencesCopyName(a1);
      if (v6) {
        CFDictionaryRef v6 = (__CFBundle *)CFBundleCopyLocalizedString(v6, @"KEYCHAIN_KIND_IPSEC_SHARED_SECRET", @"IPSec Shared Secret", 0);
      }
      if (_SCSecKeychainPasswordItemSet())
      {
        if (v9) {
          CFDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0, 0, v9);
        }
        else {
          CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFTypeID v21 = Mutable;
        CFDictionarySetValue(Mutable, @"SharedSecret", v10);
        CFDictionarySetValue(v21, @"SharedSecretEncryption", @"Keychain");
        uint64_t v13 = SCUserPreferencesSetExtendedInterfaceConfiguration(a1, a2, @"IPSec", (uint64_t)v21);
        CFRelease(v21);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (v9) {
        CFRelease(v9);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!v11) {
        goto LABEL_54;
      }
      CFTypeID v22 = v11;
      goto LABEL_53;
    case 4:
      CFDictionaryRef v14 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFStringRef v10 = copyUserXAuthID(v14, a1);
      if (v14) {
        CFDictionaryGetValue(v14, @"XAuthName");
      }
      CFTypeRef v18 = SCUserPreferencesCopyName(a1);
      if (v6) {
        CFDictionaryRef v6 = (__CFBundle *)CFBundleCopyLocalizedString(v6, @"KEYCHAIN_KIND_IPSEC_XAUTH_PASSWORD", @"IPSec XAuth Password", 0);
      }
      if (_SCSecKeychainPasswordItemSet())
      {
        if (v14) {
          CFTypeID v19 = CFDictionaryCreateMutableCopy(0, 0, v14);
        }
        else {
          CFTypeID v19 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFDataRef v25 = v19;
        CFDictionarySetValue(v19, @"XAuthPassword", v10);
        CFDictionarySetValue(v25, @"XAuthPasswordEncryption", @"Keychain");
        uint64_t v13 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)v25);
        CFRelease(v25);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (v14) {
        CFRelease(v14);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (!v18) {
        goto LABEL_54;
      }
      CFTypeID v22 = v18;
LABEL_53:
      CFRelease(v22);
LABEL_54:
      uint64_t v26 = v10;
      goto LABEL_64;
    case 5:
      CFDictionaryRef v7 = (const __CFDictionary *)SCUserPreferencesCopyInterfaceConfiguration(a1, a2);
      CFTypeID v15 = getUserPasswordID(v7, a1);
      if (v7) {
        CFDictionaryGetValue(v7, @"AuthName");
      }
      CFTypeID v16 = (__CFString *)SCUserPreferencesCopyName(a1);
      if (v6) {
        CFDictionaryRef v6 = (__CFBundle *)CFBundleCopyLocalizedString(v6, @"KEYCHAIN_KIND_VPN_PASSWORD", @"VPN Password", 0);
      }
      if (!_SCSecKeychainPasswordItemSet())
      {
LABEL_32:
        uint64_t v13 = 0;
        if (!v7) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      if (v7) {
        uint64_t v20 = CFDictionaryCreateMutableCopy(0, 0, v7);
      }
      else {
        uint64_t v20 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      uint64_t v23 = v20;
      if (!v20) {
        SCUserPreferencesSetInterfacePassword_cold_1();
      }
      CFDictionarySetValue(v20, @"AuthPassword", v15);
      uint64_t v24 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_58:
      CFDictionarySetValue(v23, @"AuthPasswordEncryption", *v24);
      uint64_t v13 = SCUserPreferencesSetInterfaceConfiguration(a1, a2, (uint64_t)v23);
      CFRelease(v23);
      if (v7) {
LABEL_59:
      }
        CFRelease(v7);
LABEL_60:
      if (v6) {
        CFRelease(v6);
      }
      if (v16)
      {
        uint64_t v26 = v16;
LABEL_64:
        CFRelease(v26);
      }
      break;
    default:
      _SCErrorSet(1002);
      return 0;
  }
  return v13;
}

void __SCUserPreferencesDeallocate(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 24));
  uint64_t v2 = *(const void **)(a1 + 16);

  CFRelease(v2);
}

BOOL __SCUserPreferencesEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2 || CFEqual(*(CFTypeRef *)(a1 + 24), *(CFTypeRef *)(a2 + 24)) != 0;
}

CFHashCode __SCUserPreferencesHash(uint64_t a1)
{
  CFStringRef v1 = *(const void **)(a1 + 24);

  return CFHash(v1);
}

__CFString *__SCUserPreferencesCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCUserPreferences %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"service = %@", a1[2]);
  CFStringAppendFormat(Mutable, 0, @", id = %@", a1[3]);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

void logCFPreferencesChange(const __CFString *a1, const void *a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  CFPropertyListRef v4 = CFPreferencesCopyAppValue(@"LOG_SC_CHANGES", @"com.apple.networkConnect");
  if (!v4) {
    return;
  }
  int v5 = v4;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (CFGetTypeID(v5) != TypeID)
  {
    CFRelease(v5);
    return;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)v5);
  CFRelease(v5);
  if (!Value) {
    return;
  }
  memset(&v110, 0, sizeof(v110));
  v109.tv_seCC_SHA256_CTX c = 0;
  *(void *)&v109.tv_useCC_SHA256_CTX c = 0;
  gettimeofday(&v109, 0);
  localtime_r(&v109.tv_sec, &v110);
  CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"/var/tmp/com.apple.networkConnect-%@-%4d%02d%02d.%02d%02d%02d.%03d", a1, (v110.tm_year + 1900), (v110.tm_mon + 1), v110.tm_mday, v110.tm_hour, v110.tm_min, v110.tm_sec, (v109.tv_usec / 1000));
  _SC_cfstring_to_cstring(v8, v112, 256, 0x8000100u);
  CFRelease(v8);
  CFDictionaryRef v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    CFTypeID v19 = (char *)&v109 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v20 + 4) = v112;
    __SC_log_send(5, (uint64_t)v9, v10, v19);
  }
  if (mkdir((const char *)v112, 0x1EDu) == -1)
  {
    uint64_t v45 = __log_SCNetworkConfiguration();
    uint64_t v46 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v45, (os_log_type_t)v46)) {
      return;
    }
    goto LABEL_22;
  }
  CFTypeID v21 = _SC_copyBacktrace();
  if (v21)
  {
    CFTypeID v22 = v21;
    __strlcpy_chk();
    __strlcat_chk();
    int v23 = open(v111, 3585, 420);
    if (v23 == -1)
    {
      CFTypeID v59 = __log_SCNetworkConfiguration();
      uint64_t v60 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v59, (os_log_type_t)v60))
      {
        uint64_t v61 = _os_log_pack_size();
        uint64_t v69 = (char *)&v109
            - ((MEMORY[0x1F4188790](v61, v62, v63, v64, v65, v66, v67, v68) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v70 = _os_log_pack_fill();
        CFStringRef v71 = __error();
        uint64_t v72 = SCErrorString(*v71);
        *(_DWORD *)uint64_t v70 = 136315138;
        *(void *)(v70 + 4) = v72;
        __SC_log_send(5, (uint64_t)v59, v60, v69);
      }
      CFDataRef v44 = (const __CFData *)v22;
      goto LABEL_32;
    }
    uint64_t v24 = fdopen(v23, "w");
    SCPrint(1, v24, @"%@", v25, v26, v27, v28, v29, (uint64_t)v22);
    fclose(v24);
    CFRelease(v22);
  }
  CFPropertyListRef v30 = CFPreferencesCopyAppValue(a1, @"com.apple.networkConnect");
  if (v30)
  {
    uint64_t v31 = v30;
    __strlcpy_chk();
    __strlcat_chk();
    int v32 = open(v111, 3585, 420);
    if (v32 == -1)
    {
      uint64_t v73 = __log_SCNetworkConfiguration();
      uint64_t v74 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v73, (os_log_type_t)v74))
      {
        uint64_t v75 = _os_log_pack_size();
        CFStringRef v83 = (char *)&v109
            - ((MEMORY[0x1F4188790](v75, v76, v77, v78, v79, v80, v81, v82) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v84 = _os_log_pack_fill();
        CFArrayRef v85 = __error();
        CFArrayRef v86 = SCErrorString(*v85);
        *(_DWORD *)uint64_t v84 = 136315138;
        *(void *)(v84 + 4) = v86;
        __SC_log_send(5, (uint64_t)v73, v74, v83);
      }
    }
    else
    {
      int v33 = v32;
      CFDataRef Data = CFPropertyListCreateData(0, v31, kCFPropertyListXMLFormat_v1_0, 0, 0);
      if (Data)
      {
        CFDataRef v35 = Data;
        BytePtr = CFDataGetBytePtr(Data);
        size_t Length = CFDataGetLength(v35);
        write(v33, BytePtr, Length);
        close(v33);
        CFRelease(v35);
        CFRelease(v31);
        goto LABEL_14;
      }
      CFTypeID v87 = __log_SCNetworkConfiguration();
      uint64_t v88 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v87, (os_log_type_t)v88))
      {
        uint64_t v89 = _os_log_pack_size();
        uint64_t v97 = (char *)&v109
            - ((MEMORY[0x1F4188790](v89, v90, v91, v92, v93, v94, v95, v96) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v87, v88, v97);
      }
      close(v33);
    }
    CFDataRef v44 = (const __CFData *)v31;
    goto LABEL_32;
  }
LABEL_14:
  if (!a2) {
    return;
  }
  __strlcpy_chk();
  __strlcat_chk();
  int v38 = open(v111, 3585, 420);
  if (v38 == -1)
  {
    uint64_t v45 = __log_SCNetworkConfiguration();
    uint64_t v46 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v45, (os_log_type_t)v46)) {
      return;
    }
LABEL_22:
    uint64_t v47 = _os_log_pack_size();
    CFTypeID v55 = (char *)&v109 - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v56 = _os_log_pack_fill();
    CFTypeID v57 = __error();
    CFNumberRef v58 = SCErrorString(*v57);
    *(_DWORD *)uint64_t v56 = 136315138;
    *(void *)(v56 + 4) = v58;
    __SC_log_send(5, (uint64_t)v45, v46, v55);
    return;
  }
  int v39 = v38;
  CFDataRef v40 = CFPropertyListCreateData(0, a2, kCFPropertyListXMLFormat_v1_0, 0, 0);
  if (v40)
  {
    CFDataRef v41 = v40;
    uint64_t v42 = CFDataGetBytePtr(v40);
    size_t v43 = CFDataGetLength(v41);
    write(v39, v42, v43);
    close(v39);
    CFDataRef v44 = v41;
LABEL_32:
    CFRelease(v44);
    return;
  }
  uint64_t v98 = __log_SCNetworkConfiguration();
  uint64_t v99 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v98, (os_log_type_t)v99))
  {
    uint64_t v100 = _os_log_pack_size();
    uint64_t v108 = (char *)&v109
         - ((MEMORY[0x1F4188790](v100, v101, v102, v103, v104, v105, v106, v107) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v98, v99, v108);
  }
  close(v39);
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddressPair(CFAllocatorRef allocator, const sockaddr *localAddress, const sockaddr *remoteAddress)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  if (!((unint64_t)localAddress | (unint64_t)remoteAddress)) {
    goto LABEL_2;
  }
  int v5 = (sockaddr *)remoteAddress;
  if (!localAddress)
  {
    CFDictionaryRef v6 = 0;
    if (!remoteAddress) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFDictionaryRef v6 = is_valid_address(&localAddress->sa_len);
  if (!v6) {
    goto LABEL_2;
  }
  if (v5)
  {
LABEL_9:
    int v5 = (sockaddr *)is_valid_address(&v5->sa_len);
    if (v5) {
      goto LABEL_10;
    }
LABEL_2:
    _SCErrorSet(1002);
    return 0;
  }
LABEL_10:
  uint64_t Private = __SCNetworkReachabilityCreatePrivate();
  CFStringRef v3 = Private;
  if (!Private) {
    return (SCNetworkReachabilityRef)v3;
  }
  *((_DWORD *)Private + 20) = 1;
  if (v6)
  {
    *((void *)Private + 12) = nw_endpoint_create_address((const sockaddr *)v6);
    if (v5)
    {
      int v8 = v6[1];
      if (v8 != v5->sa_family || *v6 != v5->sa_len) {
        goto LABEL_28;
      }
      if (v8 == 30)
      {
        if (*((_DWORD *)v6 + 6) != *(_DWORD *)&v5[1].sa_data[6]) {
          goto LABEL_28;
        }
        uint64_t v11 = v6 + 8;
        CFDictionaryRef v9 = (sockaddr *)&v5->sa_data[6];
        size_t v10 = 16;
      }
      else
      {
        if (v8 == 2) {
          CFDictionaryRef v9 = (sockaddr *)&v5->sa_data[2];
        }
        else {
          CFDictionaryRef v9 = v5;
        }
        if (v8 == 2) {
          size_t v10 = 4;
        }
        else {
          size_t v10 = *v6;
        }
        if (v8 == 2) {
          uint64_t v11 = v6 + 4;
        }
        else {
          uint64_t v11 = v6;
        }
      }
      if (!bcmp(v11, v9, v10))
      {
        sockaddr address = nw_retain(*((void **)v3 + 12));
LABEL_29:
        *((void *)v3 + 13) = address;
        goto LABEL_30;
      }
LABEL_28:
      sockaddr address = nw_endpoint_create_address(v5);
      goto LABEL_29;
    }
  }
  else if (v5)
  {
    goto LABEL_28;
  }
LABEL_30:
  *((void *)v3 + 29) = nw_parameters_create();
  MEMORY[0x192FA8060]();
  uint64_t v13 = __log_SCNetworkReachability_log;
  if (!__log_SCNetworkReachability_log)
  {
    uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
    __log_SCNetworkReachability_log = (uint64_t)v13;
  }
  uint64_t v14 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v13, (os_log_type_t)v14))
  {
    uint64_t v15 = _os_log_pack_size();
    int v23 = (char *)v25 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v24 = 136315650;
    *(void *)(v24 + 4) = v3 + 193;
    *(_WORD *)(v24 + 12) = 2080;
    *(void *)(v24 + 14) = "create w/address pair";
    *(_WORD *)(v24 + 22) = 2112;
    *(void *)(v24 + 24) = v3;
    __SC_log_send(7, (uint64_t)v13, v14, v23);
  }
  return (SCNetworkReachabilityRef)v3;
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithOptions(const __CFAllocator *a1, const void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a2) {
    goto LABEL_52;
  }
  if (CFGetTypeID(a2) != TypeID) {
    goto LABEL_52;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"nodename");
  if (Value)
  {
    CFTypeID v6 = CFStringGetTypeID();
    if (CFGetTypeID(Value) != v6 || !CFStringGetLength(Value)) {
      goto LABEL_52;
    }
  }
  CFDictionaryRef v7 = CFDictionaryGetValue((CFDictionaryRef)a2, @"local-address");
  if (v7)
  {
    int v8 = v7;
    CFTypeID v9 = CFDataGetTypeID();
    if (CFGetTypeID(v8) != v9 || (unint64_t)CFDataGetLength((CFDataRef)v8) <= 0xF) {
      goto LABEL_52;
    }
    BytePtr = (const sockaddr *)CFDataGetBytePtr((CFDataRef)v8);
  }
  else
  {
    BytePtr = 0;
  }
  uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ptr-address");
  if (v11)
  {
    uint64_t v12 = v11;
    CFTypeID v13 = CFDataGetTypeID();
    if (CFGetTypeID(v12) != v13 || (unint64_t)CFDataGetLength((CFDataRef)v12) <= 0xF) {
      goto LABEL_52;
    }
    uint64_t v14 = (unsigned __int8 *)CFDataGetBytePtr((CFDataRef)v12);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = CFDictionaryGetValue((CFDictionaryRef)a2, @"remote-address");
  if (v15)
  {
    uint64_t v16 = v15;
    CFTypeID v17 = CFDataGetTypeID();
    if (CFGetTypeID(v16) != v17 || (unint64_t)CFDataGetLength((CFDataRef)v16) <= 0xF) {
      goto LABEL_52;
    }
    uint64_t v18 = (const sockaddr *)CFDataGetBytePtr((CFDataRef)v16);
  }
  else
  {
    uint64_t v18 = 0;
  }
  CFStringRef v19 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"interface");
  if (v19)
  {
    CFTypeID v20 = CFStringGetTypeID();
    if (CFGetTypeID(v19) != v20 || !CFStringGetLength(v19)) {
      goto LABEL_52;
    }
  }
  uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)a2, @"ResolverBypass");
  if (v21)
  {
    CFTypeID v22 = CFBooleanGetTypeID();
    if (CFGetTypeID(v21) != v22) {
      goto LABEL_52;
    }
  }
  int v23 = CFDictionaryGetValue((CFDictionaryRef)a2, @"SourceAppAuditToken");
  if (v23)
  {
    CFTypeID v24 = CFDataGetTypeID();
    if (CFGetTypeID(v23) != v24 || CFDataGetLength((CFDataRef)v23) != 32) {
      goto LABEL_52;
    }
  }
  CFStringRef v25 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"SourceAppBundleIdentifier");
  if (v25)
  {
    CFTypeID v26 = CFStringGetTypeID();
    if (CFGetTypeID(v25) != v26 || !CFStringGetLength(v25)) {
      goto LABEL_52;
    }
  }
  if (!Value)
  {
    if (v14)
    {
      if ((unint64_t)BytePtr | (unint64_t)v18)
      {
LABEL_52:
        _SCErrorSet(1002);
        return 0;
      }
      uint64_t v29 = (const __SCNetworkReachability *)__SCNetworkReachabilityCreateWithPTR(v14);
      goto LABEL_46;
    }
    if (BytePtr && v18)
    {
      CFPropertyListRef v30 = BytePtr;
      uint64_t v31 = v18;
    }
    else
    {
      if (v18)
      {
        uint64_t v29 = SCNetworkReachabilityCreateWithAddress(0, v18);
        goto LABEL_46;
      }
      if (!BytePtr) {
        goto LABEL_52;
      }
      CFPropertyListRef v30 = BytePtr;
      uint64_t v31 = 0;
    }
    uint64_t v29 = SCNetworkReachabilityCreateWithAddressPair(0, v30, v31);
LABEL_46:
    SCNetworkReachabilityRef v28 = v29;
    goto LABEL_47;
  }
  if (BytePtr || v18 || v14) {
    goto LABEL_52;
  }
  uint64_t v27 = _SC_cfstring_to_cstring(Value, 0, 0, 0x8000100u);
  SCNetworkReachabilityRef v28 = SCNetworkReachabilityCreateWithName(a1, (const char *)v27);
  CFAllocatorDeallocate(0, v27);
LABEL_47:
  if (v28)
  {
    if (v19)
    {
      if (!_SC_cfstring_to_cstring(v19, (UInt8 *)v67, 16, 0x600u) || (unsigned int v32 = if_nametoindex(v67)) == 0)
      {
        CFRelease(v28);
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v32 = 0;
    }
    if (!*((void *)v28 + 29)) {
      *((void *)v28 + 29) = nw_parameters_create();
    }
    if (v32)
    {
      uint64_t v34 = nw_interface_create_with_index();
      nw_parameters_require_interface(*((nw_parameters_t *)v28 + 29), v34);
      nw_release(v34);
      int v35 = 1;
    }
    else
    {
      int v35 = 0;
    }
    if (v21)
    {
      *((unsigned char *)v28 + 192) = CFBooleanGetValue((CFBooleanRef)v21);
      int v35 = 1;
    }
    if (v23)
    {
      *(_OWORD *)buffer = 0u;
      long long v66 = 0u;
      v69.CFIndex length = CFDataGetLength((CFDataRef)v23);
      v69.CFIndex location = 0;
      CFDataGetBytes((CFDataRef)v23, v69, buffer);
      v64[0] = *(_OWORD *)buffer;
      v64[1] = v66;
      nw_parameters_set_source_application();
    }
    else if (v25)
    {
      uint64_t v50 = _SC_cfstring_to_cstring(v25, 0, 0, 0x8000100u);
      if (v50)
      {
        uint64_t v51 = v50;
        nw_parameters_set_source_application_by_bundle_id();
        CFAllocatorDeallocate(0, v51);
      }
      else
      {
        uint64_t v52 = __log_SCNetworkReachability_log;
        if (!__log_SCNetworkReachability_log)
        {
          uint64_t v52 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
          __log_SCNetworkReachability_log = (uint64_t)v52;
        }
        uint64_t v53 = _SC_syslog_os_log_mapping(4);
        if (__SC_log_enabled(4, v52, (os_log_type_t)v53))
        {
          uint64_t v54 = _os_log_pack_size();
          uint64_t v62 = (char *)v64
              - ((MEMORY[0x1F4188790](v54, v55, v56, v57, v58, v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v63 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v63 = 138412290;
          *(void *)(v63 + 4) = v25;
          __SC_log_send(4, (uint64_t)v52, v53, v62);
        }
      }
    }
    else if (!v35)
    {
      return v28;
    }
    uint64_t v36 = *((int *)v28 + 20);
    if (v36 > 3) {
      int v37 = 0;
    }
    else {
      int v37 = off_1E55BBAB0[v36];
    }
    int v38 = __log_SCNetworkReachability_log;
    if (!__log_SCNetworkReachability_log)
    {
      int v38 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
      __log_SCNetworkReachability_log = (uint64_t)v38;
    }
    uint64_t v39 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v38, (os_log_type_t)v39))
    {
      uint64_t v40 = _os_log_pack_size();
      uint64_t v48 = (char *)v64 - ((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v49 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v49 = 136315650;
      *(void *)(v49 + 4) = (char *)v28 + 193;
      *(_WORD *)(v49 + 12) = 2080;
      *(void *)(v49 + 14) = v37;
      *(_WORD *)(v49 + 22) = 2112;
      *(void *)(v49 + 24) = v28;
      __SC_log_send(7, (uint64_t)v38, v39, v48);
    }
  }
  return v28;
}

char *__SCNetworkReachabilityCreateWithPTR(unsigned __int8 *a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v1 = is_valid_address(a1);
  if (v1)
  {
    CFAllocatorRef v2 = (const sockaddr *)v1;
    uint64_t Private = __SCNetworkReachabilityCreatePrivate();
    CFPropertyListRef v4 = Private;
    if (Private)
    {
      *((_DWORD *)Private + 20) = 3;
      *((void *)Private + 13) = nw_endpoint_create_address(v2);
      *((void *)v4 + 29) = nw_parameters_create();
      nw_parameters_set_resolve_ptr();
      int v5 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        int v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v5;
      }
      uint64_t v6 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v15 = (char *)v18 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v16 = 136315650;
        *(void *)(v16 + 4) = v4 + 193;
        *(_WORD *)(v16 + 12) = 2080;
        *(void *)(v16 + 14) = "create w/ptr";
        *(_WORD *)(v16 + 22) = 2112;
        *(void *)(v16 + 24) = v4;
        __SC_log_send(7, (uint64_t)v5, v6, v15);
      }
    }
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
  return v4;
}

CFTypeID SCNetworkReachabilityGetTypeID(void)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
  }
  return __kSCNetworkReachabilityTypeID;
}

CFMutableArrayRef SCNetworkReachabilityCopyResolvedAddress(char *cf, _DWORD *a2)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (cf) {
      goto LABEL_3;
    }
LABEL_14:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_14;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(cf) != v4 || *((_DWORD *)cf + 20) <= 1u) {
    goto LABEL_14;
  }
  if (a2) {
    *a2 = 0;
  }
  if (pthread_mutex_lock((pthread_mutex_t *)(cf + 16))) {
    SCNetworkReachabilityCopyResolvedAddress_cold_2();
  }
  if (nw_array_get_count())
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    nw_array_apply();
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  if (pthread_mutex_unlock((pthread_mutex_t *)(cf + 16))) {
    SCNetworkReachabilityCopyResolvedAddress_cold_1();
  }
  _SCErrorSet(0);
  return Mutable;
}

uint64_t __SCNetworkReachabilityCopyResolvedAddress_block_invoke(uint64_t a1, int a2, nw_endpoint_t endpoint)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  nw_endpoint_type_t type = nw_endpoint_get_type(endpoint);
  if (type == nw_endpoint_type_host)
  {
    hostio_name_t name = nw_endpoint_get_hostname(endpoint);
    if (hostname)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], hostname, 0x600u);
      if (v11)
      {
        CFStringRef v8 = v11;
        if (CFStringHasPrefix(v11, @".") || CFStringHasSuffix(v8, @"."))
        {
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(v10, 0, v8);
          CFRelease(v8);
          CFStringTrim(MutableCopy, @".");
          CFStringRef v8 = MutableCopy;
        }
        goto LABEL_10;
      }
      CFStringRef v25 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFStringRef v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, (os_log_type_t)v26))
      {
LABEL_26:
        uint64_t v27 = _os_log_pack_size();
        int v35 = (char *)v37 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(3, (uint64_t)v25, v26, v35);
      }
    }
    else
    {
      CFStringRef v25 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFStringRef v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, (os_log_type_t)v26)) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    nw_endpoint_type_t v6 = type;
    if (type == nw_endpoint_type_address)
    {
      sockaddr address = nw_endpoint_get_address(endpoint);
      if (address)
      {
        CFStringRef v8 = (const __CFString *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &address->sa_len, address->sa_len);
LABEL_10:
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v8);
        CFRelease(v8);
        return 1;
      }
      CFStringRef v25 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        CFStringRef v25 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v25;
      }
      uint64_t v26 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v25, (os_log_type_t)v26)) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v13 = __log_SCNetworkReachability_log;
      if (!__log_SCNetworkReachability_log)
      {
        uint64_t v13 = os_log_create("com.apple.SystemConfiguration", "SCNetworkReachability");
        __log_SCNetworkReachability_log = (uint64_t)v13;
      }
      uint64_t v14 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
      {
        uint64_t v15 = _os_log_pack_size();
        int v23 = (char *)v37 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        CFTypeID v24 = (_DWORD *)_os_log_pack_fill();
        *CFTypeID v24 = 67109120;
        v24[1] = v6;
        __SC_log_send(3, (uint64_t)v13, v14, v23);
      }
    }
  }
  return 1;
}

uint64_t SCNetworkReachabilityGetInterfaceIndex(char *cf)
{
  if (__SCNetworkReachabilityInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_13:
      _SCErrorSet(1002);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (!cf) {
      goto LABEL_13;
    }
  }
  uint64_t v2 = __kSCNetworkReachabilityTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_13;
  }
  CFStringRef v3 = (pthread_mutex_t *)(cf + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)(cf + 16))) {
    SCNetworkReachabilityGetInterfaceIndex_cold_2();
  }
  if ((__SCNetworkReachabilityGetFlagsFromPath((uint64_t)(cf + 193), (uint64_t)"GetInterfaceIndex", *((nw_path_t *)cf + 31), *((_DWORD *)cf + 20), 0, 0, cf[288], *((_DWORD *)cf + 73)) & 6) == 2)
  {
    if (cf[288]) {
      uint64_t interface_index = *((unsigned int *)cf + 74);
    }
    else {
      uint64_t interface_index = nw_path_get_interface_index();
    }
  }
  else
  {
    uint64_t interface_index = 0xFFFFFFFFLL;
  }
  if (pthread_mutex_unlock(v3)) {
    SCNetworkReachabilityGetInterfaceIndex_cold_1();
  }
  return interface_index;
}

CFStringRef reachRLSCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"<SCNetworkReachability RLS> {target = %p}", a1);
}

Boolean SCNetworkReachabilityUnscheduleFromRunLoop(SCNetworkReachabilityRef target, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  if (__SCNetworkReachabilityInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkReachabilityInitialize_initialized, &__block_literal_global_10);
    if (target) {
      goto LABEL_3;
    }
LABEL_16:
    _SCErrorSet(1002);
    return 0;
  }
  if (!target) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v6 = __kSCNetworkReachabilityTypeID;
  CFTypeID v7 = CFGetTypeID(target);
  if (!runLoopMode || !runLoop || v7 != v6) {
    goto LABEL_16;
  }
  CFStringRef v8 = (pthread_mutex_t *)((char *)target + 16);
  if (pthread_mutex_lock((pthread_mutex_t *)((char *)target + 16))) {
    SCNetworkReachabilityUnscheduleFromRunLoop_cold_3();
  }
  CFArrayRef v9 = (const __CFArray *)*((void *)target + 22);
  if (!v9 || !*((void *)target + 15) || !*((unsigned char *)target + 112))
  {
    if (pthread_mutex_unlock((pthread_mutex_t *)((char *)target + 16))) {
      SCNetworkReachabilityUnscheduleFromRunLoop_cold_1();
    }
    goto LABEL_16;
  }
  if (!_SC_unschedule(target, runLoop, runLoopMode, v9, 0))
  {
LABEL_14:
    Boolean v10 = 1;
    goto LABEL_19;
  }
  if (CFArrayGetCount(*((CFArrayRef *)target + 22)))
  {
    if (!_SC_isScheduled(0, runLoop, runLoopMode, *((CFArrayRef *)target + 22))) {
      CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
    }
    goto LABEL_14;
  }
  CFRunLoopRemoveSource(runLoop, *((CFRunLoopSourceRef *)target + 15), runLoopMode);
  CFRelease(*((CFTypeRef *)target + 22));
  *((void *)target + 22) = 0;
  CFRunLoopSourceInvalidate(*((CFRunLoopSourceRef *)target + 15));
  CFRelease(*((CFTypeRef *)target + 15));
  *((void *)target + 15) = 0;
  Boolean v10 = __SCNetworkReachabilitySetDispatchQueue((uint64_t)target, 0);
LABEL_19:
  if (pthread_mutex_unlock(v8)) {
    SCNetworkReachabilityUnscheduleFromRunLoop_cold_2();
  }
  return v10;
}

uint64_t _SC_checkResolverReachabilityByAddress(uint64_t a1, _DWORD *a2, char *a3)
{
  default_evaluator = (void *)nw_path_create_default_evaluator();
  uint64_t v6 = nw_path_evaluator_copy_path();
  if (nw_path_get_status(v6) == nw_path_status_unsatisfied)
  {
    if (a2) {
      *a2 = 0;
    }
    if (a3)
    {
      char v7 = 0;
LABEL_10:
      *a3 = v7;
    }
  }
  else
  {
    if (a2) {
      *a2 = 2;
    }
    if (a3)
    {
      char v7 = 1;
      goto LABEL_10;
    }
  }
  nw_release(default_evaluator);
  nw_release(v6);
  return 1;
}

CFStringRef SCDynamicStoreKeyCreateProxies(CFAllocatorRef allocator)
{
  return SCDynamicStoreKeyCreateNetworkGlobalEntity(allocator, @"State:", @"Proxies");
}

CFDictionaryRef SCDynamicStoreCopyProxies(SCDynamicStoreRef store)
{
  return SCDynamicStoreCopyProxiesWithOptions(store, 0);
}

CFDictionaryRef SCDynamicStoreCopyProxiesWithOptions(const __SCDynamicStore *a1, const __CFDictionary *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_6;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(a2) == TypeID)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"NO_GLOBAL");
    CFTypeID v6 = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == v6)
    {
      BOOL v7 = CFBooleanGetValue(Value) != 0;
      goto LABEL_7;
    }
LABEL_6:
    BOOL v7 = 0;
LABEL_7:
    CFStringRef v8 = SCPreferencesCreate(0, @"SCDynamicStoreCopyProxiesWithOptions", @"/Library/Managed Preferences/mobile/com.apple.SystemConfiguration.plist");
    if (v8)
    {
      CFArrayRef v9 = v8;
      CFDictionaryRef v10 = (const __CFDictionary *)SCPreferencesGetValue(v8, @"Proxies");
      CFDictionaryRef v11 = v10;
      if (v10) {
        CFRetain(v10);
      }
      CFRelease(v9);
      if (v7 && v11)
      {
        int valuePtr = 0;
        uint64_t v12 = CFDictionaryGetValue(v11, @"BypassAllowed");
        CFTypeID v13 = CFNumberGetTypeID();
        if (v12
          && CFGetTypeID(v12) == v13
          && CFNumberGetValue((CFNumberRef)v12, kCFNumberIntType, &valuePtr)
          && valuePtr)
        {
          CFRelease(v11);
          goto LABEL_24;
        }
      }
      else
      {
        if (!v11) {
          goto LABEL_24;
        }
        if (!v7)
        {
          int valuePtr = 0;
          CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v11);
          CFRelease(v11);
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFDictionarySetValue(MutableCopy, @"BypassAllowed", v16);
          CFRelease(v16);
          CFDictionaryRef v11 = MutableCopy;
        }
      }
      if (CFDictionaryContainsKey(v11, @"FallBackAllowed"))
      {
        if (v11)
        {
LABEL_30:
          CFDictionaryRef v14 = __SCNetworkProxiesCopyNormalized(v11);
          CFRelease(v11);
          return v14;
        }
        return CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      int valuePtr = 0;
      uint64_t v19 = CFDictionaryCreateMutableCopy(0, 0, v11);
      CFRelease(v11);
      CFNumberRef v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v19, @"FallBackAllowed", v20);
      CFRelease(v20);
LABEL_29:
      CFDictionaryRef v11 = v19;
      if (v19) {
        goto LABEL_30;
      }
      return CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
LABEL_24:
    CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"State:", @"Proxies");
    CFDictionaryRef v11 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, NetworkGlobalEntity);
    CFRelease(NetworkGlobalEntity);
    CFTypeID v18 = CFDictionaryGetTypeID();
    if (!v11) {
      return CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    if (CFGetTypeID(v11) != v18 || !CFDictionaryContainsKey(v11, @"BypassAllowed")) {
      goto LABEL_30;
    }
    uint64_t v19 = CFDictionaryCreateMutableCopy(0, 0, v11);
    CFRelease(v11);
    CFDictionaryRemoveValue(v19, @"BypassAllowed");
    goto LABEL_29;
  }
  _SCErrorSet(1002);
  return 0;
}

CFDictionaryRef __SCNetworkProxiesCopyNormalized(const __CFDictionary *a1)
{
  v34[9] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a1);
    uint64_t v4 = 0;
    v34[0] = @"FTPEnable";
    v34[1] = @"FTPProxy";
    void v34[2] = @"FTPPort";
    v34[3] = @"GopherEnable";
    v34[4] = @"GopherProxy";
    v34[5] = @"GopherPort";
    v34[6] = @"RTSPEnable";
    v34[7] = @"RTSPProxy";
    _OWORD v34[8] = @"RTSPPort";
    do
      CFDictionaryRemoveValue(MutableCopy, (const void *)v34[v4++]);
    while (v4 != 9);
    validate_proxy_content(MutableCopy, @"HTTPEnable", @"HTTPProxy", @"HTTPPort", "http", 0x50u, 0);
    validate_proxy_content(MutableCopy, @"HTTPSEnable", @"HTTPSProxy", @"HTTPSPort", "https", 0x1BBu, 0);
    validate_proxy_content(MutableCopy, @"SOCKSEnable", @"SOCKSProxy", @"SOCKSPort", "socks", 0x438u, 0);
    validate_proxy_content(MutableCopy, @"TransportConverterEnable", @"TransportConverterProxy", @"TransportConverterPort", 0, 0, 1);
    if (CFDictionaryContainsKey(MutableCopy, @"ProxyAutoConfigURLString"))
    {
      validate_proxy_content(MutableCopy, @"ProxyAutoConfigEnable", @"ProxyAutoConfigURLString", 0, 0, 0, 0);
      CFDictionaryRemoveValue(MutableCopy, @"ProxyAutoConfigJavaScript");
    }
    else
    {
      validate_proxy_content(MutableCopy, @"ProxyAutoConfigEnable", @"ProxyAutoConfigJavaScript", 0, 0, 0, 0);
    }
    validate_proxy_content(MutableCopy, @"ProxyAutoDiscoveryEnable", 0, 0, 0, 0, 0);
    validate_proxy_content(MutableCopy, @"FallBackAllowed", 0, 0, 0, 0, 0);
    CFBooleanRef Value = CFDictionaryGetValue(MutableCopy, @"FTPPassive");
    if (Value)
    {
      CFArrayRef v9 = Value;
      LODWORD(v34[0]) = 0;
      CFTypeID v10 = CFNumberGetTypeID();
      if (CFGetTypeID(v9) != v10 || !CFNumberGetValue((CFNumberRef)v9, kCFNumberIntType, v34))
      {
        LODWORD(v34[0]) = 1;
        CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, v34);
        CFDictionarySetValue(MutableCopy, @"FTPPassive", v11);
        CFRelease(v11);
      }
    }
    CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"ExceptionsList");
    if (!v12) {
      goto LABEL_26;
    }
    CFArrayRef v13 = v12;
    CFTypeID v14 = CFArrayGetTypeID();
    if (CFGetTypeID(v13) == v14)
    {
      CFIndex Count = CFArrayGetCount(v13);
      CFIndex v16 = Count;
      if (Count < 1)
      {
        if (Count) {
          goto LABEL_26;
        }
      }
      else
      {
        CFIndex v17 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, v17);
          CFTypeID v19 = CFStringGetTypeID();
          if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v19 || !CFStringGetLength(ValueAtIndex)) {
            break;
          }
          if (v16 == ++v17) {
            goto LABEL_26;
          }
        }
      }
    }
    CFDictionaryRemoveValue(MutableCopy, @"ExceptionsList");
LABEL_26:
    CFNumberRef v20 = CFDictionaryGetValue(MutableCopy, @"ExcludeSimpleHostnames");
    if (v20)
    {
      uint64_t v21 = v20;
      LODWORD(v34[0]) = 0;
      CFTypeID v22 = CFNumberGetTypeID();
      if (CFGetTypeID(v21) != v22 || !CFNumberGetValue((CFNumberRef)v21, kCFNumberIntType, v34))
      {
        LODWORD(v34[0]) = 0;
        CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, v34);
        CFDictionarySetValue(MutableCopy, @"ExcludeSimpleHostnames", v23);
        CFRelease(v23);
      }
    }
    CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"__SCOPED__");
    CFTypeID v25 = CFDictionaryGetTypeID();
    if (v24 && CFGetTypeID(v24) == v25)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryApplyFunction(v24, (CFDictionaryApplierFunction)normalize_scoped_proxy, Mutable);
      CFDictionarySetValue(MutableCopy, @"__SCOPED__", Mutable);
      CFRelease(Mutable);
    }
    CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"__SERVICES__");
    CFTypeID v28 = CFDictionaryGetTypeID();
    if (v27 && CFGetTypeID(v27) == v28)
    {
      CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryApplyFunction(v27, (CFDictionaryApplierFunction)normalize_services_proxy, v29);
      CFDictionarySetValue(MutableCopy, @"__SERVICES__", v29);
      CFRelease(v29);
    }
    CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"__SUPPLEMENTAL__");
    CFTypeID v31 = CFArrayGetTypeID();
    if (v30)
    {
      if (CFGetTypeID(v30) == v31)
      {
        CFMutableArrayRef v32 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
        v36.CFIndex length = CFArrayGetCount(v30);
        v36.CFIndex location = 0;
        CFArrayApplyFunction(v30, v36, (CFArrayApplierFunction)normalize_supplemental_proxy, v32);
        CFDictionarySetValue(MutableCopy, @"__SUPPLEMENTAL__", v32);
        CFRelease(v32);
      }
    }
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, MutableCopy);
    CFRelease(MutableCopy);
    return Copy;
  }
  int v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFTypeID v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];

  return CFDictionaryCreate(0, 0, 0, 0, v5, v6);
}

CFDataRef SCNetworkProxiesCreateProxyAgentData(void *a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFDataRef v17 = 0;
  values[0] = a1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFArrayRef v3 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    _SCSerialize(v3, &v17, 0, 0);
    CFRelease(v3);
    return v17;
  }
  else
  {
    int v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)&v16 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(3, (uint64_t)v5, v6, v15);
    }
    _SCErrorSet(1002);
    return 0;
  }
}

CFArrayRef SCNetworkProxiesCopyMatchingWithOptions(const void *a1, const __CFDictionary *a2)
{
  return _SCNetworkProxiesCopyMatchingInternal(a1, 0, 0, a2);
}

void validate_proxy_content(const __CFDictionary *a1, const void *a2, const void *a3, const void *a4, const char *a5, unsigned int a6, int a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  CFBooleanRef Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    uint64_t v15 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(v15) != TypeID || !CFNumberGetValue((CFNumberRef)v15, kCFNumberIntType, &valuePtr)) {
      goto LABEL_26;
    }
  }
  if (a3)
  {
    CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a1, a3);
    CFStringRef v18 = v17;
    if (!valuePtr && v17) {
      goto LABEL_26;
    }
    if (valuePtr)
    {
      CFTypeID v19 = CFStringGetTypeID();
      if (!v18)
      {
        CFArrayGetTypeID();
        goto LABEL_26;
      }
      if (CFGetTypeID(v18) == v19)
      {
        if (a7 || !CFStringGetLength(v18)) {
          goto LABEL_26;
        }
      }
      else
      {
        CFTypeID v20 = CFArrayGetTypeID();
        CFTypeID v21 = CFGetTypeID(v18);
        if (!a7) {
          goto LABEL_26;
        }
        if (v21 != v20) {
          goto LABEL_26;
        }
        CFIndex Count = CFArrayGetCount((CFArrayRef)v18);
        if (!Count) {
          goto LABEL_26;
        }
        if (Count >= 1)
        {
          CFIndex v22 = 0;
          do
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v18, v22);
            CFTypeID v24 = CFStringGetTypeID();
            if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v24 || !CFStringGetLength(ValueAtIndex)) {
              goto LABEL_26;
            }
          }
          while (Count != ++v22);
        }
      }
    }
  }
  if (!a4) {
    return;
  }
  int v33 = 0;
  CFTypeID v25 = CFDictionaryGetValue(a1, a4);
  uint64_t v26 = v25;
  int v27 = valuePtr;
  if (!valuePtr && v25) {
    goto LABEL_26;
  }
  if (valuePtr && v25)
  {
    CFTypeID v29 = CFNumberGetTypeID();
    if (CFGetTypeID(v26) == v29 && CFNumberGetValue((CFNumberRef)v26, kCFNumberIntType, &v33) && v33 < 0x10000)
    {
      if (!v33) {
        uint64_t v26 = 0;
      }
      int v27 = valuePtr;
      goto LABEL_39;
    }
LABEL_26:
    int valuePtr = 0;
    CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(a1, a2, v28);
    CFRelease(v28);
    if (a3) {
      CFDictionaryRemoveValue(a1, a3);
    }
    if (a4) {
      CFDictionaryRemoveValue(a1, a4);
    }
    return;
  }
LABEL_39:
  if (!v27 || v26) {
    return;
  }
  if (!a5) {
    goto LABEL_26;
  }
  CFArrayRef v30 = getservbyname(a5, "tcp");
  if (v30) {
    a6 = bswap32(LOWORD(v30->s_port)) >> 16;
  }
  int v33 = a6;
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberIntType, &v33);
  CFDictionarySetValue(a1, a4, v31);
  CFRelease(v31);
}

void normalize_scoped_proxy(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  int v5 = (const void *)__SCNetworkProxiesCopyNormalized(a2);
  CFDictionarySetValue(a3, a1, v5);

  CFRelease(v5);
}

void normalize_services_proxy(const void *a1, uint64_t a2, __CFDictionary *a3)
{
  int v5 = (const void *)__SCNetworkProxiesCopyNormalized(a2);
  CFDictionarySetValue(a3, a1, v5);

  CFRelease(v5);
}

void normalize_supplemental_proxy(uint64_t a1, __CFArray *a2)
{
  CFArrayRef v3 = (const void *)__SCNetworkProxiesCopyNormalized(a1);
  CFArrayAppendValue(a2, v3);

  CFRelease(v3);
}

Boolean DHCPClientPreferencesSetApplicationOptions(CFStringRef applicationID, const UInt8 *options, CFIndex count)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (applicationID && (CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"/Application/%@", applicationID)) != 0)
  {
    CFStringRef v6 = v5;
    uint64_t v7 = SCPreferencesCreate(0, @"DHCPClientSetAppReqParams", @"DHCPClient.xml");
    if (!v7)
    {
      LOBYTE(v11) = 0;
      uint64_t v12 = (void *)v6;
LABEL_35:
      CFRelease(v12);
      return v11;
    }
    uint64_t v8 = v7;
    CFDictionaryRef Value = SCPreferencesPathGetValue(v7, v6);
    if (Value) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v12 = MutableCopy;
    if (!MutableCopy) {
      goto LABEL_33;
    }
    if (options && count >= 1)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (!Mutable) {
        goto LABEL_33;
      }
      CFMutableArrayRef v14 = Mutable;
      uint64_t v15 = 0;
      while (1)
      {
        if (options[v15] && options[v15] != 255)
        {
          int valuePtr = options[v15];
          CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v16)
          {
            CFRelease(v14);
            goto LABEL_33;
          }
          CFNumberRef v17 = v16;
          CFIndex v18 = CFArrayGetCount(v14);
          if (v18 < 1)
          {
LABEL_21:
            CFArrayAppendValue(v14, v17);
          }
          else
          {
            CFIndex v19 = v18;
            CFIndex v20 = 0;
            while (1)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v14, v20);
              if (CFEqual(ValueAtIndex, v17)) {
                break;
              }
              if (v19 == ++v20) {
                goto LABEL_21;
              }
            }
          }
          CFRelease(v17);
        }
        if (++v15 == count)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v12, @"DHCPRequestedParameterList", v14);
          CFRelease(v14);
          goto LABEL_26;
        }
      }
    }
    CFDictionaryRemoveValue(MutableCopy, @"DHCPRequestedParameterList");
LABEL_26:
    if (SCPreferencesLock(v8, 1u))
    {
      if (SCPreferencesPathSetValue(v8, v6, (CFDictionaryRef)v12))
      {
        int v11 = SCPreferencesCommitChanges(v8);
        if (v11) {
          SCPreferencesApplyChanges(v8);
        }
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      SCPreferencesUnlock(v8);
    }
    else
    {
LABEL_33:
      LOBYTE(v11) = 0;
    }
    CFRelease(v8);
    CFRelease(v6);
    if (v12) {
      goto LABEL_35;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  return v11;
}

UInt8 *__cdecl DHCPClientPreferencesCopyApplicationOptions(CFStringRef applicationID, CFIndex *count)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (applicationID)
  {
    CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"/Application/%@", applicationID);
    if (v3)
    {
      CFStringRef v4 = v3;
      CFStringRef v5 = SCPreferencesCreate(0, @"DHCPClientCopyAppReqParams", @"DHCPClient.xml");
      if (!v5)
      {
        uint64_t v13 = 0;
LABEL_25:
        CFRelease(v4);
        return v13;
      }
      CFStringRef v6 = v5;
      CFDictionaryRef Value = SCPreferencesPathGetValue(v5, v4);
      if (Value)
      {
        CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(Value, @"DHCPRequestedParameterList");
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v8)
        {
          if (CFGetTypeID(v8) == TypeID)
          {
            size_t v10 = CFArrayGetCount(v8);
            CFIndex v11 = v10;
            if (!v10 || (uint64_t v12 = (UInt8 *)malloc_type_malloc(v10, 0x32FDCE9uLL)) == 0)
            {
              uint64_t v13 = 0;
              *count = v11;
LABEL_24:
              CFRelease(v6);
              goto LABEL_25;
            }
            uint64_t v13 = v12;
            if (v11 < 1)
            {
              *count = 0;
            }
            else
            {
              CFIndex v14 = 0;
              for (CFIndex i = 0; i != v11; ++i)
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, i);
                CFTypeID v17 = CFNumberGetTypeID();
                if (ValueAtIndex)
                {
                  if (CFGetTypeID(ValueAtIndex) == v17)
                  {
                    int valuePtr = 0;
                    if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr)) {
                      v13[v14++] = valuePtr;
                    }
                  }
                }
              }
              *count = v14;
              if (v14) {
                goto LABEL_24;
              }
            }
            free(v13);
          }
        }
      }
      uint64_t v13 = 0;
      goto LABEL_24;
    }
  }
  return 0;
}

CFDictionaryRef SCDynamicStoreCopyDHCPInfo(SCDynamicStoreRef store, CFStringRef serviceID)
{
  if (serviceID)
  {
    CFStringRef Value = serviceID;
    CFStringRef v4 = 0;
  }
  else
  {
    CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"State:", @"IPv4");
    if (!NetworkGlobalEntity) {
      return 0;
    }
    CFStringRef v4 = NetworkGlobalEntity;
    CFDictionaryRef v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(store, NetworkGlobalEntity);
    if (!v10)
    {
      CFDictionaryRef v7 = 0;
      goto LABEL_18;
    }
    CFDictionaryRef v11 = v10;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v10, @"PrimaryService");
    CFRelease(v4);
    if (!Value)
    {
      CFDictionaryRef v7 = 0;
      CFStringRef v4 = (const __CFString *)v11;
      goto LABEL_18;
    }
    CFStringRef v4 = (const __CFString *)v11;
  }
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", Value, @"DHCP");
  if (!NetworkServiceEntity)
  {
    CFDictionaryRef v7 = 0;
    if (!v4) {
      return v7;
    }
    goto LABEL_18;
  }
  CFStringRef v6 = NetworkServiceEntity;
  CFDictionaryRef v7 = (const __CFDictionary *)SCDynamicStoreCopyValue(store, NetworkServiceEntity);
  if (v7)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v7) != TypeID)
    {
      CFRelease(v7);
      CFDictionaryRef v7 = 0;
    }
  }
  CFRelease(v6);
  if (v4) {
LABEL_18:
  }
    CFRelease(v4);
  return v7;
}

CFDataRef DHCPInfoGetOptionData(CFDictionaryRef info, UInt8 code)
{
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"Option_%d", code);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  CFStringRef Value = CFDictionaryGetValue(info, v3);
  CFTypeID TypeID = CFDataGetTypeID();
  if (Value && CFGetTypeID(Value) != TypeID) {
    CFStringRef Value = 0;
  }
  CFRelease(v4);
  return (CFDataRef)Value;
}

CFDateRef DHCPInfoGetLeaseStartTime(CFDictionaryRef info)
{
  return (CFDateRef)CFDictionaryGetValue(info, @"LeaseStartTime");
}

CFDateRef DHCPInfoGetLeaseExpirationTime(CFDictionaryRef info)
{
  return (CFDateRef)CFDictionaryGetValue(info, @"LeaseExpirationTime");
}

uint64_t __SCNetworkInterfaceCreateCapabilities(const void *a1, unsigned int a2, const __CFDictionary *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v21 = a2;
  int v22 = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID && (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) != 0)
  {
    if (a2 == -1) {
      CFArrayRef v8 = &v21;
    }
    else {
      CFArrayRef v8 = 0;
    }
    int Capabilities = __getCapabilities(BSDName, v8, &v22);
    if (a3 && Capabilities && v22)
    {
      uint64_t v10 = 0;
      CFDictionaryRef v11 = &capabilityMappings;
      do
      {
        int valuePtr = 0;
        CFNumberRef number = 0;
        int v12 = *((_DWORD *)v11 + 3);
        if ((v12 & v22) != 0 && ((0xDCuLL >> v10) & 1) == 0)
        {
          if (CFDictionaryGetValueIfPresent(a3, **v11, (const void **)&number))
          {
            CFNumberRef v13 = number;
            CFTypeID v14 = CFNumberGetTypeID();
            if (v13)
            {
              if (CFGetTypeID(v13) == v14 && CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
              {
                if (valuePtr)
                {
                  int v15 = v22;
                  int v16 = v21 | v22 & v12;
                  int v17 = ~v12;
                }
                else
                {
                  int v17 = ~v12;
                  int v16 = v21 & ~v12;
                  int v15 = v22;
                }
                unsigned int v21 = v16;
                int v22 = v15 & v17;
              }
            }
          }
        }
        ++v10;
        v11 += 2;
      }
      while (v10 != 10);
    }
  }
  else
  {
    _SCErrorSet(1002);
  }
  return v21;
}

uint64_t __getCapabilities(const __CFString *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v51 = 0u;
  long long v52 = 0u;
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)&v51, 16, 0x600u))
  {
    CFArrayRef v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      CFIndex v18 = (char *)&v51 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v8, v9, v18);
    }
    _SCErrorSet(1002);
    return 0;
  }
  int v5 = socket(2, 2, 0);
  if (v5 == -1)
  {
    CFIndex v19 = __error();
    _SCErrorSet(*v19);
    uint64_t v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v20, (os_log_type_t)v21))
    {
      uint64_t v22 = _os_log_pack_size();
      CFArrayRef v30 = (char *)&v51 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      CFMutableArrayRef v32 = __error();
      int v33 = strerror(*v32);
      *(_DWORD *)uint64_t v31 = 136315138;
      *(void *)(v31 + 4) = v33;
      __SC_log_send(3, (uint64_t)v20, v21, v30);
    }
    return 0;
  }
  int v6 = v5;
  if (ioctl(v5, 0xC020695BuLL, &v51) == -1)
  {
    uint64_t v35 = __error();
    _SCErrorSet(*v35);
    uint64_t v7 = 0;
    int v36 = *__error();
    if (v36 != 6 && v36 != 16)
    {
      int v37 = __log_SCNetworkConfiguration();
      uint64_t v38 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v37, (os_log_type_t)v38))
      {
        uint64_t v39 = _os_log_pack_size();
        uint64_t v47 = (char *)&v51 - ((MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v48 = _os_log_pack_fill();
        uint64_t v49 = __error();
        uint64_t v50 = strerror(*v49);
        *(_DWORD *)uint64_t v48 = 136315138;
        *(void *)(v48 + 4) = v50;
        __SC_log_send(5, (uint64_t)v37, v38, v47);
      }
      uint64_t v7 = 0;
    }
  }
  else
  {
    if (a2) {
      *a2 = DWORD1(v52);
    }
    if (a3) {
      *a3 = v52;
    }
    uint64_t v7 = 1;
  }
  close(v6);
  return v7;
}

CFNumberRef SCNetworkInterfaceCopyCapability(const void *a1, CFMutableDictionaryRef Mutable)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) == 0)
  {
LABEL_19:
    _SCErrorSet(1002);
    return 0;
  }
  BOOL valuePtr = 0;
  if (!__getCapabilities(BSDName, (_DWORD *)v16 + 1, v16)) {
    return 0;
  }
  if (Mutable)
  {
    uint64_t v6 = 0;
    while (!CFEqual(Mutable, *(&capabilityMappings)[v6]))
    {
      v6 += 2;
      if (v6 == 20) {
        goto LABEL_19;
      }
    }
    int v13 = HIDWORD((&capabilityMappings)[v6 + 1]);
    if ((v13 & ~LODWORD(v16[0])) == 0)
    {
      BOOL valuePtr = (v13 & ~HIDWORD(v16[0])) == 0;
      return CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    }
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  int v8 = v16[0];
  uint64_t v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    int v11 = HIDWORD((&capabilityMappings)[v7 + 1]);
    if ((v11 & ~v8) == 0)
    {
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, v9, v10);
      }
      BOOL valuePtr = (v11 & ~HIDWORD(v16[0])) == 0;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, *(&capabilityMappings)[v7], v12);
      CFRelease(v12);
      int v8 = v16[0] & ~v11;
      LODWORD(v16[0]) = v8;
    }
    v7 += 2;
  }
  while (v7 != 20);
  return Mutable;
}

uint64_t SCNetworkInterfaceSetCapability(const void *a1, const void *a2, const void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1) {
    goto LABEL_15;
  }
  if (CFGetTypeID(a1) != TypeID) {
    goto LABEL_15;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (!BSDName) {
    goto LABEL_15;
  }
  CFStringRef v8 = BSDName;
  uint64_t v9 = 0;
  uint64_t v10 = &capabilityMappings;
  while (!CFEqual(a2, **v10))
  {
    ++v9;
    v10 += 2;
    if (v9 == 10) {
      goto LABEL_15;
    }
  }
  if ((0xDCuLL >> v9)) {
    goto LABEL_15;
  }
  if (a3)
  {
    CFTypeID v11 = CFNumberGetTypeID();
    if (CFGetTypeID(a3) != v11) {
      goto LABEL_15;
    }
  }
  if (!__getCapabilities(v8, 0, &v16)) {
    return 0;
  }
  if ((*((_DWORD *)v10 + 3) & v16) == 0)
  {
LABEL_15:
    _SCErrorSet(1002);
    return 0;
  }
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
  }
  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (a3)
  {
    CFDictionarySetValue(MutableCopy, a2, a3);
  }
  else
  {
    CFDictionaryRemoveValue(MutableCopy, a2);
    if (!CFDictionaryGetCount(MutableCopy))
    {
      CFRelease(MutableCopy);
      return SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, 0);
    }
  }
  uint64_t v14 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v14;
}

uint64_t __SCNetworkInterfaceCreateMediaOptions(const void *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1)) == 0)
  {
    _SCErrorSet(1002);
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = __copyMediaList(BSDName, 0);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  if (*((int *)v6 + 8) <= 0)
  {
    __freeMediaList(v6);
    return 0xFFFFFFFFLL;
  }
  int v7 = **(_DWORD **)(v6 + 36) & 0xE0;
  __freeMediaList(v6);
  if (v7 == 128)
  {
    char v8 = 0;
    uint64_t v9 = &ifm_subtype_ieee80211_descriptions;
    uint64_t v10 = &ifm_subtype_ieee80211_option_descriptions;
  }
  else if (v7 == 32)
  {
    char v8 = 0;
    uint64_t v9 = &ifm_subtype_ethernet_descriptions;
    uint64_t v10 = &ifm_subtype_ethernet_option_descriptions;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    char v8 = 1;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"MediaSubType");
  CFTypeID v14 = CFStringGetTypeID();
  if (!Value) {
    return 0xFFFFFFFFLL;
  }
  if (CFGetTypeID(Value) != v14) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = _SC_cfstring_to_cstring(Value, 0, 0, 0x600u);
  if (!v15) {
    return 0xFFFFFFFFLL;
  }
  int v16 = (char *)v15;
  for (uint64_t i = 0; i != 12; i += 4)
  {
    if (!strcasecmp(v16, *(const char **)&ifm_subtype_shared_descriptions[i + 2]))
    {
      uint64_t v9 = &ifm_subtype_shared_descriptions[i];
      goto LABEL_28;
    }
  }
  if ((v8 & 1) != 0 || (CFIndex v18 = (const char *)*((void *)v9 + 1)) == 0)
  {
LABEL_25:
    CFIndex v19 = v16;
LABEL_26:
    CFAllocatorDeallocate(0, v19);
    return 0xFFFFFFFFLL;
  }
  while (strcasecmp(v16, v18))
  {
    CFIndex v18 = (const char *)*((void *)v9 + 3);
    v9 += 4;
    if (!v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  int v20 = *v9;
  CFAllocatorDeallocate(0, v16);
  uint64_t v21 = CFDictionaryGetValue(a2, @"MediaOptions");
  CFTypeID v22 = CFArrayGetTypeID();
  if (!v21 || CFGetTypeID(v21) != v22) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v20 | v7;
  CFIndex Count = CFArrayGetCount((CFArrayRef)v21);
  if (Count < 1) {
    return v11;
  }
  CFIndex v24 = Count;
  CFIndex v25 = 0;
  while (2)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v21, v25);
    CFTypeID v27 = CFStringGetTypeID();
    if (!ValueAtIndex) {
      return 0xFFFFFFFFLL;
    }
    if (CFGetTypeID(ValueAtIndex) != v27) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v28 = _SC_cfstring_to_cstring(ValueAtIndex, 0, 0, 0x600u);
    if (!v28) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v29 = (char *)v28;
    uint64_t v30 = 0;
    while (1)
    {
      uint64_t v31 = &ifm_shared_option_descriptions[v30];
      if (!strcasecmp(v29, *(const char **)&ifm_shared_option_descriptions[v30 + 2])) {
        break;
      }
      v30 += 4;
      if (v30 == 32)
      {
        if ((v8 & 1) != 0 || (v32 = (const char *)*((void *)v10 + 1), uint64_t v31 = v10, !v32))
        {
LABEL_45:
          CFIndex v19 = v29;
          goto LABEL_26;
        }
        while (strcasecmp(v29, v32))
        {
          CFMutableArrayRef v32 = (const char *)*((void *)v31 + 3);
          v31 += 4;
          if (!v32) {
            goto LABEL_45;
          }
        }
        break;
      }
    }
    uint64_t v11 = *v31 | v11;
    CFAllocatorDeallocate(0, v29);
    if (++v25 != v24) {
      continue;
    }
    return v11;
  }
}

char *__copyMediaList(const __CFString *a1, char *a2)
{
  v47[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (char *)CFAllocatorAllocate(0, 44, 0);
  *(_OWORD *)CFStringRef v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *(_OWORD *)(v4 + 28) = 0u;
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)v4, 16, 0x600u))
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
      goto LABEL_16;
    }
    uint64_t v11 = _os_log_pack_size();
    CFIndex v19 = (char *)v47 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    int v20 = 5;
LABEL_12:
    __SC_log_send(v20, (uint64_t)v9, v10, v19);
    goto LABEL_16;
  }
  int v5 = socket(2, 2, 0);
  if (v5 == -1)
  {
    uint64_t v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v9, (os_log_type_t)v10)) {
      goto LABEL_16;
    }
    uint64_t v21 = _os_log_pack_size();
    CFIndex v19 = (char *)v47 - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v29 = _os_log_pack_fill();
    uint64_t v30 = __error();
    uint64_t v31 = strerror(*v30);
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)(v29 + 4) = v31;
    int v20 = 3;
    goto LABEL_12;
  }
  int v6 = v5;
  if (ioctl(v5, 0xC02C6948uLL, v4) != -1)
  {
    uint64_t v7 = *((unsigned int *)v4 + 8);
    if ((int)v7 < 1
      || (*(void *)(v4 + 36) = CFAllocatorAllocate(0, 4 * v7, 0), ioctl(v6, 0xC02C6948uLL, v4) != -1))
    {
      close(v6);
      char v8 = 1;
      if (!a2) {
        return v4;
      }
      goto LABEL_17;
    }
    CFMutableArrayRef v32 = __log_SCNetworkConfiguration();
    uint64_t v33 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v32, (os_log_type_t)v33))
    {
      uint64_t v34 = _os_log_pack_size();
      uint64_t v42 = (char *)v47 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v43 = _os_log_pack_fill();
      uint64_t v44 = __error();
      uint64_t v45 = strerror(*v44);
      *(_DWORD *)uint64_t v43 = 136315138;
      *(void *)(v43 + 4) = v45;
      __SC_log_send(5, (uint64_t)v32, v33, v42);
    }
  }
  close(v6);
LABEL_16:
  __freeMediaList(v4);
  _SCErrorSet(1001);
  char v8 = 0;
  CFStringRef v4 = 0;
  if (a2) {
LABEL_17:
  }
    *a2 = v8;
  return v4;
}

void __freeMediaList(char *ptr)
{
  uint64_t v2 = *(void **)(ptr + 36);
  if (v2) {
    CFAllocatorDeallocate(0, v2);
  }

  CFAllocatorDeallocate(0, ptr);
}

Boolean SCNetworkInterfaceCopyMediaOptions(SCNetworkInterfaceRef interface, CFDictionaryRef *current, CFDictionaryRef *active, CFArrayRef *available, Boolean filter)
{
  int v5 = filter;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface)) == 0)
  {
    _SCErrorSet(1002);
    LOBYTE(v12) = 0;
    return v12;
  }
  uint64_t v12 = __copyMediaList(BSDName, 0);
  if (v12)
  {
    uint64_t v13 = v12;
    if (active) {
      *active = 0;
    }
    if (current) {
      *current = 0;
    }
    if (available)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (*((int *)v13 + 8) >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          MediaDictionary = __createMediaDictionary(*(_DWORD *)(*(void *)(v13 + 36) + 4 * v15), v5);
          if (MediaDictionary)
          {
            uint64_t v17 = MediaDictionary;
            if (active && !*active && *((_DWORD *)v13 + 7) == *(_DWORD *)(*(void *)(v13 + 36) + 4 * v15)) {
              *active = (CFDictionaryRef)CFRetain(MediaDictionary);
            }
            if (current && !*current && *((_DWORD *)v13 + 4) == *(_DWORD *)(*(void *)(v13 + 36) + 4 * v15)) {
              *current = (CFDictionaryRef)CFRetain(v17);
            }
            v21.CFIndex length = CFArrayGetCount(Mutable);
            v21.CFIndex location = 0;
            if (!CFArrayContainsValue(Mutable, v21, v17)) {
              CFArrayAppendValue(Mutable, v17);
            }
            CFRelease(v17);
          }
          ++v15;
        }
        while (v15 < *((int *)v13 + 8));
      }
      *available = Mutable;
    }
    if (active && !*active) {
      *active = __createMediaDictionary(*((_DWORD *)v13 + 7), 0);
    }
    if (!current || *current) {
      goto LABEL_40;
    }
    if (active)
    {
      int v18 = *((_DWORD *)v13 + 4);
      if (*((_DWORD *)v13 + 7) == v18)
      {
        if (!*active)
        {
LABEL_40:
          __freeMediaList(v13);
          LOBYTE(v12) = 1;
          return v12;
        }
        CFDictionaryRef v19 = (const __CFDictionary *)CFRetain(*active);
LABEL_39:
        *current = v19;
        goto LABEL_40;
      }
    }
    else
    {
      int v18 = *((_DWORD *)v13 + 4);
    }
    CFDictionaryRef v19 = __createMediaDictionary(v18, 0);
    goto LABEL_39;
  }
  return v12;
}

__CFDictionary *__createMediaDictionary(int a1, int a2)
{
  int v2 = a1;
  if (a2)
  {
    if ((a1 & 0xF001F) == 2 || (a1 & 0x8000000) != 0) {
      return 0;
    }
  }
  if ((a1 & 0xE0) == 0x20)
  {
    CFStringRef v4 = &ifm_subtype_ethernet_descriptions;
    int v5 = &ifm_subtype_ethernet_option_descriptions;
  }
  else
  {
    if ((a1 & 0xE0) != 0x80) {
      return 0;
    }
    CFStringRef v4 = &ifm_subtype_ieee80211_descriptions;
    int v5 = &ifm_subtype_ieee80211_option_descriptions;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = 0;
  int v8 = v2 & 0xF001F;
  while (v8 != ifm_subtype_shared_descriptions[v7])
  {
    v7 += 4;
    if (v7 == 12) {
      goto LABEL_17;
    }
  }
  CFStringRef v9 = CFStringCreateWithCString(0, *(const char **)&ifm_subtype_shared_descriptions[v7 + 2], 0x600u);
  if (v9)
  {
LABEL_22:
    CFDictionaryAddValue(Mutable, @"MediaSubType", v9);
    CFRelease(v9);
    goto LABEL_23;
  }
LABEL_17:
  uint64_t v10 = (const char *)*((void *)v4 + 1);
  if (v10)
  {
    while (v8 != *v4)
    {
      uint64_t v10 = (const char *)*((void *)v4 + 3);
      v4 += 4;
      if (!v10) {
        goto LABEL_23;
      }
    }
    CFStringRef v9 = CFStringCreateWithCString(0, v10, 0x600u);
    if (v9) {
      goto LABEL_22;
    }
  }
LABEL_23:
  uint64_t v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if ((v2 & 0xFF0FF00) != 0)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = v12 + 16;
      if (v12 == 128) {
        break;
      }
      int v14 = *(int *)((char *)ifm_shared_option_descriptions + v12);
      if ((v14 & v2) != 0)
      {
        CFStringRef v15 = CFStringCreateWithCString(0, *(const char **)((char *)&ifm_shared_option_descriptions[2] + v12), 0x600u);
        CFArrayAppendValue(v11, v15);
        CFRelease(v15);
        v2 &= ~v14;
      }
      uint64_t v12 = v13;
      if ((v2 & 0xFF0FF00) == 0) {
        goto LABEL_36;
      }
    }
    if ((v2 & 0xFF0FF00) != 0)
    {
      uint64_t v16 = (const char **)(v5 + 2);
      do
      {
        if (!*v16) {
          break;
        }
        int v17 = *((_DWORD *)v16 - 2);
        if ((v17 & v2) != 0)
        {
          CFStringRef v18 = CFStringCreateWithCString(0, *v16, 0x600u);
          CFArrayAppendValue(v11, v18);
          CFRelease(v18);
          v2 &= ~v17;
        }
        v16 += 2;
      }
      while ((v2 & 0xFF0FF00) != 0);
    }
  }
LABEL_36:
  CFDictionaryAddValue(Mutable, @"MediaOptions", v11);
  CFRelease(v11);
  return Mutable;
}

CFArrayRef SCNetworkInterfaceCopyMediaSubTypes(CFArrayRef available)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!available || CFGetTypeID(available) != TypeID)
  {
    int v11 = 1002;
    goto LABEL_15;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount(available);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(available, i);
      CFTypeID v8 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v8)
        {
          CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSubType");
          CFTypeID v10 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v10)
            {
              v13.CFIndex length = CFArrayGetCount(Mutable);
              v13.CFIndex location = 0;
              if (!CFArrayContainsValue(Mutable, v13, Value)) {
                CFArrayAppendValue(Mutable, Value);
              }
            }
          }
        }
      }
    }
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    int v11 = 0;
LABEL_15:
    _SCErrorSet(v11);
    return 0;
  }
  return Mutable;
}

CFArrayRef SCNetworkInterfaceCopyMediaSubTypeOptions(CFArrayRef available, CFStringRef subType)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!available || CFGetTypeID(available) != TypeID)
  {
    int v15 = 1002;
    goto LABEL_18;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount(available);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(available, i);
      CFTypeID v10 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v10)
        {
          CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSubType");
          CFTypeID v12 = CFStringGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == v12)
            {
              if (CFEqual(subType, Value))
              {
                CFRange v13 = CFDictionaryGetValue(ValueAtIndex, @"MediaOptions");
                CFTypeID v14 = CFArrayGetTypeID();
                if (v13)
                {
                  if (CFGetTypeID(v13) == v14)
                  {
                    v17.CFIndex length = CFArrayGetCount(Mutable);
                    v17.CFIndex location = 0;
                    if (!CFArrayContainsValue(Mutable, v17, v13)) {
                      CFArrayAppendValue(Mutable, v13);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    int v15 = 0;
LABEL_18:
    _SCErrorSet(v15);
    return 0;
  }
  return Mutable;
}

BOOL _SCNetworkInterfaceIsPhysicalEthernet(_DWORD *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  char v11 = 0;
  _SCErrorSet(0);
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    goto LABEL_14;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  if (!CFEqual(InterfaceType, @"Ethernet")
    || _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)a1)
    || _SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)a1)
    || _SCNetworkInterfaceIsTethered(a1)
    || _SCNetworkInterfaceIsBluetoothPAN(a1))
  {
    return 0;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (!BSDName)
  {
LABEL_14:
    _SCErrorSet(1002);
    return 0;
  }
  CFIndex v5 = __copyMediaList(BSDName, &v11);
  if (v5)
  {
    int v6 = v5;
    _SCErrorSet(0);
    uint64_t v7 = 0;
    if ((*((_DWORD *)v6 + 4) & 0xE0) != 0x20)
    {
LABEL_24:
      __freeMediaList(v6);
      return v7;
    }
    uint64_t v8 = *((unsigned int *)v6 + 8);
    if (v8 == 1)
    {
      if ((**(_DWORD **)(v6 + 36) & 0xF001F) == 0) {
        goto LABEL_22;
      }
    }
    else if ((int)v8 < 1)
    {
LABEL_22:
      uint64_t v7 = 0;
      goto LABEL_24;
    }
    uint64_t v10 = *(void *)(v6 + 36);
    while ((*(unsigned char *)(v10 + 2) & 0x10) == 0)
    {
      v10 += 4;
      if (!--v8) {
        goto LABEL_22;
      }
    }
    uint64_t v7 = 1;
    goto LABEL_24;
  }
  return v11 != 0;
}

Boolean SCNetworkInterfaceCopyMTU(SCNetworkInterfaceRef interface, int *mtu_cur, int *mtu_min, int *mtu_max)
{
  kern_return_t MatchingServices;
  io_registry_entry_t v44;
  io_object_t v45;
  CFNumberRef CFProperty;
  CFNumberRef v47;
  CFTypeID v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFTypeID v51;
  int v52;
  CFStringRef InterfaceType;
  CFArrayRef MemberInterfaces;
  CFArrayRef v55;
  CFIndex Count;
  CFIndex v57;
  int v58;
  CFIndex v59;
  const __SCNetworkInterface *ValueAtIndex;
  int v61;
  int valuePtr;
  io_registry_entry_t parent;
  io_iterator_t existing[2];
  char cStr[16];
  long long v66;
  uint64_t v67;

  uint64_t v67 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID || (CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface)) == 0)
  {
LABEL_15:
    _SCErrorSet(1002);
    return 0;
  }
  *(_OWORD *)cStr = 0u;
  long long v66 = 0u;
  if (!_SC_cfstring_to_cstring(BSDName, (UInt8 *)cStr, 16, 0x600u))
  {
    CFRange v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v23 = (char *)&valuePtr
          - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v13, v14, v23);
    }
    goto LABEL_15;
  }
  int v10 = socket(2, 2, 0);
  if (v10 != -1)
  {
    int v11 = v10;
    if (ioctl(v10, 0xC0206933uLL, cStr) == -1)
    {
      uint64_t v41 = __error();
      _SCErrorSet(*v41);
      Boolean v24 = 0;
LABEL_84:
      close(v11);
      return v24;
    }
    if (mtu_cur) {
      *mtu_cur = v66;
    }
    if (mtu_min)
    {
      *mtu_min = v66;
      if (!mtu_max)
      {
        if (!ioctl(v11, 0xC0206944uLL, cStr))
        {
          uint64_t v58 = DWORD1(v66);
          if (SDWORD1(v66) <= 72) {
            uint64_t v58 = 72;
          }
          *mtu_min = v58;
          char v12 = 1;
          goto LABEL_75;
        }
        char v12 = 1;
        goto LABEL_24;
      }
    }
    else if (!mtu_max)
    {
      goto LABEL_83;
    }
    *mtu_max = v66;
    if (!ioctl(v11, 0xC0206944uLL, cStr))
    {
      if (mtu_min)
      {
        long long v52 = DWORD1(v66);
        if (SDWORD1(v66) <= 72) {
          long long v52 = 72;
        }
        *mtu_min = v52;
      }
      char v12 = 0;
      *mtu_max = DWORD2(v66);
      goto LABEL_73;
    }
    char v12 = 0;
LABEL_24:
    *(void *)existing = 0;
    io_registry_entry_t parent = 0;
    if (!__getIOMTULimits_masterPort && MEMORY[0x192FA7480](0, &__getIOMTULimits_masterPort)) {
      goto LABEL_53;
    }
    CFDictionaryRef v42 = _SC_IONetworkInterfaceBSDNameMatching(cStr);
    if (!v42) {
      goto LABEL_53;
    }
    MatchingServices = IOServiceGetMatchingServices(__getIOMTULimits_masterPort, v42, existing);
    uint64_t v44 = 0;
    uint64_t v45 = existing[0];
    if (!MatchingServices && existing[0])
    {
      uint64_t v44 = IOIteratorNext(existing[0]);
      uint64_t v45 = existing[0];
    }
    if (v45) {
      IOObjectRelease(v45);
    }
    if (v44)
    {
      CFTypeRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v44, @"IOInterfaceType", 0, 0);
      if (CFProperty)
      {
        uint64_t v47 = CFProperty;
        uint64_t v48 = CFNumberGetTypeID();
        if (CFGetTypeID(v47) == v48) {
          CFNumberGetValue(v47, kCFNumberIntType, &existing[1]);
        }
        CFRelease(v47);
      }
      IORegistryEntryGetParentEntry(v44, "IOService", &parent);
      IOObjectRelease(v44);
      if (parent)
      {
        uint64_t v49 = (const __CFNumber *)IORegistryEntryCreateCFProperty(parent, @"IOMaxPacketSize", 0, 0);
        if (v49)
        {
          uint64_t v50 = v49;
          long long v51 = CFNumberGetTypeID();
          if (CFGetTypeID(v50) == v51)
          {
            BOOL valuePtr = 0;
            CFNumberGetValue(v50, kCFNumberIntType, &valuePtr);
            if (existing[1] == 6) {
              valuePtr -= 18;
            }
            if (mtu_min) {
              *mtu_min = 72;
            }
            if ((v12 & 1) == 0) {
              *mtu_max = valuePtr;
            }
          }
          CFRelease(v50);
        }
        IOObjectRelease(parent);
      }
    }
    else
    {
LABEL_53:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(interface);
      if (CFEqual(InterfaceType, @"Bridge"))
      {
        CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(interface);
        if (MemberInterfaces)
        {
          uint64_t v55 = MemberInterfaces;
          CFIndex Count = CFArrayGetCount(MemberInterfaces);
          uint64_t v57 = Count;
          if (Count < 2)
          {
            if (Count != 1) {
              goto LABEL_73;
            }
          }
          else
          {
            if (mtu_min) {
              *mtu_min = 72;
            }
            if ((v12 & 1) == 0) {
              *mtu_max = 0xFFFF;
            }
          }
          uint64_t v59 = 0;
          do
          {
            *(void *)existing = 0;
            CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v55, v59);
            if (SCNetworkInterfaceCopyMTU(ValueAtIndex, 0, (int *)&existing[1], (int *)existing))
            {
              if (mtu_min && *mtu_min < (int)existing[1]) {
                *mtu_min = existing[1];
              }
              if ((v12 & 1) == 0 && *mtu_max > (int)existing[0]) {
                *mtu_max = existing[0];
              }
            }
            ++v59;
          }
          while (v57 != v59);
        }
      }
    }
LABEL_73:
    if (mtu_min)
    {
      uint64_t v58 = *mtu_min;
LABEL_75:
      if (v58 <= 1279)
      {
        uint64_t v58 = 1280;
        *mtu_min = 1280;
      }
      if (mtu_cur)
      {
        uint64_t v61 = *mtu_cur;
        if (v58 > *mtu_cur)
        {
          *mtu_min = v61;
          uint64_t v58 = v61;
        }
      }
      if ((v12 & 1) == 0 && v58 > *mtu_max) {
        *mtu_min = *mtu_max;
      }
    }
LABEL_83:
    Boolean v24 = 1;
    goto LABEL_84;
  }
  uint64_t v26 = __error();
  _SCErrorSet(*v26);
  uint64_t v27 = __log_SCNetworkConfiguration();
  uint64_t v28 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v27, (os_log_type_t)v28))
  {
    uint64_t v29 = _os_log_pack_size();
    uint64_t v37 = (char *)&valuePtr
        - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v38 = _os_log_pack_fill();
    uint64_t v39 = __error();
    uint64_t v40 = strerror(*v39);
    *(_DWORD *)uint64_t v38 = 136315138;
    *(void *)(v38 + 4) = v40;
    __SC_log_send(3, (uint64_t)v27, v28, v37);
  }
  return 0;
}

Boolean SCNetworkInterfaceSetMediaOptions(SCNetworkInterfaceRef interface, CFStringRef subtype, CFArrayRef options)
{
  available[1] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(interface);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
    if (subtype) {
      goto LABEL_5;
    }
  }
  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (subtype)
    {
LABEL_5:
      available[0] = 0;
      CFArrayRef v9 = options;
      if (!options) {
        CFArrayRef v9 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
      }
      if (SCNetworkInterfaceCopyMediaOptions(interface, 0, 0, available, 0))
      {
        if (available[0])
        {
          CFArrayRef v10 = SCNetworkInterfaceCopyMediaSubTypes(available[0]);
          CFArrayRef v11 = v10;
          if (v10 && (v65.length = CFArrayGetCount(v10), v65.CFIndex location = 0, CFArrayContainsValue(v11, v65, subtype)))
          {
            CFArrayRef v12 = SCNetworkInterfaceCopyMediaSubTypeOptions(available[0], subtype);
            CFArrayRef v13 = v12;
            if (v12)
            {
              v66.CFIndex length = CFArrayGetCount(v12);
              v66.CFIndex location = 0;
              if (CFArrayContainsValue(v13, v66, v9))
              {
                CFDictionarySetValue(MutableCopy, @"MediaSubType", subtype);
                CFDictionarySetValue(MutableCopy, @"MediaOptions", v9);
                char v14 = 0;
                goto LABEL_28;
              }
            }
            uint64_t v50 = __log_SCNetworkConfiguration();
            uint64_t v51 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v50, (os_log_type_t)v51))
            {
              uint64_t v52 = _os_log_pack_size();
              v63[1] = (uint64_t)v63;
              uint64_t v60 = MEMORY[0x1F4188790](v52, v53, v54, v55, v56, v57, v58, v59);
              v63[0] = (uint64_t)v50;
              uint64_t v61 = (char *)v63 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v62 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v62 = 138412290;
              *(void *)(v62 + 4) = subtype;
              __SC_log_send(6, v63[0], v51, v61);
            }
            _SCErrorSet(1002);
          }
          else
          {
            uint64_t v38 = __log_SCNetworkConfiguration();
            uint64_t v39 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v38, (os_log_type_t)v39))
            {
              uint64_t v40 = _os_log_pack_size();
              uint64_t v48 = (char *)v63
                  - ((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(6, (uint64_t)v38, v39, v48);
            }
            _SCErrorSet(1002);
            CFArrayRef v13 = 0;
          }
          goto LABEL_27;
        }
        _SCErrorSet(1002);
      }
      else
      {
        uint64_t v27 = __log_SCNetworkConfiguration();
        uint64_t v28 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v27, (os_log_type_t)v28))
        {
          uint64_t v29 = _os_log_pack_size();
          uint64_t v37 = (char *)v63
              - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v27, v28, v37);
          char v14 = 1;
          CFArrayRef v13 = 0;
          CFArrayRef v11 = 0;
          goto LABEL_28;
        }
      }
      CFArrayRef v13 = 0;
      CFArrayRef v11 = 0;
LABEL_27:
      char v14 = 1;
LABEL_28:
      if (available[0]) {
        CFRelease(available[0]);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v13) {
        CFRelease(v13);
      }
      if (options)
      {
        if (v14) {
          goto LABEL_38;
        }
      }
      else
      {
        CFRelease(v9);
        if (v14) {
          goto LABEL_38;
        }
      }
LABEL_43:
      Boolean v15 = SCNetworkInterfaceSetConfiguration(interface, MutableCopy);
      if (!MutableCopy) {
        return v15;
      }
      goto LABEL_39;
    }
  }
  if (!options)
  {
    CFDictionaryRemoveValue(MutableCopy, @"MediaSubType");
    CFDictionaryRemoveValue(MutableCopy, @"MediaOptions");
    if (!CFDictionaryGetCount(MutableCopy))
    {
      CFRelease(MutableCopy);
      CFMutableStringRef MutableCopy = 0;
    }
    goto LABEL_43;
  }
  uint64_t v16 = __log_SCNetworkConfiguration();
  uint64_t v17 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
  {
    uint64_t v18 = _os_log_pack_size();
    uint64_t v26 = (char *)v63 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v16, v17, v26);
  }
  _SCErrorSet(1002);
LABEL_38:
  Boolean v15 = 0;
  if (MutableCopy) {
LABEL_39:
  }
    CFRelease(MutableCopy);
  return v15;
}

Boolean SCNetworkInterfaceSetMTU(SCNetworkInterfaceRef interface, int mtu)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int valuePtr = mtu;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface || CFGetTypeID(interface) != TypeID)
  {
    _SCErrorSet(1002);
    return 0;
  }
  *(void *)mtu_max = 0;
  if (!SCNetworkInterfaceCopyMTU(interface, 0, mtu_max, &mtu_max[1]))
  {
    CFArrayRef v9 = __log_SCNetworkConfiguration();
    uint64_t v10 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v19 = &v32[-((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v19);
    }
    return 0;
  }
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(interface);
  if (Configuration)
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
    CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
  }
  else
  {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (mtu_max[0] <= mtu && mtu_max[1] >= mtu)
  {
    CFNumberRef v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(MutableCopy, @"MTU", v20);
    goto LABEL_15;
  }
  if (!mtu)
  {
    CFDictionaryRemoveValue(MutableCopy, @"MTU");
    if (CFDictionaryGetCount(MutableCopy))
    {
LABEL_16:
      Boolean v7 = SCNetworkInterfaceSetConfiguration(interface, MutableCopy);
      if (!MutableCopy) {
        return v7;
      }
      goto LABEL_22;
    }
    CFNumberRef v20 = MutableCopy;
    CFMutableStringRef MutableCopy = 0;
LABEL_15:
    CFRelease(v20);
    goto LABEL_16;
  }
  uint64_t v21 = __log_SCNetworkConfiguration();
  uint64_t v22 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
  {
    uint64_t v23 = _os_log_pack_size();
    uint64_t v31 = &v32[-((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v21, v22, v31);
  }
  _SCErrorSet(1002);
  Boolean v7 = 0;
  if (MutableCopy) {
LABEL_22:
  }
    CFRelease(MutableCopy);
  return v7;
}

CFStringRef SCPreferencesPathKeyCreate(const __CFAllocator *a1, CFStringRef format, ...)
{
  va_start(va, format);
  return CFStringCreateWithFormatAndArguments(a1, 0, format, va);
}

CFStringRef SCPreferencesPathKeyCreateNetworkServices(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@", @"NetworkServices");
}

CFStringRef SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Interface", a3, a4);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@", @"Sets", a2, @"Network", @"Interface", a3);
  }
}

CFStringRef SCPreferencesPathKeyCreateCategories(const __CFAllocator *a1)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@", @"Categories");
}

CFStringRef SCPreferencesPathKeyCreateCategory(const __CFAllocator *a1, uint64_t a2)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@/%@", @"Categories", a2);
}

CFStringRef SCPreferencesPathKeyCreateCategoryService(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a4) {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@", @"Categories", a2, a3, @"Service", a4, v6);
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@", @"Categories", a2, a3, @"Service", v5, v6);
  }
}

CFStringRef SCPreferencesPathKeyCreateCategoryServiceEntity(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CFStringCreateWithFormat(a1, 0, @"/%@/%@/%@/%@/%@/%@", @"Categories", a2, a3, @"Service", a4, a5);
}

os_log_t __log_SCNetworkConfiguration()
{
  os_log_t result = (os_log_t)__log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)result;
  }
  return result;
}

void __SCNetworkConfigurationReport(int a1, const char *a2, const __SCPreferences *a3, SCPreferencesRef prefs)
{
  logConfiguration_NetworkInterfaces(a1, a2, prefs);

  logConfiguration_preferences(a1, a2, a3);
}

void logConfiguration_NetworkInterfaces(int a1, const char *a2, SCPreferencesRef prefs)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  CFArrayRef Value = (const __CFArray *)SCPreferencesGetValue(prefs, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    uint64_t v8 = (__CFString *)SCPreferencesGetValue(prefs, @"Model");
    CFIndex Count = CFArrayGetCount(Value);
    uint64_t v10 = __log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      uint64_t v10 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v10;
    }
    uint64_t v11 = _SC_syslog_os_log_mapping(a1);
    if (__SC_log_enabled(a1, v10, (os_log_type_t)v11))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v54 = (__CFString *)&v50;
      uint64_t v21 = (char *)&v50 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      if (a2) {
        uint64_t v23 = a2;
      }
      else {
        uint64_t v23 = "";
      }
      uint64_t v24 = " ";
      if (!a2) {
        uint64_t v24 = "";
      }
      *(_DWORD *)uint64_t v22 = 136315650;
      *(void *)(v22 + 4) = v23;
      if (v8) {
        uint64_t v25 = v8;
      }
      else {
        uint64_t v25 = @"No model";
      }
      *(_WORD *)(v22 + 12) = 2080;
      *(void *)(v22 + 14) = v24;
      *(_WORD *)(v22 + 22) = 2112;
      *(void *)(v22 + 24) = v25;
      __SC_log_send(a1, (uint64_t)v10, v11, v21);
    }
    if (Count >= 1)
    {
      CFIndex v26 = 0;
      *(void *)&long long v12 = 138413058;
      long long v50 = v12;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v26);
        CFTypeID v28 = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == v28)
          {
            uint64_t v29 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
            CFTypeID v30 = CFStringGetTypeID();
            if (v29)
            {
              if (CFGetTypeID(v29) == v30)
              {
                CFBooleanRef v31 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"IOBuiltin");
                if (v31) {
                  BOOL v32 = CFBooleanGetValue(v31) != 0;
                }
                else {
                  BOOL v32 = 0;
                }
                if (CFDictionaryContainsKey(ValueAtIndex, @"HiddenConfiguration")) {
                  BOOL v33 = 1;
                }
                else {
                  BOOL v33 = CFDictionaryContainsKey(ValueAtIndex, @"HiddenInterface") != 0;
                }
                BOOL v53 = v33;
                CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo");
                uint64_t v54 = (__CFString *)CFDictionaryGetValue(v34, @"UserDefinedName");
                uint64_t v35 = __log_SCNetworkConfiguration_log;
                if (!__log_SCNetworkConfiguration_log)
                {
                  uint64_t v35 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
                  __log_SCNetworkConfiguration_log = (uint64_t)v35;
                }
                uint64_t v36 = _SC_syslog_os_log_mapping(a1);
                if (__SC_log_enabled(a1, v35, (os_log_type_t)v36))
                {
                  uint64_t v37 = _os_log_pack_size();
                  BOOL v51 = v32;
                  uint64_t v52 = &v50;
                  uint64_t v45 = (char *)&v50
                      - ((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  uint64_t v46 = _os_log_pack_fill();
                  uint64_t v47 = @"???";
                  if (v54) {
                    uint64_t v47 = v54;
                  }
                  *(_DWORD *)uint64_t v46 = v50;
                  *(void *)(v46 + 4) = v29;
                  uint64_t v48 = "";
                  uint64_t v49 = ", built-in";
                  if (!v51) {
                    uint64_t v49 = "";
                  }
                  *(_WORD *)(v46 + 12) = 2112;
                  if (v53) {
                    uint64_t v48 = ", hidden";
                  }
                  *(void *)(v46 + 14) = v47;
                  *(_WORD *)(v46 + 22) = 2080;
                  *(void *)(v46 + 24) = v49;
                  *(_WORD *)(v46 + 32) = 2080;
                  *(void *)(v46 + 34) = v48;
                  __SC_log_send(a1, (uint64_t)v35, v36, v45);
                }
              }
            }
          }
        }
        ++v26;
      }
      while (Count != v26);
    }
  }
}

void logConfiguration_preferences(int a1, const char *a2, SCPreferencesRef prefs)
{
  uint64_t v244 = *MEMORY[0x1E4F143B8];
  uint64_t v223 = prefs;
  CFArrayRef Value = (__CFString *)SCPreferencesGetValue(prefs, @"Model");
  uint64_t v6 = __log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    uint64_t v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)v6;
  }
  uint64_t v7 = _SC_syslog_os_log_mapping(a1);
  if (__SC_log_enabled(a1, v6, (os_log_type_t)v7))
  {
    uint64_t v8 = _os_log_pack_size();
    uint64_t v16 = (char *)&v223 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    if (a2) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = "";
    }
    uint64_t v19 = " ";
    if (!a2) {
      uint64_t v19 = "";
    }
    *(_DWORD *)uint64_t v17 = 136315650;
    *(void *)(v17 + 4) = v18;
    if (Value) {
      uint64_t v20 = Value;
    }
    else {
      uint64_t v20 = @"No model";
    }
    *(_WORD *)(v17 + 12) = 2080;
    *(void *)(v17 + 14) = v19;
    *(_WORD *)(v17 + 22) = 2112;
    *(void *)(v17 + 24) = v20;
    __SC_log_send(a1, (uint64_t)v6, v7, v16);
  }
  int v243 = a1;
  CFArrayRef v21 = SCNetworkServiceCopyAll(v223);
  if (v21)
  {
    CFArrayRef v22 = v21;
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v21);
    CFArrayRef v24 = v22;
    CFArrayRef Mutable = MutableCopy;
    CFRelease(v24);
  }
  else
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  int v26 = v243;
  CFArrayRef v27 = SCNetworkSetCopyAll(v223);
  CFArrayRef v237 = Mutable;
  if (v27)
  {
    CFArrayRef v28 = v27;
    SCNetworkSetRef v226 = SCNetworkSetCopyCurrent(v223);
    CFIndex Count = CFArrayGetCount(v28);
    if (Count < 1) {
      goto LABEL_103;
    }
    CFIndex v30 = 0;
    *(void *)&long long v29 = 138412802;
    long long v225 = v29;
    CFArrayRef v224 = v28;
    while (1)
    {
      CFIndex v228 = v30;
      CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v28, v30);
      BOOL v32 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        BOOL v32 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v32;
      }
      uint64_t v33 = _SC_syslog_os_log_mapping(v26);
      if (__SC_log_enabled(v26, v32, (os_log_type_t)v33))
      {
        uint64_t v34 = _os_log_pack_size();
        uint64_t v42 = (char *)&v223
            - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v43 = _os_log_pack_fill();
        CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
        CFStringRef Name = SCNetworkSetGetName(ValueAtIndex);
        if (ValueAtIndex == v226)
        {
          uint64_t v47 = ", current";
        }
        else if (!v226 || !ValueAtIndex || (int v46 = CFEqual(ValueAtIndex, v226), v47 = ", current", !v46))
        {
          uint64_t v47 = "";
        }
        *(_DWORD *)uint64_t v43 = v225;
        *(void *)(v43 + 4) = SetID;
        *(_WORD *)(v43 + 12) = 2112;
        *(void *)(v43 + 14) = Name;
        *(_WORD *)(v43 + 22) = 2080;
        *(void *)(v43 + 24) = v47;
        int v26 = v243;
        __SC_log_send(v243, (uint64_t)v32, v33, v42);
      }
      CFArrayRef v48 = SCNetworkSetCopyServices(ValueAtIndex);
      if (!v48) {
        goto LABEL_102;
      }
      CFArrayRef v49 = v48;
      CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
      CFArrayRef v51 = ServiceOrder;
      if (ServiceOrder) {
        CFIndex v231 = CFArrayGetCount(ServiceOrder);
      }
      else {
        CFIndex v231 = 0;
      }
      CFIndex v52 = CFArrayGetCount(v49);
      CFIndex v53 = v52;
      if (v52 < 2)
      {
        if (v52 != 1) {
          goto LABEL_101;
        }
      }
      else
      {
        CFArrayRef v54 = CFArrayCreateMutableCopy(0, 0, v49);
        v245.CFIndex length = CFArrayGetCount(v54);
        v245.CFIndex location = 0;
        CFArraySortValues(v54, v245, (CFComparatorFunction)_SCNetworkServiceCompare, v51);
        CFRelease(v49);
        CFArrayRef v49 = v54;
      }
      CFIndex v55 = 0;
      CFArrayRef v56 = v237;
      CFArrayRef v230 = v49;
      CFIndex v238 = v53;
      CFArrayRef v239 = v51;
      do
      {
        uint64_t v57 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v49, v55);
        CFStringRef ServiceID = SCNetworkServiceGetServiceID(v57);
        CFStringRef v59 = SCNetworkServiceGetName(v57);
        if (v59) {
          uint64_t v60 = (__CFString *)v59;
        }
        else {
          uint64_t v60 = &stru_1EDD23408;
        }
        Interface = SCNetworkServiceGetInterface(v57);
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        UserDefinedCFStringRef Name = (__CFString *)__SCNetworkInterfaceGetUserDefinedName(Interface);
        *(void *)&long long v241 = v60;
        if (v60 == UserDefinedName || (uint64_t v64 = UserDefinedName) != 0 && CFEqual(v60, UserDefinedName)) {
          uint64_t v64 = 0;
        }
        CFIndex v242 = (CFIndex)ServiceID;
        if (!v51
          || (v246.CFIndex location = 0,
              v246.CFIndex length = v231,
              FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v51, v246, ServiceID),
              FirstIndexOfValue == -1))
        {
          uint64_t v90 = __log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v90 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v90;
          }
          int v91 = v243;
          uint64_t v92 = _SC_syslog_os_log_mapping(v243);
          if (__SC_log_enabled(v91, v90, (os_log_type_t)v92))
          {
            uint64_t v93 = _os_log_pack_size();
            stat v240 = &v223;
            uint64_t v77 = (char *)&v223
                - ((MEMORY[0x1F4188790](v93, v94, v95, v96, v97, v98, v99, v100) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v236 = _os_log_pack_fill();
            LODWORD(v235) = __SCNetworkInterfaceOrder(Interface);
            if (BSDName) {
              uint64_t v101 = ", ";
            }
            else {
              uint64_t v101 = "";
            }
            if (BSDName) {
              uint64_t v102 = (__CFString *)BSDName;
            }
            else {
              uint64_t v102 = &stru_1EDD23408;
            }
            uint64_t v233 = v102;
            uint64_t v234 = v101;
            uint64_t v103 = " : ";
            if (!v64) {
              uint64_t v103 = "";
            }
            uint64_t v232 = v103;
            if (!v64) {
              uint64_t v64 = &stru_1EDD23408;
            }
            if (SCNetworkInterfaceGetDisablePrivateRelay((const __SCPreferences **)Interface)) {
              uint64_t v104 = ", no-private-relay";
            }
            else {
              uint64_t v104 = "";
            }
            if (SCNetworkInterfaceGetDisableUntilNeeded((const __SCPreferences **)Interface)) {
              uint64_t v105 = ", disable-until-needed";
            }
            else {
              uint64_t v105 = "";
            }
            if (_SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)Interface)) {
              uint64_t v106 = ", hidden";
            }
            else {
              uint64_t v106 = "";
            }
            int Enabled = SCNetworkServiceGetEnabled(v57);
            uint64_t v108 = ", disabled";
            if (Enabled) {
              uint64_t v108 = "";
            }
            __os_log_helper_1_2_11_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32(v236, v242, v235, v241, (uint64_t)v234, (uint64_t)v233, (uint64_t)v232, (uint64_t)v64, (uint64_t)v104, (uint64_t)v105, (uint64_t)v106, (uint64_t)v108);
            int v87 = v243;
            uint64_t v88 = (uint64_t)v90;
            uint64_t v89 = v92;
            goto LABEL_96;
          }
        }
        else
        {
          CFIndex v66 = FirstIndexOfValue;
          uint64_t v67 = __log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v67 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v67;
          }
          int v68 = v243;
          LODWORD(v236) = _SC_syslog_os_log_mapping(v243);
          if (__SC_log_enabled(v68, v67, (os_log_type_t)v236))
          {
            uint64_t v69 = _os_log_pack_size();
            stat v240 = &v223;
            uint64_t v77 = (char *)&v223
                - ((MEMORY[0x1F4188790](v69, v70, v71, v72, v73, v74, v75, v76) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v78 = _os_log_pack_fill();
            uint64_t v234 = (const char *)(v66 + 1);
            uint64_t v235 = v78;
            LODWORD(v233) = __SCNetworkInterfaceOrder(Interface);
            uint64_t v79 = ", ";
            if (!BSDName) {
              uint64_t v79 = "";
            }
            uint64_t v232 = v79;
            if (BSDName) {
              uint64_t v80 = (__CFString *)BSDName;
            }
            else {
              uint64_t v80 = &stru_1EDD23408;
            }
            uint64_t v229 = v80;
            if (v64) {
              uint64_t v81 = " : ";
            }
            else {
              uint64_t v81 = "";
            }
            if (!v64) {
              uint64_t v64 = &stru_1EDD23408;
            }
            if (SCNetworkInterfaceGetDisablePrivateRelay((const __SCPreferences **)Interface)) {
              uint64_t v82 = ", no-private-relay";
            }
            else {
              uint64_t v82 = "";
            }
            if (SCNetworkInterfaceGetDisableUntilNeeded((const __SCPreferences **)Interface)) {
              CFStringRef v83 = ", disable-until-needed";
            }
            else {
              CFStringRef v83 = "";
            }
            if (_SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)Interface)) {
              uint64_t v84 = ", hidden";
            }
            else {
              uint64_t v84 = "";
            }
            int v85 = SCNetworkServiceGetEnabled(v57);
            CFArrayRef v86 = ", disabled";
            if (v85) {
              CFArrayRef v86 = "";
            }
            __os_log_helper_1_2_12_8_0_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32(v235, (uint64_t)v234, v242, (int)v233, v241, (uint64_t)v232, (uint64_t)v229, (uint64_t)v81, (uint64_t)v64, (uint64_t)v82, (uint64_t)v83, (uint64_t)v84, (uint64_t)v86);
            int v87 = v243;
            uint64_t v88 = (uint64_t)v67;
            uint64_t v89 = v236;
LABEL_96:
            __SC_log_send(v87, v88, v89, v77);
            CFArrayRef v56 = v237;
            CFArrayRef v49 = v230;
          }
        }
        v247.CFIndex length = CFArrayGetCount(v56);
        v247.CFIndex location = 0;
        CFIndex v109 = CFArrayGetFirstIndexOfValue(v56, v247, v57);
        if (v109 != -1) {
          CFArrayRemoveValueAtIndex(v56, v109);
        }
        ++v55;
        CFArrayRef v51 = v239;
      }
      while (v238 != v55);
      CFArrayRef v28 = v224;
      int v26 = v243;
LABEL_101:
      CFRelease(v49);
LABEL_102:
      CFIndex v30 = v228 + 1;
      if (v228 + 1 == Count)
      {
LABEL_103:
        CFRelease(v28);
        CFArrayRef Mutable = v237;
        if (v226) {
          CFRelease(v226);
        }
        break;
      }
    }
  }
  CFIndex v242 = CFArrayGetCount(Mutable);
  if (v242 >= 1)
  {
    tm v110 = __log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      tm v110 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v110;
    }
    uint64_t v111 = _SC_syslog_os_log_mapping(v26);
    if (__SC_log_enabled(v26, v110, (os_log_type_t)v111))
    {
      uint64_t v113 = _os_log_pack_size();
      uint64_t v121 = (char *)&v223
           - ((MEMORY[0x1F4188790](v113, v114, v115, v116, v117, v118, v119, v120) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(v26, (uint64_t)v110, v111, v121);
    }
    CFIndex v122 = 0;
    *(void *)&long long v112 = 138413314;
    long long v241 = v112;
    do
    {
      uint64_t v123 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v237, v122);
      CFStringRef v124 = SCNetworkServiceGetServiceID(v123);
      CFStringRef v125 = SCNetworkServiceGetName(v123);
      uint64_t v126 = SCNetworkServiceGetInterface(v123);
      CFStringRef v127 = SCNetworkInterfaceGetBSDName(v126);
      uint64_t v128 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v128 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v128;
      }
      uint64_t v129 = _SC_syslog_os_log_mapping(v26);
      if (__SC_log_enabled(v26, v128, (os_log_type_t)v129))
      {
        if (v125) {
          uint64_t v130 = (__CFString *)v125;
        }
        else {
          uint64_t v130 = &stru_1EDD23408;
        }
        uint64_t v131 = _os_log_pack_size();
        uint64_t v139 = (char *)&v223
             - ((MEMORY[0x1F4188790](v131, v132, v133, v134, v135, v136, v137, v138) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v140 = _os_log_pack_fill();
        SCNetworkInterfaceRef v141 = SCNetworkServiceGetInterface(v123);
        int v142 = __SCNetworkInterfaceOrder(v141);
        *(_DWORD *)uint64_t v140 = v241;
        uint64_t v143 = "";
        if (v127) {
          uint64_t v143 = ", ";
        }
        *(void *)(v140 + 4) = v124;
        uint64_t v144 = &stru_1EDD23408;
        if (v127) {
          uint64_t v144 = (__CFString *)v127;
        }
        *(_WORD *)(v140 + 12) = 1024;
        *(_DWORD *)(v140 + 14) = v142;
        *(_WORD *)(v140 + 18) = 2112;
        *(void *)(v140 + 20) = v130;
        int v26 = v243;
        *(_WORD *)(v140 + 28) = 2080;
        *(void *)(v140 + 30) = v143;
        *(_WORD *)(v140 + 38) = 2112;
        *(void *)(v140 + 40) = v144;
        __SC_log_send(v26, (uint64_t)v128, v129, v139);
      }
      ++v122;
    }
    while (v242 != v122);
  }
  CFRelease(v237);
  CFArrayRef v145 = (const __CFArray *)SCBridgeInterfaceCopyAll(v223);
  if (v145)
  {
    CFArrayRef v146 = v145;
    CFIndex v242 = CFArrayGetCount(v145);
    if (v242 >= 1)
    {
      uint64_t v147 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v147 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v147;
      }
      uint64_t v148 = _SC_syslog_os_log_mapping(v26);
      if (__SC_log_enabled(v26, v147, (os_log_type_t)v148))
      {
        uint64_t v150 = _os_log_pack_size();
        int v158 = (char *)&v223
             - ((MEMORY[0x1F4188790](v150, v151, v152, v153, v154, v155, v156, v157) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(v243, (uint64_t)v147, v148, v158);
        int v26 = v243;
      }
      CFIndex v159 = 0;
      *(void *)&long long v149 = 138412290;
      long long v241 = v149;
      do
      {
        CFIndex v160 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v146, v159);
        CFStringRef v161 = SCNetworkInterfaceGetBSDName(v160);
        if (v161)
        {
          CFStringRef v162 = v161;
          CFDictionaryRef v163 = CFStringCreateMutable(0, 0);
          CFStringAppendFormat(v163, 0, @"%@: ", v162);
          CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v160);
          if (MemberInterfaces)
          {
            CFArrayRef v165 = MemberInterfaces;
            CFIndex v166 = CFArrayGetCount(MemberInterfaces);
            if (v166 >= 1)
            {
              CFIndex v167 = v166;
              for (CFIndex i = 0; i != v167; ++i)
              {
                v169 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v165, i);
                CFStringRef v170 = SCNetworkInterfaceGetBSDName(v169);
                if (v170) {
                  uint64_t v171 = (__CFString *)v170;
                }
                else {
                  uint64_t v171 = @"?";
                }
                if (i) {
                  uint64_t v172 = ", ";
                }
                else {
                  uint64_t v172 = "";
                }
                CFStringAppendFormat(v163, 0, @"%s%@", v172, v171);
              }
            }
          }
          uint64_t v173 = __log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v173 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v173;
          }
          int v26 = v243;
          uint64_t v174 = _SC_syslog_os_log_mapping(v243);
          if (__SC_log_enabled(v26, v173, (os_log_type_t)v174))
          {
            uint64_t v175 = _os_log_pack_size();
            uint64_t v183 = (char *)&v223
                 - ((MEMORY[0x1F4188790](v175, v176, v177, v178, v179, v180, v181, v182) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            int v26 = v243;
            uint64_t v184 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v184 = v241;
            *(void *)(v184 + 4) = v163;
            __SC_log_send(v26, (uint64_t)v173, v174, v183);
          }
          CFRelease(v163);
        }
        ++v159;
      }
      while (v159 != v242);
    }
    CFRelease(v146);
  }
  CFArrayRef v185 = SCVLANInterfaceCopyAll(v223);
  if (v185)
  {
    CFArrayRef v186 = v185;
    CFIndex v187 = CFArrayGetCount(v185);
    if (v187 >= 1)
    {
      CFIndex v188 = v187;
      uint64_t v189 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v189 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v189;
      }
      uint64_t v190 = _SC_syslog_os_log_mapping(v26);
      if (__SC_log_enabled(v26, v189, (os_log_type_t)v190))
      {
        uint64_t v192 = _os_log_pack_size();
        uint64_t v200 = (char *)&v223
             - ((MEMORY[0x1F4188790](v192, v193, v194, v195, v196, v197, v198, v199) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(v243, (uint64_t)v189, v190, v200);
        int v26 = v243;
      }
      CFIndex v201 = 0;
      *(void *)&long long v191 = 138412802;
      long long v241 = v191;
      CFIndex v242 = (CFIndex)v186;
      do
      {
        uint64_t v202 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v186, v201);
        CFStringRef v203 = SCNetworkInterfaceGetBSDName(v202);
        if (v203)
        {
          CFStringRef v204 = v203;
          SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v202);
          if (PhysicalInterface) {
            CFStringRef v206 = SCNetworkInterfaceGetBSDName(PhysicalInterface);
          }
          else {
            CFStringRef v206 = 0;
          }
          CFNumberRef Tag = SCVLANInterfaceGetTag(v202);
          uint64_t v208 = __log_SCNetworkConfiguration_log;
          if (!__log_SCNetworkConfiguration_log)
          {
            uint64_t v208 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
            __log_SCNetworkConfiguration_log = (uint64_t)v208;
          }
          uint64_t v209 = _SC_syslog_os_log_mapping(v26);
          if (__SC_log_enabled(v26, v208, (os_log_type_t)v209))
          {
            uint64_t v210 = _os_log_pack_size();
            uint64_t v218 = (char *)&v223
                 - ((MEMORY[0x1F4188790](v210, v211, v212, v213, v214, v215, v216, v217) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v219 = _os_log_pack_fill();
            uint64_t v220 = @"?";
            if (v206) {
              uint64_t v221 = (__CFString *)v206;
            }
            else {
              uint64_t v221 = @"?";
            }
            *(_DWORD *)uint64_t v219 = v241;
            *(void *)(v219 + 4) = v204;
            if (Tag) {
              uint64_t v220 = (__CFString *)Tag;
            }
            *(_WORD *)(v219 + 12) = 2112;
            *(void *)(v219 + 14) = v221;
            *(_WORD *)(v219 + 22) = 2112;
            *(void *)(v219 + 24) = v220;
            BOOL v222 = v218;
            int v26 = v243;
            __SC_log_send(v243, (uint64_t)v208, v209, v222);
            CFArrayRef v186 = (const __CFArray *)v242;
          }
        }
        ++v201;
      }
      while (v188 != v201);
    }
    CFRelease(v186);
  }
}

CFDictionaryRef __SCNetworkConfigurationGetValue(const __SCPreferences *a1, const __CFString *a2)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID) {
      return 0;
    }
    CFIndex Count = CFDictionaryGetCount(Value);
    if (!Count || Count == 1 && CFDictionaryContainsKey(Value, @"__INACTIVE__")) {
      return 0;
    }
  }
  return Value;
}

uint64_t __SCNetworkConfigurationSetValue(SCPreferencesRef prefs, CFStringRef path, const void *a3, int a4)
{
  if (a3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(a3) != TypeID)
    {
      _SCErrorSet(1002);
      return 0;
    }
  }
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, path);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) != v10) {
    CFDictionaryRef Value = 0;
  }
  if (!a3)
  {
    if (!a4)
    {
      if (!Value) {
        return 1;
      }
      goto LABEL_29;
    }
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_12;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a3);
  if (a4)
  {
LABEL_12:
    CFTypeID v13 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v13 && CFDictionaryContainsKey(Value, @"__INACTIVE__")) {
      CFDictionarySetValue(Mutable, @"__INACTIVE__", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    else {
      CFDictionaryRemoveValue(Mutable, @"__INACTIVE__");
    }
  }
  if (Value == Mutable)
  {
    if (!Value) {
      return 1;
    }
LABEL_23:
    CFRelease(Mutable);
    return 1;
  }
  if (Value && Mutable)
  {
    if (!CFEqual(Value, Mutable)) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (Mutable)
  {
LABEL_27:
    uint64_t v14 = SCPreferencesPathSetValue(prefs, path, Mutable);
    CFRelease(Mutable);
    return v14;
  }
LABEL_29:
  uint64_t result = SCPreferencesPathRemoveValue(prefs, path);
  if (!result) {
    return SCError() == 1004;
  }
  return result;
}

uint64_t __setPrefsEnabled(const __SCPreferences *a1, const __CFString *a2, int a3)
{
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, a2);
  if (Value)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(Value) != TypeID)
    {
      _SCErrorSet(1001);
      return 0;
    }
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    CFMutableDictionaryRef Mutable = MutableCopy;
    if (a3) {
      CFDictionaryRemoveValue(MutableCopy, @"__INACTIVE__");
    }
    else {
      CFDictionarySetValue(MutableCopy, @"__INACTIVE__", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (Value == Mutable) {
      goto LABEL_13;
    }
    if (Mutable)
    {
      if (CFEqual(Value, Mutable))
      {
LABEL_13:
        CFRelease(Mutable);
        return 1;
      }
LABEL_17:
      uint64_t v11 = SCPreferencesPathSetValue(a1, a2, Mutable);
      CFRelease(Mutable);
      return v11;
    }
  }
  else
  {
    if (a3) {
      return 1;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"__INACTIVE__", (const void *)*MEMORY[0x1E4F1CFD0]);
    if (!Mutable) {
      return 1;
    }
  }
  if (Mutable) {
    goto LABEL_17;
  }
  uint64_t result = SCPreferencesPathRemoveValue(a1, a2);
  if (!result) {
    return SCError() == 1004;
  }
  return result;
}

const void *__copyInterfaceTemplate(const void *a1, const __CFString *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)__copyTemplates();
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    CFDictionaryRef Value = CFDictionaryGetValue(v4, @"Interface");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID) {
      goto LABEL_14;
    }
    if (a2)
    {
      CFIndex location = CFStringFind(a2, @".", 0).location;
      uint64_t v9 = @"*";
      if (location == -1) {
        uint64_t v9 = (__CFString *)a2;
      }
      CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"%@-%@", a1, v9);
      uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)Value, v10);
      CFRelease(v10);
    }
    else
    {
      uint64_t v11 = CFDictionaryGetValue((CFDictionaryRef)Value, a1);
    }
    CFTypeID v12 = CFDictionaryGetTypeID();
    if (!v11) {
      goto LABEL_15;
    }
    if (CFGetTypeID(v11) == v12 && CFDictionaryGetCount((CFDictionaryRef)v11) >= 1) {
      CFRetain(v11);
    }
    else {
LABEL_14:
    }
      uint64_t v11 = 0;
LABEL_15:
    CFRelease(v5);
    return v11;
  }
  return 0;
}

CFPropertyListRef __copyTemplates()
{
  v29[1] = *MEMORY[0x1E4F143B8];
  int v0 = (__CFBundle *)_SC_CFBundleGet();
  if (!v0) {
    return 0;
  }
  CFURLRef v1 = CFBundleCopyResourceURL(v0, @"NetworkConfiguration", @"plist", 0);
  if (!v1)
  {
    int v2 = __log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      int v2 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v2;
    }
    uint64_t v3 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v2, (os_log_type_t)v3))
    {
      uint64_t v4 = _os_log_pack_size();
      CFTypeID v12 = (char *)v29 - ((MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = "NetworkConfiguration.plist";
      __SC_log_send(3, (uint64_t)v2, v3, v12);
    }
    CFURLRef v1 = CFURLCreateWithFileSystemPath(0, @"/System/Library/Frameworks/SystemConfiguration.framework/NetworkConfiguration.plist", kCFURLPOSIXPathStyle, 1u);
    if (!v1)
    {
      uint64_t v16 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v16 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v16;
      }
      uint64_t v17 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
      {
        uint64_t v18 = _os_log_pack_size();
        int v26 = (char *)v29 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = "/System/Library/Frameworks/SystemConfiguration.framework/NetworkConfiguration.plist";
        __SC_log_send(3, (uint64_t)v16, v17, v26);
      }
      return 0;
    }
  }
  CFPropertyListRef v14 = _SCCreatePropertyListFromResource(v1);
  CFRelease(v1);
  if (v14)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v14) != TypeID)
    {
      CFRelease(v14);
      return 0;
    }
  }
  return v14;
}

const void *__copyProtocolTemplate(const void *a1, const __CFString *a2, const void *a3)
{
  CFDictionaryRef v6 = (const __CFDictionary *)__copyTemplates();
  if (v6)
  {
    CFDictionaryRef v7 = v6;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, @"Protocol");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      if (a2)
      {
        CFIndex location = CFStringFind(a2, @".", 0).location;
        uint64_t v11 = @"*";
        if (location == -1) {
          uint64_t v11 = (__CFString *)a2;
        }
        CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@-%@", a1, v11);
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, v12);
        CFRelease(v12);
      }
      else
      {
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(Value, a1);
      }
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v13)
      {
        if (CFGetTypeID(v13) == v15)
        {
          CFPropertyListRef v14 = CFDictionaryGetValue(v13, a3);
          CFTypeID v16 = CFDictionaryGetTypeID();
          if (!v14)
          {
LABEL_16:
            CFRelease(v7);
            return v14;
          }
          if (CFGetTypeID(v14) == v16)
          {
            CFRetain(v14);
            goto LABEL_16;
          }
        }
      }
    }
    CFPropertyListRef v14 = 0;
    goto LABEL_16;
  }
  return 0;
}

BOOL __createInterface(int a1, const __CFString *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v33, 16, 0x8000100u);
  if (ioctl(a1, 0xC0206978uLL, &v33) == -1)
  {
    CFDictionaryRef v6 = __log_SCNetworkConfiguration_log;
    if (!__log_SCNetworkConfiguration_log)
    {
      CFDictionaryRef v6 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
      __log_SCNetworkConfiguration_log = (uint64_t)v6;
    }
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v6, (os_log_type_t)v7);
    if (result)
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)&v33 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      uint64_t v19 = __error();
      uint64_t v20 = strerror(*v19);
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = a2;
      *(_WORD *)(v18 + 12) = 2080;
      *(void *)(v18 + 14) = v20;
      __SC_log_send(5, (uint64_t)v6, v7, v17);
      return 0;
    }
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
    _SC_cfstring_to_cstring(a2, (UInt8 *)&v33, 16, 0x8000100u);
    if (ioctl(a1, 0xC0206911uLL, &v33) == -1)
    {
      uint64_t v4 = __log_SCNetworkConfiguration_log;
      if (!__log_SCNetworkConfiguration_log)
      {
        uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
        __log_SCNetworkConfiguration_log = (uint64_t)v4;
      }
      uint64_t v5 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v4, (os_log_type_t)v5)) {
        goto LABEL_16;
      }
    }
    else if ((v34 & 1) == 0)
    {
      LOWORD(v34) = v34 | 1;
      if (ioctl(a1, 0x80206910uLL, &v33) == -1)
      {
        uint64_t v4 = __log_SCNetworkConfiguration_log;
        if (!__log_SCNetworkConfiguration_log)
        {
          uint64_t v4 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
          __log_SCNetworkConfiguration_log = (uint64_t)v4;
        }
        uint64_t v5 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
        {
LABEL_16:
          uint64_t v21 = _os_log_pack_size();
          long long v29 = (char *)&v33
              - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v30 = _os_log_pack_fill();
          CFBooleanRef v31 = __error();
          BOOL v32 = strerror(*v31);
          *(_DWORD *)uint64_t v30 = 138412546;
          *(void *)(v30 + 4) = a2;
          *(_WORD *)(v30 + 12) = 2080;
          *(void *)(v30 + 14) = v32;
          __SC_log_send(5, (uint64_t)v4, v5, v29);
          return 1;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL __destroyInterface(int a1, const __CFString *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  _SC_cfstring_to_cstring(a2, (UInt8 *)v19, 16, 0x8000100u);
  if (ioctl(a1, 0x80206979uLL, v19) != -1) {
    return 1;
  }
  uint64_t v5 = __log_SCNetworkConfiguration_log;
  if (!__log_SCNetworkConfiguration_log)
  {
    uint64_t v5 = os_log_create("com.apple.SystemConfiguration", "SCNetworkConfiguration");
    __log_SCNetworkConfiguration_log = (uint64_t)v5;
  }
  uint64_t v6 = _SC_syslog_os_log_mapping(5);
  BOOL result = __SC_log_enabled(5, v5, (os_log_type_t)v6);
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    uint64_t v15 = (char *)v19 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    uint64_t v17 = __error();
    uint64_t v18 = strerror(*v17);
    *(_DWORD *)uint64_t v16 = 138412546;
    *(void *)(v16 + 4) = a2;
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)(v16 + 14) = v18;
    __SC_log_send(5, (uint64_t)v5, v6, v15);
    return 0;
  }
  return result;
}

uint64_t __extract_password(uint64_t a1, CFDictionaryRef theDict, const void *a3, void *key, const void *a5, uint64_t a6, uint64_t *a7)
{
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, key);
    if (Value)
    {
      uint64_t v13 = Value;
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFGetTypeID(v13) != TypeID) {
        return 0;
      }
      uint64_t result = CFEqual(v13, a5);
      int v16 = 0;
      if (!result) {
        return result;
      }
      if (a7) {
        goto LABEL_6;
      }
LABEL_9:
      if (a1) {
        uint64_t result = _SCPreferencesSystemKeychainPasswordItemExists();
      }
      else {
        uint64_t result = _SCSecKeychainPasswordItemExists();
      }
      goto LABEL_14;
    }
  }
  int v16 = 1;
  if (!a7) {
    goto LABEL_9;
  }
LABEL_6:
  if (a1) {
    uint64_t v17 = _SCPreferencesSystemKeychainPasswordItemCopy();
  }
  else {
    uint64_t v17 = _SCSecKeychainPasswordItemCopy();
  }
  *a7 = v17;
  uint64_t result = v17 != 0;
LABEL_14:
  if (result) {
    int v18 = 0;
  }
  else {
    int v18 = v16;
  }
  if (theDict)
  {
    if (v18)
    {
      CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(theDict, a3);
      uint64_t result = (uint64_t)__copy_legacy_password(v19);
      if (result)
      {
        if (a7) {
          *a7 = result;
        }
        else {
          CFRelease((CFTypeRef)result);
        }
        return 1;
      }
    }
  }
  return result;
}

CFDataRef __copy_legacy_password(const __CFData *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (CFGetTypeID(a1) == TypeID)
  {
    CFIndex Length = CFDataGetLength(a1);
    if ((Length & 1) == 0)
    {
      if (*CFDataGetBytePtr(a1)) {
        CFStringEncoding v4 = 335544576;
      }
      else {
        CFStringEncoding v4 = 268435712;
      }
      BytePtr = CFDataGetBytePtr(a1);
      CFStringRef v6 = CFStringCreateWithBytes(0, BytePtr, Length, v4, 0);
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, v6, 0x8000100u, 0);
      CFRelease(v6);
      return ExternalRepresentation;
    }
    return 0;
  }
  CFTypeID v9 = CFStringGetTypeID();
  if (CFGetTypeID(a1) != v9 || CFStringGetLength((CFStringRef)a1) < 1) {
    return 0;
  }

  return CFStringCreateExternalRepresentation(0, (CFStringRef)a1, 0x8000100u, 0);
}

uint64_t __remove_password(uint64_t a1, CFDictionaryRef theDict, const void *a3, void *key, const void *a5, uint64_t a6, __CFDictionary **a7)
{
  if (theDict && (CFDictionaryRef Value = CFDictionaryGetValue(theDict, key)) != 0)
  {
    uint64_t v14 = Value;
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(v14) != TypeID || (int v16 = CFEqual(v14, a5), v17 = 0, !v16))
    {
LABEL_16:
      uint64_t v19 = 0;
      goto LABEL_17;
    }
    if (a1) {
      goto LABEL_6;
    }
  }
  else
  {
    int v17 = 1;
    if (a1)
    {
LABEL_6:
      uint64_t v18 = _SCPreferencesSystemKeychainPasswordItemRemove();
      goto LABEL_9;
    }
  }
  uint64_t v18 = _SCSecKeychainPasswordItemRemove();
LABEL_9:
  uint64_t v19 = v18;
  if (v18) {
    int v20 = 0;
  }
  else {
    int v20 = v17;
  }
  if (theDict && v20)
  {
    CFDataRef v21 = (const __CFData *)CFDictionaryGetValue(theDict, a3);
    CFDataRef v22 = __copy_legacy_password(v21);
    if (v22)
    {
      CFRelease(v22);
      uint64_t v19 = 1;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_17:
  if (a7)
  {
    CFMutableArrayRef MutableCopy = 0;
    if (theDict && v19)
    {
      CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
      CFDictionaryRemoveValue(MutableCopy, a3);
      CFDictionaryRemoveValue(MutableCopy, key);
    }
    *a7 = MutableCopy;
  }
  return v19;
}

uint64_t __rank_to_str(int a1, __CFString **a2)
{
  int v2 = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_8;
    case 1:
      uint64_t v3 = kSCValNetServicePrimaryRankFirst;
      goto LABEL_7;
    case 2:
      uint64_t v3 = kSCValNetServicePrimaryRankLast;
      goto LABEL_7;
    case 3:
      uint64_t v3 = kSCValNetServicePrimaryRankNever;
      goto LABEL_7;
    case 4:
      uint64_t v3 = kSCValNetServicePrimaryRankScoped;
LABEL_7:
      int v2 = *v3;
LABEL_8:
      *a2 = v2;
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t __str_to_rank(const void *a1, int *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1)
  {
    int v5 = 0;
    goto LABEL_6;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  if (CFEqual(a1, @"First"))
  {
    int v5 = 1;
LABEL_6:
    *a2 = v5;
    return 1;
  }
  if (CFEqual(a1, @"Last"))
  {
    int v5 = 2;
    goto LABEL_6;
  }
  if (CFEqual(a1, @"Never"))
  {
    int v5 = 3;
    goto LABEL_6;
  }
  uint64_t result = CFEqual(a1, @"Scoped");
  if (result)
  {
    int v5 = 4;
    goto LABEL_6;
  }
  return result;
}

uint64_t _SCNetworkConfigurationSetBypassSystemInterfaces(uint64_t a1, int a2)
{
  int v3 = __SCPreferencesGetNetworkConfigurationFlags(a1) & 0xFFFFFFFC | (a2 != 0) | 2;

  return __SCPreferencesSetNetworkConfigurationFlags(a1, v3);
}

double __os_log_helper_1_2_12_8_0_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)&double result = 134220802;
  *(_DWORD *)a1 = 134220802;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 28) = 2112;
  *(void *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 38) = 2080;
  *(void *)(a1 + 40) = a6;
  *(_WORD *)(a1 + 48) = 2112;
  *(void *)(a1 + 50) = a7;
  *(_WORD *)(a1 + 58) = 2080;
  *(void *)(a1 + 60) = a8;
  *(_WORD *)(a1 + 68) = 2112;
  *(void *)(a1 + 70) = a9;
  *(_WORD *)(a1 + 78) = 2080;
  *(void *)(a1 + 80) = a10;
  *(_WORD *)(a1 + 88) = 2080;
  *(void *)(a1 + 90) = a11;
  *(_WORD *)(a1 + 98) = 2080;
  *(void *)(a1 + 100) = a12;
  *(_WORD *)(a1 + 108) = 2080;
  *(void *)(a1 + 110) = a13;
  return result;
}

double __os_log_helper_1_2_11_8_64_4_0_8_64_8_32_8_64_8_32_8_64_8_32_8_32_8_32_8_32(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)&double result = 138414850;
  *(_DWORD *)a1 = 138414850;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(void *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 28) = 2080;
  *(void *)(a1 + 30) = a5;
  *(_WORD *)(a1 + 38) = 2112;
  *(void *)(a1 + 40) = a6;
  *(_WORD *)(a1 + 48) = 2080;
  *(void *)(a1 + 50) = a7;
  *(_WORD *)(a1 + 58) = 2112;
  *(void *)(a1 + 60) = a8;
  *(_WORD *)(a1 + 68) = 2080;
  *(void *)(a1 + 70) = a9;
  *(_WORD *)(a1 + 78) = 2080;
  *(void *)(a1 + 80) = a10;
  *(_WORD *)(a1 + 88) = 2080;
  *(void *)(a1 + 90) = a11;
  *(_WORD *)(a1 + 98) = 2080;
  *(void *)(a1 + 100) = a12;
  return result;
}

BOOL __SCNetworkInterfaceSupportsVLAN(const __CFString *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  size_t v36 = 0;
  CFURLRef v1 = _SC_cfstring_to_cstring(a1, 0, 0, 0x600u);
  if (!v1) {
    return 0;
  }
  int v2 = v1;
  unsigned int v3 = if_nametoindex((const char *)v1);
  if (!v3)
  {
LABEL_10:
    BOOL v5 = 0;
    CFStringEncoding v4 = v2;
LABEL_17:
    CFAllocatorDeallocate(0, v4);
    return v5;
  }
  *(_OWORD *)uint64_t v37 = xmmword_18E2E84A0;
  int v38 = 3;
  unsigned int v39 = v3;
  if (sysctl(v37, 6u, 0, &v36, 0, 0) == -1)
  {
    CFStringRef v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      int v16 = (char *)&v35 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v19;
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
    goto LABEL_10;
  }
  CFStringEncoding v4 = CFAllocatorAllocate(0, v36, 0);
  if (sysctl(v37, 6u, v4, &v36, 0, 0) != -1)
  {
    BOOL v5 = v4[3] == 14 && (v4[102] & 3) != 0;
    CFAllocatorDeallocate(0, v2);
    goto LABEL_17;
  }
  int v20 = __log_SCNetworkConfiguration();
  uint64_t v21 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    uint64_t v30 = (char *)&v35 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v31 = _os_log_pack_fill();
    BOOL v32 = __error();
    long long v33 = strerror(*v32);
    *(_DWORD *)uint64_t v31 = 136315138;
    *(void *)(v31 + 4) = v33;
    __SC_log_send(5, (uint64_t)v20, v21, v30);
  }
  CFAllocatorDeallocate(0, v2);
  BOOL v5 = 0;
  if (v4) {
    goto LABEL_17;
  }
  return v5;
}

CFDataRef __SCCopyMacAddress(const __CFString *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v20 = 0;
  if (!_SC_cfstring_to_cstring(a1, (UInt8 *)__s1, 16, 0x8000100u)) {
    return 0;
  }
  if (getifaddrs(&v20) == -1)
  {
    CFStringEncoding v4 = __error();
    _SCErrorSet(*v4);
    BOOL v5 = __log_SCNetworkConfiguration();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = &__s1[-((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = __error();
      uint64_t v18 = strerror(*v17);
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = v18;
      __SC_log_send(5, (uint64_t)v5, v6, v15);
    }
    return 0;
  }
  CFURLRef v1 = v20;
  if (v20)
  {
    CFDataRef v2 = (CFDataRef)v20;
    while (1)
    {
      if (!strcmp(__s1, *((const char **)v2 + 1)))
      {
        unsigned int v3 = (unsigned char *)*((void *)v2 + 3);
        if (v3[1] == 18) {
          break;
        }
      }
      CFDataRef v2 = *(CFDataRef *)v2;
      if (!v2) {
        goto LABEL_14;
      }
    }
    CFDataRef v2 = CFDataCreate(0, &v3[v3[5] + 8], v3[6]);
    CFURLRef v1 = v20;
  }
  else
  {
    CFDataRef v2 = 0;
  }
LABEL_14:
  MEMORY[0x192FA7A70](v1);
  return v2;
}

uint64_t _SCBridgeInterfaceCreatePrivate(const __CFAllocator *a1, const __CFString *a2)
{
  uint64_t Private = __SCNetworkInterfaceCreatePrivate((uint64_t)a1, 0, 0, 0);
  uint64_t v5 = Private;
  if (Private)
  {
    *(void *)(Private + 16) = @"Bridge";
    *(void *)(Private + 128) = @"Ethernet";
    CFStringRef Copy = CFStringCreateCopy(a1, a2);
    *(void *)(v5 + 112) = Copy;
    *(void *)(v5 + 160) = __SCCopyMacAddress(Copy);
    *(unsigned char *)(v5 + 176) = 1;
    *(unsigned char *)(v5 + 368) = __SCNetworkInterfaceSupportsVLAN(a2);
    *(_DWORD *)(v5 + 312) = 10;
    *(void *)(v5 + 48) = @"bridge";
    *(void *)(v5 + 56) = CFRetain(*(CFTypeRef *)(v5 + 112));
    *(void *)(v5 + 352) = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
  }
  return v5;
}

uint64_t _SCVLANInterfaceCreatePrivate(const __CFAllocator *a1, const __CFString *a2)
{
  uint64_t Private = __SCNetworkInterfaceCreatePrivate((uint64_t)a1, 0, 0, 0);
  uint64_t v5 = Private;
  if (Private)
  {
    *(void *)(Private + 16) = @"VLAN";
    *(void *)(Private + 128) = @"Ethernet";
    CFStringRef Copy = CFStringCreateCopy(a1, a2);
    *(void *)(v5 + 112) = Copy;
    *(void *)(v5 + 160) = __SCCopyMacAddress(Copy);
    *(unsigned char *)(v5 + 176) = 1;
    *(_DWORD *)(v5 + 312) = 9;
    *(void *)(v5 + 48) = @"vlan";
    *(void *)(v5 + 56) = CFRetain(*(CFTypeRef *)(v5 + 112));
  }
  return v5;
}

uint64_t __SCNetworkInterfaceOrder(unsigned char *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0x7FFFFFFFLL;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0x7FFFFFFFLL;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return (cf[176] == 0) | (2 * *((_DWORD *)cf + 78));
  }
  return 0x7FFFFFFFLL;
}

__CFString *__SCNetworkInterfaceGetDefaultConfigurationType(uint64_t a1)
{
  if (!*(void *)(a1 + 96)) {
    goto LABEL_8;
  }
  uint64_t v2 = 0;
  unsigned int v3 = *(const void **)(a1 + 16);
  for (CFIndex i = &off_1E55BC4C8; !CFEqual(v3, **(i - 1)); i += 5)
  {
    if (++v2 == 19) {
      return *(__CFString **)(a1 + 16);
    }
  }
  if (((0x61200uLL >> v2) & 1) == 0) {
    return **i;
  }
LABEL_8:
  _SCErrorSet(1002);
  return 0;
}

uint64_t findConfiguration(CFTypeRef cf1)
{
  uint64_t v2 = 0;
  for (CFIndex i = (CFTypeRef **)configurations; !CFEqual(cf1, **i); i += 5)
  {
    if (++v2 == 19) {
      return -1;
    }
  }
  return v2;
}

uint64_t __SCNetworkInterfaceIsValidExtendedConfigurationType(const __SCNetworkInterface *a1, const void *a2, int a3)
{
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)a1);
  if (!DefaultConfigurationType || CFEqual(a2, DefaultConfigurationType)) {
    goto LABEL_20;
  }
  uint64_t v7 = 0;
  uint64_t v8 = (const void *)*((void *)a1 + 2);
  uint64_t v9 = (CFTypeRef **)configurations;
  while (!CFEqual(v8, **v9))
  {
    ++v7;
    v9 += 5;
    if (v7 == 19) {
      goto LABEL_20;
    }
  }
  if (CFEqual(a2, @"IPSec"))
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
    if (CFEqual(InterfaceType, @"PPP"))
    {
      Interface = SCNetworkInterfaceGetInterface(a1);
      if (Interface)
      {
        CFStringRef v12 = SCNetworkInterfaceGetInterfaceType(Interface);
        BOOL v13 = CFEqual(v12, @"L2TP") != 0;
        if (!a3) {
          goto LABEL_15;
        }
        goto LABEL_13;
      }
    }
  }
  BOOL v13 = 0;
  if (a3)
  {
LABEL_13:
    if (((0x240ECuLL >> v7) & 1) != 0 || v13) {
      goto LABEL_15;
    }
LABEL_20:
    _SCErrorSet(1002);
    return 0;
  }
LABEL_15:
  uint64_t v14 = 0;
  while (!CFEqual(a2, *configurations[v14]))
  {
    v14 += 5;
    if (v14 == 95) {
      return 1;
    }
  }
  if (!v13) {
    goto LABEL_20;
  }
  return v13;
}

__CFDictionary *__SCNetworkInterfaceCopyInterfaceEntity(SCNetworkInterfaceRef Interface)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned int v3 = Mutable;
  CFStringEncoding v4 = (const void *)*((void *)Interface + 16);
  if (v4) {
    CFDictionarySetValue(Mutable, @"Type", v4);
  }
  uint64_t v5 = (const void *)*((void *)Interface + 17);
  if (v5) {
    CFDictionarySetValue(v3, @"SubType", v5);
  }
  uint64_t v6 = (const void *)*((void *)Interface + 14);
  if (v6) {
    CFDictionarySetValue(v3, @"DeviceName", v6);
  }
  uint64_t v7 = (const void *)*((void *)Interface + 15);
  if (v7) {
    CFDictionarySetValue(v3, @"DeviceUniqueIdentifier", v7);
  }
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
  if (*((unsigned char *)Interface + 192)) {
    CFDictionarySetValue(v3, @"HiddenConfiguration", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (*((unsigned char *)Interface + 240)) {
    CFDictionarySetValue(v3, @"TrustRequired", *v8);
  }
  do
  {
    uint64_t v9 = (const void **)Interface;
    Interface = SCNetworkInterfaceGetInterface(Interface);
  }
  while (Interface);
  if (!CFEqual(v9, &__kSCNetworkInterfaceIPv4))
  {
    uint64_t v10 = 0;
    CFStringRef v12 = v9 + 2;
    uint64_t v11 = v9[2];
    BOOL v13 = (const void ***)&off_1E55BC4C8;
    while (!CFEqual(v11, **(v13 - 1)))
    {
      ++v10;
      v13 += 5;
      if (v10 == 19) {
        goto LABEL_21;
      }
    }
    if ((0x61200uLL >> v10)) {
      goto LABEL_22;
    }
    CFStringRef v12 = *v13;
LABEL_21:
    CFDictionarySetValue(v3, @"Hardware", *v12);
LABEL_22:
    CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)v9);
    CFDictionarySetValue(v3, @"UserDefinedName", LocalizedDisplayName);
  }
  return v3;
}

CFStringRef SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_7;
  }
  CFStringRef result = (CFStringRef)*((void *)interface + 5);
  if (!result)
  {
    CFStringRef result = copy_display_name((uint64_t)interface, 1, 0);
    *((void *)interface + 5) = result;
  }
  return result;
}

SCNetworkInterfaceRef _SCNetworkInterfaceCreateWithBSDName(uint64_t a1, const __CFString *a2, char a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  long long v31 = 0u;
  if (!_SC_cfstring_to_cstring(a2, (UInt8 *)&v30, 16, 0x8000100u)) {
    goto LABEL_7;
  }
  int v5 = socket(2, 2, 0);
  if (v5 != -1)
  {
    int v6 = v5;
    if (ioctl(v5, 0xC0206911uLL, &v30) == -1) {
      LOWORD(v31) = 0;
    }
    close(v6);
  }
  if ((v31 & 0x10) == 0)
  {
LABEL_7:
    LOBYTE(v7) = 1;
    goto LABEL_13;
  }
  if ((unsigned __int16)v30 != 28784 || BYTE2(v30) != 112) {
    goto LABEL_12;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", @"PPP");
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v16 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"Setup:", @"[^/]+", @"Interface");
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v16);
  CFDictionaryRef v7 = SCDynamicStoreCopyMultiple(0, 0, Mutable);
  CFRelease(Mutable);
  if (!v7)
  {
LABEL_13:
    CFMutableArrayRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(MutableCopy, @"DeviceName", a2);
    if ((v7 & 1) == 0) {
      CFDictionarySetValue(MutableCopy, @"Type", @"PointToPoint");
    }
    goto LABEL_15;
  }
  memset(keys, 0, sizeof(keys));
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)values = 0u;
  long long v33 = 0u;
  CFIndex Count = CFDictionaryGetCount(v7);
  if (Count < 33)
  {
    uint64_t v18 = (const void **)keys;
    uint64_t v19 = (const void **)values;
    CFDictionaryGetKeysAndValues(v7, (const void **)keys, (const void **)values);
    if (Count <= 0)
    {
      CFRelease(v7);
LABEL_12:
      LOBYTE(v7) = 0;
      goto LABEL_13;
    }
    CFDictionaryRef theDict = v7;
    char v27 = a3;
  }
  else
  {
    char v27 = a3;
    uint64_t v18 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    uint64_t v19 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFDictionaryRef theDict = v7;
    CFDictionaryGetKeysAndValues(v7, v18, v19);
  }
  uint64_t v20 = 0;
  while (1)
  {
    value = 0;
    CFStringRef v21 = (const __CFString *)v18[v20];
    CFDictionaryRef v22 = (const __CFDictionary *)v19[v20];
    if (CFStringHasSuffix(v21, @"PPP"))
    {
      if (CFDictionaryGetValueIfPresent(v22, @"InterfaceName", (const void **)&value))
      {
        if (CFEqual(a2, value))
        {
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v21, @"/");
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
          CFStringRef v25 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"Setup:", ValueAtIndex, @"Interface");
          CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v25);
          CFRelease(v25);
          CFRelease(ArrayBySeparatingStrings);
          if (v26) {
            break;
          }
        }
      }
    }
    if (Count == ++v20)
    {
      CFMutableArrayRef MutableCopy = 0;
      goto LABEL_32;
    }
  }
  CFMutableArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v26);
LABEL_32:
  a3 = v27;
  if (v18 != (const void **)keys)
  {
    CFAllocatorDeallocate(0, v18);
    CFAllocatorDeallocate(0, v19);
  }
  CFRelease(theDict);
  if (!MutableCopy) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
  if ((a3 & 4) == 0) {
    CFDictionarySetValue(MutableCopy, @"_NO_BRIDGE_INTERFACES_", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if ((a3 & 1) == 0) {
    CFDictionarySetValue(MutableCopy, @"_NO_VLAN_INTERFACES_", *v11);
  }
  SCNetworkInterfaceRef v12 = _SCNetworkInterfaceCreateWithEntity(v10, MutableCopy, (uint64_t)&__SCNetworkInterfaceSearchSystem);
  CFRelease(MutableCopy);
  return v12;
}

void __SCNetworkInterfaceSetIOInterfaceUnit(uint64_t a1, const void *a2)
{
  v53[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    return;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  uint64_t v6 = *(void *)(a1 + 232);
  if (!v6)
  {
    CFDictionaryRef v7 = *(const void **)(a1 + 112);
    CFTypeID v8 = CFStringGetTypeID();
    if (v7 && CFGetTypeID(v7) == v8)
    {
      CFMutableStringRef v9 = _SCNetworkInterfaceCopyPrefixFromBSDName(*(const __CFString **)(a1 + 112));
      if (v9)
      {
        CFMutableStringRef v10 = v9;
        CFTypeID v11 = CFStringGetTypeID();
        if (CFGetTypeID(v10) == v11)
        {
          CFRetain(v10);
          SCNetworkInterfaceRef v12 = *(const void **)(a1 + 232);
          if (v12) {
            CFRelease(v12);
          }
          *(void *)(a1 + 232) = v10;
        }
        CFRelease(v10);
      }
      else
      {
        BOOL v13 = __log_SCNetworkConfiguration();
        uint64_t v14 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v13, (os_log_type_t)v14))
        {
          uint64_t v15 = _os_log_pack_size();
          uint64_t v23 = (char *)v53
              - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v13, v14, v23);
        }
      }
    }
    uint64_t v6 = *(void *)(a1 + 232);
    if (!v6)
    {
      CFStringRef v24 = 0;
      goto LABEL_19;
    }
  }
  CFStringRef v24 = CFStringCreateWithFormat(0, 0, @"%@%@", v6, a2);
  if (!v24)
  {
LABEL_19:
    char v25 = 1;
    goto LABEL_20;
  }
  char v25 = 0;
  if (!__SCNetworkInterfaceUpdateBSDName((CFTypeRef)a1, BSDName, v24))
  {
LABEL_20:
    CFDictionaryRef v26 = __log_SCNetworkConfiguration();
    uint64_t v27 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v26, (os_log_type_t)v27))
    {
      uint64_t v28 = _os_log_pack_size();
      long long v36 = (char *)v53 - ((MEMORY[0x1F4188790](v28, v29, v30, v31, v32, v33, v34, v35) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v26, v27, v36);
    }
  }
  long long v37 = *(const void **)(a1 + 208);
  CFTypeID v38 = CFStringGetTypeID();
  if (v37 && CFGetTypeID(v37) == v38)
  {
    CFStringRef v39 = CFStringCreateWithFormat(0, 0, @"Migrated_From: %@", v37);
    long long v40 = *(const void **)(a1 + 208);
    if (v40) {
      CFRelease(v40);
    }
    *(void *)(a1 + 208) = CFRetain(v39);
    if (v39) {
      CFRelease(v39);
    }
  }
  else
  {
    long long v41 = __log_SCNetworkConfiguration();
    uint64_t v42 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v41, (os_log_type_t)v42))
    {
      uint64_t v43 = _os_log_pack_size();
      CFArrayRef v51 = (char *)v53 - ((MEMORY[0x1F4188790](v43, v44, v45, v46, v47, v48, v49, v50) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v41, v42, v51);
    }
  }
  CFRetain(a2);
  CFIndex v52 = *(const void **)(a1 + 256);
  if (v52) {
    CFRelease(v52);
  }
  *(void *)(a1 + 256) = a2;
  if ((v25 & 1) == 0) {
    CFRelease(v24);
  }
}

CFMutableStringRef _SCNetworkInterfaceCopyPrefixFromBSDName(const __CFString *a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, a1);
    CFIndex Length = CFStringGetLength(MutableCopy);
    if (Length >= 1)
    {
      do
      {
        CFIndex v5 = Length - 1;
        if (CFStringGetCharacterAtIndex(MutableCopy, Length - 1) - 48 > 9) {
          break;
        }
        v19.CFIndex location = v5;
        v19.CFIndex length = 1;
        CFStringDelete(MutableCopy, v19);
        CFIndex Length = CFStringGetLength(MutableCopy);
      }
      while (Length > 0);
    }
  }
  else
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)v18 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v6, v7, v16);
    }
    return 0;
  }
  return MutableCopy;
}

BOOL __SCNetworkInterfaceUpdateBSDName(CFTypeRef cf, const void *a2, const void *a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_9:
      uint64_t v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(6);
      BOOL result = __SC_log_enabled(6, v9, (os_log_type_t)v10);
      if (!result) {
        return result;
      }
      uint64_t v11 = _os_log_pack_size();
      CFRange v19 = (char *)v20 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v9, v10, v19);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v6) {
    goto LABEL_9;
  }
  if (CFEqual(a2, a3)) {
    return 0;
  }
  uint64_t v7 = (const void *)*((void *)cf + 14);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)cf + 14) = CFRetain(a3);
  return 1;
}

__CFString *__SCNetworkInterfaceCopyStorageEntity(uint64_t a1)
{
  CFStringRef BSDName = (__CFString *)SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName)
  {
    if (CFGetTypeID(BSDName) != TypeID) {
      return 0;
    }
    CFStringEncoding v4 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFIndex v5 = (const void *)(*(unsigned char *)(a1 + 176) ? *MEMORY[0x1E4F1CFD0] : *MEMORY[0x1E4F1CFC8]);
    uint64_t v6 = *(const void **)(a1 + 232);
    CFTypeID v7 = CFStringGetTypeID();
    if (!v6) {
      return 0;
    }
    if (CFGetTypeID(v6) != v7) {
      return 0;
    }
    uint64_t v8 = *(const void **)(a1 + 248);
    CFTypeID v9 = CFNumberGetTypeID();
    if (!v8) {
      return 0;
    }
    if (CFGetTypeID(v8) != v9) {
      return 0;
    }
    uint64_t v10 = *(const void **)(a1 + 256);
    CFTypeID v11 = CFNumberGetTypeID();
    if (!v10) {
      return 0;
    }
    if (CFGetTypeID(v10) == v11
      && (uint64_t v12 = *(const void **)(a1 + 160), v13 = CFDataGetTypeID(), v12)
      && CFGetTypeID(v12) == v13
      && (uint64_t v14 = *(void **)(a1 + 208), v15 = CFStringGetTypeID(), v14)
      && CFGetTypeID(v14) == v15
      && (uint64_t v16 = _SCNetworkInterfaceCopyInterfaceInfo(a1), v17 = CFDictionaryGetTypeID(), v16))
    {
      CFTypeRef cf = v16;
      if (CFGetTypeID(v16) == v17
        && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
            CFTypeID v25 = CFStringGetTypeID(),
            InterfaceType)
        && (v24 = v14, CFRange v19 = BSDName, CFGetTypeID(InterfaceType) == v25))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFStringRef BSDName = (__CFString *)Mutable;
        if (*(unsigned char *)(a1 + 24)) {
          CFDictionaryAddValue(Mutable, @"Active", v4);
        }
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"BSD Name", v19);
        if (*(unsigned char *)(a1 + 192)) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"HiddenConfiguration", v4);
        }
        if (*(unsigned char *)(a1 + 193)) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"HiddenInterface", v4);
        }
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOBuiltin", v5);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceNamePrefix", v6);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceType", v8);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOInterfaceUnit", v10);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOMACAddress", v12);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"IOPathMatch", v24);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"SCNetworkInterfaceInfo", cf);
        CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"SCNetworkInterfaceType", InterfaceType);
        uint64_t v21 = *(const void **)(a1 + 304);
        CFTypeID v22 = CFArrayGetTypeID();
        if (v21 && CFGetTypeID(v21) == v22) {
          CFDictionaryAddValue((CFMutableDictionaryRef)BSDName, @"MatchingMACs", *(const void **)(a1 + 304));
        }
      }
      else
      {
        CFStringRef BSDName = 0;
      }
      CFRelease(cf);
    }
    else
    {
      return 0;
    }
  }
  return BSDName;
}

uint64_t _SCNetworkInterfaceGetIOInterfaceNamePrefix(uint64_t a1)
{
  return *(void *)(a1 + 232);
}

uint64_t _SCNetworkInterfaceGetIOInterfaceUnit(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

uint64_t _SCNetworkInterfaceGetHardwareAddress(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t _SCNetworkInterfaceGetIOPath(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

__CFDictionary *_SCNetworkInterfaceCopyInterfaceInfo(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFStringRef NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a1);
  if (NonLocalizedDisplayName) {
    CFDictionaryAddValue(Mutable, @"UserDefinedName", NonLocalizedDisplayName);
  }
  CFStringEncoding v4 = *(const void **)(a1 + 288);
  if (v4 || *(void *)(a1 + 296))
  {
    if (*(void *)(a1 + 280))
    {
      CFDictionaryAddValue(Mutable, @"kUSBProductString", *(const void **)(a1 + 280));
      CFStringEncoding v4 = *(const void **)(a1 + 288);
    }
    if (v4) {
      CFDictionaryAddValue(Mutable, @"idVendor", v4);
    }
    CFIndex v5 = *(const void **)(a1 + 296);
    if (v5) {
      CFDictionaryAddValue(Mutable, @"idProduct", v5);
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t __SCNetworkInterfaceMatchesName(const __CFString *a1, const __CFString *a2)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (!bundle)
  {
    CFTypeID v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(5);
    uint64_t result = __SC_log_enabled(5, v7, (os_log_type_t)v8);
    if (!result) {
      return result;
    }
    uint64_t v9 = _os_log_pack_size();
    CFTypeID v17 = (char *)v18 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v7, v8, v17);
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  uint64_t result = matchesName((__CFBundle *)bundle, a1, a2, 0);
  if (!result)
  {
    uint64_t v6 = (__CFBundle *)bundle;
    return matchesName(v6, a1, a2, 1);
  }
  return result;
}

uint64_t matchesName(__CFBundle *a1, const __CFString *a2, const __CFString *a3, int a4)
{
  CFStringRef v5 = copy_interface_string(a1, a3, a4);
  if (!v5) {
    return 0;
  }
  CFStringRef v6 = v5;
  uint64_t v7 = CFEqual(a2, v5);
  if (!v7)
  {
    if (CFStringHasSuffix(v6, @" %@"))
    {
      CFIndex Length = CFStringGetLength(a2);
      do
      {
        CFIndex v9 = Length;
        if (Length < 3) {
          break;
        }
        --Length;
      }
      while (CFStringGetCharacterAtIndex(a2, v9 - 1) - 58 > 0xFFFFFFF5);
      v13.CFIndex location = 0;
      v13.CFIndex length = v9;
      CFStringRef v10 = CFStringCreateWithSubstring(0, a2, v13);
      v14.CFIndex length = CFStringGetLength(v6) - 2;
      v14.CFIndex location = 0;
      CFStringRef v11 = CFStringCreateWithSubstring(0, v6, v14);
      uint64_t v7 = CFEqual(v10, v11);
      CFRelease(v10);
      CFRelease(v11);
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  CFRelease(v6);
  return v7;
}

void _SCNetworkInterfaceCacheOpen()
{
  v26[1] = *MEMORY[0x1E4F143B8];
  int v0 = __SCGetThreadSpecificData();
  CFURLRef v1 = (const void *)v0[1];
  if (v1)
  {
    CFRetain(v1);
    uint64_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(7);
    if (!__SC_log_enabled(7, v2, (os_log_type_t)v3)) {
      return;
    }
    uint64_t v4 = _os_log_pack_size();
    uint64_t v12 = (char *)v26 - ((MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    CFRange v14 = (const void *)v0[1];
    CFIndex v15 = CFGetRetainCount(v14);
    *(_DWORD *)uint64_t v13 = 134218240;
    *(void *)(v13 + 4) = v14;
    *(_WORD *)(v13 + 12) = 2048;
    *(void *)(v13 + 14) = v15;
  }
  else
  {
    v0[1] = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v2 = __log_SCNetworkConfiguration();
    uint64_t v3 = _SC_syslog_os_log_mapping(7);
    if (!__SC_log_enabled(7, v2, (os_log_type_t)v3)) {
      return;
    }
    uint64_t v16 = _os_log_pack_size();
    uint64_t v12 = (char *)v26 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    uint64_t v25 = v0[1];
    *(_DWORD *)uint64_t v24 = 134217984;
    *(void *)(v24 + 4) = v25;
  }
  __SC_log_send(7, (uint64_t)v2, v3, v12);
}

void _SCNetworkInterfaceCacheClose()
{
  v28[1] = *MEMORY[0x1E4F143B8];
  int v0 = __SCGetThreadSpecificData();
  CFURLRef v1 = (const void *)v0[1];
  if (v1)
  {
    CFIndex v2 = CFGetRetainCount(v1);
    CFRelease((CFTypeRef)v0[1]);
    uint64_t v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(7);
    BOOL v5 = __SC_log_enabled(7, v3, (os_log_type_t)v4);
    if (v2 < 2)
    {
      if (v5)
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v25 = (char *)v28 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        uint64_t v27 = v0[1];
        *(_DWORD *)uint64_t v26 = 134217984;
        *(void *)(v26 + 4) = v27;
        __SC_log_send(7, (uint64_t)v3, v4, v25);
      }
      v0[1] = 0;
    }
    else if (v5)
    {
      uint64_t v6 = _os_log_pack_size();
      CFRange v14 = (char *)v28 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = v0[1];
      *(_DWORD *)uint64_t v15 = 134218240;
      *(void *)(v15 + 4) = v16;
      *(_WORD *)(v15 + 12) = 2048;
      *(void *)(v15 + 14) = v2;
      __SC_log_send(7, (uint64_t)v3, v4, v14);
    }
  }
}

CFTypeRef __SCNetworkInterfaceCreateCopy(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if ((_UNKNOWN *)a2 == &__kSCNetworkInterfaceIPv4)
  {
    return CFRetain(&__kSCNetworkInterfaceIPv4);
  }
  else
  {
    uint64_t Private = __SCNetworkInterfaceCreatePrivate(0, 0, a3, a4);
    *(void *)(Private + 16) = *(void *)(a2 + 16);
    if (*(void *)(a2 + 72)) {
      *(void *)(Private + 72) = __SCNetworkInterfaceCreateCopy();
    }
    uint64_t v8 = *(const void **)(a2 + 32);
    if (v8) {
      *(void *)(Private + 32) = CFRetain(v8);
    }
    uint64_t v9 = *(const void **)(a2 + 232);
    if (v9) {
      *(void *)(Private + 232) = CFRetain(v9);
    }
    uint64_t v10 = *(const void **)(a2 + 40);
    if (v10) {
      *(void *)(Private + 40) = CFRetain(v10);
    }
    uint64_t v11 = *(const void **)(a2 + 56);
    *(void *)(Private + 48) = *(void *)(a2 + 48);
    if (v11) {
      *(void *)(Private + 56) = CFRetain(v11);
    }
    uint64_t v12 = *(const void **)(a2 + 64);
    if (v12) {
      *(void *)(Private + 64) = CFRetain(v12);
    }
    CFDictionaryRef v13 = *(const __CFDictionary **)(a2 + 104);
    if (v13) {
      *(void *)(Private + 104) = CFDictionaryCreateMutableCopy(0, 0, v13);
    }
    CFRange v14 = *(const void **)(a2 + 112);
    if (v14) {
      *(void *)(Private + 112) = CFRetain(v14);
    }
    uint64_t v15 = *(const void **)(a2 + 120);
    if (v15) {
      *(void *)(Private + 120) = CFRetain(v15);
    }
    *(_OWORD *)(Private + 128) = *(_OWORD *)(a2 + 128);
    CFArrayRef v16 = *(const __CFArray **)(a2 + 144);
    if (v16) {
      *(void *)(Private + 144) = CFArrayCreateMutableCopy(0, 0, v16);
    }
    CFArrayRef v17 = *(const __CFArray **)(a2 + 152);
    if (v17) {
      *(void *)(Private + 152) = CFArrayCreateMutableCopy(0, 0, v17);
    }
    uint64_t v18 = *(const void **)(a2 + 160);
    if (v18) {
      *(void *)(Private + 160) = CFRetain(v18);
    }
    *(unsigned char *)(Private + 176) = *(unsigned char *)(a2 + 176);
    uint64_t v19 = *(const void **)(a2 + 184);
    if (v19) {
      *(void *)(Private + 184) = CFRetain(v19);
    }
    *(_WORD *)(Private + 192) = *(_WORD *)(a2 + 192);
    *(unsigned char *)(Private + 240) = *(unsigned char *)(a2 + 240);
    uint64_t v20 = *(const void **)(a2 + 200);
    if (v20) {
      *(void *)(Private + 200) = CFRetain(v20);
    }
    uint64_t v21 = *(const void **)(a2 + 208);
    if (v21) {
      *(void *)(Private + 208) = CFRetain(v21);
    }
    CFDictionaryRef v22 = *(const __CFDictionary **)(a2 + 224);
    *(void *)(Private + 216) = *(void *)(a2 + 216);
    if (v22) {
      *(void *)(Private + 224) = CFDictionaryCreateMutableCopy(0, 0, v22);
    }
    uint64_t v23 = *(const void **)(a2 + 248);
    if (v23) {
      *(void *)(Private + 248) = CFRetain(v23);
    }
    uint64_t v24 = *(const void **)(a2 + 256);
    if (v24) {
      *(void *)(Private + 256) = CFRetain(v24);
    }
    uint64_t v25 = *(const void **)(a2 + 264);
    if (v25) {
      *(void *)(Private + 264) = CFRetain(v25);
    }
    uint64_t v26 = *(const void **)(a2 + 272);
    if (v26) {
      *(void *)(Private + 272) = CFRetain(v26);
    }
    uint64_t v27 = *(const void **)(a2 + 280);
    if (v27) {
      *(void *)(Private + 280) = CFRetain(v27);
    }
    uint64_t v28 = *(const void **)(a2 + 288);
    if (v28) {
      *(void *)(Private + 288) = CFRetain(v28);
    }
    uint64_t v29 = *(const void **)(a2 + 296);
    if (v29) {
      *(void *)(Private + 296) = CFRetain(v29);
    }
    *(_DWORD *)(Private + 312) = *(_DWORD *)(a2 + 312);
    *(unsigned char *)(Private + 316) = *(unsigned char *)(a2 + 316);
    uint64_t v30 = *(const void **)(a2 + 320);
    if (v30) {
      *(void *)(Private + 320) = CFRetain(v30);
    }
    uint64_t v31 = *(const void **)(a2 + 328);
    if (v31) {
      *(void *)(Private + 328) = CFRetain(v31);
    }
    uint64_t v32 = *(const void **)(a2 + 336);
    if (v32) {
      *(void *)(Private + 336) = CFRetain(v32);
    }
    *(unsigned char *)(Private + 344) = *(unsigned char *)(a2 + 344);
    uint64_t v33 = *(const void **)(a2 + 352);
    if (v33) {
      *(void *)(Private + 352) = CFRetain(v33);
    }
    uint64_t v34 = *(const void **)(a2 + 360);
    if (v34) {
      *(void *)(Private + 360) = CFRetain(v34);
    }
    *(unsigned char *)(Private + 368) = *(unsigned char *)(a2 + 368);
    uint64_t v35 = *(const void **)(a2 + 376);
    if (v35) {
      *(void *)(Private + 376) = CFRetain(v35);
    }
    long long v36 = *(const void **)(a2 + 384);
    if (v36) {
      *(void *)(Private + 384) = CFRetain(v36);
    }
    long long v37 = *(const void **)(a2 + 392);
    if (v37) {
      *(void *)(Private + 392) = CFRetain(v37);
    }
    return (CFTypeRef)Private;
  }
}

uint64_t processSerialInterface(uint64_t a1, io_registry_entry_t entry, const __CFDictionary *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  CFBooleanRef v6 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(entry, "IOService", @"Initializing", 0, 3u);
  if (v6)
  {
    CFBooleanRef v7 = v6;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (CFGetTypeID(v7) == TypeID)
    {
      int Value = CFBooleanGetValue(v7);
      CFRelease(v7);
      if (Value) {
        return 0;
      }
    }
    else
    {
      CFRelease(v7);
    }
  }
  CFTypeRef v10 = IORegistryEntrySearchCFProperty(entry, "IOService", @"WWAN", 0, 3u);
  if (v10)
  {
    uint64_t v11 = v10;
    CFTypeID v12 = CFBooleanGetTypeID();
    BOOL v13 = CFGetTypeID(v11) == v12 && CFBooleanGetValue((CFBooleanRef)v11) != 0;
    CFRelease(v11);
  }
  else
  {
    BOOL v13 = 0;
  }
  CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(a3, @"IOTTYDevice");
  CFStringRef v15 = IOCopyCFStringValue(v14);
  *(void *)(a1 + 112) = v15;
  if (!v15) {
    return 0;
  }
  CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(a3, @"IOTTYBaseName");
  CFStringRef v17 = IOCopyCFStringValue(v16);
  if (!v17) {
    CFStringRef v17 = (const __CFString *)CFRetain(*(CFTypeRef *)(a1 + 112));
  }
  CFIndex Length = CFStringGetLength(@"bluetooth");
  CFTypeID v19 = CFStringGetTypeID();
  if (!v17)
  {
    CFDataGetTypeID();
    goto LABEL_30;
  }
  if (CFGetTypeID(v17) == v19)
  {
    CFStringRef v20 = 0;
    CFStringRef v21 = v17;
    goto LABEL_22;
  }
  CFTypeID v23 = CFDataGetTypeID();
  if (CFGetTypeID(v17) != v23
    || (BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)v17),
        CFStringRef v21 = CFStringCreateWithCStringNoCopy(0, BytePtr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]),
        (CFStringRef v20 = v21) == 0))
  {
LABEL_30:
    uint64_t v26 = @"Modem";
    if (v13)
    {
      uint64_t v26 = @"WWAN";
      int v27 = 4;
    }
    else
    {
      int v27 = 2;
    }
    *(void *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 312) = v27;
    goto LABEL_34;
  }
LABEL_22:
  if (CFStringGetLength(v21) >= Length)
  {
    v50.CFIndex location = 0;
    v50.CFIndex length = Length;
    BOOL v25 = CFStringCompareWithOptions(v21, @"bluetooth", v50, 1uLL) == kCFCompareEqualTo;
    if (!v20) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  BOOL v25 = 0;
  if (v20) {
LABEL_26:
  }
    CFRelease(v20);
LABEL_27:
  if (!v25) {
    goto LABEL_30;
  }
  char v48 = 0;
  *(void *)(a1 + 16) = @"Bluetooth";
  *(_DWORD *)(a1 + 312) = 3;
  *(unsigned char *)(a1 + 176) = isBluetoothBuiltin(&v48);
  if (!v48) {
    goto LABEL_39;
  }
LABEL_34:
  *(void *)(a1 + 128) = @"Modem";
  uint64_t v28 = CFDictionaryGetValue(a3, @"IOSerialBSDClientType");
  CFTypeID v29 = CFStringGetTypeID();
  if (v28 && CFGetTypeID(v28) == v29 && CFEqual(v28, @"IOSerialStream"))
  {
    if (CFEqual(v17, @"modem"))
    {
      int v30 = 0;
      *(unsigned char *)(a1 + 176) = 1;
    }
    else
    {
      if (!CFEqual(v17, @"usbmodem")) {
        goto LABEL_48;
      }
      int v30 = 1;
    }
    *(_DWORD *)(a1 + 312) = v30;
LABEL_48:
    merge_override(a1, entry, @"PPP");
    merge_override(a1, entry, @"Modem");
    CFDictionaryRef v33 = *(const __CFDictionary **)(a1 + 224);
    if (!v33) {
      goto LABEL_57;
    }
    CFDictionaryRef v34 = (const __CFDictionary *)CFDictionaryGetValue(v33, @"Modem");
    if (!v34) {
      goto LABEL_57;
    }
    CFDictionaryRef v35 = v34;
    long long v36 = CFDictionaryGetValue(v34, @"ConnectionScript");
    CFTypeID v37 = CFStringGetTypeID();
    if (v36 && CFGetTypeID(v36) != v37) {
      long long v36 = 0;
    }
    CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v35, @"UniqueIdentifier");
    CFTypeID v39 = CFStringGetTypeID();
    if (v38 && CFGetTypeID(v38) == v39)
    {
      CFRelease(*(CFTypeRef *)(a1 + 112));
      *(void *)(a1 + 112) = CFRetain(v17);
      *(void *)(a1 + 120) = CFStringCreateCopy(0, v38);
    }
    if (!v36)
    {
LABEL_57:
      CFStringRef v40 = (const __CFString *)IORegistryEntrySearchCFProperty(entry, "IOService", @"ModemCCL", 0, 3u);
      if (v40)
      {
        CFStringRef v41 = v40;
        long long v36 = IOCopyCFStringValue(v40);
        if (v36)
        {
          set_connection_script(a1, v36);
          CFRelease(v36);
        }
        CFRelease(v41);
      }
      else
      {
        long long v36 = 0;
      }
    }
    if (CFEqual(*(CFTypeRef *)(a1 + 16), @"Bluetooth"))
    {
      *(void *)(a1 + 48) = @"bluetooth";
      goto LABEL_76;
    }
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v17);
    CFStringLowercase(MutableCopy, 0);
    if (bundle)
    {
      CFStringRef v43 = copy_interface_string((__CFBundle *)bundle, MutableCopy, 0);
      if (v43)
      {
        CFStringRef v44 = v43;
        if (!CFEqual(MutableCopy, v43))
        {
LABEL_69:
          *(void *)(a1 + 32) = v44;
          if (bundle)
          {
            CFStringRef v45 = copy_interface_string((__CFBundle *)bundle, MutableCopy, 1);
            if (v45)
            {
              CFStringRef Copy = v45;
              if (!CFEqual(MutableCopy, v45)) {
                goto LABEL_74;
              }
              CFRelease(Copy);
            }
          }
          CFStringRef Copy = CFStringCreateCopy(0, v17);
LABEL_74:
          *(void *)(a1 + 40) = Copy;
          if (!CFEqual(v17, @"modem"))
          {
            processUSBInterface((void *)a1, entry);
            int updated = update_interface_name((void *)a1, entry, 1);
            if (!v36 && updated && is_valid_connection_script(*(const __CFString **)(a1 + 32))) {
              set_connection_script(a1, *(const void **)(a1 + 32));
            }
          }
          CFRelease(MutableCopy);
LABEL_76:
          uint64_t v22 = 1;
          if (!v17) {
            return v22;
          }
          goto LABEL_41;
        }
        CFRelease(v44);
      }
    }
    CFStringRef v44 = CFStringCreateCopy(0, v17);
    goto LABEL_69;
  }
LABEL_39:
  uint64_t v31 = *(const void **)(a1 + 112);
  if (!v31)
  {
    uint64_t v22 = 0;
    if (!v17) {
      return v22;
    }
    goto LABEL_41;
  }
  CFRelease(v31);
  uint64_t v22 = 0;
  *(void *)(a1 + 112) = 0;
  if (v17) {
LABEL_41:
  }
    CFRelease(v17);
  return v22;
}

SCNetworkInterfaceRef SCNetworkInterfaceCreateWithInterface(SCNetworkInterfaceRef interface, CFStringRef interfaceType)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_7;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v4) {
    goto LABEL_7;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!interfaceType || CFGetTypeID(interfaceType) != TypeID || CFEqual(interface, &__kSCNetworkInterfaceLoopback)) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  uint64_t v9 = (const void *)*((void *)interface + 2);
  CFTypeRef v10 = (CFTypeRef **)configurations;
  while (!CFEqual(v9, **v10))
  {
    ++v8;
    v10 += 5;
    if (v8 == 19)
    {
      uint64_t v8 = -1;
      break;
    }
  }
  uint64_t Private = __SCNetworkInterfaceCreatePrivate(0, interface, *((const void **)interface + 10), *((const void **)interface + 12));
  if (!Private)
  {
    _SCErrorSet(1001);
    return (SCNetworkInterfaceRef)Private;
  }
  if (CFEqual(interfaceType, @"PPP"))
  {
    *(void *)(Private + 16) = @"PPP";
    *(void *)(Private + 128) = @"PPP";
    if (v8 == -1)
    {
      uint64_t v11 = (__CFString **)((char *)interface + 128);
      goto LABEL_23;
    }
    if (((0x6895DuLL >> v8) & 1) == 0)
    {
      uint64_t v11 = configurations[5 * v8 + 3];
LABEL_23:
      *(void *)(Private + 136) = *v11;
      CFStringRef v13 = (const __CFString *)*((void *)interface + 14);
      if (v13) {
        *(void *)(Private + 112) = CFStringCreateCopy(0, v13);
      }
      CFStringRef v14 = (const __CFString *)*((void *)interface + 15);
      if (v14) {
        *(void *)(Private + 120) = CFStringCreateCopy(0, v14);
      }
      goto LABEL_32;
    }
    goto LABEL_52;
  }
  if (!CFEqual(interfaceType, @"L2TP"))
  {
    if (CFEqual(interfaceType, @"PPTP"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"PPTP";
        *(void *)(Private + 48) = @"pptp";
        CFTypeID v12 = &kSCEntNetPPTP;
        goto LABEL_30;
      }
    }
    else if (CFEqual(interfaceType, @"6to4"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"6to4";
        *(void *)(Private + 48) = @"6to4";
        *(void *)(Private + 128) = @"6to4";
        *(void *)(Private + 112) = CFRetain(@"stf0");
        goto LABEL_32;
      }
    }
    else if (CFEqual(interfaceType, @"IPSec"))
    {
      if (v8 == 18)
      {
        *(void *)(Private + 16) = @"IPSec";
        *(void *)(Private + 48) = @"ipsec";
        CFTypeID v12 = &kSCValNetInterfaceTypeIPSec;
        goto LABEL_30;
      }
    }
    else if (CFEqual(interfaceType, @"VPN"))
    {
      if (v8 == -1)
      {
        *(void *)(Private + 16) = @"VPN";
        *(void *)(Private + 48) = @"vpn";
        *(void *)(Private + 56) = CFRetain(*((CFTypeRef *)interface + 16));
        *(void *)(Private + 128) = @"VPN";
        CFStringRef v21 = (const __CFString *)*((void *)interface + 16);
        *(void *)(Private + 136) = v21;
        CFStringRef v22 = (const __CFString *)*((void *)interface + 14);
        if (v22)
        {
          *(void *)(Private + 112) = CFStringCreateCopy(0, v22);
          CFStringRef v21 = *(const __CFString **)(Private + 136);
        }
        if (v21)
        {
          if (CFEqual(v21, @"com.cisco.anyconnect.applevpn.plugin"))
          {
            CFStringRef v23 = @"com.cisco.Cisco-AnyConnect.vpnplugin";
          }
          else if (CFEqual(*(CFTypeRef *)(Private + 136), @"net.juniper.sslvpn"))
          {
            CFStringRef v23 = @"net.juniper.Junos-Pulse.vpnplugin";
          }
          else
          {
            CFStringRef v23 = v21;
          }
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v23, @".");
          CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
          if (Count >= 4)
          {
            CFIndex v26 = Count;
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
            if (CFEqual(ValueAtIndex, @"vpnplugin"))
            {
              CFStringRef v28 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v26 - 2);
              CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v28);
              v30.CFIndex length = CFStringGetLength(MutableCopy);
              v30.CFIndex location = 0;
              CFStringFindAndReplace(MutableCopy, @"-", @" ", v30, 0);
              *(void *)(Private + 40) = MutableCopy;
            }
          }
          CFRelease(ArrayBySeparatingStrings);
        }
        goto LABEL_32;
      }
    }
    else
    {
      if (CFStringFind(interfaceType, @".", 0).location != -1)
      {
        pthread_mutex_lock(&lock_1);
        CFMutableDictionaryRef Mutable = (__CFSet *)vendor_interface_types;
        if (!vendor_interface_types)
        {
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
          vendor_interface_types = (uint64_t)Mutable;
        }
        CFSetAddValue(Mutable, interfaceType);
        *(void *)(Private + 16) = CFSetGetValue((CFSetRef)vendor_interface_types, interfaceType);
        pthread_mutex_unlock(&lock_1);
        CFStringRef v15 = *(CFStringRef *)(Private + 16);
        goto LABEL_31;
      }
      if (CFEqual(interfaceType, @"AppleVPN"))
      {
        *(void *)(Private + 16) = @"AppleVPN";
        *(void *)(Private + 128) = @"AppleVPN";
        goto LABEL_32;
      }
    }
LABEL_52:
    CFRelease((CFTypeRef)Private);
    goto LABEL_7;
  }
  if (v8 != 18) {
    goto LABEL_52;
  }
  *(void *)(Private + 16) = @"L2TP";
  *(void *)(Private + 48) = @"l2tp";
  CFTypeID v12 = &kSCEntNetL2TP;
LABEL_30:
  CFStringRef v15 = *v12;
LABEL_31:
  *(void *)(Private + 128) = v15;
LABEL_32:
  *(_WORD *)(Private + 192) = *((_WORD *)interface + 96);
  *(unsigned char *)(Private + 240) = *((unsigned char *)interface + 240);
  CFDictionaryRef v16 = (const __CFDictionary *)*((void *)interface + 28);
  if (v16) {
    *(void *)(Private + 224) = CFDictionaryCreateMutableCopy(0, 0, v16);
  }
  CFStringRef v17 = *(const void **)(Private + 136);
  if (v17 && CFEqual(v17, @"PPPoE"))
  {
    uint64_t v18 = (const void *)*((void *)interface + 2);
    if (v18 && CFEqual(v18, @"IEEE80211")) {
      int v19 = 6;
    }
    else {
      int v19 = 5;
    }
  }
  else
  {
    int v19 = *((_DWORD *)interface + 78);
  }
  *(_DWORD *)(Private + 312) = v19;
  return (SCNetworkInterfaceRef)Private;
}

const __SCNetworkInterface *findBridgeInterface(const __SCPreferences *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v3 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  Interface = findInterface(v3, a2);
  CFRelease(v4);
  return Interface;
}

const __SCNetworkInterface *findVLANInterface(const __SCPreferences *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v3 = SCVLANInterfaceCopyAll(a1);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  Interface = findInterface(v3, a2);
  CFRelease(v4);
  return Interface;
}

CFStringRef __SCNetworkInterfaceGetNonLocalizedDisplayName(CFStringRef *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_7;
  }
  CFStringRef result = cf[4];
  if (!result)
  {
    CFStringRef result = copy_display_name((uint64_t)cf, 0, 0);
    cf[4] = result;
  }
  return result;
}

void __SCNetworkInterfaceCacheAdd1(const void *a1, const void *a2)
{
  v6[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFArrayRef v4 = __SCGetThreadSpecificData();
  if (a1 && v4[1])
  {
    if (a2)
    {
      v6[0] = a2;
      CFArrayRef v5 = CFArrayCreate(0, v6, 1, MEMORY[0x1E4F1D510]);
      __SCNetworkInterfaceCacheAdd(a1, v5);
      CFRelease(v5);
    }
    else
    {
      __SCNetworkInterfaceCacheAdd(a1, 0);
    }
  }
}

CFArrayRef SCNetworkInterfaceGetSupportedInterfaceTypes(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_21:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_21;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_21;
  }
  if (!*((void *)interface + 18))
  {
    uint64_t v4 = 0;
    CFArrayRef v5 = (const void *)*((void *)interface + 2);
    CFBooleanRef v6 = (CFTypeRef **)configurations;
    while (!CFEqual(v5, **v6))
    {
      --v4;
      v6 += 5;
      if (v4 == -19)
      {
        SCNetworkInterfaceRef v7 = SCNetworkInterfaceGetInterface(interface);
        if (v7 && CFEqual(v7, &__kSCNetworkInterfaceIPv4))
        {
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          *((void *)interface + 18) = Mutable;
          uint64_t v9 = @"VPN";
LABEL_19:
          CFArrayAppendValue(Mutable, v9);
          return (CFArrayRef)*((void *)interface + 18);
        }
        return (CFArrayRef)*((void *)interface + 18);
      }
    }
    if (((0x2C95DuLL >> -(char)v4) & 1) == 0)
    {
      CFTypeRef v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *((void *)interface + 18) = v10;
      if (v4 == -18)
      {
        CFArrayAppendValue(v10, @"6to4");
        CFArrayAppendValue(*((CFMutableArrayRef *)interface + 18), @"L2TP");
      }
      if (((0x6C95DuLL >> -(char)v4) & 1) == 0) {
        CFArrayAppendValue(*((CFMutableArrayRef *)interface + 18), @"PPP");
      }
      if (v4 == -18)
      {
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 18);
        uint64_t v9 = @"IPSec";
        goto LABEL_19;
      }
    }
  }
  return (CFArrayRef)*((void *)interface + 18);
}

CFArrayRef SCNetworkInterfaceGetSupportedProtocolTypes(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_18:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_18;
  }
  if (!*((void *)interface + 19))
  {
    uint64_t v3 = 0;
    uint64_t v4 = (const void *)*((void *)interface + 2);
    for (CFIndex i = (CFTypeRef **)configurations; !CFEqual(v4, **i); i += 5)
    {
      if (++v3 == 19) {
        return (CFArrayRef)*((void *)interface + 19);
      }
    }
    if (((0x53612uLL >> v3) & 1) == 0)
    {
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      *((void *)interface + 19) = Mutable;
      if (((0x73613uLL >> v3) & 1) == 0)
      {
        CFArrayAppendValue(Mutable, @"DNS");
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 19);
      }
      if (((0x53613uLL >> v3) & 1) == 0)
      {
        CFArrayAppendValue(Mutable, @"IPv4");
        CFMutableDictionaryRef Mutable = (__CFArray *)*((void *)interface + 19);
      }
      CFArrayAppendValue(Mutable, @"IPv6");
      if (((0x73613uLL >> v3) & 1) == 0) {
        CFArrayAppendValue(*((CFMutableArrayRef *)interface + 19), @"Proxies");
      }
    }
  }
  return (CFArrayRef)*((void *)interface + 19);
}

CFDictionaryRef __SCNetworkInterfaceGetDefaultConfiguration(const __SCNetworkSet *a1, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a2);
  CFDictionaryRef Value = 0;
  if (a1)
  {
    CFBooleanRef v6 = DefaultConfigurationType;
    if (DefaultConfigurationType)
    {
      CFStringRef SetID = SCNetworkSetGetSetID(a1);
      CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(0, (uint64_t)SetID, *(void *)(a2 + 112), (uint64_t)v6);
      if (SetNetworkInterfaceEntity)
      {
        CFStringRef v9 = SetNetworkInterfaceEntity;
        CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a2 + 80), SetNetworkInterfaceEntity);
        CFRelease(v9);
        if (Value)
        {
          CFTypeID TypeID = CFDictionaryGetTypeID();
LABEL_8:
          if (CFGetTypeID(Value) == TypeID && !CFDictionaryGetCount(Value)) {
            return 0;
          }
          return Value;
        }
        CFDictionaryRef v11 = *(const __CFDictionary **)(a2 + 104);
        if (v11)
        {
          CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, v6);
          if (v12 != (const __CFDictionary *)*MEMORY[0x1E4F1D260])
          {
            CFDictionaryRef Value = v12;
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (!Value) {
              return Value;
            }
            goto LABEL_8;
          }
        }
        CFDictionaryGetTypeID();
      }
      return 0;
    }
  }
  return Value;
}

CFDictionaryRef SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef interface)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_10:
      int v6 = 1002;
      goto LABEL_11;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_10;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_10;
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)interface);
  if (!DefaultConfigurationType) {
    return 0;
  }
  uint64_t v4 = DefaultConfigurationType;
  CFDictionaryRef Configuration = (const __CFDictionary *)__SCNetworkInterfaceGetConfiguration((uint64_t)interface, DefaultConfigurationType);
  if (!Configuration)
  {
    int v6 = CFEqual(v4, @"AirPort");
    if (!v6)
    {
LABEL_11:
      _SCErrorSet(v6);
      return 0;
    }
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)interface + 12), @"AirPort");
    CFDictionaryRef Configuration = __SCNetworkConfigurationGetValue(*((const __SCPreferences **)interface + 10), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    if (!Configuration)
    {
      int v6 = 0;
      goto LABEL_11;
    }
  }
  return Configuration;
}

const void *__SCNetworkInterfaceGetConfiguration(uint64_t a1, const void *a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v4 = copyConfigurationPaths(a1, (uint64_t)a2);
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, 0);
    CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), ValueAtIndex);
    CFRelease(v5);
  }
  else
  {
    CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 104);
    if (!v9 || (CFDictionaryRef Value = CFDictionaryGetValue(v9, a2), Value == (const void *)*MEMORY[0x1E4F1D260]))
    {
      CFDictionaryGetTypeID();
      return 0;
    }
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)Value)) {
    return 0;
  }
  return Value;
}

CFDictionaryRef SCNetworkInterfaceGetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface) {
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_8;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) == v4
    && __SCNetworkInterfaceIsValidExtendedConfigurationType(interface, extendedType, 1))
  {
    CFDictionaryRef result = (CFDictionaryRef)__SCNetworkInterfaceGetConfiguration((uint64_t)interface, extendedType);
    if (result) {
      return result;
    }
    goto LABEL_9;
  }
LABEL_8:
  LODWORD(result) = 1002;
LABEL_9:
  _SCErrorSet((int)result);
  return 0;
}

uint64_t __SCNetworkInterfaceGetEntityType(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t __SCNetworkInterfaceGetEntitySubType(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

CFStringRef SCNetworkInterfaceGetHardwareAddressString(SCNetworkInterfaceRef interface)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_16:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_16;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_16;
  }
  CFDataRef v3 = (const __CFData *)*((void *)interface + 20);
  if (v3 && !*((void *)interface + 21))
  {
    BytePtr = CFDataGetBytePtr(v3);
    CFIndex Length = CFDataGetLength(*((CFDataRef *)interface + 20));
    uint64_t v6 = 3 * Length;
    if ((unint64_t)(3 * Length) < 0x19) {
      SCNetworkInterfaceRef v7 = v11;
    }
    else {
      SCNetworkInterfaceRef v7 = (char *)CFAllocatorAllocate(0, v6, 0);
    }
    if (Length)
    {
      uint64_t v8 = v7;
      do
      {
        int v9 = *BytePtr++;
        v8 += snprintf(v8, v6, "%2.2x:", v9);
        v6 -= 3;
      }
      while (v6);
    }
    *((void *)interface + 21) = CFStringCreateWithCString(0, v7, 0x8000100u);
    if (v7 != v11) {
      CFAllocatorDeallocate(0, v7);
    }
  }
  return (CFStringRef)*((void *)interface + 21);
}

CFStringRef __SCNetworkInterfaceCopyOldLocalizedDisplayName(CFTypeRef cf, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_8;
  }

  return copy_display_name((uint64_t)cf, 1, a2);
}

CFStringRef copy_display_name(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  if (a1)
  {
    while (1)
    {
      SCNetworkInterfaceRef v7 = *(void **)(a1 + 72);
      if (v7) {
        BOOL v8 = v7 == &__kSCNetworkInterfaceIPv4;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8 || CFEqual(*(CFTypeRef *)(a1 + 16), @"VPN")) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = *(void *)(a1 + 72);
      }
      if (!bundle) {
        goto LABEL_27;
      }
      CFStringRef v10 = *(const __CFString **)(a1 + 48);
      if (!v10) {
        goto LABEL_27;
      }
      if (a3) {
        CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"%@-%@", a3, v10);
      }
      else {
        CFRetain(*(CFTypeRef *)(a1 + 48));
      }
      CFStringRef v11 = copy_interface_string((__CFBundle *)bundle, v10, a2);
      CFRelease(v10);
      if (v11)
      {
        if (a2)
        {
          localizeNumberString((CFStringRef *)(a1 + 56));
          localizeNumberString((CFStringRef *)(a1 + 64));
        }
        uint64_t v12 = *(void *)(a1 + 56);
        if (v12)
        {
          if (*(void *)(a1 + 64)) {
            uint64_t v21 = *(void *)(a1 + 64);
          }
          CFStringAppendFormat(Mutable, 0, v11, v12, v21);
        }
        else
        {
          CFStringAppend(Mutable, v11);
        }
        CFRelease(v11);
        if (!v9) {
          break;
        }
      }
      else
      {
LABEL_27:
        if (*(void *)(a1 + 80))
        {
          uint64_t v13 = *(void *)(a1 + 96);
          if (v13)
          {
            if (!v9)
            {
              CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, v13, @"Interface");
              CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), NetworkServiceEntity);
              CFRelease(NetworkServiceEntity);
              CFTypeID TypeID = CFDictionaryGetTypeID();
              if (Value)
              {
                if (CFGetTypeID(Value) == TypeID)
                {
                  CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(Value, @"UserDefinedName");
                  CFTypeID v18 = CFStringGetTypeID();
                  if (v17)
                  {
                    if (CFGetTypeID(v17) == v18)
                    {
                      CFStringAppend(Mutable, v17);
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        CFStringAppend(Mutable, *(CFStringRef *)(a1 + 16));
        if (*(void *)(a1 + 112) && !v9)
        {
          CFStringAppendFormat(Mutable, 0, @" (%@)", *(void *)(a1 + 112));
          break;
        }
        if (!v9) {
          break;
        }
      }
      CFStringAppend(Mutable, @" --> ");
      a1 = v9;
    }
  }
  CFStringRef Copy = CFStringCreateCopy(0, Mutable);
  CFRelease(Mutable);
  return Copy;
}

CFStringRef __SCNetworkInterfaceCopyOldNonLocalizedDisplayName(CFTypeRef cf, uint64_t a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_8:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_8;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_8;
  }

  return copy_display_name((uint64_t)cf, 0, a2);
}

uint64_t __SCNetworkInterfaceGetUserDefinedName(void *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[4];
  }
  return 0;
}

const void *__SCNetworkInterfaceGetTemplateOverrides(uint64_t a1, const void *a2)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 224);
  if (!v2) {
    return 0;
  }

  return CFDictionaryGetValue(v2, a2);
}

CFTypeID SCNetworkInterfaceGetTypeID(void)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  return __kSCNetworkInterfaceTypeID;
}

uint64_t __SCNetworkInterfaceSetDefaultConfiguration(const __SCNetworkSet *a1, uint64_t a2, __CFString *a3, const void *a4, int a5)
{
  DefaultConfigurationType = a3;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (a3) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (DefaultConfigurationType) {
      goto LABEL_4;
    }
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a2);
  if (!DefaultConfigurationType) {
    return 0;
  }
LABEL_4:
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)a4)) {
    a4 = 0;
  }
  if (!a1) {
    return 0;
  }
  CFStringRef SetID = SCNetworkSetGetSetID(a1);
  CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(0, (uint64_t)SetID, *(void *)(a2 + 112), (uint64_t)DefaultConfigurationType);
  if (SetNetworkInterfaceEntity)
  {
    CFStringRef v13 = SetNetworkInterfaceEntity;
    uint64_t v14 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(a2 + 80), SetNetworkInterfaceEntity, a4, 0);
    CFRelease(v13);
    if (v14)
    {
      CFStringRef v15 = *(__CFDictionary **)(a2 + 104);
      if (v15)
      {
        CFDictionaryRemoveValue(v15, DefaultConfigurationType);
        if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 104)))
        {
          CFRelease(*(CFTypeRef *)(a2 + 104));
          *(void *)(a2 + 104) = 0;
        }
      }
    }
    return v14;
  }
  if (!a5)
  {
    _SCErrorSet(1004);
    return 0;
  }
  if (!a4) {
    a4 = (const void *)*MEMORY[0x1E4F1D260];
  }
  CFMutableStringRef Mutable = *(__CFDictionary **)(a2 + 104);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(a2 + 104) = Mutable;
  }
  CFDictionarySetValue(Mutable, DefaultConfigurationType, a4);
  return 1;
}

uint64_t __SCNetworkInterfaceSetConfiguration(uint64_t a1, __CFString *a2, const void *a3, uint64_t a4)
{
  DefaultConfigurationType = a2;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (a2) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (DefaultConfigurationType) {
      goto LABEL_4;
    }
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType(a1);
  if (!DefaultConfigurationType) {
    return 0;
  }
LABEL_4:
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a3 && CFGetTypeID(a3) == TypeID && !CFDictionaryGetCount((CFDictionaryRef)a3)) {
    a3 = 0;
  }
  uint64_t v9 = copyConfigurationPaths(a1, (uint64_t)DefaultConfigurationType);
  if (v9)
  {
    CFArrayRef v10 = v9;
    CFIndex Count = CFArrayGetCount(v9);
    if (Count < 1)
    {
      a4 = 0;
    }
    else
    {
      CFIndex v12 = Count;
      CFIndex v13 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v13);
        a4 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(a1 + 80), ValueAtIndex, a3, 0);
        if (!a4) {
          break;
        }
        if (v12 == ++v13)
        {
          CFStringRef v15 = *(__CFDictionary **)(a1 + 104);
          if (v15)
          {
            CFDictionaryRemoveValue(v15, DefaultConfigurationType);
            if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 104)))
            {
              CFRelease(*(CFTypeRef *)(a1 + 104));
              *(void *)(a1 + 104) = 0;
            }
          }
          break;
        }
      }
    }
    CFRelease(v10);
  }
  else if (a4)
  {
    if (!a3) {
      a3 = (const void *)*MEMORY[0x1E4F1D260];
    }
    CFMutableStringRef Mutable = *(__CFDictionary **)(a1 + 104);
    if (!Mutable)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(a1 + 104) = Mutable;
    }
    CFDictionarySetValue(Mutable, DefaultConfigurationType, a3);
    return 1;
  }
  else
  {
    _SCErrorSet(1004);
  }
  return a4;
}

__CFArray *copyConfigurationPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  v11[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFArrayRef v5 = *(const void **)(a1 + 16);
  uint64_t v6 = (CFTypeRef **)configurations;
  while (!CFEqual(v5, **v6))
  {
    ++v4;
    v6 += 5;
    if (v4 == 19)
    {
      uint64_t v7 = *(void *)(a1 + 96);
      goto LABEL_10;
    }
  }
  uint64_t v7 = *(void *)(a1 + 96);
  if ((0x5BF13uLL >> v4))
  {
LABEL_10:
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, v7, a2);
    v11[0] = NetworkServiceEntity;
    CFArrayRef v10 = CFArrayCreate(0, v11, 1, MEMORY[0x1E4F1D510]);
    CFRelease(NetworkServiceEntity);
    return v10;
  }
  if (!v7) {
    return 0;
  }

  return copyPerInterfaceConfigurationPaths(a1, a2);
}

Boolean SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef interface, CFDictionaryRef config)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_11:
      _SCErrorSet(1002);
      goto LABEL_12;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v4) {
    goto LABEL_11;
  }
  DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)interface);
  if (!DefaultConfigurationType)
  {
LABEL_12:
    LOBYTE(v6) = 0;
    return v6;
  }
  int v6 = __SCNetworkInterfaceSetConfiguration((uint64_t)interface, DefaultConfigurationType, config, 0);
  if (v6)
  {
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      CFStringRef v17 = (char *)v21 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      CFDictionaryRef v19 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v19 = config;
      }
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = interface;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = v19;
      __SC_log_send(7, (uint64_t)v7, v8, v17);
    }
  }
  return v6;
}

Boolean SCNetworkInterfaceSetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType, CFDictionaryRef config)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!interface)
    {
LABEL_11:
      _SCErrorSet(1002);
      goto LABEL_12;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!interface) {
      goto LABEL_11;
    }
  }
  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v6) {
    goto LABEL_11;
  }
  if (!__SCNetworkInterfaceIsValidExtendedConfigurationType(interface, extendedType, 1))
  {
LABEL_12:
    LOBYTE(v7) = 0;
    return v7;
  }
  int v7 = __SCNetworkInterfaceSetConfiguration((uint64_t)interface, (__CFString *)extendedType, config, 0);
  if (v7)
  {
    uint64_t v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)v22 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      CFDictionaryRef v20 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v20 = config;
      }
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = interface;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = v20;
      __SC_log_send(7, (uint64_t)v8, v9, v18);
    }
  }
  return v7;
}

uint64_t _SCNetworkInterfaceForceConfigurationRefresh(const __CFString *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, @"State:", a1, @"RefreshConfiguration");
    uint64_t v4 = SCDynamicStoreNotifyValue(0, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    return v4;
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

Boolean SCNetworkInterfaceForceConfigurationRefresh(SCNetworkInterfaceRef interface)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (interface) {
      goto LABEL_3;
    }
LABEL_22:
    int v9 = 1002;
    goto LABEL_23;
  }
  if (!interface) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(interface) != v2) {
    goto LABEL_22;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  if (!BSDName) {
    goto LABEL_22;
  }
  CFStringRef v4 = BSDName;
  uint64_t v5 = *((void *)interface + 10);
  if (v5 && *(void *)(v5 + 312))
  {
    cf[0] = 0;
    int v11 = 0;
    if (*(_DWORD *)(v5 + 320) || (int helper = __SCPreferencesCreate_helper(v5)) != 0)
    {
      int v7 = (mach_port_t *)(v5 + 320);
      if (!_SCSerializeString(v4, (CFDataRef *)cf, 0, 0)) {
        goto LABEL_27;
      }
      int v11 = 0;
      int v8 = _SCHelperExec(*v7, 200, (const __CFData *)cf[0], &v11, 0);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v8)
      {
        int v9 = v11;
        if (!v11)
        {
          LOBYTE(helper) = 1;
          return helper;
        }
      }
      else
      {
LABEL_27:
        if (*v7) {
          _SCHelperClose(v7);
        }
        int v9 = 1003;
        int v11 = 1003;
      }
LABEL_23:
      _SCErrorSet(v9);
      LOBYTE(helper) = 0;
    }
  }
  else
  {
    LOBYTE(helper) = _SCNetworkInterfaceForceConfigurationRefresh(BSDName);
  }
  return helper;
}

uint64_t SCNetworkInterfaceCheckPassword(const void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  *(void *)CFStringRef v23 = 0;
  if (!checkInterfacePassword(a1, a2, v23, &v22)) {
    return 0;
  }
  switch(a2)
  {
    case 1:
      CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFDictionaryRef PasswordID = getPasswordID(Configuration, v22);
      uint64_t v6 = *(void *)v23;
      int v7 = &kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_15;
    case 2:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
      if (CFEqual(InterfaceType, @"PPP")) {
        ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"IPSec");
      }
      else {
        ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      }
      CFDictionaryRef v14 = ExtendedConfiguration;
      uint64_t v15 = copySharedSecretID(ExtendedConfiguration, v22);
      uint64_t v16 = *(void *)v23;
      uint64_t v17 = @"SharedSecret";
      uint64_t v18 = @"SharedSecretEncryption";
      uint64_t v19 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
      goto LABEL_20;
    case 3:
      CFDictionaryRef v10 = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"EAPOL");
      if (!v10)
      {
        CFStringGetTypeID();
        return 0;
      }
      CFDictionaryRef Value = CFDictionaryGetValue(v10, @"UserPasswordKeychainItemID");
      CFTypeID TypeID = CFStringGetTypeID();
      if (!Value || CFGetTypeID(Value) != TypeID) {
        return 0;
      }
      uint64_t result = _SCPreferencesSystemKeychainPasswordItemExists();
      break;
    case 4:
      CFDictionaryRef v14 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      uint64_t v15 = copyXAuthID(v14, v22);
      uint64_t v16 = *(void *)v23;
      uint64_t v17 = @"XAuthPassword";
      uint64_t v18 = @"XAuthPasswordEncryption";
      uint64_t v19 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_20:
      uint64_t password = __extract_password(v16, v14, v17, v18, *v19, (uint64_t)v15, 0);
      CFRelease(v15);
      return password;
    case 5:
      CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFDictionaryRef PasswordID = getPasswordID(Configuration, v22);
      uint64_t v6 = *(void *)v23;
      int v7 = (const CFStringRef *)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_15:
      CFStringRef v20 = *v7;
      return __extract_password(v6, Configuration, @"AuthPassword", @"AuthPasswordEncryption", v20, (uint64_t)PasswordID, 0);
    default:
      _SCErrorSet(1002);
      return 0;
  }
  return result;
}

uint64_t checkInterfacePassword(CFTypeRef cf, int a2, void *a3, void *a4)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
LABEL_17:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v8 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v8) {
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)cf + 12);
  *a4 = v9;
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v10 = *((void *)cf + 10);
  *a3 = v10;
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t result = 1;
  switch(a2)
  {
    case 1:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      uint64_t v13 = @"PPP";
      goto LABEL_14;
    case 2:
      CFStringRef v14 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      if (CFEqual(v14, @"PPP"))
      {
        Interface = SCNetworkInterfaceGetInterface((SCNetworkInterfaceRef)cf);
        if (!Interface) {
          goto LABEL_17;
        }
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
        uint64_t v13 = @"L2TP";
      }
      else
      {
        uint64_t v13 = @"IPSec";
        CFStringRef InterfaceType = v14;
      }
LABEL_14:
      if (!CFEqual(InterfaceType, v13)) {
        goto LABEL_17;
      }
      uint64_t result = 1;
      break;
    case 4:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      uint64_t v13 = @"IPSec";
      goto LABEL_14;
    case 5:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
      uint64_t v13 = @"VPN";
      goto LABEL_14;
    default:
      return result;
  }
  return result;
}

CFDictionaryRef getPasswordID(const __CFDictionary *result, uint64_t a2)
{
  if (result)
  {
    CFDictionaryRef v3 = result;
    CFDictionaryRef Value = CFDictionaryGetValue(result, @"AuthPasswordEncryption");
    CFTypeID TypeID = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, @"Keychain")) {
      uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(v3, @"AuthPassword");
    }
    else {
      uint64_t result = 0;
    }
  }
  if (!result) {
    return (const __CFDictionary *)a2;
  }
  return result;
}

__CFString *copySharedSecretID(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict
    && (Value = CFDictionaryGetValue(theDict, @"SharedSecretEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(theDict, @"SharedSecret")) != 0)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }
  else
  {
    CFStringRef PasswordID = (const __CFString *)getPasswordID(theDict, a2);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, PasswordID);
    CFStringAppend(MutableCopy, @".SS");
  }
  return MutableCopy;
}

__CFString *copyXAuthID(CFDictionaryRef theDict, uint64_t a2)
{
  if (theDict
    && (Value = CFDictionaryGetValue(theDict, @"XAuthPasswordEncryption"), CFTypeID TypeID = CFStringGetTypeID(), Value)
    && CFGetTypeID(Value) == TypeID
    && CFEqual(Value, @"Keychain")
    && (uint64_t v6 = (__CFString *)CFDictionaryGetValue(theDict, @"XAuthPassword")) != 0)
  {
    CFMutableStringRef MutableCopy = v6;
    CFRetain(v6);
  }
  else
  {
    CFStringRef PasswordID = (const __CFString *)getPasswordID(theDict, a2);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, PasswordID);
    CFStringAppend(MutableCopy, @".XAUTH");
  }
  return MutableCopy;
}

uint64_t SCNetworkInterfaceCopyPassword(const __SCNetworkInterface *a1, int a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v22 = 0;
  v23[0] = 0;
  uint64_t v21 = 0;
  if (checkInterfacePassword(a1, a2, v22, &v21))
  {
    switch(a2)
    {
      case 1:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        CFDictionaryRef PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
        goto LABEL_13;
      case 2:
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
        if (CFEqual(InterfaceType, @"PPP")) {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(a1, @"IPSec");
        }
        else {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        }
        CFDictionaryRef v14 = ExtendedConfiguration;
        uint64_t v15 = copySharedSecretID(ExtendedConfiguration, v21);
        uint64_t v16 = *(void *)v22;
        uint64_t v17 = @"SharedSecret";
        uint64_t v18 = @"SharedSecretEncryption";
        uint64_t v19 = (const void **)&kSCValNetIPSecSharedSecretEncryptionKeychain;
        goto LABEL_20;
      case 3:
        CFDictionaryRef v11 = SCNetworkInterfaceGetExtendedConfiguration(a1, @"EAPOL");
        if (v11)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v11, @"UserPasswordKeychainItemID");
          CFTypeID TypeID = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID)
          {
            v23[0] = _SCPreferencesSystemKeychainPasswordItemCopy();
            return v23[0];
          }
        }
        else
        {
          CFStringGetTypeID();
        }
        int v8 = 1001;
LABEL_16:
        _SCErrorSet(v8);
        break;
      case 4:
        CFDictionaryRef v14 = SCNetworkInterfaceGetConfiguration(a1);
        uint64_t v15 = copyXAuthID(v14, v21);
        uint64_t v16 = *(void *)v22;
        uint64_t v17 = @"XAuthPassword";
        uint64_t v18 = @"XAuthPasswordEncryption";
        uint64_t v19 = (const void **)&kSCValNetIPSecXAuthPasswordEncryptionKeychain;
LABEL_20:
        __extract_password(v16, v14, v17, v18, *v19, (uint64_t)v15, v23);
        CFRelease(v15);
        return v23[0];
      case 5:
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        CFDictionaryRef PasswordID = getPasswordID(Configuration, v21);
        uint64_t v6 = *(void *)v22;
        int v7 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_13:
        __extract_password(v6, Configuration, @"AuthPassword", @"AuthPasswordEncryption", *v7, (uint64_t)PasswordID, v23);
        return v23[0];
      default:
        int v8 = 1002;
        goto LABEL_16;
    }
  }
  return 0;
}

uint64_t SCNetworkInterfaceRemovePassword(const __SCNetworkInterface *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0;
  *(void *)uint64_t v24 = 0;
  if (checkInterfacePassword(a1, a2, v24, &v23))
  {
    switch(a2)
    {
      case 1:
        CFDictionaryRef config = 0;
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        CFDictionaryRef PasswordID = getPasswordID(Configuration, v23);
        uint64_t v6 = *(void *)v24;
        int v7 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
        goto LABEL_16;
      case 2:
        CFDictionaryRef config = 0;
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
        int v10 = CFEqual(InterfaceType, @"PPP");
        if (v10) {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(a1, @"IPSec");
        }
        else {
          ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        }
        CFDictionaryRef v20 = ExtendedConfiguration;
        uint64_t v17 = copySharedSecretID(ExtendedConfiguration, v23);
        if (!__remove_password(*(uint64_t *)v24, v20, @"SharedSecret", @"SharedSecretEncryption", @"Keychain", (uint64_t)v17, &config))goto LABEL_30; {
        if (!v10)
        }
          goto LABEL_27;
        uint64_t v21 = SCNetworkInterfaceSetExtendedConfiguration(a1, @"IPSec", config);
        goto LABEL_28;
      case 3:
        CFDictionaryRef v12 = SCNetworkInterfaceGetExtendedConfiguration(a1, @"EAPOL");
        if (v12)
        {
          CFDictionaryRef Value = CFDictionaryGetValue(v12, @"UserPasswordKeychainItemID");
          CFTypeID TypeID = CFStringGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID)
          {
            return _SCPreferencesSystemKeychainPasswordItemRemove();
          }
        }
        else
        {
          CFStringGetTypeID();
        }
        int v8 = 1001;
LABEL_21:
        _SCErrorSet(v8);
        break;
      case 4:
        CFDictionaryRef config = 0;
        CFDictionaryRef v16 = SCNetworkInterfaceGetConfiguration(a1);
        uint64_t v17 = copyXAuthID(v16, v23);
        if (__remove_password(*(uint64_t *)v24, v16, @"XAuthPassword", @"XAuthPasswordEncryption", @"Keychain", (uint64_t)v17, &config))
        {
LABEL_27:
          uint64_t v21 = SCNetworkInterfaceSetConfiguration(a1, config);
LABEL_28:
          uint64_t v18 = v21;
          if (config) {
            CFRelease(config);
          }
        }
        else
        {
LABEL_30:
          uint64_t v18 = 0;
        }
        CFDictionaryRef v19 = (CFDictionaryRef)v17;
        goto LABEL_32;
      case 5:
        CFDictionaryRef config = 0;
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(a1);
        CFDictionaryRef PasswordID = getPasswordID(Configuration, v23);
        uint64_t v6 = *(void *)v24;
        int v7 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_16:
        if (!__remove_password(v6, Configuration, @"AuthPassword", @"AuthPasswordEncryption", *v7, (uint64_t)PasswordID, &config))return 0; {
        uint64_t v18 = SCNetworkInterfaceSetConfiguration(a1, config);
        }
        CFDictionaryRef v19 = config;
        if (!config) {
          return v18;
        }
LABEL_32:
        CFRelease(v19);
        return v18;
      default:
        int v8 = 1002;
        goto LABEL_21;
    }
  }
  return 0;
}

uint64_t SCNetworkInterfaceSetPassword(const void *a1, int a2)
{
  v53[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFStringRef v52 = 0;
  v53[0] = 0;
  if (!checkInterfacePassword(a1, a2, v53, &v52)) {
    return 0;
  }
  switch(a2)
  {
    case 1:
      CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFStringRef v5 = v52;
      CFDictionaryRef PasswordID = getPasswordID(Configuration, (uint64_t)v52);
      if (Configuration
        && (CFDictionaryGetValue(Configuration, @"AuthName"),
            CFDictionaryGetValue(Configuration, @"UserDefinedName")))
      {
        uint64_t Private = 0;
      }
      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0, v53[0], v5, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }
      if (bundle) {
        CFStringRef v25 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_KIND_PPP_PASSWORD", @"PPP Password", 0);
      }
      else {
        CFStringRef v25 = 0;
      }
      if (!_SCPreferencesSystemKeychainPasswordItemSet()) {
        goto LABEL_52;
      }
      if (Configuration) {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
      }
      else {
        CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFTypeID v39 = MutableCopy;
      CFDictionarySetValue(MutableCopy, @"AuthPassword", PasswordID);
      CFStringRef v40 = (const void **)&kSCValNetPPPAuthPasswordEncryptionKeychain;
      goto LABEL_88;
    case 2:
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
      int v10 = CFEqual(InterfaceType, @"PPP");
      CFDictionaryRef v11 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFDictionaryRef v12 = v11;
      if (v10)
      {
        ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"IPSec");
      }
      else
      {
        ExtendedCFDictionaryRef Configuration = v11;
        CFDictionaryRef v12 = 0;
      }
      CFStringRef v27 = v52;
      CFStringRef v28 = copySharedSecretID(ExtendedConfiguration, (uint64_t)v52);
      int v49 = v10;
      if (!ExtendedConfiguration) {
        goto LABEL_54;
      }
      value = 0;
      CFArrayRef v51 = 0;
      if (CFDictionaryGetValueIfPresent(ExtendedConfiguration, @"LocalIdentifierType", (const void **)&value)
        && CFEqual(value, @"KeyID")
        && CFDictionaryGetValueIfPresent(ExtendedConfiguration, @"LocalIdentifier", (const void **)&v51))
      {
        isA_CFString(v51);
      }
      if (((CFDictionaryRef v29 = ExtendedConfiguration, !v10) || (CFDictionaryRef v29 = v12) != 0)
        && CFDictionaryGetValue(v29, @"UserDefinedName"))
      {
        CFRange v30 = 0;
      }
      else
      {
LABEL_54:
        CFRange v30 = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0, v53[0], v27, a1);
        if (!SCNetworkServiceGetName(v30)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }
      if (bundle) {
        CFStringRef v32 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_KIND_IPSEC_SHARED_SECRET", @"IPSec Shared Secret", 0);
      }
      else {
        CFStringRef v32 = 0;
      }
      uint64_t Private = (const __SCNetworkService *)v28;
      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (ExtendedConfiguration) {
          CFMutableStringRef Mutable = CFDictionaryCreateMutableCopy(0, 0, ExtendedConfiguration);
        }
        else {
          CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        uint64_t v46 = Mutable;
        CFDictionarySetValue(Mutable, @"SharedSecret", v28);
        CFDictionarySetValue(v46, @"SharedSecretEncryption", @"Keychain");
        if (v49) {
          uint64_t v47 = SCNetworkInterfaceSetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"IPSec", v46);
        }
        else {
          uint64_t v47 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v46);
        }
        uint64_t v8 = v47;
        CFRelease(v46);
      }
      else
      {
        uint64_t v8 = 0;
      }
      if (v32) {
        CFRelease(v32);
      }
      if (v30) {
        CFRelease(v30);
      }
      goto LABEL_105;
    case 3:
      CFDictionaryRef v14 = SCNetworkInterfaceGetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"EAPOL");
      CFDictionaryRef v15 = v14;
      if (v14
        && (v16 = CFDictionaryGetValue(v14, @"UserPasswordKeychainItemID"), CFTypeID TypeID = CFStringGetTypeID(), v16)
        && CFGetTypeID(v16) == TypeID)
      {
        CFRetain(v16);
      }
      else
      {
        CFUUIDRef v24 = CFUUIDCreate(0);
        CFDictionaryRef v16 = CFUUIDCreateString(0, v24);
        CFRelease(v24);
        if (!v15) {
          goto LABEL_68;
        }
      }
      CFDictionaryGetValue(v15, @"UserName");
LABEL_68:
      if (bundle)
      {
        CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        if (LocalizedDisplayName)
        {
          CFStringRef v36 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_DESCRIPTION_EAPOL_INTERFACE", @"Network Connection (%@)", 0);
          CFStringRef v37 = CFStringCreateWithFormat(0, 0, v36, LocalizedDisplayName);
          CFRelease(v36);
        }
        else
        {
          CFStringRef v37 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_DESCRIPTION_EAPOL", @"Network Connection", 0);
        }
        CFStringRef v38 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_KIND_EAPOL", @"802.1X Password", 0);
      }
      else
      {
        CFStringRef v38 = 0;
        CFStringRef v37 = 0;
      }
      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (v15) {
          CFStringRef v41 = CFDictionaryCreateMutableCopy(0, 0, v15);
        }
        else {
          CFStringRef v41 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFDictionaryRef v42 = v41;
        CFDictionarySetValue(v41, @"UserPasswordKeychainItemID", v16);
        uint64_t v8 = SCNetworkInterfaceSetExtendedConfiguration((SCNetworkInterfaceRef)a1, @"EAPOL", v42);
        CFRelease(v42);
      }
      else
      {
        uint64_t v8 = 0;
      }
      CFRelease(v16);
      if (v37) {
        CFRelease(v37);
      }
      if (!v38) {
        return v8;
      }
      CFStringRef v43 = v38;
      goto LABEL_106;
    case 4:
      CFDictionaryRef v18 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFStringRef v19 = v52;
      CFDictionaryRef v20 = copyXAuthID(v18, (uint64_t)v52);
      if (v18 && (CFDictionaryGetValue(v18, @"XAuthName"), CFDictionaryGetValue(v18, @"UserDefinedName")))
      {
        uint64_t Private = 0;
      }
      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0, v53[0], v19, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }
      if (bundle) {
        CFStringRef v25 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_KIND_IPSEC_XAUTH_PASSWORD", @"IPSec XAuth Password", 0);
      }
      else {
        CFStringRef v25 = 0;
      }
      if (_SCPreferencesSystemKeychainPasswordItemSet())
      {
        if (v18) {
          CFDictionaryRef v33 = CFDictionaryCreateMutableCopy(0, 0, v18);
        }
        else {
          CFDictionaryRef v33 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFStringRef v45 = v33;
        CFDictionarySetValue(v33, @"XAuthPassword", v20);
        CFDictionarySetValue(v45, @"XAuthPasswordEncryption", @"Keychain");
        uint64_t v8 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v45);
        CFRelease(v45);
      }
      else
      {
        uint64_t v8 = 0;
      }
      CFStringRef v44 = v20;
      goto LABEL_92;
    case 5:
      CFDictionaryRef v21 = SCNetworkInterfaceGetConfiguration((SCNetworkInterfaceRef)a1);
      CFStringRef v22 = v52;
      CFDictionaryRef v23 = getPasswordID(v21, (uint64_t)v52);
      if (v21 && (CFDictionaryGetValue(v21, @"AuthName"), CFDictionaryGetValue(v21, @"UserDefinedName")))
      {
        uint64_t Private = 0;
      }
      else
      {
        uint64_t Private = (const __SCNetworkService *)__SCNetworkServiceCreatePrivate(0, v53[0], v22, a1);
        if (!SCNetworkServiceGetName(Private)) {
          SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
        }
      }
      if (bundle) {
        CFStringRef v25 = CFBundleCopyLocalizedString((CFBundleRef)bundle, @"KEYCHAIN_KIND_VPN_PASSWORD", @"VPN Password", 0);
      }
      else {
        CFStringRef v25 = 0;
      }
      if (!_SCPreferencesSystemKeychainPasswordItemSet())
      {
LABEL_52:
        uint64_t v8 = 0;
        if (!v25) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      if (v21) {
        CFIndex v26 = CFDictionaryCreateMutableCopy(0, 0, v21);
      }
      else {
        CFIndex v26 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFTypeID v39 = v26;
      CFDictionarySetValue(v26, @"AuthPassword", v23);
      CFStringRef v40 = (const void **)kSCValNetVPNAuthPasswordEncryptionKeychain;
LABEL_88:
      CFDictionarySetValue(v39, @"AuthPasswordEncryption", *v40);
      uint64_t v8 = SCNetworkInterfaceSetConfiguration((SCNetworkInterfaceRef)a1, v39);
      CFStringRef v44 = v39;
LABEL_92:
      CFRelease(v44);
      if (v25) {
LABEL_93:
      }
        CFRelease(v25);
LABEL_94:
      if (Private)
      {
LABEL_105:
        CFStringRef v43 = Private;
LABEL_106:
        CFRelease(v43);
      }
      break;
    default:
      _SCErrorSet(1002);
      return 0;
  }
  return v8;
}

uint64_t SCNetworkInterfaceSetAdvisory(const __SCNetworkInterface *a1, unsigned int a2, const __CFString *a3)
{
  theString[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  theString[0] = 0;
  IPMonitorControl = (void *)_SCNetworkInterfaceGetIPMonitorControl(a1, theString);
  if (!IPMonitorControl) {
    return 0;
  }
  CFStringRef v6 = theString[0];

  return IPMonitorControlSetInterfaceAdvisory(IPMonitorControl, v6, a2, a3);
}

uint64_t _SCNetworkInterfaceGetIPMonitorControl(const __SCNetworkInterface *a1, CFStringRef *a2)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (!BSDName)
  {
    int v6 = 1002;
    goto LABEL_6;
  }
  uint64_t result = *((void *)a1 + 50);
  if (!result)
  {
    uint64_t result = IPMonitorControlCreate();
    if (result)
    {
      *((void *)a1 + 50) = result;
      goto LABEL_7;
    }
    int v6 = 1001;
LABEL_6:
    _SCErrorSet(v6);
    uint64_t result = 0;
  }
LABEL_7:
  *a2 = BSDName;
  return result;
}

BOOL SCNetworkInterfaceAdvisoryIsSpecificSet(const __SCNetworkInterface *a1, unsigned int a2)
{
  theString[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  theString[0] = 0;
  uint64_t IPMonitorControl = _SCNetworkInterfaceGetIPMonitorControl(a1, theString);
  if (!IPMonitorControl) {
    return 0;
  }
  CFStringRef v4 = theString[0];

  return IPMonitorControlIsInterfaceAdvisorySet(IPMonitorControl, v4, a2);
}

BOOL SCNetworkInterfaceAdvisoryIsSet(const __SCNetworkInterface *a1)
{
  return SCNetworkInterfaceAdvisoryIsSpecificSet(a1, 0);
}

CFStringRef SCNetworkInterfaceCopyAdvisoryNotificationKey(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    return IPMonitorControlCopyInterfaceAdvisoryNotificationKey(BSDName);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t SCNetworkInterfaceCopyAdvisoryInfo(const __SCNetworkInterface *a1)
{
  v2[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  v2[0] = 0;
  uint64_t result = _SCNetworkInterfaceGetIPMonitorControl(a1, v2);
  if (result)
  {
    uint64_t result = IPMonitorControlCopyInterfaceAdvisoryInfo(result, v2[0]);
    if (!result)
    {
      _SCErrorSet(1001);
      return 0;
    }
  }
  return result;
}

uint64_t SCNetworkInterfaceAdvisoryInfoGetAdvisory(const __CFDictionary *a1)
{
  return InterfaceAdvisoryInfoGetAdvisory(a1);
}

uint64_t SCNetworkInterfaceAdvisoryInfoGetProcessID(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessID(a1);
}

const void *SCNetworkInterfaceAdvisoryInfoGetProcessName(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessName(a1);
}

uint64_t SCNetworkInterfaceAdvisoryCopyInterfaceNames()
{
  uint64_t v0 = IPMonitorControlCreate();
  if (v0)
  {
    CFURLRef v1 = (const void *)v0;
    uint64_t v2 = IPMonitorControlCopyInterfaceAdvisoryInterfaceNames(v0);
    if (!v2) {
      _SCErrorSet(1001);
    }
    CFRelease(v1);
  }
  else
  {
    _SCErrorSet(1001);
    return 0;
  }
  return v2;
}

uint64_t _SCNetworkInterfaceCreateWithIONetworkInterfaceObject(uint64_t object)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  if (IOObjectConformsTo(object, "IONetworkInterface"))
  {
    CFStringRef v2 = @"HiddenInterface";
    uint64_t v3 = object;
    CFStringRef v4 = processNetworkInterface;
    int v5 = 1;
  }
  else
  {
    if (!IOObjectConformsTo(object, "IOSerialBSDClient")) {
      return 0;
    }
    CFStringRef v2 = @"HiddenPort";
    uint64_t v3 = object;
    CFStringRef v4 = processSerialInterface;
    int v5 = 0;
  }

  return createInterface(v3, (unsigned int (*)(uint64_t, uint64_t, __CFDictionary *, void, __CFDictionary *, void, __CFDictionary *))v4, v2, v5);
}

uint64_t _SCNetworkInterfaceGetConfigurationAction(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t _SCNetworkInterfaceIsBuiltin(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[176];
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsTrustRequired(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[240];
  }
  return 0;
}

const void *_SCNetworkInterfaceCopySlashDevPath(SCNetworkInterfaceRef interface)
{
  kern_return_t MatchingServices;
  kern_return_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  const void *CFProperty;
  io_registry_entry_t v22;
  io_registry_entry_t v23;
  CFDictionaryRef v24;
  CFDictionaryRef v25;
  const void *Value;
  CFTypeRef v27;
  CFTypeID TypeID;
  CFTypeID v29;
  CFStringRef BSDName;
  uint64_t v32;
  void *values;
  CFDictionaryRef v34;
  void *keys;
  __CFString *v36;
  uint64_t v37;

  CFStringRef v37 = *MEMORY[0x1E4F143B8];
  HIDWORD(v32) = 0;
  CFURLRef v1 = (void *)*((void *)interface + 14);
  if (!v1) {
    return 0;
  }
  keys = 0;
  CFStringRef v36 = 0;
  values = 0;
  CFDictionaryRef v34 = 0;
  if (*((void *)interface + 15))
  {
    keys = @"IOTTYBaseName";
    values = v1;
    uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFStringRef v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    keys = @"IOProviderClass";
    CFStringRef v36 = @"IOPropertyMatch";
    values = @"IOSerialBSDClient";
    CFDictionaryRef v34 = v5;
    CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, v3, v4);
    CFRelease(v5);
    MatchingServices = IOServiceGetMatchingServices(masterPort, v6, (io_iterator_t *)&v32 + 1);
    if (MatchingServices)
    {
      uint64_t v8 = MatchingServices;
      uint64_t v9 = __log_SCNetworkConfiguration();
      int v10 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
      {
        CFDictionaryRef v11 = _os_log_pack_size();
        CFStringRef v19 = (char *)&v32 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        CFDictionaryRef v20 = (_DWORD *)_os_log_pack_fill();
        *CFDictionaryRef v20 = 67109120;
        v20[1] = v8;
        __SC_log_send(6, (uint64_t)v9, v10, v19);
      }
      goto LABEL_24;
    }
    while (1)
    {
      CFStringRef v22 = IOIteratorNext(HIDWORD(v32));
      if (!v22)
      {
        IOObjectRelease(HIDWORD(v32));
        break;
      }
      CFDictionaryRef v23 = v22;
      CFUUIDRef v24 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v22, "IOService", @"NetworkConfigurationOverrides", 0, 3u);
      if (v24)
      {
        CFStringRef v25 = v24;
        CFDictionaryRef Value = CFDictionaryGetValue(v24, @"Modem");
        if (Value)
        {
          CFStringRef v27 = Value;
          CFRetain(Value);
          CFRelease(v25);
          goto LABEL_13;
        }
        CFRelease(v25);
      }
      CFStringRef v27 = IORegistryEntrySearchCFProperty(v23, "IOService", @"DeviceModemOverrides", 0, 3u);
      if (!v27)
      {
        CFTypeRef CFProperty = 0;
        goto LABEL_21;
      }
LABEL_13:
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v27) != TypeID) {
        goto LABEL_18;
      }
      CFTypeRef CFProperty = CFDictionaryGetValue((CFDictionaryRef)v27, @"UniqueIdentifier");
      CFDictionaryRef v29 = CFStringGetTypeID();
      if (CFProperty)
      {
        if (CFGetTypeID(CFProperty) != v29 || !CFEqual(*((CFTypeRef *)interface + 15), CFProperty))
        {
LABEL_18:
          CFTypeRef CFProperty = 0;
          goto LABEL_19;
        }
        CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v23, @"IOTTYDevice", 0, 0);
      }
LABEL_19:
      CFRelease(v27);
LABEL_21:
      IOObjectRelease(v23);
      if (CFProperty)
      {
        IOObjectRelease(HIDWORD(v32));
        return CFProperty;
      }
    }
  }
LABEL_24:
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  CFTypeRef CFProperty = BSDName;
  if (BSDName) {
    CFRetain(BSDName);
  }
  return CFProperty;
}

BOOL _SCNetworkInterfaceIsCarPlay(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 21;
  }
  return 0;
}

BOOL _SCNetworkInterfaceIsBluetoothPAN(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 18;
  }
  return 0;
}

BOOL _SCNetworkInterfaceIsBluetoothPAN_NAP(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 19;
  }
  return 0;
}

BOOL _SCNetworkInterfaceIsBluetoothP2P(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 20;
  }
  return 0;
}

BOOL _SCNetworkInterfaceIsVMNET(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 23;
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsHiddenInterface(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[193];
  }
  return 0;
}

CFStringRef _SCNetworkInterfaceIsQoSMarkingProfileInstalled(const __SCNetworkInterface *a1)
{
  CFStringRef result = SCNetworkInterfaceGetBSDName(a1);
  if (result)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, @"State:", result, @"QoSMarkingPolicy");
    CFPropertyListRef v3 = SCDynamicStoreCopyValue(0, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    if (v3)
    {
      CFRelease(v3);
      return (const __CFString *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _SCNetworkInterfaceIsTethered(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return (cf[78] - 15) < 2;
  }
  return 0;
}

BOOL _SCNetworkInterfaceIsTetheredHotspot(_DWORD *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[78] == 15;
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsThunderbolt(CFTypeRef cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2) {
    return 0;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
  if (!CFEqual(InterfaceType, @"Bridge")) {
    return *((_DWORD *)cf + 78) == 13;
  }
  uint64_t result = SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)cf);
  if (result)
  {
    CFArrayRef v5 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result)
    {
      uint64_t v6 = result;
      if (result < 1) {
        return 1;
      }
      CFIndex v7 = 0;
      while (*((_DWORD *)CFArrayGetValueAtIndex(v5, v7) + 78) == 13)
      {
        ++v7;
        uint64_t result = 1;
        if (v6 == v7) {
          return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t _SCNetworkInterfaceIsEphemeral(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[241];
  }
  return 0;
}

uint64_t _SCNetworkInterfaceSupportsVMNETBridgedMode(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[244];
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsSelfNamed(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[242];
  }
  return 0;
}

uint64_t _SCNetworkInterfaceIsUserEthernet(unsigned __int8 *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2) {
    return cf[243];
  }
  return 0;
}

const void *SCNetworkInterfaceGetQoSMarkingPolicy(CFTypeRef cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    uint64_t result = __SCNetworkInterfaceGetConfiguration((uint64_t)cf, @"QoSMarkingPolicy");
    if (result) {
      return result;
    }
    goto LABEL_8;
  }
LABEL_7:
  LODWORD(result) = 1002;
LABEL_8:
  _SCErrorSet((int)result);
  return 0;
}

uint64_t SCNetworkInterfaceSetQoSMarkingPolicy(CFTypeRef cf, __CFString *a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_10:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_10;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_10;
  }
  uint64_t v5 = __SCNetworkInterfaceSetConfiguration((uint64_t)cf, @"QoSMarkingPolicy", a2, 0);
  if (v5)
  {
    uint64_t v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      CFDictionaryRef v16 = (char *)v20 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      CFDictionaryRef v18 = @"NULL";
      if (a2) {
        CFDictionaryRef v18 = a2;
      }
      *(_DWORD *)uint64_t v17 = 138412546;
      *(void *)(v17 + 4) = cf;
      *(_WORD *)(v17 + 12) = 2112;
      *(void *)(v17 + 14) = v18;
      __SC_log_send(7, (uint64_t)v6, v7, v16);
    }
  }
  return v5;
}

uint64_t SCNetworkInterfaceSetAutoConfigure(const __SCNetworkInterface *cf, int a2)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      goto LABEL_16;
    }
  }
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v4)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(InterfaceType, @"Bridge"))
    {
      return __SCBridgeInterfaceSetAutoConfigure((uint64_t)cf, a2);
    }
  }
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v7 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v7 || (CFStringRef v8 = SCNetworkInterfaceGetInterfaceType(cf), !CFEqual(v8, @"VLAN")))
  {
LABEL_16:
    _SCErrorSet(1002);
    return 0;
  }

  return __SCVLANInterfaceSetAutoConfigure((uint64_t)cf, a2);
}

uint64_t SCNetworkInterfaceGetAutoConfigure(const __SCNetworkInterface *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 1;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!cf) {
      return 1;
    }
  }
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) == v2)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(cf);
    if (CFEqual(InterfaceType, @"Bridge"))
    {
      return __SCBridgeInterfaceGetAutoConfigure((uint64_t)cf);
    }
  }
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  uint64_t v5 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v5) {
    return 1;
  }
  CFStringRef v6 = SCNetworkInterfaceGetInterfaceType(cf);
  if (!CFEqual(v6, @"VLAN")) {
    return 1;
  }

  return __SCVLANInterfaceGetAutoConfigure((uint64_t)cf);
}

__CFArray *__SCNetworkInterfaceCopyDeepConfiguration(const __SCNetworkSet *a1, const __SCNetworkInterface *Interface)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v5 = Mutable;
  if (Interface)
  {
    CFDictionaryRef v6 = (CFDictionaryRef)*MEMORY[0x1E4F1D260];
    uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFStringRef v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFIndex v26 = Mutable;
    do
    {
      uint64_t v9 = CFDictionaryCreateMutable(0, 0, v7, v8);
      DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)Interface);
      if (DefaultConfigurationType)
      {
        uint64_t v11 = DefaultConfigurationType;
        CFDictionaryRef v12 = a1
            ? __SCNetworkInterfaceGetDefaultConfiguration(a1, (uint64_t)Interface)
            : (CFDictionaryRef)__SCNetworkInterfaceGetConfiguration((uint64_t)Interface, DefaultConfigurationType);
        CFDictionaryRef v13 = v12 ? v12 : v6;
        CFDictionarySetValue(v9, v11, v13);
        CFArrayRef v14 = extendedConfigurationTypes((uint64_t)Interface);
        if (v14)
        {
          CFArrayRef v15 = v14;
          CFDictionaryRef v16 = a1;
          uint64_t v17 = v8;
          CFDictionaryRef v18 = v7;
          CFIndex Count = CFArrayGetCount(v14);
          if (Count >= 1)
          {
            CFIndex v20 = Count;
            for (CFIndex i = 0; i != v20; ++i)
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v15, i);
              CFDictionaryRef Configuration = (const __CFDictionary *)__SCNetworkInterfaceGetConfiguration((uint64_t)Interface, ValueAtIndex);
              if (Configuration) {
                CFDictionaryRef v24 = Configuration;
              }
              else {
                CFDictionaryRef v24 = v6;
              }
              CFDictionarySetValue(v9, ValueAtIndex, v24);
            }
          }
          CFRelease(v15);
          uint64_t v7 = v18;
          CFStringRef v8 = v17;
          a1 = v16;
          uint64_t v5 = v26;
        }
      }
      CFArrayAppendValue(v5, v9);
      CFRelease(v9);
      Interface = SCNetworkInterfaceGetInterface(Interface);
    }
    while (Interface);
  }
  return v5;
}

CFMutableArrayRef extendedConfigurationTypes(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef Mutable = 0;
  SCDynamicStoreContext context = __SCNetworkInterfaceGetDefaultConfigurationType(a1);
  if (!context) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (*(void *)(a1 + 96) && findPerInterfaceConfiguration(a1) != -1)
  {
    uint64_t Private = __SCNetworkServiceCreatePrivate(0, *(const void **)(a1 + 80), *(const __CFString **)(a1 + 96), (const void *)a1);
    CFArrayRef v3 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 80));
    if (v3)
    {
      CFArrayRef v4 = v3;
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        CFIndex v7 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v4, v7);
          CFArrayRef v9 = SCNetworkSetCopyServices(ValueAtIndex);
          v21.CFIndex length = CFArrayGetCount(v9);
          v21.CFIndex location = 0;
          int v10 = CFArrayContainsValue(v9, v21, Private);
          CFRelease(v9);
          if (v10) {
            break;
          }
          if (v6 == ++v7) {
            goto LABEL_17;
          }
        }
        CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
        CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(0, (uint64_t)SetID, *(void *)(a1 + 112), 0);
        CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), SetNetworkInterfaceEntity);
        CFRelease(SetNetworkInterfaceEntity);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (Value && CFGetTypeID(Value) == TypeID) {
          CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)__addExtendedConfigurationType, &context);
        }
        CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 104);
        if (v16) {
          CFDictionaryApplyFunction(v16, (CFDictionaryApplierFunction)__addExtendedConfigurationType, &context);
        }
      }
LABEL_17:
      CFRelease(Private);
      CFArrayRef v11 = v4;
    }
    else
    {
      CFArrayRef v11 = (const __CFArray *)Private;
    }
    CFRelease(v11);
  }
  return Mutable;
}

uint64_t __SCNetworkInterfaceIsBusyMember(const __SCPreferences *a1, const __SCNetworkInterface *cf, int a3)
{
  SCNetworkInterfaceRef Interface = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (!Interface) {
      return 0;
    }
  }
  uint64_t v6 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(Interface) != v6) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFArrayRef v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    __SCBridgeInterfaceListCollectMembers(v8, Mutable, a3);
    CFRelease(v9);
  }
  if (CFSetGetCount(Mutable))
  {
    while (1)
    {
      uint64_t v10 = CFSetContainsValue(Mutable, Interface);
      if (v10) {
        break;
      }
      SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
      if (!Interface) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = v10;
  }
  else
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  CFRelease(Mutable);
  return v11;
}

SCNetworkInterfaceRef __SCNetworkInterfaceSetDeepConfiguration(SCNetworkInterfaceRef result, const __SCNetworkInterface *a2, CFArrayRef theArray, __n128 a4)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFArrayRef v4 = theArray;
    uint64_t v5 = a2;
    uint64_t v6 = result;
    CFIndex v7 = 0;
    CFDictionaryRef v85 = (const __CFDictionary *)*MEMORY[0x1E4F1D260];
    a4.n128_u64[0] = 138412546;
    __n128 v83 = a4;
    a4.n128_u64[0] = 138412802;
    __n128 v84 = a4;
    SCNetworkInterfaceRef v80 = result;
    CFArrayRef v81 = theArray;
    do
    {
      CFIndex v82 = v7;
      if (v4)
      {
        CFDictionaryRef ValueAtIndex = (CFDictionaryRef)CFArrayGetValueAtIndex(v4, v7);
        DefaultConfigurationType = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)v5);
        if (!DefaultConfigurationType) {
          goto LABEL_44;
        }
        CFArrayRef v9 = DefaultConfigurationType;
        CFDictionaryRef Value = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFDictionaryRef Value = (CFDictionaryRef)CFDictionaryGetValue(ValueAtIndex, v9);
          int v88 = 0;
          goto LABEL_11;
        }
        CFDictionaryRef ValueAtIndex = 0;
      }
      else
      {
        uint64_t v11 = __SCNetworkInterfaceGetDefaultConfigurationType((uint64_t)v5);
        if (!v11) {
          goto LABEL_44;
        }
        CFArrayRef v9 = v11;
        CFDictionaryRef ValueAtIndex = 0;
        CFDictionaryRef Value = 0;
      }
      int v88 = 1;
LABEL_11:
      if (Value == v85) {
        CFDictionaryRef v12 = 0;
      }
      else {
        CFDictionaryRef v12 = (__CFString *)Value;
      }
      if (v6) {
        int v13 = __SCNetworkInterfaceSetDefaultConfiguration(v6, (uint64_t)v5, v9, v12, 1);
      }
      else {
        int v13 = __SCNetworkInterfaceSetConfiguration((uint64_t)v5, v9, v12, 1);
      }
      int v14 = v13;
      CFArrayRef v15 = __log_SCNetworkConfiguration();
      if (v14)
      {
        uint64_t v16 = _SC_syslog_os_log_mapping(7);
        if (!__SC_log_enabled(7, v15, (os_log_type_t)v16)) {
          goto LABEL_25;
        }
        uint64_t v17 = _os_log_pack_size();
        CFStringRef v25 = (char *)&v79 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v26 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v26 = v84.n128_u32[0];
        CFStringRef v27 = @"NULL";
        if (v12) {
          CFStringRef v27 = v12;
        }
        *(void *)(v26 + 4) = v5;
        *(_WORD *)(v26 + 12) = 2112;
        *(void *)(v26 + 14) = v9;
        *(_WORD *)(v26 + 22) = 2112;
        *(void *)(v26 + 24) = v27;
        int v28 = 7;
        uint64_t v29 = (uint64_t)v15;
        uint64_t v30 = v16;
        uint64_t v31 = v25;
      }
      else
      {
        uint64_t v32 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v15, (os_log_type_t)v32)) {
          goto LABEL_25;
        }
        uint64_t v33 = _os_log_pack_size();
        CFStringRef v41 = (char *)&v79 - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v42 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v42 = v83.n128_u32[0];
        *(void *)(v42 + 4) = v5;
        *(_WORD *)(v42 + 12) = 2112;
        *(void *)(v42 + 14) = v9;
        int v28 = 6;
        uint64_t v29 = (uint64_t)v15;
        uint64_t v30 = v32;
        uint64_t v31 = v41;
      }
      __SC_log_send(v28, v29, v30, v31);
LABEL_25:
      CFArrayRef v43 = extendedConfigurationTypes((uint64_t)v5);
      if (v43)
      {
        CFArrayRef v44 = v43;
        CFIndex Count = CFArrayGetCount(v43);
        CFDictionaryRef v45 = v85;
        if (Count >= 1)
        {
          for (CFIndex i = 0; Count != i; ++i)
          {
            uint64_t v47 = (__CFString *)CFArrayGetValueAtIndex(v44, i);
            if (v88) {
              char v48 = 0;
            }
            else {
              char v48 = (__CFString *)CFDictionaryGetValue(ValueAtIndex, v47);
            }
            if (v48 == (__CFString *)v45) {
              int v49 = 0;
            }
            else {
              int v49 = v48;
            }
            int v50 = __SCNetworkInterfaceSetConfiguration((uint64_t)v5, v47, v49, 1);
            CFArrayRef v51 = __log_SCNetworkConfiguration();
            if (v50)
            {
              uint64_t v52 = _SC_syslog_os_log_mapping(7);
              if (__SC_log_enabled(7, v51, (os_log_type_t)v52))
              {
                uint64_t v53 = _os_log_pack_size();
                uint64_t v61 = (char *)&v79
                    - ((MEMORY[0x1F4188790](v53, v54, v55, v56, v57, v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                CFDictionaryRef v45 = v85;
                uint64_t v62 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v62 = v84.n128_u32[0];
                uint64_t v63 = @"NULL";
                if (v49) {
                  uint64_t v63 = v49;
                }
                *(void *)(v62 + 4) = v5;
                *(_WORD *)(v62 + 12) = 2112;
                *(void *)(v62 + 14) = v47;
                *(_WORD *)(v62 + 22) = 2112;
                *(void *)(v62 + 24) = v63;
                int v64 = 7;
                uint64_t v65 = (uint64_t)v51;
                uint64_t v66 = v52;
                uint64_t v67 = v61;
                goto LABEL_41;
              }
            }
            else
            {
              uint64_t v68 = _SC_syslog_os_log_mapping(6);
              if (__SC_log_enabled(6, v51, (os_log_type_t)v68))
              {
                uint64_t v69 = _os_log_pack_size();
                uint64_t v77 = (char *)&v79
                    - ((MEMORY[0x1F4188790](v69, v70, v71, v72, v73, v74, v75, v76) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v78 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v78 = v83.n128_u32[0];
                *(void *)(v78 + 4) = v5;
                *(_WORD *)(v78 + 12) = 2112;
                *(void *)(v78 + 14) = v47;
                int v64 = 6;
                uint64_t v65 = (uint64_t)v51;
                uint64_t v66 = v68;
                uint64_t v67 = v77;
LABEL_41:
                __SC_log_send(v64, v65, v66, v67);
              }
            }
          }
        }
        CFRelease(v44);
        uint64_t v6 = v80;
        CFArrayRef v4 = v81;
      }
LABEL_44:
      uint64_t result = SCNetworkInterfaceGetInterface(v5);
      uint64_t v5 = result;
      CFIndex v7 = v82 + 1;
    }
    while (result);
  }
  return result;
}

SCNetworkInterfaceRef _SCNetworkInterfaceCopyActive(const void *a1, const __CFString *a2)
{
  SCNetworkInterfaceRef v3 = _SCNetworkInterfaceCreateWithBSDName((uint64_t)a1, a2, -1);
  SCNetworkInterfaceRef v4 = v3;
  if (a1 && v3)
  {
    CFRetain(a1);
    *((void *)v4 + 11) = a1;
  }
  return v4;
}

int64_t SCNetworkInterfaceGetPrimaryRank(const __SCNetworkInterface *a1)
{
  uint64_t v1 = *((void *)a1 + 50);
  if (!v1) {
    return 0;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (!BSDName)
  {
    _SCErrorSet(1002);
    return 0;
  }

  return IPMonitorControlGetInterfacePrimaryRank(v1, BSDName);
}

uint64_t SCNetworkInterfaceSetPrimaryRank(const __SCNetworkInterface *a1, unsigned int a2)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (!BSDName)
  {
    int v8 = 1002;
    goto LABEL_9;
  }
  CFStringRef v5 = BSDName;
  uint64_t v6 = (void *)*((void *)a1 + 50);
  if (!v6)
  {
    uint64_t v6 = (void *)IPMonitorControlCreate();
    if (v6)
    {
      *((void *)a1 + 50) = v6;
      goto LABEL_5;
    }
    int v8 = 1001;
LABEL_9:
    _SCErrorSet(v8);
    return 0;
  }
LABEL_5:

  return IPMonitorControlSetInterfacePrimaryRank(v6, v5, a2);
}

CFStringRef SCNetworkInterfaceCopyRankAssertionNotificationKey(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    return IPMonitorControlCopyInterfaceRankAssertionNotificationKey(BSDName);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t SCNetworkInterfaceCopyRankAssertionInfo(const __SCNetworkInterface *a1)
{
  v2[1] = *(CFStringRef *)MEMORY[0x1E4F143B8];
  v2[0] = 0;
  uint64_t result = _SCNetworkInterfaceGetIPMonitorControl(a1, v2);
  if (result)
  {
    uint64_t result = IPMonitorControlCopyInterfaceRankAssertionInfo(result, v2[0]);
    if (!result)
    {
      _SCErrorSet(1001);
      return 0;
    }
  }
  return result;
}

uint64_t SCNetworkInterfaceRankAssertionInfoGetPrimaryRank(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetPrimaryRank(a1);
}

uint64_t SCNetworkInterfaceRankAssertionInfoGetProcessID(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessID(a1);
}

const void *SCNetworkInterfaceRankAssertionInfoGetProcessName(const __CFDictionary *a1)
{
  return InterfaceRankAssertionInfoGetProcessName(a1);
}

uint64_t SCNetworkInterfaceRankAssertionCopyInterfaceNames()
{
  uint64_t v0 = IPMonitorControlCreate();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t v2 = IPMonitorControlCopyInterfaceRankAssertionInterfaceNames(v0);
    if (!v2) {
      _SCErrorSet(1001);
    }
    CFRelease(v1);
  }
  else
  {
    _SCErrorSet(1001);
    return 0;
  }
  return v2;
}

const void *__SCNetworkInterfaceGetDisableUntilNeededValue(const __SCPreferences **a1)
{
  return get_number_value(a1, @"DisableUntilNeeded");
}

const void *get_number_value(const __SCPreferences **cf, const void *a2)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
LABEL_16:
    CFArrayRef v9 = 0;
    LODWORD(v5) = 1002;
    goto LABEL_17;
  }
  if (!cf) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v4 || !cf[10] || findPerInterfaceConfiguration((uint64_t)cf) == -1) {
    goto LABEL_16;
  }
  CFStringRef v5 = copyPerInterfaceConfigurationPaths((uint64_t)cf, 0);
  if (!v5)
  {
LABEL_13:
    CFArrayRef v9 = 0;
    goto LABEL_17;
  }
  uint64_t v6 = v5;
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, 0);
  CFDictionaryRef Value = __SCNetworkConfigurationGetValue(cf[10], ValueAtIndex);
  CFRelease(v6);
  if (!Value)
  {
    LODWORD(v5) = 0;
    goto LABEL_13;
  }
  CFArrayRef v9 = CFDictionaryGetValue(Value, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (v9)
  {
    CFTypeID v11 = TypeID;
    CFTypeID v12 = CFGetTypeID(v9);
    LODWORD(v5) = 0;
    if (v12 != v11) {
      CFArrayRef v9 = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
LABEL_17:
  _SCErrorSet((int)v5);
  return v9;
}

BOOL SCNetworkInterfaceGetDisableUntilNeeded(const __SCPreferences **a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  CFNumberRef number_value = (const __CFNumber *)get_number_value(a1, @"DisableUntilNeeded");
  if (!number_value) {
    return _SCNetworkInterfaceIsTethered(a1);
  }
  int valuePtr = 0;
  int Value = CFNumberGetValue(number_value, kCFNumberIntType, &valuePtr);
  BOOL result = valuePtr != 0;
  if (!Value) {
    return _SCNetworkInterfaceIsTethered(a1);
  }
  return result;
}

uint64_t __SCNetworkInterfaceSetDisableUntilNeededValue(uint64_t a1, const void *a2)
{
  return set_number_value(a1, @"DisableUntilNeeded", a2);
}

uint64_t set_number_value(uint64_t a1, const void *a2, const void *a3)
{
  if (*(void *)(a1 + 80)
    && (!a3 || (CFTypeID TypeID = CFNumberGetTypeID(), CFGetTypeID(a3) == TypeID))
    && findPerInterfaceConfiguration(a1) != -1
    && (CFIndex v7 = copyPerInterfaceConfigurationPaths(a1, 0)) != 0)
  {
    CFArrayRef v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count < 1)
    {
      uint64_t v19 = 1;
LABEL_23:
      _SCErrorSet(0);
    }
    else
    {
      CFIndex v10 = Count;
      CFIndex v11 = 0;
      CFTypeID v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v11);
        CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(a1 + 80), ValueAtIndex);
        CFArrayRef v15 = Value
            ? CFDictionaryCreateMutableCopy(0, 0, Value)
            : CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], v12);
        CFDictionaryRef v16 = v15;
        if (a3) {
          CFDictionarySetValue(v15, a2, a3);
        }
        else {
          CFDictionaryRemoveValue(v15, a2);
        }
        uint64_t v17 = *(const __SCPreferences **)(a1 + 80);
        CFDictionaryRef v18 = CFDictionaryGetCount(v16) <= 0 ? 0 : v16;
        uint64_t v19 = __SCNetworkConfigurationSetValue(v17, ValueAtIndex, v18, 0);
        CFRelease(v16);
        if (!v19) {
          break;
        }
        if (v10 == ++v11) {
          goto LABEL_23;
        }
      }
    }
    CFRelease(v8);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
  return v19;
}

uint64_t SCNetworkInterfaceSetDisableUntilNeeded(uint64_t a1, int a2)
{
  return set_BOOLean_value(a1, @"DisableUntilNeeded", a2);
}

uint64_t set_BOOLean_value(uint64_t a1, const void *a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  int v10 = 1;
  if (a3) {
    CFStringRef v5 = &v10;
  }
  else {
    CFStringRef v5 = &v9;
  }
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, v5);
  uint64_t v7 = set_number_value(a1, a2, v6);
  CFRelease(v6);
  return v7;
}

const void *__SCNetworkInterfaceGetDisablePrivateRelayValue(const __SCPreferences **a1)
{
  return get_number_value(a1, @"DisablePrivateRelay");
}

CFNumberRef SCNetworkInterfaceGetDisablePrivateRelay(const __SCPreferences **a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  CFNumberRef result = (const __CFNumber *)get_number_value(a1, @"DisablePrivateRelay");
  if (result)
  {
    int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      BOOL v2 = valuePtr == 0;
    }
    else {
      BOOL v2 = 1;
    }
    return (const __CFNumber *)!v2;
  }
  return result;
}

uint64_t __SCNetworkInterfaceSetDisablePrivateRelayValue(uint64_t a1, const void *a2)
{
  return set_number_value(a1, @"DisablePrivateRelay", a2);
}

uint64_t SCNetworkInterfaceSetDisablePrivateRelay(uint64_t a1, int a2)
{
  return set_BOOLean_value(a1, @"DisablePrivateRelay", a2);
}

BOOL SCNetworkInterfaceSupportsLowDataMode(void *cf)
{
  if (__SCNetworkInterfaceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (cf) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!cf) {
    return 0;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkInterfaceTypeID;
  if (CFGetTypeID(cf) != v2
    || _SCNetworkInterfaceIsHiddenConfiguration((unsigned __int8 *)cf)
    || _SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)cf))
  {
    return 0;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)cf);
  return CFEqual(InterfaceType, @"Ethernet") != 0;
}

const void *__SCNetworkInterfaceGetEnableLowDataModeValue(const __SCPreferences **a1)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1))
  {
    return get_number_value(a1, @"EnableLowDataMode");
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

CFNumberRef SCNetworkInterfaceGetEnableLowDataMode(const __SCPreferences **a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  CFNumberRef result = (const __CFNumber *)__SCNetworkInterfaceGetEnableLowDataModeValue(a1);
  if (result)
  {
    int valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberIntType, &valuePtr)) {
      BOOL v2 = valuePtr == 0;
    }
    else {
      BOOL v2 = 1;
    }
    return (const __CFNumber *)!v2;
  }
  return result;
}

uint64_t __SCNetworkInterfaceSetEnableLowDataModeValue(void *a1, const void *a2)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1))
  {
    return set_number_value((uint64_t)a1, @"EnableLowDataMode", a2);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t SCNetworkInterfaceSetEnableLowDataMode(void *a1, int a2)
{
  if (SCNetworkInterfaceSupportsLowDataMode(a1))
  {
    return set_BOOLean_value((uint64_t)a1, @"EnableLowDataMode", a2);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

__CFArray *__SCNetworkInterfaceCopyStoredWithPreferences(const __SCPreferences *cf)
{
  SCPreferencesRef v1 = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (cf)
    {
LABEL_3:
      CFRetain(v1);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (v1) {
      goto LABEL_3;
    }
  }
  SCPreferencesRef v1 = SCPreferencesCreate(0, @"SCNetworkInterface", @"NetworkInterfaces.plist");
  if (!v1) {
    __SCNetworkInterfaceCopyStoredWithPreferences_cold_1();
  }
LABEL_6:
  CFArrayRef Value = (const __CFArray *)SCPreferencesGetValue(v1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(Value);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
        CFTypeID v8 = CFDictionaryGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == v8)
          {
            int v9 = (const void *)__SCNetworkInterfaceCreateWithStorageEntity(ValueAtIndex);
            if (v9)
            {
              int v10 = v9;
              CFArrayAppendValue(Mutable, v9);
              CFRelease(v10);
            }
          }
        }
      }
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
  CFRelease(v1);
  return Mutable;
}

uint64_t __SCNetworkInterfaceCreateWithStorageEntity(const __CFDictionary *a1)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkInterfaceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
  }
  int valuePtr = 0;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFArrayRef Value = CFDictionaryGetValue(a1, @"Active");
    CFTypeID v4 = CFBooleanGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v4) {
        CFStringRef v5 = Value;
      }
      else {
        CFStringRef v5 = 0;
      }
    }
    else
    {
      CFStringRef v5 = 0;
    }
    CFBooleanRef v18 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
    if (v5) {
      CFBooleanRef v19 = (const __CFBoolean *)Value;
    }
    else {
      CFBooleanRef v19 = (const __CFBoolean *)*MEMORY[0x1E4F1CFC8];
    }
    CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a1, @"BSD Name");
    CFTypeID v21 = CFStringGetTypeID();
    if (v20 && CFGetTypeID(v20) == v21)
    {
      uint64_t v22 = CFDictionaryGetValue(a1, @"HiddenConfiguration");
      CFTypeID v23 = CFBooleanGetTypeID();
      if (v22)
      {
        if (CFGetTypeID(v22) == v23) {
          uint64_t v24 = v22;
        }
        else {
          uint64_t v24 = 0;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      if (v24) {
        CFBooleanRef v35 = (const __CFBoolean *)v22;
      }
      else {
        CFBooleanRef v35 = v18;
      }
      uint64_t v36 = CFDictionaryGetValue(a1, @"HiddenInterface");
      CFTypeID v37 = CFBooleanGetTypeID();
      if (v36)
      {
        if (CFGetTypeID(v36) == v37) {
          uint64_t v38 = v36;
        }
        else {
          uint64_t v38 = 0;
        }
      }
      else
      {
        uint64_t v38 = 0;
      }
      if (v38) {
        CFBooleanRef v39 = (const __CFBoolean *)v36;
      }
      else {
        CFBooleanRef v39 = v18;
      }
      uint64_t v40 = CFDictionaryGetValue(a1, @"IOBuiltin");
      CFTypeID v41 = CFBooleanGetTypeID();
      if (!v40 || CFGetTypeID(v40) != v41)
      {
        CFNumberRef v6 = __log_SCNetworkConfiguration();
        uint64_t v7 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v6, (os_log_type_t)v7)) {
          return 0;
        }
        goto LABEL_10;
      }
      uint64_t v42 = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
      CFTypeID v43 = CFStringGetTypeID();
      if (v42 && CFGetTypeID(v42) == v43)
      {
        CFRetain(v42);
LABEL_46:
        CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(a1, @"IOInterfaceType");
        CFTypeID v45 = CFNumberGetTypeID();
        if (v44 && CFGetTypeID(v44) == v45)
        {
          if (!CFNumberGetValue(v44, kCFNumberIntType, &valuePtr))
          {
            os_log_t v46 = __log_SCNetworkConfiguration();
            int v47 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v46, (os_log_type_t)v47))
            {
              uint64_t v48 = _os_log_pack_size();
              os_log_t v121 = v46;
              CFIndex v122 = &v113;
              uint64_t v56 = MEMORY[0x1F4188790](v48, v49, v50, v51, v52, v53, v54, v55);
              LODWORD(v120) = v47;
              uint64_t v57 = (char *)&v113 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(5, (uint64_t)v121, v120, v57);
            }
          }
          uint64_t v58 = CFDictionaryGetValue(a1, @"IOInterfaceUnit");
          CFTypeID v59 = CFNumberGetTypeID();
          if (v58 && CFGetTypeID(v58) == v59)
          {
            os_log_t v121 = v58;
            uint64_t v60 = (uint64_t *)CFDictionaryGetValue(a1, @"IOMACAddress");
            CFTypeID v61 = CFDataGetTypeID();
            if (v60 && (CFIndex v122 = v60, CFGetTypeID(v60) == v61))
            {
              uint64_t v62 = CFDictionaryGetValue(a1, @"IOPathMatch");
              CFTypeID v63 = CFStringGetTypeID();
              if (v62 && CFGetTypeID(v62) == v63)
              {
                CFTypeRef v120 = v62;
                CFDictionaryRef v64 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"SCNetworkInterfaceInfo");
                CFTypeID v65 = CFDictionaryGetTypeID();
                if (v64 && CFGetTypeID(v64) == v65)
                {
                  uint64_t v114 = @"UserDefinedName";
                  uint64_t v66 = CFDictionaryGetValue(v64, @"UserDefinedName");
                  CFTypeRef v119 = (CFTypeRef)CFStringGetTypeID();
                  if (v66)
                  {
                    CFTypeRef v67 = (CFTypeRef)CFGetTypeID(v66);
                    if (v67 == v119) {
                      uint64_t v68 = v66;
                    }
                    else {
                      uint64_t v68 = 0;
                    }
                    uint64_t v116 = v68;
                  }
                  else
                  {
                    uint64_t v116 = 0;
                  }
                  SCNetworkInterfaceRef v80 = CFDictionaryGetValue(v64, @"kUSBProductString");
                  CFTypeRef v119 = (CFTypeRef)CFStringGetTypeID();
                  if (v80)
                  {
                    CFTypeRef v81 = (CFTypeRef)CFGetTypeID(v80);
                    if (v81 == v119) {
                      CFIndex v82 = v80;
                    }
                    else {
                      CFIndex v82 = 0;
                    }
                    CFTypeRef v118 = v82;
                  }
                  else
                  {
                    CFTypeRef v118 = 0;
                  }
                  __n128 v83 = CFDictionaryGetValue(v64, @"idProduct");
                  CFTypeRef v119 = (CFTypeRef)CFNumberGetTypeID();
                  if (v83)
                  {
                    CFTypeRef v84 = (CFTypeRef)CFGetTypeID(v83);
                    if (v84 == v119) {
                      CFDictionaryRef v85 = v83;
                    }
                    else {
                      CFDictionaryRef v85 = 0;
                    }
                    CFTypeRef v119 = v85;
                  }
                  else
                  {
                    CFTypeRef v119 = 0;
                  }
                  CFArrayRef v86 = CFDictionaryGetValue(v64, @"idVendor");
                  CFTypeID v87 = CFNumberGetTypeID();
                  if (v86)
                  {
                    if (CFGetTypeID(v86) == v87) {
                      int v88 = v86;
                    }
                    else {
                      int v88 = 0;
                    }
                    CFTypeRef v117 = v88;
                  }
                  else
                  {
                    CFTypeRef v117 = 0;
                  }
                  uint64_t v89 = CFDictionaryGetValue(a1, @"MatchingMACs");
                  CFTypeID v90 = CFArrayGetTypeID();
                  if (v89)
                  {
                    if (CFGetTypeID(v89) == v90) {
                      int v91 = v89;
                    }
                    else {
                      int v91 = 0;
                    }
                    CFTypeRef v115 = v91;
                  }
                  else
                  {
                    CFTypeRef v115 = 0;
                  }
                  CFStringRef v92 = (const __CFString *)CFDictionaryGetValue(a1, @"SCNetworkInterfaceType");
                  CFTypeID v93 = CFStringGetTypeID();
                  if (v92 && CFGetTypeID(v92) == v93)
                  {
                    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    uint64_t v95 = Mutable;
                    if (valuePtr == 144)
                    {
                      uint64_t v97 = &kSCValNetInterfaceTypeFireWire;
                    }
                    else
                    {
                      CFStringRef v96 = v92;
                      if (valuePtr != 6) {
                        goto LABEL_113;
                      }
                      uint64_t v97 = &kSCValNetInterfaceTypeEthernet;
                    }
                    CFStringRef v96 = *v97;
LABEL_113:
                    CFDictionarySetValue(Mutable, @"Type", v96);
                    uint64_t Configuration = findConfiguration(v92);
                    if (Configuration == -1)
                    {
                      uint64_t v108 = v95;
                      CFStringRef v107 = v92;
                    }
                    else
                    {
                      if ((0x61200uLL >> Configuration))
                      {
LABEL_118:
                        CFDictionarySetValue(v95, @"DeviceName", v20);
                        if (CFBooleanGetValue(v35)) {
                          CFDictionarySetValue(v95, @"HiddenConfiguration", (const void *)*MEMORY[0x1E4F1CFD0]);
                        }
                        if (v116) {
                          CFDictionarySetValue(v95, v114, v116);
                        }
                        uint64_t v33 = _SCNetworkInterfaceCreateWithEntity();
                        CFRelease(v95);
                        *(unsigned char *)(v33 + 24) = CFBooleanGetValue(v19);
                        *(unsigned char *)(v33 + 176) = CFBooleanGetValue((CFBooleanRef)v40);
                        *(unsigned char *)(v33 + 193) = CFBooleanGetValue(v39);
                        *(void *)(v33 + 232) = CFRetain(v42);
                        *(void *)(v33 + 248) = CFRetain(v44);
                        *(void *)(v33 + 256) = CFRetain(v121);
                        *(void *)(v33 + 160) = CFRetain(v122);
                        *(void *)(v33 + 208) = CFRetain(v120);
                        if (v118) {
                          CFTypeRef v109 = CFRetain(v118);
                        }
                        else {
                          CFTypeRef v109 = 0;
                        }
                        *(void *)(v33 + 280) = v109;
                        if (v119) {
                          CFTypeRef v110 = CFRetain(v119);
                        }
                        else {
                          CFTypeRef v110 = 0;
                        }
                        *(void *)(v33 + 296) = v110;
                        if (v117) {
                          CFTypeRef v111 = CFRetain(v117);
                        }
                        else {
                          CFTypeRef v111 = 0;
                        }
                        *(void *)(v33 + 288) = v111;
                        if (v115) {
                          CFTypeRef v112 = CFRetain(v115);
                        }
                        else {
                          CFTypeRef v112 = 0;
                        }
                        *(void *)(v33 + 304) = v112;
                        goto LABEL_110;
                      }
                      CFStringRef v107 = *configurations[5 * Configuration + 1];
                      uint64_t v108 = v95;
                    }
                    CFDictionarySetValue(v108, @"Hardware", v107);
                    goto LABEL_118;
                  }
                  uint64_t v69 = __log_SCNetworkConfiguration();
                  uint64_t v70 = _SC_syslog_os_log_mapping(6);
                  if (__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
                    goto LABEL_107;
                  }
LABEL_109:
                  uint64_t v33 = 0;
LABEL_110:
                  CFRelease(v42);
                  return v33;
                }
                uint64_t v69 = __log_SCNetworkConfiguration();
                uint64_t v70 = _SC_syslog_os_log_mapping(6);
                if (!__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
                  goto LABEL_109;
                }
              }
              else
              {
                uint64_t v69 = __log_SCNetworkConfiguration();
                uint64_t v70 = _SC_syslog_os_log_mapping(6);
                if (!__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
                  goto LABEL_109;
                }
              }
            }
            else
            {
              uint64_t v69 = __log_SCNetworkConfiguration();
              uint64_t v70 = _SC_syslog_os_log_mapping(6);
              if (!__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
                goto LABEL_109;
              }
            }
          }
          else
          {
            uint64_t v69 = __log_SCNetworkConfiguration();
            uint64_t v70 = _SC_syslog_os_log_mapping(6);
            if (!__SC_log_enabled(6, v69, (os_log_type_t)v70)) {
              goto LABEL_109;
            }
          }
LABEL_107:
          uint64_t v98 = _os_log_pack_size();
          uint64_t v79 = (char *)&v113
              - ((MEMORY[0x1F4188790](v98, v99, v100, v101, v102, v103, v104, v105) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          goto LABEL_108;
        }
        uint64_t v69 = __log_SCNetworkConfiguration();
        uint64_t v70 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v69, (os_log_type_t)v70))
        {
          uint64_t v71 = _os_log_pack_size();
          uint64_t v79 = (char *)&v113
              - ((MEMORY[0x1F4188790](v71, v72, v73, v74, v75, v76, v77, v78) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
LABEL_108:
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v69, v70, v79);
          goto LABEL_109;
        }
        goto LABEL_109;
      }
      uint64_t v42 = _SCNetworkInterfaceCopyPrefixFromBSDName(v20);
      if (v42) {
        goto LABEL_46;
      }
      CFNumberRef v6 = __log_SCNetworkConfiguration();
      uint64_t v7 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
      {
LABEL_10:
        uint64_t v8 = _os_log_pack_size();
        CFDictionaryRef v16 = (char *)&v113 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        int v17 = 6;
LABEL_23:
        __SC_log_send(v17, (uint64_t)v6, v7, v16);
      }
    }
    else
    {
      CFNumberRef v6 = __log_SCNetworkConfiguration();
      uint64_t v7 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v6, (os_log_type_t)v7))
      {
        uint64_t v25 = _os_log_pack_size();
        CFDictionaryRef v16 = (char *)&v113
            - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        int v17 = 7;
        goto LABEL_23;
      }
    }
  }
  else
  {
    CFNumberRef v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7)) {
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t __SCNetworkInterfaceSaveStoredWithPreferences(SCPreferencesRef a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    return 0;
  }
  if (a1)
  {
    CFRetain(a1);
  }
  else
  {
    a1 = SCPreferencesCreate(0, @"SCNetworkInterface", @"NetworkInterfaces.plist");
    if (!a1) {
      __SCNetworkInterfaceSaveStoredWithPreferences_cold_1();
    }
  }
  uint64_t v6 = SCPreferencesSetValue(a1, @"Interfaces", a2);
  CFRelease(a1);
  return v6;
}

uint64_t __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(int a1, const __SCPreferences *cf, const void *a3)
{
  SCPreferencesRef v4 = cf;
  if (__SCNetworkInterfaceInitialize_initialized == -1)
  {
    if (cf)
    {
LABEL_3:
      CFRetain(v4);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkInterfaceInitialize_initialized, &__block_literal_global_11);
    if (v4) {
      goto LABEL_3;
    }
  }
  SCPreferencesRef v4 = SCPreferencesCreate(0, @"SCNetworkInterface", @"NetworkInterfaces.plist");
  if (!v4) {
    __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName_cold_1();
  }
LABEL_6:
  CFArrayRef Value = (const __CFArray *)SCPreferencesGetValue(v4, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && (CFIndex Count = CFArrayGetCount(Value), Count >= 1))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v9);
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v11)
        {
          uint64_t v12 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
          CFTypeID v13 = CFStringGetTypeID();
          if (v12)
          {
            if (CFGetTypeID(v12) == v13 && CFEqual(a3, v12)) {
              break;
            }
          }
        }
      }
      if (v8 == ++v9) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = __SCNetworkInterfaceCreateWithStorageEntity(ValueAtIndex);
  }
  else
  {
LABEL_16:
    uint64_t v14 = 0;
  }
  CFRelease(v4);
  return v14;
}

__CFDictionary *__SCNetworkInterfaceCreateMappingUsingBSDName(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  CFMutableArrayRef Mutable = 0;
  uint64_t v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v4);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (BSDName)
    {
      CFStringRef v10 = BSDName;
      if (!Mutable) {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, v6, v7);
      }
      CFDictionarySetValue(Mutable, v10, ValueAtIndex);
    }
    ++v4;
  }
  while (v3 != v4);
  return Mutable;
}

uint64_t SCNetworkInterfaceTypeSetTemporaryOverrideCost(const __SCPreferences *a1, CFTypeRef cf1, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (CFEqual(cf1, @"IEEE80211") || CFEqual(cf1, @"Cellular"))
  {
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%@%@/%@/%@/%@/%@", @"/", @"System", @"Network", @"Override", @"InterfaceType", cf1);
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v6);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    }
    else {
      CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFStringRef v10 = MutableCopy;
    CFTypeID v11 = @"Inexpensive";
    if (a3 != 1) {
      CFTypeID v11 = 0;
    }
    if (a3 == 2) {
      uint64_t v12 = @"Expensive";
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12)
    {
      CFDictionarySetValue(MutableCopy, @"Cost", v12);
      if (_SC_isAppleInternal_once_3 != -1) {
        dispatch_once(&_SC_isAppleInternal_once_3, &__block_literal_global_621);
      }
      if (!_SC_isAppleInternal_isInternal_3) {
        goto LABEL_23;
      }
      LODWORD(valuePtr) = 0;
      CFDictionaryRef v13 = (const __CFDictionary *)SCDynamicStoreCopyValue(0, @"Global:NetworkInterfaceOverrideExpensiveExpiration");
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (!v13) {
        goto LABEL_23;
      }
      if (CFGetTypeID(v13) == v14)
      {
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v13, @"Delta");
        CFTypeID v16 = CFNumberGetTypeID();
        if (v15)
        {
          if (CFGetTypeID(v15) == v16) {
            CFNumberGetValue(v15, kCFNumberIntType, &valuePtr);
          }
        }
      }
      CFRelease(v13);
      int v17 = LODWORD(valuePtr);
      if (SLODWORD(valuePtr) < 1
        || (Current = CFAbsoluteTimeGetCurrent(), (CFDateRef v19 = CFDateCreate(0, Current + (double)v17)) == 0))
      {
LABEL_23:
        unsigned int v26 = 0;
        uint64_t v24 = 0;
        CFStringRef v20 = CFCalendarCreateWithIdentifier(0, (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
        CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
        CFCalendarAddComponents(v20, &valuePtr, 0, "d", 1);
        CFCalendarDecomposeAbsoluteTime(v20, valuePtr, "yMd", &v24, (char *)&v24 + 4, &v26);
        CFCalendarComposeAbsoluteTime(v20, &valuePtr, "yMdHms", v24, HIDWORD(v24), v26, 5, 0, 0);
        CFRelease(v20);
        CFDateRef v19 = CFDateCreate(0, valuePtr);
      }
      CFDictionarySetValue(v10, @"Expiration", v19);
      CFRelease(v19);
    }
    else
    {
      CFDictionaryRemoveValue(MutableCopy, @"Cost");
      CFDictionaryRemoveValue(v10, @"Expiration");
      if (!CFDictionaryGetCount(v10))
      {
        CFRelease(v10);
        goto LABEL_30;
      }
    }
    if (v10)
    {
      uint64_t v21 = SCPreferencesPathSetValue(a1, v6, v10);
      CFRelease(v10);
      goto LABEL_33;
    }
LABEL_30:
    CFTypeID v22 = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != v22)
    {
      CFRelease(v6);
      uint64_t v21 = 1;
LABEL_36:
      _SCErrorSet(0);
      return v21;
    }
    uint64_t v21 = SCPreferencesPathRemoveValue(a1, v6);
LABEL_33:
    CFRelease(v6);
    if (!v21) {
      return v21;
    }
    goto LABEL_36;
  }
  _SCErrorSet(1002);
  return 0;
}

uint64_t SCNetworkInterfaceTypeGetTemporaryOverrideCost(const __SCPreferences *a1, uint64_t a2)
{
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"%@%@/%@/%@/%@/%@", @"/", @"System", @"Network", @"Override", @"InterfaceType", a2);
  CFDictionaryRef Value = SCPreferencesPathGetValue(a1, v3);
  CFRelease(v3);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFStringRef v6 = CFDictionaryGetValue(Value, @"Expiration");
  CFTypeID v7 = CFDateGetTypeID();
  if (!v6) {
    return 0;
  }
  if (CFGetTypeID(v6) != v7) {
    return 0;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v9 = CFDateCreate(0, Current);
  CFComparisonResult v10 = CFDateCompare(v9, (CFDateRef)v6, 0);
  CFRelease(v9);
  if (v10 != kCFCompareLessThan) {
    return 0;
  }
  uint64_t v12 = CFDictionaryGetValue(Value, @"Cost");
  CFTypeID v13 = CFStringGetTypeID();
  if (!v12 || CFGetTypeID(v12) != v13) {
    return 0;
  }
  if (CFEqual(v12, @"Expensive")) {
    return 2;
  }
  return CFEqual(v12, @"Inexpensive") != 0;
}

uint64_t __SCNetworkInterfaceEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if (result)
  {
    CFStringRef v5 = *(const void **)(a1 + 112);
    CFStringRef v6 = *(const void **)(a2 + 112);
    if (v5 == v6 || (uint64_t result = 0, v5) && v6 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 112), v6), result))
    {
      CFStringRef v7 = *(CFStringRef *)(a1 + 120);
      CFStringRef v8 = *(CFStringRef *)(a2 + 120);
      if (v7)
      {
        if (v8)
        {
          if (v7 == v8) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
      else if (!v8)
      {
        goto LABEL_17;
      }
      CFStringRef NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a1);
      CFStringRef v10 = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)a2);
      if (!NonLocalizedDisplayName) {
        goto LABEL_17;
      }
      CFStringRef v8 = v10;
      if (!v10 || NonLocalizedDisplayName == v10) {
        goto LABEL_17;
      }
      CFStringRef v7 = NonLocalizedDisplayName;
LABEL_16:
      uint64_t result = CFEqual(v7, v8);
      if (!result) {
        return result;
      }
LABEL_17:
      if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"Bond")) {
        goto LABEL_49;
      }
      CFTypeID v11 = *(const void **)(a1 + 320);
      uint64_t v12 = *(const void **)(a2 + 320);
      if (v11 == v12 || (uint64_t result = 0, v11) && v12 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 320), v12), result))
      {
        CFTypeID v13 = *(const void **)(a1 + 328);
        CFTypeID v14 = *(const void **)(a2 + 328);
        if (v13 == v14
          || (uint64_t result = 0, v13) && v14 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 328), v14), result))
        {
LABEL_49:
          if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"Bridge")
            || (CFNumberRef v15 = *(const void **)(a1 + 352), v16 = *(const void **)(a2 + 352), v15 == v16)
            || (uint64_t result = 0, v15) && v16 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 352), v16), result))
          {
            if (!CFEqual(*(CFTypeRef *)(a1 + 16), @"VLAN")) {
              goto LABEL_40;
            }
            int v17 = *(const void **)(a1 + 376);
            CFBooleanRef v18 = *(const void **)(a2 + 376);
            if (v17 == v18
              || (uint64_t result = 0, v17) && v18 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 376), v18), result))
            {
              CFDateRef v19 = *(const void **)(a1 + 384);
              CFStringRef v20 = *(const void **)(a2 + 384);
              if (v19 == v20
                || (uint64_t result = 0, v19) && v20 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 384), v20), result))
              {
LABEL_40:
                uint64_t v21 = *(const void **)(a1 + 72);
                CFTypeID v22 = *(const void **)(a2 + 72);
                return v21 == v22 || v21 && v22 && CFEqual(v21, v22);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

CFHashCode __SCNetworkInterfaceHash(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 112);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 120);
  CFHashCode v4 = CFHash(v2);
  if (v3) {
    v4 ^= CFHash(*(CFTypeRef *)(a1 + 120));
  }
  return v4;
}

__CFString *__SCNetworkInterfaceCopyFormattingDescription(uint64_t a1, const __CFDictionary *a2)
{
  valuePtr[1] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v4, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkInterface %p [%p]> {", a1, v4);
  CFStringAppendFormat(Mutable, 0, @"nw_endpoint_type_t type = %@", *(void *)(a1 + 16));
  CFStringAppendFormat(Mutable, 0, @", entity_device = %@", *(void *)(a1 + 112));
  if (*(void *)(a1 + 120)) {
    CFStringAppendFormat(Mutable, 0, @"+%@", *(void *)(a1 + 120));
  }
  CFStringAppendFormat(Mutable, 0, @", entity_nw_endpoint_type_t type = %@", *(void *)(a1 + 128));
  if (*(void *)(a1 + 136)) {
    CFStringAppendFormat(Mutable, 0, @" / %@", *(void *)(a1 + 136));
  }
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0, @", io_name_t name = %@", *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 40))
  {
    CFStringAppendFormat(Mutable, 0, @", name(l) = %@", *(void *)(a1 + 40));
  }
  else if (*(void *)(a1 + 48))
  {
    CFStringAppendFormat(Mutable, 0, @", name(k) = \"%@\"", *(void *)(a1 + 48));
    if (*(void *)(a1 + 56)) {
      CFStringAppendFormat(Mutable, 0, @"+\"%@\"", *(void *)(a1 + 56));
    }
    if (*(void *)(a1 + 64)) {
      CFStringAppendFormat(Mutable, 0, @"+\"%@\"", *(void *)(a1 + 64));
    }
  }
  if (*(void *)(a1 + 160))
  {
    CFStringAppendFormat(Mutable, 0, @", sockaddr address = ");
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 160));
    CFIndex Length = CFDataGetLength(*(CFDataRef *)(a1 + 160));
    if (Length >= 1)
    {
      CFIndex v8 = Length;
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (i) {
          CFStringRef v10 = ":";
        }
        else {
          CFStringRef v10 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"%s%02x", v10, BytePtr[i]);
      }
    }
  }
  if (*(unsigned char *)(a1 + 176)) {
    CFTypeID v11 = "TRUE";
  }
  else {
    CFTypeID v11 = "FALSE";
  }
  CFStringAppendFormat(Mutable, 0, @", builtin = %s", v11);
  if (*(unsigned char *)(a1 + 192)) {
    CFStringAppendFormat(Mutable, 0, @", hidden = TRUE");
  }
  if (*(unsigned char *)(a1 + 193)) {
    CFStringAppendFormat(Mutable, 0, @", HIDDEN");
  }
  if (*(unsigned char *)(a1 + 240)) {
    CFStringAppendFormat(Mutable, 0, @", trust required = TRUE");
  }
  if (*(unsigned char *)(a1 + 241)) {
    CFStringAppendFormat(Mutable, 0, @", ephemeral");
  }
  if (*(unsigned char *)(a1 + 242)) {
    CFStringAppendFormat(Mutable, 0, @", self-named");
  }
  if (*(void *)(a1 + 200)) {
    CFStringAppendFormat(Mutable, 0, @", CFIndex location = %@", *(void *)(a1 + 200));
  }
  if (*(void *)(a1 + 208)) {
    CFStringAppendFormat(Mutable, 0, @", path = %@", *(void *)(a1 + 208));
  }
  if (*(void *)(a1 + 216)) {
    CFStringAppendFormat(Mutable, 0, @", entryID = 0x%llx", *(void *)(a1 + 216));
  }
  if (*(void *)(a1 + 248)) {
    CFStringAppendFormat(Mutable, 0, @", nw_endpoint_type_t type = %@", *(void *)(a1 + 248));
  }
  if (*(void *)(a1 + 256)) {
    CFStringAppendFormat(Mutable, 0, @", unit = %@", *(void *)(a1 + 256));
  }
  if (*(void *)(a1 + 264)) {
    CFStringAppendFormat(Mutable, 0, @", family = %@", *(void *)(a1 + 264));
  }
  if (*(void *)(a1 + 272)) {
    CFStringAppendFormat(Mutable, 0, @", subfamily = %@", *(void *)(a1 + 272));
  }
  uint64_t v12 = *(const void **)(a1 + 296);
  if (*(_OWORD *)(a1 + 288) != 0)
  {
    valuePtr[0] = 0;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!v12
      || CFGetTypeID(v12) != TypeID
      || !CFNumberGetValue(*(CFNumberRef *)(a1 + 296), kCFNumberIntType, (char *)valuePtr + 4))
    {
      HIDWORD(valuePtr[0]) = 0;
    }
    CFTypeID v14 = *(const void **)(a1 + 288);
    CFTypeID v15 = CFNumberGetTypeID();
    if (!v14 || CFGetTypeID(v14) != v15 || !CFNumberGetValue(*(CFNumberRef *)(a1 + 288), kCFNumberIntType, valuePtr)) {
      LODWORD(valuePtr[0]) = 0;
    }
    if (*(void *)(a1 + 280)) {
      CFStringAppendFormat(Mutable, 0, @", USB io_name_t name = %@", *(void *)(a1 + 280));
    }
    CFStringAppendFormat(Mutable, 0, @", USB vid/pid = %d/%d", LODWORD(valuePtr[0]), HIDWORD(valuePtr[0]));
  }
  if (*(void *)(a1 + 184)) {
    CFStringAppendFormat(Mutable, 0, @", action = %@", *(void *)(a1 + 184));
  }
  CFTypeID v16 = *(const void **)(a1 + 224);
  if (v16)
  {
    CFStringRef v17 = _SCCopyDescription(v16, a2);
    CFStringAppendFormat(Mutable, a2, @", overrides = %@", v17);
    CFRelease(v17);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 312);
  if (v18 > 0x18) {
    CFDateRef v19 = "?";
  }
  else {
    CFDateRef v19 = sortOrderName[v18];
  }
  CFStringAppendFormat(Mutable, 0, @", order = %u (%s)", *(unsigned int *)(a1 + 312), v19);
  if (*(void *)(a1 + 80)) {
    CFStringAppendFormat(Mutable, 0, @", prefs = %p", *(void *)(a1 + 80));
  }
  if (*(void *)(a1 + 96)) {
    CFStringAppendFormat(Mutable, 0, @", service = %@", *(void *)(a1 + 96));
  }
  if (*(void *)(a1 + 72)) {
    CFStringAppendFormat(Mutable, 0, @", interface = %@", *(void *)(a1 + 72));
  }
  if (*(void *)(a1 + 104)) {
    CFStringAppendFormat(Mutable, a2, @", unsaved = %@", *(void *)(a1 + 104));
  }
  CFArrayRef v20 = *(const __CFArray **)(a1 + 320);
  if (v20)
  {
    CFIndex Count = CFArrayGetCount(v20);
    if (Count >= 1)
    {
      CFIndex v22 = Count;
      for (CFIndex j = 0; j != v22; ++j)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), j);
        if (j) {
          uint64_t v25 = ",";
        }
        else {
          uint64_t v25 = ", interfaces = ";
        }
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        CFStringAppendFormat(Mutable, 0, @"%s%@", v25, BSDName);
      }
    }
  }
  if (*(void *)(a1 + 328)) {
    CFStringAppendFormat(Mutable, 0, @", mode = %@", *(void *)(a1 + 328));
  }
  uint64_t v27 = *(const void **)(a1 + 336);
  if (v27)
  {
    CFStringRef v28 = _SCCopyDescription(v27, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v28);
    CFRelease(v28);
  }
  CFArrayRef v29 = *(const __CFArray **)(a1 + 352);
  if (v29)
  {
    CFIndex v30 = CFArrayGetCount(v29);
    if (v30 >= 1)
    {
      CFIndex v31 = v30;
      for (CFIndex k = 0; k != v31; ++k)
      {
        uint64_t v33 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 352), k);
        if (k) {
          uint64_t v34 = ",";
        }
        else {
          uint64_t v34 = ", interfaces = ";
        }
        CFStringRef v35 = SCNetworkInterfaceGetBSDName(v33);
        CFStringAppendFormat(Mutable, 0, @"%s%@", v34, v35);
      }
    }
  }
  uint64_t v36 = *(const void **)(a1 + 360);
  if (v36)
  {
    CFStringRef v37 = _SCCopyDescription(v36, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v37);
    CFRelease(v37);
  }
  uint64_t v38 = *(const __SCNetworkInterface **)(a1 + 376);
  if (v38)
  {
    CFStringRef v39 = SCNetworkInterfaceGetBSDName(v38);
    CFStringAppendFormat(Mutable, 0, @", interface = %@", v39);
  }
  if (*(void *)(a1 + 384)) {
    CFStringAppendFormat(Mutable, 0, @", tag = %@", *(void *)(a1 + 384));
  }
  uint64_t v40 = *(const void **)(a1 + 392);
  if (v40)
  {
    CFStringRef v41 = _SCCopyDescription(v40, a2);
    CFStringAppendFormat(Mutable, a2, @", options = %@", v41);
    CFRelease(v41);
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

__CFString *__SCNetworkInterfaceCopyDescription(uint64_t a1)
{
  return __SCNetworkInterfaceCopyFormattingDescription(a1, 0);
}

CFStringRef copy_interface_string(__CFBundle *a1, const __CFString *a2, int a3)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v6 = copy_string_from_bundle(a1, a2, a3);
  CFStringRef v7 = v6;
  if (v6)
  {
    if (CFEqual(v6, a2) && (copy_interface_string_reported & 1) == 0)
    {
      CFStringRef v8 = copy_string_from_bundle(a1, @"airport", a3);
      CFStringRef v9 = v8;
      if (v8)
      {
        if (!CFEqual(v8, @"airport")) {
          goto LABEL_9;
        }
      }
      CFStringRef v10 = __log_SCNetworkConfiguration();
      uint64_t v11 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
      {
        uint64_t v12 = _os_log_pack_size();
        CFArrayRef v20 = (char *)v35 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v21 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v21 = 138412802;
        *(void *)(v21 + 4) = a1;
        *(_WORD *)(v21 + 12) = 2112;
        *(void *)(v21 + 14) = @"airport";
        *(_WORD *)(v21 + 22) = 1024;
        *(_DWORD *)(v21 + 24) = a3;
        __SC_log_send(3, (uint64_t)v10, v11, v20);
      }
      _SC_crash("Failed to retrieve interface string", 0, 0);
      copy_interface_string_reported = 1;
      if (v9) {
LABEL_9:
      }
        CFRelease(v9);
    }
  }
  else
  {
    CFIndex v22 = __log_SCNetworkConfiguration();
    uint64_t v23 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v32 = (char *)v35 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v33 = 138412802;
      *(void *)(v33 + 4) = a1;
      *(_WORD *)(v33 + 12) = 2112;
      *(void *)(v33 + 14) = a2;
      *(_WORD *)(v33 + 22) = 1024;
      *(_DWORD *)(v33 + 24) = a3;
      __SC_log_send(3, (uint64_t)v22, v23, v32);
    }
  }
  return v7;
}

CFStringRef copy_string_from_bundle(__CFBundle *a1, CFStringRef value, int a3)
{
  if (a3)
  {
    return CFBundleCopyLocalizedString(a1, value, value, @"NetworkInterface");
  }
  else
  {
    return (CFStringRef)CFBundleCopyLocalizedStringForLocalization();
  }
}

uint64_t isBuiltin(io_registry_entry_t a1)
{
  CFMutableStringRef v1 = pci_slot(a1, 0);
  if (!v1) {
    return 1;
  }
  CFRelease(v1);
  return 0;
}

uint64_t pci_slot_info(io_registry_entry_t a1, int a2, CFMutableStringRef *a3, CFStringRef *a4)
{
  properties[1] = *(CFMutableDictionaryRef *)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  properties[0] = 0;
  *a3 = 0;
  *a4 = 0;
  IORegistryEntryCreateCFProperties(a1, properties, 0, 0);
  if (properties[0])
  {
    CFStringRef v8 = IODictionaryCopyBSDName(properties[0]);
    CFRelease(properties[0]);
    if (v8)
    {
      CFMutableStringRef v9 = pci_slot(a1, &cf);
      *a3 = v9;
      if (v9)
      {
        if (!cf)
        {
          uint64_t v10 = 1;
LABEL_11:
          CFRelease(v8);
          return v10;
        }
        *a4 = pci_port((void *)cf, a2, v8);
        uint64_t v10 = 1;
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t isThunderbolt(io_registry_entry_t a1)
{
  uint64_t result = (uint64_t)IORegistryEntrySearchCFProperty(a1, "IOService", @"PCI-Thunderbolt", 0, 3u);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 1;
  }
  return result;
}

void *processUSBInterface(void *result, io_registry_entry_t entry)
{
  uint64_t v3 = result;
  if (!result[35])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"kUSBProductString", 0, 3u);
    v3[35] = result;
  }
  if (!v3[36])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"idVendor", 0, 3u);
    v3[36] = result;
  }
  if (!v3[37])
  {
    uint64_t result = IORegistryEntrySearchCFProperty(entry, "IOService", @"idProduct", 0, 3u);
    v3[37] = result;
  }
  return result;
}

CFMutableStringRef pci_slot(io_registry_entry_t a1, CFTypeRef *a2)
{
  kern_return_t ParentEntry;
  kern_return_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  uint64_t v31;
  CFTypeRef v32;
  io_registry_entry_t parent;
  uint64_t v34;
  CFRange v35;

  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2) {
    *a2 = 0;
  }
  CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(a1, @"AAPL,slot-name", 0, 0);
  if (CFProperty)
  {
    CFStringRef v5 = CFProperty;
    CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(v5) == TypeID)
    {
      if (a2) {
        *a2 = CFStringCreateCopy(0, v5);
      }
      CFStringAppend(Mutable, v5);
    }
    else
    {
      CFTypeID v8 = CFDataGetTypeID();
      if (CFGetTypeID(v5) == v8)
      {
        if (a2) {
          *a2 = CFDataCreateCopy(0, (CFDataRef)v5);
        }
        BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)v5);
        CFStringAppendCString(Mutable, BytePtr, 0x8000100u);
      }
    }
    for (uint64_t i = 0; i != 3; ++i)
    {
      CFStringRef v11 = slot_prefixes[i];
      CFIndex Length = CFStringGetLength(v11);
      if (CFStringGetLength(Mutable) > Length)
      {
        v35.CFIndex location = 0;
        v35.CFIndex length = Length;
        CFStringFindAndReplace(Mutable, v11, &stru_1EDD23408, v35, 9uLL);
      }
    }
    CFStringTrimWhitespace(Mutable);
    CFRelease(v5);
  }
  else
  {
    CFMutableStringRef Mutable = 0;
  }
  io_registry_entry_t parent = 0;
  ParentEntry = IORegistryEntryGetParentEntry(a1, "IOService", &parent);
  if (ParentEntry != -536870208)
  {
    uint64_t v14 = ParentEntry;
    if (!ParentEntry)
    {
      uint64_t v32 = 0;
      uint64_t v15 = pci_slot(parent, &v32);
      if (v15)
      {
        uint64_t v16 = v15;
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (a2)
        {
          if (*a2) {
            CFRelease(*a2);
          }
          uint64_t v17 = v32;
          *a2 = v32;
          if (!v17) {
            goto LABEL_33;
          }
          CFRetain(v17);
        }
      }
      else
      {
        uint64_t v16 = (uint64_t)Mutable;
      }
      if (v32) {
        CFRelease(v32);
      }
LABEL_33:
      IOObjectRelease(parent);
      return (CFMutableStringRef)v16;
    }
    uint64_t v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
    {
      CFArrayRef v20 = _os_log_pack_size();
      uint64_t v28 = (char *)&v31 - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v29 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v29 = 67109120;
      v29[1] = v14;
      __SC_log_send(6, (uint64_t)v18, v19, v28);
    }
  }
  return Mutable;
}

CFStringRef pci_port(void *a1, int a2, const void *a3)
{
  kern_return_t MatchingServices;
  kern_return_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  __CFArray *Mutable;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void *Value;
  const void *v28;
  CFTypeID TypeID;
  CFStringRef v30;
  CFStringRef v31;
  io_object_t v32;
  io_registry_entry_t v33;
  uint64_t Count;
  CFIndex v35;
  CFIndex FirstIndexOfValue;
  CFStringRef v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _DWORD *v51;
  unsigned char v53[4];
  int valuePtr;
  CFMutableDictionaryRef properties;
  io_iterator_t v56;
  io_iterator_t existing;
  void *values;
  CFDictionaryRef v59;
  void *keys;
  __CFString *v61;
  uint64_t v62;
  CFRange v63;
  CFRange v64;

  uint64_t v62 = *MEMORY[0x1E4F143B8];
  existing = 0;
  keys = @"AAPL,slot-name";
  CFTypeID v61 = 0;
  values = a1;
  CFTypeID v59 = 0;
  CFStringRef v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFStringRef v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  keys = @"IOProviderClass";
  CFTypeID v61 = @"IOPropertyMatch";
  values = @"IOPCIDevice";
  CFTypeID v59 = v7;
  CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, v5, v6);
  CFRelease(v7);
  MatchingServices = IOServiceGetMatchingServices(masterPort, v8, &existing);
  if (MatchingServices)
  {
    uint64_t v10 = MatchingServices;
    CFStringRef v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v21 = &v53[-((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      CFIndex v22 = (_DWORD *)_os_log_pack_fill();
      *CFIndex v22 = 67109120;
      v22[1] = v10;
      __SC_log_send(6, (uint64_t)v11, v12, v21);
    }
    return 0;
  }
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v24 = IOIteratorNext(existing);
  if (v24)
  {
    uint64_t v25 = v24;
    while (1)
    {
      uint64_t v56 = 0;
      uint64_t v26 = MEMORY[0x192FA74D0](v25, "IOService", 1, &v56);
      if (v26) {
        break;
      }
      while (1)
      {
        uint64_t v32 = IOIteratorNext(v56);
        uint64_t v33 = v32;
        if (!v32) {
          break;
        }
        if (IOObjectConformsTo(v32, "IONetworkInterface"))
        {
          properties = 0;
          IORegistryEntryCreateCFProperties(v33, &properties, 0, 0);
          if (properties)
          {
            CFAbsoluteTime valuePtr = a2;
            CFDictionaryRef Value = CFDictionaryGetValue(properties, @"IOInterfaceType");
            if (Value)
            {
              uint64_t v28 = Value;
              CFTypeID TypeID = CFNumberGetTypeID();
              if (CFGetTypeID(v28) != TypeID || !CFNumberGetValue((CFNumberRef)v28, kCFNumberIntType, &valuePtr)) {
                CFAbsoluteTime valuePtr = a2;
              }
            }
            if (valuePtr == a2)
            {
              uint64_t v30 = IODictionaryCopyBSDName(properties);
              if (v30)
              {
                uint64_t v31 = v30;
                CFArrayAppendValue(Mutable, v30);
                CFRelease(v31);
              }
            }
            CFRelease(properties);
          }
        }
        IOObjectRelease(v33);
      }
      IOObjectRelease(v56);
      IOObjectRelease(v25);
      uint64_t v25 = IOIteratorNext(existing);
      if (!v25) {
        goto LABEL_21;
      }
    }
    uint64_t v38 = v26;
    CFStringRef v39 = __log_SCNetworkConfiguration();
    uint64_t v40 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v39, (os_log_type_t)v40))
    {
      uint64_t v42 = _os_log_pack_size();
      uint64_t v50 = &v53[-((MEMORY[0x1F4188790](v42, v43, v44, v45, v46, v47, v48, v49) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v51 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v51 = 67109120;
      v51[1] = v38;
      __SC_log_send(6, (uint64_t)v39, v40, v50);
    }
    CFRelease(Mutable);
    return 0;
  }
LABEL_21:
  IOObjectRelease(existing);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count < 2
    || (CFStringRef v35 = Count,
        v63.CFIndex location = 0,
        v63.CFIndex length = Count,
        CFArraySortValues(Mutable, v63, (CFComparatorFunction)compare_bsdNames, 0),
        v64.CFIndex location = 0,
        v64.CFIndex length = v35,
        FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(Mutable, v64, a3),
        FirstIndexOfValue == -1))
  {
    CFStringRef v37 = 0;
  }
  else
  {
    CFStringRef v37 = CFStringCreateWithFormat(0, 0, @"%ld", FirstIndexOfValue + 1);
  }
  CFRelease(Mutable);
  return v37;
}

CFComparisonResult compare_bsdNames(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

uint64_t isBluetoothBuiltin(unsigned char *a1)
{
  kern_return_t MatchingServices;
  io_iterator_t v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  io_registry_entry_t v20;
  CFNumberRef CFProperty;
  CFNumberRef v22;
  CFTypeID TypeID;
  BOOL v24;
  int valuePtr;
  io_iterator_t existing;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x1E4F143B8];
  existing = 0;
  mach_port_t v2 = masterPort;
  CFDictionaryRef v3 = IOServiceMatching("IOBluetoothHCIController");
  MatchingServices = IOServiceGetMatchingServices(v2, v3, &existing);
  CFStringRef v5 = existing;
  if (MatchingServices) {
    CFStringRef v6 = 1;
  }
  else {
    CFStringRef v6 = existing == 0;
  }
  if (v6)
  {
    if (MatchingServices)
    {
      CFDictionaryRef v7 = __log_SCNetworkConfiguration();
      CFDictionaryRef v8 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
      {
        CFMutableStringRef v9 = _os_log_pack_size();
        uint64_t v17 = (char *)&valuePtr
            - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v18 = (_DWORD *)_os_log_pack_fill();
        const void *v18 = 67109120;
        v18[1] = MatchingServices;
        __SC_log_send(6, (uint64_t)v7, v8, v17);
      }
    }
    uint64_t v19 = 0;
    *a1 = 0;
  }
  else
  {
    *a1 = 1;
    CFArrayRef v20 = IOIteratorNext(v5);
    IOObjectRelease(existing);
    if (v20)
    {
      CFStringRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(v20, @"idVendor", 0, 0);
      if (CFProperty)
      {
        CFIndex v22 = CFProperty;
        CFAbsoluteTime valuePtr = 0;
        CFTypeID TypeID = CFNumberGetTypeID();
        uint64_t v19 = 0;
        if (CFGetTypeID(v22) == TypeID)
        {
          if (CFNumberGetValue(v22, kCFNumberIntType, &valuePtr)) {
            uint64_t v24 = valuePtr == 1452;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v19 = v24;
        }
        CFRelease(v22);
      }
      else
      {
        uint64_t v19 = 0;
      }
      IOObjectRelease(v20);
    }
    else
    {
      return 0;
    }
  }
  return v19;
}

void set_connection_script(uint64_t a1, const void *a2)
{
  CFDictionaryRef Mutable = *(const __CFDictionary **)(a1 + 224);
  if (!Mutable)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(a1 + 224) = Mutable;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Mutable, @"Modem");
  if (Value) {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  }
  else {
    CFMutableStringRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryRef v7 = MutableCopy;
  if (a2) {
    CFDictionarySetValue(MutableCopy, @"ConnectionScript", a2);
  }
  else {
    CFDictionaryRemoveValue(MutableCopy, @"ConnectionScript");
  }
  CFIndex Count = CFDictionaryGetCount(v7);
  CFMutableStringRef v9 = *(__CFDictionary **)(a1 + 224);
  if (Count < 1) {
    CFDictionaryRemoveValue(v9, @"Modem");
  }
  else {
    CFDictionarySetValue(v9, @"Modem", v7);
  }
  CFRelease(v7);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 224)))
  {
    CFRelease(*(CFTypeRef *)(a1 + 224));
    *(void *)(a1 + 224) = 0;
  }
}

uint64_t is_valid_connection_script(const __CFString *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  _SC_cfstring_to_cstring(a1, v40, 1024, 0x8000100u);
  uint64_t started = sysdir_start_search_path_enumeration(SYSDIR_DIRECTORY_LIBRARY, SYSDIR_DOMAIN_MASK_SYSTEM|SYSDIR_DOMAIN_MASK_LOCAL);
  uint64_t result = MEMORY[0x192FA8640](started, v39);
  if (result)
  {
    uint64_t v4 = result;
    *(void *)&long long v3 = 136315138;
    long long v37 = v3;
    do
    {
      memset(&v38, 0, sizeof(v38));
      if (v40[0] == 47) {
        v39[0] = 0;
      }
      else {
        __strlcat_chk();
      }
      __strlcat_chk();
      if (stat(v39, &v38))
      {
        if (*__error() != 2)
        {
          CFStringRef v5 = __log_SCNetworkConfiguration();
          uint64_t v6 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v5, (os_log_type_t)v6))
          {
            uint64_t v7 = _os_log_pack_size();
            uint64_t v15 = (char *)&v37
                - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v16 = _os_log_pack_fill();
            uint64_t v17 = __error();
            uint64_t v18 = strerror(*v17);
            *(_DWORD *)uint64_t v16 = v37;
            *(void *)(v16 + 4) = v18;
            uint64_t v19 = (uint64_t)v5;
            uint64_t v20 = v6;
            uint64_t v21 = v15;
LABEL_17:
            __SC_log_send(6, v19, v20, v21);
            goto LABEL_19;
          }
          goto LABEL_19;
        }
      }
      else if ((v38.st_mode & 0xF000) == 0x8000)
      {
        return 1;
      }
      size_t v22 = strlen(v39);
      if (v22 < 5 || !strstr(&v39[v22 - 6], ".ccl"))
      {
        __strlcat_chk();
        if (stat(v39, &v38))
        {
          if (*__error() == 2) {
            goto LABEL_19;
          }
          uint64_t v23 = __log_SCNetworkConfiguration();
          uint64_t v24 = _SC_syslog_os_log_mapping(6);
          if (!__SC_log_enabled(6, v23, (os_log_type_t)v24)) {
            goto LABEL_19;
          }
          uint64_t v25 = _os_log_pack_size();
          uint64_t v33 = (char *)&v37
              - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v34 = _os_log_pack_fill();
          CFStringRef v35 = __error();
          uint64_t v36 = strerror(*v35);
          *(_DWORD *)uint64_t v34 = v37;
          *(void *)(v34 + 4) = v36;
          uint64_t v19 = (uint64_t)v23;
          uint64_t v20 = v24;
          uint64_t v21 = v33;
          goto LABEL_17;
        }
      }
      if ((v38.st_mode & 0xF000) == 0x4000) {
        return 1;
      }
LABEL_19:
      uint64_t result = MEMORY[0x192FA8640](v4, v39);
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

const __SCNetworkInterface *findInterface(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, v6);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (BSDName)
    {
      if (CFEqual(BSDName, a2)) {
        break;
      }
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

void localizeNumberString(CFStringRef *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v1 = *a1;
  if (*a1)
  {
    CFIndex Length = CFStringGetLength(*a1);
    rangep.CFIndex location = 0;
    rangep.CFIndex length = Length;
    CFLocaleRef v4 = CFLocaleCopyCurrent();
    CFIndex v5 = CFNumberFormatterCreate(0, v4, kCFNumberFormatterNoStyle);
    CFNumberRef v6 = CFNumberFormatterCreateNumberFromString(0, v5, v1, &rangep, 1uLL);
    if (v6 && (CFIndex v7 = rangep.length, v7 == CFStringGetLength(v1))) {
      CFStringRef StringWithNumber = CFNumberFormatterCreateStringWithNumber(0, v5, v6);
    }
    else {
      CFStringRef StringWithNumber = (const __CFString *)CFRetain(v1);
    }
    CFStringRef v9 = StringWithNumber;
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    CFRelease(v1);
    *a1 = v9;
  }
}

__CFArray *copyPerInterfaceConfigurationPaths(uint64_t a1, uint64_t a2)
{
  uint64_t Private = __SCNetworkServiceCreatePrivate(0, *(const void **)(a1 + 80), *(const __CFString **)(a1 + 96), (const void *)a1);
  CFArrayRef v5 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 80));
  if (v5)
  {
    CFArrayRef v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count < 1)
    {
      CFDictionaryRef Mutable = 0;
    }
    else
    {
      CFIndex v8 = Count;
      CFDictionaryRef Mutable = 0;
      CFIndex v10 = 0;
      uint64_t v11 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v6, v10);
        CFArrayRef v13 = SCNetworkSetCopyServices(ValueAtIndex);
        v17.CFIndex length = CFArrayGetCount(v13);
        v17.CFIndex location = 0;
        if (CFArrayContainsValue(v13, v17, Private))
        {
          CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
          CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(0, (uint64_t)SetID, *(void *)(a1 + 112), a2);
          if (!Mutable) {
            CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, v11);
          }
          CFArrayAppendValue(Mutable, SetNetworkInterfaceEntity);
          CFRelease(SetNetworkInterfaceEntity);
        }
        CFRelease(v13);
        ++v10;
      }
      while (v8 != v10);
    }
    CFRelease(Private);
    CFRelease(v6);
  }
  else
  {
    CFRelease(Private);
    return 0;
  }
  return Mutable;
}

uint64_t findPerInterfaceConfiguration(uint64_t a1)
{
  uint64_t v1 = 0;
  mach_port_t v2 = *(const void **)(a1 + 16);
  for (uint64_t i = (CFTypeRef **)configurations; !CFEqual(v2, **i); i += 5)
  {
    if (++v1 == 19) {
      return -1;
    }
  }
  if ((0x5BF13uLL >> v1)) {
    return -1;
  }
  else {
    return v1;
  }
}

void __addExtendedConfigurationType(const void *a1, uint64_t a2, uint64_t a3)
{
  if (!CFEqual(a1, *(CFTypeRef *)a3))
  {
    CFArrayRef v5 = *(const __CFArray **)(a3 + 8);
    v8.CFIndex length = CFArrayGetCount(v5);
    v8.CFIndex location = 0;
    if (!CFArrayContainsValue(v5, v8, a1))
    {
      CFArrayRef v6 = *(__CFArray **)(a3 + 8);
      CFArrayAppendValue(v6, a1);
    }
  }
}

uint64_t _SCDynamicStoreCacheIsActive(unsigned __int8 *a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID) {
    return a1[200];
  }
  _SCErrorSet(2001);
  return 0;
}

uint64_t _SCDynamicStoreCacheOpen(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID((CFTypeRef)a1) == TypeID)
  {
    __SCDynamicStoreCacheRelease((void *)a1);
    uint64_t result = 1;
    *(unsigned char *)(a1 + 200) = 1;
  }
  else
  {
    _SCErrorSet(2001);
    return 0;
  }
  return result;
}

void __SCDynamicStoreCacheRelease(void *a1)
{
  mach_port_t v2 = (const void *)a1[26];
  if (v2)
  {
    CFRelease(v2);
    a1[26] = 0;
  }
  long long v3 = (const void *)a1[27];
  if (v3)
  {
    CFRelease(v3);
    a1[27] = 0;
  }
  CFLocaleRef v4 = (const void *)a1[28];
  if (v4)
  {
    CFRelease(v4);
    a1[28] = 0;
  }
  CFArrayRef v5 = (const void *)a1[29];
  if (v5)
  {
    CFRelease(v5);
    a1[29] = 0;
  }
}

uint64_t _SCDynamicStoreCacheCommitChanges(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (!a1 || CFGetTypeID((CFTypeRef)a1) != TypeID)
  {
    int v6 = 2001;
LABEL_9:
    _SCErrorSet(v6);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 200))
  {
    int v6 = 1001;
    goto LABEL_9;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 224);
  if (*(_OWORD *)(a1 + 216) != 0)
  {
LABEL_7:
    uint64_t v4 = SCDynamicStoreSetMultiple((SCDynamicStoreRef)a1, *(CFDictionaryRef *)(a1 + 216), v3, *(CFArrayRef *)(a1 + 232));
    __SCDynamicStoreCacheRelease((void *)a1);
    return v4;
  }
  if (*(void *)(a1 + 232))
  {
    CFArrayRef v3 = 0;
    goto LABEL_7;
  }
  return 1;
}

uint64_t _SCDynamicStoreCacheClose(uint64_t a1)
{
  CFTypeID TypeID = SCDynamicStoreGetTypeID();
  if (a1 && CFGetTypeID((CFTypeRef)a1) == TypeID)
  {
    if (*(unsigned char *)(a1 + 200))
    {
      __SCDynamicStoreCacheRelease((void *)a1);
      *(unsigned char *)(a1 + 200) = 0;
      return 1;
    }
    int v4 = 1001;
  }
  else
  {
    int v4 = 2001;
  }
  _SCErrorSet(v4);
  return 0;
}

uint64_t __SCNetworkProtocolCreatePrivate(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (__SCNetworkProtocolInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = CFStringCreateCopy(0, a2);
    *(void *)(Instance + 24) = CFRetain(a3);
  }
  return Instance;
}

BOOL __SCNetworkProtocolIsValidType(const __CFString *cf1)
{
  uint64_t v2 = 0;
  while (!CFEqual(cf1, *__SCNetworkProtocolIsValidType_valid_types[v2]))
  {
    if (++v2 == 4)
    {
      v4.CFIndex length = CFStringGetLength(cf1);
      v4.CFIndex location = 0;
      return CFStringFindWithOptions(cf1, @".", v4, 0, 0) != 0;
    }
  }
  return 1;
}

CFComparisonResult _SCNetworkProtocolCompare(const __SCNetworkProtocol *a1, const __SCNetworkProtocol *a2)
{
  CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(a1);
  CFStringRef v4 = SCNetworkProtocolGetProtocolType(a2);

  return CFStringCompare(ProtocolType, v4, 0);
}

CFStringRef SCNetworkProtocolGetProtocolType(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2) {
    return (CFStringRef)*((void *)protocol + 2);
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

CFTypeID SCNetworkProtocolGetTypeID(void)
{
  if (__SCNetworkProtocolInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
  }
  return __kSCNetworkProtocolTypeID;
}

CFDictionaryRef SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2)
  {
    uint64_t v3 = *((void *)protocol + 3);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(v3 + 16), *((void *)protocol + 2));
    CFDictionaryRef Value = __SCNetworkConfigurationGetValue(*(const __SCPreferences **)(v3 + 32), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return Value;
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

Boolean SCNetworkProtocolGetEnabled(SCNetworkProtocolRef protocol)
{
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_6;
    }
  }
  uint64_t v2 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) == v2)
  {
    uint64_t v3 = *((void *)protocol + 3);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(v3 + 16), *((void *)protocol + 2));
    Boolean PrefsEnabled = __getPrefsEnabled(*(const __SCPreferences **)(v3 + 32), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    return PrefsEnabled;
  }
LABEL_6:
  _SCErrorSet(1002);
  return 0;
}

Boolean SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef protocol, CFDictionaryRef config)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol)
    {
LABEL_14:
      _SCErrorSet(1002);
      LOBYTE(v7) = 0;
      return v7;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_14;
    }
  }
  uint64_t v4 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) != v4) {
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)protocol + 3);
  if (!__SCNetworkServiceExists(v5))
  {
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v31 = (char *)block - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      uint64_t v33 = *((void *)protocol + 2);
      *(_DWORD *)uint64_t v32 = 138412546;
      *(void *)(v32 + 4) = v33;
      *(_WORD *)(v32 + 12) = 2112;
      *(void *)(v32 + 14) = v5;
      __SC_log_send(3, (uint64_t)v21, v22, v31);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_2;
    block[3] = &__block_descriptor_tmp_37_0;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkProtocolSetConfiguration() w/removed service";
    if (_SC_crash_once_once_2 != -1) {
      dispatch_once(&_SC_crash_once_once_2, block);
    }
    goto LABEL_14;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(*((void *)protocol + 3) + 16), *((void *)protocol + 2));
  int v7 = __SCNetworkConfigurationSetValue(*(SCPreferencesRef *)(v5 + 32), NetworkServiceEntity, config, 1);
  CFRelease(NetworkServiceEntity);
  if (v7)
  {
    CFRange v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)block - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      CFDictionaryRef v20 = (CFDictionaryRef)@"NULL";
      if (config) {
        CFDictionaryRef v20 = config;
      }
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = protocol;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = v20;
      __SC_log_send(7, (uint64_t)v8, v9, v18);
    }
  }
  return v7;
}

Boolean SCNetworkProtocolSetEnabled(SCNetworkProtocolRef protocol, Boolean enabled)
{
  int v2 = enabled;
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkProtocolInitialize_initialized == -1)
  {
    if (!protocol)
    {
LABEL_14:
      _SCErrorSet(1002);
      LOBYTE(v7) = 0;
      return v7;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkProtocolInitialize_initialized, &__block_literal_global_12);
    if (!protocol) {
      goto LABEL_14;
    }
  }
  uint64_t v4 = __kSCNetworkProtocolTypeID;
  if (CFGetTypeID(protocol) != v4) {
    goto LABEL_14;
  }
  uint64_t v5 = *((void *)protocol + 3);
  if (!__SCNetworkServiceExists(v5))
  {
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v31 = (char *)block - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      uint64_t v33 = *((void *)protocol + 2);
      *(_DWORD *)uint64_t v32 = 138412546;
      *(void *)(v32 + 4) = v33;
      *(_WORD *)(v32 + 12) = 2112;
      *(void *)(v32 + 14) = v5;
      __SC_log_send(3, (uint64_t)v21, v22, v31);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_2;
    block[3] = &__block_descriptor_tmp_37_0;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkProtocolSetEnabled() w/removed service";
    if (_SC_crash_once_once_2 != -1) {
      dispatch_once(&_SC_crash_once_once_2, block);
    }
    goto LABEL_14;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(*((void *)protocol + 3) + 16), *((void *)protocol + 2));
  int v7 = __setPrefsEnabled(*(const __SCPreferences **)(v5 + 32), NetworkServiceEntity, v2);
  CFRelease(NetworkServiceEntity);
  if (v7)
  {
    CFRange v8 = __log_SCNetworkConfiguration();
    uint64_t v9 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)block - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      CFDictionaryRef v20 = "Enabled";
      if (!v2) {
        CFDictionaryRef v20 = "Disabled";
      }
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = protocol;
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = v20;
      __SC_log_send(7, (uint64_t)v8, v9, v18);
    }
  }
  return v7;
}

void __SCNetworkProtocolDeallocate(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  int v2 = *(const void **)(a1 + 24);

  CFRelease(v2);
}

uint64_t __SCNetworkProtocolEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16));
  if (!result) {
    return result;
  }
  uint64_t v5 = *(const void **)(a1 + 24);
  int v6 = *(const void **)(a2 + 24);
  return v5 == v6 || v5 && v6 && CFEqual(v5, v6);
}

CFHashCode __SCNetworkProtocolHash(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 16);

  return CFHash(v1);
}

__CFString *__SCNetworkProtocolCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkProtocol %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"id = %@", a1[2]);
  CFStringAppendFormat(Mutable, 0, @", service = %p", a1[3]);
  CFStringAppendFormat(Mutable, 0, @", prefs = %p", *(void *)(a1[3] + 32));
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

CFComparisonResult _SCNetworkServiceCompare(const __SCNetworkService *a1, const __SCNetworkService *a2, const __CFArray *a3)
{
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
  CFStringRef v6 = SCNetworkServiceGetServiceID(a2);
  if (a3)
  {
    CFIndex Count = CFArrayGetCount(a3);
    v14.CFIndex location = 0;
    v14.CFIndex length = Count;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(a3, v14, ServiceID);
    v15.CFIndex location = 0;
    v15.CFIndex length = Count;
    CFIndex v9 = CFArrayGetFirstIndexOfValue(a3, v15, v6);
    if (FirstIndexOfValue > v9)
    {
      BOOL v10 = v9 == -1;
      uint64_t v11 = -1;
      goto LABEL_6;
    }
    if (FirstIndexOfValue < v9)
    {
      BOOL v10 = FirstIndexOfValue == -1;
      uint64_t v11 = 1;
LABEL_6:
      if (v10) {
        return v11;
      }
      else {
        return -v11;
      }
    }
  }

  return CFStringCompare(ServiceID, v6, 0);
}

__CFArray *__SCNetworkServiceCopyAllEnabled(const __SCPreferences *a1)
{
  CFArrayRef v1 = SCNetworkSetCopyAll(a1);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    CFDictionaryRef Mutable = 0;
    CFIndex v6 = 0;
    int v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v2, v6);
      CFArrayRef v9 = SCNetworkSetCopyServices(ValueAtIndex);
      if (v9)
      {
        CFArrayRef v10 = v9;
        CFIndex v11 = CFArrayGetCount(v9);
        if (v11 >= 1)
        {
          CFIndex v12 = v11;
          for (CFIndex i = 0; v12 != i; ++i)
          {
            CFRange v14 = CFArrayGetValueAtIndex(v10, i);
            if (SCNetworkServiceGetEnabled((SCNetworkServiceRef)v14))
            {
              if (!Mutable)
              {
                CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, v7);
LABEL_12:
                CFArrayAppendValue(Mutable, v14);
                continue;
              }
              v16.CFIndex length = CFArrayGetCount(Mutable);
              v16.CFIndex location = 0;
              if (!CFArrayContainsValue(Mutable, v16, v14)) {
                goto LABEL_12;
              }
            }
          }
        }
        CFRelease(v10);
      }
      if (++v6 == v4) {
        goto LABEL_19;
      }
    }
  }
  CFDictionaryRef Mutable = 0;
LABEL_19:
  CFRelease(v2);
  return Mutable;
}

uint64_t __SCNetworkServiceExistsForInterface(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex((CFArrayRef)a1, v7);
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
    if (Interface) {
      break;
    }
LABEL_9:
    uint64_t result = 0;
    if (++v7 == v6) {
      return result;
    }
  }
  CFArrayRef v10 = Interface;
  while (!CFEqual(a2, v10))
  {
    CFArrayRef v10 = SCNetworkInterfaceGetInterface(v10);
    if (!v10) {
      goto LABEL_9;
    }
  }
  return 1;
}

Boolean SCNetworkServiceAddProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_15:
    _SCErrorSet(1002);
    LOBYTE(v6) = 0;
    return v6;
  }
  if (!service) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4) || !__SCNetworkProtocolIsValidType(protocolType)) {
    goto LABEL_15;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    CFIndex v7 = _SC_LOG_DEFAULT();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)block - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = service;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = protocolType;
      __SC_log_send(3, (uint64_t)v7, v8, v17);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceAddProtocolType() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_15;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), (uint64_t)protocolType);
  if (!SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity))
  {
    CFDictionaryRef v20 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v21 = SCPreferencesPathSetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity, v20);
    CFRelease(v20);
    if (!v21) {
      goto LABEL_9;
    }
    SCNetworkProtocolRef v22 = SCNetworkServiceCopyProtocol(service, protocolType);
    if (!v22) {
      SCNetworkServiceAddProtocolType_cold_1();
    }
    uint64_t v23 = v22;
    uint64_t v24 = *((void *)service + 3);
    if (v24)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(*((SCNetworkInterfaceRef *)service + 3));
      SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(*((SCNetworkInterfaceRef *)service + 3));
      if (Interface)
      {
        uint64_t v27 = Interface;
        CFStringRef v28 = SCNetworkInterfaceGetInterfaceType(Interface);
        CFDictionaryRef v29 = (const __CFDictionary *)__copyProtocolTemplate(InterfaceType, v28, protocolType);
        if (v29)
        {
          CFDictionaryRef v30 = v29;
          do
          {
            uint64_t v24 = (uint64_t)v27;
            uint64_t v27 = SCNetworkInterfaceGetInterface(v27);
          }
          while (v27);
LABEL_26:
          CFDictionaryRef TemplateOverrides = (const __CFDictionary *)__SCNetworkInterfaceGetTemplateOverrides(v24, protocolType);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (TemplateOverrides && CFGetTypeID(TemplateOverrides) == TypeID)
          {
            CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v30);
            CFDictionaryApplyFunction(TemplateOverrides, (CFDictionaryApplierFunction)mergeDict, MutableCopy);
            CFRelease(v30);
            CFDictionaryRef v30 = MutableCopy;
          }
          if (v30) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        CFDictionaryRef v30 = (const __CFDictionary *)__copyProtocolTemplate(InterfaceType, 0, protocolType);
        if (v30) {
          goto LABEL_26;
        }
      }
    }
    CFDictionaryRef v30 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v30) {
      SCNetworkServiceAddProtocolType_cold_2();
    }
LABEL_31:
    if (SCNetworkProtocolSetConfiguration(v23, v30))
    {
      Boolean v34 = CFDictionaryContainsKey(v30, @"__INACTIVE__") == 0;
      int v6 = SCNetworkProtocolSetEnabled(v23, v34);
    }
    else
    {
      int v6 = 0;
    }
    CFRelease(v30);
    CFRelease(v23);
    if (v6)
    {
      CFStringRef v35 = _SC_LOG_DEFAULT();
      uint64_t v36 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v35, (os_log_type_t)v36))
      {
        uint64_t v37 = _os_log_pack_size();
        CFTypeID v45 = (char *)block
            - ((MEMORY[0x1F4188790](v37, v38, v39, v40, v41, v42, v43, v44) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v46 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v46 = 138412546;
        *(void *)(v46 + 4) = service;
        *(_WORD *)(v46 + 12) = 2112;
        *(void *)(v46 + 14) = protocolType;
        __SC_log_send(7, (uint64_t)v35, v36, v45);
      }
    }
    goto LABEL_10;
  }
  _SCErrorSet(1005);
LABEL_9:
  LOBYTE(v6) = 0;
LABEL_10:
  CFRelease(NetworkServiceEntity);
  return v6;
}

BOOL __SCNetworkServiceExists(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    && (NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(a1 + 16), @"Interface"), Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 32), NetworkServiceEntity), CFRelease(NetworkServiceEntity), CFTypeID TypeID = CFDictionaryGetTypeID(), Value))
  {
    return CFGetTypeID(Value) == TypeID;
  }
  else
  {
    return 0;
  }
}

SCNetworkProtocolRef SCNetworkServiceCopyProtocol(SCNetworkServiceRef service, CFStringRef protocolType)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_18:
    int v12 = 1002;
    goto LABEL_19;
  }
  if (!service) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4) {
    goto LABEL_18;
  }
  if (!*((void *)service + 4)) {
    goto LABEL_18;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!protocolType || CFGetTypeID(protocolType) != TypeID) {
    goto LABEL_18;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID v8 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v8)
  {
    int v12 = 1001;
LABEL_19:
    _SCErrorSet(v12);
    return 0;
  }
  uint64_t v9 = _copyInterfaceEntityTypes(Value);
  if (CFSetContainsValue(v9, protocolType))
  {
    int v10 = 1002;
  }
  else
  {
    if (CFDictionaryContainsKey(Value, protocolType))
    {
      uint64_t Private = (const __SCNetworkProtocol *)__SCNetworkProtocolCreatePrivate(0, protocolType, service);
      goto LABEL_15;
    }
    int v10 = 1004;
  }
  _SCErrorSet(v10);
  uint64_t Private = 0;
LABEL_15:
  CFRelease(v9);
  return Private;
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFStringRef NetworkServices = SCPreferencesPathKeyCreateNetworkServices(0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, NetworkServices);
  CFRelease(NetworkServices);
  if (!Value)
  {
    int v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    return CFArrayCreateMutable(0, 0, v10);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count < 1) {
    return Mutable;
  }
  CFIndex v7 = Count;
  memset(v65, 0, sizeof(v65));
  memset(v64, 0, sizeof(v64));
  SCPreferencesRef v59 = prefs;
  CFMutableArrayRef v60 = Mutable;
  if ((unint64_t)Count < 0x41)
  {
    CFTypeID v8 = (const void **)v65;
    uint64_t v9 = (const void **)v64;
  }
  else
  {
    CFTypeID v8 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    uint64_t v9 = (const void **)CFAllocatorAllocate(0, 8 * v7, 0);
  }
  CFDictionaryGetKeysAndValues(Value, v8, v9);
  uint64_t v12 = 0;
  CFTypeID v63 = @"Interface";
  *(void *)&long long v13 = 138412290;
  long long v62 = v13;
  *(void *)&long long v13 = 138412546;
  long long v61 = v13;
  do
  {
    uint64_t v14 = v9[v12];
    CFTypeID v15 = CFDictionaryGetTypeID();
    if (!v14 || CFGetTypeID(v14) != v15)
    {
      uint64_t v31 = _SC_LOG_DEFAULT();
      uint64_t v32 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v31, (os_log_type_t)v32)) {
        goto LABEL_25;
      }
      uint64_t v33 = _os_log_pack_size();
      uint64_t v41 = (char *)&v59 - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v42 = _os_log_pack_fill();
      uint64_t v43 = v8[v12];
      *(_DWORD *)uint64_t v42 = v62;
      *(void *)(v42 + 4) = v43;
      uint64_t v29 = (uint64_t)v31;
      uint64_t v30 = v32;
      uint64_t v44 = v41;
      goto LABEL_24;
    }
    uint64_t v16 = CFDictionaryGetValue((CFDictionaryRef)v9[v12], v63);
    CFTypeID v17 = CFDictionaryGetTypeID();
    if (!v16 || CFGetTypeID(v16) != v17)
    {
      CFTypeID v45 = _SC_LOG_DEFAULT();
      uint64_t v46 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v45, (os_log_type_t)v46)) {
        goto LABEL_25;
      }
      uint64_t v47 = _os_log_pack_size();
      CFStringRef v28 = (char *)&v59 - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v55 = _os_log_pack_fill();
      uint64_t v56 = v8[v12];
      *(_DWORD *)uint64_t v55 = v61;
      *(void *)(v55 + 4) = v63;
      *(_WORD *)(v55 + 12) = 2112;
      *(void *)(v55 + 14) = v56;
      uint64_t v29 = (uint64_t)v45;
      uint64_t v30 = v46;
      goto LABEL_23;
    }
    if (__SCNetworkInterfaceEntityIsPPTP((const __CFDictionary *)v16))
    {
      uint64_t v18 = _SC_LOG_DEFAULT();
      uint64_t v19 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v18, (os_log_type_t)v19)) {
        goto LABEL_25;
      }
      uint64_t v20 = _os_log_pack_size();
      CFStringRef v28 = (char *)&v59 - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      uint64_t v29 = (uint64_t)v18;
      uint64_t v30 = v19;
LABEL_23:
      uint64_t v44 = v28;
LABEL_24:
      __SC_log_send(6, v29, v30, v44);
      goto LABEL_25;
    }
    uint64_t Private = __SCNetworkServiceCreatePrivate(0, v59, (const __CFString *)v8[v12], 0);
    if (!Private) {
      SCNetworkServiceCopyAll_cold_1();
    }
    uint64_t v58 = Private;
    CFArrayAppendValue(v60, Private);
    CFRelease(v58);
LABEL_25:
    ++v12;
  }
  while (v7 != v12);
  if (v8 != (const void **)v65)
  {
    CFAllocatorDeallocate(0, v8);
    CFAllocatorDeallocate(0, v9);
  }
  return v60;
}

__CFArray *__SCNetworkServiceCopyAllInterfaces(const __SCPreferences *a1)
{
  CFArrayRef v1 = SCNetworkServiceCopyAll(a1);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  if (Count)
  {
    uint64_t v4 = Count;
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (v4 >= 1)
    {
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v2, i);
        SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
        if (Interface && CFGetTypeID(Interface) == TypeID) {
          CFArrayAppendValue(Mutable, Interface);
        }
      }
    }
    if (CFArrayGetCount(Mutable)) {
      goto LABEL_12;
    }
    CFRelease(Mutable);
  }
  CFArrayRef Mutable = 0;
LABEL_12:
  CFRelease(v2);
  return Mutable;
}

SCNetworkServiceRef SCNetworkServiceCopy(SCPreferencesRef prefs, CFStringRef serviceID)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFStringGetTypeID();
  if (!serviceID || CFGetTypeID(serviceID) != TypeID)
  {
    int v19 = 1002;
    goto LABEL_10;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)serviceID, @"Interface");
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7)
  {
LABEL_8:
    int v19 = 1004;
LABEL_10:
    _SCErrorSet(v19);
    return 0;
  }
  if (__SCNetworkInterfaceEntityIsPPTP(Value))
  {
    CFTypeID v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      uint64_t v18 = (char *)v21 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v8, v9, v18);
    }
    goto LABEL_8;
  }

  return (SCNetworkServiceRef)__SCNetworkServiceCreatePrivate(0, prefs, serviceID, 0);
}

void *_SCNetworkServiceCopyActive(const void *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID)
  {
    uint64_t Private = __SCNetworkServiceCreatePrivate(0, 0, a2, 0);
    if (!Private) {
      _SCNetworkServiceCopyActive_cold_1();
    }
    int v6 = Private;
    if (a1)
    {
      Private[5] = a1;
      CFRetain(a1);
    }
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
  return v6;
}

__CFSet *_copyInterfaceEntityTypes(const __CFDictionary *a1)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  CFArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Interface");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    v9[0] = @"Type";
    v9[1] = @"SubType";
    v9[2] = @"Hardware";
    CFSetAddValue(Mutable, @"Interface");
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v6 = CFDictionaryGetValue(Value, (const void *)v9[i]);
      CFTypeID v7 = CFStringGetTypeID();
      if (v6 && CFGetTypeID(v6) == v7) {
        CFSetAddValue(Mutable, v6);
      }
    }
    CFSetAddValue(Mutable, @"PPP");
  }
  return Mutable;
}

CFArrayRef SCNetworkServiceCopyProtocols(SCNetworkServiceRef service)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_22:
    int v12 = 1002;
    goto LABEL_23;
  }
  if (!service) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_22;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    int v12 = 1001;
LABEL_23:
    _SCErrorSet(v12);
    return 0;
  }
  int v6 = _copyInterfaceEntityTypes(Value);
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFDictionaryGetCount(Value);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    memset(v19, 0, sizeof(v19));
    memset(v18, 0, sizeof(v18));
    if ((unint64_t)Count < 0x41)
    {
      uint64_t v11 = (const void **)v18;
      uint64_t v10 = (const void **)v19;
    }
    else
    {
      uint64_t v10 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      uint64_t v11 = (const void **)CFAllocatorAllocate(0, 8 * v9, 0);
    }
    CFDictionaryGetKeysAndValues(Value, v10, v11);
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v14 = v11[i];
      CFTypeID v15 = CFDictionaryGetTypeID();
      if (v14 && CFGetTypeID(v14) == v15 && !CFSetContainsValue(v6, v10[i]))
      {
        uint64_t Private = (const void *)__SCNetworkProtocolCreatePrivate(0, (const __CFString *)v10[i], service);
        CFArrayAppendValue(Mutable, Private);
        CFRelease(Private);
      }
    }
    if (v10 != (const void **)v19)
    {
      CFAllocatorDeallocate(0, v10);
      CFAllocatorDeallocate(0, v11);
    }
  }
  CFRelease(v6);
  return Mutable;
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!interface
    || CFGetTypeID(interface) != TypeID
    || !SCNetworkInterfaceGetSupportedProtocolTypes(interface)
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(interface),
        CFStringFind(InterfaceType, @".", 0).location == -1))
  {
    int v6 = 1002;
    goto LABEL_8;
  }
  if (__SCNetworkInterfaceIsBusyMember(prefs, interface, 1))
  {
    int v6 = 1001;
LABEL_8:
    _SCErrorSet(v6);
    return 0;
  }
  CFStringRef NetworkServices = SCPreferencesPathKeyCreateNetworkServices(0);
  CFStringRef UniqueChild = SCPreferencesPathCreateUniqueChild(prefs, NetworkServices);
  CFRelease(NetworkServices);
  if (!UniqueChild) {
    return (SCNetworkServiceRef)UniqueChild;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, UniqueChild, @"/");
  CFRelease(UniqueChild);
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
  CFStringRef UniqueChild = (CFStringRef)__SCNetworkServiceCreatePrivate(0, prefs, ValueAtIndex, 0);
  CFRelease(ArrayBySeparatingStrings);
  CFStringRef Copy = (const __SCNetworkInterface *)__SCNetworkInterfaceCreateCopy(0, (uint64_t)interface, prefs, ValueAtIndex);
  UniqueChild->CFIndex length = (uint64_t)Copy;
  if (!Copy) {
    goto LABEL_43;
  }
  CFStringRef v62 = UniqueChild;
  uint64_t v14 = @"Bluetooth";
  CFDictionaryRef v64 = @"Serial";
  CFTypeID v63 = @"WWAN";
  CFTypeID v15 = @"ConnectionScript";
  uint64_t v70 = @"ConnectionPersonality";
  uint64_t v69 = @"DeviceVendor";
  uint64_t v68 = @"DeviceModel";
  long long v61 = @"PPP";
  uint64_t v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef v60 = @"VPN";
  *(void *)&long long v13 = 138412290;
  long long v65 = v13;
  uint64_t v66 = @"ConnectionScript";
  CFTypeRef v67 = @"Bluetooth";
  do
  {
    CFStringRef v18 = SCNetworkInterfaceGetInterfaceType(Copy);
    int v19 = SCNetworkInterfaceGetInterface(Copy);
    if (v19) {
      CFStringRef v20 = SCNetworkInterfaceGetInterfaceType(v19);
    }
    else {
      CFStringRef v20 = 0;
    }
    CFDictionaryRef v21 = (const __CFDictionary *)__copyInterfaceTemplate(v18, v20);
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v21);
      CFRelease(v22);
    }
    else
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, v16, v17);
    }
    if (CFEqual(v18, v14) || CFEqual(v18, @"Modem") || CFEqual(v18, v64) || CFEqual(v18, v63))
    {
      CFDictionaryRef TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)Copy, @"Modem");
      CFTypeID v25 = CFDictionaryGetTypeID();
      if (!TemplateOverrides)
      {
        CFDictionaryGetTypeID();
        goto LABEL_31;
      }
      if (CFGetTypeID(TemplateOverrides) == v25 && CFDictionaryContainsKey((CFDictionaryRef)TemplateOverrides, v15))
      {
        CFDictionaryRemoveValue(MutableCopy, v70);
        CFDictionaryRemoveValue(MutableCopy, v15);
        CFDictionaryRemoveValue(MutableCopy, v69);
        CFDictionaryRemoveValue(MutableCopy, v68);
      }
      CFTypeID v26 = CFDictionaryGetTypeID();
LABEL_28:
      if (CFGetTypeID(TemplateOverrides) == v26) {
        CFDictionaryApplyFunction((CFDictionaryRef)TemplateOverrides, (CFDictionaryApplierFunction)mergeDict, MutableCopy);
      }
      goto LABEL_31;
    }
    uint64_t v41 = v61;
    if (!CFEqual(v18, v61))
    {
      if (CFEqual(v18, v60)) {
        uint64_t v41 = v61;
      }
      else {
        uint64_t v41 = (__CFString *)v18;
      }
    }
    CFDictionaryRef TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)Copy, v41);
    CFTypeID v26 = CFDictionaryGetTypeID();
    if (TemplateOverrides) {
      goto LABEL_28;
    }
LABEL_31:
    if (CFDictionaryGetCount(MutableCopy) >= 1
      && !__SCNetworkInterfaceSetConfiguration((uint64_t)Copy, 0, MutableCopy, 1))
    {
      uint64_t v27 = _SC_LOG_DEFAULT();
      uint64_t v28 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v27, (os_log_type_t)v28))
      {
        uint64_t v29 = _os_log_pack_size();
        uint64_t v37 = v17;
        uint64_t v38 = (char *)&v59 - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v39 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v39 = v65;
        *(void *)(v39 + 4) = Copy;
        uint64_t v40 = v38;
        uint64_t v17 = v37;
        __SC_log_send(6, (uint64_t)v27, v28, v40);
        CFTypeID v15 = v66;
        uint64_t v14 = v67;
      }
    }
    CFRelease(MutableCopy);
    CFStringRef Copy = SCNetworkInterfaceGetInterface(Copy);
  }
  while (Copy);
  CFStringRef UniqueChild = v62;
  CFStringRef Copy = (const __SCNetworkInterface *)v62->length;
LABEL_43:
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)UniqueChild->data, @"Interface");
  uint64_t v43 = __SCNetworkInterfaceCopyInterfaceEntity(Copy);
  SCPreferencesPathSetValue((SCPreferencesRef)UniqueChild[1].isa, NetworkServiceEntity, v43);
  CFRelease(v43);
  CFRelease(NetworkServiceEntity);
  uint64_t v44 = __SCNetworkInterfaceCopyDeepConfiguration(0, (const __SCNetworkInterface *)UniqueChild->length);
  __SCNetworkInterfaceSetDeepConfiguration(0, (const __SCNetworkInterface *)UniqueChild->length, v44, v45);
  if (v44) {
    CFRelease(v44);
  }
  CFStringRef Name = __SCNetworkServiceGetName(UniqueChild, 1);
  if (Name) {
    SCNetworkServiceSetName((SCNetworkServiceRef)UniqueChild, Name);
  }
  uint64_t v47 = _SC_LOG_DEFAULT();
  uint64_t v48 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v47, (os_log_type_t)v48))
  {
    uint64_t v49 = _os_log_pack_size();
    uint64_t v57 = (char *)&v59 - ((MEMORY[0x1F4188790](v49, v50, v51, v52, v53, v54, v55, v56) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v58 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v58 = 138412290;
    *(void *)(v58 + 4) = UniqueChild;
    __SC_log_send(7, (uint64_t)v47, v48, v57);
  }
  return (SCNetworkServiceRef)UniqueChild;
}

void mergeDict(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

CFStringRef SCNetworkServiceGetName(SCNetworkServiceRef service)
{
  return __SCNetworkServiceGetName(service, 1);
}

Boolean SCNetworkServiceSetName(SCNetworkServiceRef service, CFStringRef name)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_21;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_21;
    }
  }
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_21;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    long long v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v13, (os_log_type_t)v14))
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v23 = (char *)&v64 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      CFStringRef v25 = @"<NULL>";
      if (name) {
        CFStringRef v25 = name;
      }
      *(_DWORD *)uint64_t v24 = 138412546;
      *(void *)(v24 + 4) = service;
      *(_WORD *)(v24 + 12) = 2112;
      *(void *)(v24 + 14) = v25;
      __SC_log_send(3, (uint64_t)v13, v14, v23);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceSetName() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_21;
  }
  if (!name)
  {
    CFTypeRef v6 = 0;
    goto LABEL_46;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) != TypeID)
  {
LABEL_21:
    int v26 = 1002;
LABEL_22:
    _SCErrorSet(v26);
    LOBYTE(v27) = 0;
    return v27;
  }
  CFTypeRef v6 = CFRetain(name);
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  while (Interface)
  {
    CFTypeID v8 = Interface;
    SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
    if (!Interface)
    {
      CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(v8);
      if (LocalizedDisplayName)
      {
        CFStringRef v10 = LocalizedDisplayName;
        if (CFEqual(name, LocalizedDisplayName))
        {
          CFStringRef NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v8);
          if (NonLocalizedDisplayName)
          {
            CFStringRef v12 = NonLocalizedDisplayName;
            CFRelease(v6);
            CFTypeRef v6 = CFRetain(v12);
          }
        }
        else if (CFStringHasPrefix(name, v10))
        {
          CFIndex Length = CFStringGetLength(v10);
          v67.CFIndex length = CFStringGetLength(name) - Length;
          v67.CFIndex location = Length;
          CFStringRef v30 = CFStringCreateWithSubstring(0, name, v67);
          CFStringRef v31 = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v8);
          if (v31)
          {
            CFStringRef v32 = v31;
            CFRelease(v6);
            CFTypeRef v6 = CFStringCreateWithFormat(0, 0, @"%@%@", v32, v30);
          }
          CFRelease(v30);
        }
      }
      break;
    }
  }
  CFArrayRef v33 = SCNetworkSetCopyAll(*((SCPreferencesRef *)service + 4));
  if (v33)
  {
    CFArrayRef v34 = v33;
    CFTypeRef v64 = v6;
    CFIndex Count = CFArrayGetCount(v33);
    if (Count >= 1)
    {
      CFIndex v35 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v34, v35);
        CFArrayRef v37 = SCNetworkSetCopyServices(ValueAtIndex);
        CFIndex v38 = CFArrayGetCount(v37);
        if (v38 < 1)
        {
          int v41 = 0;
          int v40 = 0;
        }
        else
        {
          CFIndex v39 = v38;
          int v40 = 0;
          int v41 = 0;
          for (CFIndex i = 0; i != v39; ++i)
          {
            uint64_t v43 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v37, i);
            CFStringRef ServiceID = SCNetworkServiceGetServiceID(v43);
            if (CFEqual(*((CFTypeRef *)service + 2), ServiceID))
            {
              int v40 = 1;
            }
            else
            {
              CFStringRef v45 = __SCNetworkServiceGetName(v43, 1);
              if (v45 && CFEqual(name, v45)) {
                int v41 = 1;
              }
            }
          }
        }
        CFRelease(v37);
        if (v40)
        {
          if (v41) {
            break;
          }
        }
        if (++v35 == Count) {
          goto LABEL_45;
        }
      }
      CFRelease(v34);
      if (v64) {
        CFRelease(v64);
      }
      int v26 = 1005;
      goto LABEL_22;
    }
LABEL_45:
    CFRelease(v34);
    CFTypeRef v6 = v64;
  }
LABEL_46:
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFTypeID v48 = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v48)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
LABEL_51:
      CFDictionaryRef v50 = MutableCopy;
      if (v6) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", v6);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      int v27 = SCPreferencesPathSetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity, v50);
      CFRelease(v50);
      goto LABEL_56;
    }
  }
  else if (name)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_51;
  }
  int v27 = 0;
LABEL_56:
  CFRelease(NetworkServiceEntity);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v51 = (const void *)*((void *)service + 6);
  if (v51) {
    CFRelease(v51);
  }
  if (name) {
    CFRetain(name);
  }
  *((void *)service + 6) = name;
  if (v27)
  {
    uint64_t v52 = _SC_LOG_DEFAULT();
    uint64_t v53 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v52, (os_log_type_t)v53))
    {
      uint64_t v54 = _os_log_pack_size();
      CFStringRef v62 = (char *)&v64 - ((MEMORY[0x1F4188790](v54, v55, v56, v57, v58, v59, v60, v61) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v63 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v63 = 138412290;
      *(void *)(v63 + 4) = service;
      __SC_log_send(7, (uint64_t)v52, v53, v62);
    }
  }
  return v27;
}

const __SCNetworkService *_SCNetworkServiceCreatePreconfigured(const __SCPreferences *a1, SCNetworkInterfaceRef interface)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
  SCNetworkServiceRef v5 = SCNetworkServiceCreate(a1, interface);
  if (!v5)
  {
    uint64_t v24 = _SC_LOG_DEFAULT();
    uint64_t v25 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v24, (os_log_type_t)v25))
    {
      uint64_t v26 = _os_log_pack_size();
      CFArrayRef v34 = (char *)v62 - ((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      int v36 = SCError();
      CFArrayRef v37 = SCErrorString(v36);
      *(_DWORD *)uint64_t v35 = 138412546;
      *(void *)(v35 + 4) = BSDName;
      *(_WORD *)(v35 + 12) = 2080;
      *(void *)(v35 + 14) = v37;
      __SC_log_send(3, (uint64_t)v24, v25, v34);
    }
    return 0;
  }
  CFTypeRef v6 = v5;
  CFStringRef v7 = _SC_copyInterfaceUUID(BSDName);
  if (!v7)
  {
    CFStringRef v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (!__SC_log_enabled(3, v10, (os_log_type_t)v11)) {
      goto LABEL_11;
    }
    uint64_t v38 = _os_log_pack_size();
    uint64_t v20 = (char *)v62 - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v46 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v46 = 138412290;
    *(void *)(v46 + 4) = BSDName;
    goto LABEL_10;
  }
  CFStringRef v8 = v7;
  int v9 = _SCNetworkServiceSetServiceID((uint64_t)v6, v7);
  CFRelease(v8);
  if (!v9)
  {
    CFStringRef v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v20 = (char *)v62 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      int v22 = SCError();
      uint64_t v23 = SCErrorString(v22);
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = v23;
LABEL_10:
      __SC_log_send(3, (uint64_t)v10, v11, v20);
    }
  }
LABEL_11:
  if (!SCNetworkServiceEstablishDefaultConfiguration(v6))
  {
    uint64_t v47 = _SC_LOG_DEFAULT();
    uint64_t v48 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v47, (os_log_type_t)v48))
    {
      uint64_t v49 = _os_log_pack_size();
      uint64_t v57 = (char *)v62 - ((MEMORY[0x1F4188790](v49, v50, v51, v52, v53, v54, v55, v56) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v58 = _os_log_pack_fill();
      int v59 = SCError();
      uint64_t v60 = SCErrorString(v59);
      *(_DWORD *)uint64_t v58 = 138412546;
      *(void *)(v58 + 4) = BSDName;
      *(_WORD *)(v58 + 12) = 2080;
      *(void *)(v58 + 14) = v60;
      __SC_log_send(3, (uint64_t)v47, v48, v57);
    }
    SCNetworkServiceRemove(v6);
    CFRelease(v6);
    return 0;
  }
  return v6;
}

uint64_t _SCNetworkServiceSetServiceID(uint64_t cf, const void *a2)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_26:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_26;
  }
  if (!*(void *)(cf + 32)) {
    goto LABEL_26;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_26;
  }
  if (CFEqual(a2, *(CFTypeRef *)(cf + 16))) {
    return 1;
  }
  uint64_t context = 0;
  uint64_t v43 = 0;
  if (!__SCNetworkServiceExists(cf))
  {
    uint64_t v28 = _SC_LOG_DEFAULT();
    uint64_t v29 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v28, (os_log_type_t)v29))
    {
      uint64_t v30 = _os_log_pack_size();
      uint64_t v38 = (char *)v41 - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v39 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v39 = 138412546;
      *(void *)(v39 + 4) = cf;
      *(_WORD *)(v39 + 12) = 2112;
      *(void *)(v39 + 14) = a2;
      __SC_log_send(3, (uint64_t)v28, v29, v38);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "_SCNetworkServiceSetServiceID() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_26;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)a2, 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v9)
  {
    CFStringRef v11 = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(cf + 16), 0);
    CFDictionaryRef v12 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), v11);
    CFTypeID v13 = CFDictionaryGetTypeID();
    if (v12 && CFGetTypeID(v12) == v13)
    {
      if (SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity, v12))
      {
        uint64_t v6 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(cf + 32), v11);
        if (v6)
        {
          CFArrayRef v10 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(cf + 32));
          uint64_t context = *(void *)(cf + 16);
          uint64_t v43 = a2;
          v45.CFIndex length = CFArrayGetCount(v10);
          v45.CFIndex location = 0;
          CFArrayApplyFunction(v10, v45, (CFArrayApplierFunction)replaceServiceID, &context);
          uint64_t v14 = *(void *)(cf + 24);
          if (v14)
          {
            CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0, v14, *(const void **)(cf + 32), a2);
            CFRelease(*(CFTypeRef *)(cf + 24));
            *(void *)(cf + 24) = Copy;
          }
          uint64_t v16 = _SC_LOG_DEFAULT();
          uint64_t v17 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v16, (os_log_type_t)v17))
          {
            uint64_t v18 = _os_log_pack_size();
            v41[1] = v41;
            uint64_t v26 = (char *)v41
                - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v27 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v27 = 138412546;
            *(void *)(v27 + 4) = cf;
            *(_WORD *)(v27 + 12) = 2112;
            *(void *)(v27 + 14) = a2;
            __SC_log_send(7, (uint64_t)v16, v17, v26);
          }
          CFRetain(a2);
          CFRelease(*(CFTypeRef *)(cf + 16));
          *(void *)(cf + 16) = a2;
          goto LABEL_31;
        }
LABEL_30:
        CFArrayRef v10 = 0;
LABEL_31:
        if (v11) {
          CFRelease(v11);
        }
        goto LABEL_33;
      }
    }
    else
    {
      _SCErrorSet(1004);
    }
    uint64_t v6 = 0;
    goto LABEL_30;
  }
  _SCErrorSet(1005);
  CFArrayRef v10 = 0;
  uint64_t v6 = 0;
LABEL_33:
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v6;
}

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_23:
    _SCErrorSet(1002);
    LOBYTE(Interface) = 0;
    return Interface;
  }
  if (!service) {
    goto LABEL_23;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_23;
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  if (Interface)
  {
    uint64_t v39 = Interface;
    CFArrayRef SupportedProtocolTypes = SCNetworkInterfaceGetSupportedProtocolTypes(Interface);
    if (SupportedProtocolTypes)
    {
      CFArrayRef v5 = SupportedProtocolTypes;
      CFIndex Count = CFArrayGetCount(SupportedProtocolTypes);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        *(void *)&long long v7 = 138412290;
        long long v40 = v7;
        do
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
          if (!SCNetworkServiceAddProtocolType(service, ValueAtIndex))
          {
            CFStringRef v11 = _SC_LOG_DEFAULT();
            uint64_t v12 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
            {
              uint64_t v13 = _os_log_pack_size();
              uint64_t v21 = (char *)&v38
                  - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v22 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v22 = v40;
              *(void *)(v22 + 4) = ValueAtIndex;
              __SC_log_send(6, (uint64_t)v11, v12, v21);
            }
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
    CFDictionaryRef TemplateOverrides = __SCNetworkInterfaceGetTemplateOverrides((uint64_t)v39, @"PrimaryRank");
    CFTypeID TypeID = CFStringGetTypeID();
    if (!TemplateOverrides || CFGetTypeID(TemplateOverrides) != TypeID) {
      goto LABEL_21;
    }
    unsigned int v41 = 0;
    if (__str_to_rank(TemplateOverrides, (int *)&v41))
    {
      if (SCNetworkServiceSetPrimaryRank((uint64_t)service, v41)) {
        goto LABEL_21;
      }
      uint64_t v25 = _SC_LOG_DEFAULT();
      uint64_t v26 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v25, (os_log_type_t)v26)) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v25 = _SC_LOG_DEFAULT();
      uint64_t v26 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v25, (os_log_type_t)v26))
      {
LABEL_21:
        LOBYTE(Interface) = 1;
        return Interface;
      }
    }
    uint64_t v27 = _os_log_pack_size();
    uint64_t v35 = (char *)&v38 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v36 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v36 = 138412290;
    *(void *)(v36 + 4) = TemplateOverrides;
    __SC_log_send(6, (uint64_t)v25, v26, v35);
    goto LABEL_21;
  }
  return Interface;
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_20:
    _SCErrorSet(1002);
LABEL_21:
    LOBYTE(v10) = 0;
    return v10;
  }
  if (!service) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v2 || !*((void *)service + 4)) {
    goto LABEL_20;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v23 = _SC_LOG_DEFAULT();
    uint64_t v24 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v23, (os_log_type_t)v24))
    {
      uint64_t v25 = _os_log_pack_size();
      uint64_t v33 = (char *)block - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v34 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v34 = 138412290;
      *(void *)(v34 + 4) = service;
      __SC_log_send(3, (uint64_t)v23, v24, v33);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceRemove() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_20;
  }
  _SCNetworkInterfaceCacheOpen();
  CFArrayRef v3 = SCNetworkSetCopyAll(*((SCPreferencesRef *)service + 4));
  if (v3)
  {
    CFArrayRef v4 = v3;
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v4, v7);
        if (!SCNetworkSetRemoveService(ValueAtIndex, service) && SCError() != 1004) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_12;
        }
      }
      CFRelease(v4);
      goto LABEL_21;
    }
LABEL_12:
    CFRelease(v4);
  }
  _SCNetworkInterfaceCacheClose();
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  int v10 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (v10)
  {
    CFStringRef v11 = _SC_LOG_DEFAULT();
    uint64_t v12 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v21 = (char *)block - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 138412290;
      *(void *)(v22 + 4) = service;
      __SC_log_send(7, (uint64_t)v11, v12, v21);
    }
  }
  return v10;
}

uint64_t SCNetworkServiceSetPrimaryRank(uint64_t cf, unsigned int a2)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_45;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_45;
    }
  }
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_45;
  }
  if (*(void *)(cf + 32) && !__SCNetworkServiceExists(cf))
  {
    CFStringRef v11 = _SC_LOG_DEFAULT();
    uint64_t v12 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v21 = (char *)&v34 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 138412290;
      *(void *)(v22 + 4) = cf;
      __SC_log_send(3, (uint64_t)v11, v12, v21);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceSetPrimaryRank() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_45;
  }
  uint64_t v5 = __rank_to_str(a2, &v35);
  if (!v5)
  {
    _SCErrorSet(1002);
    return v5;
  }
  if (*(void *)(cf + 32))
  {
    if (a2 <= 4 && ((1 << a2) & 0x19) != 0)
    {
      CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(cf + 16), 0);
      CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
      if (!Value)
      {
        CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        goto LABEL_23;
      }
      CFDictionaryRef v8 = Value;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v8) == TypeID)
      {
        CFArrayRef Mutable = CFDictionaryCreateMutableCopy(0, 0, v8);
LABEL_23:
        CFDictionaryRef MutableCopy = Mutable;
        if (v35) {
          CFDictionarySetValue(Mutable, @"PrimaryRank", v35);
        }
        else {
          CFDictionaryRemoveValue(Mutable, @"PrimaryRank");
        }
        CFIndex Count = CFDictionaryGetCount(MutableCopy);
        uint64_t v28 = *(const __SCPreferences **)(cf + 32);
        if (Count < 1) {
          uint64_t v29 = SCPreferencesPathRemoveValue(v28, NetworkServiceEntity);
        }
        else {
          uint64_t v29 = SCPreferencesPathSetValue(v28, NetworkServiceEntity, MutableCopy);
        }
        goto LABEL_37;
      }
LABEL_33:
      _SCErrorSet(1001);
      goto LABEL_39;
    }
LABEL_45:
    _SCErrorSet(1002);
    return 0;
  }
  if (!*(void *)(cf + 40)) {
    goto LABEL_45;
  }
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", *(CFStringRef *)(cf + 16), 0);
  CFPropertyListRef v23 = SCDynamicStoreCopyValue(*(SCDynamicStoreRef *)(cf + 40), NetworkServiceEntity);
  if (v23)
  {
    uint64_t v24 = v23;
    CFTypeID v25 = CFDictionaryGetTypeID();
    if (CFGetTypeID(v24) != v25)
    {
      CFRelease(v24);
      goto LABEL_33;
    }
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v24);
    CFRelease(v24);
  }
  else
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (v35) {
    CFDictionarySetValue(MutableCopy, @"PrimaryRank", v35);
  }
  else {
    CFDictionaryRemoveValue(MutableCopy, @"PrimaryRank");
  }
  CFIndex v30 = CFDictionaryGetCount(MutableCopy);
  uint64_t v31 = *(const __SCDynamicStore **)(cf + 40);
  if (v30 < 1)
  {
    unsigned int v32 = SCDynamicStoreRemoveValue(v31, NetworkServiceEntity);
    if (SCError() == 1004) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v32;
    }
    goto LABEL_38;
  }
  uint64_t v29 = SCDynamicStoreSetValue(v31, NetworkServiceEntity, MutableCopy);
LABEL_37:
  uint64_t v5 = v29;
LABEL_38:
  CFRelease(MutableCopy);
LABEL_39:
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

CFStringRef __SCNetworkServiceGetName(CFTypeRef cf, int a2)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_51:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_51;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v4 || !*((void *)cf + 4)) {
    goto LABEL_51;
  }
  CFStringRef Value = (const __CFString *)*((void *)cf + 6);
  if (Value)
  {
    if (a2) {
      return Value;
    }
    goto LABEL_16;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)cf + 2), 0);
  CFStringRef Value = (const __CFString *)SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) != TypeID)
    {
      CFStringRef Value = 0;
      goto LABEL_16;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)Value, @"UserDefinedName");
    CFTypeID v8 = CFStringGetTypeID();
    if (Value && CFGetTypeID(Value) == v8)
    {
      *((void *)cf + 6) = CFRetain(Value);
      if (_SCNetworkConfigurationBypassSystemInterfaces(*((void *)cf + 4))) {
        return (const __CFString *)*((void *)cf + 6);
      }
      goto LABEL_16;
    }
    if (a2) {
      goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)cf);
  do
  {
    if (!Interface) {
      return (const __CFString *)*((void *)cf + 6);
    }
    int v10 = Interface;
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
    if (CFEqual(InterfaceType, @"VPN")) {
      break;
    }
    SCNetworkInterfaceRef v12 = SCNetworkInterfaceGetInterface(Interface);
    if (!v12) {
      break;
    }
    SCNetworkInterfaceRef Interface = v12;
  }
  while (!CFEqual(v12, &__kSCNetworkInterfaceIPv4));
  int v13 = 0;
  while (1)
  {
    if (!*((void *)cf + 6))
    {
      CFStringRef v17 = 0;
      goto LABEL_40;
    }
    if (v13 == 2)
    {
      CFStringRef v16 = __SCNetworkInterfaceCopyOldNonLocalizedDisplayName(v10, @"Y");
      goto LABEL_30;
    }
    if (v13 != 1) {
      break;
    }
    CFStringRef v16 = __SCNetworkInterfaceCopyOldLocalizedDisplayName(v10, @"Y");
LABEL_30:
    CFStringRef v15 = v16;
    if (v16) {
      goto LABEL_31;
    }
LABEL_34:
    if (++v13 == 5)
    {
      CFStringRef v17 = 0;
      BOOL v18 = *((void *)cf + 6) == 0;
      goto LABEL_41;
    }
  }
  if (v13) {
    goto LABEL_34;
  }
  CFStringRef NonLocalizedDisplayName = __SCNetworkInterfaceGetNonLocalizedDisplayName((CFStringRef *)v10);
  if (!NonLocalizedDisplayName) {
    goto LABEL_34;
  }
  CFStringRef v15 = NonLocalizedDisplayName;
  CFRetain(NonLocalizedDisplayName);
LABEL_31:
  if (CFEqual(Value, v15))
  {
    CFStringRef v17 = 0;
    goto LABEL_39;
  }
  if (!CFStringHasPrefix(Value, v15))
  {
    CFRelease(v15);
    goto LABEL_34;
  }
  CFIndex Length = CFStringGetLength(v15);
  v22.CFIndex length = CFStringGetLength(Value) - Length;
  v22.CFIndex location = Length;
  CFStringRef v17 = CFStringCreateWithSubstring(0, Value, v22);
LABEL_39:
  CFRelease(v15);
  CFRelease(*((CFTypeRef *)cf + 6));
  *((void *)cf + 6) = 0;
LABEL_40:
  BOOL v18 = 1;
LABEL_41:
  if (a2 && v18 && (CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(v10)) != 0)
  {
    if (v17)
    {
      *((void *)cf + 6) = CFStringCreateWithFormat(0, 0, @"%@%@", LocalizedDisplayName, v17);
      goto LABEL_47;
    }
    *((void *)cf + 6) = CFRetain(LocalizedDisplayName);
  }
  else if (v17)
  {
LABEL_47:
    CFRelease(v17);
  }
  return (const __CFString *)*((void *)cf + 6);
}

CFTypeID SCNetworkServiceGetTypeID(void)
{
  if (__SCNetworkServiceInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
  }
  return __kSCNetworkServiceTypeID;
}

Boolean SCNetworkServiceRemoveProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!service) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!service) {
      goto LABEL_15;
    }
  }
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_15;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v19 = _SC_LOG_DEFAULT();
    uint64_t v20 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      uint64_t v29 = (char *)block - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v30 = 138412546;
      *(void *)(v30 + 4) = service;
      *(_WORD *)(v30 + 12) = 2112;
      *(void *)(v30 + 14) = protocolType;
      __SC_log_send(3, (uint64_t)v19, v20, v29);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceRemoveProtocolType() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_15;
  }
  if (!__SCNetworkProtocolIsValidType(protocolType))
  {
LABEL_15:
    _SCErrorSet(1002);
    LOBYTE(v6) = 0;
    return v6;
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), (uint64_t)protocolType);
  if (SCPreferencesPathGetValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity))
  {
    int v6 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)service + 4), NetworkServiceEntity);
    if (v6)
    {
      CFIndex v7 = _SC_LOG_DEFAULT();
      uint64_t v8 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v7, (os_log_type_t)v8))
      {
        uint64_t v9 = _os_log_pack_size();
        CFStringRef v17 = (char *)block - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v18 = 138412546;
        *(void *)(v18 + 4) = service;
        *(_WORD *)(v18 + 12) = 2112;
        *(void *)(v18 + 14) = protocolType;
        __SC_log_send(7, (uint64_t)v7, v8, v17);
      }
    }
  }
  else
  {
    _SCErrorSet(1004);
    LOBYTE(v6) = 0;
  }
  CFRelease(NetworkServiceEntity);
  return v6;
}

Boolean SCNetworkServiceSetEnabled(SCNetworkServiceRef service, Boolean enabled)
{
  int v2 = enabled;
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (service) {
      goto LABEL_3;
    }
LABEL_19:
    int v6 = 1002;
    goto LABEL_20;
  }
  if (!service) {
    goto LABEL_19;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(service) != v4 || !*((void *)service + 4)) {
    goto LABEL_19;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v22 = _SC_LOG_DEFAULT();
    uint64_t v23 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      unsigned int v32 = (char *)block - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v33 = 138412290;
      *(void *)(v33 + 4) = service;
      __SC_log_send(3, (uint64_t)v22, v23, v32);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkProtocolSetEnabled() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_19;
  }
  if (v2)
  {
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
    if (Interface)
    {
      if (__SCNetworkInterfaceIsBusyMember(*((const __SCPreferences **)service + 4), Interface, 1))
      {
        int v6 = 1001;
LABEL_20:
        _SCErrorSet(v6);
        LOBYTE(v8) = 0;
        return v8;
      }
    }
  }
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  int v8 = __setPrefsEnabled(*((const __SCPreferences **)service + 4), NetworkServiceEntity, v2);
  CFRelease(NetworkServiceEntity);
  if (v8)
  {
    uint64_t v9 = _SC_LOG_DEFAULT();
    uint64_t v10 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v19 = (char *)block - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      uint64_t v21 = "Enabled";
      if (!v2) {
        uint64_t v21 = "Disabled";
      }
      *(_DWORD *)uint64_t v20 = 138412546;
      *(void *)(v20 + 4) = service;
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v20 + 14) = v21;
      __SC_log_send(7, (uint64_t)v9, v10, v19);
    }
  }
  return v8;
}

uint64_t SCNetworkServiceGetPrimaryRank(CFTypeRef cf)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v14 = 0;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_18;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_18;
  }
  if (*((void *)cf + 4))
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)cf + 2), 0);
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID) {
      goto LABEL_14;
    }
    int v6 = CFDictionaryGetValue(Value, @"PrimaryRank");
    if (__str_to_rank(v6, (int *)&v14)) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  if (!*((void *)cf + 5))
  {
LABEL_18:
    int v12 = 1002;
    goto LABEL_19;
  }
  CFStringRef v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", *((CFStringRef *)cf + 2), 0);
  CFDictionaryRef v8 = (const __CFDictionary *)SCDynamicStoreCopyValue(*((SCDynamicStoreRef *)cf + 5), v7);
  CFRelease(v7);
  if (!v8)
  {
LABEL_14:
    int v12 = 0;
LABEL_19:
    _SCErrorSet(v12);
    return v14;
  }
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v8) == v9)
  {
    uint64_t v10 = CFDictionaryGetValue(v8, @"PrimaryRank");
    int v11 = __str_to_rank(v10, (int *)&v14);
  }
  else
  {
    int v11 = 1;
  }
  CFRelease(v8);
  if (!v11)
  {
LABEL_17:
    unsigned int v14 = 0;
    goto LABEL_18;
  }
LABEL_8:
  if (!v14) {
    goto LABEL_14;
  }
  return v14;
}

const __SCNetworkInterface *_SCNetworkServiceIsVPN(const __SCNetworkService *a1)
{
  uint64_t result = SCNetworkServiceGetInterface(a1);
  if (result)
  {
    uint64_t v2 = result;
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
    if (CFEqual(InterfaceType, @"PPP"))
    {
      uint64_t result = SCNetworkInterfaceGetInterface(v2);
      if (!result) {
        return result;
      }
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
      if (CFEqual(InterfaceType, @"L2TP")) {
        return (const __SCNetworkInterface *)1;
      }
      uint64_t v4 = (CFTypeRef *)&kSCNetworkInterfaceTypePPTP;
    }
    else
    {
      if (CFEqual(InterfaceType, @"VPN")) {
        return (const __SCNetworkInterface *)1;
      }
      uint64_t v4 = (CFTypeRef *)&kSCNetworkInterfaceTypeIPSec;
    }
    return (const __SCNetworkInterface *)(CFEqual(InterfaceType, *v4) != 0);
  }
  return result;
}

uint64_t SCNetworkServiceSetExternalID(uint64_t cf, const void *a2, const void *a3)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      goto LABEL_18;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!cf) {
      goto LABEL_18;
    }
  }
  uint64_t v6 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v6) {
    goto LABEL_18;
  }
  if (!*(void *)(cf + 32)) {
    goto LABEL_18;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_18;
  }
  if (!__SCNetworkServiceExists(cf))
  {
    uint64_t v15 = _SC_LOG_DEFAULT();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v25 = (char *)block - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 138412546;
      *(void *)(v26 + 4) = cf;
      *(_WORD *)(v26 + 12) = 2112;
      *(void *)(v26 + 14) = a3;
      __SC_log_send(3, (uint64_t)v15, v16, v25);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_3;
    block[3] = &__block_descriptor_tmp_51;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkServiceSetExternalID() w/removed service";
    if (_SC_crash_once_once_3 != -1) {
      dispatch_once(&_SC_crash_once_once_3, block);
    }
    goto LABEL_18;
  }
  if (a3)
  {
    CFTypeID v8 = CFStringGetTypeID();
    if (CFGetTypeID(a3) != v8)
    {
LABEL_18:
      _SCErrorSet(1002);
      return 0;
    }
  }
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%s%@", "_", a2);
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *(void *)(cf + 16), 0);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity);
  CFTypeID v12 = CFDictionaryGetTypeID();
  if (!Value)
  {
    if (!a3)
    {
      CFRelease(NetworkServiceEntity);
      uint64_t v27 = 0;
LABEL_30:
      uint64_t v30 = *(__CFDictionary **)(cf + 56);
      if (v30) {
        CFDictionaryRemoveValue(v30, v9);
      }
      goto LABEL_32;
    }
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_22;
  }
  if (CFGetTypeID(Value) == v12)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    CFDictionaryRef Mutable = MutableCopy;
    if (!a3)
    {
      CFDictionaryRemoveValue(MutableCopy, v9);
LABEL_23:
      uint64_t v27 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 32), NetworkServiceEntity, Mutable);
      CFRelease(Mutable);
      goto LABEL_25;
    }
LABEL_22:
    CFDictionarySetValue(Mutable, v9, a3);
    goto LABEL_23;
  }
  uint64_t v27 = 0;
LABEL_25:
  CFRelease(NetworkServiceEntity);
  if (!a3) {
    goto LABEL_30;
  }
  uint64_t v29 = *(__CFDictionary **)(cf + 56);
  if (!v29)
  {
    uint64_t v29 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(cf + 56) = v29;
  }
  CFDictionarySetValue(v29, v9, a3);
LABEL_32:
  CFRelease(v9);
  if (!v27) {
    _SCErrorSet(1001);
  }
  return v27;
}

CFDictionaryRef SCNetworkServiceCopyExternalID(CFTypeRef cf, const void *a2)
{
  if (__SCNetworkServiceInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (cf) {
      goto LABEL_3;
    }
LABEL_20:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_20;
  }
  if (!*((void *)cf + 4)) {
    goto LABEL_20;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_20;
  }
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%s%@", "_", a2);
  CFDictionaryRef v7 = (const __CFDictionary *)*((void *)cf + 7);
  if (v7 && (CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(v7, v6)) != 0)
  {
    CFDictionaryRef Value = v8;
    CFRetain(v8);
    CFRelease(v6);
  }
  else
  {
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)cf + 2), 0);
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)cf + 4), NetworkServiceEntity);
    CFTypeID v11 = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v11)
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(Value, v6);
        CFDictionaryRef Value = v12;
        if (v12)
        {
          CFRetain(v12);
          CFDictionaryRef Mutable = (__CFDictionary *)*((void *)cf + 7);
          if (!Mutable)
          {
            CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            *((void *)cf + 7) = Mutable;
          }
          CFDictionarySetValue(Mutable, v6, Value);
        }
      }
      else
      {
        CFDictionaryRef Value = 0;
      }
    }
    CFRelease(NetworkServiceEntity);
    CFRelease(v6);
    if (!Value) {
      _SCErrorSet(1004);
    }
  }
  return Value;
}

void replaceServiceID(uint64_t a1, CFTypeRef *a2)
{
  CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)a1);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (ServiceOrder)
  {
    if (CFGetTypeID(ServiceOrder) == TypeID)
    {
      v14.CFIndex length = CFArrayGetCount(ServiceOrder);
      v14.CFIndex location = 0;
      if (CFArrayContainsValue(ServiceOrder, v14, *a2))
      {
        CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, ServiceOrder);
        CFIndex Count = CFArrayGetCount(MutableCopy);
        if (Count >= 1)
        {
          CFIndex v8 = Count;
          for (CFIndex i = 0; i != v8; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, i);
            if (CFEqual(ValueAtIndex, *a2)) {
              CFArraySetValueAtIndex(MutableCopy, i, a2[1]);
            }
          }
        }
        SCNetworkSetSetServiceOrder((SCNetworkSetRef)a1, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }
  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity(0, *(void *)(a1 + 16), (uint64_t)*a2, 0);
  if (SCPreferencesPathGetLink(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity))
  {
    SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity);
    CFRelease(SetNetworkServiceEntity);
    SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity(0, *(void *)(a1 + 16), (uint64_t)a2[1], 0);
    CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, (uint64_t)a2[1], 0);
    SCPreferencesPathSetLink(*(SCPreferencesRef *)(a1 + 24), SetNetworkServiceEntity, NetworkServiceEntity);
    if (!SetNetworkServiceEntity) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CFStringRef NetworkServiceEntity = 0;
  if (SetNetworkServiceEntity) {
LABEL_12:
  }
    CFRelease(SetNetworkServiceEntity);
LABEL_13:
  if (NetworkServiceEntity)
  {
    CFRelease(NetworkServiceEntity);
  }
}

void __SCNetworkServiceAddProtocolToService(const __SCNetworkService *a1, const __CFString *a2, const __CFDictionary *a3, Boolean a4)
{
  CFIndex v8 = SCNetworkServiceCopyProtocol(a1, a2);
  if (v8
    || SCError() == 1004
    && SCNetworkServiceAddProtocolType(a1, a2)
    && (CFIndex v8 = SCNetworkServiceCopyProtocol(a1, a2)) != 0)
  {
    SCNetworkProtocolSetConfiguration(v8, a3);
    SCNetworkProtocolSetEnabled(v8, a4);
    CFRelease(v8);
  }
}

uint64_t __SCNetworkServiceMigrateNew(const __SCPreferences *a1, uint64_t cf, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5)
{
  uint64_t v8 = cf;
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  value[0] = 0;
  if (__SCNetworkServiceInitialize_initialized == -1)
  {
    if (!cf) {
      return v8;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkServiceInitialize_initialized, &__block_literal_global_13);
    if (!v8) {
      return v8;
    }
  }
  uint64_t v10 = __kSCNetworkServiceTypeID;
  if (CFGetTypeID((CFTypeRef)v8) != v10) {
    return 0;
  }
  CFTypeID v11 = *(const void **)(v8 + 24);
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!v11 || CFGetTypeID(v11) != TypeID || !*(void *)(v8 + 32)) {
    return 0;
  }
  CFStringRef v13 = *(const __CFString **)(v8 + 16);
  SCNetworkServiceRef v14 = SCNetworkServiceCopy(a1, v13);
  if (v14)
  {
    SCNetworkServiceRef v15 = v14;
    uint64_t v16 = _SC_LOG_DEFAULT();
    uint64_t v17 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = (char *)&v147 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v16, v17, v26);
    }
    uint64_t v8 = 0;
LABEL_11:
    CFRelease(v15);
    return v8;
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)v8);
  if (!Interface)
  {
    uint64_t v51 = _SC_LOG_DEFAULT();
    uint64_t v52 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v51, (os_log_type_t)v52)) {
      goto LABEL_63;
    }
    return 0;
  }
  uint64_t v28 = __SCNetworkInterfaceCopyInterfaceEntity(Interface);
  if (!v28)
  {
    uint64_t v51 = _SC_LOG_DEFAULT();
    uint64_t v52 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v51, (os_log_type_t)v52))
    {
LABEL_63:
      uint64_t v115 = _os_log_pack_size();
      uint64_t v123 = (char *)&v147
           - ((MEMORY[0x1F4188790](v115, v116, v117, v118, v119, v120, v121, v122) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v51, v52, v123);
    }
    return 0;
  }
  CFDictionaryRef v29 = v28;
  if (a3
    && (CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(v28, @"DeviceName")) != 0
    && (CFStringRef v31 = v30, (v32 = (const __CFDictionary *)CFDictionaryGetValue(a3, v30)) != 0))
  {
    CFDictionaryRef v33 = v32;
    uint64_t v34 = _SC_LOG_DEFAULT();
    LODWORD(v149) = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v34, (os_log_type_t)v149))
    {
      uint64_t v35 = _os_log_pack_size();
      *(void *)&long long v147 = v34;
      uint64_t v148 = &v147;
      uint64_t v43 = MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42);
      CFDictionaryRef v150 = v33;
      uint64_t v44 = (char *)&v147 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v45 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v45 = 138412546;
      *(void *)(v45 + 4) = v31;
      *(_WORD *)(v45 + 12) = 2112;
      *(void *)(v45 + 14) = v150;
      uint64_t v46 = v44;
      CFDictionaryRef v33 = v150;
      __SC_log_send(6, v147, v149, v46);
    }
    CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v29);
    CFDictionarySetValue(MutableCopy, @"DeviceName", v33);
    CFDictionaryRef v150 = MutableCopy;
    CFStringRef v48 = (const __CFString *)CFDictionaryGetValue(MutableCopy, @"UserDefinedName");
    if (v48)
    {
      CFStringRef v49 = (const __CFString *)v33;
      CFMutableStringRef v50 = CFStringCreateMutableCopy(0, 0, v48);
      v152.CFIndex length = CFStringGetLength(v50);
      v152.CFIndex location = 0;
      CFStringFindAndReplace(v50, v31, v49, v152, 0);
      CFDictionarySetValue(v150, @"UserDefinedName", v50);
      CFRelease(v50);
    }
    CFRelease(v29);
  }
  else
  {
    CFDictionaryRef v150 = v29;
  }
  uint64_t v53 = _SCNetworkInterfaceCreateWithEntity(0, v150, (uint64_t)&__SCNetworkInterfaceSearchExternal);
  if (!a4 || !a5 || !CFDictionaryGetValueIfPresent(a5, (const void *)v8, (const void **)value))
  {
    uint64_t v104 = _SC_LOG_DEFAULT();
    uint64_t v105 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v104, (os_log_type_t)v105))
    {
LABEL_55:
      uint64_t v8 = 0;
      SCNetworkServiceRef v15 = 0;
      goto LABEL_56;
    }
LABEL_54:
    uint64_t v106 = _os_log_pack_size();
    uint64_t v114 = (char *)&v147
         - ((MEMORY[0x1F4188790](v106, v107, v108, v109, v110, v111, v112, v113) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v104, v105, v114);
    goto LABEL_55;
  }
  SCNetworkServiceRef v54 = SCNetworkServiceCreate(a1, v53);
  if (!v54)
  {
    uint64_t v104 = _SC_LOG_DEFAULT();
    uint64_t v105 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v104, (os_log_type_t)v105)) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  SCNetworkServiceRef v15 = v54;
  Boolean Enabled = SCNetworkServiceGetEnabled((SCNetworkServiceRef)v8);
  if (!SCNetworkServiceSetEnabled(v15, Enabled))
  {
    SCNetworkServiceRemove(v15);
    CFStringRef v125 = _SC_LOG_DEFAULT();
    uint64_t v126 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v125, (os_log_type_t)v126)) {
      goto LABEL_75;
    }
    goto LABEL_76;
  }
  if (!SCNetworkServiceEstablishDefaultConfiguration(v15))
  {
    SCNetworkServiceRemove(v15);
    CFStringRef v125 = _SC_LOG_DEFAULT();
    uint64_t v126 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v125, (os_log_type_t)v126))
    {
LABEL_75:
      uint64_t v138 = _os_log_pack_size();
      CFArrayRef v146 = (char *)&v147
           - ((MEMORY[0x1F4188790](v138, v139, v140, v141, v142, v143, v144, v145) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v125, v126, v146);
    }
LABEL_76:
    uint64_t v8 = 0;
    goto LABEL_56;
  }
  _SCNetworkServiceSetServiceID((uint64_t)v15, v13);
  if (CFArrayGetCount((CFArrayRef)value[0]) < 1) {
    goto LABEL_72;
  }
  LODWORD(v148) = 0;
  CFIndex v57 = 0;
  *(void *)&long long v56 = 138412290;
  long long v147 = v56;
  long long v149 = v53;
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)value[0], v57);
    int v59 = (const __SCNetworkSet *)CFDictionaryGetValue(a4, ValueAtIndex);
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = _SC_LOG_DEFAULT();
      uint64_t v62 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v61, (os_log_type_t)v62))
      {
        uint64_t v63 = _os_log_pack_size();
        uint64_t v71 = (char *)&v147
            - ((MEMORY[0x1F4188790](v63, v64, v65, v66, v67, v68, v69, v70) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v72 = _os_log_pack_fill();
        CFStringRef SetID = SCNetworkSetGetSetID(v60);
        *(_DWORD *)uint64_t v72 = v147;
        *(void *)(v72 + 4) = SetID;
        __SC_log_send(6, (uint64_t)v61, v62, v71);
      }
      if (SCNetworkSetAddService(v60, v15))
      {
        LODWORD(v148) = 1;
      }
      else
      {
        uint64_t v74 = _SC_LOG_DEFAULT();
        uint64_t v75 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v74, (os_log_type_t)v75))
        {
          uint64_t v76 = _os_log_pack_size();
          CFTypeRef v84 = (char *)&v147
              - ((MEMORY[0x1F4188790](v76, v77, v78, v79, v80, v81, v82, v83) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v74, v75, v84);
        }
      }
      uint64_t v53 = v149;
    }
    ++v57;
  }
  while (v57 < CFArrayGetCount((CFArrayRef)value[0]));
  if (!v148)
  {
LABEL_72:
    SCNetworkServiceRemove(v15);
    CFStringRef v127 = _SC_LOG_DEFAULT();
    uint64_t v128 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v127, (os_log_type_t)v128))
    {
      uint64_t v129 = _os_log_pack_size();
      uint64_t v137 = (char *)&v147
           - ((MEMORY[0x1F4188790](v129, v130, v131, v132, v133, v134, v135, v136) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v127, v128, v137);
    }
    goto LABEL_76;
  }
  CFStringRef Name = __SCNetworkServiceGetName((CFTypeRef)v8, 0);
  if (Name)
  {
    if (!SCNetworkServiceSetName(v15, Name))
    {
      CFArrayRef v86 = _SC_LOG_DEFAULT();
      uint64_t v87 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v86, (os_log_type_t)v87))
      {
        uint64_t v88 = _os_log_pack_size();
        CFStringRef v96 = (char *)&v147
            - ((MEMORY[0x1F4188790](v88, v89, v90, v91, v92, v93, v94, v95) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v86, v87, v96);
      }
    }
  }
  CFArrayRef v97 = SCNetworkServiceCopyProtocols((SCNetworkServiceRef)v8);
  if (v97)
  {
    CFArrayRef v98 = v97;
    if (CFArrayGetCount(v97) >= 1)
    {
      CFIndex v99 = 0;
      do
      {
        uint64_t v100 = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v98, v99);
        CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v100);
        CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(v100);
        Boolean v103 = SCNetworkProtocolGetEnabled(v100);
        __SCNetworkServiceAddProtocolToService(v15, ProtocolType, Configuration, v103);
        ++v99;
      }
      while (v99 < CFArrayGetCount(v98));
    }
    CFRelease(v98);
  }
  copyInterfaceConfiguration((const __SCNetworkService *)v8, v15);
  uint64_t v8 = 1;
LABEL_56:
  if (v150) {
    CFRelease(v150);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v15) {
    goto LABEL_11;
  }
  return v8;
}

SCNetworkInterfaceRef copyInterfaceConfiguration(const __SCNetworkService *a1, const __SCNetworkService *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  SCNetworkInterfaceRef result = SCNetworkServiceGetInterface(a2);
  if (Interface)
  {
    uint64_t v5 = result;
    if (result)
    {
      CFStringRef v6 = @"PPP";
      uint64_t v43 = @"L2TP";
      CFStringRef v7 = @"IPSec";
      uint64_t v41 = @"IPSec";
      uint64_t v42 = @"PPP";
      do
      {
        CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
        if ((Configuration || !SCError()) && !SCNetworkInterfaceSetConfiguration(v5, Configuration))
        {
          CFStringRef v9 = _SC_LOG_DEFAULT();
          uint64_t v10 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
          {
            uint64_t v11 = _os_log_pack_size();
            uint64_t v19 = (char *)&v41
                - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            uint64_t v20 = v19;
            CFStringRef v7 = v41;
            __SC_log_send(6, (uint64_t)v9, v10, v20);
            CFStringRef v6 = v42;
          }
        }
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(Interface);
        if (CFEqual(InterfaceType, v6))
        {
          uint64_t v22 = SCNetworkInterfaceGetInterface(Interface);
          if (v22)
          {
            CFStringRef v23 = SCNetworkInterfaceGetInterfaceType(v22);
            if (CFEqual(v23, v43))
            {
              ExtendedCFDictionaryRef Configuration = SCNetworkInterfaceGetExtendedConfiguration(Interface, v7);
              if ((ExtendedConfiguration || !SCError())
                && !SCNetworkInterfaceSetExtendedConfiguration(v5, v7, ExtendedConfiguration))
              {
                uint64_t v25 = _SC_LOG_DEFAULT();
                uint64_t v26 = _SC_syslog_os_log_mapping(6);
                if (__SC_log_enabled(6, v25, (os_log_type_t)v26))
                {
                  uint64_t v27 = _os_log_pack_size();
                  uint64_t v35 = (char *)&v41
                      - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  CFStringRef v7 = v41;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  __SC_log_send(6, (uint64_t)v25, v26, v35);
                  CFStringRef v6 = v42;
                }
              }
            }
          }
        }
        CFDictionaryRef v36 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAPOL");
        if (v36 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAPOL", v36);
        }
        CFDictionaryRef v37 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"com.apple.payload");
        if (v37 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"com.apple.payload", v37);
        }
        CFDictionaryRef v38 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAP");
        if (v38 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAP", v38);
        }
        CFDictionaryRef v39 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"EAPOL.LoginWindow");
        if (v39 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"EAPOL.LoginWindow", v39);
        }
        CFDictionaryRef v40 = SCNetworkInterfaceGetExtendedConfiguration(Interface, @"IPSec");
        if (v40 || !SCError()) {
          SCNetworkInterfaceSetExtendedConfiguration(v5, @"IPSec", v40);
        }
        SCNetworkInterfaceRef Interface = SCNetworkInterfaceGetInterface(Interface);
        SCNetworkInterfaceRef result = SCNetworkInterfaceGetInterface(v5);
        if (!Interface) {
          break;
        }
        uint64_t v5 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t __SCNetworkServiceCreate(SCPreferencesRef prefs, const __SCNetworkInterface *cf, const __CFString *a3)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  if (!cf) {
    return 0;
  }
  UserDefinedCFStringRef Name = a3;
  if (!a3)
  {
    UserDefinedCFStringRef Name = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(cf);
    if (!UserDefinedName)
    {
      CFDictionaryRef v39 = _SC_LOG_DEFAULT();
      uint64_t v40 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v39, (os_log_type_t)v40))
      {
        uint64_t v41 = _os_log_pack_size();
        CFStringRef v49 = (char *)v74 - ((MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v39, v40, v49);
      }
      return 0;
    }
  }
  CFStringRef v6 = SCNetworkServiceCreate(prefs, cf);
  CFStringRef v7 = v6;
  if (!v6)
  {
    uint64_t v22 = _SC_LOG_DEFAULT();
    uint64_t v23 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v32 = (char *)v74 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      int v34 = SCError();
      uint64_t v35 = SCErrorString(v34);
      *(_DWORD *)uint64_t v33 = 136315138;
      *(void *)(v33 + 4) = v35;
      __SC_log_send(6, (uint64_t)v22, v23, v32);
    }
    SCNetworkSetRef v9 = SCNetworkSetCopyCurrent(prefs);
    uint64_t v36 = 0;
    uint64_t v10 = 0;
    if (v9) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
  if (!SCNetworkServiceSetName(v6, UserDefinedName))
  {
    CFDictionaryRef v37 = _SC_LOG_DEFAULT();
    uint64_t v38 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v37, (os_log_type_t)v38)) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  if (!SCNetworkServiceEstablishDefaultConfiguration(v7))
  {
    CFDictionaryRef v37 = _SC_LOG_DEFAULT();
    uint64_t v38 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v37, (os_log_type_t)v38))
    {
LABEL_23:
      uint64_t v50 = _os_log_pack_size();
      uint64_t v58 = (char *)v74 - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v59 = _os_log_pack_fill();
      int v60 = SCError();
      uint64_t v61 = SCErrorString(v60);
      *(_DWORD *)uint64_t v59 = 136315138;
      *(void *)(v59 + 4) = v61;
      __SC_log_send(6, (uint64_t)v37, v38, v58);
    }
LABEL_24:
    uint64_t v36 = 0;
LABEL_29:
    SCNetworkServiceRemove(v7);
    CFRelease(v7);
    return v36;
  }
  uint64_t v8 = SCNetworkSetCopyCurrent(prefs);
  if (v8)
  {
    SCNetworkSetRef v9 = v8;
    uint64_t v10 = SCNetworkSetAddService(v8, v7);
    if (!v10)
    {
      uint64_t v11 = _SC_LOG_DEFAULT();
      uint64_t v12 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
      {
        uint64_t v13 = _os_log_pack_size();
        uint64_t v21 = (char *)v74 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v11, v12, v21);
      }
      SCNetworkServiceRemove(v7);
    }
    CFRelease(v7);
LABEL_16:
    CFRelease(v9);
    return v10;
  }
  uint64_t v36 = 1;
LABEL_26:
  uint64_t v62 = _SC_LOG_DEFAULT();
  uint64_t v63 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v62, (os_log_type_t)v63))
  {
    uint64_t v64 = _os_log_pack_size();
    uint64_t v72 = (char *)v74 - ((MEMORY[0x1F4188790](v64, v65, v66, v67, v68, v69, v70, v71) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v62, v63, v72);
  }
  if (v7) {
    goto LABEL_29;
  }
  return v36;
}

void *__SCNetworkServiceIsPPTP(void *result)
{
  if (result)
  {
    SCNetworkInterfaceRef result = (void *)result[3];
    if (result)
    {
      SCNetworkInterfaceRef result = (void *)__SCNetworkInterfaceGetEntitySubType((uint64_t)result);
      if (result) {
        return (void *)(CFEqual(result, @"PPTP") != 0);
      }
    }
  }
  return result;
}

BOOL __SCNetworkServiceEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)) {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
  }
  return 0;
}

CFHashCode __SCNetworkServiceHash(uint64_t a1)
{
  CFArrayRef v1 = *(const void **)(a1 + 16);

  return CFHash(v1);
}

__CFString *__SCNetworkServiceCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkService %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"id = %@", a1[2]);
  if (a1[4])
  {
    CFStringAppendFormat(Mutable, 0, @", prefs = %p", a1[4]);
  }
  else if (a1[5])
  {
    CFStringAppendFormat(Mutable, 0, @", store = %p", a1[5]);
  }
  if (a1[6]) {
    CFStringAppendFormat(Mutable, 0, @", io_name_t name = %@", a1[6]);
  }
  if (!__SCNetworkServiceExists((uint64_t)a1)) {
    CFStringAppendFormat(Mutable, 0, @", REMOVED");
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_22:
      int v23 = 1002;
      goto LABEL_23;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_22;
    }
  }
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_22;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!service || CFGetTypeID(service) != TypeID || !*((void *)service + 4)) {
    goto LABEL_22;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v20 = (char *)&block - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = set;
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = service;
      __SC_log_send(3, (uint64_t)v10, v11, v20);
    }
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v56 = 0x40000000;
    uint64_t v57 = ___SC_crash_once_block_invoke_4;
    uint64_t v58 = &__block_descriptor_tmp_16;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = "SCNetworkSetAddService() w/removed set";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_22;
    }
LABEL_41:
    dispatch_once(&_SC_crash_once_once_4, &block);
    goto LABEL_22;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v24 = __log_SCNetworkConfiguration();
    uint64_t v25 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v24, (os_log_type_t)v25))
    {
      uint64_t v26 = _os_log_pack_size();
      int v34 = (char *)&block - ((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 138412546;
      *(void *)(v35 + 4) = set;
      *(_WORD *)(v35 + 12) = 2112;
      *(void *)(v35 + 14) = service;
      __SC_log_send(3, (uint64_t)v24, v25, v34);
    }
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v56 = 0x40000000;
    uint64_t v57 = ___SC_crash_once_block_invoke_4;
    uint64_t v58 = &__block_descriptor_tmp_16;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = "SCNetworkSetAddService() w/removed service";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
  CFArrayRef v6 = SCNetworkSetCopyServices(set);
  if (v6)
  {
    CFArrayRef v7 = v6;
    v63.CFIndex length = CFArrayGetCount(v6);
    v63.CFIndex location = 0;
    int v8 = CFArrayContainsValue(v7, v63, service);
    CFRelease(v7);
    if (v8)
    {
      LOBYTE(v9) = 1;
      return v9;
    }
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
  if (Interface
    && __SCNetworkInterfaceIsBusyMember(*((const __SCPreferences **)service + 4), Interface, 1))
  {
    int v23 = 1001;
LABEL_23:
    _SCErrorSet(v23);
    LOBYTE(v9) = 0;
    return v9;
  }
  CFDictionaryRef v37 = SCNetworkServiceGetInterface(service);
  if (v37) {
    uint64_t v38 = __SCNetworkInterfaceCopyDeepConfiguration(set, v37);
  }
  else {
    uint64_t v38 = 0;
  }
  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity(0, *((void *)set + 2), *((void *)service + 2), 0);
  BOOL v40 = SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity) != 0;
  CFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateNetworkServiceEntity(0, *((void *)service + 2), 0);
  if (SCPreferencesPathSetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity, NetworkServiceEntity))
  {
    _SCNetworkInterfaceCacheOpen();
    int v9 = ensure_unique_service_name(service);
    _SCNetworkInterfaceCacheClose();
    if (!v9) {
      SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    }
  }
  else
  {
    int v9 = 0;
  }
  CFRelease(SetNetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (v9)
  {
    if (v37) {
      __SCNetworkInterfaceSetDeepConfiguration(set, v37, v38, v42);
    }
    _serviceOrder_add((SCPreferencesRef *)set, service, v40);
    *((unsigned char *)set + 40) = 1;
    uint64_t v43 = __log_SCNetworkConfiguration();
    uint64_t v44 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v43, (os_log_type_t)v44))
    {
      uint64_t v45 = _os_log_pack_size();
      uint64_t v53 = (char *)&block - ((MEMORY[0x1F4188790](v45, v46, v47, v48, v49, v50, v51, v52) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v54 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v54 = 138412546;
      *(void *)(v54 + 4) = set;
      *(_WORD *)(v54 + 12) = 2112;
      *(void *)(v54 + 14) = service;
      __SC_log_send(7, (uint64_t)v43, v44, v53);
    }
  }
  if (v38) {
    CFRelease(v38);
  }
  return v9;
}

BOOL __SCNetworkSetExists(uint64_t a1)
{
  if (*(void *)(a1 + 24)
    && (CFStringRef Set = SCPreferencesPathKeyCreateSet(0, *(void *)(a1 + 16)),
        CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 24), Set),
        CFRelease(Set),
        CFTypeID TypeID = CFDictionaryGetTypeID(),
        Value))
  {
    return CFGetTypeID(Value) == TypeID;
  }
  else
  {
    return 0;
  }
}

uint64_t ensure_unique_service_name(const __SCNetworkService *a1)
{
  v35[1] = *MEMORY[0x1E4F143B8];
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  CFStringRef Name = SCNetworkServiceGetName(a1);
  CFStringRef v4 = Name;
  if (Name) {
    CFRetain(Name);
  }
  uint64_t v5 = SCNetworkServiceSetName(a1, v4);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else
  {
    CFArrayRef v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    while (SCError() == 1005)
    {
      if (!v4) {
        goto LABEL_18;
      }
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v4, @" ");
      if (ArrayBySeparatingStrings)
      {
        CFArrayRef v9 = ArrayBySeparatingStrings;
        CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, ArrayBySeparatingStrings);
        CFRelease(v9);
      }
      else
      {
        CFArrayRef MutableCopy = CFArrayCreateMutable(0, 0, v7);
        CFArrayAppendValue(MutableCopy, v4);
      }
      CFIndex Count = CFArrayGetCount(MutableCopy);
      if (Count < 2
        || (CFIndex v12 = Count - 1,
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, Count - 1),
            IntCFDictionaryRef Value = CFStringGetIntValue(ValueAtIndex),
            IntValue < 1))
      {
        uint64_t v15 = 2;
      }
      else
      {
        uint64_t v15 = (IntValue + 1);
        CFArrayRemoveValueAtIndex(MutableCopy, v12);
      }
      CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"%d", v15);
      CFArrayAppendValue(MutableCopy, v16);
      CFRelease(v16);
      CFStringRef v17 = CFStringCreateByCombiningStrings(0, MutableCopy, @" ");
      CFRelease(MutableCopy);
      if (!v17)
      {
LABEL_18:
        uint64_t v19 = __log_SCNetworkConfiguration();
        uint64_t v20 = _SC_syslog_os_log_mapping(6);
        if (!__SC_log_enabled(6, v19, (os_log_type_t)v20)) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      CFRelease(v4);
      uint64_t v18 = SCNetworkServiceSetName(a1, v17);
      CFStringRef v4 = v17;
      if (v18)
      {
        uint64_t v6 = v18;
        goto LABEL_24;
      }
    }
    uint64_t v19 = __log_SCNetworkConfiguration();
    uint64_t v20 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v19, (os_log_type_t)v20)) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v21 = _os_log_pack_size();
    uint64_t v29 = (char *)v35 - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v30 = _os_log_pack_fill();
    CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(Interface);
    int v32 = SCError();
    uint64_t v33 = SCErrorString(v32);
    *(_DWORD *)uint64_t v30 = 138412546;
    *(void *)(v30 + 4) = LocalizedDisplayName;
    *(_WORD *)(v30 + 12) = 2080;
    *(void *)(v30 + 14) = v33;
    __SC_log_send(6, (uint64_t)v19, v20, v29);
LABEL_22:
    uint64_t v6 = 0;
  }
  CFStringRef v17 = v4;
  if (v4) {
LABEL_24:
  }
    CFRelease(v17);
  return v6;
}

void _serviceOrder_add(SCPreferencesRef *a1, SCNetworkServiceRef service, int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(service);
  uint64_t v7 = _serviceOrder(service);
  CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)a1);
  if (ServiceOrder) {
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, ServiceOrder);
  }
  else {
    CFArrayRef MutableCopy = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFArrayRef v10 = MutableCopy;
  if (!MutableCopy) {
    _serviceOrder_add_cold_1();
  }
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count < 1) {
    goto LABEL_12;
  }
  CFIndex v12 = Count;
  uint64_t v13 = 0;
  for (CFIndex i = 0; i != v12; ++i)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
    if (CFEqual(ValueAtIndex, ServiceID)) {
      ++v13;
    }
  }
  if (v13 != 1)
  {
    if (v13)
    {
      uint64_t v28 = __log_SCNetworkConfiguration();
      uint64_t v29 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v28, (os_log_type_t)v29))
      {
        uint64_t v30 = _os_log_pack_size();
        v50[1] = (uint64_t)v50;
        uint64_t v38 = MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37);
        v50[0] = (uint64_t)v28;
        CFDictionaryRef v39 = (char *)v50 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v40 = _os_log_pack_fill();
        uint64_t v41 = "";
        *(_DWORD *)uint64_t v40 = 136315650;
        if (!a3) {
          uint64_t v41 = "new ";
        }
        *(void *)(v40 + 4) = v41;
        *(_WORD *)(v40 + 12) = 2048;
        *(void *)(v40 + 14) = v13;
        *(_WORD *)(v40 + 22) = 2112;
        *(void *)(v40 + 24) = service;
        __SC_log_send(3, v50[0], v29, v39);
      }
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v52 = 0x40000000;
      uint64_t v53 = ___SC_crash_once_block_invoke_4;
      uint64_t v54 = &__block_descriptor_tmp_16;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = "SCNetworkSetAddService() w/multiple ServiceOrder references";
      if (_SC_crash_once_once_4 != -1) {
        dispatch_once(&_SC_crash_once_once_4, &block);
      }
      _serviceOrder_clear(v10, ServiceID);
      goto LABEL_27;
    }
LABEL_12:
    if (a3)
    {
      CFStringRef v16 = __log_SCNetworkConfiguration();
      uint64_t v17 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
      {
        uint64_t v18 = _os_log_pack_size();
        uint64_t v26 = (char *)v50 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v27 = 138412290;
        *(void *)(v27 + 4) = service;
        __SC_log_send(3, (uint64_t)v16, v17, v26);
      }
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v52 = 0x40000000;
      uint64_t v53 = ___SC_crash_once_block_invoke_4;
      uint64_t v54 = &__block_descriptor_tmp_16;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = "SCNetworkSetAddService() w/updated service not in ServiceOrder";
      if (_SC_crash_once_once_4 != -1) {
        dispatch_once(&_SC_crash_once_once_4, &block);
      }
    }
LABEL_27:
    CFIndex v42 = CFArrayGetCount(v10);
    if (v42 < 1)
    {
      CFIndex v45 = 0;
    }
    else
    {
      CFIndex v43 = v42;
      CFIndex v44 = 0;
      CFIndex v45 = 0;
      do
      {
        CFStringRef v46 = (const __CFString *)CFArrayGetValueAtIndex(v10, v44);
        CFTypeID TypeID = CFStringGetTypeID();
        if (v46)
        {
          if (CFGetTypeID(v46) == TypeID)
          {
            uint64_t v48 = SCNetworkServiceCopy(a1[3], v46);
            if (v48)
            {
              uint64_t v49 = v48;
              if (v7 >= _serviceOrder(v48)) {
                CFIndex v45 = v44 + 1;
              }
              CFRelease(v49);
            }
          }
        }
        ++v44;
      }
      while (v43 != v44);
    }
    CFArrayInsertValueAtIndex(v10, v45, ServiceID);
    SCNetworkSetSetServiceOrder((SCNetworkSetRef)a1, v10);
    CFRelease(v10);
    return;
  }

  CFRelease(v10);
}

SCNetworkSetRef SCNetworkSetCopy(SCPreferencesRef prefs, CFStringRef setID)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!setID || CFGetTypeID(setID) != TypeID)
  {
    int v9 = 1002;
LABEL_9:
    _SCErrorSet(v9);
    return 0;
  }
  CFStringRef Set = SCPreferencesPathKeyCreateSet(0, (uint64_t)setID);
  CFDictionaryRef Value = SCPreferencesPathGetValue(prefs, Set);
  CFRelease(Set);
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v7)
  {
    int v9 = 1004;
    goto LABEL_9;
  }
  SCNetworkSetRef result = (SCNetworkSetRef)__SCNetworkSetCreatePrivate(prefs, setID);
  if (!result) {
    SCNetworkSetCopy_cold_1();
  }
  *((unsigned char *)result + 40) = 1;
  return result;
}

Boolean SCNetworkSetContainsInterface(SCNetworkSetRef set, SCNetworkInterfaceRef interface)
{
  CFArrayRef v3 = SCNetworkSetCopyServices(set);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  Boolean v5 = __SCNetworkServiceExistsForInterface(v3, interface);
  CFRelease(v4);
  return v5;
}

__CFArray *SCNetworkSetCopyAvailableInterfaces(uint64_t a1)
{
  CFArrayRef v1 = *(const __SCPreferences **)(a1 + 24);
  CFAllocatorRef v2 = _SCNetworkInterfaceCopyAllWithPreferences(v1);
  CFIndex Count = CFArrayGetCount(v2);
  if (v1) {
    BOOL v4 = Count == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return v2;
  }
  uint64_t v6 = Count;
  CFDictionaryRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFArrayRef v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(v1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    __SCBridgeInterfaceListCollectMembers(v8, Mutable, 0);
    CFRelease(v9);
  }
  if (!CFSetGetCount(Mutable))
  {
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v2;
  }
  Boolean v5 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v6 >= 1)
  {
    for (CFIndex i = 0; i != v6; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
      if (!CFSetContainsValue(Mutable, ValueAtIndex)) {
        CFArrayAppendValue(v5, ValueAtIndex);
      }
    }
  }
  CFRelease(v2);
  CFRelease(Mutable);
  return v5;
}

SCNetworkSetRef SCNetworkSetCreate(SCPreferencesRef prefs)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  CFStringRef Sets = SCPreferencesPathKeyCreateSets(0);
  CFStringRef UniqueChild = SCPreferencesPathCreateUniqueChild(prefs, Sets);
  CFRelease(Sets);
  if (!UniqueChild) {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, UniqueChild, @"/");
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 2);
  uint64_t Private = __SCNetworkSetCreatePrivate(prefs, ValueAtIndex);
  if (!Private) {
    SCNetworkSetCreate_cold_1();
  }
  CFTypeID v7 = (unsigned char *)Private;
  CFRelease(ArrayBySeparatingStrings);
  v7[40] = 0;
  CFDictionaryRef v8 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v9 = SCPreferencesPathSetValue(prefs, UniqueChild, v8);
  CFRelease(UniqueChild);
  CFRelease(v8);
  if (!v9)
  {
    CFRelease(v7);
    return 0;
  }
  CFArrayRef v10 = __log_SCNetworkConfiguration();
  uint64_t v11 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v10, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v20 = (char *)v23 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 138412290;
    *(void *)(v21 + 4) = v7;
    __SC_log_send(7, (uint64_t)v10, v11, v20);
  }
  return (SCNetworkSetRef)v7;
}

const __SCNetworkSet *_SCNetworkSetCreateDefault(const __SCPreferences *a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  SCNetworkSetRef v2 = SCNetworkSetCopyCurrent(a1);
  if (v2)
  {
    SCNetworkSetRef v3 = v2;
    BOOL v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = &v65[-((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v4, v5, v14);
    }
    CFRelease(v3);
    _SCErrorSet(1005);
    return 0;
  }
  SCNetworkSetRef v17 = SCNetworkSetCreate(a1);
  if (!v17)
  {
    uint64_t v37 = __log_SCNetworkConfiguration();
    uint64_t v38 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v37, (os_log_type_t)v38))
    {
      uint64_t v39 = _os_log_pack_size();
      uint64_t v47 = &v65[-((MEMORY[0x1F4188790](v39, v40, v41, v42, v43, v44, v45, v46) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v48 = _os_log_pack_fill();
      int v49 = SCError();
      uint64_t v50 = SCErrorString(v49);
      *(_DWORD *)uint64_t v48 = 136315138;
      *(void *)(v48 + 4) = v50;
      __SC_log_send(5, (uint64_t)v37, v38, v47);
    }
    return 0;
  }
  uint64_t v15 = v17;
  uint64_t v18 = copy_default_set_name(1);
  int v19 = SCNetworkSetSetName(v15, v18);
  CFRelease(v18);
  *((void *)v15 + 6) = *MEMORY[0x1E4F1CFD0];
  if (!v19)
  {
    uint64_t v51 = __log_SCNetworkConfiguration();
    uint64_t v52 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v51, (os_log_type_t)v52))
    {
      uint64_t v53 = _os_log_pack_size();
      uint64_t v61 = &v65[-((MEMORY[0x1F4188790](v53, v54, v55, v56, v57, v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v62 = _os_log_pack_fill();
      int v63 = SCError();
      uint64_t v64 = SCErrorString(v63);
      *(_DWORD *)uint64_t v62 = 136315138;
      *(void *)(v62 + 4) = v64;
      __SC_log_send(5, (uint64_t)v51, v52, v61);
    }
    goto LABEL_22;
  }
  int v20 = SCNetworkSetSetCurrent(v15);
  if (!v20)
  {
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v21, (os_log_type_t)v22))
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v31 = &v65[-((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v32 = _os_log_pack_fill();
      int v33 = SCError();
      uint64_t v34 = SCErrorString(v33);
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)(v32 + 4) = v34;
      __SC_log_send(5, (uint64_t)v21, v22, v31);
    }
  }
  if (!SCPreferencesGetValue(a1, @"Model"))
  {
    uint64_t v35 = (const void *)_SC_hw_model(0);
    SCPreferencesSetValue(a1, @"Model", v35);
  }
  if (!SCPreferencesGetValue(a1, @"__VERSION__"))
  {
    int valuePtr = 20191120;
    CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    SCPreferencesSetValue(a1, @"__VERSION__", v36);
    CFRelease(v36);
  }
  if (!v20)
  {
LABEL_22:
    SCNetworkSetRemove(v15);
    CFRelease(v15);
    return 0;
  }
  return v15;
}

__CFString *copy_default_set_name(int a1)
{
  if (a1)
  {
    if (copy_default_set_name_once_49 != -1) {
      dispatch_once(&copy_default_set_name_once_49, &__block_literal_global_52);
    }
    CFArrayRef v1 = &copy_default_set_name_localized;
  }
  else
  {
    if (copy_default_set_name_once != -1) {
      dispatch_once(&copy_default_set_name_once, &__block_literal_global_14);
    }
    CFArrayRef v1 = &copy_default_set_name_non_localized;
  }
  SCNetworkSetRef v2 = (__CFString *)*v1;
  if (v2) {
    SCNetworkSetRef v3 = v2;
  }
  else {
    SCNetworkSetRef v3 = @"Automatic";
  }
  CFRetain(v3);
  return v3;
}

Boolean SCNetworkSetSetName(SCNetworkSetRef set, CFStringRef name)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_16;
    }
  }
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_16;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v10 = __log_SCNetworkConfiguration();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      int v20 = (char *)block - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      CFStringRef v22 = @"<NULL>";
      if (name) {
        CFStringRef v22 = name;
      }
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = set;
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = v22;
      __SC_log_send(3, (uint64_t)v10, v11, v20);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkSetSetName() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_16;
  }
  if (!name)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 0;
    goto LABEL_19;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (CFGetTypeID(name) != TypeID)
  {
LABEL_16:
    _SCErrorSet(1002);
    LOBYTE(v23) = 0;
    return v23;
  }
  uint64_t v6 = copy_default_set_name(0);
  int v7 = CFEqual(name, v6);
  uint64_t v8 = copy_default_set_name(1);
  uint64_t v9 = v8;
  if (!v7)
  {
    if (CFEqual(name, v6))
    {
LABEL_34:
      CFArrayRef v41 = SCNetworkSetCopyAll(*((SCPreferencesRef *)set + 3));
      if (v41)
      {
        CFArrayRef v42 = v41;
        CFIndex Count = CFArrayGetCount(v41);
        if (Count >= 1)
        {
          CFIndex v44 = Count;
          CFIndex v45 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v42, v45);
            CFStringRef SetID = SCNetworkSetGetSetID(ValueAtIndex);
            if (!CFEqual(*((CFTypeRef *)set + 2), SetID))
            {
              CFStringRef v48 = SCNetworkSetGetName(ValueAtIndex);
              if (v48)
              {
                if (CFEqual(name, v48)) {
                  break;
                }
              }
            }
            if (v44 == ++v45) {
              goto LABEL_41;
            }
          }
          CFRelease(v42);
          int v40 = 1005;
          goto LABEL_29;
        }
LABEL_41:
        CFRelease(v42);
      }
LABEL_42:
      if (v6)
      {
        if (!v9) {
          uint64_t v9 = copy_default_set_name(1);
        }
        if (CFEqual(name, v9)) {
          io_name_t name = v6;
        }
      }
      goto LABEL_47;
    }
LABEL_19:
    uint64_t v25 = copy_default_set_name(1);
    CFStringRef v26 = SCNetworkSetGetName(set);
    if (v26 == v25)
    {
      CFRelease(v25);
    }
    else
    {
      if (!v25 || !v26)
      {
        CFRelease(v25);
        goto LABEL_31;
      }
      int v27 = CFEqual(v26, v25);
      CFRelease(v25);
      if (!v27)
      {
LABEL_31:
        if (!name) {
          goto LABEL_47;
        }
        goto LABEL_42;
      }
    }
    if (geteuid())
    {
      uint64_t v28 = __log_SCNetworkConfiguration();
      uint64_t v29 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v28, (os_log_type_t)v29))
      {
        uint64_t v30 = _os_log_pack_size();
        uint64_t v38 = (char *)block
            - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v39 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v39 = 138412290;
        *(void *)(v39 + 4) = set;
        __SC_log_send(3, (uint64_t)v28, v29, v38);
      }
      _SC_crash("The \"Automatic\" network set cannot be renamed", 0, 0);
      int v40 = 1002;
LABEL_29:
      _SCErrorSet(v40);
      goto LABEL_58;
    }
    goto LABEL_31;
  }
  io_name_t name = v8;
  if (v8) {
    goto LABEL_34;
  }
LABEL_47:
  CFStringRef v49 = SCPreferencesPathKeyCreateSet(0, *((void *)set + 2));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), v49);
  CFTypeID v51 = CFDictionaryGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v51)
    {
      CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
      CFDictionaryRef Mutable = MutableCopy;
      if (!name)
      {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
LABEL_54:
        int v23 = SCPreferencesPathSetValue(*((SCPreferencesRef *)set + 3), v49, Mutable);
        CFRelease(Mutable);
        CFRelease(v49);
        if (v23)
        {
          uint64_t v54 = __log_SCNetworkConfiguration();
          uint64_t v55 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v54, (os_log_type_t)v55))
          {
            uint64_t v56 = _os_log_pack_size();
            uint64_t v64 = (char *)block
                - ((MEMORY[0x1F4188790](v56, v57, v58, v59, v60, v61, v62, v63) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v65 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v65 = 138412290;
            *(void *)(v65 + 4) = set;
            __SC_log_send(7, (uint64_t)v54, v55, v64);
          }
        }
        goto LABEL_59;
      }
LABEL_53:
      CFDictionarySetValue(Mutable, @"UserDefinedName", name);
      goto LABEL_54;
    }
  }
  else if (name)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_53;
  }
  CFRelease(v49);
LABEL_58:
  LOBYTE(v23) = 0;
LABEL_59:
  if (v9) {
    CFRelease(v9);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v23;
}

Boolean SCNetworkSetSetCurrent(SCNetworkSetRef set)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_12:
      _SCErrorSet(1002);
      LOBYTE(v4) = 0;
      return v4;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_12;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_12;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      int v27 = (char *)block - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v28 = 138412290;
      *(void *)(v28 + 4) = set;
      __SC_log_send(3, (uint64_t)v17, v18, v27);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkSetSetCurrent() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_12;
  }
  CFStringRef v3 = SCPreferencesPathKeyCreateSet(0, *((void *)set + 2));
  int v4 = SCPreferencesSetValue(*((SCPreferencesRef *)set + 3), @"CurrentSet", v3);
  CFRelease(v3);
  if (v4)
  {
    uint64_t v5 = __log_SCNetworkConfiguration();
    uint64_t v6 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)block - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 138412290;
      *(void *)(v16 + 4) = set;
      __SC_log_send(7, (uint64_t)v5, v6, v15);
    }
  }
  return v4;
}

Boolean SCNetworkSetRemove(SCNetworkSetRef set)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_20:
      _SCErrorSet(1002);
LABEL_21:
      LOBYTE(v43) = 0;
      return v43;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_20;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v2) {
    goto LABEL_20;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v31 = __log_SCNetworkConfiguration();
    uint64_t v32 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v31, (os_log_type_t)v32))
    {
      uint64_t v33 = _os_log_pack_size();
      CFArrayRef v41 = (char *)block - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v42 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v42 = 138412290;
      *(void *)(v42 + 4) = set;
      __SC_log_send(3, (uint64_t)v31, v32, v41);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkSetRemove() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_20;
  }
  if (_SCNetworkSetIsDefault((const __CFBoolean **)set) && geteuid())
  {
    CFStringRef v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = (char *)block - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 138412290;
      *(void *)(v14 + 4) = set;
      __SC_log_send(3, (uint64_t)v3, v4, v13);
    }
    _SC_crash("The \"Automatic\" network set cannot be removed", 0, 0);
    goto LABEL_20;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(*((SCPreferencesRef *)set + 3), @"CurrentSet");
  CFStringRef v16 = SCPreferencesPathKeyCreateSet(0, *((void *)set + 2));
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && CFEqual(Value, v16))
  {
    uint64_t v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v28 = (char *)block - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      uint64_t v30 = *((void *)set + 2);
      *(_DWORD *)uint64_t v29 = 138412290;
      *(void *)(v29 + 4) = v30;
      __SC_log_send(7, (uint64_t)v18, v19, v28);
    }
    _SCErrorSet(1002);
    CFRelease(v16);
    goto LABEL_21;
  }
  int v43 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), v16);
  CFRelease(v16);
  if (v43)
  {
    CFIndex v45 = __log_SCNetworkConfiguration();
    uint64_t v46 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v45, (os_log_type_t)v46))
    {
      uint64_t v47 = _os_log_pack_size();
      uint64_t v55 = (char *)block - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v56 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v56 = 138412290;
      *(void *)(v56 + 4) = set;
      __SC_log_send(7, (uint64_t)v45, v46, v55);
    }
  }
  return v43;
}

uint64_t _SCNetworkSetIsDefault(const __CFBoolean **cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_19:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!cf) {
      goto LABEL_19;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_19;
  }
  CFBooleanRef v3 = cf[6];
  if (!v3)
  {
    CFTypeRef v5 = _SCNetworkSetCopyUserDefinedName(cf);
    CFBooleanRef v6 = cf[6];
    if (!v6)
    {
      uint64_t v7 = copy_default_set_name(0);
      if (v5 && CFEqual(v5, v7)) {
        uint64_t v8 = (const __CFBoolean **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v8 = (const __CFBoolean **)MEMORY[0x1E4F1CFC8];
      }
      CFBooleanRef v6 = *v8;
      if (v7) {
        CFRelease(v7);
      }
      cf[6] = v6;
    }
    uint64_t Value = CFBooleanGetValue(v6);
    if (v5) {
      CFRelease(v5);
    }
    return Value;
  }

  return CFBooleanGetValue(v3);
}

CFTypeID SCNetworkSetGetTypeID(void)
{
  if (__SCNetworkSetInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
  }
  return __kSCNetworkSetTypeID;
}

Boolean SCNetworkSetRemoveService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set)
    {
LABEL_26:
      _SCErrorSet(1002);
      LOBYTE(v40) = 0;
      return v40;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_26;
    }
  }
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_26;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!service || CFGetTypeID(service) != TypeID || !*((void *)service + 4)) {
    goto LABEL_26;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    CFStringRef v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = (char *)&v68 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v27 = 138412546;
      *(void *)(v27 + 4) = set;
      *(_WORD *)(v27 + 12) = 2112;
      *(void *)(v27 + 14) = service;
      __SC_log_send(3, (uint64_t)v16, v17, v26);
    }
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v73 = 0x40000000;
    uint64_t v74 = ___SC_crash_once_block_invoke_4;
    uint64_t v75 = &__block_descriptor_tmp_16;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = "SCNetworkSetRemoveService() w/removed set";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_26;
    }
LABEL_75:
    dispatch_once(&_SC_crash_once_once_4, &block);
    goto LABEL_26;
  }
  if (!__SCNetworkServiceExists((uint64_t)service))
  {
    uint64_t v28 = __log_SCNetworkConfiguration();
    uint64_t v29 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v28, (os_log_type_t)v29))
    {
      uint64_t v30 = _os_log_pack_size();
      uint64_t v38 = (char *)&v68 - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v39 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v39 = 138412546;
      *(void *)(v39 + 4) = set;
      *(_WORD *)(v39 + 12) = 2112;
      *(void *)(v39 + 14) = service;
      __SC_log_send(3, (uint64_t)v28, v29, v38);
    }
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v73 = 0x40000000;
    uint64_t v74 = ___SC_crash_once_block_invoke_4;
    uint64_t v75 = &__block_descriptor_tmp_16;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = "SCNetworkSetRemoveService() w/removed service";
    if (_SC_crash_once_once_4 == -1) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
  _serviceOrder_remove(set, service);
  SetCFStringRef NetworkServiceEntity = SCPreferencesPathKeyCreateSetNetworkServiceEntity(0, *((void *)set + 2), *((void *)service + 2), 0);
  if (SCPreferencesPathGetLink(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity))
  {
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(service);
    if (Interface)
    {
      uint64_t v8 = __SCNetworkInterfaceCopyDeepConfiguration(set, Interface);
      if (v8) {
        __SCNetworkInterfaceSetDeepConfiguration(set, Interface, 0, v9);
      }
      DisablePrivateRelayuint64_t Value = __SCNetworkInterfaceGetDisablePrivateRelayValue((const __SCPreferences **)Interface);
      uint64_t v11 = DisablePrivateRelayValue;
      if (DisablePrivateRelayValue)
      {
        CFRetain(DisablePrivateRelayValue);
        __SCNetworkInterfaceSetDisablePrivateRelayValue((uint64_t)Interface, 0);
      }
      DisableUntilNeededuint64_t Value = __SCNetworkInterfaceGetDisableUntilNeededValue((const __SCPreferences **)Interface);
      uint64_t v13 = DisableUntilNeededValue;
      if (DisableUntilNeededValue)
      {
        CFRetain(DisableUntilNeededValue);
        __SCNetworkInterfaceSetDisableUntilNeededValue((uint64_t)Interface, 0);
      }
      EnableLowDataModeuint64_t Value = __SCNetworkInterfaceGetEnableLowDataModeValue((const __SCPreferences **)Interface);
      uint64_t v15 = EnableLowDataModeValue;
      if (EnableLowDataModeValue)
      {
        CFRetain(EnableLowDataModeValue);
        __SCNetworkInterfaceSetEnableLowDataModeValue(Interface, 0);
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v11 = 0;
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    int v40 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)set + 3), SetNetworkServiceEntity);
    if (v40) {
      int v42 = 0;
    }
    else {
      int v42 = SCError();
    }
    if (v8 || v11 || v13 || v15)
    {
      int v70 = v42;
      CFTypeRef v71 = v11;
      CFArrayRef v43 = SCNetworkSetCopyServices(set);
      if (v43)
      {
        CFArrayRef v45 = v43;
        CFIndex Count = CFArrayGetCount(v43);
        if (Count < 1)
        {
          int v51 = 0;
        }
        else
        {
          CFIndex v47 = Count;
          uint64_t v69 = v8;
          CFIndex v48 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v45, v48);
            SCNetworkInterfaceRef v50 = SCNetworkServiceGetInterface(ValueAtIndex);
            if (v50)
            {
              if (CFEqual(Interface, v50)) {
                break;
              }
            }
            if (v47 == ++v48)
            {
              int v51 = 0;
              goto LABEL_47;
            }
          }
          int v51 = 1;
LABEL_47:
          uint64_t v8 = v69;
        }
        CFRelease(v45);
      }
      else
      {
        int v51 = 0;
      }
      if (v8)
      {
        if (v51) {
          CFArrayRef v52 = v8;
        }
        else {
          CFArrayRef v52 = 0;
        }
        __SCNetworkInterfaceSetDeepConfiguration(set, Interface, v52, v44);
        CFRelease(v8);
      }
      if (v71)
      {
        if (v51) {
          CFTypeRef v53 = v71;
        }
        else {
          CFTypeRef v53 = 0;
        }
        __SCNetworkInterfaceSetDisablePrivateRelayValue((uint64_t)Interface, v53);
        CFRelease(v71);
      }
      if (v13)
      {
        if (v51) {
          uint64_t v54 = v13;
        }
        else {
          uint64_t v54 = 0;
        }
        __SCNetworkInterfaceSetDisableUntilNeededValue((uint64_t)Interface, v54);
        CFRelease(v13);
      }
      int v42 = v70;
      if (v15)
      {
        if (v51) {
          uint64_t v55 = v15;
        }
        else {
          uint64_t v55 = 0;
        }
        __SCNetworkInterfaceSetEnableLowDataModeValue(Interface, v55);
        CFRelease(v15);
      }
    }
    CFRelease(SetNetworkServiceEntity);
    if (!v40)
    {
      _SCErrorSet(v42);
      return v40;
    }
  }
  else
  {
    CFRelease(SetNetworkServiceEntity);
    LOBYTE(v40) = 1;
  }
  uint64_t v56 = __log_SCNetworkConfiguration();
  uint64_t v57 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v56, (os_log_type_t)v57))
  {
    uint64_t v58 = _os_log_pack_size();
    uint64_t v66 = (char *)&v68 - ((MEMORY[0x1F4188790](v58, v59, v60, v61, v62, v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v67 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v67 = 138412546;
    *(void *)(v67 + 4) = set;
    *(_WORD *)(v67 + 12) = 2112;
    *(void *)(v67 + 14) = service;
    __SC_log_send(7, (uint64_t)v56, v57, v66);
  }
  return v40;
}

void _serviceOrder_remove(const __SCNetworkSet *a1, const __SCNetworkService *a2)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(a1);
  if (ServiceOrder)
  {
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, ServiceOrder);
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(a2);
    uint64_t v7 = _serviceOrder_clear(MutableCopy, ServiceID);
    if (v7 >= 2)
    {
      uint64_t v8 = v7;
      __n128 v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v19 = (char *)v21 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v20 = 138412546;
        *(void *)(v20 + 4) = a2;
        *(_WORD *)(v20 + 12) = 2048;
        *(void *)(v20 + 14) = v8;
        __SC_log_send(3, (uint64_t)v9, v10, v19);
      }
    }
    SCNetworkSetSetServiceOrder(a1, MutableCopy);
    CFRelease(MutableCopy);
  }
}

Boolean SCNetworkSetSetServiceOrder(SCNetworkSetRef set, CFArrayRef newOrder)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!set) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!set) {
      goto LABEL_19;
    }
  }
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(set) != v4) {
    goto LABEL_19;
  }
  if (!__SCNetworkSetExists((uint64_t)set))
  {
    uint64_t v15 = __log_SCNetworkConfiguration();
    uint64_t v16 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v15, (os_log_type_t)v16))
    {
      uint64_t v17 = _os_log_pack_size();
      uint64_t v25 = (char *)&v54 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 138412290;
      *(void *)(v26 + 4) = set;
      __SC_log_send(3, (uint64_t)v15, v16, v25);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "SCNetworkSetSetServiceOrder() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_19;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!newOrder || CFGetTypeID(newOrder) != TypeID)
  {
LABEL_19:
    _SCErrorSet(1002);
    return 0;
  }
  CFIndex Count = CFArrayGetCount(newOrder);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(newOrder, v8);
      CFTypeID v10 = CFStringGetTypeID();
      if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v10) {
        goto LABEL_19;
      }
    }
    while (v7 != ++v8);
  }
  SetCFStringRef NetworkGlobalEntity = SCPreferencesPathKeyCreateSetNetworkGlobalEntity(0, *((void *)set + 2), @"IPv4");
  if (!SetNetworkGlobalEntity) {
    return 0;
  }
  CFStringRef v12 = SetNetworkGlobalEntity;
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)set + 3), SetNetworkGlobalEntity);
  CFStringRef v55 = v12;
  if (Value) {
    CFArrayRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  }
  else {
    CFArrayRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFMutableDictionaryRef v54 = MutableCopy;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFIndex v30 = CFArrayGetCount(newOrder);
  if (v30 >= 1)
  {
    CFIndex v32 = v30;
    CFIndex v33 = 0;
    *(void *)&long long v31 = 138412290;
    long long v56 = v31;
    do
    {
      CFIndex v34 = CFArrayGetCount(Mutable);
      uint64_t v35 = CFArrayGetValueAtIndex(newOrder, v33);
      if (v34 && (v59.CFIndex location = 0, v59.length = v34, CFArrayContainsValue(Mutable, v59, v35)))
      {
        uint64_t v36 = __log_SCNetworkConfiguration();
        uint64_t v37 = _SC_syslog_os_log_mapping(3);
        if (__SC_log_enabled(3, v36, (os_log_type_t)v37))
        {
          uint64_t v38 = _os_log_pack_size();
          uint64_t v57 = &v54;
          uint64_t v46 = (char *)&v54
              - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v47 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v47 = v56;
          *(void *)(v47 + 4) = v35;
          __SC_log_send(3, (uint64_t)v36, v37, v46);
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, v35);
      }
      ++v33;
    }
    while (v32 != v33);
  }
  CFIndex v48 = CFArrayGetCount(Mutable);
  CFDictionaryRef v49 = v54;
  if (v48 < 1) {
    CFDictionaryRemoveValue(v54, @"ServiceOrder");
  }
  else {
    CFDictionarySetValue(v54, @"ServiceOrder", Mutable);
  }
  CFStringRef v50 = v55;
  CFRelease(Mutable);
  CFIndex v51 = CFDictionaryGetCount(v49);
  CFArrayRef v52 = (const __SCPreferences *)*((void *)set + 3);
  if (v51 < 1) {
    Boolean v53 = SCPreferencesPathRemoveValue(v52, v50);
  }
  else {
    Boolean v53 = SCPreferencesPathSetValue(v52, v50, v49);
  }
  Boolean v27 = v53;
  CFRelease(v49);
  CFRelease(v50);
  return v27;
}

CFComparisonResult _SCNetworkSetCompare(const __SCNetworkSet *a1, const __SCNetworkSet *a2)
{
  CFStringRef Name = SCNetworkSetGetName(a1);
  CFStringRef v5 = SCNetworkSetGetName(a2);
  CFStringRef v6 = v5;
  if (Name)
  {
    if (!v5) {
      return -1;
    }
    CFStringRef v7 = Name;
  }
  else
  {
    if (v5) {
      return 1;
    }
    CFStringRef SetID = SCNetworkSetGetSetID(a1);
    CFStringRef v6 = SCNetworkSetGetSetID(a2);
    CFStringRef v7 = SetID;
  }

  return CFStringCompare(v7, v6, 0);
}

uint64_t SCNetworkSetEstablishDefaultConfiguration(const __SCPreferences **cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_7:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!cf) {
      goto LABEL_7;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_7;
  }
  CFBooleanRef v3 = _SCNetworkInterfaceCopyAllWithPreferences(cf[3]);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = __SCNetworkSetEstablishDefaultConfigurationForInterfaces((uint64_t)cf, v3, 1);
    CFRelease(v4);
    return v5;
  }
  return 0;
}

uint64_t __SCNetworkSetEstablishDefaultConfigurationForInterfaces(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  CFArrayRef v6 = SCNetworkSetCopyAll(*(SCPreferencesRef *)(a1 + 24));
  if (v6)
  {
    CFArrayRef v7 = v6;
    if (CFArrayGetCount(v6) != 1
      || (CFArrayRef v8 = SCNetworkSetCopyServices((SCNetworkSetRef)v5)) != 0
      && (CFArrayRef v9 = v8, Count = CFArrayGetCount(v8), CFRelease(v9), Count)
      || (CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, 0), !CFEqual((CFTypeRef)v5, ValueAtIndex)))
    {
      CFArrayRef v12 = 0;
    }
    else
    {
      CFArrayRef v12 = SCNetworkServiceCopyAll(*(SCPreferencesRef *)(v5 + 24));
    }
    CFRelease(v7);
  }
  else
  {
    CFArrayRef v12 = 0;
  }
  CFArrayRef v13 = SCNetworkSetCopyServices((SCNetworkSetRef)v5);
  CFArrayRef v14 = v13;
  CFArrayRef v86 = v12;
  if (v13 && *(unsigned char *)(v5 + 40))
  {
    CFRelease(v13);
    CFArrayRef v14 = SCNetworkServiceCopyAll(*(SCPreferencesRef *)(v5 + 24));
  }
  uint64_t v15 = *(const __SCPreferences **)(v5 + 24);
  CFArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFArrayRef v17 = (const __CFArray *)SCBridgeInterfaceCopyAll(v15);
  if (v17)
  {
    CFArrayRef v18 = v17;
    __SCBridgeInterfaceListCollectMembers(v17, Mutable, 0);
    CFRelease(v18);
  }
  int v88 = 0;
  int v19 = 1;
  CFArrayRef v89 = v14;
  if (a2 && v14)
  {
    CFIndex v20 = CFArrayGetCount(a2);
    if (v20 < 1)
    {
      int v73 = 0;
      CFArrayRef v74 = v89;
      goto LABEL_54;
    }
    CFIndex v22 = v20;
    CFIndex v23 = 0;
    int v88 = 0;
    *(void *)&long long v21 = 138412546;
    long long v83 = v21;
    uint64_t v87 = v5;
    int v85 = a3;
    CFArrayRef v84 = a2;
    do
    {
      uint64_t v24 = CFArrayGetValueAtIndex(a2, v23);
      uint64_t v25 = v24;
      if (!a3
        || (ConfigurationAction = (const void *)_SCNetworkInterfaceGetConfigurationAction((uint64_t)v24),
            CFTypeID TypeID = CFStringGetTypeID(),
            !ConfigurationAction)
        || CFGetTypeID(ConfigurationAction) != TypeID
        || !CFEqual(ConfigurationAction, @"None"))
      {
        if (!CFSetContainsValue(Mutable, v25) && !__SCNetworkServiceExistsForInterface(v89, v25))
        {
          uint64_t v28 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          CFArrayAppendValue(v28, v25);
          if (v19)
          {
            while (CFArrayGetCount(v28) >= 1)
            {
              uint64_t v29 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v28, 0);
              CFArrayRef SupportedProtocolTypes = SCNetworkInterfaceGetSupportedProtocolTypes(v29);
              if (SupportedProtocolTypes && CFArrayGetCount(SupportedProtocolTypes) >= 1)
              {
                long long v31 = SCNetworkServiceCreate(*(SCPreferencesRef *)(v5 + 24), v29);
                if (!v31)
                {
                  uint64_t v42 = __log_SCNetworkConfiguration();
                  uint64_t v43 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v42, (os_log_type_t)v43))
                  {
                    uint64_t v44 = _os_log_pack_size();
                    CFArrayRef v52 = (char *)v82
                        - ((MEMORY[0x1F4188790](v44, v45, v46, v47, v48, v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0);
                    __error();
                    uint64_t v53 = _os_log_pack_fill();
                    CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(v29);
                    int v55 = SCError();
                    long long v56 = SCErrorString(v55);
                    *(_DWORD *)uint64_t v53 = v83;
                    *(void *)(v53 + 4) = LocalizedDisplayName;
                    *(_WORD *)(v53 + 12) = 2080;
                    *(void *)(v53 + 14) = v56;
                    __SC_log_send(3, (uint64_t)v42, v43, v52);
                    uint64_t v5 = v87;
                  }
                  goto LABEL_48;
                }
                CFIndex v32 = v31;
                if (!SCNetworkServiceEstablishDefaultConfiguration(v31))
                {
                  uint64_t v57 = __log_SCNetworkConfiguration();
                  uint64_t v58 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v57, (os_log_type_t)v58))
                  {
LABEL_46:
                    uint64_t v59 = (uint64_t)v57;
                    uint64_t v60 = _os_log_pack_size();
                    v82[1] = v82;
                    uint64_t v68 = (char *)v82
                        - ((MEMORY[0x1F4188790](v60, v61, v62, v63, v64, v65, v66, v67) + 15) & 0xFFFFFFFFFFFFFFF0);
                    __error();
                    uint64_t v69 = _os_log_pack_fill();
                    CFStringRef v70 = SCNetworkInterfaceGetLocalizedDisplayName(v29);
                    int v71 = SCError();
                    uint64_t v72 = SCErrorString(v71);
                    *(_DWORD *)uint64_t v69 = v83;
                    *(void *)(v69 + 4) = v70;
                    *(_WORD *)(v69 + 12) = 2080;
                    *(void *)(v69 + 14) = v72;
                    __SC_log_send(3, v59, v58, v68);
                    uint64_t v5 = v87;
                  }
LABEL_47:
                  SCNetworkServiceRemove(v32);
                  CFRelease(v32);
LABEL_48:
                  CFArrayRemoveValueAtIndex(v28, 0);
                  int v19 = 0;
                  break;
                }
                int v33 = SCNetworkSetAddService((SCNetworkSetRef)v5, v32);
                if (!v33)
                {
                  uint64_t v57 = __log_SCNetworkConfiguration();
                  uint64_t v58 = _SC_syslog_os_log_mapping(3);
                  if (__SC_log_enabled(3, v57, (os_log_type_t)v58)) {
                    goto LABEL_46;
                  }
                  goto LABEL_47;
                }
                int v19 = v33;
                CFRelease(v32);
                int v88 = 1;
              }
              else
              {
                CFArrayRef SupportedInterfaceTypes = SCNetworkInterfaceGetSupportedInterfaceTypes(v29);
                if (SupportedInterfaceTypes)
                {
                  CFArrayRef v35 = SupportedInterfaceTypes;
                  CFIndex v36 = CFArrayGetCount(SupportedInterfaceTypes);
                  if (v36 >= 1)
                  {
                    CFIndex v37 = v36;
                    for (CFIndex i = 0; i != v37; ++i)
                    {
                      CFStringRef v39 = (const __CFString *)CFArrayGetValueAtIndex(v35, i);
                      SCNetworkInterfaceRef v40 = SCNetworkInterfaceCreateWithInterface(v29, v39);
                      if (v40)
                      {
                        SCNetworkInterfaceRef v41 = v40;
                        CFArrayAppendValue(v28, v40);
                        CFRelease(v41);
                      }
                    }
                    uint64_t v5 = v87;
                  }
                }
              }
              CFArrayRemoveValueAtIndex(v28, 0);
            }
          }
          CFRelease(v28);
          a3 = v85;
          a2 = v84;
        }
      }
      ++v23;
    }
    while (v23 != v22);
  }
  int v73 = v88;
  CFArrayRef v74 = v89;
  if (v89) {
LABEL_54:
  }
    CFRelease(v74);
  CFRelease(Mutable);
  CFArrayRef v75 = v86;
  if (v86)
  {
    if (v19)
    {
      if (v73)
      {
        CFIndex v76 = CFArrayGetCount(v86);
        if (v76 >= 1)
        {
          CFIndex v77 = v76;
          for (CFIndex j = 0; j != v77; ++j)
          {
            uint64_t v79 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v75, j);
            if (_SCNetworkServiceIsVPN(v79))
            {
              int v19 = SCNetworkSetAddService((SCNetworkSetRef)v5, v79);
              if (!v19) {
                break;
              }
            }
          }
        }
      }
    }
    CFRelease(v75);
  }
  if (v19)
  {
    if (v73)
    {
      if (!SCPreferencesGetValue(*(SCPreferencesRef *)(v5 + 24), @"Model"))
      {
        uint64_t v80 = (const void *)_SC_hw_model(0);
        SCPreferencesSetValue(*(SCPreferencesRef *)(v5 + 24), @"Model", v80);
      }
    }
    else
    {
      _SCErrorSet(0);
    }
  }
  return v73;
}

uint64_t SCNetworkSetEstablishDefaultInterfaceConfiguration(CFTypeRef cf, const void *a2)
{
  v10[1] = *(const void **)MEMORY[0x1E4F143B8];
  v10[0] = a2;
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_9:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_9;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_9;
  }
  CFArrayRef v6 = CFArrayCreate(0, v10, 1, MEMORY[0x1E4F1D510]);
  if (!v6) {
    SCNetworkSetEstablishDefaultInterfaceConfiguration_cold_1();
  }
  CFArrayRef v7 = v6;
  uint64_t v8 = __SCNetworkSetEstablishDefaultConfigurationForInterfaces((uint64_t)cf, v6, 0);
  CFRelease(v7);
  return v8;
}

__CFArray *SCNetworkSetCopySelectedVPNService(CFTypeRef cf)
{
  if (__SCNetworkSetInitialize_initialized == -1)
  {
    if (!cf)
    {
LABEL_27:
      _SCErrorSet(1002);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (!cf) {
      goto LABEL_27;
    }
  }
  uint64_t v2 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v2) {
    goto LABEL_27;
  }
  CFArrayRef v3 = SCNetworkSetCopyServices((SCNetworkSetRef)cf);
  if (!v3) {
    return 0;
  }
  CFArrayRef v4 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  if (Count < 1)
  {
    CFRelease(v4);
    return 0;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  CFArrayRef Mutable = 0;
  CFArrayRef v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
    if (SCNetworkServiceGetEnabled((SCNetworkServiceRef)ValueAtIndex)
      && _SCNetworkServiceIsVPN((const __SCNetworkService *)ValueAtIndex))
    {
      if (!Mutable) {
        CFArrayRef Mutable = CFArrayCreateMutable(0, 0, v9);
      }
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v7;
  }
  while (v6 != v7);
  CFRelease(v4);
  if (Mutable)
  {
    CFIndex v11 = CFArrayGetCount(Mutable);
    if (v11 < 2)
    {
      CFArrayRef MutableCopy = Mutable;
    }
    else
    {
      CFIndex v12 = v11;
      CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder((SCNetworkSetRef)cf);
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, Mutable);
      v20.CFIndex length = CFArrayGetCount(MutableCopy);
      v20.CFIndex location = 0;
      CFArraySortValues(MutableCopy, v20, (CFComparatorFunction)_SCNetworkServiceCompare, ServiceOrder);
      CFRelease(Mutable);
      CFPreferencesAppSynchronize(@"com.apple.mobilevpn");
      CFPropertyListRef v15 = CFPreferencesCopyAppValue(@"activeVPNID", @"com.apple.mobilevpn");
      if (v15)
      {
        uint64_t v16 = v15;
        CFIndex v17 = 0;
        while (1)
        {
          CFArrayRef Mutable = (__CFArray *)CFArrayGetValueAtIndex(MutableCopy, v17);
          CFStringRef ServiceID = SCNetworkServiceGetServiceID(Mutable);
          if (CFEqual(ServiceID, v16)) {
            break;
          }
          if (v12 == ++v17)
          {
            CFRelease(v16);
            goto LABEL_22;
          }
        }
        CFRetain(Mutable);
        CFRelease(v16);
        if (Mutable) {
          goto LABEL_23;
        }
      }
    }
LABEL_22:
    CFArrayRef Mutable = (__CFArray *)CFArrayGetValueAtIndex(MutableCopy, 0);
    CFRetain(Mutable);
LABEL_23:
    CFRelease(MutableCopy);
  }
  return Mutable;
}

uint64_t SCNetworkSetSetSelectedVPNService(CFTypeRef cf, const void *a2)
{
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_21:
    _SCErrorSet(1002);
    LOBYTE(v10) = 0;
    return v10;
  }
  if (!cf) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_21;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID || !_SCNetworkServiceIsVPN((const __SCNetworkService *)a2)) {
    goto LABEL_21;
  }
  CFArrayRef v6 = SCNetworkSetCopyServices((SCNetworkSetRef)cf);
  if (v6)
  {
    CFArrayRef v7 = v6;
    uint64_t Count = CFArrayGetCount(v6);
    v15.CFIndex location = 0;
    v15.CFIndex length = Count;
    if (CFArrayContainsValue(v7, v15, a2))
    {
      if (Count < 1)
      {
        LOBYTE(v10) = 1;
      }
      else
      {
        uint64_t v9 = 1;
        int v10 = 1;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v9 - 1);
          if (_SCNetworkServiceIsVPN((const __SCNetworkService *)ValueAtIndex))
          {
            Boolean v12 = CFEqual(a2, ValueAtIndex);
            int v10 = SCNetworkServiceSetEnabled((SCNetworkServiceRef)ValueAtIndex, v12);
          }
          if (!v10) {
            break;
          }
        }
        while (v9++ < Count);
      }
    }
    else
    {
      _SCErrorSet(1002);
      LOBYTE(v10) = 0;
    }
    CFRelease(v7);
  }
  else
  {
    LOBYTE(v10) = 1;
  }
  return v10;
}

uint64_t _SCNetworkSetSetSetID(uint64_t cf, const void *a2)
{
  void block[7] = *MEMORY[0x1E4F143B8];
  if (__SCNetworkSetInitialize_initialized != -1)
  {
    dispatch_once(&__SCNetworkSetInitialize_initialized, &__block_literal_global_55_0);
    if (cf) {
      goto LABEL_3;
    }
LABEL_13:
    _SCErrorSet(1002);
    return 0;
  }
  if (!cf) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v4 = __kSCNetworkSetTypeID;
  if (CFGetTypeID((CFTypeRef)cf) != v4) {
    goto LABEL_13;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    goto LABEL_13;
  }
  if (!__SCNetworkSetExists(cf))
  {
    CFArrayRef v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      CFIndex v17 = (char *)v41 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = cf;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = a2;
      __SC_log_send(3, (uint64_t)v7, v8, v17);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SC_crash_once_block_invoke_4;
    block[3] = &__block_descriptor_tmp_16;
    void block[5] = 0;
    void block[6] = 0;
    block[4] = "_SCNetworkSetSetSetID() w/removed set";
    if (_SC_crash_once_once_4 != -1) {
      dispatch_once(&_SC_crash_once_once_4, block);
    }
    goto LABEL_13;
  }
  if (CFEqual(a2, *(CFTypeRef *)(cf + 16))) {
    return 1;
  }
  CFStringRef Set = SCPreferencesPathKeyCreateSet(0, (uint64_t)a2);
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 24), Set);
  CFTypeID v22 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v22)
  {
    CFStringRef v23 = SCPreferencesPathKeyCreateSet(0, *(void *)(cf + 16));
    CFDictionaryRef v24 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(cf + 24), v23);
    CFTypeID v25 = CFDictionaryGetTypeID();
    if (v24 && CFGetTypeID(v24) == v25)
    {
      if (SCPreferencesPathSetValue(*(SCPreferencesRef *)(cf + 24), Set, v24))
      {
        uint64_t v6 = SCPreferencesPathRemoveValue(*(SCPreferencesRef *)(cf + 24), v23);
        if (v6)
        {
          SCNetworkSetRef v26 = SCNetworkSetCopyCurrent(*(SCPreferencesRef *)(cf + 24));
          if (v26)
          {
            SCNetworkSetRef v27 = v26;
            BOOL v28 = CFEqual(*((CFTypeRef *)v26 + 2), *(CFTypeRef *)(cf + 16)) != 0;
            CFRelease(v27);
          }
          else
          {
            BOOL v28 = 0;
          }
          uint64_t v29 = __log_SCNetworkConfiguration();
          uint64_t v30 = _SC_syslog_os_log_mapping(7);
          if (__SC_log_enabled(7, v29, (os_log_type_t)v30))
          {
            uint64_t v31 = _os_log_pack_size();
            v41[1] = v41;
            CFStringRef v39 = (char *)v41
                - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v40 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v40 = 138412546;
            *(void *)(v40 + 4) = cf;
            *(_WORD *)(v40 + 12) = 2112;
            *(void *)(v40 + 14) = a2;
            __SC_log_send(7, (uint64_t)v29, v30, v39);
          }
          CFRetain(a2);
          CFRelease(*(CFTypeRef *)(cf + 16));
          *(void *)(cf + 16) = a2;
          if (v28) {
            SCNetworkSetSetCurrent((SCNetworkSetRef)cf);
          }
        }
        goto LABEL_26;
      }
    }
    else
    {
      _SCErrorSet(1004);
    }
    uint64_t v6 = 0;
LABEL_26:
    if (v23) {
      CFRelease(v23);
    }
    goto LABEL_28;
  }
  _SCErrorSet(1005);
  uint64_t v6 = 0;
LABEL_28:
  if (Set) {
    CFRelease(Set);
  }
  return v6;
}

uint64_t _serviceOrder(const __SCNetworkService *a1)
{
  uint64_t v2 = 100000;
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  if (Interface)
  {
    uint64_t v4 = Interface;
    if (!_SCNetworkServiceIsVPN(a1)) {
      return (int)__SCNetworkInterfaceOrder(v4);
    }
  }
  return v2;
}

uint64_t _serviceOrder_clear(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  uint64_t v6 = 0;
  CFIndex v7 = 0;
  do
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    if (CFEqual(ValueAtIndex, a2))
    {
      CFArrayRemoveValueAtIndex(a1, v7);
      --v5;
      ++v6;
    }
    else
    {
      ++v7;
    }
  }
  while (v7 < v5);
  return v6;
}

uint64_t __copy_default_set_name_block_invoke()
{
  uint64_t result = _SC_CFBundleGet();
  if (result)
  {
    uint64_t result = CFBundleCopyLocalizedStringForLocalization();
    copy_default_set_name_non_localized = result;
  }
  return result;
}

__CFBundle *__copy_default_set_name_block_invoke_2()
{
  uint64_t result = (__CFBundle *)_SC_CFBundleGet();
  if (result)
  {
    uint64_t result = (__CFBundle *)CFBundleCopyLocalizedString(result, @"DEFAULT_SET_NAME", @"Automatic", 0);
    copy_default_set_name_localized = (uint64_t)result;
  }
  return result;
}

BOOL __SCNetworkSetEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
  }
  return 0;
}

CFHashCode __SCNetworkSetHash(uint64_t a1)
{
  CFArrayRef v1 = *(const void **)(a1 + 16);

  return CFHash(v1);
}

__CFString *__SCNetworkSetCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCNetworkSet %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"id = %@", *(void *)(a1 + 16));
  CFStringAppendFormat(Mutable, 0, @", prefs = %p", *(void *)(a1 + 24));
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0, @", io_name_t name = %@", *(void *)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0, @", new");
  }
  if (!__SCNetworkSetExists(a1)) {
    CFStringAppendFormat(Mutable, 0, @", REMOVED");
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

__CFArray *_SCNetworkConfigurationCopyMigrationPaths()
{
  v5[1] = *(void **)MEMORY[0x1E4F143B8];
  value = 0;
  v5[0] = 0;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(0, &value, v5);
  CFArrayRef v1 = value;
  CFArrayAppendValue(Mutable, value);
  CFAllocatorRef v2 = v5[0];
  CFArrayAppendValue(Mutable, v5[0]);
  CFRelease(v1);
  CFRelease(v2);
  return Mutable;
}

void _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(const __CFURL *a1, void *a2, void *a3)
{
  if (a1)
  {
    CFURLRef v5 = a1;
    CFRetain(a1);
  }
  else
  {
    CFURLRef v5 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)"/Library/Preferences/SystemConfiguration", 40, 1u);
  }
  *a2 = MEMORY[0x192FA73A0](0, "preferences.plist", 17, 0, v5);
  *a3 = MEMORY[0x192FA73A0](0, "NetworkInterfaces.plist", 23, 0, v5);

  CFRelease(v5);
}

__CFArray *_SCNetworkConfigurationPerformMigration(const __CFURL *a1, uint64_t a2, const __CFURL *a3, __CFString *a4)
{
  v148[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __log_SCNetworkConfiguration();
  uint64_t v9 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v18 = (char *)v148 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    int isInstallEnvironment = _SC_isInstallEnvironment();
    long long v21 = " (INSTALLER ENVIRONMENT)";
    *(_DWORD *)uint64_t v19 = 136316162;
    if (!isInstallEnvironment) {
      long long v21 = "";
    }
    *(void *)(v19 + 4) = v21;
    *(_WORD *)(v19 + 12) = 2112;
    *(void *)(v19 + 14) = a1;
    CFTypeID v22 = @"None";
    *(_WORD *)(v19 + 22) = 2112;
    if (a4) {
      CFTypeID v22 = a4;
    }
    *(void *)(v19 + 24) = a2;
    *(_WORD *)(v19 + 32) = 2112;
    *(void *)(v19 + 34) = a3;
    *(_WORD *)(v19 + 42) = 2112;
    *(void *)(v19 + 44) = v22;
    __SC_log_send(6, (uint64_t)v8, v9, v18);
  }
  if (a1 && !CFURLHasDirectoryPath(a1))
  {
    uint64_t v34 = __log_SCNetworkConfiguration();
    uint64_t v35 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v34, (os_log_type_t)v35))
    {
      uint64_t v36 = _os_log_pack_size();
      uint64_t v44 = (char *)v148 - ((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v45 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v45 = 138412290;
      *(void *)(v45 + 4) = a1;
      uint64_t v46 = (uint64_t)v34;
      uint64_t v47 = v35;
LABEL_25:
      __SC_log_send(5, v46, v47, v44);
      return 0;
    }
    return 0;
  }
  if (a2 && !CFURLHasDirectoryPath((CFURLRef)a2))
  {
    uint64_t v51 = __log_SCNetworkConfiguration();
    uint64_t v52 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v51, (os_log_type_t)v52))
    {
      uint64_t v53 = _os_log_pack_size();
      uint64_t v44 = (char *)v148 - ((MEMORY[0x1F4188790](v53, v54, v55, v56, v57, v58, v59, v60) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v61 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v61 = 138412290;
      *(void *)(v61 + 4) = a2;
LABEL_24:
      uint64_t v46 = (uint64_t)v51;
      uint64_t v47 = v52;
      goto LABEL_25;
    }
    return 0;
  }
  if (a3 && !CFURLHasDirectoryPath(a3))
  {
    uint64_t v51 = __log_SCNetworkConfiguration();
    uint64_t v52 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v51, (os_log_type_t)v52))
    {
      uint64_t v62 = _os_log_pack_size();
      uint64_t v44 = (char *)v148 - ((MEMORY[0x1F4188790](v62, v63, v64, v65, v66, v67, v68, v69) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v70 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v70 = 138412290;
      *(void *)(v70 + 4) = a3;
      goto LABEL_24;
    }
    return 0;
  }
  if (!((unint64_t)a1 | a2))
  {
    CFStringRef v23 = __log_SCNetworkConfiguration();
    uint64_t v24 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v23, (os_log_type_t)v24))
    {
      uint64_t v25 = _os_log_pack_size();
      uint64_t v33 = (char *)v148 - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v23, v24, v33);
    }
    return 0;
  }
  CFURLRef v48 = CFURLCreateWithString(0, @"/Library/Preferences/SystemConfiguration", 0);
  CFURLRef v49 = v48;
  if (a1) {
    CFTypeRef v50 = (CFTypeRef)MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, a1);
  }
  else {
    CFTypeRef v50 = CFRetain(v48);
  }
  int v73 = v50;
  if (a2) {
    a2 = MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, a2);
  }
  if (a3) {
    CFTypeRef v74 = (CFTypeRef)MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, a3);
  }
  else {
    CFTypeRef v74 = CFRetain(v49);
  }
  CFArrayRef v75 = v74;
  if (CFEqual(v73, v74))
  {
    CFIndex v76 = __log_SCNetworkConfiguration();
    uint64_t v77 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v76, (os_log_type_t)v77)) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  BOOL v87 = a2 == 0;
  if (a2 && CFEqual((CFTypeRef)a2, v75))
  {
    BOOL v87 = 1;
LABEL_57:
    if (CFEqual(v73, (CFTypeRef)a2))
    {
      uint64_t v112 = __log_SCNetworkConfiguration();
      uint64_t v113 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v112, (os_log_type_t)v113))
      {
        uint64_t v114 = _os_log_pack_size();
        uint64_t v122 = (char *)v148
             - ((MEMORY[0x1F4188790](v114, v115, v116, v117, v118, v119, v120, v121) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v112, v113, v122);
      }
LABEL_61:
      uint64_t v123 = __log_SCNetworkConfiguration();
      uint64_t v124 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v123, (os_log_type_t)v124))
      {
        uint64_t v125 = _os_log_pack_size();
        uint64_t v133 = (char *)v148
             - ((MEMORY[0x1F4188790](v125, v126, v127, v128, v129, v130, v131, v132) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v123, v124, v133);
      }
      int v71 = _SCNetworkConfigurationCopyMigrationPaths();
      if (!a2) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    goto LABEL_60;
  }
  if (!_SCNetworkConfigurationMakePathIfNeeded((const __CFURL *)v75))
  {
    CFIndex v76 = __log_SCNetworkConfiguration();
    uint64_t v77 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v76, (os_log_type_t)v77))
    {
LABEL_36:
      uint64_t v78 = _os_log_pack_size();
      CFArrayRef v86 = (char *)v148 - ((MEMORY[0x1F4188790](v78, v79, v80, v81, v82, v83, v84, v85) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v76, v77, v86);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  if (!SCNetworkConfigurationCopyConfigurationFiles(a2, (uint64_t)v75, v88, v89, v90, v91, v92, v93))
  {
    uint64_t v100 = __log_SCNetworkConfiguration();
    uint64_t v101 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v100, (os_log_type_t)v101))
    {
      uint64_t v102 = _os_log_pack_size();
      uint64_t v110 = (char *)v148
           - ((MEMORY[0x1F4188790](v102, v103, v104, v105, v106, v107, v108, v109) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v111 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v111 = 138412546;
      *(void *)(v111 + 4) = a2;
      *(_WORD *)(v111 + 12) = 2112;
      *(void *)(v111 + 14) = v75;
      __SC_log_send(5, (uint64_t)v100, v101, v110);
    }
    BOOL v87 = 1;
  }
  if (a2) {
    goto LABEL_57;
  }
LABEL_60:
  if (_SCNetworkConfigurationMigrateConfiguration((uint64_t)v73, (uint64_t)v75, v94, v95, v96, v97, v98, v99))goto LABEL_61; {
  uint64_t v134 = __log_SCNetworkConfiguration();
  }
  uint64_t v135 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v134, (os_log_type_t)v135))
  {
    uint64_t v136 = _os_log_pack_size();
    uint64_t v144 = (char *)v148
         - ((MEMORY[0x1F4188790](v136, v137, v138, v139, v140, v141, v142, v143) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v145 = _os_log_pack_fill();
    int v146 = SCError();
    long long v147 = SCErrorString(v146);
    *(_DWORD *)uint64_t v145 = 136315138;
    *(void *)(v145 + 4) = v147;
    __SC_log_send(5, (uint64_t)v134, v135, v144);
  }
  if (!v87) {
    _SCNetworkConfigurationRemoveConfigurationFiles((const __CFURL *)v75);
  }
LABEL_37:
  int v71 = 0;
  if (a2) {
LABEL_38:
  }
    CFRelease((CFTypeRef)a2);
LABEL_39:
  if (v49) {
    CFRelease(v49);
  }
  if (v73) {
    CFRelease(v73);
  }
  if (v75) {
    CFRelease(v75);
  }
  return v71;
}

uint64_t _SCNetworkConfigurationMakePathIfNeeded(const __CFURL *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v2 = CFURLGetFileSystemRepresentation(a1, 1u, v44, 1024);
  CFArrayRef v3 = __log_SCNetworkConfiguration();
  if (v2)
  {
    uint64_t v4 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      uint64_t v13 = (char *)&v44[-((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v44;
      __SC_log_send(6, (uint64_t)v3, v4, v13);
    }
    for (uint64_t i = v44[0] == 47; ; ++i)
    {
      if (v44[i])
      {
        if (v44[i] != 47)
        {
          LODWORD(v16) = 0;
          goto LABEL_14;
        }
        uint64_t v16 = 0;
        v44[i] = 0;
      }
      else
      {
        uint64_t v16 = 1;
      }
      if (mkdir((const char *)v44, 0x1EDu) && *__error() != 17 && *__error() != 21)
      {
        uint64_t v29 = __log_SCNetworkConfiguration();
        uint64_t v30 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v29, (os_log_type_t)v30))
        {
          uint64_t v31 = _os_log_pack_size();
          uint64_t v39 = (char *)&v44[-((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0)
                           - 8];
          __error();
          uint64_t v40 = _os_log_pack_fill();
          uint64_t v41 = __error();
          uint64_t v42 = strerror(*v41);
          *(_DWORD *)uint64_t v40 = 136315394;
          *(void *)(v40 + 4) = v44;
          *(_WORD *)(v40 + 12) = 2080;
          *(void *)(v40 + 14) = v42;
          __SC_log_send(5, (uint64_t)v29, v30, v39);
        }
        return v16;
      }
      v44[i] = 47;
LABEL_14:
      if (v16) {
        return 1;
      }
    }
  }
  uint64_t v17 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v17))
  {
    uint64_t v18 = _os_log_pack_size();
    uint64_t v26 = (char *)&v44[-((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 138412290;
    *(void *)(v27 + 4) = a1;
    __SC_log_send(5, (uint64_t)v3, v17, v26);
  }
  return 0;
}

uint64_t SCNetworkConfigurationCopyConfigurationFiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  CFURLRef v10 = v9;
  CFURLRef v11 = (const __CFURL *)v8;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  CFURLRef v81 = 0;
  CFURLRef v82 = 0;
  CFURLRef url = 0;
  CFURLRef v80 = 0;
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(v9, &url, &v80);
  CFURLRef v12 = url;
  if (!CFURLGetFileSystemRepresentation(url, 1u, v83, 1024))
  {
    uint64_t v31 = __log_SCNetworkConfiguration();
    uint64_t v32 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v31, (os_log_type_t)v32)) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  CFURLRef v12 = v80;
  if (!CFURLGetFileSystemRepresentation(v80, 1u, v84, 1024))
  {
    uint64_t v31 = __log_SCNetworkConfiguration();
    uint64_t v32 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
    {
LABEL_12:
      uint64_t v33 = _os_log_pack_size();
      uint64_t v41 = (char *)&v78 - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v42 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v42 = 138412290;
      *(void *)(v42 + 4) = v12;
      __SC_log_send(5, (uint64_t)v31, v32, v41);
    }
LABEL_13:
    uint64_t v43 = 0;
    goto LABEL_28;
  }
  if (!v11)
  {
    CFURLRef v13 = 0;
    uint64_t v43 = 1;
    goto LABEL_26;
  }
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(v11, &v81, &v82);
  CFURLRef v13 = v81;
  if (!CFURLGetFileSystemRepresentation(v81, 1u, v85, 1024))
  {
    uint64_t v44 = __log_SCNetworkConfiguration();
    uint64_t v45 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v44, (os_log_type_t)v45))
    {
      uint64_t v46 = _os_log_pack_size();
      uint64_t v54 = (char *)&v78 - ((MEMORY[0x1F4188790](v46, v47, v48, v49, v50, v51, v52, v53) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v55 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v55 = 138412290;
      *(void *)(v55 + 4) = v13;
      __SC_log_send(5, (uint64_t)v44, v45, v54);
    }
LABEL_19:
    uint64_t v43 = 0;
    if (!v13) {
      goto LABEL_28;
    }
LABEL_27:
    CFRelease(v13);
    goto LABEL_28;
  }
  CFURLRef v14 = v82;
  if (!CFURLGetFileSystemRepresentation(v82, 1u, v86, 1024))
  {
    uint64_t v56 = __log_SCNetworkConfiguration();
    uint64_t v57 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v56, (os_log_type_t)v57))
    {
      uint64_t v58 = _os_log_pack_size();
      uint64_t v66 = (char *)&v78 - ((MEMORY[0x1F4188790](v58, v59, v60, v61, v62, v63, v64, v65) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v67 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v67 = 138412290;
      *(void *)(v67 + 4) = v14;
      __SC_log_send(5, (uint64_t)v56, v57, v66);
    }
    goto LABEL_19;
  }
  uint64_t v15 = copyfile_state_alloc();
  if (copyfile((const char *)v85, (const char *)v83, v15, 0xFu))
  {
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = (char *)&v78 - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      uint64_t v28 = __error();
      uint64_t v29 = strerror(*v28);
      *(_DWORD *)uint64_t v27 = 136315650;
      *(void *)(v27 + 4) = v85;
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v30 = v83;
LABEL_24:
      *(void *)(v27 + 14) = v30;
      *(_WORD *)(v27 + 22) = 2080;
      *(void *)(v27 + 24) = v29;
      __SC_log_send(5, (uint64_t)v16, v17, v26);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  copyfile_state_free(v15);
  chmod((const char *)v83, 0x1EDu);
  uint64_t v15 = copyfile_state_alloc();
  if (copyfile((const char *)v86, (const char *)v84, v15, 0xFu))
  {
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
    {
      uint64_t v68 = _os_log_pack_size();
      uint64_t v26 = (char *)&v78 - ((MEMORY[0x1F4188790](v68, v69, v70, v71, v72, v73, v74, v75) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      CFIndex v76 = __error();
      uint64_t v29 = strerror(*v76);
      *(_DWORD *)uint64_t v27 = 136315650;
      *(void *)(v27 + 4) = v86;
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v30 = v84;
      goto LABEL_24;
    }
LABEL_25:
    copyfile_state_free(v15);
    uint64_t v43 = 0;
LABEL_26:
    _SCNetworkConfigurationRemoveConfigurationFiles(v10);
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  copyfile_state_free(v15);
  chmod((const char *)v84, 0x1EDu);
  uint64_t v43 = 1;
  if (v13) {
    goto LABEL_27;
  }
LABEL_28:
  if (v82) {
    CFRelease(v82);
  }
  if (url) {
    CFRelease(url);
  }
  if (v80) {
    CFRelease(v80);
  }
  return v43;
}

uint64_t _SCNetworkConfigurationMigrateConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFURLRef v8 = (const __CFURL *)MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  CFURLRef v10 = v9;
  CFURLRef ValueAtIndex = v8;
  uint64_t v293 = *MEMORY[0x1E4F143B8];
  CFArrayRef v286 = 0;
  CFArrayRef theArray = 0;
  if (!__SCNetworkConfigurationMigrateConfigurationFilesPresent(v8, &theArray, 1))
  {
    uint64_t v33 = __log_SCNetworkConfiguration();
    uint64_t v34 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v33, (os_log_type_t)v34)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  CFArrayRef v12 = theArray;
  CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(theArray, 0);
  if (!CFURLGetFileSystemRepresentation(ValueAtIndex, 1u, v291, 1024))
  {
    uint64_t v33 = __log_SCNetworkConfiguration();
    uint64_t v34 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v33, (os_log_type_t)v34)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v12, 1);
  if (!CFURLGetFileSystemRepresentation(ValueAtIndex, 1u, v292, 1024))
  {
    uint64_t v33 = __log_SCNetworkConfiguration();
    uint64_t v34 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v33, (os_log_type_t)v34))
    {
LABEL_15:
      uint64_t v35 = _os_log_pack_size();
      uint64_t v43 = (char *)&v270 - ((MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v44 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v44 = 138412290;
      *(void *)(v44 + 4) = ValueAtIndex;
      __SC_log_send(5, (uint64_t)v33, v34, v43);
    }
LABEL_16:
    CFArrayRef Mutable = 0;
    uint64_t v45 = 0;
    CFStringRef v279 = 0;
    CFStringRef v280 = 0;
    Companion = 0;
    CFStringRef v282 = 0;
    v283 = 0;
    v284 = 0;
    CFStringRef v281 = 0;
LABEL_17:
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
    uint64_t v48 = 0;
    uint64_t v17 = 0;
    uint64_t v49 = 0;
LABEL_18:
    uint64_t v50 = 0;
LABEL_19:
    CFDictionaryRef BSDNameMapping = 0;
    goto LABEL_20;
  }
  CFStringRef v13 = CFStringCreateWithCString(0, (const char *)v291, 0x8000100u);
  CFStringRef v14 = CFStringCreateWithCString(0, (const char *)v292, 0x8000100u);
  CFStringRef v282 = v13;
  uint64_t v15 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v13);
  CFStringRef v281 = v14;
  uint64_t v16 = __SCPreferencesCreateForMigration(@"System Migration", v14);
  uint64_t v17 = 0;
  CFArrayRef Mutable = 0;
  v283 = v15;
  v284 = (const __SCPreferences *)v16;
  if (!v15 || (uint64_t v19 = (const __SCPreferences *)v16) == 0)
  {
    uint64_t v45 = 0;
    CFStringRef v279 = 0;
    CFStringRef v280 = 0;
    Companion = 0;
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    CFDictionaryRef BSDNameMapping = 0;
    goto LABEL_20;
  }
  BOOL v20 = __SCNetworkConfigurationMigrateConfigurationFilesPresent(v10, &v286, 0);
  CFArrayRef v21 = v286;
  if (!v20 && !v286)
  {
    uint64_t v22 = __log_SCNetworkConfiguration();
    uint64_t v23 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v32 = (char *)&v270 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v22, v23, v32);
    }
    goto LABEL_66;
  }
  CFURLRef v55 = (const __CFURL *)CFArrayGetValueAtIndex(v286, 0);
  if (!CFURLGetFileSystemRepresentation(v55, 1u, v289, 1024))
  {
    uint64_t v71 = __log_SCNetworkConfiguration();
    uint64_t v72 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v71, (os_log_type_t)v72)) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }
  CFURLRef v55 = (const __CFURL *)CFArrayGetValueAtIndex(v21, 1);
  if (!CFURLGetFileSystemRepresentation(v55, 1u, v290, 1024))
  {
    uint64_t v71 = __log_SCNetworkConfiguration();
    uint64_t v72 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v71, (os_log_type_t)v72))
    {
LABEL_65:
      uint64_t v73 = _os_log_pack_size();
      CFURLRef v81 = (char *)&v270 - ((MEMORY[0x1F4188790](v73, v74, v75, v76, v77, v78, v79, v80) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v82 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v82 = 138412290;
      *(void *)(v82 + 4) = v55;
      __SC_log_send(5, (uint64_t)v71, v72, v81);
    }
LABEL_66:
    CFArrayRef Mutable = 0;
    uint64_t v45 = 0;
    CFStringRef v279 = 0;
    CFStringRef v280 = 0;
    Companion = 0;
    goto LABEL_17;
  }
  CFStringRef v56 = CFStringCreateWithCString(0, (const char *)v289, 0x8000100u);
  CFStringRef v57 = CFStringCreateWithCString(0, (const char *)v290, 0x8000100u);
  CFStringRef v280 = v56;
  uint64_t v58 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v56);
  uint64_t v45 = v58;
  CFStringRef v279 = v57;
  if (v20)
  {
    uint64_t v59 = __SCPreferencesCreateForMigration(@"System Migration", v57);
    Companion = (const __SCPreferences *)v59;
    if (!v45 || !v59)
    {
      uint64_t v60 = __log_SCNetworkConfiguration();
      uint64_t v61 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v60, (os_log_type_t)v61))
      {
        uint64_t v62 = _os_log_pack_size();
        uint64_t v70 = (char *)&v270
            - ((MEMORY[0x1F4188790](v62, v63, v64, v65, v66, v67, v68, v69) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v60, v61, v70);
      }
      CFArrayRef Mutable = 0;
      goto LABEL_17;
    }
  }
  else
  {
    __SCNetworkPopulateDefaultPrefs(v58);
    Companion = (const __SCPreferences *)SCPreferencesCreateCompanion((uint64_t)v45, @"NetworkInterfaces.plist");
    __SCNetworkPopulateDefaultNIPrefs(Companion);
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v83 = (char *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(Mutable, @"ConfigurationRepair", (const void *)*MEMORY[0x1E4F1CFD0]);
  _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v15, 1);
  _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v45, 1);
  CFRange v277 = v83;
  if (!hasSameModel(v15, v45))
  {
    uint64_t v84 = "model change (preferences)";
    goto LABEL_74;
  }
  if (!hasSameModel(v19, Companion))
  {
    uint64_t v84 = "model change (interfaces)";
    goto LABEL_74;
  }
  if (hasInterfaceConflict(v19, Companion))
  {
    uint64_t v84 = "interface conflicts";
LABEL_74:
    uint64_t v85 = __log_SCNetworkConfiguration();
    uint64_t v86 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v85, (os_log_type_t)v86))
    {
      uint64_t v87 = _os_log_pack_size();
      CFRange v278 = (char *)&v270;
      uint64_t v95 = (char *)&v270 - ((MEMORY[0x1F4188790](v87, v88, v89, v90, v91, v92, v93, v94) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v96 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v96 = 136315138;
      *(void *)(v96 + 4) = v84;
      __SC_log_send(5, (uint64_t)v85, v86, v95);
      int v97 = 1;
LABEL_76:
      uint64_t v15 = v283;
      uint64_t v19 = v284;
      goto LABEL_78;
    }
    int v97 = 1;
    goto LABEL_78;
  }
  uint64_t v172 = __log_SCNetworkConfiguration();
  uint64_t v173 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v172, (os_log_type_t)v173))
  {
    uint64_t v174 = _os_log_pack_size();
    CFRange v278 = (char *)&v270;
    uint64_t v182 = (char *)&v270
         - ((MEMORY[0x1F4188790](v174, v175, v176, v177, v178, v179, v180, v181) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v172, v173, v182);
    int v97 = 0;
    goto LABEL_76;
  }
  int v97 = 0;
LABEL_78:
  uint64_t v98 = __log_SCNetworkConfiguration();
  uint64_t v99 = _SC_syslog_os_log_mapping(6);
  BOOL v100 = __SC_log_enabled(6, v98, (os_log_type_t)v99);
  LODWORD(v278) = v97;
  if (v100)
  {
    uint64_t v101 = _os_log_pack_size();
    uint64_t v109 = (char *)&v270
         - ((MEMORY[0x1F4188790](v101, v102, v103, v104, v105, v106, v107, v108) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = v283;
    uint64_t v110 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v110 = 138413570;
    uint64_t v111 = ", new";
    *(void *)(v110 + 4) = v15;
    if (v20) {
      uint64_t v111 = "";
    }
    *(_WORD *)(v110 + 12) = 2112;
    *(void *)(v110 + 14) = v284;
    *(_WORD *)(v110 + 22) = 2112;
    *(void *)(v110 + 24) = v45;
    *(_WORD *)(v110 + 32) = 2080;
    *(void *)(v110 + 34) = v111;
    *(_WORD *)(v110 + 42) = 2112;
    *(void *)(v110 + 44) = Companion;
    *(_WORD *)(v110 + 52) = 2080;
    *(void *)(v110 + 54) = v111;
    uint64_t v112 = v109;
    uint64_t v19 = v284;
    __SC_log_send(6, (uint64_t)v98, v99, v112);
    int v97 = (int)v278;
  }
  if (v97) {
    uint64_t v113 = "migration";
  }
  else {
    uint64_t v113 = "upgrade";
  }
  CFStringRef v114 = CFStringCreateWithFormat(0, 0, @"pre-%s-source", v113);
  __SCNetworkConfigurationBackup(v15, v114, (uint64_t)v45);
  __SCNetworkConfigurationBackup(v19, v114, (uint64_t)v45);
  CFRelease(v114);
  uint64_t v115 = "new-";
  if (v20) {
    uint64_t v115 = "";
  }
  CFStringRef v116 = CFStringCreateWithFormat(0, 0, @"pre-%s-%starget", v113, v115);
  __SCNetworkConfigurationBackup(v45, v116, (uint64_t)v45);
  __SCNetworkConfigurationBackup(Companion, v116, (uint64_t)v45);
  CFRelease(v116);
  __SCNetworkConfigurationReport(5, "Source", v15, v19);
  __SCNetworkConfigurationReport(5, "Target", v45, Companion);
  _SCNetworkConfigurationCreateBuiltinInterfaceServices(v15, v19);
  if (!_SCNetworkConfigurationCheckValidityWithPreferences(v15, v19, Mutable))
  {
    uint64_t v132 = __log_SCNetworkConfiguration();
    uint64_t v133 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v132, (os_log_type_t)v133)) {
      goto LABEL_118;
    }
LABEL_117:
    uint64_t v183 = _os_log_pack_size();
    long long v191 = (char *)&v270
         - ((MEMORY[0x1F4188790](v183, v184, v185, v186, v187, v188, v189, v190) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v132, v133, v191);
LABEL_118:
    CFDictionaryRef BSDNameMapping = 0;
    uint64_t v50 = 0;
    uint64_t v49 = 0;
    uint64_t v48 = 0;
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
    CFDictionaryRef ServiceSetMapping = 0;
    CFDictionaryRef v276 = 0;
    if (!v97) {
      goto LABEL_135;
    }
    goto LABEL_119;
  }
  if (v20)
  {
    _SCNetworkConfigurationCreateBuiltinInterfaceServices(v45, Companion);
    if (!_SCNetworkConfigurationCheckValidityWithPreferences(v45, Companion, Mutable))
    {
      uint64_t v132 = __log_SCNetworkConfiguration();
      uint64_t v133 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v132, (os_log_type_t)v133)) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
  }
  if ((v97 & 1) == 0)
  {
    char v285 = 0;
    uint64_t v134 = (char *)__SCPreferencesCreateForMigration(@"Upgrade Source Prefs", 0);
    uint64_t v135 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"Upgrade Source NI Prefs", @"NetworkInterfaces.plist");
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v134, 1);
    uint64_t v136 = __log_SCNetworkConfiguration();
    uint64_t v137 = _SC_syslog_os_log_mapping(6);
    BOOL v138 = __SC_log_enabled(6, v136, (os_log_type_t)v137);
    long long v274 = (const __SCPreferences *)v134;
    if (v138)
    {
      uint64_t v139 = _os_log_pack_size();
      long long v147 = (char *)&v270
           - ((MEMORY[0x1F4188790](v139, v140, v141, v142, v143, v144, v145, v146) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v148 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v148 = 138412546;
      *(void *)(v148 + 4) = v274;
      *(_WORD *)(v148 + 12) = 2112;
      *(void *)(v148 + 14) = v135;
      long long v149 = v147;
      uint64_t v19 = v284;
      __SC_log_send(6, (uint64_t)v136, v137, v149);
      uint64_t v134 = (char *)v274;
    }
    CFDictionaryRef Value = SCPreferencesPathGetValue(v45, @"/");
    CFDictionaryRef v151 = SCPreferencesPathGetValue(Companion, @"/");
    SCPreferencesPathSetValue((SCPreferencesRef)v134, @"/", Value);
    SCPreferencesPathSetValue(v135, @"/", v151);
    CFDictionaryRef v152 = SCPreferencesPathGetValue(v283, @"/");
    CFDictionaryRef v153 = SCPreferencesPathGetValue(v19, @"/");
    SCPreferencesPathSetValue(v45, @"/", v152);
    SCPreferencesPathSetValue(Companion, @"/", v153);
    CFTypeRef v273 = v135;
    uint64_t v154 = _SCNetworkConfigurationCopyExternalInterfaceMapping(v135, Companion);
    uint64_t v49 = v154;
    if (v154)
    {
      v288[0] = 6;
      v288[1] = "Upgrading, external interface mapping";
      CFDictionaryApplyFunction(v154, (CFDictionaryApplierFunction)logMapping_one, v288);
    }
    uint64_t v48 = _SCNetworkMigrationCreateNetworkInterfaceArray(Companion, v49, &v285);
    uint64_t v155 = __log_SCNetworkConfiguration();
    uint64_t v156 = _SC_syslog_os_log_mapping(6);
    BOOL v157 = __SC_log_enabled(6, v155, (os_log_type_t)v156);
    int v97 = (int)v278;
    if (v157)
    {
      uint64_t v158 = _os_log_pack_size();
      CFDictionaryRef v276 = (const __CFDictionary *)&v270;
      CFIndex v166 = (char *)&v270
           - ((MEMORY[0x1F4188790](v158, v159, v160, v161, v162, v163, v164, v165) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      int v97 = (int)v278;
      uint64_t v167 = _os_log_pack_fill();
      if (v285) {
        CFIndex v168 = "found";
      }
      else {
        CFIndex v168 = "no";
      }
      *(_DWORD *)uint64_t v167 = 136315138;
      *(void *)(v167 + 4) = v168;
      v169 = v166;
      uint64_t v134 = (char *)v274;
      __SC_log_send(6, (uint64_t)v155, v156, v169);
    }
    if (!v285)
    {
      CFDictionaryRef ServiceSetMapping = 0;
      CFDictionaryRef v276 = 0;
      CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
      CFDictionaryRef BSDNameMapping = 0;
      goto LABEL_126;
    }
    if (v48)
    {
      if (__SCNetworkInterfaceSaveStoredWithPreferences(Companion, v48))
      {
        CFDictionaryRef BSDNameMapping = _SCNetworkMigrationCreateBSDNameMapping(0, v49);
        CFDictionaryRef ServiceMappingUsingBSDNameMapping = _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping((const __SCPreferences *)v134, v45, BSDNameMapping);
        SetMapping = _SCNetworkMigrationCreateSetMapping((const __SCPreferences *)v134, v45);
        CFDictionaryRef ServiceSetMapping = _SCNetworkMigrationCreateServiceSetMapping(v274);
        CFDictionaryRef v276 = SetMapping;
        CFDictionaryRef v171 = SetMapping;
        uint64_t v134 = (char *)v274;
        _SCNetworkMigrationDoServiceMigration((uint64_t)v274, (uint64_t)v45, ServiceMappingUsingBSDNameMapping, BSDNameMapping, v171, ServiceSetMapping);
LABEL_126:
        CFRelease(v134);
        CFRelease(v273);
        uint64_t v50 = 0;
        goto LABEL_135;
      }
      long long v225 = __log_SCNetworkConfiguration();
      uint64_t v226 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v225, (os_log_type_t)v226)) {
        goto LABEL_158;
      }
    }
    else
    {
      long long v225 = __log_SCNetworkConfiguration();
      uint64_t v226 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v225, (os_log_type_t)v226))
      {
LABEL_158:
        uint64_t v252 = _os_log_pack_size();
        CFRange v278 = (char *)&v270;
        uint64_t v260 = (char *)&v270
             - ((MEMORY[0x1F4188790](v252, v253, v254, v255, v256, v257, v258, v259) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v225, v226, v260);
        uint64_t v134 = (char *)v274;
      }
    }
    CFRelease(v134);
    CFRelease(v273);
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  uint64_t v50 = _SCNetworkConfigurationCopyBuiltinMapping(v19, Companion);
  uint64_t v49 = _SCNetworkConfigurationCopyExternalInterfaceMapping(v19, Companion);
  NetworkInterfaceArray = _SCNetworkMigrationCreateNetworkInterfaceArray(Companion, v49, 0);
  if (!NetworkInterfaceArray)
  {
    uint64_t v202 = __log_SCNetworkConfiguration();
    uint64_t v203 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v202, (os_log_type_t)v203))
    {
      uint64_t v204 = _os_log_pack_size();
      CFRange v278 = (char *)&v270;
      uint64_t v212 = (char *)&v270
           - ((MEMORY[0x1F4188790](v204, v205, v206, v207, v208, v209, v210, v211) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v202, v203, v212);
    }
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
    uint64_t v48 = 0;
    goto LABEL_130;
  }
  uint64_t v48 = NetworkInterfaceArray;
  if (!__SCNetworkInterfaceSaveStoredWithPreferences(Companion, NetworkInterfaceArray))
  {
    uint64_t v213 = (char *)__log_SCNetworkConfiguration();
    uint64_t v214 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, (os_log_t)v213, (os_log_type_t)v214))
    {
      uint64_t v215 = _os_log_pack_size();
      CFRange v278 = (char *)&v270;
      uint64_t v223 = MEMORY[0x1F4188790](v215, v216, v217, v218, v219, v220, v221, v222);
      CFRange v277 = v213;
      CFArrayRef v224 = (char *)&v270 - ((v223 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v277, v214, v224);
    }
    CFDictionaryRef ServiceMappingUsingBSDNameMapping = 0;
LABEL_130:
    uint64_t v17 = 0;
    goto LABEL_19;
  }
  CFDictionaryRef BSDNameMapping = _SCNetworkMigrationCreateBSDNameMapping(v50, v49);
  uint64_t v118 = v283;
  CFDictionaryRef ServiceMappingUsingBSDNameMapping = _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping(v283, v45, BSDNameMapping);
  if (!ServiceMappingUsingBSDNameMapping)
  {
    uint64_t v17 = 0;
    goto LABEL_20;
  }
  CFDictionaryRef v276 = _SCNetworkMigrationCreateSetMapping(v118, v45);
  uint64_t v119 = _SCNetworkMigrationCreateServiceSetMapping(v118);
  uint64_t v120 = (uint64_t)v118;
  CFDictionaryRef v121 = v276;
  CFDictionaryRef ServiceSetMapping = v119;
  if (!_SCNetworkMigrationDoServiceMigration(v120, (uint64_t)v45, ServiceMappingUsingBSDNameMapping, BSDNameMapping, v276, v119))
  {
    uint64_t v261 = __log_SCNetworkConfiguration();
    LODWORD(v277) = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v261, (os_log_type_t)v277)) {
      goto LABEL_151;
    }
    uint64_t v262 = _os_log_pack_size();
    CFTypeRef v273 = v261;
    long long v274 = (const __SCPreferences *)&v270;
    CFRange v278 = (char *)&v270
         - ((MEMORY[0x1F4188790](v262, v263, v264, v265, v266, v267, v268, v269) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    goto LABEL_150;
  }
  if (!_SCNetworkMigrationDoServiceOrderMigration(v121))
  {
    os_log_t v122 = __log_SCNetworkConfiguration();
    int v123 = _SC_syslog_os_log_mapping(5);
    CFTypeRef v273 = v122;
    LODWORD(v272) = v123;
    if (__SC_log_enabled(5, v122, (os_log_type_t)v123))
    {
      uint64_t v124 = _os_log_pack_size();
      long long v271 = &v270;
      long long v274 = (const __SCPreferences *)((char *)&v270
                                     - ((MEMORY[0x1F4188790](v124, v125, v126, v127, v128, v129, v130, v131) + 15) & 0xFFFFFFFFFFFFFFF0));
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v273, v272, (char *)v274);
    }
  }
  int v97 = (int)v278;
LABEL_119:
  if (!_SCNetworkMigrationDoSystemMigration(v283, v45))
  {
    os_log_t v192 = __log_SCNetworkConfiguration();
    int v193 = _SC_syslog_os_log_mapping(5);
    CFTypeRef v273 = v192;
    LODWORD(v272) = v193;
    if (__SC_log_enabled(5, v192, (os_log_type_t)v193))
    {
      uint64_t v194 = _os_log_pack_size();
      long long v271 = &v270;
      long long v274 = (const __SCPreferences *)((char *)&v270
                                     - ((MEMORY[0x1F4188790](v194, v195, v196, v197, v198, v199, v200, v201) + 15) & 0xFFFFFFFFFFFFFFF0));
      __error();
      int v97 = (int)v278;
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v273, v272, (char *)v274);
    }
    else
    {
      int v97 = (int)v278;
    }
  }
LABEL_135:
  CFDictionaryAddValue(Mutable, @"ConfigurationRepairModel", v277);
  if (!_SCNetworkConfigurationCheckValidityWithPreferences(v45, Companion, Mutable))
  {
    CFIndex v228 = (char *)__log_SCNetworkConfiguration();
    int v229 = _SC_syslog_os_log_mapping(5);
    long long v274 = (const __SCPreferences *)v228;
    LODWORD(v273) = v229;
    if (__SC_log_enabled(5, (os_log_t)v228, (os_log_type_t)v229))
    {
      uint64_t v230 = _os_log_pack_size();
      long long v272 = &v270;
      CFRange v277 = (char *)&v270
           - ((MEMORY[0x1F4188790](v230, v231, v232, v233, v234, v235, v236, v237) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v238 = _os_log_pack_fill();
      CFArrayRef v239 = "Upgraded";
      if (v278) {
        CFArrayRef v239 = "Migrated";
      }
      *(_DWORD *)uint64_t v238 = 136315138;
      *(void *)(v238 + 4) = v239;
      __SC_log_send(5, (uint64_t)v274, v273, v277);
    }
    goto LABEL_151;
  }
  if (SCPreferencesCommitChanges(v45))
  {
    if (SCPreferencesCommitChanges(Companion))
    {
      if (v97) {
        uint64_t v227 = "Migrated";
      }
      else {
        uint64_t v227 = "Upgraded";
      }
      __SCNetworkConfigurationReport(5, v227, v45, Companion);
      uint64_t v17 = 1;
      goto LABEL_152;
    }
    stat v240 = __log_SCNetworkConfiguration();
    LODWORD(v277) = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v240, (os_log_type_t)v277)) {
      goto LABEL_149;
    }
  }
  else
  {
    stat v240 = __log_SCNetworkConfiguration();
    LODWORD(v277) = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v240, (os_log_type_t)v277))
    {
LABEL_149:
      uint64_t v241 = _os_log_pack_size();
      CFTypeRef v273 = v240;
      long long v274 = (const __SCPreferences *)&v270;
      CFRange v278 = (char *)&v270
           - ((MEMORY[0x1F4188790](v241, v242, v243, v244, v245, v246, v247, v248) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v249 = _os_log_pack_fill();
      int v250 = SCError();
      BOOL v251 = SCErrorString(v250);
      *(_DWORD *)uint64_t v249 = 136315138;
      *(void *)(v249 + 4) = v251;
LABEL_150:
      __SC_log_send(5, (uint64_t)v273, v277, v278);
    }
  }
LABEL_151:
  uint64_t v17 = 0;
LABEL_152:
  if (v276) {
    CFRelease(v276);
  }
  if (ServiceSetMapping) {
    CFRelease(ServiceSetMapping);
  }
LABEL_20:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v286) {
    CFRelease(v286);
  }
  if (v282) {
    CFRelease(v282);
  }
  if (v281) {
    CFRelease(v281);
  }
  if (v280) {
    CFRelease(v280);
  }
  if (v279) {
    CFRelease(v279);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v50) {
    CFRelease(v50);
  }
  uint64_t v52 = v283;
  if (v49) {
    CFRelease(v49);
  }
  if (BSDNameMapping) {
    CFRelease(BSDNameMapping);
  }
  uint64_t v53 = v284;
  if (ServiceMappingUsingBSDNameMapping) {
    CFRelease(ServiceMappingUsingBSDNameMapping);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v17;
}

void _SCNetworkConfigurationRemoveConfigurationFiles(const __CFURL *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CFURLRef v52 = 0;
  CFURLRef url = 0;
  _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(a1, &url, &v52);
  CFURLRef v1 = url;
  if (!CFURLGetFileSystemRepresentation(url, 1u, (UInt8 *)v55, 1024))
  {
    CFArrayRef v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v3, (os_log_type_t)v4)) {
      goto LABEL_9;
    }
    uint64_t v17 = _os_log_pack_size();
    CFStringRef v13 = (char *)&v51 - ((MEMORY[0x1F4188790](v17, v18, v19, v20, v21, v22, v23, v24) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 138412290;
    *(void *)(v25 + 4) = v1;
    goto LABEL_8;
  }
  if (remove(v55, v2) && *__error() != 2)
  {
    CFArrayRef v3 = __log_SCNetworkConfiguration();
    uint64_t v4 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
    {
      uint64_t v5 = _os_log_pack_size();
      CFStringRef v13 = (char *)&v51 - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = __error();
      uint64_t v16 = strerror(*v15);
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)(v14 + 4) = v55;
      *(_WORD *)(v14 + 12) = 2080;
      *(void *)(v14 + 14) = v16;
LABEL_8:
      __SC_log_send(5, (uint64_t)v3, v4, v13);
    }
  }
LABEL_9:
  CFRelease(v1);
  CFURLRef v26 = v52;
  if (CFURLGetFileSystemRepresentation(v52, 1u, (UInt8 *)v54, 1024))
  {
    if (remove(v54, v27) && *__error() != 2)
    {
      uint64_t v28 = __log_SCNetworkConfiguration();
      uint64_t v29 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
      {
        uint64_t v30 = _os_log_pack_size();
        uint64_t v38 = (char *)&v51 - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v39 = _os_log_pack_fill();
        uint64_t v40 = __error();
        uint64_t v41 = strerror(*v40);
        *(_DWORD *)uint64_t v39 = 136315394;
        *(void *)(v39 + 4) = v54;
        *(_WORD *)(v39 + 12) = 2080;
        *(void *)(v39 + 14) = v41;
LABEL_16:
        __SC_log_send(5, (uint64_t)v28, v29, v38);
      }
    }
  }
  else
  {
    uint64_t v28 = __log_SCNetworkConfiguration();
    uint64_t v29 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
    {
      uint64_t v42 = _os_log_pack_size();
      uint64_t v38 = (char *)&v51 - ((MEMORY[0x1F4188790](v42, v43, v44, v45, v46, v47, v48, v49) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v50 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v50 = 138412290;
      *(void *)(v50 + 4) = v26;
      goto LABEL_16;
    }
  }
  CFRelease(v26);
}

uint64_t _SCNetworkConfigurationCheckValidityWithPreferences(const __SCPreferences *a1, const __SCPreferences *a2, const __CFDictionary *a3)
{
  v301 = a1;
  uint64_t v311 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v302 = 1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a3 && CFGetTypeID(a3) == TypeID)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a3, @"ConfigurationRepair");
    CFTypeID v7 = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == v7) {
      LODWORD(ValueAtIndex) = CFBooleanGetValue(Value);
    }
    else {
      LODWORD(ValueAtIndex) = 0;
    }
    CFBooleanRef v9 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"ConfigurationRepairModel");
    CFTypeID v10 = CFBooleanGetTypeID();
    if (v9 && CFGetTypeID(v9) == v10) {
      int v8 = CFBooleanGetValue(v9);
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    int v8 = 0;
    LODWORD(ValueAtIndex) = 0;
  }
  uint64_t v308 = 0;
  long long v306 = 0u;
  long long v307 = 0u;
  long long v304 = 0u;
  long long v305 = 0u;
  long long v303 = 0u;
  uint64_t v11 = __log_SCNetworkConfiguration();
  uint64_t v12 = _SC_syslog_os_log_mapping(6);
  CFStringRef v13 = "";
  if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
  {
    uint64_t v14 = _os_log_pack_size();
    v299 = (uint64_t *)&v290;
    uint64_t v22 = (char *)&v290 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    BOOL v24 = v8 == 0;
    int v25 = v8;
    CFURLRef v26 = v301;
    if (!v24) {
      CFStringRef v13 = ", w/repair-model";
    }
    uint64_t v27 = a2;
    if (ValueAtIndex) {
      uint64_t v28 = ", w/repair-configuration";
    }
    else {
      uint64_t v28 = "";
    }
    BOOL v29 = _SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v301);
    *(_DWORD *)uint64_t v23 = 136316162;
    uint64_t v30 = ", bypass system interfaces";
    *(void *)(v23 + 4) = v13;
    CFStringRef v13 = "";
    if (!v29) {
      uint64_t v30 = "";
    }
    *(_WORD *)(v23 + 12) = 2080;
    *(void *)(v23 + 14) = v28;
    a2 = v27;
    *(_WORD *)(v23 + 22) = 2080;
    *(void *)(v23 + 24) = v30;
    *(_WORD *)(v23 + 32) = 2112;
    *(void *)(v23 + 34) = v26;
    int v8 = v25;
    *(_WORD *)(v23 + 42) = 2112;
    *(void *)(v23 + 44) = v27;
    __SC_log_send(6, (uint64_t)v11, v12, v22);
  }
  BOOL v31 = _SCNetworkConfigurationBypassSystemInterfaces((uint64_t)v301);
  if (!v31) {
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v301, 1);
  }
  CFPropertyListRef v32 = SCPreferencesGetValue(v301, @"Model");
  CFPropertyListRef v33 = SCPreferencesGetValue(a2, @"Model");
  CFTypeID v34 = CFStringGetTypeID();
  if (!v32 || CFGetTypeID(v32) != v34)
  {
    if (v8)
    {
      CFTypeID v35 = CFStringGetTypeID();
      if (v33)
      {
        if (CFGetTypeID(v33) == v35)
        {
          uint64_t v36 = __log_SCNetworkConfiguration();
          uint64_t v37 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v36, (os_log_type_t)v37))
          {
            uint64_t v38 = _os_log_pack_size();
            uint64_t v46 = (char *)&v290
                - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(6, (uint64_t)v36, v37, v46);
          }
          SCPreferencesSetValue(v301, @"Model", v33);
          CFTypeID v47 = CFStringGetTypeID();
          CFPropertyListRef v32 = v33;
LABEL_35:
          uint64_t v61 = v32;
          if (CFGetTypeID(v33) == v47) {
            goto LABEL_45;
          }
          goto LABEL_36;
        }
      }
    }
    uint64_t v48 = __log_SCNetworkConfiguration();
    uint64_t v49 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v48, (os_log_type_t)v49))
    {
      uint64_t v50 = _os_log_pack_size();
      v298 = a2;
      uint64_t v58 = (char *)&v290 - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      uint64_t v59 = v58;
      CFStringRef v13 = "";
      __SC_log_send(6, (uint64_t)v48, v49, v59);
      a2 = v298;
    }
  }
  CFTypeID v60 = CFStringGetTypeID();
  if (v33)
  {
    CFTypeID v47 = v60;
    goto LABEL_35;
  }
LABEL_36:
  if (v8)
  {
    CFTypeID v62 = CFStringGetTypeID();
    if (v32)
    {
      if (CFGetTypeID(v32) == v62)
      {
        uint64_t v63 = __log_SCNetworkConfiguration();
        uint64_t v64 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v63, (os_log_type_t)v64))
        {
          uint64_t v65 = _os_log_pack_size();
          uint64_t v73 = (char *)&v290
              - ((MEMORY[0x1F4188790](v65, v66, v67, v68, v69, v70, v71, v72) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(6, (uint64_t)v63, v64, v73);
        }
        SCPreferencesSetValue(a2, @"Model", v32);
        CFTypeID v74 = CFStringGetTypeID();
        uint64_t v61 = v32;
        goto LABEL_47;
      }
    }
  }
  uint64_t v75 = __log_SCNetworkConfiguration();
  uint64_t v76 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v75, (os_log_type_t)v76))
  {
    uint64_t v77 = _os_log_pack_size();
    uint64_t v85 = (char *)&v290 - ((MEMORY[0x1F4188790](v77, v78, v79, v80, v81, v82, v83, v84) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v75, v76, v85);
  }
  uint64_t v61 = v32;
LABEL_45:
  CFTypeID v86 = CFStringGetTypeID();
  if (!v61) {
    goto LABEL_51;
  }
  CFTypeID v74 = v86;
  CFPropertyListRef v32 = v33;
LABEL_47:
  if (CFGetTypeID(v61) == v74)
  {
    CFTypeID v87 = CFStringGetTypeID();
    if (v32)
    {
      if (CFGetTypeID(v32) == v87 && !CFEqual(v61, v32))
      {
        unsigned __int8 v302 = 0;
        uint64_t v159 = __log_SCNetworkConfiguration();
        uint64_t v160 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v159, (os_log_type_t)v160))
        {
          uint64_t v161 = _os_log_pack_size();
          v169 = (char *)&v290
               - ((MEMORY[0x1F4188790](v161, v162, v163, v164, v165, v166, v167, v168) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v170 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v170 = 138412546;
          *(void *)(v170 + 4) = v301;
          *(_WORD *)(v170 + 12) = 2112;
          *(void *)(v170 + 14) = a2;
          __SC_log_send(5, (uint64_t)v159, v160, v169);
        }
        goto LABEL_80;
      }
    }
  }
LABEL_51:
  uint64_t v88 = __SCNetworkInterfaceCopyStoredWithPreferences(a2);
  if (v88)
  {
    uint64_t v89 = v88;
    MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v88);
    CFRelease(v89);
    CFTypeID v91 = CFDictionaryGetTypeID();
    if (!MappingUsingBSDName || CFGetTypeID(MappingUsingBSDName) != v91)
    {
      unsigned __int8 v302 = 0;
      uint64_t v103 = __log_SCNetworkConfiguration();
      uint64_t v104 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v103, (os_log_type_t)v104))
      {
        uint64_t v105 = _os_log_pack_size();
        uint64_t v113 = (char *)&v290
             - ((MEMORY[0x1F4188790](v105, v106, v107, v108, v109, v110, v111, v112) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v114 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v114 = 138412290;
        *(void *)(v114 + 4) = a2;
        __SC_log_send(5, (uint64_t)v103, v104, v113);
      }
      CFArrayRef v115 = 0;
      uint64_t v94 = 0;
      v299 = 0;
      CFMutableArrayRef v101 = 0;
      CFMutableArrayRef v116 = 0;
      CFMutableArrayRef Mutable = 0;
      CFArrayRef v117 = 0;
      CFArrayRef v118 = 0;
      if (!MappingUsingBSDName) {
        goto LABEL_63;
      }
      goto LABEL_132;
    }
    uint64_t v92 = __SCNetworkServiceCopyAllInterfaces(v301);
    if (v92)
    {
      CFArrayRef v93 = v92;
      logInterfaces((uint64_t)"interfaces", v92, 1);
      uint64_t v94 = __SCNetworkInterfaceCreateMappingUsingBSDName(v93);
      CFRelease(v93);
      if (v94)
      {
        v298 = a2;
        uint64_t context = 7;
        v310 = "mappingServiceBSDNameToInterface";
        CFDictionaryApplyFunction(v94, (CFDictionaryApplierFunction)logMapping_one, &context);
        int v95 = (int)ValueAtIndex;
        if (ValueAtIndex)
        {
          uint64_t v96 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
          CFMutableArrayRef v98 = CFArrayCreateMutable(0, 0, v96);
          uint64_t v99 = v96;
          CFMutableArrayRef v100 = v98;
          CFMutableArrayRef v101 = CFArrayCreateMutable(0, 0, v99);
          CFMutableDictionaryRef v102 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        else
        {
          CFMutableDictionaryRef v102 = 0;
          CFMutableArrayRef v101 = 0;
          CFMutableArrayRef v100 = 0;
          CFMutableArrayRef Mutable = 0;
        }
        *(void *)&long long v305 = &v302;
        *((void *)&v305 + 1) = Mutable;
        CFMutableArrayRef v297 = v100;
        *(void *)&long long v306 = v100;
        *((void *)&v306 + 1) = v101;
        *(void *)&long long v304 = 0;
        *((void *)&v304 + 1) = MappingUsingBSDName;
        long long v303 = 0uLL;
        LOBYTE(v308) = v95;
        *(void *)&long long v307 = v102;
        *((void *)&v307 + 1) = v301;
        v299 = (uint64_t *)v102;
        CFDictionaryApplyFunction(v94, (CFDictionaryApplierFunction)_SCNetworkConfigurationValidateInterface, &v303);
        v296 = v101;
        if (!v302)
        {
          uint64_t v234 = __log_SCNetworkConfiguration();
          uint64_t v235 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v234, (os_log_type_t)v235))
          {
            uint64_t v236 = _os_log_pack_size();
            uint64_t v244 = (char *)&v290
                 - ((MEMORY[0x1F4188790](v236, v237, v238, v239, v240, v241, v242, v243) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v245 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v245 = 138412546;
            *(void *)(v245 + 4) = v301;
            *(_WORD *)(v245 + 12) = 2112;
            *(void *)(v245 + 14) = v298;
            uint64_t v246 = v244;
            CFMutableArrayRef v101 = v296;
            __SC_log_send(5, (uint64_t)v234, v235, v246);
            int v95 = (int)ValueAtIndex;
          }
          if (!v95)
          {
            CFArrayRef v118 = 0;
            CFArrayRef v117 = 0;
            CFArrayRef v115 = 0;
LABEL_131:
            CFMutableArrayRef v116 = v297;
            goto LABEL_132;
          }
          CFArrayRef v247 = (const __CFArray *)*((void *)&v305 + 1);
          CFArrayRef v248 = (const __CFArray *)v306;
          CFIndex Count = CFArrayGetCount(*((CFArrayRef *)&v305 + 1));
          CFIndex v250 = CFArrayGetCount(v248);
          if (!(Count | v250))
          {
            CFArrayRef v118 = 0;
            CFArrayRef v117 = 0;
            CFArrayRef v115 = 0;
            unsigned __int8 v302 = 0;
            CFMutableArrayRef v116 = v297;
            CFMutableArrayRef v101 = v296;
LABEL_132:
            CFRelease(MappingUsingBSDName);
            if (v94) {
              CFRelease(v94);
            }
LABEL_63:
            if (v118) {
              CFRelease(v118);
            }
            if (v117) {
              CFRelease(v117);
            }
            if (v115) {
              CFRelease(v115);
            }
            uint64_t v119 = v299;
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (v116) {
              CFRelease(v116);
            }
            if (v101) {
              CFRelease(v101);
            }
            if (v119) {
              CFRelease(v119);
            }
            goto LABEL_80;
          }
          CFIndex v264 = v250;
          SCNetworkSetRef ValueAtIndex = Mutable;
          uint64_t v265 = v301;
          __SCNetworkConfigurationBackup(v301, @"pre-repair", (uint64_t)v301);
          uint64_t v266 = v298;
          __SCNetworkConfigurationBackup(v298, @"pre-repair", (uint64_t)v265);
          __SCNetworkConfigurationReport(7, "pre-repair", v265, v266);
          if (v247) {
            logInterfaces((uint64_t)"Interfaces to be removed", v247, 0);
          }
          if (v248) {
            logInterfaces((uint64_t)"Interfaces to be replaced", v248, 0);
          }
          CFArrayRef v267 = SCNetworkServiceCopyAll(v301);
          v315.CFIndex length = CFArrayGetCount(v267);
          v315.CFIndex location = 0;
          CFArrayApplyFunction(v267, v315, (CFArrayApplierFunction)create_bsd_name_service_protocol_mapping, &v303);
          if ((void)v307)
          {
            uint64_t context = 7;
            v310 = "BSD name / Service Protocol mapping";
            CFDictionaryApplyFunction((CFDictionaryRef)v307, (CFDictionaryApplierFunction)logMapping_one, &context);
          }
          v316.CFIndex length = CFArrayGetCount(v267);
          v316.CFIndex location = 0;
          CFArrayApplyFunction(v267, v316, (CFArrayApplierFunction)remove_service, &v303);
          v317.CFIndex location = 0;
          v317.CFIndex length = v264;
          CFArrayApplyFunction(v248, v317, (CFArrayApplierFunction)add_service, &v303);
          CFRelease(v267);
          uint64_t v268 = v301;
          __SCNetworkConfigurationReport(7, "post-repair", v301, v266);
          unsigned __int8 v302 = 1;
          int v269 = SCPreferencesCommitChanges(v268);
          CFMutableArrayRef Mutable = ValueAtIndex;
          CFMutableArrayRef v101 = v296;
          if (!v269)
          {
            uint64_t v270 = __log_SCNetworkConfiguration();
            uint64_t v271 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v270, (os_log_type_t)v271))
            {
              uint64_t v272 = _os_log_pack_size();
              CFStringRef v280 = (char *)&v290
                   - ((MEMORY[0x1F4188790](v272, v273, v274, v275, v276, v277, v278, v279) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              CFStringRef v281 = v280;
              CFMutableArrayRef v101 = v296;
              __SC_log_send(5, (uint64_t)v270, v271, v281);
            }
          }
        }
        CFArrayRef v118 = SCNetworkServiceCopyAll(v301);
        CFTypeID v171 = CFArrayGetTypeID();
        BOOL v295 = v31;
        if (v118 && CFGetTypeID(v118) == v171)
        {
          CFArrayRef v117 = SCNetworkSetCopyAll(v301);
          CFTypeID v172 = CFArrayGetTypeID();
          if (v117 && CFGetTypeID(v117) == v172)
          {
            CFArrayRef v115 = 0;
            if (CFArrayGetCount(v117) >= 1 && v302)
            {
              CFIndex v174 = 0;
              *(void *)&long long v173 = 138412546;
              long long v292 = v173;
              do
              {
                SCNetworkSetRef ValueAtIndex = (SCNetworkSetRef)CFArrayGetValueAtIndex(v117, v174);
                CFArrayRef v175 = SCNetworkSetCopyServices(ValueAtIndex);
                if (v175)
                {
                  CFArrayRef v115 = v175;
                  CFIndex v294 = v174;
                  if (CFArrayGetCount(v175) >= 1)
                  {
                    CFIndex v176 = 0;
                    while (1)
                    {
                      uint64_t v177 = CFArrayGetValueAtIndex(v115, v176);
                      v312.CFIndex length = CFArrayGetCount(v118);
                      v312.CFIndex location = 0;
                      if (!CFArrayContainsValue(v118, v312, v177)) {
                        break;
                      }
                      if (++v176 >= CFArrayGetCount(v115)) {
                        goto LABEL_114;
                      }
                    }
                    unsigned __int8 v302 = 0;
                    int v193 = __log_SCNetworkConfiguration();
                    uint64_t v194 = _SC_syslog_os_log_mapping(5);
                    if (__SC_log_enabled(5, v193, (os_log_type_t)v194))
                    {
                      uint64_t v195 = _os_log_pack_size();
                      uint64_t v293 = (uint64_t *)&v290;
                      uint64_t v203 = MEMORY[0x1F4188790](v195, v196, v197, v198, v199, v200, v201, v202);
                      v291 = v193;
                      uint64_t v204 = (char *)&v290 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0);
                      __error();
                      *(_WORD *)_os_log_pack_fill() = 0;
                      __SC_log_send(5, (uint64_t)v291, v194, v204);
                    }
                  }
LABEL_114:
                  if (!v302)
                  {
                    CFStringRef v13 = "";
                    break;
                  }
                  CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(ValueAtIndex);
                  if (ServiceOrder)
                  {
                    CFArrayRef v206 = ServiceOrder;
                    if (CFArrayGetCount(ServiceOrder) >= 1)
                    {
                      CFIndex v207 = 0;
                      while (1)
                      {
                        uint64_t v208 = CFArrayGetValueAtIndex(v206, v207);
                        v313.CFIndex length = CFArrayGetCount(v206);
                        v313.CFIndex location = 0;
                        if (!CFArrayContainsValue(v206, v313, v208))
                        {
                          v314.CFIndex length = CFArrayGetCount(v118);
                          v314.CFIndex location = 0;
                          if (!CFArrayContainsValue(v118, v314, v208)) {
                            break;
                          }
                        }
                        if (++v207 >= CFArrayGetCount(v206)) {
                          goto LABEL_121;
                        }
                      }
                      uint64_t v209 = __log_SCNetworkConfiguration();
                      int v210 = _SC_syslog_os_log_mapping(5);
                      if (__SC_log_enabled(5, v209, (os_log_type_t)v210))
                      {
                        uint64_t v211 = _os_log_pack_size();
                        LODWORD(v291) = v210;
                        uint64_t v293 = (uint64_t *)&v290;
                        uint64_t v219 = MEMORY[0x1F4188790](v211, v212, v213, v214, v215, v216, v217, v218);
                        v290 = v209;
                        uint64_t v220 = (char *)&v290 - ((v219 + 15) & 0xFFFFFFFFFFFFFFF0);
                        __error();
                        uint64_t v221 = _os_log_pack_fill();
                        *(_DWORD *)uint64_t v221 = v292;
                        *(void *)(v221 + 4) = v208;
                        *(_WORD *)(v221 + 12) = 2112;
                        *(void *)(v221 + 14) = ValueAtIndex;
                        __SC_log_send(5, (uint64_t)v290, v291, v220);
                      }
                    }
                  }
LABEL_121:
                  CFRelease(v115);
                  CFStringRef v13 = "";
                  CFIndex v174 = v294;
                }
                else
                {
                  uint64_t v178 = __log_SCNetworkConfiguration();
                  uint64_t v179 = _SC_syslog_os_log_mapping(5);
                  if (__SC_log_enabled(5, v178, (os_log_type_t)v179))
                  {
                    uint64_t v180 = _os_log_pack_size();
                    CFIndex v294 = v174;
                    uint64_t v293 = (uint64_t *)&v290;
                    uint64_t v188 = Mutable;
                    uint64_t v189 = v13;
                    uint64_t v190 = (char *)&v290
                         - ((MEMORY[0x1F4188790](v180, v181, v182, v183, v184, v185, v186, v187) + 15) & 0xFFFFFFFFFFFFFFF0);
                    __error();
                    CFIndex v174 = v294;
                    uint64_t v191 = _os_log_pack_fill();
                    *(_DWORD *)uint64_t v191 = v292;
                    *(void *)(v191 + 4) = v301;
                    *(_WORD *)(v191 + 12) = 2112;
                    *(void *)(v191 + 14) = ValueAtIndex;
                    os_log_t v192 = v190;
                    CFStringRef v13 = v189;
                    CFMutableArrayRef Mutable = v188;
                    __SC_log_send(5, (uint64_t)v178, v179, v192);
                  }
                }
                ++v174;
                CFArrayRef v115 = 0;
              }
              while (v174 < CFArrayGetCount(v117) && v302);
            }
            CFArrayRef v282 = (const __CFArray *)SCBridgeInterfaceCopyAll(v301);
            if (v282)
            {
              CFArrayRef v283 = v282;
              v318.CFIndex length = CFArrayGetCount(v282);
              v318.CFIndex location = 0;
              CFArrayApplyFunction(v283, v318, (CFArrayApplierFunction)validate_bridge, v298);
              CFRelease(v283);
            }
            CFArrayRef v284 = SCVLANInterfaceCopyAll(v301);
            if (v284)
            {
              CFArrayRef v285 = v284;
              CFArrayRef v286 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004045F868BCuLL);
              v287 = v298;
              *CFArrayRef v286 = v301;
              v286[1] = v287;
              v288 = (const void *)*MEMORY[0x1E4F1D260];
              v286[2] = *MEMORY[0x1E4F1D260];
              v319.CFIndex length = CFArrayGetCount(v285);
              v319.CFIndex location = 0;
              CFArrayApplyFunction(v285, v319, (CFArrayApplierFunction)validate_vlan, v286);
              v289 = (const void *)v286[2];
              if (v289 && v289 != v288) {
                CFRelease(v289);
              }
              free(v286);
              CFRelease(v285);
            }
            BOOL v31 = v295;
            CFMutableArrayRef v116 = v297;
            CFMutableArrayRef v101 = v296;
            goto LABEL_132;
          }
          unsigned __int8 v302 = 0;
          BOOL v251 = __log_SCNetworkConfiguration();
          uint64_t v252 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v251, (os_log_type_t)v252))
          {
            uint64_t v253 = _os_log_pack_size();
            uint64_t v261 = (char *)&v290
                 - ((MEMORY[0x1F4188790](v253, v254, v255, v256, v257, v258, v259, v260) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v262 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v262 = 138412290;
            *(void *)(v262 + 4) = v301;
            uint64_t v263 = v261;
            CFMutableArrayRef v101 = v296;
            __SC_log_send(5, (uint64_t)v251, v252, v263);
            CFStringRef v13 = "";
          }
        }
        else
        {
          unsigned __int8 v302 = 0;
          uint64_t v222 = __log_SCNetworkConfiguration();
          uint64_t v223 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v222, (os_log_type_t)v223))
          {
            uint64_t v224 = _os_log_pack_size();
            uint64_t v232 = (char *)&v290
                 - ((MEMORY[0x1F4188790](v224, v225, v226, v227, v228, v229, v230, v231) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v233 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v233 = 138412290;
            *(void *)(v233 + 4) = v301;
            __SC_log_send(5, (uint64_t)v222, v223, v232);
            CFMutableArrayRef v101 = v296;
          }
          CFArrayRef v117 = 0;
        }
        CFArrayRef v115 = 0;
        BOOL v31 = v295;
        goto LABEL_131;
      }
      BOOL v146 = v31;
      unsigned __int8 v302 = 0;
      long long v147 = __log_SCNetworkConfiguration();
      uint64_t v148 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v147, (os_log_type_t)v148)) {
        goto LABEL_91;
      }
    }
    else
    {
      BOOL v146 = v31;
      unsigned __int8 v302 = 0;
      long long v147 = __log_SCNetworkConfiguration();
      uint64_t v148 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v147, (os_log_type_t)v148))
      {
LABEL_91:
        uint64_t v149 = _os_log_pack_size();
        BOOL v157 = (char *)&v290
             - ((MEMORY[0x1F4188790](v149, v150, v151, v152, v153, v154, v155, v156) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v158 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v158 = 138412290;
        *(void *)(v158 + 4) = v301;
        __SC_log_send(5, (uint64_t)v147, v148, v157);
      }
    }
    CFArrayRef v118 = 0;
    CFArrayRef v117 = 0;
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v116 = 0;
    v299 = 0;
    uint64_t v94 = 0;
    CFArrayRef v115 = 0;
    BOOL v31 = v146;
    CFMutableArrayRef v101 = 0;
    goto LABEL_132;
  }
  uint64_t v120 = __log_SCNetworkConfiguration();
  uint64_t v121 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v120, (os_log_type_t)v121))
  {
    uint64_t v122 = _os_log_pack_size();
    uint64_t v130 = (char *)&v290
         - ((MEMORY[0x1F4188790](v122, v123, v124, v125, v126, v127, v128, v129) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v131 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v131 = 138412290;
    *(void *)(v131 + 4) = a2;
    __SC_log_send(5, (uint64_t)v120, v121, v130);
  }
  unsigned __int8 v302 = 0;
LABEL_80:
  if (!v31) {
    _SCNetworkConfigurationSetBypassSystemInterfaces((uint64_t)v301, 0);
  }
  uint64_t v132 = __log_SCNetworkConfiguration();
  uint64_t v133 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v132, (os_log_type_t)v133))
  {
    uint64_t v134 = _os_log_pack_size();
    uint64_t v142 = (char *)&v290
         - ((MEMORY[0x1F4188790](v134, v135, v136, v137, v138, v139, v140, v141) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v143 = _os_log_pack_fill();
    if (v302) {
      uint64_t v144 = v13;
    }
    else {
      uint64_t v144 = "not ";
    }
    *(_DWORD *)uint64_t v143 = 136315138;
    *(void *)(v143 + 4) = v144;
    __SC_log_send(6, (uint64_t)v132, v133, v142);
  }
  return v302;
}

void logInterfaces(uint64_t a1, const __CFArray *a2, int a3)
{
  uint64_t v57 = a1;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)&v57 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = v57;
      __SC_log_send(7, (uint64_t)v4, v5, v14);
    }
    CFMutableArrayRef Mutable = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  }
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v19 = Count;
    CFIndex v20 = 0;
    uint64_t v58 = @"UserDefinedName";
    *(void *)&long long v18 = 138412546;
    long long v59 = v18;
    CFTypeID v60 = Mutable;
    CFIndex v61 = Count;
    do
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a2, v20);
      CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
      if (!ValueAtIndex)
      {
        CFDictionaryGetTypeID();
LABEL_19:
        BOOL v29 = 0;
        BOOL v24 = @"?";
        if (!Mutable) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      if (CFGetTypeID(ValueAtIndex) == TypeID)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        if (BSDName)
        {
          BOOL v24 = (__CFString *)BSDName;
          UserDefinedCFStringRef Name = __SCNetworkInterfaceGetUserDefinedName(ValueAtIndex);
LABEL_17:
          BOOL v29 = (__CFString *)UserDefinedName;
          if (!Mutable) {
            goto LABEL_22;
          }
          goto LABEL_20;
        }
      }
      else
      {
        CFTypeID v26 = CFDictionaryGetTypeID();
        if (CFGetTypeID(ValueAtIndex) != v26) {
          goto LABEL_19;
        }
        CFBooleanRef Value = (__CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        if (Value)
        {
          BOOL v24 = Value;
          CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo");
          if (v28)
          {
            UserDefinedCFStringRef Name = (uint64_t)CFDictionaryGetValue(v28, v58);
            goto LABEL_17;
          }
          BOOL v29 = 0;
          if (!Mutable)
          {
LABEL_22:
            uint64_t v30 = __log_SCNetworkConfiguration();
            uint64_t v31 = _SC_syslog_os_log_mapping(7);
            if (__SC_log_enabled(7, v30, (os_log_type_t)v31))
            {
              uint64_t v32 = _os_log_pack_size();
              CFArrayRef v33 = a2;
              uint64_t v41 = (char *)&v57
                  - ((MEMORY[0x1F4188790](v32, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v42 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v42 = v59;
              if (v29) {
                uint64_t v43 = v29;
              }
              else {
                uint64_t v43 = @"?";
              }
              *(void *)(v42 + 4) = v24;
              *(_WORD *)(v42 + 12) = 2112;
              *(void *)(v42 + 14) = v43;
              __SC_log_send(7, (uint64_t)v30, v31, v41);
              a2 = v33;
              CFMutableArrayRef Mutable = v60;
              CFIndex v19 = v61;
            }
            goto LABEL_27;
          }
LABEL_20:
          CFArrayAppendValue(Mutable, v24);
        }
      }
LABEL_27:
      ++v20;
    }
    while (v19 != v20);
  }
  if (Mutable)
  {
    CFStringRef v44 = CFStringCreateByCombiningStrings(0, Mutable, @", ");
    uint64_t v45 = __log_SCNetworkConfiguration();
    uint64_t v46 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v45, (os_log_type_t)v46))
    {
      uint64_t v47 = _os_log_pack_size();
      uint64_t v55 = (char *)&v57 - ((MEMORY[0x1F4188790](v47, v48, v49, v50, v51, v52, v53, v54) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v56 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v56 = 136315394;
      *(void *)(v56 + 4) = v57;
      *(_WORD *)(v56 + 12) = 2112;
      *(void *)(v56 + 14) = v44;
      __SC_log_send(7, (uint64_t)v45, v46, v55);
    }
    CFRelease(v44);
    CFRelease(Mutable);
  }
}

void _SCNetworkConfigurationValidateInterface(void *key, void *a2, uint64_t a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a3 + 80);
  if (**(unsigned char **)(a3 + 32) | v3)
  {
    CFDictionaryRef v8 = *(const __CFDictionary **)a3;
    CFDictionaryRef v7 = *(const __CFDictionary **)(a3 + 8);
    uint64_t v9 = *(__CFArray **)(a3 + 40);
    uint64_t v63 = *(__CFArray **)(a3 + 48);
    uint64_t v10 = *(__CFArray **)(a3 + 56);
    CFDictionaryRef v11 = *(const __CFDictionary **)(a3 + 16);
    CFBooleanRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 24), key);
    if (Value)
    {
      uint64_t v13 = Value;
      UserDefinedCFStringRef Name = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(Value);
      CFStringRef v15 = (const __CFString *)__SCNetworkInterfaceGetUserDefinedName(a2);
      if (!__SCNetworkConfigurationInterfaceNameIsEquiv(UserDefinedName, v15))
      {
        uint64_t v16 = __log_SCNetworkConfiguration();
        uint64_t v17 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
        {
          uint64_t v18 = _os_log_pack_size();
          uint64_t v61 = (uint64_t)&v61;
          uint64_t v26 = MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25);
          uint64_t v62 = v9;
          uint64_t v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v28 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v28 = 138412546;
          *(void *)(v28 + 4) = UserDefinedName;
          *(_WORD *)(v28 + 12) = 2112;
          *(void *)(v28 + 14) = v15;
          BOOL v29 = v27;
          uint64_t v9 = v62;
          __SC_log_send(5, (uint64_t)v16, v17, v29);
        }
        **(unsigned char **)(a3 + 32) = 0;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v10 && CFGetTypeID(v10) == TypeID && __SCNetworkInterfaceMatchesName(UserDefinedName, v15))
        {
          uint64_t v31 = __log_SCNetworkConfiguration();
          uint64_t v32 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
          {
            uint64_t v33 = _os_log_pack_size();
            uint64_t v62 = (__CFArray *)&v61;
            uint64_t v41 = v9;
            uint64_t v42 = (char *)&v61
                - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v43 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v43 = 138412546;
            *(void *)(v43 + 4) = v15;
            *(_WORD *)(v43 + 12) = 2112;
            *(void *)(v43 + 14) = UserDefinedName;
            CFStringRef v44 = v42;
            uint64_t v9 = v41;
            __SC_log_send(5, (uint64_t)v31, v32, v44);
          }
          CFArrayAppendValue(v10, a2);
        }
        CFTypeID v45 = CFArrayGetTypeID();
        uint64_t v46 = v63;
        if (v63 && CFGetTypeID(v63) == v45) {
          CFArrayAppendValue(v46, v13);
        }
        CFTypeID v47 = CFArrayGetTypeID();
        if (v9)
        {
          if (CFGetTypeID(v9) == v47) {
            CFArrayAppendValue(v9, a2);
          }
        }
      }
    }
    else if (v8 {
           && !CFDictionaryContainsKey(v8, key)
    }
           && v7
           && !CFDictionaryContainsKey(v7, key)
           && v11
           && !CFDictionaryContainsKey(v11, key))
    {
      uint64_t v48 = v9;
      uint64_t v49 = __log_SCNetworkConfiguration();
      uint64_t v50 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v49, (os_log_type_t)v50))
      {
        uint64_t v51 = _os_log_pack_size();
        long long v59 = (char *)&v61 - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v60 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v60 = 138412290;
        *(void *)(v60 + 4) = key;
        __SC_log_send(5, (uint64_t)v49, v50, v59);
      }
      if (v3) {
        CFArrayAppendValue(v48, a2);
      }
      **(unsigned char **)(a3 + 32) = 0;
    }
  }
}

void validate_bridge(const __SCNetworkInterface *a1, const __SCPreferences *a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount(MemberInterfaces) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(MemberInterfaces, v6);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
      if (BSDName)
      {
        uint64_t v9 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, a2, BSDName);
        if (v9)
        {
          uint64_t v10 = v9;
          CFArrayAppendValue(Mutable, v9);
          CFRelease(v10);
        }
      }
      ++v6;
    }
    while (v6 < CFArrayGetCount(MemberInterfaces));
  }
  if (CFArrayGetCount(Mutable))
  {
    SCBridgeInterfaceSetMemberInterfaces((const __SCPreferences **)a1, Mutable);
  }
  else
  {
    CFDictionaryRef v11 = __log_SCNetworkConfiguration();
    uint64_t v12 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
    {
      uint64_t v13 = _os_log_pack_size();
      uint64_t v21 = (char *)v23 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 138412290;
      *(void *)(v22 + 4) = a1;
      __SC_log_send(5, (uint64_t)v11, v12, v21);
    }
    SCBridgeInterfaceRemove((SCPreferencesRef *)a1);
  }
  CFRelease(Mutable);
}

void validate_vlan(const __SCNetworkInterface *a1, const __SCPreferences **a2)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(a1);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(PhysicalInterface);
  if (!BSDName) {
    goto LABEL_16;
  }
  CFStringRef v6 = BSDName;
  CFDictionaryRef v7 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, a2[1], BSDName);
  if (v7)
  {
    CFRelease(v7);
    return;
  }
  CFArrayRef v8 = a2[2];
  if (v8 == (const __CFArray *)*MEMORY[0x1E4F1D260])
  {
    CFArrayRef v8 = (const __CFArray *)SCBridgeInterfaceCopyAll(*a2);
    a2[2] = v8;
    if (!v8)
    {
LABEL_16:
      uint64_t v14 = __log_SCNetworkConfiguration();
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v24 = (char *)v26 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v25 = 138412290;
        *(void *)(v25 + 4) = a1;
        __SC_log_send(5, (uint64_t)v14, v15, v24);
      }
      SCVLANInterfaceRemove(a1);
      return;
    }
  }
  else if (!v8)
  {
    goto LABEL_16;
  }
  CFIndex Count = CFArrayGetCount(v8);
  if (Count < 1) {
    goto LABEL_16;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    SCNetworkSetRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v8, v11);
    CFStringRef v13 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (v13 == v6 || v13 && CFEqual(v6, v13)) {
      break;
    }
    if (v10 == ++v11) {
      goto LABEL_16;
    }
  }
}

uint64_t _SCNetworkConfigurationCheckValidity(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v3 = (const void *)MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, a1);
    CFURLRef v4 = (const __CFURL *)MEMORY[0x192FA73A0](0, "preferences.plist", 18, 0, v3);
    CFURLRef v5 = (const __CFURL *)MEMORY[0x192FA73A0](0, "NetworkInterfaces.plist", 24, 0, v3);
    if (CFURLGetFileSystemRepresentation(v4, 1u, v46, 1024))
    {
      if (CFURLGetFileSystemRepresentation(v5, 1u, v47, 1024))
      {
        CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%s", v46);
        CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%s", v47);
        CFArrayRef v8 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v6);
        uint64_t v9 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v7);
        CFIndex v10 = v9;
        uint64_t v11 = 0;
        if (v8 && v9) {
          uint64_t v11 = _SCNetworkConfigurationCheckValidityWithPreferences(v8, v9, a2);
        }
        goto LABEL_16;
      }
      uint64_t v24 = __log_SCNetworkConfiguration();
      uint64_t v25 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v24, (os_log_type_t)v25))
      {
        uint64_t v36 = _os_log_pack_size();
        uint64_t v34 = &v46[-((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v44 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v44 = 138412290;
        *(void *)(v44 + 4) = v5;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v24 = __log_SCNetworkConfiguration();
      uint64_t v25 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v24, (os_log_type_t)v25))
      {
        uint64_t v26 = _os_log_pack_size();
        uint64_t v34 = &v46[-((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v35 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v35 = 138412290;
        *(void *)(v35 + 4) = v4;
LABEL_14:
        __SC_log_send(5, (uint64_t)v24, v25, (char *)v34);
      }
    }
    uint64_t v11 = 0;
    CFStringRef v6 = 0;
    CFArrayRef v8 = 0;
    CFIndex v10 = 0;
    CFStringRef v7 = 0;
LABEL_16:
    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    return v11;
  }
  uint64_t v12 = __log_SCNetworkConfiguration();
  uint64_t v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
  {
    uint64_t v14 = _os_log_pack_size();
    uint64_t v22 = (char *)&v46[-((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 138412290;
    *(void *)(v23 + 4) = @"NULL";
    __SC_log_send(5, (uint64_t)v12, v13, v22);
  }
  return 0;
}

uint64_t __SCPreferencesCreateForMigration(const __CFString *a1, const __CFString *a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"allow-model-conflict";
  values = (void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryRef v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = SCPreferencesCreateWithOptions(0, a1, a2, 0, v4);
  CFRelease(v4);
  return v5;
}

BOOL _SCNetworkMigrationAreConfigurationsIdentical(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = MEMORY[0x1F4188790](a1, a2, a3, a4, a5, a6, a7, a8);
  BOOL v10 = 0;
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  if (!v8) {
    return v10;
  }
  uint64_t v11 = v9;
  if (!v9) {
    return v10;
  }
  uint64_t v12 = (const void *)MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, v8);
  CFURLRef v13 = (const __CFURL *)MEMORY[0x192FA73A0](0, "preferences.plist", 18, 0, v12);
  if (!CFURLResourceIsReachable(v13, 0))
  {
    uint64_t v25 = __log_SCNetworkConfiguration();
    uint64_t v26 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
    {
      uint64_t v27 = _os_log_pack_size();
      uint64_t v35 = (char *)&v174 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v36 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v36 = 138412290;
      *(void *)(v36 + 4) = v13;
      __SC_log_send(5, (uint64_t)v25, v26, v35);
    }
    CFStringRef v185 = 0;
    CFStringRef v186 = 0;
    CFStringRef v184 = 0;
    CFStringRef v189 = 0;
    CFURLRef v16 = 0;
    CFURLRef v37 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    CFTypeRef v23 = 0;
    CFURLRef v14 = 0;
    goto LABEL_24;
  }
  CFURLRef v14 = (const __CFURL *)MEMORY[0x192FA73A0](0, "NetworkInterfaces.plist", 24, 0, v12);
  if (CFURLResourceIsReachable(v14, 0))
  {
    if (CFURLGetFileSystemRepresentation(v13, 1u, v193, 1024))
    {
      if (CFURLGetFileSystemRepresentation(v14, 1u, v195, 1024))
      {
        uint64_t v15 = (const void *)MEMORY[0x192FA73C0](0, @"Library/Preferences/SystemConfiguration/", 0, 1, v11);
        CFURLRef v16 = (const __CFURL *)MEMORY[0x192FA73A0](0, "preferences.plist", 18, 0, v15);
        if (!CFURLResourceIsReachable(v16, 0))
        {
          uint64_t v92 = __log_SCNetworkConfiguration();
          uint64_t v93 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v92, (os_log_type_t)v93))
          {
            uint64_t v94 = _os_log_pack_size();
            SCPreferencesRef v191 = (SCPreferencesRef)&v174;
            CFMutableDictionaryRef v102 = (char *)&v174
                 - ((MEMORY[0x1F4188790](v94, v95, v96, v97, v98, v99, v100, v101) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v92, v93, v102);
          }
          CFStringRef v185 = 0;
          CFStringRef v186 = 0;
          CFStringRef v184 = 0;
          CFStringRef v189 = 0;
          CFURLRef v37 = 0;
          goto LABEL_73;
        }
        CFURLRef v17 = (const __CFURL *)MEMORY[0x192FA73A0](0, "NetworkInterfaces.plist", 24, 0, v15);
        CFURLRef v181 = v17;
        if (CFURLResourceIsReachable(v17, 0))
        {
          if (CFURLGetFileSystemRepresentation(v16, 1u, v192, 1024))
          {
            if (CFURLGetFileSystemRepresentation(v17, 1u, v194, 1024))
            {
              CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"%s", v193);
              CFStringRef v189 = CFStringCreateWithFormat(0, 0, @"%s", v195);
              CFStringRef v19 = CFStringCreateWithFormat(0, 0, @"%s", v192);
              CFStringRef v20 = CFStringCreateWithFormat(0, 0, @"%s", v194);
              CFStringRef v185 = v18;
              CFTypeRef v190 = (CFTypeRef)__SCPreferencesCreateForMigration(@"System Migration", v18);
              CFStringRef v186 = v19;
              uint64_t v21 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v19);
              uint64_t v22 = __SCPreferencesCreateForMigration(@"System Migration", v189);
              CFTypeRef v23 = v190;
              CFStringRef v184 = v20;
              uint64_t v24 = (const __SCPreferences *)__SCPreferencesCreateForMigration(@"System Migration", v20);
LABEL_80:
              CFURLRef v37 = v181;
              goto LABEL_25;
            }
            uint64_t v123 = __log_SCNetworkConfiguration();
            uint64_t v124 = _SC_syslog_os_log_mapping(5);
            if (__SC_log_enabled(5, v123, (os_log_type_t)v124))
            {
              uint64_t v125 = _os_log_pack_size();
              uint64_t v179 = v15;
              SCPreferencesRef v191 = (SCPreferencesRef)&v174;
              uint64_t v133 = MEMORY[0x1F4188790](v125, v126, v127, v128, v129, v130, v131, v132);
              CFURLRef v182 = v16;
              uint64_t v134 = (char *)&v174 - ((v133 + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v15 = v179;
              uint64_t v135 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v135 = 138412290;
              CFURLRef v136 = v181;
              CFURLRef v16 = v182;
              *(void *)(v135 + 4) = v181;
              uint64_t v137 = (uint64_t)v123;
              CFURLRef v37 = v136;
              __SC_log_send(5, v137, v124, v134);
              CFStringRef v185 = 0;
              CFStringRef v186 = 0;
              CFStringRef v184 = 0;
              CFStringRef v189 = 0;
LABEL_73:
              uint64_t v24 = 0;
              uint64_t v21 = 0;
              uint64_t v22 = 0;
              CFTypeRef v23 = 0;
              goto LABEL_25;
            }
LABEL_79:
            CFStringRef v185 = 0;
            CFStringRef v186 = 0;
            CFStringRef v184 = 0;
            CFStringRef v189 = 0;
            uint64_t v24 = 0;
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            CFTypeRef v23 = 0;
            goto LABEL_80;
          }
          uint64_t v103 = __log_SCNetworkConfiguration();
          uint64_t v104 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v103, (os_log_type_t)v104)) {
            goto LABEL_79;
          }
          uint64_t v114 = _os_log_pack_size();
          uint64_t v179 = v15;
          SCPreferencesRef v191 = (SCPreferencesRef)&v174;
          uint64_t v113 = (char *)&v174
               - ((MEMORY[0x1F4188790](v114, v115, v116, v117, v118, v119, v120, v121) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v15 = v179;
          uint64_t v122 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v122 = 138412290;
          *(void *)(v122 + 4) = v16;
        }
        else
        {
          uint64_t v103 = __log_SCNetworkConfiguration();
          uint64_t v104 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v103, (os_log_type_t)v104)) {
            goto LABEL_79;
          }
          uint64_t v105 = _os_log_pack_size();
          SCPreferencesRef v191 = (SCPreferencesRef)&v174;
          uint64_t v113 = (char *)&v174
               - ((MEMORY[0x1F4188790](v105, v106, v107, v108, v109, v110, v111, v112) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
        }
        __SC_log_send(5, (uint64_t)v103, v104, v113);
        goto LABEL_79;
      }
      uint64_t v38 = __log_SCNetworkConfiguration();
      uint64_t v39 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v38, (os_log_type_t)v39)) {
        goto LABEL_23;
      }
      uint64_t v59 = _os_log_pack_size();
      CFURLRef v41 = v14;
      uint64_t v49 = (char *)&v174 - ((MEMORY[0x1F4188790](v59, v60, v61, v62, v63, v64, v65, v66) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      goto LABEL_21;
    }
    uint64_t v38 = __log_SCNetworkConfiguration();
    uint64_t v39 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v38, (os_log_type_t)v39))
    {
      uint64_t v50 = _os_log_pack_size();
      uint64_t v49 = (char *)&v174 - ((MEMORY[0x1F4188790](v50, v51, v52, v53, v54, v55, v56, v57) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v58 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v58 = 138412290;
      *(void *)(v58 + 4) = v13;
LABEL_22:
      __SC_log_send(5, (uint64_t)v38, v39, v49);
    }
  }
  else
  {
    uint64_t v38 = __log_SCNetworkConfiguration();
    uint64_t v39 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v38, (os_log_type_t)v39))
    {
      uint64_t v40 = _os_log_pack_size();
      CFURLRef v41 = v14;
      uint64_t v49 = (char *)&v174 - ((MEMORY[0x1F4188790](v40, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
LABEL_21:
      CFURLRef v14 = v41;
      uint64_t v67 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v67 = 138412290;
      *(void *)(v67 + 4) = v41;
      goto LABEL_22;
    }
  }
LABEL_23:
  CFStringRef v185 = 0;
  CFStringRef v186 = 0;
  CFStringRef v184 = 0;
  CFStringRef v189 = 0;
  CFURLRef v16 = 0;
  CFURLRef v37 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  CFTypeRef v23 = 0;
LABEL_24:
  uint64_t v15 = 0;
LABEL_25:
  uint64_t v187 = v24;
  uint64_t v188 = (const __SCPreferences *)v22;
  CFTypeRef v190 = v23;
  SCPreferencesRef v191 = v21;
  if (v23 && v21 && v22 && v24)
  {
    CFURLRef v183 = v13;
    CFDictionaryRef Value = (const __CFDictionary *)SCPreferencesGetValue((SCPreferencesRef)v23, @"NetworkServices");
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        unint64_t Count = CFDictionaryGetCount(Value);
        CFArrayRef v71 = (const __CFArray *)SCPreferencesGetValue(v191, @"NetworkServices");
        CFTypeID v72 = CFDictionaryGetTypeID();
        if (v71)
        {
          if (CFGetTypeID(v71) == v72 && Count == CFDictionaryGetCount(v71))
          {
            CFArrayRef v180 = v71;
            CFURLRef v181 = v37;
            uint64_t v179 = v15;
            CFURLRef v182 = v16;
            if (Count < 0x41) {
              uint64_t v73 = (const void **)v196;
            }
            else {
              uint64_t v73 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
            }
            uint64_t v177 = v12;
            memset(v197, 0, sizeof(v197));
            memset(v196, 0, sizeof(v196));
            uint64_t v138 = v73;
            CFDictionaryGetKeysAndValues(Value, 0, v73);
            CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (Count)
            {
              uint64_t v140 = Mutable;
              uint64_t v141 = 0;
              uint64_t v142 = v138;
              do
              {
                uint64_t v143 = v142[v141];
                CFTypeID v144 = CFDictionaryGetTypeID();
                if (v143 && CFGetTypeID(v143) == v144) {
                  CFArrayAppendValue(v140, v143);
                }
                ++v141;
                uint64_t v142 = v138;
              }
              while (Count != v141);
              CFArrayRef v178 = (CFArrayRef)CFArrayGetCount(v140);
              if (Count > 0x40)
              {
                uint64_t v145 = (const void **)CFAllocatorAllocate(0, Count, 0);
                goto LABEL_94;
              }
            }
            else
            {
              uint64_t v140 = Mutable;
              CFArrayRef v178 = (CFArrayRef)CFArrayGetCount(Mutable);
            }
            uint64_t v145 = (const void **)v197;
LABEL_94:
            BOOL v146 = v145;
            CFDictionaryGetKeysAndValues(v180, 0, v145);
            CFArrayRef v180 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (Count)
            {
              long long v147 = v146;
              do
              {
                uint64_t v148 = *v147;
                CFTypeID v149 = CFDictionaryGetTypeID();
                if (v148 && CFGetTypeID(v148) == v149) {
                  CFArrayAppendValue(v180, v148);
                }
                ++v147;
                --Count;
              }
              while (Count);
            }
            CFIndex v150 = CFArrayGetCount(v180);
            BOOL v151 = 1;
            if (v178 == (CFArrayRef)v150)
            {
              CFURLRef v13 = v183;
              if (v150 >= 1)
              {
                CFIndex v152 = 0;
                while (1)
                {
                  CFIndex v153 = v152;
                  SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(v180, v152);
                  CFIndex v155 = CFArrayGetCount(v140);
                  BOOL v151 = v155 < 1;
                  if (v155 < 1) {
                    break;
                  }
                  CFIndex v156 = v155;
                  CFIndex v157 = 0;
                  while (1)
                  {
                    uint64_t v158 = CFArrayGetValueAtIndex(v140, v157);
                    if (CFEqual(ValueAtIndex, v158)) {
                      break;
                    }
                    if (v156 == ++v157)
                    {
                      BOOL v151 = 1;
                      goto LABEL_110;
                    }
                  }
                  CFIndex v152 = v153 + 1;
                  CFURLRef v13 = v183;
                  if ((CFArrayRef)(v153 + 1) == v178) {
                    goto LABEL_111;
                  }
                }
                BOOL v151 = 1;
              }
            }
            else
            {
LABEL_110:
              CFURLRef v13 = v183;
            }
LABEL_111:
            if (v138 != (const void **)v196) {
              CFAllocatorDeallocate(0, v138);
            }
            CFTypeID v87 = v188;
            if (v146 != (const void **)v197) {
              CFAllocatorDeallocate(0, v146);
            }
            if (v151)
            {
              BOOL v10 = 0;
              uint64_t v12 = v177;
              CFURLRef v37 = v181;
              CFURLRef v16 = v182;
              uint64_t v15 = v179;
              goto LABEL_41;
            }
            CFPropertyListRef v159 = SCPreferencesGetValue(v87, @"Interfaces");
            CFTypeID v160 = CFArrayGetTypeID();
            if (!v159 || CFGetTypeID(v159) != v160)
            {
              int v168 = 0;
              uint64_t v12 = v177;
              CFURLRef v37 = v181;
              CFURLRef v16 = v182;
              uint64_t v15 = v179;
              goto LABEL_138;
            }
            CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, (CFArrayRef)v159);
            CFIndex v162 = CFArrayGetCount(MutableCopy);
            CFPropertyListRef v163 = SCPreferencesGetValue(v187, @"Interfaces");
            CFTypeID v164 = CFArrayGetTypeID();
            uint64_t v12 = v177;
            if (v163)
            {
              CFTypeID v165 = v164;
              CFTypeID v166 = CFGetTypeID(v163);
              CFURLRef v16 = v182;
              if (v166 == v165)
              {
                CFArrayRef v178 = (CFArrayRef)v163;
                CFIndex v167 = CFArrayGetCount((CFArrayRef)v163);
                int v168 = 0;
                uint64_t v15 = v179;
                if (v162 == v167)
                {
                  CFIndex v175 = v162;
                  CFURLRef v37 = v181;
                  if (v167 >= 1)
                  {
                    CFIndex v169 = 0;
                    while (1)
                    {
                      CFIndex v176 = v169;
                      CFArrayRef v180 = (CFArrayRef)CFArrayGetValueAtIndex(v178, v169);
                      CFIndex v170 = CFArrayGetCount(MutableCopy);
                      if (v170 < 1) {
                        break;
                      }
                      CFIndex v171 = v170;
                      CFIndex v172 = 0;
                      while (1)
                      {
                        long long v173 = CFArrayGetValueAtIndex((CFArrayRef)v159, v172);
                        if (CFEqual(v180, v173)) {
                          break;
                        }
                        if (v171 == ++v172) {
                          goto LABEL_140;
                        }
                      }
                      CFIndex v169 = v176 + 1;
                      int v168 = 1;
                      CFURLRef v13 = v183;
                      if (v176 + 1 == v175) {
                        goto LABEL_136;
                      }
                    }
LABEL_140:
                    int v168 = 0;
                    CFURLRef v13 = v183;
                    if (!MutableCopy) {
                      goto LABEL_138;
                    }
                    goto LABEL_137;
                  }
                  goto LABEL_136;
                }
LABEL_135:
                CFURLRef v37 = v181;
LABEL_136:
                if (MutableCopy) {
LABEL_137:
                }
                  CFRelease(MutableCopy);
LABEL_138:
                CFTypeID v87 = v188;
                BOOL v10 = v168 != 0;
                goto LABEL_41;
              }
              int v168 = 0;
            }
            else
            {
              int v168 = 0;
              CFURLRef v16 = v182;
            }
            uint64_t v15 = v179;
            goto LABEL_135;
          }
        }
      }
    }
    BOOL v10 = 0;
    CFURLRef v13 = v183;
  }
  else
  {
    CFTypeID v74 = __log_SCNetworkConfiguration();
    uint64_t v75 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v74, (os_log_type_t)v75))
    {
      uint64_t v76 = _os_log_pack_size();
      CFURLRef v182 = v16;
      CFURLRef v183 = (const __CFURL *)&v174;
      uint64_t v84 = v12;
      uint64_t v85 = (char *)&v174 - ((MEMORY[0x1F4188790](v76, v77, v78, v79, v80, v81, v82, v83) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      CFTypeID v86 = v85;
      uint64_t v12 = v84;
      __SC_log_send(5, (uint64_t)v74, v75, v86);
      CFURLRef v16 = v182;
    }
    BOOL v10 = 0;
  }
  CFTypeID v87 = v188;
LABEL_41:
  if (v12) {
    CFRelease(v12);
  }
  SCPreferencesRef v88 = v191;
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFStringRef v89 = v189;
  if (v16) {
    CFRelease(v16);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v185) {
    CFRelease(v185);
  }
  CFStringRef v90 = v186;
  if (v89) {
    CFRelease(v89);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (v184) {
    CFRelease(v184);
  }
  if (v190) {
    CFRelease(v190);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (v187) {
    CFRelease(v187);
  }
  return v10;
}

__CFArray *_SCNetworkConfigurationCopyMigrationRemovePaths(const __CFArray *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount(a1) >= 1)
  {
    CFIndex v6 = 0;
    *(void *)&long long v5 = 138412290;
    long long v23 = v5;
    uint64_t v24 = a2;
    do
    {
      SCNetworkSetRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFURLGetFileSystemRepresentation((CFURLRef)ValueAtIndex, 1u, v25, 1024))
      {
        size_t v8 = strnlen((const char *)v25, 0x400uLL);
        CFURLRef v9 = (const __CFURL *)MEMORY[0x192FA73A0](0, v25, v8, 0, a2);
        if (!CFURLResourceIsReachable(v9, 0)) {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
        CFRelease(v9);
      }
      else
      {
        BOOL v10 = __log_SCNetworkConfiguration();
        uint64_t v11 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          CFStringRef v20 = (char *)&v23
              - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v21 = v23;
          *(void *)(v21 + 4) = ValueAtIndex;
          __SC_log_send(5, (uint64_t)v10, v11, v20);
          a2 = v24;
        }
      }
      ++v6;
    }
    while (v6 < CFArrayGetCount(a1));
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void logMapping_one(const __SCNetworkService *a1, const __SCNetworkService *a2, uint64_t a3)
{
  v51[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 8))
  {
    CFIndex v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(*(_DWORD *)a3);
    if (__SC_log_enabled(*(_DWORD *)a3, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)v51 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *(void *)(a3 + 8);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v18;
      __SC_log_send(*(_DWORD *)a3, (uint64_t)v6, v7, v16);
    }
    *(void *)(a3 + 8) = 0;
  }
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a1)
  {
    SCNetworkSetGetTypeID();
    SCNetworkInterfaceGetTypeID();
    goto LABEL_14;
  }
  if (CFGetTypeID(a1) == TypeID)
  {
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
  }
  else
  {
    CFTypeID v21 = SCNetworkSetGetTypeID();
    if (CFGetTypeID(a1) == v21)
    {
      CFStringRef ServiceID = SCNetworkSetGetSetID(a1);
    }
    else
    {
      CFTypeID v22 = SCNetworkInterfaceGetTypeID();
      if (CFGetTypeID(a1) != v22) {
        goto LABEL_14;
      }
      CFStringRef ServiceID = SCNetworkInterfaceGetBSDName(a1);
    }
  }
  a1 = (const __SCNetworkService *)ServiceID;
LABEL_14:
  CFTypeID v23 = SCNetworkServiceGetTypeID();
  if (!a2)
  {
    SCNetworkSetGetTypeID();
    SCNetworkInterfaceGetTypeID();
    CFBooleanGetTypeID();
    CFArrayGetTypeID();
    CFArrayRef Mutable = 0;
LABEL_21:
    char v27 = 1;
    goto LABEL_22;
  }
  if (CFGetTypeID(a2) == v23)
  {
    CFStringRef SetID = SCNetworkServiceGetServiceID(a2);
LABEL_20:
    CFArrayRef Mutable = (__CFString *)SetID;
    goto LABEL_21;
  }
  CFTypeID v26 = SCNetworkSetGetTypeID();
  if (CFGetTypeID(a2) == v26)
  {
    CFStringRef SetID = SCNetworkSetGetSetID(a2);
    goto LABEL_20;
  }
  CFTypeID v40 = SCNetworkInterfaceGetTypeID();
  if (CFGetTypeID(a2) == v40)
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a2);
    UserDefinedCFStringRef Name = __SCNetworkInterfaceGetUserDefinedName(a2);
    uint64_t v43 = @"?";
    if (UserDefinedName) {
      uint64_t v43 = (__CFString *)UserDefinedName;
    }
    CFArrayRef Mutable = (__CFString *)CFStringCreateWithFormat(0, 0, @"%@ (%@)", BSDName, v43);
LABEL_31:
    char v27 = 0;
    goto LABEL_22;
  }
  CFTypeID v44 = CFBooleanGetTypeID();
  if (CFGetTypeID(a2) == v44)
  {
    CFArrayRef Mutable = @"None";
    goto LABEL_21;
  }
  CFTypeID v45 = CFArrayGetTypeID();
  if (CFGetTypeID(a2) == v45)
  {
    CFIndex Count = CFArrayGetCount(a2);
    CFArrayRef Mutable = CFStringCreateMutable(0, 0);
    CFStringAppendFormat(Mutable, 0, @"( ");
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        SCNetworkSetRef ValueAtIndex = (const __SCNetworkSet *)CFArrayGetValueAtIndex(a2, i);
        CFTypeID v49 = SCNetworkSetGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v49) {
          SCNetworkSetRef ValueAtIndex = (const __SCNetworkSet *)SCNetworkSetGetSetID(ValueAtIndex);
        }
        uint64_t v50 = ", ";
        if (!i) {
          uint64_t v50 = "";
        }
        CFStringAppendFormat(Mutable, 0, @"%s%@", v50, ValueAtIndex);
      }
    }
    CFStringAppendFormat(Mutable, 0, @""));
    goto LABEL_31;
  }
  char v27 = 1;
  CFArrayRef Mutable = (__CFString *)a2;
LABEL_22:
  uint64_t v28 = __log_SCNetworkConfiguration();
  uint64_t v29 = _SC_syslog_os_log_mapping(*(_DWORD *)a3);
  if (__SC_log_enabled(*(_DWORD *)a3, v28, (os_log_type_t)v29))
  {
    uint64_t v30 = _os_log_pack_size();
    uint64_t v38 = (char *)v51 - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v39 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v39 = 138412546;
    *(void *)(v39 + 4) = a1;
    *(_WORD *)(v39 + 12) = 2112;
    *(void *)(v39 + 14) = Mutable;
    __SC_log_send(*(_DWORD *)a3, (uint64_t)v28, v29, v38);
  }
  if ((v27 & 1) == 0) {
    CFRelease(Mutable);
  }
}

uint64_t __SCNetworkConfigurationInterfaceNameIsEquiv(const __CFString *a1, const __CFString *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFTypeID v5 = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v5) {
    return 0;
  }
  if (!CFEqual(a1, a2)
    && (!CFEqual(a1, @"AirPort") && !CFEqual(a1, @"Wi-Fi")
     || !CFEqual(a2, @"AirPort") && !CFEqual(a2, @"Wi-Fi"))
    && (!CFEqual(a1, @"Ethernet") && !CFEqual(a1, @"Ethernet 1")
     || !CFEqual(a2, @"Ethernet") && !CFEqual(a2, @"Ethernet 1")))
  {
    CFStringRef v6 = interfaceNameCreateWithoutPortSuffix(a1);
    if (v6)
    {
      CFStringRef v7 = v6;
      CFStringRef v8 = a2;
    }
    else
    {
      CFStringRef v6 = interfaceNameCreateWithoutPortSuffix(a2);
      if (!v6) {
        goto LABEL_21;
      }
      CFStringRef v7 = v6;
      CFStringRef v8 = a1;
    }
    int v10 = CFEqual(v6, v8);
    CFRelease(v7);
    if (v10) {
      return 1;
    }
LABEL_21:
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = off_1E55BCAD0[v11];
      if ((CFEqual(a1, v12) || __SCNetworkInterfaceMatchesName(a1, v12))
        && (CFEqual(a2, v12) || __SCNetworkInterfaceMatchesName(a2, v12)))
      {
        break;
      }
      uint64_t result = 0;
      if (++v11 == 6) {
        return result;
      }
    }
  }
  return 1;
}

CFStringRef interfaceNameCreateWithoutPortSuffix(const __CFString *a1)
{
  CFRange v2 = CFStringFind(a1, @", Port ", 4uLL);
  if (v2.location == -1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v4 = v2.location + v2.length;
  if (v2.location + v2.length < Length)
  {
    CFIndex v5 = Length;
    while (CFStringGetCharacterAtIndex(a1, v4) - 48 < 0xA)
    {
      if (++v4 >= v5) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  v6.CFIndex location = 0;
  v6.CFIndex length = v2.location;

  return CFStringCreateWithSubstring(0, a1, v6);
}

void create_bsd_name_service_protocol_mapping(const __SCNetworkService *a1, uint64_t a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a2 + 56);
  int v3 = *(__CFDictionary **)(a2 + 64);
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(a1);
  if (Interface)
  {
    CFRange v6 = Interface;
    v27.CFIndex length = CFArrayGetCount(v4);
    v27.CFIndex location = 0;
    if (CFArrayContainsValue(v4, v27, v6))
    {
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v6);
      CFTypeID TypeID = CFStringGetTypeID();
      if (BSDName)
      {
        if (CFGetTypeID(BSDName) == TypeID)
        {
          CFArrayRef v9 = SCNetworkServiceCopyProtocols(a1);
          if (v9)
          {
            CFArrayRef v10 = v9;
            CFStringRef v24 = BSDName;
            uint64_t v25 = v3;
            CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            CFIndex Count = CFArrayGetCount(v10);
            if (Count >= 1)
            {
              CFIndex v13 = Count;
              CFIndex v14 = 0;
              uint64_t v15 = (const void *)*MEMORY[0x1E4F1CFD0];
              uint64_t v16 = (const void *)*MEMORY[0x1E4F1CFC8];
              do
              {
                SCNetworkSetRef ValueAtIndex = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v10, v14);
                CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(ValueAtIndex);
                CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(ValueAtIndex);
                int Enabled = SCNetworkProtocolGetEnabled(ValueAtIndex);
                if (Configuration && ProtocolType)
                {
                  int v21 = Enabled;
                  CFTypeID v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFDictionaryAddValue(v22, @"Protocol Type", ProtocolType);
                  CFDictionaryAddValue(v22, @"Protocol Configuration", Configuration);
                  if (v21) {
                    CFTypeID v23 = v15;
                  }
                  else {
                    CFTypeID v23 = v16;
                  }
                  CFDictionaryAddValue(v22, @"Protocol Enabled", v23);
                  CFArrayAppendValue(Mutable, v22);
                  CFRelease(v22);
                }
                ++v14;
              }
              while (v13 != v14);
            }
            CFDictionaryAddValue(v25, v24, Mutable);
            CFRelease(v10);
            CFRelease(Mutable);
          }
        }
      }
    }
  }
}

SCNetworkInterfaceRef remove_service(const __SCNetworkService *a1, uint64_t a2)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v3 = *(const __CFArray **)(a2 + 40);
  SCNetworkInterfaceRef result = SCNetworkServiceGetInterface(a1);
  if (result)
  {
    CFIndex v5 = result;
    v25.CFIndex length = CFArrayGetCount(v3);
    v25.CFIndex location = 0;
    SCNetworkInterfaceRef result = (SCNetworkInterfaceRef)CFArrayContainsValue(v3, v25, v5);
    if (result)
    {
      CFStringRef ServiceID = SCNetworkServiceGetServiceID(a1);
      CFStringRef Name = SCNetworkServiceGetName(a1);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v5);
      CFArrayRef v9 = __log_SCNetworkConfiguration();
      uint64_t v10 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v9, (os_log_type_t)v10))
      {
        if (Name) {
          uint64_t v11 = (__CFString *)Name;
        }
        else {
          uint64_t v11 = &stru_1EDD23408;
        }
        uint64_t v12 = _os_log_pack_size();
        CFStringRef v20 = (char *)v24 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v21 = _os_log_pack_fill();
        CFTypeID v22 = ", ";
        *(_DWORD *)uint64_t v21 = 138413058;
        *(void *)(v21 + 4) = ServiceID;
        *(_WORD *)(v21 + 12) = 2112;
        if (!BSDName) {
          CFTypeID v22 = "";
        }
        *(void *)(v21 + 14) = v11;
        if (BSDName) {
          CFTypeID v23 = (__CFString *)BSDName;
        }
        else {
          CFTypeID v23 = &stru_1EDD23408;
        }
        *(_WORD *)(v21 + 22) = 2080;
        *(void *)(v21 + 24) = v22;
        *(_WORD *)(v21 + 32) = 2112;
        *(void *)(v21 + 34) = v23;
        __SC_log_send(6, (uint64_t)v9, v10, v20);
      }
      return (SCNetworkInterfaceRef)SCNetworkServiceRemove(a1);
    }
  }
  return result;
}

void add_service(const __SCNetworkInterface *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *(const __CFDictionary **)(a2 + 64);
  CFArrayRef v4 = *(const __SCPreferences **)(a2 + 72);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName && CFGetTypeID(BSDName) == TypeID) {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, BSDName);
  }
  else {
    CFArrayRef Value = 0;
  }
  CFStringRef v8 = SCNetworkServiceCreate(v4, a1);
  if (v8)
  {
    CFArrayRef v9 = v8;
    if (SCNetworkServiceEstablishDefaultConfiguration(v8))
    {
      CFStringRef v73 = BSDName;
      SCPreferencesRef v74 = v4;
      if (Value)
      {
        CFIndex Count = CFArrayGetCount(Value);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          for (CFIndex i = 0; i != v11; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, i);
            CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Configuration");
            CFStringRef v15 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Type");
            CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue(ValueAtIndex, @"Protocol Enabled");
            if (v16) {
              Boolean v17 = CFBooleanGetValue(v16);
            }
            else {
              Boolean v17 = 0;
            }
            __SCNetworkServiceAddProtocolToService(v9, v15, v14, v17);
          }
        }
      }
      uint64_t v18 = SCNetworkSetCopyCurrent(v74);
      if (v18)
      {
        uint64_t v19 = v18;
        if (SCNetworkSetAddService(v18, v9))
        {
          CFStringRef ServiceID = SCNetworkServiceGetServiceID(v9);
          CFStringRef Name = SCNetworkServiceGetName(v9);
          CFTypeID v22 = __log_SCNetworkConfiguration();
          uint64_t v23 = _SC_syslog_os_log_mapping(6);
          if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
          {
            if (Name) {
              CFStringRef v24 = (__CFString *)Name;
            }
            else {
              CFStringRef v24 = &stru_1EDD23408;
            }
            uint64_t v25 = _os_log_pack_size();
            uint64_t v33 = (char *)&v72
                - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v34 = _os_log_pack_fill();
            uint64_t v35 = ", ";
            *(_DWORD *)uint64_t v34 = 138413058;
            *(void *)(v34 + 4) = ServiceID;
            *(_WORD *)(v34 + 12) = 2112;
            uint64_t v36 = (__CFString *)v73;
            if (!v73) {
              uint64_t v35 = "";
            }
            *(void *)(v34 + 14) = v24;
            if (v36) {
              uint64_t v37 = v36;
            }
            else {
              uint64_t v37 = &stru_1EDD23408;
            }
            *(_WORD *)(v34 + 22) = 2080;
            *(void *)(v34 + 24) = v35;
            *(_WORD *)(v34 + 32) = 2112;
            *(void *)(v34 + 34) = v37;
            __SC_log_send(6, (uint64_t)v22, v23, v33);
          }
        }
        else
        {
          uint64_t v61 = __log_SCNetworkConfiguration();
          uint64_t v62 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v61, (os_log_type_t)v62))
          {
            uint64_t v63 = _os_log_pack_size();
            CFArrayRef v71 = (char *)&v72
                - ((MEMORY[0x1F4188790](v63, v64, v65, v66, v67, v68, v69, v70) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send(5, (uint64_t)v61, v62, v71);
          }
          SCNetworkServiceRemove(v9);
        }
        CFRelease(v9);
        uint64_t v60 = v19;
        goto LABEL_37;
      }
      CFTypeID v49 = __log_SCNetworkConfiguration();
      uint64_t v50 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v49, (os_log_type_t)v50)) {
        goto LABEL_31;
      }
    }
    else
    {
      CFTypeID v49 = __log_SCNetworkConfiguration();
      uint64_t v50 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v49, (os_log_type_t)v50))
      {
LABEL_31:
        uint64_t v51 = _os_log_pack_size();
        uint64_t v59 = (char *)&v72 - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v49, v50, v59);
      }
    }
    SCNetworkServiceRemove(v9);
    uint64_t v60 = v9;
LABEL_37:
    CFRelease(v60);
    return;
  }
  uint64_t v38 = __log_SCNetworkConfiguration();
  uint64_t v39 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v38, (os_log_type_t)v39))
  {
    uint64_t v40 = _os_log_pack_size();
    uint64_t v48 = (char *)&v72 - ((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v38, v39, v48);
  }
}

BOOL __SCNetworkConfigurationMigrateConfigurationFilesPresent(const __CFURL *a1, CFArrayRef *a2, int a3)
{
  v43[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v42 = 0;
    v43[0] = 0;
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    _SCNetworkConfigurationCopyMigrationPathsWithBaseURL(a1, &v42, v43);
    CFStringRef v7 = v42;
    CFArrayAppendValue(Mutable, v42);
    CFStringRef v8 = v43[0];
    CFArrayAppendValue(Mutable, v43[0]);
    CFRelease(v7);
    CFRelease(v8);
    *a2 = Mutable;
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count < 1) {
      return 1;
    }
    CFIndex v10 = Count;
    CFIndex v11 = 0;
    while (1)
    {
      CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(*a2, v11);
      if (!_SCNetworkConfigurationMigrateIsFilePresent(ValueAtIndex)) {
        break;
      }
      if (v10 == ++v11) {
        return 1;
      }
    }
    if (!a3) {
      return 0;
    }
    uint64_t v29 = __log_SCNetworkConfiguration();
    uint64_t v30 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v29, (os_log_type_t)v30);
    if (!result) {
      return result;
    }
    uint64_t v31 = _os_log_pack_size();
    uint64_t v39 = (char *)&v41 - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v40 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v40 = 138412290;
    *(void *)(v40 + 4) = ValueAtIndex;
    int v25 = 6;
    uint64_t v26 = (uint64_t)v29;
    uint64_t v27 = v30;
    uint64_t v28 = v39;
  }
  else
  {
    CFDictionaryRef v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v14, (os_log_type_t)v15);
    if (!result) {
      return result;
    }
    uint64_t v16 = _os_log_pack_size();
    CFStringRef v24 = (char *)&v41 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    int v25 = 5;
    uint64_t v26 = (uint64_t)v14;
    uint64_t v27 = v15;
    uint64_t v28 = v24;
  }
  __SC_log_send(v25, v26, v27, v28);
  return 0;
}

void __SCNetworkPopulateDefaultPrefs(const __SCPreferences *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFRange v2 = __log_SCNetworkConfiguration();
  uint64_t v3 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
  {
    uint64_t v4 = _os_log_pack_size();
    uint64_t v12 = (char *)&v17 - ((MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 138412290;
    *(void *)(v13 + 4) = a1;
    __SC_log_send(6, (uint64_t)v2, v3, v12);
  }
  Default = (const __SCPreferences **)SCNetworkSetCopyCurrent(a1);
  if (!Default) {
    Default = (const __SCPreferences **)_SCNetworkSetCreateDefault(a1);
  }
  SCNetworkSetEstablishDefaultConfiguration(Default);
  CFRelease(Default);
  if (!SCPreferencesGetValue(a1, @"Model"))
  {
    uint64_t v15 = (const void *)_SC_hw_model(0);
    SCPreferencesSetValue(a1, @"Model", v15);
  }
  if (!SCPreferencesGetValue(a1, @"__VERSION__"))
  {
    HIDWORD(v17) = 20191120;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, (char *)&v17 + 4);
    SCPreferencesSetValue(a1, @"__VERSION__", v16);
    CFRelease(v16);
  }
}

void __SCNetworkPopulateDefaultNIPrefs(const __SCPreferences *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    uint64_t v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      CFDictionaryRef v14 = (char *)&v45 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = a1;
      __SC_log_send(6, (uint64_t)v4, v5, v14);
    }
    CFNumberRef v16 = __SCNetworkInterfaceCopyAll_IONetworkInterface(1);
    if (v16)
    {
      CFArrayRef v17 = v16;
      SCPreferencesRef v45 = a1;
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      if (CFArrayGetCount(v17) >= 1)
      {
        CFIndex v19 = 0;
        CFArrayRef v46 = v17;
        do
        {
          CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v19);
          uint64_t v21 = __SCNetworkInterfaceCopyStorageEntity((uint64_t)ValueAtIndex);
          if (v21)
          {
            uint64_t v22 = v21;
            IOCFStringRef InterfaceType = (const __CFNumber *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
            uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)ValueAtIndex);
            if (IOInterfaceType)
            {
              CFNumberRef v25 = (const __CFNumber *)IOInterfaceUnit;
              if (IOInterfaceUnit)
              {
                if (CFArrayGetCount(Mutable) < 1)
                {
                  CFIndex v26 = 0;
                }
                else
                {
                  CFIndex v26 = 0;
                  do
                  {
                    CFDictionaryRef v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v26);
                    CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue(v27, @"IOInterfaceType");
                    CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"IOInterfaceUnit");
                    CFComparisonResult v30 = CFNumberCompare(IOInterfaceType, v28, 0);
                    if (v30 == kCFCompareEqualTo) {
                      CFComparisonResult v30 = CFNumberCompare(v25, v29, 0);
                    }
                    if (v30 == kCFCompareLessThan) {
                      break;
                    }
                    ++v26;
                  }
                  while (v26 < CFArrayGetCount(Mutable));
                }
                CFArrayInsertValueAtIndex(Mutable, v26, v22);
                CFArrayRef v17 = v46;
              }
            }
            CFRelease(v22);
          }
          ++v19;
        }
        while (v19 < CFArrayGetCount(v17));
      }
      uint64_t v31 = v45;
      SCPreferencesSetValue(v45, @"Interfaces", Mutable);
      CFRelease(Mutable);
      if (!SCPreferencesGetValue(v31, @"Model"))
      {
        uint64_t v32 = (const void *)_SC_hw_model(0);
        SCPreferencesSetValue(v31, @"Model", v32);
      }
      if (!SCPreferencesGetValue(v31, @"__VERSION__"))
      {
        int valuePtr = 20191120;
        CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        SCPreferencesSetValue(v31, @"__VERSION__", v33);
        CFRelease(v33);
      }
      CFRelease(v17);
    }
    else
    {
      uint64_t v34 = __log_SCNetworkConfiguration();
      uint64_t v35 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v34, (os_log_type_t)v35))
      {
        uint64_t v36 = _os_log_pack_size();
        uint64_t v44 = (char *)&v45 - ((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v34, v35, v44);
      }
    }
  }
}

BOOL hasSameModel(const __SCPreferences *a1, const __SCPreferences *a2)
{
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Model");
  CFPropertyListRef v4 = SCPreferencesGetValue(a2, @"Model");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID && (CFTypeID v6 = CFStringGetTypeID(), v4) && CFGetTypeID(v4) == v6) {
    return CFEqual(Value, v4) != 0;
  }
  else {
    return 0;
  }
}

uint64_t hasInterfaceConflict(const __SCPreferences *a1, const __SCPreferences *a2)
{
  cf2[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (v3)
  {
    CFPropertyListRef v4 = v3;
    MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v3);
    CFRelease(v4);
  }
  else
  {
    MappingUsingCFStringRef BSDName = 0;
  }
  CFTypeID v6 = __SCNetworkInterfaceCopyStoredWithPreferences(a2);
  if (!v6)
  {
    uint64_t v13 = 0;
    if (!MappingUsingBSDName) {
      return v13;
    }
    goto LABEL_17;
  }
  CFArrayRef v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
LABEL_12:
    uint64_t v13 = 0;
  }
  else
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0;
    while (1)
    {
      cf2[0] = 0;
      CFURLRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, v10);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
      if (BSDName)
      {
        if (!MappingUsingBSDName
          || !CFDictionaryGetValueIfPresent(MappingUsingBSDName, BSDName, cf2)
          || !CFEqual(ValueAtIndex, cf2[0]))
        {
          break;
        }
      }
      if (v9 == ++v10) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = 1;
  }
  CFRelease(v7);
  if (MappingUsingBSDName) {
LABEL_17:
  }
    CFRelease(MappingUsingBSDName);
  return v13;
}

void _SCNetworkConfigurationCreateBuiltinInterfaceServices(const __SCPreferences *a1, const __SCPreferences *cf)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t context = 0;
  CFArrayRef v57 = 0;
  uint64_t v3 = __SCNetworkInterfaceCopyStoredWithPreferences(cf);
  if (!v3)
  {
    CFNumberRef v29 = __log_SCNetworkConfiguration();
    uint64_t v30 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v29, (os_log_type_t)v30))
    {
      uint64_t v31 = _os_log_pack_size();
      uint64_t v39 = (char *)&v52 - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v29, v30, v39);
    }
    return;
  }
  CFPropertyListRef v4 = v3;
  MappingUsingCFStringRef BSDName = __SCNetworkInterfaceCreateMappingUsingBSDName(v3);
  CFRelease(v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!MappingUsingBSDName) {
    return;
  }
  if (CFGetTypeID(MappingUsingBSDName) != TypeID) {
    goto LABEL_19;
  }
  CFArrayRef v7 = __SCNetworkServiceCopyAllInterfaces(a1);
  if (!v7)
  {
    uint64_t v40 = __log_SCNetworkConfiguration();
    uint64_t v41 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v40, (os_log_type_t)v41))
    {
      uint64_t v42 = _os_log_pack_size();
      uint64_t v50 = (char *)&v52 - ((MEMORY[0x1F4188790](v42, v43, v44, v45, v46, v47, v48, v49) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v40, v41, v50);
    }
    goto LABEL_19;
  }
  uint64_t v8 = v7;
  CFIndex v9 = __SCNetworkInterfaceCreateMappingUsingBSDName(v7);
  CFRelease(v8);
  CFTypeID v10 = CFDictionaryGetTypeID();
  if (!v9)
  {
LABEL_19:
    uint64_t v51 = MappingUsingBSDName;
LABEL_20:
    CFRelease(v51);
    return;
  }
  if (CFGetTypeID(v9) == v10)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    uint64_t context = v9;
    CFArrayRef v57 = Mutable;
    CFDictionaryApplyFunction(MappingUsingBSDName, (CFDictionaryApplierFunction)_SCNetworkConfigurationCollectMissingService, &context);
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      uint64_t v53 = v9;
      CFIndex v15 = 0;
      *(void *)&long long v13 = 138412290;
      long long v54 = v13;
      do
      {
        CFURLRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(Mutable, v15);
        if (!__SCNetworkInterfaceIsBusyMember(a1, ValueAtIndex, 0)
          && !__SCNetworkServiceCreate(a1, ValueAtIndex, 0))
        {
          CFArrayRef v17 = __log_SCNetworkConfiguration();
          uint64_t v18 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
          {
            uint64_t v19 = _os_log_pack_size();
            uint64_t v55 = &v52;
            CFDictionaryRef v27 = (char *)&v52
                - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v28 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v28 = v54;
            *(void *)(v28 + 4) = ValueAtIndex;
            __SC_log_send(5, (uint64_t)v17, v18, v27);
          }
        }
        ++v15;
      }
      while (v14 != v15);
      CFIndex v9 = v53;
    }
  }
  else
  {
    CFArrayRef Mutable = 0;
  }
  CFRelease(MappingUsingBSDName);
  CFRelease(v9);
  if (Mutable)
  {
    uint64_t v51 = Mutable;
    goto LABEL_20;
  }
}

__CFDictionary *_SCNetworkConfigurationCopyExternalInterfaceMapping(const __SCPreferences *a1, const __SCPreferences *a2)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = 0;
  uint64_t v3 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 0);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count)
    {
      uint64_t v5 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a2, 0);
      CFTypeID v6 = CFArrayGetTypeID();
      if (v5 && CFGetTypeID(v5) == v6)
      {
        CFDictionaryRef v7 = _SCNetworkInterfaceStorageCopyMaxUnitPerInterfaceType(a2);
        CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        Companion = SCPreferencesCreateCompanion((uint64_t)a2, 0);
        if (Count >= 1)
        {
          CFMutableDictionaryRef v67 = Mutable;
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFURLRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v3, i);
            CFIndex v12 = CFArrayGetCount(v5);
            if (v12 < 1)
            {
LABEL_18:
              if (!_SCNetworkInterfaceIsHiddenInterface((unsigned __int8 *)ValueAtIndex))
              {
                uint64_t v20 = (const void *)*((void *)ValueAtIndex + 36);
                CFTypeID v21 = CFNumberGetTypeID();
                if (!v20
                  || CFGetTypeID(v20) != v21
                  || (int valuePtr = 0, !CFNumberGetValue(*((CFNumberRef *)ValueAtIndex + 36), kCFNumberIntType, &valuePtr))
                  || valuePtr != 1452
                  || (uint64_t v22 = (__CFString *)*((void *)ValueAtIndex + 4), v22 != @"iBridge")
                  && (!v22 || !CFEqual(v22, @"iBridge")))
                {
                  IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
                  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, IOInterfaceType);
                  if (Value)
                  {
                    CFNumberGetValue(Value, kCFNumberIntType, (char *)&v69 + 4);
                    int v25 = HIDWORD(v69) + 1;
                  }
                  else
                  {
                    int v25 = 0;
                  }
                  LODWORD(v69) = v25;
                  CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &v69);
                  CFDictionarySetValue(v7, IOInterfaceType, v28);
                  CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0, (uint64_t)ValueAtIndex, Companion, 0);
                  uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)Copy);
                  CFTypeID v31 = CFNumberGetTypeID();
                  if (!IOInterfaceUnit || CFGetTypeID(IOInterfaceUnit) != v31 || !CFEqual(IOInterfaceUnit, v28)) {
                    __SCNetworkInterfaceSetIOInterfaceUnit((uint64_t)Copy, v28);
                  }
                  CFDictionaryAddValue(v67, ValueAtIndex, Copy);
                  CFRelease(Copy);
                  CFRelease(v28);
                }
              }
            }
            else
            {
              CFIndex v13 = v12;
              for (CFIndex j = 0; j != v13; ++j)
              {
                CFIndex v15 = CFArrayGetValueAtIndex(v5, j);
                HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)ValueAtIndex);
                CFArrayRef v17 = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v15);
                if (HardwareAddress == v17 || HardwareAddress && v17 && CFEqual(HardwareAddress, v17))
                {
                  CFDictionaryAddValue(v67, ValueAtIndex, v15);
                  uint64_t v26 = v5;
                  CFIndex v27 = j;
                  goto LABEL_29;
                }
              }
              CFIndex v18 = 0;
              while (1)
              {
                uint64_t v19 = (unsigned __int8 *)CFArrayGetValueAtIndex(v5, v18);
                if (_SCNetworkConfigurationIsInterfaceNamerMappable((unsigned __int8 *)ValueAtIndex, v19)) {
                  break;
                }
                if (v13 == ++v18) {
                  goto LABEL_18;
                }
              }
              CFDictionaryAddValue(v67, ValueAtIndex, v19);
              uint64_t v26 = v5;
              CFIndex v27 = v18;
LABEL_29:
              CFArrayRemoveValueAtIndex(v26, v27);
            }
          }
          CFArrayRef Mutable = v67;
        }
        goto LABEL_55;
      }
      uint64_t v44 = __log_SCNetworkConfiguration();
      uint64_t v45 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v44, (os_log_type_t)v45))
      {
        uint64_t v46 = _os_log_pack_size();
        long long v54 = (char *)&v66 - ((MEMORY[0x1F4188790](v46, v47, v48, v49, v50, v51, v52, v53) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v44, v45, v54);
      }
    }
    else
    {
      uint64_t v55 = __log_SCNetworkConfiguration();
      uint64_t v56 = _SC_syslog_os_log_mapping(6);
      if (!__SC_log_enabled(6, v55, (os_log_type_t)v56))
      {
        CFArrayRef Mutable = 0;
        CFDictionaryRef v7 = 0;
        uint64_t v5 = 0;
        goto LABEL_54;
      }
      uint64_t v57 = _os_log_pack_size();
      uint64_t v65 = (char *)&v66 - ((MEMORY[0x1F4188790](v57, v58, v59, v60, v61, v62, v63, v64) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v55, v56, v65);
      uint64_t v5 = 0;
    }
    CFArrayRef Mutable = 0;
    CFDictionaryRef v7 = 0;
LABEL_54:
    Companion = 0;
LABEL_55:
    CFRelease(v3);
    if (v5) {
      CFRelease(v5);
    }
    goto LABEL_44;
  }
  uint64_t v32 = __log_SCNetworkConfiguration();
  uint64_t v33 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v32, (os_log_type_t)v33))
  {
    uint64_t v34 = _os_log_pack_size();
    uint64_t v42 = (char *)&v66 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v32, v33, v42);
  }
  Companion = 0;
  uint64_t v5 = 0;
  CFDictionaryRef v7 = 0;
  CFArrayRef Mutable = 0;
  if (v3) {
    goto LABEL_55;
  }
LABEL_44:
  if (v7) {
    CFRelease(v7);
  }
  if (Companion) {
    CFRelease(Companion);
  }
  return Mutable;
}

__CFArray *_SCNetworkMigrationCreateNetworkInterfaceArray(const __SCPreferences *a1, const __CFDictionary *a2, unsigned char *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = 0;
  if (!a1)
  {
    CFIndex v27 = __log_SCNetworkConfiguration();
    uint64_t v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, (os_log_type_t)v28))
    {
LABEL_22:
      uint64_t v29 = _os_log_pack_size();
      uint64_t v37 = (char *)context
          - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v27, v28, v37);
    }
    return 0;
  }
  CFPropertyListRef Value = SCPreferencesGetValue(a1, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID || (CFIndex Count = CFArrayGetCount((CFArrayRef)Value)) == 0)
  {
    CFIndex v27 = __log_SCNetworkConfiguration();
    uint64_t v28 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v27, (os_log_type_t)v28)) {
      goto LABEL_22;
    }
    return 0;
  }
  uint64_t v9 = Count;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (v9 >= 1)
  {
    for (CFIndex i = 0; i != v9; ++i)
    {
      CFURLRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
      CFTypeID v13 = CFDictionaryGetTypeID();
      if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v13) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  CFTypeID v14 = CFDictionaryGetTypeID();
  if (a2 && CFGetTypeID(a2) == v14)
  {
    CFIndex v15 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 0);
    context[0] = v15;
    context[1] = Mutable;
    LOBYTE(v40) = 0;
    CFNumberRef v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = (char *)context
          - ((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(7, (uint64_t)v16, v17, v26);
    }
    logInterfaces((uint64_t)"  externalInterfaceList", v15, 0);
    logInterfaces((uint64_t)"  networkInterfaceList", Mutable, 0);
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)_SCNetworkConfigurationCollectInterfaceStorageEntity, context);
    if (a3) {
      *a3 = v40;
    }
    if (v15) {
      CFRelease(v15);
    }
  }
  return Mutable;
}

CFMutableDictionaryRef _SCNetworkMigrationCreateBSDNameMapping(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if ((unint64_t)a1 | (unint64_t)a2)
  {
    if (a1) {
      CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)SCNetworkMigrationMapSourceToTargetName, Mutable);
    }
    if (a2) {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)SCNetworkMigrationMapSourceToTargetName, Mutable);
    }
  }
  return Mutable;
}

CFDictionaryRef _SCNetworkMigrationCreateServiceMappingUsingBSDNameMapping(const __SCPreferences *a1, const __SCPreferences *a2, const __CFDictionary *a3)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  value[0] = 0;
  if (a3)
  {
    CFArrayRef v5 = SCNetworkServiceCopyAll(a1);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (v5 && CFGetTypeID(v5) == TypeID)
    {
      CFArrayRef v7 = SCNetworkServiceCopyAll(a2);
      CFTypeID v8 = CFArrayGetTypeID();
      if (!v7 || CFGetTypeID(v7) != v8)
      {
        BOOL v146 = __log_SCNetworkConfiguration();
        uint64_t v147 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v146, (os_log_type_t)v147))
        {
          uint64_t v148 = _os_log_pack_size();
          CFIndex v156 = (char *)&v157
               - ((MEMORY[0x1F4188790](v148, v149, v150, v151, v152, v153, v154, v155) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v146, v147, v156);
        }
        CFDictionaryRef v14 = 0;
        CFArrayRef MutableCopy = 0;
        CFArrayRef v11 = 0;
        goto LABEL_93;
      }
      CFIndex Count = CFArrayGetCount(v5);
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v5);
      CFArrayRef v11 = CFArrayCreateMutableCopy(0, 0, v7);
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v14 = Mutable;
      CFIndex v176 = Count;
      if (Count < 1) {
        goto LABEL_93;
      }
      CFDictionaryRef v162 = a3;
      CFDictionaryRef v170 = Mutable;
      CFArrayRef v160 = v7;
      CFArrayRef v161 = v5;
      CFIndex v15 = 0;
      CFIndex v172 = @"VPN";
      CFTypeID v166 = @"PPP";
      CFIndex v169 = @"Bond";
      CFIndex v167 = @"Bridge";
      CFTypeID v165 = @"VLAN";
      CFPropertyListRef v163 = @"IPSec";
      CFPropertyListRef v159 = @"6to4";
      uint64_t v158 = @"Loopback";
      CFTypeID v164 = (const void *)*MEMORY[0x1E4F1CFC8];
      *(void *)&long long v13 = 138412290;
      long long v171 = v13;
      CFArrayRef v173 = MutableCopy;
      CFArrayRef v177 = v11;
      while (1)
      {
        value[0] = 0;
        CFIndex v16 = CFArrayGetCount(v11);
        CFURLRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(MutableCopy, v15);
        SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
        if (!Interface)
        {
          uint64_t v70 = __log_SCNetworkConfiguration();
          uint64_t v71 = _SC_syslog_os_log_mapping(5);
          if (!__SC_log_enabled(5, v70, (os_log_type_t)v71)) {
            goto LABEL_67;
          }
LABEL_65:
          uint64_t v74 = _os_log_pack_size();
          uint64_t v82 = (char *)&v157
              - ((MEMORY[0x1F4188790](v74, v75, v76, v77, v78, v79, v80, v81) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          CFArrayRef MutableCopy = v173;
          *(_WORD *)_os_log_pack_fill() = 0;
          int v83 = 5;
          goto LABEL_66;
        }
        SCNetworkInterfaceRef v19 = Interface;
        EntityType = (const void *)__SCNetworkInterfaceGetEntityType((uint64_t)Interface);
        CFTypeID v21 = CFStringGetTypeID();
        if (EntityType && CFGetTypeID(EntityType) == v21 && (CFEqual(EntityType, v172) || CFEqual(EntityType, v166)))
        {
          EntitySubType = (const void *)__SCNetworkInterfaceGetEntitySubType((uint64_t)v19);
          CFTypeID v23 = CFStringGetTypeID();
          if (!EntitySubType || CFGetTypeID(EntitySubType) != v23)
          {
            uint64_t v70 = __log_SCNetworkConfiguration();
            uint64_t v71 = _SC_syslog_os_log_mapping(5);
            if (!__SC_log_enabled(5, v70, (os_log_type_t)v71)) {
              goto LABEL_67;
            }
            goto LABEL_65;
          }
          CFTypeRef v168 = EntitySubType;
          CFTypeRef v174 = EntityType;
          CFIndex v175 = ValueAtIndex;
          CFStringRef BSDName = 0;
        }
        else
        {
          CFIndex v175 = ValueAtIndex;
          CFTypeID v25 = SCNetworkInterfaceGetTypeID();
          CFTypeID v26 = CFGetTypeID(v19);
          CFTypeRef v174 = EntityType;
          if (v26 == v25)
          {
            CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(v19);
            if (CFEqual(InterfaceType, v169)) {
              goto LABEL_22;
            }
          }
          if ((CFTypeID v28 = SCNetworkInterfaceGetTypeID(), CFGetTypeID(v19) == v28)
            && (CFStringRef v29 = SCNetworkInterfaceGetInterfaceType(v19), CFEqual(v29, v167))
            || (CFTypeID v30 = SCNetworkInterfaceGetTypeID(), CFGetTypeID(v19) == v30)
            && (CFStringRef v31 = SCNetworkInterfaceGetInterfaceType(v19), CFEqual(v31, v165)))
          {
LABEL_22:
            CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v19);
            CFTypeID v32 = CFStringGetTypeID();
            if (!BSDName || CFGetTypeID(BSDName) != v32) {
              goto LABEL_67;
            }
            CFTypeRef v168 = 0;
            value[0] = (void *)BSDName;
          }
          else
          {
            CFTypeID v72 = CFStringGetTypeID();
            if (EntityType
              && CFGetTypeID(v174) == v72
              && (CFEqual(v174, v163) || CFEqual(v174, v159) || CFEqual(v174, v158)))
            {
              goto LABEL_67;
            }
            CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v19);
            CFTypeID v73 = CFStringGetTypeID();
            if (!BSDName || CFGetTypeID(BSDName) != v73) {
              goto LABEL_67;
            }
            if (!CFDictionaryGetValueIfPresent(v162, BSDName, (const void **)value) || !isA_CFString(value[0]))
            {
              uint64_t v70 = __log_SCNetworkConfiguration();
              uint64_t v71 = _SC_syslog_os_log_mapping(6);
              if (!__SC_log_enabled(6, v70, (os_log_type_t)v71)) {
                goto LABEL_67;
              }
              uint64_t v84 = _os_log_pack_size();
              uint64_t v82 = (char *)&v157
                  - ((MEMORY[0x1F4188790](v84, v85, v86, v87, v88, v89, v90, v91) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              CFArrayRef MutableCopy = v173;
              uint64_t v92 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v92 = v171;
              *(void *)(v92 + 4) = BSDName;
              int v83 = 6;
LABEL_66:
              __SC_log_send(v83, (uint64_t)v70, v71, v82);
              CFArrayRef v11 = v177;
              goto LABEL_67;
            }
            CFTypeRef v168 = 0;
          }
        }
        if (v16 < 1) {
          goto LABEL_50;
        }
        CFIndex v33 = 0;
        while (1)
        {
          uint64_t v34 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v11, v33);
          uint64_t v35 = SCNetworkServiceGetInterface(v34);
          if (v35) {
            break;
          }
          uint64_t v39 = __log_SCNetworkConfiguration();
          uint64_t v40 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v39, (os_log_type_t)v40))
          {
            uint64_t v41 = _os_log_pack_size();
            uint64_t v49 = (char *)&v157
                - ((MEMORY[0x1F4188790](v41, v42, v43, v44, v45, v46, v47, v48) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            uint64_t v50 = (uint64_t)v39;
            uint64_t v51 = v40;
            uint64_t v52 = v49;
LABEL_48:
            __SC_log_send(5, v50, v51, v52);
            CFArrayRef v11 = v177;
          }
LABEL_49:
          if (v16 == ++v33) {
            goto LABEL_50;
          }
        }
        uint64_t v36 = (uint64_t)v35;
        if (BSDName)
        {
          CFStringRef v37 = SCNetworkInterfaceGetBSDName(v35);
          CFTypeID v38 = CFStringGetTypeID();
          if (v37 && CFGetTypeID(v37) == v38 && CFEqual(v37, value[0]))
          {
            uint64_t v93 = __log_SCNetworkConfiguration();
            uint64_t v94 = _SC_syslog_os_log_mapping(5);
            BOOL v95 = __SC_log_enabled(5, v93, (os_log_type_t)v94);
            uint64_t v96 = v170;
            if (v95)
            {
              uint64_t v97 = _os_log_pack_size();
              uint64_t v105 = (char *)&v157
                   - ((MEMORY[0x1F4188790](v97, v98, v99, v100, v101, v102, v103, v104) + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v106 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v106 = v171;
              *(void *)(v106 + 4) = v37;
              uint64_t v107 = (uint64_t)v93;
              uint64_t v108 = v94;
              uint64_t v109 = v105;
LABEL_73:
              __SC_log_send(5, v107, v108, v109);
              CFArrayRef v11 = v177;
              goto LABEL_74;
            }
            goto LABEL_74;
          }
          goto LABEL_49;
        }
        uint64_t v53 = (const void *)__SCNetworkInterfaceGetEntityType((uint64_t)v35);
        CFTypeID v54 = CFStringGetTypeID();
        if (!v53 || CFGetTypeID(v53) != v54 || !CFEqual(v53, v172) && !CFEqual(v53, v166))
        {
          uint64_t v57 = __log_SCNetworkConfiguration();
          uint64_t v58 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v57, (os_log_type_t)v58)) {
            goto LABEL_47;
          }
          goto LABEL_49;
        }
        uint64_t v55 = (const void *)__SCNetworkInterfaceGetEntitySubType(v36);
        CFTypeID v56 = CFStringGetTypeID();
        if (!v55 || CFGetTypeID(v55) != v56) {
          break;
        }
        if (!CFEqual(v53, v174) || !CFEqual(v55, v168)) {
          goto LABEL_49;
        }
        uint64_t v110 = __log_SCNetworkConfiguration();
        uint64_t v111 = _SC_syslog_os_log_mapping(5);
        BOOL v112 = __SC_log_enabled(5, v110, (os_log_type_t)v111);
        uint64_t v96 = v170;
        if (v112)
        {
          uint64_t v113 = _os_log_pack_size();
          uint64_t v121 = (char *)&v157
               - ((MEMORY[0x1F4188790](v113, v114, v115, v116, v117, v118, v119, v120) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v122 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v122 = v171;
          *(void *)(v122 + 4) = 0;
          uint64_t v107 = (uint64_t)v110;
          uint64_t v108 = v111;
          uint64_t v109 = v121;
          goto LABEL_73;
        }
LABEL_74:
        CFDictionaryAddValue(v96, v175, v34);
        CFArrayRemoveValueAtIndex(v11, v33);
LABEL_50:
        int v69 = CFDictionaryContainsKey(v170, v175);
        CFArrayRef MutableCopy = v173;
        if (!v69) {
          CFDictionaryAddValue(v170, v175, v164);
        }
LABEL_67:
        if (++v15 == v176)
        {
          CFArrayRef v5 = v161;
          CFArrayRef v7 = v160;
          CFDictionaryRef v14 = v170;
          if (!v161) {
            goto LABEL_80;
          }
LABEL_93:
          CFRelease(v5);
          if (!v7) {
            goto LABEL_82;
          }
LABEL_81:
          CFRelease(v7);
          goto LABEL_82;
        }
      }
      uint64_t v57 = __log_SCNetworkConfiguration();
      uint64_t v58 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v57, (os_log_type_t)v58))
      {
LABEL_47:
        uint64_t v59 = _os_log_pack_size();
        CFMutableDictionaryRef v67 = (char *)&v157
            - ((MEMORY[0x1F4188790](v59, v60, v61, v62, v63, v64, v65, v66) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v68 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v68 = v171;
        *(void *)(v68 + 4) = v36;
        uint64_t v50 = (uint64_t)v57;
        uint64_t v51 = v58;
        uint64_t v52 = v67;
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    uint64_t v123 = __log_SCNetworkConfiguration();
    uint64_t v124 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v123, (os_log_type_t)v124))
    {
      uint64_t v125 = _os_log_pack_size();
      uint64_t v133 = (char *)&v157
           - ((MEMORY[0x1F4188790](v125, v126, v127, v128, v129, v130, v131, v132) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v123, v124, v133);
    }
    CFArrayRef v11 = 0;
    CFArrayRef v7 = 0;
    CFArrayRef MutableCopy = 0;
    CFDictionaryRef v14 = 0;
    if (v5) {
      goto LABEL_93;
    }
LABEL_80:
    if (v7) {
      goto LABEL_81;
    }
LABEL_82:
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    uint64_t v134 = __log_SCNetworkConfiguration();
    uint64_t v135 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v134, (os_log_type_t)v135))
    {
      uint64_t v136 = _os_log_pack_size();
      CFTypeID v144 = (char *)&v157
           - ((MEMORY[0x1F4188790](v136, v137, v138, v139, v140, v141, v142, v143) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v134, v135, v144);
    }
    return 0;
  }
  return v14;
}

__CFDictionary *_SCNetworkMigrationCreateSetMapping(const __SCPreferences *a1, const __SCPreferences *a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v4 = SCNetworkSetCopyAll(a1);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  CFArrayRef v6 = SCNetworkSetCopyAll(a2);
  if (!v6)
  {
    CFDictionaryRef Mutable = 0;
    SCNetworkSetRef v11 = v5;
LABEL_23:
    CFRelease(v11);
    return Mutable;
  }
  CFArrayRef v7 = v6;
  CFArrayRef MutableCopy = CFArrayCreateMutableCopy(0, 0, v6);
  CFIndex Count = CFArrayGetCount(MutableCopy);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  SCNetworkSetRef v11 = SCNetworkSetCopyCurrent(a1);
  if (!v11) {
    goto LABEL_6;
  }
  if (Count >= 1)
  {
    CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, 0);
    CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(MutableCopy, 0);
    CFStringRef Name = SCNetworkSetGetName(v11);
    SCNetworkSetSetName((SCNetworkSetRef)ValueAtIndex, Name);
    CFDictionaryAddValue(Mutable, v11, ValueAtIndex);
    SCNetworkSetSetCurrent((SCNetworkSetRef)ValueAtIndex);
    CFRelease(ValueAtIndex);
LABEL_6:
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v14 = 0;
      do
      {
        CFIndex v15 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v5, v14);
        CFIndex v16 = v15;
        if (!v11 || !CFEqual(v15, v11))
        {
          CFIndex v17 = CFArrayGetCount(MutableCopy);
          CFStringRef v18 = SCNetworkSetGetName(v16);
          if (v17 < 1)
          {
            SCNetworkInterfaceRef v19 = SCNetworkSetCreate(a2);
          }
          else
          {
            SCNetworkInterfaceRef v19 = CFArrayGetValueAtIndex(MutableCopy, 0);
            CFRetain(v19);
            CFArrayRemoveValueAtIndex(MutableCopy, 0);
          }
          SCNetworkSetSetName((SCNetworkSetRef)v19, v18);
          CFDictionaryAddValue(Mutable, v16, v19);
          CFRelease(v19);
        }
        ++v14;
      }
      while (v14 < CFArrayGetCount(v5));
    }
    goto LABEL_20;
  }
  uint64_t v20 = __log_SCNetworkConfiguration();
  uint64_t v21 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    v33[0] = v33;
    CFTypeID v30 = (char *)v33 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v31 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v31 = 134217984;
    *(void *)(v31 + 4) = Count;
    __SC_log_send(5, (uint64_t)v20, v21, v30);
  }
LABEL_20:
  CFRelease(v5);
  CFRelease(v7);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v11) {
    goto LABEL_23;
  }
  return Mutable;
}

__CFDictionary *_SCNetworkMigrationCreateServiceSetMapping(const __SCPreferences *a1)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v3 = SCNetworkServiceCopyAll(a1);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(v3) >= 1)
    {
      CFIndex v5 = 0;
      CFArrayRef v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
        CFMutableArrayRef v8 = CFArrayCreateMutable(0, 0, v6);
        CFDictionaryAddValue(Mutable, ValueAtIndex, v8);
        CFRelease(v8);
        ++v5;
      }
      while (v5 < CFArrayGetCount(v4));
    }
    CFRelease(v4);
    CFArrayRef v9 = SCNetworkSetCopyAll(a1);
    if (v9)
    {
      CFArrayRef v10 = v9;
      if (CFArrayGetCount(v9) >= 1)
      {
        CFIndex v11 = 0;
        do
        {
          CFIndex v12 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v10, v11);
          CFArrayRef v13 = SCNetworkSetCopyServices(v12);
          if (CFArrayGetCount(v13) >= 1)
          {
            CFIndex v14 = 0;
            do
            {
              CFIndex v15 = CFArrayGetValueAtIndex(v13, v14);
              CFPropertyListRef Value = (__CFArray *)CFDictionaryGetValue(Mutable, v15);
              if (Value) {
                CFArrayAppendValue(Value, v12);
              }
              ++v14;
            }
            while (v14 < CFArrayGetCount(v13));
          }
          CFRelease(v13);
          ++v11;
        }
        while (v11 < CFArrayGetCount(v10));
      }
      CFRelease(v10);
    }
  }
  return Mutable;
}

BOOL _SCNetworkMigrationDoServiceMigration(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v47 = 0u;
  long long v48 = 0u;
  if (a1
    && a2
    && (CFTypeID TypeID = CFDictionaryGetTypeID(), a3)
    && CFGetTypeID(a3) == TypeID
    && (CFTypeID v12 = CFDictionaryGetTypeID(), a4)
    && CFGetTypeID(a4) == v12)
  {
    uint64_t context = 6;
    uint64_t v50 = "BSD name mapping";
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)logMapping_one, &context);
    uint64_t context = 6;
    uint64_t v50 = "SCNetworkService mapping";
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)logMapping_one, &context);
    if (a5)
    {
      uint64_t context = 6;
      uint64_t v50 = "SCNetworkSet mapping";
      CFDictionaryApplyFunction(a5, (CFDictionaryApplierFunction)logMapping_one, &context);
    }
    else
    {
      uint64_t v25 = __log_SCNetworkConfiguration();
      uint64_t v26 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v25, (os_log_type_t)v26))
      {
        uint64_t v27 = _os_log_pack_size();
        uint64_t v35 = (char *)&v47 - ((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v25, v26, v35);
      }
    }
    if (a6)
    {
      uint64_t context = 6;
      uint64_t v50 = "SCNetworkService/SCNetworkSet mapping";
      CFDictionaryApplyFunction(a6, (CFDictionaryApplierFunction)logMapping_one, &context);
    }
    else
    {
      uint64_t v36 = __log_SCNetworkConfiguration();
      uint64_t v37 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v36, (os_log_type_t)v37))
      {
        uint64_t v38 = _os_log_pack_size();
        uint64_t v46 = (char *)&v47 - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v36, v37, v46);
      }
    }
    *(void *)&long long v47 = a2;
    *((void *)&v47 + 1) = a4;
    *(void *)&long long v48 = a5;
    *((void *)&v48 + 1) = a6;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)ServiceMigrationAddOrReplace, &v47);
    return 1;
  }
  else
  {
    CFArrayRef v13 = __log_SCNetworkConfiguration();
    uint64_t v14 = _SC_syslog_os_log_mapping(6);
    BOOL result = __SC_log_enabled(6, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v24 = (char *)&v47 - ((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v13, v14, v24);
      return 0;
    }
  }
  return result;
}

__CFDictionary *_SCNetworkConfigurationCopyBuiltinMapping(const __SCPreferences *a1, const __SCPreferences *a2)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v3 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a1, 1);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFIndex Count = CFArrayGetCount(v3);
    CFArrayRef v6 = _SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(a2, 1);
    CFTypeID v7 = CFArrayGetTypeID();
    if (v6 && CFGetTypeID(v6) == v7)
    {
      if (Count >= 1)
      {
        CFDictionaryRef Mutable = 0;
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFURLRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v3, i);
          CFIndex v11 = CFArrayGetCount(v6);
          if (v11 >= 1)
          {
            CFIndex v12 = v11;
            CFIndex v13 = 0;
            while (1)
            {
              uint64_t v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, v13);
              HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)ValueAtIndex);
              uint64_t v16 = (const void *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v14);
              if (HardwareAddress == v16 || HardwareAddress && v16 && CFEqual(HardwareAddress, v16)) {
                break;
              }
              if (v12 == ++v13)
              {
                CFIndex v13 = 0;
                while (1)
                {
                  uint64_t v14 = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, v13);
                  if (_SCNetworkConfigurationIsInterfaceNamerMappable(ValueAtIndex, v14)) {
                    goto LABEL_18;
                  }
                  if (v12 == ++v13) {
                    goto LABEL_21;
                  }
                }
              }
            }
LABEL_18:
            if (!Mutable) {
              CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            }
            CFDictionaryAddValue(Mutable, ValueAtIndex, v14);
            CFArrayRemoveValueAtIndex(v6, v13);
          }
LABEL_21:
          ;
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v29 = __log_SCNetworkConfiguration();
      uint64_t v30 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v29, (os_log_type_t)v30))
      {
        uint64_t v31 = _os_log_pack_size();
        uint64_t v39 = (char *)v40 - ((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v29, v30, v39);
      }
    }
    CFDictionaryRef Mutable = 0;
LABEL_32:
    CFRelease(v3);
    if (v6) {
      CFRelease(v6);
    }
    return Mutable;
  }
  uint64_t v18 = __log_SCNetworkConfiguration();
  uint64_t v19 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v18, (os_log_type_t)v19))
  {
    uint64_t v20 = _os_log_pack_size();
    uint64_t v28 = (char *)v40 - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(6, (uint64_t)v18, v19, v28);
  }
  CFArrayRef v6 = 0;
  CFDictionaryRef Mutable = 0;
  if (v3) {
    goto LABEL_32;
  }
  return Mutable;
}

uint64_t _SCNetworkMigrationDoServiceOrderMigration(const void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unsigned __int8 context = 1;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)preserve_service_order, &context);
  return context;
}

uint64_t _SCNetworkMigrationDoSystemMigration(const __SCPreferences *a1, const __SCPreferences *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CFStringEncoding v55 = 0;
  CFArrayRef v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t v14 = &v54[-((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(5, (uint64_t)v4, v5, v14);
  }
  if (!a2) {
    return 0;
  }
  HostCFStringRef Name = (const __CFString *)SCPreferencesGetHostName(a1);
  if (HostName)
  {
    SCPreferencesSetHostName(a2, HostName);
    uint64_t v16 = __log_SCNetworkConfiguration();
    uint64_t v17 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
    {
      uint64_t v18 = _os_log_pack_size();
      uint64_t v26 = &v54[-((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v16, v17, v26);
    }
  }
  CFStringRef v27 = (const __CFString *)_SCPreferencesCopyLocalHostName(a1);
  if (v27)
  {
    CFStringRef v28 = v27;
    SCPreferencesSetLocalHostName(a2, v27);
    CFRelease(v28);
    uint64_t v29 = __log_SCNetworkConfiguration();
    uint64_t v30 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v29, (os_log_type_t)v30))
    {
      uint64_t v31 = _os_log_pack_size();
      uint64_t v39 = &v54[-((MEMORY[0x1F4188790](v31, v32, v33, v34, v35, v36, v37, v38) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v29, v30, v39);
    }
  }
  CFStringRef v40 = (const __CFString *)_SCPreferencesCopyComputerName(a1, &v55);
  if (!v40) {
    return 1;
  }
  CFStringRef v41 = v40;
  SCPreferencesSetComputerName(a2, v40, v55);
  CFRelease(v41);
  uint64_t v42 = __log_SCNetworkConfiguration();
  uint64_t v43 = _SC_syslog_os_log_mapping(5);
  if (!__SC_log_enabled(5, v42, (os_log_type_t)v43)) {
    return 1;
  }
  uint64_t v44 = _os_log_pack_size();
  uint64_t v52 = &v54[-((MEMORY[0x1F4188790](v44, v45, v46, v47, v48, v49, v50, v51) + 15) & 0xFFFFFFFFFFFFFFF0)];
  __error();
  *(_WORD *)_os_log_pack_fill() = 0;
  __SC_log_send(5, (uint64_t)v42, v43, v52);
  return 1;
}

uint64_t _SCNetworkConfigurationMigrateIsFilePresent(const __CFURL *a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  memset(&v59, 0, sizeof(v59));
  if (!a1)
  {
    uint64_t v17 = __log_SCNetworkConfiguration();
    uint64_t v18 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v17, (os_log_type_t)v18))
    {
      uint64_t v19 = _os_log_pack_size();
      CFStringRef v27 = (char *)&v59 - ((MEMORY[0x1F4188790](v19, v20, v21, v22, v23, v24, v25, v26) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v17, v18, v27);
    }
    return 0;
  }
  if (!CFURLGetFileSystemRepresentation(a1, 1u, v60, 1024))
  {
    CFStringRef v28 = __log_SCNetworkConfiguration();
    uint64_t v29 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
    {
      uint64_t v30 = _os_log_pack_size();
      uint64_t v38 = (char *)&v59 - ((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
LABEL_14:
      uint64_t v39 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v39 = 138412290;
      *(void *)(v39 + 4) = a1;
      int v40 = 5;
LABEL_15:
      __SC_log_send(v40, (uint64_t)v28, v29, v38);
    }
    return 0;
  }
  if (stat((const char *)v60, &v59)) {
    return 0;
  }
  if (!v59.st_size)
  {
    CFStringRef v28 = __log_SCNetworkConfiguration();
    uint64_t v29 = _SC_syslog_os_log_mapping(6);
    if (!__SC_log_enabled(6, v28, (os_log_type_t)v29)) {
      return 0;
    }
    uint64_t v42 = _os_log_pack_size();
    uint64_t v38 = (char *)&v59 - ((MEMORY[0x1F4188790](v42, v43, v44, v45, v46, v47, v48, v49) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v50 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v50 = 138412290;
    *(void *)(v50 + 4) = a1;
    int v40 = 6;
    goto LABEL_15;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v60, 0x8000100u);
  CFArrayRef v3 = (const void *)__SCPreferencesCreateForMigration(@"System Migration", v2);
  CFRelease(v2);
  if (!v3)
  {
    CFStringRef v28 = __log_SCNetworkConfiguration();
    uint64_t v29 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v28, (os_log_type_t)v29)) {
      return 0;
    }
    uint64_t v51 = _os_log_pack_size();
    uint64_t v38 = (char *)&v59 - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    goto LABEL_14;
  }
  if (__SCPreferencesIsEmpty((uint64_t)v3))
  {
    CFArrayRef v4 = __log_SCNetworkConfiguration();
    uint64_t v5 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
    {
      uint64_t v6 = _os_log_pack_size();
      uint64_t v14 = (char *)&v59 - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = a1;
      __SC_log_send(5, (uint64_t)v4, v5, v14);
    }
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = 1;
  }
  CFRelease(v3);
  return v16;
}

void _SCNetworkConfigurationCollectMissingService(const void *a1, void *a2, const __CFDictionary **a3)
{
  CFDictionaryRef v6 = *a3;
  uint64_t v5 = a3[1];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a2
    && CFGetTypeID(a2) == TypeID
    && _SCNetworkInterfaceIsBuiltin((unsigned __int8 *)a2)
    && !CFDictionaryContainsKey(v6, a1))
  {
    CFArrayAppendValue(v5, a2);
  }
}

__CFArray *_SCNetworkInterfaceCopyInterfacesFilteredByBuiltinWithPreferences(const __SCPreferences *a1, int a2)
{
  CFArrayRef v4 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1)
  {
    CFDictionaryRef Mutable = 0;
    Companion = v5;
LABEL_11:
    CFRelease(Companion);
    return Mutable;
  }
  CFIndex v7 = Count;
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  Companion = SCPreferencesCreateCompanion((uint64_t)a1, 0);
  for (CFIndex i = 0; i != v7; ++i)
  {
    CFURLRef ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v5, i);
    if (_SCNetworkInterfaceIsBuiltin(ValueAtIndex) == a2)
    {
      CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0, (uint64_t)ValueAtIndex, Companion, 0);
      CFArrayAppendValue(Mutable, Copy);
      CFRelease(Copy);
    }
  }
  CFRelease(v5);
  if (Companion) {
    goto LABEL_11;
  }
  return Mutable;
}

CFDictionaryRef _SCNetworkInterfaceStorageCopyMaxUnitPerInterfaceType(const __SCPreferences *a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  CFURLRef v1 = __SCNetworkInterfaceCopyStoredWithPreferences(a1);
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
        CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == TypeID)
        {
          IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType((uint64_t)ValueAtIndex);
          CFTypeID v10 = CFNumberGetTypeID();
          if (IOInterfaceType && CFGetTypeID(IOInterfaceType) == v10)
          {
            if (CFDictionaryContainsKey(Mutable, IOInterfaceType)
              || (int valuePtr = 0,
                  CFPropertyListRef Value = CFNumberCreate(0, kCFNumberIntType, &valuePtr),
                  CFDictionaryAddValue(Mutable, IOInterfaceType, Value),
                  CFRelease(Value),
                  !Value))
            {
              CFPropertyListRef Value = CFDictionaryGetValue(Mutable, IOInterfaceType);
            }
            uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit((uint64_t)ValueAtIndex);
            CFTypeID v24 = CFNumberGetTypeID();
            if (IOInterfaceUnit
              && CFGetTypeID(IOInterfaceUnit) == v24
              && CFNumberCompare((CFNumberRef)IOInterfaceUnit, (CFNumberRef)Value, 0) == kCFCompareGreaterThan)
            {
              CFDictionarySetValue(Mutable, IOInterfaceType, IOInterfaceUnit);
            }
          }
          else
          {
            uint64_t v12 = __log_SCNetworkConfiguration();
            uint64_t v13 = _SC_syslog_os_log_mapping(6);
            if (__SC_log_enabled(6, v12, (os_log_type_t)v13))
            {
              uint64_t v14 = _os_log_pack_size();
              uint64_t v22 = &v37[-((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0)];
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send(6, (uint64_t)v12, v13, v22);
            }
          }
        }
      }
    }
    CFRelease(v2);
  }
  else
  {
    uint64_t v25 = __log_SCNetworkConfiguration();
    uint64_t v26 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v25, (os_log_type_t)v26))
    {
      uint64_t v27 = _os_log_pack_size();
      uint64_t v35 = &v37[-((MEMORY[0x1F4188790](v27, v28, v29, v30, v31, v32, v33, v34) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v25, v26, v35);
    }
    return 0;
  }
  return Mutable;
}

uint64_t _SCNetworkConfigurationIsInterfaceNamerMappable(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1;
  }
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin(a1);
  if (IsBuiltin != _SCNetworkInterfaceIsBuiltin(a2)) {
    return 0;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  CFStringRef v6 = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a2);
  if (InterfaceType == v6
    || (v7 = v6, uint64_t result = 0, InterfaceType) && v7 && (uint64_t result = CFEqual(InterfaceType, v7), result))
  {
    IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix((uint64_t)a1);
    uint64_t v10 = _SCNetworkInterfaceGetIOInterfaceNamePrefix((uint64_t)a2);
    if (IOInterfaceNamePrefix == (const void *)v10
      || (v11 = (const void *)v10, uint64_t result = 0, IOInterfaceNamePrefix)
      && v11
      && (uint64_t result = CFEqual(IOInterfaceNamePrefix, v11), result))
    {
      CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a1);
      CFStringRef v13 = SCNetworkInterfaceGetLocalizedDisplayName((SCNetworkInterfaceRef)a2);
      if (LocalizedDisplayName == v13) {
        return 1;
      }
      CFStringRef v14 = v13;
      if (LocalizedDisplayName)
      {
        if (v13 && CFEqual(LocalizedDisplayName, v13)) {
          return 1;
        }
      }
      return IsBuiltin && __SCNetworkConfigurationInterfaceNameIsEquiv(LocalizedDisplayName, v14);
    }
  }
  return result;
}

void _SCNetworkConfigurationCollectInterfaceStorageEntity(uint64_t a1, void *a2, uint64_t a3)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v5 = *(const __CFArray **)a3;
  v51.CFIndex length = CFArrayGetCount(*(CFArrayRef *)a3);
  v51.CFIndex location = 0;
  FirstIndexOfCFPropertyListRef Value = CFArrayGetFirstIndexOfValue(v5, v51, a2);
  if (FirstIndexOfValue != -1)
  {
    CFIndex v7 = FirstIndexOfValue;
    CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a3, FirstIndexOfValue);
    UserDefinedCFStringRef Name = (const void *)__SCNetworkInterfaceGetUserDefinedName(ValueAtIndex);
    uint64_t v10 = (const void *)__SCNetworkInterfaceGetUserDefinedName(a2);
    if (UserDefinedName == v10
      || (UserDefinedName ? (BOOL v11 = v10 == 0) : (BOOL v11 = 1), !v11 && CFEqual(UserDefinedName, v10)))
    {
      uint64_t v12 = __log_SCNetworkConfiguration();
      uint64_t v13 = _SC_syslog_os_log_mapping(7);
      if (__SC_log_enabled(7, v12, (os_log_type_t)v13))
      {
        uint64_t v14 = _os_log_pack_size();
        uint64_t v22 = (char *)v50 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 138412290;
        *(void *)(v23 + 4) = a2;
        __SC_log_send(7, (uint64_t)v12, v13, v22);
      }
      return;
    }
    CFTypeID v24 = __log_SCNetworkConfiguration();
    uint64_t v25 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v24, (os_log_type_t)v25))
    {
      uint64_t v26 = _os_log_pack_size();
      uint64_t v34 = (char *)v50 - ((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 138412290;
      *(void *)(v35 + 4) = ValueAtIndex;
      __SC_log_send(7, (uint64_t)v24, v25, v34);
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a3, v7);
  }
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v36 = __SCNetworkInterfaceCopyStorageEntity((uint64_t)a2);
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = __log_SCNetworkConfiguration();
    uint64_t v39 = _SC_syslog_os_log_mapping(7);
    if (__SC_log_enabled(7, v38, (os_log_type_t)v39))
    {
      uint64_t v40 = _os_log_pack_size();
      uint64_t v48 = (char *)v50 - ((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v49 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v49 = 138412290;
      *(void *)(v49 + 4) = v37;
      __SC_log_send(7, (uint64_t)v38, v39, v48);
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), v37);
    CFRelease(v37);
  }
}

void SCNetworkMigrationMapSourceToTargetName(const __SCNetworkInterface *a1, const __SCNetworkInterface *a2, __CFDictionary *a3)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (BSDName)
  {
    if (CFGetTypeID(BSDName) == TypeID)
    {
      CFStringRef v7 = SCNetworkInterfaceGetBSDName(a2);
      CFTypeID v8 = CFStringGetTypeID();
      if (v7)
      {
        if (CFGetTypeID(v7) == v8 && !CFDictionaryContainsKey(a3, BSDName))
        {
          CFDictionaryAddValue(a3, BSDName, v7);
        }
      }
    }
  }
}

void ServiceMigrationAddOrReplace(SCNetworkServiceRef service, const __SCNetworkService *a2, const __SCPreferences **a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v5 = *a3;
  CFDictionaryRef v4 = a3[1];
  CFDictionaryRef v6 = a3[2];
  CFDictionaryRef v7 = a3[3];
  if (*((_OWORD *)a3 + 1) != 0)
  {
    CFTypeID TypeID = SCNetworkServiceGetTypeID();
    if (a2)
    {
      if (CFGetTypeID(a2) == TypeID)
      {
        SCNetworkServiceGetName(a2);
        uint64_t v10 = __log_SCNetworkConfiguration();
        uint64_t v11 = _SC_syslog_os_log_mapping(6);
        if (__SC_log_enabled(6, v10, (os_log_type_t)v11))
        {
          uint64_t v12 = _os_log_pack_size();
          v46[0] = v46;
          uint64_t v20 = (char *)v46
              - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v21 = 138412290;
          *(void *)(v21 + 4) = a2;
          __SC_log_send(6, (uint64_t)v10, v11, v20);
        }
        SCNetworkServiceRemove(a2);
      }
    }
  }
  SCNetworkServiceGetName(service);
  uint64_t v22 = __log_SCNetworkConfiguration();
  uint64_t v23 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
  {
    uint64_t v24 = _os_log_pack_size();
    uint64_t v32 = (char *)v46 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v33 = 138412290;
    *(void *)(v33 + 4) = service;
    __SC_log_send(6, (uint64_t)v22, v23, v32);
  }
  if (!__SCNetworkServiceMigrateNew(v5, (uint64_t)service, v4, v6, v7))
  {
    SCNetworkServiceGetName(service);
    uint64_t v34 = __log_SCNetworkConfiguration();
    uint64_t v35 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v34, (os_log_type_t)v35))
    {
      uint64_t v36 = _os_log_pack_size();
      uint64_t v44 = (char *)v46 - ((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v45 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v45 = 138412290;
      *(void *)(v45 + 4) = service;
      __SC_log_send(6, (uint64_t)v34, v35, v44);
    }
  }
}

void preserve_service_order(const __SCNetworkSet *a1, const __SCNetworkSet *a2, unsigned char *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*a3)
  {
    long long context = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    CFDictionaryRef v6 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayRef v8 = CFArrayCreateMutable(0, 0, v6);
    CFArrayRef ServiceOrder = SCNetworkSetGetServiceOrder(a1);
    if (ServiceOrder)
    {
      CFArrayRef v10 = ServiceOrder;
      CFArrayRef v11 = SCNetworkSetGetServiceOrder(a2);
      if (v11)
      {
        CFArrayRef v12 = v11;
        *(void *)&long long context = 0;
        *((void *)&context + 1) = v11;
        *(void *)&long long v44 = Mutable;
        *((void *)&v44 + 1) = a3;
        v46.CFIndex length = CFArrayGetCount(v10);
        v46.CFIndex location = 0;
        CFArrayApplyFunction(v10, v46, (CFArrayApplierFunction)create_migrated_order, &context);
        if (*a3)
        {
          *(void *)&long long v41 = *((void *)a2 + 3);
          *((void *)&v41 + 1) = v8;
          *(void *)&long long v42 = Mutable;
          *((void *)&v42 + 1) = a3;
          v47.CFIndex length = CFArrayGetCount(v12);
          v47.CFIndex location = 0;
          CFArrayApplyFunction(v12, v47, (CFArrayApplierFunction)create_non_migrated_service_list, &v41);
          if (CFArrayGetCount(v8) >= 1)
          {
            CFIndex v13 = 0;
            do
            {
              CFURLRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v13);
              SCNetworkSetRemoveService(a2, ValueAtIndex);
              ++v13;
            }
            while (v13 < CFArrayGetCount(v8));
          }
          SCNetworkSetSetServiceOrder(a2, Mutable);
          if (CFArrayGetCount(v8) >= 1)
          {
            CFIndex v16 = 0;
            *(void *)&long long v15 = 136315650;
            long long v38 = v15;
            do
            {
              uint64_t v17 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v16);
              if (!SCNetworkSetAddService(a2, v17))
              {
                SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(v17);
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                uint64_t v20 = __log_SCNetworkConfiguration();
                uint64_t v21 = _SC_syslog_os_log_mapping(5);
                if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
                {
                  uint64_t v22 = _os_log_pack_size();
                  uint64_t v40 = &v38;
                  uint64_t v30 = MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29);
                  uint64_t v39 = v20;
                  uint64_t v31 = (char *)&v38 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
                  __error();
                  uint64_t v32 = _os_log_pack_fill();
                  int v33 = SCError();
                  CFArrayRef v34 = Mutable;
                  uint64_t v35 = SCErrorString(v33);
                  CFStringRef ServiceID = SCNetworkServiceGetServiceID(v17);
                  *(_DWORD *)uint64_t v32 = v38;
                  uint64_t v37 = @"?";
                  if (BSDName) {
                    uint64_t v37 = (__CFString *)BSDName;
                  }
                  *(void *)(v32 + 4) = v35;
                  CFArrayRef Mutable = v34;
                  *(_WORD *)(v32 + 12) = 2112;
                  *(void *)(v32 + 14) = ServiceID;
                  *(_WORD *)(v32 + 22) = 2112;
                  *(void *)(v32 + 24) = v37;
                  __SC_log_send(5, (uint64_t)v39, v21, v31);
                }
              }
              ++v16;
            }
            while (v16 < CFArrayGetCount(v8));
          }
        }
      }
    }
    CFRelease(Mutable);
    CFRelease(v8);
  }
}

void create_migrated_order(const void *a1, uint64_t a2)
{
  if (**(unsigned char **)(a2 + 24))
  {
    CFArrayRef v4 = *(const __CFArray **)(a2 + 8);
    CFArrayRef v3 = *(__CFArray **)(a2 + 16);
    if (CFArrayGetCount(v4) >= 1)
    {
      CFIndex v5 = 0;
      while (1)
      {
        CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
        if (CFEqual(a1, ValueAtIndex)) {
          break;
        }
        if (++v5 >= CFArrayGetCount(v4)) {
          return;
        }
      }
      CFArrayAppendValue(v3, a1);
    }
  }
}

void create_non_migrated_service_list(const __CFString *a1, uint64_t a2)
{
  CFArrayRef v2 = *(unsigned char **)(a2 + 24);
  if (*v2)
  {
    CFIndex v5 = *(const __SCPreferences **)a2;
    CFArrayRef v4 = *(__CFArray **)(a2 + 8);
    CFArrayRef v6 = *(const __CFArray **)(a2 + 16);
    v10.CFIndex length = CFArrayGetCount(v6);
    v10.CFIndex location = 0;
    if (CFArrayGetFirstIndexOfValue(v6, v10, a1) == -1)
    {
      SCNetworkServiceRef v7 = SCNetworkServiceCopy(v5, a1);
      if (v7)
      {
        SCNetworkServiceRef v8 = v7;
        CFArrayAppendValue(v4, v7);
        CFRelease(v8);
      }
      else
      {
        unsigned char *v2 = 0;
      }
    }
  }
}

BOOL _SCHelperOpen(const __CFData *a1, mach_port_name_t *a2)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  v43[0] = 0;
  *a2 = 0;
  int v4 = _helper_server;
  CFIndex v5 = (ipc_space_t *)MEMORY[0x1E4F14960];
  if (!_helper_server)
  {
    do
    {
LABEL_3:
      pthread_mutex_lock(&_helper_lock);
      int v7 = _helper_server;
      if (_helper_server)
      {
        if (v4 != _helper_server) {
          goto LABEL_7;
        }
        mach_port_deallocate(*v5, v4);
      }
      int v7 = __SCHelperServerPort((_DWORD *)v43 + 1);
      _helper_server = v7;
      if (!v7)
      {
        LODWORD(v43[0]) = HIDWORD(v43[0]);
        pthread_mutex_unlock(&_helper_lock);
        goto LABEL_12;
      }
LABEL_7:
      pthread_mutex_unlock(&_helper_lock);
      int v4 = v7;
    }
    while (!v7);
  }
  int v6 = helperinit(v4, a2, v43);
  HIDWORD(v43[0]) = v6;
  if (v6 == 268435459) {
    goto LABEL_3;
  }
  if (v6) {
    LODWORD(v43[0]) = v6;
  }
LABEL_12:
  if (!*a2)
  {
    uint64_t v21 = __log_SCPreferences();
    uint64_t v22 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v21, (os_log_type_t)v22);
    if (!result) {
      return result;
    }
    uint64_t v24 = _os_log_pack_size();
    uint64_t v32 = (char *)v43 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    CFArrayRef v34 = SCErrorString(v43[0]);
    *(_DWORD *)uint64_t v33 = 136315138;
    *(void *)(v33 + 4) = v34;
    __SC_log_send(5, (uint64_t)v21, v22, v32);
    return 0;
  }
  if (!_SCHelperExec(*a2, 1, a1, v43, 0))
  {
    SCNetworkServiceRef v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v8, (os_log_type_t)v9)) {
      goto LABEL_22;
    }
    uint64_t v35 = _os_log_pack_size();
    uint64_t v18 = (char *)v43 - ((MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
LABEL_21:
    __SC_log_send(5, (uint64_t)v8, v9, v18);
LABEL_22:
    if (*a2)
    {
      mach_port_deallocate(*v5, *a2);
      BOOL result = 0;
      *a2 = 0;
      return result;
    }
    return 0;
  }
  if (LODWORD(v43[0]))
  {
    SCNetworkServiceRef v8 = __log_SCPreferences();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (!__SC_log_enabled(5, v8, (os_log_type_t)v9)) {
      goto LABEL_22;
    }
    uint64_t v10 = _os_log_pack_size();
    uint64_t v18 = (char *)v43 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = (_DWORD *)_os_log_pack_fill();
    int v20 = v43[0];
    *uint64_t v19 = 67109120;
    v19[1] = v20;
    goto LABEL_21;
  }
  return 1;
}

uint64_t __SCHelperServerPort(_DWORD *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v31 = 0;
  getenv("SCHELPER_SERVER");
  int v2 = bootstrap_look_up2();
  *a1 = v2;
  if (v2)
  {
    if (__SCHelperServerPort_once != -1) {
      dispatch_once(&__SCHelperServerPort_once, &__block_literal_global_15);
    }
    getpid();
    int v3 = sandbox_check();
    if (v3)
    {
      if (v3 == 1)
      {
        int v4 = __log_SCPreferences();
        uint64_t v5 = _SC_syslog_os_log_mapping(5);
        uint64_t result = __SC_log_enabled(5, v4, (os_log_type_t)v5);
        if (result)
        {
          uint64_t v7 = _os_log_pack_size();
          uint64_t v15 = &v30[-((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0)];
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send(5, (uint64_t)v4, v5, v15);
          return 0;
        }
        return result;
      }
      uint64_t v16 = __log_SCPreferences();
      uint64_t v17 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
      {
        uint64_t v18 = _os_log_pack_size();
        uint64_t v26 = &v30[-((MEMORY[0x1F4188790](v18, v19, v20, v21, v22, v23, v24, v25) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v27 = _os_log_pack_fill();
        uint64_t v28 = __error();
        uint64_t v29 = strerror(*v28);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = v29;
        __SC_log_send(5, (uint64_t)v16, v17, v26);
      }
    }
  }
  if (*a1) {
    return 0;
  }
  else {
    return v31;
  }
}

uint64_t _SCHelperExec(mach_port_t a1, int a2, const __CFData *a3, _DWORD *a4, void *a5)
{
  v29[1] = *(CFDataRef *)MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  CFDataRef v28 = 0;
  uint64_t v26 = 0;
  v29[0] = 0;
  if (_SCHelperExecCopyBacktrace_once != -1) {
    dispatch_once(&_SCHelperExecCopyBacktrace_once, &__block_literal_global_10);
  }
  if (_SCHelperExecCopyBacktrace_loggingEnabled != 1)
  {
    CFDataRef v11 = 0;
    if (a3) {
      goto LABEL_7;
    }
LABEL_10:
    BytePtr = 0;
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  uint64_t v10 = _SC_copyBacktrace();
  CFDataRef v11 = (CFDataRef)v10;
  if (v10)
  {
    _SCSerializeString(v10, v29, 0, 0);
    CFRelease(v11);
    CFDataRef v11 = v29[0];
  }
  if (!a3) {
    goto LABEL_10;
  }
LABEL_7:
  BytePtr = CFDataGetBytePtr(a3);
  LODWORD(a3) = CFDataGetLength(a3);
  if (v11)
  {
LABEL_8:
    uint64_t v13 = CFDataGetBytePtr(v11);
    int Length = CFDataGetLength(v11);
    mach_error_t v15 = helperexec(a1, a2, (uint64_t)BytePtr, (int)a3, (uint64_t)v13, Length, (int *)&v26, &v27, (_DWORD *)&v26 + 1);
    CFRelease(v11);
    goto LABEL_12;
  }
LABEL_11:
  mach_error_t v15 = helperexec(a1, a2, (uint64_t)BytePtr, (int)a3, 0, 0, (int *)&v26, &v27, (_DWORD *)&v26 + 1);
LABEL_12:
  if (v15)
  {
    if (v27) {
      MEMORY[0x192FA86E0](*MEMORY[0x1E4F14960], v27, HIDWORD(v26));
    }
    if (v15 != 268435459)
    {
      uint64_t v16 = __log_SCPreferences();
      uint64_t v17 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v16, (os_log_type_t)v17))
      {
        _os_log_pack_size();
        uint64_t v18 = (char *)&v25 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        uint64_t v20 = mach_error_string(v15);
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = v20;
        __SC_log_send(5, (uint64_t)v16, v17, v18);
      }
    }
    _SCErrorSet(v15);
    return 0;
  }
  else if (!v27 || (uint64_t result = _SCUnserializeData(&v28, v27, HIDWORD(v26)), result))
  {
    if (a4)
    {
      __SCPreferencesHandleInternalStatus((int *)&v26);
      *a4 = v26;
    }
    if (a5)
    {
      *a5 = v28;
    }
    else if (v28)
    {
      uint64_t v22 = __log_SCPreferences();
      uint64_t v23 = _SC_syslog_os_log_mapping(6);
      if (__SC_log_enabled(6, v22, (os_log_type_t)v23))
      {
        _os_log_pack_size();
        uint64_t v24 = (char *)&v25 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(6, (uint64_t)v22, v23, v24);
      }
      CFRelease(v28);
    }
    return 1;
  }
  return result;
}

void _SCHelperClose(mach_port_t *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (!_SCHelperExec(*a1, 9999, 0, 0, 0))
  {
    int v2 = __log_SCPreferences();
    uint64_t v3 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
    {
      _os_log_pack_size();
      int v4 = (char *)v5 - ((MEMORY[0x1F4188790]() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(6, (uint64_t)v2, v3, v4);
    }
  }
  if (*a1)
  {
    mach_port_deallocate(*MEMORY[0x1E4F14960], *a1);
    *a1 = 0;
  }
}

uint64_t _SCSecKeychainCopySystemKeychain()
{
  return 0;
}

uint64_t _SCSecKeychainPasswordItemCopy()
{
  return 0;
}

uint64_t _SCSecKeychainPasswordItemExists()
{
  return 0;
}

uint64_t _SCSecKeychainPasswordItemRemove()
{
  return 0;
}

uint64_t _SCSecKeychainPasswordItemSet()
{
  return 0;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemCopy()
{
  return 0;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemExists()
{
  return 0;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemRemove()
{
  return 0;
}

uint64_t _SCPreferencesSystemKeychainPasswordItemSet()
{
  return 0;
}

const void *SCNetworkSignatureCopyActiveIdentifierForAddress(uint64_t a1, uint64_t a2)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef NetworkServiceEntity = 0;
  cf[0] = 0;
  if (!a2 || *(unsigned char *)(a2 + 1) != 2 || *(unsigned char *)a2 != 16 || *(_DWORD *)(a2 + 4))
  {
    _SCErrorSet(1002);
    CFArrayRef v2 = 0;
    CFArrayRef v3 = 0;
LABEL_6:
    _SCErrorSet(1001);
    int v4 = 0;
    CFStringRef v5 = 0;
    goto LABEL_7;
  }
  cf[0] = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"State:", @"IPv4");
  uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef v2 = CFArrayCreate(0, cf, 1, MEMORY[0x1E4F1D510]);
  CFTypeRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", @"IPv4");
  CFArrayRef v3 = CFArrayCreate(0, &NetworkServiceEntity, 1, v7);
  CFDictionaryRef v8 = SCDynamicStoreCopyMultiple(0, v2, v3);
  if (!v8) {
    goto LABEL_6;
  }
  CFDictionaryRef v9 = v8;
  if (CFDictionaryGetCount(v8)
    && (v10 = CFDictionaryGetValue(v9, cf[0]), CFTypeID TypeID = CFDictionaryGetTypeID(), v10)
    && CFGetTypeID(v10) == TypeID
    && (CFStringRef v12 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v10, @"PrimaryService"), isA_CFString(v12)))
  {
    CFStringRef v5 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", v12, @"IPv4");
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v9, v5);
    if (isA_CFDictionary(Value) && CFDictionaryGetCount(Value))
    {
      uint64_t v14 = CFDictionaryGetValue(Value, @"NetworkSignature");
      mach_error_t v15 = isA_CFString(v14);
      int v4 = v15;
      if (v15) {
        CFRetain(v15);
      }
      else {
        _SCErrorSet(1001);
      }
      goto LABEL_29;
    }
  }
  else
  {
    CFStringRef v5 = 0;
  }
  _SCErrorSet(1001);
  int v4 = 0;
LABEL_29:
  CFRelease(v9);
LABEL_7:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v4;
}

__CFArray *SCNetworkSignatureCopyActiveIdentifiers()
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)uint64_t v45 = 0u;
  uint64_t v0 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  values = (void *)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, @"Setup:", @"IPv4");
  CFArrayRef v2 = CFArrayCreate(0, (const void **)&values, 1, v0);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", @"IPv4");
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFStringRef v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", @"IPv6");
  CFArrayAppendValue(Mutable, v4);
  CFDictionaryRef v5 = SCDynamicStoreCopyMultiple(0, v2, Mutable);
  if (!v5)
  {
    uint64_t v26 = 0;
    uint64_t v13 = 0;
    goto LABEL_42;
  }
  CFDictionaryRef MutableCopy = v5;
  if (CFDictionaryGetCount(v5))
  {
    CFStringRef v40 = NetworkServiceEntity;
    CFArrayRef v37 = v2;
    CFDictionaryRef v7 = MutableCopy;
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, MutableCopy);
    CFDictionaryRemoveValue(MutableCopy, values);
    CFDictionaryRef cf = v7;
    CFDictionaryRef Value = CFDictionaryGetValue(v7, values);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFStringRef v42 = v4;
    if (Value
      && CFGetTypeID(Value) == TypeID
      && (CFArrayRef v10 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)Value, @"ServiceOrder"),
          CFTypeID v11 = CFArrayGetTypeID(),
          v10)
      && CFGetTypeID(v10) == v11)
    {
      CFIndex Count = CFArrayGetCount(v10);
      uint64_t v13 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
      CFIndex v39 = Count;
      if (Count >= 1)
      {
        CFIndex v14 = 0;
        CFIndex range = 0;
        CFArrayRef v38 = v10;
        do
        {
          v44[0] = @"IPv4";
          v44[1] = @"IPv6";
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v14);
          CFTypeID v16 = CFStringGetTypeID();
          if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v16)
          {
            uint64_t v17 = 0;
            char v18 = 1;
            do
            {
              char v19 = v18;
              CFStringRef v20 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", ValueAtIndex, (CFStringRef)v44[v17]);
              CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, v20);
              CFTypeID v22 = CFDictionaryGetTypeID();
              if (v21 && CFGetTypeID(v21) == v22)
              {
                uint64_t v23 = CFDictionaryGetValue(v21, @"NetworkSignature");
                CFTypeID v24 = CFStringGetTypeID();
                if (v23)
                {
                  if (CFGetTypeID(v23) == v24)
                  {
                    v51.CFIndex location = 0;
                    v51.CFIndex length = range;
                    if (!CFArrayContainsValue(v13, v51, v23))
                    {
                      CFArrayAppendValue(v13, v23);
                      ++range;
                    }
                  }
                }
                CFDictionaryRemoveValue(MutableCopy, v20);
              }
              CFRelease(v20);
              char v18 = 0;
              uint64_t v17 = 1;
            }
            while ((v19 & 1) != 0);
          }
          ++v14;
          CFStringRef v4 = v42;
          CFArrayRef v10 = v38;
        }
        while (v14 != v39);
        CFIndex v25 = range;
LABEL_25:
        CFIndex v27 = CFDictionaryGetCount(MutableCopy);
        CFStringRef NetworkServiceEntity = v40;
        if (!v27)
        {
          uint64_t v26 = 0;
          goto LABEL_40;
        }
        uint64_t v28 = v27;
        if (v27 < 11)
        {
          uint64_t v26 = (const void **)v45;
          CFDictionaryGetKeysAndValues(MutableCopy, 0, (const void **)v45);
          if (v28 < 1) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v26 = (const void **)malloc_type_malloc(8 * v27, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(MutableCopy, 0, v26);
        }
        uint64_t v29 = Mutable;
        for (uint64_t i = 0; i != v28; ++i)
        {
          CFDictionaryRef v31 = (const __CFDictionary *)v26[i];
          CFTypeID v32 = CFDictionaryGetTypeID();
          if (v31)
          {
            if (CFGetTypeID(v31) == v32)
            {
              uint64_t v33 = CFDictionaryGetValue(v31, @"NetworkSignature");
              CFTypeID v34 = CFStringGetTypeID();
              if (v33)
              {
                if (CFGetTypeID(v33) == v34)
                {
                  v52.CFIndex location = 0;
                  v52.CFIndex length = v25;
                  if (!CFArrayContainsValue(v13, v52, v33))
                  {
                    CFArrayAppendValue(v13, v33);
                    ++v25;
                  }
                }
              }
            }
          }
        }
        CFArrayRef Mutable = v29;
        CFStringRef NetworkServiceEntity = v40;
        CFStringRef v4 = v42;
LABEL_40:
        CFRelease(cf);
        CFArrayRef v2 = v37;
        if (!MutableCopy) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v13 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    }
    CFIndex v25 = 0;
    goto LABEL_25;
  }
  uint64_t v26 = 0;
  uint64_t v13 = 0;
LABEL_41:
  CFRelease(MutableCopy);
LABEL_42:
  if (values) {
    CFRelease(values);
  }
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v26 && v26 != (const void **)v45) {
    free(v26);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (!v13) {
    goto LABEL_58;
  }
  if (!CFArrayGetCount(v13))
  {
    CFRelease(v13);
LABEL_58:
    _SCErrorSet(1001);
    return 0;
  }
  return v13;
}

CFTypeRef SCNetworkSignatureCopyIdentifierForConnectedSocket()
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)keys = 0u;
  if (copyconninfo()) {
    goto LABEL_2;
  }
  if ((MEMORY[0] & 2) == 0)
  {
    CFDictionaryRef v4 = 0;
    CFTypeRef v3 = 0;
    CFStringRef v2 = 0;
    CFURLRef v1 = 0;
    int v5 = 1001;
    freeconninfo();
    goto LABEL_5;
  }
  if (MEMORY[8])
  {
    int v7 = *(unsigned __int8 *)(MEMORY[8] + 1);
    if (v7 == 30)
    {
      CFDictionaryRef v8 = (const void *)(MEMORY[8] + 8);
      CFDictionaryRef v9 = &kSCPropNetIPv6Addresses;
    }
    else
    {
      if (v7 != 2)
      {
LABEL_2:
        CFStringRef v0 = 0;
        CFURLRef v1 = 0;
        CFStringRef v2 = 0;
        CFTypeRef v3 = 0;
        CFDictionaryRef v4 = 0;
        int v5 = 1002;
        goto LABEL_3;
      }
      CFDictionaryRef v8 = (const void *)(MEMORY[8] + 4);
      CFDictionaryRef v9 = &kSCPropNetIPv4Addresses;
    }
    CFStringRef v10 = *v9;
    CFTypeID v11 = (CFStringRef *)&kSCEntNetIPv6;
    if (v7 == 2) {
      CFTypeID v11 = (CFStringRef *)&kSCEntNetIPv4;
    }
    values[0] = (void *)SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", *v11);
    CFArrayRef v12 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFRelease(values[0]);
    CFDictionaryRef v4 = SCDynamicStoreCopyMultiple(0, 0, v12);
    CFRelease(v12);
    if (v4 && inet_ntop(v7, v8, (char *)values, 0x2Eu))
    {
      CFStringRef v2 = CFStringCreateWithCString(0, (const char *)values, 0x600u);
      if (v2)
      {
        if (MEMORY[4] && if_indextoname(MEMORY[4], (char *)values)) {
          CFStringRef v0 = CFStringCreateWithCString(0, (const char *)values, 0x600u);
        }
        else {
          CFStringRef v0 = 0;
        }
        CFIndex Count = CFDictionaryGetCount(v4);
        uint64_t v14 = Count;
        if (Count >= 11)
        {
          CFURLRef v1 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(v4, v1, 0);
          goto LABEL_39;
        }
        CFURLRef v1 = (const void **)keys;
        CFDictionaryGetKeysAndValues(v4, (const void **)keys, 0);
        if (v14 >= 1)
        {
LABEL_39:
          uint64_t v15 = 0;
          while (1)
          {
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, v1[v15]);
            CFTypeID TypeID = CFDictionaryGetTypeID();
            if (Value)
            {
              if (CFGetTypeID(Value) == TypeID)
              {
                char v18 = CFDictionaryGetValue(Value, @"NetworkSignature");
                CFTypeID v19 = CFStringGetTypeID();
                if (v18)
                {
                  if (CFGetTypeID(v18) == v19)
                  {
                    if (!v0
                      || (CFStringRef v20 = CFDictionaryGetValue(Value, @"InterfaceName"), v21 = CFStringGetTypeID(), v20)
                      && CFGetTypeID(v20) == v21
                      && CFEqual(v20, v0)
                      && ((CFTypeID v22 = CFDictionaryGetValue(Value, @"ConfirmedInterfaceName"),
                           CFTypeID v23 = CFStringGetTypeID(),
                           !v22)
                       || CFGetTypeID(v22) != v23
                       || CFEqual(v22, v0)))
                    {
                      CFArrayRef v24 = (const __CFArray *)CFDictionaryGetValue(Value, v10);
                      CFTypeID v25 = CFArrayGetTypeID();
                      if (v24)
                      {
                        if (CFGetTypeID(v24) == v25)
                        {
                          v32.CFIndex length = CFArrayGetCount(v24);
                          v32.CFIndex location = 0;
                          if (CFArrayContainsValue(v24, v32, v2)) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            ++v15;
            int v5 = 1001;
            if (v14 == v15)
            {
              CFTypeRef v3 = 0;
              goto LABEL_3;
            }
          }
          CFTypeRef v3 = CFRetain(v18);
          int v5 = 0;
          goto LABEL_3;
        }
      }
      else
      {
        CFStringRef v0 = 0;
        CFURLRef v1 = 0;
      }
    }
    else
    {
      CFStringRef v0 = 0;
      CFURLRef v1 = 0;
      CFStringRef v2 = 0;
    }
    CFTypeRef v3 = 0;
  }
  else
  {
    CFStringRef v0 = 0;
    CFURLRef v1 = 0;
    CFStringRef v2 = 0;
    CFTypeRef v3 = 0;
    CFDictionaryRef v4 = 0;
  }
  int v5 = 1001;
LABEL_3:
  if (v0) {
    CFRelease(v0);
  }
LABEL_5:
  if (v2) {
    CFRelease(v2);
  }
  if (v1 && v1 != (const void **)keys) {
    free(v1);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    _SCErrorSet(v5);
  }
  return v3;
}

Boolean CNSetSupportedSSIDs(CFArrayRef ssidArray)
{
  CFStringRef v2 = CNSetSupportedSSIDs_dyfunc;
  if (!CNSetSupportedSSIDs_dyfunc)
  {
    if (__loadCaptiveNetwork_once != -1) {
      dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
    }
    if (__loadCaptiveNetwork_image)
    {
      CFStringRef v2 = dlsym((void *)__loadCaptiveNetwork_image, "__CNSetSupportedSSIDs");
      CNSetSupportedSSIDs_dyfunCC_SHA256_CTX c = v2;
      if (v2) {
        goto LABEL_6;
      }
    }
    else
    {
      CFStringRef v2 = CNSetSupportedSSIDs_dyfunc;
      if (CNSetSupportedSSIDs_dyfunc) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:

  return ((uint64_t (*)(CFArrayRef))v2)(ssidArray);
}

Boolean CNMarkPortalOnline(CFStringRef interfaceName)
{
  CFStringRef v2 = CNMarkPortalOnline_dyfunc;
  if (!CNMarkPortalOnline_dyfunc)
  {
    if (__loadCaptiveNetwork_once != -1) {
      dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
    }
    if (__loadCaptiveNetwork_image)
    {
      CFStringRef v2 = dlsym((void *)__loadCaptiveNetwork_image, "__CNMarkPortalOnline");
      CNMarkPortalOnline_dyfunCC_SHA256_CTX c = v2;
      if (v2) {
        goto LABEL_6;
      }
    }
    else
    {
      CFStringRef v2 = CNMarkPortalOnline_dyfunc;
      if (CNMarkPortalOnline_dyfunc) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:

  return ((uint64_t (*)(CFStringRef))v2)(interfaceName);
}

Boolean CNMarkPortalOffline(CFStringRef interfaceName)
{
  CFStringRef v2 = CNMarkPortalOffline_dyfunc;
  if (!CNMarkPortalOffline_dyfunc)
  {
    if (__loadCaptiveNetwork_once != -1) {
      dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
    }
    if (__loadCaptiveNetwork_image)
    {
      CFStringRef v2 = dlsym((void *)__loadCaptiveNetwork_image, "__CNMarkPortalOffline");
      CNMarkPortalOffline_dyfunCC_SHA256_CTX c = v2;
      if (v2) {
        goto LABEL_6;
      }
    }
    else
    {
      CFStringRef v2 = CNMarkPortalOffline_dyfunc;
      if (CNMarkPortalOffline_dyfunc) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:

  return ((uint64_t (*)(CFStringRef))v2)(interfaceName);
}

CFArrayRef CNCopySupportedInterfaces(void)
{
  CFStringRef v0 = CNCopySupportedInterfaces_dyfunc;
  if (!CNCopySupportedInterfaces_dyfunc)
  {
    if (__loadCaptiveNetwork_once != -1) {
      dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
    }
    if (__loadCaptiveNetwork_image)
    {
      CFStringRef v0 = dlsym((void *)__loadCaptiveNetwork_image, "__CNCopySupportedInterfaces");
      CNCopySupportedInterfaces_dyfunCC_SHA256_CTX c = v0;
      if (v0) {
        goto LABEL_6;
      }
    }
    else
    {
      CFStringRef v0 = CNCopySupportedInterfaces_dyfunc;
      if (CNCopySupportedInterfaces_dyfunc) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:

  return (CFArrayRef)((uint64_t (*)(void))v0)();
}

CFDictionaryRef CNCopyCurrentNetworkInfo(CFStringRef interfaceName)
{
  CFStringRef v2 = CNCopyCurrentNetworkInfo_dyfunc;
  if (!CNCopyCurrentNetworkInfo_dyfunc)
  {
    if (__loadCaptiveNetwork_once != -1) {
      dispatch_once(&__loadCaptiveNetwork_once, &__block_literal_global_16);
    }
    if (__loadCaptiveNetwork_image)
    {
      CFStringRef v2 = dlsym((void *)__loadCaptiveNetwork_image, "__CNCopyCurrentNetworkInfo");
      CNCopyCurrentNetworkInfo_dyfunCC_SHA256_CTX c = v2;
      if (v2) {
        goto LABEL_6;
      }
    }
    else
    {
      CFStringRef v2 = CNCopyCurrentNetworkInfo_dyfunc;
      if (CNCopyCurrentNetworkInfo_dyfunc) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:

  return (CFDictionaryRef)((uint64_t (*)(CFStringRef))v2)(interfaceName);
}

void *____loadCaptiveNetwork_block_invoke()
{
  uint64_t result = _SC_dlopen("/System/Library/PrivateFrameworks/CaptiveNetwork.framework/CaptiveNetwork");
  __loadCaptiveNetwork_image = (uint64_t)result;
  return result;
}

uint64_t VPNConfigurationCreate()
{
  return 0;
}

uint64_t VPNConfigurationCreateWithOptions()
{
  return 0;
}

uint64_t VPNConfigurationGetTunnelType()
{
  return 1;
}

uint64_t VPNConfigurationCopyAll()
{
  return 0;
}

uint64_t VPNConfigurationCopy()
{
  return 0;
}

uint64_t VPNConfigurationSet()
{
  return 0;
}

uint64_t VPNConfigurationRemove()
{
  return 0;
}

uint64_t VPNConfigurationSetName()
{
  return 0;
}

uint64_t VPNConfigurationGetName()
{
  return 0;
}

uint64_t VPNConfigurationSetEnabled()
{
  return 0;
}

uint64_t VPNConfigurationGetEnabled()
{
  return 0;
}

uint64_t VPNConfigurationEnableVPNType()
{
  return 1;
}

uint64_t VPNConfigurationIsVPNTypeEnabled()
{
  return 1;
}

uint64_t VPNConfigurationCopyVendorData()
{
  return 0;
}

uint64_t VPNConfigurationSetVendorData()
{
  return 0;
}

uint64_t VPNCopyLastError()
{
  return 0;
}

uint64_t VPNConfigurationSetCallback()
{
  return 0;
}

uint64_t VPNConfigurationSetMessageCallback()
{
  return 0;
}

uint64_t VPNConfigurationScheduleWithRunLoop()
{
  return 0;
}

uint64_t VPNConfigurationUnscheduleFromRunLoop()
{
  return 0;
}

uint64_t VPNConfigurationConnectionStart()
{
  return 0;
}

uint64_t VPNConfigurationConnectionStop()
{
  return 0;
}

uint64_t VPNConfigurationGetStatus()
{
  return 0xFFFFFFFFLL;
}

uint64_t VPNConfigurationSendMessage()
{
  return 0;
}

uint64_t VPNConfigurationCopyIdentities()
{
  return 0;
}

uint64_t VPNConfigurationCopyCertificate()
{
  return 0;
}

uint64_t VPNConfigurationCopyLastConnectionError()
{
  return 0;
}

uint64_t VPNConfigurationSetPersistentData()
{
  return 0;
}

uint64_t VPNConfigurationCopyPersistentData()
{
  return 0;
}

uint64_t VPNConfigurationValidateCertificate()
{
  return 3;
}

uint64_t VPNConfigurationCopyAppRuleIDs()
{
  return 0;
}

uint64_t VPNConfigurationCopyAppRule()
{
  return 0;
}

uint64_t VPNConfigurationRemoveAppRule()
{
  return 0;
}

uint64_t VPNConfigurationSetAppRule()
{
  return 0;
}

uint64_t VPNTunnelSetStatus(uint64_t (**a1)(void))
{
  CFURLRef v1 = *a1;

  return v1();
}

uint64_t VPNTunnelSetPersistentData(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 8);

  return v1();
}

uint64_t VPNTunnelFetchCredentialComplete(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 24);

  return v1();
}

uint64_t VPNTunnelCopyPersistentData(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 16);

  return v1();
}

uint64_t VPNTunnelAuthenticate(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 32);

  return v1();
}

uint64_t VPNTunnelDisplayBanner(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 40);

  return v1();
}

uint64_t VPNTunnelSetConfigurationEntities(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 48);

  return v1();
}

uint64_t VPNTunnelSetTunnelSocket(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 56);

  return v1();
}

uint64_t VPNTunnelCryptoEnable(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 64);

  return v1();
}

uint64_t VPNTunnelCryptoDisable(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 72);

  return v1();
}

uint64_t VPNTunnelCryptoAddConfigurations(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 80);

  return v1();
}

uint64_t VPNTunnelCryptoRemoveConfigurations(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 88);

  return v1();
}

uint64_t VPNTunnelCryptoGenerateIndex(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 96);

  return v1();
}

uint64_t VPNTunnelCryptoStopDataTraffic(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 104);

  return v1();
}

uint64_t VPNTunnelCryptoStartDataTraffic(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 112);

  return v1();
}

uint64_t VPNTunnelClearConfiguration(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 120);

  return v1();
}

uint64_t VPNTunnelIPCSendMessage(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 128);

  return v1();
}

uint64_t VPNTunnelUpdatePlugin(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 136);

  return v1();
}

uint64_t VPNTunnelEnvironmentEventComplete(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 144);

  return v1();
}

uint64_t VPNTunnelCopySocketInfo(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 160);

  return v1();
}

uint64_t VPNTunnelIncrementDataSent(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 192);

  return v1();
}

uint64_t VPNTunnelIncrementDataReceived(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 200);

  return v1();
}

void VPNTunnelLog(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a3)
  {
    CFStringRef v11 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3, &a9);
    (*(void (**)(uint64_t, uint64_t, CFStringRef))(a1 + 152))(a1, a2, v11);
    CFRelease(v11);
  }
}

uint64_t VPNTunnelCopySavedConfiguration(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 168);

  return v1();
}

uint64_t VPNTunnelCopySavedVendorData(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 176);

  return v1();
}

uint64_t VPNTunnelCopySavedConfigurationName(uint64_t a1)
{
  CFURLRef v1 = *(uint64_t (**)(void))(a1 + 184);

  return v1();
}

void add_configured_interface(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  theArray[1] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  theArray[0] = 0;
  uint64_t Private = _SCBridgeInterfaceCreatePrivate(0, a1);
  if (!Private) {
    add_configured_interface_cold_1();
  }
  int v6 = (void *)Private;
  *(void *)(Private + 80) = CFRetain(*(CFTypeRef *)(a3 + 16));
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, @"Interfaces");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        for (CFIndex i = 0; i != v10; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Value, i);
          CFTypeID v13 = CFStringGetTypeID();
          if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v13) {
            add_interface(theArray, ValueAtIndex, *(const __SCPreferences **)(a3 + 8));
          }
        }
        CFArrayRef v14 = theArray[0];
        if (theArray[0])
        {
          __SCBridgeInterfaceSetMemberInterfaces((uint64_t)v6, theArray[0]);
          CFRelease(v14);
        }
      }
    }
  }
  CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"Options");
  CFTypeID v16 = CFDictionaryGetTypeID();
  if (v15)
  {
    if (CFGetTypeID(v15) == v16)
    {
      SCBridgeInterfaceSetOptions(v6, v15);
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(v15, @"__AUTO__");
    }
    else
    {
      CFDictionaryRef v15 = 0;
    }
  }
  CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(a2, @"UserDefinedName");
  CFTypeID v18 = CFStringGetTypeID();
  if (v17 && CFGetTypeID(v17) == v18)
  {
    SCBridgeInterfaceSetLocalizedDisplayName((uint64_t)v6, v17);
  }
  else
  {
    CFTypeID v19 = CFStringGetTypeID();
    if (v15)
    {
      if (CFGetTypeID(v15) == v19)
      {
        v6[6] = v15;
        CFStringRef v20 = (const void *)v6[7];
        if (v20)
        {
          CFRelease(v20);
          v6[7] = 0;
        }
      }
    }
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)a3, v6);

  CFRelease(v6);
}

void __SCBridgeInterfaceListCollectMembers(const __CFArray *a1, __CFSet *a2, int a3)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, i);
      CFIndex v10 = ValueAtIndex;
      if (!a3 || !SCBridgeInterfaceGetAllowConfiguredMembers(ValueAtIndex))
      {
        CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v10);
        if (MemberInterfaces)
        {
          CFArrayRef v12 = MemberInterfaces;
          CFIndex v13 = CFArrayGetCount(MemberInterfaces);
          if (v13 >= 1)
          {
            CFIndex v14 = v13;
            for (CFIndex j = 0; j != v14; ++j)
            {
              CFTypeID v16 = CFArrayGetValueAtIndex(v12, j);
              CFSetAddValue(a2, v16);
            }
          }
        }
      }
    }
  }
}

uint64_t SCBridgeInterfaceGetAllowConfiguredMembers(void *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1
    || CFGetTypeID(a1) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        !CFEqual(InterfaceType, @"Bridge")))
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)a1[45];
  if (!v4)
  {
    CFBooleanGetTypeID();
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue(v4, @"AllowConfiguredMembers");
  CFTypeID v6 = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != v6) {
    return 0;
  }

  return CFBooleanGetValue((CFBooleanRef)Value);
}

uint64_t SCBridgeInterfaceGetMemberInterfaces(const __SCNetworkInterface *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
      if (CFEqual(InterfaceType, @"Bridge")) {
        return *((void *)a1 + 44);
      }
    }
  }
  _SCErrorSet(1002);
  return 0;
}

__CFArray *SCBridgeInterfaceCopyAvailableMemberInterfaces(const __SCPreferences *a1)
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v3 = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFArrayRef v4 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  if (v4)
  {
    CFArrayRef v5 = v4;
    __SCBridgeInterfaceListCollectMembers(v4, v3, 0);
    CFRelease(v5);
  }
  CFArrayRef v6 = SCVLANInterfaceCopyAll(a1);
  if (v6)
  {
    CFArrayRef v7 = v6;
    CFIndex Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, i);
        SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(ValueAtIndex);
        CFSetAddValue(v3, PhysicalInterface);
      }
    }
    CFRelease(v7);
  }
  CFIndex v13 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v13)
  {
    CFArrayRef v14 = v13;
    CFIndex v15 = CFArrayGetCount(v13);
    if (v15 >= 1)
    {
      CFIndex v16 = v15;
      for (CFIndex j = 0; j != v16; ++j)
      {
        CFTypeID v18 = CFArrayGetValueAtIndex(v14, j);
        if (v18[344])
        {
          CFTypeID v19 = v18;
          if (!CFSetContainsValue(v3, v18)) {
            CFArrayAppendValue(Mutable, v19);
          }
        }
      }
    }
    CFRelease(v14);
  }
  CFRelease(v3);
  return Mutable;
}

__CFArray *_SCBridgeInterfaceCopyActive()
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v54 = 0;
  if (getifaddrs(&v54) == -1)
  {
    CFStringRef v17 = __error();
    _SCErrorSet(*v17);
    CFTypeID v18 = __log_SCNetworkConfiguration();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      long long v28 = (char *)&v51 - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      long long v30 = __error();
      CFDictionaryRef v31 = strerror(*v30);
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)(v29 + 4) = v31;
      __SC_log_send(5, (uint64_t)v18, v19, v28);
    }
    return 0;
  }
  int v0 = inet_dgram_socket();
  if (v0 == -1)
  {
    CFRange v32 = __error();
    _SCErrorSet(*v32);
    CFArrayRef Mutable = 0;
    goto LABEL_33;
  }
  int v1 = v0;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFTypeRef v3 = v54;
  if (!v54) {
    goto LABEL_28;
  }
  while (1)
  {
    CFMutableArrayRef v53 = 0;
    ifa_data = (unsigned __int8 *)v3->ifa_data;
    if (ifa_data)
    {
      if (v3->ifa_addr->sa_family == 18 && *ifa_data == 209)
      {
        ifa_io_name_t name = v3->ifa_name;
        size_t v6 = strlen(ifa_name);
        if (v6 < 4
          || (ifa_name[v6 - 1] - 48) > 9
          || (ifa_name[v6 - 2] - 48) > 9
          || (ifa_name[v6 - 3] - 48) >= 0xA)
        {
          uint64_t v57 = 0;
          long long v55 = 0u;
          long long v56 = 0u;
          __strlcpy_chk();
          *(void *)&long long v56 = 6;
          CFArrayRef v7 = malloc_type_malloc(0x50CuLL, 0xFC8CFC7FuLL);
          if (v7)
          {
            CFDictionaryRef v8 = v7;
            unsigned int v9 = 1280;
            size_t v10 = 1292;
            while (1)
            {
              bzero(v8, v10);
              *CFDictionaryRef v8 = v9;
              *(void *)(v8 + 1) = v8 + 3;
              *((void *)&v56 + 1) = 12;
              uint64_t v57 = v8;
              if (ioctl(v1, 0xC028697BuLL, &v55) == -1)
              {
                free(v8);
                goto LABEL_18;
              }
              if ((unint64_t)*v8 + 80 < v9) {
                break;
              }
              v9 *= 2;
              size_t v10 = v9 | 0xC;
              CFDictionaryRef v8 = reallocf(v8, v10);
              if (!v8) {
                goto LABEL_18;
              }
            }
            CFStringRef v11 = CFStringCreateWithCString(0, v3->ifa_name, 0x600u);
            uint64_t Private = (const void *)_SCBridgeInterfaceCreatePrivate(0, v11);
            CFRelease(v11);
            if (*v8 >= 0x50u)
            {
              CFRange v52 = Mutable;
              uint64_t v13 = 0;
              unint64_t v14 = 0;
              do
              {
                CFStringRef v15 = CFStringCreateWithCString(0, (const char *)(*(void *)(v8 + 1) + v13), 0x600u);
                add_interface(&v53, v15, 0);
                CFRelease(v15);
                ++v14;
                v13 += 80;
              }
              while (v14 < *v8 / 0x50uLL);
              CFArrayRef v16 = v53;
              free(v8);
              CFArrayRef Mutable = v52;
              if (v16)
              {
                __SCBridgeInterfaceSetMemberInterfaces((uint64_t)Private, v16);
                CFRelease(v16);
              }
            }
            else
            {
              free(v8);
            }
            CFArrayAppendValue(Mutable, Private);
            CFRelease(Private);
            goto LABEL_27;
          }
LABEL_18:
          if (*__error() != 16) {
            break;
          }
        }
      }
    }
LABEL_27:
    CFTypeRef v3 = v3->ifa_next;
    if (!v3) {
      goto LABEL_28;
    }
  }
  CFTypeID v34 = __error();
  _SCErrorSet(*v34);
  uint64_t v35 = __log_SCNetworkConfiguration();
  uint64_t v36 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v35, (os_log_type_t)v36))
  {
    uint64_t v38 = _os_log_pack_size();
    long long v46 = (char *)&v51 - ((MEMORY[0x1F4188790](v38, v39, v40, v41, v42, v43, v44, v45) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v47 = _os_log_pack_fill();
    long long v48 = v3->ifa_name;
    long long v49 = __error();
    uint64_t v50 = strerror(*v49);
    *(_DWORD *)uint64_t v47 = 136315394;
    *(void *)(v47 + 4) = v48;
    *(_WORD *)(v47 + 12) = 2080;
    *(void *)(v47 + 14) = v50;
    __SC_log_send(5, (uint64_t)v35, v36, v46);
  }
  CFRelease(Mutable);
  CFArrayRef Mutable = 0;
LABEL_28:
  close(v1);
LABEL_33:
  MEMORY[0x192FA7A70](v54);
  return Mutable;
}

uint64_t inet_dgram_socket()
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = socket(2, 2, 0);
  if (v0 == -1)
  {
    int v1 = __log_SCNetworkConfiguration();
    uint64_t v2 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v1, (os_log_type_t)v2))
    {
      uint64_t v3 = _os_log_pack_size();
      CFStringRef v11 = (char *)v16 - ((MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = __error();
      unint64_t v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v14;
      __SC_log_send(3, (uint64_t)v1, v2, v11);
    }
  }
  return v0;
}

void add_interface(CFMutableArrayRef *a1, const void *a2, const __SCPreferences *cf)
{
  if (*a1)
  {
    if (!cf)
    {
LABEL_6:
      uint64_t v6 = (const void *)_SCNetworkInterfaceCreateWithBSDName(0, a2, 0);
      if (!v6) {
        return;
      }
      goto LABEL_7;
    }
  }
  else
  {
    *a1 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (!cf) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = (const void *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, cf, a2);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_7:
  CFArrayAppendValue(*a1, v6);

  CFRelease(v6);
}

uint64_t __SCBridgeInterfaceSetMemberInterfaces(uint64_t a1, CFArrayRef theArray)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (!*(void *)(a1 + 80))
  {
    uint64_t v13 = 1;
LABEL_16:
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0, (uint64_t)ValueAtIndex, *(const void **)(a1 + 80), *(const void **)(a1 + 96));
        CFArrayAppendValue(Mutable, Copy);
        CFRelease(Copy);
      }
    }
    CFRelease(*(CFTypeRef *)(a1 + 352));
    *(void *)(a1 + 352) = Mutable;
    return v13;
  }
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", *(void *)(a1 + 112));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v5);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID)
  {
    CFRelease(v5);
    _SCErrorSet(1001);
    return 0;
  }
  uint64_t v8 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    for (CFIndex j = 0; j != Count; ++j)
    {
      uint64_t v10 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(theArray, j);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v10);
      CFArrayAppendValue(v8, BSDName);
    }
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  CFDictionarySetValue(MutableCopy, @"Interfaces", v8);
  CFRelease(v8);
  if (CFEqual(Value, MutableCopy)) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v5, MutableCopy);
  }
  CFRelease(MutableCopy);
  CFRelease(v5);
  if (v13) {
    goto LABEL_16;
  }
  return v13;
}

uint64_t SCBridgeInterfaceCreate(const void *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFStringRef v3 = CFStringCreateWithFormat(v2, 0, @"bridge%ld", 0);
  CFStringRef v4 = CFStringCreateWithFormat(v2, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", v3);
  if (SCPreferencesPathGetValue((SCPreferencesRef)a1, v4))
  {
    uint64_t v5 = 1;
    do
    {
      CFRelease(v4);
      CFRelease(v3);
      CFStringRef v3 = CFStringCreateWithFormat(v2, 0, @"bridge%ld", v5);
      CFStringRef v4 = CFStringCreateWithFormat(v2, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", v3);
      ++v5;
    }
    while (SCPreferencesPathGetValue((SCPreferencesRef)a1, v4));
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v7 = CFArrayCreate(v2, 0, 0, MEMORY[0x1E4F1D510]);
  CFDictionaryAddValue(Mutable, @"Interfaces", v7);
  CFRelease(v7);
  int v8 = SCPreferencesPathSetValue((SCPreferencesRef)a1, v4, Mutable);
  CFRelease(Mutable);
  CFRelease(v4);
  if (!v8)
  {
    CFRelease(v3);
    return 0;
  }
  uint64_t Private = _SCBridgeInterfaceCreatePrivate(v2, v3);
  CFRelease(v3);
  *(void *)(Private + 80) = CFRetain(a1);
  return Private;
}

uint64_t SCBridgeInterfaceRemove(SCPreferencesRef *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        CFEqual(InterfaceType, @"Bridge"))
    && a1[10])
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", BSDName);
    uint64_t v6 = SCPreferencesPathRemoveValue(a1[10], v5);
    CFRelease(v5);
    return v6;
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t SCBridgeInterfaceGetOptions(const __SCNetworkInterface *a1)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
      if (CFEqual(InterfaceType, @"Bridge")) {
        return *((void *)a1 + 45);
      }
    }
  }
  _SCErrorSet(1002);
  return 0;
}

uint64_t SCBridgeInterfaceSetMemberInterfaces(const __SCPreferences **a1, const void *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1) {
    goto LABEL_15;
  }
  if (CFGetTypeID(a1) != TypeID) {
    goto LABEL_15;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1);
  if (!CFEqual(InterfaceType, @"Bridge")) {
    goto LABEL_15;
  }
  int AllowConfiguredMembers = SCBridgeInterfaceGetAllowConfiguredMembers(a1);
  if (!a2) {
    goto LABEL_12;
  }
  CFTypeID v6 = CFArrayGetTypeID();
  if (CFGetTypeID(a2) != v6)
  {
LABEL_15:
    int v15 = 1002;
LABEL_16:
    _SCErrorSet(v15);
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v9);
      CFTypeID v11 = SCNetworkInterfaceGetTypeID();
      if (!ValueAtIndex
        || CFGetTypeID(ValueAtIndex) != v11
        || !SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex))
      {
        goto LABEL_15;
      }
    }
    while (v8 != ++v9);
  }
LABEL_12:
  if (!a1[10]) {
    goto LABEL_50;
  }
  CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces((const __SCNetworkInterface *)a1);
  CFArrayRef v13 = MemberInterfaces;
  if (MemberInterfaces) {
    CFIndex v14 = CFArrayGetCount(MemberInterfaces);
  }
  else {
    CFIndex v14 = 0;
  }
  CFStringRef v17 = SCBridgeInterfaceCopyAvailableMemberInterfaces(a1[10]);
  CFArrayRef v18 = v17;
  if (!v17)
  {
    CFIndex v19 = 0;
    if (!a2) {
      goto LABEL_38;
    }
    goto LABEL_22;
  }
  CFIndex v19 = CFArrayGetCount(v17);
  if (a2)
  {
LABEL_22:
    CFIndex v20 = CFArrayGetCount((CFArrayRef)a2);
    if (v20 < 1) {
      goto LABEL_38;
    }
    CFIndex v21 = v20;
    CFIndex v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = CFArrayGetValueAtIndex((CFArrayRef)a2, v22);
      if (!v13) {
        break;
      }
      v29.CFIndex location = 0;
      v29.CFIndex length = v14;
      int v25 = CFArrayContainsValue(v13, v29, v24);
      if (v18 && !v25) {
        goto LABEL_30;
      }
      if (!v25)
      {
        int v26 = 1002;
        if (v18) {
          goto LABEL_45;
        }
        goto LABEL_46;
      }
LABEL_35:
      if (v21 == ++v22)
      {
        int v26 = 0;
        if (v18) {
          goto LABEL_45;
        }
        goto LABEL_46;
      }
    }
    if (!v18)
    {
      int v26 = 1002;
      goto LABEL_46;
    }
LABEL_30:
    v30.CFIndex location = 0;
    v30.CFIndex length = v19;
    if (!CFArrayContainsValue(v18, v30, v24))
    {
      int v26 = 1002;
      goto LABEL_45;
    }
    if (!AllowConfiguredMembers && (v23 || (uint64_t v23 = __SCNetworkServiceCopyAllEnabled(a1[10])) != 0))
    {
      if (__SCNetworkServiceExistsForInterface(v23, v24))
      {
        int v26 = 1005;
        goto LABEL_45;
      }
    }
    goto LABEL_35;
  }
LABEL_38:
  int v26 = 0;
  uint64_t v23 = 0;
  if (v18) {
LABEL_45:
  }
    CFRelease(v18);
LABEL_46:
  if (v23) {
    CFRelease(v23);
  }
  if (v26)
  {
    int v15 = v26;
    goto LABEL_16;
  }
LABEL_50:

  return __SCBridgeInterfaceSetMemberInterfaces((uint64_t)a1, (CFArrayRef)a2);
}

uint64_t SCBridgeInterfaceSetLocalizedDisplayName(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1
    || CFGetTypeID((CFTypeRef)a1) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        !CFEqual(InterfaceType, @"Bridge"))
    || a2 && (CFTypeID v6 = CFStringGetTypeID(), CFGetTypeID(a2) != v6))
  {
    int v12 = 1002;
    goto LABEL_12;
  }
  if (*(void *)(a1 + 80))
  {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", *(void *)(a1 + 112));
    CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v9)
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
      CFDictionaryRef v11 = MutableCopy;
      if (a2) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", a2);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      if (CFEqual(Value, v11)) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v7, v11);
      }
      CFRelease(v11);
      CFRelease(v7);
      if (!v13) {
        return v13;
      }
      goto LABEL_21;
    }
    CFRelease(v7);
    int v12 = 1001;
LABEL_12:
    _SCErrorSet(v12);
    return 0;
  }
  uint64_t v13 = 1;
LABEL_21:
  int v15 = *(const void **)(a1 + 40);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 40) = 0;
  }
  if (a2) {
    *(void *)(a1 + 40) = CFStringCreateCopy(0, a2);
  }
  return v13;
}

uint64_t SCBridgeInterfaceSetOptions(const void *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        CFEqual(InterfaceType, @"Bridge"))
    && (!a2 || (CFTypeID v6 = CFDictionaryGetTypeID(), CFGetTypeID(a2) == v6)))
  {
    return __SCBridgeInterfaceSetOptions((uint64_t)a1, a2);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t __SCBridgeInterfaceSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  value[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 80))
  {
    uint64_t v21 = 1;
LABEL_15:
    CFIndex v22 = *(const void **)(a1 + 360);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 360) = 0;
    }
    if (theDict)
    {
      value[0] = 0;
      *(void *)(a1 + 360) = CFDictionaryCreateCopy(0, theDict);
      if (!*(void *)(a1 + 40))
      {
        if (CFDictionaryGetValueIfPresent(theDict, @"__AUTO__", (const void **)value))
        {
          uint64_t v24 = value[0];
          CFTypeID TypeID = CFStringGetTypeID();
          if (v24)
          {
            if (CFGetTypeID(v24) == TypeID)
            {
              *(void **)(a1 + 48) = value[0];
              int v26 = *(const void **)(a1 + 56);
              if (v26)
              {
                CFRelease(v26);
                *(void *)(a1 + 56) = 0;
              }
            }
          }
        }
      }
    }
    return v21;
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"Bridge", *(void *)(a1 + 112));
  CFDictionaryRef v5 = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v4);
  CFTypeID v6 = CFDictionaryGetTypeID();
  if (v5 && CFGetTypeID(v5) == v6)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5);
    CFDictionaryRef v8 = MutableCopy;
    if (theDict) {
      CFDictionarySetValue(MutableCopy, @"Options", theDict);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"Options");
    }
    if (CFEqual(v5, v8)) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v4, v8);
    }
    CFRelease(v8);
    CFRelease(v4);
    if (!v21) {
      return v21;
    }
    goto LABEL_15;
  }
  CFTypeID v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    CFIndex v19 = (char *)value - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v20 + 4) = "__SCBridgeInterfaceSetOptions";
    __SC_log_send(5, (uint64_t)v9, v10, v19);
  }
  CFRelease(v4);
  _SCErrorSet(1001);
  return 0;
}

uint64_t __SCBridgeInterfaceSetAutoConfigure(uint64_t a1, int a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 360);
  if (v4)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v4);
    BOOL v6 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    BOOL v6 = 1;
    if (a2)
    {
LABEL_3:
      CFDictionaryRemoveValue(MutableCopy, @"AutoConfigure");
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  CFDictionarySetValue(MutableCopy, @"AutoConfigure", (const void *)*MEMORY[0x1E4F1CFC8]);
  if (v4) {
LABEL_4:
  }
    BOOL v6 = CFEqual(v4, MutableCopy) == 0;
LABEL_5:
  if (v6) {
    uint64_t v7 = __SCBridgeInterfaceSetOptions(a1, MutableCopy);
  }
  else {
    uint64_t v7 = 1;
  }
  CFRelease(MutableCopy);
  return v7;
}

uint64_t __SCBridgeInterfaceGetAutoConfigure(uint64_t a1)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 360);
  if (!v1)
  {
    CFBooleanGetTypeID();
    return 1;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(v1, @"AutoConfigure");
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 1;
  }

  return CFBooleanGetValue((CFBooleanRef)Value);
}

uint64_t SCBridgeInterfaceSetAllowConfiguredMembers(CFDictionaryRef *a1, int a2)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1
    || CFGetTypeID(a1) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType((SCNetworkInterfaceRef)a1),
        !CFEqual(InterfaceType, @"Bridge")))
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFDictionaryRef v6 = a1[45];
  if (v6)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a1[45]);
    BOOL v8 = 0;
    if (a2) {
      goto LABEL_6;
    }
LABEL_13:
    CFDictionaryRemoveValue(MutableCopy, @"AllowConfiguredMembers");
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  BOOL v8 = 1;
  if (!a2) {
    goto LABEL_13;
  }
LABEL_6:
  CFDictionarySetValue(MutableCopy, @"AllowConfiguredMembers", (const void *)*MEMORY[0x1E4F1CFD0]);
  if (v6) {
LABEL_7:
  }
    BOOL v8 = CFEqual(v6, MutableCopy) == 0;
LABEL_8:
  if (v8) {
    uint64_t v9 = __SCBridgeInterfaceSetOptions((uint64_t)a1, MutableCopy);
  }
  else {
    uint64_t v9 = 1;
  }
  CFRelease(MutableCopy);
  return v9;
}

uint64_t _SCBridgeInterfaceUpdateConfiguration(const __SCPreferences *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFArrayRef v2 = (const __CFArray *)SCBridgeInterfaceCopyAll(a1);
  CFArrayRef v3 = v2;
  if (v2) {
    CFIndex Count = CFArrayGetCount(v2);
  }
  else {
    CFIndex Count = 0;
  }
  CFDictionaryRef v6 = _SCBridgeInterfaceCopyActive();
  CFArrayRef v61 = v3;
  CFIndex v62 = Count;
  uint64_t v63 = a1;
  CFArrayRef theArray = v6;
  if (!v6)
  {
    int v60 = 0;
    CFIndex v67 = 0;
LABEL_34:
    unsigned __int8 v5 = 1;
    int v9 = -1;
    goto LABEL_35;
  }
  CFArrayRef v7 = v6;
  CFIndex v67 = CFArrayGetCount(v6);
  if (v67 < 1)
  {
    int v60 = 0;
    goto LABEL_34;
  }
  CFIndex v8 = 0;
  int v9 = -1;
  unsigned __int8 v5 = 1;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v7, v8);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (Count >= 1)
    {
      CFIndex v12 = 0;
      while (1)
      {
        uint64_t v13 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v3, v12);
        CFStringRef v14 = SCNetworkInterfaceGetBSDName(v13);
        if (CFEqual(BSDName, v14)) {
          break;
        }
        if (Count == ++v12) {
          goto LABEL_13;
        }
      }
      CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v13);
      CFArrayRef v17 = MemberInterfaces;
      if (MemberInterfaces) {
        CFIndex v18 = CFArrayGetCount(MemberInterfaces);
      }
      else {
        CFIndex v18 = 0;
      }
      CFArrayRef v19 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(ValueAtIndex);
      if (v19)
      {
        CFArrayRef v20 = v19;
        CFIndex v21 = CFArrayGetCount(v19);
        if (v21 >= 1)
        {
          CFIndex v22 = v21;
          CFIndex v23 = 0;
          while (1)
          {
            uint64_t v24 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v20, v23);
            if (!v18 || (v69.CFIndex location = 0, v69.length = v18, !CFArrayContainsValue(v17, v69, v24)))
            {
              if (v9 == -1)
              {
                int v9 = inet_dgram_socket();
                if (v9 == -1) {
                  goto LABEL_94;
                }
              }
              CFStringRef v25 = SCNetworkInterfaceGetBSDName(v24);
              if (!__bridge_remove_interface(v9, BSDName, v25)) {
                unsigned __int8 v5 = 0;
              }
            }
            if (v22 == ++v23) {
              goto LABEL_30;
            }
          }
        }
      }
      goto LABEL_30;
    }
LABEL_13:
    if (v9 == -1)
    {
      int v9 = inet_dgram_socket();
      if (v9 == -1) {
        break;
      }
    }
    if (!__destroyInterface(v9, BSDName))
    {
      uint64_t v15 = __error();
      _SCErrorSet(*v15);
      unsigned __int8 v5 = 0;
    }
LABEL_30:
    ++v8;
    CFArrayRef v7 = theArray;
    CFArrayRef v3 = v61;
    CFIndex Count = v62;
    if (v8 == v67)
    {
      int v60 = 1;
LABEL_35:
      if (Count < 1) {
        goto LABEL_95;
      }
      CFIndex v26 = 0;
      while (1)
      {
        uint64_t v27 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v3, v26);
        int AllowConfiguredMembers = SCBridgeInterfaceGetAllowConfiguredMembers(v27);
        CFStringRef v29 = SCNetworkInterfaceGetBSDName(v27);
        CFArrayRef v30 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v27);
        CFArrayRef v31 = v30;
        CFIndex v64 = v26;
        int v65 = AllowConfiguredMembers;
        if (v30) {
          uint64_t v32 = CFArrayGetCount(v30);
        }
        else {
          uint64_t v32 = 0;
        }
        if (!v60)
        {
LABEL_47:
          if (v9 == -1)
          {
            int v9 = inet_dgram_socket();
            if (v9 == -1) {
              goto LABEL_94;
            }
          }
          if (__createInterface(v9, v29))
          {
            if (v32 >= 1)
            {
              CFIndex v39 = 0;
              BOOL v40 = v65 == 0;
              do
              {
                uint64_t v41 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v31, v39);
                if (*((unsigned char *)v41 + 344))
                {
                  uint64_t v42 = v41;
                  if (v40)
                  {
                    CFDataRef HardwareAddress = (const __CFData *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v41);
                    if (!__bridge_set_mac(v9, v29, HardwareAddress)) {
                      unsigned __int8 v5 = 0;
                    }
                  }
                  CFStringRef v44 = SCNetworkInterfaceGetBSDName(v42);
                  BOOL v40 = 0;
                  if (!__bridge_add_interface(v63, v9, v29, v44)) {
                    unsigned __int8 v5 = 0;
                  }
                }
                ++v39;
              }
              while (v32 != v39);
            }
          }
          else
          {
            uint64_t v45 = __error();
            _SCErrorSet(*v45);
            unsigned __int8 v5 = 0;
          }
          goto LABEL_91;
        }
        CFIndex v33 = 0;
        while (1)
        {
          CFTypeID v34 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(theArray, v33);
          CFStringRef v35 = SCNetworkInterfaceGetBSDName(v34);
          CFArrayRef v36 = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces(v34);
          CFArrayRef v37 = v36;
          CFIndex v38 = v36 ? CFArrayGetCount(v36) : 0;
          if (CFEqual(v29, v35)) {
            break;
          }
          if (v67 == ++v33) {
            goto LABEL_47;
          }
        }
        if (v31 == v37 || v31 && v37 && CFEqual(v31, v37)) {
          goto LABEL_92;
        }
        if (v9 == -1)
        {
          int v9 = inet_dgram_socket();
          if (v9 == -1) {
            goto LABEL_94;
          }
        }
        int v46 = v65;
        if (!v65 && v32 >= 1 && v38 >= 1)
        {
          uint64_t v47 = CFArrayGetValueAtIndex(v31, 0);
          long long v48 = CFArrayGetValueAtIndex(v37, 0);
          if (CFEqual(v47, v48))
          {
            BOOL v49 = 0;
LABEL_79:
            CFIndex v53 = 0;
            BOOL v66 = v49;
            if (v46) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v49;
            }
            do
            {
              long long v55 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v31, v53);
              if (v66 || (v71.CFIndex location = 0, v71.length = v38, !CFArrayContainsValue(v37, v71, v55)))
              {
                if (*((unsigned char *)v55 + 344))
                {
                  if (v54)
                  {
                    CFDataRef v56 = (const __CFData *)_SCNetworkInterfaceGetHardwareAddress((uint64_t)v55);
                    if (!__bridge_set_mac(v9, v29, v56)) {
                      unsigned __int8 v5 = 0;
                    }
                  }
                  CFStringRef v57 = SCNetworkInterfaceGetBSDName(v55);
                  BOOL v54 = 0;
                  if (!__bridge_add_interface(v63, v9, v29, v57)) {
                    unsigned __int8 v5 = 0;
                  }
                }
              }
              ++v53;
            }
            while (v32 != v53);
            goto LABEL_91;
          }
          for (CFIndex i = 0; i != v38; ++i)
          {
            uint64_t v51 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v37, i);
            v70.CFIndex location = 0;
            v70.CFIndex length = v32;
            if (CFArrayContainsValue(v31, v70, v51))
            {
              CFStringRef v52 = SCNetworkInterfaceGetBSDName(v51);
              if (!__bridge_remove_interface(v9, v35, v52)) {
                unsigned __int8 v5 = 0;
              }
            }
          }
          CFIndex v38 = 0;
          int v46 = 0;
        }
        BOOL v49 = v38 == 0;
        if (v32 >= 1) {
          goto LABEL_79;
        }
LABEL_91:
        CFArrayRef v3 = v61;
LABEL_92:
        CFIndex v26 = v64 + 1;
        if (v64 + 1 == v62) {
          goto LABEL_95;
        }
      }
    }
  }
LABEL_94:
  uint64_t v58 = __error();
  _SCErrorSet(*v58);
  unsigned __int8 v5 = 0;
  int v9 = -1;
  CFArrayRef v3 = v61;
LABEL_95:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v9 != -1) {
    close(v9);
  }
  return v5;
}

BOOL __bridge_remove_interface(int a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFArrayRef v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v34, 16, 0x600u);
  long long v35 = xmmword_18E2E84E0;
  CFArrayRef v36 = v37;
  memset(v37, 0, sizeof(v37));
  _SC_cfstring_to_cstring(a3, (UInt8 *)v37, 16, 0x600u);
  if (ioctl(a1, 0x8028697BuLL, &v34) == -1)
  {
    CFArrayRef v19 = __error();
    _SCErrorSet(*v19);
    CFArrayRef v20 = __log_SCNetworkConfiguration();
    uint64_t v21 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v20, (os_log_type_t)v21);
    if (result)
    {
      uint64_t v22 = _os_log_pack_size();
      CFArrayRef v30 = (char *)&v34 - ((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v31 = _os_log_pack_fill();
      uint64_t v32 = __error();
      CFIndex v33 = strerror(*v32);
      *(_DWORD *)uint64_t v31 = 138412802;
      *(void *)(v31 + 4) = a3;
      *(_WORD *)(v31 + 12) = 2112;
      *(void *)(v31 + 14) = a2;
      *(_WORD *)(v31 + 22) = 2080;
      *(void *)(v31 + 24) = v33;
      __SC_log_send(3, (uint64_t)v20, v21, v30);
      return 0;
    }
  }
  else
  {
    CFDictionaryRef v6 = __log_SCNetworkConfiguration();
    uint64_t v7 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)&v34 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 138412546;
      *(void *)(v17 + 4) = a2;
      *(_WORD *)(v17 + 12) = 2112;
      *(void *)(v17 + 14) = a3;
      __SC_log_send(6, (uint64_t)v6, v7, v16);
    }
    return 1;
  }
  return result;
}

BOOL __bridge_set_mac(int a1, const __CFString *a2, const __CFData *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v45 = 0u;
  long long v46 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v45, 16, 0x600u);
  unsigned __int8 Length = CFDataGetLength(a3);
  LOBYTE(v46) = Length;
  if (Length >= 0xFuLL)
  {
    _SCErrorSet(1002);
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v7, (os_log_type_t)v8);
    if (!result) {
      return result;
    }
    uint64_t v10 = _os_log_pack_size();
    CFIndex v18 = (char *)&v45 - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    int v20 = v46;
    *(_DWORD *)uint64_t v19 = 138412802;
    *(void *)(v19 + 4) = a2;
    *(_WORD *)(v19 + 12) = 1024;
    *(_DWORD *)(v19 + 14) = v20;
    *(_WORD *)(v19 + 18) = 2048;
    *(void *)(v19 + 20) = 14;
LABEL_10:
    __SC_log_send(3, (uint64_t)v7, v8, v18);
    return 0;
  }
  v48.CFIndex location = 0;
  v48.CFIndex length = Length;
  CFDataGetBytes(a3, v48, (UInt8 *)&v46 + 2);
  if (ioctl(a1, 0x8020693CuLL, &v45) == -1)
  {
    CFIndex v33 = __error();
    _SCErrorSet(*v33);
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v7, (os_log_type_t)v8);
    if (!result) {
      return result;
    }
    uint64_t v34 = _os_log_pack_size();
    CFIndex v18 = (char *)&v45 - ((MEMORY[0x1F4188790](v34, v35, v36, v37, v38, v39, v40, v41) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v42 = _os_log_pack_fill();
    uint64_t v43 = __error();
    CFStringRef v44 = strerror(*v43);
    *(_DWORD *)uint64_t v42 = 138412546;
    *(void *)(v42 + 4) = a2;
    *(_WORD *)(v42 + 12) = 2080;
    *(void *)(v42 + 14) = v44;
    goto LABEL_10;
  }
  uint64_t v21 = __log_SCNetworkConfiguration();
  uint64_t v22 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v21, (os_log_type_t)v22))
  {
    uint64_t v23 = _os_log_pack_size();
    uint64_t v31 = (char *)&v45 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v32 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v32 = 138412547;
    *(void *)(v32 + 4) = a2;
    *(_WORD *)(v32 + 12) = 2113;
    *(void *)(v32 + 14) = a3;
    __SC_log_send(6, (uint64_t)v21, v22, v31);
  }
  return 1;
}

BOOL __bridge_add_interface(const __SCPreferences *a1, int a2, const __CFString *a3, const __CFString *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  set_configured_mtu(a1, a2, a4);
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  _SC_cfstring_to_cstring(a3, (UInt8 *)&v35, 16, 0x600u);
  long long v36 = xmmword_18E2E84F0;
  uint64_t v37 = v38;
  memset(v38, 0, sizeof(v38));
  _SC_cfstring_to_cstring(a4, (UInt8 *)v38, 16, 0x600u);
  if (ioctl(a2, 0x8028697BuLL, &v35) == -1)
  {
    int v20 = __error();
    _SCErrorSet(*v20);
    uint64_t v21 = __log_SCNetworkConfiguration();
    uint64_t v22 = _SC_syslog_os_log_mapping(3);
    BOOL result = __SC_log_enabled(3, v21, (os_log_type_t)v22);
    if (result)
    {
      uint64_t v23 = _os_log_pack_size();
      uint64_t v31 = (char *)&v35 - ((MEMORY[0x1F4188790](v23, v24, v25, v26, v27, v28, v29, v30) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      CFIndex v33 = __error();
      uint64_t v34 = strerror(*v33);
      *(_DWORD *)uint64_t v32 = 138412802;
      *(void *)(v32 + 4) = a4;
      *(_WORD *)(v32 + 12) = 2112;
      *(void *)(v32 + 14) = a3;
      *(_WORD *)(v32 + 22) = 2080;
      *(void *)(v32 + 24) = v34;
      __SC_log_send(3, (uint64_t)v21, v22, v31);
      return 0;
    }
  }
  else
  {
    uint64_t v7 = __log_SCNetworkConfiguration();
    uint64_t v8 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v7, (os_log_type_t)v8))
    {
      uint64_t v9 = _os_log_pack_size();
      uint64_t v17 = (char *)&v35 - ((MEMORY[0x1F4188790](v9, v10, v11, v12, v13, v14, v15, v16) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 138412546;
      *(void *)(v18 + 4) = a3;
      *(_WORD *)(v18 + 12) = 2112;
      *(void *)(v18 + 14) = a4;
      __SC_log_send(6, (uint64_t)v7, v8, v17);
    }
    return 1;
  }
  return result;
}

void set_configured_mtu(const __SCPreferences *a1, int a2, const __CFString *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v55 = 0u;
  long long v56 = 0u;
  int valuePtr = 0;
  CFDictionaryRef v6 = SCNetworkSetCopyCurrent(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    CFStringRef SetID = SCNetworkSetGetSetID(v6);
    CFStringRef SetNetworkInterfaceEntity = SCPreferencesPathKeyCreateSetNetworkInterfaceEntity(0, (uint64_t)SetID, (uint64_t)a3, @"Ethernet");
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, SetNetworkInterfaceEntity);
    CFRelease(SetNetworkInterfaceEntity);
    if (!Value) {
      goto LABEL_14;
    }
    uint64_t v11 = CFDictionaryGetValue(Value, @"MTU");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!v11 || CFGetTypeID(v11) != TypeID || !CFNumberGetValue((CFNumberRef)v11, kCFNumberIntType, &valuePtr)) {
      goto LABEL_14;
    }
    long long v55 = 0u;
    long long v56 = 0u;
    _SC_cfstring_to_cstring(a3, (UInt8 *)&v55, 16, 0x8000100u);
    LODWORD(v56) = valuePtr;
    int v13 = ioctl(a2, 0x80206934uLL, &v55);
    uint64_t v14 = __log_SCNetworkConfiguration();
    if (v13 < 0)
    {
      uint64_t v15 = _SC_syslog_os_log_mapping(3);
      if (__SC_log_enabled(3, v14, (os_log_type_t)v15))
      {
        uint64_t v40 = _os_log_pack_size();
        uint64_t v24 = &v53[-((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v48 = _os_log_pack_fill();
        int v49 = valuePtr;
        uint64_t v50 = __error();
        uint64_t v51 = strerror(*v50);
        int v52 = *__error();
        *(_DWORD *)uint64_t v48 = 136316162;
        *(void *)(v48 + 4) = "BridgeConfiguration";
        *(_WORD *)(v48 + 12) = 2080;
        *(void *)(v48 + 14) = &v55;
        *(_WORD *)(v48 + 22) = 1024;
        *(_DWORD *)(v48 + 24) = v49;
        *(_WORD *)(v48 + 28) = 2080;
        *(void *)(v48 + 30) = v51;
        *(_WORD *)(v48 + 38) = 1024;
        *(_DWORD *)(v48 + 40) = v52;
        int v27 = 3;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v15 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
      {
        uint64_t v16 = _os_log_pack_size();
        uint64_t v24 = &v53[-((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v25 = _os_log_pack_fill();
        int v26 = valuePtr;
        *(_DWORD *)uint64_t v25 = 136315650;
        *(void *)(v25 + 4) = "BridgeConfiguration";
        *(_WORD *)(v25 + 12) = 2080;
        *(void *)(v25 + 14) = &v55;
        *(_WORD *)(v25 + 22) = 1024;
        *(_DWORD *)(v25 + 24) = v26;
        int v27 = 5;
LABEL_13:
        __SC_log_send(v27, (uint64_t)v14, v15, v24);
      }
    }
LABEL_14:
    CFRelease(v7);
    return;
  }
  uint64_t v28 = __log_SCNetworkConfiguration();
  uint64_t v29 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v28, (os_log_type_t)v29))
  {
    uint64_t v30 = _os_log_pack_size();
    uint64_t v38 = &v53[-((MEMORY[0x1F4188790](v30, v31, v32, v33, v34, v35, v36, v37) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    uint64_t v39 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v39 = 136315138;
    *(void *)(v39 + 4) = "set_configured_mtu";
    __SC_log_send(5, (uint64_t)v28, v29, v38);
  }
}

uint64_t SCNSManagerCreate(uint64_t a1)
{
  return __SCNSManagerCreateCommon(a1, 0, 0);
}

uint64_t __SCNSManagerCreateCommon(uint64_t a1, const AuthorizationOpaqueRef *a2, int a3)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"SCNSManager(%@)", a1);
  if (a3) {
    SCPreferencesRef v6 = SCPreferencesCreateWithAuthorization(0, v5, 0, a2);
  }
  else {
    SCPreferencesRef v6 = SCPreferencesCreate(0, v5, 0);
  }
  SCPreferencesRef v7 = v6;
  CFRelease(v5);
  if (!v7)
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v20 = (char *)v34 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      int v22 = SCError();
      uint64_t v23 = SCErrorString(v22);
      *(_DWORD *)uint64_t v21 = 136315138;
      *(void *)(v21 + 4) = v23;
LABEL_13:
      __SC_log_send(5, (uint64_t)v10, v11, v20);
    }
    return 0;
  }
  if (__SCNetworkSettingsInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSettingsInitialize_initialized, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    CFRelease(v7);
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v20 = (char *)v34 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)(v32 + 4) = "__SCNSManagerCreateCommon";
      goto LABEL_13;
    }
    return 0;
  }
  uint64_t v9 = Instance;
  CFRetain(v7);
  *(void *)(v9 + 16) = v7;
  CFRelease(v7);
  return v9;
}

uint64_t SCNSManagerCreateWithAuthorization(uint64_t a1, const AuthorizationOpaqueRef *a2)
{
  return __SCNSManagerCreateCommon(a1, a2, 1);
}

void SCNSManagerRefresh(uint64_t a1)
{
  CFDictionaryRef v1 = *(const __SCPreferences **)(a1 + 16);

  SCPreferencesSynchronize(v1);
}

void SCNSManagerRemoveService(uint64_t a1, void *value)
{
  CFDictionaryRef v4 = *(__CFSet **)(a1 + 48);
  if (v4) {
    CFSetRemoveValue(v4, value);
  }
  CFArrayRef Mutable = *(__CFSet **)(a1 + 56);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    *(void *)(a1 + 56) = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

uint64_t SCNSManagerApplyChanges(SCPreferencesRef *a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFSetRef v2 = a1[6];
  if (!v2 || !CFSetGetCount(v2))
  {
    CFSetRef v3 = a1[7];
    if (!v3 || !CFSetGetCount(v3))
    {
      CFStringRef v5 = _SC_LOG_DEFAULT();
      uint64_t v6 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
      {
        uint64_t v7 = _os_log_pack_size();
        uint64_t v15 = &v63[-((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v16 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v16 + 4) = "SCNSManagerApplyChanges";
        __SC_log_send(5, (uint64_t)v5, v6, v15);
      }
      uint64_t v17 = 1;
      goto LABEL_34;
    }
  }
  int v4 = 10;
  while (1)
  {
    if (SCPreferencesLock(a1[2], 1u))
    {
      CFSetRef v18 = a1[7];
      if (v18)
      {
        if (CFSetGetCount(v18))
        {
          char context = 0;
          CFSetApplyFunction(a1[7], (CFSetApplierFunction)managerRemove, &context);
          uint64_t v17 = 0;
          if (context) {
            goto LABEL_33;
          }
        }
      }
      CFSetRef v19 = a1[6];
      if (v19)
      {
        if (CFSetGetCount(v19))
        {
          char v65 = 0;
          CFSetApplyFunction(a1[6], (CFSetApplierFunction)managerChange, &v65);
          uint64_t v17 = 0;
          if (v65) {
            goto LABEL_33;
          }
        }
      }
      if (SCPreferencesCommitChanges(a1[2]))
      {
        if (SCPreferencesApplyChanges(a1[2]))
        {
          uint64_t v17 = 1;
LABEL_33:
          SCPreferencesUnlock(a1[2]);
          goto LABEL_34;
        }
        uint64_t v46 = _SC_LOG_DEFAULT();
        uint64_t v47 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v46, (os_log_type_t)v47)) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v46 = _SC_LOG_DEFAULT();
        uint64_t v47 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v46, (os_log_type_t)v47))
        {
LABEL_31:
          uint64_t v48 = _os_log_pack_size();
          long long v56 = &v63[-((MEMORY[0x1F4188790](v48, v49, v50, v51, v52, v53, v54, v55) + 15) & 0xFFFFFFFFFFFFFFF0)];
          __error();
          uint64_t v57 = _os_log_pack_fill();
          int v58 = SCError();
          stat v59 = SCErrorString(v58);
          *(_DWORD *)uint64_t v57 = 136315394;
          *(void *)(v57 + 4) = "SCNSManagerApplyChanges";
          *(_WORD *)(v57 + 12) = 2080;
          *(void *)(v57 + 14) = v59;
          __SC_log_send(5, (uint64_t)v46, v47, v56);
        }
      }
      uint64_t v17 = 0;
      goto LABEL_33;
    }
    if (SCError() != 3005) {
      break;
    }
    SCPreferencesSynchronize(a1[2]);
    if (!--v4) {
      goto LABEL_24;
    }
  }
  uint64_t v20 = _SC_LOG_DEFAULT();
  uint64_t v21 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v20, (os_log_type_t)v21))
  {
    uint64_t v22 = _os_log_pack_size();
    uint64_t v30 = &v63[-((MEMORY[0x1F4188790](v22, v23, v24, v25, v26, v27, v28, v29) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    uint64_t v31 = _os_log_pack_fill();
    int v32 = SCError();
    uint64_t v33 = SCErrorString(v32);
    *(_DWORD *)uint64_t v31 = 136315394;
    *(void *)(v31 + 4) = "SCNSManagerApplyChanges";
    *(_WORD *)(v31 + 12) = 2080;
    *(void *)(v31 + 14) = v33;
    __SC_log_send(5, (uint64_t)v20, v21, v30);
  }
LABEL_24:
  uint64_t v34 = _SC_LOG_DEFAULT();
  uint64_t v35 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v34, (os_log_type_t)v35))
  {
    uint64_t v36 = _os_log_pack_size();
    uint64_t v44 = &v63[-((MEMORY[0x1F4188790](v36, v37, v38, v39, v40, v41, v42, v43) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    uint64_t v45 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v45 = 136315138;
    *(void *)(v45 + 4) = "SCNSManagerApplyChanges";
    __SC_log_send(5, (uint64_t)v34, v35, v44);
  }
  uint64_t v17 = 0;
LABEL_34:
  SCPreferencesRef v60 = a1[6];
  if (v60)
  {
    CFRelease(v60);
    a1[6] = 0;
  }
  SCPreferencesRef v61 = a1[7];
  if (v61)
  {
    CFRelease(v61);
    a1[7] = 0;
  }
  return v17;
}

void *SCNSManagerCopyService(const void **a1, const void *a2, const __CFString *a3, const __CFString *a4)
{
  if (!a3 || a4)
  {
    return __SCNSManagerCopyService(a1, a2, a3, a4, 0);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

void *__SCNSManagerCopyService(const void **a1, const void *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  uint64_t v9 = 0;
  v34[1] = *MEMORY[0x1E4F143B8];
  BOOL v10 = 1;
  if (a3 && a4)
  {
    uint64_t v12 = (const void *)SCNetworkCategoryCreate(a1[2], a3);
    CFArrayRef v13 = (const __CFArray *)SCNetworkCategoryCopyServices((uint64_t)v12, (uint64_t)a4);
    if (v13)
    {
      CFArrayRef v14 = v13;
      uint64_t v9 = copy_service_in_list(v13, a2);
      CFRelease(v14);
      if (!v12)
      {
LABEL_6:
        BOOL v10 = a5 != 0;
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if (!v12) {
        goto LABEL_6;
      }
    }
    CFRelease(v12);
    goto LABEL_6;
  }
LABEL_7:
  CFStringRef SetID = 0;
  if (!v9 && v10)
  {
    uint64_t v16 = SCNetworkSetCopyCurrent((SCPreferencesRef)a1[2]);
    if (!v16)
    {
      CFSetRef v19 = _SC_LOG_DEFAULT();
      uint64_t v20 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
      {
        uint64_t v21 = _os_log_pack_size();
        uint64_t v29 = (char *)v34 - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v30 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v30 = 136315138;
        *(void *)(v30 + 4) = "__SCNSManagerCopyService";
        __SC_log_send(5, (uint64_t)v19, v20, v29);
      }
      CFStringRef SetID = 0;
LABEL_28:
      _SCErrorSet(1004);
      int v32 = 0;
      if (!SetID) {
        return v32;
      }
      goto LABEL_26;
    }
    uint64_t v17 = v16;
    CFArrayRef v18 = SCNetworkSetCopyServices(v16);
    CFStringRef SetID = (CFStringRef)v18;
    if (v18)
    {
      uint64_t v9 = copy_service_in_list(v18, a2);
      CFRelease(SetID);
      if (v9)
      {
        CFStringRef SetID = SCNetworkSetGetSetID(v17);
        CFRetain(SetID);
      }
      else
      {
        CFStringRef SetID = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    CFRelease(v17);
  }
  if (!v9) {
    goto LABEL_28;
  }
  uint64_t v31 = __SCNSServiceCreate(a1, a3, a4, a2, v9);
  int v32 = v31;
  if (SetID && v31)
  {
    v31[5] = SetID;
    CFRetain(SetID);
  }
  CFRelease(v9);
  if (SetID) {
LABEL_26:
  }
    CFRelease(SetID);
  return v32;
}

CFStringRef SCNSManagerCreateService(SCPreferencesRef *a1, const void *a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef v4 = a4;
  v25[1] = *MEMORY[0x1E4F143B8];
  if (a3 && !a4)
  {
    _SCErrorSet(1002);
    return v4;
  }
  if (a3)
  {
    uint64_t v7 = (__CFString *)__SCNSServiceCreate(a1, a3, a4, a2, 0);
    CFStringRef SetID = 0;
    CFStringRef v4 = 0;
    if (!v7) {
      return v4;
    }
    goto LABEL_6;
  }
  uint64_t v9 = SCNetworkSetCopyCurrent(a1[2]);
  if (v9)
  {
    BOOL v10 = v9;
    CFStringRef SetID = SCNetworkSetGetSetID(v9);
    CFRetain(SetID);
    CFRelease(v10);
    uint64_t v11 = (__CFString *)__SCNSServiceCreate(a1, 0, v4, a2, 0);
    if (!v11)
    {
      CFStringRef v4 = 0;
      if (!SetID) {
        return v4;
      }
      goto LABEL_7;
    }
    uint64_t v7 = v11;
    if (SetID)
    {
      CFRetain(SetID);
      v7[1].info = (uint64_t)SetID;
    }
LABEL_6:
    __SCNSManagerServiceChanged((uint64_t)a1, v7);
    CFStringRef v4 = v7;
    if (!SetID) {
      return v4;
    }
LABEL_7:
    CFRelease(SetID);
    return v4;
  }
  uint64_t v12 = _SC_LOG_DEFAULT();
  uint64_t v13 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
  {
    uint64_t v14 = _os_log_pack_size();
    uint64_t v22 = (char *)v25 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 136315138;
    *(void *)(v23 + 4) = "SCNSManagerCreateService";
    __SC_log_send(5, (uint64_t)v12, v13, v22);
  }
  return 0;
}

void *__SCNSServiceCreate(const void *a1, const __CFString *a2, const __CFString *a3, const void *a4, const void *a5)
{
  if (__SCNetworkSettingsInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkSettingsInitialize_initialized, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v11 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = a1;
    CFRetain(a1);
    if (a2 && a3)
    {
      v11[6] = CFStringCreateCopy(0, a2);
      v11[7] = CFStringCreateCopy(0, a3);
    }
    if (a4)
    {
      CFRetain(a4);
      v11[4] = a4;
    }
    if (a5)
    {
      CFRetain(a5);
      v11[3] = a5;
    }
  }
  return v11;
}

void __SCNSManagerServiceChanged(uint64_t a1, void *value)
{
  CFStringRef v4 = *(__CFSet **)(a1 + 56);
  if (v4) {
    CFSetRemoveValue(v4, value);
  }
  CFArrayRef Mutable = *(__CFSet **)(a1 + 48);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    *(void *)(a1 + 48) = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

void *SCNSManagerCopyCurrentService(const void **a1, SCNetworkInterfaceRef interface, const __CFString *a3)
{
  if (a3)
  {
    uint64_t v6 = __SCNetworkCategoryManagerCopyActiveValueNoSession(a3, interface);
    if (v6) {
      CFStringRef v7 = a3;
    }
    else {
      CFStringRef v7 = 0;
    }
    uint64_t v8 = __SCNSManagerCopyService(a1, interface, v7, (const __CFString *)v6, 1);
    if (v6) {
      CFRelease(v6);
    }
    return v8;
  }
  else
  {
    return __SCNSManagerCopyService(a1, interface, 0, 0, 1);
  }
}

uint64_t SCNSManagerSetEventHandler(uint64_t a1, NSObject *a2, const void *a3)
{
  CFStringRef v4 = *(NSObject **)(a1 + 24);
  if (!a2)
  {
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 24) = 0;
      uint64_t v9 = *(const void **)(a1 + 32);
      if (v9)
      {
        _Block_release(v9);
        *(void *)(a1 + 32) = 0;
      }
      SCPreferencesSetDispatchQueue(*(SCPreferencesRef *)(a1 + 16), 0);
      SCPreferencesSetCallback(*(SCPreferencesRef *)(a1 + 16), 0, 0);
      BOOL v10 = *(const void **)(a1 + 40);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a1 + 40) = 0;
      }
    }
    return 1;
  }
  if (!a3 || v4)
  {
    _SCErrorSet(1002);
  }
  else
  {
    uint64_t result = (uint64_t)store_create((void *)a1, a2);
    if (!result) {
      return result;
    }
    uint64_t v8 = (const void *)result;
    if (__SCNSManagerEnablePrefsCallback((SCPreferencesRef *)a1, a2))
    {
      *(void *)(a1 + 24) = a2;
      dispatch_retain(a2);
      *(void *)(a1 + 32) = _Block_copy(a3);
      *(void *)(a1 + 40) = CFRetain(v8);
      CFRelease(v8);
      return 1;
    }
    CFRelease(v8);
  }
  return 0;
}

uint64_t SCNSServiceGetInterface(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

CFStringRef SCNSServiceGetServiceID(uint64_t a1)
{
  CFDictionaryRef v1 = *(const __SCNetworkService **)(a1 + 24);
  if (!v1) {
    return @"n/a";
  }

  return SCNetworkServiceGetServiceID(v1);
}

CFStringRef SCNSServiceGetName(uint64_t a1)
{
  CFDictionaryRef v1 = *(const __SCNetworkService **)(a1 + 24);
  if (!v1) {
    return @"n/a";
  }

  return SCNetworkServiceGetName(v1);
}

CFDictionaryRef SCNSServiceCopyProtocolEntity(uint64_t a1, __CFString *cf1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (!__SCNetworkProtocolIsValidType(cf1))
  {
    CFStringRef v4 = 0;
    int v6 = 1002;
    goto LABEL_11;
  }
  if (!__SCNSServiceGetEntity(a1, cf1, cf))
  {
    CFStringRef v7 = *(const __SCNetworkService **)(a1 + 24);
    if (v7)
    {
      uint64_t v8 = SCNetworkServiceCopyProtocol(v7, cf1);
      if (v8)
      {
        CFStringRef v4 = v8;
        CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v8);
        if (!Configuration) {
          goto LABEL_10;
        }
LABEL_4:
        CFRetain(Configuration);
        if (!v4) {
          return Configuration;
        }
        goto LABEL_12;
      }
    }
  }
  CFStringRef v4 = 0;
  CFDictionaryRef Configuration = (CFDictionaryRef)cf[0];
  if (cf[0]) {
    goto LABEL_4;
  }
LABEL_10:
  int v6 = 1004;
LABEL_11:
  _SCErrorSet(v6);
  CFDictionaryRef Configuration = 0;
  if (v4) {
LABEL_12:
  }
    CFRelease(v4);
  return Configuration;
}

uint64_t __SCNSServiceGetEntity(uint64_t a1, void *value, void *a3)
{
  CFSetRef v6 = *(const __CFSet **)(a1 + 80);
  if (v6 && CFSetContainsValue(v6, value))
  {
    CFStringRef v7 = 0;
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = *(void *)(a1 + 72);
    if (result)
    {
      CFStringRef v7 = CFDictionaryGetValue((CFDictionaryRef)result, value);
      uint64_t result = v7 != 0;
    }
    else
    {
      CFStringRef v7 = 0;
    }
  }
  *a3 = v7;
  return result;
}

uint64_t SCNSServiceSetProtocolEntity(uint64_t *a1, const __CFString *cf1, void *a3)
{
  if (__SCNetworkProtocolIsValidType(cf1))
  {
    return __SCNSServiceSetEntity(a1, cf1, a3);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t __SCNSServiceSetEntity(uint64_t *a1, CFTypeRef cf1, void *value)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  if (value)
  {
    CFArrayRef Mutable = (__CFDictionary *)a1[9];
    if (!Mutable)
    {
      CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a1[9] = (uint64_t)Mutable;
    }
    CFDictionarySetValue(Mutable, cf1, value);
    CFStringRef v7 = (__CFSet *)a1[10];
    if (v7) {
      CFSetRemoveValue(v7, cf1);
    }
LABEL_17:
    __SCNSManagerServiceChanged(a1[2], a1);
    return 1;
  }
  uint64_t v8 = (__CFSet *)a1[10];
  if (!v8)
  {
    uint64_t v8 = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
    a1[10] = (uint64_t)v8;
  }
  int v9 = CFEqual(cf1, @"IPv4");
  BOOL v10 = @"IPv6";
  if (!v9 && (v11 = CFEqual(cf1, @"IPv6"), BOOL v10 = @"IPv4", !v11) || !v10 || !CFSetContainsValue(v8, v10))
  {
    CFSetAddValue(v8, cf1);
    uint64_t v25 = (__CFDictionary *)a1[9];
    if (v25) {
      CFDictionaryRemoveValue(v25, cf1);
    }
    goto LABEL_17;
  }
  uint64_t v12 = _SC_LOG_DEFAULT();
  uint64_t v13 = _SC_syslog_os_log_mapping(3);
  if (__SC_log_enabled(3, v12, (os_log_type_t)v13))
  {
    uint64_t v14 = _os_log_pack_size();
    uint64_t v22 = (char *)v26 - ((MEMORY[0x1F4188790](v14, v15, v16, v17, v18, v19, v20, v21) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 136315138;
    *(void *)(v23 + 4) = "__SCNSServiceSetEntity";
    __SC_log_send(3, (uint64_t)v12, v13, v22);
  }
  _SCErrorSet(1002);
  return 0;
}

void SCNSServiceUseDefaultProtocolEntities(unsigned char *value)
{
  value[88] = 1;
  CFSetRef v2 = (const void *)*((void *)value + 10);
  if (v2)
  {
    CFRelease(v2);
    *((void *)value + 10) = 0;
  }
  CFSetRef v3 = (const void *)*((void *)value + 9);
  if (v3)
  {
    CFRelease(v3);
    *((void *)value + 9) = 0;
  }
  uint64_t v4 = *((void *)value + 2);

  __SCNSManagerServiceChanged(v4, value);
}

CFDictionaryRef SCNSServiceCopyActiveEntity(uint64_t a1, __CFString *a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 64);
  if (!v4)
  {
    SCNSServiceRefreshActiveState(a1);
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 64);
    if (!v4) {
      return 0;
    }
  }
  if (!CFDictionaryContainsKey(v4, @"IPv4")
    && !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 64), @"IPv6"))
  {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  CFDictionaryRef v6 = SCNSServiceCopyProtocolEntity(a1, a2);
  CFDictionaryRef v7 = v6;
  if (Value && v6)
  {
    CFDictionaryRef Value = CFDictionaryCreateMutableCopy(0, 0, Value);
    CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)dict_merge_value, Value);
LABEL_10:
    CFRelease(v7);
    return Value;
  }
  if (v6)
  {
    CFRetain(v6);
    CFDictionaryRef Value = v7;
    goto LABEL_10;
  }
  if (Value) {
    CFRetain(Value);
  }
  return Value;
}

void SCNSServiceRefreshActiveState(uint64_t a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFSetRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(a1 + 24));
  cf[0] = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", ServiceID, @"[^/]+");
  CFArrayRef v4 = CFArrayCreate(0, cf, 1, MEMORY[0x1E4F1D510]);
  CFRelease(cf[0]);
  CFDictionaryRef v5 = SCDynamicStoreCopyMultiple(0, 0, v4);
  CFRelease(v4);
  if (v5)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)state_dict_entity_key, Mutable);
    CFRelease(v5);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  *(void *)(a1 + 64) = Mutable;
}

uint64_t SCNSServiceGetCategoryID(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t SCNSServiceGetCategoryValue(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t SCNSServiceSetQoSMarkingPolicy(uint64_t *a1, void *value)
{
  return __SCNSServiceSetEntity(a1, @"QoSMarkingPolicy", value);
}

CFTypeRef SCNSServiceCopyQoSMarkingPolicy(void *a1)
{
  cf[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  CFSetRef v2 = (const __SCNetworkService *)a1[3];
  if (__SCNSServiceGetEntity((uint64_t)a1, @"QoSMarkingPolicy", cf)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = v2 == 0;
  }
  if (v3) {
    goto LABEL_6;
  }
  CFStringRef v5 = (const __CFString *)a1[6];
  if (v5)
  {
    uint64_t v6 = a1[7];
    CFDictionaryRef v7 = (const void *)SCNetworkCategoryCreate(*(const void **)(a1[2] + 16), v5);
    CFTypeRef ServiceQoSMarkingPolicy = SCNetworkCategoryGetServiceQoSMarkingPolicy((uint64_t)v7, v6, v2);
    if (v7) {
      CFRelease(v7);
    }
    if (ServiceQoSMarkingPolicy) {
      goto LABEL_12;
    }
LABEL_15:
    _SCErrorSet(1004);
    return ServiceQoSMarkingPolicy;
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(v2);
  if (!Interface)
  {
LABEL_6:
    CFTypeRef ServiceQoSMarkingPolicy = cf[0];
    if (!cf[0]) {
      goto LABEL_15;
    }
  }
  else
  {
    CFTypeRef ServiceQoSMarkingPolicy = SCNetworkInterfaceGetQoSMarkingPolicy(Interface);
    if (!ServiceQoSMarkingPolicy) {
      goto LABEL_15;
    }
  }
LABEL_12:
  CFRetain(ServiceQoSMarkingPolicy);
  return ServiceQoSMarkingPolicy;
}

void __SCNSManagerDeallocate(uint64_t a1)
{
  CFSetRef v2 = *(const __SCPreferences **)(a1 + 16);
  if (v2)
  {
    SCPreferencesSetDispatchQueue(v2, 0);
    SCPreferencesSetCallback(*(SCPreferencesRef *)(a1 + 16), 0, 0);
    BOOL v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0;
    }
  }
  CFArrayRef v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 48) = 0;
  }
  CFStringRef v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 40) = 0;
  }
  CFDictionaryRef v7 = *(NSObject **)(a1 + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    _Block_release(v8);
    *(void *)(a1 + 32) = 0;
  }
}

__CFString *__SCNSManagerCopyDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<%s %p> {}", "SCNSManager", a1);
  return Mutable;
}

void __SCNSServiceDeallocate(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  BOOL v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  CFArrayRef v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  CFStringRef v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  CFDictionaryRef v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  uint64_t v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0;
  }
  int v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0;
  }
  BOOL v10 = (const void *)a1[10];
  if (v10)
  {
    CFRelease(v10);
    a1[10] = 0;
  }
}

__CFString *__SCNSServiceCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<%s %p> { service %@", "SCNSService", a1, a1[3]);
  if (a1[6])
  {
    uint64_t v4 = a1[7];
    if (v4) {
      CFStringAppendFormat(Mutable, 0, @" category (%@, %@)", a1[6], v4);
    }
  }
  CFStringAppend(Mutable, @" }");
  return Mutable;
}

void managerRemove(void *a1, unsigned char *a2)
{
  v62[1] = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    BOOL v3 = (const __SCNetworkService *)a1[3];
    if (v3)
    {
      CFStringRef ServiceID = SCNetworkServiceGetServiceID(v3);
      uint64_t v6 = a1[2];
      CFStringRef v7 = (const __CFString *)a1[6];
      if (v7)
      {
        uint64_t v8 = (const void *)SCNetworkCategoryCreate(*(const void **)(v6 + 16), v7);
        int v9 = copy_service_for_category_and_ID((uint64_t)v8, a1[7], ServiceID);
        if (v9)
        {
          BOOL v10 = v9;
          int v11 = SCNetworkCategoryRemoveService((uint64_t)v8, a1[7], v9);
          CFRelease(v10);
          if (v11) {
            goto LABEL_25;
          }
          uint64_t v12 = _SC_LOG_DEFAULT();
          uint64_t v13 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v12, (os_log_type_t)v13)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v12 = _SC_LOG_DEFAULT();
          uint64_t v13 = _SC_syslog_os_log_mapping(5);
          if (__SC_log_enabled(5, v12, (os_log_type_t)v13))
          {
LABEL_16:
            uint64_t v21 = _os_log_pack_size();
            uint64_t v29 = (char *)v62
                - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v30 = _os_log_pack_fill();
            uint64_t v31 = a1[6];
            uint64_t v32 = a1[7];
            *(_DWORD *)uint64_t v30 = 136315906;
            *(void *)(v30 + 4) = "managerRemove";
            *(_WORD *)(v30 + 12) = 2112;
            *(void *)(v30 + 14) = ServiceID;
            *(_WORD *)(v30 + 22) = 2112;
            *(void *)(v30 + 24) = v31;
            *(_WORD *)(v30 + 32) = 2112;
            *(void *)(v30 + 34) = v32;
            __SC_log_send(5, (uint64_t)v12, v13, v29);
          }
        }
LABEL_24:
        *a2 = 1;
LABEL_25:
        if (v8) {
          CFRelease(v8);
        }
        return;
      }
      CFStringRef v14 = (const __CFString *)a1[5];
      if (v14 && (uint64_t v15 = SCNetworkSetCopy(*(SCPreferencesRef *)(v6 + 16), v14)) != 0)
      {
        uint64_t v16 = v15;
        CFArrayRef v17 = SCNetworkSetCopyServices(v15);
        if (v17 && (v18 = v17, uint64_t v19 = copy_service_in_list_by_ID(v17, ServiceID), CFRelease(v18), v19))
        {
          int v20 = SCNetworkSetRemoveService(v16, v19);
          CFRelease(v16);
          if (v20) {
            return;
          }
        }
        else
        {
          CFRelease(v16);
        }
        uint64_t v49 = _SC_LOG_DEFAULT();
        uint64_t v50 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v49, (os_log_type_t)v50))
        {
          uint64_t v51 = _os_log_pack_size();
          stat v59 = (char *)v62
              - ((MEMORY[0x1F4188790](v51, v52, v53, v54, v55, v56, v57, v58) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v60 = _os_log_pack_fill();
          uint64_t v61 = a1[5];
          *(_DWORD *)uint64_t v60 = 136315650;
          *(void *)(v60 + 4) = "managerRemove";
          *(_WORD *)(v60 + 12) = 2112;
          *(void *)(v60 + 14) = ServiceID;
          *(_WORD *)(v60 + 22) = 2112;
          *(void *)(v60 + 24) = v61;
          uint64_t v46 = (uint64_t)v49;
          uint64_t v47 = v50;
          uint64_t v48 = v59;
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v33 = _SC_LOG_DEFAULT();
        uint64_t v34 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v33, (os_log_type_t)v34))
        {
          uint64_t v35 = _os_log_pack_size();
          uint64_t v43 = (char *)v62
              - ((MEMORY[0x1F4188790](v35, v36, v37, v38, v39, v40, v41, v42) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v44 = _os_log_pack_fill();
          uint64_t v45 = a1[5];
          *(_DWORD *)uint64_t v44 = 136315394;
          *(void *)(v44 + 4) = "managerRemove";
          *(_WORD *)(v44 + 12) = 2112;
          *(void *)(v44 + 14) = v45;
          uint64_t v46 = (uint64_t)v33;
          uint64_t v47 = v34;
          uint64_t v48 = v43;
LABEL_22:
          __SC_log_send(5, v46, v47, v48);
          uint64_t v8 = 0;
          goto LABEL_24;
        }
      }
      uint64_t v8 = 0;
      goto LABEL_24;
    }
  }
}

const __SCNetworkService *copy_service_for_category_and_ID(uint64_t a1, uint64_t a2, const void *a3)
{
  CFArrayRef v4 = (const __CFArray *)SCNetworkCategoryCopyServices(a1, a2);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  uint64_t v6 = copy_service_in_list_by_ID(v4, a3);
  CFRelease(v5);
  return v6;
}

const __SCNetworkService *copy_service_in_list_by_ID(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1, v6);
    CFStringRef ServiceID = SCNetworkServiceGetServiceID(ValueAtIndex);
    if (CFEqual(a2, ServiceID)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

void managerChange(uint64_t a1, unsigned char *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    if (*(void *)(a1 + 24))
    {
      if (!__SCNSServiceUpdateService(a1)) {
        goto LABEL_19;
      }
    }
    else if (!__SCNSServiceInstantiateService(a1))
    {
      goto LABEL_19;
    }
    if (*(unsigned char *)(a1 + 88) && !service_establish_default(*(const __SCNetworkService **)(a1 + 24))) {
      goto LABEL_12;
    }
    CFSetRef v4 = *(const __CFSet **)(a1 + 80);
    if (v4)
    {
      uint64_t context = a1;
      uint64_t v38 = 0;
      CFSetApplyFunction(v4, (CFSetApplierFunction)entityRemove, &context);
      if ((_BYTE)v38) {
        goto LABEL_12;
      }
    }
    CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 72);
    if (v5
      && (uint64_t context = a1,
          uint64_t v38 = 0,
          CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)entityChange, &context),
          (_BYTE)v38))
    {
LABEL_12:
      int v6 = 1;
    }
    else
    {
      int v6 = 0;
    }
    CFStringRef v7 = *(const void **)(a1 + 80);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 80) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 72);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 72) = 0;
    }
    *(unsigned char *)(a1 + 88) = 0;
    if (v6)
    {
LABEL_19:
      uint64_t v9 = *(void *)(a1 + 48);
      BOOL v10 = _SC_LOG_DEFAULT();
      uint64_t v11 = _SC_syslog_os_log_mapping(5);
      BOOL v12 = __SC_log_enabled(5, v10, (os_log_type_t)v11);
      if (v9)
      {
        if (v12)
        {
          uint64_t v13 = _os_log_pack_size();
          uint64_t v21 = (char *)&v36
              - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v22 = _os_log_pack_fill();
          uint64_t v23 = *(void *)(a1 + 32);
          uint64_t v24 = *(void *)(a1 + 48);
          uint64_t v25 = *(void *)(a1 + 56);
          *(_DWORD *)uint64_t v22 = 136315906;
          *(void *)(v22 + 4) = "managerChange";
          *(_WORD *)(v22 + 12) = 2112;
          *(void *)(v22 + 14) = v23;
          *(_WORD *)(v22 + 22) = 2112;
          *(void *)(v22 + 24) = v24;
          *(_WORD *)(v22 + 32) = 2112;
          *(void *)(v22 + 34) = v25;
LABEL_24:
          __SC_log_send(5, (uint64_t)v10, v11, v21);
        }
      }
      else if (v12)
      {
        uint64_t v26 = _os_log_pack_size();
        uint64_t v21 = (char *)&v36 - ((MEMORY[0x1F4188790](v26, v27, v28, v29, v30, v31, v32, v33) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v34 = _os_log_pack_fill();
        uint64_t v35 = *(void *)(a1 + 32);
        *(_DWORD *)uint64_t v34 = 136315394;
        *(void *)(v34 + 4) = "managerChange";
        *(_WORD *)(v34 + 12) = 2112;
        *(void *)(v34 + 14) = v35;
        goto LABEL_24;
      }
      *a2 = 1;
    }
  }
}

uint64_t __SCNSServiceInstantiateService(uint64_t a1)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  CFStringRef v3 = *(const __CFString **)(a1 + 48);
  if (!v3)
  {
    CFStringRef v6 = *(const __CFString **)(a1 + 40);
    if (v6 && (CFStringRef v7 = SCNetworkSetCopy(*(SCPreferencesRef *)(v2 + 16), v6)) != 0)
    {
      uint64_t v8 = v7;
      SCNetworkServiceRef service_in_set = create_service_in_set(*(const __SCPreferences **)(v2 + 16), v7, *(SCNetworkInterfaceRef *)(a1 + 32));
      CFRelease(v8);
      if (service_in_set) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v9 = _SC_LOG_DEFAULT();
      uint64_t v10 = _SC_syslog_os_log_mapping(5);
      if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v19 = (char *)v37 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)(v20 + 4) = "__SCNSServiceInstantiateService";
        *(_WORD *)(v20 + 12) = 2112;
        *(void *)(v20 + 14) = v21;
        __SC_log_send(5, (uint64_t)v9, v10, v19);
      }
    }
    return 0;
  }
  SCNetworkServiceRef service_in_set = create_service_in_category(*(const void **)(v2 + 16), v3, *(void *)(a1 + 56), *(const __SCNetworkInterface **)(a1 + 32));
  if (!service_in_set) {
    return 0;
  }
LABEL_3:
  if (SCNetworkServiceEstablishDefaultConfiguration(service_in_set))
  {
    if (!*(void *)(a1 + 72) && !*(void *)(a1 + 80)) {
      *(unsigned char *)(a1 + 88) = 0;
    }
    CFRetain(service_in_set);
    *(void *)(a1 + 24) = service_in_set;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v22 = _SC_LOG_DEFAULT();
    uint64_t v23 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v22, (os_log_type_t)v23))
    {
      uint64_t v24 = _os_log_pack_size();
      uint64_t v32 = (char *)v37 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      int v34 = SCError();
      uint64_t v35 = SCErrorString(v34);
      *(_DWORD *)uint64_t v33 = 136315394;
      *(void *)(v33 + 4) = "__SCNSServiceInstantiateService";
      *(_WORD *)(v33 + 12) = 2080;
      *(void *)(v33 + 14) = v35;
      __SC_log_send(5, (uint64_t)v22, v23, v32);
    }
    uint64_t v5 = 0;
  }
  CFRelease(service_in_set);
  return v5;
}

BOOL __SCNSServiceUpdateService(uint64_t a1)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  CFStringRef ServiceID = SCNetworkServiceGetServiceID(*(SCNetworkServiceRef *)(a1 + 24));
  CFStringRef v4 = *(const __CFString **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = (const void *)SCNetworkCategoryCreate(*(const void **)(v2 + 16), v4);
    CFStringRef v6 = copy_service_for_category_and_ID((uint64_t)v5, *(void *)(a1 + 56), ServiceID);
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      goto LABEL_5;
    }
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v15 = _os_log_pack_size();
      uint64_t v23 = (char *)v50 - ((MEMORY[0x1F4188790](v15, v16, v17, v18, v19, v20, v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      uint64_t v25 = *(void *)(a1 + 48);
      uint64_t v26 = *(void *)(a1 + 56);
      *(_DWORD *)uint64_t v24 = 136315906;
      *(void *)(v24 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v24 + 12) = 2112;
      *(void *)(v24 + 14) = ServiceID;
      *(_WORD *)(v24 + 22) = 2112;
      *(void *)(v24 + 24) = v25;
      *(_WORD *)(v24 + 32) = 2112;
      *(void *)(v24 + 34) = v26;
LABEL_18:
      __SC_log_send(5, (uint64_t)v13, v14, v23);
      return 0;
    }
  }
  else
  {
    CFStringRef v8 = *(const __CFString **)(a1 + 40);
    if (!v8 || (uint64_t v9 = SCNetworkSetCopy(*(SCPreferencesRef *)(v2 + 16), v8)) == 0)
    {
      uint64_t v27 = _SC_LOG_DEFAULT();
      uint64_t v28 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v27, (os_log_type_t)v28);
      if (!result) {
        return result;
      }
      uint64_t v29 = _os_log_pack_size();
      uint64_t v37 = (char *)v50 - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v38 = _os_log_pack_fill();
      uint64_t v39 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v38 = 136315394;
      *(void *)(v38 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v38 + 12) = 2112;
      *(void *)(v38 + 14) = v39;
      __SC_log_send(5, (uint64_t)v27, v28, v37);
      return 0;
    }
    uint64_t v10 = v9;
    CFArrayRef v11 = SCNetworkSetCopyServices(v9);
    if (v11)
    {
      CFArrayRef v12 = v11;
      CFStringRef v6 = copy_service_in_list_by_ID(v11, ServiceID);
      CFRelease(v12);
      CFRelease(v10);
      if (v6)
      {
LABEL_5:
        CFRelease(*(CFTypeRef *)(a1 + 24));
        CFRetain(v6);
        *(void *)(a1 + 24) = v6;
        CFRelease(v6);
        return 1;
      }
    }
    else
    {
      CFRelease(v10);
    }
    uint64_t v13 = _SC_LOG_DEFAULT();
    uint64_t v14 = _SC_syslog_os_log_mapping(5);
    BOOL result = __SC_log_enabled(5, v13, (os_log_type_t)v14);
    if (result)
    {
      uint64_t v40 = _os_log_pack_size();
      uint64_t v23 = (char *)v50 - ((MEMORY[0x1F4188790](v40, v41, v42, v43, v44, v45, v46, v47) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v48 = _os_log_pack_fill();
      uint64_t v49 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v48 = 136315650;
      *(void *)(v48 + 4) = "__SCNSServiceUpdateService";
      *(_WORD *)(v48 + 12) = 2112;
      *(void *)(v48 + 14) = ServiceID;
      *(_WORD *)(v48 + 22) = 2112;
      *(void *)(v48 + 24) = v49;
      goto LABEL_18;
    }
  }
  return result;
}

SCNetworkServiceRef create_service_in_category(const void *a1, const __CFString *a2, uint64_t a3, const __SCNetworkInterface *a4)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  CFStringRef v7 = (const void *)SCNetworkCategoryCreate(a1, a2);
  SCNetworkServiceRef v8 = SCNetworkServiceCreate((SCPreferencesRef)a1, a4);
  if (!SCNetworkCategoryAddService((uint64_t)v7, a3, v8))
  {
    uint64_t v9 = _SC_LOG_DEFAULT();
    uint64_t v10 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
    {
      uint64_t v11 = _os_log_pack_size();
      uint64_t v19 = (char *)v24 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      int v21 = SCError();
      uint64_t v22 = SCErrorString(v21);
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)(v20 + 4) = "create_service_in_category";
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v20 + 14) = v22;
      __SC_log_send(5, (uint64_t)v9, v10, v19);
    }
    CFRelease(v8);
    SCNetworkServiceRef v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

SCNetworkServiceRef create_service_in_set(const __SCPreferences *a1, const __SCNetworkSet *a2, SCNetworkInterfaceRef interface)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  SCNetworkServiceRef v4 = SCNetworkServiceCreate(a1, interface);
  if (!SCNetworkSetAddService(a2, v4))
  {
    CFRelease(v4);
    uint64_t v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)v20 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      int v17 = SCError();
      uint64_t v18 = SCErrorString(v17);
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = "create_service_in_set";
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v18;
      __SC_log_send(5, (uint64_t)v5, v6, v15);
    }
    return 0;
  }
  return v4;
}

uint64_t service_establish_default(const __SCNetworkService *a1)
{
  v42[1] = *MEMORY[0x1E4F143B8];
  CFArrayRef v2 = SCNetworkServiceCopyProtocols(a1);
  CFArrayRef v3 = v2;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __SCNetworkProtocol *)CFArrayGetValueAtIndex(v3, v6);
        CFStringRef ProtocolType = SCNetworkProtocolGetProtocolType(ValueAtIndex);
        if (!SCNetworkServiceRemoveProtocolType(a1, ProtocolType)) {
          break;
        }
        if (v5 == ++v6) {
          goto LABEL_6;
        }
      }
      uint64_t v27 = _SC_LOG_DEFAULT();
      uint64_t v28 = _SC_syslog_os_log_mapping(5);
      if (!__SC_log_enabled(5, v27, (os_log_type_t)v28)) {
        goto LABEL_12;
      }
      uint64_t v29 = _os_log_pack_size();
      uint64_t v37 = (char *)v42 - ((MEMORY[0x1F4188790](v29, v30, v31, v32, v33, v34, v35, v36) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v38 = _os_log_pack_fill();
      int v39 = SCError();
      uint64_t v40 = SCErrorString(v39);
      *(_DWORD *)uint64_t v38 = 136315650;
      *(void *)(v38 + 4) = "service_establish_default";
      *(_WORD *)(v38 + 12) = 2112;
      *(void *)(v38 + 14) = ProtocolType;
      *(_WORD *)(v38 + 22) = 2080;
      *(void *)(v38 + 24) = v40;
      uint64_t v24 = (uint64_t)v27;
      uint64_t v25 = v28;
      uint64_t v26 = v37;
      goto LABEL_11;
    }
  }
LABEL_6:
  uint64_t v9 = SCNetworkServiceEstablishDefaultConfiguration(a1);
  if (v9) {
    goto LABEL_13;
  }
  uint64_t v10 = _SC_LOG_DEFAULT();
  uint64_t v11 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v10, (os_log_type_t)v11))
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t v20 = (char *)v42 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    int v22 = SCError();
    uint64_t v23 = SCErrorString(v22);
    *(_DWORD *)uint64_t v21 = 136315394;
    *(void *)(v21 + 4) = "service_establish_default";
    *(_WORD *)(v21 + 12) = 2080;
    *(void *)(v21 + 14) = v23;
    uint64_t v24 = (uint64_t)v10;
    uint64_t v25 = v11;
    uint64_t v26 = v20;
LABEL_11:
    __SC_log_send(5, v24, v25, v26);
  }
LABEL_12:
  uint64_t v9 = 0;
LABEL_13:
  if (v3) {
    CFRelease(v3);
  }
  return v9;
}

void entityRemove(const __CFString *a1, uint64_t a2)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  if (CFEqual(a1, @"QoSMarkingPolicy"))
  {
    if (__SCNSServiceSetQoSMarkingPolicy(v4, 0)) {
      return;
    }
  }
  else if (SCNetworkServiceRemoveProtocolType(*(SCNetworkServiceRef *)(v4 + 24), a1))
  {
    return;
  }
  if (SCError() != 1004)
  {
    CFIndex v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)v20 - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = *(void *)(v4 + 24);
      int v18 = SCError();
      uint64_t v19 = SCErrorString(v18);
      *(_DWORD *)uint64_t v16 = 136315906;
      *(void *)(v16 + 4) = "entityRemove";
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v16 + 14) = a1;
      *(_WORD *)(v16 + 22) = 2112;
      *(void *)(v16 + 24) = v17;
      *(_WORD *)(v16 + 32) = 2080;
      *(void *)(v16 + 34) = v19;
      __SC_log_send(3, (uint64_t)v5, v6, v15);
    }
    *(unsigned char *)(a2 + 8) = 1;
  }
}

uint64_t entityChange(const __CFString *a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  if (CFEqual(a1, @"QoSMarkingPolicy"))
  {
    uint64_t result = __SCNSServiceSetQoSMarkingPolicy(v6, a2);
    if (result) {
      return result;
    }
    goto LABEL_3;
  }
  uint64_t result = __SCNSServiceSetProtocol(v6, a1, a2);
  if (!result) {
LABEL_3:
  }
    *(unsigned char *)(a3 + 8) = 1;
  return result;
}

uint64_t __SCNSServiceSetQoSMarkingPolicy(uint64_t a1, const __CFDictionary *a2)
{
  CFArrayRef v3 = *(const __SCNetworkService **)(a1 + 24);
  CFStringRef v4 = *(const __CFString **)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (const void *)SCNetworkCategoryCreate(*(const void **)(*(void *)(a1 + 16) + 16), v4);
    uint64_t v7 = SCNetworkCategorySetServiceQoSMarkingPolicy((uint64_t)v6, v5, v3, a2);
    if (v6) {
      CFRelease(v6);
    }
    return v7;
  }
  SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(*(SCNetworkServiceRef *)(a1 + 24));
  if (!Interface) {
    return 0;
  }

  return SCNetworkInterfaceSetQoSMarkingPolicy(Interface, (__CFString *)a2);
}

uint64_t __SCNSServiceSetProtocol(uint64_t a1, const __CFString *a2, const __CFDictionary *a3)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(const __SCNetworkService **)(a1 + 24);
  uint64_t v6 = SCNetworkServiceCopyProtocol(v5, a2);
  if (v6) {
    goto LABEL_2;
  }
  if (!SCNetworkServiceAddProtocolType(v5, a2))
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v8, (os_log_type_t)v9))
    {
LABEL_13:
      uint64_t v24 = _os_log_pack_size();
      uint64_t v32 = (char *)v37 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      int v34 = SCError();
      uint64_t v35 = SCErrorString(v34);
      *(_DWORD *)uint64_t v33 = 136315906;
      *(void *)(v33 + 4) = "__SCNSServiceSetProtocol";
      *(_WORD *)(v33 + 12) = 2112;
      *(void *)(v33 + 14) = v5;
      *(_WORD *)(v33 + 22) = 2112;
      *(void *)(v33 + 24) = a2;
      *(_WORD *)(v33 + 32) = 2080;
      *(void *)(v33 + 34) = v35;
      __SC_log_send(3, (uint64_t)v8, v9, v32);
    }
    return 0;
  }
  uint64_t v6 = SCNetworkServiceCopyProtocol(v5, a2);
  if (!v6)
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v8, (os_log_type_t)v9)) {
      goto LABEL_13;
    }
    return 0;
  }
LABEL_2:
  if (SCNetworkProtocolSetConfiguration(v6, a3))
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v10 = _SC_LOG_DEFAULT();
    uint64_t v11 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v10, (os_log_type_t)v11))
    {
      uint64_t v12 = _os_log_pack_size();
      uint64_t v20 = (char *)v37 - ((MEMORY[0x1F4188790](v12, v13, v14, v15, v16, v17, v18, v19) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      int v22 = SCError();
      uint64_t v23 = SCErrorString(v22);
      *(_DWORD *)uint64_t v21 = 136315906;
      *(void *)(v21 + 4) = "__SCNSServiceSetProtocol";
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = v5;
      *(_WORD *)(v21 + 22) = 2112;
      *(void *)(v21 + 24) = a2;
      *(_WORD *)(v21 + 32) = 2080;
      *(void *)(v21 + 34) = v23;
      __SC_log_send(3, (uint64_t)v10, v11, v20);
    }
    uint64_t v7 = 0;
  }
  CFRelease(v6);
  return v7;
}

const __SCNetworkService *copy_service_in_list(const __CFArray *a1, const void *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1, v6);
    SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface(ValueAtIndex);
    if (CFEqual(a2, Interface)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  CFRetain(ValueAtIndex);
  return ValueAtIndex;
}

const __SCDynamicStore *store_create(void *a1, NSObject *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  context.version = 0;
  memset(&context.retain, 0, 24);
  context.info = a1;
  CFArrayRef v3 = SCDynamicStoreCreate(0, @"SCNSManager", (SCDynamicStoreCallBack)__SCNSManagerStoreCallback, &context);
  if (!v3)
  {
    uint64_t v19 = _SC_LOG_DEFAULT();
    uint64_t v20 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
    {
      uint64_t v21 = _os_log_pack_size();
      uint64_t v29 = (char *)&context
          - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      int v31 = SCError();
      uint64_t v32 = SCErrorString(v31);
      *(_DWORD *)uint64_t v30 = 136315394;
      *(void *)(v30 + 4) = "store_create";
      *(_WORD *)(v30 + 12) = 2080;
      *(void *)(v30 + 14) = v32;
      __SC_log_send(5, (uint64_t)v19, v20, v29);
    }
    return 0;
  }
  CFStringRef v4 = v3;
  if (!store_set_notification_keys(v3))
  {
LABEL_6:
    CFRelease(v4);
    return 0;
  }
  if (!SCDynamicStoreSetDispatchQueue(v4, a2))
  {
    CFIndex v5 = _SC_LOG_DEFAULT();
    uint64_t v6 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v5, (os_log_type_t)v6))
    {
      uint64_t v7 = _os_log_pack_size();
      uint64_t v15 = (char *)&context - ((MEMORY[0x1F4188790](v7, v8, v9, v10, v11, v12, v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      int v17 = SCError();
      uint64_t v18 = SCErrorString(v17);
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)(v16 + 4) = "store_create";
      *(_WORD *)(v16 + 12) = 2080;
      *(void *)(v16 + 14) = v18;
      __SC_log_send(5, (uint64_t)v5, v6, v15);
    }
    goto LABEL_6;
  }
  return v4;
}

uint64_t __SCNSManagerEnablePrefsCallback(SCPreferencesRef *a1, NSObject *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  context.version = 0;
  memset(&context.retain, 0, 24);
  context.info = a1;
  uint64_t v4 = SCPreferencesSetCallback(a1[2], (SCPreferencesCallBack)__SCNSManagerPrefsCallback, &context);
  if (v4)
  {
    uint64_t v5 = v4;
    if (SCPreferencesSetDispatchQueue(a1[2], a2)) {
      return 1;
    }
    else {
      SCPreferencesSetCallback(a1[2], 0, 0);
    }
  }
  else
  {
    uint64_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)&context - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      int v18 = SCError();
      uint64_t v19 = SCErrorString(v18);
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)(v17 + 4) = "__SCNSManagerEnablePrefsCallback";
      *(_WORD *)(v17 + 12) = 2080;
      *(void *)(v17 + 14) = v19;
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
    return 0;
  }
  return v5;
}

uint64_t __SCNSManagerStoreCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

uint64_t store_set_notification_keys(const __SCDynamicStore *a1)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  v24[0] = @"IPv4";
  v24[1] = @"IPv6";
  void v24[2] = @"Proxies";
  v24[3] = @"DNS";
  CFArrayRef v2 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, @"com.apple.scnetworkcategory");
  uint64_t v4 = CFArrayCreateMutable(0, 0, v2);
  for (uint64_t i = 0; i != 4; ++i)
  {
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, @"State:", @"[^/]+", (CFStringRef)v24[i]);
    CFArrayAppendValue(v4, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
  }
  uint64_t v7 = SCDynamicStoreSetNotificationKeys(a1, Mutable, v4);
  if (!v7)
  {
    uint64_t v8 = _SC_LOG_DEFAULT();
    uint64_t v9 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
    {
      uint64_t v10 = _os_log_pack_size();
      int v18 = (char *)&v24[-1]
          - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      uint64_t v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v19 + 4) = "store_set_notification_keys";
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = v21;
      __SC_log_send(5, (uint64_t)v8, v9, v18);
    }
  }
  CFRelease(Mutable);
  CFRelease(v4);
  return v7;
}

uint64_t __SCNSManagerPrefsCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void dict_merge_value(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

void state_dict_entity_key(CFStringRef theString, const void *a2, __CFDictionary *a3)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @"/");
  if (ArrayBySeparatingStrings)
  {
    CFArrayRef v6 = ArrayBySeparatingStrings;
    CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
    if (Count >= 1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, Count - 1);
      CFDictionarySetValue(a3, ValueAtIndex, a2);
    }
    CFRelease(v6);
  }
}

void add_configured_interface_0(const __CFString *a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"Interface");
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"Tag");
      CFTypeID v9 = CFNumberGetTypeID();
      if (v8)
      {
        if (CFGetTypeID(v8) == v9)
        {
          uint64_t Private = _SCVLANInterfaceCreatePrivate(0, a1);
          if (!Private) {
            add_configured_interface_cold_1_0();
          }
          uint64_t v11 = (const __SCNetworkInterface *)Private;
          uint64_t v12 = *(const __SCPreferences **)(a3 + 8);
          if (!v12
            || (uint64_t v13 = (const __SCNetworkInterface *)__SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName(0, v12, Value)) == 0)
          {
            uint64_t v13 = _SCNetworkInterfaceCreateWithBSDName(0, Value, 2);
            if (!v13) {
              add_configured_interface_cold_2();
            }
          }
          *((unsigned char *)v13 + 368) = 1;
          SCVLANInterfaceSetPhysicalInterfaceAndTag(v11, v13, v8);
          CFRelease(v13);
          CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"UserDefinedName");
          CFTypeID v15 = CFStringGetTypeID();
          if (v14 && CFGetTypeID(v14) == v15) {
            SCVLANInterfaceSetLocalizedDisplayName(v11, v14);
          }
          CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Options");
          CFTypeID v17 = CFDictionaryGetTypeID();
          if (v16 && CFGetTypeID(v16) == v17) {
            SCVLANInterfaceSetOptions(v11, v16);
          }
          *((void *)v11 + 10) = CFRetain(*(CFTypeRef *)(a3 + 16));
          CFArrayAppendValue(*(CFMutableArrayRef *)a3, v11);
          CFRelease(v11);
        }
      }
    }
  }
}

CFArrayRef SCVLANInterfaceCopyAvailablePhysicalInterfaces(void)
{
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFDictionaryRef v1 = SCPreferencesCreate(0, @"SCVLANInterfaceCopyAvailablePhysicalInterfaces", 0);
  if (v1)
  {
    CFArrayRef v2 = v1;
    CFArrayRef v3 = (const __CFArray *)SCBridgeInterfaceCopyAll(v1);
    if (v3)
    {
      uint64_t v4 = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
      __SCBridgeInterfaceListCollectMembers(v3, v4, 0);
    }
    else
    {
      uint64_t v4 = 0;
    }
    CFRelease(v2);
  }
  else
  {
    CFArrayRef v3 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = __SCNetworkInterfaceCopyAll_IONetworkInterface(0);
  if (v5)
  {
    CFArrayRef v6 = v5;
    addAvailableInterfaces(Mutable, v5, v4);
    CFRelease(v6);
  }
  if (v3)
  {
    addAvailableInterfaces(Mutable, v3, 0);
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

void addAvailableInterfaces(__CFArray *a1, CFArrayRef theArray, const __CFSet *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 0; i != v7; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      if (!a3 || !CFSetContainsValue(a3, ValueAtIndex))
      {
        if (ValueAtIndex[368]) {
          CFArrayAppendValue(a1, ValueAtIndex);
        }
      }
    }
  }
}

__CFArray *_SCVLANInterfaceCopyActive()
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  if (getifaddrs(&v46) == -1)
  {
    CFStringRef v14 = __log_SCNetworkConfiguration();
    uint64_t v15 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v14, (os_log_type_t)v15))
    {
      uint64_t v16 = _os_log_pack_size();
      uint64_t v24 = &v44[-((MEMORY[0x1F4188790](v16, v17, v18, v19, v20, v21, v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v25 = _os_log_pack_fill();
      uint64_t v26 = __error();
      uint64_t v27 = strerror(*v26);
      *(_DWORD *)uint64_t v25 = 136315138;
      *(void *)(v25 + 4) = v27;
      __SC_log_send(5, (uint64_t)v14, v15, v24);
    }
    _SCErrorSet(1001);
    return 0;
  }
  int v0 = inet_dgram_socket_0();
  if (v0 == -1)
  {
    uint64_t v28 = __error();
    _SCErrorSet(*v28);
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_19;
  }
  int v1 = v0;
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v3 = v46;
  if (!v46) {
    goto LABEL_14;
  }
  long long v4 = 0uLL;
  while (1)
  {
    long long v51 = v4;
    long long v52 = v4;
    int valuePtr = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    unsigned __int16 v49 = 0;
    ifa_data = (unsigned __int8 *)v3->ifa_data;
    if (ifa_data)
    {
      if (v3->ifa_addr->sa_family == 18 && *ifa_data == 135) {
        break;
      }
    }
LABEL_13:
    CFArrayRef v3 = v3->ifa_next;
    if (!v3) {
      goto LABEL_14;
    }
  }
  long long v51 = v4;
  long long v52 = v4;
  unsigned __int16 v49 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  __strlcpy_chk();
  *(void *)&long long v52 = &v47;
  if (ioctl(v1, 0xC020697FuLL, &v51) != -1)
  {
    CFStringRef v6 = CFStringCreateWithCString(0, v3->ifa_name, 0x600u);
    uint64_t Private = _SCVLANInterfaceCreatePrivate(0, v6);
    if (!Private) {
      _SCVLANInterfaceCopyActive_cold_1();
    }
    CFNumberRef v8 = (const __SCNetworkInterface *)Private;
    CFRelease(v6);
    __strlcpy_chk();
    CFStringRef v9 = CFStringCreateWithCString(0, cStr, 0x600u);
    SCNetworkInterfaceRef v10 = _SCNetworkInterfaceCreateWithBSDName(0, v9, 2);
    if (!v10) {
      _SCVLANInterfaceCopyActive_cold_2();
    }
    uint64_t v11 = v10;
    CFRelease(v9);
    int valuePtr = v49;
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v12) {
      _SCVLANInterfaceCopyActive_cold_3();
    }
    CFNumberRef v13 = v12;
    SCVLANInterfaceSetPhysicalInterfaceAndTag(v8, v11, v12);
    CFRelease(v11);
    CFRelease(v13);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    long long v4 = 0uLL;
    goto LABEL_13;
  }
  uint64_t v30 = __log_SCNetworkConfiguration();
  uint64_t v31 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v30, (os_log_type_t)v31))
  {
    uint64_t v32 = _os_log_pack_size();
    uint64_t v40 = &v44[-((MEMORY[0x1F4188790](v32, v33, v34, v35, v36, v37, v38, v39) + 15) & 0xFFFFFFFFFFFFFFF0)];
    __error();
    uint64_t v41 = _os_log_pack_fill();
    uint64_t v42 = __error();
    uint64_t v43 = strerror(*v42);
    *(_DWORD *)uint64_t v41 = 136315138;
    *(void *)(v41 + 4) = v43;
    __SC_log_send(5, (uint64_t)v30, v31, v40);
  }
  CFRelease(Mutable);
  _SCErrorSet(1001);
  CFMutableDictionaryRef Mutable = 0;
LABEL_14:
  close(v1);
LABEL_19:
  MEMORY[0x192FA7A70](v46);
  return Mutable;
}

uint64_t inet_dgram_socket_0()
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = socket(2, 2, 0);
  if (v0 == -1)
  {
    int v1 = __log_SCNetworkConfiguration();
    uint64_t v2 = _SC_syslog_os_log_mapping(3);
    if (__SC_log_enabled(3, v1, (os_log_type_t)v2))
    {
      uint64_t v3 = _os_log_pack_size();
      uint64_t v11 = (char *)v16 - ((MEMORY[0x1F4188790](v3, v4, v5, v6, v7, v8, v9, v10) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      CFNumberRef v13 = __error();
      CFStringRef v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v14;
      __SC_log_send(3, (uint64_t)v1, v2, v11);
    }
  }
  return v0;
}

Boolean SCVLANInterfaceSetPhysicalInterfaceAndTag(SCVLANInterfaceRef vlan, SCNetworkInterfaceRef physical, CFNumberRef tag)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!vlan) {
    goto LABEL_18;
  }
  if (CFGetTypeID(vlan) != TypeID) {
    goto LABEL_18;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
  if (!CFEqual(InterfaceType, @"VLAN")) {
    goto LABEL_18;
  }
  CFTypeID v8 = SCNetworkInterfaceGetTypeID();
  if (!physical || CFGetTypeID(physical) != v8) {
    goto LABEL_18;
  }
  if (!*((unsigned char *)physical + 368))
  {
    if (__SCPreferencesUsingDefaultPrefs(*((void *)physical + 10)))
    {
LABEL_18:
      int v20 = 1002;
LABEL_19:
      _SCErrorSet(v20);
      LOBYTE(v19) = 0;
      return v19;
    }
    *((unsigned char *)physical + 368) = 1;
  }
  CFTypeID v9 = CFNumberGetTypeID();
  if (!tag) {
    goto LABEL_18;
  }
  if (CFGetTypeID(tag) != v9) {
    goto LABEL_18;
  }
  int valuePtr = 0;
  CFNumberGetValue(tag, kCFNumberIntType, &valuePtr);
  if ((valuePtr - 1) >= 0xFFE) {
    goto LABEL_18;
  }
  uint64_t v10 = (const __SCPreferences *)*((void *)vlan + 10);
  if (!v10)
  {
    uint64_t v22 = 0;
    LOBYTE(v19) = 1;
    goto LABEL_23;
  }
  VLANInterfaceAndCFNumberRef Tag = findVLANInterfaceAndTag(v10, physical, tag);
  if (VLANInterfaceAndTag)
  {
    uint64_t v12 = VLANInterfaceAndTag;
    int v13 = CFEqual(vlan, VLANInterfaceAndTag);
    CFRelease(v12);
    if (!v13)
    {
      int v20 = 1005;
      goto LABEL_19;
    }
  }
  CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", *((void *)vlan + 14));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)vlan + 10), v14);
  CFTypeID v16 = CFDictionaryGetTypeID();
  if (!Value || CFGetTypeID(Value) != v16)
  {
    CFRelease(v14);
    int v20 = 1001;
    goto LABEL_19;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(physical);
  CFDictionarySetValue(MutableCopy, @"Interface", BSDName);
  CFDictionarySetValue(MutableCopy, @"Tag", tag);
  if (CFEqual(Value, MutableCopy)) {
    int v19 = 1;
  }
  else {
    int v19 = SCPreferencesPathSetValue(*((SCPreferencesRef *)vlan + 10), v14, MutableCopy);
  }
  CFRelease(MutableCopy);
  CFRelease(v14);
  if (!v19) {
    return v19;
  }
  uint64_t v22 = (const void *)*((void *)vlan + 10);
LABEL_23:
  CFTypeRef Copy = __SCNetworkInterfaceCreateCopy(0, (uint64_t)physical, v22, *((const void **)vlan + 12));
  uint64_t v24 = (const void *)*((void *)vlan + 47);
  *((void *)vlan + 47) = Copy;
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = (const void *)*((void *)vlan + 48);
  *((void *)vlan + 48) = CFRetain(tag);
  if (v25) {
    CFRelease(v25);
  }
  return v19;
}

SCVLANInterfaceRef SCVLANInterfaceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef physical, CFNumberRef tag)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!prefs) {
    goto LABEL_11;
  }
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!physical || CFGetTypeID(physical) != TypeID) {
    goto LABEL_11;
  }
  if (!*((unsigned char *)physical + 368))
  {
    if (__SCPreferencesUsingDefaultPrefs((uint64_t)prefs))
    {
LABEL_11:
      int v9 = 1002;
      goto LABEL_12;
    }
    *((unsigned char *)physical + 368) = 1;
  }
  CFTypeID v7 = CFNumberGetTypeID();
  if (!tag) {
    goto LABEL_11;
  }
  if (CFGetTypeID(tag) != v7) {
    goto LABEL_11;
  }
  int valuePtr = 0;
  CFNumberGetValue(tag, kCFNumberIntType, &valuePtr);
  if ((valuePtr - 1) >= 0xFFE) {
    goto LABEL_11;
  }
  VLANInterfaceAndCFNumberRef Tag = findVLANInterfaceAndTag(prefs, physical, tag);
  if (VLANInterfaceAndTag)
  {
    CFRelease(VLANInterfaceAndTag);
    int v9 = 1005;
  }
  else
  {
    CFAllocatorRef v12 = CFGetAllocator(prefs);
    CFStringRef v13 = CFStringCreateWithFormat(v12, 0, @"vlan%ld", 0);
    CFStringRef v14 = CFStringCreateWithFormat(v12, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", v13);
    if (SCPreferencesPathGetValue(prefs, v14))
    {
      uint64_t v15 = 1;
      do
      {
        CFRelease(v14);
        CFRelease(v13);
        CFStringRef v13 = CFStringCreateWithFormat(v12, 0, @"vlan%ld", v15);
        CFStringRef v14 = CFStringCreateWithFormat(v12, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", v13);
        ++v15;
      }
      while (SCPreferencesPathGetValue(prefs, v14));
    }
    CFDictionaryRef v16 = CFDictionaryCreate(v12, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v17 = SCPreferencesPathSetValue(prefs, v14, v16);
    CFRelease(v16);
    CFRelease(v14);
    if (v17)
    {
      uint64_t Private = (const __SCNetworkInterface *)_SCVLANInterfaceCreatePrivate(v12, v13);
      CFRelease(v13);
      *((void *)Private + 10) = CFRetain(prefs);
      SCVLANInterfaceSetPhysicalInterfaceAndTag(Private, physical, tag);
      return Private;
    }
    CFRelease(v13);
    int v9 = 1001;
  }
LABEL_12:
  _SCErrorSet(v9);
  return 0;
}

CFTypeRef findVLANInterfaceAndTag(const __SCPreferences *a1, const void *a2, const void *a3)
{
  CFArrayRef v5 = SCVLANInterfaceCopyAll(a1);
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
LABEL_8:
    CFTypeRef v13 = 0;
  }
  else
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v5, v8);
      SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(ValueAtIndex);
      CFNumberRef Tag = SCVLANInterfaceGetTag(ValueAtIndex);
      if (PhysicalInterface)
      {
        CFNumberRef v12 = Tag;
        if (Tag)
        {
          if (CFEqual(a2, PhysicalInterface) && CFEqual(a3, v12)) {
            break;
          }
        }
      }
      if (v7 == ++v8) {
        goto LABEL_8;
      }
    }
    CFTypeRef v13 = CFRetain(ValueAtIndex);
  }
  CFRelease(v5);
  return v13;
}

Boolean SCVLANInterfaceRemove(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan
    && CFGetTypeID(vlan) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan), CFEqual(InterfaceType, @"VLAN"))
    && *((void *)vlan + 10))
  {
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(vlan);
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", BSDName);
    Boolean v6 = SCPreferencesPathRemoveValue(*((SCPreferencesRef *)vlan + 10), v5);
    CFRelease(v5);
    return v6;
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

SCNetworkInterfaceRef SCVLANInterfaceGetPhysicalInterface(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (SCNetworkInterfaceRef)*((void *)vlan + 47);
      }
    }
  }
  _SCErrorSet(1002);
  return 0;
}

CFNumberRef SCVLANInterfaceGetTag(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (CFNumberRef)*((void *)vlan + 48);
      }
    }
  }
  _SCErrorSet(1002);
  return 0;
}

CFDictionaryRef SCVLANInterfaceGetOptions(SCVLANInterfaceRef vlan)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan)
  {
    if (CFGetTypeID(vlan) == TypeID)
    {
      CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan);
      if (CFEqual(InterfaceType, @"VLAN")) {
        return (CFDictionaryRef)*((void *)vlan + 49);
      }
    }
  }
  _SCErrorSet(1002);
  return 0;
}

Boolean SCVLANInterfaceSetLocalizedDisplayName(SCVLANInterfaceRef vlan, CFStringRef newName)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!vlan
    || CFGetTypeID(vlan) != TypeID
    || (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan), !CFEqual(InterfaceType, @"VLAN"))
    || newName && (CFTypeID v6 = CFStringGetTypeID(), CFGetTypeID(newName) != v6))
  {
    int v12 = 1002;
    goto LABEL_12;
  }
  if (*((void *)vlan + 10))
  {
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", *((void *)vlan + 14));
    CFDictionaryRef Value = SCPreferencesPathGetValue(*((SCPreferencesRef *)vlan + 10), v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (Value && CFGetTypeID(Value) == v9)
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
      CFDictionaryRef v11 = MutableCopy;
      if (newName) {
        CFDictionarySetValue(MutableCopy, @"UserDefinedName", newName);
      }
      else {
        CFDictionaryRemoveValue(MutableCopy, @"UserDefinedName");
      }
      if (CFEqual(Value, v11)) {
        int v13 = 1;
      }
      else {
        int v13 = SCPreferencesPathSetValue(*((SCPreferencesRef *)vlan + 10), v7, v11);
      }
      CFRelease(v11);
      CFRelease(v7);
      if (!v13) {
        return v13;
      }
      goto LABEL_21;
    }
    CFRelease(v7);
    int v12 = 1001;
LABEL_12:
    _SCErrorSet(v12);
    LOBYTE(v13) = 0;
    return v13;
  }
  LOBYTE(v13) = 1;
LABEL_21:
  uint64_t v15 = (const void *)*((void *)vlan + 5);
  if (v15)
  {
    CFRelease(v15);
    *((void *)vlan + 5) = 0;
  }
  if (newName) {
    *((void *)vlan + 5) = CFStringCreateCopy(0, newName);
  }
  return v13;
}

Boolean SCVLANInterfaceSetOptions(SCVLANInterfaceRef vlan, CFDictionaryRef newOptions)
{
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (vlan
    && CFGetTypeID(vlan) == TypeID
    && (CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(vlan), CFEqual(InterfaceType, @"VLAN"))
    && (!newOptions || (CFTypeID v6 = CFDictionaryGetTypeID(), CFGetTypeID(newOptions) == v6)))
  {
    return __SCVLANInterfaceSetOptions((uint64_t)vlan, newOptions);
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

uint64_t __SCVLANInterfaceSetOptions(uint64_t a1, CFDictionaryRef theDict)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 80))
  {
    uint64_t v21 = 1;
LABEL_15:
    uint64_t v22 = *(const void **)(a1 + 392);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 392) = 0;
    }
    if (theDict) {
      *(void *)(a1 + 392) = CFDictionaryCreateCopy(0, theDict);
    }
    return v21;
  }
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"/%@/%@/%@", @"VirtualNetworkInterfaces", @"VLAN", *(void *)(a1 + 112));
  CFDictionaryRef Value = SCPreferencesPathGetValue(*(SCPreferencesRef *)(a1 + 80), v4);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Value);
    CFDictionaryRef v8 = MutableCopy;
    if (theDict) {
      CFDictionarySetValue(MutableCopy, @"Options", theDict);
    }
    else {
      CFDictionaryRemoveValue(MutableCopy, @"Options");
    }
    if (CFEqual(Value, v8)) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = SCPreferencesPathSetValue(*(SCPreferencesRef *)(a1 + 80), v4, v8);
    }
    CFRelease(v8);
    CFRelease(v4);
    if (!v21) {
      return v21;
    }
    goto LABEL_15;
  }
  CFTypeID v9 = __log_SCNetworkConfiguration();
  uint64_t v10 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
  {
    uint64_t v11 = _os_log_pack_size();
    uint64_t v19 = (char *)v24 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v20 + 4) = "__SCVLANInterfaceSetOptions";
    __SC_log_send(5, (uint64_t)v9, v10, v19);
  }
  CFRelease(v4);
  _SCErrorSet(1001);
  return 0;
}

uint64_t __SCVLANInterfaceSetAutoConfigure(uint64_t a1, int a2)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 392);
  if (v4)
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v4);
    BOOL v6 = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    BOOL v6 = 1;
    if (a2)
    {
LABEL_3:
      CFDictionaryRemoveValue(MutableCopy, @"AutoConfigure");
      if (!v4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  CFDictionarySetValue(MutableCopy, @"AutoConfigure", (const void *)*MEMORY[0x1E4F1CFC8]);
  if (v4) {
LABEL_4:
  }
    BOOL v6 = CFEqual(v4, MutableCopy) == 0;
LABEL_5:
  if (v6) {
    uint64_t v7 = __SCVLANInterfaceSetOptions(a1, MutableCopy);
  }
  else {
    uint64_t v7 = 1;
  }
  CFRelease(MutableCopy);
  return v7;
}

uint64_t __SCVLANInterfaceGetAutoConfigure(uint64_t a1)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(a1 + 392);
  if (!v1)
  {
    CFBooleanGetTypeID();
    return 1;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(v1, @"AutoConfigure");
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 1;
  }

  return CFBooleanGetValue((CFBooleanRef)Value);
}

uint64_t _SCVLANInterfaceUpdateConfiguration(const __SCPreferences *a1)
{
  if (!a1)
  {
    _SCErrorSet(1002);
    return 0;
  }
  CFArrayRef v1 = SCVLANInterfaceCopyAll(a1);
  CFArrayRef v2 = v1;
  if (v1) {
    CFIndex Count = CFArrayGetCount(v1);
  }
  else {
    CFIndex Count = 0;
  }
  CFDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFStringRef v5 = _SCVLANInterfaceCopyActive();
  CFArrayRef v6 = v5;
  if (!v5)
  {
    int v44 = 0;
    CFIndex v7 = 0;
LABEL_23:
    LODWORD(v9) = -1;
    char v42 = 1;
    goto LABEL_24;
  }
  CFIndex v7 = CFArrayGetCount(v5);
  if (v7 < 1)
  {
    int v44 = 0;
    goto LABEL_23;
  }
  CFIndex v8 = 0;
  char v42 = 1;
  uint64_t v9 = 0xFFFFFFFFLL;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v6, v8);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    if (Count >= 1)
    {
      uint64_t v12 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, 0);
      CFStringRef v13 = SCNetworkInterfaceGetBSDName(v12);
      if (CFEqual(BSDName, v13)) {
        goto LABEL_19;
      }
      CFIndex v14 = 1;
      do
      {
        if (Count == v14) {
          goto LABEL_15;
        }
        uint64_t v15 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, v14);
        CFStringRef v16 = SCNetworkInterfaceGetBSDName(v15);
        ++v14;
      }
      while (!CFEqual(BSDName, v16));
      if (v14 - 1 < Count) {
        goto LABEL_19;
      }
    }
LABEL_15:
    uint64_t v17 = v9;
    if (v9 == -1)
    {
      uint64_t v17 = inet_dgram_socket_0();
      if (v17 == -1) {
        break;
      }
    }
    uint64_t v9 = v17;
    if (!__destroyInterface(v17, BSDName))
    {
      uint64_t v18 = __error();
      _SCErrorSet(*v18);
      char v42 = 0;
    }
LABEL_19:
    if (++v8 == v7)
    {
      int v44 = 1;
LABEL_24:
      int v46 = v9;
      if (Count >= 1)
      {
        CFIndex v19 = 0;
        uint64_t v41 = (const void *)*MEMORY[0x1E4F1CFD0];
        uint64_t v40 = (const void *)*MEMORY[0x1E4F1CFC8];
        CFArrayRef v43 = v2;
        CFIndex v47 = Count;
        do
        {
          uint64_t v20 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v2, v19);
          CFStringRef v21 = SCNetworkInterfaceGetBSDName(v20);
          SCNetworkInterfaceRef PhysicalInterface = SCVLANInterfaceGetPhysicalInterface(v20);
          if (PhysicalInterface)
          {
            uint64_t v23 = PhysicalInterface;
            uint64_t IOPath = _SCNetworkInterfaceGetIOPath((uint64_t)PhysicalInterface);
            CFDictionaryRef Value = CFDictionaryGetValue(theDict, v23);
            if (!Value)
            {
              if (v23[368]) {
                CFDictionaryRef Value = v41;
              }
              else {
                CFDictionaryRef Value = v40;
              }
              CFDictionaryAddValue(theDict, v23, Value);
            }
            if (v44)
            {
              CFIndex v26 = 0;
              while (1)
              {
                uint64_t v27 = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v6, v26);
                CFStringRef v28 = SCNetworkInterfaceGetBSDName(v27);
                if (CFEqual(v21, v28)) {
                  break;
                }
                if (v7 == ++v26) {
                  goto LABEL_36;
                }
              }
              if (CFEqual(v20, v27))
              {
LABEL_44:
                CFArrayRef v2 = v43;
LABEL_45:
                CFIndex Count = v47;
                goto LABEL_56;
              }
              int v34 = v46;
              CFArrayRef v2 = v43;
              CFIndex Count = v47;
              if (v46 == -1)
              {
                int v34 = inet_dgram_socket_0();
                if (v34 == -1) {
                  goto LABEL_66;
                }
              }
              int v46 = v34;
              if (!CFBooleanGetValue((CFBooleanRef)Value)
                || !__vlan_clear(v46, v21)
                || (CFStringRef v35 = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v23),
                    CFNumberRef Tag = SCVLANInterfaceGetTag(v20),
                    CFStringRef v37 = v35,
                    CFIndex Count = v47,
                    !__vlan_set(v46, v21, v37, Tag)))
              {
                if (!CFBooleanGetValue((CFBooleanRef)Value)) {
                  _SCErrorSet(1001);
                }
                __destroyInterface(v46, v21);
                goto LABEL_55;
              }
            }
            else
            {
LABEL_36:
              int v29 = CFBooleanGetValue((CFBooleanRef)Value);
              if (!IOPath) {
                goto LABEL_44;
              }
              CFArrayRef v2 = v43;
              CFIndex Count = v47;
              if (v29)
              {
                int v30 = v46;
                if (v46 == -1)
                {
                  int v30 = inet_dgram_socket_0();
                  if (v30 == -1) {
                    goto LABEL_66;
                  }
                }
                int v46 = v30;
                if (!__createInterface(v30, v21))
                {
                  uint64_t v33 = __error();
                  _SCErrorSet(*v33);
LABEL_55:
                  char v42 = 0;
                  goto LABEL_56;
                }
                CFStringRef v31 = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)v23);
                CFNumberRef v32 = SCVLANInterfaceGetTag(v20);
                if (!__vlan_set(v30, v21, v31, v32))
                {
                  __destroyInterface(v30, v21);
                  char v42 = 0;
                }
                goto LABEL_45;
              }
            }
          }
LABEL_56:
          ++v19;
        }
        while (v19 != Count);
      }
      if (!v6) {
        goto LABEL_59;
      }
LABEL_58:
      CFRelease(v6);
      goto LABEL_59;
    }
  }
LABEL_66:
  uint64_t v39 = __error();
  _SCErrorSet(*v39);
  char v42 = 0;
  int v46 = -1;
  if (v6) {
    goto LABEL_58;
  }
LABEL_59:
  if (v2) {
    CFRelease(v2);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  unsigned __int8 v4 = v42;
  if (v46 != -1) {
    close(v46);
  }
  return v4;
}

uint64_t __vlan_clear(int a1, const __CFString *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v21, 16, 0x600u);
  *(void *)&long long v22 = v19;
  v19[0] = 0;
  v19[1] = 0;
  __int16 v20 = 0;
  if (ioctl(a1, 0x8020697EuLL, &v21) != -1) {
    return 1;
  }
  unsigned __int8 v4 = __log_SCNetworkConfiguration();
  uint64_t v5 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v4, (os_log_type_t)v5))
  {
    uint64_t v6 = _os_log_pack_size();
    CFIndex v14 = (char *)&v19[-1] - ((MEMORY[0x1F4188790](v6, v7, v8, v9, v10, v11, v12, v13) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    CFStringRef v16 = __error();
    uint64_t v17 = strerror(*v16);
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = v17;
    __SC_log_send(5, (uint64_t)v4, v5, v14);
  }
  _SCErrorSet(1001);
  return 0;
}

uint64_t __vlan_set(int a1, const __CFString *a2, const __CFString *a3, const __CFNumber *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  HIDWORD(v22) = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  v23[0] = 0;
  v23[1] = 0;
  __int16 v24 = 0;
  _SC_cfstring_to_cstring(a2, (UInt8 *)&v25, 16, 0x600u);
  *(void *)&long long v26 = v23;
  _SC_cfstring_to_cstring(a3, (UInt8 *)v23, 16, 0x600u);
  CFNumberGetValue(a4, kCFNumberIntType, (char *)&v22 + 4);
  __int16 v24 = WORD2(v22);
  if (ioctl(a1, 0x8020697EuLL, &v25) != -1) {
    return 1;
  }
  uint64_t v8 = __log_SCNetworkConfiguration();
  uint64_t v9 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v8, (os_log_type_t)v9))
  {
    uint64_t v10 = _os_log_pack_size();
    uint64_t v18 = (char *)&v23[-1] - ((MEMORY[0x1F4188790](v10, v11, v12, v13, v14, v15, v16, v17) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    __int16 v20 = __error();
    long long v21 = strerror(*v20);
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)(v19 + 4) = v21;
    __SC_log_send(5, (uint64_t)v8, v9, v18);
  }
  _SCErrorSet(1001);
  return 0;
}

char *_scprefs_observer_watch(int a1, char *__s, uint64_t a3, const void *a4)
{
  void block[5] = *MEMORY[0x1E4F143B8];
  if (_scprefs_observer_watch_initialized != -1) {
    dispatch_once(&_scprefs_observer_watch_initialized, &__block_literal_global_18);
  }
  size_t v8 = strlen(__s);
  size_t v9 = v8 + 1;
  uint64_t v10 = (char *)malloc_type_malloc(v8 + 41, 0x5A000366uLL);
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0;
  *(_DWORD *)uint64_t v10 = a1;
  strlcpy(v10 + 40, __s, v9);
  *((void *)v10 + 4) = a3;
  *((void *)v10 + 1) = _Block_copy(a4);
  uint64_t v11 = __log_SCPreferences();
  uint64_t v12 = _SC_syslog_os_log_mapping(6);
  if (__SC_log_enabled(6, v11, (os_log_type_t)v12))
  {
    uint64_t v13 = _os_log_pack_size();
    long long v21 = (char *)block - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v22 + 4) = v10 + 40;
    __SC_log_send(6, (uint64_t)v11, v12, v21);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___scprefs_observer_watch_block_invoke_1;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = v10;
  dispatch_sync((dispatch_queue_t)prefs_observer_queue, block);
  return v10;
}

void ___scprefs_observer_watch_block_invoke()
{
  _prefs_observer_init();
}

void _prefs_observer_init()
{
  v14[1] = *MEMORY[0x1E4F143B8];
  prefs_observer_queue = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.SCPreferencesObserver", 0);
  head_0 = 0;
  uint32_t v0 = notify_register_dispatch("com.apple.ManagedConfiguration.profileListChanged", (int *)&_prefs_observer_init_token, (dispatch_queue_t)prefs_observer_queue, &__block_literal_global_9_0);
  if (v0)
  {
    uint32_t v1 = v0;
    CFArrayRef v2 = __log_SCPreferences();
    uint64_t v3 = _SC_syslog_os_log_mapping(6);
    if (__SC_log_enabled(6, v2, (os_log_type_t)v3))
    {
      uint64_t v4 = _os_log_pack_size();
      uint64_t v12 = (char *)v14 - ((MEMORY[0x1F4188790](v4, v5, v6, v7, v8, v9, v10, v11) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v13 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v13 = 67109120;
      v13[1] = v1;
      __SC_log_send(6, (uint64_t)v2, v3, v12);
    }
  }
}

uint64_t ___scprefs_observer_watch_block_invoke_1(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 24) = head_0;
  head_0 = *(void *)(result + 32);
  return result;
}

void _scprefs_observer_cancel(uint64_t a1)
{
  v1[5] = *MEMORY[0x1E4F143B8];
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 0x40000000;
  v1[2] = ___scprefs_observer_cancel_block_invoke;
  v1[3] = &__block_descriptor_tmp_3_0;
  v1[4] = a1;
  dispatch_sync((dispatch_queue_t)prefs_observer_queue, v1);
}

void ___scprefs_observer_cancel_block_invoke(uint64_t a1)
{
  uint32_t v1 = *(void **)(a1 + 32);
  CFArrayRef v2 = &head_0;
  uint64_t v3 = head_0;
  if ((void *)head_0 != v1)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while ((void *)v3 != v1);
    CFArrayRef v2 = (uint64_t *)(v4 + 24);
  }
  uint64_t *v2 = v1[3];
  uint64_t v5 = (const void *)v1[2];
  if (v5) {
    CFRelease(v5);
  }

  free(v1);
}

void ___prefs_observer_init_block_invoke()
{
  prefs_observer_handle_notifications();
}

void prefs_observer_handle_notifications()
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint32_t v0 = __log_SCPreferences();
  uint64_t v1 = _SC_syslog_os_log_mapping(7);
  if (__SC_log_enabled(7, v0, (os_log_type_t)v1))
  {
    uint64_t v2 = _os_log_pack_size();
    uint64_t v10 = (char *)v12 - ((MEMORY[0x1F4188790](v2, v3, v4, v5, v6, v7, v8, v9) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send(7, (uint64_t)v0, v1, v10);
  }
  for (uint64_t i = head_0; i; uint64_t i = *(void *)(i + 24))
  {
    if (has_changed((int *)i)) {
      dispatch_async(*(dispatch_queue_t *)(i + 32), *(dispatch_block_t *)(i + 8));
    }
  }
}

BOOL has_changed(int *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const char *)(a1 + 10);
  int v2 = *a1;
  *(void *)&v25.wbuf[14] = 0;
  if (v2 == 2) {
    uint64_t v4 = "/Library/Managed Preferences/mobile";
  }
  else {
    uint64_t v4 = 0;
  }
  memset(&v25, 0, 96);
  CC_SHA256_Init(&v25);
  memset(&v26, 0, sizeof(v26));
  snprintf((char *)v27, 0x400uLL, "%s/%s", v4, v3);
  if (stat((const char *)v27, &v26) || (v26.st_mode & 0xF000) != 0x8000)
  {
    CC_SHA256_Final(v27, &v25);
    CFDataRef v6 = 0;
  }
  else
  {
    CC_LONG v5 = strlen((const char *)v27);
    CC_SHA256_Update(&v25, v27, v5);
    CC_SHA256_Update(&v25, &v26.st_mtimespec, 0x10u);
    CC_SHA256_Final(v27, &v25);
    CFDataRef v6 = CFDataCreate(0, v27, 32);
  }
  CFDataRef v7 = (CFDataRef)*((void *)a1 + 2);
  if (v6 == v7)
  {
    BOOL v8 = 0;
    CFDataRef v7 = v6;
    if (v6) {
LABEL_13:
    }
      CFRelease(v7);
  }
  else
  {
    BOOL v8 = 1;
    if (v6 && v7)
    {
      int v9 = CFEqual(v6, v7);
      CFDataRef v7 = (CFDataRef)*((void *)a1 + 2);
      BOOL v8 = v9 == 0;
    }
    if (v7) {
      goto LABEL_13;
    }
  }
  *((void *)a1 + 2) = v6;
  uint64_t v10 = __log_SCPreferences();
  if (v8) {
    int v11 = 6;
  }
  else {
    int v11 = 7;
  }
  uint64_t v12 = _SC_syslog_os_log_mapping(v11);
  if (__SC_log_enabled(v11, v10, (os_log_type_t)v12))
  {
    uint64_t v13 = _os_log_pack_size();
    long long v21 = (char *)&v25 - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    uint64_t v23 = "did not change";
    if (v8) {
      uint64_t v23 = "changed";
    }
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)(v22 + 4) = v3;
    *(_WORD *)(v22 + 12) = 2080;
    *(void *)(v22 + 14) = v23;
    __SC_log_send(v11, (uint64_t)v10, v12, v21);
  }
  return v8;
}

__CFArray *VPNServiceCopyAllMatchingExternalID(const __SCPreferences *a1, const void *a2, const void *a3)
{
  if (a1
    && (CFTypeID TypeID = CFStringGetTypeID(), a2)
    && CFGetTypeID(a2) == TypeID
    && (CFTypeID v7 = CFStringGetTypeID(), a3)
    && CFGetTypeID(a3) == v7)
  {
    uint64_t result = copy_matching_services(a1, a2, a3);
    if (result) {
      return result;
    }
  }
  else
  {
    LODWORD(result) = 1002;
  }
  _SCErrorSet((int)result);
  return 0;
}

__CFArray *copy_matching_services(const __SCPreferences *a1, const void *a2, const void *a3)
{
  CFArrayRef v5 = SCNetworkServiceCopyAll(a1);
  if (!v5) {
    return 0;
  }
  CFArrayRef v6 = v5;
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFIndex v8 = Count;
    uint64_t v9 = 0;
    CFIndex v10 = 0;
    CFMutableDictionaryRef Mutable = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v10);
      if (isA_VPNService(ValueAtIndex))
      {
        CFTypeID TypeID = CFStringGetTypeID();
        if (!a2
          || CFGetTypeID(a2) != TypeID
          || (CFTypeID v14 = CFStringGetTypeID(), !a3)
          || CFGetTypeID(a3) != v14
          || (CFDictionaryRef v15 = SCNetworkServiceCopyExternalID(ValueAtIndex, a2)) != 0
          && (CFDictionaryRef v16 = v15, v17 = CFEqual(v15, a3), CFRelease(v16), v17))
        {
          if (!Mutable)
          {
            CFIndex v18 = CFArrayGetCount(v6);
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, v18 + v9, MEMORY[0x1E4F1D510]);
          }
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }
      ++v10;
      --v9;
    }
    while (v8 != v10);
  }
  CFRelease(v6);
  return Mutable;
}

__CFArray *VPNServiceCopyAll(const __SCPreferences *a1)
{
  if (a1)
  {
    uint64_t result = copy_matching_services(a1, 0, 0);
    if (result) {
      return result;
    }
  }
  else
  {
    LODWORD(result) = 1002;
  }
  _SCErrorSet((int)result);
  return 0;
}

__CFArray *VPNServiceCopyAppRuleIDs(const void *a1)
{
  if (!isA_VPNService(a1) || (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) == 0)
  {
    int v15 = 1002;
LABEL_21:
    _SCErrorSet(v15);
    return 0;
  }
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!Configuration
    || CFGetTypeID(Configuration) != TypeID
    || (Value = CFDictionaryGetValue(Configuration, @"AppRules"), CFTypeID v6 = CFArrayGetTypeID(), !Value)
    || CFGetTypeID(Value) != v6)
  {
LABEL_20:
    int v15 = 0;
    goto LABEL_21;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)Value);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, i);
      CFTypeID v11 = CFDictionaryGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == v11)
        {
          uint64_t v12 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
          CFTypeID v13 = CFStringGetTypeID();
          if (v12)
          {
            if (CFGetTypeID(v12) == v13)
            {
              CFTypeID v14 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
              CFArrayAppendValue(Mutable, v14);
            }
          }
        }
      }
    }
  }
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    goto LABEL_20;
  }
  if (!Mutable) {
    goto LABEL_20;
  }
  return Mutable;
}

const __SCNetworkInterface *isA_VPNService(const void *a1)
{
  CFTypeID TypeID = SCNetworkServiceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  uint64_t result = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1);
  if (result)
  {
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(result);
    return (const __SCNetworkInterface *)(CFEqual(InterfaceType, @"VPN") != 0);
  }
  return result;
}

uint64_t VPNServiceSetAppRule(const void *a1, const void *a2, const __CFDictionary *a3)
{
  if (isA_VPNService(a1)
    && (CFTypeID v6 = CFStringGetTypeID(), a2)
    && CFGetTypeID(a2) == v6
    && validate_app_rule(a3, 1)
    && (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) != 0)
  {
    CFIndex v8 = Interface;
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"ExecutableMatch");
    CFIndex v10 = CFDictionaryGetValue(a3, @"DNSDomainMatch");
    CFArrayRef theArray = (CFArrayRef)CFDictionaryGetValue(a3, @"AccountIdentifierMatch");
    CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(v8);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Configuration && CFGetTypeID(Configuration) == TypeID)
    {
      CFIndex app_rule = find_app_rule(Configuration, a2);
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Configuration);
    }
    else
    {
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFIndex app_rule = -1;
    }
    CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"AppRules");
    CFTypeID v18 = CFArrayGetTypeID();
    if (v17 && CFGetTypeID(v17) == v18) {
      CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(v14, 0, v17);
    }
    else {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
    }
    uint64_t v20 = Mutable;
    long long v21 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v21, @"Identifier", a2);
    if (Value && CFArrayGetCount((CFArrayRef)Value) >= 1) {
      CFDictionarySetValue(v21, @"ExecutableMatch", Value);
    }
    if (v10 && CFArrayGetCount((CFArrayRef)v10) >= 1) {
      CFDictionarySetValue(v21, @"DNSDomainMatch", v10);
    }
    if (theArray && CFArrayGetCount(theArray) >= 1) {
      CFDictionarySetValue(v21, @"AccountIdentifierMatch", theArray);
    }
    if (app_rule < 0) {
      CFArrayAppendValue(v20, v21);
    }
    else {
      CFArraySetValueAtIndex(v20, app_rule, v21);
    }
    CFDictionarySetValue(MutableCopy, @"AppRules", v20);
    SCNetworkInterfaceSetConfiguration(v8, MutableCopy);
    CFRelease(MutableCopy);
    CFRelease(v20);
    CFRelease(v21);
    return 1;
  }
  else
  {
    _SCErrorSet(1002);
    return 0;
  }
}

__SecTask *validate_app_rule(const void *a1, int a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, @"ExecutableMatch");
  CFTypeID v6 = CFArrayGetTypeID();
  if (Value && CFGetTypeID(Value) == v6)
  {
    CFIndex Count = CFArrayGetCount(Value);
    if (Count >= 1)
    {
      CFIndex v8 = 0;
      int v41 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v9 = -1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v8);
        CFTypeID v11 = CFDictionaryGetTypeID();
        if (ValueAtIndex && CFGetTypeID(ValueAtIndex) == v11)
        {
          CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"SigningIdentifier");
          CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"DesignatedRequirement");
          CFTypeID v14 = CFStringGetTypeID();
          if (!v12 || CFGetTypeID(v12) != v14) {
            return 0;
          }
          uint64_t result = (__SecTask *)CFStringGetLength(v12);
          if (!result) {
            return result;
          }
          if (a2 && CFStringHasPrefix(v12, @"com.apple."))
          {
            uint64_t v9 = 0;
            char v16 = 1;
            do
            {
              char v17 = v16;
              if (CFEqual(v12, *(&g_apple_app_exceptions + 2 * v9)))
              {
                int v41 = 1;
                goto LABEL_20;
              }
              char v16 = 0;
              uint64_t v9 = 1;
            }
            while ((v17 & 1) != 0);
            if (v41)
            {
              int v41 = 1;
            }
            else
            {
              uint64_t result = SecTaskCreateFromSelf(allocator);
              if (!result) {
                return result;
              }
              uint64_t v19 = result;
              CFTypeRef v20 = SecTaskCopyValueForEntitlement(result, @"com.apple.private.app-vpn-config", 0);
              CFTypeID v21 = CFBooleanGetTypeID();
              if (!v20)
              {
                CFRelease(v19);
                return 0;
              }
              BOOL v22 = CFGetTypeID(v20) == v21 && CFBooleanGetValue((CFBooleanRef)v20) != 0;
              CFRelease(v20);
              CFRelease(v19);
              if (!v22) {
                return 0;
              }
              int v41 = 0;
            }
            uint64_t v9 = 2;
            if (v13)
            {
LABEL_21:
              CFTypeID v18 = CFStringGetTypeID();
              if (CFGetTypeID(v13) != v18) {
                return 0;
              }
              uint64_t result = (__SecTask *)CFStringGetLength(v13);
              if (!result) {
                return result;
              }
            }
          }
          else
          {
LABEL_20:
            if (v13) {
              goto LABEL_21;
            }
          }
        }
        if (++v8 == Count)
        {
          CFIndex Count = 1;
          int v39 = v41;
          goto LABEL_36;
        }
      }
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  int v39 = 0;
  uint64_t v9 = -1;
LABEL_36:
  CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, @"AccountIdentifierMatch");
  CFTypeID v24 = CFArrayGetTypeID();
  if (v23 && CFGetTypeID(v23) == v24)
  {
    CFIndex v25 = CFArrayGetCount(v23);
    if (v25 >= 1)
    {
      int v26 = v39;
      CFIndex v27 = 0;
      while (1)
      {
        uint64_t v28 = CFArrayGetValueAtIndex(v23, v27);
        CFTypeID v29 = CFStringGetTypeID();
        if (!v28 || CFGetTypeID(v28) != v29) {
          return 0;
        }
        if (v25 == ++v27)
        {
          CFIndex v25 = 1;
          int v39 = v26;
          break;
        }
      }
    }
  }
  else
  {
    CFIndex v25 = 0;
  }
  if (!(v25 | Count)) {
    return 0;
  }
  int v30 = CFDictionaryGetValue((CFDictionaryRef)a1, @"DNSDomainMatch");
  if (v30)
  {
    CFStringRef v31 = v30;
    CFTypeID v32 = CFArrayGetTypeID();
    if (CFGetTypeID(v31) != v32) {
      return 0;
    }
    CFIndex v33 = CFArrayGetCount((CFArrayRef)v31);
    if (v33 >= 1)
    {
      CFIndex v34 = 0;
      while (1)
      {
        CFStringRef v35 = CFArrayGetValueAtIndex((CFArrayRef)v31, v34);
        CFTypeID v36 = CFStringGetTypeID();
        if (!v35 || CFGetTypeID(v35) != v36) {
          return 0;
        }
        if (v33 == ++v34)
        {
          CFIndex v33 = 1;
          break;
        }
      }
    }
  }
  else
  {
    CFIndex v33 = 0;
  }
  if (v33) {
    BOOL v37 = 1;
  }
  else {
    BOOL v37 = v39 == 0;
  }
  return (__SecTask *)(v37 || v9 < 0);
}

uint64_t find_app_rule(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppRules");
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!Value) {
    return -1;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return -1;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)Value);
  if (Count < 1) {
    return -1;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v9)
      {
        CFIndex v10 = CFDictionaryGetValue(ValueAtIndex, @"Identifier");
        if (CFEqual(a2, v10)) {
          break;
        }
      }
    }
    if (v6 == ++v7) {
      return -1;
    }
  }
  return v7;
}

CFTypeRef VPNServiceCopyAppRule(const void *a1, const void *a2)
{
  if (!isA_VPNService(a1)
    || (CFTypeID TypeID = CFStringGetTypeID(), !a2)
    || CFGetTypeID(a2) != TypeID
    || (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) == 0)
  {
    int v13 = 1002;
LABEL_13:
    _SCErrorSet(v13);
    return 0;
  }
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
  CFTypeID v7 = CFDictionaryGetTypeID();
  if (!Configuration || CFGetTypeID(Configuration) != v7) {
    goto LABEL_14;
  }
  uint64_t app_rule = find_app_rule(Configuration, a2);
  if (app_rule < 0)
  {
    int v13 = 1004;
    goto LABEL_13;
  }
  CFIndex v9 = app_rule;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(Configuration, @"AppRules");
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Value, v9);
  if (!validate_app_rule(ValueAtIndex, 0))
  {
LABEL_14:
    int v13 = 1001;
    goto LABEL_13;
  }

  return CFRetain(ValueAtIndex);
}

uint64_t VPNServiceRemoveAppRule(const void *a1, const void *a2)
{
  if (!isA_VPNService(a1)
    || (CFTypeID TypeID = CFStringGetTypeID(), !a2)
    || CFGetTypeID(a2) != TypeID
    || (SCNetworkInterfaceRef Interface = SCNetworkServiceGetInterface((SCNetworkServiceRef)a1)) == 0)
  {
    int v16 = 1002;
LABEL_13:
    _SCErrorSet(v16);
    return 0;
  }
  CFIndex v6 = Interface;
  CFDictionaryRef Configuration = SCNetworkInterfaceGetConfiguration(Interface);
  CFTypeID v8 = CFDictionaryGetTypeID();
  if (!Configuration || CFGetTypeID(Configuration) != v8) {
    goto LABEL_14;
  }
  uint64_t app_rule = find_app_rule(Configuration, a2);
  if (app_rule < 0)
  {
    int v16 = 1004;
    goto LABEL_13;
  }
  CFIndex v10 = app_rule;
  CFArrayRef Value = CFDictionaryGetValue(Configuration, @"AppRules");
  CFTypeID v12 = CFArrayGetTypeID();
  if (!Value || CFGetTypeID(Value) != v12)
  {
LABEL_14:
    int v16 = 1001;
    goto LABEL_13;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, Configuration);
  int v15 = CFArrayCreateMutableCopy(v13, 0, (CFArrayRef)Value);
  CFArrayRemoveValueAtIndex(v15, v10);
  if (CFArrayGetCount(v15) < 1) {
    CFDictionaryRemoveValue(MutableCopy, @"AppRules");
  }
  else {
    CFDictionarySetValue(MutableCopy, @"AppRules", v15);
  }
  SCNetworkInterfaceSetConfiguration(v6, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(v15);
  return 1;
}

BOOL VPNServiceIsManagedAppVPN(const void *a1)
{
  CFDictionaryRef v1 = SCNetworkServiceCopyExternalID(a1, @"MCVPNUUID");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v1) {
    return 0;
  }
  BOOL v3 = CFGetTypeID(v1) == TypeID;
  CFRelease(v1);
  return v3;
}

CFStringRef VPNAppLayerCopyMatchingService(_OWORD *a1, int a2, const unsigned __int8 *a3, const __CFString *a4, __CFString *a5, const __CFString *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!ne_session_app_vpn_configs_present()) {
    return 0;
  }
  long long v12 = a1[1];
  *(_OWORD *)int v16 = *a1;
  *(_OWORD *)&v16[16] = v12;
  CFAllocatorRef v13 = (void *)copy_path_for_app(v16, a2, a3, a4, a5, a6);
  if (v13 && nw_path_is_flow_divert())
  {
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    CFStringRef v14 = 0;
    if (nw_path_get_vpn_config_id())
    {
      memset(v16, 0, sizeof(v16));
      uuid_unparse(uu, v16);
      CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, 0x600u);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  nw_release(v13);
  return v14;
}

uint64_t copy_path_for_app(void *a1, int a2, const unsigned __int8 *a3, const __CFString *a4, __CFString *host, const __CFString *a6)
{
  nw_parameters_t v12 = nw_parameters_create();
  if (a3 && !uuid_is_null(a3)) {
    nw_parameters_set_e_proc_uuid();
  }
  if (a2) {
    nw_parameters_set_pid();
  }
  if (host)
  {
    CFIndex Length = CFStringGetLength(host);
    CFStringRef v14 = (char *)malloc_type_malloc(Length + 1, 0x1015FBDEuLL);
    CFIndex v15 = CFStringGetLength(host);
    if (CFStringGetCString(host, v14, v15 + 1, 0x600u))
    {
      host = (__CFString *)nw_endpoint_create_host(v14, "80");
      if (!v14) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    host = 0;
    if (v14) {
LABEL_9:
    }
      free(v14);
  }
LABEL_10:
  if (a6)
  {
    CFIndex v16 = CFStringGetLength(a6);
    char v17 = (char *)malloc_type_malloc(v16 + 1, 0x63C7C1B7uLL);
    CFIndex v18 = CFStringGetLength(a6);
    if (CFStringGetCString(a6, v17, v18 + 1, 0x600u)) {
      nw_parameters_set_account_id();
    }
    if (v17) {
      free(v17);
    }
  }
  if (a4)
  {
    CFIndex v19 = CFStringGetLength(a4);
    CFTypeRef v20 = (char *)malloc_type_malloc(v19 + 1, 0x2417055BuLL);
    CFIndex v21 = CFStringGetLength(a4);
    if (CFStringGetCString(a4, v20, v21 + 1, 0x600u)) {
      nw_parameters_set_effective_bundle_id();
    }
    if (v20) {
      free(v20);
    }
  }
  if (*a1 | a1[1] | a1[2] | a1[3]) {
    nw_parameters_set_effective_audit_token();
  }
  if (host || (host = (__CFString *)nw_endpoint_create_host("0.0.0.0", "0")) != 0)
  {
    uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
    if (evaluator_for_endpoint)
    {
      CFArrayRef v23 = (void *)evaluator_for_endpoint;
      uint64_t v24 = nw_path_evaluator_copy_path();
      nw_release(v23);
    }
    else
    {
      uint64_t v24 = 0;
    }
    nw_release(host);
  }
  else
  {
    uint64_t v24 = 0;
  }
  nw_release(v12);
  return v24;
}

uint64_t _SCControlPrefsCreate(const char *a1, uint64_t a2, uint64_t a3)
{
  void v4[2] = *MEMORY[0x1E4F143B8];
  v4[0] = a2;
  v4[1] = 0;
  return _SCControlPrefsCreateCommon(a1, (uint64_t)v4, a3);
}

uint64_t _SCControlPrefsCreateCommon(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (__SCControlPrefsInitialize_initialized != -1) {
    dispatch_once(&__SCControlPrefsInitialize_initialized, &__block_literal_global_19);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    *(void *)(Instance + 16) = strdup(a1);
    prefs = (const __SCPreferences *)get_prefs(Instance);
    if (prefs)
    {
      if (*(void *)a2)
      {
        CFTypeID v8 = prefs;
        context.version = 0;
        memset(&context.retain, 0, 24);
        context.info = (void *)Instance;
        *(_OWORD *)(Instance + 48) = *(_OWORD *)a2;
        *(void *)(Instance + 40) = a3;
        if (SCPreferencesSetCallback(prefs, (SCPreferencesCallBack)prefs_changed_sc, &context))
        {
          if (*(unsigned char *)(a2 + 8))
          {
            if (!SCPreferencesSetDispatchQueue(v8, *(dispatch_queue_t *)a2))
            {
              CFIndex v9 = _SC_LOG_DEFAULT();
              uint64_t v10 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v9, (os_log_type_t)v10)) {
                goto LABEL_15;
              }
              goto LABEL_16;
            }
          }
          else
          {
            CFRetain(*(CFTypeRef *)a2);
            if (!SCPreferencesScheduleWithRunLoop(v8, *(CFRunLoopRef *)a2, (CFStringRef)*MEMORY[0x1E4F1D410]))
            {
              CFIndex v9 = _SC_LOG_DEFAULT();
              uint64_t v10 = _SC_syslog_os_log_mapping(5);
              if (__SC_log_enabled(5, v9, (os_log_type_t)v10))
              {
LABEL_15:
                uint64_t v25 = _os_log_pack_size();
                CFIndex v33 = (char *)&context
                    - ((MEMORY[0x1F4188790](v25, v26, v27, v28, v29, v30, v31, v32) + 15) & 0xFFFFFFFFFFFFFFF0);
                __error();
                uint64_t v34 = _os_log_pack_fill();
                int v35 = SCError();
                CFTypeID v36 = SCErrorString(v35);
                *(_DWORD *)uint64_t v34 = 136315138;
                *(void *)(v34 + 4) = v36;
                __SC_log_send(5, (uint64_t)v9, v10, v33);
              }
LABEL_16:
              SCPreferencesSetCallback(v8, 0, 0);
            }
          }
          if (*(unsigned char *)(Instance + 56))
          {
            dispatch_queue_global_t global_queue = *(dispatch_queue_global_t *)(Instance + 48);
            uint64_t v38 = &v44;
            v44.version = MEMORY[0x1E4F143A8];
            v44.info = (void *)0x40000000;
            v44.retain = (const void *(__cdecl *)(const void *))__enable_prefs_observer_block_invoke;
            v44.release = (void (__cdecl *)(const void *))&__block_descriptor_tmp_23;
            v44.copyDescription = (CFStringRef (__cdecl *)(const void *))Instance;
          }
          else
          {
            v44.version = 0;
            v44.info = (void *)Instance;
            v44.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
            v44.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
            memset(&v44.copyDescription, 0, 40);
            v44.perform = (void (__cdecl *)(void *))prefs_changed;
            int v39 = *(__CFRunLoop **)(Instance + 48);
            uint64_t v40 = CFRunLoopSourceCreate(0, 0, &v44);
            CFRunLoopAddSource(v39, v40, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
            dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
            uint64_t v38 = (CFRunLoopSourceContext *)v43;
            v43[0] = MEMORY[0x1E4F143A8];
            v43[1] = 0x40000000;
            void v43[2] = __enable_prefs_observer_block_invoke_2;
            v43[3] = &__block_descriptor_tmp_24;
            unsigned char v43[4] = v40;
            v43[5] = v39;
          }
          _scprefs_observer_watch(2, *(char **)(Instance + 16), (uint64_t)global_queue, v38);
          return Instance;
        }
        CFTypeID v11 = _SC_LOG_DEFAULT();
        uint64_t v12 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v11, (os_log_type_t)v12))
        {
          uint64_t v13 = _os_log_pack_size();
          CFIndex v21 = (char *)&context
              - ((MEMORY[0x1F4188790](v13, v14, v15, v16, v17, v18, v19, v20) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v22 = _os_log_pack_fill();
          int v23 = SCError();
          uint64_t v24 = SCErrorString(v23);
          *(_DWORD *)uint64_t v22 = 136315138;
          *(void *)(v22 + 4) = v24;
          __SC_log_send(5, (uint64_t)v11, v12, v21);
        }
      }
    }
  }
  return Instance;
}

uint64_t _SCControlPrefsCreateWithQueue(const char *a1, uint64_t a2, uint64_t a3)
{
  void v4[2] = *MEMORY[0x1E4F143B8];
  v4[0] = a2;
  v4[1] = 1;
  return _SCControlPrefsCreateCommon(a1, (uint64_t)v4, a3);
}

uint64_t _SCControlPrefsGetBoolean(uint64_t a1, CFStringRef key)
{
  uint64_t v4 = *(const __SCPreferences **)(a1 + 32);
  if (v4
    || (v5 = CFStringCreateWithFormat(0, 0, @"%s%s", "/Library/Managed Preferences/mobile/", *(void *)(a1 + 16)), *(void *)(a1 + 32) = make_prefs(v5), CFRelease(v5), (uint64_t v4 = *(const __SCPreferences **)(a1 + 32)) != 0))
  {
    CFPropertyListRef Value = SCPreferencesGetValue(v4, key);
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      goto LABEL_9;
    }
    SCPreferencesSynchronize(v4);
  }
  prefs = (const __SCPreferences *)get_prefs(a1);
  if (!prefs) {
    return 0;
  }
  uint64_t v4 = prefs;
  CFPropertyListRef Value = SCPreferencesGetValue(prefs, key);
  CFTypeID v9 = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != v9)
  {
    uint64_t v10 = 0;
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v10 = CFBooleanGetValue((CFBooleanRef)Value);
LABEL_11:
  SCPreferencesSynchronize(v4);
  return v10;
}

uint64_t get_prefs(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result)
  {
    CFStringRef v3 = CFStringCreateWithCString(0, *(const char **)(a1 + 16), 0x8000100u);
    *(void *)(a1 + 24) = make_prefs(v3);
    CFRelease(v3);
    return *(void *)(a1 + 24);
  }
  return result;
}

uint64_t _SCControlPrefsSetBoolean(uint64_t a1, const __CFString *a2, int a3)
{
  prefs = (const __SCPreferences *)get_prefs(a1);
  if (!prefs) {
    return 0;
  }
  CFIndex v6 = prefs;
  if (a3) {
    SCPreferencesSetValue(prefs, a2, (CFPropertyListRef)*MEMORY[0x1E4F1CFD0]);
  }
  else {
    SCPreferencesRemoveValue(prefs, a2);
  }
  uint64_t v8 = SCPreferencesCommitChanges(v6);
  SCPreferencesSynchronize(v6);
  return v8;
}

void prefs_changed_sc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v3 = *(void (**)(uint64_t))(a3 + 40);
  if (v3)
  {
    v3(a3);
  }
}

void __SCControlPrefsDeallocate(uint64_t a1)
{
  if (*(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    int v2 = *(const __SCPreferences **)(a1 + 24);
    if (*(unsigned char *)(a1 + 56))
    {
      SCPreferencesSetDispatchQueue(v2, 0);
    }
    else
    {
      SCPreferencesSetCallback(v2, 0, 0);
      SCPreferencesUnscheduleFromRunLoop(*(SCPreferencesRef *)(a1 + 24), *(CFRunLoopRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E4F1D410]);
      CFRelease(*(CFTypeRef *)(a1 + 48));
    }
  }
  CFStringRef v3 = *(void **)(a1 + 16);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4) {
    CFRelease(v4);
  }
  CFStringRef v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *__SCControlPrefsCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<SCControlPrefs %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @" prefsPlist = %s", *(void *)(a1 + 16));
  if (*(void *)(a1 + 24)) {
    CFStringAppendFormat(Mutable, 0, @", prefs = %p", *(void *)(a1 + 24));
  }
  if (*(void *)(a1 + 32)) {
    CFStringAppendFormat(Mutable, 0, @", prefs_managed = %p", *(void *)(a1 + 32));
  }
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0, @", callbacCFIndex k = %p", *(void *)(a1 + 40));
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 56)) {
      CFStringRef v5 = "queue";
    }
    else {
      CFStringRef v5 = "runloop";
    }
    CFStringAppendFormat(Mutable, 0, @", %s = %p", v5, v4);
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

uint64_t prefs_changed(uint64_t result)
{
  CFDictionaryRef v1 = *(uint64_t (**)(void))(result + 40);
  if (v1)
  {
    return v1();
  }
  return result;
}

uint64_t __enable_prefs_observer_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  CFAllocatorRef v2 = *(uint64_t (**)(void))(result + 40);
  if (v2)
  {
    return v2();
  }
  return result;
}

void __enable_prefs_observer_block_invoke_2(uint64_t a1)
{
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 32));
  CFAllocatorRef v2 = *(__CFRunLoop **)(a1 + 40);

  CFRunLoopWakeUp(v2);
}

uint64_t make_prefs(const __CFString *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"remove-when-empty", (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v3 = SCPreferencesCreateWithOptions(0, @"_SCControlPrefs", a1, 0, Mutable);
  CFRelease(Mutable);
  return v3;
}

uint64_t SCNetworkCategoryManagerGetTypeID()
{
  if (__SCNetworkCategoryManagerInitialize_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryManagerInitialize_initialized, &__block_literal_global_8);
  }
  return __kSCNetworkCategoryManagerTypeID;
}

uint64_t SCNetworkCategoryManagerCreateWithInterface(const __CFString *a1, SCNetworkInterfaceRef interface, unsigned int a3, uint64_t a4)
{
  uint64_t Instance = 0;
  v14[5] = *MEMORY[0x1E4F143B8];
  int v6 = 1002;
  if (a3 <= 1 && !a4)
  {
    uint64_t Instance = 0;
    if (a1)
    {
      if (interface)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(interface);
        if (!BSDName) {
          goto LABEL_17;
        }
        CFStringRef v9 = BSDName;
        if (__SCNetworkCategoryManagerInitialize_initialized != -1) {
          dispatch_once(&__SCNetworkCategoryManagerInitialize_initialized, &__block_literal_global_8);
        }
        uint64_t Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          *(void *)(Instance + 16) = CFStringCreateCopy(0, a1);
          *(_DWORD *)(Instance + 32) = a3;
          *(void *)(Instance + 24) = CFStringCreateCopy(0, v9);
        }
        uint64_t v10 = dispatch_queue_create("SCNetworkCategoryManager", 0);
        *(void *)(Instance + 56) = v10;
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 0x40000000;
        void v14[2] = __SCNetworkCategoryManagerCreateWithInterface_block_invoke;
        v14[3] = &__block_descriptor_tmp_22;
        v14[4] = Instance;
        CFTypeID v11 = CategoryManagerConnectionCreate(v10, (uint64_t)v14);
        *(void *)(Instance + 48) = v11;
        if (!v11)
        {
          CFRelease((CFTypeRef)Instance);
          goto LABEL_17;
        }
        int v6 = CategoryManagerConnectionRegister(v11, *(const __CFString **)(Instance + 16), *(const __CFString **)(Instance + 24), *(_DWORD *)(Instance + 32));
        if (v6)
        {
          int v12 = v6;
          CFRelease((CFTypeRef)Instance);
          if (v12 == 1)
          {
            uint64_t Instance = 0;
            int v6 = 1003;
            goto LABEL_18;
          }
          if (v12 == 2)
          {
            uint64_t Instance = 0;
            int v6 = 2002;
            goto LABEL_18;
          }
          if (v12 != 22)
          {
            uint64_t Instance = 0;
            int v6 = 1001;
            goto LABEL_18;
          }
LABEL_17:
          uint64_t Instance = 0;
          int v6 = 1002;
        }
      }
    }
  }
LABEL_18:
  _SCErrorSet(v6);
  return Instance;
}

void __SCNetworkCategoryManagerCreateWithInterface_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 48) == a2)
  {
    switch(a3)
    {
      case 3:
        SCNetworkCategoryManagerDeliverNotification(v5);
        break;
      case 2:
        uint64_t v31 = _SC_LOG_DEFAULT();
        uint64_t v32 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v31, (os_log_type_t)v32))
        {
          uint64_t v33 = _os_log_pack_size();
          int v41 = (char *)v43
              - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v42 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v42 = 136315394;
          *(void *)(v42 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
          *(_WORD *)(v42 + 12) = 2048;
          *(void *)(v42 + 14) = a2;
          __SC_log_send(5, (uint64_t)v31, v32, v41);
        }
        CategoryManagerConnectionSynchronize(*(_xpc_connection_s **)(*(void *)(a1 + 32) + 48), *(const __CFString **)(*(void *)(a1 + 32) + 16), *(const __CFString **)(*(void *)(a1 + 32) + 24), *(_DWORD *)(*(void *)(a1 + 32) + 32), *(const __CFString **)(*(void *)(a1 + 32) + 40));
        break;
      case 1:
        uint64_t v19 = _SC_LOG_DEFAULT();
        uint64_t v20 = _SC_syslog_os_log_mapping(5);
        if (__SC_log_enabled(5, v19, (os_log_type_t)v20))
        {
          uint64_t v21 = _os_log_pack_size();
          uint64_t v29 = (char *)v43
              - ((MEMORY[0x1F4188790](v21, v22, v23, v24, v25, v26, v27, v28) + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v30 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v30 = 136315394;
          *(void *)(v30 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
          *(_WORD *)(v30 + 12) = 2048;
          *(void *)(v30 + 14) = a2;
          __SC_log_send(5, (uint64_t)v19, v20, v29);
        }
        break;
    }
  }
  else
  {
    int v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)v43 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 48);
      *(_DWORD *)uint64_t v17 = 136315650;
      *(void *)(v17 + 4) = "SCNetworkCategoryManagerCreateWithInterface_block_invoke";
      *(_WORD *)(v17 + 12) = 2048;
      *(void *)(v17 + 14) = v18;
      *(_WORD *)(v17 + 22) = 2048;
      *(void *)(v17 + 24) = a2;
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
  }
}

void SCNetworkCategoryManagerDeliverNotification(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v31 = 0;
  CFStringRef v2 = CategoryManagerConnectionCopyActiveValue(*(_xpc_connection_s **)(a1 + 48), &v31);
  uint64_t v3 = _SC_LOG_DEFAULT();
  uint64_t v4 = _SC_syslog_os_log_mapping(5);
  if (__SC_log_enabled(5, v3, (os_log_type_t)v4))
  {
    uint64_t v5 = _os_log_pack_size();
    uint64_t v13 = (char *)block - ((MEMORY[0x1F4188790](v5, v6, v7, v8, v9, v10, v11, v12) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    int v15 = v31;
    *(_DWORD *)uint64_t v14 = 136315650;
    *(void *)(v14 + 4) = "SCNetworkCategoryManagerDeliverNotification";
    *(_WORD *)(v14 + 12) = 2112;
    *(void *)(v14 + 14) = v2;
    *(_WORD *)(v14 + 22) = 1024;
    *(_DWORD *)(v14 + 24) = v15;
    __SC_log_send(5, (uint64_t)v3, v4, v13);
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (v16)
  {
    dispatch_queue_global_t global_queue = *(NSObject **)(a1 + 72);
    if (!global_queue) {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SCNetworkCategoryManagerDeliverNotification_block_invoke;
    block[3] = &unk_1E55BCD90;
    block[4] = v16;
    void block[5] = v2;
    dispatch_async(global_queue, block);
  }
  else
  {
    uint64_t v18 = _SC_LOG_DEFAULT();
    uint64_t v19 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v18, (os_log_type_t)v19))
    {
      uint64_t v20 = _os_log_pack_size();
      uint64_t v28 = (char *)block - ((MEMORY[0x1F4188790](v20, v21, v22, v23, v24, v25, v26, v27) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)(v29 + 4) = "SCNetworkCategoryManagerDeliverNotification";
      __SC_log_send(5, (uint64_t)v18, v19, v28);
    }
    if (v2) {
      CFRelease(v2);
    }
  }
}

void SCNetworkCategoryManagerSetNotifyHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = *MEMORY[0x1E4F143B8];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __SCNetworkCategoryManagerSetNotifyHandler_block_invoke;
  v3[3] = &unk_1E55BCD00;
  v3[5] = a2;
  v3[6] = a1;
  v3[4] = a3;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), v3);
}

void *__SCNetworkCategoryManagerSetNotifyHandler_block_invoke(void *a1)
{
  CFStringRef v2 = a1[5];
  if (v2) {
    dispatch_retain(v2);
  }
  uint64_t v3 = a1[6];
  uint64_t v4 = *(NSObject **)(v3 + 72);
  if (v4)
  {
    dispatch_release(v4);
    uint64_t v3 = a1[6];
  }
  *(void *)(v3 + 72) = a1[5];
  uint64_t v5 = *(const void **)(a1[6] + 64);
  if (v5) {
    _Block_release(v5);
  }
  uint64_t result = (void *)a1[4];
  if (result)
  {
    uint64_t result = _Block_copy(result);
    *(void *)(a1[6] + 64) = result;
  }
  return result;
}

BOOL SCNetworkCategoryManagerActivateValue(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __SCNetworkCategoryManagerActivateValue_block_invoke;
  v9[3] = &unk_1E55BCD28;
  void v9[4] = &v10;
  v9[5] = a1;
  v9[6] = a2;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), v9);
  int v2 = *((_DWORD *)v11 + 6);
  if (v2 == 22) {
    int v3 = 1002;
  }
  else {
    int v3 = 1001;
  }
  if (v2 == 2) {
    int v4 = 2002;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1) {
    int v5 = 1003;
  }
  else {
    int v5 = 1001;
  }
  if (!v2) {
    int v5 = 0;
  }
  if (v2 <= 1) {
    int v6 = v5;
  }
  else {
    int v6 = v4;
  }
  _SCErrorSet(v6);
  BOOL v7 = *((_DWORD *)v11 + 6) == 0;
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t __SCNetworkCategoryManagerActivateValue_block_invoke(uint64_t a1)
{
  uint64_t result = CategoryManagerConnectionActivateValue(*(_xpc_connection_s **)(*(void *)(a1 + 40) + 48), *(const __CFString **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_xpc_connection_s *__SCNetworkCategoryManagerCopyActiveValueNoSession(const __CFString *a1, SCNetworkInterfaceRef interface)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v7 = 0;
  if (__SCNetworkCategoryManagerCopyActiveValueNoSession_initialized != -1) {
    dispatch_once(&__SCNetworkCategoryManagerCopyActiveValueNoSession_initialized, &__block_literal_global_20);
  }
  uint64_t result = (_xpc_connection_s *)__SCNetworkCategoryManagerCopyActiveValueNoSession_connection;
  if (__SCNetworkCategoryManagerCopyActiveValueNoSession_connection)
  {
    if (interface)
    {
      uint64_t result = (_xpc_connection_s *)SCNetworkInterfaceGetBSDName(interface);
      if (!result) {
        return result;
      }
      CFStringRef v5 = (const __CFString *)result;
      uint64_t result = (_xpc_connection_s *)__SCNetworkCategoryManagerCopyActiveValueNoSession_connection;
    }
    else
    {
      CFStringRef v5 = 0;
    }
    uint64_t result = (_xpc_connection_s *)CategoryManagerConnectionCopyActiveValueNoSession(result, a1, v5, &v7);
    if (!result)
    {
      int v6 = 1001;
      if (v7 > 1)
      {
        if (v7 == 2)
        {
          int v6 = 2002;
        }
        else if (v7 == 22)
        {
          int v6 = 1002;
        }
      }
      else if (v7)
      {
        if (v7 == 1) {
          int v6 = 1003;
        }
      }
      else
      {
        int v6 = 0;
      }
      _SCErrorSet(v6);
      return 0;
    }
  }
  return result;
}

void __SCNetworkCategoryManagerDeallocate(void *a1)
{
  int v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  int v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  int v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  CFStringRef v5 = (void *)a1[6];
  if (v5)
  {
    xpc_release(v5);
    a1[6] = 0;
  }
  int v6 = a1[7];
  if (v6)
  {
    dispatch_release(v6);
    a1[7] = 0;
  }
  int v7 = a1[9];
  if (v7)
  {
    dispatch_release(v7);
    a1[9] = 0;
  }
  uint64_t v8 = (const void *)a1[8];
  if (v8)
  {
    _Block_release(v8);
    a1[8] = 0;
  }
}

uint64_t __SCNetworkCategoryManagerEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  int v4 = *(const void **)(a1 + 24);
  CFStringRef v5 = *(const void **)(a2 + 24);
  if (v4 == v5 || (uint64_t result = 0, v4) && v5 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 24), v5), result))
  {
    int v7 = *(const void **)(a1 + 16);
    uint64_t v8 = *(const void **)(a2 + 16);
    return CFEqual(v7, v8);
  }
  return result;
}

CFHashCode __SCNetworkCategoryManagerHash(uint64_t a1)
{
  CFHashCode v2 = CFHash(*(CFTypeRef *)(a1 + 16));
  int v3 = *(const void **)(a1 + 24);
  if (v3) {
    v2 ^= CFHash(v3);
  }
  return v2;
}

__CFString *__SCNetworkCategoryManagerCopyDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<%s %p [%p]> { ID = %@, ifio_name_t name = %@, flags = 0x%x }", "SCNetworkCategoryManager", a1, v2, *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32));
  return Mutable;
}

void __SCNetworkCategoryManagerDeliverNotification_block_invoke(uint64_t a1)
{
  CFDictionaryRef v1 = *(const void **)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v1)
  {
    CFRelease(v1);
  }
}

uint64_t IPMonitorControlCreate()
{
  v4[5] = *MEMORY[0x1E4F143B8];
  if (__IPMonitorControlRegisterClass_once != -1) {
    dispatch_once(&__IPMonitorControlRegisterClass_once, &__block_literal_global_21);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  CFDictionaryRef v1 = dispatch_queue_create("IPMonitorControl", 0);
  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.IPMonitorControl", v1, 2uLL);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __IPMonitorControlCreate_block_invoke;
  void v4[3] = &__block_descriptor_tmp_23;
  v4[4] = Instance;
  xpc_connection_set_event_handler(mach_service, v4);
  *(void *)(Instance + 16) = v1;
  *(void *)(Instance + 24) = mach_service;
  xpc_connection_resume(mach_service);
  return Instance;
}

void __IPMonitorControlCreate_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  char v6 = 0;
  IPMonitorControlHandleResponse(a2, 1, &v6);
  if (v6)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    CFDictionaryRef v4 = *(const __CFDictionary **)(v3 + 32);
    if (v4)
    {
      CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)ApplyInterfaceRank, *(void **)(v3 + 24));
      uint64_t v3 = *(void *)(a1 + 32);
    }
    CFDictionaryRef v5 = *(const __CFDictionary **)(v3 + 40);
    if (v5) {
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)ApplyInterfaceAdvisory, *(void **)(v3 + 24));
    }
  }
}

BOOL IPMonitorControlHandleResponse(void *a1, int a2, char *a3)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = MEMORY[0x192FA8830]();
  if (v6 == MEMORY[0x1E4F14590])
  {
    if (a2)
    {
      uint64_t v22 = _SC_LOG_DEFAULT();
      uint64_t v23 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v22, (os_log_type_t)v23);
      if (result)
      {
        uint64_t v24 = _os_log_pack_size();
        uint64_t v32 = (char *)v43 - ((MEMORY[0x1F4188790](v24, v25, v26, v27, v28, v29, v30, v31) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send(5, (uint64_t)v22, v23, v32);
LABEL_12:
        BOOL result = 0;
        goto LABEL_13;
      }
      goto LABEL_13;
    }
    int64_t int64 = xpc_dictionary_get_int64(a1, "Error");
    char v41 = 0;
    BOOL result = int64 == 0;
  }
  else
  {
    string = (const char *)v6;
    if (v6 != MEMORY[0x1E4F145A8])
    {
      uint64_t v8 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v11 = _os_log_pack_size();
        uint64_t v19 = (char *)v43 - ((MEMORY[0x1F4188790](v11, v12, v13, v14, v15, v16, v17, v18) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        int v21 = 134217984;
LABEL_11:
        *(_DWORD *)uint64_t v20 = v21;
        *(void *)(v20 + 4) = string;
        __SC_log_send(5, (uint64_t)v8, v9, v19);
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if (a1 != (void *)MEMORY[0x1E4F14520])
    {
      string = xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x1E4F14530]);
      uint64_t v8 = _SC_LOG_DEFAULT();
      uint64_t v9 = _SC_syslog_os_log_mapping(5);
      BOOL result = __SC_log_enabled(5, v8, (os_log_type_t)v9);
      if (result)
      {
        uint64_t v33 = _os_log_pack_size();
        uint64_t v19 = (char *)v43 - ((MEMORY[0x1F4188790](v33, v34, v35, v36, v37, v38, v39, v40) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        int v21 = 136315138;
        goto LABEL_11;
      }
LABEL_13:
      char v41 = 0;
      goto LABEL_14;
    }
    BOOL result = 0;
    char v41 = 1;
  }
LABEL_14:
  if (a3) {
    *a3 = v41;
  }
  return result;
}

void ApplyInterfaceRank(const __CFString *a1, const __CFNumber *a2, _xpc_connection_s *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
  {
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      xpc_object_t request_dictionary = create_request_dictionary();
      xpc_dictionary_set_int64(request_dictionary, "Type", 1);
      xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
      xpc_dictionary_set_int64(request_dictionary, "PrimaryRank", valuePtr);
      xpc_connection_send_message(a3, request_dictionary);
      xpc_release(request_dictionary);
    }
  }
}

void ApplyInterfaceAdvisory(const __CFString *a1, const __CFNumber *a2, _xpc_connection_s *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = 0;
  if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
  {
    if (CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr))
    {
      xpc_object_t request_dictionary = create_request_dictionary();
      xpc_dictionary_set_int64(request_dictionary, "Type", 3);
      xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
      xpc_dictionary_set_int64(request_dictionary, "Advisory", valuePtr);
      xpc_connection_send_message(a3, request_dictionary);
      xpc_release(request_dictionary);
    }
  }
}

uint64_t IPMonitorControlSetInterfacePrimaryRank(void *a1, CFStringRef theString, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = CFStringGetCString(theString, buffer, 16, 0x8000100u);
  if (result)
  {
    xpc_object_t request_dictionary = create_request_dictionary();
    xpc_dictionary_set_int64(request_dictionary, "Type", 1);
    xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
    xpc_dictionary_set_int64(request_dictionary, "PrimaryRank", a3);
    xpc_object_t v8 = IPMonitorControlSendRequest((uint64_t)a1, request_dictionary);
    xpc_release(request_dictionary);
    if (v8)
    {
      xpc_release(v8);
      CFRetain(theString);
      CFRetain(a1);
      uint64_t v9 = a1[2];
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 0x40000000;
      v10[2] = __IPMonitorControlSetInterfacePrimaryRank_block_invoke;
      v10[3] = &__block_descriptor_tmp_7_1;
      v10[4] = a1;
      v10[5] = theString;
      unsigned int v11 = a3;
      dispatch_async(v9, v10);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

xpc_object_t create_request_dictionary()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  CFDictionaryRef v1 = getprogname();
  if (v1) {
    xpc_dictionary_set_string(v0, "ProcessName", v1);
  }
  return v0;
}

xpc_object_t IPMonitorControlSendRequest(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  HIBYTE(v18) = 0;
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 24), a2);
  if (v4)
  {
    xpc_object_t v5 = v4;
    while (!IPMonitorControlHandleResponse(v5, 0, (char *)&v18 + 7))
    {
      xpc_release(v5);
      if (!HIBYTE(v18))
      {
        uint64_t v6 = _SC_LOG_DEFAULT();
        uint64_t v7 = _SC_syslog_os_log_mapping(5);
        if (!__SC_log_enabled(5, v6, (os_log_type_t)v7)) {
          return 0;
        }
        goto LABEL_9;
      }
      HIBYTE(v18) = 0;
      xpc_object_t v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 24), a2);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = _SC_LOG_DEFAULT();
    uint64_t v7 = _SC_syslog_os_log_mapping(5);
    if (__SC_log_enabled(5, v6, (os_log_type_t)v7))
    {
LABEL_9:
      uint64_t v8 = _os_log_pack_size();
      uint64_t v16 = (char *)&v18 - ((MEMORY[0x1F4188790](v8, v9, v10, v11, v12, v13, v14, v15) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send(5, (uint64_t)v6, v7, v16);
    }
    return 0;
  }
  return v5;
}

void __IPMonitorControlSetInterfacePrimaryRank_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  CFAllocatorRef v2 = *(const void **)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  int valuePtr = v4;
  xpc_object_t v5 = *(__CFDictionary **)(v3 + 32);
  if (!v5)
  {
    if (!v4) {
      goto LABEL_9;
    }
    *(void *)(v3 + 32) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_8:
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 32), v2, v7);
    CFRelease(v7);
    goto LABEL_9;
  }
  if (v4) {
    goto LABEL_8;
  }
  CFDictionaryRemoveValue(v5, v2);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 32)))
  {
    uint64_t v6 = *(const void **)(v3 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 32) = 0;
    }
  }
LABEL_9:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

int64_t IPMonitorControlGetInterfacePrimaryRank(uint64_t a1, CFStringRef theString)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!CFStringGetCString(theString, buffer, 16, 0x8000100u)) {
    return 0;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 2);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  xpc_object_t v4 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v4)
  {
    xpc_object_t v5 = v4;
    int64_t int64 = xpc_dictionary_get_int64(v4, "PrimaryRank");
    xpc_release(v5);
  }
  else
  {
    int64_t int64 = 0;
  }
  xpc_release(request_dictionary);
  return int64;
}

CFStringRef IPMonitorControlCopyInterfaceRankAssertionNotificationKey(CFStringRef ifname)
{
  return SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, @"State:", ifname, @"RankAssertion");
}

uint64_t InterfaceRankAssertionInfoGetPrimaryRank(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"PrimaryRank");
}

uint64_t cfdict_get_number(const __CFDictionary *a1, const void *a2)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  CFPropertyListRef Value = CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, v5);
  return v5[0];
}

uint64_t InterfaceRankAssertionInfoGetProcessID(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"ProcessID");
}

const void *InterfaceRankAssertionInfoGetProcessName(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, @"ProcessName");
}

uint64_t IPMonitorControlCopyInterfaceRankAssertionInfo(uint64_t a1, const __CFString *a2)
{
  return CopyAssertionOrAdvisoryInfo(a1, a2, 6u, "RankAssertionInfo");
}

uint64_t CopyAssertionOrAdvisoryInfo(uint64_t a1, CFStringRef theString, unsigned int a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!CFStringGetCString(theString, buffer, 16, 0x8000100u)) {
    return 0;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", a3);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  xpc_object_t v8 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v8)
  {
    uint64_t v9 = v8;
    if (xpc_dictionary_get_value(v8, a4)) {
      uint64_t v10 = _CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      uint64_t v10 = 0;
    }
    xpc_release(v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  xpc_release(request_dictionary);
  return v10;
}

uint64_t IPMonitorControlCopyInterfaceRankAssertionInterfaceNames(uint64_t a1)
{
  return CopyInterfaceNames(a1, 8u);
}

uint64_t CopyInterfaceNames(uint64_t a1, unsigned int a2)
{
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", a2);
  xpc_object_t v5 = IPMonitorControlSendRequest(a1, request_dictionary);
  if (v5)
  {
    uint64_t v6 = v5;
    if (xpc_dictionary_get_value(v5, "InterfaceNames")) {
      uint64_t v7 = _CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      uint64_t v7 = 0;
    }
    xpc_release(v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  xpc_release(request_dictionary);
  return v7;
}

uint64_t IPMonitorControlSetInterfaceAdvisory(void *a1, CFStringRef theString, unsigned int a3, const __CFString *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = CFStringGetCString(theString, buffer, 16, 0x8000100u);
  if (result)
  {
    if (a4) {
      uint64_t v9 = _SC_cfstring_to_cstring(a4, 0, 0, 0x8000100u);
    }
    else {
      uint64_t v9 = 0;
    }
    xpc_object_t request_dictionary = create_request_dictionary();
    xpc_dictionary_set_int64(request_dictionary, "Type", 3);
    xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
    xpc_dictionary_set_int64(request_dictionary, "Advisory", a3);
    if (v9)
    {
      xpc_dictionary_set_string(request_dictionary, "Reason", (const char *)v9);
      CFAllocatorDeallocate(0, v9);
    }
    xpc_object_t v11 = IPMonitorControlSendRequest((uint64_t)a1, request_dictionary);
    xpc_release(request_dictionary);
    if (v11)
    {
      xpc_release(v11);
      CFRetain(theString);
      CFRetain(a1);
      uint64_t v12 = a1[2];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 0x40000000;
      uint64_t v13[2] = __IPMonitorControlSetInterfaceAdvisory_block_invoke;
      v13[3] = &__block_descriptor_tmp_18;
      v13[4] = a1;
      v13[5] = theString;
      unsigned int v14 = a3;
      dispatch_async(v12, v13);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void __IPMonitorControlSetInterfaceAdvisory_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  CFAllocatorRef v2 = *(const void **)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  int valuePtr = v4;
  xpc_object_t v5 = *(__CFDictionary **)(v3 + 40);
  if (!v5)
  {
    if (!v4) {
      goto LABEL_9;
    }
    *(void *)(v3 + 40) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_8:
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 40), v2, v7);
    CFRelease(v7);
    goto LABEL_9;
  }
  if (v4) {
    goto LABEL_8;
  }
  CFDictionaryRemoveValue(v5, v2);
  if (!CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 40)))
  {
    uint64_t v6 = *(const void **)(v3 + 40);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v3 + 40) = 0;
    }
  }
LABEL_9:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

BOOL IPMonitorControlIsInterfaceAdvisorySet(uint64_t a1, CFStringRef theString, unsigned int a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!CFStringGetCString(theString, buffer, 16, 0x8000100u)) {
    return 0;
  }
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 4);
  xpc_dictionary_set_string(request_dictionary, "InterfaceName", buffer);
  if (a3) {
    xpc_dictionary_set_int64(request_dictionary, "Advisory", a3);
  }
  xpc_object_t v6 = IPMonitorControlSendRequest(a1, request_dictionary);
  xpc_release(request_dictionary);
  if (!v6) {
    return 0;
  }
  BOOL v7 = xpc_dictionary_get_BOOL(v6, "AdvisoryIsSet");
  xpc_release(v6);
  return v7;
}

BOOL IPMonitorControlAnyInterfaceAdvisoryIsSet(uint64_t a1)
{
  xpc_object_t request_dictionary = create_request_dictionary();
  xpc_dictionary_set_int64(request_dictionary, "Type", 5);
  xpc_object_t v3 = IPMonitorControlSendRequest(a1, request_dictionary);
  xpc_release(request_dictionary);
  if (!v3) {
    return 0;
  }
  BOOL v4 = xpc_dictionary_get_BOOL(v3, "AdvisoryIsSet");
  xpc_release(v3);
  return v4;
}

CFStringRef IPMonitorControlCopyInterfaceAdvisoryNotificationKey(CFStringRef ifname)
{
  return SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, @"State:", ifname, @"Advisory");
}

uint64_t InterfaceAdvisoryInfoGetAdvisory(const __CFDictionary *a1)
{
  return cfdict_get_number(a1, @"Advisory");
}

uint64_t IPMonitorControlCopyInterfaceAdvisoryInfo(uint64_t a1, const __CFString *a2)
{
  return CopyAssertionOrAdvisoryInfo(a1, a2, 7u, "AdvisoryInfo");
}

uint64_t IPMonitorControlCopyInterfaceAdvisoryInterfaceNames(uint64_t a1)
{
  return CopyInterfaceNames(a1, 9u);
}

void __IPMonitorControlDeallocate(void *a1)
{
  CFAllocatorRef v2 = (void *)a1[3];
  if (v2) {
    xpc_release(v2);
  }
  xpc_object_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  BOOL v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  xpc_object_t v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
}

CFStringRef __IPMonitorControlCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<IPMonitorControl %p>", a1);
}

uint64_t configlist(mach_port_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  msg.msgh_id = 0;
  uint64_t v21 = 0;
  long long v22 = 0u;
  *(_OWORD *)&msg.msgh_size = 0u;
  int v17 = 1;
  uint64_t v18 = a2;
  int v19 = 16777472;
  unsigned int v20 = a3;
  uint64_t v21 = *MEMORY[0x1E4F14068];
  *(void *)&long long v22 = __PAIR64__(a4, a3);
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4E2800000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v12 = mach_msg(&msg, 3162115, 0x3Cu, 0x44u, special_reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) > 0xE || ((1 << (v12 - 2)) & 0x4003) == 0)
  {
    if (!v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988;
      }
      else if (msg.msgh_id == 20108)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v13 = 4294966996;
            if (HIDWORD(v18))
            {
              if (msg.msgh_remote_port) {
                uint64_t v13 = 4294966996;
              }
              else {
                uint64_t v13 = HIDWORD(v18);
              }
            }
          }
          else
          {
            uint64_t v13 = 4294966996;
          }
          goto LABEL_24;
        }
        uint64_t v13 = 4294966996;
        if (v17 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v19) == 1)
        {
          unsigned int v14 = v20;
          if (v20 == v22)
          {
            uint64_t v13 = 0;
            *a5 = v18;
            *a6 = v14;
            *a7 = DWORD1(v22);
            return v13;
          }
        }
      }
      else
      {
        uint64_t v13 = 4294966995;
      }
LABEL_24:
      mach_msg_destroy(&msg);
      return v13;
    }
    mig_dealloc_special_reply_port();
  }
  return v13;
}

uint64_t configadd(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v17 = 2;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = a4;
  int v22 = 16777472;
  int v23 = a5;
  uint64_t v24 = *MEMORY[0x1E4F14068];
  int v25 = a3;
  int v26 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E2900000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988;
      }
      else if (msg.msgh_id == 20109)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                int v15 = v20;
                *a6 = v19;
                *a7 = v15;
                return v12;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v18) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996;
            }
            else {
              uint64_t v12 = HIDWORD(v18);
            }
            goto LABEL_22;
          }
        }
        uint64_t v12 = 4294966996;
      }
      else
      {
        uint64_t v12 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  return v12;
}

uint64_t configremove(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v12 = 1;
  uint64_t v13 = a2;
  int v14 = 16777472;
  int v15 = a3;
  uint64_t v16 = *MEMORY[0x1E4F14068];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&v11.msgh_bits = 2147489043;
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  *(void *)&v11.msgh_voucher_port = 0x4E2C00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&v11);
    mach_port_t special_reply_port = v11.msgh_local_port;
  }
  uint64_t v7 = mach_msg(&v11, 3162115, 0x38u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (v11.msgh_id == 20112)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              uint64_t v8 = HIDWORD(v13);
              if (!HIDWORD(v13))
              {
                *a4 = v14;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = HIDWORD(v13) == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = HIDWORD(v13);
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&v11);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t configadd_s(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v17 = 2;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = a4;
  int v22 = 16777472;
  int v23 = a5;
  uint64_t v24 = *MEMORY[0x1E4F14068];
  int v25 = a3;
  int v26 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E2E00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3162115, 0x4Cu, 0x34u, special_reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!v11)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v12 = 4294966988;
      }
      else if (msg.msgh_id == 20114)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 44)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v12 = HIDWORD(v18);
              if (!HIDWORD(v18))
              {
                int v15 = v20;
                *a6 = v19;
                *a7 = v15;
                return v12;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = HIDWORD(v18) == 0;
            }
            if (v13) {
              uint64_t v12 = 4294966996;
            }
            else {
              uint64_t v12 = HIDWORD(v18);
            }
            goto LABEL_22;
          }
        }
        uint64_t v12 = 4294966996;
      }
      else
      {
        uint64_t v12 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  return v12;
}

uint64_t confignotify(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v12 = 1;
  uint64_t v13 = a2;
  int v14 = 16777472;
  int v15 = a3;
  uint64_t v16 = *MEMORY[0x1E4F14068];
  int v17 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&v11.msgh_bits = 2147489043;
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = special_reply_port;
  *(void *)&v11.msgh_voucher_port = 0x4E2F00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&v11);
    mach_port_t special_reply_port = v11.msgh_local_port;
  }
  uint64_t v7 = mach_msg(&v11, 3162115, 0x38u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (v11.msgh_id == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (v11.msgh_id == 20115)
      {
        if ((v11.msgh_bits & 0x80000000) == 0)
        {
          if (v11.msgh_size == 40)
          {
            if (!v11.msgh_remote_port)
            {
              uint64_t v8 = HIDWORD(v13);
              if (!HIDWORD(v13))
              {
                *a4 = v14;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (v11.msgh_size == 36)
          {
            if (v11.msgh_remote_port) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = HIDWORD(v13) == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = HIDWORD(v13);
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&v11);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t configget_m(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v18 = 2;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  uint64_t v22 = a4;
  int v23 = 16777472;
  int v24 = a5;
  uint64_t v25 = *MEMORY[0x1E4F14068];
  int v26 = a3;
  int v27 = a5;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E3000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3162115, 0x4Cu, 0x44u, special_reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 20116)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 36)
          {
            uint64_t v14 = 4294966996;
            if (HIDWORD(v19))
            {
              if (msg.msgh_remote_port) {
                uint64_t v14 = 4294966996;
              }
              else {
                uint64_t v14 = HIDWORD(v19);
              }
            }
          }
          else
          {
            uint64_t v14 = 4294966996;
          }
          goto LABEL_24;
        }
        uint64_t v14 = 4294966996;
        if (v18 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
        {
          int v15 = v21;
          if (v21 == v23)
          {
            uint64_t v14 = 0;
            *a6 = v19;
            *a7 = v15;
            *a8 = v24;
            return v14;
          }
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
LABEL_24:
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  return v14;
}

uint64_t notifyremove(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1E4F14068];
  int v18 = a3;
  int v19 = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x4E3300000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v8 = mach_msg(&msg, 3162115, 0x3Cu, 0x30u, special_reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (!v8)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v9 = 4294966988;
      }
      else if (msg.msgh_id == 20119)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v9 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a5 = v15;
                return v9;
              }
              goto LABEL_22;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = HIDWORD(v14) == 0;
            }
            if (v10) {
              uint64_t v9 = 4294966996;
            }
            else {
              uint64_t v9 = HIDWORD(v14);
            }
            goto LABEL_22;
          }
        }
        uint64_t v9 = 4294966996;
      }
      else
      {
        uint64_t v9 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(&msg);
      return v9;
    }
    mig_dealloc_special_reply_port();
  }
  return v9;
}

uint64_t notifycancel(mach_port_t a1, mach_port_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[1].uint64_t msgh_remote_port = 0u;
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg[0].uint64_t msgh_remote_port = a1;
  msg[0].msgh_local_port = special_reply_port;
  msg[0].msgh_bits = 5395;
  *(void *)&msg[0].msgh_voucher_port = 0x4E3800000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(msg);
    mach_port_t special_reply_port = msg[0].msgh_local_port;
  }
  uint64_t v5 = mach_msg(msg, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  uint64_t msgh_remote_port = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (msg[0].msgh_id == 71)
      {
        uint64_t msgh_remote_port = 4294966988;
      }
      else if (msg[0].msgh_id == 20124)
      {
        if ((msg[0].msgh_bits & 0x80000000) == 0)
        {
          if (msg[0].msgh_size == 40)
          {
            if (!msg[0].msgh_remote_port)
            {
              uint64_t msgh_remote_port = msg[1].msgh_remote_port;
              if (!msg[1].msgh_remote_port)
              {
                *a2 = msg[1].msgh_local_port;
                return msgh_remote_port;
              }
              goto LABEL_22;
            }
          }
          else if (msg[0].msgh_size == 36)
          {
            if (msg[0].msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = msg[1].msgh_remote_port == 0;
            }
            if (v7) {
              uint64_t msgh_remote_port = 4294966996;
            }
            else {
              uint64_t msgh_remote_port = msg[1].msgh_remote_port;
            }
            goto LABEL_22;
          }
        }
        uint64_t msgh_remote_port = 4294966996;
      }
      else
      {
        uint64_t msgh_remote_port = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(msg);
      return msgh_remote_port;
    }
    mig_dealloc_special_reply_port();
  }
  return msgh_remote_port;
}

uint64_t notifyviafd(int a1, int a2, int a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[20] = 0u;
  *(_OWORD *)&msg[4] = 0u;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  int v12 = 1114112;
  uint64_t v13 = *MEMORY[0x1E4F14068];
  int v14 = a3;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = -2147478253;
  *(void *)&msg[16] = 0x4E3A00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)msg, 3162115, 0x34u, 0x30u, special_reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 20126)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 40)
          {
            if (!*(_DWORD *)&msg[8])
            {
              uint64_t v8 = *(unsigned int *)&msg[32];
              if (!*(_DWORD *)&msg[32])
              {
                *a4 = v12;
                return v8;
              }
              goto LABEL_22;
            }
          }
          else if (*(_DWORD *)&msg[4] == 36)
          {
            if (*(_DWORD *)&msg[8]) {
              BOOL v9 = 1;
            }
            else {
              BOOL v9 = *(_DWORD *)&msg[32] == 0;
            }
            if (v9) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = *(unsigned int *)&msg[32];
            }
            goto LABEL_22;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  return v8;
}

uint64_t snapshot(mach_port_t a1, mach_port_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[1].uint64_t msgh_remote_port = 0u;
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  msg[0].uint64_t msgh_remote_port = a1;
  msg[0].msgh_local_port = special_reply_port;
  msg[0].msgh_bits = 5395;
  *(void *)&msg[0].msgh_voucher_port = 0x4E3D00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(msg);
    mach_port_t special_reply_port = msg[0].msgh_local_port;
  }
  uint64_t v5 = mach_msg(msg, 3162115, 0x18u, 0x30u, special_reply_port, 0, 0);
  uint64_t msgh_remote_port = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (msg[0].msgh_id == 71)
      {
        uint64_t msgh_remote_port = 4294966988;
      }
      else if (msg[0].msgh_id == 20129)
      {
        if ((msg[0].msgh_bits & 0x80000000) == 0)
        {
          if (msg[0].msgh_size == 40)
          {
            if (!msg[0].msgh_remote_port)
            {
              uint64_t msgh_remote_port = msg[1].msgh_remote_port;
              if (!msg[1].msgh_remote_port)
              {
                *a2 = msg[1].msgh_local_port;
                return msgh_remote_port;
              }
              goto LABEL_22;
            }
          }
          else if (msg[0].msgh_size == 36)
          {
            if (msg[0].msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = msg[1].msgh_remote_port == 0;
            }
            if (v7) {
              uint64_t msgh_remote_port = 4294966996;
            }
            else {
              uint64_t msgh_remote_port = msg[1].msgh_remote_port;
            }
            goto LABEL_22;
          }
        }
        uint64_t msgh_remote_port = 4294966996;
      }
      else
      {
        uint64_t msgh_remote_port = 4294966995;
      }
LABEL_22:
      mach_msg_destroy(msg);
      return msgh_remote_port;
    }
    mig_dealloc_special_reply_port();
  }
  return msgh_remote_port;
}

uint64_t helperinit(int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  *(_OWORD *)&msg[20] = 0u;
  long long v12 = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x55F000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v7)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 22100)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          uint64_t v8 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1
            && *(_DWORD *)&msg[4] == 52
            && !*(_DWORD *)&msg[8]
            && WORD1(v12) << 16 == 1114112)
          {
            uint64_t v8 = 0;
            int v9 = HIDWORD(v12);
            *a2 = *(_DWORD *)&msg[28];
            *a3 = v9;
            return v8;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          uint64_t v8 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8]) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = *(unsigned int *)&msg[32];
            }
          }
        }
        else
        {
          uint64_t v8 = 4294966996;
        }
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v8;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v8;
}

uint64_t helperexec(mach_port_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7, void *a8, _DWORD *a9)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v18 = 2;
  uint64_t v19 = a3;
  int v20 = 16777472;
  int v21 = a4;
  uint64_t v22 = a5;
  int v23 = 16777472;
  int v24 = a6;
  uint64_t v25 = *MEMORY[0x1E4F14068];
  int v26 = a2;
  int v27 = a4;
  int v28 = a6;
  mach_port_t reply_port = mig_get_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.uint64_t msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  *(void *)&msg.msgh_voucher_port = 0x55F100000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x50u, 0x44u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 22101)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 60 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == v24)
            {
              uint64_t v14 = 0;
              *a7 = v23;
              *a8 = v19;
              *a9 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t pppcontroller_attach(mach_port_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  msg.msgh_id = 0;
  *(_OWORD *)&msg.msgh_size = 0u;
  int v17 = 4;
  uint64_t v18 = a2;
  int v19 = 16777472;
  int v20 = a3;
  uint64_t v21 = a4;
  int v22 = 1245184;
  uint64_t v23 = a5;
  int v24 = 1114112;
  uint64_t v25 = a6;
  int v26 = 1245184;
  uint64_t v27 = *MEMORY[0x1E4F14068];
  int v28 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  msg.uint64_t msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x465000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v12 = mach_msg(&msg, 3, 0x5Cu, 0x3Cu, reply_port, 0, 0);
  uint64_t v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v12)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v13 = 4294966988;
      }
      else if (msg.msgh_id == 18100)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v13 = 4294966996;
          if (v17 == 1 && msg.msgh_size == 52 && !msg.msgh_remote_port && HIWORD(v19) << 16 == 1114112)
          {
            uint64_t v13 = 0;
            int v14 = HIDWORD(v21);
            *a7 = v18;
            *a8 = v14;
            return v13;
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v13 = 4294966996;
          if (HIDWORD(v18))
          {
            if (msg.msgh_remote_port) {
              uint64_t v13 = 4294966996;
            }
            else {
              uint64_t v13 = HIDWORD(v18);
            }
          }
        }
        else
        {
          uint64_t v13 = 4294966996;
        }
      }
      else
      {
        uint64_t v13 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v13;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v13;
}

uint64_t pppcontroller_getstatus(int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x465100000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x34u, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (v7)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
      return v8;
    }
    if (*(_DWORD *)&msg[20] == 71)
    {
      uint64_t v8 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 18101)
    {
      if ((*(_DWORD *)msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)&msg[4] == 44)
        {
          if (!*(_DWORD *)&msg[8])
          {
            uint64_t v8 = *(unsigned int *)&msg[32];
            if (!*(_DWORD *)&msg[32])
            {
              int v11 = DWORD1(v13);
              *a2 = v13;
              *a3 = v11;
              return v8;
            }
            goto LABEL_23;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          if (*(_DWORD *)&msg[8]) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = *(_DWORD *)&msg[32] == 0;
          }
          if (v9) {
            uint64_t v8 = 4294966996;
          }
          else {
            uint64_t v8 = *(unsigned int *)&msg[32];
          }
          goto LABEL_23;
        }
      }
      uint64_t v8 = 4294966996;
    }
    else
    {
      uint64_t v8 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy((mach_msg_header_t *)msg);
    return v8;
  }
  mig_put_reply_port(*(mach_port_t *)&msg[12]);
  return v8;
}

uint64_t pppcontroller_copyextendedstatus(int a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x465200000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v9 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18102)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v14) == 1)
          {
            int v11 = DWORD1(v14);
            if (DWORD1(v14) == v15)
            {
              uint64_t v10 = 0;
              *a2 = *(void *)&msg[28];
              *a3 = v11;
              *a4 = DWORD1(v15);
              return v10;
            }
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8]) {
              uint64_t v10 = 4294966996;
            }
            else {
              uint64_t v10 = *(unsigned int *)&msg[32];
            }
          }
        }
        else
        {
          uint64_t v10 = 4294966996;
        }
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v10;
}

uint64_t pppcontroller_copystatistics(int a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x465300000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v9 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18103)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v14) == 1)
          {
            int v11 = DWORD1(v14);
            if (DWORD1(v14) == v15)
            {
              uint64_t v10 = 0;
              *a2 = *(void *)&msg[28];
              *a3 = v11;
              *a4 = DWORD1(v15);
              return v10;
            }
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8]) {
              uint64_t v10 = 4294966996;
            }
            else {
              uint64_t v10 = *(unsigned int *)&msg[32];
            }
          }
        }
        else
        {
          uint64_t v10 = 4294966996;
        }
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v10;
}

uint64_t pppcontroller_copyuseroptions(int a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x465400000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v9 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x44u, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!v9)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18104)
      {
        if ((*(_DWORD *)msg & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[24] == 1 && *(_DWORD *)&msg[4] == 60 && !*(_DWORD *)&msg[8] && BYTE3(v14) == 1)
          {
            int v11 = DWORD1(v14);
            if (DWORD1(v14) == v15)
            {
              uint64_t v10 = 0;
              *a2 = *(void *)&msg[28];
              *a3 = v11;
              *a4 = DWORD1(v15);
              return v10;
            }
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          uint64_t v10 = 4294966996;
          if (*(_DWORD *)&msg[32])
          {
            if (*(_DWORD *)&msg[8]) {
              uint64_t v10 = 4294966996;
            }
            else {
              uint64_t v10 = *(unsigned int *)&msg[32];
            }
          }
        }
        else
        {
          uint64_t v10 = 4294966996;
        }
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v10;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  return v10;
}

uint64_t pppcontroller_start(mach_port_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1E4F14068];
  int v18 = a3;
  int v19 = a4;
  mach_port_t reply_port = mig_get_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.uint64_t msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  *(void *)&msg.msgh_voucher_port = 0x465500000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v8 = mach_msg(&msg, 3, 0x3Cu, 0x30u, reply_port, 0, 0);
  uint64_t v9 = v8;
  if ((v8 - 268435458) > 0xE || ((1 << (v8 - 2)) & 0x4003) == 0)
  {
    if (v8)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v9;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v9 = 4294966988;
    }
    else if (msg.msgh_id == 18105)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v9 = HIDWORD(v14);
            if (!HIDWORD(v14))
            {
              *a5 = v15;
              return v9;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = HIDWORD(v14) == 0;
          }
          if (v10) {
            uint64_t v9 = 4294966996;
          }
          else {
            uint64_t v9 = HIDWORD(v14);
          }
          goto LABEL_23;
        }
      }
      uint64_t v9 = 4294966996;
    }
    else
    {
      uint64_t v9 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v9;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v9;
}

uint64_t pppcontroller_stop(int a1, int a2, _DWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(&msg_4[16], 0, 28);
  *(_OWORD *)msg_4 = 0u;
  *(void *)&msg_4[20] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg_4[28] = a2;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = reply_port;
  int msg = 5395;
  *(void *)&msg_4[12] = 0x465600000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg_4[8];
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (v6)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
      return v7;
    }
    if (*(_DWORD *)&msg_4[16] == 71)
    {
      uint64_t v7 = 4294966988;
    }
    else if (*(_DWORD *)&msg_4[16] == 18106)
    {
      if ((msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)msg_4 == 40)
        {
          if (!*(_DWORD *)&msg_4[4])
          {
            uint64_t v7 = *(unsigned int *)&msg_4[28];
            if (!*(_DWORD *)&msg_4[28])
            {
              *a3 = *(_DWORD *)&msg_4[32];
              return v7;
            }
            goto LABEL_23;
          }
        }
        else if (*(_DWORD *)msg_4 == 36)
        {
          if (*(_DWORD *)&msg_4[4]) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = *(_DWORD *)&msg_4[28] == 0;
          }
          if (v8) {
            uint64_t v7 = 4294966996;
          }
          else {
            uint64_t v7 = *(unsigned int *)&msg_4[28];
          }
          goto LABEL_23;
        }
      }
      uint64_t v7 = 4294966996;
    }
    else
    {
      uint64_t v7 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy((mach_msg_header_t *)&msg);
    return v7;
  }
  mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
  return v7;
}

uint64_t pppcontroller_suspend(mach_port_t a1, mach_port_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[1].uint64_t msgh_remote_port = 0u;
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  mach_port_t reply_port = mig_get_reply_port();
  msg[0].uint64_t msgh_remote_port = a1;
  msg[0].msgh_local_port = reply_port;
  msg[0].msgh_bits = 5395;
  *(void *)&msg[0].msgh_voucher_port = 0x465700000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(msg);
    mach_port_t reply_port = msg[0].msgh_local_port;
  }
  uint64_t v5 = mach_msg(msg, 3, 0x18u, 0x30u, reply_port, 0, 0);
  uint64_t msgh_remote_port = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (v5)
    {
      mig_dealloc_reply_port(msg[0].msgh_local_port);
      return msgh_remote_port;
    }
    if (msg[0].msgh_id == 71)
    {
      uint64_t msgh_remote_port = 4294966988;
    }
    else if (msg[0].msgh_id == 18107)
    {
      if ((msg[0].msgh_bits & 0x80000000) == 0)
      {
        if (msg[0].msgh_size == 40)
        {
          if (!msg[0].msgh_remote_port)
          {
            uint64_t msgh_remote_port = msg[1].msgh_remote_port;
            if (!msg[1].msgh_remote_port)
            {
              *a2 = msg[1].msgh_local_port;
              return msgh_remote_port;
            }
            goto LABEL_23;
          }
        }
        else if (msg[0].msgh_size == 36)
        {
          if (msg[0].msgh_remote_port) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = msg[1].msgh_remote_port == 0;
          }
          if (v7) {
            uint64_t msgh_remote_port = 4294966996;
          }
          else {
            uint64_t msgh_remote_port = msg[1].msgh_remote_port;
          }
          goto LABEL_23;
        }
      }
      uint64_t msgh_remote_port = 4294966996;
    }
    else
    {
      uint64_t msgh_remote_port = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(msg);
    return msgh_remote_port;
  }
  mig_put_reply_port(msg[0].msgh_local_port);
  return msgh_remote_port;
}

uint64_t pppcontroller_resume(mach_port_t a1, mach_port_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&msg[1].uint64_t msgh_remote_port = 0u;
  *(_OWORD *)&msg[0].msgh_id = 0u;
  msg[0].msgh_size = 0;
  mach_port_t reply_port = mig_get_reply_port();
  msg[0].uint64_t msgh_remote_port = a1;
  msg[0].msgh_local_port = reply_port;
  msg[0].msgh_bits = 5395;
  *(void *)&msg[0].msgh_voucher_port = 0x465800000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set(msg);
    mach_port_t reply_port = msg[0].msgh_local_port;
  }
  uint64_t v5 = mach_msg(msg, 3, 0x18u, 0x30u, reply_port, 0, 0);
  uint64_t msgh_remote_port = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (v5)
    {
      mig_dealloc_reply_port(msg[0].msgh_local_port);
      return msgh_remote_port;
    }
    if (msg[0].msgh_id == 71)
    {
      uint64_t msgh_remote_port = 4294966988;
    }
    else if (msg[0].msgh_id == 18108)
    {
      if ((msg[0].msgh_bits & 0x80000000) == 0)
      {
        if (msg[0].msgh_size == 40)
        {
          if (!msg[0].msgh_remote_port)
          {
            uint64_t msgh_remote_port = msg[1].msgh_remote_port;
            if (!msg[1].msgh_remote_port)
            {
              *a2 = msg[1].msgh_local_port;
              return msgh_remote_port;
            }
            goto LABEL_23;
          }
        }
        else if (msg[0].msgh_size == 36)
        {
          if (msg[0].msgh_remote_port) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = msg[1].msgh_remote_port == 0;
          }
          if (v7) {
            uint64_t msgh_remote_port = 4294966996;
          }
          else {
            uint64_t msgh_remote_port = msg[1].msgh_remote_port;
          }
          goto LABEL_23;
        }
      }
      uint64_t msgh_remote_port = 4294966996;
    }
    else
    {
      uint64_t msgh_remote_port = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(msg);
    return msgh_remote_port;
  }
  mig_put_reply_port(msg[0].msgh_local_port);
  return msgh_remote_port;
}

uint64_t pppcontroller_notification(int a1, int a2, _DWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(&msg_4[16], 0, 28);
  *(_OWORD *)msg_4 = 0u;
  *(void *)&msg_4[20] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg_4[28] = a2;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg_4[4] = a1;
  *(_DWORD *)&msg_4[8] = reply_port;
  int msg = 5395;
  *(void *)&msg_4[12] = 0x465900000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg_4[8];
  }
  uint64_t v6 = mach_msg((mach_msg_header_t *)&msg, 3, 0x24u, 0x30u, reply_port, 0, 0);
  uint64_t v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (v6)
    {
      mig_dealloc_reply_port(*(mach_port_t *)&msg_4[8]);
      return v7;
    }
    if (*(_DWORD *)&msg_4[16] == 71)
    {
      uint64_t v7 = 4294966988;
    }
    else if (*(_DWORD *)&msg_4[16] == 18109)
    {
      if ((msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)msg_4 == 40)
        {
          if (!*(_DWORD *)&msg_4[4])
          {
            uint64_t v7 = *(unsigned int *)&msg_4[28];
            if (!*(_DWORD *)&msg_4[28])
            {
              *a3 = *(_DWORD *)&msg_4[32];
              return v7;
            }
            goto LABEL_23;
          }
        }
        else if (*(_DWORD *)msg_4 == 36)
        {
          if (*(_DWORD *)&msg_4[4]) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = *(_DWORD *)&msg_4[28] == 0;
          }
          if (v8) {
            uint64_t v7 = 4294966996;
          }
          else {
            uint64_t v7 = *(unsigned int *)&msg_4[28];
          }
          goto LABEL_23;
        }
      }
      uint64_t v7 = 4294966996;
    }
    else
    {
      uint64_t v7 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy((mach_msg_header_t *)&msg);
    return v7;
  }
  mig_put_reply_port(*(mach_port_t *)&msg_4[8]);
  return v7;
}

uint64_t pppcontroller_attach_proxy(int a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, int a7, int a8, int a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)&rcv_name[16] = 0x400000000;
  *(_OWORD *)rcv_io_name_t name = 0u;
  uint64_t v19 = a2;
  int v20 = 16777472;
  int v21 = a3;
  uint64_t v22 = a4;
  int v23 = 1245184;
  uint64_t v24 = a5;
  int v25 = 1114112;
  uint64_t v26 = a6;
  int v27 = 1245184;
  uint64_t v28 = *MEMORY[0x1E4F14068];
  int v29 = a3;
  int v30 = a7;
  int v31 = a8;
  int v32 = a9;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = reply_port;
  int v17 = -2147478253;
  *(void *)&rcv_name[12] = 0x465D00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v17);
    mach_port_name_t reply_port = *(_DWORD *)&rcv_name[8];
  }
  uint64_t v13 = mach_msg((mach_msg_header_t *)&v17, 3, 0x68u, 0x3Cu, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  else
  {
    if (!v13)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 18113)
      {
        if (v17 < 0)
        {
          uint64_t v14 = 4294966996;
          if (*(_DWORD *)&rcv_name[20] == 1
            && *(_DWORD *)rcv_name == 52
            && !*(_DWORD *)&rcv_name[4]
            && HIWORD(v20) << 16 == 1114112)
          {
            uint64_t v14 = 0;
            int v15 = HIDWORD(v22);
            *a10 = v19;
            *a11 = v15;
            return v14;
          }
        }
        else if (*(_DWORD *)rcv_name == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (*(_DWORD *)&rcv_name[4]) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy((mach_msg_header_t *)&v17);
      return v14;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  return v14;
}

void _SCCopyDescription_cold_1()
{
  __assert_rtn("_SCCopyDescription", "SCD.c", 253, "nFormatOptions != NULL");
}

void _SCDPluginSpawnCommand_cold_1(int a1)
{
  strerror(a1);
  OUTLINED_FUNCTION_0(&dword_18E26B000, MEMORY[0x1E4F14500], v1, "posix_spawn() failed: %s\n", v2, v3, v4, v5, 2u);
}

void _SCDPluginExecCommand2_cold_1(int a1)
{
  strerror(a1);
  OUTLINED_FUNCTION_0(&dword_18E26B000, MEMORY[0x1E4F14500], v1, "fork() failed: %s\n", v2, v3, v4, v5, 2u);
}

void _SCDPluginExecCommand2_cold_2()
{
  xpc_object_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_0(&dword_18E26B000, MEMORY[0x1E4F14500], v1, "setenv() failed: %s\n", v2, v3, v4, v5, 2u);
}

void __SCDynamicStoreNormalize_cold_1()
{
  __assert_rtn("__SCDynamicStoreNormalize", "SCDOpen.c", 867, "store != NULL");
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_cold_1()
{
}

void __SCDynamicStoreSetDispatchQueue_block_invoke_3_cold_1()
{
}

void __SCPreferencesIsEmpty_cold_1()
{
  __assert_rtn("__SCPreferencesIsEmpty", "SCP.c", 263, "prefs != NULL");
}

void SCPreferencesCreateCompanion_cold_1()
{
  __assert_rtn("SCPreferencesCreateCompanion", "SCPOpen.c", 873, "newPrefsID != NULL");
}

void __SCPreferencesScheduleWithRunLoop_cold_1()
{
  __assert_rtn("__SCPreferencesScheduleWithRunLoop", "SCPOpen.c", 1231, "prefsPrivate->session != NULL");
}

void lockWithSync_cold_1()
{
  __assert_rtn("lockWithSync", "SCNetworkConfigurationPrivate.c", 184, "prefs != NULL");
}

void ObjectWrapperRelease_cold_1()
{
}

void SCPreferencesPathCreateUniqueChild_cold_1()
{
  __assert_rtn("SCPreferencesPathCreateUniqueChild", "SCPPath.c", 379, "newDict != NULL");
}

void __SCNetworkConnectionCallBack_cold_1()
{
  __assert_rtn("__SCNetworkConnectionCallBack", "SCNetworkConnection.c", 589, "q != NULL");
}

void __SCNetworkConnectionCallBack_cold_2()
{
  __assert_rtn("__SCNetworkConnectionCallBack", "SCNetworkConnection.c", 563, "rl != NULL");
}

void processPreferences_cold_1()
{
  __assert_rtn("processPreferences", "SCNetworkConnectionPrivate.c", 409, "dict != NULL");
}

void SCUserPreferencesSetInterfacePassword_cold_1()
{
  __assert_rtn("SCUserPreferencesSetInterfacePassword", "SCNetworkConnectionPrivate.c", 2249, "newConfig != NULL");
}

void __SCNetworkReachabilityCreatePrivate_cold_1()
{
}

void SCNetworkReachabilityCopyResolvedAddress_cold_1()
{
}

void SCNetworkReachabilityCopyResolvedAddress_cold_2()
{
}

void SCNetworkReachabilityGetInterfaceIndex_cold_1()
{
}

void SCNetworkReachabilityGetInterfaceIndex_cold_2()
{
}

void SCNetworkReachabilityGetFlags_cold_1()
{
}

void SCNetworkReachabilityGetFlags_cold_2()
{
}

void SCNetworkReachabilitySetCallback_cold_1()
{
}

void SCNetworkReachabilitySetCallback_cold_2()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_1()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_2()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_3()
{
}

void SCNetworkReachabilityScheduleWithRunLoop_cold_4()
{
}

void reachPerform_cold_1()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_1()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_2()
{
}

void SCNetworkReachabilityUnscheduleFromRunLoop_cold_3()
{
}

void SCNetworkReachabilitySetDispatchQueue_cold_1()
{
}

void SCNetworkReachabilitySetDispatchQueue_cold_2()
{
}

void __SCNetworkReachabilityDeallocate_cold_1()
{
}

void __SCNetworkReachabilityDeallocate_cold_2()
{
}

void __SCNetworkReachabilityCopyDescription_cold_1()
{
}

void __SCNetworkReachabilityCopyDescription_cold_2()
{
}

void reachPerformAndUnlock_cold_1()
{
}

void reachPerformAndUnlock_cold_2()
{
}

void reachUpdateAndUnlock_cold_1()
{
}

void createInterface_cold_1()
{
  __assert_rtn("createInterface", "SCNetworkInterface.c", 2755, "interfacePrivate != NULL");
}

void __SCNetworkInterfaceCopyStoredWithPreferences_cold_1()
{
}

void __SCNetworkInterfaceSaveStoredWithPreferences_cold_1()
{
}

void __SCNetworkInterfaceCreateWithNIPreferencesUsingBSDName_cold_1()
{
}

void SCNetworkServiceAddProtocolType_cold_1()
{
  __assert_rtn("SCNetworkServiceAddProtocolType", "SCNetworkService.c", 434, "protocol != NULL");
}

void SCNetworkServiceAddProtocolType_cold_2()
{
  __assert_rtn("SCNetworkServiceAddProtocolType", "SCNetworkService.c", 437, "newEntity != NULL");
}

void SCNetworkServiceCopyAll_cold_1()
{
  __assert_rtn("SCNetworkServiceCopyAll", "SCNetworkService.c", 527, "servicePrivate != NULL");
}

void _SCNetworkServiceCopyActive_cold_1()
{
  __assert_rtn("_SCNetworkServiceCopyActive", "SCNetworkService.c", 681, "servicePrivate != NULL");
}

void _serviceOrder_add_cold_1()
{
  __assert_rtn("_serviceOrder_add", "SCNetworkSet.c", 260, "newOrder != NULL");
}

void SCNetworkSetCopy_cold_1()
{
  __assert_rtn("SCNetworkSetCopy", "SCNetworkSet.c", 714, "setPrivate != NULL");
}

void SCNetworkSetCopyAll_cold_1()
{
  __assert_rtn("SCNetworkSetCopyAll", "SCNetworkSet.c", 779, "setPrivate != NULL");
}

void SCNetworkSetCopyCurrent_cold_1()
{
  __assert_rtn("SCNetworkSetCopyCurrent", "SCNetworkSet.c", 894, "setPrivate != NULL");
}

void SCNetworkSetCreate_cold_1()
{
  __assert_rtn("SCNetworkSetCreate", "SCNetworkSet.c", 1040, "setPrivate != NULL");
}

void SCNetworkSetEstablishDefaultInterfaceConfiguration_cold_1()
{
  __assert_rtn("SCNetworkSetEstablishDefaultInterfaceConfiguration", "SCNetworkSet.c", 2367, "interfaces != NULL");
}

void add_configured_interface_cold_1()
{
  __assert_rtn("add_configured_interface", "BridgeConfiguration.c", 225, "bridge != NULL");
}

void add_configured_interface_cold_1_0()
{
  __assert_rtn("add_configured_interface", "VLANConfiguration.c", 106, "vlan != NULL");
}

void add_configured_interface_cold_2()
{
  __assert_rtn("add_configured_interface", "VLANConfiguration.c", 117, "vlan_physical != NULL");
}

void _SCVLANInterfaceCopyActive_cold_1()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 401, "vlan != NULL");
}

void _SCVLANInterfaceCopyActive_cold_2()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 409, "vlan_physical != NULL");
}

void _SCVLANInterfaceCopyActive_cold_3()
{
  __assert_rtn("_SCVLANInterfaceCopyActive", "VLANConfiguration.c", 414, "vlan_tag != NULL");
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7470](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A8](bundle, key, value, tableName);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1F40D74B0]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7670](calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7678](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7710](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7888](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1F40D7938]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C58](allocator, callout, context, shouldFreeInfo);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return MEMORY[0x1F40D7C78](port);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1F40D7DA0](allocator, formatter, string, rangep, options);
}

CFStringRef CFNumberFormatterCreateStringWithNumber(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFNumberRef number)
{
  return (CFStringRef)MEMORY[0x1F40D7DA8](allocator, formatter, number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E98](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7EC0](keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8000](stream, buffer, bufferLength);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  return MEMORY[0x1F40D8088](rl, source, mode);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x1F40D80A0](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return MEMORY[0x1F40D80D0](rl);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return (CFArrayRef)MEMORY[0x1F40D83D8](alloc, theString, stringToFind, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8400](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1F40D8498](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.CFIndex length = v4;
  result.CFIndex location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x1F40D85E0]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr)
{
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

Boolean CFURLCopyResourcePropertyForKey(CFURLRef url, CFStringRef key, void *propertyValueTypeRefPtr, CFErrorRef *error)
{
  return MEMORY[0x1F40D87B0](url, key, propertyValueTypeRefPtr, error);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8850](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88A8](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

Boolean CFURLHasDirectoryPath(CFURLRef anURL)
{
  return MEMORY[0x1F40D8938](anURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1F40D89D8]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationDisplayNotice(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle)
{
  return MEMORY[0x1F40D8A50](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, timeout);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED0](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1F40E8EF8](*(void *)&bootstrapPort, mainPort);
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x1F40E8F30](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F58](*(void *)&object);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1F40E9160](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9170](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9178](*(void *)&entry, plane, *(void *)&options, iterator);
}

kern_return_t IORegistryEntryGetLocationInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return MEMORY[0x1F40E9198](*(void *)&entry, plane, location);
}

kern_return_t IORegistryEntryGetNameInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t name)
{
  return MEMORY[0x1F40E91B8](*(void *)&entry, plane, name);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1F40E91C0](*(void *)&entry, plane, parent);
}

kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path)
{
  return MEMORY[0x1F40E91D8](*(void *)&entry, plane, path);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1F40E91F0](*(void *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9210](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9260](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9270](name);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7140](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7158](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeInitStaticInstance()
{
  return MEMORY[0x1F40D90E0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFStringCreateWithFormatAndArgumentsAux()
{
  return MEMORY[0x1F40D9140]();
}

uint64_t _CFStringGetUserDefaultEncoding()
{
  return MEMORY[0x1F40D9170]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

char ***_NSGetEnviron(void)
{
  return (char ***)MEMORY[0x1F40C9AE0]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

void _exit(int a1)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x1F40C9FE8]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x1F40C9FF0]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

mach_port_name_t audit_session_self(void)
{
  return MEMORY[0x1F40CA4E8]();
}

gid_t audit_token_to_egid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2D0](atoken);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2D8](atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1F417E2E8](atoken);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1F40CA508](a1, *(void *)&a2);
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x1F40CA528](a1, a2, a3);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x1F40CA550]();
}

uint64_t bootstrap_look_up_per_user()
{
  return MEMORY[0x1F40CA558]();
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return (const char *)MEMORY[0x1F40CA568](*(void *)&r);
}

void bzero(void *a1, size_t a2)
{
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CB3A8](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t copyconninfo()
{
  return MEMORY[0x1F40F27D8]();
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

copyfile_state_t copyfile_state_alloc(void)
{
  return (copyfile_state_t)MEMORY[0x1F40CB888]();
}

int copyfile_state_free(copyfile_state_t a1)
{
  return MEMORY[0x1F40CB890](a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x1F40CBE00](*(void *)&a1, *(void *)&a2);
}

uint64_t dyld_process_is_restricted()
{
  return MEMORY[0x1F40CBE98]();
}

int execv(const char *__path, char *const *__argv)
{
  return MEMORY[0x1F40CBFC0](__path, __argv);
}

void exit(int a1)
{
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fchown(int a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CC038](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1F40CC070](*(void *)&a1, a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

uint64_t fileport_makeport()
{
  return MEMORY[0x1F40CC120]();
}

pid_t fork(void)
{
  return MEMORY[0x1F40CC1C8]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

uint64_t freeconninfo()
{
  return MEMORY[0x1F40F27E0]();
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

int getdtablesize(void)
{
  return MEMORY[0x1F40CC3A0]();
}

gid_t getegid(void)
{
  return MEMORY[0x1F40CC3A8]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getgrnam_r(const char *a1, group *a2, char *a3, size_t a4, group **a5)
{
  return MEMORY[0x1F40CC3E8](a1, a2, a3, a4, a5);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

int getpwuid_r(uid_t a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1F40CC4F0](*(void *)&a1, a2, a3, a4, a5);
}

servent *__cdecl getservbyname(const char *a1, const char *a2)
{
  return (servent *)MEMORY[0x1F40CC540](a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1F40CC648](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

char *__cdecl index(const char *a1, int a2)
{
  return (char *)MEMORY[0x1F40CC658](a1, *(void *)&a2);
}

int inet_aton(const char *a1, in_addr *a2)
{
  return MEMORY[0x1F40CC668](a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int initgroups(const char *a1, int a2)
{
  return MEMORY[0x1F40CC688](a1, *(void *)&a2);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1F40CC948]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_construct(ipc_space_t task, mach_port_options_ptr_t options, mach_port_context_t context, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A8](*(void *)&task, options, context, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_destruct(ipc_space_t task, mach_port_name_t name, mach_port_delta_t srdelta, mach_port_context_t guard)
{
  return MEMORY[0x1F40CC9C8](*(void *)&task, *(void *)&name, *(void *)&srdelta, guard);
}

kern_return_t mach_port_get_attributes(ipc_space_read_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return MEMORY[0x1F40CC9E0](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_get_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs)
{
  return MEMORY[0x1F40CC9F0](*(void *)&task, *(void *)&name, *(void *)&right, refs);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_names(ipc_space_t task, mach_port_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_port_type_array_t *types, mach_msg_type_number_t *typesCnt)
{
  return MEMORY[0x1F40CCA20](*(void *)&task, names, namesCnt, types, typesCnt);
}

kern_return_t mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous)
{
  return MEMORY[0x1F40CCA28](*(void *)&task, *(void *)&name, *(void *)&msgid, *(void *)&sync, *(void *)&notify, *(void *)&notifyPoly, previous);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1F40CCA30](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info, *(void *)&port_infoCnt);
}

kern_return_t mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype)
{
  return MEMORY[0x1F40CCA40](*(void *)&task, *(void *)&name, ptype);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

uint64_t mig_dealloc_special_reply_port()
{
  return MEMORY[0x1F40CCD60]();
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1F40CCD70]();
}

uint64_t mig_get_special_reply_port()
{
  return MEMORY[0x1F40CCD78]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

uint64_t ne_session_always_on_vpn_configs_present()
{
  return MEMORY[0x1F40CCEC0]();
}

uint64_t ne_session_app_vpn_configs_present()
{
  return MEMORY[0x1F40CCEC8]();
}

uint64_t ne_session_cancel()
{
  return MEMORY[0x1F40CCED0]();
}

uint64_t ne_session_copy_policy_match()
{
  return MEMORY[0x1F40CCEE0]();
}

uint64_t ne_session_create()
{
  return MEMORY[0x1F40CCEE8]();
}

uint64_t ne_session_get_info()
{
  return MEMORY[0x1F40CCF00]();
}

uint64_t ne_session_get_status()
{
  return MEMORY[0x1F40CCF08]();
}

uint64_t ne_session_policy_match_get_service()
{
  return MEMORY[0x1F40CCF18]();
}

uint64_t ne_session_policy_match_get_service_action()
{
  return MEMORY[0x1F40CCF20]();
}

uint64_t ne_session_policy_match_get_service_type()
{
  return MEMORY[0x1F40CCF28]();
}

uint64_t ne_session_release()
{
  return MEMORY[0x1F40CCF30]();
}

uint64_t ne_session_retain()
{
  return MEMORY[0x1F40CCF38]();
}

uint64_t ne_session_send_barrier()
{
  return MEMORY[0x1F40CCF40]();
}

uint64_t ne_session_set_event_handler()
{
  return MEMORY[0x1F40CCF58]();
}

uint64_t ne_session_start_on_behalf_of()
{
  return MEMORY[0x1F40CCF60]();
}

uint64_t ne_session_start_with_options()
{
  return MEMORY[0x1F40CCF68]();
}

uint64_t ne_session_stop()
{
  return MEMORY[0x1F40CCF70]();
}

uint64_t ne_session_use_as_system_vpn()
{
  return MEMORY[0x1F40CCF78]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1F40CD038](*(void *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint64_t nw_array_apply()
{
  return MEMORY[0x1F40F2930]();
}

uint64_t nw_array_get_count()
{
  return MEMORY[0x1F40F2940]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2E80](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EA8](hostname, port);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1F40F2ED0](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1F40F2F08](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F38](endpoint);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1F40F3230]();
}

uint64_t nw_interface_get_subtype()
{
  return MEMORY[0x1F40F3260]();
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1F40F3268](interface);
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x1F40F3390]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x1F40F33B0]();
}

nw_parameters_t nw_parameters_copy(nw_parameters_t parameters)
{
  return (nw_parameters_t)MEMORY[0x1F40F3408](parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1F40F3488]();
}

uint64_t nw_parameters_get_required_interface_index()
{
  return MEMORY[0x1F40F3540]();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_account_id()
{
  return MEMORY[0x1F40F35A0]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x1F40F3608]();
}

uint64_t nw_parameters_set_effective_audit_token()
{
  return MEMORY[0x1F40F3618]();
}

uint64_t nw_parameters_set_effective_bundle_id()
{
  return MEMORY[0x1F40F3620]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1F40F3680]();
}

uint64_t nw_parameters_set_pid()
{
  return MEMORY[0x1F40F36C0]();
}

uint64_t nw_parameters_set_required_address_family()
{
  return MEMORY[0x1F40F3738]();
}

uint64_t nw_parameters_set_resolve_ptr()
{
  return MEMORY[0x1F40F3760]();
}

uint64_t nw_parameters_set_source_application()
{
  return MEMORY[0x1F40F3788]();
}

uint64_t nw_parameters_set_source_application_by_bundle_id()
{
  return MEMORY[0x1F40F3790]();
}

uint64_t nw_path_copy_derived_parameters()
{
  return MEMORY[0x1F40F37F8]();
}

uint64_t nw_path_copy_endpoint()
{
  return MEMORY[0x1F40F3810]();
}

uint64_t nw_path_copy_interface()
{
  return MEMORY[0x1F40F3828]();
}

uint64_t nw_path_copy_netagent_dictionary()
{
  return MEMORY[0x1F40F3830]();
}

uint64_t nw_path_create_default_evaluator()
{
  return MEMORY[0x1F40F3850]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1F40F3878]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1F40F3880]();
}

uint64_t nw_path_evaluator_set_cancel_handler()
{
  return MEMORY[0x1F40F3898]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1F40F38B0]();
}

uint64_t nw_path_get_flow_divert_unit()
{
  return MEMORY[0x1F40F38D0]();
}

uint64_t nw_path_get_interface_index()
{
  return MEMORY[0x1F40F38E0]();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1F40F3938](path);
}

uint64_t nw_path_get_vpn_config_id()
{
  return MEMORY[0x1F40F3940]();
}

uint64_t nw_path_is_direct()
{
  return MEMORY[0x1F40F3968]();
}

uint64_t nw_path_is_flow_divert()
{
  return MEMORY[0x1F40F3978]();
}

uint64_t nw_path_is_local()
{
  return MEMORY[0x1F40F3980]();
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1F40F3A00](path, *(void *)&interface_type);
}

void nw_release(void *obj)
{
}

uint64_t nw_resolver_cancel()
{
  return MEMORY[0x1F40F3E20]();
}

uint64_t nw_resolver_create_with_endpoint()
{
  return MEMORY[0x1F40F3E88]();
}

uint64_t nw_resolver_create_with_path()
{
  return MEMORY[0x1F40F3E90]();
}

uint64_t nw_resolver_set_cancel_handler()
{
  return MEMORY[0x1F40F3E98]();
}

uint64_t nw_resolver_set_update_handler()
{
  return MEMORY[0x1F40F3EA0]();
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x1F40F3EA8](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

uint64_t os_log_pack_compose()
{
  return MEMORY[0x1F40CD370]();
}

uint64_t os_log_pack_send()
{
  return MEMORY[0x1F40CD378]();
}

uint64_t os_log_pack_send_and_compose()
{
  return MEMORY[0x1F40CD380]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_log_with_args()
{
  return MEMORY[0x1F40CD3C8]();
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

void perror(const char *a1)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1F40CD790](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *a1, int a2, int a3)
{
  return MEMORY[0x1F40CD7A0](a1, *(void *)&a2, *(void *)&a3);
}

int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *a1, int a2, const char *a3, int a4, mode_t a5)
{
  return MEMORY[0x1F40CD7B0](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7B8](a1);
}

int posix_spawn_file_actions_init(posix_spawn_file_actions_t *a1)
{
  return MEMORY[0x1F40CD7C0](a1);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1F40CD7C8](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1F40CD7D0](a1);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1F40CD7E8](a1, a2);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int pthread_atfork(void (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  return MEMORY[0x1F40CD910](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_setcanceltype(int a1, int *a2)
{
  return MEMORY[0x1F40CDB58](*(void *)&a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

void pthread_testcancel(void)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1F40CDF60](__name, __value, *(void *)&__overwrite);
}

int setgid(gid_t a1)
{
  return MEMORY[0x1F40CDF70](*(void *)&a1);
}

int setuid(uid_t a1)
{
  return MEMORY[0x1F40CDFC8](*(void *)&a1);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1F40CE018](*(void *)&a1, a2, a3);
}

int sigprocmask(int a1, const sigset_t *a2, sigset_t *a3)
{
  return MEMORY[0x1F40CE040](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1F40CE220](a1, a2, a3);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtoq(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2D8](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1F40CE3E8](*(void *)&state, path);
}

sysdir_search_path_enumeration_state sysdir_start_search_path_enumeration(sysdir_search_path_directory_t dir, sysdir_search_path_domain_mask_t domainMask)
{
  return MEMORY[0x1F40CE3F0](*(void *)&dir, *(void *)&domainMask);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_clear(uuid_t uu)
{
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1F40CE758](msg);
}

pid_t wait4(pid_t a1, int *a2, int a3, rusage *a4)
{
  return MEMORY[0x1F40CE7C0](*(void *)&a1, a2, *(void *)&a3, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

uint64_t xpc_user_sessions_enabled()
{
  return MEMORY[0x1F40CF340]();
}