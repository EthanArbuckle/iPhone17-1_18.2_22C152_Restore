uint64_t type metadata instantiation function for Publishers.Multicast()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata instantiation function for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata instantiation function for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata instantiation function for Record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata instantiation function for FilterProducer.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t type metadata instantiation function for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

unint64_t static Subscribers.Demand.unlimited.getter()
{
  return 0x8000000000000000;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SubscribeOn<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Publishers.CompactMap.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CompactMap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

BOOL static Subscribers.Demand.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

{
  return a2 != 0x8000000000000000 && a1 >= 0 && a2 == a1;
}

uint64_t Just.Inner.__deallocating_deinit()
{
  v0 = Just.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Just.Inner.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 104);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  return v0;
}

uint64_t type metadata completion function for Publishers.SubscribeOn()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v0;
}

ValueMetadata *type metadata accessor for CombineIdentifier()
{
  return &type metadata for CombineIdentifier;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.DropWhile<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t Publishers.SubscribeOn.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.SubscribeOn.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.SubscribeOn.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  MEMORY[0x18C13C4B0](*(void *)&v0[*(void *)(*(void *)v0 + 168)], -1, -1);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 136)]);
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + 88) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 144)], *(void *)(v1 + 88));
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 152)];
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 160)]);
  return v0;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest3<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Publishers.DropWhile()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  _OWORD *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Subscribers.Sink<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t type metadata instantiation function for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Record<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Just<A>()
{
  return MEMORY[0x1E4FBC278];
}

uint64_t type metadata completion function for Publishers.MeasureInterval()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ObservableObjectTable.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t type metadata completion function for Publishers.SetFailureType()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.SetFailureType<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Multicast<A, B>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Autoconnect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of Subscription.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for Just.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t dispatch thunk of Subscriber.receive(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata completion function for Publishers.CollectByCount()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CombineLatest3()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.Map, a6);
}

void *initializeWithCopy for Published(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    swift_retain();
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t PassthroughSubject.Conduit.__deallocating_deinit()
{
  uint64_t v0 = PassthroughSubject.Conduit.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t type metadata completion function for Publishers.Collect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Publishers.AllSatisfy.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PublisherBoxBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SubscriberTap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for Published(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

uint64_t type metadata accessor for Published.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Deferred.init(createPublisher:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.CompactMap, a6);
}

uint64_t getEnumTagSinglePayload for Published(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.TryDropWhile<A>()
{
  return MEMORY[0x1E4FBC0F0];
}

uint64_t dispatch thunk of Subscriber.receive(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t type metadata completion function for AnySubscriberBase()
{
  return swift_initClassMetadata2();
}

uint64_t destroy for Publishers.CombineLatest3(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(a2[4] - 8);
  int v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

uint64_t destroy for Publishers.FlatMap(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, void))(v5 + 8))(v7, *(void *)(a2 + 24));
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v11 = (v7 + v8 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v10;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, AssociatedTypeWitness);
  if (!result)
  {
    v13 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
    return v13(v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t PublisherBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t destroy for Publishers.DropWhile(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for Publishers.HandleEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  unint64_t v7 = (void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v8 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t destroy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for Just(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t Publishers.Map.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v25[1] = a4;
  uint64_t v26 = a1;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v11[2];
  v25[0] = v11[3];
  uint64_t v13 = v11[4];
  uint64_t v27 = v12;
  uint64_t v28 = v25[0];
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  uint64_t v31 = v15;
  uint64_t v16 = type metadata accessor for Publishers.Map.Inner();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v19 = (char *)v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, a3);
  v20 = (uint64_t *)(v5 + *(int *)(a2 + 44));
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  swift_retain();
  Publishers.Map.Inner.init(downstream:map:)((uint64_t)v10, v21, v22, a3, (uint64_t)v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v19, v12, v16, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t destroy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 32) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for Deferred()
{
  return swift_release();
}

void Publishers.Map.Inner.init(downstream:map:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for Publishers.Map.Inner();
  uint64_t v9 = (void *)(a5 + *(int *)(v8 + 60));
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(int *)(v8 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  unint64_t v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(void *)(a5 + v10) = v12;
  }
}

uint64_t type metadata accessor for Publishers.Map.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.FlatMap.Outer.receive(_:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  char v10 = *((unsigned char *)v1 + *(void *)(*v1 + 232));
  os_unfair_lock_unlock(v9);
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 224)))(a1);
    uint64_t v11 = *(void *)(*(void *)v2 + 192);
    uint64_t v12 = *(void *)(v2 + v11);
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v2 + v11) = v12 + 1;
      os_unfair_lock_lock(v9);
      uint64_t v13 = *(void *)(*(void *)v2 + 200);
      uint64_t v14 = *(void *)(v2 + v13);
      BOOL v15 = __OFADD__(v14, 1);
      uint64_t v16 = v14 + 1;
      if (!v15)
      {
        *(void *)(v2 + v13) = v16;
        os_unfair_lock_unlock(v9);
        swift_retain();
        Publishers._Merged.Side.init(index:merger:)(v12, v2, v26);
        v25[0] = v26[0];
        v25[1] = v26[1];
        void v25[2] = v26[2];
        uint64_t v17 = *(void *)(v4 + 120);
        uint64_t v21 = v5;
        long long v22 = *(_OWORD *)(v4 + 88);
        long long v20 = *(_OWORD *)(v4 + 104);
        long long v23 = v20;
        uint64_t v24 = v17;
        uint64_t v18 = type metadata accessor for Publishers.FlatMap.Outer.Side();
        uint64_t WitnessTable = swift_getWitnessTable();
        Publisher.subscribe<A>(_:)((uint64_t)v25, v5, v18, v20, WitnessTable);
        swift_release();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return;
      }
    }
    __break(1u);
  }
}

uint64_t AnyPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 112))(a1, a5, a6);
}

uint64_t PublisherBox.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)v3 + 128) + 32))(a1, a2, a3, *(void *)(*(void *)v3 + 120));
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance AnyPublisher<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyPublisher.receive<A>(subscriber:)(a1, *v4, a3, a4, a2, a3);
}

void Publishers._Merged.Side.init(index:merger:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v5 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v4);
    a3[2] = v5;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Map<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Map.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.FlatMap.Outer.Side()
{
  return swift_getGenericMetadata();
}

void Publishers.FlatMap.Outer.request(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v100 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v88 = AssociatedTypeWitness;
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v86 = (char *)&v82 - v6;
  uint64_t v97 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v98 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v8 = *(void *)(v98 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v10 = (uint64_t *)((char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v82 - v12);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (uint64_t *)((char *)&v82 - v15);
  if (a1 != 0x8000000000000000)
  {
    if ((a1 & 0x8000000000000000) != 0) {
      goto LABEL_106;
    }
    if (!a1)
    {
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
  }
  uint64_t v101 = v14;
  uint64_t v17 = v2[8];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v95 = *(void *)(*v2 + 168);
  char v18 = *((unsigned char *)v2 + v95);
  uint64_t v96 = v17;
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_t v99 = (os_unfair_lock_t)v2[2];
  os_unfair_lock_lock(v99);
  v19 = (void *)*v2;
  uint64_t v20 = *v2;
  if (v18)
  {
    uint64_t v21 = *(void *)(v20 + 160);
    uint64_t v22 = *(void *)((char *)v2 + v21);
    unint64_t v23 = 0x8000000000000000;
    uint64_t v24 = v99;
    if (v22 != 0x8000000000000000)
    {
      if (a1 == 0x8000000000000000)
      {
LABEL_57:
        *(void *)((char *)v2 + v21) = v23;
        goto LABEL_58;
      }
      if (((v22 | a1) & 0x8000000000000000) == 0)
      {
        unint64_t v23 = v22 + a1;
        if (__OFADD__(v22, a1))
        {
          unint64_t v23 = 0x8000000000000000;
        }
        else if ((v23 & 0x8000000000000000) != 0)
        {
          goto LABEL_112;
        }
        goto LABEL_57;
      }
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_58:
    os_unfair_lock_unlock(v24);
    return;
  }
  if (*((unsigned char *)v2 + *(void *)(v20 + 232)) == 1)
  {
    uint64_t v24 = v99;
    goto LABEL_58;
  }
  uint64_t v85 = *(void *)(v20 + 232);
  uint64_t IsNativeType = *(void *)(v20 + 160);
  unint64_t v26 = 0x8000000000000000;
  uint64_t v84 = v5;
  if (a1 != 0x8000000000000000) {
    goto LABEL_24;
  }
  uint64_t v82 = v8;
  *(void *)((char *)v2 + IsNativeType) = 0x8000000000000000;
  uint64_t v27 = (void *)((char *)v2 + *(void *)(*v2 + 208));
  swift_beginAccess();
  uint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  uint64_t v29 = v101;
  *uint64_t v27 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)((char *)v2 + *(void *)(*v2 + 184));
  swift_beginAccess();
  uint64_t v83 = *v30;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v99);
  os_unfair_recursive_lock_lock_with_options();
  *((unsigned char *)v2 + v95) = 1;
  if (MEMORY[0x18C13B800](v28, v29))
  {
    char v10 = 0;
    v93 = (char *)v16 + *(int *)(v29 + 48);
    uint64_t v92 = *(void *)(v100 + 120);
    v90 = *(void (**)(char *, void, uint64_t))(v92 + 48);
    uint64_t v91 = v92 + 48;
    a1 = (unint64_t)v2 + *(void *)(*v2 + 152);
    v94 = (void *)(v98 + 16);
    uint64_t v89 = v97 - 8;
    uint64_t v31 = (void (**)(void *, uint64_t))(v98 + 8);
    do
    {
      uint64_t IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(void *, unint64_t, uint64_t))(v98 + 16))(v16, v28+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(void *)(v98 + 72) * (void)v10, v29);
        v32 = (char *)v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v34 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v82 != 8) {
          goto LABEL_116;
        }
        uint64_t IsNativeType = v34;
        *(void *)&long long v105 = v34;
        ((void (*)(void *, long long *, uint64_t))*v94)(v16, &v105, v29);
        swift_unknownObjectRelease();
        v32 = (char *)v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_23:
          __break(1u);
LABEL_24:
          uint64_t v35 = *(void *)((char *)v2 + IsNativeType);
          if (v35 != v26)
          {
            if (((v35 | a1) & 0x8000000000000000) == 0)
            {
              unint64_t v36 = v35 + a1;
              if (__OFADD__(v35, a1))
              {
                unint64_t v36 = 0x8000000000000000;
                goto LABEL_62;
              }
              if ((v36 & 0x8000000000000000) == 0)
              {
LABEL_62:
                *(void *)((char *)v2 + IsNativeType) = v36;
                v19 = (void *)*v2;
                goto LABEL_63;
              }
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
              goto LABEL_115;
            }
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
            goto LABEL_113;
          }
LABEL_63:
          v52 = (void *)((char *)v2 + v19[26]);
          uint64_t v53 = v19[23];
          uint64_t v54 = v19[19];
          v93 = (char *)v19[22];
          swift_beginAccess();
          type metadata accessor for Array();
          *(void *)&long long v105 = *v52;
          swift_getWitnessTable();
          if (Collection.isEmpty.getter())
          {
LABEL_64:
            v55 = v99;
            if ((*((unsigned char *)v2 + v85) & 1) == 0 && *((unsigned char *)v2 + *(void *)(*v2 + 240)) == 1)
            {
              v56 = (void *)((char *)v2 + *(void *)(*v2 + 208));
              swift_beginAccess();
              *(void *)&long long v102 = *v56;
              type metadata accessor for Array();
              swift_getWitnessTable();
              uint64_t v57 = v85;
              if (Collection.isEmpty.getter())
              {
                v58 = (char *)v2 + *(void *)(*v2 + 184);
                swift_beginAccess();
                uint64_t v59 = *(void *)(*(void *)v58 + 16);
                uint64_t v60 = *(void *)((char *)v2 + *(void *)(*v2 + 200));
                BOOL v61 = __OFADD__(v59, v60);
                uint64_t v62 = v59 + v60;
                if (v61) {
                  goto LABEL_114;
                }
                if (!v62)
                {
                  *((unsigned char *)v2 + v57) = 1;
                  os_unfair_lock_unlock(v55);
                  os_unfair_recursive_lock_lock_with_options();
                  v81 = v86;
                  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v86, 1, 1);
                  (*(void (**)(char *, void))(*(void *)(v100 + 120) + 56))(v81, *(void *)(v100 + 96));
                  (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v84);
                  os_unfair_recursive_lock_unlock();
                  return;
                }
              }
            }
            os_unfair_lock_unlock(v55);
            return;
          }
          uint64_t v97 = (uint64_t)v2 + v53;
          v94 = (void *)((char *)v2 + v54);
          v63 = (void (**)(uint64_t *, uint64_t))(v98 + 8);
          while (2)
          {
            uint64_t v70 = *(void *)((char *)v2 + IsNativeType);
            if (v70 != 0x8000000000000000)
            {
              if (v70 < 0) {
                goto LABEL_102;
              }
              if (!v70) {
                goto LABEL_64;
              }
            }
            swift_beginAccess();
            swift_getWitnessTable();
            RangeReplaceableCollection.removeFirst()();
            swift_endAccess();
            uint64_t v71 = *(void *)((char *)v2 + IsNativeType);
            if (v71 != 0x8000000000000000)
            {
              if (v71 < 0) {
                goto LABEL_103;
              }
              if (!v71)
              {
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
                goto LABEL_107;
              }
              *(void *)((char *)v2 + IsNativeType) = v71 - 1;
            }
            uint64_t v72 = *v10;
            v73 = (uint64_t *)v97;
            swift_beginAccess();
            uint64_t v74 = *v73;
            if (*(void *)(v74 + 16))
            {
              unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v72);
              v69 = v99;
              if (v76)
              {
                outlined init with copy of Subscription(*(void *)(v74 + 56) + 40 * v75, (uint64_t)&v105);
              }
              else
              {
                uint64_t v107 = 0;
                long long v105 = 0u;
                long long v106 = 0u;
              }
            }
            else
            {
              uint64_t v107 = 0;
              long long v105 = 0u;
              long long v106 = 0u;
              v69 = v99;
            }
            swift_endAccess();
            os_unfair_lock_unlock(v69);
            os_unfair_recursive_lock_lock_with_options();
            uint64_t v77 = v95;
            *((unsigned char *)v2 + v95) = 1;
            uint64_t v78 = (*(uint64_t (**)(char *, void))(*(void *)(v100 + 120) + 48))((char *)v10 + *(int *)(v101 + 48), *(void *)(v100 + 96));
            *((unsigned char *)v2 + v77) = 0;
            os_unfair_recursive_lock_unlock();
            if (v78 == 0x8000000000000000)
            {
              os_unfair_lock_lock(v69);
              unint64_t v79 = 0x8000000000000000;
              if (*(void *)((char *)v2 + IsNativeType) == 0x8000000000000000)
              {
LABEL_97:
                os_unfair_lock_unlock(v69);
                goto LABEL_98;
              }
            }
            else
            {
              if (v78 < 0) {
                goto LABEL_105;
              }
              if (!v78)
              {
LABEL_98:
                outlined init with copy of Any?((uint64_t)&v105, (uint64_t)&v108, &demangling cache variable for type metadata for Subscription?);
                if (v109)
                {
                  outlined init with take of Subscription(&v108, (uint64_t)&v102);
                  v64 = v93;
                  v93[(void)v2] = 1;
                  uint64_t v65 = *((void *)&v103 + 1);
                  uint64_t v66 = v104;
                  __swift_project_boxed_opaque_existential_1(&v102, *((uint64_t *)&v103 + 1));
                  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 24);
                  uint64_t v68 = v66;
                  v69 = v99;
                  v67(1, v65, v68);
                  v64[(void)v2] = 0;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
                }
                else
                {
                  outlined destroy of Subscription?((uint64_t)&v108);
                }
                os_unfair_lock_lock(v69);
                outlined destroy of Subscription?((uint64_t)&v105);
                (*v63)(v10, v101);
                *(void *)&long long v105 = *v52;
                swift_getWitnessTable();
                if (Collection.isEmpty.getter()) {
                  goto LABEL_64;
                }
                continue;
              }
              os_unfair_lock_lock(v69);
              uint64_t v80 = *(void *)((char *)v2 + IsNativeType);
              if (v80 == 0x8000000000000000) {
                goto LABEL_97;
              }
              if ((v80 | v78) < 0) {
                goto LABEL_108;
              }
              BOOL v61 = __OFADD__(v80, v78);
              unint64_t v79 = v80 + v78;
              if (v61)
              {
                unint64_t v79 = 0x8000000000000000;
              }
              else if ((v79 & 0x8000000000000000) != 0)
              {
                goto LABEL_110;
              }
            }
            break;
          }
          *(void *)((char *)v2 + IsNativeType) = v79;
          goto LABEL_97;
        }
      }
      uint64_t v29 = v101;
      v33 = (char *)v13 + *(int *)(v101 + 48);
      *uint64_t v13 = *v16;
      (*(void (**)(char *, char *))(*(void *)(v97 - 8) + 32))(v33, v93);
      v90(v33, *(void *)(v100 + 96), v92);
      (*v31)(v13, v29);
      char v10 = (uint64_t *)((char *)v10 + 1);
    }
    while (v32 != (char *)MEMORY[0x18C13B800](v28, v29));
  }
  swift_bridgeObjectRelease();
  *((unsigned char *)v2 + v95) = 0;
  os_unfair_recursive_lock_unlock();
  uint64_t v37 = 0;
  uint64_t v38 = v83;
  uint64_t v39 = *(void *)(v83 + 64);
  uint64_t v98 = v83 + 64;
  uint64_t v40 = 1 << *(unsigned char *)(v83 + 32);
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  unint64_t v42 = v41 & v39;
  int64_t v43 = (unint64_t)(v40 + 63) >> 6;
  uint64_t v97 = v43 - 1;
  if ((v41 & v39) == 0) {
    goto LABEL_36;
  }
LABEL_34:
  unint64_t v46 = __clz(__rbit64(v42));
  v42 &= v42 - 1;
  unint64_t v47 = v46 | (v37 << 6);
  while (2)
  {
    uint64_t v48 = *(void *)(v38 + 56);
    *(void *)&long long v102 = *(void *)(*(void *)(v38 + 48) + 8 * v47);
    outlined init with copy of Subscription(v48 + 40 * v47, (uint64_t)&v102 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v102, (uint64_t)&v105);
      if (!v107)
      {
        swift_release();
        os_unfair_lock_lock(v99);
        goto LABEL_64;
      }
      outlined init with take of Subscription((long long *)((char *)&v105 + 8), (uint64_t)&v102);
      uint64_t v44 = *((void *)&v103 + 1);
      uint64_t v45 = v104;
      __swift_project_boxed_opaque_existential_1(&v102, *((uint64_t *)&v103 + 1));
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v45 + 24))(0x8000000000000000, v44, v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
      if (v42) {
        goto LABEL_34;
      }
LABEL_36:
      int64_t v49 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
        goto LABEL_104;
      }
      if (v49 < v43)
      {
        unint64_t v50 = *(void *)(v98 + 8 * v49);
        if (v50) {
          goto LABEL_39;
        }
        int64_t v51 = v37 + 2;
        ++v37;
        if (v49 + 1 < v43)
        {
          unint64_t v50 = *(void *)(v98 + 8 * v51);
          if (v50) {
            goto LABEL_42;
          }
          uint64_t v37 = v49 + 1;
          if (v49 + 2 < v43)
          {
            unint64_t v50 = *(void *)(v98 + 8 * (v49 + 2));
            if (v50)
            {
              v49 += 2;
              goto LABEL_39;
            }
            int64_t v51 = v49 + 3;
            uint64_t v37 = v49 + 2;
            if (v49 + 3 < v43) {
              break;
            }
          }
        }
      }
LABEL_53:
      unint64_t v42 = 0;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v102 = 0u;
    }
    unint64_t v50 = *(void *)(v98 + 8 * v51);
    if (v50)
    {
LABEL_42:
      int64_t v49 = v51;
LABEL_39:
      unint64_t v42 = (v50 - 1) & v50;
      unint64_t v47 = __clz(__rbit64(v50)) + (v49 << 6);
      uint64_t v37 = v49;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v49 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v49 >= v43)
    {
      uint64_t v37 = v97;
      goto LABEL_53;
    }
    unint64_t v50 = *(void *)(v98 + 8 * v49);
    ++v51;
    if (v50) {
      goto LABEL_39;
    }
  }
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
}

uint64_t Published.init(initialValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Published.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t Publisher.eraseToAnyPublisher()(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v4, v1, a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  return AnyPublisher.init<A>(_:)((uint64_t)v4, AssociatedTypeWitness, v7, a1);
}

uint64_t initializeWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t AnyPublisher.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AnyPublisher();
  if (swift_dynamicCast())
  {
    uint64_t v9 = v11[1];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a4);
  }
  else
  {
    type metadata accessor for PublisherBox();
    return PublisherBox.__allocating_init(_:)(a1);
  }
  return v9;
}

uint64_t type metadata accessor for AnyPublisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Published.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*MEMORY[0x1E4FBBE08] + *a2 + 8);
  uint64_t v6 = type metadata accessor for Published.Storage();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = type metadata accessor for Published();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v14 - v11;
  specialized static Published.access<A>(_:keyPath:storage:)(a1);
  v14[1] = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a3, v9, v5);
  }
  swift_retain();
  PublishedSubject.value.getter(a3);
  return swift_release_n();
}

uint64_t type metadata accessor for Published.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.subscribe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a4;
  uint64_t v48 = a5;
  uint64_t v8 = type metadata accessor for SubscriberTap();
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v45 = (uint64_t)&v39 - v10;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v39 - v15;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v17 = static DebugHook.globalHook;
  char v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v18);
  unint64_t v47 = v17;
  if (v17)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v19(v16, a1, a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker);
    int v20 = swift_dynamicCast();
    uint64_t v44 = a1;
    if (v20)
    {
      outlined init with take of Subscription(&v51, (uint64_t)v58);
      uint64_t v21 = v59;
      uint64_t v22 = v60;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v58, v59);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 8))(v57, v21, v22);
      swift_getAssociatedTypeWitness();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v23 = type metadata accessor for AnySubscriber();
      if (swift_dynamicCast())
      {
        uint64_t v46 = *((void *)&v51 + 1);
        uint64_t v41 = v51;
        uint64_t v45 = *((void *)&v52 + 1);
        uint64_t v24 = v52;
        uint64_t v25 = v53;
        int64_t v43 = v54;
        uint64_t v26 = v55;
        uint64_t v42 = v56;
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v27 = v49;
        uint64_t v28 = v50;
        DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, (uint64_t)&v51, a2, v23, v50, WitnessTable);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32))(v44, a3, v48, a2, v28);
        *(void *)&long long v51 = v41;
        *((void *)&v51 + 1) = v46;
        *(void *)&long long v52 = v24;
        *((void *)&v52 + 1) = v45;
        uint64_t v53 = v25;
        uint64_t v54 = v43;
        uint64_t v55 = v26;
        uint64_t v56 = v42;
        DebugHook.didReceive<A, B>(publisher:subscriber:)(v27, (uint64_t)&v51, a2, v23, v28, WitnessTable);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      }
      else
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    else
    {
      uint64_t v53 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      outlined destroy of SubscriberTapMarker?((uint64_t)&v51);
      v19(v14, a1, a3);
      long long v51 = 0u;
      long long v52 = 0u;
      uint64_t v32 = v45;
      uint64_t v33 = (uint64_t)v14;
      uint64_t v34 = v50;
      uint64_t v35 = a1;
      uint64_t v36 = v48;
      SubscriberTap.init(subscriber:inner:)(v33, (uint64_t)&v51, a3, v45);
      uint64_t v37 = v49;
      DebugHook.willReceive<A, B>(publisher:subscriber:)(v49, v35, a2, a3, v34, v36);
      int64_t v43 = *(void (**)(void, void, void, void, void))(v34 + 32);
      uint64_t v38 = swift_getWitnessTable();
      v43(v32, v8, v38, a2, v34);
      DebugHook.didReceive<A, B>(publisher:subscriber:)(v37, v44, a2, a3, v34, v36);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v32, v8);
    }
  }
  else
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 32);
    uint64_t v31 = v48;
    return v30(a1, a3, v31, a2);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SubscriberTap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Published()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static Published.access<A>(_:keyPath:storage:)(uint64_t result)
{
  uint64_t v1 = result;
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    uint64_t result = swift_once();
  }
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v1))
    {
      uint64_t v3 = v2;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 24);
      v6[3] = swift_getAssociatedTypeWitness();
      v6[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v6);
      v5(ObjectType, v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if (swift_dynamicCast())
      {
        applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)();
        swift_unknownObjectRelease();
        return swift_release();
      }
      else
      {
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

void PublishedSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  uint64_t v4 = (char *)v1 + *(void *)&(*v1)[26]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)&v3[20]._os_unfair_lock_opaque - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(v1[2]);
}

uint64_t type metadata accessor for PublisherBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PublisherBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 120) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 136), a1);
  return v2;
}

void *initializeBufferWithCopyOfBuffer for Deferred(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  char v18 = (void *)((v13 + v16 + v11) & ~v16);
  v19 = (const void *)((v17 + v12) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v15 + 84)) {
      size_t v20 = *(void *)(v15 + 64);
    }
    else {
      size_t v20 = *(void *)(v15 + 64) + 1;
    }
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }
  unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
    swift_retain();
  }
  unint64_t v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithCopy for Publishers.FlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t Publishers.CompactMap.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v25[1] = a4;
  uint64_t v26 = a1;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v11[2];
  v25[0] = v11[3];
  uint64_t v13 = v11[4];
  uint64_t v27 = v12;
  uint64_t v28 = v25[0];
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  uint64_t v31 = v15;
  uint64_t v16 = type metadata accessor for Publishers.CompactMap.Inner();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, a3);
  unint64_t v20 = (uint64_t *)(v5 + *(int *)(a2 + 44));
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  swift_retain();
  Publishers.CompactMap.Inner.init(downstream:filter:)((uint64_t)v10, v21, v22, a3, (uint64_t)v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v19, v12, v16, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t type metadata accessor for Publishers.CompactMap.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.CompactMap.Inner.init(downstream:filter:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for Publishers.CompactMap.Inner();
  uint64_t v9 = (void *)(a5 + *(int *)(v8 + 60));
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(int *)(v8 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(void *)(a5 + v10) = v12;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CompactMap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.CompactMap.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.HandleEvents.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v10 + 24);
  v18[0] = *(void *)(v10 + 16);
  uint64_t v11 = v18[0];
  v18[1] = v13;
  v18[2] = v12;
  v18[3] = v14;
  uint64_t v15 = type metadata accessor for Publishers.HandleEvents.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  swift_allocObject();
  v18[0] = specialized Publishers.HandleEvents.Inner.init(downstream:events:)((uint64_t)v9, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v11, v15, v12, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.HandleEvents.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.HandleEvents<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.HandleEvents.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t outlined init with take of (key: Int, value: Subscription)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: Subscription)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.FlatMap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FlatMap.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.FlatMap.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v13[2];
  uint64_t v15 = v13[3];
  uint64_t v16 = v13[4];
  uint64_t v28 = (_UNKNOWN **)v13[5];
  uint64_t v29 = v15;
  v30[0] = v14;
  v30[1] = v15;
  v30[2] = v17;
  uint64_t v31 = v16;
  uint64_t v32 = v28;
  uint64_t v33 = v18;
  uint64_t v19 = type metadata accessor for Publishers.FlatMap.Outer();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  uint64_t v20 = *(int *)(a2 + 56);
  uint64_t v21 = *(void *)(v5 + *(int *)(a2 + 52));
  uint64_t v23 = *(void *)(v5 + v20);
  uint64_t v22 = *(void *)(v5 + v20 + 8);
  swift_allocObject();
  swift_retain();
  uint64_t v24 = Publishers.FlatMap.Outer.init(downstream:maxPublishers:map:)((uint64_t)v12, v21, v23, v22);
  uint64_t v31 = v19;
  uint64_t v32 = &protocol witness table for Publishers.FlatMap<A, B>.Outer<A1>;
  v30[0] = v24;
  uint64_t v25 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v25(v30, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  v30[0] = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v30, v29, v19, (uint64_t)v28, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.FlatMap.Outer()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.FlatMap.Outer.init(downstream:maxPublishers:map:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  v4[2] = (uint64_t)v10;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 5) = 0u;
  v4[7] = 0;
  uint64_t v11 = (void *)swift_slowAlloc();
  *uint64_t v11 = 0;
  v4[8] = (uint64_t)v11;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 160)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 168)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 176)) = 0;
  uint64_t v12 = *(void *)(*v4 + 184);
  *(uint64_t *)((char *)v4 + v12) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 192)) = 0;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 200)) = 0;
  uint64_t v13 = *(void *)(*v4 + 208);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  *(uint64_t *)((char *)v4 + v13) = static Array._allocateUninitialized(_:)();
  *((unsigned char *)v4 + *(void *)(*v4 + 232)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 240)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 96) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 152), a1);
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 216)) = a2;
  uint64_t v14 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 224));
  *uint64_t v14 = a3;
  v14[1] = a4;
  return v4;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 48)
    {
      outlined init with copy of Any?(i, (uint64_t)&v11, &demangling cache variable for type metadata for (Int, Subscription));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of Subscription(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PassthroughSubject<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return PassthroughSubject.receive<A>(subscriber:)((uint64_t)v6, a2, a3);
}

uint64_t Published.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a3, a4);
}

uint64_t PublishedSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_lock(v10);
  uint64_t v11 = type metadata accessor for PublishedSubject.Conduit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  swift_allocObject();
  uint64_t v12 = swift_retain();
  uint64_t v13 = PublishedSubject.Conduit.init(_:_:)(v12, (uint64_t)v9);
  swift_beginAccess();
  type metadata accessor for ConduitList();
  ConduitList.insert(_:)(v13);
  swift_endAccess();
  os_unfair_lock_unlock(v10);
  v16[3] = v11;
  v16[4] = &protocol witness table for ConduitBase<A, B>;
  v16[0] = v13;
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(v16, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t PublishedSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 168);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - v7;
  v2[2] = 0;
  uint64_t v9 = (char *)v2 + *(void *)(v3 + 192);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  *(void *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v12 = *(void *)(*v2 + 208);
  swift_retain();
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)((char *)v2 + v12) = v13;
  uint64_t v14 = *(void *)(*v2 + 216);
  uint64_t v15 = (void *)swift_slowAlloc();
  *uint64_t v15 = 0;
  *(void *)((char *)v2 + v14) = v15;
  *((unsigned char *)v2 + *(void *)(*v2 + 224)) = 0;
  v2[2] = v18;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v19, v4);
  v11(v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t storeEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void storeEnumTagSinglePayload for Publishers.CompactMap.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for PublishedSubject.Conduit()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance FilterProducer<A, B, C, D, E>(void *a1)
{
  return FilterProducer.receive(subscription:)(a1);
}

uint64_t FilterProducer.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152));
  os_unfair_lock_lock(v4);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 160);
  swift_beginAccess();
  uint64_t v6 = v3[12];
  uint64_t v7 = v3[13];
  unsigned int v8 = (_UNKNOWN **)v3[14];
  uint64_t v9 = v3[15];
  uint64_t v10 = v3[16];
  uint64_t v18 = v3[11];
  uint64_t v19 = v3[10];
  uint64_t v21 = v19;
  uint64_t v22 = v18;
  uint64_t v17 = v6;
  uint64_t v23 = v6;
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  uint64_t v11 = type metadata accessor for FilterProducer.State();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v28, v5, v11);
  if (v29 != 1)
  {
    if (!v29)
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v21);
      (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v12 + 32))(v20, &v21, v11);
      swift_beginAccess();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 40))(v5, v20, v11);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      uint64_t v21 = v19;
      uint64_t v22 = v18;
      uint64_t v23 = v17;
      uint64_t v24 = v7;
      uint64_t v25 = v8;
      uint64_t v26 = v9;
      uint64_t v27 = v10;
      uint64_t v24 = type metadata accessor for FilterProducer();
      uint64_t v25 = &protocol witness table for FilterProducer<A, B, C, D, E>;
      uint64_t v21 = v1;
      int v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 40);
      swift_retain();
      v13(&v21, v19, v9);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    }
    (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v28, v11);
  }
  os_unfair_lock_unlock(v4);
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v15);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(void *a1)
{
  return Publishers.ReceiveOn.Inner.receive(subscription:)(a1);
}

uint64_t type metadata accessor for FilterProducer()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.RemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.RemoveDuplicates.Inner, (uint64_t)&unk_1ED997B18, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.RemoveDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Just<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Just.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Autoconnect<A>(uint64_t a1, uint64_t a2)
{
  return Publishers.Autoconnect.receive<A>(subscriber:)(a1, a2);
}

uint64_t initializeWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SubscribeOn<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.SubscribeOn.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t initializeWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t destroy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for Result.Publisher(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t destroy for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8, v3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapError<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MapError.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t destroy for Publishers.Reduce(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((*(void *)(v4 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));

  return swift_release();
}

uint64_t partial apply for closure #1 in Publisher.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Publisher.flatMap<A>(maxPublishers:_:)(a1, *(void *)(v2 + 24), a2);
}

void AbstractZip.Side.receive(subscription:)(void *a1)
{
  AbstractZip.receive(subscription:index:)(a1, *v1);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByCount<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.CollectByCount.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t destroy for Publishers.CollectByTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = v5 + a1;
  uint64_t v8 = *(void *)(v6 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = (*(_DWORD *)(v11 + 80) | v9) & 0xF8 | 7u;
  uint64_t v14 = (v7 + v13) & ~v13;
  uint64_t v15 = *(void *)(v8 + 64) + v12;
  unint64_t v16 = (v15 & ~v12) + *(void *)(v11 + 64);
  if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v16) {
    unint64_t v17 = (v15 & ~v12) + *(void *)(v11 + 64);
  }
  else {
    unint64_t v17 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))((v15 + v14) & ~v12, AssociatedTypeWitness);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (v17 + v14 + *(unsigned __int8 *)(v19 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v23 = v19;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18);
  if (!result)
  {
    uint64_t v22 = *(uint64_t (**)(unint64_t, uint64_t))(v23 + 8);
    return v22(v20, v18);
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Output<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Output.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t initializeWithCopy for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 48);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 16;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 16))(v32, v33);
  uint64_t v34 = *(void *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v34 + 16))((*(void *)(v29 + 48) + *(unsigned __int8 *)(v34 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80), (*(void *)(v29 + 48) + *(unsigned __int8 *)(v34 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  return a1;
}

uint64_t destroy for Publishers.Timeout(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = v11 + 8;
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v13, v6);
  uint64_t v14 = *(void *)(v12 + 56);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = (v13 + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v16 + 8))(v17, v15);
  }
  unint64_t v19 = v17 + *(void *)(v16 + 64);
  if (!*(_DWORD *)(v16 + 84)) {
    ++v19;
  }
  if (*(void *)((v19 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.IgnoreOutput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.IgnoreOutput.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t initializeWithCopy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t Publishers.IgnoreOutput.Inner.receive(subscription:)(void *a1, uint64_t a2)
{
  (*(void (**)(void *, void))(*(void *)(a2 + 40) + 40))(a1, *(void *)(a2 + 24));
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 24))(0x8000000000000000, v3, v4);
}

uint64_t initializeWithCopy for Publishers.Timeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 16;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 48) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 48);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  uint64_t v26 = (const void *)((v21 + v24 + v20) & ~v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22))
  {
    int v27 = *(_DWORD *)(v23 + 84);
    uint64_t v28 = *(void *)(v23 + 64);
    if (v27) {
      size_t v29 = *(void *)(v23 + 64);
    }
    else {
      size_t v29 = v28 + 1;
    }
    memcpy(v25, v26, v29);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, v22);
    uint64_t v31 = *(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v30 = v23 + 56;
    v31(v25, 0, 1, v22);
    int v27 = *(_DWORD *)(v30 + 28);
    uint64_t v28 = *(void *)(v30 + 8);
  }
  if (v27) {
    uint64_t v32 = v28;
  }
  else {
    uint64_t v32 = v28 + 1;
  }
  unint64_t v33 = ((unint64_t)v25 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v26 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v34 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  }
  else
  {
    uint64_t v35 = *(void *)(v34 + 8);
    *(void *)unint64_t v33 = *(void *)v34;
    *(void *)(v33 + 8) = v35;
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge6<A, B, C, D, E, F>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge6.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Merge6.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 6);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[9], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[10], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[5], v13, a2[11], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[6], v13, a2[12], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[7], v13, a2[13], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Timeout<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Timeout.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Timeout.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a4;
  uint64_t v37 = a1;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v38);
  unint64_t v34 = (char *)&v30 - v9;
  uint64_t v10 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v33 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 32);
  uint64_t v32 = v20;
  v40[0] = v20;
  v40[1] = v7;
  v40[2] = a3;
  v40[3] = v31;
  v40[4] = v6;
  v40[5] = v35;
  uint64_t v21 = type metadata accessor for Publishers.Timeout.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v37, a3);
  uint64_t v22 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v39 + *(int *)(a2 + 52), AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v33, v22 + *(int *)(a2 + 56), v7);
  uint64_t v24 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v22 + *(int *)(a2 + 60), v38);
  uint64_t v25 = (uint64_t *)(v22 + *(int *)(a2 + 64));
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(*v25);
  swift_allocObject();
  v40[0] = Publishers.Timeout.Inner.init(_:interval:scheduler:options:customError:)((uint64_t)v19, (uint64_t)v16, v23, v24, v26, v27);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v40, v32, v21, v31, WitnessTable);
  return swift_release();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Timeout<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Timeout.Inner.receive(subscription:)(a1);
}

void *Publishers.Timeout.Inner.init(_:interval:scheduler:options:customError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *v6;
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  v6[2] = v13;
  uint64_t v14 = (void *)swift_slowAlloc();
  *uint64_t v14 = 0;
  v6[3] = v14;
  *((unsigned char *)v6 + *(void *)(*v6 + 192)) = 0;
  *(void *)((char *)v6 + *(void *)(*v6 + 200)) = 0;
  *((unsigned char *)v6 + *(void *)(*v6 + 208)) = 0;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v12 + 96) - 8) + 32))((char *)v6 + *(void *)(*v6 + 144), a1);
  uint64_t v15 = (char *)v6 + *(void *)(*v6 + 152);
  uint64_t v16 = *(void *)(v12 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v15, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))((char *)v6 + *(void *)(*v6 + 160), a3, v16);
  uint64_t v18 = (char *)v6 + *(void *)(*v6 + 168);
  swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a4, v19);
  uint64_t v20 = (void *)((char *)v6 + *(void *)(*v6 + 176));
  void *v20 = a5;
  v20[1] = a6;
  uint64_t v21 = (char *)v6 + *(void *)(*v6 + 184);
  *(_OWORD *)uint64_t v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((void *)v21 + 4) = 0;
  v21[40] = 2;
  return v6;
}

uint64_t type metadata accessor for Publishers.Timeout.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CollectByTime<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.CollectByTime.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.CollectByTime.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a1;
  uint64_t v28 = a4;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v29 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 32);
  uint64_t v27 = v19;
  v32[0] = v19;
  v32[1] = v7;
  v32[2] = v20;
  v32[3] = v26;
  uint64_t v21 = v20;
  v32[4] = v6;
  v32[5] = v28;
  uint64_t v22 = type metadata accessor for Publishers.CollectByTime.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v30, v21);
  uint64_t v23 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v31 + *(int *)(a2 + 52), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23 + *(int *)(a2 + 56), v29);
  swift_allocObject();
  v32[0] = Publishers.CollectByTime.Inner.init(downstream:strategy:options:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v32, v27, v22, v26, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.CollectByTime.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 152);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v3 + v8) = static Array._allocateUninitialized(_:)();
  uint64_t v9 = (uint64_t)v3 + *(void *)(*v3 + 160);
  *(void *)(v9 + 32) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(unsigned char *)(v9 + 40) = 2;
  *((unsigned char *)v3 + *(void *)(*v3 + 168)) = 0;
  uint64_t v10 = *(void *)(*v3 + 176);
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  uint64_t v12 = (uint64_t)v3 + *(void *)(*v3 + 184);
  *(void *)(v12 + 32) = 0;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 192)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 128), a1);
  uint64_t v13 = (uint64_t)v3 + *(void *)(*v3 + 136);
  uint64_t v14 = type metadata accessor for Publishers.TimeGroupingStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a2, v14);
  uint64_t v15 = (uint64_t)v3 + *(void *)(*v3 + 144);
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a3, v16);
  return v3;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Retry<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Retry.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t Publishers.Retry.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v4 + *(int *)(v13 + 36);
  char v19 = *(unsigned char *)(v18 + 8);
  if (v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)v18;
  }
  uint64_t v25 = v20;
  uint64_t v21 = *(void *)(v13 + 24);
  v27[0] = v11;
  v27[1] = v14;
  v27[2] = v21;
  v27[3] = v15;
  uint64_t v22 = type metadata accessor for Publishers.Retry.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v4, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v26, a3);
  swift_allocObject();
  v27[0] = Publishers.Retry.Inner.init(_:_:_:)((uint64_t)v17, (uint64_t)v9, v25, v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v27, v11, v22, v21, WitnessTable);
  return swift_release();
}

void *Publishers.Retry.Inner.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  v4[2] = v10;
  uint64_t v11 = (char *)v4 + *(void *)(*v4 + 128);
  *((void *)v11 + 4) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((unsigned char *)v4 + *(void *)(*v4 + 144)) = 1;
  *(void *)((char *)v4 + *(void *)(*v4 + 152)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 160)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 168)) = 0;
  uint64_t v12 = (char *)v4 + *(void *)(*v4 + 120);
  uint64_t v13 = *(void *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 88);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v16, a2, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v12, 0, 1, TupleTypeMetadata2);
  uint64_t v17 = (char *)v4 + *(void *)(*v4 + 136);
  *(void *)uint64_t v17 = a3;
  v17[8] = a4 & 1;
  return v4;
}

uint64_t type metadata accessor for Publishers.Retry.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in FilterProducer<A, B, C, D, E>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 128);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConduitBase<A1, B1>()
{
  return Hasher._finalize()();
}

void ConduitBase.hash(into:)()
{
  Hasher._combine(_:)(v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ConduitBase<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static ConduitBase.== infix(_:_:)(*a1, *a2);
}

BOOL static ConduitBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t type metadata accessor for Future()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for Published(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyCancellable()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:)()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(v2, v3);
}

uint64_t getEnumTagSinglePayload for FilterProducer.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t Publishers.FlatMap.Outer.receive(subscription:)(void *a1)
{
  unint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of Any?((uint64_t)(v1 + 3), (uint64_t)v10, &demangling cache variable for type metadata for Subscription?);
  uint64_t v4 = v11;
  outlined destroy of Subscription?((uint64_t)v10);
  if (v4 || *((unsigned char *)v1 + *(void *)(*v1 + 232)) == 1)
  {
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v10, (uint64_t)(v1 + 3));
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(v9 + 24))(*(void *)((char *)v1 + *(void *)(*v1 + 216)), v8, v9);
  }
}

uint64_t Publishers._Merged.Side.receive(subscription:)(void *a1)
{
  return Publishers._Merged.receive(subscription:_:)(a1, *v1);
}

uint64_t Publishers._Merged.receive(subscription:_:)(void *a1, unint64_t a2)
{
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 176));
  os_unfair_lock_lock(v6);
  if (*(unsigned char *)(v2 + *(void *)(*(void *)v2 + 128))) {
    goto LABEL_5;
  }
  uint64_t v7 = v2 + *(void *)(*(void *)v2 + 160);
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(void *)(*(void *)v7 + 16) <= a2)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v3 = (void *)result;
    *(void *)uint64_t v7 = result;
    goto LABEL_8;
  }
  outlined init with copy of Any?(*(void *)v7 + 40 * a2 + 32, (uint64_t)v15, &demangling cache variable for type metadata for Subscription?);
  uint64_t v8 = v16;
  outlined destroy of CustomStringConvertible?((uint64_t)v15, &demangling cache variable for type metadata for Subscription?);
  if (v8)
  {
LABEL_5:
    os_unfair_lock_unlock(v6);
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v15);
  swift_beginAccess();
  unint64_t v3 = *(void **)v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v7 = v3;
  if ((result & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  if (v3[2] <= a2)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v15, (uint64_t)&v3[5 * a2 + 4]);
    swift_endAccess();
    if (*(void *)(v2 + *(void *)(*(void *)v2 + 120)) == 0x8000000000000000) {
      unint64_t v12 = 0x8000000000000000;
    }
    else {
      unint64_t v12 = 1;
    }
    os_unfair_lock_unlock(v6);
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(v12, v13, v14);
  }
  return result;
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Subscription?);
        v5 += 40;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Subscription?);
    return v4;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v4 + 16) = v2;
      uint64_t v5 = v4 + 32;
      do
      {
        outlined init with copy of Any?(v3, v5, &demangling cache variable for type metadata for Any?);
        v5 += 32;
        --v2;
      }
      while (v2);
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    outlined destroy of CustomStringConvertible?(v3, &demangling cache variable for type metadata for Any?);
    return v4;
  }
  return result;
}

void AbstractCombineLatest.receive(_:index:)(void *a1, unint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v7 = a1;
  uint64_t v8 = *(void **)v5;
  uint64_t v9 = *(void *)(*(void *)v5 + 80);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v29 - v11;
  if (*(void *)(v5 + *(void *)(v13 + 168)) <= v14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v5 + v8[23]);
    os_unfair_lock_lock(v3);
    if ((*(unsigned char *)(v5 + *(void *)(*(void *)v5 + 160)) & 1) != 0
      || (*(unsigned char *)(v5 + *(void *)(*(void *)v5 + 152)) & 1) != 0)
    {
      goto LABEL_31;
    }
    outlined init with copy of Any((uint64_t)v7, (uint64_t)v34);
    uint64_t v7 = (void *)(v5 + *(void *)(*(void *)v5 + 120));
    swift_beginAccess();
    uint64_t v4 = (void *)*v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v7 = v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a2 & 0x8000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  void *v7 = v4;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_37;
  }
LABEL_6:
  if (v4[2] <= a2)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  outlined assign with take of Subscription?((uint64_t)v34, (uint64_t)&v4[4 * a2 + 4], &demangling cache variable for type metadata for Any?);
  uint64_t v16 = (void *)*v7;
  swift_endAccess();
  if (*(unsigned char *)(v5 + *(void *)(*(void *)v5 + 144)))
  {
LABEL_31:
    os_unfair_lock_unlock(v3);
    return;
  }
  uint64_t v17 = *(void *)(*(void *)v5 + 136);
  uint64_t v18 = *(void *)(v5 + v17);
  if (v18 == 0x8000000000000000) {
    goto LABEL_11;
  }
  if (v18 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v18) {
    goto LABEL_31;
  }
LABEL_11:
  uint64_t v33 = *(void *)(*(void *)v5 + 144);
  uint64_t v19 = v16[2];
  if (v19)
  {
    uint64_t v30 = v17;
    uint64_t v31 = v10;
    uint64_t v20 = (uint64_t)(v16 + 4);
    uint64_t v32 = v16;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any?(v20, (uint64_t)v34, &demangling cache variable for type metadata for Any?);
      uint64_t v21 = v35;
      outlined destroy of CustomStringConvertible?((uint64_t)v34, &demangling cache variable for type metadata for Any?);
      if (!v21) {
        break;
      }
      v20 += 32;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = v30;
        uint64_t v10 = v31;
        uint64_t v18 = *(void *)(v5 + v30);
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_16:
  if (v18 != 0x8000000000000000)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      if (v18)
      {
        *(void *)(v5 + v17) = v18 - 1;
        goto LABEL_20;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_20:
  uint64_t v22 = v17;
  uint64_t v23 = (void *)*v7;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  (*(void (**)(void *))(*(void *)v5 + 480))(v23);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v3);
  uint64_t v24 = v33;
  *(unsigned char *)(v5 + v33) = 1;
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v25 = (*(uint64_t (**)(char *, void))(v8[13] + 48))(v12, v8[12]);
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  *(unsigned char *)(v5 + v24) = 0;
  unint64_t v26 = 0x8000000000000000;
  if (v25 == 0x8000000000000000)
  {
    if (*(void *)(v5 + v22) == 0x8000000000000000) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v25 < 0) {
    goto LABEL_42;
  }
  if (!v25) {
    goto LABEL_34;
  }
  uint64_t v27 = *(void *)(v5 + v22);
  if (v27 == 0x8000000000000000) {
    goto LABEL_34;
  }
  if ((v27 | v25) < 0) {
    goto LABEL_43;
  }
  BOOL v28 = __OFADD__(v27, v25);
  unint64_t v26 = v27 + v25;
  if (v28)
  {
    unint64_t v26 = 0x8000000000000000;
LABEL_33:
    *(void *)(v5 + v22) = v26;
LABEL_34:
    os_unfair_lock_unlock(v3);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return;
  }
  if ((v26 & 0x8000000000000000) == 0) {
    goto LABEL_33;
  }
LABEL_44:
  __break(1u);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t Publishers.Map.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v2 + *(int *)(v9 + 60)))(v6);
  uint64_t v10 = (*(uint64_t (**)(char *, void))(a2[6] + 48))(v8, a2[4]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

uint64_t outlined assign with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.ReceiveOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.ReceiveOn.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v21 = (void *)*v1;
  uint64_t v3 = v21[13];
  uint64_t v4 = v21[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v22);
  LODWORD(v10) = v22[40];
  outlined destroy of SubscriptionStatus((uint64_t)v22);
  os_unfair_lock_unlock(v9);
  if (!v10)
  {
    uint64_t v11 = *v1;
    v20[1] = (char *)v1 + *(void *)(*v1 + 144);
    uint64_t v12 = (char *)v1 + *(void *)(v11 + 152);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v4;
    uint64_t v15 = v21;
    uint64_t v16 = v21[11];
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v15[12];
    *((void *)v14 + 5) = v3;
    uint64_t v17 = v15[14];
    *((void *)v14 + 6) = v17;
    *((void *)v14 + 7) = v15[15];
    *((void *)v14 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], v8, AssociatedTypeWitness);
    uint64_t v18 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v17 + 56);
    swift_retain();
    v18(v12, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(_:), v14, v16, v17);
    swift_release();
  }
  return 0;
}

uint64_t AbstractCombineLatest.Side.receive(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v14[3] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(boxed_opaque_existential_1, a1, a7);
  AbstractCombineLatest.receive(_:index:)(v14, a2);
  uint64_t v12 = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

uint64_t Publisher<>.sink(receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Sink();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(void *)(v9 + 80) = 0;
  *(unsigned char *)(v9 + 88) = 2;
  swift_retain();
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  *(void *)(v9 + 96) = v10;
  *(void *)(v9 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v13 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v13, a3, v8, a4, WitnessTable);
  type metadata accessor for AnyCancellable();
  uint64_t v13 = v9;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v13, v8, (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

uint64_t type metadata accessor for AnyCancellable()
{
  return self;
}

uint64_t AnyCancellable.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AnyCancellable.init<A>(_:)(a1, a2, a3);
  return v6;
}

uint64_t AnyCancellable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 40) = a2;
  *(void *)(v3 + 48) = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  *(unsigned char *)(v3 + 56) = 1;
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for Subscribers.Sink()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(uint64_t a1, uint64_t *a2)
{
  return AbstractCombineLatest.Side.receive(_:)(a1, *(void *)v2, *(void *)(v2 + 8), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t Publishers.ReceiveOn.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.ReceiveOn<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    return os_unfair_recursive_lock_unlock();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Sink<A, B>(void *a1)
{
  return Subscribers.Sink.receive(subscription:)(a1);
}

uint64_t Subscribers.Sink.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 48, (uint64_t)&v10);
  if (v13 == 2
    && (int8x16_t v4 = vorrq_s8(v11, v12),
        !(*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    char v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 48);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 24))(0x8000000000000000, v8, v9);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
  }
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with copy of Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined assign with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t protocol witness for Subscription.request(_:) in conformance ConduitBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

void closure #1 in Publishers.ReceiveOn.Inner.receive(_:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
  outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
  unsigned int v7 = v18;
  outlined destroy of SubscriptionStatus((uint64_t)v17);
  outlined destroy of SubscriptionStatus((uint64_t)v19);
  if (v7 > 1)
  {
LABEL_12:
    os_unfair_lock_unlock(v5);
    return;
  }
  os_unfair_lock_unlock(v5);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48))(a2, *(void *)(v4 + 96));
  os_unfair_recursive_lock_unlock();
  if (v8 == 0x8000000000000000) {
    goto LABEL_5;
  }
  if (v8 < 0)
  {
    __break(1u);
    return;
  }
  if (v8)
  {
LABEL_5:
    os_unfair_lock_lock(v5);
    outlined init with copy of SubscriptionStatus(v6, (uint64_t)v19);
    outlined init with copy of SubscriptionStatus((uint64_t)v19, (uint64_t)v17);
    if (v18 != 1 && v18)
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      outlined destroy of SubscriptionStatus((uint64_t)v17);
    }
    else
    {
      outlined init with take of Subscription(v17, (uint64_t)&v11);
    }
    outlined destroy of SubscriptionStatus((uint64_t)v19);
    if (*((void *)&v12 + 1))
    {
      outlined init with take of Subscription(&v11, (uint64_t)v14);
      os_unfair_lock_unlock(v5);
      uint64_t v9 = v15;
      uint64_t v10 = v16;
      __swift_project_boxed_opaque_existential_1(v14, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v11);
    goto LABEL_12;
  }
}

uint64_t outlined init with copy of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t outlined destroy of SubscriptionStatus(uint64_t a1)
{
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t destroy for SubscriptionStatus(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 <= 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance ObservableObjectPublisher.Inner<A>()
{
}

void specialized ObservableObjectPublisher.Inner.request(_:)()
{
  unsigned int v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 160);
  if (!*(unsigned char *)(v0 + v2)) {
    *(unsigned char *)(v0 + v2) = 1;
  }

  os_unfair_lock_unlock(v1);
}

Swift::Void __swiftcall CurrentValueSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  uint64_t v50 = *(void *)(*(void *)(*v2 + 160) - 8);
  MEMORY[0x1F4188790](a1.rawValue);
  uint64_t v46 = (char *)&v44 - v7;
  uint64_t v47 = v6;
  uint64_t v48 = (void *)type metadata accessor for Optional();
  uint64_t v51 = *(v48 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](v48);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v12 = (char *)&v44 - v11;
  uint64_t v13 = *(void *)(v4 + 176);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unsigned __int8 v18 = (char *)&v44 - v17;
  uint64_t v19 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v16);
  long long v52 = (char *)&v44 - v20;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_4:
  uint64_t v49 = v12;
  uint64_t v45 = v5;
  uint64_t v21 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v5 + 216));
  os_unfair_lock_lock(v21);
  uint64_t v22 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    os_unfair_lock_unlock(v21);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v52, v18, v13);
  uint64_t v23 = *v2;
  uint64_t v24 = *(void *)(*v2 + 232);
  if (*((unsigned char *)v2 + v24))
  {
    uint64_t v25 = *(void *)(v23 + 208);
    uint64_t v26 = *(void *)((char *)v2 + v25);
    unint64_t v27 = 0x8000000000000000;
    if (v26 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v21);
LABEL_45:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v52, v13);
      return;
    }
    if (a1.rawValue == 0x8000000000000000) {
      goto LABEL_22;
    }
    if (((v26 | a1.rawValue) & 0x8000000000000000) == 0)
    {
      unint64_t v27 = v26 + a1.rawValue;
      if (!__OFADD__(v26, a1.rawValue))
      {
        if ((v27 & 0x8000000000000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_51;
      }
      unint64_t v27 = 0x8000000000000000;
LABEL_22:
      *(void *)((char *)v2 + v25) = v27;
      goto LABEL_23;
    }
    goto LABEL_48;
  }
  unint64_t v28 = 0x8000000000000000;
  if (a1.rawValue != 0x8000000000000000)
  {
    uint64_t v29 = (void *)((char *)v2 + *(void *)(v23 + 208));
    unint64_t v33 = *v29;
    uint64_t v31 = v47;
    uint64_t v30 = v48;
    uint64_t v32 = v51;
    if (*v29 == 0x8000000000000000) {
      goto LABEL_26;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    unint64_t v28 = v33 + a1.rawValue - 1;
    if (__OFADD__(v33, a1.rawValue - 1))
    {
      unint64_t v28 = 0x8000000000000000;
    }
    else if ((v28 & 0x8000000000000000) != 0)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_25;
  }
  uint64_t v29 = (void *)((char *)v2 + *(void *)(v23 + 208));
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  uint64_t v32 = v51;
  if (*v29 != 0x8000000000000000) {
LABEL_25:
  }
    *uint64_t v29 = v28;
LABEL_26:
  uint64_t v48 = v29;
  uint64_t v34 = 1;
  *((unsigned char *)v2 + v24) = 1;
  if (v2[2])
  {
    swift_retain();
    uint64_t v35 = (uint64_t)v49;
    CurrentValueSubject.value.getter((uint64_t)v49);
    swift_release();
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = (uint64_t)v49;
  }
  uint64_t v36 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v35, v34, 1, v31);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, void *))(v32 + 16))(v10, v35, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v10, 1, v31) == 1)
  {
    uint64_t v37 = *(void (**)(uint64_t, void *))(v32 + 8);
    v37(v35, v30);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v52, v13);
    v37((uint64_t)v10, v30);
    return;
  }
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  uint64_t v39 = v46;
  v38(v46, v10, v31);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v45 + 184) + 48))(v39, v13);
  os_unfair_recursive_lock_unlock();
  unint64_t v41 = 0x8000000000000000;
  if (v40 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v21);
    uint64_t v42 = v48;
    if (*v48 == 0x8000000000000000) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v40 < 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (!v40)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v31);
    (*(void (**)(char *, void *))(v51 + 8))(v49, v30);
    goto LABEL_45;
  }
  os_unfair_lock_lock(v21);
  uint64_t v42 = v48;
  uint64_t v43 = *v48;
  if (*v48 == 0x8000000000000000)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }
  if ((v43 | v40) < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v41 = v43 + v40;
  if (__OFADD__(v43, v40))
  {
    unint64_t v41 = 0x8000000000000000;
LABEL_42:
    *uint64_t v42 = v41;
    goto LABEL_43;
  }
  if ((v41 & 0x8000000000000000) == 0) {
    goto LABEL_42;
  }
LABEL_54:
  __break(1u);
}

void CurrentValueSubject.value.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t v3 = *v1;
  os_unfair_lock_lock(v1[2]);
  uint64_t v4 = (char *)v1 + *(void *)&(*v1)[34]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)&v3[20]._os_unfair_lock_opaque - 8) + 16))(a1, v4);
  os_unfair_lock_unlock(v1[2]);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.ReceiveOn.Inner.request(_:)(uint64_t a1)
{
  os_unfair_lock_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t Publishers.ReceiveOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a1;
  uint64_t v26 = a4;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v27 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v27);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned __int8 v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = v19;
  v30[0] = v19;
  v30[1] = v7;
  v30[2] = a3;
  void v30[3] = v24;
  v30[4] = v6;
  v30[5] = v26;
  uint64_t v20 = type metadata accessor for Publishers.ReceiveOn.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v28, a3);
  uint64_t v21 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v29 + *(int *)(a2 + 52), v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v21 + *(int *)(a2 + 56), v27);
  swift_allocObject();
  v30[0] = Publishers.ReceiveOn.Inner.init(_:scheduler:options:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v30, v25, v20, v24, WitnessTable);
  return swift_release();
}

char *Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *((void *)v3 + 2) = v8;
  uint64_t v9 = &v3[*(void *)(*(void *)v3 + 160)];
  *((void *)v9 + 4) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  uint64_t v10 = *(void *)(*(void *)v3 + 168);
  uint64_t v11 = (void *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))(&v3[*(void *)(*(void *)v3 + 136)], a1);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v7 + 88) - 8) + 32))(&v3[*(void *)(*(void *)v3 + 144)], a2, *(void *)(v7 + 88));
  uint64_t v12 = &v3[*(void *)(*(void *)v3 + 152)];
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a3, v13);
  return v3;
}

uint64_t type metadata accessor for Publishers.ReceiveOn.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Drop.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void *)(v1 + v2);
  BOOL v4 = v3 < 1;
  uint64_t v5 = v3 - 1;
  if (v4) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 104) + 48))(a1, *(void *)(*(void *)v1 + 88));
  }
  *(void *)(v1 + v2) = v5;
  return 0;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Sink<A, B>(uint64_t a1)
{
  return 0;
}

uint64_t Subscribers.Sink.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 96);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  BOOL v4 = *(void (**)(uint64_t))(v1 + 16);
  swift_retain();
  os_unfair_lock_unlock(v3);
  v4(a1);
  swift_release();
  return 0;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReceiveOn<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ReceiveOn.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest2Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);

  return CombineLatest2Inner.convert(values:)(a2, v4, a1);
}

uint64_t CombineLatest2Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    outlined init with copy of Any?(a3 + 32, (uint64_t)v7, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    uint64_t result = swift_dynamicCast();
    if (v3 != 1)
    {
      outlined init with copy of Any?(a3 + 64, (uint64_t)&v6, &demangling cache variable for type metadata for Any?);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnyCancellable.store(in:)()
{
  swift_retain();
  specialized Set._Variant.insert(_:)(&v2, v0);

  return swift_release();
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for AnyCancellable();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v23 = v17;
    unint64_t v18 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v18)
    {
      uint64_t v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      Swift::Int v19 = v23;
    }
    else
    {
      Swift::Int v19 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v6 + 48);
      if (*(void *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * v12) == a2) {
          goto LABEL_12;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v22 = *v2;
    *Swift::UInt v2 = 0x8000000000000000;
    Swift::Int v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    *Swift::UInt v2 = v22;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::Int v22;
  Swift::Int v23;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for ObservableObjectPublisher.Conduit();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v17 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v23 = v17;
    unint64_t v18 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v18)
    {
      uint64_t v20 = v18 + 1;
      swift_retain();
      specialized _NativeSet.resize(capacity:)(v20);
      Swift::Int v19 = v23;
    }
    else
    {
      Swift::Int v19 = v17;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    Hasher._combine(_:)(a2);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v6 + 48);
      if (*(void *)(v13 + 8 * v12) == a2)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
        swift_retain();
        return 0;
      }
      uint64_t v14 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v14;
        if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * v12) == a2) {
          goto LABEL_12;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v22 = *v2;
    *Swift::UInt v2 = 0x8000000000000000;
    Swift::Int v16 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v12, isUniquelyReferenced_nonNull_native);
    *Swift::UInt v2 = v22;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for AnyCancellable();
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for ObservableObjectPublisher.Conduit();
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance ObservableObjectPublisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObservableObjectPublisher.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t ObservableObjectPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ObservableObjectPublisher.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  swift_retain();
  uint64_t v12 = specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)((uint64_t)v10, v4);
  swift_release();
  uint64_t v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v13);
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v16, (Swift::UInt)v12);
  swift_endAccess();
  swift_release();
  os_unfair_lock_unlock(v13);
  v15[3] = v11;
  v15[4] = &protocol witness table for ObservableObjectPublisher.Inner<A>;
  v15[0] = v12;
  (*(void (**)(void *, uint64_t, uint64_t))(a3 + 40))(v15, a2, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  int64_t v7 = 0;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t *specialized ObservableObjectPublisher.Inner.__allocating_init(_:parent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)swift_allocObject();
  Swift::UInt v5 = specialized ObservableObjectPublisher.Inner.init(_:parent:)(a1, a2, v4);
  swift_release();
  return v5;
}

uint64_t *specialized ObservableObjectPublisher.Inner.init(_:parent:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  swift_weakInit();
  uint64_t v6 = *(void *)(*a3 + 144);
  swift_retain();
  int64_t v7 = (void *)swift_slowAlloc();
  void *v7 = 0;
  *(uint64_t *)((char *)a3 + v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*a3 + 152);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)a3 + v8) = (uint64_t)v9;
  *uint64_t v9 = 0;
  *((unsigned char *)a3 + *(void *)(*a3 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 112) - 8) + 32))((uint64_t)a3 + *(void *)(*a3 + 136), a1);
  swift_weakAssign();
  return a3;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  if (v5) {
    goto LABEL_31;
  }
LABEL_6:
  int64_t v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v6)
    {
      unint64_t v11 = *(void *)(v2 + 8 * v10);
      ++v8;
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 2;
      if (v10 + 2 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 3;
      if (v10 + 3 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        unint64_t v5 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v8 << 6); ; unint64_t i = v17 | (v8 << 6))
        {
          outlined init with copy of ObservableObjectTable.Storage(*(void *)(a1 + 48) + 16 * i, (uint64_t)v22);
          outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, (uint64_t)v21);
          uint64_t v14 = MEMORY[0x18C13C570](v21);
          swift_unknownObjectRelease();
          if (v14)
          {
            uint64_t v18 = 0;
            uint64_t v19 = 0;
          }
          else
          {
            outlined init with copy of ObservableObjectTable.Storage((uint64_t)v21, (uint64_t)&v18);
          }
          outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
          if (v19)
          {
            outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)v20);
            outlined init with take of ObservableObjectTable.Storage((uint64_t)v20, (uint64_t)&v18);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
            }
            unint64_t v16 = v9[2];
            unint64_t v15 = v9[3];
            if (v16 >= v15 >> 1) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v9);
            }
            v9[2] = v16 + 1;
            uint64_t result = outlined init with take of ObservableObjectTable.Storage((uint64_t)&v18, (uint64_t)&v9[2 * v16 + 4]);
            if (!v5) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t result = outlined destroy of ObservableObjectTable.Storage?((uint64_t)&v18);
            if (!v5) {
              goto LABEL_6;
            }
          }
LABEL_31:
          unint64_t v17 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
          int64_t v8 = v12;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v8 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_34;
          }
          if (v8 >= v6) {
            break;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v8);
          ++v12;
          if (v11) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_32:
    swift_release();
    return (uint64_t)v9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t outlined destroy of ObservableObjectTable.Storage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t outlined init with copy of ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t outlined destroy of ObservableObjectTable.Storage?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ObservableObjectTable.Storage?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyCancellable.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t Subject<>.send()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a1, a1, a2);
}

Swift::Void __swiftcall PassthroughSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int64_t v8 = (char *)&v15 - v7;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_4:
  uint64_t v9 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v9);
  int64_t v10 = (char *)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v11 == 1)
  {
    os_unfair_lock_unlock(v9);
    return;
  }
  uint64_t v12 = *(void *)(*v1 + 208);
  uint64_t v13 = *(void *)((char *)v1 + v12);
  unint64_t v14 = 0x8000000000000000;
  if (v13 == 0x8000000000000000) {
    goto LABEL_14;
  }
  if (a1.rawValue == 0x8000000000000000) {
    goto LABEL_13;
  }
  if (((v13 | a1.rawValue) & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = v13 + a1.rawValue;
  if (!__OFADD__(v13, a1.rawValue))
  {
    if ((v14 & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    __break(1u);
    return;
  }
  unint64_t v14 = 0x8000000000000000;
LABEL_13:
  *(void *)((char *)v1 + v12) = v14;
LABEL_14:
  os_unfair_lock_unlock(v9);
  if (v1[2])
  {
    swift_retain();
    PassthroughSubject.acknowledgeDownstreamDemand()();
    swift_release();
  }
}

Swift::Void __swiftcall PassthroughSubject.acknowledgeDownstreamDemand()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*v0 + 144);
  if (*((unsigned char *)v0 + v2) == 1)
  {
    os_unfair_lock_unlock(v1);
  }
  else
  {
    *((unsigned char *)v0 + v2) = 1;
    uint64_t v3 = *(void *)((char *)v0 + *(void *)(*v0 + 136));
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v1);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = v3 + 32;
      do
      {
        outlined init with copy of Subscription(v5, (uint64_t)v8);
        uint64_t v6 = v9;
        uint64_t v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(0x8000000000000000, v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        v5 += 40;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall PublishedSubject.Conduit.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  uint64_t v50 = *(void *)(*(void *)(*v2 + 160) - 8);
  MEMORY[0x1F4188790](a1.rawValue);
  uint64_t v46 = (char *)&v44 - v7;
  uint64_t v47 = v6;
  uint64_t v48 = (void *)type metadata accessor for Optional();
  uint64_t v51 = *(v48 - 1);
  uint64_t v8 = MEMORY[0x1F4188790](v48);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v44 - v11;
  uint64_t v13 = *(void *)(v4 + 168);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v16);
  long long v52 = (char *)&v44 - v20;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_4:
  uint64_t v49 = v12;
  uint64_t v45 = v5;
  uint64_t v21 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v5 + 208));
  os_unfair_lock_lock(v21);
  unint64_t v22 = (char *)v2 + *(void *)(*v2 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    os_unfair_lock_unlock(v21);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v52, v18, v13);
  uint64_t v23 = *v2;
  uint64_t v24 = *(void *)(*v2 + 224);
  if (*((unsigned char *)v2 + v24))
  {
    uint64_t v25 = *(void *)(v23 + 200);
    uint64_t v26 = *(void *)((char *)v2 + v25);
    unint64_t v27 = 0x8000000000000000;
    if (v26 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v21);
LABEL_45:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v52, v13);
      return;
    }
    if (a1.rawValue == 0x8000000000000000) {
      goto LABEL_22;
    }
    if (((v26 | a1.rawValue) & 0x8000000000000000) == 0)
    {
      unint64_t v27 = v26 + a1.rawValue;
      if (!__OFADD__(v26, a1.rawValue))
      {
        if ((v27 & 0x8000000000000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_51;
      }
      unint64_t v27 = 0x8000000000000000;
LABEL_22:
      *(void *)((char *)v2 + v25) = v27;
      goto LABEL_23;
    }
    goto LABEL_48;
  }
  unint64_t v28 = 0x8000000000000000;
  if (a1.rawValue != 0x8000000000000000)
  {
    uint64_t v29 = (void *)((char *)v2 + *(void *)(v23 + 200));
    unint64_t v33 = *v29;
    uint64_t v31 = v47;
    uint64_t v30 = v48;
    uint64_t v32 = v51;
    if (*v29 == 0x8000000000000000) {
      goto LABEL_26;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    unint64_t v28 = v33 + a1.rawValue - 1;
    if (__OFADD__(v33, a1.rawValue - 1))
    {
      unint64_t v28 = 0x8000000000000000;
    }
    else if ((v28 & 0x8000000000000000) != 0)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_25;
  }
  uint64_t v29 = (void *)((char *)v2 + *(void *)(v23 + 200));
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  uint64_t v32 = v51;
  if (*v29 != 0x8000000000000000) {
LABEL_25:
  }
    *uint64_t v29 = v28;
LABEL_26:
  uint64_t v48 = v29;
  uint64_t v34 = 1;
  *((unsigned char *)v2 + v24) = 1;
  if (v2[2])
  {
    swift_retain();
    uint64_t v35 = (uint64_t)v49;
    PublishedSubject.value.getter((uint64_t)v49);
    swift_release();
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = (uint64_t)v49;
  }
  uint64_t v36 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v35, v34, 1, v31);
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, uint64_t, void *))(v32 + 16))(v10, v35, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v10, 1, v31) == 1)
  {
    uint64_t v37 = *(void (**)(uint64_t, void *))(v32 + 8);
    v37(v35, v30);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v52, v13);
    v37((uint64_t)v10, v30);
    return;
  }
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  uint64_t v39 = v46;
  v38(v46, v10, v31);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v45 + 176) + 48))(v39, v13);
  os_unfair_recursive_lock_unlock();
  unint64_t v41 = 0x8000000000000000;
  if (v40 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v21);
    uint64_t v42 = v48;
    if (*v48 == 0x8000000000000000) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v40 < 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (!v40)
  {
LABEL_44:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v46, v31);
    (*(void (**)(char *, void *))(v51 + 8))(v49, v30);
    goto LABEL_45;
  }
  os_unfair_lock_lock(v21);
  uint64_t v42 = v48;
  uint64_t v43 = *v48;
  if (*v48 == 0x8000000000000000)
  {
LABEL_43:
    os_unfair_lock_unlock(v21);
    goto LABEL_44;
  }
  if ((v43 | v40) < 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v41 = v43 + v40;
  if (__OFADD__(v43, v40))
  {
    unint64_t v41 = 0x8000000000000000;
LABEL_42:
    *uint64_t v42 = v41;
    goto LABEL_43;
  }
  if ((v41 & 0x8000000000000000) == 0) {
    goto LABEL_42;
  }
LABEL_54:
  __break(1u);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = (void *)(v4 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v28;
                }
                uint64_t v3 = v2;
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter.Inner(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest3Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v5 = a2 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v6 = a2 + *(int *)(TupleTypeMetadata3 + 64);

  return CombineLatest3Inner.convert(values:)(a2, v5, v6, a1);
}

uint64_t CombineLatest3Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  outlined init with copy of Any?(a4 + 32, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v4 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any?(a4 + 64, (uint64_t)v8, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v4 >= 3)
  {
    outlined init with copy of Any?(a4 + 96, (uint64_t)&v7, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t *a1)
{
  return Publishers.CollectByTime.Inner.receive(_:)(a1);
}

uint64_t partial apply for closure #1 in Publishers.Map.map<A>(_:)(uint64_t a1)
{
  return closure #1 in Publishers.Map.map<A>(_:)(a1, *(void (**)(char *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in Publishers.Map.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790]();
  unsigned int v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a7);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.DropWhile.Inner.receive(_:)(a1);
}

uint64_t Publishers.DropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  int v6 = v14[40];
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (!v6)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t))((char *)v2 + *(void *)(*v2 + 128));
    if (v9)
    {
      uint64_t v10 = *(void *)(*v2 + 136);
      if (*((unsigned char *)v2 + v10) == 1)
      {
        uint64_t v11 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        os_unfair_lock_unlock(v11);
        if (v9(a1))
        {
          _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
          return 1;
        }
        os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
        *((unsigned char *)v2 + v10) = 0;
        uint64_t v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
      }
      else
      {
        unsigned int v12 = *(os_unfair_lock_s **)((char *)v2 + v5);
        swift_retain();
        uint64_t v13 = v12;
      }
      os_unfair_lock_unlock(v13);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48))(a1, *(void *)(v4 + 88));
      _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
      return v7;
    }
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
  return 0;
}

uint64_t vtable thunk for AbstractCombineLatest.convert(values:) dispatching to CombineLatest4Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return CombineLatest4Inner.convert(values:)(a2, a2 + TupleTypeMetadata[12], a2 + TupleTypeMetadata[16], a2 + TupleTypeMetadata[20], a1);
}

uint64_t CombineLatest4Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any?(a5 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  outlined init with copy of Any?(a5 + 64, (uint64_t)v10, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  outlined init with copy of Any?(a5 + 96, (uint64_t)v9, &demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if (v5 != 3)
  {
    outlined init with copy of Any?(a5 + 128, (uint64_t)&v8, &demangling cache variable for type metadata for Any?);
    return swift_dynamicCast();
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
}

void Publishers.SwitchToLatest.Outer.receive(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v3));
  uint64_t v4 = *(void *)v0;
  if ((*(unsigned char *)(v0 + *(void *)(*(void *)v0 + 184)) & 1) != 0 || *(unsigned char *)(v0 + *(void *)(v4 + 192)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v3));
  }
  else
  {
    uint64_t v5 = v0 + *(void *)(v4 + 144);
    swift_beginAccess();
    outlined init with copy of Subscription?(v5, (uint64_t)&v21);
    if (*((void *)&v22 + 1))
    {
      outlined init with take of Subscription(&v21, (uint64_t)&v15);
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v21, v5);
      swift_endAccess();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      long long v6 = v17;
      __swift_project_boxed_opaque_existential_1(&v15, v17);
      (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8) + 8))(v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v21);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    }
    uint64_t v7 = *(void *)(*(void *)v1 + 160);
    uint64_t v8 = *(void *)(v1 + v7);
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v1 + v7) = v8 + 1;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
      *(void *)(v1 + *(void *)(*(void *)v1 + 152)) = v8;
      *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 208)) = 1;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
      swift_retain();
      Publishers._Merged.Side.init(index:merger:)(v8, v1, &v21);
      long long v19 = v21;
      uint64_t v20 = v22;
      uint64_t v9 = *(void *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 120);
      long long v15 = *(_OWORD *)(v2 + 80);
      uint64_t v14 = v15;
      uint64_t v16 = v9;
      long long v17 = *(_OWORD *)(v2 + 104);
      uint64_t v13 = v17;
      uint64_t v18 = v10;
      uint64_t v11 = type metadata accessor for Publishers.SwitchToLatest.Outer.Side();
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v19, v14, v11, v13, WitnessTable);
      swift_release();
    }
  }
}

uint64_t type metadata accessor for Publishers.SwitchToLatest.Outer.Side()
{
  return swift_getGenericMetadata();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Output.Inner.receive(_:)(a1);
}

void Publishers.Output.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 144));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Delay<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Delay.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.MapError.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 48))(a1, *(void *)(a2 + 32));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.DropWhile<A>.Inner<A1>(void *a1)
{
  return Publishers.DropWhile.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.CollectByTime.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v23 - v7;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_4:
  uint64_t v9 = *(void *)(v3 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v9));
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v23);
  if (v24)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v23);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v9));
    return;
  }
  outlined init with take of Subscription(v23, (uint64_t)v25);
  uint64_t v11 = *v1;
  uint64_t v12 = *(void *)(*v1 + 192);
  unint64_t v13 = 0x8000000000000000;
  if (a1 != 0x8000000000000000)
  {
    uint64_t v14 = *(uint64_t *)((char *)v1 + v12);
    if (v14 == 0x8000000000000000)
    {
LABEL_15:
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v1 + *(void *)(v11 + 136), v5);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (EnumCaseMultiPayload != 1)
      {
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(&v8[*(int *)(TupleTypeMetadata2 + 48)], AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v8, v4);
        unint64_t v13 = 1;
        goto LABEL_21;
      }
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v19 = *(void *)&v8[*(int *)(TupleTypeMetadata3 + 64)];
      unint64_t v13 = a1 * v19;
      if ((unsigned __int128)(a1 * (__int128)v19) >> 64 != (a1 * v19) >> 63)
      {
        unint64_t v13 = 0x8000000000000000;
LABEL_20:
        (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(&v8[*(int *)(TupleTypeMetadata3 + 48)], AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v8, v4);
        goto LABEL_21;
      }
      if ((v13 & 0x8000000000000000) == 0) {
        goto LABEL_20;
      }
LABEL_27:
      __break(1u);
      return;
    }
    if (((v14 | a1) & 0x8000000000000000) == 0)
    {
      unint64_t v15 = v14 + a1;
      if (__OFADD__(v14, a1))
      {
        unint64_t v15 = 0x8000000000000000;
LABEL_14:
        *(uint64_t *)((char *)v1 + v12) = v15;
        uint64_t v11 = *v1;
        goto LABEL_15;
      }
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_14;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(uint64_t *)((char *)v1 + v12) = 0x8000000000000000;
LABEL_21:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v9));
  uint64_t v21 = v26;
  uint64_t v22 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 24))(v13, v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncPublisher<A>.Iterator.Inner(uint64_t a1)
{
  return 0;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Retry<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.FirstWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FirstWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.FirstWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v26 = a1;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v25 - v16;
  v29[0] = v12;
  v29[1] = a3;
  v29[2] = v11;
  v29[3] = a4;
  uint64_t v18 = a5(0, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v17, 1, 1, AssociatedTypeWitness);
  uint64_t v19 = (uint64_t *)(v25 + *(int *)(a2 + 36));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  swift_allocObject();
  swift_retain();
  uint64_t v22 = specialized Publishers.FirstWhere.Inner.init(downstream:initial:reduce:)(v26, (uint64_t)v17, v20, v21, v27, v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29[0] = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v12, v18, v11, WitnessTable);
  return swift_release();
}

uint64_t Publishers.FirstWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FirstWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.FirstWhere.Inner, (uint64_t)&unk_1ED9986D0, (uint64_t)_s6Output7Combine9PublisherPQzSbIegnd_AESbIegnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtzSb5InputRtd__r__lTRTA_0);
}

uint64_t type metadata accessor for Publishers.FirstWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.FirstWhere.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 456);
  uint64_t v10 = *(void *)(*v6 + 440);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v8 + 448);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v17, a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v24, v11);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v10;
  v20[3] = v16;
  v20[4] = v9;
  v20[5] = *(void *)(v8 + 464);
  uint64_t v21 = v27;
  v20[6] = v26;
  v20[7] = v21;
  v29[0] = v28;
  v29[1] = v20;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v29);
}

uint64_t Publisher.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryMap, a6);
}

uint64_t type metadata accessor for Just()
{
  return __swift_instantiateGenericMetadata();
}

void CombineIdentifier.init()(uint64_t *a1@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v3 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v2);
    *a1 = v3;
  }
}

uint64_t type metadata completion function for Published()
{
  uint64_t result = type metadata accessor for Published.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Publisher.catch<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.catch<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for Publishers.Catch, a7);
}

uint64_t type metadata completion function for Published.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t Publisher.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.filter(_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Filter, a5);
}

Swift::Int CombineIdentifier.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata completion function for Subscribers.Sink()
{
  return swift_initClassMetadata2();
}

uint64_t Publisher.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.prepend(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))Publisher.prepend<A>(_:));
}

uint64_t AnyCancellable.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(void *)(v2 + 64) = v5;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(unsigned char *)(v2 + 56) = 0;
  return v2;
}

uint64_t Just.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t type metadata completion function for PublisherBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.CombineLatest4<A, B, C, D>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Publishers.CombineLatest4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Multicast<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Equatable in ConduitBase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for Publishers.First()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t getEnumTagSinglePayload for PublishedSubscriber(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t Empty.init(completeImmediately:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void partial apply for closure #1 in Publishers.Debounce.Inner.receive(_:)()
{
  closure #1 in Publishers.Debounce.Inner.receive(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata completion function for PassthroughSubject()
{
  type metadata accessor for Subscribers.Completion();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for CurrentValueSubject()
{
  type metadata accessor for Subscribers.Completion();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t Publishers.FlatMap.Outer.__deallocating_deinit()
{
  uint64_t v0 = Publishers.FlatMap.Outer.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.FlatMap.Outer.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  MEMORY[0x18C13C4B0](*((void *)v0 + 8), -1, -1);
  outlined destroy of Subscription?((uint64_t)(v0 + 24));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 152)]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

void AbstractZip.receive(subscription:index:)(void *a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v7 = (void *)*v2;
  uint64_t v6 = v7;
  uint64_t v8 = v7[11];
  uint64_t v9 = v7[12];
  uint64_t v51 = v7[13];
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v11 = (void *)type metadata accessor for Optional();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v13 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v12);
  if (*(void *)((char *)v3 + v7[21]) <= (int64_t)a2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v48 = v9;
  uint64_t v49 = v16;
  uint64_t v50 = v15;
  uint64_t v47 = (char *)v43 - v14;
  uint64_t v9 = v7[22];
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v9));
  uint64_t v17 = *v3;
  if (*((unsigned char *)v3 + *(void *)(*v3 + 136)))
  {
LABEL_6:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v9));
    uint64_t v20 = a1[3];
    uint64_t v21 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v20);
    (*(void (**)(uint64_t))(*(void *)(v21 + 8) + 8))(v20);
    return;
  }
  uint64_t v46 = v7;
  uint64_t v6 = (void *)((char *)v3 + *(void *)(v17 + 128));
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_22;
  }
  uint64_t v18 = *v6;
  if (*(void *)(*v6 + 16) <= a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
    *uint64_t v6 = v11;
    goto LABEL_9;
  }
  uint64_t v45 = v11;
  outlined init with copy of Subscription?(v18 + 40 * a2 + 32, (uint64_t)v52);
  uint64_t v19 = v53;
  outlined destroy of Subscription?((uint64_t)v52);
  if (v19) {
    goto LABEL_6;
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v52);
  swift_beginAccess();
  uint64_t v11 = (void *)*v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_24;
  }
LABEL_9:
  if (v11[2] <= a2)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v52, (uint64_t)&v11[5 * a2 + 4]);
    uint64_t v23 = *v6;
    swift_endAccess();
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v44 = v13;
    if (v24)
    {
      uint64_t v25 = v23 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of Subscription?(v25, (uint64_t)v52);
        uint64_t v26 = v53;
        outlined destroy of Subscription?((uint64_t)v52);
        if (!v26) {
          break;
        }
        v25 += 40;
        if (!--v24)
        {
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      char v27 = 1;
    }
    else
    {
LABEL_15:
      char v27 = 0;
    }
    uint64_t v28 = *(void *)(*v3 + 192);
    *((unsigned char *)v3 + v28) = v27 ^ 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v9));
    uint64_t v29 = v46;
    if ((v27 & 1) == 0)
    {
      v43[1] = *(void *)((char *)v3 + *(void *)(*v3 + 184));
      os_unfair_recursive_lock_lock_with_options();
      v52[0] = v29[10];
      v52[1] = v8;
      uint64_t v30 = v48;
      uint64_t v31 = v51;
      v52[2] = v48;
      uint64_t v53 = v51;
      uint64_t v53 = type metadata accessor for AbstractZip();
      uint64_t v54 = &protocol witness table for AbstractZip<A, B, C>;
      v52[0] = v3;
      uint64_t v32 = *(void (**)(void *, uint64_t, uint64_t))(v31 + 40);
      swift_retain();
      v32(v52, v30, v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v9));
      *((unsigned char *)v3 + v28) = 0;
      unint64_t v33 = (char *)v3 + *(void *)(*v3 + 208);
      swift_beginAccess();
      uint64_t v35 = v49;
      uint64_t v34 = v50;
      uint64_t v36 = v33;
      uint64_t v37 = v44;
      uint64_t v38 = v45;
      (*(void (**)(uint64_t, char *, void *))(v50 + 16))(v49, v36, v45);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v10) == 1)
      {
        (*(void (**)(uint64_t, void *))(v34 + 8))(v35, v38);
        AbstractZip.resolvePendingDemandAndUnlock()();
      }
      else
      {
        uint64_t v39 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v47, v35, v10);
        uint64_t v40 = v37;
        uint64_t v42 = a1[3];
        uint64_t v41 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v42);
        (*(void (**)(uint64_t))(*(void *)(v41 + 8) + 8))(v42);
        AbstractZip.lockedSendCompletion(completion:)(v39);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v10);
      }
    }
  }
}

uint64_t SubjectSubscriber.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (!MEMORY[0x18C13C570](v1 + 3)) {
    goto LABEL_4;
  }
  swift_beginAccess();
  outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v12);
  if (v13)
  {
    swift_unknownObjectRelease();
    outlined destroy of Subscription?((uint64_t)v12);
LABEL_4:
    os_unfair_lock_unlock(v4);
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v5);
  }
  outlined destroy of Subscription?((uint64_t)v12);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v12, (uint64_t)(v1 + 4));
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  uint64_t v13 = v3;
  uint64_t v14 = &protocol witness table for SubjectSubscriber<A>;
  v12[0] = v1;
  uint64_t v10 = v3 + 80;
  uint64_t v9 = *(void *)(v3 + 80);
  uint64_t v8 = *(void *)(v10 + 8);
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v8 + 32);
  swift_retain();
  v11(v12, v9, v8);
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

void Publishers.Drop.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 120));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v13);
  uint64_t v5 = v14;
  outlined destroy of Subscription?((uint64_t)v13);
  if (v5)
  {
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
    return;
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v13, v4);
  swift_endAccess();
  uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 144));
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(v1 + *(void *)(*(void *)v1 + 136));
  if (v9 == 0x8000000000000000)
  {
LABEL_8:
    os_unfair_lock_unlock(v3);
    unint64_t v10 = 0x8000000000000000;
LABEL_9:
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    return;
  }
  if (v9 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9)) {
    goto LABEL_8;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v3);
  if (v10) {
    goto LABEL_9;
  }
}

void Publishers.Drop.Inner.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 120));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)&v10);
  if (v11)
  {
    outlined init with take of Subscription(&v10, (uint64_t)v12);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return;
  }
  outlined destroy of Subscription?((uint64_t)&v10);
  uint64_t v7 = *(void *)(*(void *)v1 + 136);
  uint64_t v8 = *(void *)(v1 + v7);
  unint64_t v9 = 0x8000000000000000;
  if (v8 == 0x8000000000000000) {
    goto LABEL_14;
  }
  if (a1 == 0x8000000000000000) {
    goto LABEL_13;
  }
  if ((v8 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v9 = v8 + a1;
  if (!__OFADD__(v8, a1))
  {
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_19:
    __break(1u);
    return;
  }
  unint64_t v9 = 0x8000000000000000;
LABEL_13:
  *(void *)(v1 + v7) = v9;
LABEL_14:
  os_unfair_lock_unlock(v3);
}

uint64_t SubjectSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x18C13C570](v1 + 3))
  {
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)v7);
    uint64_t v5 = v7[3];
    outlined destroy of Subscription?((uint64_t)v7);
    os_unfair_lock_unlock(v4);
    if (v5) {
      (*(void (**)(uint64_t, void))(*(void *)(v3 + 88) + 16))(a1, *(void *)(v3 + 80));
    }
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  return 0;
}

uint64_t outlined init with copy of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void Publishers.FlatMap.Outer.Side.receive(completion:)(uint64_t a1)
{
  Publishers.FlatMap.Outer.receiveInner(completion:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v60 = *v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v53 - v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  v58 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v59 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v53 - v13, a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, AssociatedTypeWitness);
    uint64_t v28 = (os_unfair_lock_s *)v3[2];
    os_unfair_lock_lock(v28);
    uint64_t v29 = *(void *)(*v3 + 232);
    if (*((unsigned char *)v3 + v29) == 1)
    {
      os_unfair_lock_unlock(v28);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
      return;
    }
    uint64_t v54 = v9;
    uint64_t v57 = v10;
    uint64_t v55 = v7;
    uint64_t v56 = AssociatedTypeWitness;
    *((unsigned char *)v3 + v29) = 1;
    uint64_t v30 = (void *)((char *)v3 + *(void *)(*v3 + 184));
    swift_beginAccess();
    unint64_t v31 = *v30;
    *uint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v28);
    int64_t v32 = 0;
    uint64_t v33 = *(void *)(v31 + 64);
    unint64_t v61 = v31 + 64;
    uint64_t v34 = 1 << *(unsigned char *)(v31 + 32);
    uint64_t v35 = -1;
    if (v34 < 64) {
      uint64_t v35 = ~(-1 << v34);
    }
    unint64_t v36 = v35 & v33;
    int64_t v37 = (unint64_t)(v34 + 63) >> 6;
    int64_t v53 = v37 - 1;
    while (!v36)
    {
      int64_t v41 = v32 + 1;
      if (__OFADD__(v32, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      if (v41 < v37)
      {
        unint64_t v42 = *(void *)(v61 + 8 * v41);
        if (v42) {
          goto LABEL_20;
        }
        int64_t v43 = v32 + 2;
        ++v32;
        if (v41 + 1 < v37)
        {
          unint64_t v42 = *(void *)(v61 + 8 * v43);
          if (v42) {
            goto LABEL_23;
          }
          int64_t v32 = v41 + 1;
          if (v41 + 2 < v37)
          {
            unint64_t v42 = *(void *)(v61 + 8 * (v41 + 2));
            if (v42)
            {
              v41 += 2;
              goto LABEL_20;
            }
            int64_t v43 = v41 + 3;
            int64_t v32 = v41 + 2;
            if (v41 + 3 < v37)
            {
              unint64_t v42 = *(void *)(v61 + 8 * v43);
              if (!v42)
              {
                while (1)
                {
                  int64_t v41 = v43 + 1;
                  if (__OFADD__(v43, 1)) {
                    break;
                  }
                  if (v41 >= v37)
                  {
                    int64_t v32 = v53;
                    goto LABEL_34;
                  }
                  unint64_t v42 = *(void *)(v61 + 8 * v41);
                  ++v43;
                  if (v42) {
                    goto LABEL_20;
                  }
                }
LABEL_48:
                __break(1u);
                return;
              }
LABEL_23:
              int64_t v41 = v43;
LABEL_20:
              unint64_t v36 = (v42 - 1) & v42;
              unint64_t v39 = __clz(__rbit64(v42)) + (v41 << 6);
              int64_t v32 = v41;
LABEL_16:
              uint64_t v40 = *(void *)(v31 + 56);
              *(void *)&long long v62 = *(void *)(*(void *)(v31 + 48) + 8 * v39);
              outlined init with copy of Subscription(v40 + 40 * v39, (uint64_t)&v62 + 8);
              goto LABEL_35;
            }
          }
        }
      }
LABEL_34:
      unint64_t v36 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
LABEL_35:
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v62, (uint64_t)&v65);
      if (!v68)
      {
        swift_release();
        os_unfair_recursive_lock_lock_with_options();
        uint64_t v47 = v55;
        uint64_t v48 = v58;
        uint64_t v49 = v54;
        uint64_t v50 = v56;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v58, v54, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v50);
        (*(void (**)(char *, void))(*(void *)(v60 + 120) + 56))(v48, *(void *)(v60 + 96));
        (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v57);
        os_unfair_recursive_lock_unlock();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v50);
        return;
      }
      uint64_t v44 = v65;
      outlined init with take of Subscription(&v66, (uint64_t)&v62);
      if (v44 != a2)
      {
        uint64_t v46 = *((void *)&v63 + 1);
        uint64_t v45 = v64;
        __swift_project_boxed_opaque_existential_1(&v62, *((uint64_t *)&v63 + 1));
        (*(void (**)(uint64_t))(*(void *)(v45 + 8) + 8))(v46);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
    }
    unint64_t v38 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    unint64_t v39 = v38 | (v32 << 6);
    goto LABEL_16;
  }
  uint64_t v57 = v10;
  uint64_t v16 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v16);
  uint64_t v17 = (char *)v3 + *(void *)(*v3 + 184);
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)&v65);
  swift_endAccess();
  outlined destroy of Subscription?((uint64_t)&v65);
  uint64_t v18 = *v3;
  uint64_t v19 = (void *)*v3;
  uint64_t v20 = *(void *)(*v3 + 232);
  if ((*((unsigned char *)v3 + v20) & 1) == 0 && *((unsigned char *)v3 + v19[30]) == 1)
  {
    uint64_t v21 = *(void *)(*(void *)v17 + 16);
    uint64_t v22 = *(void *)((char *)v3 + v19[25]);
    BOOL v23 = __OFADD__(v21, v22);
    uint64_t v24 = v21 + v22;
    if (v23)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (!v24)
    {
      uint64_t v25 = v60;
      uint64_t v26 = (void *)((char *)v3 + v19[26]);
      swift_beginAccess();
      uint64_t v65 = *v26;
      swift_getAssociatedTypeWitness();
      swift_getTupleTypeMetadata2();
      type metadata accessor for Array();
      swift_getWitnessTable();
      if (Collection.isEmpty.getter())
      {
        *((unsigned char *)v3 + v20) = 1;
        os_unfair_lock_unlock(v16);
        os_unfair_recursive_lock_lock_with_options();
        char v27 = v58;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v58, 1, 1, AssociatedTypeWitness);
        (*(void (**)(char *, void))(*(void *)(v25 + 120) + 56))(v27, *(void *)(v25 + 96));
        (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v57);
        os_unfair_recursive_lock_unlock();
        return;
      }
      uint64_t v18 = *v3;
    }
  }
  if (*(void *)((char *)v3 + *(void *)(v18 + 216)) != 0x8000000000000000)
  {
    swift_beginAccess();
    outlined init with copy of Any?((uint64_t)(v3 + 3), (uint64_t)&v62, &demangling cache variable for type metadata for Subscription?);
    if (*((void *)&v63 + 1))
    {
      outlined init with take of Subscription(&v62, (uint64_t)&v65);
      os_unfair_lock_unlock(v16);
      uint64_t v51 = v67;
      uint64_t v52 = v68;
      __swift_project_boxed_opaque_existential_1(&v65, v67);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 24))(1, v51, v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v62);
  }
  os_unfair_lock_unlock(v16);
}

uint64_t outlined destroy of Subscription?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithCopy for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Debounce<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Debounce.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v8);
  LODWORD(v4) = v8[40];
  outlined destroy of SubscriptionStatus((uint64_t)v8);
  if (v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(*v1 + 208);
  uint64_t v6 = *(void *)((char *)v1 + v5);
  unint64_t v7 = 0x8000000000000000;
  if (v6 == 0x8000000000000000) {
    goto LABEL_10;
  }
  if (a1 == 0x8000000000000000)
  {
LABEL_9:
    *(void *)((char *)v1 + v5) = v7;
LABEL_10:
    os_unfair_lock_unlock(v3);
    return;
  }
  if ((v6 | a1) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v7 = v6 + a1;
  if (__OFADD__(v6, a1))
  {
    unint64_t v7 = 0x8000000000000000;
    goto LABEL_9;
  }
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.TryMap.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v20 = a1;
  uint64_t v21 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v19 - v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v2 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v11));
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v23);
  int v13 = v26;
  outlined destroy of SubscriptionStatus((uint64_t)&v23);
  if (v13)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v11));
  }
  else
  {
    uint64_t v23 = 1;
    long long v24 = 0u;
    long long v25 = 0u;
    unsigned __int8 v26 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v23, v12);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v11));
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v20, v7);
    uint64_t v14 = v22;
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, AssociatedTypeWitness);
    uint64_t v16 = v21;
    if (v15 == 1)
    {
      uint64_t v23 = 0;
      (*(void (**)(uint64_t *, void))(*(void *)(v21 + 112) + 56))(&v23, *(void *)(v21 + 96));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v6, v10, AssociatedTypeWitness);
      uint64_t v17 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v18, v6, AssociatedTypeWitness);
      uint64_t v23 = v17;
      (*(void (**)(uint64_t *, void))(*(void *)(v16 + 112) + 56))(&v23, *(void *)(v16 + 96));
      MEMORY[0x18C13C260](v17);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v6, AssociatedTypeWitness);
    }
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.SubscribeOn.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a1, *(void *)(v3 + 96));
  }
}

void PassthroughSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 136);
  uint64_t v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  int v9 = *((unsigned __int8 *)v1 + *(void *)(*v1 + 144));
  os_unfair_lock_unlock(v3);
  if (v9 == 1)
  {
    uint64_t v10 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 24))(0x8000000000000000, v10, v11);
  }
}

uint64_t type metadata accessor for AbstractZip()
{
  return swift_getGenericMetadata();
}

void AbstractZip.resolvePendingDemandAndUnlock()()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*(void *)v0 + 200);
  uint64_t v4 = *(void *)(v0 + v3);
  *(void *)(v0 + v3) = 0;
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 176));
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v5);
  if (v4 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (!v4)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_4:
    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      uint64_t v7 = v2 + 32;
      do
      {
        outlined init with copy of Subscription?(v7, (uint64_t)v10);
        uint64_t v9 = v11;
        if (v11)
        {
          uint64_t v8 = v12;
          __swift_project_boxed_opaque_existential_1(v10, v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v4, v9, v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)v10);
        }
        v7 += 40;
        --v6;
      }
      while (v6);
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t Publishers.IgnoreOutput.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v20 = *(void *)(v8 + 16);
  uint64_t v9 = v20;
  uint64_t v21 = v11;
  uint64_t v22 = v10;
  uint64_t v23 = v12;
  uint64_t v13 = type metadata accessor for Publishers.IgnoreOutput.Inner();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  Publishers.IgnoreOutput.Inner.init(downstream:)((uint64_t)v7, a3, (uint64_t)v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v16, v9, v13, v10, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t destroy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
}

void Publishers.IgnoreOutput.Inner.init(downstream:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
  uint64_t v4 = *(int *)(type metadata accessor for Publishers.IgnoreOutput.Inner() + 52);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v5 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v6 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v5);
    *(void *)(a3 + v4) = v6;
  }
}

uint64_t type metadata accessor for Publishers.IgnoreOutput.Inner()
{
  return swift_getGenericMetadata();
}

void static Published.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 120);
  uint64_t v3 = *(void **)(*(void *)a1 + 128);
  if (a2)
  {
    uint64_t v5 = v2[13];
    uint64_t v6 = v2[14];
    uint64_t v8 = v2[11];
    uint64_t v7 = v2[12];
    uint64_t v9 = v2[5];
    (*(void (**)(void, void, uint64_t))(v6 + 16))(v2[15], v2[16], v5);
    swift_retain();
    swift_retain();
    uint64_t v10 = swift_unknownObjectRetain();
    v2[2] = v9;
    v2[3] = v7;
    v2[4] = v4;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(v10, v8, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v11 = *(void (**)(void *, uint64_t))(v6 + 8);
    v11(v4, v5);
    v11(v3, v5);
  }
  else
  {
    uint64_t v12 = v2[13];
    uint64_t v13 = v2[14];
    uint64_t v15 = v2[11];
    uint64_t v14 = v2[12];
    uint64_t v16 = v2[5];
    swift_retain();
    swift_retain();
    uint64_t v17 = swift_unknownObjectRetain();
    v2[8] = v16;
    v2[9] = v14;
    v2[10] = v3;
    specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(v17, v15, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v12);
  }
  free(v3);
  free(v4);

  free(v2);
}

uint64_t static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  specialized static Published.subscript.setter(a1, a2, (uint64_t)a3);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBE08] + v4 + 8) - 8) + 8);

  return v5(a1);
}

uint64_t specialized static Published.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(a2, a3, (uint64_t (*)(uint64_t))partial apply for closure #1 in static Published.subscript.setter);
}

uint64_t specialized static Published.withMutation<A>(of:keyPath:storage:apply:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = a1;
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    a1 = swift_once();
  }
  if (static CombineFeatures.observableObservableObjectAvailable == 1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    if (dynamic_cast_existential_2_conditional(v4))
    {
      uint64_t v6 = v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
      void v10[3] = swift_getAssociatedTypeWitness();
      v10[4] = swift_getAssociatedConformanceWitness();
      __swift_allocate_boxed_opaque_existential_1(v10);
      v8(ObjectType, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publisher);
      type metadata accessor for ObservableObjectPublisher();
      if (swift_dynamicCast())
      {
        applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)();
        swift_unknownObjectRelease();
        return swift_release();
      }
    }
    a1 = swift_unknownObjectRelease();
  }
  return a3(a1);
}

uint64_t partial apply for closure #1 in static Published.subscript.setter()
{
  return closure #1 in static Published.subscript.setter(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t closure #1 in static Published.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*MEMORY[0x1E4FBBE08] + *a2 + 8) + 16);
  uint64_t v6 = type metadata accessor for Published.Storage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = &v19[-v12];
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v19[-v14];
  uint64_t v21 = a1;
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v13, v15, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    protocol witness for Subject.send(_:) in conformance PublishedSubject<A>(a3);
    return swift_release_n();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v10, a3, v5);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a1;
    swift_unknownObjectRetain();
    uint64_t v17 = (void (*)(unsigned char *, void))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v7 + 40))(v18, v10, v6);
    v17(v19, 0);
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v13, v6);
  }
}

unsigned __int8 *assignWithTake for Published.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t Published.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  unsigned int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = type metadata accessor for Published.Storage();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unsigned int v14 = (uint64_t *)((char *)&v17 - v13);
  (*(void (**)(char *, uint64_t *, uint64_t))(v12 + 16))((char *)&v17 - v13, v2, v11);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v16 = *v14;
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v10, v14, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    Published.Publisher.init(_:)((uint64_t)v8, v4, &v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    uint64_t v16 = v18;
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v2, v11);
    *uint64_t v2 = v16;
    swift_storeEnumTagMultiPayload();
    uint64_t result = swift_retain();
  }
  *a2 = v16;
  return result;
}

uint64_t partial apply for closure #1 in ObservableObject<>.objectWillChange.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ObservableObject<>.applyFields(_:_:type:)(*(uint64_t **)(v3 + 40), a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24)) & 1;
}

uint64_t ObservableObject<>.applyFields(_:_:type:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_conformsToProtocol2();
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    return 1;
  }

  return project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)(v13, v5, a2, a1, a4, v13, a5, v12);
}

uint64_t project #1 <A><A1>(type:) in ObservableObject<>.applyFields(_:_:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = type metadata accessor for ObservationRegistrar();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unsigned int v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a4) {
    goto LABEL_2;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a6, a8);
  if (v18)
  {
    *a4 = v18;
    swift_release();
    return 0;
  }
  else
  {
    type metadata accessor for ObservableObjectPublisher();
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    uint64_t v21 = (_DWORD *)swift_slowAlloc();
    *uint64_t v21 = 0;
    *(void *)(v19 + v20) = v21;
    *(void *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E4FBC870];
    *(void *)(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v14, v11);
    *a4 = v19;
    swift_release();
    uint64_t result = *a4;
    if (*a4)
    {
LABEL_2:
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 16);
      uint64_t v16 = swift_retain();
      v15(v16, a6, a8);
      return 1;
    }
    __break(1u);
  }
  return result;
}

uint64_t Published.objectWillChange.setter(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = type metadata accessor for Published.Storage();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 16))((char *)&v18 - v14, v3, v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release_n();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v15, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    Published.Publisher.init(_:)((uint64_t)v9, v5, &v19);
    uint64_t v17 = v19;
    swift_retain();
    specialized PublishedSubject.objectWillChange.setter(a1);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v3, v12);
    *uint64_t v3 = v17;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t destroy for Published.Storage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *initializeWithCopy for Published.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    swift_retain();
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

void specialized PublishedSubject.objectWillChange.setter(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock(v1[2]);
  *(os_unfair_lock_t *)((char *)v1 + *(void *)&(*v1)[32]._os_unfair_lock_opaque) = a1;
  swift_retain();
  swift_release();
  unsigned int v3 = v1[2];

  os_unfair_lock_unlock(v3);
}

uint64_t *CurrentValueSubject.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  v1[2] = (uint64_t)v4;
  *((unsigned char *)v1 + 24) = 1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 120);
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 128);
  uint64_t v8 = *(void *)(v3 + 80);
  *(void *)uint64_t v7 = ConduitList.init()();
  *(unsigned char *)(v7 + 8) = v9;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 144)) = MEMORY[0x1E4FBC860];
  *((unsigned char *)v1 + *(void *)(*v1 + 152)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 136), a1, v8);
  return v1;
}

uint64_t Published.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PublishedSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = PublishedSubject.__allocating_init(_:)((uint64_t)v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

uint64_t type metadata accessor for PublishedSubject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PublishedSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  PublishedSubject.init(_:)(a1);
  return v2;
}

uint64_t *PublishedSubject.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  v1[2] = (uint64_t)v4;
  uint64_t v5 = *(void *)(v3 + 80);
  v1[3] = ConduitList.init()();
  *((unsigned char *)v1 + 32) = v6;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112)) = MEMORY[0x1E4FBC860];
  *((unsigned char *)v1 + *(void *)(*v1 + 120)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 128)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 104), a1, v5);
  return v1;
}

uint64_t PassthroughSubject.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 120);
  uint64_t v3 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 128);
  *(void *)uint64_t v4 = ConduitList.init()();
  *(unsigned char *)(v4 + 8) = v5;
  *(void *)(v0 + *(void *)(*(void *)v0 + 136)) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 144)) = 0;
  return v0;
}

uint64_t type metadata accessor for Subscribers.Completion()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ConduitList.init()()
{
  return 0;
}

uint64_t Published.objectWillChange.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Published.Storage();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v8 - v4, v1, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_retain();
    uint64_t v6 = PublishedSubject.objectWillChange.getter();
    swift_release_n();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return v6;
}

uint64_t PublishedSubject.objectWillChange.getter()
{
  os_unfair_lock_lock(v0[2]);
  uint64_t v1 = *(uint64_t *)((char *)v0 + *(void *)&(*v0)[32]._os_unfair_lock_opaque);
  uint64_t v2 = v0[2];
  swift_retain();
  os_unfair_lock_unlock(v2);
  return v1;
}

uint64_t type metadata accessor for Publishers.MergeMany()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CurrentValueSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 144);
  char v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
}

void protocol witness for Subscription.request(_:) in conformance SubjectSubscriber<A>(Combine::Subscribers::Demand a1)
{
}

void Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  char v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v13);
    os_unfair_lock_unlock(v5);
  }
  else
  {
    outlined init with take of Subscription(v13, (uint64_t)v15);
    os_unfair_lock_unlock(v5);
    unint64_t v7 = (char *)v2 + *(void *)(*v2 + 152);
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v15, (uint64_t)v13);
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = v4[10];
    uint64_t v10 = v4[11];
    void v9[3] = v10;
    v9[4] = v4[12];
    v9[5] = v4[13];
    uint64_t v11 = v4[14];
    v9[6] = v11;
    v9[7] = v4[15];
    v9[8] = v8;
    outlined init with take of Subscription(v13, (uint64_t)(v9 + 9));
    v9[14] = a1;
    uint64_t v12 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v11 + 56);
    swift_retain();
    v12(v7, partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:), v9, v10, v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    swift_release();
  }
}

Swift::Void __swiftcall SubjectSubscriber.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of Subscription?(v1 + 32, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of Subscription(&v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v6);
    os_unfair_lock_unlock(v3);
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.HandleEvents.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 64);
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 136);
  if (v4)
  {
    swift_retain();
    os_unfair_lock_unlock(v3);
    v4(a1);
    os_unfair_lock_lock(v3);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v4);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Subscription.request(_:) in conformance FilterProducer<A, B, C, D, E>(Combine::Subscribers::Demand a1)
{
}

uint64_t Just.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v16 = (char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Just.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  swift_allocObject();
  uint64_t v18 = Just.Inner.init(downstream:value:)((uint64_t)v16, (uint64_t)v12);
  v21[3] = v17;
  v21[4] = &protocol witness table for Just<A>.Inner<A1>;
  v21[0] = v18;
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 40))(v21, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

void Publishers.FlatMap.Outer.Side.receive(subscription:)(void *a1)
{
  Publishers.FlatMap.Outer.receiveInner(subscription:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(subscription:_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (os_unfair_lock_s *)v3[2];
  os_unfair_lock_lock(v6);
  uint64_t v7 = *(void *)(*v3 + 200);
  uint64_t v8 = *(void *)((char *)v3 + v7);
  BOOL v9 = __OFSUB__(v8, 1);
  uint64_t v10 = v8 - 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    *(void *)((char *)v3 + v7) = v10;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, a2);
    swift_endAccess();
    if (*(void *)((char *)v3 + *(void *)(*v3 + 160)) == 0x8000000000000000) {
      unint64_t v11 = 0x8000000000000000;
    }
    else {
      unint64_t v11 = 1;
    }
    os_unfair_lock_unlock(v6);
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Subscription((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Subscription?(a1);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of Subscription((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of Subscription?((uint64_t)v14);
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Subscription(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(unint64_t a1)
{
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of Subscription((long long *)(*(void *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_1(v17);
    return outlined init with take of Subscription(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 8));
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[2];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    char v6 = ~v3;
    do
    {
      outlined init with copy of ObservableObjectTable.Storage(*(void *)(v2 + 48) + 16 * v4, (uint64_t)v10);
      uint64_t v7 = v10[1];
      uint64_t v8 = *(void *)(a1 + 8);
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v10);
      if (v7 == v8) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        BOOL v12 = (void *)(v11 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            uint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *uint64_t v16 = *v12;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            unint64_t v18 = v17 + 40 * v3;
            unint64_t v19 = (long long *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              long long v9 = *v19;
              long long v10 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)unint64_t v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    char v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned char v21[8];
  Swift::UInt v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of ObservableObjectTable.Storage(*(void *)(a2 + 48) + 16 * v6, (uint64_t)v21);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v22);
        long long v9 = Hasher._finalize()();
        unint64_t result = outlined destroy of ObservableObjectTable.Storage((uint64_t)v21);
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t result = v11 + 16 * v3;
          if (v3 < (uint64_t)v6 || result >= v11 + 16 * v6 + 16)
          {
            unint64_t result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (v3 != v6)
          {
            unint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          BOOL v12 = *(void *)(a2 + 56);
          unint64_t v13 = (void *)(v12 + 8 * v3);
          char v14 = (void *)(v12 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v13 >= v14 + 1))
          {
            *unint64_t v13 = *v14;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v15 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v16 = *v15;
    uint64_t v17 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v15 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v17 = *v15;
    uint64_t v16 = (-1 << result) - 1;
  }
  *uint64_t v15 = v17 & v16;
  unint64_t v18 = *(void *)(a2 + 16);
  unint64_t v19 = __OFSUB__(v18, 1);
  char v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v20;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

Swift::Void __swiftcall FilterProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v4 = *v1;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_11:
    os_unfair_lock_unlock(v2);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v2);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 128);
  long long v7 = *(_OWORD *)(v4 + 96);
  long long v14 = *(_OWORD *)(v4 + 80);
  long long v15 = v7;
  long long v16 = *(_OWORD *)(v4 + 112);
  uint64_t v17 = v6;
  uint64_t v8 = type metadata accessor for FilterProducer.State();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v14, v5, v8);
  if (*((void *)&v15 + 1) == 1)
  {
    os_unfair_lock_unlock(v2);
    return;
  }
  if (!*((void *)&v15 + 1)) {
    goto LABEL_11;
  }
  outlined init with take of Subscription(&v14, (uint64_t)v11);
  os_unfair_lock_unlock(v2);
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v10 + 24))(a1.rawValue, v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t FilterProducer.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v58 = a1;
  uint64_t v59 = *v1;
  int64_t v3 = (void *)v59;
  uint64_t v4 = *(void *)(v59 + 120);
  uint64_t v5 = *(void *)(v59 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v45 - v7;
  swift_getAssociatedConformanceWitness();
  uint64_t v55 = type metadata accessor for Subscribers.Completion();
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v55);
  int64_t v53 = (char *)&v45 - v9;
  uint64_t v10 = v3[12];
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v45 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v48 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v49 = (char *)&v45 - v15;
  uint64_t v62 = type metadata accessor for PartialCompletion();
  uint64_t v61 = *(void *)(v62 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v62);
  unint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v60 = (char *)&v45 - v19;
  char v20 = *(os_unfair_lock_s **)((char *)v2 + v3[19]);
  os_unfair_lock_lock(v20);
  uint64_t v21 = (char *)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  uint64_t v22 = v3[11];
  uint64_t v23 = v3[16];
  uint64_t v57 = v5;
  *(void *)&long long v70 = v5;
  *((void *)&v70 + 1) = v22;
  uint64_t v71 = v10;
  long long v72 = *(_OWORD *)(v59 + 104);
  uint64_t v59 = v4;
  uint64_t v73 = v4;
  uint64_t v74 = v23;
  uint64_t v24 = type metadata accessor for FilterProducer.State();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(long long *, char *, uint64_t))(v25 + 16))(&v70, v21, v24);
  if ((void)v72 == 1)
  {
    os_unfair_lock_unlock(v20);
    return 0;
  }
  uint64_t v46 = AssociatedTypeWitness;
  if ((void)v72)
  {
    outlined init with take of Subscription(&v70, (uint64_t)v67);
    os_unfair_lock_unlock(v20);
    unsigned __int8 v26 = v60;
    (*(void (**)(uint64_t))(*v2 + 224))(v58);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v18, v26, v62);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      uint64_t v34 = v51;
      uint64_t v35 = v49;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v49, v18, v12);
      unint64_t v36 = v48;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v48, v35, v12);
      uint64_t v37 = v50;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v36, 1, v10) == 1)
      {
        unint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
        v38(v35, v12);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
        v38(v36, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
        return 1;
      }
      else
      {
        uint64_t v44 = v47;
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v47, v36, v10);
        uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v59 + 48))(v44, v57);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v10);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v12);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      }
      return v39;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = v56;
      uint64_t v29 = v52;
      uint64_t v30 = v46;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v18, v46);
      os_unfair_lock_lock(v20);
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      long long v66 = xmmword_18C0BA640;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t *, uint64_t))(v25 + 40))(v21, &v63, v24);
      swift_endAccess();
      os_unfair_lock_unlock(v20);
      uint64_t v31 = v68;
      uint64_t v32 = v69;
      __swift_project_boxed_opaque_existential_1(v67, v68);
      (*(void (**)(uint64_t))(*(void *)(v32 + 8) + 8))(v31);
      uint64_t v33 = v53;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v33, 0, 1, v30);
      (*(void (**)(char *, uint64_t))(v59 + 56))(v33, v57);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v55);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
    }
    else
    {
      os_unfair_lock_lock(v20);
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      long long v66 = xmmword_18C0BA640;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t *, uint64_t))(v25 + 40))(v21, &v63, v24);
      swift_endAccess();
      os_unfair_lock_unlock(v20);
      uint64_t v40 = v68;
      uint64_t v41 = v69;
      __swift_project_boxed_opaque_existential_1(v67, v68);
      (*(void (**)(uint64_t))(*(void *)(v41 + 8) + 8))(v40);
      unint64_t v42 = v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v53, 1, 1, v46);
      (*(void (**)(char *, uint64_t))(v59 + 56))(v42, v57);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v55);
    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    return 0;
  }
  os_unfair_lock_unlock(v20);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of Subscription(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t initializeWithCopy for FilterProducer.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t type metadata accessor for PartialCompletion()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FilterProducer.State()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.RemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  void (**v2)(uint64_t *__return_ptr, char *, uint64_t);
  void (*v3)(uint64_t *__return_ptr, char *, uint64_t);
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, void, uint64_t, uint64_t);
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27[3];

  uint64_t v24 = a1;
  unsigned __int8 v26 = a2;
  unint64_t v3 = *v2;
  uint64_t v4 = *((void *)*v2 + 34);
  uint64_t v25 = *((void *)*v2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = (char *)v2 + *((void *)v3 + 38);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v17, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    unint64_t v18 = v24;
LABEL_5:
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v19(v10, v18, AssociatedTypeWitness);
    uint64_t v24 = v4;
    char v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    v20(v10, 0, 1, AssociatedTypeWitness);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v17, v10, v6);
    swift_endAccess();
    uint64_t v21 = v26;
    v19(v26, v18, AssociatedTypeWitness);
    v20(v21, 0, 1, AssociatedTypeWitness);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
  unint64_t v18 = v24;
  v2[2](v27, v16, v24);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  if (LOBYTE(v27[0]) != 1) {
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v26, 1, 1, AssociatedTypeWitness);
LABEL_6:
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)(*(uint64_t (**)(void))(v1 + 48), a1);
}

uint64_t _s6Output7Combine9PublisherPQzAESbIegnnd_A2ESbIegnnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtz5InputQyd__AARtzr__lTRTA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result & 1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(uint64_t (*a1)(void)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for basicEquality<A>(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

unsigned __int8 *destroy for PartialCompletion(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v3 <= *(void *)(v2 + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v4 = result[v3];
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *result;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)result;
LABEL_12:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4)
  {
    if (v4 != 1) {
      return result;
    }
    uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  }
  return (unsigned __int8 *)(*(uint64_t (**)(void))(v2 + 8))();
}

unsigned char *initializeWithCopy for PartialCompletion(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 16))(__dst);
    __dst[v5] = 1;
  }
  else if (v6)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

uint64_t type metadata accessor for Just.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *Just.Inner.init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v2 + *(void *)(v3 + 104);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v14, v4);
  v11((uint64_t)v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 112), v15);
  return v2;
}

uint64_t storeEnumTagSinglePayload for Publishers._Merged.Side(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (a2) {
        outlined init with take of Subscription(v21, (uint64_t)v31);
      }
      else {
        outlined init with copy of Subscription((uint64_t)v21, (uint64_t)v31);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = outlined init with take of Subscription(v31, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  char v32[8];
  Swift::UInt v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = v2;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 48) + 16 * v16;
      if (a2)
      {
        outlined init with take of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      }
      else
      {
        outlined init with copy of ObservableObjectTable.Storage(v20, (uint64_t)v32);
        uint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t result = outlined init with take of ObservableObjectTable.Storage((uint64_t)v32, *(void *)(v7 + 48) + 16 * v14);
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t protocol witness for Subscription.request(_:) in conformance Just<A>.Inner<A1>(uint64_t a1)
{
  return Just.Inner.request(_:)(a1);
}

uint64_t Just.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  int64_t v12 = &v19[-v11];
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188790](v10);
  unint64_t v16 = &v19[-v15];
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_4:
  uint64_t v17 = (uint64_t)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v12, v5);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v16, v12, v4);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 40))(v17, v9, v5);
  swift_endAccess();
  uint64_t v18 = *(void *)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v4, v18);
  v19[0] = 1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 56))(v19, v4, v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v4);
}

uint64_t getEnumTagSinglePayload for Publishers._Merged.Side(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t Publishers.Autoconnect.receive<A>(subscriber:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 88);
  uint64_t v29 = v9;
  *(void *)&long long v30 = v11;
  *((void *)&v30 + 1) = v10;
  uint64_t v31 = v12;
  uint64_t v13 = type metadata accessor for Publishers.Autoconnect.Inner();
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v25 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a2);
  uint64_t v16 = swift_retain();
  Publishers.Autoconnect.Inner.init(_:_:)(v16, (uint64_t)v7, a2, v15);
  uint64_t v17 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 104));
  os_unfair_lock_lock(v17);
  Publishers.Autoconnect.state.getter((uint64_t)&v29);
  if (v32)
  {
    uint64_t v18 = v25;
    uint64_t v19 = v29;
    uint64_t result = outlined init with take of Subscription(&v30, (uint64_t)v28);
    if (__OFADD__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v26 = v19 + 1;
      outlined init with copy of Subscription((uint64_t)v28, (uint64_t)v27);
      Publishers.Autoconnect.state.setter((uint64_t)&v26);
      os_unfair_lock_unlock(v17);
      uint64_t v21 = *(void *)(v10 + 8);
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)v15, v9, v13, v21, WitnessTable);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 8))(v15, v13);
    }
  }
  else
  {
    os_unfair_lock_unlock(v17);
    uint64_t v23 = *(void *)(v10 + 8);
    uint64_t v24 = swift_getWitnessTable();
    Publisher.subscribe<A>(_:)((uint64_t)v15, v9, v13, v23, v24);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v28, v9, v10);
    os_unfair_lock_lock(v17);
    uint64_t v26 = 1;
    outlined init with copy of Subscription((uint64_t)v28, (uint64_t)v27);
    Publishers.Autoconnect.state.setter((uint64_t)&v26);
    os_unfair_lock_unlock(v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v25 + 8))(v15, v13);
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for Publishers._Merged.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for Publishers.Autoconnect.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t destroy for Publishers.Autoconnect.Inner(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t Publishers.Autoconnect.state.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Publishers.Autoconnect.State();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t assignWithTake for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t Publishers.Autoconnect.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Publishers.Autoconnect.State();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for Publishers.Autoconnect.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.Autoconnect.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  return a1;
}

void Publishers.Autoconnect.Inner.init(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v8 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v9 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v8);
    *a4 = v9;
    a4[1] = a1;
    uint64_t v10 = type metadata accessor for Publishers.Autoconnect.Inner();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))((char *)a4 + *(int *)(v10 + 56), a2, a3);
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Multicast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.Multicast.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t Publishers.Multicast.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[6] = Publishers.Multicast.lazySubject.getter();
  uint64_t v11 = v7[10];
  uint64_t v12 = v7[11];
  uint64_t v13 = v7[12];
  uint64_t v14 = v7[13];
  v20[0] = v11;
  v20[1] = v12;
  void v20[2] = a2;
  v20[3] = v13;
  v20[4] = v14;
  v20[5] = a3;
  uint64_t v15 = type metadata accessor for Publishers.Multicast.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  swift_allocObject();
  v20[0] = Publishers.Multicast.Inner.init(_:)((uint64_t)v10);
  uint64_t v16 = *(void *)(v14 + 8);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v20, v12, v15, v16, WitnessTable);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t Publishers.Multicast.lazySubject.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 128));
  os_unfair_lock_lock(v2);
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 136);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (!v5)
  {
    uint64_t v6 = (*(uint64_t (**)(void))((char *)v1 + *(void *)(v3 + 120)))();
    uint64_t v5 = v6;
    uint64_t v7 = *(uint64_t *)((char *)v1 + v4);
    if (v7)
    {
      swift_unknownObjectRetain();
      os_unfair_lock_unlock(v2);
      swift_unknownObjectRelease();
      return v7;
    }
    *(uint64_t *)((char *)v1 + v4) = v6;
  }
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v2);
  return v5;
}

char *Publishers.Multicast.Inner.init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *((void *)v1 + 2) = v4;
  uint64_t v5 = &v1[*(void *)(*(void *)v1 + 144)];
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[40] = 2;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 32))(&v1[*(void *)(*(void *)v1 + 136)], a1);
  return v1;
}

uint64_t type metadata accessor for Publishers.Multicast.Inner()
{
  return swift_getGenericMetadata();
}

void *initializeWithCopy for Publishers.Autoconnect.Inner(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance AbstractCombineLatest<A, B, C>(uint64_t a1)
{
}

void AbstractCombineLatest.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_4:
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 184));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *v1;
  if (*((unsigned char *)v1 + *(void *)(*v1 + 160)) & 1) != 0 || (*((unsigned char *)v1 + *(void *)(v4 + 152)))
  {
    os_unfair_lock_unlock(v3);
    return;
  }
  uint64_t v5 = (uint64_t *)((char *)v1 + *(void *)(v4 + 128));
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v1 + 136);
  uint64_t v8 = *(uint64_t *)((char *)v1 + v7);
  unint64_t v9 = 0x8000000000000000;
  if (v8 != 0x8000000000000000)
  {
    if (a1 == 0x8000000000000000) {
      goto LABEL_16;
    }
    if (((v8 | a1) & 0x8000000000000000) == 0)
    {
      unint64_t v9 = v8 + a1;
      if (!__OFADD__(v8, a1))
      {
        if ((v9 & 0x8000000000000000) == 0) {
          goto LABEL_16;
        }
LABEL_27:
        __break(1u);
        return;
      }
      unint64_t v9 = 0x8000000000000000;
LABEL_16:
      *(uint64_t *)((char *)v1 + v7) = v9;
      goto LABEL_17;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  uint64_t v10 = *(void *)(v6 + 16);
  if (v10)
  {
    uint64_t v11 = v6 + 32;
    do
    {
      outlined init with copy of Any?(v11, (uint64_t)v14, &demangling cache variable for type metadata for Subscription?);
      uint64_t v13 = v15;
      if (v15)
      {
        uint64_t v12 = v16;
        __swift_project_boxed_opaque_existential_1(v14, v15);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      }
      else
      {
        outlined destroy of CustomStringConvertible?((uint64_t)v14, &demangling cache variable for type metadata for Subscription?);
      }
      v11 += 40;
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(a1, v3, v4);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Multicast.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
  return 0;
}

uint64_t Publishers.Drop.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 24);
  v24[0] = *(void *)(v12 + 16);
  uint64_t v14 = v24[0];
  v24[1] = v15;
  v24[2] = v13;
  uint64_t v25 = v16;
  uint64_t v17 = type metadata accessor for Publishers.Drop.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  uint64_t v18 = *(void *)(v4 + *(int *)(a2 + 36));
  swift_allocObject();
  uint64_t v19 = Publishers.Drop.Inner.init(downstream:count:)((uint64_t)v11, v18);
  uint64_t v25 = v17;
  uint64_t v26 = &protocol witness table for Publishers.Drop<A>.Inner<A1>;
  v24[0] = v19;
  uint64_t v20 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v20(v24, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v24[0] = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v24, v14, v17, v13, WitnessTable);
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance CurrentValueSubject<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CurrentValueSubject.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t type metadata accessor for Publishers.Drop.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.Drop.Inner.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 120);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 128);
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144)) = a2;
  return v2;
}

uint64_t partial apply for closure #1 in Publisher.multicast<A>(subject:)()
{
  specialized closure #1 in Publisher.multicast<A>(subject:)(*(void *)(v0 + 48));

  return swift_unknownObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v0);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance PublishedSubscriber<A>(uint64_t a1)
{
  return 0;
}

uint64_t PublishedSubscriber.receive(_:)(uint64_t a1)
{
  if (swift_weakLoadStrong())
  {
    PublishedSubject.send(_:)(a1);
    swift_release();
  }
  return 0;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Drop.Inner.receive(completion:)(a1);
}

uint64_t Publishers.Drop.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 120));
  os_unfair_lock_lock(v4);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v7, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 56))(a1, *(void *)(v3 + 88));
}

uint64_t dispatch thunk of Cancellable.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for PublishedSubscriber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t type metadata accessor for Empty()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ObservableObjectTable.Storage()
{
  return &type metadata for ObservableObjectTable.Storage;
}

unsigned char *destructiveInjectEnumTag for Record.Recording.State(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

uint64_t PassthroughSubject.Conduit.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 216)), -1, -1);
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 224)), -1, -1);
  uint64_t v1 = ConduitBase.init()();
  swift_release();
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 200);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t _s7Combine11SubscribersO10CompletionOy_q_GIegn_AFytIegnr_s5ErrorR_r0_lTRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()(a1, *(uint64_t (**)(void))(v1 + 40));
}

void Future.promise(_:)(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v40 = *(void *)(*(void *)(*(void *)v1 + 88) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v36 - v3;
  uint64_t v38 = *(void *)(*(void *)(v4 + 80) - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t v8 = *(void *)(v7 + 96);
  uint64_t v43 = v9;
  uint64_t v44 = v10;
  uint64_t v46 = v8;
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v41 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v36 - v19;
  os_unfair_lock_t v45 = *(os_unfair_lock_t *)(v1 + 16);
  os_unfair_lock_lock(v45);
  uint64_t v21 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v20, v21, v14);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  if (v22 == 1)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    unint64_t v36 = v6;
    uint64_t v37 = v23;
    uint64_t v24 = v42;
    v23(v18, v42, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v21, v18, v14);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v25 = *(void *)(v1 + 24);
    char v26 = *(unsigned char *)(v1 + 32);
    outlined copy of ConduitList<A, Never><A>(v25, v26);
    uint64_t v28 = v43;
    uint64_t v27 = v44;
    type metadata accessor for ConduitList();
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v45);
    uint64_t v29 = v41;
    v37(v41, v24, v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = v39;
      uint64_t v30 = v40;
      uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v40 + 32))(v39, v29, v27);
      MEMORY[0x1F4188790](v32);
      *(&v36 - 2) = v31;
      ConduitList.forEach(_:)((uint64_t)partial apply for closure #2 in Future.promise(_:), (uint64_t)(&v36 - 4), v25, v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v27);
    }
    else
    {
      uint64_t v33 = v38;
      uint64_t v34 = v36;
      uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v36, v29, v28);
      MEMORY[0x1F4188790](v35);
      *(&v36 - 2) = v34;
      ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)(&v36 - 4), v25, v26);
      outlined consume of ConduitList<A, Never><A>(v25, v26);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v28);
    }
  }
  else
  {
    os_unfair_lock_unlock(v45);
  }
}

uint64_t PassthroughSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v30 = (void *)*v3;
  uint64_t v6 = v30[11];
  uint64_t v31 = v30[12];
  uint64_t v32 = v6;
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v19);
  if (*((unsigned char *)v4 + 24) == 1)
  {
    uint64_t v33 = v30[10];
    v36[0] = v33;
    v36[1] = v32;
    uint64_t v20 = v34;
    v36[2] = a2;
    uint64_t v37 = v34;
    uint64_t v21 = type metadata accessor for PassthroughSubject.Conduit();
    uint64_t v22 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v35, a2);
    swift_allocObject();
    uint64_t v23 = swift_retain();
    uint64_t v24 = PassthroughSubject.Conduit.init(_:_:)(v23, (uint64_t)v18);
    swift_beginAccess();
    type metadata accessor for ConduitList();
    ConduitList.insert(_:)(v24);
    swift_endAccess();
    os_unfair_lock_unlock(v19);
    uint64_t v37 = v21;
    uint64_t v38 = &protocol witness table for ConduitBase<A, B>;
    v36[0] = v24;
    (*(void (**)(void *, uint64_t, uint64_t))(v20 + 40))(v36, a2, v20);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v22, a2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    uint64_t v26 = v35;
    uint64_t v27 = (char *)v4 + *(void *)(*v4 + 120);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v11, v27, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v11, v8);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v7);
      os_unfair_lock_unlock(v19);
      uint64_t v28 = v34;
      if (one-time initialization token for singleton != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 40))(&static Subscriptions._EmptySubscription.singleton, a2, v28);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v15, a2, v28);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, a2);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v7);
    }
  }
  return result;
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v28 = (void *)*v3;
  uint64_t v6 = v28[11];
  uint64_t v29 = v28[12];
  uint64_t v30 = v6;
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (os_unfair_lock_s *)v4[2];
  os_unfair_lock_lock(v19);
  if (*((unsigned char *)v4 + 24) == 1)
  {
    v34[0] = v28[10];
    v34[1] = v30;
    uint64_t v20 = v32;
    v34[2] = a2;
    uint64_t v35 = v32;
    uint64_t v21 = type metadata accessor for CurrentValueSubject.Conduit();
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, a2);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    uint64_t v23 = CurrentValueSubject.Conduit.init(_:_:)(v22, (uint64_t)v18);
    swift_beginAccess();
    type metadata accessor for ConduitList();
    ConduitList.insert(_:)(v23);
    swift_endAccess();
    os_unfair_lock_unlock(v19);
    uint64_t v35 = v21;
    unint64_t v36 = &protocol witness table for ConduitBase<A, B>;
    v34[0] = v23;
    (*(void (**)(void *, uint64_t, uint64_t))(v20 + 40))(v34, a2, v20);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    uint64_t v25 = v32;
    uint64_t v26 = (char *)v4 + *(void *)(*v4 + 120);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v11, v26, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v8);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v7);
      os_unfair_lock_unlock(v19);
      if (one-time initialization token for singleton != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v25 + 40))(&static Subscriptions._EmptySubscription.singleton, a2, v25);
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 56))(v15, a2, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v7);
    }
  }
  return result;
}

uint64_t type metadata accessor for ConduitList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ConduitList.insert(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)v2;
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(unsigned char *)(v2 + 8) == 1)
    {
      uint64_t v8 = *(void *)v2;
      swift_retain();
      outlined copy of ConduitList<A, Never><A>(v4, 1);
      type metadata accessor for ConduitBase();
      swift_getWitnessTable();
      type metadata accessor for Set();
      Set.insert(_:)();
      swift_release();
      uint64_t v5 = *(void *)v2;
      *(void *)uint64_t v2 = v8;
      char v6 = *(unsigned char *)(v2 + 8);
      *(unsigned char *)(v2 + 8) = 1;
      swift_bridgeObjectRetain();
      outlined consume of ConduitList<A, Never><A>(v5, v6);
      return swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)uint64_t v2 = result;
      *(unsigned char *)(v2 + 8) = 0;
      return swift_retain();
    }
  }
  else if (v4 != result)
  {
    type metadata accessor for ConduitBase();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    swift_allocObject();
    static Array._adoptStorage(_:count:)();
    uint64_t *v7 = v4;
    v7[1] = v3;
    _finalizeUninitializedArray<A>(_:)();
    type metadata accessor for Array();
    swift_retain();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t result = Set.init<A>(_:)();
    *(void *)uint64_t v2 = result;
    *(unsigned char *)(v2 + 8) = 1;
  }
  return result;
}

uint64_t CurrentValueSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - v7;
  v2[2] = 0;
  uint64_t v9 = (char *)v2 + *(void *)(v3 + 200);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  *(void *)((char *)v2 + *(void *)(*v2 + 208)) = 0;
  uint64_t v12 = *(void *)(*v2 + 216);
  swift_retain();
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)((char *)v2 + v12) = v13;
  uint64_t v14 = *(void *)(*v2 + 224);
  uint64_t v15 = (void *)swift_slowAlloc();
  *uint64_t v15 = 0;
  *(void *)((char *)v2 + v14) = v15;
  *((unsigned char *)v2 + *(void *)(*v2 + 232)) = 0;
  v2[2] = v18;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v19, v4);
  v11(v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t ConduitBase.init()()
{
  return v0;
}

uint64_t type metadata accessor for CurrentValueSubject.Conduit()
{
  return swift_getGenericMetadata();
}

void storeEnumTagSinglePayload for Publishers.Map.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t PublishedSubject.send(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = *(void *)((char *)v1 + *(void *)(*v1 + 128));
  swift_beginAccess();
  uint64_t v7 = v2[3];
  char v8 = *((unsigned char *)v2 + 32);
  swift_retain();
  outlined copy of ConduitList<A, Never><A>(v7, v8);
  os_unfair_lock_unlock(v5);
  if (v6)
  {
    swift_retain();
    ObservableObjectPublisher.send()();
    uint64_t v9 = swift_release();
  }
  MEMORY[0x1F4188790](v9);
  long long v13[2] = a1;
  uint64_t v10 = *(void *)(v4 + 80);
  ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v13, v7, v8);
  os_unfair_lock_lock(v5);
  unsigned int v11 = (char *)v2 + *(void *)(*v2 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v11, a1, v10);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  outlined consume of ConduitList<A, Never><A>(v7, v8);
  return swift_release();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  if ((v3 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ObservableObjectPublisher.Conduit();
    lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(&lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    uint64_t v5 = v23;
    uint64_t v6 = v24;
    unint64_t v7 = v25;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v4 = v3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v3 + 56);
  }
  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v14 = v6;
      goto LABEL_27;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v17 >= v11) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    uint64_t v14 = v6 + 1;
    if (!v18)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v4 + 8 * v14);
      if (!v18)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_30;
        }
        unint64_t v18 = *(void *)(v4 + 8 * v14);
        if (!v18)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_30;
          }
          unint64_t v18 = *(void *)(v4 + 8 * v14);
          if (!v18)
          {
            uint64_t v19 = v6 + 5;
            while (v11 != v19)
            {
              unint64_t v18 = *(void *)(v4 + 8 * v19++);
              if (v18)
              {
                uint64_t v14 = v19 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_26:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_27:
    uint64_t v15 = *(void *)(*(void *)(v3 + 48) + 8 * v13);
    uint64_t v16 = swift_retain();
    if (!v15) {
      goto LABEL_30;
    }
    while (1)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 80))(v16);
      swift_release();
      uint64_t v6 = v14;
      unint64_t v7 = v12;
      if ((v3 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ObservableObjectPublisher.Conduit();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v15 = v20;
        uint64_t v16 = swift_unknownObjectRelease();
        uint64_t v14 = v6;
        uint64_t v12 = v7;
        if (v20) {
          continue;
        }
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t outlined consume of Set<ObservableObjectPublisher.Conduit>.Iterator._Variant()
{
  return swift_release();
}

void CurrentValueSubject.send(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (*((unsigned char *)v1 + 24) == 1)
  {
    uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 128);
    swift_beginAccess();
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 136);
    LOBYTE(v5) = *(unsigned char *)(v5 + 8);
    swift_beginAccess();
    outlined copy of ConduitList<A, Never><A>(v6, v5);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v7, a1, *(void *)(v3 + 80));
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    MEMORY[0x1F4188790](v8);
    v9[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v9, v6, v5);
    outlined consume of ConduitList<A, Never><A>(v6, v5);
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
}

void PassthroughSubject.send(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t v4 = v1 + *(void *)(*(void *)v1 + 128);
    swift_beginAccess();
    uint64_t v5 = *(void *)v4;
    LOBYTE(v4) = *(unsigned char *)(v4 + 8);
    outlined copy of ConduitList<A, Never><A>(v5, v4);
    os_unfair_lock_unlock(v3);
    MEMORY[0x1F4188790](v6);
    _OWORD v7[2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PublishedSubject.send(_:), (uint64_t)v7, v5, v4);
    outlined consume of ConduitList<A, Never><A>(v5, v4);
  }
  else
  {
    os_unfair_lock_unlock(v3);
  }
}

uint64_t outlined consume of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!a2) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of ConduitList<A, Never><A>(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a2) {
    return swift_retain();
  }
  return result;
}

uint64_t ConduitList.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void (*)(uint64_t))result;
  if (a4)
  {
    if (a4 == 1)
    {
      MEMORY[0x1F4188790](result);
      type metadata accessor for ConduitBase();
      swift_getWitnessTable();
      type metadata accessor for Set();
      swift_getWitnessTable();
      return Sequence.forEach(_:)();
    }
  }
  else
  {
    uint64_t v6 = swift_retain();
    v5(v6);
    return outlined consume of ConduitList<A, Never><A>(a3, 0);
  }
  return result;
}

uint64_t type metadata accessor for ConduitBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed ConduitBase<A, B>) -> (@error @owned Error)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

uint64_t partial apply for closure #1 in PublishedSubject.send(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))(*(void *)(v1 + 16));
}

void CurrentValueSubject.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 176);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v28 - v10;
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v29 = (char *)&v28 - v12;
  unint64_t v13 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v4 + 216));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v1;
  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(*v1 + 208);
  uint64_t v17 = *(uint64_t *)((char *)v1 + v16);
  if (v17 != 0x8000000000000000)
  {
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v17)
    {
LABEL_6:
      *((unsigned char *)v2 + *(void *)(v14 + 232)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }
  uint64_t v18 = a1;
  uint64_t v19 = (uint64_t)v2 + *(void *)(v15 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v19, v7);
  uint64_t v20 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v14 = *v2;
    goto LABEL_6;
  }
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  uint64_t v22 = v29;
  v21(v29, v11, v6);
  uint64_t v23 = *(uint64_t *)((char *)v2 + v16);
  if (v23 != 0x8000000000000000)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      if (v23)
      {
        *(uint64_t *)((char *)v2 + v16) = v23 - 1;
        goto LABEL_11;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_11:
  *((unsigned char *)v2 + *(void *)(*v2 + 232)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 + 184) + 48))(v18, v6);
  os_unfair_recursive_lock_unlock();
  if (v24 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v13);
    unint64_t v25 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v16) == 0x8000000000000000) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v24 < 0) {
    goto LABEL_29;
  }
  if (v24)
  {
    os_unfair_lock_lock(v13);
    uint64_t v26 = *(uint64_t *)((char *)v2 + v16);
    if (v26 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }
    if (((v26 | v24) & 0x8000000000000000) == 0)
    {
      BOOL v27 = __OFADD__(v26, v24);
      unint64_t v25 = v26 + v24;
      if (v27)
      {
        unint64_t v25 = 0x8000000000000000;
LABEL_22:
        *(uint64_t *)((char *)v2 + v16) = v25;
        goto LABEL_23;
      }
      if ((v25 & 0x8000000000000000) == 0) {
        goto LABEL_22;
      }
LABEL_31:
      __break(1u);
      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v6);
}

uint64_t getEnumTagSinglePayload for Publishers.Map.Inner(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AbstractCombineLatest.Side(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Drop<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Drop.Inner.receive(_:)(a1);
}

void PassthroughSubject.Conduit.offer(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 176);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unsigned int v11 = (char *)&v27 - v10;
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v28 = (char *)&v27 - v12;
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v4 + 216));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v1;
  uint64_t v15 = *(void *)(*v1 + 208);
  uint64_t v16 = *(uint64_t *)((char *)v1 + v15);
  if (v16 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v16)
  {
LABEL_4:
    uint64_t v17 = a1;
    uint64_t v18 = (uint64_t)v2 + *(void *)(v14 + 200);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v18, v7);
    uint64_t v19 = v29;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      os_unfair_lock_unlock(v13);
      return;
    }
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v21 = v28;
    v20(v28, v11, v6);
    uint64_t v22 = *(uint64_t *)((char *)v2 + v15);
    if (v22 == 0x8000000000000000)
    {
LABEL_10:
      os_unfair_lock_unlock(v13);
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 + 184) + 48))(v17, v6);
      os_unfair_recursive_lock_unlock();
      if (v23 == 0x8000000000000000)
      {
        os_unfair_lock_lock(v13);
        unint64_t v24 = 0x8000000000000000;
        if (*(uint64_t *)((char *)v2 + v15) == 0x8000000000000000) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      if ((v23 & 0x8000000000000000) == 0)
      {
        if (!v23)
        {
LABEL_26:
          (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v6);
          return;
        }
        os_unfair_lock_lock(v13);
        uint64_t v25 = *(uint64_t *)((char *)v2 + v15);
        if (v25 == 0x8000000000000000)
        {
LABEL_25:
          os_unfair_lock_unlock(v13);
          goto LABEL_26;
        }
        if (((v25 | v23) & 0x8000000000000000) == 0)
        {
          BOOL v26 = __OFADD__(v25, v23);
          unint64_t v24 = v25 + v23;
          if (v26)
          {
            unint64_t v24 = 0x8000000000000000;
LABEL_24:
            *(uint64_t *)((char *)v2 + v15) = v24;
            goto LABEL_25;
          }
          if ((v24 & 0x8000000000000000) == 0) {
            goto LABEL_24;
          }
LABEL_33:
          __break(1u);
          return;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22)
      {
        *(uint64_t *)((char *)v2 + v15) = v22 - 1;
        goto LABEL_10;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  os_unfair_lock_unlock(v13);
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap.Inner(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

void PublishedSubject.Conduit.offer(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 168);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unsigned int v11 = (char *)&v28 - v10;
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v29 = (char *)&v28 - v12;
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v4 + 208));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v1;
  uint64_t v15 = *v1;
  uint64_t v16 = *(void *)(*v1 + 200);
  uint64_t v17 = *(uint64_t *)((char *)v1 + v16);
  if (v17 != 0x8000000000000000)
  {
    if (v17 < 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (!v17)
    {
LABEL_6:
      *((unsigned char *)v2 + *(void *)(v14 + 224)) = 0;
      os_unfair_lock_unlock(v13);
      return;
    }
  }
  uint64_t v18 = a1;
  uint64_t v19 = (uint64_t)v2 + *(void *)(v15 + 192);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v19, v7);
  uint64_t v20 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t v14 = *v2;
    goto LABEL_6;
  }
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  uint64_t v22 = v29;
  v21(v29, v11, v6);
  uint64_t v23 = *(uint64_t *)((char *)v2 + v16);
  if (v23 != 0x8000000000000000)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      if (v23)
      {
        *(uint64_t *)((char *)v2 + v16) = v23 - 1;
        goto LABEL_11;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_11:
  *((unsigned char *)v2 + *(void *)(*v2 + 224)) = 1;
  os_unfair_lock_unlock(v13);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 + 176) + 48))(v18, v6);
  os_unfair_recursive_lock_unlock();
  if (v24 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v13);
    unint64_t v25 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v16) == 0x8000000000000000) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v24 < 0) {
    goto LABEL_29;
  }
  if (v24)
  {
    os_unfair_lock_lock(v13);
    uint64_t v26 = *(uint64_t *)((char *)v2 + v16);
    if (v26 == 0x8000000000000000)
    {
LABEL_23:
      os_unfair_lock_unlock(v13);
      goto LABEL_24;
    }
    if (((v26 | v24) & 0x8000000000000000) == 0)
    {
      BOOL v27 = __OFADD__(v26, v24);
      unint64_t v25 = v26 + v24;
      if (v27)
      {
        unint64_t v25 = 0x8000000000000000;
LABEL_22:
        *(uint64_t *)((char *)v2 + v16) = v25;
        goto LABEL_23;
      }
      if ((v25 & 0x8000000000000000) == 0) {
        goto LABEL_22;
      }
LABEL_31:
      __break(1u);
      return;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_24:
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v6);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Multicast.Inner.receive(_:)(a1);
}

uint64_t Publishers.Multicast.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(v4);
    return 0;
  }
  outlined init with take of Subscription(v10, (uint64_t)v12);
  os_unfair_lock_unlock(v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48))(a1, *(void *)(v3 + 96));
  uint64_t v7 = result;
  if (result == 0x8000000000000000) {
    goto LABEL_6;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    if (!result)
    {
LABEL_7:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return 0;
    }
LABEL_6:
    uint64_t v8 = v13;
    uint64_t v9 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v7, v8, v9);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t Publishers.Autoconnect.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 48))(a1, *(void *)(a2 + 24));
}

uint64_t Publishers.CompactMap.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v2 + *(int *)(a2 + 60)))(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
    uint64_t v14 = (*(uint64_t (**)(char *, void))(*(void *)(a2 + 48) + 48))(v13, *(void *)(a2 + 32));
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  }
  return v14;
}

void ObservableObjectPublisher.Inner.send()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 152));
  os_unfair_lock_lock(v2);
  if (*((unsigned char *)v0 + *(void *)(*v0 + 160)) == 1)
  {
    uint64_t v5 = v1 + 112;
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t v4 = *(void *)(v5 + 8);
    os_unfair_lock_unlock(v2);
    os_unfair_recursive_lock_lock_with_options();
    Subscriber<>.receive()(v3, v4);
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    os_unfair_lock_unlock(v2);
  }
}

uint64_t static Subscribers.Demand.none.getter()
{
  return 0;
}

uint64_t Subscriber<>.receive()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 48))(a1, a1, a2);
}

uint64_t PassthroughSubject.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - v7;
  v2[2] = 0;
  uint64_t v9 = (char *)v2 + *(void *)(v3 + 200);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  *(void *)((char *)v2 + *(void *)(*v2 + 208)) = 0;
  uint64_t v12 = *(void *)(*v2 + 216);
  swift_retain();
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)((char *)v2 + v12) = v13;
  uint64_t v14 = *(void *)(*v2 + 224);
  uint64_t v15 = (void *)swift_slowAlloc();
  *uint64_t v15 = 0;
  *(void *)((char *)v2 + v14) = v15;
  v2[2] = v18;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v19, v4);
  v11(v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  swift_release();
  return ConduitBase.init()();
}

uint64_t type metadata accessor for PassthroughSubject.Conduit()
{
  return swift_getGenericMetadata();
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Debounce<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Debounce.Inner.receive(_:)(uint64_t a1)
{
  void (*v38)(long long *__return_ptr, char *, char *, char *, char *, void (*)(), uint64_t, uint64_t, uint64_t);
  os_unfair_lock_s *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  void v53[2];
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t AssociatedTypeWitness;
  uint64_t v63;
  os_unfair_lock_t v64;
  uint64_t AssociatedConformanceWitness;
  char *v66;
  void v67[6];
  unsigned char v68[40];
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;

  uint64_t v2 = v1;
  uint64_t v56 = a1;
  uint64_t v59 = (void *)*v1;
  uint64_t v3 = v59;
  uint64_t v4 = v59[14];
  uint64_t v5 = v59[11];
  swift_getAssociatedTypeWitness();
  uint64_t v63 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v60 = (char *)v53 - v6;
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  long long v66 = (char *)v53 - v12;
  uint64_t v13 = v3[12];
  uint64_t v58 = v3[15];
  uint64_t v57 = v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v53 - v17;
  uint64_t v64 = (os_unfair_lock_t)v2[2];
  os_unfair_lock_lock(v64);
  uint64_t v19 = (uint64_t)v2 + *(void *)(*v2 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v19, (uint64_t)&v69);
  LODWORD(v19) = v72;
  outlined destroy of SubscriptionStatus((uint64_t)&v69);
  if (v19)
  {
    os_unfair_lock_unlock(v64);
    return;
  }
  uint64_t v20 = *v2;
  uint64_t v55 = v7;
  uint64_t v21 = *(void *)(v20 + 200);
  ++*(void *)((char *)v2 + v21);
  uint64_t v22 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v18, v56, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v14);
  uint64_t v23 = (char *)v2 + *(void *)(*v2 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v23, v18, v15);
  swift_endAccess();
  uint64_t v56 = *(void *)((char *)v2 + v21);
  uint64_t v24 = *(void (**)(void))(v4 + 40);
  v53[1] = (char *)v2 + *(void *)(*v2 + 160);
  uint64_t v25 = v63;
  v24();
  uint64_t v54 = (char *)v2 + *(void *)(*v2 + 152);
  uint64_t v26 = v55;
  dispatch thunk of Strideable.advanced(by:)();
  BOOL v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  AssociatedConformanceWitness = v8 + 8;
  v53[0] = v27;
  v27(v11, v26);
  uint64_t v28 = (void *)((char *)v2 + *(void *)(*v2 + 184));
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_beginAccess();
  uint64_t v30 = v59[10];
  uint64_t v31 = v59[13];
  swift_bridgeObjectRetain();
  *(void *)&uint64_t v69 = v30;
  *((void *)&v69 + 1) = v25;
  uint64_t v32 = v25;
  *(void *)&long long v70 = v57;
  *((void *)&v70 + 1) = v31;
  uint64_t v71 = v4;
  long long v72 = v58;
  uint64_t v33 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  uint64_t v59 = (void *)type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  uint64_t v71 = 0;
  uint64_t v69 = 0u;
  long long v70 = 0u;
  uint64_t v34 = v56;
  v67[0] = v56;
  Dictionary.subscript.setter();
  swift_endAccess();
  os_unfair_lock_unlock(v64);
  uint64_t v35 = v60;
  (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v32, v4);
  unint64_t v36 = (char *)v2 + *(void *)(*v2 + 168);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v2;
  *(void *)(v37 + 24) = v34;
  uint64_t v38 = *(void (**)(long long *__return_ptr, char *, char *, char *, char *, void (*)(), uint64_t, uint64_t, uint64_t))(v4 + 72);
  swift_retain();
  v38(&v69, v66, v54, v35, v36, partial apply for closure #1 in Publishers.Debounce.Inner.receive(_:), v37, v63, v4);
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v35, AssociatedTypeWitness);
  uint64_t v39 = v64;
  os_unfair_lock_lock(v64);
  outlined init with copy of Subscription((uint64_t)&v69, (uint64_t)v68);
  v67[5] = v56;
  swift_beginAccess();
  Dictionary.subscript.setter();
  swift_endAccess();
  os_unfair_lock_unlock(v39);
  uint64_t v40 = 0;
  uint64_t v41 = v29 + 64;
  uint64_t v42 = 1 << *(unsigned char *)(v29 + 32);
  uint64_t v43 = -1;
  if (v42 < 64) {
    uint64_t v43 = ~(-1 << v42);
  }
  uint64_t v44 = v43 & *(void *)(v29 + 64);
  os_unfair_lock_t v45 = (unint64_t)(v42 + 63) >> 6;
  while (1)
  {
    if (v44)
    {
      uint64_t v46 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      uint64_t v47 = v46 | (v40 << 6);
      goto LABEL_7;
    }
    uint64_t v49 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v50 = v66;
    if (v49 >= v45) {
      goto LABEL_23;
    }
    uint64_t v51 = *(void *)(v41 + 8 * v49);
    ++v40;
    if (!v51)
    {
      uint64_t v40 = v49 + 1;
      if (v49 + 1 >= v45) {
        goto LABEL_23;
      }
      uint64_t v51 = *(void *)(v41 + 8 * v40);
      if (!v51)
      {
        uint64_t v40 = v49 + 2;
        if (v49 + 2 >= v45) {
          goto LABEL_23;
        }
        uint64_t v51 = *(void *)(v41 + 8 * v40);
        if (!v51) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v44 = (v51 - 1) & v51;
    uint64_t v47 = __clz(__rbit64(v51)) + (v40 << 6);
LABEL_7:
    uint64_t v48 = *(void *)(v33 - 8);
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v48 + 16))(v68, *(void *)(v29 + 56) + 40 * v47, v33);
    (*(void (**)(void *, unsigned char *, uint64_t))(v48 + 32))(v67, v68, v33);
    Publishers.Debounce.Inner.CancellerState.cancel()(v33);
    (*(void (**)(void *, uint64_t))(v48 + 8))(v67, v33);
  }
  uint64_t v52 = v49 + 3;
  if (v52 >= v45)
  {
LABEL_23:
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    ((void (*)(char *, uint64_t))v53[0])(v50, v55);
    return;
  }
  uint64_t v51 = *(void *)(v41 + 8 * v52);
  if (v51)
  {
    uint64_t v40 = v52;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v40 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      break;
    }
    if (v40 >= v45) {
      goto LABEL_23;
    }
    uint64_t v51 = *(void *)(v41 + 8 * v40);
    ++v52;
    if (v51) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t type metadata accessor for Publishers.Debounce.Inner.CancellerState()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath.Inner(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

Swift::Void __swiftcall ConduitList.removeAll()()
{
  outlined consume of ConduitList<A, Never><A>(*(void *)v0, *(unsigned char *)(v0 + 8));
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = 2;
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Drop<A>.Inner<A1>(void *a1)
{
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.CompactMap.compactMap<A>(_:));
}

uint64_t partial apply for closure #2 in Future.promise(_:)(uint64_t a1)
{
  return closure #2 in Future.promise(_:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #2 in Future.promise(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 88);
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, a2, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v4);
  (*(void (**)(char *))(*(void *)a1 + 112))(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Future.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = type metadata accessor for Subscribers.Completion();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, v17, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v2);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v7, v10, v2);
  swift_storeEnumTagMultiPayload();
  Future.Conduit.fulfill(_:)((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnyCancellable(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for Deferred()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ObservableObject<>.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for _EachFieldOptions();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = 0;
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_EachFieldOptions>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18C0BABB0;
  static _EachFieldOptions.classType.getter();
  static _EachFieldOptions.ignoreUnknown.getter();
  uint64_t v17 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [_EachFieldOptions]);
  lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = v3;
  uint64_t v16 = &v18;
  _forEachField(of:options:body:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = v18;
  if (!v18) {
    return static ObservableObjectTable.subscript.getter(v3);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [_EachFieldOptions] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [_EachFieldOptions]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_EachFieldOptions] and conformance [A]);
  }
  return result;
}

uint64_t static ObservableObjectTable.subscript.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_unknownObjectWeakInit();
  uint64_t v6 = swift_unknownObjectWeakAssign();
  uint64_t v19 = a1;
  outlined init with take of ObservableObjectTable.Storage(v6, (uint64_t)v20);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
  specialized static ObservableObjectTable.collect()();
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static ObservableObjectTable.contents;
  if (*((void *)static ObservableObjectTable.contents + 2)
    && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v7[7] + 8 * v8);
    swift_endAccess();
    uint64_t v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
    swift_retain();
  }
  else
  {
    swift_endAccess();
    type metadata accessor for ObservableObjectPublisher();
    uint64_t v10 = swift_allocObject();
    uint64_t v12 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
    uint64_t v13 = (_DWORD *)swift_slowAlloc();
    *uint64_t v13 = 0;
    *(void *)(v10 + v12) = v13;
    *(void *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E4FBC870];
    *(void *)(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
    ObservationRegistrar.init()();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v3 + 32))(v10 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v5, v2);
    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_unknownObjectWeakAssign();
    uint64_t v19 = a1;
    outlined init with take of ObservableObjectTable.Storage(v14, (uint64_t)v18);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = static ObservableObjectTable.contents;
    static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    static ObservableObjectTable.contents = v17;
    swift_bridgeObjectRelease();
    outlined destroy of ObservableObjectTable.Storage((uint64_t)v18);
    swift_endAccess();
    uint64_t v11 = (os_unfair_lock_s *)static ObservableObjectTable.lock;
  }
  os_unfair_lock_unlock(v11);
  outlined destroy of ObservableObjectTable.Storage((uint64_t)v20);
  return v10;
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  uint64_t result = type metadata singleton initialization cache for ObservableObjectPublisher;
  if (!type metadata singleton initialization cache for ObservableObjectPublisher) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized static ObservableObjectTable.collect()()
{
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized Sequence.compactMap<A>(_:)(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      outlined init with copy of ObservableObjectTable.Storage(v3, (uint64_t)v11);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
      char v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v8 = static ObservableObjectTable.contents;
        uint64_t v10 = static ObservableObjectTable.contents;
        static ObservableObjectTable.contents = (_UNKNOWN *)0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v8 = v10;
        }
        outlined destroy of ObservableObjectTable.Storage(v8[6] + 16 * v4);
        specialized _NativeDictionary._delete(at:)(v4, (uint64_t)v8);
        static ObservableObjectTable.contents = v8;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v11);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of ObservableObjectTable.Storage(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of ObservableObjectTable.Storage(a2, a4[6] + 16 * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t type metadata accessor for Publishers.SwitchToLatest()
{
  return swift_getGenericMetadata();
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for Publishers.PrefetchStrategy()
{
  return &type metadata for Publishers.PrefetchStrategy;
}

uint64_t type metadata completion function for PublishedSubject()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.Catch.Inner.__deallocating_deinit()
{
  return Publishers.Catch.Inner.__deallocating_deinit((uint64_t (*)(void, _OWORD *))type metadata accessor for Publishers.Catch.Inner.State);
}

uint64_t type metadata completion function for CurrentValueSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.catch<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, void *)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v18, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a8, v18, a3);
  v23[0] = a3;
  v23[1] = a4;
  long long v23[2] = a5;
  v23[3] = a6;
  unint64_t v19 = (void *)(a8 + *(int *)(v22(0, v23) + 52));
  void *v19 = a1;
  v19[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Catch()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for CombineLatest2Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Result.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for Publishers.Multicast<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t CurrentValueSubject.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  CurrentValueSubject.init(_:)(a1);
  return v2;
}

uint64_t type metadata completion function for Publishers.RemoveDuplicates.Inner()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Optional.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.replaceError(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.replaceError(with:)(a1, a2, a3, (uint64_t (*)(char *, char *, uint64_t, uint64_t))Publishers.ReplaceError.init(upstream:output:));
}

uint64_t type metadata completion function for Publishers.ReceiveOn.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

uint64_t partial apply for closure #1 in Publishers._Merged.request(_:)(uint64_t a1)
{
  return closure #1 in Publishers._Merged.request(_:)(a1, v1);
}

uint64_t closure #1 in Publishers._Merged.request(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  BOOL v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v7);
  BOOL v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
  MEMORY[0x1F4188790](v14);
  *(&v15 - 6) = v4;
  *(_OWORD *)(&v15 - 5) = *(_OWORD *)(v3 + 88);
  *(&v15 - 3) = *(void *)(v3 + 104);
  *(&v15 - 2) = (uint64_t)v12;
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in Publishers._Merged.request(_:));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v4);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.First<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.First.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.BufferingStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.HandleEvents.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.HandleEvents.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.HandleEvents.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 8), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 16));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((void *)v0 + 9));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((void *)v0 + 11));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((void *)v0 + 13));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((void *)v0 + 15));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*((void *)v0 + 17));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 88) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 168)]);
  return v0;
}

uint64_t Publishers.HandleEvents.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (void (*)(uint64_t))v1[13];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    os_unfair_lock_lock(v4);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  uint64_t v6 = v1[9];
  v1[9] = 0;
  v1[10] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v6);
  uint64_t v7 = v1[11];
  v1[11] = 0;
  v1[12] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
  uint64_t v8 = v1[13];
  v1[13] = 0;
  v1[14] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v8);
  uint64_t v9 = v1[15];
  v1[15] = 0;
  v1[16] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v9);
  uint64_t v10 = v1[17];
  v1[17] = 0;
  v1[18] = 0;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v10);
  uint64_t v12 = 1;
  long long v13 = 0u;
  long long v14 = 0u;
  char v15 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 56))(a1, *(void *)(v3 + 88));
}

uint64_t *specialized Publishers.HandleEvents.Inner.init(downstream:events:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[6] = 0;
  *((unsigned char *)v2 + 56) = 2;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  v2[8] = (uint64_t)v6;
  *(_OWORD *)(v2 + 9) = 0u;
  *(_OWORD *)(v2 + 11) = 0u;
  *(_OWORD *)(v2 + 13) = 0u;
  *(_OWORD *)(v2 + 15) = 0u;
  *(_OWORD *)(v2 + 17) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 168), a1);
  uint64_t v7 = (int *)type metadata accessor for Publishers.HandleEvents();
  uint64_t v8 = (uint64_t *)(a2 + v7[9]);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = v2[9];
  v2[9] = *v8;
  v2[10] = v10;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v9);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v11);
  uint64_t v12 = (uint64_t *)(a2 + v7[10]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = v2[11];
  v2[11] = *v12;
  v2[12] = v14;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v13);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v15);
  uint64_t v16 = (uint64_t *)(a2 + v7[11]);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = v2[13];
  v2[13] = *v16;
  v2[14] = v18;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v17);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v19);
  char v20 = (uint64_t *)(a2 + v7[12]);
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  uint64_t v23 = v2[15];
  v2[15] = *v20;
  v2[16] = v22;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v21);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v23);
  uint64_t v24 = (uint64_t *)(a2 + v7[13]);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  uint64_t v27 = v2[17];
  v2[17] = *v24;
  v2[18] = v26;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v25);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v27);
  return v2;
}

uint64_t _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v14 = *(void *)(a12 - 8);
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, a12);
  uint64_t v18 = (int *)type metadata accessor for Publishers.HandleEvents();
  uint64_t v19 = (uint64_t *)(a9 + v18[9]);
  char v20 = (uint64_t *)(a9 + v18[10]);
  uint64_t v21 = (uint64_t *)(a9 + v18[11]);
  uint64_t v22 = (uint64_t *)(a9 + v18[12]);
  uint64_t v23 = (uint64_t *)(a9 + v18[13]);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a9, v16, a12);
  uint64_t v24 = a1;
  uint64_t v25 = v38;
  uint64_t *v19 = a1;
  v19[1] = v25;
  uint64_t v27 = v39;
  uint64_t v26 = v40;
  uint64_t *v20 = v39;
  v20[1] = v26;
  uint64_t v29 = v41;
  uint64_t v28 = v42;
  *uint64_t v21 = v41;
  v21[1] = v28;
  uint64_t v31 = v43;
  uint64_t v30 = v44;
  *uint64_t v22 = v43;
  v22[1] = v30;
  uint64_t v33 = v36;
  uint64_t v32 = v37;
  *uint64_t v23 = v36;
  v23[1] = v32;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v24);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v27);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v29);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v31);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v33);
}

uint64_t outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for Publishers.HandleEvents()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.HandleEvents.Inner.receive(completion:)(a1);
}

uint64_t Publishers.MapKeyPath.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 56))(a1, *(void *)(a2 + 32));
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.ReceiveOn.Inner.receive(completion:)(uint64_t a1)
{
  char v20 = (void *)*v1;
  uint64_t v3 = v20[13];
  uint64_t v4 = v20[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v21);
  if (v22)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v21);
    os_unfair_lock_unlock(v9);
  }
  else
  {
    outlined init with take of Subscription(v21, (uint64_t)v23);
    outlined init with copy of Subscription((uint64_t)v23, (uint64_t)v21);
    char v22 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v21, v10);
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    uint64_t v11 = *v1;
    uint64_t v19 = (char *)v1 + *(void *)(*v1 + 144);
    uint64_t v12 = (char *)v1 + *(void *)(v11 + 152);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    unint64_t v13 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v4;
    uint64_t v15 = v20;
    uint64_t v16 = v20[11];
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v15[12];
    *((void *)v14 + 5) = v3;
    uint64_t v17 = v15[14];
    *((void *)v14 + 6) = v17;
    *((void *)v14 + 7) = v15[15];
    *((void *)v14 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], v8, v5);
    uint64_t v18 = *(void (**)(char *, uint64_t (*)(), char *, uint64_t, uint64_t))(v17 + 56);
    swift_retain();
    v18(v12, partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:), v14, v16, v17);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
}

void AbstractCombineLatest.Side.receive(completion:)(uint64_t a1, unint64_t a2)
{
}

void AbstractCombineLatest.receive(completion:index:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v66 = a2;
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t v6 = *(void *)(*v2 + 96);
  uint64_t v59 = *(void *)(*v2 + 104);
  uint64_t v58 = v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = (uint64_t **)type metadata accessor for Subscribers.Completion();
  *(void *)&long long v64 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v64);
  uint64_t v60 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v54[-v11];
  unint64_t v13 = *(v7 - 1);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = &v54[-v14];
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t **))v13[2];
  v16(&v54[-v14], a1, v7);
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  uint64_t v62 = v15;
  uint64_t v18 = (uint64_t *)v17(v15, 1, v5);
  unint64_t v19 = *(void *)((char *)v3 + *(void *)(*v3 + 184));
  os_unfair_lock_lock((os_unfair_lock_t)v19);
  uint64_t v20 = *v3;
  unint64_t v21 = *(void *)(*v3 + 152);
  char v22 = *((unsigned char *)v3 + v21);
  if (v18 != 1)
  {
    uint64_t v57 = v7;
    uint64_t v61 = v13;
    if (v22)
    {
      uint64_t v31 = (void **)((char *)v3 + *(void *)(v20 + 128));
      swift_beginAccess();
      uint64_t v3 = *v31;
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock((os_unfair_lock_t)v19);
      unint64_t v19 = 0;
      unint64_t v21 = v3[2];
      *(void *)&long long v64 = v3 + 4;
      uint64_t v7 = (uint64_t **)v68;
      uint64_t v23 = (uint64_t *)&v71 + 1;
      uint64_t v12 = (char *)&v74 + 8;
      long long v65 = xmmword_18C0BA640;
      unint64_t v13 = &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
      uint64_t v18 = &demangling cache variable for type metadata for Subscription?;
LABEL_13:
      uint64_t v32 = (void (*)(char *, uint64_t, uint64_t **))v66;
      if (v19 == v21)
      {
LABEL_14:
        long long v71 = 0u;
        long long v72 = 0u;
        unint64_t v19 = v21;
        long long v73 = v65;
        goto LABEL_17;
      }
      while (v19 < v3[2])
      {
        outlined init with copy of Any?(v64 + 40 * v19, (uint64_t)v68, &demangling cache variable for type metadata for Subscription?);
        *(void *)&long long v71 = v19;
        outlined init with take of Subscription?((uint64_t)v68, (uint64_t)&v71 + 8, &demangling cache variable for type metadata for Subscription?);
        ++v19;
LABEL_17:
        outlined init with take of Subscription?((uint64_t)&v71, (uint64_t)&v74, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
        if (v76 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }
        uint64_t v16 = (void (*)(char *, uint64_t, uint64_t **))v74;
        outlined init with take of Subscription?((uint64_t)&v74 + 8, (uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
        if (v16 != v32)
        {
          outlined init with copy of Any?((uint64_t)&v71, (uint64_t)&v67, &demangling cache variable for type metadata for Subscription?);
          uint64_t v33 = v69;
          if (v69)
          {
            uint64_t v34 = v70;
            uint64_t v35 = (void (*)(char *, uint64_t, uint64_t **))__swift_project_boxed_opaque_existential_1(&v67, v69);
            uint64_t v36 = *(void (**)(uint64_t))(*(void *)(v34 + 8) + 8);
            uint64_t v16 = v35;
            v36(v33);
            outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          }
          else
          {
            outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
            outlined destroy of CustomStringConvertible?((uint64_t)&v67, &demangling cache variable for type metadata for Subscription?);
          }
          goto LABEL_13;
        }
        outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
        if (v19 == v21) {
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v56 = a1;
      *((unsigned char *)v3 + v21) = 1;
      uint64_t v37 = (void *)((char *)v3 + *(void *)(*v3 + 128));
      swift_beginAccess();
      uint64_t v38 = *v37;
      uint64_t v76 = 0;
      long long v74 = 0u;
      long long v75 = 0u;
      uint64_t v39 = *(void *)((char *)v3 + *(void *)(*v3 + 168));
      *(void *)&long long v65 = v38;
      swift_bridgeObjectRetain();
      *uint64_t v37 = specialized Array.init(repeating:count:)((uint64_t)&v74, v39);
      swift_bridgeObjectRelease();
      long long v74 = 0u;
      long long v75 = 0u;
      uint64_t v40 = specialized Array.init(repeating:count:)((uint64_t)&v74, v39);
      uint64_t v41 = (void *)((char *)v3 + *(void *)(*v3 + 120));
      swift_beginAccess();
      *uint64_t v41 = v40;
      swift_bridgeObjectRelease();
      int v55 = *((unsigned __int8 *)v3 + *(void *)(*v3 + 200));
      if ((v55 & 1) == 0)
      {
        v16(v12, v56, v7);
        ((void (*)(char *, void, uint64_t, uint64_t **))v13[7])(v12, 0, 1, v7);
        uint64_t v42 = v63;
        uint64_t v43 = v60;
        uint64_t v16 = (void (*)(char *, uint64_t, uint64_t **))v64;
        (*(void (**)(unsigned char *, char *, void))(v63 + 32))(v60, v12, v64);
        uint64_t v44 = (char *)v3 + *(void *)(*v3 + 208);
        swift_beginAccess();
        (*(void (**)(char *, unsigned char *, void))(v42 + 40))(v44, v43, v16);
        swift_endAccess();
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v19);
      unint64_t v21 = 0;
      uint64_t v7 = *(uint64_t ***)(v65 + 16);
      uint64_t v63 = v65 + 32;
      uint64_t v12 = v68;
      unint64_t v13 = (uint64_t *)&v71 + 1;
      unint64_t v19 = (unint64_t)&v74 + 8;
      long long v64 = xmmword_18C0BA640;
      uint64_t v23 = &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
      uint64_t v18 = &demangling cache variable for type metadata for Subscription?;
LABEL_27:
      os_unfair_lock_t v45 = (void (*)(char *, uint64_t, uint64_t **))v66;
      if ((uint64_t **)v21 == v7)
      {
LABEL_28:
        long long v71 = 0u;
        long long v72 = 0u;
        unint64_t v21 = (unint64_t)v7;
        long long v73 = v64;
        goto LABEL_31;
      }
      while (v21 < *(void *)(v65 + 16))
      {
        outlined init with copy of Any?(v63 + 40 * v21, (uint64_t)v68, &demangling cache variable for type metadata for Subscription?);
        *(void *)&long long v71 = v21;
        outlined init with take of Subscription?((uint64_t)v68, (uint64_t)&v71 + 8, &demangling cache variable for type metadata for Subscription?);
        ++v21;
LABEL_31:
        outlined init with take of Subscription?((uint64_t)&v71, (uint64_t)&v74, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
        if (v76 == 1)
        {
          swift_bridgeObjectRelease();
          if (v55)
          {
            os_unfair_recursive_lock_lock_with_options();
            (*(void (**)(uint64_t, uint64_t))(v59 + 56))(v56, v58);
            os_unfair_recursive_lock_unlock();
          }
LABEL_40:
          ((void (*)(unsigned char *, uint64_t **))v61[1])(v62, v57);
          return;
        }
        uint64_t v16 = (void (*)(char *, uint64_t, uint64_t **))v74;
        outlined init with take of Subscription?((uint64_t)&v74 + 8, (uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
        if (v16 != v45)
        {
          outlined init with copy of Any?((uint64_t)&v71, (uint64_t)&v67, &demangling cache variable for type metadata for Subscription?);
          uint64_t v46 = v69;
          if (v69)
          {
            uint64_t v47 = v70;
            uint64_t v48 = (void (*)(char *, uint64_t, uint64_t **))__swift_project_boxed_opaque_existential_1(&v67, v69);
            uint64_t v49 = *(void (**)(uint64_t))(*(void *)(v47 + 8) + 8);
            uint64_t v16 = v48;
            v49(v46);
            outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          }
          else
          {
            outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
            outlined destroy of CustomStringConvertible?((uint64_t)&v67, &demangling cache variable for type metadata for Subscription?);
          }
          goto LABEL_27;
        }
        outlined destroy of CustomStringConvertible?((uint64_t)&v71, &demangling cache variable for type metadata for Subscription?);
        if ((uint64_t **)v21 == v7) {
          goto LABEL_28;
        }
      }
    }
    __break(1u);
    goto LABEL_46;
  }
  if ((*((unsigned char *)v3 + v21) & 1) == 0)
  {
    uint64_t v56 = a1;
    uint64_t v23 = *(uint64_t **)(v20 + 176);
    uint64_t v24 = *(uint64_t *)((char *)v23 + (void)v3);
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      uint64_t v61 = v13;
      unint64_t v13 = (uint64_t *)v7;
      *(uint64_t *)((char *)v23 + (void)v3) = v26;
      uint64_t v76 = 0;
      long long v74 = 0u;
      long long v75 = 0u;
      uint64_t v7 = (uint64_t **)((char *)v3 + *(void *)(*v3 + 128));
      swift_beginAccess();
      uint64_t v18 = *v7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int *v7 = v18;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_5;
      }
      goto LABEL_47;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
    int *v7 = v18;
LABEL_5:
    if ((v66 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v18[2] > v66)
    {
      outlined assign with take of Subscription?((uint64_t)&v74, (uint64_t)&v18[5 * v66 + 4], &demangling cache variable for type metadata for Subscription?);
      swift_endAccess();
      uint64_t v28 = *(uint64_t *)((char *)v23 + (void)v3);
      if (v28 == *(void *)((char *)v3 + *(void *)(*v3 + 168)))
      {
        *((unsigned char *)v3 + v21) = 1;
        long long v74 = 0u;
        long long v75 = 0u;
        uint64_t v29 = specialized Array.init(repeating:count:)((uint64_t)&v74, v28);
        uint64_t v30 = (void *)((char *)v3 + *(void *)(*v3 + 120));
        swift_beginAccess();
        *uint64_t v30 = v29;
        swift_bridgeObjectRelease();
        if (*((unsigned char *)v3 + *(void *)(*v3 + 200)))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)v19);
          os_unfair_recursive_lock_lock_with_options();
          (*(void (**)(uint64_t, uint64_t))(v59 + 56))(v56, v58);
          os_unfair_recursive_lock_unlock();
          return;
        }
        v16(v12, v56, (uint64_t **)v13);
        ((void (*)(char *, void, uint64_t, uint64_t *))v61[7])(v12, 0, 1, v13);
        uint64_t v50 = v63;
        uint64_t v51 = v60;
        uint64_t v52 = v64;
        (*(void (**)(unsigned char *, char *, void))(v63 + 32))(v60, v12, v64);
        int64_t v53 = (char *)v3 + *(void *)(*v3 + 208);
        swift_beginAccess();
        (*(void (**)(char *, unsigned char *, uint64_t))(v50 + 40))(v53, v51, v52);
        swift_endAccess();
      }
      goto LABEL_42;
    }
    __break(1u);
    return;
  }
LABEL_42:
  os_unfair_lock_unlock((os_unfair_lock_t)v19);
}

void protocol witness for Subscriber.receive(completion:) in conformance SubjectSubscriber<A>(uint64_t a1)
{
}

void SubjectSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (MEMORY[0x18C13C570](v1 + 3))
  {
    swift_unknownObjectWeakAssign();
    uint64_t v5 = (uint64_t)(v1 + 4);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 4), (uint64_t)&v7);
    uint64_t v6 = *((void *)&v8 + 1);
    outlined destroy of Subscription?((uint64_t)&v7);
    if (v6)
    {
      uint64_t v9 = 0;
      long long v7 = 0u;
      long long v8 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v7, v5);
      swift_endAccess();
      os_unfair_lock_unlock(v4);
      (*(void (**)(uint64_t, void))(*(void *)(v3 + 88) + 24))(a1, *(void *)(v3 + 80));
    }
    else
    {
      os_unfair_lock_unlock(v4);
    }
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription?>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    long long v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    long long v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Subscription>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    long long v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    long long v10[2] = v8;
    void v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ObservableObjectTable.Storage>);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    long long v10[2] = v8;
    void v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 < a4 || v10 + 4 >= &a4[2 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AbstractZip.Side.receive(_:)(uint64_t a1, uint64_t a2)
{
  int64_t v4 = *v2;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v5 = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, a1, v5);
  AbstractZip.receive(_:index:)((uint64_t)v10, v4);
  uint64_t v8 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v8;
}

void AbstractZip.receive(_:index:)(uint64_t a1, int64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v7 = *v2;
  unint64_t v6 = v7;
  unint64_t v8 = *((void *)v7 + 11);
  uint64_t v9 = *((void *)v7 + 13);
  uint64_t v57 = *((void *)v7 + 12);
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)*((void *)v7 + 10);
  unint64_t v13 = (char *)*(v12 - 1);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v58 = (char *)&v46 - v17;
  if (*(uint64_t *)((char *)v3 + *((void *)v7 + 21)) <= a2) {
    goto LABEL_67;
  }
  uint64_t v56 = v9;
  uint64_t v53 = v16;
  uint64_t v54 = v15;
  uint64_t v55 = v14;
  uint64_t v9 = *((void *)v7 + 22);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v9));
  uint64_t v18 = *v3;
  if ((*((unsigned char *)v3 + *((void *)*v3 + 17)) & 1) != 0
    || (*((unsigned char *)v3 + *((void *)v18 + 18)) & 1) != 0
    || (uint64_t v7 = (char *)*((void *)v18 + 19), (v7[(void)v3] & 1) != 0))
  {
LABEL_5:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v9));
    return;
  }
  outlined init with copy of Any(a1, (uint64_t)&v67);
  unint64_t v6 = (char *)*((void *)*v3 + 15);
  a1 = *(void *)&v6[(void)v3];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = v6;
  *(void *)&v6[(void)v3] = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_70;
  }
  if (a2 < 0) {
    goto LABEL_71;
  }
LABEL_8:
  uint64_t v48 = v7;
  if (*(void *)(a1 + 16) > (unint64_t)a2)
  {
    unint64_t v6 = (char *)(a1 + 32);
    a1 = *(void *)(a1 + 32 + 8 * a2);
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v6[8 * a2] = a1;
    uint64_t v49 = v13;
    if ((v20 & 1) == 0) {
      goto LABEL_73;
    }
    goto LABEL_10;
  }
  while (1)
  {
    __break(1u);
LABEL_73:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, (char *)a1);
    *(void *)&v6[8 * a2] = a1;
LABEL_10:
    unint64_t v13 = *(char **)(a1 + 16);
    unint64_t v21 = *(void *)(a1 + 24);
    if ((unint64_t)v13 >= v21 >> 1)
    {
      a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), (int64_t)(v13 + 1), 1, (char *)a1);
      *(void *)&v6[8 * a2] = a1;
    }
    *(void *)(a1 + 16) = v13 + 1;
    outlined init with take of Any(&v67, (_OWORD *)(a1 + 32 * (void)v13 + 32));
    uint64_t v7 = *(char **)&v51[(void)v3];
    uint64_t v22 = *((void *)v7 + 2);
    uint64_t v50 = v12;
    uint64_t v52 = (char *)a2;
    if (!v22) {
      break;
    }
    unint64_t v6 = (char *)*((void *)v7 + 4);
    a2 = *((void *)v6 + 2);
    if (!a2) {
      goto LABEL_5;
    }
    uint64_t v61 = (uint64_t *)(v22 - 1);
    if (v22 == 1)
    {
LABEL_19:
      unint64_t v47 = v8;
      *(void *)&long long v60 = *((void *)*v3 + 20);
      swift_bridgeObjectRetain();
      uint64_t v12 = 0;
      unint64_t v8 = 0;
      unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v59 = MEMORY[0x1E4FBC840] + 8;
      a1 = MEMORY[0x1E4FBC860];
      while (1)
      {
        outlined init with copy of Any((uint64_t)(v6 + 32), (uint64_t)&v67);
        swift_bridgeObjectRetain();
        BOOL v25 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!v25 || (unint64_t)(a2 - 1) > *((void *)v6 + 3) >> 1) {
          unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25, a2, 1, v6);
        }
        swift_arrayDestroy();
        uint64_t v26 = *((void *)v6 + 2);
        memmove(v6 + 32, v6 + 64, 32 * v26 - 32);
        *((void *)v6 + 2) = v26 - 1;
        outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v64);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v13 + 2) + 1, 1, v13);
        }
        unint64_t v28 = *((void *)v13 + 2);
        unint64_t v27 = *((void *)v13 + 3);
        if (v28 >= v27 >> 1) {
          unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v13);
        }
        *((void *)v13 + 2) = v28 + 1;
        outlined init with take of Any(&v64, &v13[32 * v28 + 32]);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1, (void *)a1);
        }
        unint64_t v30 = *(void *)(a1 + 16);
        unint64_t v29 = *(void *)(a1 + 24);
        a2 = v30 + 1;
        if (v30 >= v29 >> 1) {
          a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, (void *)a1);
        }
        *(void *)(a1 + 16) = a2;
        *(void *)(a1 + 8 * v30 + 32) = v6;
        uint64_t v31 = *(uint64_t *)((char *)v3 + v60);
        if ((unint64_t)v12 >= *(void *)(v31 + 16)) {
          break;
        }
        if (*((unsigned char *)v12 + v31 + 32) == 1)
        {
          uint64_t v32 = *((void *)v6 + 2);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          swift_bridgeObjectRelease();
          if (!v32) {
            unint64_t v8 = 1;
          }
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          swift_bridgeObjectRelease();
        }
        if (v61 == v12)
        {
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
        unint64_t v6 = *(char **)&v7[8 * (void)v12 + 40];
        a2 = *((void *)v6 + 2);
        uint64_t v12 = (uint64_t *)((char *)v12 + 1);
        if (!a2) {
          goto LABEL_66;
        }
      }
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    uint64_t v23 = 5;
    while (1)
    {
      uint64_t v24 = v23 - 3;
      if (__OFADD__(v23 - 4, 1)) {
        break;
      }
      if (!*(void *)(*(void *)&v7[8 * v23] + 16)) {
        goto LABEL_5;
      }
      ++v23;
      if (v24 == v22) {
        goto LABEL_19;
      }
    }
LABEL_69:
    __break(1u);
LABEL_70:
    a1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a1);
    *(void *)&v51[(void)v3] = a1;
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_8;
    }
LABEL_71:
    __break(1u);
  }
  unint64_t v47 = v8;
  LOBYTE(v8) = 0;
  a1 = MEMORY[0x1E4FBC860];
  unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
LABEL_41:
  *(void *)&v51[(void)v3] = a1;
  swift_bridgeObjectRelease();
  uint64_t v33 = *((void *)*v3 + 24);
  *((unsigned char *)v3 + v33) = 1;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v9));
  uint64_t v34 = v58;
  (*((void (**)(char *))*v3 + 63))(v13);
  uint64_t v35 = v34;
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v56 + 48))(v34, v57);
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v9));
  *((unsigned char *)v3 + v33) = 0;
  if (v8)
  {
    v48[(void)v3] = 1;
    uint64_t v37 = v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v53, 1, 1);
    AbstractZip.lockedSendCompletion(completion:)(v37);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v37, v55);
    (*((void (**)(char *, uint64_t *))v49 + 1))(v35, v50);
    return;
  }
  uint64_t v38 = *((void *)*v3 + 25);
  uint64_t v39 = v50;
  uint64_t v40 = v49;
  if (v36 == 0x8000000000000000) {
    goto LABEL_48;
  }
  uint64_t v41 = *(uint64_t *)((char *)v3 + v38);
  if (v41 == 0x8000000000000000) {
    goto LABEL_48;
  }
  if (((v41 | v36) & 0x8000000000000000) == 0)
  {
    BOOL v42 = __OFADD__(v36, v41);
    a1 = v36 + v41;
    if (!v42)
    {
      if (a1 < 0) {
        goto LABEL_75;
      }
      *(char **)((char *)v3 + v38) = 0;
      if (!a1)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v9));
        (*((void (**)(char *, uint64_t *))v40 + 1))(v35, v39);
        return;
      }
      goto LABEL_49;
    }
LABEL_48:
    *(char **)((char *)v3 + v38) = 0;
    a1 = 0x8000000000000000;
LABEL_49:
    uint64_t v43 = (char *)v3 + *((void *)*v3 + 16);
    swift_beginAccess();
    uint64_t v44 = *(uint64_t **)v43;
    uint64_t v7 = *(char **)((char *)v3 + v9);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)v7);
    unint64_t v8 = 0;
    a2 = v44[2];
    uint64_t v61 = v44;
    uint64_t v59 = (uint64_t)(v44 + 4);
    uint64_t v3 = (char **)&v62 + 1;
    uint64_t v57 = (uint64_t)&v64 + 8;
    unint64_t v13 = (char *)&v67 + 8;
    long long v60 = xmmword_18C0BA640;
    unint64_t v6 = (char *)&demangling cache variable for type metadata for (offset: Int, element: Subscription?)?;
    uint64_t v12 = &demangling cache variable for type metadata for Subscription?;
    if (!a2)
    {
LABEL_52:
      long long v64 = 0u;
      long long v65 = 0u;
      unint64_t v8 = a2;
      long long v66 = v60;
      goto LABEL_55;
    }
    while (v8 < v61[2])
    {
      outlined init with copy of Subscription?(v59 + 40 * v8, (uint64_t)&v62 + 8);
      *(void *)&long long v64 = v8;
      outlined init with take of Subscription?((uint64_t)&v62 + 8, v57, &demangling cache variable for type metadata for Subscription?);
      ++v8;
LABEL_55:
      outlined init with take of Subscription?((uint64_t)&v64, (uint64_t)&v67, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
      if (v68 == 1)
      {
        swift_bridgeObjectRelease();
        (*((void (**)(char *, uint64_t *))v49 + 1))(v58, v50);
        return;
      }
      uint64_t v7 = (char *)v67;
      outlined init with take of Subscription?((uint64_t)&v67 + 8, (uint64_t)&v62, &demangling cache variable for type metadata for Subscription?);
      if (v63)
      {
        outlined init with take of Subscription(&v62, (uint64_t)&v64);
        if (v7 != v52)
        {
          uint64_t v45 = *((void *)&v65 + 1);
          uint64_t v9 = v66;
          uint64_t v7 = (char *)__swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v65 + 1));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, v45, v9);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
        if (v8 == a2) {
          goto LABEL_52;
        }
      }
      else
      {
        outlined destroy of Subscription?((uint64_t)&v62);
        if (v8 == a2) {
          goto LABEL_52;
        }
      }
    }
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  __break(1u);
LABEL_75:
  __break(1u);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t vtable thunk for AbstractZip.convert(values:) dispatching to Zip3Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v5 = a2 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v6 = a2 + *(int *)(TupleTypeMetadata3 + 64);

  return Zip3Inner.convert(values:)(a2, v5, v6, a1);
}

uint64_t Zip3Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  outlined init with copy of Any(a4 + 32, (uint64_t)v9);
  uint64_t result = swift_dynamicCast();
  if (v4 == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any(a4 + 64, (uint64_t)v8);
  uint64_t result = swift_dynamicCast();
  if (v4 >= 3)
  {
    outlined init with copy of Any(a4 + 96, (uint64_t)&v7);
    return swift_dynamicCast();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void Publishers.SwitchToLatest.Outer.Side.receive(completion:)(uint64_t a1)
{
  Publishers.SwitchToLatest.Outer.receiveInner(completion:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(completion:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v28 = *(void **)v3;
  uint64_t v6 = v28;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v28 - v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = v6[21];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + v16));
  uint64_t v17 = *(void **)v3;
  if (*(void *)(v3 + *(void *)(*(void *)v3 + 152)) == a2 && (uint64_t v18 = v17[23], (*(unsigned char *)(v3 + v18) & 1) == 0))
  {
    if (*(unsigned char *)(v3 + v17[26]))
    {
      __break(1u);
    }
    else
    {
      uint64_t v35 = 0;
      memset(v34, 0, sizeof(v34));
      uint64_t v20 = v3 + v17[18];
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)v34, v20);
      swift_endAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v15, a1, v10);
      uint64_t v21 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v15, 1, AssociatedTypeWitness) == 1)
      {
        if ((*(unsigned char *)(v3 + v18) & 1) != 0
          || (uint64_t v22 = *(void *)(*(void *)v3 + 200), *(unsigned char *)(v3 + v22) == 1)
          || (*(unsigned char *)(v3 + *(void *)(*(void *)v3 + 192)) & 1) == 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v16));
        }
        else
        {
          *(unsigned char *)(v3 + v22) = 1;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v16));
          os_unfair_recursive_lock_lock_with_options();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v13, 1, 1, AssociatedTypeWitness);
          (*(void (**)(char *, void))(v28[15] + 56))(v13, v28[12]);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
          os_unfair_recursive_lock_unlock();
        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v9, v15, AssociatedTypeWitness);
        if ((*(unsigned char *)(v3 + v18) & 1) != 0 || (uint64_t v23 = *(void *)(*(void *)v3 + 200), *(unsigned char *)(v3 + v23) == 1))
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v16));
          (*(void (**)(char *, uint64_t))(v21 + 8))(v9, AssociatedTypeWitness);
        }
        else
        {
          *(unsigned char *)(v3 + v18) = 1;
          uint64_t v24 = v3 + *(void *)(*(void *)v3 + 136);
          swift_beginAccess();
          outlined init with copy of Subscription?(v24, (uint64_t)v34);
          uint64_t v33 = 0;
          long long v31 = 0u;
          long long v32 = 0u;
          swift_beginAccess();
          outlined assign with take of Subscription?((uint64_t)&v31, v24);
          swift_endAccess();
          *(unsigned char *)(v3 + v23) = 1;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v16));
          outlined init with copy of Subscription?((uint64_t)v34, (uint64_t)&v31);
          uint64_t v25 = *((void *)&v32 + 1);
          if (*((void *)&v32 + 1))
          {
            uint64_t v26 = v33;
            __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
            (*(void (**)(uint64_t))(*(void *)(v26 + 8) + 8))(v25);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
          }
          else
          {
            outlined destroy of Subscription?((uint64_t)&v31);
          }
          uint64_t v27 = v29;
          os_unfair_recursive_lock_lock_with_options();
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v13, v9, AssociatedTypeWitness);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v13, 0, 1, AssociatedTypeWitness);
          (*(void (**)(char *, void))(v28[15] + 56))(v13, v28[12]);
          (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
          os_unfair_recursive_lock_unlock();
          outlined destroy of Subscription?((uint64_t)v34);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v9, AssociatedTypeWitness);
        }
      }
    }
  }
  else
  {
    unint64_t v19 = *(os_unfair_lock_s **)(v3 + v16);
    os_unfair_lock_unlock(v19);
  }
}

void PassthroughSubject.send(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  if (*((unsigned char *)v1 + 24) == 1)
  {
    *((unsigned char *)v1 + 24) = 0;
    uint64_t v10 = *(void *)(v4 - 8);
    v17[1] = v3;
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v4);
    uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 120);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
    swift_endAccess();
    uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 128);
    swift_beginAccess();
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    outlined copy of ConduitList<A, Never><A>(*(void *)v13, v15);
    type metadata accessor for ConduitList();
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v9);
    MEMORY[0x1F4188790](v16);
    v17[-2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PassthroughSubject.send(completion:), (uint64_t)&v17[-4], v14, v15);
    outlined consume of ConduitList<A, Never><A>(v14, v15);
  }
  else
  {
    os_unfair_lock_unlock(v9);
  }
}

uint64_t Publisher.prepend<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4, a2);
  return Publishers.Concatenate.init(prefix:suffix:)((uint64_t)v13, (uint64_t)v11, a3, a2, a4);
}

uint64_t Publisher.prepend(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a4(&v10, a2, v7, a3, WitnessTable);
}

uint64_t Publisher.prepend<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a6;
  v24[1] = a1;
  uint64_t v26 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v11;
  uint64_t v30 = MEMORY[0x1E4FBC248];
  uint64_t v31 = v12;
  uint64_t v32 = MEMORY[0x1E4FBC278];
  uint64_t v13 = type metadata accessor for Publishers.Sequence();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v24 - v15;
  v24[0] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v29 = a3;
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = a5;
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for Publishers.Sequence();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v24 - v20;
  Sequence.publisher.getter(a3, (uint64_t)v16);
  Publishers.Sequence.setFailureType<A>(to:)(v13, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v22 = (uint64_t)v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v27, a2);
  swift_getWitnessTable();
  return Publishers.Concatenate.init(prefix:suffix:)((uint64_t)v21, v22, v19, a2, v28);
}

uint64_t type metadata accessor for Publishers.Sequence()
{
  return swift_getGenericMetadata();
}

uint64_t Sequence.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Sequence.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t Publishers.Concatenate.init(prefix:suffix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.Concatenate();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.Concatenate()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.Throttle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v20, v21, v8);
  *(unsigned char *)(*(void *)(v17 + 48) + v20) = *(unsigned char *)(*(void *)(v17 + 48) + v21);
  return a1;
}

uint64_t Publishers.MapError.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v11 = (char *)&v17 - v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v17 - v13, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v11, 1, 1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v11, v19, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v14, AssociatedTypeWitness);
    (*(void (**)(char *))(v20 + *(int *)(a2 + 60)))(v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v11, 0, 1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 56))(v11, v19, v7);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Retry<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t type metadata completion function for PublishedSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.Merge7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 144);
}

uint64_t type metadata accessor for Publishers.MakeConnectable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SwitchToLatest<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.SwitchToLatest.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata completion function for PassthroughSubject.Conduit()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.mapError<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v7);
  v20[0] = a3;
  v20[1] = a4;
  void v20[2] = a5;
  v20[3] = a6;
  uint64_t v18 = (void *)(a7 + *(int *)(type metadata accessor for Publishers.MapError() + 52));
  *uint64_t v18 = a1;
  v18[1] = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, a3);
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.MapError()
{
  return swift_getGenericMetadata();
}

void *destroy for Publishers.BufferingStrategy(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t Future.__deallocating_deinit()
{
  Future.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t Future.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 16), -1, -1);
  outlined consume of ConduitList<A, Never><A>(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  type metadata accessor for Result();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t Subscribers.Sink.__deallocating_deinit()
{
  Subscribers.Sink.deinit();

  return MEMORY[0x1F4186488](v0, 104, 7);
}

uint64_t Subscribers.Sink.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 96), -1, -1);
  swift_release();
  swift_release();
  outlined destroy of SubscriptionStatus(v0 + 48);
  return v0;
}

uint64_t base witness table accessor for Equatable in ObservableObjectPublisher.Conduit()
{
  return lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(&lazy protocol witness table cache variable for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit);
}

uint64_t lazy protocol witness table accessor for type ObservableObjectPublisher.Conduit and conformance ObservableObjectPublisher.Conduit(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ObservableObjectPublisher.Conduit();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Conduit()
{
  return self;
}

uint64_t type metadata completion function for FilterProducer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Publishers.Autoconnect.__deallocating_deinit()
{
  Publishers.Autoconnect.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.Autoconnect.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 104)), -1, -1);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96), *(void *)(v1 + 80));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v3 = type metadata accessor for Publishers.Autoconnect.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t destroy for Publishers.Autoconnect.State(uint64_t result)
{
  if (*(void *)(result + 32) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t Publishers.MakeConnectable.connect()@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t protocol witness for ConnectablePublisher.connect() in conformance Publishers.Multicast<A, B>@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Multicast.connect()(a1);
}

uint64_t Publishers.Multicast.connect()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = Publishers.Multicast.lazySubject.getter();
  uint64_t v5 = Publisher.subscribe<A>(_:)(v4, v3[10], v3[11], v3[12]);
  a1[3] = type metadata accessor for AnyCancellable();
  a1[4] = (uint64_t)&protocol witness table for AnyCancellable;
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t Publisher.subscribe<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SubjectSubscriber();
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v7 = specialized SubjectSubscriber.init(_:)();
  swift_unknownObjectRelease();
  uint64_t v10 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v10, a2, v6, a4, WitnessTable);
  type metadata accessor for AnyCancellable();
  uint64_t v10 = v7;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v10, v6, (uint64_t)&protocol witness table for SubjectSubscriber<A>);
}

uint64_t specialized SubjectSubscriber.init(_:)()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + 16) = v1;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t type metadata accessor for SubjectSubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher<>.makeConnectable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  return Publishers.MakeConnectable.init(upstream:)((uint64_t)v8, a1, a2, a3);
}

uint64_t Publishers.MakeConnectable.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PassthroughSubject();
  uint64_t v9 = PassthroughSubject.__allocating_init()();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = Publisher.multicast<A>(subject:)(v9, a2, v8, a3, WitnessTable);
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a4 = v11;
  return result;
}

uint64_t Publishers.Delay.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v37 = a4;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v38 = (char *)&v31 - v10;
  uint64_t v36 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v35 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 32);
  uint64_t v34 = v23;
  v43[0] = v23;
  v43[1] = v7;
  void v43[2] = a3;
  v43[3] = v33;
  v43[4] = v6;
  v43[5] = v37;
  uint64_t v24 = type metadata accessor for Publishers.Delay.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v39, a3);
  uint64_t v25 = v40;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26(v19, v40 + *(int *)(a2 + 52), AssociatedTypeWitness);
  v26(v16, v25 + *(int *)(a2 + 56), AssociatedTypeWitness);
  uint64_t v27 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v25 + *(int *)(a2 + 60), v7);
  uint64_t v28 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v38, v25 + *(int *)(a2 + 64), v42);
  swift_allocObject();
  v43[0] = Publishers.Delay.Inner.init(_:interval:tolerance:scheduler:options:)((uint64_t)v22, (uint64_t)v19, (uint64_t)v32, v27, v28);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v43, v34, v24, v33, WitnessTable);
  return swift_release();
}

char *Publishers.Delay.Inner.init(_:interval:tolerance:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)v5;
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  *((void *)v5 + 2) = v10;
  uint64_t v11 = &v5[*(void *)(*(void *)v5 + 176)];
  *((void *)v11 + 4) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[40] = 2;
  uint64_t v12 = *(void *)(*(void *)v5 + 184);
  uint64_t v13 = (void *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)&v5[v12] = v13;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v9 + 96) - 8) + 32))(&v5[*(void *)(*(void *)v5 + 136)], a1);
  uint64_t v14 = &v5[*(void *)(*(void *)v5 + 144)];
  uint64_t v15 = *(void *)(v9 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v17(v14, a2, AssociatedTypeWitness);
  v17(&v5[*(void *)(*(void *)v5 + 152)], a3, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(&v5[*(void *)(*(void *)v5 + 160)], a4, v15);
  uint64_t v18 = &v5[*(void *)(*(void *)v5 + 168)];
  swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a5, v19);
  return v5;
}

uint64_t type metadata accessor for Publishers.Delay.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MakeConnectable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MakeConnectable.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.MakeConnectable.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PassthroughSubject();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Publishers.Multicast();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Publisher.subscribe<A>(_:)(a1, v7, a3, WitnessTable, a4);
}

char *Publisher.share()()
{
  type metadata accessor for Publishers.Share();
  swift_allocObject();
  return specialized Publishers.Share.init(upstream:)(v0);
}

uint64_t type metadata accessor for Publishers.Share()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Share<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.Share.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t Publishers.Share.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PassthroughSubject();
  swift_getWitnessTable();
  type metadata accessor for Publishers.Multicast();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for Publishers.Autoconnect();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Publisher.subscribe<A>(_:)(a1, v6, a2, WitnessTable, a3);
}

char *specialized Publishers.Share.init(upstream:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = v3[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(&v2[v3[13]], a1, v4);
  uint64_t v5 = v3[11];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for PassthroughSubject();
  uint64_t v7 = PassthroughSubject.__allocating_init()();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.multicast<A>(subject:)(v7, v4, v6, v5, WitnessTable);
  uint64_t v8 = type metadata accessor for Publishers.Multicast();
  swift_getWitnessTable();
  uint64_t v9 = ConnectablePublisher.autoconnect()(v8);
  swift_release();
  swift_release();
  *((void *)v2 + 2) = v9;
  return v2;
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ConnectablePublisher.autoconnect()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Publishers.Autoconnect();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t v6 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)((uint64_t)v5);
  return v6;
}

uint64_t type metadata accessor for Publishers.Autoconnect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *Publishers.Autoconnect.init(upstream:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 96), a1);
  uint64_t v6 = (_OWORD *)((char *)v1 + *(void *)(*v1 + 112));
  v6[1] = 0u;
  v6[2] = 0u;
  *uint64_t v6 = 0u;
  return v1;
}

uint64_t Publisher.multicast<A>(subject:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  long long v10[2] = a2;
  uint64_t v10[3] = a3;
  v10[4] = a4;
  uint64_t v10[5] = a5;
  v10[6] = a1;
  swift_unknownObjectRetain();
  uint64_t v11 = Publisher.multicast<A>(_:)((uint64_t)partial apply for closure #1 in Publisher.multicast<A>(subject:), (uint64_t)v10, a2);
  swift_release();
  return v11;
}

uint64_t Publisher.multicast<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = v12;
  v16[3] = v13;
  type metadata accessor for Publishers.Multicast();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a3);
  uint64_t v14 = swift_allocObject();
  swift_retain();
  Publishers.Multicast.init(upstream:createSubject:)((uint64_t)v9, a1, a2);
  return v14;
}

uint64_t type metadata accessor for Publishers.Multicast()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.Multicast.init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 128);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 136)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 80) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 112), a1);
  uint64_t v10 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 120));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return v3;
}

uint64_t PassthroughSubject.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  PassthroughSubject.init()();
  return v0;
}

uint64_t Publishers.ReplaceError.Inner.__deallocating_deinit()
{
  return Publishers.ReplaceEmpty.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.ReplaceError.Inner.deinit);
}

uint64_t Publisher.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Filter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.delay<A>(for:tolerance:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v53 = a7;
  uint64_t v50 = a4;
  uint64_t v51 = a9;
  uint64_t v55 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v45 = (char *)&v40 - v15;
  uint64_t v52 = a5;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v44 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v43 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v40 - v21;
  swift_getAssociatedTypeWitness();
  uint64_t v54 = a8;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v40 - v27;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v26);
  uint64_t v41 = (char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v40 - v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, a2, v24);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v40(v22, v55, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t))(v54 + 48))(a6);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a6);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a6);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v28, AssociatedTypeWitness);
  }
  uint64_t v34 = (uint64_t)v44;
  uint64_t v35 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v44, v48, v52);
  uint64_t v36 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v41, v49, AssociatedTypeWitness);
  uint64_t v37 = (uint64_t)v43;
  v40(v43, v55, a6);
  uint64_t v38 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v50, v47);
  return Publishers.Delay.init(upstream:interval:tolerance:scheduler:options:)(v34, v36, (uint64_t)v33, v37, v38, v35, a6, v51);
}

uint64_t Publishers.Delay.init(upstream:interval:tolerance:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8, a1, a6);
  uint64_t v11 = (int *)type metadata accessor for Publishers.Delay();
  uint64_t v12 = a8 + v11[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v14(v12, a2, AssociatedTypeWitness);
  v14(a8 + v11[14], a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v11[15], a4, a7);
  uint64_t v15 = a8 + v11[16];
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a5, v16);
}

uint64_t type metadata accessor for Publishers.Delay()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.CompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  uint64_t v21 = (uint64_t (**)(uint64_t))(a5 + *(int *)(type metadata accessor for Publishers.CompactMap() + 44));
  *uint64_t v21 = partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t Publisher.replaceError(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v19 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v16, v6, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, AssociatedTypeWitness);
  return a4(v16, v14, a2, a3);
}

uint64_t Publishers.ReplaceError.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a6 + *(int *)(v10 + 36), a1, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v12(a6, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for Publishers.ReplaceError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.ReplaceError.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publishers.ReplaceError.init(upstream:output:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ReplaceError, a5);
}

uint64_t Publisher.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, a2);
  uint64_t result = type metadata accessor for Publishers.Drop();
  *(void *)(a3 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t type metadata accessor for Publishers.Drop()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.receive<A>(on:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v25 = a6;
  uint64_t v26 = a5;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v23, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v24, v10);
  return Publishers.ReceiveOn.init(upstream:scheduler:options:)((uint64_t)v20, (uint64_t)v18, (uint64_t)v14, a3, a4, v25);
}

uint64_t Publishers.ReceiveOn.init(upstream:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6, a1, a4);
  uint64_t v10 = type metadata accessor for Publishers.ReceiveOn();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v10 + 52), a2, a5);
  uint64_t v11 = a6 + *(int *)(v10 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t type metadata accessor for Publishers.ReceiveOn()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t Publishers.CompactMap.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  uint64_t v21 = (uint64_t (**)(uint64_t))(a5 + *(int *)(type metadata accessor for Publishers.CompactMap() + 44));
  *uint64_t v21 = partial apply for closure #1 in Publishers.CompactMap.map<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, a3);
  uint64_t v18 = (void *)(a7 + *(int *)(a6(0, a3, a4, a5) + 44));
  *uint64_t v18 = a1;
  v18[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.CompactMap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.Debounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 16;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 48) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 48);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  uint64_t v26 = (const void *)((v21 + v24 + v20) & ~v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22))
  {
    if (*(_DWORD *)(v23 + 84)) {
      size_t v27 = *(void *)(v23 + 64);
    }
    else {
      size_t v27 = *(void *)(v23 + 64) + 1;
    }
    memcpy(v25, v26, v27);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  }
  return a1;
}

uint64_t Publisher<>.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v17 = a8;
  uint64_t v18 = a1;
  uint64_t v21 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Publishers.SetFailureType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - v13;
  Publisher<>.setFailureType<A>(to:)(v21, (uint64_t)&v17 - v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.flatMap<A, B>(maxPublishers:_:)(v18, v19, v20, v11, a5, WitnessTable, a7, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v24 = a2;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v8, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a8, v18, a4);
  uint64_t v25 = a5;
  uint64_t v26 = a4;
  size_t v27 = a7;
  uint64_t v28 = a6;
  uint64_t v20 = type metadata accessor for Publishers.FlatMap();
  *(void *)(a8 + *(int *)(v20 + 52)) = a1;
  uint64_t v21 = (void *)(a8 + *(int *)(v20 + 56));
  *uint64_t v21 = v24;
  v21[1] = a3;
  return swift_retain();
}

uint64_t Publisher.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  void v16[4] = a6;
  void v16[5] = a7;
  v16[6] = a2;
  v16[7] = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Publishers.SetFailureType();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.flatMap<A, B>(maxPublishers:_:)(a1, (uint64_t)partial apply for closure #1 in Publisher.flatMap<A>(maxPublishers:_:), (uint64_t)v16, a4, v17, a6, WitnessTable, a8);
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for Publishers.SetFailureType()
{
  return swift_getGenericMetadata();
}

uint64_t Publisher.flatMap<A, B>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v8, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a8, v18, a4);
  uint64_t v25 = a5;
  uint64_t v26 = a4;
  uint64_t v27 = a7;
  uint64_t v28 = a6;
  uint64_t v20 = type metadata accessor for Publishers.FlatMap();
  *(void *)(a8 + *(int *)(v20 + 52)) = a1;
  uint64_t v21 = (void *)(a8 + *(int *)(v20 + 56));
  *uint64_t v21 = v24;
  v21[1] = a3;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.FlatMap()
{
  return swift_getGenericMetadata();
}

uint64_t Publisher.combineLatest<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.CombineLatest.init(_:_:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publishers.CombineLatest.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.CombineLatest();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.CombineLatest()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for Result.Publisher(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

uint64_t initializeWithCopy for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v5);
  return a1;
}

uint64_t initializeWithCopy for Publishers.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  return a1;
}

uint64_t Publisher.removeDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v11, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a3);
  uint64_t v12 = (void *)(a4 + *(int *)(type metadata accessor for Publishers.RemoveDuplicates() + 36));
  *uint64_t v12 = a1;
  v12[1] = a2;
  return swift_retain();
}

uint64_t Publisher<>.removeDuplicates()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = swift_getAssociatedTypeWitness();
  *(void *)(v10 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a1);
  uint64_t result = type metadata accessor for Publishers.RemoveDuplicates();
  uint64_t v12 = (uint64_t (**)())(a3 + *(int *)(result + 36));
  *uint64_t v12 = partial apply for basicEquality<A>(_:_:);
  v12[1] = (uint64_t (*)())v10;
  return result;
}

uint64_t type metadata accessor for Publishers.RemoveDuplicates()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t closure #1 in Publisher.flatMap<A>(maxPublishers:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  Publisher<>.setFailureType<A>(to:)(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a2);
}

uint64_t Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, a1);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t initializeWithCopy for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t initializeWithCopy for Publishers.Delay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v10 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v7 + v13;
  uint64_t v15 = (v7 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 48);
  uint64_t v18 = (v17 + v13 + v15) & ~v13;
  uint64_t v19 = (v17 + v13 + v16) & ~v13;
  v11(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v20 + 16;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v17 + v22 + v18) & ~v22;
  uint64_t v24 = (v17 + v22 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v24, v8);
  uint64_t v25 = *(void *)(v21 + 48);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = (void *)((v25 + v28 + v23) & ~v28);
  uint64_t v30 = (const void *)((v25 + v28 + v24) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v31 = *(void *)(v27 + 64);
    }
    else {
      size_t v31 = *(void *)(v27 + 64) + 1;
    }
    memcpy(v29, v30, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v29, v30, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
  }
  return a1;
}

uint64_t objectdestroy_7Tm()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);

  return swift_deallocObject();
}

void *destructiveInjectEnumTag for Publishers.BufferingStrategy(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *uint64_t result = v2;
  return result;
}

uint64_t type metadata completion function for Publishers.HandleEvents()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CurrentValueSubject<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t SubjectSubscriber.__deallocating_deinit()
{
  SubjectSubscriber.deinit();

  return MEMORY[0x1F4186488](v0, 72, 7);
}

uint64_t SubjectSubscriber.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 16), -1, -1);
  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 32);
  return v0;
}

uint64_t dispatch thunk of Future.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t Publishers.Multicast.__deallocating_deinit()
{
  Publishers.Multicast.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.Multicast.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t type metadata completion function for Publishers.HandleEvents.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t one-time initialization function for observableObservableObjectAvailable()
{
  uint64_t result = observableObservableObjectAvailableCheck();
  static CombineFeatures.observableObservableObjectAvailable = result & 1;
  return result;
}

uint64_t observableObservableObjectAvailableCheck()
{
  return MEMORY[0x1F40CBEC8](0x7E80000FFFFFFFFLL);
}

uint64_t type metadata accessor for AsyncPublisher.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Collect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Zip()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Publishers.FlatMap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Multicast.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Autoconnect.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Future.Conduit.State.fulfill(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v2, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  char v9 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  if (EnumCaseMultiPayload) {
    return v9(v7, a2);
  }
  v9(v2, a2);
  uint64_t v11 = *(void *)(a2 + 32);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = &v2[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v2, v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, a1, v12);
  return swift_storeEnumTagMultiPayload();
}

uint64_t Future.Conduit.__deallocating_deinit()
{
  uint64_t v0 = Future.Conduit.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t Future.Conduit.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 208)), -1, -1);
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 216)), -1, -1);
  uint64_t v1 = ConduitBase.init()();
  swift_release();
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 200);
  uint64_t v3 = type metadata accessor for Future.Conduit.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t destroy for Future.Conduit.State(unsigned __int8 *a1, void *a2)
{
  uint64_t v3 = *(void *)(a2[4] - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = a2[3];
  uint64_t result = *(void *)(a2[2] - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80) | *(unsigned __int8 *)(result + 80);
  uint64_t v8 = v4 + v7;
  unint64_t v9 = (v4 + v7) & ~v7;
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(result + 64)) {
    uint64_t v10 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if (v10 + v9 + 1 > v4) {
    unint64_t v11 = v10 + v9 + 1;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a2[4] - 8) + 64);
  }
  if (v4 + 1 > v11) {
    unint64_t v11 = v4 + 1;
  }
  unsigned int v12 = a1[v11];
  unsigned int v13 = v12 - 3;
  if (v12 >= 3)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_18;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_18:
        int v16 = (v15 | (v13 << (8 * v11))) + 3;
        unsigned int v12 = v15 + 3;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 2)
  {
LABEL_23:
    uint64_t v17 = *(uint64_t (**)(unsigned __int8 *))(v3 + 8);
    return v17(a1);
  }
  if (v12 != 1)
  {
    if (v12) {
      return result;
    }
    goto LABEL_23;
  }
  uint64_t v28 = *(void *)(a2[2] - 8);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v18 = ~v7;
  (*(void (**)(unsigned __int8 *))(v3 + 8))(a1);
  uint64_t v19 = (unsigned __int8 *)((unint64_t)&a1[v8] & v18);
  unsigned int v20 = v19[v10];
  unsigned int v21 = v20 - 2;
  if (v20 < 2)
  {
    uint64_t v23 = v29;
LABEL_34:
    if (v20 != 1)
    {
LABEL_42:
      uint64_t v25 = *(uint64_t (**)(void))(v28 + 8);
      goto LABEL_43;
    }
  }
  else
  {
    if (v10 <= 3) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = 4;
    }
    uint64_t v23 = v29;
    switch(v22)
    {
      case 1:
        int v24 = *v19;
        break;
      case 2:
        int v24 = *(unsigned __int16 *)v19;
        break;
      case 3:
        int v24 = *(unsigned __int16 *)v19 | (*(unsigned __int8 *)(((unint64_t)&a1[v8] & v18) + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)v19;
        break;
      default:
        goto LABEL_34;
    }
    int v26 = (v24 | (v21 << (8 * v10))) + 2;
    int v27 = v24 + 2;
    if (v10 < 4) {
      int v27 = v26;
    }
    if (v27 != 1) {
      goto LABEL_42;
    }
  }
  uint64_t v25 = *(uint64_t (**)(void))(v23 + 8);
LABEL_43:

  return v25();
}

uint64_t Future.Conduit.offer(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 160);
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Result();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)&v9 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  Future.Conduit.fulfill(_:)((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void Future.Conduit.fulfill(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v65 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v61 = (char *)&v52 - v5;
  uint64_t v6 = v3[23];
  uint64_t v7 = v3[22];
  swift_getAssociatedConformanceWitness();
  uint64_t v67 = type metadata accessor for Subscribers.Completion();
  uint64_t v64 = *(void *)(v67 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v67);
  long long v66 = (char *)&v52 - v9;
  uint64_t v10 = v3[20];
  uint64_t v60 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v59 = (char *)&v52 - v11;
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v69 = *(void *)(v12 - 8);
  uint64_t v70 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v63 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v68 = (char *)&v52 - v15;
  uint64_t v74 = v10;
  uint64_t v75 = v4;
  uint64_t v76 = v7;
  uint64_t v77 = v6;
  uint64_t v62 = v6;
  uint64_t v16 = type metadata accessor for Future.Conduit.State();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unsigned int v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v73 = v7;
  uint64_t v72 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v52 - v24;
  int v26 = *(os_unfair_lock_s **)((char *)v1 + v3[26]);
  os_unfair_lock_lock(v26);
  int v27 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v23, v27, v16);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    os_unfair_lock_t v57 = v26;
    uint64_t v53 = v17;
    uint64_t v55 = v10;
    uint64_t v54 = v4;
    uint64_t v28 = v73;
    int v56 = v23[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    uint64_t v58 = v25;
    v29(v25, v23, v28);
    size_t v31 = v68;
    uint64_t v30 = v69;
    uint64_t v33 = v70;
    uint64_t v32 = v71;
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
    v52(v68, v71, v70);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v33);
    if (EnumCaseMultiPayload == 1 || (v56 & 1) != 0)
    {
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v27, v20, v16);
      swift_endAccess();
      uint64_t v35 = v2[2];
      v2[2] = 0;
      os_unfair_lock_unlock(v57);
      uint64_t v69 = *(void *)((char *)v2 + *(void *)(*v2 + 216));
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v36 = v63;
      v52(v63, v32, v33);
      int v37 = swift_getEnumCaseMultiPayload();
      uint64_t v38 = v65;
      uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56);
      uint64_t v40 = v62;
      uint64_t v71 = v62 + 56;
      uint64_t v41 = (void (**)(char *, uint64_t))(v64 + 8);
      uint64_t v42 = v54;
      if (v37 == 1)
      {
        uint64_t v43 = v61;
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v61, v36, v54);
        uint64_t v44 = v66;
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v66, v43, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v44, 0, 1, v42);
        uint64_t v45 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 56))(v44, v73, v40);
        (*v41)(v44, v67);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v42);
      }
      else
      {
        uint64_t v70 = v35;
        uint64_t v46 = v60;
        uint64_t v47 = v59;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v59, v36, v55);
        uint64_t v48 = v58;
        uint64_t v49 = v73;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 48))(v47, v73, v40);
        uint64_t v50 = v66;
        (*v39)(v66, 1, 1, v42);
        uint64_t v45 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 56))(v50, v49, v40);
        (*v41)(v50, v67);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v55);
        uint64_t v35 = v70;
      }
      uint64_t v51 = v72;
      os_unfair_recursive_lock_unlock();
      if (v35)
      {
        swift_retain();
        Future.disassociate(_:)((uint64_t)v2);
        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v51 + 8))(v45, v73);
    }
    else
    {
      os_unfair_lock_unlock(v57);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v58, v73);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    Future.Conduit.State.fulfill(_:)(v71, v16);
    os_unfair_lock_unlock(v26);
  }
}

uint64_t destroy for Optional.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

uint64_t Future.Conduit.subscribe()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = (void *)v2[20];
  uint64_t v4 = v2[21];
  uint64_t v5 = v2[23];
  uint64_t v6 = v2[22];
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = (os_unfair_lock_s *)type metadata accessor for Result();
  uint64_t v44 = *(void *)&v7[-2]._os_unfair_lock_opaque;
  os_unfair_lock_t v45 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v43 = (uint64_t)&v40 - v9;
  uint64_t v49 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = v3;
  uint64_t v48 = (char *)&v40 - v10;
  uint64_t v50 = v3;
  uint64_t v51 = v4;
  uint64_t v46 = v4;
  uint64_t v52 = v6;
  uint64_t v53 = v5;
  uint64_t v11 = type metadata accessor for Future.Conduit.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v42 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v40 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v40 - v18;
  unsigned int v20 = *(os_unfair_lock_s **)((char *)v1 + v2[26]);
  os_unfair_lock_lock(v20);
  uint64_t v21 = (char *)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v21, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    os_unfair_lock_t v30 = v45;
    uint64_t v40 = &v19[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v41 = v5;
    uint64_t v31 = v49;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v19, v6);
    (*(void (**)(uint64_t, char *, os_unfair_lock_t))(v44 + 32))(v43, v40, v30);
    uint64_t v32 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    uint64_t v34 = v48;
    v33(v17, v48, v6);
    v17[v32] = 0;
    swift_storeEnumTagMultiPayload();
    uint64_t v35 = v20;
    uint64_t v36 = v42;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v42, v17, v11);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v21, v36, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v35);
    uint64_t v50 = v47;
    uint64_t v51 = v46;
    uint64_t v37 = v41;
    uint64_t v52 = v6;
    uint64_t v53 = v41;
    uint64_t v53 = type metadata accessor for Future.Conduit();
    uint64_t v54 = &protocol witness table for ConduitBase<A, B>;
    uint64_t v50 = v1;
    uint64_t v38 = *(void (**)(void **, uint64_t, uint64_t))(v37 + 40);
    swift_retain();
    v38(&v50, v6, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    uint64_t v39 = v43;
    Future.Conduit.fulfill(_:)(v43);
    (*(void (**)(uint64_t, os_unfair_lock_t))(v44 + 8))(v39, v45);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v34, v6);
  }
  else if (EnumCaseMultiPayload)
  {
    os_unfair_lock_unlock(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  }
  else
  {
    uint64_t v23 = v49;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    os_unfair_lock_t v45 = v20;
    uint64_t v25 = v48;
    v24(v48, v19, v6);
    uint64_t v26 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v25, v6);
    v17[v26] = 0;
    swift_storeEnumTagMultiPayload();
    int v27 = v42;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v42, v17, v11);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v21, v27, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v45);
    uint64_t v50 = v47;
    uint64_t v51 = v46;
    uint64_t v52 = v6;
    uint64_t v53 = v5;
    uint64_t v53 = type metadata accessor for Future.Conduit();
    uint64_t v54 = &protocol witness table for ConduitBase<A, B>;
    uint64_t v50 = v1;
    uint64_t v28 = *(void (**)(void **, uint64_t, uint64_t))(v5 + 40);
    swift_retain();
    v28(&v50, v6, v5);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  }
}

void Future.Conduit.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t v82 = v4;
  uint64_t v5 = v4[21];
  uint64_t v74 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v68 = (char *)&v62 - v6;
  uint64_t v7 = v4[23];
  uint64_t v8 = v4[22];
  swift_getAssociatedConformanceWitness();
  uint64_t v73 = type metadata accessor for Subscribers.Completion();
  uint64_t v70 = *(void *)(v73 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v73);
  uint64_t v72 = (char *)&v62 - v10;
  uint64_t v11 = v4[20];
  uint64_t v67 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v9);
  long long v66 = (char *)&v62 - v12;
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v79 = type metadata accessor for Optional();
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v79);
  uint64_t v78 = (char *)&v62 - v15;
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v69 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v76 = (char *)&v62 - v18;
  uint64_t v71 = v11;
  uint64_t v85 = v11;
  uint64_t v86 = v5;
  uint64_t v87 = v8;
  uint64_t v88 = v7;
  uint64_t v75 = v7;
  uint64_t v19 = type metadata accessor for Future.Conduit.State();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v62 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v62 - v28;
  uint64_t v84 = v8;
  uint64_t v81 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v83 = (char *)&v62 - v30;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v31 = *(os_unfair_lock_s **)((char *)v2 + v82[26]);
  os_unfair_lock_lock(v31);
  uint64_t v32 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v29, v32, v19);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
    os_unfair_lock_unlock(v31);
    return;
  }
  os_unfair_lock_t v65 = v31;
  uint64_t v64 = v5;
  uint64_t v82 = (void *)v13;
  uint64_t v33 = v81;
  uint64_t v34 = v83;
  uint64_t v35 = v84;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v83, v29, v84);
  uint64_t v36 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v26, v34, v35);
  v26[v36] = 1;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v26, v19);
  swift_beginAccess();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v20 + 40);
  v37(v32, v23, v19);
  swift_endAccess();
  uint64_t v38 = v2[2];
  if (v38)
  {
    uint64_t v63 = v37;
    uint64_t v39 = v38 + *(void *)(*(void *)v38 + 120);
    swift_beginAccess();
    uint64_t v41 = v77;
    uint64_t v40 = v78;
    uint64_t v42 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v78, v39, v79);
    uint64_t v43 = v80;
    uint64_t v44 = v82;
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v80 + 48))(v40, 1, v82) != 1)
    {
      os_unfair_lock_t v45 = v76;
      (*(void (**)(char *, char *, void *))(v43 + 32))(v76, v40, v44);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      v63(v32, v26, v19);
      swift_endAccess();
      uint64_t v46 = v2[2];
      v2[2] = 0;
      os_unfair_lock_unlock(v65);
      uint64_t v79 = *(void *)((char *)v2 + *(void *)(*v2 + 216));
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v47 = v69;
      (*(void (**)(char *, char *, void *))(v43 + 16))(v69, v45, v44);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v49 = v74;
      uint64_t v50 = v75;
      uint64_t v51 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
      uint64_t v77 = v75 + 56;
      uint64_t v78 = (char *)(v70 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v52 = v68;
        uint64_t v53 = v64;
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v68, v47, v64);
        uint64_t v54 = v72;
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v72, v52, v53);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v54, 0, 1, v53);
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 56))(v54, v84, v50);
        (*(void (**)(char *, uint64_t))v78)(v54, v73);
        uint64_t v55 = v52;
        uint64_t v43 = v80;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v53);
      }
      else
      {
        uint64_t v56 = v67;
        os_unfair_lock_t v57 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
        uint64_t v74 = v46;
        uint64_t v58 = v66;
        v57(v66, v47, v71);
        uint64_t v59 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 48))(v58, v84, v50);
        uint64_t v60 = v72;
        (*v51)(v72, 1, 1, v64);
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 56))(v60, v59, v50);
        (*(void (**)(char *, uint64_t))v78)(v60, v73);
        uint64_t v61 = v58;
        uint64_t v46 = v74;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v71);
      }
      os_unfair_recursive_lock_unlock();
      if (v46)
      {
        swift_retain();
        Future.disassociate(_:)((uint64_t)v2);
        swift_release_n();
      }
      (*(void (**)(char *, void *))(v43 + 8))(v76, v44);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v40 = v78;
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v80 + 56))(v78, 1, 1, v82);
    uint64_t v42 = v79;
    uint64_t v41 = v77;
  }
  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
  os_unfair_lock_unlock(v65);
LABEL_16:
  (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v84);
}

uint64_t type metadata accessor for Future.Conduit.State()
{
  return swift_getGenericMetadata();
}

unsigned char *initializeWithCopy for Future.Conduit.State(unsigned char *__dst, unsigned __int8 *__src, void *a3)
{
  uint64_t v5 = *(void *)(a3[4] - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(a3[2] - 8);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  unint64_t v12 = (v6 + v10) & ~v10;
  if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
    uint64_t v13 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  if (v13 + v12 + 1 > v6) {
    unint64_t v14 = v13 + v12 + 1;
  }
  else {
    unint64_t v14 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (v6 + 1 > v14) {
    unint64_t v15 = v6 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  unsigned int v16 = __src[v15];
  unsigned int v17 = v16 - 3;
  if (v16 >= 3)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *__src;
        goto LABEL_19;
      case 2:
        int v19 = *(unsigned __int16 *)__src;
        goto LABEL_19;
      case 3:
        int v19 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_19;
      case 4:
        int v19 = *(_DWORD *)__src;
LABEL_19:
        int v20 = (v19 | (v17 << (8 * v15))) + 3;
        unsigned int v16 = v19 + 3;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v6] = __src[v6];
    char v27 = 2;
LABEL_42:
    __dst[v15] = v27;
    return __dst;
  }
  if (v16 == 1)
  {
    uint64_t v21 = ~v10;
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v22 = (unsigned __int8 *)((unint64_t)&__src[v11] & v21);
    unsigned int v23 = v22[v13];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v25 = v13;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v22;
          goto LABEL_36;
        case 2:
          int v26 = *(unsigned __int16 *)v22;
          goto LABEL_36;
        case 3:
          int v26 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(((unint64_t)&__src[v11] & v21) + 2) << 16);
          goto LABEL_36;
        case 4:
          int v26 = *(_DWORD *)v22;
LABEL_36:
          int v28 = (v26 | (v24 << (8 * v13))) + 2;
          unsigned int v23 = v26 + 2;
          if (v13 < 4) {
            unsigned int v23 = v28;
          }
          break;
        default:
          break;
      }
    }
    BOOL v29 = v23 == 1;
    if (v23 == 1) {
      uint64_t v30 = v9;
    }
    else {
      uint64_t v30 = v8;
    }
    (*(void (**)(unint64_t))(v30 + 16))((unint64_t)&__dst[v11] & v21);
    *(unsigned char *)(((unint64_t)&__dst[v11] & v21) + v13) = v29;
    char v27 = 1;
    goto LABEL_42;
  }
  if (v16)
  {
    memcpy(__dst, __src, v15 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v15] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for Future.Conduit.State(unsigned __int8 *__dst, unsigned __int8 *__src, void *a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = a3[4];
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v43 = a3[2];
    uint64_t v42 = *(void *)(v43 - 8);
    uint64_t v8 = *(void *)(a3[3] - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v42 + 80);
    uint64_t v10 = v7 + v9;
    unint64_t v11 = (v7 + v9) & ~v9;
    if (*(void *)(v8 + 64) <= *(void *)(v42 + 64)) {
      uint64_t v12 = *(void *)(*(void *)(v43 - 8) + 64);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 64);
    }
    if (v12 + v11 + 1 > v7) {
      unint64_t v13 = v12 + v11 + 1;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (v7 + 1 > v13) {
      unint64_t v14 = v7 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    unsigned int v15 = __dst[v14];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *__dst;
          if (v14 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 2:
          int v18 = *(unsigned __int16 *)__dst;
          if (v14 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 3:
          int v18 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          if (v14 < 4) {
            goto LABEL_21;
          }
          goto LABEL_19;
        case 4:
          int v18 = *(_DWORD *)__dst;
          if (v14 >= 4) {
LABEL_19:
          }
            unsigned int v15 = v18 + 3;
          else {
LABEL_21:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v9;
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        uint64_t v21 = (unsigned __int8 *)((unint64_t)&__dst[v10] & v19);
        unsigned int v22 = v21[v12];
        unsigned int v23 = v22 - 2;
        if (v22 >= 2)
        {
          if (v12 <= 3) {
            uint64_t v24 = v12;
          }
          else {
            uint64_t v24 = 4;
          }
          switch(v24)
          {
            case 1:
              int v25 = *v21;
              goto LABEL_37;
            case 2:
              int v25 = *(unsigned __int16 *)v21;
              goto LABEL_37;
            case 3:
              int v25 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(((unint64_t)&__dst[v10] & v19) + 2) << 16);
              goto LABEL_37;
            case 4:
              int v25 = *(_DWORD *)v21;
LABEL_37:
              int v26 = (v25 | (v23 << (8 * v12))) + 2;
              unsigned int v22 = v25 + 2;
              if (v12 < 4) {
                unsigned int v22 = v26;
              }
              break;
            default:
              break;
          }
        }
        if (v22 == 1) {
          int v20 = *(void (**)(void))(v8 + 8);
        }
        else {
          int v20 = *(void (**)(void))(v42 + 8);
        }
        goto LABEL_42;
      }
      if (v15) {
        goto LABEL_43;
      }
    }
    int v20 = *(void (**)(void))(v6 + 8);
LABEL_42:
    v20();
LABEL_43:
    unsigned int v27 = __src[v14];
    unsigned int v28 = v27 - 3;
    if (v27 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v29 = v14;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *__src;
          if (v14 < 4) {
            goto LABEL_64;
          }
          goto LABEL_51;
        case 2:
          int v30 = *(unsigned __int16 *)__src;
          if (v14 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_64;
        case 3:
          int v30 = *(unsigned __int16 *)__src | (__src[2] << 16);
          if (v14 < 4) {
            goto LABEL_64;
          }
          goto LABEL_51;
        case 4:
          int v30 = *(_DWORD *)__src;
          if (v14 >= 4)
          {
LABEL_51:
            unsigned int v27 = v30 + 3;
            break;
          }
LABEL_64:
          int v36 = v30 | (v28 << (8 * v14));
          unsigned int v27 = v36 + 3;
          if (v36 == -1) {
            goto LABEL_65;
          }
          goto LABEL_53;
        default:
          break;
      }
    }
    if (v27 == 2)
    {
LABEL_65:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      char v37 = 2;
    }
    else
    {
LABEL_53:
      if (v27 != 1)
      {
        if (v27)
        {
          memcpy(__dst, __src, v14 + 1);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
          __dst[v14] = 0;
        }
        return __dst;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      uint64_t v31 = (unsigned __int8 *)((unint64_t)&__src[v10] & v19);
      unsigned int v32 = v31[v12];
      unsigned int v33 = v32 - 2;
      if (v32 >= 2)
      {
        if (v12 <= 3) {
          uint64_t v34 = v12;
        }
        else {
          uint64_t v34 = 4;
        }
        switch(v34)
        {
          case 1:
            int v35 = *v31;
            goto LABEL_71;
          case 2:
            int v35 = *(unsigned __int16 *)v31;
            goto LABEL_71;
          case 3:
            int v35 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(((unint64_t)&__src[v10] & v19) + 2) << 16);
            goto LABEL_71;
          case 4:
            int v35 = *(_DWORD *)v31;
LABEL_71:
            int v38 = (v35 | (v33 << (8 * v12))) + 2;
            unsigned int v32 = v35 + 2;
            if (v12 < 4) {
              unsigned int v32 = v38;
            }
            break;
          default:
            break;
        }
      }
      BOOL v39 = v32 == 1;
      uint64_t v40 = v42;
      if (v32 == 1) {
        uint64_t v40 = v8;
      }
      (*(void (**)(unint64_t))(v40 + 32))((unint64_t)&__dst[v10] & v19);
      *(unsigned char *)(((unint64_t)&__dst[v10] & v19) + v12) = v39;
      char v37 = 1;
    }
    __dst[v14] = v37;
  }
  return __dst;
}

uint64_t Publishers.Map.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v24 = a1;
  uint64_t v25 = a5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v15 = (uint64_t *)(v6 + *(int *)(v14 + 44));
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  int v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v10;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v24;
  *((void *)v18 + 7) = a2;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  uint64_t v21 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v25, v13, v10);
  unsigned int v22 = (uint64_t (**)(uint64_t))(v21 + *(int *)(type metadata accessor for Publishers.Map() + 44));
  *unsigned int v22 = partial apply for closure #1 in Publishers.Map.map<A>(_:);
  v22[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v17, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v17, a3);
  int v18 = (void *)(a7 + *(int *)(a6(0, a3, a4, a5) + 44));
  *int v18 = a1;
  v18[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t type metadata accessor for Publishers.TryMap()
{
  return __swift_instantiateGenericMetadata();
}

void Future.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  type metadata accessor for ConduitList();
  ConduitList.remove(_:)(a1);
  swift_endAccess();
  os_unfair_lock_unlock(v3);
}

uint64_t ConduitList.remove(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)v1;
  if (!*(unsigned char *)(v1 + 8))
  {
    if (v3 != result) {
      return result;
    }
    __n128 result = outlined consume of ConduitList<A, Never><A>(*(void *)v1, 0);
    goto LABEL_11;
  }
  if (*(unsigned char *)(v1 + 8) != 1) {
    return result;
  }
  uint64_t v6 = *(void *)v1;
  type metadata accessor for ConduitBase();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for Set();
  Set.remove(_:)();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v4 = Set.count.getter();
  swift_bridgeObjectRelease();
  if (v4 != 1)
  {
    __n128 result = outlined consume of ConduitList<A, Never><A>(v3, 1);
    if (v4)
    {
      *(void *)uint64_t v2 = v6;
      *(unsigned char *)(v2 + 8) = 1;
      return result;
    }
    __n128 result = swift_bridgeObjectRelease();
LABEL_11:
    *(void *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 8) = 2;
    return result;
  }
  swift_getWitnessTable();
  __n128 result = Collection.first.getter();
  if (v5)
  {
    outlined consume of ConduitList<A, Never><A>(v3, 1);
    __n128 result = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v5;
    *(unsigned char *)(v2 + 8) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Future<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Future.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t Future.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v30 = a1;
  uint64_t v28 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8[10];
  uint64_t v10 = v8[12];
  uint64_t v33 = v8[11];
  uint64_t v34 = v9;
  uint64_t v32 = v10;
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v28 - v18;
  os_unfair_lock_t v31 = (os_unfair_lock_t)v4[2];
  os_unfair_lock_lock(v31);
  uint64_t v20 = (char *)v4 + *(void *)(*v4 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11);
  unsigned int v22 = (void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v35 = v34;
    uint64_t v36 = v33;
    uint64_t v37 = a2;
    uint64_t v38 = v29;
    type metadata accessor for Future.Conduit();
    (*v22)(v7, v30, a2);
    swift_allocObject();
    uint64_t v23 = swift_retain();
    uint64_t v24 = Future.Conduit.init(_:_:)(v23, (uint64_t)v7);
    swift_beginAccess();
    type metadata accessor for ConduitList();
    ConduitList.insert(_:)(v24);
    swift_endAccess();
    os_unfair_lock_unlock(v31);
    Future.Conduit.subscribe()();
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v11);
    uint64_t v35 = v34;
    uint64_t v36 = v33;
    uint64_t v37 = a2;
    uint64_t v38 = v29;
    type metadata accessor for Future.Conduit();
    (*v22)(v7, v30, a2);
    swift_allocObject();
    uint64_t v26 = swift_retain();
    uint64_t v27 = Future.Conduit.init(_:_:)(v26, (uint64_t)v7);
    swift_beginAccess();
    type metadata accessor for ConduitList();
    ConduitList.insert(_:)(v27);
    swift_endAccess();
    os_unfair_lock_unlock(v31);
    Future.Conduit.fulfill(_:)((uint64_t)v19);
    Future.Conduit.subscribe()();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v11);
  }
}

uint64_t type metadata accessor for Future.Conduit()
{
  return swift_getGenericMetadata();
}

uint64_t Future.Conduit.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  *((void *)v2 + 2) = 0;
  uint64_t v6 = *(void *)(v5 + 208);
  swift_retain();
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(void *)&v2[v6] = v7;
  uint64_t v8 = *(void *)(*(void *)v2 + 216);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(void *)&v2[v8] = v9;
  *((void *)v2 + 2) = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v5 + 176) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 200)], a2, *(void *)(v5 + 176));
  type metadata accessor for Future.Conduit.State();
  swift_storeEnumTagMultiPayload();
  swift_release();
  return ConduitBase.init()();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(uint64_t a1)
{
}

void Publishers.FlatMap.Outer.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v55 = a1;
  uint64_t v53 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v44 - v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v50 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v44 - v11;
  os_unfair_lock_t v54 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v54);
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v59, (uint64_t)(v1 + 3));
  swift_endAccess();
  *((unsigned char *)v1 + *(void *)(*v1 + 240)) = 1;
  uint64_t v51 = v8;
  uint64_t v52 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v55, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v13 = *(void *)(*v1 + 232);
    if (*((unsigned char *)v1 + v13)) {
      goto LABEL_6;
    }
    uint64_t v14 = (void *)((char *)v1 + *(void *)(*v1 + 208));
    swift_beginAccess();
    *(void *)&long long v56 = *v14;
    swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    type metadata accessor for Array();
    swift_getWitnessTable();
    if ((Collection.isEmpty.getter() & 1) == 0) {
      goto LABEL_6;
    }
    uint64_t v15 = (char *)v1 + *(void *)(*v1 + 184);
    swift_beginAccess();
    uint64_t v16 = *(void *)(*(void *)v15 + 16);
    uint64_t v17 = *(void *)((char *)v2 + *(void *)(*v2 + 200));
    BOOL v18 = __OFADD__(v16, v17);
    uint64_t v19 = v16 + v17;
    if (v18) {
      goto LABEL_38;
    }
    if (v19)
    {
LABEL_6:
      os_unfair_lock_unlock(v54);
    }
    else
    {
      *((unsigned char *)v2 + v13) = 1;
      os_unfair_lock_unlock(v54);
      os_unfair_recursive_lock_lock_with_options();
      uint64_t v43 = v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v50, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, void))(*(void *)(v53 + 120) + 56))(v43, *(void *)(v53 + 96));
      (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v52);
      os_unfair_recursive_lock_unlock();
    }
  }
  else
  {
    uint64_t v48 = v4;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v47 = v6;
    uint64_t v49 = AssociatedTypeWitness;
    v20(v6, v12, AssociatedTypeWitness);
    uint64_t v21 = *(void *)(*v1 + 232);
    int v46 = *((unsigned __int8 *)v1 + v21);
    *((unsigned char *)v1 + v21) = 1;
    unsigned int v22 = (void *)((char *)v1 + *(void *)(*v1 + 184));
    swift_beginAccess();
    os_unfair_lock_t v45 = v22;
    unint64_t v23 = *v22;
    uint64_t v24 = *(void *)(*v22 + 64);
    uint64_t v55 = *v22 + 64;
    uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    unint64_t v27 = v26 & v24;
    int64_t v28 = (unint64_t)(v25 + 63) >> 6;
    int64_t v44 = v28 - 1;
    swift_bridgeObjectRetain();
    int64_t v29 = 0;
    if (!v27) {
      goto LABEL_14;
    }
LABEL_12:
    unint64_t v32 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v33 = v32 | (v29 << 6);
LABEL_13:
    uint64_t v34 = *(void *)(v23 + 56);
    *(void *)&long long v56 = *(void *)(*(void *)(v23 + 48) + 8 * v33);
    outlined init with copy of Subscription(v34 + 40 * v33, (uint64_t)&v56 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v56, (uint64_t)v59);
      if (!v60)
      {
        swift_release();
        unint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
        *os_unfair_lock_t v45 = v38;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v54);
        uint64_t v39 = v49;
        uint64_t v40 = v48;
        uint64_t v41 = v47;
        if ((v46 & 1) == 0)
        {
          os_unfair_recursive_lock_lock_with_options();
          uint64_t v42 = v50;
          (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v50, v41, v39);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
          (*(void (**)(char *, void))(*(void *)(v53 + 120) + 56))(v42, *(void *)(v53 + 96));
          (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
          os_unfair_recursive_lock_unlock();
        }
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
        return;
      }
      outlined init with take of Subscription((long long *)((char *)v59 + 8), (uint64_t)&v56);
      uint64_t v31 = *((void *)&v57 + 1);
      uint64_t v30 = v58;
      __swift_project_boxed_opaque_existential_1(&v56, *((uint64_t *)&v57 + 1));
      (*(void (**)(uint64_t))(*(void *)(v30 + 8) + 8))(v31);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      if (v27) {
        goto LABEL_12;
      }
LABEL_14:
      int64_t v35 = v29 + 1;
      if (__OFADD__(v29, 1)) {
        break;
      }
      if (v35 < v28)
      {
        unint64_t v36 = *(void *)(v55 + 8 * v35);
        if (v36) {
          goto LABEL_17;
        }
        int64_t v37 = v29 + 2;
        ++v29;
        if (v35 + 1 < v28)
        {
          unint64_t v36 = *(void *)(v55 + 8 * v37);
          if (v36) {
            goto LABEL_20;
          }
          int64_t v29 = v35 + 1;
          if (v35 + 2 < v28)
          {
            unint64_t v36 = *(void *)(v55 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2;
              goto LABEL_17;
            }
            int64_t v37 = v35 + 3;
            int64_t v29 = v35 + 2;
            if (v35 + 3 < v28)
            {
              unint64_t v36 = *(void *)(v55 + 8 * v37);
              if (!v36)
              {
                while (1)
                {
                  int64_t v35 = v37 + 1;
                  if (__OFADD__(v37, 1)) {
                    goto LABEL_39;
                  }
                  if (v35 >= v28)
                  {
                    int64_t v29 = v44;
                    goto LABEL_31;
                  }
                  unint64_t v36 = *(void *)(v55 + 8 * v35);
                  ++v37;
                  if (v36) {
                    goto LABEL_17;
                  }
                }
              }
LABEL_20:
              int64_t v35 = v37;
LABEL_17:
              unint64_t v27 = (v36 - 1) & v36;
              unint64_t v33 = __clz(__rbit64(v36)) + (v35 << 6);
              int64_t v29 = v35;
              goto LABEL_13;
            }
          }
        }
      }
LABEL_31:
      unint64_t v27 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v56 = 0u;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
}

uint64_t initializeWithCopy for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v12 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v13 = *(void *)(v12 + 8);
    *(void *)unint64_t v11 = *(void *)v12;
    *(void *)(v11 + 8) = v13;
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 16))((*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

void protocol witness for Subscriber.receive(completion:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(uint64_t a1)
{
  AbstractCombineLatest.Side.receive(completion:)(a1, *v1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.Catch.Inner.UncaughtS.receive(_:));
}

void Publishers.Catch.Inner.UncaughtS.receive(_:)(uint64_t a1)
{
}

void Publishers.Catch.Inner.receivePre(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = v1[3];
  if (v6 != 0x8000000000000000)
  {
    if (v6 < 0)
    {
      __break(1u);
    }
    else if (v6)
    {
      v1[3] = v6 - 1;
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_5:
  os_unfair_lock_unlock(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48))(a1, *(void *)(v4 + 96));
  os_unfair_lock_lock(v5);
  uint64_t v8 = v2[3];
  if (v8 == 0x8000000000000000)
  {
LABEL_13:
    os_unfair_lock_unlock(v5);
    return;
  }
  unint64_t v9 = 0x8000000000000000;
  if (v7 == 0x8000000000000000)
  {
LABEL_12:
    v2[3] = v9;
    goto LABEL_13;
  }
  if ((v8 | v7) < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v9 = v8 + v7;
  if (__OFADD__(v8, v7))
  {
    unint64_t v9 = 0x8000000000000000;
    goto LABEL_12;
  }
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReplaceError<A>.Inner<A1>(void *a1)
{
  return Publishers.ReplaceError.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.ReplaceError.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.ReplaceError<A>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Timeout.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  uint64_t v19 = a1;
  uint64_t v20 = v3;
  uint64_t v4 = v2[13];
  uint64_t v5 = v2[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v10);
  uint64_t v11 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v11, (uint64_t)v21);
  if (v22)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v21);
    os_unfair_lock_unlock(v10);
  }
  else
  {
    outlined init with take of Subscription(v21, (uint64_t)v23);
    if (*(void *)((char *)v1 + *(void *)(*v1 + 200)))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    outlined init with copy of Subscription((uint64_t)v23, (uint64_t)v21);
    char v22 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v21, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    uint64_t v12 = (char *)v1 + *(void *)(*v1 + 168);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
    unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    int8x16_t v14 = (char *)swift_allocObject();
    *((void *)v14 + 2) = v5;
    int8x16_t v15 = v20;
    uint64_t v16 = v20[11];
    *((void *)v14 + 3) = v16;
    *((void *)v14 + 4) = v15[12];
    *((void *)v14 + 5) = v4;
    uint64_t v17 = v15[14];
    *((void *)v14 + 6) = v17;
    *((void *)v14 + 7) = v15[15];
    *((void *)v14 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v14[v13], v9, v6);
    uint64_t v18 = *(void (**)(char *, void (*)(), char *, uint64_t, uint64_t))(v17 + 56);
    swift_retain();
    v18(v12, partial apply for closure #1 in Publishers.Timeout.Inner.receive(completion:), v14, v16, v17);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
}

uint64_t CurrentValueSubject.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized CurrentValueSubject.value.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void specialized CurrentValueSubject.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (char *)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v5, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  CurrentValueSubject.send(_:)(a1);
}

uint64_t type metadata completion function for AsyncPublisher.Iterator.Inner()
{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.FlatMap.Outer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata completion function for PartialCompletion()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Multicast<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Multicast.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Multicast.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Multicast<A, B>.Inner<A1>;
    unint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Publishers.CombineLatest.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t v20 = a2[4];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[5];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = a4;
  type metadata accessor for CombineLatest2Inner();
  swift_allocObject();
  unint64_t v13 = specialized AbstractCombineLatest.init(downstream:upstreamCount:)(a1, 2);
  uint64_t v23 = 0;
  uint64_t v24 = v13;
  swift_retain();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = TupleTypeMetadata2;
  uint64_t v26 = v11;
  uint64_t v27 = a3;
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = v12;
  uint64_t v15 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v23, v8, v15, v20, WitnessTable);
  swift_release();
  uint64_t v23 = 1;
  uint64_t v24 = v13;
  swift_retain();
  uint64_t v25 = TupleTypeMetadata2;
  uint64_t v26 = v11;
  uint64_t v27 = a3;
  uint64_t v28 = v10;
  uint64_t v29 = v12;
  uint64_t v17 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v18 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v23, v21, v17, v22, v18);
  swift_release();
  AbstractCombineLatest.subscribe()();
  return swift_release();
}

uint64_t type metadata accessor for AbstractCombineLatest.Side()
{
  return swift_getGenericMetadata();
}

uint64_t AbstractCombineLatest.subscribe()()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void **)v0;
  uint64_t v3 = *(void *)(*(void *)v0 + 88);
  uint64_t v4 = v2[13];
  uint64_t v5 = v2[12];
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = type metadata accessor for Subscribers.Completion();
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v29 = (char *)v28 - v6;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v34 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)v28 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v28 - v14;
  uint64_t v16 = v2[14];
  v37[0] = v2[10];
  v37[1] = v3;
  uint64_t v17 = v1 + v16;
  v37[2] = v5;
  uint64_t v38 = v4;
  uint64_t v38 = type metadata accessor for AbstractCombineLatest();
  uint64_t v39 = &protocol witness table for AbstractCombineLatest<A, B, C>;
  v37[0] = v1;
  uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 40);
  swift_retain();
  v28[1] = v17;
  uint64_t v30 = v5;
  uint64_t v31 = v4;
  v18(v37, v5, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  os_unfair_lock_t v32 = *(os_unfair_lock_t *)(v1 + *(void *)(*(void *)v1 + 184));
  os_unfair_lock_lock(v32);
  *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 200)) = 1;
  uint64_t v19 = v1 + *(void *)(*(void *)v1 + 208);
  swift_beginAccess();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v15, v19, v7);
  uint64_t v21 = v33;
  uint64_t v22 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v13, 1, 1, v35);
  swift_beginAccess();
  uint64_t v36 = v8;
  uint64_t v23 = v19;
  uint64_t v24 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v23, v13, v7);
  swift_endAccess();
  os_unfair_lock_unlock(v32);
  v20(v24, (uint64_t)v15, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v24, 1, v22) == 1)
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
    v25(v15, v7);
    return ((uint64_t (*)(char *, uint64_t))v25)(v24, v7);
  }
  else
  {
    uint64_t v27 = v29;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v29, v24, v22);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(char *, uint64_t))(v31 + 56))(v27, v30);
    os_unfair_recursive_lock_unlock();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v15, v7);
  }
}

uint64_t type metadata accessor for AbstractCombineLatest()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized AbstractCombineLatest.init(downstream:upstreamCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 144)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 160)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 176)) = 0;
  uint64_t v6 = *(void *)(*v2 + 184);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*v2 + 192);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  *((unsigned char *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v10 = (uint64_t)v2 + *(void *)(*v2 + 208);
  uint64_t v11 = *(void *)(v5 + 96);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))((uint64_t)v2 + *(void *)(*v2 + 112), a1, v11);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 168)) = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = specialized Array.init(repeating:count:)((uint64_t)&v14, a2);
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 128)) = specialized Array.init(repeating:count:)((uint64_t)&v14, a2);
  return v2;
}

void storeEnumTagSinglePayload for Subscribers.Completion(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 <= 3)
  {
    unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      int v6 = 4;
      if (v9 < a2) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 1;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
    return;
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (a2) {
        goto LABEL_26;
      }
      break;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (a2) {
        goto LABEL_26;
      }
      break;
    case 3:
LABEL_39:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      break;
  }
}

uint64_t Publishers.Concatenate.Inner.prefixReceive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Concatenate<A, B>.Inner<A1>;
    unsigned int v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    BOOL v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance AbstractCombineLatest<A, B, C>.Side<A1>(void *a1)
{
  AbstractCombineLatest.Side.receive(subscription:)(a1, *v1);
}

void AbstractCombineLatest.Side.receive(subscription:)(void *a1, uint64_t a2)
{
}

void AbstractCombineLatest.receive(subscription:index:)(void *a1, uint64_t a2)
{
  if (*(void *)((char *)v3 + *(void *)(*v3 + 168)) <= a2)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v5 = a2;
  unint64_t v2 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(*v3 + 184));
  os_unfair_lock_lock(v2);
  if (*((unsigned char *)v3 + *(void *)(*v3 + 160)))
  {
LABEL_6:
    os_unfair_lock_unlock(v2);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v8);
    return;
  }
  uint64_t v4 = (char *)v3 + *(void *)(*v3 + 128);
  swift_beginAccess();
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
  if (*(void *)(*(void *)v4 + 16) <= v5)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *(void *)uint64_t v4 = v3;
    goto LABEL_9;
  }
  outlined init with copy of Any?(*(void *)v4 + 40 * v5 + 32, (uint64_t)v11, &demangling cache variable for type metadata for Subscription?);
  uint64_t v7 = v12;
  outlined destroy of CustomStringConvertible?((uint64_t)v11, &demangling cache variable for type metadata for Subscription?);
  if (v7) {
    goto LABEL_6;
  }
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
  swift_beginAccess();
  uint64_t v3 = *(void **)v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v4 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  if (v3[2] <= v5)
  {
    __break(1u);
  }
  else
  {
    outlined assign with take of Subscription?((uint64_t)v11, (uint64_t)&v3[5 * v5 + 4], &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
  }
}

uint64_t Publishers.Autoconnect.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Subscription(a1, (uint64_t)v10);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v5;
  v7[3] = v6;
  v7[4] = v4;
  void v11[3] = type metadata accessor for Publishers.Autoconnect.SideEffectSubscription();
  v11[4] = &protocol witness table for Publishers.Autoconnect<A>.SideEffectSubscription;
  uint64_t v8 = swift_allocObject();
  v11[0] = v8;
  swift_retain();
  outlined init with take of Subscription(v10, v8 + 32);
  *(void *)(v8 + 16) = partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:);
  *(void *)(v8 + 24) = v7;
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t Publishers.HandleEvents.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (void (*)(void *))v1[9];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    os_unfair_lock_lock(v4);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.HandleEvents<A>.Inner<A1>;
    unsigned int v13 = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    BOOL v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Publishers.MapKeyPath.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 48) + 40))(a1, *(void *)(a2 + 32));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.HandleEvents<A>.Inner<A1>(void *a1)
{
  return Publishers.HandleEvents.Inner.receive(subscription:)(a1);
}

uint64_t type metadata accessor for Publishers.Autoconnect.SideEffectSubscription()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance SubjectSubscriber<A>(void *a1)
{
  return SubjectSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(void *a1)
{
  return Publishers.SubscribeOn.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.SubscribeOn.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.SubscribeOn<A, B>.Inner<A1>;
    unsigned int v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    BOOL v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(void *a1)
{
  return Publishers.FlatMap.Outer.receive(subscription:)(a1);
}

uint64_t type metadata accessor for CombineLatest2Inner()
{
  return swift_getGenericMetadata();
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(void *a1)
{
}

void Publishers.Concatenate.Inner.SuffixSubscriber.receive(subscription:)(void *a1)
{
}

void Publishers.Concatenate.Inner.suffixReceive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 168));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v11);
  if (v14 == 2
    && (int8x16_t v5 = vorrq_s8(v12, v13),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v11)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v11);
    char v14 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v4);
    swift_endAccess();
    uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 160));
    os_unfair_lock_unlock(v3);
    if (v8)
    {
      uint64_t v9 = a1[3];
      uint64_t v10 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
    }
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.Catch.Inner.UncaughtS.receive(subscription:));
}

uint64_t Publishers.Catch.Inner.UncaughtS.receive(subscription:)(void *a1)
{
  return Publishers.Catch.Inner.receivePre(subscription:)(a1);
}

uint64_t Publishers.Catch.Inner.receivePre(completion:)(os_unfair_lock_s *a1)
{
  uint64_t v2 = v1;
  os_unfair_lock_t v59 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v49 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v48 = (char *)&v45 - v5;
  uint64_t v6 = v3[13];
  uint64_t v7 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v56 = (char *)&v45 - v9;
  uint64_t v10 = v3[14];
  uint64_t v11 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v53 = (char *)v11;
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v52 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v50 = (char *)&v45 - v13;
  uint64_t v14 = v3[12];
  uint64_t v15 = v3[15];
  uint64_t v61 = v7;
  uint64_t v62 = v4;
  uint64_t v54 = v14;
  uint64_t v63 = v14;
  uint64_t v64 = v6;
  uint64_t v46 = v10;
  uint64_t v65 = v10;
  uint64_t v66 = v15;
  uint64_t v55 = v15;
  uint64_t v16 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  long long v57 = (char *)&v45 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v45 - v23;
  uint64_t v47 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v58;
  swift_getAssociatedConformanceWitness();
  uint64_t v27 = type metadata accessor for Subscribers.Completion();
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v45 - v28;
  (*(void (**)(char *, os_unfair_lock_t))(v30 + 16))((char *)&v45 - v28, v59);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v29, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v31 = (os_unfair_lock_s *)v2[2];
    os_unfair_lock_lock(v31);
    os_unfair_lock_t v32 = (char *)v2 + *(void *)(*v2 + 144);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v32, v16);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v33 = v57;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v32, v33, v16);
      swift_endAccess();
      os_unfair_lock_unlock(v31);
      uint64_t v34 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(*((void *)v53 - 1) + 56))(v50, 1, 1);
      (*(void (**)(char *, uint64_t))(v55 + 56))(v34, v54);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
    }
    else
    {
      os_unfair_lock_unlock(v31);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, v16);
  }
  else
  {
    uint64_t v35 = v56;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v56, v29, AssociatedTypeWitness);
    os_unfair_lock_t v59 = (os_unfair_lock_t)v2[2];
    os_unfair_lock_lock(v59);
    uint64_t v36 = (char *)v2 + *(void *)(*v2 + 144);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v36, v16);
    uint64_t v53 = v20;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      os_unfair_lock_unlock(v59);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v35, AssociatedTypeWitness);
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v38 = v57;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v36, v38, v16);
      swift_endAccess();
      os_unfair_lock_unlock(v59);
      uint64_t v39 = v48;
      (*(void (**)(char *))((char *)v2 + *(void *)(*v2 + 160)))(v35);
      uint64_t v60 = v2;
      swift_retain();
      uint64_t v61 = v25;
      uint64_t v62 = v4;
      uint64_t v63 = v54;
      uint64_t v64 = v47;
      uint64_t v40 = v46;
      uint64_t v65 = v46;
      uint64_t v66 = v55;
      uint64_t v41 = type metadata accessor for Publishers.Catch.Inner.CaughtS();
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v60, v4, v41, v40, WitnessTable);
      swift_release();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v4);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      int64_t v44 = v57;
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v57, v35, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v44, 0, 1, AssociatedTypeWitness);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v36, v44, v16);
      swift_endAccess();
      os_unfair_lock_unlock(v59);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v53, v16);
  }
}

uint64_t Publishers.Catch.Inner.receivePre(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = a1;
  uint64_t v58 = (void *)*v1;
  uint64_t v3 = v58;
  uint64_t v4 = v58[11];
  uint64_t v60 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  os_unfair_lock_t v59 = (char *)&v53 - v5;
  uint64_t v6 = (void *)v58[13];
  uint64_t v7 = (void *)v58[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v62 = (char *)&v53 - v10;
  uint64_t v63 = v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v11 - 8);
  uint64_t v68 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v66 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = v3[12];
  uint64_t v17 = (_UNKNOWN **)v3[14];
  uint64_t v18 = v3[15];
  long long v56 = v7;
  uint64_t v71 = v7;
  uint64_t v72 = v4;
  uint64_t v61 = v4;
  uint64_t v73 = v16;
  uint64_t v74 = v6;
  long long v57 = v6;
  uint64_t v75 = v17;
  uint64_t v76 = v18;
  uint64_t v64 = v18;
  uint64_t v19 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v26);
  uint64_t v27 = (char *)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v27, v19);
  if (swift_getEnumCaseMultiPayload())
  {
    os_unfair_lock_unlock(v26);
    uint64_t v28 = v69[3];
    uint64_t v29 = v69[4];
    __swift_project_boxed_opaque_existential_1(v69, v28);
    (*(void (**)(uint64_t))(*(void *)(v29 + 8) + 8))(v28);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v19);
  }
  else
  {
    uint64_t v54 = v17;
    uint64_t v55 = v16;
    uint64_t v31 = v62;
    uint64_t v32 = v67;
    uint64_t v33 = v25;
    uint64_t v34 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v15, v33, v68);
    uint64_t v35 = v32;
    uint64_t v36 = v15;
    int64_t v37 = v66;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v66, v36, v34);
    uint64_t v38 = v63;
    int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48))(v37, 1, v63);
    uint64_t v40 = (uint64_t)v23;
    if (v39 == 1)
    {
      uint64_t v41 = *(void (**)(char *, uint64_t))(v67 + 8);
      uint64_t v42 = v36;
      uint64_t v43 = v68;
      v41(v66, v68);
      outlined init with copy of Subscription((uint64_t)v69, v40);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 40))(v27, v40, v19);
      swift_endAccess();
      os_unfair_lock_unlock(v26);
      uint64_t v74 = v58;
      uint64_t v75 = &protocol witness table for Publishers.Catch<A, B>.Inner<A1>;
      uint64_t v71 = v2;
      uint64_t v44 = v64;
      uint64_t v45 = *(void (**)(void **, uint64_t, uint64_t))(v64 + 40);
      swift_retain();
      v45(&v71, v55, v44);
      v41(v42, v43);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
    }
    else
    {
      uint64_t v46 = v36;
      uint64_t v47 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v31, v66, v38);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 40))(v27, v40, v19);
      swift_endAccess();
      os_unfair_lock_unlock(v26);
      uint64_t v48 = v59;
      (*(void (**)(char *))((char *)v2 + *(void *)(*v2 + 160)))(v31);
      uint64_t v70 = v2;
      swift_retain();
      uint64_t v49 = v61;
      uint64_t v71 = v56;
      uint64_t v72 = v61;
      uint64_t v73 = v55;
      uint64_t v74 = v57;
      uint64_t v50 = (uint64_t)v54;
      uint64_t v75 = v54;
      uint64_t v76 = v64;
      uint64_t v51 = type metadata accessor for Publishers.Catch.Inner.CaughtS();
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v70, v49, v51, v50, WitnessTable);
      swift_release();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v49);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v46, v68);
    }
  }
}

unsigned __int8 *assignWithTake for Publishers.TryCatch.Inner.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 0x28) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = v6;
  }
  char v8 = 8 * v7;
  if (v7 > 3)
  {
LABEL_11:
    unsigned int v10 = a1[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      unsigned int v10 = *(unsigned __int16 *)&a1[v7];
      unsigned int v11 = v10 - 3;
      if (v10 < 3) {
        goto LABEL_29;
      }
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  unsigned int v10 = *(_DWORD *)&a1[v7];
  unsigned int v11 = v10 - 3;
  if (v10 < 3) {
    goto LABEL_29;
  }
LABEL_16:
  if (v7 <= 3) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 4;
  }
  switch(v12)
  {
    case 1:
      int v13 = *a1;
      if (v7 < 4) {
        goto LABEL_27;
      }
      goto LABEL_28;
    case 2:
      int v13 = *(unsigned __int16 *)a1;
      if (v7 >= 4) {
        goto LABEL_28;
      }
      goto LABEL_27;
    case 3:
      int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      if (v7 >= 4) {
        goto LABEL_28;
      }
      goto LABEL_27;
    case 4:
      int v13 = *(_DWORD *)a1;
      if (v7 < 4) {
LABEL_27:
      }
        v13 |= v11 << v8;
LABEL_28:
      unsigned int v10 = v13 + 3;
      break;
    default:
      break;
  }
LABEL_29:
  if (v10 == 2 || v10 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    if (v7 > 3) {
      goto LABEL_39;
    }
  }
  else
  {
    if (!v10
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    if (v7 > 3)
    {
LABEL_39:
      unsigned int v15 = a2[v7];
      unsigned int v16 = v15 - 3;
      if (v15 < 3) {
        goto LABEL_57;
      }
      goto LABEL_44;
    }
  }
  unsigned int v14 = ((1 << v8) + 1) >> v8;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)&a2[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_57;
    }
    goto LABEL_44;
  }
  if (v14 <= 0xFC) {
    goto LABEL_39;
  }
  unsigned int v15 = *(unsigned __int16 *)&a2[v7];
  unsigned int v16 = v15 - 3;
  if (v15 < 3) {
    goto LABEL_57;
  }
LABEL_44:
  if (v7 <= 3) {
    uint64_t v17 = v7;
  }
  else {
    uint64_t v17 = 4;
  }
  switch(v17)
  {
    case 1:
      int v18 = *a2;
      if (v7 < 4) {
        goto LABEL_55;
      }
      goto LABEL_56;
    case 2:
      int v18 = *(unsigned __int16 *)a2;
      if (v7 >= 4) {
        goto LABEL_56;
      }
      goto LABEL_55;
    case 3:
      int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      if (v7 >= 4) {
        goto LABEL_56;
      }
      goto LABEL_55;
    case 4:
      int v18 = *(_DWORD *)a2;
      if (v7 < 4) {
LABEL_55:
      }
        v18 |= v16 << v8;
LABEL_56:
      unsigned int v15 = v18 + 3;
      break;
    default:
      break;
  }
LABEL_57:
  switch(v15)
  {
    case 2u:
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      if (v7 <= 3)
      {
        unsigned int v20 = ((1 << v8) + 1) >> v8;
        if (v20 > 0xFFFC)
        {
          int v22 = 2;
          goto LABEL_82;
        }
        if (v20 > 0xFC)
        {
          LOWORD(v22) = 2;
          goto LABEL_85;
        }
      }
      a1[v7] = 2;
      return a1;
    case 1u:
      long long v21 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v21;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      if (v7 > 3)
      {
LABEL_70:
        a1[v7] = 1;
        return a1;
      }
      int v22 = 1;
      unsigned int v23 = ((1 << v8) + 1) >> v8;
      if (v23 <= 0xFFFC)
      {
        if (v23 <= 0xFC) {
          goto LABEL_70;
        }
LABEL_85:
        *(_WORD *)&a1[v7] = v22;
        return a1;
      }
LABEL_82:
      *(_DWORD *)&a1[v7] = v22;
      return a1;
    case 0u:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
        if (v7 > 3) {
          goto LABEL_80;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_80:
          a1[v7] = 0;
          return a1;
        }
      }
      unsigned int v26 = ((1 << v8) + 1) >> v8;
      if (v26 > 0xFFFC)
      {
        *(_DWORD *)&a1[v7] = 0;
        return a1;
      }
      if (v26 > 0xFC)
      {
        *(_WORD *)&a1[v7] = 0;
        return a1;
      }
      goto LABEL_80;
  }
  if (v7 > 3) {
    goto LABEL_75;
  }
  unsigned int v24 = ((1 << v8) + 1) >> v8;
  uint64_t v25 = 2;
  if (v24 > 0xFFFC) {
    uint64_t v25 = 4;
  }
  if (v24 <= 0xFC) {
LABEL_75:
  }
    uint64_t v25 = 1;
  memcpy(a1, a2, v25 + v7);
  return a1;
}

void Publishers.Catch.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  long long v4 = *(_OWORD *)(*v1 + 96);
  long long v18 = *(_OWORD *)(*v1 + 80);
  long long v19 = v4;
  long long v20 = *(_OWORD *)(v3 + 112);
  uint64_t v5 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (long long *)((char *)&v17 - v7);
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_4:
  unsigned int v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  unsigned int v10 = (char *)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(long long *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of Subscription(v8, (uint64_t)&v18);
      uint64_t v11 = v1[3];
      unint64_t v12 = 0x8000000000000000;
      if (v11 == 0x8000000000000000) {
        goto LABEL_20;
      }
      if (a1 == 0x8000000000000000) {
        goto LABEL_19;
      }
      if ((v11 | a1) < 0) {
        goto LABEL_27;
      }
      unint64_t v12 = v11 + a1;
      if (__OFADD__(v11, a1))
      {
        unint64_t v12 = 0x8000000000000000;
      }
      else if ((v12 & 0x8000000000000000) != 0)
      {
        goto LABEL_29;
      }
LABEL_19:
      v1[3] = v12;
LABEL_20:
      os_unfair_lock_unlock(v9);
      uint64_t v15 = *((void *)&v19 + 1);
      uint64_t v16 = v20;
      __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(a1, v15, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      return;
    case 2u:
      outlined init with take of Subscription(v8, (uint64_t)&v18);
      goto LABEL_20;
    case 3u:
      uint64_t v13 = v1[3];
      unint64_t v14 = 0x8000000000000000;
      if (v13 == 0x8000000000000000) {
        goto LABEL_23;
      }
      if (a1 == 0x8000000000000000) {
        goto LABEL_22;
      }
      if ((v13 | a1) < 0) {
        goto LABEL_28;
      }
      unint64_t v14 = v13 + a1;
      if (__OFADD__(v13, a1))
      {
        unint64_t v14 = 0x8000000000000000;
      }
      else if ((v14 & 0x8000000000000000) != 0)
      {
        goto LABEL_30;
      }
LABEL_22:
      v1[3] = v14;
LABEL_23:
      os_unfair_lock_unlock(v9);
      break;
    case 4u:
      goto LABEL_23;
    default:
      goto LABEL_31;
  }
}

uint64_t type metadata accessor for Publishers.Catch.Inner.State()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.TryCatch.Inner.State(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 0x28) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v7 > 3) {
    goto LABEL_10;
  }
  unsigned int v8 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  if (v8 > 0xFFFC)
  {
    unsigned int v9 = *(_DWORD *)&a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  if (v8 > 0xFC)
  {
    unsigned int v9 = *(unsigned __int16 *)&a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_10:
    unsigned int v9 = a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
  }
LABEL_15:
  if (v7 <= 3) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = 4;
  }
  switch(v11)
  {
    case 1:
      int v12 = *a2;
      goto LABEL_23;
    case 2:
      int v12 = *(unsigned __int16 *)a2;
      goto LABEL_23;
    case 3:
      int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      goto LABEL_23;
    case 4:
      int v12 = *(_DWORD *)a2;
LABEL_23:
      int v13 = (v12 | (v10 << (8 * v7))) + 3;
      unsigned int v9 = v12 + 3;
      if (v7 < 4) {
        unsigned int v9 = v13;
      }
      break;
    default:
      break;
  }
LABEL_25:
  switch(v9)
  {
    case 2u:
      long long v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, unsigned __int8 *))(v14 - 8))(a1, a2);
      if (v7 <= 3)
      {
        unsigned int v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
        if (v15 > 0xFFFC)
        {
          int v17 = 2;
          goto LABEL_50;
        }
        if (v15 > 0xFC)
        {
          LOWORD(v17) = 2;
          goto LABEL_53;
        }
      }
      *(unsigned char *)(a1 + v7) = 2;
      return a1;
    case 1u:
      long long v16 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, unsigned __int8 *))(v16 - 8))(a1, a2);
      if (v7 > 3)
      {
LABEL_38:
        *(unsigned char *)(a1 + v7) = 1;
        return a1;
      }
      int v17 = 1;
      unsigned int v18 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v18 <= 0xFFFC)
      {
        if (v18 <= 0xFC) {
          goto LABEL_38;
        }
LABEL_53:
        *(_WORD *)(a1 + v7) = v17;
        return a1;
      }
LABEL_50:
      *(_DWORD *)(a1 + v7) = v17;
      return a1;
    case 0u:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy((void *)a1, a2, v6);
        if (v7 > 3) {
          goto LABEL_48;
        }
      }
      else
      {
        (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_48:
          *(unsigned char *)(a1 + v7) = 0;
          return a1;
        }
      }
      unsigned int v21 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v21 > 0xFFFC)
      {
        *(_DWORD *)(a1 + v7) = 0;
        return a1;
      }
      if (v21 > 0xFC)
      {
        *(_WORD *)(a1 + v7) = 0;
        return a1;
      }
      goto LABEL_48;
  }
  if (v7 > 3) {
    goto LABEL_43;
  }
  unsigned int v19 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  uint64_t v20 = 2;
  if (v19 > 0xFFFC) {
    uint64_t v20 = 4;
  }
  if (v19 <= 0xFC) {
LABEL_43:
  }
    uint64_t v20 = 1;
  memcpy((void *)a1, a2, v20 + v7);
  return a1;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Catch<A, B>.Inner<A1>(uint64_t a1)
{
}

char *Publishers.Catch.Inner.deinit(uint64_t (*a1)(void, _OWORD *))
{
  uint64_t v3 = *(_OWORD **)v1;
  MEMORY[0x18C13C4B0](*((void *)v1 + 2), -1, -1);
  long long v4 = &v1[*(void *)(*(void *)v1 + 144)];
  long long v8 = v3[6];
  v9[0] = v3[5];
  long long v5 = v3[7];
  v9[1] = v8;
  v9[2] = v5;
  uint64_t v6 = a1(0, v9);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
  (*(void (**)(char *))(*(void *)(v8 - 8) + 8))(&v1[*(void *)(*(void *)v1 + 152)]);
  swift_release();
  return v1;
}

uint64_t destroy for Publishers.TryCatch.Inner.State(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 0x28) {
    unint64_t v5 = 40;
  }
  if (v5 > 3) {
    goto LABEL_7;
  }
  unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v7 > 0xFFFC)
  {
    unsigned int v6 = *(_DWORD *)&a1[v5];
  }
  else
  {
    if (v7 <= 0xFC)
    {
LABEL_7:
      unsigned int v6 = a1[v5];
      goto LABEL_12;
    }
    unsigned int v6 = *(unsigned __int16 *)&a1[v5];
  }
LABEL_12:
  unsigned int v8 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_21;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_21;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_21;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_21:
        int v11 = (v10 | (v8 << (8 * v5))) + 3;
        unsigned int v6 = v10 + 3;
        if (v5 < 4) {
          unsigned int v6 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 2 || v6 == 1)
  {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else if (!v6)
  {
    uint64_t v13 = *(void *)(result - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(a1, 1, result);
    if (!result)
    {
      int v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v13 + 8);
      return v12(a1, v3);
    }
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Buffer<A>.Inner<A1>(void *a1)
{
  return Publishers.Buffer.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Buffer.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v2;
  unint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  uint64_t v6 = v2 + *(void *)(*(void *)v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v17);
  if (v20 == 2)
  {
    int8x16_t v7 = vorrq_s8(v18, v19);
    if (!(*(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v17))
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v17);
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v17);
      char v20 = 0;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v17, v6);
      uint64_t result = swift_endAccess();
      if (*(unsigned char *)(v2 + 40))
      {
        unint64_t v11 = 0x8000000000000000;
      }
      else
      {
        unint64_t v11 = *(void *)(v2 + 32);
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
          return result;
        }
      }
      os_unfair_lock_unlock(v5);
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
      v19.i64[0] = v4;
      v19.i64[1] = (uint64_t)&protocol witness table for Publishers.Buffer<A>.Inner<A1>;
      uint64_t v17 = v2;
      uint64_t v14 = *(void *)(v4 + 104);
      unsigned int v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 40);
      uint64_t v16 = *(void *)(v4 + 88);
      swift_retain();
      v15(&v17, v16, v14);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    }
  }
  outlined destroy of SubscriptionStatus((uint64_t)&v17);
  os_unfair_lock_unlock(v5);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v8);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Result<A, B>.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Result.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void Publishers.SwitchToLatest.Outer.Side.receive(subscription:)(void *a1)
{
  Publishers.SwitchToLatest.Outer.receiveInner(subscription:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(subscription:_:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
  uint64_t v6 = *v2;
  if (*(uint64_t *)((char *)v2 + *(void *)(*v2 + 152)) != a2
    || (*((unsigned char *)v2 + *(void *)(v6 + 184)) & 1) != 0
    || (uint64_t v7 = (uint64_t)v2 + *(void *)(v6 + 144),
        swift_beginAccess(),
        outlined init with copy of Subscription?(v7, (uint64_t)v14),
        uint64_t v8 = v15,
        outlined destroy of Subscription?((uint64_t)v14),
        v8))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    uint64_t v10 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v14, v7);
    swift_endAccess();
    *((unsigned char *)v2 + *(void *)(*v2 + 208)) = 0;
    uint64_t v11 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 216));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v5));
    if (v11 == 0x8000000000000000) {
      goto LABEL_9;
    }
    if (v11 < 0)
    {
      __break(1u);
      return;
    }
    if (v11)
    {
LABEL_9:
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v11, v12, v13);
    }
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Subscribers.Assign<A, B>(void *a1)
{
  return Subscribers.Assign.receive(subscription:)(a1);
}

uint64_t Subscribers.Assign.receive(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v11);
  if (v14 == 2
    && (int8x16_t v5 = vorrq_s8(v12, v13),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v11)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v11);
    char v14 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(uint64_t a1)
{
}

void Publishers.SwitchToLatest.Outer.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v3 = *(void *)(*v1 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 216);
  uint64_t v6 = *(uint64_t *)((char *)v1 + v5);
  if (v6 == 0x8000000000000000) {
    goto LABEL_12;
  }
  unint64_t v7 = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    goto LABEL_11;
  }
  if ((v6 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v7 = v6 + a1;
  if (!__OFADD__(v6, a1))
  {
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return;
  }
  unint64_t v7 = 0x8000000000000000;
LABEL_11:
  *(uint64_t *)((char *)v1 + v5) = v7;
  uint64_t v4 = *v1;
LABEL_12:
  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 144);
  swift_beginAccess();
  outlined init with copy of Subscription?(v8, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v13);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v11);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Output<A>.Inner<A1>(void *a1)
{
  return Publishers.Output.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Output<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t Publishers.Output.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 144));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Output<A>.Inner<A1>;
    int8x16_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    long long v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

void Publishers.Output.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 144));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v7);
  int v6 = v10;
  outlined destroy of SubscriptionStatus((uint64_t)&v7);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    uint64_t v7 = 1;
    long long v8 = 0u;
    long long v9 = 0u;
    unsigned __int8 v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 104) + 56))(a1, *(void *)(v3 + 88));
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Retry<A>.Inner<A1>(void *a1)
{
}

uint64_t type metadata completion function for SubjectSubscriber()
{
  return swift_initClassMetadata2();
}

_DWORD *one-time initialization function for globalLock()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static DebugHook.globalLock = (uint64_t)result;
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Catch<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for CombineLatest3Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for Publishers.Filter.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Publishers.Sequence.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Sequence.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t Publishers.Sequence.Inner.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 200)), -1, -1);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 168);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 176);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t Publishers.Multicast.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Multicast.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.Multicast.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 136)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 144)]);
  return v0;
}

uint64_t partial apply for closure #2 in Publishers.Timeout.Inner.timeoutClock()()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

Swift::Void __swiftcall FilterProducer.cancel()()
{
  uint64_t v1 = *(_OWORD **)v0;
  uint64_t v2 = *(_OWORD **)v0;
  uint64_t v3 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 160);
  swift_beginAccess();
  uint64_t v5 = *((void *)v1 + 16);
  long long v6 = v2[6];
  long long v14 = v2[5];
  long long v15 = v6;
  long long v16 = v2[7];
  uint64_t v17 = v5;
  uint64_t v7 = type metadata accessor for FilterProducer.State();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v8 + 16))(&v14, v4, v7);
  if (*((void *)&v15 + 1) >= 2uLL)
  {
    outlined init with take of Subscription(&v14, (uint64_t)v12);
    memset(v10, 0, sizeof(v10));
    long long v11 = xmmword_18C0BA640;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 40))(v4, v10, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    long long v9 = v13;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8) + 8))(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    long long v13 = xmmword_18C0BA640;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 40))(v4, v12, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    (*(void (**)(long long *, uint64_t))(v8 + 8))(&v14, v7);
  }
}

uint64_t Publishers.Output.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned __int8 v10 = (char *)&v23 - v9;
  uint64_t v11 = v4[16];
  uint64_t v12 = *(void *)(v1 + v11);
  BOOL v13 = v12 < 1;
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    uint64_t v16 = v5[17];
    uint64_t v17 = *(void *)(v1 + v16);
    if (v17 < 1)
    {
      uint64_t v15 = 0;
      if (v17) {
        return v15;
      }
    }
    else
    {
      *(void *)(v1 + v16) = v17 - 1;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, void))(v5[13] + 48))(a1, v5[11]);
      if (*(void *)(v1 + v16)) {
        return v15;
      }
    }
    int8x16_t v18 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 144));
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + *(void *)(*(void *)v2 + 144)));
    uint64_t v19 = v2 + *(void *)(*(void *)v2 + 120);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v19, (uint64_t)&v24);
    if (v27)
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v24);
      os_unfair_lock_unlock(v18);
    }
    else
    {
      outlined init with take of Subscription((long long *)&v24, (uint64_t)v28);
      uint64_t v24 = 1;
      long long v25 = 0u;
      long long v26 = 0u;
      char v27 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v24, v19);
      swift_endAccess();
      os_unfair_lock_unlock(v18);
      uint64_t v21 = v29;
      uint64_t v20 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 8))(v21);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v10, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, void))(v5[13] + 56))(v10, v5[11]);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
  }
  else
  {
    *(void *)(v1 + v11) = v14;
    return 1;
  }
  return v15;
}

uint64_t protocol witness for Cancellable.cancel() in conformance AbstractCombineLatest<A, B, C>()
{
  return AbstractCombineLatest.cancel()();
}

uint64_t AbstractCombineLatest.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 184));
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
  swift_beginAccess();
  uint64_t v3 = *v2;
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 160)) = 1;
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = *(void *)(v0 + *(void *)(*(void *)v0 + 168));
  swift_bridgeObjectRetain();
  *uint64_t v2 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  swift_bridgeObjectRelease();
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = specialized Array.init(repeating:count:)((uint64_t)&v12, v4);
  long long v6 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 120));
  swift_beginAccess();
  *long long v6 = v5;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1);
  uint64_t v7 = *(void *)(v3 + 16);
  if (v7)
  {
    uint64_t v8 = v3 + 32;
    do
    {
      outlined init with copy of Any?(v8, (uint64_t)&v12, &demangling cache variable for type metadata for Subscription?);
      uint64_t v10 = *((void *)&v13 + 1);
      if (*((void *)&v13 + 1))
      {
        uint64_t v9 = v14;
        __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
        (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
      }
      else
      {
        outlined destroy of CustomStringConvertible?((uint64_t)&v12, &demangling cache variable for type metadata for Subscription?);
      }
      v8 += 40;
      --v7;
    }
    while (v7);
  }
  return swift_bridgeObjectRelease();
}

uint64_t Publishers.CollectByCount.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v11 + 24);
  v20[0] = *(void *)(v11 + 16);
  uint64_t v12 = v20[0];
  v20[1] = v14;
  void v20[2] = v13;
  v20[3] = v15;
  uint64_t v16 = type metadata accessor for Publishers.CollectByCount.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v17 = *(void *)(v4 + *(int *)(a2 + 36));
  swift_allocObject();
  v20[0] = Publishers.CollectByCount.Inner.init(downstream:count:)((uint64_t)v10, v17);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v20, v12, v16, v13, WitnessTable);
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Filter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Filter.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Filter.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v26 = *(void *)(v10 + 16);
  uint64_t v12 = v26;
  uint64_t v27 = v13;
  uint64_t v28 = v11;
  uint64_t v29 = v14;
  uint64_t v15 = type metadata accessor for Publishers.Filter.Inner();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int8x16_t v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, a3);
  uint64_t v19 = (uint64_t *)(v4 + *(int *)(a2 + 36));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  swift_retain();
  Publishers.Filter.Inner.init(downstream:filter:)((uint64_t)v9, v20, v21, a3, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v12, v15, v11, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t destroy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_release();
}

uint64_t Publishers.SubscribeOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v38 = a3;
  uint64_t v39 = a1;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v41 = a4;
  uint64_t v42 = v7;
  uint64_t v40 = *(void *)(v7 + 64);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v33 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(v13 + 40);
  uint64_t v14 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v36 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v5 + *(int *)(a2 + 52), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5 + *(int *)(a2 + 56), v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v5, a2);
  uint64_t v23 = v42;
  uint64_t v24 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v43, v39, v38);
  unint64_t v25 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v26 = (v12 + *(unsigned __int8 *)(v23 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = *(void *)(a2 + 16);
  *((void *)v27 + 3) = v14;
  uint64_t v28 = *(void *)(a2 + 32);
  *((void *)v27 + 4) = v24;
  *((void *)v27 + 5) = v28;
  uint64_t v29 = v37;
  uint64_t v30 = v41;
  *((void *)v27 + 6) = v37;
  *((void *)v27 + 7) = v30;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v25], v33, a2);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v27[v26], v43, v24);
  (*(void (**)(char *, uint64_t (*)(), char *, uint64_t, uint64_t))(v29 + 56))(v19, partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:), v27, v14, v29);
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, v14);
}

void Publishers.Filter.Inner.init(downstream:filter:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for Publishers.Filter.Inner();
  uint64_t v9 = (void *)(a5 + *(int *)(v8 + 52));
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(int *)(v8 + 56);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(void *)(a5 + v10) = v12;
  }
}

uint64_t type metadata accessor for Publishers.Filter.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.SetFailureType.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  uint64_t v21 = a4;
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[4];
  uint64_t v12 = v8[5];
  uint64_t v23 = v8[2];
  uint64_t v9 = v23;
  uint64_t v24 = v10;
  uint64_t v25 = v13;
  uint64_t v26 = v10;
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  uint64_t v29 = v14;
  uint64_t v15 = type metadata accessor for Publishers.SetFailureType.Inner();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v22, a3);
  Publishers.SetFailureType.Inner.init(downstream:)((uint64_t)v7, a3, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v9, v15, v11, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t destroy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 32) - 8) + 8))();
}

uint64_t type metadata accessor for Publishers.SetFailureType.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.SetFailureType.Inner.init(downstream:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v4 = *(int *)(type metadata accessor for Publishers.SetFailureType.Inner() + 76);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v5 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v6 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v5);
    *(void *)(a3 + v4) = v6;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Empty<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Empty.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Empty.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  int v12 = *v4;
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, a4);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v11, 1, 1, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 56))(v11, a3, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

void closure #1 in Publishers.Debounce.Inner.receive(_:)(void *a1, uint64_t a2)
{
  uint64_t v63 = *a1;
  uint64_t v4 = *(void *)(v63 + 112);
  uint64_t v5 = *(void *)(v63 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v59 = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  long long v56 = (char *)&v54 - v7;
  uint64_t v8 = *(void *)(v63 + 96);
  uint64_t v65 = *(void *)(v63 + 120);
  uint64_t v64 = v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v54 - v13;
  uint64_t v15 = v9;
  uint64_t v62 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v61 = (char *)&v54 - v16;
  uint64_t v17 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v17);
  uint64_t v18 = (uint64_t)a1 + *(void *)(*a1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v66);
  outlined init with copy of SubscriptionStatus((uint64_t)&v66, (uint64_t)v75);
  LODWORD(v18) = v75[40];
  outlined destroy of SubscriptionStatus((uint64_t)v75);
  outlined destroy of SubscriptionStatus((uint64_t)&v66);
  if (v18 > 1)
  {
    uint64_t v28 = v17;
    goto LABEL_8;
  }
  os_unfair_lock_t v55 = v17;
  uint64_t v19 = *a1;
  if (*(void *)((char *)a1 + *(void *)(*a1 + 200)) != a2) {
    goto LABEL_5;
  }
  uint64_t v20 = (char *)a1 + *(void *)(*a1 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v20, v10);
  uint64_t v21 = v62;
  uint64_t v22 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v14, 1, v15) != 1)
  {
    uint64_t v34 = v61;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v61, v14, v15);
    uint64_t v35 = (void *)((char *)a1 + *(void *)(*a1 + 184));
    swift_beginAccess();
    uint64_t v36 = v21;
    uint64_t v37 = *v35;
    uint64_t v38 = *(void *)(v63 + 104);
    uint64_t v66 = *(void *)(v63 + 80);
    uint64_t v67 = v5;
    uint64_t v68 = v64;
    *(void *)&long long v69 = v38;
    *((void *)&v69 + 1) = v4;
    uint64_t v70 = v65;
    uint64_t v71 = a2;
    uint64_t v39 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
    MEMORY[0x18C13B5A0](v72, &v71, v37, MEMORY[0x1E4FBC538], v39, MEMORY[0x1E4FBC548]);
    if (v73 == 2)
    {
      uint64_t v40 = type metadata accessor for Optional();
      (*(void (**)(void *, uint64_t))(*(void *)(v40 - 8) + 8))(v72, v40);
      swift_endAccess();
      os_unfair_lock_unlock(v55);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v22);
      return;
    }
    uint64_t v41 = *(void *)(v39 - 8);
    (*(void (**)(unsigned char *, void *, uint64_t))(v41 + 32))(v75, v72, v39);
    swift_endAccess();
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v41 + 16))(&v66, v75, v39);
    uint64_t v42 = v69;
    uint64_t v63 = *(void *)(v41 + 8);
    ((void (*)(uint64_t *, uint64_t))v63)(&v66, v39);
    uint64_t v43 = v55;
    uint64_t v67 = 0;
    uint64_t v66 = 0;
    uint64_t v68 = 0;
    if (v42)
    {
      long long v69 = xmmword_18C0C1FE0;
      uint64_t v74 = a2;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_endAccess();
      int v44 = 2;
    }
    else
    {
      long long v69 = xmmword_18C0BA640;
      uint64_t v74 = a2;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_endAccess();
      uint64_t v45 = v59;
      swift_getAssociatedConformanceWitness();
      uint64_t v46 = v56;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      swift_getAssociatedConformanceWitness();
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = v46;
      uint64_t v43 = v55;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v45);
      int v44 = v47 & 1;
    }
    uint64_t v49 = *(void *)(*a1 + 208);
    uint64_t v50 = *(void *)((char *)a1 + v49);
    if (v50 == 0x8000000000000000)
    {
      if (v44 == 2) {
        LOBYTE(v44) = 1;
      }
    }
    else
    {
      if (v50 < 0)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v50 && v44 == 2)
      {
        *(void *)((char *)a1 + v49) = v50 - 1;
        LOBYTE(v44) = 1;
      }
    }
    os_unfair_lock_unlock(v43);
    Publishers.Debounce.Inner.CancellerState.cancel()(v39);
    if ((v44 & 1) == 0) {
      goto LABEL_39;
    }
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v65 + 48))(v61, v64);
    os_unfair_recursive_lock_unlock();
    unint64_t v52 = 0x8000000000000000;
    if (v51 == 0x8000000000000000)
    {
      os_unfair_lock_lock(v43);
      if (*(void *)((char *)a1 + v49) == 0x8000000000000000) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    if ((v51 & 0x8000000000000000) == 0)
    {
      if (v51)
      {
        os_unfair_lock_lock(v43);
        uint64_t v53 = *(void *)((char *)a1 + v49);
        if (v53 == 0x8000000000000000)
        {
LABEL_38:
          os_unfair_lock_unlock(v43);
          goto LABEL_39;
        }
        if (((v53 | v51) & 0x8000000000000000) == 0)
        {
          unint64_t v52 = v53 + v51;
          if (__OFADD__(v53, v51))
          {
            unint64_t v52 = 0x8000000000000000;
LABEL_37:
            *(void *)((char *)a1 + v49) = v52;
            goto LABEL_38;
          }
          if ((v52 & 0x8000000000000000) == 0) {
            goto LABEL_37;
          }
LABEL_43:
          __break(1u);
          return;
        }
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_39:
      ((void (*)(unsigned char *, uint64_t))v63)(v75, v39);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v22);
      return;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v19 = *a1;
LABEL_5:
  uint64_t v23 = (void *)((char *)a1 + *(void *)(v19 + 184));
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t v25 = *(void *)(v63 + 104);
  uint64_t v66 = *(void *)(v63 + 80);
  uint64_t v67 = v5;
  uint64_t v68 = v64;
  *(void *)&long long v69 = v25;
  *((void *)&v69 + 1) = v4;
  uint64_t v70 = v65;
  uint64_t v71 = a2;
  uint64_t v26 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  MEMORY[0x18C13B5A0](v72, &v71, v24, MEMORY[0x1E4FBC538], v26, MEMORY[0x1E4FBC548]);
  if (v73 == 2)
  {
    uint64_t v27 = type metadata accessor for Optional();
    (*(void (**)(void *, uint64_t))(*(void *)(v27 - 8) + 8))(v72, v27);
    swift_endAccess();
    uint64_t v28 = v55;
LABEL_8:
    os_unfair_lock_unlock(v28);
    return;
  }
  uint64_t v29 = *(void *)(v26 - 8);
  (*(void (**)(unsigned char *, void *, uint64_t))(v29 + 32))(v75, v72, v26);
  swift_endAccess();
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v29 + 16))(&v66, v75, v26);
  uint64_t v30 = v69;
  uint64_t v31 = *(void (**)(uint64_t *, uint64_t))(v29 + 8);
  v31(&v66, v26);
  uint64_t v32 = v55;
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  uint64_t v68 = 0;
  if (v30) {
    long long v33 = xmmword_18C0C1FE0;
  }
  else {
    long long v33 = xmmword_18C0BA640;
  }
  long long v69 = v33;
  uint64_t v74 = a2;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  os_unfair_lock_unlock(v32);
  Publishers.Debounce.Inner.CancellerState.cancel()(v26);
  v31((uint64_t *)v75, v26);
}

uint64_t Publishers.Debounce.Inner.CancellerState.cancel()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v3 + 16))(&v10, v1, a1);
  if (v11 != 1)
  {
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, a1);
      outlined init with take of Subscription(&v10, (uint64_t)v7);
      *(void *)(v1 + 8) = 0;
      *(void *)(v1 + 16) = 0;
      *(void *)uint64_t v1 = 0;
      *(_OWORD *)(v1 + 24) = xmmword_18C0BA640;
      uint64_t v5 = v8;
      uint64_t v6 = v9;
      __swift_project_boxed_opaque_existential_1(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, a1);
      *(void *)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
      *(void *)(v1 + 16) = 0;
      *(_OWORD *)(v1 + 24) = xmmword_18C0BA640;
    }
  }
  return result;
}

uint64_t destroy for FilterProducer.State(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

void protocol witness for Cancellable.cancel() in conformance AnyCancellable()
{
}

uint64_t AnyCancellable.__deallocating_deinit()
{
  AnyCancellable.cancel()();
  MEMORY[0x18C13C4B0](*(void *)(v0 + 64), -1, -1);
  outlined destroy of AnyCancellable.Storage(v0 + 16);

  return MEMORY[0x1F4186488](v0, 72, 7);
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 64);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of AnyCancellable.Storage(v0 + 16, (uint64_t)v12);
  if (v13)
  {
    if (v13 == 1)
    {
      outlined init with take of Subscription(v12, (uint64_t)v9);
      uint64_t v7 = 0;
      long long v5 = 0u;
      long long v6 = 0u;
      char v8 = 2;
      swift_beginAccess();
      outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      uint64_t v2 = v10;
      uint64_t v3 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      os_unfair_lock_unlock(v1);
    }
  }
  else
  {
    long long v4 = v12[0];
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of AnyCancellable.Storage((uint64_t)&v5, v0 + 16);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    ((void (*)(void))v4)();
    *(_OWORD *)(swift_allocObject() + 16) = v4;
    swift_release();
  }
}

uint64_t outlined init with copy of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 40) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined assign with take of AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for AnyCancellable.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t outlined destroy of AnyCancellable.Storage(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AnyCancellable.Storage(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  if (!v1) {
    return swift_release();
  }
  return result;
}

void protocol witness for Cancellable.cancel() in conformance SubjectSubscriber<A>()
{
}

Swift::Void __swiftcall SubjectSubscriber.cancel()()
{
  unsigned int v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  uint64_t v2 = MEMORY[0x18C13C570](v0 + 24);
  swift_unknownObjectRelease();
  if (v2)
  {
    swift_unknownObjectWeakAssign();
    uint64_t v3 = v0 + 32;
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0;
      long long v6 = 0u;
      long long v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v6);
      os_unfair_lock_unlock(v1);
    }
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

uint64_t storeEnumTagSinglePayload for FilterProducer.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void protocol witness for Cancellable.cancel() in conformance Subscribers.Sink<A, B>()
{
}

Swift::Void __swiftcall Subscribers.Sink.cancel()()
{
  unsigned int v1 = (void *)*v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[12];
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v0 + 6), (uint64_t)&v17);
  if (v20)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v17);
    os_unfair_lock_unlock(v2);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v17, (uint64_t)v21);
    uint64_t v17 = 1;
    long long v18 = 0u;
    long long v19 = 0u;
    char v20 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v17, (uint64_t)(v0 + 6));
    swift_endAccess();
    swift_beginAccess();
    uint64_t v4 = v0[4];
    uint64_t v3 = v0[5];
    swift_beginAccess();
    uint64_t v6 = v0[2];
    uint64_t v5 = v0[3];
    long long v7 = (void *)swift_allocObject();
    uint64_t v8 = v1[10];
    _OWORD v7[2] = v8;
    uint64_t v9 = v1[11];
    void v7[3] = v9;
    uint64_t v10 = v1[12];
    v7[4] = v10;
    void v7[5] = v4;
    v7[6] = v3;
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = v8;
    void v11[3] = v9;
    v11[4] = v10;
    void v11[5] = v6;
    v11[6] = v5;
    uint64_t v17 = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ();
    *(void *)&long long v18 = v7;
    *((void *)&v18 + 1) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
    *(void *)&long long v19 = v11;
    type metadata accessor for Subscribers.Completion();
    uint64_t v12 = MEMORY[0x1E4FBC848] + 8;
    swift_getFunctionTypeMetadata1();
    swift_getFunctionTypeMetadata1();
    swift_retain();
    swift_retain();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v17, (uint64_t)partial apply for closure #1 in Subscribers.Sink.cancel(), (uint64_t)v0, TupleTypeMetadata2, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v14);
    swift_release();
    swift_release();
    uint64_t v15 = v22;
    uint64_t v16 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Subscribers.Sink<A, B>(uint64_t a1)
{
  return Subscribers.Sink.receive(completion:)(a1);
}

uint64_t Subscribers.Sink.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 96));
  uint64_t v17 = 1;
  long long v18 = 0u;
  long long v19 = 0u;
  char v20 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v17, v1 + 48);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 32);
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = v3[10];
  v5[2] = v6;
  uint64_t v7 = v3[11];
  v5[3] = v7;
  uint64_t v8 = v3[12];
  v5[4] = v8;
  *(void *)(v1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(v1 + 40) = v5;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v6;
  void v11[3] = v7;
  v11[4] = v8;
  void v11[5] = v10;
  v11[6] = v9;
  v16[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  v16[1] = v11;
  uint64_t v12 = MEMORY[0x1E4FBC848] + 8;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  swift_retain();
  _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #2 in Subscribers.Sink.receive(completion:), v1, FunctionTypeMetadata1, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v14);
  swift_release();
  v4(a1);
  return swift_release();
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790]();
  char v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

void partial apply for closure #2 in Subscribers.Sink.receive(completion:)()
{
  closure #2 in Subscribers.Sink.receive(completion:)(v0);
}

void closure #2 in Subscribers.Sink.receive(completion:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v3 + 80);
  *(void *)(v4 + 32) = *(void *)(v2 + 96);
  swift_beginAccess();
  a1[2] = (uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:);
  a1[3] = v4;
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)a1[12]);
}

uint64_t protocol witness for Cancellable.cancel() in conformance ConduitBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

void partial apply for closure #1 in Subscribers.Sink.cancel()()
{
  closure #1 in Subscribers.Sink.cancel()(v0);
}

void closure #1 in Subscribers.Sink.cancel()(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (void *)swift_allocObject();
  uint64_t v4 = v2[10];
  v3[2] = v4;
  uint64_t v5 = v2[11];
  v3[3] = v5;
  uint64_t v6 = v2[12];
  v3[4] = v6;
  swift_beginAccess();
  *(void *)(a1 + 32) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(a1 + 40) = v3;
  swift_release();
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v4;
  void v7[3] = v5;
  v7[4] = v6;
  swift_beginAccess();
  *(void *)(a1 + 16) = specialized closure #1 in Publisher.multicast<A>(subject:);
  *(void *)(a1 + 24) = v7;
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 96));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ReduceProducer<A, B, C, D, E>(void *a1)
{
  return ReduceProducer.receive(subscription:)(a1);
}

void Future.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  long long v2 = *(_OWORD *)(*v0 + 176);
  long long v14[2] = *(_OWORD *)(*v0 + 160);
  void v14[3] = v2;
  uint64_t v3 = type metadata accessor for Future.Conduit.State();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v14 - v8;
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 208));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  if (EnumCaseMultiPayload == 3)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v13 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v13)
    {
      swift_retain();
      Future.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

Swift::Void __swiftcall CurrentValueSubject.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 216));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

void PassthroughSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    swift_beginAccess();
    type metadata accessor for ConduitList();
    ConduitList.remove(_:)(a1);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
  }
  else
  {
    os_unfair_lock_unlock(v3);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
}

void Publishers.ReceiveOn.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t type metadata accessor for Publishers.CollectByCount.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.CollectByCount.Inner.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 128);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v2 + v6) = static Array._allocateUninitialized(_:)();
  uint64_t v7 = (uint64_t)v2 + *(void *)(*v2 + 136);
  *(void *)(v7 + 32) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *((unsigned char *)v2 + *(void *)(*v2 + 144)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v8 = *(void *)(*v2 + 160);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = a2;
  return v2;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.cancel()()
{
  (*(void (**)(void))v0)();
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 8) + 8))(v2);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
}

void Publishers.Multicast.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void partial apply for implicit closure #2 in implicit closure #1 in Publishers.Autoconnect.Inner.receive(subscription:)()
{
}

void Publishers.Autoconnect.inner_cancelled()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 104));
  os_unfair_lock_lock(v1);
  Publishers.Autoconnect.state.getter((uint64_t)&v9);
  if (v11)
  {
    uint64_t v2 = v9;
    outlined init with take of Subscription(&v10, (uint64_t)v6);
    if (v2 < 2)
    {
      memset(v5, 0, sizeof(v5));
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
      uint64_t v3 = v7;
      uint64_t v4 = v8;
      __swift_project_boxed_opaque_existential_1(v6, v7);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    }
    else
    {
      *(void *)&v5[0] = v2 - 1;
      outlined init with copy of Subscription((uint64_t)v6, (uint64_t)v5 + 8);
      Publishers.Autoconnect.state.setter((uint64_t)v5);
      os_unfair_lock_unlock(v1);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    os_unfair_lock_unlock(v1);
  }
}

void partial apply for closure #1 in Subscribers.Assign.cancel()()
{
  closure #1 in Subscribers.Assign.receive(completion:)(v0);
}

void closure #1 in Subscribers.Assign.receive(completion:)(os_unfair_lock_t *a1)
{
  uint64_t v2 = *(void *)&(*a1)[20]._os_unfair_lock_opaque;
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))((char *)&v8 - v5, 1, 1, v2);
  uint64_t v7 = (char *)a1 + *(void *)&(*a1)[26]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(a1[2]);
}

Swift::Void __swiftcall PassthroughSubject.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v15[-v8];
  long long v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 216));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance A?.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional.Publisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

Swift::Void __swiftcall PublishedSubject.Conduit.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v15[-v8];
  long long v10 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 208));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 192);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v0);
      swift_release_n();
    }
  }
}

void PublishedSubject.disassociate(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  type metadata accessor for ConduitList();
  ConduitList.remove(_:)(a1);
  swift_endAccess();
  os_unfair_lock_unlock(v3);
}

uint64_t Future.__allocating_init(_:)(void (*a1)(uint64_t (*)(), void *))
{
  uint64_t v2 = swift_allocObject();
  Future.init(_:)(a1);
  return v2;
}

uint64_t Future.init(_:)(void (*a1)(uint64_t (*)(), void *))
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = (_DWORD *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = v3[10];
  uint64_t v6 = v3[11];
  uint64_t v7 = v3[12];
  *(void *)(v1 + 24) = ConduitList.init()();
  *(unsigned char *)(v1 + 32) = v8;
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v10 = type metadata accessor for Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v5;
  void v11[3] = v6;
  v11[4] = v7;
  void v11[5] = partial apply for implicit closure #2 in implicit closure #1 in Future.init(_:);
  v11[6] = v1;
  swift_retain_n();
  a1(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (), v11);
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t type metadata completion function for Future()
{
  type metadata accessor for Result();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Just()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncPublisher()
{
  return __swift_instantiateGenericMetadata();
}

void one-time initialization function for contents()
{
  static ObservableObjectTable.contents = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

uint64_t type metadata completion function for Publishers.Autoconnect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

_DWORD *one-time initialization function for lock()
{
  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static lock in Global #1 in CombineIdentifier.init() = (uint64_t)result;
  return result;
}

{
  _DWORD *result;

  uint64_t result = (_DWORD *)swift_slowAlloc();
  *uint64_t result = 0;
  static ObservableObjectTable.lock = (uint64_t)result;
  return result;
}

uint64_t Publishers.Catch.Inner.__deallocating_deinit(uint64_t (*a1)(void, _OWORD *))
{
  unint64_t v1 = Publishers.Catch.Inner.deinit(a1);
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, void))AsyncPublisher.Iterator.init(_:));
}

uint64_t type metadata completion function for Publishers.Multicast()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.TryMap.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.TryMap.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.TryMap.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t type metadata completion function for Publishers.Catch.Inner(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Publishers.Catch.Inner(a1, a2, a3, (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for Publishers.Catch.Inner.State);
}

uint64_t type metadata completion function for Publishers._Merged()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t PublishedSubscriber.receive(subscription:)(void *a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PublishedSubject.send(subscription:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t PublishedSubject.send(subscription:)(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void **)((char *)v1 + v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)((char *)v1 + v4) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *(void *)((char *)v1 + v4) = v5;
  }
  v5[2] = v8 + 1;
  outlined init with take of Subscription(v12, (uint64_t)&v5[5 * v8 + 4]);
  os_unfair_lock_unlock(v3);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>(Combine::Subscribers::Demand a1)
{
}

Swift::Void __swiftcall Publishers.Concatenate.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 160);
  uint64_t v6 = *(uint64_t *)((char *)v1 + v5);
  unint64_t v7 = 0x8000000000000000;
  if (v6 != 0x8000000000000000)
  {
    if (a1.rawValue != 0x8000000000000000)
    {
      if (((v6 | a1.rawValue) & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_15;
      }
      unint64_t v7 = v6 + a1.rawValue;
      if (!__OFADD__(v6, a1.rawValue))
      {
        if ((v7 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
LABEL_15:
        __break(1u);
        return;
      }
      unint64_t v7 = 0x8000000000000000;
    }
LABEL_8:
    *(uint64_t *)((char *)v1 + v5) = v7;
    uint64_t v4 = *v1;
  }
  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v8, (uint64_t)v12);
  if (v13
    && (outlined destroy of SubscriptionStatus((uint64_t)v12),
        uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 144),
        swift_beginAccess(),
        outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12),
        v13))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v12);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v12, (uint64_t)v14);
    os_unfair_lock_unlock(v3);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v11 + 24))(a1.rawValue, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>(uint64_t a1)
{
}

uint64_t Publishers.Scan.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v17 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + v2[16]);
  uint64_t v11 = v1 + v2[17];
  swift_beginAccess();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v7, v11, v3);
  v10(v7, v17);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v7, v3);
  char v13 = v12;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11, v9, v3);
  swift_endAccess();
  v16(v9, v11, v3);
  uint64_t v14 = (*(uint64_t (**)(char *, void))(v2[14] + 48))(v9, v2[12]);
  v13(v9, v3);
  return v14;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.HandleEvents.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (void (*)(uint64_t))v1[11];
  if (v5)
  {
    swift_retain();
    os_unfair_lock_unlock(v4);
    v5(a1);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 48))(a1, *(void *)(v3 + 88));
  os_unfair_lock_lock(v4);
  unint64_t v7 = (void (*)(uint64_t))v1[17];
  if (!v7)
  {
LABEL_9:
    os_unfair_lock_unlock(v4);
    return;
  }
  if (v6 == 0x8000000000000000)
  {
LABEL_8:
    swift_retain();
    os_unfair_lock_unlock(v4);
    v7(v6);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v7);
    return;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v6) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(uint64_t a1)
{
  return Publishers.Concatenate.Inner.SuffixSubscriber.receive(_:)(a1);
}

uint64_t Publishers.Concatenate.Inner.SuffixSubscriber.receive(_:)(uint64_t a1)
{
  return Publishers.Concatenate.Inner.suffixReceive(_:)(a1);
}

uint64_t Publishers.Concatenate.Inner.suffixReceive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  LODWORD(v5) = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  uint64_t result = 0;
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48))(a1, *(void *)(v3 + 96));
  }
  return result;
}

void Publishers.Sequence.Inner.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v117 = a1;
  long long v105 = (void *)*v1;
  uint64_t v3 = v105;
  uint64_t v4 = v105[14];
  uint64_t v5 = v105[17];
  uint64_t v6 = v105[12];
  swift_getAssociatedConformanceWitness();
  uint64_t v84 = v4;
  uint64_t v86 = type metadata accessor for Subscribers.Completion();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  uint64_t v8 = (char *)&v77 - v7;
  uint64_t v109 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = type metadata accessor for Optional();
  v112 = *(char **)(v88 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v88);
  long long v103 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  long long v104 = (char *)&v77 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v110 = (char *)&v77 - v15;
  uint64_t v111 = AssociatedTypeWitness;
  uint64_t v94 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  v116 = (char *)&v77 - v16;
  uint64_t v115 = v3[13];
  uint64_t v107 = type metadata accessor for Optional();
  uint64_t v87 = *(void *)(v107 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v107);
  uint64_t v82 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  long long v106 = (char *)&v77 - v19;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v83 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v77 - v25;
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v77 - v29;
  uint64_t v31 = v3;
  uint64_t v32 = v28;
  long long v33 = *(os_unfair_lock_s **)((char *)v2 + v31[25]);
  os_unfair_lock_lock(v33);
  uint64_t v34 = (char *)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  uint64_t v81 = v34;
  v35(v26, v34, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v32);
    os_unfair_lock_unlock(v33);
    return;
  }
  uint64_t v79 = v21;
  uint64_t v80 = v8;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v26, v6);
  uint64_t v36 = (void *)*v2;
  uint64_t v37 = *(void *)(*v2 + 184);
  uint64_t v38 = *(void *)((char *)v2 + v37);
  unint64_t v39 = 0x8000000000000000;
  uint64_t v41 = v110;
  uint64_t v40 = v111;
  if (v38 != 0x8000000000000000)
  {
    if (v117 != 0x8000000000000000)
    {
      if ((v38 | v117) < 0) {
        goto LABEL_43;
      }
      unint64_t v39 = v38 + v117;
      if (__OFADD__(v38, v117))
      {
        unint64_t v39 = 0x8000000000000000;
      }
      else if ((v39 & 0x8000000000000000) != 0)
      {
        goto LABEL_44;
      }
    }
    *(void *)((char *)v2 + v37) = v39;
    uint64_t v36 = (void *)*v2;
  }
  if (*((unsigned char *)v2 + v36[24]))
  {
    os_unfair_lock_unlock(v33);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v6);
    return;
  }
  uint64_t v108 = v36[24];
  uint64_t v117 = v37;
  os_unfair_lock_t v99 = v33;
  uint64_t v77 = v32;
  uint64_t v100 = v30;
  uint64_t v78 = v27;
  uint64_t v101 = v6;
  uint64_t v42 = (char *)v2 + v36[19];
  uint64_t v43 = (char *)v2 + v36[22];
  uint64_t v92 = (char *)v2 + v36[21];
  long long v102 = v42;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v98 = (void (**)(char *, char *, uint64_t))(v87 + 16);
  uint64_t v97 = v115 - 8;
  uint64_t v96 = (void (**)(char *, uint64_t))(v87 + 8);
  v114 = (char **)(v112 + 16);
  v113 = (unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
  v93 = (void (**)(char *, char *, uint64_t))(v94 + 32);
  uint64_t v91 = (void (**)(char *, char *, uint64_t))(v112 + 40);
  uint64_t v90 = v109 + 48;
  uint64_t v95 = (void (**)(char *, uint64_t))(v112 + 8);
  uint64_t v89 = (void (**)(char *, uint64_t))(v94 + 8);
  uint64_t v44 = v88;
  while (1)
  {
    uint64_t v45 = *(void *)((char *)v2 + v117);
    if (v45 == 0x8000000000000000) {
      goto LABEL_17;
    }
    if (v45 < 0) {
      break;
    }
    if (!v45) {
      goto LABEL_33;
    }
LABEL_17:
    uint64_t v46 = v106;
    uint64_t v47 = v107;
    (*v98)(v106, v102, v107);
    uint64_t v94 = *(void *)(v115 - 8);
    int v48 = (*(uint64_t (**)(char *, uint64_t))(v94 + 48))(v46, 1);
    (*v96)(v46, v47);
    if (v48 == 1)
    {
LABEL_33:
      os_unfair_lock_unlock(v99);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v100, v101);
      return;
    }
    uint64_t v49 = *v114;
    ((void (*)(char *, char *, uint64_t))*v114)(v41, v43, v44);
    uint64_t v50 = *v113;
    if ((*v113)(v41, 1, v40) == 1)
    {
      (*v95)(v41, v44);
      uint64_t v64 = v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v82, 1, 1, v115);
      uint64_t v65 = v102;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v87 + 40))(v65, v64, v107);
      swift_endAccess();
      uint64_t v66 = v78;
      uint64_t v67 = v83;
      uint64_t v68 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v83, 1, 1, v101);
      long long v69 = v81;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v79 + 40))(v69, v67, v77);
      swift_endAccess();
      os_unfair_lock_unlock(v99);
      uint64_t v70 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v80, 1, 1);
      uint64_t v71 = v100;
      (*(void (**)(char *, uint64_t))(v109 + 56))(v70, v68);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v70, v86);
LABEL_36:
      (*(void (**)(char *, uint64_t))(v66 + 8))(v71, v68);
      return;
    }
    uint64_t v51 = v116;
    (*v93)(v116, v41, v40);
    uint64_t v52 = *(void *)((char *)v2 + v117);
    if (v52 != 0x8000000000000000)
    {
      if (v52 < 0) {
        goto LABEL_39;
      }
      if (!v52) {
        goto LABEL_40;
      }
      *(void *)((char *)v2 + v117) = v52 - 1;
      uint64_t v51 = v116;
    }
    v112 = v49;
    swift_beginAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v53 = v104;
    uint64_t v54 = v111;
    dispatch thunk of IteratorProtocol.next()();
    swift_endAccess();
    swift_beginAccess();
    (*v91)(v43, v53, v44);
    swift_endAccess();
    os_unfair_lock_t v55 = v43;
    uint64_t v56 = v108;
    *((unsigned char *)v2 + v108) = 1;
    uint64_t v57 = v44;
    uint64_t v58 = v99;
    os_unfair_lock_unlock(v99);
    uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v109 + 48))(v51, v101);
    os_unfair_lock_lock(v58);
    uint64_t v60 = *(void *)((char *)v2 + v117);
    unint64_t v61 = 0x8000000000000000;
    if (v60 != 0x8000000000000000)
    {
      if (v59 != 0x8000000000000000)
      {
        if ((v60 | v59) < 0) {
          goto LABEL_41;
        }
        unint64_t v61 = v60 + v59;
        if (__OFADD__(v60, v59))
        {
          unint64_t v61 = 0x8000000000000000;
        }
        else if ((v61 & 0x8000000000000000) != 0)
        {
          goto LABEL_42;
        }
      }
      *(void *)((char *)v2 + v117) = v61;
      uint64_t v57 = v88;
      uint64_t v56 = v108;
    }
    *((unsigned char *)v2 + v56) = 0;
    uint64_t v62 = v103;
    ((void (*)(char *, char *, uint64_t))v112)(v103, v55, v57);
    unsigned int v63 = v50(v62, 1, v54);
    (*v95)(v62, v57);
    if (v63 == 1)
    {
      uint64_t v72 = v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v82, 1, 1, v115);
      uint64_t v73 = v102;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v87 + 40))(v73, v72, v107);
      swift_endAccess();
      uint64_t v66 = v78;
      uint64_t v74 = v83;
      uint64_t v68 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56))(v83, 1, 1, v101);
      uint64_t v75 = v81;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v79 + 40))(v75, v74, v77);
      swift_endAccess();
      os_unfair_lock_unlock(v99);
      uint64_t v76 = v80;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v80, 1, 1);
      uint64_t v71 = v100;
      (*(void (**)(char *, uint64_t))(v109 + 56))(v76, v68);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v76, v86);
      (*v89)(v116, v54);
      goto LABEL_36;
    }
    uint64_t v44 = v57;
    uint64_t v43 = v55;
    (*v89)(v116, v54);
    uint64_t v41 = v110;
    uint64_t v40 = v54;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

void Publishers.FlatMap.Outer.Side.receive(_:)(uint64_t a1)
{
  Publishers.FlatMap.Outer.receiveInner(_:_:)(a1, *v1);
}

void Publishers.FlatMap.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  uint64_t v11 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = *(void *)(*v2 + 160);
  uint64_t v13 = *(void *)((char *)v2 + v12);
  if (v13 == 0x8000000000000000)
  {
    os_unfair_lock_unlock(v11);
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v14 = *(void *)(*v2 + 168);
    *((unsigned char *)v2 + v14) = 1;
    (*(void (**)(uint64_t, void))(*(void *)(v6 + 120) + 48))(a1, *(void *)(v6 + 96));
    *((unsigned char *)v2 + v14) = 0;
    os_unfair_recursive_lock_unlock();
    return;
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!v13 || (*((unsigned char *)v2 + *(void *)(*v2 + 176)) & 1) != 0)
  {
    uint64_t v15 = (char *)v10 + *(int *)(TupleTypeMetadata2 + 48);
    *uint64_t v10 = a2;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v15, a1, AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    return;
  }
  *(void *)((char *)v2 + v12) = v13 - 1;
  os_unfair_lock_unlock(v11);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v16 = *(void *)(*v2 + 168);
  *((unsigned char *)v2 + v16) = 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v6 + 120) + 48))(a1, *(void *)(v6 + 96));
  *((unsigned char *)v3 + v16) = 0;
  os_unfair_recursive_lock_unlock();
  unint64_t v18 = 0x8000000000000000;
  if (v17 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v11);
    if (*(void *)((char *)v3 + v12) == 0x8000000000000000) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v17 < 0) {
    goto LABEL_22;
  }
  if (v17)
  {
    os_unfair_lock_lock(v11);
    uint64_t v19 = *(void *)((char *)v3 + v12);
    if (v19 == 0x8000000000000000)
    {
LABEL_20:
      os_unfair_lock_unlock(v11);
      return;
    }
    if (((v19 | v17) & 0x8000000000000000) == 0)
    {
      unint64_t v18 = v19 + v17;
      if (__OFADD__(v19, v17))
      {
        unint64_t v18 = 0x8000000000000000;
LABEL_19:
        *(void *)((char *)v3 + v12) = v18;
        goto LABEL_20;
      }
      if ((v18 & 0x8000000000000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance FilterProducer<A, B, C, D, E>(uint64_t a1)
{
  return FilterProducer.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.FlatMap<A, B>.Outer<A1>(uint64_t a1)
{
}

uint64_t Publishers.SetFailureType.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 48))(a1, *(void *)(a2 + 32));
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType.Inner(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 >= a2)
  {
LABEL_22:
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0;
  }
  unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v7 = a2 - v5;
  uint64_t v8 = v6 & 0xFFFFFFF8;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = v7 + 1;
  }
  if (v9 >= 0x10000) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = 2;
  }
  if (v9 < 0x100) {
    unsigned int v10 = 1;
  }
  if (v9 >= 2) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  switch(v11)
  {
    case 1:
      int v12 = *(unsigned __int8 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 2:
      int v12 = *(unsigned __int16 *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_18;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v12 = *(_DWORD *)(result + v6);
      if (!v12) {
        goto LABEL_22;
      }
LABEL_18:
      int v13 = v12 - 1;
      if (v8)
      {
        int v13 = 0;
        LODWORD(v8) = *(_DWORD *)result;
      }
      uint64_t result = v5 + (v8 | v13) + 1;
      break;
    default:
      goto LABEL_22;
  }
  return result;
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(uint64_t a1)
{
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(uint64_t a1)
{
}

void Publishers.Concatenate.Inner.PrefixSubscriber.receive(_:)(uint64_t a1)
{
}

void Publishers.Concatenate.Inner.prefixReceive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unsigned int v5 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v13);
  int v7 = v13[40];
  outlined destroy of SubscriptionStatus((uint64_t)v13);
  if (v7) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(*v2 + 160);
  uint64_t v9 = *(uint64_t *)((char *)v2 + v8);
  if (v9 != 0x8000000000000000)
  {
    if (!v9) {
      goto LABEL_2;
    }
    if (v9 < 0)
    {
      __break(1u);
      __break(1u);
      goto LABEL_18;
    }
    *(uint64_t *)((char *)v2 + v8) = v9 - 1;
  }
  os_unfair_lock_unlock(v5);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48))(a1, *(void *)(v4 + 96));
  if (v10)
  {
    os_unfair_lock_lock(v5);
    uint64_t v11 = *(uint64_t *)((char *)v2 + v8);
    unint64_t v12 = 0x8000000000000000;
    if (v11 != 0x8000000000000000)
    {
      if (v10 == 0x8000000000000000) {
        goto LABEL_16;
      }
      if (((v11 | v10) & 0x8000000000000000) == 0)
      {
        unint64_t v12 = v11 + v10;
        if (!__OFADD__(v11, v10))
        {
          if ((v12 & 0x8000000000000000) == 0) {
            goto LABEL_16;
          }
LABEL_19:
          __break(1u);
          return;
        }
        unint64_t v12 = 0x8000000000000000;
LABEL_16:
        *(uint64_t *)((char *)v2 + v8) = v12;
        goto LABEL_2;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_2:
    os_unfair_lock_unlock(v5);
  }
}

void Publishers.Concatenate.Inner.PrefixSubscriber.receive(completion:)(uint64_t a1)
{
}

void Publishers.Concatenate.Inner.prefixReceive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)&long long v44 = a1;
  uint64_t v41 = (void *)*v1;
  uint64_t v3 = v41;
  uint64_t v4 = v41[13];
  uint64_t v5 = v41[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v46 = v41[11];
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v45 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v45);
  unint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v36 - v14;
  MEMORY[0x1F4188790](v13);
  int v48 = (char *)&v36 - v16;
  uint64_t v17 = *(os_unfair_lock_s **)((char *)v2 + v3[21]);
  os_unfair_lock_lock(v17);
  uint64_t v18 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v49);
  int v19 = v51[16];
  outlined destroy of SubscriptionStatus((uint64_t)&v49);
  if (v19)
  {
    os_unfair_lock_unlock(v17);
  }
  else
  {
    uint64_t v40 = v12;
    uint64_t v37 = v5;
    uint64_t v38 = v4;
    uint64_t v49 = 1;
    long long v50 = 0u;
    *(_OWORD *)uint64_t v51 = 0u;
    v51[16] = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v49, v18);
    swift_endAccess();
    uint64_t v20 = (char *)v2 + *(void *)(*v2 + 152);
    swift_beginAccess();
    uint64_t v21 = v47;
    uint64_t v22 = v45;
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v39(v48, v20, v45);
    uint64_t v23 = *(void *)(v46 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 56))(v15, 1, 1);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v20, v15, v22);
    swift_endAccess();
    os_unfair_lock_unlock(v17);
    uint64_t v25 = v42;
    uint64_t v24 = v43;
    uint64_t v26 = v44;
    (*(void (**)(char *, void, uint64_t))(v42 + 16))(v9, v44, v43);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) == 1)
    {
      uint64_t v27 = v40;
      v39(v40, v48, v22);
      int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v27, 1, v46);
      uint64_t v29 = v41;
      uint64_t v30 = v47;
      if (v28 == 1)
      {
        uint64_t v31 = *(void (**)(char *, uint64_t))(v47 + 8);
        v31(v48, v22);
        v31(v27, v22);
      }
      else
      {
        swift_retain();
        uint64_t v52 = v2;
        uint64_t v32 = v29[12];
        uint64_t v33 = v46;
        uint64_t v49 = v37;
        *(void *)&long long v50 = v46;
        *((void *)&v50 + 1) = v32;
        *(void *)uint64_t v51 = v38;
        long long v44 = *((_OWORD *)v29 + 7);
        *(_OWORD *)&v51[8] = v44;
        uint64_t v34 = type metadata accessor for Publishers.Concatenate.Inner.SuffixSubscriber();
        uint64_t WitnessTable = swift_getWitnessTable();
        Publisher.subscribe<A>(_:)((uint64_t)&v52, v33, v34, v44, WitnessTable);
        swift_release();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v48, v22);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v33);
      }
    }
    else
    {
      (*(void (**)(uint64_t, void))(v41[15] + 56))(v26, v41[12]);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v22);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v24);
    }
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Map(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.ReceiveOn(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v34 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v34 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v10) {
    unsigned int v14 = v10;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v6 + 64) + v15;
  if (a2 <= v14) {
    goto LABEL_31;
  }
  uint64_t v21 = v19 + ((v16 + v17 + (v20 & ~v15)) & ~v17);
  char v22 = 8 * v21;
  if (v21 > 3) {
    goto LABEL_14;
  }
  unsigned int v24 = ((a2 - v14 + ~(-1 << v22)) >> v22) + 1;
  if (HIWORD(v24))
  {
    int v23 = *(_DWORD *)((char *)a1 + v21);
    if (!v23) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  if (v24 > 0xFF)
  {
    int v23 = *(unsigned __int16 *)((char *)a1 + v21);
    if (!*(unsigned __int16 *)((char *)a1 + v21)) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  if (v24 >= 2)
  {
LABEL_14:
    int v23 = *((unsigned __int8 *)a1 + v21);
    if (!*((unsigned char *)a1 + v21)) {
      goto LABEL_31;
    }
LABEL_21:
    int v25 = (v23 - 1) << v22;
    if (v21 > 3) {
      int v25 = 0;
    }
    if (v21)
    {
      if (v21 <= 3) {
        int v26 = v21;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *a1;
          break;
        case 3:
          int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)a1;
          break;
        default:
          int v27 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v27 = 0;
    }
    return v14 + (v27 | v25) + 1;
  }
LABEL_31:
  if (!v14) {
    return 0;
  }
  if (v7 == v14)
  {
    uint64_t v28 = v34;
    uint64_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v30 = a1;
    uint64_t v31 = v7;
  }
  else
  {
    uint64_t v30 = (unsigned __int16 *)(((unint64_t)a1 + v20) & ~v15);
    if (v9 != v14)
    {
      unsigned int v33 = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v30 + v16 + v17) & ~v17);
      if (v33 >= 2) {
        return v33 - 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v31 = v9;
    uint64_t v28 = v5;
  }

  return v29(v30, v31, v28);
}

uint64_t Publishers.Concatenate.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a1;
  uint64_t v26 = a4;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v15[2];
  uint64_t v17 = v15[4];
  uint64_t v25 = v15[5];
  uint64_t v30 = v16;
  uint64_t v31 = v6;
  uint64_t v32 = v18;
  uint64_t v33 = v17;
  uint64_t v34 = v25;
  uint64_t v35 = v19;
  type metadata accessor for Publishers.Concatenate.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v27, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v28 + *(int *)(a2 + 52), v6);
  uint64_t v20 = swift_allocObject();
  Publishers.Concatenate.Inner.init(_:suffix:)((uint64_t)v14, (uint64_t)v10);
  swift_retain();
  uint64_t v29 = v20;
  uint64_t v30 = v16;
  uint64_t v31 = v6;
  uint64_t v32 = a3;
  uint64_t v33 = v17;
  uint64_t v34 = v25;
  uint64_t v35 = v26;
  uint64_t v21 = type metadata accessor for Publishers.Concatenate.Inner.PrefixSubscriber();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v16, v21, v17, WitnessTable);
  return swift_release_n();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Sequence<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Sequence.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Sequence.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a1;
  uint64_t v7 = (_UNKNOWN **)a2[3];
  uint64_t v8 = a2[5];
  uint64_t v9 = type metadata accessor for Subscribers.Completion();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v25 = (char *)&v25 - v10;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v25 - v16;
  v31[0] = v12;
  v31[1] = v7;
  uint64_t v30 = a3;
  long long v31[2] = a3;
  uint64_t v32 = v12;
  uint64_t v33 = v7;
  uint64_t v34 = v11;
  uint64_t v35 = v8;
  uint64_t v36 = a4;
  uint64_t v37 = v11;
  uint64_t v18 = v28;
  uint64_t v19 = type metadata accessor for Publishers.Sequence.Inner();
  swift_allocObject();
  uint64_t v20 = specialized Publishers.Sequence.Inner.init(downstream:sequence:)(v18, v29);
  uint64_t v21 = v20 + *(void *)(*(void *)v20 + 176);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v21, v14);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v17, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (v21 == 1)
  {
    uint64_t v22 = v30;
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&static Subscriptions._EmptySubscription.singleton, v22, a4);
    int v23 = v25;
    (*((void (**)(char *, uint64_t, uint64_t, _UNKNOWN **))*(v7 - 1) + 7))(v25, 1, 1, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 56))(v23, v22, a4);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v27);
    Publishers.Sequence.Inner.cancel()();
    return swift_release();
  }
  else
  {
    uint64_t v32 = v19;
    uint64_t v33 = &protocol witness table for Publishers.Sequence<A, B>.Inner<A1, B1, C1>;
    v31[0] = v20;
    (*(void (**)(void *, uint64_t, uint64_t))(a4 + 40))(v31, v30, a4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
}

uint64_t type metadata accessor for Publishers.Sequence.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t specialized Publishers.Sequence.Inner.init(downstream:sequence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a2;
  uint64_t v50 = a1;
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v36 - v9;
  uint64_t v10 = v4[13];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v36 - v12;
  uint64_t v48 = v4[18];
  uint64_t v49 = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  long long v44 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v14 - 8);
  uint64_t v43 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v41 = (char *)&v36 - v15;
  uint64_t v40 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = v11;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v19(v3 + v4[19], 1, 1, v10);
  uint64_t v20 = (char *)(v3 + *(void *)(*(void *)v3 + 160));
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  uint64_t v38 = v5;
  unint64_t v39 = v22;
  v22(v20, 1, 1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v3 + *(void *)(*(void *)v3 + 176), 1, 1, AssociatedTypeWitness);
  *(void *)(v3 + *(void *)(*(void *)v3 + 184)) = 0;
  *(unsigned char *)(v3 + *(void *)(*(void *)v3 + 192)) = 0;
  uint64_t v23 = *(void *)(*(void *)v3 + 200);
  uint64_t v24 = (_DWORD *)swift_slowAlloc();
  *uint64_t v24 = 0;
  *(void *)(v3 + v23) = v24;
  uint64_t v25 = v18 + 16;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v36 = v25;
  uint64_t v27 = v45;
  v26(v17, v45, v10);
  v19((uint64_t)v17, 0, 1, v10);
  uint64_t v28 = v3 + *(void *)(*(void *)v3 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 40))(v28, v17, v40);
  swift_endAccess();
  uint64_t v29 = v41;
  uint64_t v30 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v41, v50, v38);
  v39(v29, 0, 1, v30);
  uint64_t v31 = v3 + *(void *)(*(void *)v3 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v42 + 40))(v31, v29, v43);
  swift_endAccess();
  v26(v47, v27, v10);
  uint64_t v32 = v44;
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v3 + *(void *)(*(void *)v3 + 168), v32, v49);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  uint64_t v33 = v51;
  dispatch thunk of IteratorProtocol.next()();
  swift_endAccess();
  uint64_t v34 = v3 + *(void *)(*(void *)v3 + 176);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 40))(v34, v33, v53);
  swift_endAccess();
  return v3;
}

char *Publishers.Concatenate.Inner.init(_:suffix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = &v2[*(void *)(v3 + 136)];
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  v9[40] = 2;
  uint64_t v10 = &v2[*(void *)(*(void *)v2 + 144)];
  *((void *)v10 + 4) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[40] = 2;
  uint64_t v11 = *(void *)(v4 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(&v2[*(void *)(*(void *)v2 + 152)], 1, 1, v4);
  *(void *)&v2[*(void *)(*(void *)v2 + 160)] = 0;
  uint64_t v13 = *(void *)(*(void *)v2 + 168);
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *uint64_t v14 = 0;
  *(void *)&v2[v13] = v14;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 128)], v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v8, v19, v4);
  v12(v8, 0, 1, v4);
  uint64_t v15 = &v2[*(void *)(*(void *)v2 + 152)];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v15, v8, v5);
  swift_endAccess();
  return v2;
}

void storeEnumTagSinglePayload for Publishers.Map(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v19 = a2 ^ 0x80000000;
              v18[1] = 0;
            }
            else
            {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t type metadata accessor for Publishers.Concatenate.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Concatenate.Inner.PrefixSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(void *a1)
{
  return Publishers.Concatenate.Inner.PrefixSubscriber.receive(subscription:)(a1);
}

uint64_t Publishers.Concatenate.Inner.PrefixSubscriber.receive(subscription:)(void *a1)
{
  return Publishers.Concatenate.Inner.prefixReceive(subscription:)(a1);
}

void storeEnumTagSinglePayload for Publishers.SetFailureType.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Deferred<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Deferred.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Deferred.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*v4)(v11);
  Publisher.subscribe<A>(_:)(a1, v9, a3, *(void *)(a2 + 24), a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t initializeWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t type metadata accessor for Publishers.Concatenate.Inner.SuffixSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.SetFailureType.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 40))(a1, *(void *)(a2 + 32));
}

uint64_t getEnumTagSinglePayload for Publishers.HandleEvents(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFE)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((v16 + 1) >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

void storeEnumTagSinglePayload for Publishers.ReceiveOn(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 24);
  uint64_t v44 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v44 - 8);
  uint64_t v43 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v13 = 0;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  int v15 = *(_DWORD *)(v14 + 84);
  unsigned int v16 = v15 - 1;
  if (!v15) {
    unsigned int v16 = 0;
  }
  if (v16 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v7 + 64) + v18;
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  if (v15) {
    size_t v22 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v22 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 1;
  }
  size_t v23 = ((v20 + v21 + (v19 & ~v18)) & ~v21) + v22;
  if (a3 <= v17) {
    goto LABEL_20;
  }
  if (v23 <= 3)
  {
    unsigned int v24 = ((a3 - v17 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v24))
    {
      int v13 = 4;
      if (v17 >= a2) {
        goto LABEL_28;
      }
LABEL_21:
      unsigned int v25 = ~v17 + a2;
      if (v23 < 4)
      {
        int v27 = (v25 >> (8 * v23)) + 1;
        if (v23)
        {
          int v28 = v13;
          int v29 = v25 & ~(-1 << (8 * v23));
          bzero(a1, v23);
          if (v23 == 3)
          {
            *(_WORD *)a1 = v29;
            a1[2] = BYTE2(v29);
            int v13 = v28;
          }
          else
          {
            int v13 = v28;
            if (v23 == 2) {
              *(_WORD *)a1 = v29;
            }
            else {
              *a1 = v29;
            }
          }
        }
      }
      else
      {
        int v26 = v13;
        bzero(a1, v23);
        int v13 = v26;
        *(_DWORD *)a1 = v25;
        int v27 = 1;
      }
      switch(v13)
      {
        case 1:
          a1[v23] = v27;
          break;
        case 2:
          *(_WORD *)&a1[v23] = v27;
          break;
        case 3:
LABEL_65:
          __break(1u);
          break;
        case 4:
          *(_DWORD *)&a1[v23] = v27;
          break;
        default:
          return;
      }
      return;
    }
    if (v24 >= 0x100) {
      int v13 = 2;
    }
    else {
      int v13 = v24 > 1;
    }
LABEL_20:
    if (v17 >= a2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  int v13 = 1;
  if (v17 < a2) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v30 = ~v18;
  uint64_t v31 = ~v21;
  uint64_t v32 = a1;
  switch(v13)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
      goto LABEL_65;
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (!a2) {
        return;
      }
LABEL_33:
      if (v8 == v17)
      {
        uint64_t v33 = v44;
        uint64_t v34 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
        uint64_t v35 = a2;
        uint64_t v36 = v8;
LABEL_37:
        v34(v32, v35, v36, v33);
        return;
      }
      uint64_t v32 = (unsigned char *)((unint64_t)&a1[v19] & v30);
      if (v10 == v17)
      {
        uint64_t v34 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v35 = a2;
        uint64_t v36 = v10;
        uint64_t v33 = v6;
        goto LABEL_37;
      }
      uint64_t v37 = (unsigned char *)((unint64_t)&v32[v20 + v21] & v31);
      if (v16 >= a2)
      {
        uint64_t v41 = *(void (**)(unint64_t, void))(v14 + 56);
        unint64_t v42 = (unint64_t)&v32[v20 + v21] & v31;
        v41(v42, (a2 + 1));
      }
      else
      {
        if (v22 <= 3) {
          int v38 = ~(-1 << (8 * v22));
        }
        else {
          int v38 = -1;
        }
        if (v22)
        {
          int v39 = v38 & (~v16 + a2);
          if (v22 <= 3) {
            int v40 = v22;
          }
          else {
            int v40 = 4;
          }
          bzero(v37, v22);
          switch(v40)
          {
            case 2:
              *(_WORD *)uint64_t v37 = v39;
              break;
            case 3:
              *(_WORD *)uint64_t v37 = v39;
              v37[2] = BYTE2(v39);
              break;
            case 4:
              *(_DWORD *)uint64_t v37 = v39;
              break;
            default:
              *uint64_t v37 = v39;
              break;
          }
        }
      }
      break;
  }
}

void storeEnumTagSinglePayload for Publishers.HandleEvents(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                void *v19 = 0;
                v19[1] = 0;
                *(_DWORD *)uint64_t v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                void *v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Debounce(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v38 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v38 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v37 = v7;
  if (v7 <= v5) {
    unsigned int v7 = v5;
  }
  uint64_t v8 = *(void *)(v3 - 8);
  unsigned int v35 = *(_DWORD *)(v8 + 84);
  if (v35 <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v10 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v13 = v9;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v19 = *(void *)(v10 + 64);
  if (v12) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v21 = *(void *)(v4 + 64) + v14;
  size_t v22 = a1;
  if (a2 <= v13) {
    goto LABEL_33;
  }
  uint64_t v23 = v20 + ((v17 + v18 + ((v15 + v16 + (v21 & ~v14)) & ~v16)) & ~v18);
  char v24 = 8 * v23;
  if (v23 > 3) {
    goto LABEL_16;
  }
  unsigned int v26 = ((a2 - v13 + ~(-1 << v24)) >> v24) + 1;
  if (HIWORD(v26))
  {
    int v25 = *(_DWORD *)((char *)a1 + v23);
    if (!v25) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v26 > 0xFF)
  {
    int v25 = *(unsigned __int16 *)((char *)a1 + v23);
    if (!*(unsigned __int16 *)((char *)a1 + v23)) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v26 >= 2)
  {
LABEL_16:
    int v25 = *((unsigned __int8 *)a1 + v23);
    if (!*((unsigned char *)a1 + v23)) {
      goto LABEL_33;
    }
LABEL_23:
    int v27 = (v25 - 1) << v24;
    if (v23 > 3) {
      int v27 = 0;
    }
    if (v23)
    {
      if (v23 <= 3) {
        int v28 = v23;
      }
      else {
        int v28 = 4;
      }
      switch(v28)
      {
        case 2:
          int v29 = *a1;
          break;
        case 3:
          int v29 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v29 = *(_DWORD *)a1;
          break;
        default:
          int v29 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v29 = 0;
    }
    return v13 + (v29 | v27) + 1;
  }
LABEL_33:
  if (!v13) {
    return 0;
  }
  if (v5 == v13)
  {
    uint64_t v30 = v38;
    uint64_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v32 = v5;
    return v31(v22, v32, v30);
  }
  size_t v22 = (unsigned __int16 *)(((unint64_t)a1 + v21) & ~v14);
  if (v37 == v13)
  {
    uint64_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v32 = v37;
    uint64_t v30 = AssociatedTypeWitness;
    return v31(v22, v32, v30);
  }
  size_t v22 = (unsigned __int16 *)(((unint64_t)v22 + v15 + v16) & ~v16);
  if (v35 == v13)
  {
    uint64_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v32 = v35;
    uint64_t v30 = v3;
    return v31(v22, v32, v30);
  }
  unsigned int v34 = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v22 + v17 + v18) & ~v18);
  if (v34 >= 2) {
    return v34 - 1;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Throttle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  uint64_t v12 = *(void *)(v5 - 8);
  if (v11 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v14 = *(unsigned int *)(v12 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = *(void *)(v12 + 64);
  if (v14 <= v13) {
    unsigned int v19 = v13;
  }
  else {
    unsigned int v19 = v14;
  }
  if (v19 <= 0xFE) {
    unsigned int v19 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v7 + 64) + v15;
  if (a2 > v19)
  {
    uint64_t v21 = v18 + ((v16 + v17 + (v20 & ~v15)) & ~v17) + 1;
    char v22 = 8 * v21;
    if (v21 > 3) {
      goto LABEL_12;
    }
    unsigned int v24 = ((a2 - v19 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      int v23 = *(_DWORD *)((char *)a1 + v21);
      if (!v23) {
        goto LABEL_29;
      }
      goto LABEL_19;
    }
    if (v24 > 0xFF)
    {
      int v23 = *(unsigned __int16 *)((char *)a1 + v21);
      if (!*(unsigned __int16 *)((char *)a1 + v21)) {
        goto LABEL_29;
      }
      goto LABEL_19;
    }
    if (v24 >= 2)
    {
LABEL_12:
      int v23 = *((unsigned __int8 *)a1 + v21);
      if (!*((unsigned char *)a1 + v21)) {
        goto LABEL_29;
      }
LABEL_19:
      int v25 = (v23 - 1) << v22;
      if (v21 > 3) {
        int v25 = 0;
      }
      if (v18 + ((v16 + v17 + (v20 & ~v15)) & ~v17) == -1)
      {
        int v27 = 0;
      }
      else
      {
        if (v21 <= 3) {
          int v26 = v18 + ((v16 + v17 + (v20 & ~v15)) & ~v17) + 1;
        }
        else {
          int v26 = 4;
        }
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v36 = v19 + (v27 | v25);
      return (v36 + 1);
    }
  }
LABEL_29:
  if (v8 == v19)
  {
    int v28 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    int v29 = a1;
    uint64_t v30 = v8;
    uint64_t v31 = v6;
LABEL_31:
    return v28(v29, v30, v31);
  }
  unint64_t v33 = ((unint64_t)a1 + v20) & ~v15;
  if (v11 != v19)
  {
    int v29 = (unsigned __int16 *)((v33 + v16 + v17) & ~v17);
    if (v14 == v19)
    {
      int v28 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
      uint64_t v30 = v14;
      uint64_t v31 = v5;
      goto LABEL_31;
    }
    unsigned int v35 = *((unsigned __int8 *)v29 + v18);
    if (v35 < 2) {
      return 0;
    }
    int v36 = (v35 + 2147483646) & 0x7FFFFFFF;
    return (v36 + 1);
  }
  unsigned int v34 = *(uint64_t (**)(unint64_t))(v10 + 48);

  return v34(v33);
}

uint64_t getEnumTagSinglePayload for Publishers.SwitchToLatest(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.CompactMap(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v19 = a2 ^ 0x80000000;
              v18[1] = 0;
            }
            else
            {
              uint64_t v19 = a2 - 1;
            }
            *int v18 = v19;
          }
          else
          {
            int v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

void storeEnumTagSinglePayload for Publishers.Throttle(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v37 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v37 - 8);
  uint64_t v36 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v7 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(v10 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v20 = *(void *)(v14 + 64);
  if (v15 <= v13) {
    unsigned int v21 = v13;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v14 + 84);
  }
  if (v21 <= 0xFE) {
    unsigned int v21 = 254;
  }
  size_t v22 = v20 + ((v18 + v19 + ((v16 + v17) & ~v17)) & ~v19) + 1;
  if (a3 <= v21)
  {
    int v24 = 0;
    int v23 = a1;
  }
  else
  {
    int v23 = a1;
    if (v22 <= 3)
    {
      unsigned int v27 = ((a3 - v21 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
      if (HIWORD(v27))
      {
        int v24 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v24 = 2;
      }
      else
      {
        int v24 = v27 > 1;
      }
    }
    else
    {
      int v24 = 1;
    }
  }
  if (v21 < a2)
  {
    unsigned int v25 = ~v21 + a2;
    if (v22 < 4)
    {
      int v26 = (v25 >> (8 * v22)) + 1;
      if (v20 + ((v18 + v19 + ((v16 + v17) & ~v17)) & ~v19) != -1)
      {
        int v28 = v25 & ~(-1 << (8 * v22));
        bzero(v23, v22);
        if (v22 == 3)
        {
          *(_WORD *)int v23 = v28;
          long long v23[2] = BYTE2(v28);
        }
        else if (v22 == 2)
        {
          *(_WORD *)int v23 = v28;
        }
        else
        {
          *int v23 = v28;
        }
      }
    }
    else
    {
      bzero(v23, v22);
      *(_DWORD *)int v23 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        v23[v22] = v26;
        break;
      case 2:
        *(_WORD *)&v23[v22] = v26;
        break;
      case 3:
        goto LABEL_51;
      case 4:
        *(_DWORD *)&v23[v22] = v26;
        break;
      default:
        return;
    }
    return;
  }
  switch(v24)
  {
    case 1:
      v23[v22] = 0;
      if (a2) {
        goto LABEL_29;
      }
      return;
    case 2:
      *(_WORD *)&v23[v22] = 0;
      if (a2) {
        goto LABEL_29;
      }
      return;
    case 3:
LABEL_51:
      __break(1u);
      return;
    case 4:
      *(_DWORD *)&v23[v22] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (!a2) {
        return;
      }
LABEL_29:
      if (v9 == v21)
      {
        uint64_t v29 = v37;
        uint64_t v30 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
        uint64_t v31 = v23;
        uint64_t v32 = a2;
        uint64_t v33 = v9;
LABEL_31:
        v30(v31, v32, v33, v29);
        return;
      }
      unint64_t v34 = (unint64_t)&v23[v16 + v17] & ~v17;
      if (v12 != v21)
      {
        uint64_t v31 = (unsigned char *)((v34 + v18 + v19) & ~v19);
        if (v15 != v21)
        {
          v31[v20] = a2 + 1;
          return;
        }
        uint64_t v30 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v15;
        uint64_t v29 = v7;
        goto LABEL_31;
      }
      unsigned int v35 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
      v35(v34, a2);
      return;
  }
}

void Publishers.Sequence.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = *(void *)(v1 + 104);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 200)));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v11, 1, 1, v7);
  uint64_t v12 = (uint64_t)v0 + *(void *)(*v0 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v12, v11, v8);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  uint64_t v13 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v13, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 200)));
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.IgnoreOutput<A>.Inner<A1>()
{
  return 0;
}

void storeEnumTagSinglePayload for Publishers.Debounce(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  uint64_t v48 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(v48 - 8);
  uint64_t v47 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v49 = v6;
  unsigned int v46 = v8;
  if (v8 <= v6) {
    unsigned int v8 = v6;
  }
  uint64_t v9 = *(void *)(v4 - 8);
  unsigned int v44 = *(_DWORD *)(v9 + 84);
  if (v44 <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)(v12 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v15 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = *(void *)(v5 + 64) + v17;
  uint64_t v19 = *(void *)(v7 + 64);
  uint64_t v20 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = *(void *)(v9 + 64);
  uint64_t v22 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v23 = (v21 + v22 + ((v19 + v20 + (v18 & ~v17)) & ~v20)) & ~v22;
  size_t v24 = *(void *)(v12 + 64);
  if (v14) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  size_t v26 = v23 + v25;
  if (a3 > v16)
  {
    if (v26 <= 3)
    {
      unsigned int v27 = ((a3 - v16 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
      if (HIWORD(v27))
      {
        int v11 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v27 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  if (v16 < a2)
  {
    unsigned int v28 = ~v16 + a2;
    if (v26 < 4)
    {
      int v29 = (v28 >> (8 * v26)) + 1;
      if (v26)
      {
        int v33 = v28 & ~(-1 << (8 * v26));
        bzero(a1, v23 + v25);
        if (v26 == 3)
        {
          *(_WORD *)a1 = v33;
          a1[2] = BYTE2(v33);
        }
        else if (v26 == 2)
        {
          *(_WORD *)a1 = v33;
        }
        else
        {
          *a1 = v33;
        }
      }
    }
    else
    {
      bzero(a1, v23 + v25);
      *(_DWORD *)a1 = v28;
      int v29 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v26] = v29;
        break;
      case 2:
        *(_WORD *)&a1[v26] = v29;
        break;
      case 3:
        goto LABEL_68;
      case 4:
        *(_DWORD *)&a1[v26] = v29;
        break;
      default:
        return;
    }
    return;
  }
  uint64_t v30 = ~v17;
  uint64_t v31 = ~v22;
  uint64_t v32 = a1;
  switch(v11)
  {
    case 1:
      a1[v26] = 0;
      if (a2) {
        goto LABEL_34;
      }
      return;
    case 2:
      *(_WORD *)&a1[v26] = 0;
      if (a2) {
        goto LABEL_34;
      }
      return;
    case 3:
LABEL_68:
      __break(1u);
      return;
    case 4:
      *(_DWORD *)&a1[v26] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (!a2) {
        return;
      }
LABEL_34:
      if (v49 == v16)
      {
        uint64_t v34 = v48;
        unsigned int v35 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
        uint64_t v36 = a2;
        uint64_t v37 = v49;
LABEL_42:
        v35(v32, v36, v37, v34);
        return;
      }
      uint64_t v32 = (unsigned char *)((unint64_t)&a1[v18] & v30);
      if (v46 == v16)
      {
        unsigned int v35 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
        uint64_t v36 = a2;
        uint64_t v37 = v46;
        uint64_t v34 = AssociatedTypeWitness;
        goto LABEL_42;
      }
      uint64_t v32 = (unsigned char *)((unint64_t)&v32[v19 + v20] & ~v20);
      if (v44 == v16)
      {
        unsigned int v35 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v36 = a2;
        uint64_t v37 = v44;
        uint64_t v34 = v4;
        goto LABEL_42;
      }
      uint64_t v38 = (unsigned char *)((unint64_t)&v32[v21 + v22] & v31);
      if (v15 >= a2)
      {
        unint64_t v42 = *(void (**)(unint64_t, void))(v13 + 56);
        unint64_t v43 = (unint64_t)&v32[v21 + v22] & v31;
        v42(v43, a2 + 1);
      }
      else
      {
        if (v25 <= 3) {
          int v39 = ~(-1 << (8 * v25));
        }
        else {
          int v39 = -1;
        }
        if (v25)
        {
          int v40 = v39 & (~v15 + a2);
          if (v25 <= 3) {
            int v41 = v25;
          }
          else {
            int v41 = 4;
          }
          bzero(v38, v25);
          switch(v41)
          {
            case 2:
              *(_WORD *)uint64_t v38 = v40;
              break;
            case 3:
              *(_WORD *)uint64_t v38 = v40;
              v38[2] = BYTE2(v40);
              break;
            case 4:
              *(_DWORD *)uint64_t v38 = v40;
              break;
            default:
              *uint64_t v38 = v40;
              break;
          }
        }
      }
      return;
  }
}

void storeEnumTagSinglePayload for Publishers.CombineLatest(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            size_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

void storeEnumTagSinglePayload for Publishers.SwitchToLatest(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unsigned int v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Retry<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Retry.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v34 = v4;
  long long v31 = *(_OWORD *)(v3 + 88);
  long long v35 = v31;
  uint64_t v29 = v5;
  uint64_t v36 = v5;
  uint64_t v6 = type metadata accessor for Publishers.Retry.Inner.State();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unsigned int v10 = (char *)&v29 - v9;
  uint64_t v11 = v31;
  uint64_t v12 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v14 = (char *)&v29 - v13;
  int v15 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v15);
  unsigned int v16 = (char *)v2 + *(void *)(*v2 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v16, v6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v10, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    os_unfair_lock_unlock(v15);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, &v10[*(int *)(TupleTypeMetadata2 + 48)], v11);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v10, v4);
  uint64_t v18 = *(void *)(*v2 + 152);
  uint64_t v19 = *(void *)((char *)v2 + v18);
  unsigned int v20 = v14;
  if (v19 != 0x8000000000000000)
  {
    if (v19 < 0)
    {
      __break(1u);
    }
    else if (v19)
    {
      *(void *)((char *)v2 + v18) = v19 - 1;
      goto LABEL_7;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_7:
  os_unfair_lock_unlock(v15);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 48))(v30, v11);
  uint64_t v22 = v21;
  if (v21 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v15);
    unint64_t v23 = 0x8000000000000000;
    if (*(void *)((char *)v2 + v18) == 0x8000000000000000) {
      goto LABEL_19;
    }
LABEL_18:
    *(void *)((char *)v2 + v18) = v23;
    goto LABEL_19;
  }
  if (v21 < 0) {
    goto LABEL_25;
  }
  if (!v21)
  {
LABEL_22:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    return;
  }
  os_unfair_lock_lock(v15);
  uint64_t v24 = *(void *)((char *)v2 + v18);
  if (v24 == 0x8000000000000000)
  {
LABEL_19:
    uint64_t v26 = (uint64_t)v2 + *(void *)(*v2 + 128);
    swift_beginAccess();
    outlined init with copy of Subscription?(v26, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of Subscription(&v32, (uint64_t)&v34);
      os_unfair_lock_unlock(v15);
      uint64_t v27 = v36;
      uint64_t v28 = v37;
      __swift_project_boxed_opaque_existential_1(&v34, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 24))(v22, v27, v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v32);
      os_unfair_lock_unlock(v15);
    }
    goto LABEL_22;
  }
  if ((v24 | v22) < 0) {
    goto LABEL_26;
  }
  BOOL v25 = __OFADD__(v24, v22);
  unint64_t v23 = v24 + v22;
  if (v25)
  {
    unint64_t v23 = 0x8000000000000000;
    goto LABEL_18;
  }
  if ((v23 & 0x8000000000000000) == 0) {
    goto LABEL_18;
  }
LABEL_27:
  __break(1u);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AbstractCombineLatest<A1, B1, C1>(void *a1@<X8>)
{
}

void CustomCombineIdentifierConvertible<>.combineIdentifier.getter(void *a1@<X8>)
{
  *a1 = v1;
}

BOOL partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(uint64_t a1)
{
  return partial apply for closure #3 in implicit closure #4 in Publishers._Merged.request(_:)(a1);
}

{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 48))(a1, 1) == 1;
}

void storeEnumTagSinglePayload for Publishers.Filter.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for AnySubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Future.Conduit()
{
  uint64_t result = type metadata accessor for Future.Conduit.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.MapError.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v25[1] = a4;
  uint64_t v26 = a1;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v11[2];
  v25[0] = v11[3];
  uint64_t v13 = v11[4];
  uint64_t v27 = v12;
  uint64_t v28 = v25[0];
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  uint64_t v31 = v15;
  uint64_t v16 = type metadata accessor for Publishers.MapError.Inner();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, a3);
  uint64_t v20 = (uint64_t *)(v5 + *(int *)(a2 + 52));
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  swift_retain();
  Publishers.MapError.Inner.init(downstream:map:)((uint64_t)v10, v21, v22, a3, (uint64_t)v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v19, v12, v16, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t type metadata accessor for Publishers.MapError.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.MapError.Inner.init(downstream:map:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for Publishers.MapError.Inner();
  uint64_t v9 = (void *)(a5 + *(int *)(v8 + 60));
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(int *)(v8 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  unsigned int v11 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v12 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v11);
    *(void *)(a5 + v10) = v12;
  }
}

uint64_t Publishers.MapKeyPath.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  uint64_t v7 = (*(uint64_t (**)(char *, void))(a2[6] + 48))(v6, a2[4]);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t Publishers.Zip.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = a2[3];
  uint64_t v22 = a2[5];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  uint64_t v32 = a3;
  uint64_t v11 = a3;
  uint64_t v33 = a4;
  type metadata accessor for Zip2Inner();
  swift_allocObject();
  uint64_t v12 = specialized AbstractZip.init(downstream:upstreamCount:)(a1, 2uLL);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, v12, &v26);
  uint64_t v23 = v26;
  uint64_t v24 = v27;
  uint64_t v25 = v28;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v29 = TupleTypeMetadata2;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = a4;
  uint64_t v14 = type metadata accessor for AbstractZip.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v23, v19, v14, v20, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v12, &v26);
  uint64_t v23 = v26;
  uint64_t v24 = v27;
  uint64_t v25 = v28;
  uint64_t v29 = TupleTypeMetadata2;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  uint64_t v32 = v9;
  uint64_t v33 = a4;
  uint64_t v16 = type metadata accessor for AbstractZip.Side();
  uint64_t v17 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v23, v21, v16, v22, v17);
  swift_release();
  return swift_release();
}

uint64_t Publisher<>.assign(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  PublishedSubscriber.init(_:)(v8);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for PublishedSubscriber();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v8, a2, v5, a3, WitnessTable);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8))(v8, v5);
}

uint64_t destroy for PublishedSubscriber()
{
  return swift_weakDestroy();
}

void PublishedSubscriber.init(_:)(uint64_t *a1@<X8>)
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v3 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v2);
    *a1 = v3;
    swift_weakInit();
    swift_weakAssign();
    swift_release();
  }
}

uint64_t type metadata accessor for PublishedSubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a2;
  uint64_t v35 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v31 = (char *)&v30 - v16;
  uint64_t v17 = *(void *)(a4 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a3;
  uint64_t v36 = (char *)a3;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v24 = type metadata accessor for Publishers.SubscribeOn.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v32, a5);
  uint64_t v36 = (char *)a3;
  uint64_t v37 = a4;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v25 = type metadata accessor for Publishers.SubscribeOn();
  uint64_t v26 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v35 + *(int *)(v25 + 52), a4);
  uint64_t v27 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, v26 + *(int *)(v25 + 56), v34);
  swift_allocObject();
  uint64_t v36 = Publishers.SubscribeOn.Inner.init(_:scheduler:options:)((uint64_t)v23, (uint64_t)v20, v27);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v36, v30, v24, a6, WitnessTable);
  return swift_release();
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = *(void *)(type metadata accessor for Publishers.SubscribeOn() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (uint64_t)v0
     + ((v8 + *(void *)(v7 + 64) + *(unsigned __int8 *)(*(void *)(v3 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));

  return closure #1 in Publishers.SubscribeOn.receive<A>(subscriber:)((uint64_t)v0 + v8, v9, v1, v2, v3, v4, v5, v6);
}

uint64_t Publisher.subscribe<A>(on:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v25 = a6;
  uint64_t v26 = a5;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v7, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v23, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v24, v10);
  return Publishers.SubscribeOn.init(upstream:scheduler:options:)((uint64_t)v20, (uint64_t)v18, (uint64_t)v14, a3, a4, v25);
}

uint64_t Publishers.SubscribeOn.init(upstream:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6, a1, a4);
  uint64_t v10 = type metadata accessor for Publishers.SubscribeOn();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v10 + 52), a2, a5);
  uint64_t v11 = a6 + *(int *)(v10 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t type metadata accessor for Publishers.SubscribeOn()
{
  return swift_getGenericMetadata();
}

char *Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  unint64_t v8 = (_DWORD *)swift_slowAlloc();
  *unint64_t v8 = 0;
  *((void *)v3 + 2) = v8;
  uint64_t v9 = &v3[*(void *)(*(void *)v3 + 160)];
  *((void *)v9 + 4) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[40] = 2;
  uint64_t v10 = *(void *)(*(void *)v3 + 168);
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(void *)&v3[v10] = v11;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))(&v3[*(void *)(*(void *)v3 + 136)], a1);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)(v7 + 88) - 8) + 32))(&v3[*(void *)(*(void *)v3 + 144)], a2, *(void *)(v7 + 88));
  uint64_t v12 = &v3[*(void *)(*(void *)v3 + 152)];
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a3, v13);
  return v3;
}

uint64_t type metadata accessor for Publishers.SubscribeOn.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryMap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryMap.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t ReduceProducer.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 176));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v17);
  if (v18 == 2
    && (int8x16_t v6 = vorrq_s8(*(int8x16_t *)&v17[8], *(int8x16_t *)&v17[24]),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *(void *)v17)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v17);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v17);
    LOBYTE(v18) = 0;
    outlined init with take of SubscriptionStatus((uint64_t)v17, (uint64_t)v19);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v19, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v10 = *(void *)(v3 + 112);
    long long v11 = *(_OWORD *)(v3 + 96);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)(v3 + 80);
    uint64_t v16 = *(void *)v17;
    *(_OWORD *)&v17[16] = v11;
    *(void *)&v17[32] = v10;
    long long v18 = *(_OWORD *)(v3 + 120);
    uint64_t v15 = v18;
    *(void *)&v17[24] = type metadata accessor for ReduceProducer();
    *(void *)&v17[32] = &protocol witness table for ReduceProducer<A, B, C, D, E>;
    *(void *)uint64_t v17 = v1;
    uint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 40);
    swift_retain();
    v12(v17, v16, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(0x8000000000000000, v13, v14);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v17);
    os_unfair_lock_unlock(v4);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
}

uint64_t type metadata accessor for ReduceProducer()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryMap<A, B>.Inner<A1>(void *a1)
{
  return Publishers.TryMap.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.TryMap.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v14);
  if (v15 == 2
    && (int8x16_t v6 = vorrq_s8(*(int8x16_t *)&v14[8], *(int8x16_t *)&v14[24]),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *(void *)v14)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v14);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v14);
    char v15 = 0;
    outlined init with take of SubscriptionStatus((uint64_t)v14, (uint64_t)v13);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v10 = *(void *)(v3 + 112);
    long long v12 = *(_OWORD *)(v3 + 96);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)&v14[16] = v12;
    *(void *)&v14[32] = v10;
    *(void *)&unsigned char v14[24] = type metadata accessor for Publishers.TryMap.Inner();
    *(void *)&v14[32] = &protocol witness table for Publishers.TryMap<A, B>.Inner<A1>;
    *(void *)uint64_t v14 = v1;
    long long v11 = *(void (**)(unsigned char *, void, uint64_t))(v10 + 40);
    swift_retain();
    v11(v14, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v14);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t outlined init with take of SubscriptionStatus(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t Publishers.TryMap.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 32);
  long long v22 = *(_OWORD *)(v11 + 16);
  long long v23 = v22;
  uint64_t v24 = v13;
  uint64_t v25 = v12;
  uint64_t v26 = v14;
  uint64_t v15 = type metadata accessor for Publishers.TryMap.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v16 = (uint64_t *)(v4 + *(int *)(a2 + 44));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_allocObject();
  swift_retain();
  Publishers.TryMap.Inner.init(downstream:map:)((uint64_t)v10, v17, v18);
  *(void *)&long long v23 = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v23, v22, v15, v12, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.TryMap.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.TryMap.Inner.init(downstream:map:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 + 136);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 40) = 2;
  uint64_t v9 = *(void *)(*v3 + 144);
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  uint64_t v11 = *(void *)(*v3 + 152);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v12 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v13 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v12);
    *(uint64_t *)((char *)v3 + v11) = v13;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 120), a1);
    uint64_t v14 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 128));
    *uint64_t v14 = a2;
    v14[1] = a3;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Collect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Collect.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Collect.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  v11[1] = a3;
  void v11[2] = v5;
  void v11[3] = a4;
  uint64_t v7 = type metadata accessor for Publishers.Collect.Inner();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = static Array._allocateUninitialized(_:)();
  swift_allocObject();
  v11[0] = specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(a1, v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v11, v6, v7, v5, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Collect.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.Collect.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v8 - v3;
  (*(void (**)(char *))(v5 + 16))((char *)&v8 - v3);
  uint64_t v9 = a2;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v4, (uint64_t)&v9, v6);
}

uint64_t Publishers.First.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v18 - v12;
  v18[0] = v8;
  v18[1] = a3;
  v18[2] = v7;
  void v18[3] = a4;
  uint64_t v14 = type metadata accessor for Publishers.First.Inner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1, AssociatedTypeWitness);
  swift_allocObject();
  uint64_t v15 = specialized Publishers.First.Inner.init(downstream:initial:reduce:)(a1, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18[0] = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v14, v7, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.First.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.First.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v9, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v10, (uint64_t)v8, v12);
}

uint64_t *ReduceProducer.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(*v3 + 96) - 8) + 56))(v8, 1, 1, *(void *)(*v3 + 96));
  uint64_t v9 = (uint64_t)v3 + *(void *)(*v3 + 160);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 40) = 2;
  uint64_t v10 = *(void *)(*v3 + 176);
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  *uint64_t v11 = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 184)) = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 192)) = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 200)) = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 80) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 168), a1);
  swift_beginAccess();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v8, a2, v12);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))((uint64_t)v3 + *(void *)(*v3 + 144), a2, v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 112) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 152), a3);
  return v3;
}

uint64_t Publishers.Output.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 24);
  v16[0] = *(void *)(a2 + 16);
  uint64_t v8 = v16[0];
  v16[1] = a3;
  void v16[2] = v9;
  v16[3] = a4;
  uint64_t v10 = type metadata accessor for Publishers.Output.Inner();
  uint64_t v11 = (uint64_t *)(v5 + *(int *)(a2 + 36));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  swift_allocObject();
  v16[0] = specialized Publishers.Output.Inner.init(downstream:range:)(a1, v12, v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v16, v8, v10, v9, WitnessTable);
  return swift_release();
}

uint64_t Publishers.Buffer.receive<A>(subscriber:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 24);
  uint64_t v24 = *(uint64_t **)(v11 + 16);
  uint64_t v13 = v24;
  uint64_t v25 = v14;
  uint64_t v26 = v12;
  uint64_t v27 = v15;
  uint64_t v16 = type metadata accessor for Publishers.Buffer.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v17 = *(void *)(v4 + a2[9]);
  char v23 = *(unsigned char *)(v4 + a2[10]);
  uint64_t v18 = v4 + a2[11];
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v24 = *(uint64_t **)v18;
  uint64_t v25 = v19;
  outlined copy of Publishers.BufferingStrategy<A><A>((unint64_t)v24);
  swift_allocObject();
  uint64_t v24 = Publishers.Buffer.Inner.init(_:size:prefetch:whenFull:)((uint64_t)v10, v17, &v23, (uint64_t *)&v24);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v24, (uint64_t)v13, v16, v12, WitnessTable);
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.CombineLatest.receive<A>(subscriber:)(a1, a4, a2, a3);
}

unint64_t Publisher.buffer(size:prefetch:whenFull:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *v10;
  unint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v15);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, a2);
  uint64_t v16 = (int *)type metadata accessor for Publishers.Buffer();
  *(void *)(a3 + v16[9]) = a1;
  *(unsigned char *)(a3 + v16[10]) = v11;
  uint64_t v17 = (unint64_t *)(a3 + v16[11]);
  *uint64_t v17 = v13;
  v17[1] = v14;
  return outlined copy of Publishers.BufferingStrategy<A><A>(v13);
}

unint64_t outlined copy of Publishers.BufferingStrategy<A><A>(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for Publishers.Buffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.CombineLatest3.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.CombineLatest3.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2[2];
  uint64_t v23 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = a2[3];
  uint64_t v26 = a2[6];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v27 = a2[4];
  uint64_t v28 = a2[7];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v24 = v10;
  uint64_t v36 = a4;
  type metadata accessor for CombineLatest3Inner();
  swift_allocObject();
  uint64_t v12 = specialized AbstractCombineLatest.init(downstream:upstreamCount:)(a1, 3);
  uint64_t v29 = 0;
  uint64_t v30 = v12;
  swift_retain();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v31 = TupleTypeMetadata3;
  uint64_t v32 = v11;
  uint64_t v33 = a3;
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v35 = a4;
  uint64_t v14 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v7, v14, v23, WitnessTable);
  swift_release();
  uint64_t v29 = 1;
  uint64_t v30 = v12;
  swift_retain();
  uint64_t v31 = TupleTypeMetadata3;
  uint64_t v32 = v11;
  uint64_t v33 = a3;
  uint64_t v34 = v9;
  uint64_t v35 = a4;
  uint64_t v16 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v17 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v25, v16, v26, v17);
  swift_release();
  uint64_t v29 = 2;
  uint64_t v30 = v12;
  swift_retain();
  uint64_t v31 = TupleTypeMetadata3;
  uint64_t v32 = v11;
  uint64_t v33 = a3;
  uint64_t v34 = v24;
  uint64_t v35 = a4;
  uint64_t v18 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v19 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v27, v18, v28, v19);
  swift_release();
  AbstractCombineLatest.subscribe()();
  return swift_release();
}

uint64_t type metadata accessor for CombineLatest3Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.Buffer.Inner.init(_:size:prefetch:whenFull:)(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v6 = *v4;
  char v7 = *a3;
  uint64_t v8 = *a4;
  uint64_t v15 = a4[1];
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  v4[2] = (uint64_t)v9;
  *((unsigned char *)v4 + 24) = 0;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 160);
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(unsigned char *)(v10 + 40) = 2;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 168)) = 0;
  uint64_t v11 = *(void *)(*v4 + 176);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v4 + v11) = Array.init()();
  *((unsigned char *)v4 + *(void *)(*v4 + 184)) = 0;
  uint64_t v12 = (uint64_t)v4 + *(void *)(*v4 + 192);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v6 + 88) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 152), a1);
  v4[4] = a2;
  *((unsigned char *)v4 + 40) = v7;
  v4[6] = v8;
  v4[7] = v15;
  return v4;
}

uint64_t type metadata accessor for Publishers.Buffer.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReplaceError<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ReplaceError.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.ReplaceError.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v24 = a4;
  uint64_t v26 = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(a2 + 36);
  uint64_t v19 = v5;
  uint64_t v25 = v5 + v18;
  v27[0] = v9;
  v27[1] = a3;
  v27[2] = v8;
  v27[3] = v24;
  uint64_t v20 = type metadata accessor for Publishers.ReplaceError.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v26, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v19, AssociatedTypeWitness);
  swift_allocObject();
  v27[0] = Publishers.ReplaceError.Inner.init(downstream:output:)((uint64_t)v17, (uint64_t)v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v27, v9, v20, v8, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.ReplaceError.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.ReplaceError.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (uint64_t)v2 + *(void *)(*v2 + 128);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(void *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 40) = 2;
  *((unsigned char *)v2 + *(void *)(*v2 + 136)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144)) = 0;
  uint64_t v7 = *(void *)(*v2 + 152);
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *(uint64_t *)((char *)v2 + v7) = (uint64_t)v8;
  uint64_t v9 = (uint64_t)v2 + *(void *)(*v2 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v9, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 120), a1);
  return v2;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.CombineLatest4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.CombineLatest4.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.CombineLatest4.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a2[2];
  uint64_t v25 = a2[6];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = a2[3];
  uint64_t v30 = a2[7];
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v31 = a2[4];
  uint64_t v32 = a2[8];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v33 = a2[5];
  uint64_t v34 = a2[9];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  type metadata accessor for CombineLatest4Inner();
  swift_allocObject();
  uint64_t v11 = specialized AbstractCombineLatest.init(downstream:upstreamCount:)(a1, 4);
  uint64_t v35 = 0;
  uint64_t v36 = v11;
  swift_retain();
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v37 = TupleTypeMetadata;
  uint64_t v38 = v10;
  uint64_t v39 = a3;
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v41 = a4;
  uint64_t v13 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v24, v13, v25, WitnessTable);
  swift_release();
  uint64_t v35 = 1;
  uint64_t v36 = v11;
  swift_retain();
  uint64_t v37 = TupleTypeMetadata;
  uint64_t v38 = v10;
  uint64_t v39 = a3;
  uint64_t v40 = v7;
  uint64_t v41 = a4;
  uint64_t v15 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v16 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v29, v15, v30, v16);
  swift_release();
  uint64_t v35 = 2;
  uint64_t v36 = v11;
  swift_retain();
  uint64_t v37 = TupleTypeMetadata;
  uint64_t v38 = v10;
  uint64_t v39 = a3;
  uint64_t v40 = v27;
  uint64_t v41 = a4;
  uint64_t v17 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v18 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v31, v17, v32, v18);
  swift_release();
  uint64_t v35 = 3;
  uint64_t v36 = v11;
  swift_retain();
  uint64_t v37 = TupleTypeMetadata;
  uint64_t v38 = v10;
  uint64_t v39 = a3;
  uint64_t v40 = v28;
  uint64_t v41 = a4;
  uint64_t v19 = type metadata accessor for AbstractCombineLatest.Side();
  uint64_t v20 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v33, v19, v34, v20);
  swift_release();
  AbstractCombineLatest.subscribe()();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Buffer<A>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return Publishers.Buffer.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t type metadata accessor for CombineLatest4Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Output.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t specialized Publishers.Output.Inner.init(downstream:range:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = (uint64_t)v3 + *(void *)(*v3 + 120);
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  *(unsigned char *)(v8 + 40) = 2;
  uint64_t v9 = *(void *)(*v3 + 144);
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8) + 16))((uint64_t)v3 + *(void *)(*v3 + 112), a1);
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 128)) = a2;
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
  }
  else
  {
    *(uint64_t *)((char *)v3 + *(void *)(*v3 + 136)) = a3 - a2;
    return (uint64_t)v3;
  }
  return result;
}

uint64_t Publishers.Zip3.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2[2];
  uint64_t v22 = a2[5];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = a2[3];
  uint64_t v25 = a2[6];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v26 = a2[4];
  uint64_t v27 = a2[7];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  uint64_t v38 = v28;
  uint64_t v23 = v10;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  type metadata accessor for Zip3Inner();
  swift_allocObject();
  uint64_t v11 = specialized AbstractZip.init(downstream:upstreamCount:)(a1, 3uLL);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, v11, &v32);
  uint64_t v29 = v32;
  uint64_t v30 = v33;
  uint64_t v31 = v34;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v35 = TupleTypeMetadata3;
  uint64_t v36 = v28;
  uint64_t v37 = a3;
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = a4;
  uint64_t v13 = type metadata accessor for AbstractZip.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v21, v13, v22, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v11, &v32);
  uint64_t v29 = v32;
  uint64_t v30 = v33;
  uint64_t v31 = v34;
  uint64_t v35 = TupleTypeMetadata3;
  uint64_t v36 = v28;
  uint64_t v37 = a3;
  uint64_t v38 = v9;
  uint64_t v39 = a4;
  uint64_t v15 = type metadata accessor for AbstractZip.Side();
  uint64_t v16 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v24, v15, v25, v16);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v11, &v32);
  uint64_t v29 = v32;
  uint64_t v30 = v33;
  uint64_t v31 = v34;
  uint64_t v35 = TupleTypeMetadata3;
  uint64_t v36 = v28;
  uint64_t v37 = a3;
  uint64_t v38 = v23;
  uint64_t v39 = a4;
  uint64_t v17 = type metadata accessor for AbstractZip.Side();
  uint64_t v18 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v29, v26, v17, v27, v18);
  swift_release();
  return swift_release();
}

uint64_t Publishers.RemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v10 = v7;
  uint64_t v14 = *(void *)(a2 + 24);
  v21[0] = *(void *)(a2 + 16);
  uint64_t v13 = v21[0];
  v21[1] = a3;
  long long v21[2] = v14;
  void v21[3] = a4;
  uint64_t v15 = a5(0, v21);
  uint64_t v16 = (uint64_t *)(v10 + *(int *)(a2 + 36));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_allocObject();
  swift_retain();
  v21[0] = specialized Publishers.RemoveDuplicates.Inner.init(downstream:filter:)(a1, v17, v18, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v21, v13, v15, v14, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.RemoveDuplicates.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.RemoveDuplicates.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a3;
  uint64_t v22 = a5;
  uint64_t v20 = a2;
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void *)(*(void *)v5 + 280);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = v5 + v7[38];
  uint64_t v13 = v7[36];
  uint64_t v14 = v7[34];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v12, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v14;
  v16[3] = v8;
  void v16[4] = v13;
  void v16[5] = v7[37];
  uint64_t v17 = v21;
  v16[6] = v20;
  v16[7] = v17;
  v23[0] = v22;
  v23[1] = v16;
  return FilterProducer.init(downstream:filter:)((uint64_t)v11, (uint64_t)v23);
}

uint64_t *FilterProducer.init(downstream:filter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 152);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 160);
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 144), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 112) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 136), a2);
  return v2;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Published<A>.Publisher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Published.Publisher.receive<A>(subscriber:)(a1, a2, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Drop<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Drop.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Concatenate<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Concatenate.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t initializeWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

void *initializeWithCopy for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MapKeyPath.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t Publishers.MapKeyPath.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 32);
  long long v21 = *(_OWORD *)(v9 + 16);
  long long v23 = v21;
  uint64_t v24 = v11;
  uint64_t v25 = v10;
  uint64_t v26 = v12;
  uint64_t v13 = type metadata accessor for Publishers.MapKeyPath.Inner();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a3);
  uint64_t v17 = *(void *)(v22 + *(int *)(a2 + 44));
  swift_retain();
  uint64_t v18 = v21;
  Publishers.MapKeyPath.Inner.init(downstream:keyPath:)((uint64_t)v8, v17, a3, (uint64_t)v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v16, v18, v13, v10, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t destroy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 32) - 8) + 8))();

  return swift_release();
}

void Publishers.MapKeyPath.Inner.init(downstream:keyPath:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  uint64_t v6 = type metadata accessor for Publishers.MapKeyPath.Inner();
  *(void *)(a4 + *(int *)(v6 + 60)) = a2;
  uint64_t v7 = *(int *)(v6 + 64);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v8 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v9 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v8);
    *(void *)(a4 + v7) = v9;
  }
}

uint64_t type metadata accessor for Publishers.MapKeyPath.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AbstractZip.Side()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Zip3Inner()
{
  return swift_getGenericMetadata();
}

uint64_t specialized AbstractZip.init(downstream:upstreamCount:)(uint64_t a1, size_t a2)
{
  uint64_t v5 = *v2;
  *((unsigned char *)v2 + *(void *)(*v2 + 136)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 144)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v6 = *(void *)(*v2 + 176);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*v2 + 184);
  uint64_t v9 = (void *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v2 + v8) = (uint64_t)v9;
  *((unsigned char *)v2 + *(void *)(*v2 + 192)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
  uint64_t v10 = (uint64_t)v2 + *(void *)(*v2 + 208);
  uint64_t v11 = *(void *)(v5 + 96);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))((uint64_t)v2 + *(void *)(*v2 + 112), a1, v11);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 168)) = a2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = (uint64_t)specialized Array.init(repeating:count:)(MEMORY[0x1E4FBC860], a2);
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t result = specialized Array.init(repeating:count:)((uint64_t)v15, a2);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 128)) = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v14 + 16) = a2;
      bzero((void *)(v14 + 32), a2);
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4FBC860];
    }
    *(uint64_t *)((char *)v2 + *(void *)(*v2 + 160)) = v14;
    return (uint64_t)v2;
  }
  return result;
}

void *specialized Array.init(repeating:count:)(void *result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      v4[2] = a2;
      v4[4] = v3;
      if (a2 != 1)
      {
        v4[5] = v3;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v4 + 6;
          do
          {
            *v7++ = v3;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x1E4FBC860];
    }
    return v5;
  }
  return result;
}

uint64_t initializeWithTake for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Zip3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Zip3.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t partial apply for closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(v2, v3);
}

uint64_t instantiation function for generic protocol witness table for PassthroughSubject<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a2);
  Publishers.MapKeyPath.init(upstream:keyPath:)((uint64_t)v8, a1, a2, a3);
  return swift_retain();
}

uint64_t Publishers.MapKeyPath.init(upstream:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for Publishers.MapKeyPath();
  *(void *)(a4 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t type metadata accessor for Publishers.MapKeyPath()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Subscribers.Completion()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.Merge8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 160);
}

uint64_t type metadata instantiation function for Publishers.Merge6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 120);
}

uint64_t type metadata completion function for AbstractCombineLatest()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Scan<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Scan.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t ObservableObjectPublisher.init()()
{
  uint64_t v1 = type metadata accessor for ObservationRegistrar();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *(void *)(v0 + v5) = v6;
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E4FBC870];
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
  ObservationRegistrar.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar, v4, v1);
  return v0;
}

uint64_t Optional.Publisher.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Publisher.merge<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.Merge.init(_:_:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publishers.Merge.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.Merge();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.Merge()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Concatenate.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Published.projectedValue.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = Published.projectedValue.modify(v6, a2);
  *uint64_t v4 = v2;
  swift_release();
  return ((uint64_t (*)(void *, void))v3)(v6, 0);
}

void Published.projectedValue.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_release();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);

  free((void *)v1);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v1 = *a1;
  swift_release();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  free(*(void **)(v1 + 32));
  free(v2);
  free(v3);

  free((void *)v1);
}

void (*Published.projectedValue.modify(void *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  size_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = malloc(v9);
  v6[2] = v10;
  uint64_t v11 = malloc(v9);
  void v6[3] = v11;
  uint64_t v12 = type metadata accessor for Published.Storage();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = malloc(*(void *)(v13 + 64));
  void v6[4] = v14;
  (*(void (**)(void))(v13 + 16))();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v6 = *v14;
    return Published.projectedValue.modify;
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v11, v14, v7);
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
    Published.Publisher.init(_:)((uint64_t)v10, v7, v6 + 1);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(void *, uint64_t))(v13 + 8))(v3, v12);
    *uint64_t v3 = v6[1];
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = Published.projectedValue.modify;
    swift_retain();
  }
  return v15;
}

uint64_t Publisher.debounce<A>(for:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v33 = a8;
  uint64_t v34 = a6;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v27 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v28 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v28);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v21 = (char *)&v27 - v20;
  uint64_t v22 = a4;
  MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v24, v29, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v30, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v31, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v32, v28);
  return Publishers.Debounce.init(upstream:dueTime:scheduler:options:)((uint64_t)v24, (uint64_t)v21, (uint64_t)v16, (uint64_t)v13, v22, a5, v33);
}

uint64_t Publishers.Debounce.init(upstream:dueTime:scheduler:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7, a1, a5);
  uint64_t v12 = (int *)type metadata accessor for Publishers.Debounce();
  uint64_t v13 = a7 + v12[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v12[14], a3, a6);
  uint64_t v15 = a7 + v12[15];
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a4, v16);
}

uint64_t type metadata accessor for Publishers.Debounce()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge7<A, B, C, D, E, F, G>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t Publisher.scan<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Publisher.scan<A>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Scan.init(upstream:initialResult:nextPartialResult:));
}

uint64_t type metadata completion function for ObservableObjectPublisher.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Sink();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 88) = 2;
  swift_retain();
  swift_retain();
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *uint64_t v14 = 0;
  *(void *)(v13 + 96) = v14;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = a2;
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  uint64_t v17 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v17, a5, v12, a6, WitnessTable);
  type metadata accessor for AnyCancellable();
  uint64_t v17 = v13;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v17, v12, (uint64_t)&protocol witness table for Subscribers.Sink<A, B>);
}

uint64_t Publishers.Debounce.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v34 = a1;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v35 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v35 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v35);
  uint64_t v31 = (char *)&v27 - v9;
  uint64_t v10 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v30 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v28 = *(void *)(a2 + 32);
  uint64_t v29 = v20;
  v37[0] = v20;
  v37[1] = v7;
  v37[2] = a3;
  void v37[3] = v28;
  v37[4] = v6;
  v37[5] = v32;
  uint64_t v21 = type metadata accessor for Publishers.Debounce.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v34, a3);
  uint64_t v22 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v36 + *(int *)(a2 + 52), AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v30, v22 + *(int *)(a2 + 56), v7);
  uint64_t v24 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, v22 + *(int *)(a2 + 60), v35);
  swift_allocObject();
  v37[0] = Publishers.Debounce.Inner.init(_:dueTime:scheduler:options:)((uint64_t)v19, (uint64_t)v16, v23, v24);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v37, v29, v21, v28, WitnessTable);
  return swift_release();
}

char *Publishers.Debounce.Inner.init(_:dueTime:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)v4;
  uint64_t v10 = *(void *)v4;
  uint64_t v11 = (_DWORD *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *((void *)v4 + 2) = v11;
  uint64_t v12 = (void *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *((void *)v4 + 3) = v12;
  uint64_t v13 = &v4[*(void *)(*(void *)v4 + 176)];
  *((void *)v13 + 4) = 0;
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v13[40] = 2;
  uint64_t v14 = *(void *)(*(void *)v4 + 184);
  uint64_t v15 = *(void *)(v9 + 88);
  long long v23 = *(_OWORD *)(v10 + 96);
  type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  *(void *)&v4[v14] = Dictionary.init()();
  uint64_t v16 = &v4[*(void *)(*(void *)v4 + 192)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v16, 1, 1, AssociatedTypeWitness);
  *(void *)&v4[*(void *)(*(void *)v4 + 200)] = 0;
  *(void *)&v4[*(void *)(*(void *)v4 + 208)] = 0;
  (*(void (**)(char *, uint64_t, void))(*(void *)(v23 - 8) + 32))(&v4[*(void *)(*(void *)v4 + 144)], a1, v23);
  uint64_t v18 = &v4[*(void *)(*(void *)v4 + 152)];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a2, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(&v4[*(void *)(*(void *)v4 + 160)], a3, v15);
  uint64_t v20 = &v4[*(void *)(*(void *)v4 + 168)];
  swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a4, v21);
  return v4;
}

uint64_t type metadata accessor for Publishers.Debounce.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Debounce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Debounce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MergeMany<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MergeMany.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge3.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Merge7.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 7);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[10], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[11], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[5], v13, a2[12], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[6], v13, a2[13], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[7], v13, a2[14], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[8], v13, a2[15], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t Publishers.Merge3.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 3);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[6], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[7], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Catch<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Catch.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Catch.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v10[3];
  uint64_t v14 = v10[4];
  uint64_t v13 = v10[5];
  uint64_t v26 = v10[2];
  uint64_t v12 = v26;
  uint64_t v27 = v11;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  uint64_t v31 = v16;
  type metadata accessor for Publishers.Catch.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v17 = (uint64_t *)(v23[1] + *(int *)(a2 + 52));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_allocObject();
  swift_retain();
  uint64_t v25 = Publishers.Catch.Inner.init(downstream:handler:)((uint64_t)v9, v18, v19);
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  uint64_t v28 = a3;
  uint64_t v29 = v14;
  uint64_t v30 = v13;
  uint64_t v31 = v24;
  uint64_t v20 = type metadata accessor for Publishers.Catch.Inner.UncaughtS();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v25, v12, v20, v14, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Catch.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Catch.Inner.UncaughtS()
{
  return swift_getGenericMetadata();
}

char *Publishers.Catch.Inner.init(downstream:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *uint64_t v8 = 0;
  *((void *)v3 + 2) = v8;
  *((void *)v3 + 3) = 0;
  uint64_t v9 = &v3[*(void *)(*(void *)v3 + 144)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v7 + 96);
  type metadata accessor for Publishers.Catch.Inner.State();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(&v3[*(void *)(*(void *)v3 + 152)], a1, v13);
  uint64_t v11 = &v3[*(void *)(*(void *)v3 + 160)];
  *(void *)uint64_t v11 = a2;
  *((void *)v11 + 1) = a3;
  return v3;
}

uint64_t Publishers.Merge.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 2);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[5], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t Publishers.Filter.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 40))(a1, *(void *)(a2 + 24));
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Debounce<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Debounce.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Debounce.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v15);
  if (v18 == 2
    && (int8x16_t v6 = vorrq_s8(v16, v17),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v15)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v15);
    char v18 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v15, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v17.i64[0] = v3;
    v17.i64[1] = (uint64_t)&protocol witness table for Publishers.Debounce<A, B>.Inner<A1>;
    uint64_t v15 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v15, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    os_unfair_recursive_lock_unlock();
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(0x8000000000000000, v13, v14);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    os_unfair_lock_unlock(v4);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.SetFailureType<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.SetFailureType.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.MergeMany.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a3;
  uint64_t v43 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v37 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v45);
  unsigned int v44 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v35 - v14);
  uint64_t v36 = *v4;
  uint64_t v16 = v36;
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = v17;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v49 = v38;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v19 = a4;
  uint64_t v20 = type metadata accessor for Publishers._Merged();
  uint64_t v21 = MEMORY[0x18C13B7E0](v16, v8);
  swift_allocObject();
  uint64_t v22 = specialized Publishers._Merged.init(downstream:count:)(v43, v21);
  uint64_t v51 = v20;
  uint64_t v52 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v48 = (uint64_t)v22;
  uint64_t v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v19 + 40);
  swift_retain();
  uint64_t v41 = v19;
  v23(&v48, v46, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  v47[3] = v36;
  uint64_t v24 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C13B6B0](&v48, v24, WitnessTable);
  v47[0] = v48;
  type metadata accessor for EnumeratedSequence();
  EnumeratedSequence.makeIterator()();
  uint64_t v26 = type metadata accessor for EnumeratedSequence.Iterator();
  uint64_t v27 = (void (**)(uint64_t *, char *, uint64_t))(v42 + 32);
  uint64_t v42 = TupleTypeMetadata2 - 8;
  uint64_t v43 = v26;
  uint64_t v28 = (void (**)(char *, char *, uint64_t))(v37 + 32);
  uint64_t v29 = (void (**)(char *, uint64_t))(v37 + 8);
  while (1)
  {
    uint64_t v30 = v44;
    EnumeratedSequence.Iterator.next()();
    (*v27)(v15, v30, v45);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v15, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v31 = *v15;
    }
    (*v28)(v10, (char *)v15 + *(int *)(TupleTypeMetadata2 + 48), v8);
    swift_retain();
    Publishers._Merged.Side.init(index:merger:)(v31, (uint64_t)v22, &v48);
    v47[0] = v48;
    v47[1] = v49;
    v47[2] = v50;
    uint64_t v48 = v39;
    uint64_t v49 = v38;
    uint64_t v50 = v46;
    uint64_t v51 = v41;
    uint64_t v32 = type metadata accessor for Publishers._Merged.Side();
    uint64_t v33 = swift_getWitnessTable();
    Publisher.subscribe<A>(_:)((uint64_t)v47, v8, v32, v40, v33);
    (*v29)(v10, v8);
    swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for Publishers._Merged.Side()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers._Merged()
{
  return swift_getGenericMetadata();
}

void protocol witness for Subscription.request(_:) in conformance Publishers._Merged<A, B, C>(uint64_t a1)
{
}

void Publishers._Merged.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v116 = *(void **)v2;
  uint64_t v4 = v116;
  uint64_t v5 = v116[10];
  uint64_t v117 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  v119 = (char *)v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v115 = (char *)v92 - v9;
  uint64_t v110 = v10;
  MEMORY[0x1F4188790](v8);
  v112 = (char *)v92 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v114 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  v113 = (char *)v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v92 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v92 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v118 = type metadata accessor for Optional();
  uint64_t v111 = *(void (***)(unint64_t *, char *, uint64_t))(v118 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v118);
  uint64_t v23 = (char *)v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (void *)((char *)v92 - v24);
  uint64_t v26 = *(os_unfair_lock_s **)(v2 + v4[22]);
  os_unfair_lock_lock(v26);
  uint64_t v27 = *(void **)v2;
  if (*(unsigned char *)(v2 + *(void *)(*(void *)v2 + 128))) {
    goto LABEL_7;
  }
  uint64_t v28 = v27[19];
  if (*(unsigned char *)(v2 + v28)) {
    goto LABEL_7;
  }
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    if (!a1)
    {
LABEL_7:
      os_unfair_lock_unlock(v26);
      return;
    }
  }
  uint64_t v109 = v27[15];
  uint64_t v29 = *(void *)(v2 + v109);
  if (v29 == 0x8000000000000000) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v2 + v27[24]))
  {
    uint64_t v30 = v27[25];
    uint64_t v31 = *(void *)(v2 + v30);
    unint64_t v32 = 0x8000000000000000;
    if (v31 == 0x8000000000000000) {
      goto LABEL_7;
    }
    if (a1 == 0x8000000000000000)
    {
LABEL_54:
      *(void *)(v2 + v30) = v32;
      goto LABEL_7;
    }
    if (((v31 | a1) & 0x8000000000000000) == 0)
    {
      unint64_t v32 = v31 + a1;
      if (__OFADD__(v31, a1))
      {
        unint64_t v32 = 0x8000000000000000;
      }
      else if ((v32 & 0x8000000000000000) != 0)
      {
        goto LABEL_113;
      }
      goto LABEL_54;
    }
    goto LABEL_108;
  }
  if (a1 != 0x8000000000000000)
  {
    if (((v29 | a1) & 0x8000000000000000) == 0)
    {
      v92[0] = v28;
      long long v103 = v26;
      unint64_t v44 = 0x8000000000000000;
      BOOL v45 = __OFADD__(v29, a1);
      unint64_t v46 = v29 + a1;
      if (v45 || (unint64_t v44 = v46, (v46 & 0x8000000000000000) == 0))
      {
        *(void *)(v2 + v109) = v44;
        uint64_t v125 = static Array._allocateUninitialized(_:)();
        uint64_t v47 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 168));
        swift_beginAccess();
        uint64_t v96 = v47;
        uint64_t v124 = *v47;
        uint64_t v48 = type metadata accessor for Array();
        uint64_t v98 = v48;
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v50 = v48;
        uint64_t v51 = WitnessTable;
        MEMORY[0x18C13B6B0](v120, v50);
        uint64_t v123 = v120[0];
        type metadata accessor for EnumeratedSequence();
        EnumeratedSequence.makeIterator()();
        uint64_t v93 = v2 + *(void *)(*(void *)v2 + 160);
        swift_beginAccess();
        v92[1] = v51;
        uint64_t v108 = type metadata accessor for EnumeratedSequence.Iterator();
        v111 += 4;
        uint64_t v107 = TupleTypeMetadata2 - 8;
        long long v106 = (void (**)(char *, char *, uint64_t))(v114 + 32);
        long long v105 = (void (**)(char *, char *, uint64_t))(v114 + 16);
        long long v104 = (unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
        uint64_t v101 = (uint64_t (**)(char *, char *, uint64_t))(v117 + 32);
        uint64_t v95 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
        uint64_t v94 = v114 + 40;
        long long v102 = (void (**)(char *, char *, uint64_t))(v117 + 16);
        uint64_t v100 = (void (**)(char *, uint64_t))(v117 + 8);
        uint64_t v52 = (void (**)(char *, uint64_t))(v114 + 8);
        os_unfair_lock_t v99 = (void *)MEMORY[0x1E4FBC860];
        while (1)
        {
          EnumeratedSequence.Iterator.next()();
          (*v111)(v25, v23, v118);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8)
                                                                                    + 48))(v25, 1, TupleTypeMetadata2) == 1)goto LABEL_49;
          unint64_t v53 = *v25;
          (*v106)(v19, (char *)v25 + *(int *)(TupleTypeMetadata2 + 48), v12);
          uint64_t v54 = *(void *)(v2 + v109);
          if (v54 != 0x8000000000000000)
          {
            if (v54 < 0)
            {
              __break(1u);
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
            if (!v54)
            {
              (*v52)(v19, v12);
LABEL_49:
              swift_bridgeObjectRelease();
              if (*(void *)(v2 + *(void *)(*(void *)v2 + 144)) == *(void *)(v2
                                                                                     + *(void *)(*(void *)v2 + 136)))
              {
                v120[0] = *v96;
                MEMORY[0x1F4188790](v120[0]);
                v92[-4] = v5;
                uint64_t v68 = v116;
                *(_OWORD *)&v92[-3] = *(_OWORD *)(v116 + 11);
                v92[-1] = v68[13];
                swift_bridgeObjectRetain();
                char v69 = Sequence.allSatisfy(_:)();
                swift_bridgeObjectRelease();
                uint64_t v70 = v103;
                if (v69)
                {
                  LODWORD(v118) = 1;
                  *(unsigned char *)(v2 + v92[0]) = 1;
                }
                else
                {
                  LODWORD(v118) = 0;
                }
              }
              else
              {
                LODWORD(v118) = 0;
                uint64_t v70 = v103;
              }
              os_unfair_lock_unlock(v70);
              uint64_t v71 = v125;
              if (!MEMORY[0x18C13B800](v125, v5)) {
                goto LABEL_74;
              }
              uint64_t v72 = 0;
              unint64_t v73 = 0;
              uint64_t v74 = v115;
              while (1)
              {
                Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
                Array._checkSubscript(_:wasNativeTypeChecked:)();
                if (IsNativeType)
                {
                  (*(void (**)(char *, unint64_t, uint64_t))(v117 + 16))(v119, v71+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(void *)(v117 + 72) * v72, v5);
                  uint64_t v76 = v72 + 1;
                  if (__OFADD__(v72, 1)) {
                    goto LABEL_73;
                  }
                }
                else
                {
                  uint64_t v80 = _ArrayBuffer._getElementSlowPath(_:)();
                  if (v110 != 8) {
                    goto LABEL_117;
                  }
                  v120[0] = v80;
                  (*v102)(v119, (char *)v120, v5);
                  swift_unknownObjectRelease();
                  uint64_t v76 = v72 + 1;
                  if (__OFADD__(v72, 1))
                  {
LABEL_73:
                    __break(1u);
LABEL_74:
                    unint64_t v79 = 0;
LABEL_75:
                    swift_bridgeObjectRelease();
                    os_unfair_lock_lock(v70);
                    uint64_t v81 = *(void *)(*(void *)v2 + 200);
                    unint64_t v82 = 0x8000000000000000;
                    if (v79 == 0x8000000000000000) {
                      goto LABEL_82;
                    }
                    uint64_t v83 = *(void *)(v2 + v81);
                    if (v83 == 0x8000000000000000) {
                      goto LABEL_82;
                    }
                    if ((v83 & 0x8000000000000000) == 0)
                    {
                      unint64_t v82 = v79 + v83;
                      if (__OFADD__(v79, v83))
                      {
                        unint64_t v82 = 0x8000000000000000;
                        goto LABEL_82;
                      }
                      if ((v82 & 0x8000000000000000) == 0)
                      {
LABEL_82:
                        *(void *)(v2 + v81) = 0;
                        os_unfair_lock_unlock(v70);
                        if (v118) {
                          goto LABEL_83;
                        }
                        if ((uint64_t)(v82 - 1) < 0) {
                          goto LABEL_94;
                        }
                        os_unfair_lock_lock(v70);
                        uint64_t v86 = *(void *)(v2 + v109);
                        unint64_t v87 = 0x8000000000000000;
                        if (v86 == 0x8000000000000000) {
                          goto LABEL_93;
                        }
                        if (v82 == 0x8000000000000000) {
                          goto LABEL_92;
                        }
                        if ((v86 & 0x8000000000000000) == 0)
                        {
                          unint64_t v87 = v86 + v82;
                          if (__OFADD__(v86, v82))
                          {
                            unint64_t v87 = 0x8000000000000000;
                            goto LABEL_92;
                          }
                          if ((v87 & 0x8000000000000000) == 0)
                          {
LABEL_92:
                            *(void *)(v2 + v109) = v87;
LABEL_93:
                            os_unfair_lock_unlock(v70);
LABEL_94:
                            uint64_t v88 = v99[2];
                            if (v88)
                            {
                              uint64_t v89 = v99 + 4;
                              do
                              {
                                outlined init with copy of Any?((uint64_t)v89, (uint64_t)v120, &demangling cache variable for type metadata for Subscription?);
                                uint64_t v91 = v121;
                                if (v121)
                                {
                                  uint64_t v90 = v122;
                                  __swift_project_boxed_opaque_existential_1(v120, v121);
                                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 24))(1, v91, v90);
                                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
                                }
                                else
                                {
                                  outlined destroy of CustomStringConvertible?((uint64_t)v120, &demangling cache variable for type metadata for Subscription?);
                                }
                                v89 += 5;
                                --v88;
                              }
                              while (v88);
                            }
LABEL_100:
                            swift_bridgeObjectRelease();
                            return;
                          }
LABEL_116:
                          __break(1u);
LABEL_117:
                          __break(1u);
                          return;
                        }
LABEL_115:
                        __break(1u);
                        goto LABEL_116;
                      }
LABEL_114:
                      __break(1u);
                      goto LABEL_115;
                    }
LABEL_110:
                    __break(1u);
LABEL_111:
                    __break(1u);
LABEL_112:
                    __break(1u);
LABEL_113:
                    __break(1u);
                    goto LABEL_114;
                  }
                }
                uint64_t v77 = (*v101)(v74, v119, v5);
                MEMORY[0x1F4188790](v77);
                v92[-6] = v5;
                uint64_t v78 = v116;
                *(_OWORD *)&v92[-5] = *(_OWORD *)(v116 + 11);
                v92[-3] = v78[13];
                v92[-2] = v74;
                Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
                (*v100)(v74, v5);
                unint64_t v79 = 0x8000000000000000;
                if (v73 == 0x8000000000000000)
                {
                  uint64_t v70 = v103;
                }
                else
                {
                  uint64_t v70 = v103;
                  if (v120[0] != 0x8000000000000000)
                  {
                    if ((v120[0] & 0x8000000000000000) != 0) {
                      goto LABEL_102;
                    }
                    unint64_t v79 = v73 + v120[0];
                    if (__OFADD__(v73, v120[0]))
                    {
                      unint64_t v79 = 0x8000000000000000;
                    }
                    else if ((v79 & 0x8000000000000000) != 0)
                    {
                      goto LABEL_104;
                    }
                  }
                }
                ++v72;
                unint64_t v73 = v79;
                if (v76 == MEMORY[0x18C13B800](v71, v5)) {
                  goto LABEL_75;
                }
              }
            }
          }
          (*v105)(v17, v19, v12);
          if ((*v104)(v17, 1, v5) == 1)
          {
            os_unfair_lock_t v55 = *v52;
            (*v52)(v19, v12);
            v55(v17, v12);
          }
          else
          {
            (*v101)(v112, v17, v5);
            (*v95)(v113, 1, 1, v5);
            unint64_t v97 = v53;
            uint64_t v56 = v96;
            swift_beginAccess();
            Array._makeMutableAndUnique()();
            uint64_t v57 = *v56;
            Array._checkSubscript_mutating(_:)(v97);
            (*(void (**)(unint64_t, char *, uint64_t))(v114 + 40))(v57+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(void *)(v114 + 72) * v97, v113, v12);
            swift_endAccess();
            uint64_t v58 = *(void *)(v2 + v109);
            if (v58 != 0x8000000000000000)
            {
              if (v58 < 0) {
                goto LABEL_111;
              }
              if (!v58) {
                goto LABEL_112;
              }
              *(void *)(v2 + v109) = v58 - 1;
            }
            (*v102)(v115, v112, v5);
            type metadata accessor for Array();
            Array.append(_:)();
            if ((v97 & 0x8000000000000000) != 0) {
              goto LABEL_106;
            }
            if (v97 >= *(void *)(*(void *)v93 + 16)) {
              goto LABEL_107;
            }
            outlined init with copy of Any?(*(void *)v93 + 40 * v97 + 32, (uint64_t)v120, &demangling cache variable for type metadata for Subscription?);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              os_unfair_lock_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99[2] + 1, 1, v99);
            }
            uint64_t v59 = v99;
            unint64_t v61 = v99[2];
            unint64_t v60 = v99[3];
            unint64_t v62 = v61 + 1;
            if (v61 >= v60 >> 1)
            {
              unint64_t v97 = v61 + 1;
              unsigned int v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v99);
              unint64_t v62 = v97;
              uint64_t v59 = v63;
            }
            long long v59[2] = v62;
            os_unfair_lock_t v99 = v59;
            outlined init with take of Subscription?((uint64_t)v120, (uint64_t)&v59[5 * v61 + 4]);
            (*v100)(v112, v5);
            (*v52)(v19, v12);
          }
        }
      }
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    goto LABEL_105;
  }
  *(void *)(v2 + v109) = 0x8000000000000000;
  uint64_t v33 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 168));
  swift_beginAccess();
  uint64_t v34 = *v33;
  uint64_t v35 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56))(v113, 1, 1, v5);
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = MEMORY[0x18C13B7E0](v36, v12);
  uint64_t v38 = specialized Array.init(repeating:count:)(v35, v37, v12);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v35, v12);
  uint64_t *v33 = v38;
  swift_bridgeObjectRelease();
  uint64_t v39 = v26;
  uint64_t v40 = *(void *)(v2 + *(void *)(*(void *)v2 + 144));
  uint64_t v41 = *(void *)(v2 + *(void *)(*(void *)v2 + 136));
  uint64_t v42 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 160));
  swift_beginAccess();
  uint64_t v43 = *v42;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v39);
  v120[0] = v34;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  if (v40 != v41)
  {
    uint64_t v64 = *(void *)(v43 + 16);
    if (v64)
    {
      uint64_t v65 = v43 + 32;
      do
      {
        outlined init with copy of Any?(v65, (uint64_t)v120, &demangling cache variable for type metadata for Subscription?);
        uint64_t v67 = v121;
        if (v121)
        {
          uint64_t v66 = v122;
          __swift_project_boxed_opaque_existential_1(v120, v121);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 24))(0x8000000000000000, v67, v66);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
        }
        else
        {
          outlined destroy of CustomStringConvertible?((uint64_t)v120, &demangling cache variable for type metadata for Subscription?);
        }
        v65 += 40;
        --v64;
      }
      while (v64);
    }
    goto LABEL_100;
  }
LABEL_83:
  swift_bridgeObjectRelease();
  uint64_t v84 = Publishers._Merged.guardedBecomeTerminal()();
  MEMORY[0x1F4188790](v84);
  v92[-4] = v5;
  uint64_t v85 = v116;
  *(_OWORD *)&v92[-3] = *(_OWORD *)(v116 + 11);
  v92[-1] = v85[13];
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #5 in Publishers._Merged.request(_:));
}

void Publishers._Merged.Side.receive(_:)(Swift::Int a1)
{
  Publishers._Merged.receive(_:_:)(a1, *v1);
}

void Publishers._Merged.receive(_:_:)(Swift::Int a1, Swift::Int a2)
{
  v25[0] = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  Swift::Int v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t v11 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 176));
  os_unfair_lock_lock(v11);
  uint64_t v12 = *(void *)(*v2 + 120);
  uint64_t v13 = *(uint64_t *)((char *)v2 + v12);
  if (v13 == 0x8000000000000000)
  {
    os_unfair_lock_unlock(v11);
    MEMORY[0x1F4188790](v14);
    v25[-6] = v6;
    *(_OWORD *)&v25[-5] = *(_OWORD *)(v5 + 88);
    v25[-3] = *(void *)(v5 + 104);
    v25[-2] = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
    return;
  }
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (!v13)
  {
    uint64_t v19 = *(void *)(v6 - 8);
    (*(void (**)(char *, Swift::Int, Swift::Int))(v19 + 16))(v10, a1, v6);
    (*(void (**)(char *, void, uint64_t, Swift::Int))(v19 + 56))(v10, 0, 1, v6);
    uint64_t v20 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 168));
    swift_beginAccess();
    type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v21 = *v20;
    Swift::Int v22 = v25[0];
    Array._checkSubscript_mutating(_:)(v25[0]);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 40))(v21+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v22, v10, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    return;
  }
  os_unfair_lock_unlock(v11);
  MEMORY[0x1F4188790](v15);
  v25[-6] = v6;
  *(_OWORD *)&v25[-5] = *(_OWORD *)(v5 + 88);
  v25[-3] = *(void *)(v5 + 104);
  v25[-2] = a1;
  Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in Publishers._Merged.request(_:));
  Swift::Int v16 = v25[1];
  os_unfair_lock_lock(v11);
  unint64_t v17 = 0x8000000000000000;
  unint64_t v18 = 0x8000000000000000;
  if (v16 == 0x8000000000000000) {
    goto LABEL_12;
  }
  if (v16 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v18 = v13 - 1 + v16;
  if (__OFADD__(v13 - 1, v16))
  {
    unint64_t v18 = 0x8000000000000000;
  }
  else if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_12:
  uint64_t v23 = *(void *)(*v2 + 200);
  if (v18 == 0x8000000000000000) {
    goto LABEL_19;
  }
  uint64_t v24 = *(uint64_t *)((char *)v2 + v23);
  if (v24 == 0x8000000000000000) {
    goto LABEL_19;
  }
  if (v24 < 0) {
    goto LABEL_23;
  }
  unint64_t v17 = v18 + v24;
  if (!__OFADD__(v18, v24))
  {
    if ((v17 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
LABEL_25:
    __break(1u);
    return;
  }
  unint64_t v17 = 0x8000000000000000;
LABEL_19:
  *(uint64_t *)((char *)v2 + v12) = v17;
  *(uint64_t *)((char *)v2 + v23) = 0;
  os_unfair_lock_unlock(v11);
}

void Publishers._Merged.guardedApplyDownstream<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + *(void *)(*(void *)v2 + 176));
  os_unfair_lock_lock(v4);
  uint64_t v5 = *(void *)(*(void *)v1 + 192);
  *(unsigned char *)(v1 + v5) = 1;
  os_unfair_lock_unlock(v4);
  os_unfair_recursive_lock_lock_with_options();
  a1(v2 + *(void *)(*(void *)v2 + 112));
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v4);
  *(unsigned char *)(v1 + v5) = 0;

  os_unfair_lock_unlock(v4);
}

uint64_t partial apply for closure #4 in Publishers._Merged.request(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v1[5] + 48))(v1[6], v1[4]);
  *a1 = result;
  return result;
}

uint64_t *specialized Publishers._Merged.init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - v9;
  *(uint64_t *)((char *)v2 + *(void *)(v5 + 120)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 128)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 144)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v11 = *(void *)(*v2 + 176);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *uint64_t v12 = 0;
  *(uint64_t *)((char *)v2 + v11) = (uint64_t)v12;
  uint64_t v13 = *(void *)(*v2 + 184);
  uint64_t v14 = (void *)swift_slowAlloc();
  *(uint64_t *)((char *)v2 + v13) = (uint64_t)v14;
  *uint64_t v14 = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 192)) = 0;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 96) - 8) + 16))((uint64_t)v2 + *(void *)(*v2 + 112), a1);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 136)) = a2;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 160)) = specialized Array.init(repeating:count:)((uint64_t)v17, a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v10, 1, 1, v6);
  uint64_t v15 = specialized Array.init(repeating:count:)((uint64_t)v10, a2, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 168)) = v15;
  return v2;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array();
    return v8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Just(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t partial apply for closure #3 in Publishers._Merged.receive(completion:_:)(uint64_t a1)
{
  return closure #3 in Publishers._Merged.receive(completion:_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t closure #3 in Publishers._Merged.receive(completion:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))((char *)&v13 - v10, 1, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 56))(v11, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t Publishers._Merged.guardedBecomeTerminal()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v20 - v5;
  unsigned int v7 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 176));
  os_unfair_lock_lock(v7);
  *((unsigned char *)v0 + *(void *)(*v0 + 128)) = 1;
  uint64_t v8 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 160));
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRetain();
  *uint64_t v8 = specialized Array.init(repeating:count:)((uint64_t)v23, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  int v11 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 168));
  swift_beginAccess();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x18C13B7E0](v12, v3);
  swift_bridgeObjectRelease();
  uint64_t v14 = specialized Array.init(repeating:count:)((uint64_t)v6, v13, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *int v11 = v14;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  uint64_t v15 = *(void *)(v9 + 16);
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v9 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of Any?(v16, (uint64_t)v23, &demangling cache variable for type metadata for Subscription?);
    outlined init with copy of Any?((uint64_t)v23, (uint64_t)v20, &demangling cache variable for type metadata for Subscription?);
    uint64_t v17 = v21;
    if (v21)
    {
      uint64_t v18 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 8))(v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    }
    else
    {
      outlined destroy of CustomStringConvertible?((uint64_t)v20, &demangling cache variable for type metadata for Subscription?);
    }
    outlined destroy of CustomStringConvertible?((uint64_t)v23, &demangling cache variable for type metadata for Subscription?);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge7<A, B, C, D, E, F, G>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge7.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t partial apply for closure #1 in closure #1 in Publishers._Merged.request(_:)()
{
  return (*(uint64_t (**)(void, void))(v0[5] + 48))(v0[6], v0[4]);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge4.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.DropWhile.Inner.request(_:)(uint64_t a1)
{
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v3 = *(void *)(*(void *)v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Throttle<A, B>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Future.Conduit.State()
{
  uint64_t v0 = swift_checkMetadataState();
  uint64_t v1 = v0;
  if (v2 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v0 - 8) + 64;
    swift_getAssociatedConformanceWitness();
    uint64_t v1 = type metadata accessor for Result();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v8 = &v6;
      swift_getTupleTypeLayout2();
      uint64_t v9 = &v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in AsyncThrowingPublisher<A>.Iterator.Inner()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers._Merged<A, B, C>.Side()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata completion function for Publishers.MapError()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable;
  if (!lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable)
  {
    type metadata accessor for AnyCancellable();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable);
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Sequence.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t result = type metadata accessor for Optional();
        if (v4 <= 0x3F) {
          return swift_initClassMetadata2();
        }
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Drop.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.combineLatest<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v28[1] = a8;
  void v28[2] = a6;
  void v28[3] = a7;
  v28[0] = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  return Publishers.CombineLatest3.init(_:_:_:)((uint64_t)v24, (uint64_t)v22, (uint64_t)v17, a3, a4, a5, v28[0]);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v35 = a8;
  uint64_t v39 = a6;
  uint64_t v40 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v41 = a9;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  unint64_t v44 = v22;
  BOOL v45 = v23;
  uint64_t v24 = type metadata accessor for Publishers.CombineLatest();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v34 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v36, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v37, a5);
  uint64_t v28 = v35;
  Publishers.CombineLatest.init(_:_:)((uint64_t)v19, (uint64_t)v15, a4, a5, (uint64_t)v27);
  uint64_t v29 = (void *)swift_allocObject();
  void v29[2] = a4;
  v29[3] = a5;
  uint64_t v30 = v38;
  uint64_t v31 = v39;
  void v29[4] = v39;
  v29[5] = a7;
  v29[6] = v28;
  v29[7] = v30;
  v29[8] = v40;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1), (uint64_t)v29, v24, v31, WitnessTable, v41);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
}

uint64_t Publishers.CombineLatest3.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for Publishers.CombineLatest3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t type metadata accessor for Publishers.CombineLatest3()
{
  return swift_getGenericMetadata();
}

uint64_t Result.Publisher.Inner.__deallocating_deinit()
{
  uint64_t v0 = Result.Publisher.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Result.Publisher.Inner.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  return v0;
}

uint64_t type metadata completion function for Publishers.SetFailureType.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void Publishers.Throttle.Inner.emitToDownstream()()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = v2[15];
  uint64_t v4 = v2[12];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v130 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v123 = (char *)&v103 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v131 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v113 = (char *)&v103 - v8;
  uint64_t v9 = v2[14];
  uint64_t v10 = v2[11];
  uint64_t v122 = swift_getAssociatedTypeWitness();
  uint64_t v121 = *(void *)(v122 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v122);
  uint64_t v117 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v120 = (char *)&v103 - v13;
  uint64_t v128 = AssociatedTypeWitness;
  uint64_t v136 = type metadata accessor for Optional();
  uint64_t v134 = *(void *)(v136 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v136);
  v126 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v114 = (char *)&v103 - v17;
  MEMORY[0x1F4188790](v16);
  v133 = (char *)&v103 - v18;
  uint64_t v20 = v2[13];
  uint64_t v142 = v2[10];
  uint64_t v19 = v142;
  uint64_t v143 = v10;
  uint64_t v144 = v4;
  uint64_t v145 = v20;
  uint64_t v146 = v9;
  uint64_t v147 = v3;
  uint64_t v21 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v139 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  v116 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v103 - v24;
  uint64_t v135 = v5;
  uint64_t v141 = type metadata accessor for Optional();
  uint64_t v137 = *(void *)(v141 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v141);
  v127 = (char *)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  v129 = (char *)&v103 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  v132 = (char *)&v103 - v31;
  uint64_t v138 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v30);
  v140 = (char *)&v103 - v32;
  uint64_t v142 = v19;
  uint64_t v143 = v10;
  uint64_t v118 = v10;
  uint64_t v144 = v4;
  uint64_t v145 = v20;
  uint64_t v119 = v9;
  uint64_t v146 = v9;
  uint64_t v147 = v3;
  uint64_t v33 = v139;
  uint64_t v34 = v21;
  uint64_t v124 = v3;
  uint64_t v35 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)&v103 - v37;
  uint64_t v39 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v39);
  uint64_t v40 = (char *)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  uint64_t v115 = v40;
  v41(v25, v40, v34);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v34);
LABEL_7:
    os_unfair_lock_unlock(v39);
    return;
  }
  uint64_t v110 = v34;
  os_unfair_lock_t v125 = v39;
  uint64_t v142 = v35;
  uint64_t v143 = v4;
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  uint64_t v145 = v141;
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v43 = &v25[TupleTypeMetadata[12]];
  uint64_t v44 = (uint64_t)&v25[TupleTypeMetadata[16]];
  BOOL v45 = &v25[TupleTypeMetadata[20]];
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v38, v25, v35);
  uint64_t v46 = v141;
  (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v140, v43, v4);
  uint64_t v47 = v137;
  uint64_t v48 = v132;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v132, v45, v46);
  __swift_destroy_boxed_opaque_existential_1(v44);
  uint64_t v49 = *v1;
  uint64_t v50 = *(void *)(*v1 + 176);
  uint64_t v51 = v4;
  uint64_t v52 = v35;
  unint64_t v53 = v48;
  if (*((unsigned char *)v1 + v50) != 1)
  {
    (*(void (**)(char *, uint64_t))(v138 + 8))(v140, v51);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v52);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
    uint64_t v39 = v125;
    goto LABEL_7;
  }
  uint64_t v111 = v51;
  uint64_t v108 = v38;
  uint64_t v106 = v36;
  uint64_t v109 = v52;
  uint64_t v54 = (char *)v1 + *(void *)(v49 + 160);
  swift_beginAccess();
  os_unfair_lock_t v55 = v133;
  uint64_t v56 = v134 + 16;
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
  v57(v133, v54, v136);
  uint64_t v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48);
  uint64_t v59 = v55;
  uint64_t v60 = v128;
  if (v58(v59, 1, v128) == 1)
  {
LABEL_4:
    int v107 = 0;
    goto LABEL_13;
  }
  uint64_t v61 = *(void *)(*v1 + 152);
  uint64_t v62 = *(void *)((char *)v1 + v61);
  if (v62 != 0x8000000000000000)
  {
    if (v62 < 0)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (!v62) {
      goto LABEL_4;
    }
    *(void *)((char *)v1 + v61) = v62 - 1;
  }
  unsigned int v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56);
  int v107 = 1;
  uint64_t v64 = v114;
  v63(v114, 1, 1, v60);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v134 + 40))(v54, v64, v136);
  swift_endAccess();
LABEL_13:
  long long v104 = v57;
  uint64_t v105 = v56;
  *((unsigned char *)v1 + v50) = 0;
  uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48);
  uint64_t v114 = (char *)(v130 + 48);
  v112 = v65;
  unsigned int v66 = v65(v48, 1, v135);
  uint64_t v67 = v129;
  long long v103 = v58;
  if (v66 == 1)
  {
    uint64_t v68 = v117;
    (*(void (**)(uint64_t, uint64_t))(v119 + 40))(v118, v119);
    uint64_t v69 = v122;
    swift_getAssociatedConformanceWitness();
    uint64_t v70 = v120;
    dispatch thunk of Strideable.advanced(by:)();
    uint64_t v71 = v121;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v68, v69);
    uint64_t v72 = (char *)v1 + *(void *)(*v1 + 168);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v72, v70, v69);
  }
  else
  {
    unint64_t v73 = v116;
    uint64_t v74 = v110;
    swift_storeEnumTagMultiPayload();
    uint64_t v75 = v115;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v139 + 40))(v75, v73, v74);
  }
  swift_endAccess();
  uint64_t v76 = v126;
  os_unfair_lock_unlock(v125);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v77 = v135;
  if (!v107) {
    goto LABEL_19;
  }
  uint64_t v78 = v136;
  v104(v76, v133, v136);
  if (v103(v76, 1, v60) == 1)
  {
    (*(void (**)(char *, uint64_t))(v134 + 8))(v76, v78);
LABEL_19:
    uint64_t v79 = 0;
    goto LABEL_21;
  }
  uint64_t v80 = v131;
  uint64_t v81 = v113;
  (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v113, v76, v60);
  uint64_t v82 = (*(uint64_t (**)(char *, uint64_t))(v124 + 48))(v81, v111);
  uint64_t v77 = v135;
  uint64_t v79 = v82;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v60);
  uint64_t v67 = v129;
LABEL_21:
  uint64_t v83 = v137;
  uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
  uint64_t v85 = v53;
  uint64_t v86 = v53;
  uint64_t v87 = v141;
  v84(v67, v86, v141);
  if (v112(v67, 1, v77) == 1)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v67, v87);
  }
  else
  {
    uint64_t v88 = v130;
    uint64_t v89 = v123;
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v123, v67, v77);
    (*(void (**)(char *, uint64_t))(v124 + 56))(v89, v111);
    uint64_t v77 = v135;
    uint64_t v90 = v89;
    uint64_t v83 = v137;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v135);
  }
  os_unfair_recursive_lock_unlock();
  if (v79 == 0x8000000000000000)
  {
    uint64_t v91 = v127;
    uint64_t v92 = v141;
    v84(v127, v85, v141);
    goto LABEL_28;
  }
  uint64_t v91 = v127;
  if (v79 < 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v92 = v141;
  v84(v127, v85, v141);
  if (!v79)
  {
    long long v102 = v91;
    uint64_t v95 = *(void (**)(char *, uint64_t))(v83 + 8);
    v95(v102, v92);
    goto LABEL_36;
  }
LABEL_28:
  unsigned int v93 = v112(v91, 1, v77);
  uint64_t v94 = v91;
  uint64_t v95 = *(void (**)(char *, uint64_t))(v83 + 8);
  v95(v94, v92);
  if (v93 != 1)
  {
LABEL_36:
    os_unfair_lock_t v99 = v85;
    uint64_t v100 = v138;
    uint64_t v101 = v140;
LABEL_40:
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v111);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v109);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v133, v136);
    v95(v99, v141);
    return;
  }
  os_unfair_lock_lock(v125);
  uint64_t v96 = *(void *)(*v1 + 152);
  uint64_t v97 = *(void *)((char *)v1 + v96);
  unint64_t v98 = 0x8000000000000000;
  os_unfair_lock_t v99 = v85;
  uint64_t v100 = v138;
  uint64_t v101 = v140;
  if (v97 == 0x8000000000000000)
  {
LABEL_39:
    os_unfair_lock_unlock(v125);
    goto LABEL_40;
  }
  if (v79 == 0x8000000000000000)
  {
LABEL_38:
    *(void *)((char *)v1 + v96) = v98;
    goto LABEL_39;
  }
  if ((v97 | v79) < 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v98 = v97 + v79;
  if (__OFADD__(v97, v79))
  {
    unint64_t v98 = 0x8000000000000000;
    goto LABEL_38;
  }
  if ((v98 & 0x8000000000000000) == 0) {
    goto LABEL_38;
  }
LABEL_44:
  __break(1u);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Throttle.Inner.receive(_:)(a1);
}

uint64_t Publishers.Throttle.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = type metadata accessor for Optional();
  uint64_t v74 = *(void *)(v72 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v72);
  uint64_t v70 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v69 = (char *)&v64 - v8;
  uint64_t v9 = v3[14];
  uint64_t v10 = v3[11];
  uint64_t v82 = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(v82 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v82);
  uint64_t v77 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v81 = (char *)&v64 - v14;
  uint64_t v79 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v80 = (char *)&v64 - v15;
  uint64_t v17 = v3[13];
  uint64_t v84 = v3[10];
  uint64_t v16 = v84;
  uint64_t v85 = v10;
  uint64_t v86 = v5;
  uint64_t v87 = v17;
  uint64_t v88 = v9;
  uint64_t v89 = v4;
  uint64_t v18 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v64 - v20;
  uint64_t v84 = v16;
  uint64_t v85 = v10;
  uint64_t v78 = v10;
  uint64_t v86 = v5;
  uint64_t v87 = v17;
  uint64_t v76 = v9;
  uint64_t v88 = v9;
  uint64_t v89 = v4;
  uint64_t v22 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v64 - v24;
  os_unfair_lock_t v83 = (os_unfair_lock_t)v2[2];
  os_unfair_lock_lock(v83);
  uint64_t v26 = (char *)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v26, v18);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
LABEL_8:
    os_unfair_lock_unlock(v83);
    return 0;
  }
  uint64_t v84 = v22;
  uint64_t v85 = v5;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v87 = type metadata accessor for Optional();
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v68 = &v21[TupleTypeMetadata[12]];
  uint64_t v28 = (uint64_t)&v21[TupleTypeMetadata[16]];
  uint64_t v29 = &v21[TupleTypeMetadata[20]];
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  uint64_t v30 = type metadata accessor for Subscribers.Completion();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30) != 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    uint64_t v49 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v49 - 8) + 8))(v29, v49);
    __swift_destroy_boxed_opaque_existential_1(v28);
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v68, v5);
    goto LABEL_8;
  }
  uint64_t v67 = v23;
  uint64_t v31 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v29, v31);
  __swift_destroy_boxed_opaque_existential_1(v28);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v68, v5);
  uint64_t v32 = v78;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v80, &v25[*(int *)(v22 + 68)], v78);
  (*(void (**)(uint64_t, uint64_t))(v76 + 40))(v32, v76);
  uint64_t v33 = (char *)v2 + *(void *)(*v2 + 168);
  swift_beginAccess();
  uint64_t v34 = v75;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  uint64_t v36 = v77;
  unsigned int v66 = v33;
  uint64_t v37 = v33;
  uint64_t v38 = v82;
  uint64_t v65 = v35;
  v35(v77, v37, v82);
  swift_getAssociatedConformanceWitness();
  char v39 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v36, v38);
  uint64_t v68 = (char *)v22;
  char v41 = v25[*(int *)(v22 + 72)];
  uint64_t v42 = v25;
  uint64_t v43 = v72;
  if ((v41 & 1) == 0)
  {
    if (v39)
    {
      uint64_t v44 = v77;
      uint64_t v69 = v42;
      char v45 = v39;
      uint64_t v46 = v82;
      dispatch thunk of Strideable.advanced(by:)();
      uint64_t v47 = v66;
      swift_beginAccess();
      uint64_t v48 = v46;
      char v39 = v45;
      uint64_t v42 = v69;
      (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v47, v44, v48);
      swift_endAccess();
    }
    else
    {
      uint64_t v50 = (char *)v2 + *(void *)(*v2 + 160);
      swift_beginAccess();
      uint64_t v51 = v74;
      uint64_t v52 = v69;
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v69, v50, v43);
      LODWORD(v50) = (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v52, 1);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v43);
      if (v50 != 1) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v53 = AssociatedTypeWitness;
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  os_unfair_lock_t v55 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v70, v71, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v53);
  uint64_t v56 = (char *)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v74 + 40))(v56, v55, v43);
  swift_endAccess();
LABEL_11:
  uint64_t v57 = *(void *)(*v2 + 176);
  if ((*((unsigned char *)v2 + v57) & 1) != 0 || !*(void *)((char *)v2 + *(void *)(*v2 + 152)))
  {
    os_unfair_lock_unlock(v83);
    v40(v81, v82);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v78);
  }
  else
  {
    *((unsigned char *)v2 + v57) = 1;
    uint64_t v58 = v78;
    uint64_t v59 = v83;
    if (v39)
    {
      os_unfair_lock_unlock(v83);
      swift_retain();
      uint64_t v60 = v80;
      Scheduler.schedule(_:)((uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v58, v76);
      swift_release();
      uint64_t v61 = v82;
    }
    else
    {
      uint64_t v62 = (uint64_t)v77;
      uint64_t v61 = v82;
      v65(v77, v66, v82);
      os_unfair_lock_unlock(v59);
      swift_retain();
      uint64_t v60 = v80;
      Scheduler.schedule(after:_:)(v62, (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v58, v76);
      swift_release();
      v40((char *)v62, v61);
    }
    v40(v81, v61);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v60, v58);
  }
  (*(void (**)(char *, char *))(v67 + 8))(v42, v68);
  return 0;
}

uint64_t type metadata accessor for Publishers.Throttle.Inner.Scheduling()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.Throttle.Inner.State()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unsigned char *initializeWithCopy for Publishers.Throttle.Inner.State(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(v60 + 64);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v64 = *(void *)(v8 + 64);
  uint64_t v63 = v64 + v12 + ((v7 + v9) & ~v9) + 1;
  uint64_t v59 = *(void *)(v11 + 64);
  size_t v13 = (v63 & ~v12) + v59;
  unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = *(void *)(a3 + 32);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  unsigned int v19 = *(_DWORD *)(v16 + 84);
  if (v19) {
    uint64_t v20 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v16 + 64) + 1;
  }
  if (v19 >= 2) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  if (v21 + ((v18 + v14 + 40) & ~v18) <= v13) {
    size_t v22 = (v63 & ~v12) + v59;
  }
  else {
    size_t v22 = v21 + ((v18 + v14 + 40) & ~v18);
  }
  unsigned int v23 = a2[v22];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v22 <= 3) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *a2;
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 2:
        int v26 = *(unsigned __int16 *)a2;
        if (v22 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_20;
      case 3:
        int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 4:
        int v26 = *(_DWORD *)a2;
        if (v22 < 4) {
LABEL_20:
        }
          unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
        else {
LABEL_22:
        }
          unsigned int v23 = v26 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v27 = ~v9;
  uint64_t v28 = ~v12;
  if (v23 == 1)
  {
    size_t v54 = v21;
    uint64_t v55 = *(void *)(v15 - 8);
    uint64_t v57 = v15;
    size_t __n = v20;
    size_t v56 = v22;
    uint64_t v34 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v60 + 16);
    unsigned int v61 = *(_DWORD *)(v17 + 84);
    v34(a1, a2, v62);
    unint64_t v35 = (unint64_t)&a1[v10] & v27;
    unint64_t v36 = (unint64_t)&a2[v10];
    uint64_t v33 = a1;
    unint64_t v37 = v36 & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v35, v36 & v27, v5);
    *(unsigned char *)(v35 + v64) = *(unsigned char *)(v37 + v64);
    unint64_t v38 = (unint64_t)&a1[v63] & v28;
    unint64_t v39 = (unint64_t)&a2[v63] & v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(v38, v39, v65);
    unint64_t v40 = (v59 + 7 + v38) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v59 + 7 + v39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = *(void *)(v41 + 24);
    *(void *)(v40 + 24) = v42;
    *(void *)(v40 + 32) = *(void *)(v41 + 32);
    (**(void (***)(unint64_t, unint64_t))(v42 - 8))(v40, v41);
    uint64_t v43 = v41 + v18;
    uint64_t v44 = (void *)((v40 + v18 + 40) & ~v18);
    char v45 = (unsigned __int8 *)((v43 + 40) & ~v18);
    if (v61 > 1)
    {
      unsigned int v50 = (*(uint64_t (**)(unsigned __int8 *))(v55 + 48))(v45);
      uint64_t v46 = v55;
      if (v50 >= 2)
      {
LABEL_48:
        memcpy(v44, v45, v54);
        size_t v52 = v56;
LABEL_49:
        a1[v52] = 1;
        return v33;
      }
    }
    else
    {
      uint64_t v46 = v55;
      if (v45[__n])
      {
        int v47 = (v45[__n] - 1) << (8 * __n);
        if (__n > 3) {
          int v47 = 0;
        }
        if (__n)
        {
          int v48 = __n <= 3 ? __n : 4;
          switch(v48)
          {
            case 2:
              int v49 = *(unsigned __int16 *)v45;
              break;
            case 3:
              int v49 = *(unsigned __int16 *)v45 | (v45[2] << 16);
              break;
            case 4:
              int v49 = *(_DWORD *)v45;
              break;
            default:
              int v49 = *v45;
              break;
          }
        }
        else
        {
          int v49 = 0;
        }
        if ((v49 | v47) != 0xFFFFFFFF) {
          goto LABEL_48;
        }
      }
    }
    uint64_t v51 = v46;
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v45, 1, v57))
    {
      memcpy(v44, v45, __n);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v51 + 16))(v44, v45, v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v44, 0, 1, v57);
    }
    size_t v52 = v56;
    if (v61 <= 1) {
      *((unsigned char *)v44 + __n) = 0;
    }
    goto LABEL_49;
  }
  if (v23)
  {
    uint64_t v33 = a1;
    memcpy(a1, a2, v22 + 1);
  }
  else
  {
    size_t v29 = v22;
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v60 + 16))(a1, a2, v62);
    unint64_t v30 = (unint64_t)&a1[v10] & v27;
    unint64_t v31 = (unint64_t)&a2[v10] & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v30, v31, v5);
    char v32 = *(unsigned char *)(v31 + v64);
    uint64_t v33 = a1;
    *(unsigned char *)(v30 + v64) = v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((unint64_t)&a1[v63] & v28, (unint64_t)&a2[v63] & v28, v65);
    a1[v29] = 0;
  }
  return v33;
}

uint64_t destroy for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8, v3);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Buffer.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v13);
  if (v14)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v13);
    os_unfair_lock_unlock(v3);
    return;
  }
  outlined init with take of Subscription(v13, (uint64_t)v15);
  uint64_t v5 = *(void *)(*(void *)v1 + 168);
  uint64_t v6 = *(void *)(v1 + v5);
  unint64_t v7 = 0x8000000000000000;
  if (v6 != 0x8000000000000000)
  {
    if (a1 != 0x8000000000000000)
    {
      if ((v6 | a1) < 0)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      unint64_t v7 = v6 + a1;
      if (__OFADD__(v6, a1))
      {
        unint64_t v7 = 0x8000000000000000;
      }
      else if ((v7 & 0x8000000000000000) != 0)
      {
LABEL_20:
        __break(1u);
        return;
      }
    }
    *(void *)(v1 + v5) = v7;
  }
  char v8 = *(unsigned char *)(v1 + 24);
  os_unfair_lock_unlock(v3);
  if (v8) {
    goto LABEL_16;
  }
  Publishers.Buffer.Inner.drain()();
  uint64_t v10 = v9;
  if (v9 == 0x8000000000000000)
  {
LABEL_15:
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v10, v11, v12);
    goto LABEL_16;
  }
  if (v9 < 0) {
    goto LABEL_19;
  }
  if (v9) {
    goto LABEL_15;
  }
LABEL_16:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Buffer.Inner.receive(_:)(a1);
}

uint64_t Publishers.Buffer.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v56 = (char *)&v48 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v48 - v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v14 = (char *)&v48 - v13;
  uint64_t v15 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v15);
  uint64_t v16 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v16, (uint64_t)v61);
  if (!v62)
  {
    uint64_t v18 = v60;
    size_t v52 = v12;
    os_unfair_lock_t v55 = v15;
    uint64_t v53 = v5;
    uint64_t v19 = v58;
    size_t v54 = v7;
    outlined init with take of Subscription(v61, (uint64_t)v63);
    uint64_t v20 = (char *)v2 + *(void *)(*v2 + 192);
    swift_beginAccess();
    uint64_t v21 = v59;
    size_t v22 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    uint64_t v51 = v20;
    v22(v14, v20, v9);
    uint64_t v23 = *(void *)(v8 - 8);
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, v8);
    uint64_t v50 = v9;
    uint64_t v49 = v23;
    if (v24 == 1)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v9);
      uint64_t v25 = v19;
      uint64_t v26 = AssociatedTypeWitness;
    }
    else
    {
      uint64_t v26 = AssociatedTypeWitness;
      int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v8);
      uint64_t v25 = v19;
      if (v27 != 1)
      {
        os_unfair_lock_unlock(v55);
        goto LABEL_16;
      }
    }
    uint64_t v28 = v8;
    uint64_t v29 = v21;
    swift_beginAccess();
    uint64_t v30 = swift_bridgeObjectRetain();
    uint64_t v31 = v53;
    uint64_t v32 = MEMORY[0x18C13B7E0](v30, v53);
    swift_bridgeObjectRelease();
    BOOL v33 = v32 < v2[4];
    uint64_t v34 = v57;
    unint64_t v35 = v54;
    unint64_t v36 = v55;
    if (v33)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v35, v34, v31);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
      goto LABEL_12;
    }
    uint64_t v37 = v2[6];
    if (!v37)
    {
LABEL_12:
      os_unfair_lock_unlock(v36);
      Publishers.Buffer.Inner.drain()();
      uint64_t v17 = v38;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      return v17;
    }
    if (v37 == 1)
    {
      swift_beginAccess();
      type metadata accessor for Array();
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst()();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v35, v31);
      goto LABEL_11;
    }
    unint64_t v40 = (void (*)(uint64_t))v2[6];
    uint64_t v41 = swift_retain();
    uint64_t v42 = v56;
    v40(v41);
    uint64_t v43 = v60;
    uint64_t v44 = v52;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v52, v42, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v44, 0, 1, v28);
    char v45 = v51;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v45, v44, v50);
    swift_endAccess();
    os_unfair_lock_unlock(v36);
    uint64_t v47 = v64;
    uint64_t v46 = v65;
    __swift_project_boxed_opaque_existential_1(v63, v64);
    (*(void (**)(uint64_t))(*(void *)(v46 + 8) + 8))(v47);
    outlined consume of Publishers.BufferingStrategy<A.Failure><A><A1>((unint64_t)v40);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v26);
LABEL_16:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    return 0;
  }
  outlined destroy of SubscriptionStatus((uint64_t)v61);
  os_unfair_lock_unlock(v15);
  return 0;
}

void Publishers.Buffer.Inner.drain()()
{
  uint64_t v84 = *(void **)v0;
  uint64_t v1 = v84;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v66 = *(void *)(v83 + 64);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v85 = (char *)&v59 - v3;
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(char **)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v61 = (char *)&v59 - v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v65 = v4;
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v71 = type metadata accessor for Optional();
  uint64_t v70 = *(void *)(v71 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v71);
  uint64_t v69 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v68 = (char *)&v59 - v10;
  unint64_t v73 = v6;
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v67 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v60 = (char *)&v59 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  char v62 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v63 = (char *)&v59 - v17;
  uint64_t v18 = v0 + v1[20];
  uint64_t v79 = v1[21];
  uint64_t v19 = (uint64_t *)(v0 + v1[22]);
  uint64_t v20 = v1[19];
  uint64_t v21 = *(os_unfair_lock_s **)(v0 + 16);
  swift_beginAccess();
  uint64_t v77 = v19;
  swift_beginAccess();
  os_unfair_lock_lock(v21);
  outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v86);
  if (v89)
  {
LABEL_2:
    outlined destroy of SubscriptionStatus((uint64_t)&v86);
LABEL_3:
    os_unfair_lock_unlock(v21);
    return;
  }
  unint64_t v22 = 0;
  uint64_t v82 = v0 + v20;
  uint64_t v81 = (void (**)(char *, uint64_t *, uint64_t))(v83 + 16);
  uint64_t v80 = (void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v75 = v18;
  uint64_t v74 = v21;
  uint64_t v78 = v0;
  while (1)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v86);
    uint64_t v24 = *(void *)(v0 + v79);
    if (v24 != 0x8000000000000000)
    {
      if (v24 < 0)
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        return;
      }
      if (!v24)
      {
        uint64_t v51 = v0 + *(void *)(*(void *)v0 + 192);
        swift_beginAccess();
        uint64_t v52 = v70;
        unint64_t v36 = v68;
        uint64_t v53 = v71;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v68, v51, v71);
        uint64_t v28 = v72;
        unint64_t v34 = v73;
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v72 + 48))(v36, 1, v73) == 1)
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v53);
          goto LABEL_3;
        }
LABEL_61:
        uint64_t AssociatedTypeWitness = (uint64_t)v63;
        (*(void (**)(char *, char *, unint64_t))(v28 + 32))(v63, v36, v34);
        unint64_t v39 = v62;
        (*(void (**)(char *, uint64_t, unint64_t))(v28 + 16))(v62, AssociatedTypeWitness, v34);
        unint64_t v36 = v64;
        uint64_t v35 = v65;
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v64 + 6))(v39, 1, v65) == 1)
        {
          (*(void (**)(uint64_t, unint64_t))(v28 + 8))(AssociatedTypeWitness, v34);
          goto LABEL_3;
        }
LABEL_64:
        os_unfair_lock_t v55 = v61;
        (*((void (**)(char *, char *, uint64_t))v36 + 4))(v61, v39, v35);
        uint64_t v86 = 1;
        long long v87 = 0u;
        long long v88 = 0u;
        char v89 = 2;
        uint64_t v56 = v75;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v86, v56);
        swift_endAccess();
        os_unfair_lock_unlock(v21);
        uint64_t v57 = v60;
        (*((void (**)(char *, char *, uint64_t))v36 + 2))(v60, v55, v35);
        (*((void (**)(char *, void, uint64_t, uint64_t))v36 + 7))(v57, 0, 1, v35);
        (*(void (**)(char *, void))(v84[13] + 56))(v57, v84[11]);
        uint64_t v58 = *(void (**)(char *, unint64_t))(v28 + 8);
        v58(v57, v34);
        (*((void (**)(char *, uint64_t))v36 + 1))(v55, v35);
        v58((char *)AssociatedTypeWitness, v34);
        return;
      }
    }
    uint64_t v86 = *v77;
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v25 = Collection.isEmpty.getter();
    unint64_t v23 = (unint64_t)&v90;
    if (v25) {
      goto LABEL_54;
    }
    uint64_t v26 = v78;
    uint64_t v27 = v79;
    uint64_t v28 = Publishers.Buffer.Inner.locked_pop(_:)(*(void *)(v78 + v79));
    uint64_t v29 = MEMORY[0x18C13B7E0](v28, AssociatedTypeWitness);
    uint64_t v30 = *(void *)(v26 + v27);
    if (v30 != 0x8000000000000000)
    {
      if (v30 < 0) {
        goto LABEL_66;
      }
      BOOL v31 = __OFSUB__(v30, v29);
      uint64_t v32 = v30 - v29;
      if (v31)
      {
        uint64_t v32 = 0;
      }
      else if (v32 < 0)
      {
        goto LABEL_68;
      }
      *(void *)(v78 + v79) = v32;
    }
    uint64_t v86 = v28;
    if (Collection.isEmpty.getter())
    {
      os_unfair_lock_unlock(v21);
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v0 = v78;
    *(unsigned char *)(v78 + 24) = 1;
    os_unfair_lock_unlock(v21);
    if (MEMORY[0x18C13B800](v28, AssociatedTypeWitness))
    {
      unint64_t v76 = v22;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      uint64_t v35 = v84[13];
      unint64_t v36 = (char *)(v35 + 48);
      uint64_t v21 = *(os_unfair_lock_s **)(v35 + 48);
      do
      {
        unint64_t v37 = v34;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v83 + 16))(v85, v28+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v33, AssociatedTypeWitness);
          unint64_t v39 = (char *)(v33 + 1);
          if (__OFADD__(v33, 1)) {
            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v42 = _ArrayBuffer._getElementSlowPath(_:)();
          if (v66 != 8) {
            goto LABEL_72;
          }
          uint64_t v86 = v42;
          (*v81)(v85, &v86, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          unint64_t v39 = (char *)(v33 + 1);
          if (__OFADD__(v33, 1))
          {
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
        }
        unint64_t v40 = v85;
        uint64_t v41 = ((uint64_t (*)(char *, void, uint64_t))v21)(v85, v84[11], v35);
        (*v80)(v40, AssociatedTypeWitness);
        unint64_t v34 = 0x8000000000000000;
        if (v37 != 0x8000000000000000 && v41 != 0x8000000000000000)
        {
          if (v41 < 0)
          {
            __break(1u);
            goto LABEL_64;
          }
          unint64_t v34 = v37 + v41;
          if (__OFADD__(v37, v41))
          {
            unint64_t v34 = 0x8000000000000000;
          }
          else if ((v34 & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_65;
          }
        }
        ++v33;
      }
      while (v39 != (char *)MEMORY[0x18C13B800](v28, AssociatedTypeWitness));
      swift_bridgeObjectRelease();
      uint64_t v0 = v78;
      if (*(unsigned char *)(v78 + 40))
      {
        unint64_t v22 = v76;
        uint64_t v21 = v74;
        uint64_t v18 = v75;
        goto LABEL_47;
      }
      unint64_t v22 = v76;
      uint64_t v21 = v74;
      uint64_t v18 = v75;
      if (((unint64_t)v39 & 0x8000000000000000) != 0) {
        goto LABEL_67;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v39 = 0;
      unint64_t v34 = 0;
      if (*(unsigned char *)(v0 + 40))
      {
        unint64_t v34 = 0;
        goto LABEL_47;
      }
    }
    if (v22 == 0x8000000000000000) {
      goto LABEL_45;
    }
    if ((v22 & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    BOOL v31 = __OFADD__(v22, v39);
    v22 += (unint64_t)v39;
    if (v31)
    {
LABEL_45:
      unint64_t v22 = 0x8000000000000000;
    }
    else if ((v22 & 0x8000000000000000) != 0)
    {
      goto LABEL_71;
    }
LABEL_47:
    os_unfair_lock_lock(v21);
    *(unsigned char *)(v0 + 24) = 0;
    if ((uint64_t)(v34 - 1) < 0) {
      goto LABEL_7;
    }
    uint64_t v43 = *(void *)(v0 + v79);
    unint64_t v23 = 0x8000000000000000;
    if (v43 == 0x8000000000000000) {
      goto LABEL_7;
    }
    if (v34 != 0x8000000000000000) {
      break;
    }
LABEL_6:
    *(void *)(v0 + v79) = v23;
LABEL_7:
    os_unfair_lock_unlock(v21);
    os_unfair_lock_lock(v21);
    outlined init with copy of SubscriptionStatus(v18, (uint64_t)&v86);
    if (v89) {
      goto LABEL_2;
    }
  }
  if (v43 < 0) {
    goto LABEL_70;
  }
  unint64_t v23 = v43 + v34;
  if (__OFADD__(v43, v34))
  {
    unint64_t v23 = 0x8000000000000000;
    goto LABEL_6;
  }
  if ((v23 & 0x8000000000000000) == 0) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_54:
  uint64_t v44 = *(void *)(v23 - 256) + *(void *)(**(void **)(v23 - 256) + 192);
  swift_beginAccess();
  uint64_t v45 = v70;
  uint64_t v46 = v69;
  uint64_t v47 = v44;
  uint64_t v48 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v47, v71);
  uint64_t v49 = v72;
  unint64_t v50 = v73;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v72 + 48))(v46, 1, v73) == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v48);
    goto LABEL_3;
  }
  size_t v54 = v67;
  (*(void (**)(char *, char *, unint64_t))(v49 + 32))(v67, v46, v50);
  uint64_t v86 = 1;
  long long v87 = 0u;
  long long v88 = 0u;
  char v89 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v86, v18);
  swift_endAccess();
  os_unfair_lock_unlock(v21);
  (*(void (**)(char *, void))(v84[13] + 56))(v54, v84[11]);
  (*(void (**)(char *, unint64_t))(v49 + 8))(v54, v50);
}

uint64_t getEnumTagSinglePayload for Subscribers.Completion(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

uint64_t Publishers.Buffer.Inner.locked_pop(_:)(uint64_t result)
{
  if (result == 0x8000000000000000)
  {
    uint64_t v2 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 176));
    swift_beginAccess();
    uint64_t v3 = *v2;
    swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    *uint64_t v2 = Array.init()();
    swift_bridgeObjectRelease();
    return v3;
  }
  if (result < 0)
  {
    __break(1u);
  }
  else if (result)
  {
    swift_beginAccess();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Collection.prefix(_:)();
    type metadata accessor for ArraySlice();
    swift_getWitnessTable();
    uint64_t v3 = Array.init<A>(_:)();
    Swift::Int v5 = MEMORY[0x18C13B7E0](v3, AssociatedTypeWitness);
    swift_beginAccess();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst(_:)(v5);
    swift_endAccess();
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Subscribers.Assign<A, B>(uint64_t a1)
{
  return 0;
}

uint64_t Subscribers.Assign.receive(_:)(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v19 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v19 - v3;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unsigned int v11 = (char *)&v19 - v10;
  uint64_t v21 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v19 - v12;
  int v14 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v14);
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v15, (uint64_t)v22);
  LODWORD(v15) = v22[40];
  outlined destroy of SubscriptionStatus((uint64_t)v22);
  if (!v15)
  {
    unsigned int v16 = (char *)v1 + *(void *)(*v1 + 104);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
    uint64_t v17 = v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v11, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v13, v11, v6);
      os_unfair_lock_unlock(v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v4, v20, v2);
      swift_setAtReferenceWritableKeyPath();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v6);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  os_unfair_lock_unlock(v14);
  return 0;
}

uint64_t Scheduler.schedule(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v14 - v11, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 56))(v12, a1, a2, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Scheduler.schedule(after:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  Scheduler.schedule(after:tolerance:_:)(a1, (uint64_t)v13, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Scheduler.schedule(after:tolerance:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned int v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v18 - v15, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(a1, a2, v16, a3, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t Publishers._Merged.__deallocating_deinit()
{
  uint64_t v0 = Publishers._Merged.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers._Merged.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Publisher.collect(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, a2);
  uint64_t result = type metadata accessor for Publishers.CollectByCount();
  *(void *)(a3 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t type metadata accessor for Publishers.CollectByCount()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for Publishers.Merge7(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(v11 + 56);
  uint64_t v14 = *(void *)(a2[5] - 8);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  (*(void (**)(unint64_t))(v14 + 8))(v16);
  uint64_t v17 = *(void *)(v15 + 56);
  uint64_t v18 = *(void *)(a2[6] - 8);
  uint64_t v19 = v18 + 8;
  unint64_t v20 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v20);
  uint64_t v21 = *(void *)(v19 + 56);
  uint64_t v22 = *(void *)(a2[7] - 8);
  uint64_t v23 = v22 + 8;
  unint64_t v24 = (v20 + v21 + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  (*(void (**)(unint64_t))(v22 + 8))(v24);
  uint64_t v25 = *(void *)(a2[8] - 8);
  uint64_t v26 = *(uint64_t (**)(unint64_t))(v25 + 8);
  unint64_t v27 = (v24 + *(void *)(v23 + 56) + *(unsigned __int8 *)(v25 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);

  return v26(v27);
}

uint64_t destroy for Publishers.Delay(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  uint64_t v10 = v8 + 8;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v5 + v11) & ~v11;
  v9(v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v10 + 56);
  uint64_t v14 = (v13 + v11 + v12) & ~v11;
  v9(v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = v15 + 8;
  unint64_t v17 = (v14 + v13 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v17, v6);
  uint64_t v18 = *(void *)(v16 + 56);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = (v17 + v18 + *(unsigned __int8 *)(v20 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v24 = v20;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19);
  if (!result)
  {
    uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t))(v24 + 8);
    return v23(v21, v19);
  }
  return result;
}

uint64_t destroy for Publishers.Debounce(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = v11 + 8;
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v13, v6);
  uint64_t v14 = *(void *)(v12 + 56);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = (v13 + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = v16;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15);
  if (!result)
  {
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v20 + 8);
    return v19(v17, v15);
  }
  return result;
}

uint64_t destroy for Publishers.Buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  if (*(void *)((a1 + *(void *)(v3 + 56) + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t destroy for Publishers.CombineLatest4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(a2[5] - 8);
  uint64_t v14 = *(uint64_t (**)(unint64_t))(v13 + 8);
  unint64_t v15 = (v12 + *(void *)(v11 + 56) + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);

  return v14(v15);
}

uint64_t destroy for Publishers.Merge8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(v11 + 56);
  uint64_t v14 = *(void *)(a2[5] - 8);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  (*(void (**)(unint64_t))(v14 + 8))(v16);
  uint64_t v17 = *(void *)(v15 + 56);
  uint64_t v18 = *(void *)(a2[6] - 8);
  uint64_t v19 = v18 + 8;
  unint64_t v20 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v20);
  uint64_t v21 = *(void *)(v19 + 56);
  uint64_t v22 = *(void *)(a2[7] - 8);
  uint64_t v23 = v22 + 8;
  unint64_t v24 = (v20 + v21 + *(unsigned __int8 *)(v22 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  (*(void (**)(unint64_t))(v22 + 8))(v24);
  uint64_t v25 = *(void *)(v23 + 56);
  uint64_t v26 = *(void *)(a2[8] - 8);
  uint64_t v27 = v26 + 8;
  unint64_t v28 = (v24 + v25 + *(unsigned __int8 *)(v26 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  (*(void (**)(unint64_t))(v26 + 8))(v28);
  uint64_t v29 = *(void *)(a2[9] - 8);
  uint64_t v30 = *(uint64_t (**)(unint64_t))(v29 + 8);
  unint64_t v31 = (v28 + *(void *)(v27 + 56) + *(unsigned __int8 *)(v29 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);

  return v30(v31);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.ReplaceError.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_4:
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  uint64_t v5 = *v1;
  uint64_t v6 = *v1;
  if (*((unsigned char *)v1 + *(void *)(*v1 + 136)) == 1)
  {
    uint64_t v16 = 1;
    long long v17 = 0u;
    long long v18 = 0u;
    char v19 = 2;
    uint64_t v7 = (uint64_t)v1 + *(void *)(v6 + 128);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v16, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v8 = *(void *)(v3 + 104);
    uint64_t v9 = *(void *)(v3 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v9, v8);
    LOBYTE(v16) = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 56))(&v16, v9, v8);
    return;
  }
  uint64_t v10 = *(void *)(v6 + 144);
  uint64_t v11 = *(uint64_t *)((char *)v1 + v10);
  unint64_t v12 = 0x8000000000000000;
  if (v11 == 0x8000000000000000) {
    goto LABEL_14;
  }
  if (a1 == 0x8000000000000000) {
    goto LABEL_13;
  }
  if ((v11 | a1) < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v12 = v11 + a1;
  if (!__OFADD__(v11, a1))
  {
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_13;
    }
LABEL_21:
    __break(1u);
    return;
  }
  unint64_t v12 = 0x8000000000000000;
LABEL_13:
  *(uint64_t *)((char *)v1 + v10) = v12;
  uint64_t v5 = *v1;
LABEL_14:
  uint64_t v13 = (uint64_t)v1 + *(void *)(v5 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)&v16);
  if (v19)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v16);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v16, (uint64_t)v20);
    os_unfair_lock_unlock(v4);
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(a1, v14, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.request(_:)()
{
  return closure #1 in Publishers.SubscribeOn.Inner.request(_:)(v0[8], v0 + 9, v0[14]);
}

uint64_t closure #1 in Publishers.SubscribeOn.Inner.request(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(os_unfair_lock_s **)(result + *(void *)(*(void *)result + 168));
    os_unfair_lock_lock(v6);
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(a3, v7, v8);
    os_unfair_lock_unlock(v6);
    return swift_release();
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.TryMap.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Subscription.request(_:) in conformance ReduceProducer<A, B, C, D, E>(Combine::Subscribers::Demand a1)
{
}

Swift::Void __swiftcall ReduceProducer.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 120);
  uint64_t v6 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v34 = (char *)&v30 - v10;
  uint64_t v11 = *(void *)(v4 + 96);
  uint64_t v37 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v14 = MEMORY[0x1F4188790](v38);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v19 = (char *)&v30 - v18;
  if (a1.rawValue != 0x8000000000000000)
  {
    if ((a1.rawValue & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (a1.rawValue)
    {
      goto LABEL_4;
    }
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v20 = v17;
  uint64_t v21 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 176));
  os_unfair_lock_lock(v21);
  uint64_t v22 = *v2;
  uint64_t v23 = *(void *)(*v2 + 184);
  if ((*((unsigned char *)v2 + v23) & 1) != 0
    || (*((unsigned char *)v2 + *(void *)(v22 + 192)) & 1) != 0
    || (uint64_t v24 = *(void *)(v22 + 200), (*((unsigned char *)v2 + v24) & 1) != 0)
    || (*((unsigned char *)v2 + v23) = 1, *((unsigned char *)v2 + *(void *)(*v2 + 208)) != 1))
  {
    os_unfair_lock_unlock(v21);
  }
  else
  {
    *((unsigned char *)v2 + v24) = 1;
    uint64_t v31 = (uint64_t)v2 + *(void *)(*v2 + 136);
    swift_beginAccess();
    uint64_t v32 = v20;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v33(v19, v31, v38);
    os_unfair_lock_unlock(v21);
    v33(v16, (uint64_t)v19, v38);
    uint64_t v25 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v16, 1, v11) == 1)
    {
      uint64_t v26 = v38;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v38);
      uint64_t v28 = v35;
      uint64_t v27 = v36;
      uint64_t v29 = v34;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v13, v16, v11);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, v6, v5);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v11);
      uint64_t v28 = v35;
      uint64_t v27 = v36;
      uint64_t v29 = v34;
      uint64_t v26 = v38;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v29, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 56))(v29, v6, v5);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v26);
  }
}

uint64_t AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](AsyncPublisher.Iterator.next(), 0, 0);
}

uint64_t type metadata completion function for Publishers.SwitchToLatest()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CombineIdentifier()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Publisher.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v28[1] = a8;
  void v28[2] = a6;
  void v28[3] = a7;
  v28[0] = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  return Publishers.Merge3.init(_:_:_:)((uint64_t)v24, (uint64_t)v22, (uint64_t)v17, a3, a4, a5, v28[0]);
}

uint64_t Publishers.Merge3.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for Publishers.Merge3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t type metadata accessor for Publishers.Merge3()
{
  return swift_getGenericMetadata();
}

uint64_t AbstractCombineLatest.__deallocating_deinit()
{
  uint64_t v0 = AbstractCombineLatest.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *AbstractCombineLatest.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 192)), -1, -1);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112), *(void *)(v1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 208);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t getEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t Publishers.AllSatisfy.Inner.__deallocating_deinit()
{
  uint64_t v0 = ReduceProducer.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *ReduceProducer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1, -1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  v4(v2, v3);
  v4((uint64_t)v0 + *(void *)(*v0 + 144), v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 152));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 160));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 168));
  return v0;
}

uint64_t type metadata completion function for Publishers.MapKeyPath()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage;
  if (!lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ObservableObjectTable.Storage and conformance ObservableObjectTable.Storage);
  }
  return result;
}

uint64_t destroy for Publishers.Throttle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v5 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13, v6);
}

uint64_t type metadata completion function for Publishers.Debounce()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance ReduceProducer<A, B, C, D, E>(char *a1)
{
  return 0;
}

uint64_t ReduceProducer.receive(_:)(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v74 = a1;
  unint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 120);
  uint64_t v5 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v64 = (char *)&v57 - v7;
  uint64_t v71 = v4;
  uint64_t v70 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v68 = type metadata accessor for Subscribers.Completion();
  uint64_t v67 = *(void *)(v68 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v68);
  uint64_t v66 = (char *)&v57 - v9;
  uint64_t v10 = v3[12];
  uint64_t v62 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v63 = (char *)&v57 - v11;
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v65 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v65);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v57 - v15;
  uint64_t v17 = type metadata accessor for PartialCompletion();
  uint64_t v73 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = *(os_unfair_lock_s **)(v2 + v3[22]);
  os_unfair_lock_lock(v23);
  uint64_t v24 = v2 + *(void *)(*(void *)v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v24, (uint64_t)&v75);
  if (!v78)
  {
    uint64_t v58 = v14;
    uint64_t v59 = v10;
    uint64_t v60 = v16;
    uint64_t v61 = AssociatedTypeWitness;
    outlined init with take of Subscription((long long *)&v75, (uint64_t)v79);
    os_unfair_lock_unlock(v23);
    (*(void (**)(char *))(*(void *)v2 + 392))(v74);
    uint64_t v25 = v73;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v20, v22, v17);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v27 = v22;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v74 = v22;
        uint64_t v64 = (char *)v17;
        os_unfair_lock_lock(v23);
        *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 208)) = 1;
        int v39 = *(unsigned __int8 *)(v2 + *(void *)(*(void *)v2 + 184));
        if (v39 == 1) {
          *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 200)) = 1;
        }
        uint64_t v75 = 1;
        long long v76 = 0u;
        long long v77 = 0u;
        char v78 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v75, v24);
        swift_endAccess();
        uint64_t v40 = v2 + *(void *)(*(void *)v2 + 136);
        swift_beginAccess();
        uint64_t v41 = v72;
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
        uint64_t v43 = v60;
        uint64_t v44 = v65;
        v42(v60, v40, v65);
        os_unfair_lock_unlock(v23);
        uint64_t v46 = v80;
        uint64_t v45 = v81;
        __swift_project_boxed_opaque_existential_1(v79, v80);
        (*(void (**)(uint64_t))(*(void *)(v45 + 8) + 8))(v46);
        uint64_t v47 = v63;
        if (v39)
        {
          uint64_t v48 = v58;
          v42(v58, (uint64_t)v43, v44);
          uint64_t v49 = v62;
          uint64_t v50 = v59;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v48, 1, v59) == 1)
          {
            (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v44);
            uint64_t v51 = v71;
            uint64_t v52 = v70;
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v47, v48, v50);
            uint64_t v51 = v71;
            uint64_t v52 = v70;
            (*(void (**)(char *, uint64_t, uint64_t))(v71 + 48))(v47, v70, v71);
            (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v50);
          }
          uint64_t v53 = v68;
          uint64_t v54 = v67;
          os_unfair_lock_t v55 = v66;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v66, 1, 1, v61);
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 56))(v55, v52, v51);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
          uint64_t v44 = v65;
          uint64_t v41 = v72;
          uint64_t v43 = v60;
        }
        (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
        uint64_t v36 = *(void (**)(char *, char *))(v25 + 8);
        uint64_t v37 = v74;
        uint64_t v38 = v64;
        goto LABEL_16;
      }
      uint64_t v28 = v23;
      uint64_t v29 = v69;
      uint64_t v30 = v64;
      uint64_t v31 = v61;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v64, v20, v61);
      os_unfair_lock_lock(v28);
      *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 208)) = 1;
      *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 200)) = 1;
      uint64_t v75 = 1;
      long long v76 = 0u;
      long long v77 = 0u;
      char v78 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v75, v24);
      swift_endAccess();
      os_unfair_lock_unlock(v28);
      uint64_t v32 = v27;
      uint64_t v33 = v80;
      uint64_t v34 = v81;
      __swift_project_boxed_opaque_existential_1(v79, v80);
      (*(void (**)(uint64_t))(*(void *)(v34 + 8) + 8))(v33);
      uint64_t v35 = v66;
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v66, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v31);
      (*(void (**)(char *, uint64_t))(v71 + 56))(v35, v70);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v68);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      uint64_t v36 = *(void (**)(char *, char *))(v25 + 8);
      uint64_t v37 = v32;
    }
    else
    {
      uint64_t v36 = *(void (**)(char *, char *))(v25 + 8);
      uint64_t v37 = v22;
    }
    uint64_t v38 = (char *)v17;
LABEL_16:
    v36(v37, v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    return 0;
  }
  outlined destroy of SubscriptionStatus((uint64_t)&v75);
  os_unfair_lock_unlock(v23);
  return 0;
}

uint64_t Publishers.Filter.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(v2 + *(int *)(a2 + 52)))() & 1) == 0) {
    return 1;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 48);
  uint64_t v6 = *(void *)(a2 + 24);

  return v5(a1, v6);
}

uint64_t Publishers.FirstWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v17 = a2;
  uint64_t v5 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v18[-1] - v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((char *)v3 + *(void *)(v5 + 152)))(v18, a1);
  if (LOBYTE(v18[0]) == 1)
  {
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    uint64_t v15 = (char *)v3 + *(void *)(*v3 + 136);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v15, v11, v7);
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)(*(uint64_t (**)(void))(v1 + 48), a1);
}

uint64_t _s6Output7Combine9PublisherPQzSbIegnd_AESbIegnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtzSb5InputRtd__r__lTRTA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result & 1;
  return result;
}

void Publishers.SwitchToLatest.Outer.Side.receive(_:)(uint64_t a1)
{
  Publishers.SwitchToLatest.Outer.receiveInner(_:_:)(a1, *v1);
}

void Publishers.SwitchToLatest.Outer.receiveInner(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v7));
  uint64_t v8 = *v2;
  if (*(uint64_t *)((char *)v2 + *(void *)(*v2 + 152)) != a2 || (*((unsigned char *)v2 + *(void *)(v8 + 184)) & 1) != 0) {
    goto LABEL_3;
  }
  uint64_t v9 = *(void *)(v8 + 216);
  uint64_t v10 = *(uint64_t *)((char *)v2 + v9);
  if (v10 != 0x8000000000000000)
  {
    if (v10 < 0)
    {
      __break(1u);
    }
    else if (v10)
    {
      *(uint64_t *)((char *)v2 + v9) = v10 - 1;
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_9:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v7));
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v6 + 120) + 48))(a1, *(void *)(v6 + 96));
  os_unfair_recursive_lock_unlock();
  if (v11 == 0x8000000000000000)
  {
LABEL_12:
    os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v3 + v7));
    uint64_t v12 = *(uint64_t *)((char *)v3 + v9);
    unint64_t v13 = 0x8000000000000000;
    if (v12 == 0x8000000000000000)
    {
LABEL_3:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v3 + v7));
      return;
    }
    if (v11 == 0x8000000000000000) {
      goto LABEL_19;
    }
    if (((v12 | v11) & 0x8000000000000000) == 0)
    {
      unint64_t v13 = v12 + v11;
      if (!__OFADD__(v12, v11))
      {
        if ((v13 & 0x8000000000000000) == 0) {
          goto LABEL_19;
        }
LABEL_24:
        __break(1u);
        return;
      }
      unint64_t v13 = 0x8000000000000000;
LABEL_19:
      *(uint64_t *)((char *)v3 + v9) = v13;
      goto LABEL_3;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v11) {
    goto LABEL_12;
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Scan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Scan.Inner.receive(_:)(a1);
}

uint64_t Publishers.First.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - v10, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
  uint64_t v13 = v2 + *(void *)(*(void *)v2 + 136);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v9, v5);
  swift_endAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.Filter.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 56))(a1, *(void *)(a2 + 24));
}

void protocol witness for Cancellable.cancel() in conformance FilterProducer<A, B, C, D, E>()
{
}

uint64_t Publishers.Collect.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - v4, a1, AssociatedTypeWitness);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v1 + 16))
  {
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Cancellable.cancel() in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.cancel()();
}

uint64_t Just.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))((char *)&v8 - v4, 1, 1, v1);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

uint64_t closure #1 in Publishers.ReceiveOn.Inner.receive(completion:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (os_unfair_lock_s *)a1[2];
  os_unfair_lock_lock(v5);
  uint64_t v8 = 1;
  long long v9 = 0u;
  long long v10 = 0u;
  char v11 = 2;
  uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 + 160);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v8, v6);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  os_unfair_recursive_lock_lock_with_options();
  (*(void (**)(uint64_t, void))(*(void *)(v4 + 120) + 56))(a2, *(void *)(v4 + 96));
  return os_unfair_recursive_lock_unlock();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.Catch.Inner.UncaughtS.receive(completion:));
}

uint64_t Publishers.Catch.Inner.UncaughtS.receive(completion:)(os_unfair_lock_s *a1)
{
  return Publishers.Catch.Inner.receivePre(completion:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.ReplaceError.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = &v17[-v8];
  long long v10 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 152));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v11, (uint64_t)&v18);
  int v12 = v21;
  outlined destroy of SubscriptionStatus((uint64_t)&v18);
  if (!v12)
  {
    uint64_t v13 = *(void *)(*v1 + 136);
    if ((*((unsigned char *)v1 + v13) & 1) == 0)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v9, 1, AssociatedTypeWitness) == 1)
      {
        uint64_t v18 = 1;
        long long v19 = 0u;
        long long v20 = 0u;
        unsigned __int8 v21 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v18, v11);
        swift_endAccess();
        os_unfair_lock_unlock(v10);
        LOBYTE(v18) = 1;
        (*(void (**)(uint64_t *, void))(*(void *)(v4 + 104) + 56))(&v18, *(void *)(v4 + 88));
        return;
      }
      uint64_t v14 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 144));
      if (v14 == 0x8000000000000000) {
        goto LABEL_10;
      }
      if (v14 < 0)
      {
        __break(1u);
        return;
      }
      if (v14)
      {
LABEL_10:
        uint64_t v18 = 1;
        long long v19 = 0u;
        long long v20 = 0u;
        unsigned __int8 v21 = 2;
        swift_beginAccess();
        outlined assign with take of SubscriptionStatus((uint64_t)&v18, v11);
        swift_endAccess();
        os_unfair_lock_unlock(v10);
        uint64_t v15 = *(void *)(v4 + 104);
        uint64_t v16 = *(void *)(v4 + 88);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v16, v15);
        LOBYTE(v18) = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 56))(&v18, v16, v15);
      }
      else
      {
        *((unsigned char *)v1 + v13) = 1;
        os_unfair_lock_unlock(v10);
      }
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      return;
    }
  }
  os_unfair_lock_unlock(v10);
}

void protocol witness for Subscriber.receive(completion:) in conformance Subscribers.Assign<A, B>()
{
}

void specialized Subscribers.Assign.receive(completion:)()
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v5 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v11);
  int v7 = v14;
  outlined destroy of SubscriptionStatus((uint64_t)&v11);
  if (v7)
  {
    os_unfair_lock_unlock(v5);
  }
  else
  {
    uint64_t v11 = 1;
    long long v12 = 0u;
    long long v13 = 0u;
    unsigned __int8 v14 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v11, v6);
    swift_endAccess();
    uint64_t v8 = (char *)v0 + *(void *)(*v0 + 104);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v8, v1);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v4, (uint64_t)partial apply for closure #1 in Subscribers.Assign.cancel(), (uint64_t)v0, v1, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v9);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t Optional.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v28 = a1;
  uint64_t v29 = a4;
  uint64_t v27 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(v10 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  long long v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unsigned __int8 v21 = (char *)&v27 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    uint64_t v22 = v29;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, v22);
    LOBYTE(v30[0]) = 1;
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 56))(v30, a3, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, v10);
    uint64_t v24 = v29;
    uint64_t v25 = type metadata accessor for Optional.Publisher.Inner();
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, v28, a3);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v10);
    swift_allocObject();
    uint64_t v26 = Optional.Publisher.Inner.init(downstream:output:)((uint64_t)v8, (uint64_t)v19);
    void v30[3] = v25;
    v30[4] = &protocol witness table for A?.Publisher.Inner<A1>;
    v30[0] = v26;
    (*(void (**)(void *, uint64_t, uint64_t))(v24 + 40))(v30, a3, v24);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>(char *a1, void *a2)
{
  return Publishers.SetFailureType.Inner.receive(completion:)(*a1, a2);
}

uint64_t Publishers.SetFailureType.Inner.receive(completion:)(char a1, void *a2)
{
  uint64_t v3 = a2[8];
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - v8;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v9, 1, 1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 56))(v9, v4, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<Never>);
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  return result;
}

void Publishers._Merged.Side.receive(completion:)(void *a1)
{
  Publishers._Merged.receive(completion:_:)(a1, *v1);
}

void Publishers._Merged.receive(completion:_:)(void *a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = (void *)*v3;
  uint64_t v6 = (void *)v29[11];
  uint64_t v7 = (void *)v29[12];
  uint64_t v30 = (void *)v29[13];
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = (void **)type metadata accessor for Subscribers.Completion();
  uint64_t v9 = (uint64_t)*(v8 - 1);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v29 - v10;
  (*(void (**)(char *, void *, void **))(v9 + 16))((char *)&v29 - v10, a1, v8);
  int v12 = (*(uint64_t (**)(char *, uint64_t, void *))(*(v6 - 1) + 48))(v11, 1, v6);
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(*v3 + 176));
  os_unfair_lock_lock(v13);
  uint64_t v14 = *v3;
  if (v12 == 1)
  {
    uint64_t v15 = *(void *)(v14 + 144);
    uint64_t v16 = *(uint64_t *)((char *)v3 + v15);
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
    }
    else
    {
      *(uint64_t *)((char *)v3 + v15) = v18;
      uint64_t v33 = 0;
      memset(v32, 0, sizeof(v32));
      uint64_t v8 = (void **)((char *)v3 + *(void *)(*v3 + 160));
      swift_beginAccess();
      a1 = *v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v8 = a1;
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((a2 & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_16;
      }
    }
    a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    *uint64_t v8 = a1;
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_5:
      if (a1[2] > a2)
      {
        outlined assign with take of Subscription?((uint64_t)v32, (uint64_t)&a1[5 * a2 + 4]);
        swift_endAccess();
        if (*(uint64_t *)((char *)v3 + v15) != *(uint64_t *)((char *)v3 + *(void *)(*v3 + 136))) {
          goto LABEL_12;
        }
        uint64_t v20 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 168));
        uint64_t v21 = swift_beginAccess();
        uint64_t v31 = *v20;
        MEMORY[0x1F4188790](v21);
        uint64_t v22 = (void *)v29[10];
        *(&v29 - 4) = v22;
        *(&v29 - 3) = v6;
        uint64_t v23 = v30;
        *(&v29 - 2) = v7;
        *(&v29 - 1) = v23;
        type metadata accessor for Optional();
        type metadata accessor for Array();
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        LOBYTE(v20) = Sequence.allSatisfy(_:)();
        swift_bridgeObjectRelease();
        if (v20)
        {
          *((unsigned char *)v3 + *(void *)(*v3 + 152)) = 1;
          os_unfair_lock_unlock(v13);
          uint64_t v24 = Publishers._Merged.guardedBecomeTerminal()();
          MEMORY[0x1F4188790](v24);
          *(&v29 - 4) = v22;
          *(&v29 - 3) = v6;
          uint64_t v25 = v30;
          *(&v29 - 2) = v7;
          *(&v29 - 1) = v25;
          Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #3 in Publishers._Merged.receive(completion:_:));
        }
        else
        {
LABEL_12:
          os_unfair_lock_unlock(v13);
        }
        return;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  char v26 = *((unsigned char *)v3 + *(void *)(v14 + 128));
  os_unfair_lock_unlock(v13);
  if ((v26 & 1) == 0)
  {
    uint64_t v27 = Publishers._Merged.guardedBecomeTerminal()();
    MEMORY[0x1F4188790](v27);
    *(&v29 - 6) = (void *)v29[10];
    *(&v29 - 5) = v6;
    uint64_t v28 = v30;
    *(&v29 - 4) = v7;
    *(&v29 - 3) = v28;
    *(&v29 - 2) = a1;
    Publishers._Merged.guardedApplyDownstream<A>(_:)((void (*)(uint64_t))partial apply for closure #1 in Publishers._Merged.receive(completion:_:));
  }
  (*(void (**)(char *, void **))(v9 + 8))(v11, v8);
}

void protocol witness for Subscriber.receive(completion:) in conformance ReduceProducer<A, B, C, D, E>(uint64_t a1)
{
}

void ReduceProducer.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v83 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v70 = (char *)&v65 - v8;
  uint64_t v9 = v3[13];
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v69 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v80 = (char *)&v65 - v12;
  uint64_t v72 = v4;
  uint64_t v73 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v77 = type metadata accessor for Subscribers.Completion();
  uint64_t v75 = *(void *)(v77 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v77);
  uint64_t v74 = (char *)&v65 - v14;
  uint64_t v15 = v3[12];
  uint64_t v68 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v67 = (char *)&v65 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v76 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v65 - v21;
  uint64_t v82 = v9;
  uint64_t v23 = type metadata accessor for Subscribers.Completion();
  uint64_t v78 = *(void *)(v23 - 8);
  uint64_t v79 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v65 - v24;
  char v26 = *(os_unfair_lock_s **)((char *)v2 + v3[22]);
  os_unfair_lock_lock(v26);
  uint64_t v27 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v27, (uint64_t)&v84);
  int v28 = v87;
  outlined destroy of SubscriptionStatus((uint64_t)&v84);
  if (v28) {
    goto LABEL_2;
  }
  uint64_t v65 = v20;
  uint64_t v66 = v22;
  uint64_t v29 = v80;
  uint64_t v84 = 1;
  long long v85 = 0u;
  long long v86 = 0u;
  unsigned __int8 v87 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v84, v27);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v25, v83, v79);
  uint64_t v31 = v81;
  uint64_t v30 = v82;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v25, 1, v82) == 1)
  {
    uint64_t v32 = *v2;
    if ((*((unsigned char *)v2 + *(void *)(*v2 + 192)) & 1) != 0
      || (uint64_t v33 = *(void *)(v32 + 200), (*((unsigned char *)v2 + v33) & 1) != 0)
      || (uint64_t v34 = *(void *)(v32 + 208), (*((unsigned char *)v2 + v34) & 1) != 0))
    {
LABEL_2:
      os_unfair_lock_unlock(v26);
      return;
    }
    *((unsigned char *)v2 + v34) = 1;
    uint64_t v35 = *v2;
    LODWORD(v83) = *((unsigned __int8 *)v2 + *(void *)(*v2 + 184));
    if (v83 == 1)
    {
      *((unsigned char *)v2 + v33) = 1;
      uint64_t v35 = *v2;
    }
    uint64_t v36 = (uint64_t)v2 + *(void *)(v35 + 136);
    swift_beginAccess();
    uint64_t v37 = v76;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    int v39 = v66;
    uint64_t v40 = v36;
    uint64_t v41 = v17;
    v38(v66, v40, v17);
    os_unfair_lock_unlock(v26);
    if (v83)
    {
      uint64_t v42 = v65;
      v38(v65, (uint64_t)v39, v17);
      uint64_t v43 = v68;
      uint64_t v44 = v15;
      int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48))(v42, 1, v15);
      uint64_t v46 = v42;
      uint64_t v47 = v72;
      uint64_t v83 = AssociatedTypeWitness;
      uint64_t v48 = v73;
      uint64_t v49 = v71;
      uint64_t v50 = v77;
      uint64_t v51 = v75;
      uint64_t v52 = v74;
      if (v45 == 1)
      {
        uint64_t v53 = v76;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v46, v41);
        uint64_t v54 = v41;
      }
      else
      {
        uint64_t v63 = v67;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v67, v46, v44);
        uint64_t v82 = v41;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 48))(v63, v48, v47);
        uint64_t v64 = v63;
        uint64_t v50 = v77;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v64, v44);
        uint64_t v54 = v82;
        uint64_t v53 = v76;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v52, 1, 1, v83);
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 56))(v52, v48, v47);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v66, v54);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v17);
    }
  }
  else
  {
    os_unfair_lock_t v55 = v29;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v25, v30);
    uint64_t v56 = *v2;
    if ((*((unsigned char *)v2 + *(void *)(*v2 + 192)) & 1) != 0
      || (uint64_t v57 = *(void *)(v56 + 200), (*((unsigned char *)v2 + v57) & 1) != 0)
      || (uint64_t v58 = *(void *)(v56 + 208), (*((unsigned char *)v2 + v58) & 1) != 0))
    {
      os_unfair_lock_unlock(v26);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
    }
    else
    {
      *((unsigned char *)v2 + v58) = 1;
      *((unsigned char *)v2 + v57) = 1;
      os_unfair_lock_unlock(v26);
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v69, v29, v30);
      uint64_t v59 = v70;
      swift_dynamicCast();
      uint64_t v60 = v31;
      uint64_t v61 = v71;
      uint64_t v62 = v74;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v74, v59, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v72 + 56))(v62, v73);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v62, v77);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v55, v30);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v59, AssociatedTypeWitness);
    }
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryMap<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.TryMap.Inner.receive(_:)(a1);
}

uint64_t Publishers.TryMap.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v18 - v7;
  uint64_t v10 = *(void *)(v9 + 96);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v15 = *(void (**)(char *))(v11 + 16);
  v18[1] = (char *)v1 + *(void *)(v14 + 120);
  v15((char *)v18 - v12);
  (*(void (**)(uint64_t))((char *)v1 + *(void *)(*v1 + 128)))(a1);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v3 + 112) + 48))(v8, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.SubscribeOn.Inner.receive(_:)(a1);
}

uint64_t Publishers.SubscribeOn.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  if (v7[40])
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v4);
    return 0;
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v4);
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48))(a1, *(void *)(v3 + 96));
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(uint64_t a1)
{
}

void Publishers.SwitchToLatest.Outer.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = *v2;
  uint64_t v4 = v28;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v26 - v7;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(v4 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v15));
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v16 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v32, v16);
  swift_endAccess();
  *((unsigned char *)v2 + *(void *)(*v2 + 192)) = 1;
  if (*((unsigned char *)v2 + *(void *)(*v2 + 184)) == 1) {
    goto LABEL_2;
  }
  uint64_t v26 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    if ((*((unsigned char *)v2 + *(void *)(*v2 + 208)) & 1) != 0
      || (uint64_t v17 = (uint64_t)v2 + *(void *)(*v2 + 144),
          swift_beginAccess(),
          outlined init with copy of Subscription?(v17, (uint64_t)&v32),
          uint64_t v18 = *((void *)&v33 + 1),
          outlined destroy of Subscription?((uint64_t)&v32),
          v18))
    {
LABEL_2:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v15));
      return;
    }
    *((unsigned char *)v2 + *(void *)(*v2 + 200)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v15));
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, void))(*(void *)(v28 + 120) + 56))(v12, *(void *)(v28 + 96));
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v8);
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    uint64_t v19 = v27;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v27, v14, AssociatedTypeWitness);
    uint64_t v20 = (uint64_t)v2 + *(void *)(*v2 + 144);
    swift_beginAccess();
    outlined init with copy of Subscription?(v20, (uint64_t)&v32);
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v29, v20);
    swift_endAccess();
    *((unsigned char *)v2 + *(void *)(*v2 + 200)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v15));
    outlined init with copy of Subscription?((uint64_t)&v32, (uint64_t)&v29);
    uint64_t v21 = *((void *)&v30 + 1);
    uint64_t v22 = v8;
    if (*((void *)&v30 + 1))
    {
      uint64_t v23 = v31;
      __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v30 + 1));
      (*(void (**)(uint64_t))(*(void *)(v23 + 8) + 8))(v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v29);
    }
    uint64_t v24 = v28;
    uint64_t v25 = v26;
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v19, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, void))(*(void *)(v24 + 120) + 56))(v12, *(void *)(v24 + 96));
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v22);
    os_unfair_recursive_lock_unlock();
    outlined destroy of Subscription?((uint64_t)&v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, AssociatedTypeWitness);
  }
}

uint64_t type metadata completion function for Publishers.MapKeyPath.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.ReplaceEmpty()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.first()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t type metadata completion function for Subscribers.Assign()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Zip3Inner()
{
  return swift_initClassMetadata2();
}

uint64_t Publisher.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  uint64_t v12 = v11;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v13(v11, v4, a2);
  v13(v12 + v9, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v16 = v10;
  uint64_t v14 = type metadata accessor for Array();
  swift_getWitnessTable();
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v16, v14, a3);
}

uint64_t Publishers.MergeMany.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v8 = Array.init<A>(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return MEMORY[0x1F4185768](0, a2);
  }
}

uint64_t Publishers.ReplaceEmpty.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t *Publishers.ReplaceError.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 128));
  return v0;
}

uint64_t Publisher.throttle<A>(for:scheduler:latest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v28 = a6;
  int v27 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v26 = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v23 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v8, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v24, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, a5);
  return Publishers.Throttle.init(upstream:interval:scheduler:latest:)((uint64_t)v20, (uint64_t)v18, (uint64_t)v13, v27, a4, a5, v26);
}

uint64_t Publishers.Throttle.init(upstream:interval:scheduler:latest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7, a1, a5);
  uint64_t v12 = (int *)type metadata accessor for Publishers.Throttle();
  uint64_t v13 = a7 + v12[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v13, a2, AssociatedTypeWitness);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v12[14], a3, a6);
  *(unsigned char *)(a7 + v12[15]) = a4;
  return result;
}

uint64_t type metadata accessor for Publishers.Throttle()
{
  return swift_getGenericMetadata();
}

uint64_t Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v21[-v16];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v15, v5, v11);
  uint64_t v22 = v10;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a4, (uint64_t)v21, MEMORY[0x1E4FBC248], v10, v18, (uint64_t)v17);
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
  v19(v15, v11);
  Optional.publisher.getter(v11, a5);
  return ((uint64_t (*)(unsigned char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in Publishers.CompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - v16;
  a2(a1);
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a9;
  uint64_t v29 = v21;
  uint64_t v30 = v22;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply, (uint64_t)v24, MEMORY[0x1E4FBC248], a7, v18, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t closure #1 in Publishers.CompactMap.map<A>(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - v16;
  a2(a1);
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a9;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a9;
  uint64_t v29 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1);
  uint64_t v30 = &v31;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?), (uint64_t)v24, MEMORY[0x1E4FBC248], a7, v18, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t partial apply for closure #1 in Publishers.CompactMap.map<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.CompactMap.compactMap<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.CompactMap.map<A>(_:));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed B) -> (@out A1)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  (*(void (**)(void))(v1 + 48))();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)partial apply()
{
  return partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?)();
}

uint64_t Just.compactMap<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - v7;
  a1(v2);
  Optional.publisher.getter(v5, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Optional.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a2, v4, v6);
}

uint64_t Publisher<>.switchToLatest()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publisher.scan<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v24 = a7;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, a5);
  v24(v18, v16, a2, a3, a4, a5, a6);
  return swift_retain();
}

uint64_t Publishers.Scan.init(upstream:initialResult:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  uint64_t v17 = a8(0, a5, a6, a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + *(int *)(v17 + 44), a2, a6);
  uint64_t v19 = (void *)(a9 + *(int *)(v17 + 48));
  void *v19 = a3;
  v19[1] = a4;
  return result;
}

uint64_t type metadata accessor for Publishers.Scan()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Scan.init(upstream:initialResult:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Scan.init(upstream:initialResult:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.Scan, a8);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.DropWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata completion function for Publishers.Debounce.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v3 > 0x3F) {
      return AssociatedTypeWitness;
    }
    uint64_t v4 = swift_checkMetadataState();
    if (v5 > 0x3F) {
      return v4;
    }
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
    if (v6 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v7 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

uint64_t type metadata completion function for Publishers.SwitchToLatest.Outer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge8<A, B, C, D, E, F, G, H>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Publishers.Merge6<A, B, C, D, E, F>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(void *a1)
{
  return Publishers.SwitchToLatest.Outer.receive(subscription:)(a1);
}

uint64_t Publishers.SwitchToLatest.Outer.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  uint64_t v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (v5 || *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 184)) == 1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 24))(0x8000000000000000, v9, v10);
  }
}

uint64_t Publishers.Zip3.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for Publishers.Zip3();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 68), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 72), a3, a6);
}

uint64_t type metadata accessor for Publishers.Zip3()
{
  return swift_getGenericMetadata();
}

uint64_t Just.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v3, v5);
  return Result.Publisher.init(_:)((uint64_t)v7, v5, a3);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for Result();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ReduceProducer()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t withUnsafeContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return MEMORY[0x1F4188298](withUnsafeContinuation<A>(isolation:_:), v6, v8);
}

void Publishers.CollectByTime.Inner.schedulerTimerFired()()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + v3));
  uint64_t v4 = *(void *)(*v0 + 192);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v5)
  {
LABEL_4:
    uint64_t v6 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 152));
    swift_beginAccess();
    uint64_t v14 = *v6;
    swift_getAssociatedTypeWitness();
    type metadata accessor for Array();
    swift_getWitnessTable();
    if (Collection.isEmpty.getter()) {
      goto LABEL_26;
    }
    uint64_t v7 = *(uint64_t *)((char *)v0 + v4);
    if (v7 == 0x8000000000000000)
    {
LABEL_8:
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain();
      *uint64_t v6 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(uint64_t *)((char *)v0 + v4);
      if (v9 == 0x8000000000000000)
      {
LABEL_12:
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + v3));
        uint64_t v14 = v8;
        uint64_t v10 = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 120) + 48))(&v14, *(void *)(v2 + 96));
        swift_bridgeObjectRelease();
        if (v10 == 0x8000000000000000) {
          goto LABEL_15;
        }
        if ((v10 & 0x8000000000000000) == 0)
        {
          if (!v10) {
            return;
          }
LABEL_15:
          os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v3));
          uint64_t v11 = *(uint64_t *)((char *)v1 + v4);
          if (v11 != 0x8000000000000000)
          {
            unint64_t v12 = 0x8000000000000000;
            if (v10 == 0x8000000000000000) {
              goto LABEL_25;
            }
            if (((v11 | v10) & 0x8000000000000000) == 0)
            {
              unint64_t v12 = v11 + v10;
              if (!__OFADD__(v11, v10))
              {
                if ((v12 & 0x8000000000000000) == 0) {
                  goto LABEL_25;
                }
LABEL_34:
                __break(1u);
                return;
              }
              unint64_t v12 = 0x8000000000000000;
LABEL_25:
              *(uint64_t *)((char *)v1 + v4) = v12;
              goto LABEL_26;
            }
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_26:
          os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v3));
          return;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if ((v9 & 0x8000000000000000) == 0)
      {
        if (v9)
        {
          *(uint64_t *)((char *)v0 + v4) = v9 - 1;
          goto LABEL_12;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (!v7) {
        goto LABEL_26;
      }
      goto LABEL_8;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v13 = *(os_unfair_lock_s **)((char *)v0 + v3);

  os_unfair_lock_unlock(v13);
}

uint64_t Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile, a5);
}

uint64_t type metadata accessor for Fail()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnySubscriberBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnySubscriberBox()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.ReplaceError.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)v15);
  int v7 = v15[40];
  outlined destroy of SubscriptionStatus((uint64_t)v15);
  if (v7) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(*v2 + 144);
  uint64_t v9 = *(uint64_t *)((char *)v2 + v8);
  if (v9 != 0x8000000000000000)
  {
    if (v9 < 0)
    {
      __break(1u);
    }
    else if (v9)
    {
      *(uint64_t *)((char *)v2 + v8) = v9 - 1;
      goto LABEL_8;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_8:
  os_unfair_lock_unlock(v5);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48))(a1, *(void *)(v4 + 88));
  uint64_t v11 = v10;
  if (v10 == 0x8000000000000000)
  {
    os_unfair_lock_lock(v5);
    unint64_t v12 = 0x8000000000000000;
    if (*(uint64_t *)((char *)v2 + v8) != 0x8000000000000000) {
      goto LABEL_19;
    }
LABEL_2:
    os_unfair_lock_unlock(v5);
    return;
  }
  if (v10 < 0) {
    goto LABEL_22;
  }
  if (v10)
  {
    os_unfair_lock_lock(v5);
    uint64_t v13 = *(uint64_t *)((char *)v2 + v8);
    if (v13 == 0x8000000000000000) {
      goto LABEL_2;
    }
    if (((v13 | v11) & 0x8000000000000000) == 0)
    {
      BOOL v14 = __OFADD__(v13, v11);
      unint64_t v12 = v13 + v11;
      if (v14)
      {
        unint64_t v12 = 0x8000000000000000;
LABEL_19:
        *(uint64_t *)((char *)v2 + v8) = v12;
        goto LABEL_2;
      }
      if ((v12 & 0x8000000000000000) == 0) {
        goto LABEL_19;
      }
LABEL_24:
      __break(1u);
      return;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AnySubscriber<A, B>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.CollectByCount.Inner.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 160));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v4, (uint64_t)&v9, &demangling cache variable for type metadata for Subscription?);
  if (!v10)
  {
    outlined destroy of CustomStringConvertible?((uint64_t)&v9, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v3);
    return;
  }
  outlined init with take of Subscription(&v9, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  unint64_t v7 = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 120));
  unint64_t v7 = a1 * v8;
  if ((unsigned __int128)(a1 * (__int128)v8) >> 64 == (a1 * v8) >> 63)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_14:
    __break(1u);
    return;
  }
  unint64_t v7 = 0x8000000000000000;
LABEL_10:
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 24))(v7, v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t type metadata completion function for Publishers.CollectByCount.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for ObservableObjectPublisher()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t AsyncPublisher.makeAsyncIterator()(uint64_t a1, uint64_t (*a2)(char *, uint64_t, void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return a2(v6, v4, *(void *)(a1 + 24));
}

uint64_t AsyncPublisher.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AsyncPublisher.Iterator.Inner();
  uint64_t v9 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  uint64_t v13 = v9;
  swift_retain_n();
  uint64_t v10 = AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v13, v8, (uint64_t)&protocol witness table for AsyncPublisher<A>.Iterator.Inner);
  uint64_t v13 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v13, a2, v8, a3, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t result = swift_release();
  *a4 = v9;
  a4[1] = v10;
  return result;
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AsyncPublisher.Iterator.Inner.init()()
{
  unint64_t v1 = (_DWORD *)swift_slowAlloc();
  *unint64_t v1 = 0;
  *(void *)(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for UnsafeContinuation();
  *(void *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  return v0;
}

uint64_t type metadata completion function for Publishers.TryMap.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  _OWORD v5[3] = v4;
  v5[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  return MEMORY[0x1F4188298](closure #2 in AsyncPublisher.Iterator.next(), 0, 0);
}

uint64_t type metadata completion function for Result.Publisher()
{
  uint64_t result = type metadata accessor for Result();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void (*static Published.subscript.modify(void *a1, uint64_t a2, void *a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v8 = malloc(0x88uLL);
  *a1 = v8;
  v8[11] = a3;
  v8[12] = a4;
  v8[5] = a2;
  uint64_t v9 = *(void *)(*MEMORY[0x1E4FBBE08] + *a3 + 8);
  v8[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[14] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[15] = malloc(v11);
  uint64_t v12 = malloc(v11);
  v8[16] = v12;
  static Published.subscript.getter(a2, a3, (uint64_t)v12);
  return static Published.subscript.modify;
}

uint64_t Subscribers.Demand.description.getter(uint64_t a1)
{
  if (a1 == 0x8000000000000000) {
    return 0x6574696D696C6E75;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 678977901;
}

uint64_t PassthroughSubject.__deallocating_deinit()
{
  PassthroughSubject.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void *PassthroughSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((char *)v0 + *(void *)(*v0 + 136));
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v4, (uint64_t)v10);
      uint64_t v6 = v11;
      uint64_t v5 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18C13C4B0](v1[2], -1, -1);
  uint64_t v7 = (char *)v1 + *(void *)(*v1 + 120);
  type metadata accessor for Subscribers.Completion();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  outlined consume of ConduitList<A, Never><A>(*(void *)((char *)v1 + *(void *)(*v1 + 128)), *((unsigned char *)v1 + *(void *)(*v1 + 128) + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t partial apply for closure #1 in PassthroughSubject.send(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))(*(void *)(v1 + 16));
}

void PassthroughSubject.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v20 = a1;
  uint64_t v4 = *(void *)(v19 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v16);
  uint64_t v17 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v17, v9, v5);
    swift_endAccess();
    uint64_t v18 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v16);
    if (v18)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 + 184) + 56))(v20, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Multicast<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Multicast.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a1, *(void *)(v3 + 96));
  }
}

uint64_t Publishers.Autoconnect.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 56))(a1, *(void *)(a2 + 24));
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Delay<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Delay.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v14 = (void *)*v1;
  uint64_t v3 = v14[13];
  uint64_t v4 = v14[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)v15 - v7 + 16;
  char v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v15);
  if (v16)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v15);
    os_unfair_lock_unlock(v9);
  }
  else
  {
    outlined init with take of Subscription(v15, (uint64_t)v17);
    outlined init with copy of Subscription((uint64_t)v17, (uint64_t)v15);
    char v16 = 1;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v15, v10);
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = (char *)swift_allocObject();
    *((void *)v12 + 2) = v4;
    uint64_t v13 = v14;
    *((void *)v12 + 3) = v14[11];
    *((void *)v12 + 4) = v13[12];
    *((void *)v12 + 5) = v3;
    *((void *)v12 + 6) = v13[14];
    *((void *)v12 + 7) = v13[15];
    *((void *)v12 + 8) = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[v11], v8, v5);
    swift_retain();
    Publishers.Delay.Inner.schedule(immediate:work:)(0, (uint64_t)partial apply for closure #1 in Publishers.Delay.Inner.receive(completion:), (uint64_t)v12);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Delay<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Delay.Inner.receive(_:)(a1);
}

uint64_t Publishers.Delay.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v15 = *(void *)(*v1 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v8 = &v16[-v7 - 8];
  char v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v10, (uint64_t)v16);
  LODWORD(v10) = v16[40];
  outlined destroy of SubscriptionStatus((uint64_t)v16);
  os_unfair_lock_unlock(v9);
  if (!v10)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, AssociatedTypeWitness);
    unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v12 = (char *)swift_allocObject();
    *((void *)v12 + 2) = v4;
    *((void *)v12 + 3) = v3[11];
    uint64_t v13 = v15;
    *((void *)v12 + 4) = v3[12];
    *((void *)v12 + 5) = v13;
    *((void *)v12 + 6) = v3[14];
    *((void *)v12 + 7) = v3[15];
    *((void *)v12 + 8) = v1;
    (*(void (**)(char *, unsigned char *, uint64_t))(v6 + 32))(&v12[v11], v8, AssociatedTypeWitness);
    swift_retain();
    Publishers.Delay.Inner.schedule(immediate:work:)(0, (uint64_t)partial apply for closure #1 in Publishers.Delay.Inner.receive(_:), (uint64_t)v12);
    swift_release();
  }
  return 0;
}

uint64_t Publishers.Delay.Inner.schedule(immediate:work:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = v6[14];
  uint64_t v8 = v6[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v18 - v14;
  if (a1) {
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(&v4[v6[21]], v18, v19, v8, v7);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v8, v7);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, AssociatedTypeWitness);
  (*(void (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 64))(v15, &v4[*(void *)(*(void *)v4 + 152)], &v4[*(void *)(*(void *)v4 + 168)], v18, v19, v8, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, AssociatedTypeWitness);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyPublisher<A, B>()
{
  return 0x696C627550796E41;
}

uint64_t Publishers.Output.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Output.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.Output.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 120));
  return v0;
}

uint64_t Publishers.SwitchToLatest.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v10[3];
  uint64_t v12 = v10[4];
  uint64_t v13 = v10[5];
  v22[0] = v10[2];
  v22[1] = v11;
  v22[2] = v14;
  uint64_t v23 = v12;
  uint64_t v24 = (_UNKNOWN **)v13;
  uint64_t v25 = v15;
  uint64_t v16 = type metadata accessor for Publishers.SwitchToLatest.Outer();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  swift_allocObject();
  uint64_t v17 = Publishers.SwitchToLatest.Outer.init(downstream:)((uint64_t)v9);
  uint64_t v23 = v16;
  uint64_t v24 = &protocol witness table for Publishers.SwitchToLatest<A, B>.Outer<A1>;
  v22[0] = v17;
  uint64_t v18 = *(void (**)(void *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v18(v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  v22[0] = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v22, v11, v16, v13, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.SwitchToLatest.Outer()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.SwitchToLatest.Outer.init(downstream:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 136);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 32) = 0;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  *(void *)(v5 + 32) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 152)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 160)) = 1;
  uint64_t v6 = *(void *)(*v1 + 168);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  _DWORD *v7 = 0;
  *(uint64_t *)((char *)v1 + v6) = (uint64_t)v7;
  uint64_t v8 = *(void *)(*v1 + 176);
  char v9 = (void *)swift_slowAlloc();
  *(uint64_t *)((char *)v1 + v8) = (uint64_t)v9;
  *char v9 = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 184)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 192)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 200)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 208)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 216)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 128), a1);
  return v1;
}

uint64_t Publishers.DropWhile.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (int8x16_t v5 = vorrq_s8(v13, v14),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    char v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.DropWhile<A>.Inner<A1>;
    uint64_t v12 = v1;
    uint64_t v9 = *(void *)(v3 + 104);
    uint64_t v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Scan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Scan.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Scan.Inner.receive(subscription:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112) + 40))(a1, *(void *)(*(void *)v1 + 96));
}

uint64_t Publisher<>.assign<A>(to:on:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(*a1 + *MEMORY[0x1E4FBBE08]);
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(*v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = type metadata accessor for Subscribers.Assign();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v14 = swift_allocObject();
  swift_retain();
  Subscribers.Assign.init(object:keyPath:)((uint64_t)v12, (uint64_t)a1);
  uint64_t v18 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v18, a3, v13, a4, WitnessTable);
  type metadata accessor for AnyCancellable();
  uint64_t v18 = v14;
  return AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v18, v13, (uint64_t)&protocol witness table for Subscribers.Assign<A, B>);
}

uint64_t type metadata accessor for Subscribers.Assign()
{
  return __swift_instantiateGenericMetadata();
}

void *Subscribers.Assign.init(object:keyPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a2;
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  v2[2] = v9;
  uint64_t v10 = (char *)v2 + *(void *)(*v2 + 104);
  uint64_t v11 = *(void *)(v4 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v4);
  uint64_t v13 = (char *)v2 + *(void *)(*v2 + 120);
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  v13[40] = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v8, a1, v4);
  v12(v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v10, v8, v5);
  swift_endAccess();
  *(void *)((char *)v2 + *(void *)(*v2 + 112)) = v15;
  return v2;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Throttle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Throttle.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Throttle.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = (int *)a2;
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v15 = *(_OWORD *)(a2 + 16);
  uint64_t v14 = v15;
  uint64_t v16 = a3;
  long long v17 = v13;
  uint64_t v18 = a4;
  uint64_t v8 = type metadata accessor for Publishers.Throttle.Inner();
  uint64_t v9 = v5 + v6[13];
  uint64_t v10 = v5 + v6[14];
  LODWORD(v6) = *(unsigned __int8 *)(v5 + v6[15]);
  swift_allocObject();
  *(void *)&long long v15 = specialized Publishers.Throttle.Inner.init(_:interval:scheduler:latest:)(a1, v9, v10, (int)v6);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v15, v14, v8, v13, WitnessTable);
  return swift_release();
}

void *specialized Publishers.Throttle.Inner.init(_:interval:scheduler:latest:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  int v46 = a4;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v48 = a1;
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = v6[14];
  uint64_t v8 = v6[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v33 - v10;
  uint64_t v42 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v41 = (char *)&v33 - v11;
  uint64_t v36 = v7;
  swift_getAssociatedConformanceWitness();
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v37 = (char *)&v33 - v13;
  uint64_t v14 = v6[12];
  uint64_t v15 = v6[13];
  uint64_t v16 = v6[15];
  uint64_t v50 = v6[10];
  uint64_t v51 = v8;
  uint64_t v17 = v50;
  uint64_t v35 = v50;
  uint64_t v52 = v14;
  uint64_t v53 = v15;
  uint64_t v54 = v7;
  uint64_t v55 = v16;
  uint64_t v18 = v16;
  uint64_t v19 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v39 = v19;
  uint64_t v40 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v33 - v21;
  uint64_t v23 = (_DWORD *)swift_slowAlloc();
  *uint64_t v23 = 0;
  v5[2] = v23;
  uint64_t v24 = (void *)swift_slowAlloc();
  *uint64_t v24 = 0;
  _OWORD v5[3] = v24;
  uint64_t v25 = (char *)v5 + *(void *)(*v5 + 160);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *((unsigned char *)v5 + *(void *)(*v5 + 176)) = 0;
  *((unsigned char *)v5 + *(void *)(*v5 + 184)) = 0;
  uint64_t v50 = v17;
  uint64_t v51 = v8;
  uint64_t v52 = v14;
  uint64_t v53 = v15;
  uint64_t v27 = v36;
  uint64_t v54 = v36;
  uint64_t v55 = v18;
  type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v34 = &v22[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v28 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v37, v43, v38);
  uint64_t v29 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v44, v8);
  Publishers.Throttle.Inner.Scheduling.init(interval:scheduler:latest:)(v28, v29, v46, v8, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v34, v48, v14);
  uint64_t v30 = v39;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))((char *)v5 + *(void *)(*v5 + 144), v22, v30);
  *(void *)((char *)v5 + *(void *)(*v5 + 152)) = 0;
  char v31 = v47;
  (*(void (**)(uint64_t, uint64_t))(v27 + 40))(v8, v27);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))((char *)v5 + *(void *)(*v5 + 168), v31, AssociatedTypeWitness);
  return v5;
}

uint64_t type metadata accessor for Publishers.Throttle.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Throttle.Inner.Scheduling.init(interval:scheduler:latest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  uint64_t v9 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v9 + 68), a2, a4);
  *(unsigned char *)(a5 + *(int *)(v9 + 72)) = a3;
  return result;
}

uint64_t type metadata completion function for Publishers.Throttle.Inner.Scheduling()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.DropWhile()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByCount<A>.Inner<A1>(void *a1)
{
  return Publishers.CollectByCount.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.CollectByCount.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((unsigned char *)v1 + *(void *)(*v1 + 144)) & 1) != 0
    || (uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 136),
        swift_beginAccess(),
        outlined init with copy of Any?(v5, (uint64_t)v13, &demangling cache variable for type metadata for Subscription?), uint64_t v6 = v14, outlined destroy of CustomStringConvertible?((uint64_t)v13, &demangling cache variable for type metadata for Subscription?), v6))
  {
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v13);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v13, v5, &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v14 = v3;
    uint64_t v15 = &protocol witness table for Publishers.CollectByCount<A>.Inner<A1>;
    v13[0] = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
}

uint64_t type metadata completion function for Publishers.TryCatch.Inner.State()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Delay<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Delay.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t AsyncPublisher.Iterator.Inner.next()()
{
  uint64_t v6 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  unint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  *unint64_t v1 = v0;
  v1[1] = AsyncPublisher.Iterator.Inner.next();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(uint64_t, void, void, void (*)(uint64_t), uint64_t, uint64_t))v6)(v3, 0, 0, partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next(), v4, v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t Publisher.collect<A>(_:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v22 = a5;
  uint64_t v23 = a4;
  uint64_t v21 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t v10 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v19 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v17 + 16))(v16, v19[1], a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v20, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, v6);
  return Publishers.CollectByTime.init(upstream:strategy:options:)((uint64_t)v16, (uint64_t)v14, (uint64_t)v9, a3, v22);
}

uint64_t Publishers.CollectByTime.init(upstream:strategy:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for Publishers.CollectByTime();
  uint64_t v9 = a5 + *(int *)(v8 + 52);
  uint64_t v10 = type metadata accessor for Publishers.TimeGroupingStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
  uint64_t v11 = a5 + *(int *)(v8 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t type metadata accessor for Publishers.CollectByTime()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(void *a1)
{
  return Publishers.CollectByTime.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.CollectByTime.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  int v46 = *(void **)v1;
  uint64_t v4 = v46;
  uint64_t v5 = v46[14];
  uint64_t v6 = v46[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v44 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (char *)v41 - v10;
  uint64_t v11 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v48 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v48);
  uint64_t v42 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v50 = (char *)v41 - v18;
  uint64_t v47 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v41 - v19;
  uint64_t v52 = v4[22];
  os_unfair_lock_lock(*(os_unfair_lock_t *)&v2[v52]);
  uint64_t v21 = (uint64_t)&v2[*(void *)(*(void *)v2 + 160)];
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v21, (uint64_t)&v53);
  if (v56 == 2
    && (int8x16_t v22 = vorrq_s8(v54, v55),
        !(*(void *)&vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)) | v53)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v53);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v53);
    char v56 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v53, v21);
    swift_endAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v2[*(void *)(*(void *)v2 + 136)], v11);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v41[1] = v51 + 32;
    uint64_t v28 = v48;
    if (EnumCaseMultiPayload == 1) {
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    }
    else {
      TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
    }
    uint64_t v30 = &v14[*(int *)(TupleTypeMetadata3 + 48)];
    v27(v20, v14, v6);
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v30, v28);
    char v31 = v44;
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v6, v5);
    dispatch thunk of Strideable.advanced(by:)();
    uint64_t v45 = *(void *)(v45 + 8);
    ((void (*)(char *, uint64_t))v45)(v31, AssociatedTypeWitness);
    uint64_t v32 = v42;
    (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v6, v5);
    uint64_t v33 = &v2[*(void *)(*(void *)v2 + 144)];
    uint64_t v44 = *(char **)(v5 + 72);
    swift_retain();
    uint64_t v34 = v49;
    ((void (*)(unint64_t *__return_ptr, char *, char *, char *, char *, uint64_t (*)(), char *, uint64_t, uint64_t))v44)(&v53, v49, v50, v32, v33, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(subscription:), v2, v6, v5);
    swift_release();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v51 + 8);
    uint64_t v36 = v48;
    v35(v32, v48);
    ((void (*)(char *, uint64_t))v45)(v34, AssociatedTypeWitness);
    v35(v50, v36);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v6);
    uint64_t v37 = (uint64_t)&v2[*(void *)(*(void *)v2 + 184)];
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v53, v37, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)&v2[v52]);
    v55.i64[0] = (uint64_t)v46;
    v55.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTime<A, B>.Inner<A1>;
    unint64_t v53 = (unint64_t)v2;
    uint64_t v38 = v46[15];
    uint64_t v39 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v38 + 40);
    uint64_t v40 = v46[12];
    swift_retain();
    v39(&v53, v40, v38);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v53);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)&v2[v52]);
    uint64_t v23 = a1[3];
    uint64_t v24 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v23);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v24 + 8) + 8))(v23);
  }
}

uint64_t Publishers.CollectByTime.Inner.receive(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v60 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v59 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v51 - v5;
  uint64_t v7 = *(void *)(v3 + 112);
  uint64_t v8 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v62 = (char *)&v51 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = *(void *)(v3 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v16));
  uint64_t v17 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v17, (uint64_t)v64);
  if (!v65)
  {
    uint64_t v58 = v16;
    int8x16_t v55 = v11;
    unint64_t v53 = v6;
    outlined init with take of Subscription(v64, (uint64_t)v66);
    (*(void (**)(char *, uint64_t *, uint64_t))(v13 + 16))(v15, v60, AssociatedTypeWitness);
    uint64_t v19 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 152));
    swift_beginAccess();
    type metadata accessor for Array();
    uint64_t v60 = v19;
    Array.append(_:)();
    swift_endAccess();
    uint64_t v21 = v61;
    uint64_t v20 = v62;
    int8x16_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
    uint64_t v56 = (uint64_t)v2 + *(void *)(*v2 + 136);
    int8x16_t v54 = v22;
    ((void (*)(char *))v22)(v62);
    uint64_t v57 = v8;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    swift_getAssociatedTypeWitness();
    uint64_t v52 = v7;
    swift_getAssociatedConformanceWitness();
    uint64_t v24 = swift_getAssociatedTypeWitness();
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v33 = &v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v58));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v33, v24);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v4);
      return 1;
    }
    uint64_t v51 = v4;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    uint64_t v26 = &v20[*(int *)(TupleTypeMetadata3 + 48)];
    uint64_t v27 = *(void *)&v20[*(int *)(TupleTypeMetadata3 + 64)];
    uint64_t v28 = v60;
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = MEMORY[0x18C13B7E0](v29, AssociatedTypeWitness);
    uint64_t result = swift_bridgeObjectRelease();
    if (v30 < v27) {
      goto LABEL_7;
    }
    uint64_t v34 = *(void *)(*v2 + 192);
    uint64_t v35 = *(uint64_t *)((char *)v2 + v34);
    if (v35 != 0x8000000000000000)
    {
      if (v35 < 0)
      {
        __break(1u);
        goto LABEL_20;
      }
      if (!v35)
      {
LABEL_7:
        char v31 = v55;
        uint64_t v32 = v57;
        v54(v55, v56, v57);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          uint64_t v47 = v51;
          uint64_t v48 = &v31[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v58));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
          uint64_t v49 = *(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8);
          v49(v48, v24);
          uint64_t v50 = *(void (**)(char *, uint64_t))(v59 + 8);
          v50(v31, v47);
          v49(v26, v24);
          v50(v62, v47);
          return 1;
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v58));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v31, v32);
        (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8))(v26, v24);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v62, v51);
        return 0;
      }
    }
    int8x16_t v55 = v26;
    uint64_t v61 = v24;
    uint64_t v36 = *v28;
    swift_bridgeObjectRetain();
    *uint64_t v28 = static Array._allocateUninitialized(_:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = *(uint64_t *)((char *)v2 + v34);
    uint64_t v38 = v62;
    uint64_t v39 = v51;
    uint64_t v40 = (uint64_t)v53;
    uint64_t v41 = v52;
    uint64_t v42 = v58;
    if (v37 == 0x8000000000000000)
    {
LABEL_17:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v42));
      Publishers.TimeGroupingStrategy.scheduler.getter(v57, v40);
      uint64_t v43 = (uint64_t)v2 + *(void *)(*v2 + 144);
      outlined init with copy of Subscription((uint64_t)v66, (uint64_t)v64);
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = v2;
      v44[3] = v36;
      outlined init with take of Subscription(v64, (uint64_t)(v44 + 4));
      v44[9] = v27;
      uint64_t v45 = *(void (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(v41 + 56);
      swift_retain();
      v45(v43, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:), v44, v39, v41);
      swift_release();
      int v46 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v46(v40, v39);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      (*(void (**)(char *))(*(void *)(v61 - 8) + 8))(v55);
      v46((uint64_t)v38, v39);
      return 0;
    }
    if ((v37 & 0x8000000000000000) == 0)
    {
      if (v37)
      {
        *(uint64_t *)((char *)v2 + v34) = v37 - 1;
        goto LABEL_17;
      }
LABEL_21:
      __break(1u);
      return result;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  outlined destroy of SubscriptionStatus((uint64_t)v64);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v16));
  return 0;
}

uint64_t type metadata accessor for Publishers.TimeGroupingStrategy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for Publishers.TimeGroupingStrategy(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = v7 + v10;
  uint64_t v23 = *(void *)(v9 + 64);
  unint64_t v13 = ((v7 + v10) & ~v10) + v23;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v15 = a2[v14];
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_13;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_13:
        int v18 = (v17 | ((v15 - 2) << (8 * v14))) + 2;
        unsigned int v19 = v17 + 2;
        if (v14 >= 4) {
          unsigned int v15 = v19;
        }
        else {
          unsigned int v15 = v18;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
  unint64_t v20 = (unint64_t)&a2[v12] & v11;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))((v12 + a1) & v11, v20, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(void *)((v23 + 7 + ((v12 + a1) & v11)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v23 + 7 + v20) & 0xFFFFFFFFFFFFFFF8);
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
  }
  *(unsigned char *)(a1 + v14) = v21;
  return a1;
}

uint64_t Publisher<>.values.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *int v17 = v8;
  v17[1] = partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next();
  return MEMORY[0x1F4188148](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()()
{
  unint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in AsyncPublisher.Iterator.next();
  v2[2] = *(void *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](AsyncPublisher.Iterator.Inner.next(), 0, 0);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t type metadata completion function for Publishers.ReplaceError.Inner()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t withTaskCancellationHandler<A>(handler:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v15 = (char *)&async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)
      + async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:);
  unint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *unint64_t v13 = v6;
  v13[1] = partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t type metadata completion function for Publishers.Throttle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.seconds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.milliseconds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for Publishers.Throttle.Inner()
{
  uint64_t result = type metadata accessor for Publishers.Throttle.Inner.State();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Subscription.request(_:) in conformance Result<A, B>.Publisher.Inner<A1>(uint64_t a1)
{
  return Result.Publisher.Inner.request(_:)(a1);
}

uint64_t Result.Publisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v27 = *(void **)v1;
  uint64_t v3 = v27[11];
  uint64_t v4 = v27[12];
  uint64_t v26 = v27[13];
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v23 = (char *)&v22 - v6;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188790](v12);
  int v18 = (char *)&v22 - v17;
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_4:
  uint64_t v19 = v1 + v27[14];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, v19, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v19, v11, v7);
  swift_endAccess();
  uint64_t v20 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v1 + *(void *)(*(void *)v1 + 120), v4, v26);
  char v21 = v23;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v23, 1, 1, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 56))(v21, v4, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v4);
}

uint64_t type metadata completion function for Publishers.Reduce()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.prefix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5[0] = 0;
    v5[1] = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
    return Publisher.output<A>(in:)((uint64_t)v5, a2, a3);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

uint64_t Publisher.output<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = xmmword_18C0BBE70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v11 = v14;
  if (v14 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v15;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a2);
    return Publishers.Output.init(upstream:range:)((uint64_t)v9, v11, v12, a2, a3);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t Publishers.Output.init(upstream:range:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if ((a3 | a2) < 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, result, a4);
    unint64_t result = type metadata accessor for Publishers.Output();
    uint64_t v8 = (void *)(a5 + *(int *)(result + 36));
    *uint64_t v8 = a2;
    v8[1] = a3;
  }
  return result;
}

uint64_t type metadata accessor for Publishers.Output()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Scan.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for Result.Publisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Result.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a1;
  uint64_t v42 = a4;
  uint64_t v37 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v5);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  long long v13 = (char *)&v34 - v12;
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v16 = type metadata accessor for Subscribers.Completion();
  uint64_t v35 = *(void *)(v16 - 8);
  uint64_t v36 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v34 - v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&v34 - v24, v40, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = v42;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v15);
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, v27);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v19, v22, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 56))(v19, a3, v27);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v15);
  }
  else
  {
    uint64_t v29 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v13, v25, v8);
    v43[0] = v8;
    v43[1] = v15;
    uint64_t v30 = v42;
    void v43[2] = a3;
    uint64_t v44 = v42;
    uint64_t v31 = type metadata accessor for Result.Publisher.Inner();
    uint64_t v32 = (uint64_t)v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v38, v41, a3);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v11, v13, v8);
    swift_allocObject();
    uint64_t v33 = Result.Publisher.Inner.init(downstream:output:)(v32, (uint64_t)v11);
    uint64_t v44 = v31;
    uint64_t v45 = &protocol witness table for Result<A, B>.Publisher.Inner<A1>;
    v43[0] = v33;
    (*(void (**)(void *, uint64_t, uint64_t))(v30 + 40))(v43, a3, v30);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  }
}

uint64_t type metadata accessor for Result.Publisher.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Result.Publisher.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 96);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v2 + *(void *)(v3 + 112);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v14, v4);
  v11((uint64_t)v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 120), v15);
  return v2;
}

uint64_t type metadata completion function for Optional.Publisher()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void storeEnumTagSinglePayload for Just(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.first(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.FirstWhere, a5);
}

uint64_t type metadata accessor for Publishers.IgnoreOutput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Throttle.Inner.State(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v16 = v3;
  uint64_t v17 = v1;
  uint64_t v18 = v2;
  uint64_t v4 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v5 = v4;
  if (v6 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v4 - 8);
    uint64_t v8 = swift_checkMetadataState();
    uint64_t v5 = v8;
    if (v9 <= 0x3F)
    {
      uint64_t v10 = *(void *)(v8 - 8) + 64;
      swift_getTupleTypeLayout2();
      uint64_t v20 = &v19;
      *(void *)&long long v15 = v7 + 64;
      *((void *)&v15 + 1) = v10;
      *(void *)&long long v16 = "(";
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Subscribers.Completion();
      uint64_t v11 = type metadata accessor for Optional();
      uint64_t v5 = v11;
      if (v12 <= 0x3F)
      {
        *((void *)&v16 + 1) = *(void *)(v11 - 8) + 64;
        swift_getTupleTypeLayout();
        uint64_t v21 = &v14;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v5;
}

uint64_t PublishedSubject.Conduit.__deallocating_deinit()
{
  uint64_t v0 = PublishedSubject.Conduit.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t PublishedSubject.Conduit.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 208)), -1, -1);
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 216)), -1, -1);
  uint64_t v1 = ConduitBase.init()();
  swift_release();
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 192);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  void v6[3] = a2;
  void v6[4] = v2;
  v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator;
  long long v6[2] = a1;
  return MEMORY[0x1F4188298](AsyncPublisher.Iterator.next(), 0, 0);
}

uint64_t type metadata completion function for Publishers.Share()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Catch.Inner(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _OWORD *))
{
  uint64_t v10 = MEMORY[0x1E4FBADC0] + 64;
  uint64_t v11 = MEMORY[0x1E4FBADA0] + 64;
  long long v8 = a1[6];
  v9[0] = a1[5];
  long long v4 = a1[7];
  v9[1] = v8;
  v9[2] = v4;
  uint64_t result = a4(319, v9);
  if (v6 <= 0x3F)
  {
    uint64_t v12 = *(void *)(result - 8) + 64;
    uint64_t result = swift_checkMetadataState();
    if (v7 <= 0x3F)
    {
      uint64_t v13 = *(void *)(result - 8) + 64;
      uint64_t v14 = MEMORY[0x1E4FBC858] + 64;
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CurrentValueSubject.__deallocating_deinit()
{
  CurrentValueSubject.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void *CurrentValueSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)((char *)v0 + *(void *)(*v0 + 144));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v11);
      uint64_t v7 = v12;
      uint64_t v6 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18C13C4B0](v1[2], -1, -1);
  long long v8 = (char *)v1 + *(void *)(*v1 + 120);
  type metadata accessor for Subscribers.Completion();
  uint64_t v9 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  outlined consume of ConduitList<A, Never><A>(*(void *)((char *)v1 + *(void *)(*v1 + 128)), *((unsigned char *)v1 + *(void *)(*v1 + 128) + 8));
  (*(void (**)(char *))(*(void *)(*(void *)(v2 + 80) - 8) + 8))((char *)v1 + *(void *)(*v1 + 136));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t AsyncPublisher.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(void *)(v1 + 16);
  v4[3] = *(void *)(v1 + 24);
  v4[4] = v2;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  *uint64_t v5 = v0;
  v5[1] = AsyncPublisher.Iterator.next();
  uint64_t v7 = v0[2];
  return v9(v7, (uint64_t)partial apply for closure #1 in AsyncPublisher.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncPublisher.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t AsyncPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for AsyncPublisher.Iterator.Inner.State();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v24, v1 + 32, v8);
  uint64_t v10 = (uint64_t *)(v1 + 24);
  if (v25 < 2)
  {
    swift_beginAccess();
    a1 = *v10;
    swift_beginAccess();
    uint64_t v11 = type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    if (MEMORY[0x18C13B800](a1, v11))
    {
      uint64_t v19 = v8;
      uint64_t v20 = v9;
      uint64_t v10 = (uint64_t *)(AssociatedTypeWitness - 8);
      uint64_t v9 = v21 + 32;
      uint64_t v8 = 4;
      while (1)
      {
        uint64_t v12 = v8 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v14 = *(void *)(a1 + 8 * v8);
          BOOL v15 = __OFADD__(v12, 1);
          uint64_t v7 = (os_unfair_lock_s *)(v8 - 3);
          if (v15) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v14 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v15 = __OFADD__(v12, 1);
          uint64_t v7 = (os_unfair_lock_s *)(v8 - 3);
          if (v15)
          {
LABEL_10:
            __break(1u);
            goto LABEL_11;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
        (*(void (**)(void, char *, uint64_t))v9)(*(void *)(*(void *)(v14 + 64) + 40), v6, v4);
        swift_continuation_resume();
        ++v8;
        if (v7 == (os_unfair_lock_s *)MEMORY[0x18C13B800](a1, v11))
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = v19;
          goto LABEL_13;
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v20 = v9;
  swift_beginAccess();
  uint64_t v23 = *v10;
  type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_getWitnessTable();
  if ((Collection.isEmpty.getter() & 1) == 0)
  {
    swift_beginAccess();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    uint64_t v16 = v22;
    os_unfair_lock_unlock(v7);
    uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v6, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v21 + 32))(*(void *)(*(void *)(v16 + 64) + 40), v6, v4);
    swift_continuation_resume();
LABEL_13:
    uint64_t v9 = v20;
LABEL_14:
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v24, v8);
    return 0;
  }
  os_unfair_lock_unlock(v7);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncPublisher<A>.Iterator.Inner(void *a1)
{
}

void AsyncPublisher.Iterator.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncPublisher.Iterator.Inner.State();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v12, v1 + 32, v4);
  uint64_t v6 = v13;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v12, v4);
  if (v6)
  {
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v1 + 32, v12, v4);
    swift_endAccess();
    uint64_t v9 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = 0;
    os_unfair_lock_unlock(v3);
    if (v9)
    {
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, v10, v11);
    }
  }
}

uint64_t withUnsafeContinuation<A>(isolation:_:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withUnsafeContinuation<A>(isolation:_:);
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 8);
  return v1();
}

void partial apply for closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
  closure #1 in AsyncPublisher.Iterator.Inner.next()(a1, v1);
}

void closure #1 in AsyncPublisher.Iterator.Inner.next()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - v7;
  uint64_t v9 = *(os_unfair_lock_s **)(a2 + 16);
  os_unfair_lock_lock(v9);
  swift_beginAccess();
  uint64_t v10 = type metadata accessor for AsyncPublisher.Iterator.Inner.State();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(&v21, a2 + 32, v10);
  if (!v22)
  {
    v17[1] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v11 = *(void *)(a2 + 72);
    unint64_t v12 = 0x8000000000000000;
    if (v11 != 0x8000000000000000)
    {
      if (v11 < 0)
      {
        __break(1u);
        return;
      }
      BOOL v13 = __OFADD__(v11, 1);
      unint64_t v14 = v11 + 1;
      if (!v13) {
        unint64_t v12 = v14;
      }
    }
    *(void *)(a2 + 72) = v12;
    os_unfair_lock_unlock(v9);
    return;
  }
  if (v22 == 1)
  {
    os_unfair_lock_unlock(v9);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(a1 + 64) + 40), v8, v5);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of Subscription(&v21, (uint64_t)v18);
    v17[4] = a1;
    swift_beginAccess();
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    uint64_t v15 = v19;
    uint64_t v16 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(1, v15, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
}

uint64_t type metadata accessor for AsyncPublisher.Iterator.Inner.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.CompactMap(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.Inner(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      int v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t Publishers.Scan.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 + 32);
  v29[0] = *(void *)(v15 + 16);
  uint64_t v14 = v29[0];
  v29[1] = v5;
  void v29[2] = v17;
  v29[3] = v16;
  void v29[4] = v18;
  uint64_t v19 = type metadata accessor for Publishers.Scan.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, a3);
  uint64_t v20 = *(int *)(a2 + 44);
  long long v21 = (uint64_t *)(v28 + *(int *)(a2 + 48));
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v28 + v20, v5);
  swift_allocObject();
  v29[0] = Publishers.Scan.Inner.init(downstream:nextPartialResult:initialResult:)((uint64_t)v13, v22, v23, (uint64_t)v9);
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v14, v19, v16, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Scan.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.Scan.Inner.init(downstream:nextPartialResult:initialResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*v4 + 96) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 120), a1);
  uint64_t v9 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 128));
  *uint64_t v9 = a2;
  v9[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v8 + 88) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 136), a4);
  return v4;
}

uint64_t type metadata completion function for Publishers.SubscribeOn.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t)type metadata accessor for Publishers.DropWhile.Inner, (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:), (uint64_t)&protocol conformance descriptor for Publishers.DropWhile<A>.Inner<A1>);
}

uint64_t PublishedSubject.__deallocating_deinit()
{
  PublishedSubject.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *PublishedSubject.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 112));
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Subscription(v5, (uint64_t)v9);
      uint64_t v7 = v10;
      uint64_t v6 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18C13C4B0](v1[2], -1, -1);
  outlined consume of ConduitList<A, Never><A>(v1[3], *((unsigned char *)v1 + 32));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))((uint64_t)v1 + *(void *)(*v1 + 104));
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

unint64_t lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier;
  if (!lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier);
  }
  return result;
}

uint64_t Publishers.RemoveDuplicates.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.RemoveDuplicates.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.RemoveDuplicates.Inner.deinit()
{
  uint64_t v0 = FilterProducer.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 304);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t *FilterProducer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136), *(void *)(v1 + 112));
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 144), *(void *)(v1 + 80));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 160);
  uint64_t v3 = type metadata accessor for FilterProducer.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t getEnumTagSinglePayload for AnySubscriber(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t Just.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v11 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v11 - 8);
  unsigned int v13 = &v15[-v12];
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = a4;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = v5;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *))partial apply for closure #1 in Just.tryMap<A>(_:), (uint64_t)&v15[-v12]);
  return Result.Publisher.init(_:)((uint64_t)v13, a5);
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v11[-v8];
  a1(v5);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Result();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t partial apply for closure #1 in Just.tryMap<A>(_:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))(*(void *)(v1 + 48));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t dispatch thunk of AnySubscriberBase.receive(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t Publisher.retry(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, a2);
  uint64_t result = type metadata accessor for Publishers.Retry();
  uint64_t v11 = a3 + *(int *)(result + 36);
  *(void *)uint64_t v11 = a1;
  *(unsigned char *)(v11 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for Publishers.Retry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Delay()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Optional.Publisher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t Publisher.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, long long a15, long long a16, uint64_t a17)
{
  uint64_t v79 = a6;
  uint64_t v73 = a4;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v67 = a1;
  uint64_t v81 = a8;
  long long v80 = a14;
  long long v77 = a16;
  long long v78 = a15;
  uint64_t v75 = a5;
  uint64_t v76 = a17;
  uint64_t v61 = a9;
  uint64_t v63 = a10;
  uint64_t v74 = a13;
  uint64_t v72 = *(void *)(a13 - 8);
  uint64_t v64 = a11;
  uint64_t v68 = a12;
  uint64_t v18 = MEMORY[0x1F4188790](a10);
  uint64_t v71 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  char v65 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v21);
  uint64_t v27 = (char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v25 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v25);
  uint64_t v31 = (char *)&v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v31;
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v29);
  uint64_t v36 = (char *)&v57 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v36;
  uint64_t v60 = v37;
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v34);
  uint64_t v41 = (char *)&v57 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v42;
  MEMORY[0x1F4188790](v39);
  uint64_t v44 = (char *)&v57 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v45 + 16))(v44, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v67, a7);
  uint64_t v47 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v69, v61);
  uint64_t v48 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v70, v63);
  uint64_t v49 = v27;
  uint64_t v50 = (uint64_t)v27;
  uint64_t v51 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v49, v73, v64);
  uint64_t v52 = (uint64_t)v65;
  uint64_t v53 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v75, v68);
  uint64_t v54 = (uint64_t)v71;
  uint64_t v55 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v79, v74);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, (uint64_t)v41, (uint64_t)v59, (uint64_t)v58, v50, v52, v54, v62, v81, v60, v47, v48, v51, v53, v55);
}

uint64_t initializeWithCopy for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 48);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 16;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 16))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 48);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 16;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v39, v40);
  uint64_t v41 = *(void *)(a3[8] - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 16))((*(void *)(v36 + 48) + *(unsigned __int8 *)(v41 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (*(void *)(v36 + 48) + *(unsigned __int8 *)(v41 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return a1;
}

uint64_t Publishers.Merge7.init(_:_:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9, a1, a8);
  uint64_t v17 = (int *)type metadata accessor for Publishers.Merge7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v17[33], a2, a10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(a9 + v17[34], a3, a11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(a9 + v17[35], a4, a12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9 + v17[36], a5, a13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9 + v17[37], a6, a14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(a9 + v17[38], a7, a15);
}

uint64_t type metadata accessor for Publishers.Merge7()
{
  return swift_getGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for AnySubscriber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Publisher.ignoreOutput()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Throttle<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Throttle.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Throttle.Inner.receive(subscription:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v64 = a1;
  uint64_t v60 = (void *)*v1;
  unint64_t v3 = (_UNKNOWN **)v60[14];
  uint64_t v4 = v60[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v59 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v49 - v6;
  uint64_t v8 = v60[12];
  uint64_t v9 = v60[13];
  uint64_t v10 = v60[15];
  char v65 = (void *)v60[10];
  uint64_t v7 = v65;
  uint64_t v66 = v4;
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  uint64_t v69 = v3;
  uint64_t v70 = v10;
  uint64_t v11 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v54 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v63 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v61 = (char *)&v49 - v18;
  uint64_t v62 = v10;
  char v65 = v7;
  uint64_t v66 = v4;
  uint64_t v56 = v4;
  uint64_t v57 = v3;
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  uint64_t v69 = v3;
  uint64_t v70 = v10;
  uint64_t v19 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v49 - v21;
  uint64_t v23 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v23);
  uint64_t v24 = (char *)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v24, v11);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    os_unfair_lock_unlock(v23);
    uint64_t v25 = v64[3];
    uint64_t v26 = v64[4];
    __swift_project_boxed_opaque_existential_1(v64, v25);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v26 + 8) + 8))(v25);
  }
  else
  {
    uint64_t v28 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    os_unfair_lock_t v52 = v23;
    uint64_t v29 = &v17[v28];
    uint64_t v53 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v17, v19);
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v61, v29, v8);
    char v65 = (void *)v19;
    uint64_t v66 = v8;
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t v68 = type metadata accessor for Optional();
    uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    uint64_t v31 = TupleTypeMetadata[12];
    uint64_t v32 = v19;
    uint64_t v50 = v19;
    uint64_t v33 = v54;
    uint64_t v34 = &v54[v31];
    uint64_t v35 = TupleTypeMetadata[16];
    uint64_t v36 = v22;
    uint64_t v51 = v22;
    uint64_t v37 = (uint64_t)&v54[v35];
    uint64_t v49 = &v54[TupleTypeMetadata[20]];
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v36, v32);
    uint64_t v38 = v34;
    uint64_t v39 = v61;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v38, v61, v8);
    outlined init with copy of Subscription((uint64_t)v64, v37);
    uint64_t v40 = type metadata accessor for Subscribers.Completion();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v49, 1, 1, v40);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v24, v33, v11);
    swift_endAccess();
    uint64_t v41 = v50;
    uint64_t v42 = v51;
    uint64_t v43 = v55;
    ((void (*)(uint64_t))v57[5])(v56);
    uint64_t v44 = (char *)v2 + *(void *)(*v2 + 168);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v58 + 40))(v44, v43, v59);
    swift_endAccess();
    *((unsigned char *)v2 + *(void *)(*v2 + 184)) = 1;
    os_unfair_lock_unlock(v52);
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v68 = (uint64_t)v60;
    uint64_t v69 = &protocol witness table for Publishers.Throttle<A, B>.Inner<A1>;
    char v65 = v2;
    uint64_t v45 = v62;
    uint64_t v46 = *(void (**)(void **, uint64_t, uint64_t))(v62 + 40);
    swift_retain();
    v46(&v65, v8, v45);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
    os_unfair_recursive_lock_unlock();
    uint64_t v47 = v64[3];
    uint64_t v48 = v64[4];
    __swift_project_boxed_opaque_existential_1(v64, v47);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 24))(0x8000000000000000, v47, v48);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v42, v41);
  }
}

unsigned __int8 *assignWithTake for Publishers.Throttle.Inner.State(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v61 = AssociatedTypeWitness;
    uint64_t v8 = *(void *)(v60 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v59 = v8 + v10;
    uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v54 = *(void *)(v9 + 64);
    uint64_t v62 = v54 + v12 + ((v8 + v10) & ~v10) + 1;
    uint64_t v53 = *(void *)(v11 + 64);
    size_t v13 = (v62 & ~v12) + v53;
    uint64_t v63 = *(void *)(a3 + 32);
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = v15;
    uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v56 = v15;
    uint64_t v57 = v14;
    unsigned int v18 = *(_DWORD *)(v15 + 84);
    if (v18) {
      uint64_t v19 = *(void *)(v16 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v16 + 64) + 1;
    }
    unsigned int v55 = v18;
    if (v18 >= 2) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v19 + 1;
    }
    if (v20 + ((v17 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v17) > v13) {
      size_t v13 = v20 + ((v17 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v17);
    }
    unsigned int v21 = a1[v13];
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a1;
          if (v13 < 4) {
            goto LABEL_22;
          }
          goto LABEL_23;
        case 2:
          int v24 = *(unsigned __int16 *)a1;
          if (v13 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v13 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 4:
          int v24 = *(_DWORD *)a1;
          if (v13 < 4) {
LABEL_22:
          }
            v24 |= v22 << (8 * v13);
LABEL_23:
          unsigned int v21 = v24 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v25 = ~v10;
    uint64_t v58 = ~v12;
    size_t __n = v20;
    uint64_t v52 = ~v17;
    if (v21 != 1)
    {
      if (!v21)
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v60 + 8))(a1, v61);
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&a1[v59] & v25, v6);
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v62] & v58, v63);
      }
      goto LABEL_46;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v60 + 8))(a1, v61);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&a1[v59] & v25, v6);
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v62] & v58, v63);
    unint64_t v26 = (v53 + ((unint64_t)&a1[v62] & v58) + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_destroy_boxed_opaque_existential_1(v26);
    uint64_t v27 = (unsigned __int16 *)((v26 + v17 + 40) & v52);
    if (v55 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int16 *))(v56 + 48))(v27) >= 2) {
        goto LABEL_46;
      }
    }
    else if (*((unsigned char *)v27 + v19))
    {
      int v28 = (*((unsigned __int8 *)v27 + v19) - 1) << (8 * v19);
      if (v19 > 3) {
        int v28 = 0;
      }
      if (v19)
      {
        int v29 = v19 <= 3 ? v19 : 4;
        switch(v29)
        {
          case 2:
            int v30 = *v27;
            break;
          case 3:
            int v30 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)v27;
            break;
          default:
            int v30 = *(unsigned __int8 *)v27;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      if ((v30 | v28) != 0xFFFFFFFF)
      {
LABEL_46:
        unsigned int v31 = a2[v13];
        unsigned int v32 = v31 - 2;
        if (v31 >= 2)
        {
          if (v13 <= 3) {
            uint64_t v33 = v13;
          }
          else {
            uint64_t v33 = 4;
          }
          switch(v33)
          {
            case 1:
              int v34 = *a2;
              if (v13 >= 4) {
                goto LABEL_62;
              }
              goto LABEL_56;
            case 2:
              int v34 = *(unsigned __int16 *)a2;
              if (v13 >= 4) {
                goto LABEL_62;
              }
              goto LABEL_56;
            case 3:
              int v34 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v13 < 4) {
                goto LABEL_56;
              }
              goto LABEL_62;
            case 4:
              int v34 = *(_DWORD *)a2;
              if (v13 < 4)
              {
LABEL_56:
                unsigned int v31 = (v34 | (v32 << (8 * v13))) + 2;
                break;
              }
LABEL_62:
              unsigned int v31 = v34 + 2;
              if (v31 == 1) {
                goto LABEL_63;
              }
              goto LABEL_58;
            default:
              break;
          }
        }
        if (v31 != 1)
        {
LABEL_58:
          if (v31)
          {
            memcpy(a1, a2, v13 + 1);
          }
          else
          {
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v60 + 32))(a1, a2, v61);
            unint64_t v35 = (unint64_t)&a1[v59] & v25;
            unint64_t v36 = (unint64_t)&a2[v59] & v25;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(v35, v36, v6);
            *(unsigned char *)(v35 + v54) = *(unsigned char *)(v36 + v54);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&a1[v62] & v58, (unint64_t)&a2[v62] & v58, v63);
            a1[v13] = 0;
          }
          return a1;
        }
LABEL_63:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v60 + 32))(a1, a2, v61);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v59] & v25, (unint64_t)&a2[v59] & v25, v6);
        *(unsigned char *)(((unint64_t)&a1[v59] & v25) + v54) = *(unsigned char *)(((unint64_t)&a2[v59] & v25) + v54);
        unint64_t v37 = (unint64_t)&a2[v62] & v58;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&a1[v62] & v58, v37, v63);
        unint64_t v38 = (v53 + 7 + ((unint64_t)&a1[v62] & v58)) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v39 = (v53 + 7 + v37) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v40 = *(void *)(v39 + 32);
        long long v41 = *(_OWORD *)(v39 + 16);
        *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
        *(_OWORD *)(v38 + 16) = v41;
        *(void *)(v38 + 32) = v40;
        uint64_t v42 = (void *)((v38 + v17 + 40) & v52);
        uint64_t v43 = (unsigned __int8 *)((v39 + v17 + 40) & v52);
        if (v55 > 1)
        {
          uint64_t v46 = v56;
          uint64_t v45 = v57;
          size_t v44 = v19;
          if ((*(unsigned int (**)(unsigned __int8 *, void, uint64_t))(v56 + 48))(v43, v55, v57) >= 2)
          {
LABEL_84:
            memcpy(v42, v43, __n);
            goto LABEL_85;
          }
        }
        else
        {
          size_t v44 = v19;
          uint64_t v46 = v56;
          uint64_t v45 = v57;
          if (v43[v19])
          {
            int v47 = (v43[v19] - 1) << (8 * v19);
            if (v19 > 3) {
              int v47 = 0;
            }
            if (v19)
            {
              int v48 = v19 <= 3 ? v19 : 4;
              switch(v48)
              {
                case 2:
                  int v49 = *(unsigned __int16 *)v43;
                  break;
                case 3:
                  int v49 = *(unsigned __int16 *)v43 | (v43[2] << 16);
                  break;
                case 4:
                  int v49 = *(_DWORD *)v43;
                  break;
                default:
                  int v49 = *v43;
                  break;
              }
            }
            else
            {
              int v49 = 0;
            }
            if ((v49 | v47) != 0xFFFFFFFF) {
              goto LABEL_84;
            }
          }
        }
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45))
        {
          memcpy(v42, v43, v44);
          if (v55 > 1) {
            goto LABEL_85;
          }
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v46 + 32))(v42, v43, v45);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
          if (v55 > 1)
          {
LABEL_85:
            a1[v13] = 1;
            return a1;
          }
        }
        *((unsigned char *)v42 + v44) = 0;
        goto LABEL_85;
      }
    }
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v56 + 48))(v27, 1, v57)) {
      (*(void (**)(unsigned __int16 *, uint64_t))(v56 + 8))(v27, v57);
    }
    goto LABEL_46;
  }
  return a1;
}

uint64_t initializeWithCopy for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 48) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v5);
  *(unsigned char *)(*(void *)(v9 + 48) + v12) = *(unsigned char *)(*(void *)(v9 + 48) + v13);
  return a1;
}

void one-time initialization function for singleton()
{
  qword_1EB3ACFE8 = (uint64_t)&unk_1ED991A98;
  unk_1EB3ACFF0 = &protocol witness table for Subscriptions._EmptySubscription;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v1 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v0);
    static Subscriptions._EmptySubscription.singleton = v1;
  }
}

void partial apply for closure #1 in Publishers.Delay.Inner.receive(completion:)()
{
}

void Publishers.Delay.Inner.scheduledReceive(completion:)()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v6);
  outlined init with copy of SubscriptionStatus((uint64_t)&v6, (uint64_t)v5);
  unsigned int v3 = v5[40];
  outlined destroy of SubscriptionStatus((uint64_t)v5);
  outlined destroy of SubscriptionStatus((uint64_t)&v6);
  if (v3 > 1)
  {
    os_unfair_lock_unlock(v1);
  }
  else
  {
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    MEMORY[0x1F4188790](v4);
    Publishers.Delay.Inner.applyDownstream<A>(work:)((void (*)(uint64_t))partial apply for closure #1 in Publishers.Delay.Inner.scheduledReceive(completion:));
  }
}

void partial apply for closure #1 in Publishers.Delay.Inner.receive(_:)()
{
}

void Publishers.Delay.Inner.scheduledReceive(_:)()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v17);
  outlined init with copy of SubscriptionStatus((uint64_t)v17, (uint64_t)v15);
  unsigned int v3 = v16;
  outlined destroy of SubscriptionStatus((uint64_t)v15);
  outlined destroy of SubscriptionStatus((uint64_t)v17);
  if (v3 > 1)
  {
LABEL_11:
    os_unfair_lock_unlock(v1);
    return;
  }
  os_unfair_lock_unlock(v1);
  MEMORY[0x1F4188790](v4);
  Publishers.Delay.Inner.applyDownstream<A>(work:)((void (*)(uint64_t))partial apply for closure #1 in Publishers.Delay.Inner.scheduledReceive(_:));
  uint64_t v5 = v14;
  if (v14 == 0x8000000000000000) {
    goto LABEL_5;
  }
  if (v14 < 0)
  {
    __break(1u);
    return;
  }
  if (v14)
  {
LABEL_5:
    os_unfair_lock_lock(v1);
    outlined init with copy of SubscriptionStatus(v2, (uint64_t)v17);
    outlined init with copy of SubscriptionStatus((uint64_t)v17, (uint64_t)v15);
    if (v16 > 1u)
    {
      uint64_t v10 = 0;
      long long v9 = 0u;
      long long v8 = 0u;
      outlined destroy of SubscriptionStatus((uint64_t)v15);
    }
    else
    {
      outlined init with take of Subscription(v15, (uint64_t)&v8);
    }
    outlined destroy of SubscriptionStatus((uint64_t)v17);
    if (*((void *)&v9 + 1))
    {
      outlined init with take of Subscription(&v8, (uint64_t)v11);
      os_unfair_lock_unlock(v1);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v5, v6, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v8);
    goto LABEL_11;
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Delay<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Delay.Inner.receive(subscription:)(a1);
}

uint64_t Publishers.Delay.Inner.receive(subscription:)(void *a1)
{
  unsigned int v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)&v9);
  if (v12 == 2
    && (int8x16_t v5 = vorrq_s8(v10, v11),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v9)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v9);
    char v12 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v9, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    return Publishers.Delay.Inner.applyDownstream<A>(work:)((void (*)(uint64_t))partial apply for closure #1 in Publishers.Delay.Inner.receive(subscription:));
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
  }
}

uint64_t Publishers.Delay.Inner.applyDownstream<A>(work:)(void (*a1)(uint64_t))
{
  os_unfair_recursive_lock_lock_with_options();
  a1(v1 + *(void *)(*(void *)v1 + 136));

  return os_unfair_recursive_lock_unlock();
}

uint64_t partial apply for closure #1 in Publishers.Delay.Inner.receive(subscription:)(uint64_t a1)
{
  return closure #1 in Publishers.Delay.Inner.receive(subscription:)(a1, v1);
}

uint64_t closure #1 in Publishers.Delay.Inner.receive(subscription:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  long long v8 = &protocol witness table for Publishers.Delay<A, B>.Inner<A1>;
  v6[0] = a2;
  uint64_t v2 = *(void *)(v7 + 120);
  unsigned int v3 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 40);
  uint64_t v4 = *(void *)(v7 + 96);
  swift_retain();
  v3(v6, v4, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t partial apply for closure #1 in Publishers.Delay.Inner.scheduledReceive(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v1[7] + 48))(v1[8], v1[4]);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in Publishers.Delay.Inner.scheduledReceive(completion:)()
{
  return (*(uint64_t (**)(void, void))(v0[7] + 56))(v0[8], v0[4]);
}

void storeEnumTagSinglePayload for Publishers.Autoconnect.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          unsigned int v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((v7 & 0x80000000) != 0)
          {
            size_t v20 = *(void (**)(unint64_t))(v6 + 56);
            v20(((unint64_t)v18 + v9 + 8) & ~v9);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *unsigned int v18 = v19;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t Publishers.Sequence.init(sequence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t type metadata completion function for CombineLatest4Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for AbstractZip()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return v0;
}

uint64_t type metadata completion function for Publishers.Merge7()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                swift_initStructMetadata();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t Publisher.merge<A, B, C>(with:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11)
{
  uint64_t v42 = a9;
  uint64_t v43 = a8;
  uint64_t v39 = a7;
  uint64_t v40 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  long long v41 = a10;
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v38 = a11;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  int v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  unsigned int v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v20);
  uint64_t v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  int v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v36, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v37, a6);
  uint64_t v33 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v40, v39);
  return Publishers.Merge4.init(_:_:_:_:)((uint64_t)v29, (uint64_t)v27, (uint64_t)v22, (uint64_t)v17, a4, a5, a6, v33, v42);
}

uint64_t initializeWithCopy for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 48);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 16;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 16))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 48);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 16;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v39, v40);
  uint64_t v41 = *(void *)(v36 + 48);
  uint64_t v42 = *(void *)(a3[8] - 8);
  uint64_t v43 = v42 + 16;
  uint64_t v44 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = (v45 + v39) & ~v44;
  uint64_t v47 = (v45 + v40) & ~v44;
  (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v46, v47);
  uint64_t v48 = *(void *)(a3[9] - 8);
  (*(void (**)(unint64_t, unint64_t))(v48 + 16))((*(void *)(v43 + 48) + *(unsigned __int8 *)(v48 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80), (*(void *)(v43 + 48) + *(unsigned __int8 *)(v48 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
  return a1;
}

uint64_t Publishers.Merge4.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  uint64_t v16 = (int *)type metadata accessor for Publishers.Merge4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + v16[21], a2, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v16[22], a3, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v16[23], a4, a8);
}

uint64_t type metadata accessor for Publishers.Merge4()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.Buffer(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFD) {
    unsigned int v7 = 2147483645;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFD)
    {
      unint64_t v16 = *(void *)((result + v6 + 23) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      unsigned int v17 = v16 + 1;
      unsigned int v18 = v16 - 1;
      if (v17 >= 3) {
        return v18;
      }
      else {
        return 0;
      }
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t Publisher.combineLatest<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11)
{
  uint64_t v42 = a9;
  uint64_t v43 = a8;
  uint64_t v39 = a7;
  uint64_t v40 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  long long v41 = a10;
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v38 = a11;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  unsigned int v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v20);
  uint64_t v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v36, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v37, a6);
  uint64_t v33 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v40, v39);
  return Publishers.CombineLatest4.init(_:_:_:_:)((uint64_t)v29, (uint64_t)v27, (uint64_t)v22, (uint64_t)v17, a4, a5, a6, v33, v42);
}

uint64_t Publishers.CombineLatest4.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  uint64_t v16 = (int *)type metadata accessor for Publishers.CombineLatest4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + v16[21], a2, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v16[22], a3, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v16[23], a4, a8);
}

uint64_t type metadata accessor for Publishers.CombineLatest4()
{
  return swift_getGenericMetadata();
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Throttle.Inner.request(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v61 = a1;
  unint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v57 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v67 = (char *)&v55 - v9;
  uint64_t v68 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (char *)&v55 - v10;
  uint64_t v11 = v3[15];
  uint64_t v12 = v3[12];
  uint64_t v64 = swift_getAssociatedTypeWitness();
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v62 = (char *)&v55 - v13;
  uint64_t v15 = v3[13];
  uint64_t v70 = v3[10];
  uint64_t v14 = v70;
  uint64_t v71 = v5;
  uint64_t v72 = v12;
  uint64_t v73 = v15;
  uint64_t v74 = v4;
  uint64_t v75 = v11;
  uint64_t v16 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v70 = v14;
  uint64_t v71 = v5;
  uint64_t v56 = v5;
  uint64_t v72 = v12;
  uint64_t v73 = v15;
  uint64_t v66 = v4;
  uint64_t v74 = v4;
  uint64_t v75 = v11;
  uint64_t v20 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v69 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v55 - v21;
  uint64_t v23 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v23);
  uint64_t v24 = (char *)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v24, v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
LABEL_11:
    os_unfair_lock_unlock(v23);
    return;
  }
  os_unfair_lock_t v55 = v23;
  uint64_t v70 = v20;
  uint64_t v71 = v12;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  uint64_t v26 = &v19[TupleTypeMetadata[12]];
  uint64_t v27 = (uint64_t)&v19[TupleTypeMetadata[16]];
  uint64_t v28 = &v19[TupleTypeMetadata[20]];
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v22, v19, v20);
  uint64_t v29 = type metadata accessor for Subscribers.Completion();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29) != 1)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v22, v20);
    uint64_t v39 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v28, v39);
    __swift_destroy_boxed_opaque_existential_1(v27);
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v26, v12);
    uint64_t v23 = v55;
    goto LABEL_11;
  }
  uint64_t v30 = v22;
  uint64_t v31 = v20;
  uint64_t v32 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v32 - 8) + 8))(v28, v32);
  __swift_destroy_boxed_opaque_existential_1(v27);
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v26, v12);
  uint64_t v33 = *v2;
  uint64_t v34 = *(void *)(*v2 + 152);
  uint64_t v35 = *(void *)((char *)v2 + v34);
  unint64_t v36 = 0x8000000000000000;
  uint64_t v37 = v66;
  uint64_t v38 = v68;
  if (v35 != 0x8000000000000000)
  {
    if (v61 != 0x8000000000000000)
    {
      if ((v35 | v61) < 0)
      {
        __break(1u);
        goto LABEL_23;
      }
      unint64_t v36 = v35 + v61;
      if (!__OFADD__(v35, v61))
      {
        if ((v36 & 0x8000000000000000) == 0) {
          goto LABEL_13;
        }
LABEL_23:
        __break(1u);
        return;
      }
      unint64_t v36 = 0x8000000000000000;
    }
LABEL_13:
    *(void *)((char *)v2 + v34) = v36;
    uint64_t v33 = *v2;
  }
  uint64_t v40 = (char *)v2 + *(void *)(v33 + 160);
  swift_beginAccess();
  uint64_t v42 = v62;
  uint64_t v41 = v63;
  uint64_t v43 = v65;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v62, v40, v65);
  LODWORD(v40) = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v64 - 8) + 48))(v42, 1);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  if v40 == 1 || (uint64_t v44 = *(void *)(*v2 + 176), (*((unsigned char *)v2 + v44)))
  {
    os_unfair_lock_unlock(v55);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v30, v31);
  }
  else
  {
    *((unsigned char *)v2 + v44) = 1;
    uint64_t v64 = (uint64_t)v30;
    uint64_t v65 = v31;
    uint64_t v45 = &v30[*(int *)(v31 + 68)];
    uint64_t v46 = v56;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v60, v45, v56);
    uint64_t v47 = v37;
    (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v46, v37);
    uint64_t v48 = (char *)v2 + *(void *)(*v2 + 168);
    swift_beginAccess();
    uint64_t v49 = v58;
    uint64_t v50 = (uint64_t)v57;
    uint64_t v51 = AssociatedTypeWitness;
    uint64_t v62 = *(char **)(v58 + 16);
    ((void (*)(char *, char *, uint64_t))v62)(v57, v48, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    char v52 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v63 = *(void *)(v49 + 8);
    ((void (*)(uint64_t, uint64_t))v63)(v50, v51);
    if (v52)
    {
      os_unfair_lock_unlock(v55);
      swift_retain();
      uint64_t v53 = v60;
      Scheduler.schedule(_:)((uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v46, v47);
      swift_release();
      ((void (*)(char *, uint64_t))v63)(v67, v51);
    }
    else
    {
      ((void (*)(uint64_t, char *, uint64_t))v62)(v50, v48, v51);
      os_unfair_lock_unlock(v55);
      swift_retain();
      uint64_t v53 = v60;
      Scheduler.schedule(after:_:)(v50, (uint64_t)partial apply for closure #2 in Publishers.Throttle.Inner.receive(_:), (uint64_t)v2, v46, v47);
      swift_release();
      uint64_t v54 = (void (*)(char *, uint64_t))v63;
      ((void (*)(uint64_t, uint64_t))v63)(v50, v51);
      v54(v67, v51);
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v46);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v64, v65);
  }
}

void protocol witness for Subscription.request(_:) in conformance AbstractZip<A, B, C>(uint64_t a1)
{
}

void AbstractZip.request(_:)(uint64_t a1)
{
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_4:
  uint64_t v3 = *(void *)(*(void *)v1 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = *(void **)v1;
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 192)))
  {
    uint64_t v5 = v4[25];
    uint64_t v6 = *(void *)(v1 + v5);
    unint64_t v7 = 0x8000000000000000;
    if (v6 != 0x8000000000000000)
    {
      if (a1 == 0x8000000000000000) {
        goto LABEL_22;
      }
      if (((v6 | a1) & 0x8000000000000000) == 0)
      {
        unint64_t v7 = v6 + a1;
        if (!__OFADD__(v6, a1))
        {
          if ((v7 & 0x8000000000000000) == 0) {
            goto LABEL_22;
          }
LABEL_29:
          __break(1u);
          return;
        }
        unint64_t v7 = 0x8000000000000000;
LABEL_22:
        *(void *)(v1 + v5) = v7;
        goto LABEL_23;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_23:
    uint64_t v15 = *(os_unfair_lock_s **)(v1 + v3);
    os_unfair_lock_unlock(v15);
    return;
  }
  if (*(unsigned char *)(v1 + v4[17]) & 1) != 0 || (*(unsigned char *)(v1 + v4[18]) & 1) != 0 || (*(unsigned char *)(v1 + v4[19])) {
    goto LABEL_23;
  }
  uint64_t v8 = (uint64_t *)(v1 + v4[16]);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = *(os_unfair_lock_s **)(v1 + v3);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10);
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    uint64_t v12 = v9 + 32;
    do
    {
      outlined init with copy of Subscription?(v12, (uint64_t)v16);
      uint64_t v14 = v17;
      if (v17)
      {
        uint64_t v13 = v18;
        __swift_project_boxed_opaque_existential_1(v16, v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(a1, v14, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      }
      else
      {
        outlined destroy of Subscription?((uint64_t)v16);
      }
      v12 += 40;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
}

uint64_t destroy for Publishers.Merge6(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(v11 + 56);
  uint64_t v14 = *(void *)(a2[5] - 8);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  (*(void (**)(unint64_t))(v14 + 8))(v16);
  uint64_t v17 = *(void *)(v15 + 56);
  uint64_t v18 = *(void *)(a2[6] - 8);
  uint64_t v19 = v18 + 8;
  unint64_t v20 = (v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  (*(void (**)(unint64_t))(v18 + 8))(v20);
  uint64_t v21 = *(void *)(a2[7] - 8);
  uint64_t v22 = *(uint64_t (**)(unint64_t))(v21 + 8);
  unint64_t v23 = (v20 + *(void *)(v19 + 56) + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);

  return v22(v23);
}

uint64_t AnySubscriberBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 136) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 152), a1);
  return v2;
}

uint64_t type metadata completion function for AnySubscriberBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for AnySubscriber()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void Publishers.FlatMap.Outer.cancel()()
{
  unint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*v0 + 232);
  if (*((unsigned char *)v0 + v2))
  {
    os_unfair_lock_unlock(v1);
    return;
  }
  *((unsigned char *)v0 + v2) = 1;
  uint64_t v3 = (void *)((char *)v0 + *(void *)(*v0 + 184));
  swift_beginAccess();
  unint64_t v4 = *v3;
  *uint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t)(v0 + 3);
  swift_beginAccess();
  outlined init with copy of Any?(v5, (uint64_t)v28, &demangling cache variable for type metadata for Subscription?);
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v25, v5);
  swift_endAccess();
  os_unfair_lock_unlock(v1);
  int64_t v6 = 0;
  unint64_t v7 = v4 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v4 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  if (!v10) {
    goto LABEL_12;
  }
LABEL_10:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v15 = v14 | (v6 << 6);
  while (2)
  {
    uint64_t v16 = *(void *)(v4 + 56);
    *(void *)&long long v22 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
    outlined init with copy of Subscription(v16 + 40 * v15, (uint64_t)&v22 + 8);
    while (1)
    {
      outlined init with take of (key: Int, value: Subscription)?((uint64_t)&v22, (uint64_t)&v25);
      if (!v27)
      {
        swift_release();
        outlined init with copy of Any?((uint64_t)v28, (uint64_t)&v25, &demangling cache variable for type metadata for Subscription?);
        uint64_t v20 = *((void *)&v26 + 1);
        if (*((void *)&v26 + 1))
        {
          uint64_t v21 = v27;
          __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
          (*(void (**)(uint64_t))(*(void *)(v21 + 8) + 8))(v20);
          outlined destroy of Subscription?((uint64_t)v28);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)v28);
          outlined destroy of Subscription?((uint64_t)&v25);
        }
        return;
      }
      outlined init with take of Subscription((long long *)((char *)&v25 + 8), (uint64_t)&v22);
      uint64_t v13 = *((void *)&v23 + 1);
      uint64_t v12 = v24;
      __swift_project_boxed_opaque_existential_1(&v22, *((uint64_t *)&v23 + 1));
      (*(void (**)(uint64_t))(*(void *)(v12 + 8) + 8))(v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
      if (v10) {
        goto LABEL_10;
      }
LABEL_12:
      int64_t v17 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      if (v17 < v11)
      {
        unint64_t v18 = *(void *)(v7 + 8 * v17);
        if (v18) {
          goto LABEL_15;
        }
        int64_t v19 = v6 + 2;
        ++v6;
        if (v17 + 1 < v11)
        {
          unint64_t v18 = *(void *)(v7 + 8 * v19);
          if (v18) {
            goto LABEL_18;
          }
          int64_t v6 = v17 + 1;
          if (v17 + 2 < v11)
          {
            unint64_t v18 = *(void *)(v7 + 8 * (v17 + 2));
            if (v18)
            {
              v17 += 2;
              goto LABEL_15;
            }
            int64_t v19 = v17 + 3;
            int64_t v6 = v17 + 2;
            if (v17 + 3 < v11) {
              break;
            }
          }
        }
      }
LABEL_29:
      unint64_t v10 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v19);
    if (v18)
    {
LABEL_18:
      int64_t v17 = v19;
LABEL_15:
      unint64_t v10 = (v18 - 1) & v18;
      unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
      int64_t v6 = v17;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v11)
    {
      int64_t v6 = v11 - 1;
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_15;
    }
  }
LABEL_35:
  __break(1u);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.HandleEvents<A>.Inner<A1>()
{
}

void Publishers.HandleEvents.Inner.cancel()()
{
  unint64_t v1 = (os_unfair_lock_s *)v0[8];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void (*)(void))v0[15];
  if (v2)
  {
    swift_retain();
    os_unfair_lock_unlock(v1);
    v2();
    os_unfair_lock_lock(v1);
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v2);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v0 + 2), (uint64_t)&v10);
  if (v13)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v10, (uint64_t)v14);
    uint64_t v3 = v0[9];
    v0[9] = 0;
    v0[10] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    uint64_t v4 = v0[11];
    v0[11] = 0;
    v0[12] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v4);
    uint64_t v5 = v0[13];
    v0[13] = 0;
    v0[14] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v5);
    uint64_t v6 = v0[15];
    v0[15] = 0;
    v0[16] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v6);
    uint64_t v7 = v0[17];
    v0[17] = 0;
    v0[18] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
    uint64_t v10 = 1;
    long long v11 = 0u;
    long long v12 = 0u;
    char v13 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, (uint64_t)(v0 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.FlatMap<A, B>.Outer<A1>()
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReplaceError<A>.Inner<A1>()
{
}

void Publishers.ReplaceError.Inner.cancel()()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 128);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t initializeWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v38 = *(void *)(v6 + 48);
  uint64_t v9 = v8;
  int v35 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v8;
  uint64_t v12 = *(_DWORD *)(v10 + 80);
  uint64_t v13 = (*(_DWORD *)(v10 + 80) | v35) & 0xF8 | 7u;
  uint64_t v14 = v38 + v13;
  uint64_t v39 = a1;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (unsigned __int8 *)((v14 + a2) & ~v13);
  uint64_t v17 = ~v12;
  uint64_t v18 = *(void *)(v11 + 64) + v12;
  uint64_t v19 = v18 & ~v12;
  uint64_t v36 = *(void *)(v10 + 64);
  if (((v19 + v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v19 + v36) {
    unint64_t v20 = v19 + v36;
  }
  else {
    unint64_t v20 = ((v19 + v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v21 = v16[v20];
  if (v21 >= 2)
  {
    if (v20 <= 3) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v16;
        goto LABEL_13;
      case 2:
        int v23 = *(unsigned __int16 *)v16;
        goto LABEL_13;
      case 3:
        int v23 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_13;
      case 4:
        int v23 = *(_DWORD *)v16;
LABEL_13:
        int v24 = (v23 | ((v21 - 2) << (8 * v20))) + 2;
        unsigned int v25 = v23 + 2;
        if (v20 >= 4) {
          unsigned int v21 = v25;
        }
        else {
          unsigned int v21 = v24;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 16))(v15, v16, v7);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))((v18 + v15) & v17, (unint64_t)&v16[v18] & v17, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(void *)((v36 + 7 + ((v18 + v15) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v36
                                                                                     + 7
                                                                                     + ((unint64_t)&v16[v18] & v17)) & 0xFFFFFFFFFFFFFFF8);
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
  }
  *(unsigned char *)(v15 + v20) = v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v20 + v29 + 1;
  uint64_t v31 = (void *)((v30 + v15) & ~v29);
  uint64_t v32 = (const void *)((unint64_t)&v16[v30] & ~v29);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v32, 1, v27))
  {
    if (*(_DWORD *)(v28 + 84)) {
      size_t v33 = *(void *)(v28 + 64);
    }
    else {
      size_t v33 = *(void *)(v28 + 64) + 1;
    }
    memcpy(v31, v32, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v31, v32, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
  }
  return v39;
}

uint64_t Publishers.SwitchToLatest.Outer.__deallocating_deinit()
{
  uint64_t v0 = Publishers.SwitchToLatest.Outer.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.SwitchToLatest.Outer.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 168)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 136));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 144));
  return v0;
}

uint64_t ObservableObjectPublisher.Inner.__deallocating_deinit()
{
  uint64_t v0 = ObservableObjectPublisher.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *ObservableObjectPublisher.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  swift_weakDestroy();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t type metadata completion function for Publishers.DropWhile.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.FirstWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Cancellable.cancel() in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.cancel()();
}

uint64_t ObservableObjectPublisher.Inner.cancel()()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v1);
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 160)) = 2;
  os_unfair_lock_unlock(v1);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ObservableObjectPublisher.remove(_:)(v0);
    return swift_release();
  }
  return result;
}

void ObservableObjectPublisher.remove(_:)(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock);
  os_unfair_lock_lock(v4);
  uint64_t v5 = v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a1);
  swift_endAccess();
  swift_release();
  if ((*(void *)v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)v5 + 16);
  }
  os_unfair_lock_unlock(v4);
  if (!v6)
  {
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier);
    if (v7)
    {
      if (one-time initialization token for lock != -1) {
        swift_once();
      }
      os_unfair_lock_lock((os_unfair_lock_t)static ObservableObjectTable.lock);
      if (one-time initialization token for contents != -1) {
        swift_once();
      }
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      uint64_t v10 = v7;
      outlined init with take of ObservableObjectTable.Storage((uint64_t)v9, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v8);
      swift_endAccess();
      outlined destroy of ObservableObjectTable.Storage((uint64_t)v8);
      swift_release();
      os_unfair_lock_unlock((os_unfair_lock_t)static ObservableObjectTable.lock);
    }
  }
}

unint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = __CocoaSet.contains(_:)();
    swift_release();
    if (v5)
    {
      unint64_t v6 = specialized Set._Variant._migrateToNative(_:removing:)(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(v3 + 48);
  if (*(void *)(v10 + 8 * v9) != a1)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v1;
  uint64_t v15 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
    uint64_t v13 = v15;
  }
  unint64_t v6 = *(void *)(*(void *)(v13 + 48) + 8 * v9);
  specialized _NativeSet._delete(at:)(v9);
  *uint64_t v1 = v15;
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(v3 + 48) + 16 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Share.__deallocating_deinit()
{
  Publishers.Share.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.Share.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104));
  return v0;
}

uint64_t initializeWithCopy for AnySubscriber(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t Publishers.DropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t), uint64_t a7)
{
  v28[1] = a7;
  uint64_t v9 = v7;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 24);
  v29[0] = *(void *)(v16 + 16);
  uint64_t v18 = v29[0];
  v29[1] = v19;
  void v29[2] = v17;
  v29[3] = v20;
  uint64_t v22 = v21(0, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  int v23 = (uint64_t *)(v9 + *(int *)(a2 + 36));
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  swift_allocObject();
  swift_retain();
  v29[0] = a6(v15, v24, v25);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v18, v22, v17, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.DropWhile.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *Publishers.DropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 2;
  uint64_t v8 = (uint64_t *)((char *)v3 + *(void *)(v7 + 128));
  *uint64_t v8 = 0;
  v8[1] = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 136)) = 1;
  uint64_t v9 = *(void *)(*v3 + 144);
  Swift::UInt v10 = (_DWORD *)swift_slowAlloc();
  *Swift::UInt v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 120), a1);
  unint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 128));
  uint64_t v12 = *v11;
  *unint64_t v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t AnySubscriberBox.receive(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 48))(a1, *(void *)(*(void *)v1 + 136));
}

uint64_t type metadata completion function for Publishers.Delay.Inner()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F) {
          return swift_initClassMetadata2();
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t Publisher.merge<A, B, C, D, E>(with:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v53 = a7;
  uint64_t v55 = a1;
  uint64_t v68 = a8;
  long long v66 = a13;
  long long v67 = a12;
  uint64_t v64 = a14;
  uint64_t v65 = a5;
  uint64_t v62 = a4;
  uint64_t v63 = a15;
  uint64_t v60 = a3;
  uint64_t v61 = a11;
  uint64_t v16 = *(void *)(a11 - 8);
  uint64_t v58 = a2;
  uint64_t v59 = v16;
  uint64_t v54 = a9;
  uint64_t v56 = a10;
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  int v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v21);
  uint64_t v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v26);
  size_t v33 = (char *)&v50 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v34;
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v31);
  uint64_t v38 = (char *)&v50 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v39;
  MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)&v50 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v42 + 16))(v41, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v38, v55, a6);
  uint64_t v44 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v58, v53);
  uint64_t v45 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v60, v54);
  uint64_t v46 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v62, v56);
  uint64_t v47 = (uint64_t)v57;
  uint64_t v48 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v65, v61);
  return Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v41, (uint64_t)v38, (uint64_t)v33, (uint64_t)v28, (uint64_t)v23, v47, v52, v51, v68, v44, v45, v46, v48);
}

uint64_t Publishers.Merge6.init(_:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9, a1, a7);
  uint64_t v16 = (int *)type metadata accessor for Publishers.Merge6();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v16[29], a2, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v16[30], a3, a10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(a9 + v16[31], a4, a11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(a9 + v16[32], a5, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9 + v16[33], a6, a13);
}

uint64_t type metadata accessor for Publishers.Merge6()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Drop.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Drop.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t *Publishers.Drop.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 120)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 128));
  return v0;
}

void partial apply for closure #1 in Publishers.Timeout.Inner.receive(completion:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  Publishers.Timeout.Inner.scheduledReceive(completion:)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

void Publishers.Timeout.Inner.scheduledReceive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v6);
  if (v9 == 1)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a1, *(void *)(v3 + 96));
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t type metadata completion function for Publishers.Output()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Retry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Merge6()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.IgnoreOutput.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Sequence(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t type metadata completion function for Publishers.Buffer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Publishers.TimeGroupingStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v10 + 80);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);

  return v8((v5 + a1 + v7) & ~v7, AssociatedTypeWitness);
}

uint64_t Publishers.Timeout.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Timeout.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.Timeout.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  MEMORY[0x18C13C4B0](*((void *)v0 + 3), -1, -1);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 144)]);
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 152)];
  uint64_t v3 = *(void *)(v1 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(&v0[*(void *)(*(void *)v0 + 160)], v3);
  uint64_t v5 = &v0[*(void *)(*(void *)v0 + 168)];
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(void *)&v0[*(void *)(*(void *)v0 + 176)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 184)]);
  swift_release();
  return v0;
}

uint64_t Publisher.merge<A, B, C, D, E, F, G>(with:_:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16, long long a17, long long a18, uint64_t a19, uint64_t a20)
{
  uint64_t v86 = a7;
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  uint64_t v75 = a4;
  uint64_t v77 = a3;
  uint64_t v73 = a2;
  uint64_t v71 = a1;
  uint64_t v88 = a8;
  long long v87 = a16;
  long long v84 = a18;
  long long v85 = a17;
  uint64_t v82 = a20;
  uint64_t v83 = a19;
  uint64_t v65 = a11;
  uint64_t v67 = a12;
  uint64_t v79 = a15;
  uint64_t v78 = *(void *)(a15 - 8);
  uint64_t v69 = a13;
  uint64_t v74 = a14;
  uint64_t v20 = MEMORY[0x1F4188790](a12);
  uint64_t v76 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v70 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v23);
  uint64_t v68 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  long long v66 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v30);
  uint64_t v36 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v36;
  uint64_t v37 = *(void *)(a10 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v34);
  uint64_t v40 = (char *)&v58 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v40;
  uint64_t v61 = a9;
  uint64_t v41 = *(void *)(a9 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v38);
  uint64_t v44 = (char *)&v58 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v44;
  uint64_t v63 = v45;
  MEMORY[0x1F4188790](v42);
  uint64_t v64 = (uint64_t)&v58 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v47 + 16))();
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v44, v71, a9);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v73, a10);
  uint64_t v48 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v77, v65);
  uint64_t v49 = (uint64_t)v66;
  uint64_t v50 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v66, v75, v67);
  uint64_t v51 = (uint64_t)v68;
  uint64_t v52 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v68, v80, v69);
  uint64_t v53 = (uint64_t)v70;
  uint64_t v54 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v81, v74);
  uint64_t v55 = v79;
  uint64_t v56 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v76, v86, v79);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)(v64, (uint64_t)v62, (uint64_t)v60, (uint64_t)v59, v49, v51, v53, v56, v88, v63, v61, a10, v48, v50, v52, v54, v55);
}

uint64_t Publishers.Merge8.init(_:_:_:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9, a1, a10);
  uint64_t v18 = (int *)type metadata accessor for Publishers.Merge8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(a9 + v18[37], a2, a11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(a9 + v18[38], a3, a12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9 + v18[39], a4, a13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9 + v18[40], a5, a14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a15 - 8) + 32))(a9 + v18[41], a6, a15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32))(a9 + v18[42], a7, a16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a17 - 8) + 32))(a9 + v18[43], a8, a17);
}

uint64_t type metadata accessor for Publishers.Merge8()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Merge4.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  int v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 4);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  void v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[7], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[8], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[5], v13, a2[9], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge8<A, B, C, D, E, F, G, H>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge8.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Merge8.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  int v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 8);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  void v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[11], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[12], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[5], v13, a2[13], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[6], v13, a2[14], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(5, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[7], v13, a2[15], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(6, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[8], v13, a2[16], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(7, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[9], v13, a2[17], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t type metadata completion function for Publishers.Output.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Merge8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                uint64_t result = swift_checkMetadataState();
                if (v8 <= 0x3F)
                {
                  swift_initStructMetadata();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F4187C88](a1, a2, a3, a5, a6);
}

uint64_t type metadata completion function for Publishers.Retry.Inner.State()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.Timeout.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    *(uint64_t *)((char *)v1 + *(void *)(*v1 + 200)) = Publishers.Timeout.Inner.timeoutClock()();
    swift_release();
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.Timeout<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 120);
    int v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
    return os_unfair_recursive_lock_unlock();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

void Publishers.Timeout.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v8);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v8);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v8, (uint64_t)v10);
    uint64_t v5 = *(void *)(*v1 + 208);
    if ((*((unsigned char *)v1 + v5) & 1) == 0)
    {
      *(void *)((char *)v1 + *(void *)(*v1 + 200)) = Publishers.Timeout.Inner.timeoutClock()();
      swift_release();
      *((unsigned char *)v1 + v5) = 1;
    }
    os_unfair_lock_unlock(v3);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

uint64_t Publishers.Timeout.Inner.timeoutClock()()
{
  void (*v15)(void *__return_ptr, char *, char *, char *, char *, uint64_t (*)(), void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  long long v30[2];
  void v31[5];

  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 88);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v22 - v6;
  uint64_t v27 = swift_checkMetadataState();
  uint64_t v29 = *(void *)(v27 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v27);
  char v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 40);
  uint64_t v28 = (char *)&v22 - v11;
  v10(v4, v3);
  uint64_t v12 = (char *)v1 + *(void *)(*v1 + 152);
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v13 = v23;
  (*(void (**)(uint64_t, uint64_t))(v3 + 48))(v4, v3);
  int8x16_t v14 = (char *)v1 + *(void *)(*v1 + 168);
  int8x16_t v15 = *(void (**)(void *__return_ptr, char *, char *, char *, char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v3 + 72);
  swift_retain();
  v15(v31, v9, v12, v13, v14, partial apply for closure #1 in Publishers.Timeout.Inner.timeoutClock(), v1, v4, v3);
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  outlined init with copy of Subscription((uint64_t)v31, (uint64_t)v30);
  char v16 = swift_allocObject();
  outlined init with take of Subscription(v30, v16 + 16);
  type metadata accessor for AnyCancellable();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = (_DWORD *)swift_slowAlloc();
  *uint64_t v18 = 0;
  *(void *)(v17 + 64) = v18;
  *(void *)(v17 + 16) = partial apply for closure #2 in Publishers.Timeout.Inner.timeoutClock();
  *(void *)(v17 + 24) = v16;
  *(unsigned char *)(v17 + 56) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v20 = v27;
  v19(v9, v27);
  v19(v28, v20);
  return v17;
}

uint64_t Publisher.timeout<A>(_:scheduler:options:customError:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v39 = a7;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v35 = a1;
  uint64_t v38 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  int8x16_t v14 = (char *)&v32 - v13;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v32 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v9;
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v35, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v36, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v14, v37, v34);
  uint64_t v29 = (uint64_t)v14;
  uint64_t v30 = v40;
  Publishers.Timeout.init(upstream:interval:scheduler:options:customError:)((uint64_t)v24, (uint64_t)v22, (uint64_t)v17, v29, v40, v41, v28, a6, v38);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v30);
}

uint64_t Publishers.Timeout.init(upstream:interval:scheduler:options:customError:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9, a1, a7);
  int8x16_t v14 = (int *)type metadata accessor for Publishers.Timeout();
  uint64_t v15 = a9 + v14[13];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v15, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v14[14], a3, a8);
  uint64_t v17 = a9 + v14[15];
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a4, v18);
  uint64_t v20 = (void *)(a9 + v14[16]);
  void *v20 = a5;
  v20[1] = a6;
  return result;
}

uint64_t type metadata accessor for Publishers.Timeout()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.Concatenate(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void destructiveInjectEnumTag for Publishers.TimeGroupingStrategy(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    unint64_t v10 = ((v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + *(void *)(v9 + 64);
    if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v10) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    unsigned int v12 = a2 - 2;
    if (v11 < 4)
    {
      unsigned int v13 = v12 >> (8 * v11);
      int v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    unint64_t v7 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + *(void *)(v6 + 64);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v7) {
      unint64_t v7 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    a1[v7] = a2;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest3(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

uint64_t type metadata completion function for Publishers.Retry.Inner()
{
  uint64_t result = type metadata accessor for Publishers.Retry.Inner.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.Retry.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Retry.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void Publishers.Retry.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v23 = *(void *)(*v1 + 80);
  long long v20 = *(_OWORD *)(v3 + 88);
  long long v24 = v20;
  uint64_t v25 = v4;
  uint64_t v5 = type metadata accessor for Publishers.Retry.Inner.State();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)&v20 - v7;
  unsigned int v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = (char *)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v10, v5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v8, 1, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v12 != 1)
  {
    uint64_t v13 = *v1;
    uint64_t v14 = *(void *)(*v1 + 152);
    uint64_t v15 = *(void *)((char *)v1 + v14);
    unint64_t v16 = 0x8000000000000000;
    if (v15 == 0x8000000000000000)
    {
LABEL_10:
      uint64_t v17 = (uint64_t)v1 + *(void *)(v13 + 128);
      swift_beginAccess();
      outlined init with copy of Subscription?(v17, (uint64_t)&v21);
      if (v22)
      {
        outlined init with take of Subscription(&v21, (uint64_t)&v23);
        os_unfair_lock_unlock(v9);
        uint64_t v18 = v25;
        uint64_t v19 = v26;
        __swift_project_boxed_opaque_existential_1(&v23, v25);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24))(a1, v18, v19);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
        return;
      }
      outlined destroy of Subscription?((uint64_t)&v21);
      goto LABEL_13;
    }
    if (a1 != 0x8000000000000000)
    {
      if ((v15 | a1) < 0)
      {
        __break(1u);
        goto LABEL_16;
      }
      unint64_t v16 = v15 + a1;
      if (!__OFADD__(v15, a1))
      {
        if ((v16 & 0x8000000000000000) == 0) {
          goto LABEL_9;
        }
LABEL_16:
        __break(1u);
        return;
      }
      unint64_t v16 = 0x8000000000000000;
    }
LABEL_9:
    *(void *)((char *)v1 + v14) = v16;
    uint64_t v13 = *v1;
    goto LABEL_10;
  }
LABEL_13:
  os_unfair_lock_unlock(v9);
}

void *Publishers.Retry.Inner.deinit()
{
  MEMORY[0x18C13C4B0](v0[2], -1, -1);
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 120);
  uint64_t v2 = type metadata accessor for Publishers.Retry.Inner.State();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 128));
  return v0;
}

uint64_t type metadata accessor for Publishers.Retry.Inner.State()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for Publishers.Retry.Inner.State(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(v5 + 64) + v10;
  uint64_t v18 = v8;
  if (v9 | v6)
  {
    if (v6 >= v9)
    {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(v5 + 48))(a1);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v12) & v11, v9, v7);
      if (result) {
        return result;
      }
    }
    goto LABEL_19;
  }
  uint64_t v14 = (v12 & ~v10) + *(void *)(v8 + 64);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_19;
  }
  int v15 = (*((unsigned __int8 *)a1 + v14) - 1) << (8 * v14);
  if (v14 > 3) {
    int v15 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v16 = v14 | v15;
  uint64_t result = (v16 + 1);
  if (v16 == -1)
  {
LABEL_19:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v17(((unint64_t)a1 + v12) & v11, v7);
  }
  return result;
}

void Publishers.Retry.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v62 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v61 = AssociatedTypeWitness;
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v64 = *(void *)(v7 - 8);
  uint64_t v65 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v63 = (char *)&v53 - v8;
  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v10 = *(void *)(v3 + 104);
  *(void *)&long long v70 = v5;
  *((void *)&v70 + 1) = v9;
  uint64_t v57 = v4;
  *(void *)&long long v71 = v4;
  *((void *)&v71 + 1) = v10;
  uint64_t v60 = v10;
  uint64_t v11 = type metadata accessor for Publishers.Retry.Inner.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v59 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v53 - v16;
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  long long v66 = (char *)&v53 - v20;
  uint64_t v69 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v68 = (char *)&v53 - v21;
  uint64_t v22 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v22);
  uint64_t v23 = (char *)v2 + *(void *)(*v2 + 120);
  swift_beginAccess();
  long long v24 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v58 = v23;
  v24(v17, v23, v11);
  uint64_t v67 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v17, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    os_unfair_lock_unlock(v22);
    return;
  }
  uint64_t v55 = v11;
  os_unfair_lock_t v56 = v22;
  uint64_t v27 = v9;
  unint64_t v28 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v17, v67);
  uint64_t v29 = v28;
  uint64_t v30 = v27;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v66, v29, v27);
  uint64_t v31 = v63;
  uint64_t v32 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v62, v65);
  if ((*(unsigned int (**)(char *, uint64_t))(*(void *)(v61 - 8) + 48))(v31, 1) == 1)
  {
    uint64_t v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v59, 1, 1, TupleTypeMetadata2);
    uint64_t v34 = v58;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v34, v33, v55);
    swift_endAccess();
    uint64_t v72 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v35 = (uint64_t)v2 + *(void *)(*v2 + 128);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v70, v35);
    swift_endAccess();
    os_unfair_lock_unlock(v56);
    uint64_t v36 = v66;
    (*(void (**)(uint64_t, uint64_t))(v60 + 56))(v32, v27);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v36, v27);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v67);
    return;
  }
  uint64_t v54 = v26;
  uint64_t v37 = v68;
  uint64_t v61 = v18;
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v38 = (uint64_t)v2 + *(void *)(*v2 + 128);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v70, v38);
  swift_endAccess();
  uint64_t v39 = (char *)v2 + *(void *)(*v2 + 136);
  uint64_t v40 = v56;
  uint64_t v41 = v67;
  uint64_t v42 = v57;
  if ((v39[8] & 1) == 0)
  {
    uint64_t v43 = *(void *)v39;
    if (!*(void *)v39)
    {
      uint64_t v49 = v59;
      uint64_t v50 = v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v59, 1, 1, TupleTypeMetadata2);
      uint64_t v51 = v58;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v51, v49, v55);
      swift_endAccess();
      os_unfair_lock_unlock(v40);
      uint64_t v52 = v66;
      (*(void (**)(uint64_t, uint64_t))(v60 + 56))(v32, v30);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v52, v30);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v41);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
      return;
    }
    BOOL v44 = __OFSUB__(v43, 1);
    uint64_t v45 = v43 - 1;
    if (v44)
    {
      __break(1u);
      return;
    }
    *(void *)uint64_t v39 = v45;
    v39[8] = 0;
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  os_unfair_lock_unlock(v40);
  uint64_t v46 = *(void *)(*v2 + 160);
  if (*((unsigned char *)v2 + v46) == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v30);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v37, v41);
    *((unsigned char *)v2 + *(void *)(*v2 + 168)) = 1;
  }
  else
  {
    uint64_t v47 = *(void *)(*v2 + 168);
    do
    {
      *((unsigned char *)v2 + v46) = 1;
      *((unsigned char *)v2 + v47) = 0;
      *(void *)&long long v70 = v2;
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v70, v41, v3, v42, WitnessTable);
      *((unsigned char *)v2 + v46) = 0;
    }
    while ((*((unsigned char *)v2 + v47) & 1) != 0);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v30);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v37, v41);
  }
}

void Publishers.Retry.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v35 = v4;
  uint64_t v32 = v3;
  uint64_t v33 = v5;
  long long v34 = *(_OWORD *)(v3 + 88);
  long long v36 = v34;
  uint64_t v37 = v5;
  uint64_t v6 = type metadata accessor for Publishers.Retry.Inner.State();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = v34;
  *(void *)&long long v34 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v14);
  uint64_t v15 = (char *)v1 + *(void *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v15, v6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v10, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    os_unfair_lock_unlock(v14);
    uint64_t v18 = a1[3];
    uint64_t v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v18);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
    return;
  }
  uint64_t v19 = a1;
  uint64_t v20 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v13, &v10[*(int *)(TupleTypeMetadata2 + 48)], v11);
  (*(void (**)(char *, void *))(*(v4 - 1) + 8))(v10, v4);
  uint64_t v21 = (uint64_t)v1 + *(void *)(*v1 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v21, (uint64_t)&v35);
  uint64_t v22 = v37;
  outlined destroy of Subscription?((uint64_t)&v35);
  if (v22)
  {
    os_unfair_lock_unlock(v14);
    uint64_t v24 = v19[3];
    uint64_t v23 = v19[4];
    __swift_project_boxed_opaque_existential_1(v19, v24);
    (*(void (**)(uint64_t))(*(void *)(v23 + 8) + 8))(v24);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)v19, (uint64_t)&v35);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v35, v21);
    swift_endAccess();
    uint64_t v25 = *(void *)((char *)v1 + *(void *)(*v1 + 152));
    uint64_t v26 = *(void *)(*v1 + 144);
    int v27 = *((unsigned __int8 *)v1 + v26);
    *((unsigned char *)v1 + v26) = 0;
    os_unfair_lock_unlock(v14);
    if (v27 == 1)
    {
      uint64_t v28 = v33;
      uint64_t v37 = v32;
      uint64_t v38 = &protocol witness table for Publishers.Retry<A>.Inner<A1>;
      uint64_t v35 = v1;
      uint64_t v29 = *(void (**)(void **, uint64_t, uint64_t))(v33 + 40);
      swift_retain();
      v29(&v35, v11, v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
    if (v25 == 0x8000000000000000) {
      goto LABEL_10;
    }
    if (v25 < 0)
    {
      __break(1u);
      return;
    }
    if (v25)
    {
LABEL_10:
      uint64_t v30 = v19[3];
      uint64_t v31 = v19[4];
      __swift_project_boxed_opaque_existential_1(v19, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 24))(v25, v30, v31);
    }
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
}

unsigned char *initializeWithCopy for Publishers.Retry.Inner.State(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

unsigned __int16 *assignWithTake for Publishers.Retry.Inner.State(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 40))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    uint64_t v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    uint64_t v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  uint64_t v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    uint64_t v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 32))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

uint64_t Publishers.Delay.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Delay.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

char *Publishers.Delay.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  MEMORY[0x18C13C4B0](*(void *)&v0[*(void *)(*(void *)v0 + 184)], -1, -1);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 136)]);
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 144)];
  uint64_t v3 = *(void *)(v1 + 88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  v5(v2, AssociatedTypeWitness);
  v5(&v0[*(void *)(*(void *)v0 + 152)], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(&v0[*(void *)(*(void *)v0 + 160)], v3);
  uint64_t v6 = &v0[*(void *)(*(void *)v0 + 168)];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 176)]);
  return v0;
}

uint64_t type metadata completion function for Publishers.Buffer.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata completion function for Zip2Inner()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Zip2Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publisher.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v24 = a7;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  int v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, a5);
  v24(v18, v16, a2, a3, a4, a5, a6);
  return swift_retain();
}

uint64_t Publisher.reduce<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Reduce.init(upstream:initial:nextPartialResult:));
}

uint64_t Publisher.append<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.Concatenate.init(prefix:suffix:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publisher.zip<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.Zip.init(_:_:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  int v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *int v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.allSatisfy(_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy, a5);
}

uint64_t partial apply for closure #2 in AsyncPublisher.Iterator.next()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 80) = 0;
  *(unsigned char *)(v8 + 88) = 2;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  return v8;
}

void AbstractZip.receive(completion:index:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 88);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(v5 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v11));
  uint64_t v12 = *v2;
  if ((*((unsigned char *)v2 + *(void *)(*v2 + 136)) & 1) == 0)
  {
    uint64_t v13 = *(void *)(v12 + 144);
    if ((*((unsigned char *)v2 + v13) & 1) == 0)
    {
      uint64_t v14 = *(void *)(v12 + 152);
      if ((*((unsigned char *)v2 + v14) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v10, 1, v6) != 1)
        {
          *((unsigned char *)v2 + v13) = 1;
          AbstractZip.lockedSendCompletion(completion:)(a1);
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
          return;
        }
        uint64_t v16 = *(void *)(*v2 + 160);
        uint64_t v17 = *(char **)((char *)v2 + v16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(uint64_t *)((char *)v2 + v16) = (uint64_t)v17;
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((a2 & 0x8000000000000000) == 0) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
          *(uint64_t *)((char *)v2 + v16) = (uint64_t)v17;
          if ((a2 & 0x8000000000000000) == 0)
          {
LABEL_10:
            if (*((void *)v17 + 2) > a2)
            {
              v17[a2 + 32] = 1;
              uint64_t v19 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
              if (*(void *)(v19 + 16) > a2)
              {
                if (*(void *)(*(void *)(v19 + 8 * a2 + 32) + 16))
                {
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v11));
                }
                else
                {
                  *((unsigned char *)v2 + v14) = 1;
                  AbstractZip.lockedSendCompletion(completion:)(a1);
                }
                return;
              }
LABEL_20:
              __break(1u);
              return;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        __break(1u);
        goto LABEL_19;
      }
    }
  }
  uint64_t v15 = *(os_unfair_lock_s **)((char *)v2 + v11);

  os_unfair_lock_unlock(v15);
}

void AbstractZip.Side.receive(completion:)(uint64_t a1)
{
  AbstractZip.receive(completion:index:)(a1, *v1);
}

uint64_t Publishers.MergeMany.merge(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  getContiguousArrayStorageType<A>(for:)(v5, v5);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, v5);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v8 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v8;
  uint64_t v9 = type metadata accessor for Array();
  swift_getWitnessTable();
  return Publishers.MergeMany.init<A>(_:)((uint64_t)&v11, v9, a3);
}

void storeEnumTagSinglePayload for Publishers.Sequence(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t Publishers.TryMap.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v24 = a1;
  uint64_t v25 = a5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = (uint64_t *)(v6 + *(int *)(v14 + 44));
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v10;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v24;
  *((void *)v18 + 7) = a2;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  uint64_t v21 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v25, v13, v10);
  size_t v22 = (uint64_t (**)(uint64_t))(v21 + *(int *)(type metadata accessor for Publishers.TryMap() + 44));
  *size_t v22 = partial apply for closure #1 in Publishers.TryMap.tryMap<A>(_:);
  v22[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t type metadata accessor for Publishers.Reduce()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  uint64_t v17 = a8(0, a5, a6, a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + *(int *)(v17 + 44), a2, a6);
  uint64_t v19 = (void *)(a9 + *(int *)(v17 + 48));
  void *v19 = a3;
  v19[1] = a4;
  return result;
}

uint64_t Publishers.Reduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.Reduce, a8);
}

void storeEnumTagSinglePayload for Publishers.Buffer(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFD) {
    unsigned int v8 = 2147483645;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_43:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFD)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 23] & 0xFFFFFFFFFFFFFFF8);
            if (a2 > 0x7FFFFFFD)
            {
              *uint64_t v18 = 0;
              v18[1] = 0;
              *(_DWORD *)uint64_t v18 = a2 - 2147483646;
            }
            else
            {
              *uint64_t v18 = a2 + 1;
            }
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1)
{
}

void Publishers.Buffer.Inner.receive(completion:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Subscribers.Completion();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unsigned int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v17 - v9;
  unsigned int v11 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v11);
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)v19);
  int v13 = v19[40];
  outlined destroy of SubscriptionStatus((uint64_t)v19);
  if (v13
    || (uint64_t v18 = a1,
        uint64_t v14 = (char *)v1 + *(void *)(*v1 + 192),
        swift_beginAccess(),
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v14, v4),
        uint64_t v15 = *(void *)(v3 - 8),
        int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v3),
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4),
        v16 != 1))
  {
    os_unfair_lock_unlock(v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v8, v18, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v3);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v14, v8, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    Publishers.Buffer.Inner.drain()();
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Zip<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Zip.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Zip.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.Zip();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t Publishers.Map.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v24 = a1;
  uint64_t v25 = a5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(v6 + *(int *)(v14 + 44));
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v10;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v24;
  *((void *)v18 + 7) = a2;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  uint64_t v21 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v25, v13, v10);
  size_t v22 = (uint64_t (**)(uint64_t))(v21 + *(int *)(type metadata accessor for Publishers.TryMap() + 44));
  *size_t v22 = partial apply for closure #1 in Publishers.Map.tryMap<A>(_:);
  v22[1] = v18;
  swift_retain();
  return swift_retain();
}

void storeEnumTagSinglePayload for Publishers.Concatenate(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

uint64_t *Publishers.Concatenate.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 168)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 136));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 144));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 152);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t Publishers.Concatenate.Inner.__deallocating_deinit()
{
  Publishers.Concatenate.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Concatenate<A, B>.Inner<A1>.SuffixSubscriber(uint64_t a1)
{
}

void Publishers.Concatenate.Inner.SuffixSubscriber.receive(completion:)(uint64_t a1)
{
}

void Publishers.Concatenate.Inner.suffixReceive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v8);
  int v6 = v11;
  outlined destroy of SubscriptionStatus((uint64_t)&v8);
  if (v6)
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    uint64_t v8 = 1;
    long long v9 = 0u;
    long long v10 = 0u;
    unsigned __int8 v11 = 2;
    uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 136);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, v7);
    swift_endAccess();
    uint64_t v8 = 1;
    long long v9 = 0u;
    long long v10 = 0u;
    unsigned __int8 v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a1, *(void *)(v3 + 96));
  }
}

uint64_t type metadata accessor for Publishers.AllSatisfy()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for Publishers.CombineLatest3(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        break;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        break;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        break;
      default:
        return;
    }
    return;
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (a2) {
        goto LABEL_27;
      }
      return;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (a2) {
        goto LABEL_27;
      }
      return;
    case 3:
LABEL_48:
      __break(1u);
      return;
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        uint64_t v28 = *(void (**)(char *))(v6 + 56);
        int v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        int v29 = (char *)((v30 + v15 + v16) & ~v16);
        uint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      int v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t Publishers.Multicast.__allocating_init(upstream:createSubject:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  Publishers.Multicast.init(upstream:createSubject:)(a1, a2, a3);
  return v6;
}

uint64_t Publishers.Multicast.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 112));
}

uint64_t Publishers.Multicast.createSubject.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 120));
  swift_retain();
  return v1;
}

uint64_t sub_18C01C0B4()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

char *Publishers.Multicast.Inner.__allocating_init(_:)(uint64_t a1)
{
  return Publishers.Multicast.Inner.init(_:)(a1);
}

uint64_t method lookup function for Publishers.Multicast(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Publishers.Multicast);
}

uint64_t dispatch thunk of Publishers.Multicast.__allocating_init(upstream:createSubject:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t Publishers.Multicast.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  char v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Multicast.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x73616369746C754DLL;
  a1[1] = 0xE900000000000074;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return 0x73616369746C754DLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Multicast<A, B>.Inner<A1>()
{
  return Publishers.Multicast.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Multicast<A, B>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t static Subscriptions.empty.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }

  return outlined init with copy of Subscription((uint64_t)&static Subscriptions._EmptySubscription.singleton, a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscriptions._EmptySubscription()
{
  return 0x7974706D45;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscriptions._EmptySubscription()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscriptions._EmptySubscription(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x7974706D45;
  a1[1] = 0xE500000000000000;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Subscriptions._EmptySubscription(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t AnyCancellable.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 56) = 0;
  return v4;
}

uint64_t AnyCancellable.deinit()
{
  AnyCancellable.cancel()();
  MEMORY[0x18C13C4B0](*(void *)(v0 + 64), -1, -1);
  outlined destroy of AnyCancellable.Storage(v0 + 16);
  return v0;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_18C01C70C()
{
  swift_release();

  return swift_deallocObject();
}

void AnyCancellable.hash(into:)()
{
  Hasher._combine(_:)(v0);
}

BOOL static AnyCancellable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::Int AnyCancellable.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyCancellable()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnyCancellable()
{
  Hasher._combine(_:)(*v0);
}

uint64_t Cancellable.store<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a2);
  uint64_t v10 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v9, a2, a4);
  v12[1] = v10;
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t Cancellable.store(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyCancellable();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  Swift::UInt v9 = swift_allocObject();
  AnyCancellable.init<A>(_:)((uint64_t)v8, a2, a3);
  specialized Set._Variant.insert(_:)(&v12, v9);
  return swift_release();
}

ValueMetadata *type metadata accessor for Subscriptions()
{
  return &type metadata for Subscriptions;
}

uint64_t method lookup function for AnyCancellable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnyCancellable);
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AnyCancellable.__allocating_init<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t assignWithCopy for SubscriptionStatus(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for SubscriptionStatus()
{
  return &type metadata for SubscriptionStatus;
}

uint64_t assignWithCopy for AnyCancellable.Storage(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (!v4)
    {
      swift_release();
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 40) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SubscriptionStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AnyCancellable.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AnyCancellable.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyCancellable.Storage()
{
  return &type metadata for AnyCancellable.Storage;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (*(void *)(*(void *)(v7 + 48) + 16 * v10) != a2)
    {
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_unknownObjectRelease();
    *(_OWORD *)a1 = *(_OWORD *)(*(void *)(*v3 + 48) + 16 * v10);
    swift_unknownObjectRetain();
    return 0;
  }
  else
  {
LABEL_5:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *unsigned int v3 = 0x8000000000000000;
    Swift::Int v13 = swift_unknownObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v13, a3, v10, isUniquelyReferenced_nonNull_native);
    *unsigned int v3 = v15;
    swift_bridgeObjectRelease();
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    return 1;
  }
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  Swift::UInt v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_12;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v9 > v8)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a3 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v12 = ~v11;
    while (*(void *)(*(void *)(v10 + 48) + 16 * a3) != v7)
    {
      a3 = (a3 + 1) & v12;
      if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
        goto LABEL_12;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v14 = (Swift::UInt *)(*(void *)(v13 + 48) + 16 * a3);
  *uint64_t v14 = v7;
  v14[1] = a2;
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (!v16)
  {
    *(void *)(v13 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  Swift::UInt v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *Swift::UInt v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    long long v25 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v25);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v11 + 8 * v20);
      }
      while (v24 == -1);
      unint64_t v12 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v12) = v25;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_unknownObjectRetain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    Swift::UInt v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *type metadata accessor for Subscriptions._EmptySubscription()
{
  return &unk_1ED991A98;
}

uint64_t Publishers.SubscribeOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.SubscribeOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.SubscribeOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_18C01D404()
{
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v1 = *((void *)v0 + 3);
  uint64_t v3 = *((void *)v0 + 4);
  uint64_t v4 = (int *)(type metadata accessor for Publishers.SubscribeOn() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v12 = *(void *)(*(void *)v4 + 64);
  uint64_t v13 = v3;
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(&v0[v5], v2);
  (*(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8))(&v0[v5 + v4[15]], v1);
  uint64_t v8 = &v0[v5 + v4[16]];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, AssociatedTypeWitness)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(&v0[(v5 + v12 + v7) & ~v7], v13);
  return swift_deallocObject();
}

char *Publishers.SubscribeOn.Inner.__allocating_init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.SubscribeOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

void Publishers.SubscribeOn.Inner.cancel()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)&v10);
  if (v13)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v2);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v10, (uint64_t)v14);
    uint64_t v10 = 1;
    long long v11 = 0u;
    long long v12 = 0u;
    char v13 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(v2);
    uint64_t v4 = (char *)v0 + *(void *)(*v0 + 152);
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of Subscription((uint64_t)v14, (uint64_t)&v10);
    uint64_t v6 = (void *)swift_allocObject();
    long long v6[2] = v1[10];
    uint64_t v7 = v1[11];
    void v6[3] = v7;
    void v6[4] = v1[12];
    uint64_t v6[5] = v1[13];
    uint64_t v8 = v1[14];
    v6[6] = v8;
    v6[7] = v1[15];
    v6[8] = v5;
    outlined init with take of Subscription((long long *)&v10, (uint64_t)(v6 + 9));
    unint64_t v9 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v8 + 56);
    swift_retain();
    v9(v4, partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel(), v6, v7, v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    swift_release();
  }
}

uint64_t closure #1 in Publishers.SubscribeOn.Inner.cancel()(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = *(os_unfair_lock_s **)(result + *(void *)(*(void *)result + 168));
    os_unfair_lock_lock(v4);
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v5);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v5);
    os_unfair_lock_unlock(v4);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
  return 0x6269726373627553;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
  return Publishers.SubscribeOn.Inner.customMirror.getter();
}

uint64_t Publishers.SubscribeOn.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.SubscribeOn<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void Publishers.SubscribeOn.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6269726373627553;
  a1[1] = 0xEB000000006E4F65;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.SubscribeOn<A, B>.Inner<A1>()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SubscribeOn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v27 - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 + 64) + v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v10 + 64) + 1;
  }
  uint64_t v14 = (v7 | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 <= 7
    && v13 + ((v12 + (v8 & ~(unint64_t)v7)) & ~v11) <= 0x18
    && ((v7 | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    size_t __n = v13;
    unint64_t v19 = ~(unint64_t)v7;
    uint64_t v20 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v27);
    uint64_t v28 = a1;
    unint64_t v21 = ((unint64_t)a1 + v8) & v19;
    unint64_t v22 = ((unint64_t)a2 + v8) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v21, v22, v4);
    BOOL v23 = (void *)((v21 + v12) & v20);
    uint64_t v24 = (const void *)((v22 + v12) & v20);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v24, 1, AssociatedTypeWitness))
    {
      memcpy(v23, v24, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v23, v24, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, AssociatedTypeWitness);
    }
    return v28;
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = v17 + ((v14 + 16) & ~v14);
    swift_retain();
  }
  return (uint64_t *)v18;
}

uint64_t assignWithCopy for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 24))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (void *)((v13 + v16 + v11) & ~v16);
  unint64_t v19 = (void *)((v17 + v12) & ~v16);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v11) = v20(v18, 1, AssociatedTypeWitness);
  int v21 = v20(v19, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v22 = *(_DWORD *)(v15 + 84);
    size_t v23 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v18, v19, AssociatedTypeWitness);
      return a1;
    }
    long long v25 = *(void (**)(void *, uint64_t))(v15 + 8);
    uint64_t v24 = v15 + 8;
    v25(v18, AssociatedTypeWitness);
    int v22 = *(_DWORD *)(v24 + 76);
    size_t v23 = *(void *)(v24 + 56);
  }
  if (v22) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v23 + 1;
  }
  memcpy(v18, v19, v26);
  return a1;
}

uint64_t initializeWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 32))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (void *)((v13 + v16 + v11) & ~v16);
  unint64_t v19 = (const void *)((v17 + v12) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v15 + 84)) {
      size_t v20 = *(void *)(v15 + 64);
    }
    else {
      size_t v20 = *(void *)(v15 + 64) + 1;
    }
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v18, v19, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t assignWithTake for Publishers.SubscribeOn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v7 + 40))(v11, v12, *(void *)(a3 + 24));
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (void *)((v13 + v16 + v11) & ~v16);
  unint64_t v19 = (void *)((v17 + v12) & ~v16);
  size_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v11) = v20(v18, 1, AssociatedTypeWitness);
  int v21 = v20(v19, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v22 = *(_DWORD *)(v15 + 84);
    size_t v23 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v18, v19, AssociatedTypeWitness);
      return a1;
    }
    long long v25 = *(void (**)(void *, uint64_t))(v15 + 8);
    uint64_t v24 = v15 + 8;
    v25(v18, AssociatedTypeWitness);
    int v22 = *(_DWORD *)(v24 + 76);
    size_t v23 = *(void *)(v24 + 56);
  }
  if (v22) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v23 + 1;
  }
  memcpy(v18, v19, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.SubscribeOn(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v34 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v34 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v10) {
    unsigned int v14 = v10;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v6 + 64) + v15;
  if (a2 <= v14) {
    goto LABEL_31;
  }
  uint64_t v21 = v19 + ((v16 + v17 + (v20 & ~v15)) & ~v17);
  char v22 = 8 * v21;
  if (v21 > 3) {
    goto LABEL_14;
  }
  unsigned int v24 = ((a2 - v14 + ~(-1 << v22)) >> v22) + 1;
  if (HIWORD(v24))
  {
    int v23 = *(_DWORD *)((char *)a1 + v21);
    if (!v23) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  if (v24 > 0xFF)
  {
    int v23 = *(unsigned __int16 *)((char *)a1 + v21);
    if (!*(unsigned __int16 *)((char *)a1 + v21)) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  if (v24 >= 2)
  {
LABEL_14:
    int v23 = *((unsigned __int8 *)a1 + v21);
    if (!*((unsigned char *)a1 + v21)) {
      goto LABEL_31;
    }
LABEL_21:
    int v25 = (v23 - 1) << v22;
    if (v21 > 3) {
      int v25 = 0;
    }
    if (v21)
    {
      if (v21 <= 3) {
        int v26 = v21;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *a1;
          break;
        case 3:
          int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)a1;
          break;
        default:
          int v27 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v27 = 0;
    }
    return v14 + (v27 | v25) + 1;
  }
LABEL_31:
  if (!v14) {
    return 0;
  }
  if (v7 == v14)
  {
    uint64_t v28 = v34;
    int v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    unint64_t v30 = a1;
    uint64_t v31 = v7;
  }
  else
  {
    unint64_t v30 = (unsigned __int16 *)(((unint64_t)a1 + v20) & ~v15);
    if (v9 != v14)
    {
      unsigned int v33 = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v30 + v16 + v17) & ~v17);
      if (v33 >= 2) {
        return v33 - 1;
      }
      else {
        return 0;
      }
    }
    int v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v31 = v9;
    uint64_t v28 = v5;
  }

  return v29(v30, v31, v28);
}

void storeEnumTagSinglePayload for Publishers.SubscribeOn(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 24);
  uint64_t v44 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v44 - 8);
  uint64_t v43 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v13 = 0;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  int v15 = *(_DWORD *)(v14 + 84);
  unsigned int v16 = v15 - 1;
  if (!v15) {
    unsigned int v16 = 0;
  }
  if (v16 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v7 + 64) + v18;
  uint64_t v20 = *(void *)(v9 + 64);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  if (v15) {
    size_t v22 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v22 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 1;
  }
  size_t v23 = ((v20 + v21 + (v19 & ~v18)) & ~v21) + v22;
  if (a3 <= v17) {
    goto LABEL_20;
  }
  if (v23 <= 3)
  {
    unsigned int v24 = ((a3 - v17 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v24))
    {
      int v13 = 4;
      if (v17 >= a2) {
        goto LABEL_28;
      }
LABEL_21:
      unsigned int v25 = ~v17 + a2;
      if (v23 < 4)
      {
        int v27 = (v25 >> (8 * v23)) + 1;
        if (v23)
        {
          int v28 = v13;
          int v29 = v25 & ~(-1 << (8 * v23));
          bzero(a1, v23);
          if (v23 == 3)
          {
            *(_WORD *)a1 = v29;
            a1[2] = BYTE2(v29);
            int v13 = v28;
          }
          else
          {
            int v13 = v28;
            if (v23 == 2) {
              *(_WORD *)a1 = v29;
            }
            else {
              *a1 = v29;
            }
          }
        }
      }
      else
      {
        int v26 = v13;
        bzero(a1, v23);
        int v13 = v26;
        *(_DWORD *)a1 = v25;
        int v27 = 1;
      }
      switch(v13)
      {
        case 1:
          a1[v23] = v27;
          break;
        case 2:
          *(_WORD *)&a1[v23] = v27;
          break;
        case 3:
LABEL_65:
          __break(1u);
          JUMPOUT(0x18C01EBECLL);
        case 4:
          *(_DWORD *)&a1[v23] = v27;
          break;
        default:
          return;
      }
      return;
    }
    if (v24 >= 0x100) {
      int v13 = 2;
    }
    else {
      int v13 = v24 > 1;
    }
LABEL_20:
    if (v17 >= a2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  int v13 = 1;
  if (v17 < a2) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v30 = ~v18;
  uint64_t v31 = ~v21;
  int v32 = a1;
  switch(v13)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
      goto LABEL_65;
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (!a2) {
        return;
      }
LABEL_33:
      if (v8 == v17)
      {
        uint64_t v33 = v44;
        uint64_t v34 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
        uint64_t v35 = a2;
        uint64_t v36 = v8;
LABEL_37:
        v34(v32, v35, v36, v33);
        return;
      }
      int v32 = (unsigned char *)((unint64_t)&a1[v19] & v30);
      if (v10 == v17)
      {
        uint64_t v34 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v35 = a2;
        uint64_t v36 = v10;
        uint64_t v33 = v6;
        goto LABEL_37;
      }
      int v37 = (unsigned char *)((unint64_t)&v32[v20 + v21] & v31);
      if (v16 >= a2)
      {
        uint64_t v41 = *(void (**)(unint64_t, void))(v14 + 56);
        unint64_t v42 = (unint64_t)&v32[v20 + v21] & v31;
        v41(v42, (a2 + 1));
      }
      else
      {
        if (v22 <= 3) {
          int v38 = ~(-1 << (8 * v22));
        }
        else {
          int v38 = -1;
        }
        if (v22)
        {
          int v39 = v38 & (~v16 + a2);
          if (v22 <= 3) {
            int v40 = v22;
          }
          else {
            int v40 = 4;
          }
          bzero(v37, v22);
          switch(v40)
          {
            case 2:
              *(_WORD *)int v37 = v39;
              break;
            case 3:
              *(_WORD *)int v37 = v39;
              v37[2] = BYTE2(v39);
              break;
            case 4:
              *(_DWORD *)int v37 = v39;
              break;
            default:
              *int v37 = v39;
              break;
          }
        }
      }
      break;
  }
}

uint64_t sub_18C01EC24()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18C01EC5C()
{
  return objectdestroy_7Tm();
}

uint64_t sub_18C01EC64()
{
  return objectdestroy_7Tm();
}

uint64_t partial apply for closure #1 in Publishers.SubscribeOn.Inner.cancel()()
{
  return closure #1 in Publishers.SubscribeOn.Inner.cancel()(*(void *)(v0 + 64), (void *)(v0 + 72));
}

uint64_t FilterProducer.description.getter()
{
  return 0x72507265746C6946;
}

uint64_t FilterProducer.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BA630;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (char *)v0 + *(void *)(v1 + 144);
  uint64_t v11 = *(void *)(v1 + 80);
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  uint64_t v15 = v11;
  long long v16 = *(_OWORD *)(v2 + 88);
  long long v17 = *(_OWORD *)(v2 + 104);
  long long v18 = *(_OWORD *)(v2 + 120);
  type metadata accessor for FilterProducer();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t FilterProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 168))();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t FilterProducer.__deallocating_deinit()
{
  FilterProducer.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void FilterProducer.receive(newValue:)()
{
}

void FilterProducer.receive(completion:)(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v41 = *v1;
  uint64_t v2 = (void *)v41;
  uint64_t v3 = *(void *)(v41 + 120);
  uint64_t v4 = *(void *)(v41 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v29 - v7;
  uint64_t v8 = *(void *)(v41 + 104);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  int v29 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v30 = (char *)&v29 - v11;
  swift_getAssociatedConformanceWitness();
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v36 = type metadata accessor for Subscribers.Completion();
  uint64_t v35 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v34 = (char *)&v29 - v12;
  uint64_t v13 = v2[16];
  uint64_t v32 = type metadata accessor for Subscribers.Completion();
  uint64_t v14 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  long long v16 = (char *)&v29 - v15;
  long long v17 = *(os_unfair_lock_s **)((char *)v1 + v2[19]);
  os_unfair_lock_lock(v17);
  uint64_t v18 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  uint64_t v19 = v2[14];
  uint64_t v39 = v4;
  uint64_t v44 = v4;
  long long v45 = *(_OWORD *)(v41 + 88);
  uint64_t v46 = v8;
  uint64_t v47 = v19;
  uint64_t v41 = v3;
  uint64_t v48 = v3;
  uint64_t v49 = v13;
  uint64_t v20 = type metadata accessor for FilterProducer.State();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v21 + 16))(&v44, v18, v20);
  if (v46 == 1)
  {
    os_unfair_lock_unlock(v17);
  }
  else if (v46)
  {
    memset(v42, 0, sizeof(v42));
    long long v43 = xmmword_18C0BA640;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v21 + 40))(v18, v42, v20);
    swift_endAccess();
    os_unfair_lock_unlock(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v33, v32);
    uint64_t v22 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v16, 1, v8) == 1)
    {
      size_t v23 = v34;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v34, 1, 1, v40);
      (*(void (**)(char *, uint64_t))(v41 + 56))(v23, v39);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v36);
    }
    else
    {
      unsigned int v24 = v30;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v16, v8);
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v29, v24, v8);
      unsigned int v25 = v31;
      uint64_t v26 = v40;
      swift_dynamicCast();
      uint64_t v27 = v38;
      int v28 = v34;
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v34, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
      (*(void (**)(char *, uint64_t))(v41 + 56))(v28, v39);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v8);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
    }
    (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(&v44, v20);
  }
  else
  {
    os_unfair_lock_unlock(v17);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t assignWithCopy for FilterProducer.State(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t getEnumTag for FilterProducer.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for FilterProducer.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

void protocol witness for Subscriber.receive(completion:) in conformance FilterProducer<A, B, C, D, E>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FilterProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance FilterProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance FilterProducer<A, B, C, D, E>@<X0>(uint64_t *a1@<X8>)
{
  return FilterProducer.playgroundDescription.getter(a1);
}

uint64_t Publisher.measureInterval<A>(using:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.MeasureInterval.init(upstream:scheduler:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publishers.MeasureInterval.init(upstream:scheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.MeasureInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.MeasureInterval()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.MeasureInterval.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.MeasureInterval.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.MeasureInterval.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = *(void *)(v15 + 16);
  uint64_t v16 = v24[0];
  v24[1] = v6;
  void v24[2] = v17;
  long long v22 = *(_OWORD *)(v15 + 32);
  long long v25 = v22;
  uint64_t v26 = v18;
  uint64_t v19 = type metadata accessor for Publishers.MeasureInterval.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v23 + *(int *)(a2 + 52), v6);
  swift_allocObject();
  v24[0] = Publishers.MeasureInterval.Inner.init(_:scheduler:)((uint64_t)v14, (uint64_t)v10);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v24, v16, v19, v22, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.MeasureInterval.Inner()
{
  return swift_getGenericMetadata();
}

char *Publishers.MeasureInterval.Inner.__allocating_init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  return Publishers.MeasureInterval.Inner.init(_:scheduler:)(a1, a2);
}

char *Publishers.MeasureInterval.Inner.init(_:scheduler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)v2;
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *uint64_t v6 = 0;
  *((void *)v2 + 2) = v6;
  uint64_t v7 = &v2[*(void *)(*(void *)v2 + 152)];
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[40] = 2;
  uint64_t v8 = &v2[*(void *)(*(void *)v2 + 160)];
  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v5 + 96) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 136)], a1);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(&v2[*(void *)(*(void *)v2 + 144)], a2, v9);
  return v2;
}

char *Publishers.MeasureInterval.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 136)]);
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1 + 88) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 144)], *(void *)(v1 + 88));
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 152)]);
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 160)];
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t Publishers.MeasureInterval.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.MeasureInterval.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void Publishers.MeasureInterval.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v3);
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(v3);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void Publishers.MeasureInterval.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v5);
  if (v6)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription(v5, (uint64_t)v7);
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v8;
    uint64_t v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
}

uint64_t Publishers.MeasureInterval.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)&long long v25 = *v2;
  uint64_t v4 = *(void *)(v25 + 112);
  uint64_t v5 = *(void *)(v25 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v13);
  uint64_t v14 = (uint64_t)v2 + *(void *)(*v2 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v14, (uint64_t)&v31);
  if (v34 == 2
    && (int8x16_t v15 = vorrq_s8(v32, v33),
        !(*(void *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)) | v31)))
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v26);
    LOBYTE(v29) = 0;
    outlined init with take of SubscriptionStatus((uint64_t)v26, (uint64_t)v30);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v30, v14);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v12, 0, 1, AssociatedTypeWitness);
    uint64_t v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v12, v7);
    uint64_t v20 = (char *)v2 + *(void *)(*v2 + 160);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v20, v10, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    uint64_t v21 = *(void *)(v25 + 120);
    v26[0] = *(void *)(v25 + 80);
    v26[1] = v5;
    long long v25 = *(_OWORD *)(v25 + 96);
    long long v27 = v25;
    int v28 = (_UNKNOWN **)v4;
    uint64_t v29 = v21;
    *((void *)&v27 + 1) = type metadata accessor for Publishers.MeasureInterval.Inner();
    int v28 = &protocol witness table for Publishers.MeasureInterval<A, B>.Inner<A1>;
    v26[0] = v2;
    long long v22 = *(void (**)(void *, void, uint64_t))(v21 + 40);
    swift_retain();
    v22(v26, v25, v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    os_unfair_lock_unlock(v13);
    uint64_t v16 = a1[3];
    uint64_t v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v16);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v16);
    return outlined destroy of SubscriptionStatus((uint64_t)&v31);
  }
}

void Publishers.MeasureInterval.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v6);
  if (v6[40])
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    Publishers.MeasureInterval.Inner.locked_terminate()();
    os_unfair_lock_unlock(v4);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a1, *(void *)(v3 + 96));
  }
}

uint64_t Publishers.MeasureInterval.Inner.locked_terminate()()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v6 = (char *)&v10 - v5;
  uint64_t v11 = 1;
  long long v12 = 0u;
  long long v13 = 0u;
  char v14 = 2;
  uint64_t v7 = (uint64_t)v0 + *(void *)(v1 + 152);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v11, v7);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
  uint64_t v8 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v8, v6, v3);
  return swift_endAccess();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(void *a1)
{
  return Publishers.MeasureInterval.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return specialized Publishers.MeasureInterval.Inner.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MeasureInterval<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MeasureInterval.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MeasureInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.MeasureInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MeasureInterval(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.MeasureInterval(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C02156CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.MeasureInterval.Inner()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v0 = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return v0;
}

uint64_t Publishers.MeasureInterval.Inner.customMirror.getter()
{
  unint64_t v1 = (_OWORD *)*v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v12 = v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  long long v9 = v1[6];
  v11[0] = v1[5];
  v11[1] = v9;
  void v11[2] = v1[7];
  type metadata accessor for Publishers.MeasureInterval.Inner();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MeasureInterval.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x496572757361654DLL;
  a1[1] = 0xEF6C61767265746ELL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return 0x496572757361654DLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>()
{
  return Publishers.MeasureInterval.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.MeasureInterval<A, B>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t specialized Publishers.MeasureInterval.Inner.receive(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t v52 = *(void *)(*v0 + 120);
  uint64_t v53 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v54 = (char *)&v46 - v4;
  uint64_t v5 = *(void *)(v2 + 112);
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  size_t v14 = (char *)&v46 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  int v17 = (char *)&v46 - v16;
  uint64_t v56 = *(void *)(v7 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  unsigned int v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v22 = (char *)&v46 - v21;
  os_unfair_lock_t v59 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v59);
  uint64_t v23 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v23, (uint64_t)v60);
  if (v61)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v60);
LABEL_5:
    os_unfair_lock_unlock(v59);
    return 0;
  }
  uint64_t v46 = v14;
  uint64_t v47 = v11;
  uint64_t v48 = v6;
  uint64_t v50 = v22;
  uint64_t v49 = v20;
  outlined init with take of Subscription(v60, (uint64_t)v62);
  uint64_t v24 = (char *)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v17, v24, v58);
  uint64_t v25 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v17, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v58);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    goto LABEL_5;
  }
  uint64_t v27 = v7;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v50, v17, v7);
  int v28 = v49;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v48, v5);
  uint64_t v29 = v46;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v46, v28, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v7);
  uint64_t v30 = v57;
  uint64_t v31 = v47;
  int8x16_t v32 = v29;
  uint64_t v33 = v58;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v47, v32, v58);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v24, v31, v33);
  swift_endAccess();
  char v34 = v28;
  os_unfair_lock_unlock(v59);
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  dispatch thunk of Strideable.distance(to:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 48))(v35, v53);
  uint64_t v36 = result;
  uint64_t v37 = AssociatedTypeWitness;
  uint64_t v38 = v55;
  if (result == 0x8000000000000000) {
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    if (!result)
    {
LABEL_11:
      (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
      long long v45 = *(void (**)(char *, uint64_t))(v25 + 8);
      v45(v34, v27);
      v45(v50, v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      return 0;
    }
LABEL_10:
    uint64_t v39 = v25;
    uint64_t v40 = v63;
    uint64_t v41 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    unint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24);
    uint64_t v43 = v40;
    char v34 = v49;
    uint64_t v44 = v41;
    uint64_t v25 = v39;
    v42(v36, v43, v44);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.DropWhile, a6);
}

uint64_t Publisher.tryDrop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile, a5);
}

uint64_t Publishers.TryDropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.DropWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryDropWhile, a6);
}

uint64_t Publishers.DropWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  size_t v14 = (void *)(a7 + *(int *)(result + 36));
  *size_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryDropWhile()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.DropWhile.Inner.init(downstream:predicate:));
}

void Publishers.DropWhile.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6C696857706F7244;
  a1[1] = 0xE900000000000065;
}

uint64_t *Publishers.DropWhile.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.DropWhile.Inner.deinit);
}

void Publishers.DropWhile.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((long long *)&v6, (uint64_t)v10);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    v2[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

void Publishers.DropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v8);
  int v5 = v11;
  outlined destroy of SubscriptionStatus((uint64_t)&v8);
  if (v5)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  }
  else
  {
    uint64_t v8 = 1;
    long long v9 = 0u;
    long long v10 = 0u;
    unsigned __int8 v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v8, (uint64_t)(v1 + 2));
    swift_endAccess();
    uint64_t v6 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 128));
    uint64_t v7 = *v6;
    *uint64_t v6 = 0;
    v6[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 104) + 56))(a1, *(void *)(v3 + 88));
  }
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.DropWhile<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.DropWhile<A>.Inner<A1>()
{
  return 0x6C696857706F7244;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.DropWhile<A>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.DropWhile<A>.Inner<A1>()
{
}

uint64_t Publishers.DropWhile.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.DropWhile.predicate.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryDropWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t)type metadata accessor for Publishers.TryDropWhile.Inner, (uint64_t (*)(char *, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:), (uint64_t)&protocol conformance descriptor for Publishers.TryDropWhile<A>.Inner<A1>);
}

uint64_t type metadata accessor for Publishers.TryDropWhile.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.TryDropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.TryDropWhile.Inner.init(downstream:predicate:));
}

uint64_t Publishers.DropWhile.Inner.__allocating_init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

uint64_t Publishers.DropWhile.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.TryDropWhile.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "TryDropWhile");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t *Publishers.TryDropWhile.Inner.init(downstream:predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 2;
  uint64_t v8 = (uint64_t *)((char *)v3 + *(void *)(v7 + 128));
  *uint64_t v8 = 0;
  v8[1] = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 136)) = 1;
  *((unsigned char *)v3 + *(void *)(*v3 + 144)) = 0;
  uint64_t v9 = *(void *)(*v3 + 152);
  uint64_t v10 = (_DWORD *)swift_slowAlloc();
  *uint64_t v10 = 0;
  *(uint64_t *)((char *)v3 + v9) = (uint64_t)v10;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 120), a1);
  unsigned __int8 v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 128));
  uint64_t v12 = *v11;
  *unsigned __int8 v11 = a2;
  v11[1] = a3;
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  return v3;
}

uint64_t *Publishers.TryDropWhile.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)));
  return v0;
}

uint64_t Publishers.TryDropWhile.Inner.__deallocating_deinit()
{
  return Publishers.DropWhile.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.TryDropWhile.Inner.deinit);
}

uint64_t Publishers.DropWhile.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

void Publishers.TryDropWhile.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 16, (uint64_t)&v6);
  if (v9)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((long long *)&v6, (uint64_t)v10);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    char v9 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v6, v0 + 16);
    swift_endAccess();
    uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    v2[1] = 0;
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v3);
    *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 144)) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
}

void Publishers.TryDropWhile.Inner.request(_:)(uint64_t a1)
{
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 16, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

uint64_t Publishers.TryDropWhile.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v12);
  if (v15 == 2
    && (int8x16_t v5 = vorrq_s8(v13, v14),
        !(*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | (unint64_t)v12)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    char v15 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, (uint64_t)(v1 + 2));
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v14.i64[0] = v3;
    v14.i64[1] = (uint64_t)&protocol witness table for Publishers.TryDropWhile<A>.Inner<A1>;
    uint64_t v12 = v1;
    uint64_t v9 = *(void *)(v3 + 104);
    uint64_t v10 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 88);
    swift_retain();
    v10(&v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
  }
}

uint64_t Publishers.TryDropWhile.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v5));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)v14);
  int v6 = v15;
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (v6 || (uint64_t v9 = *(uint64_t (**)(uint64_t))((char *)v1 + *(void *)(*v1 + 128))) == 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v5));
    return 0;
  }
  else
  {
    uint64_t v10 = *(void *)(*v1 + 136);
    if (*((unsigned char *)v1 + v10) == 1)
    {
      uint64_t v11 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      os_unfair_lock_unlock(v11);
      if (v9(a1))
      {
        _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
        return 1;
      }
      os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v5));
      *((unsigned char *)v2 + v10) = 0;
      int8x16_t v13 = *(os_unfair_lock_s **)((char *)v2 + v5);
    }
    else
    {
      uint64_t v12 = *(os_unfair_lock_s **)((char *)v1 + v5);
      swift_retain();
      int8x16_t v13 = v12;
    }
    os_unfair_lock_unlock(v13);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 104) + 48))(a1, *(void *)(v4 + 88));
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v9);
  }
  return v7;
}

void Publishers.TryDropWhile.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v25 = a1;
  uint64_t v26 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v6 = (char *)&v22 - v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = *(void *)(v2 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v12));
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 2), (uint64_t)&v28);
  int v13 = v31;
  outlined destroy of SubscriptionStatus((uint64_t)&v28);
  if (v13)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v12));
  }
  else
  {
    uint64_t v22 = AssociatedConformanceWitness;
    uint64_t v23 = v6;
    uint64_t v24 = v9;
    uint64_t v14 = v27;
    uint64_t v28 = 1;
    long long v29 = 0u;
    long long v30 = 0u;
    unsigned __int8 v31 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v28, (uint64_t)(v1 + 2));
    swift_endAccess();
    uint64_t v15 = *(void *)(*v1 + 144);
    char v16 = *((unsigned char *)v1 + v15);
    *((unsigned char *)v1 + v15) = 1;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v12));
    if ((v16 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v11, v25, v8);
      int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, AssociatedTypeWitness);
      uint64_t v18 = v26;
      if (v17 == 1)
      {
        uint64_t v28 = 0;
        (*(void (**)(uint64_t *, void))(*(void *)(v26 + 104) + 56))(&v28, *(void *)(v26 + 88));
      }
      else
      {
        uint64_t v19 = v23;
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v11, AssociatedTypeWitness);
        uint64_t v20 = swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v21, v19, AssociatedTypeWitness);
        uint64_t v28 = v20;
        (*(void (**)(uint64_t *, void))(*(void *)(v18 + 104) + 56))(&v28, *(void *)(v18 + 88));
        MEMORY[0x18C13C260](v20);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, AssociatedTypeWitness);
      }
    }
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(void *a1)
{
  return Publishers.TryDropWhile.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.TryDropWhile.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
  return 0x57706F7244797254;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
  return Publishers.DropWhile.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryDropWhile<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryDropWhile<A>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryDropWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryDropWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.DropWhile(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.DropWhile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.DropWhile(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C023988);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.DropWhile(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C023B7CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.TryDropWhile.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Record.recording.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Record.Recording();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for Record.Recording()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Record.init(record:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return a1(a3);
}

uint64_t Record.Recording.init()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = static Array._allocateUninitialized(_:)();
  uint64_t v4 = type metadata accessor for Record.Recording();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2 + *(int *)(v4 + 48), 1, 1, a1);
  *(unsigned char *)a2 = 0;
  return result;
}

uint64_t Record.init(recording:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Record.Recording();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t Record.Recording.init(output:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = a1;
  uint64_t v5 = a3 + *(int *)(type metadata accessor for Record.Recording() + 48);
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a2, v6);
  *(unsigned char *)a3 = 1;
  return result;
}

uint64_t Record.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(v4 + 8);
  v17[0] = v10;
  uint64_t v11 = *(void *)(a2 + 16);
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    if (one-time initialization token for singleton != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&static Subscriptions._EmptySubscription.singleton, a3, a4);
    uint64_t v12 = type metadata accessor for Record.Recording();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 56))(v4 + *(int *)(v12 + 48), a3, a4);
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 24);
    v17[0] = v11;
    v17[1] = v14;
    _OWORD v17[2] = a3;
    uint64_t v18 = a4;
    uint64_t v15 = type metadata accessor for Record.Inner();
    uint64_t v16 = v5 + *(int *)(type metadata accessor for Record.Recording() + 48);
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v18 = v15;
    uint64_t v19 = &protocol witness table for Record<A, B>.Inner<A1>;
    v17[0] = specialized Record.Inner.init(downstream:sequence:completion:)(a1, v10, v16);
    (*(void (**)(void *, uint64_t, uint64_t))(a4 + 40))(v17, a3, a4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
}

BOOL static Record.Recording.State.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Record.Recording.State.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Record.Recording.State.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Record.Recording.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording.State()
{
  return Record.Recording.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording.State(uint64_t a1)
{
  Record.Recording.State.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording.State()
{
  Hasher.init(_seed:)();
  Record.Recording.State.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t Record.Recording.output.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Record.Recording.completion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Record.Recording.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = MEMORY[0x1F4188790](a1);
  if (*v2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v3);
    type metadata accessor for Array();
    return Array.append(_:)();
  }
  return result;
}

uint64_t Record.Recording.receive(completion:)(uint64_t result, uint64_t a2)
{
  if (*v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    *uint64_t v2 = 1;
    uint64_t v4 = &v2[*(int *)(a2 + 48)];
    uint64_t v5 = type metadata accessor for Subscribers.Completion();
    uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24);
    return v6(v4, v3, v5);
  }
  return result;
}

uint64_t Record.Inner.description.getter()
{
  uint64_t v1 = *v0;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168)));
  if (v0[2])
  {
    uint64_t v2 = *(void *)(v1 + 80);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = MEMORY[0x18C13B760](v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0xD000000000000010;
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168)));
  return v4;
}

void Record.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 168)));
  uint64_t v16 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BABB0;
  *(void *)(v8 + 32) = 0x65636E6575716573;
  *(void *)(v8 + 40) = 0xE800000000000000;
  uint64_t v9 = v0[2];
  *(void *)(v8 + 72) = type metadata accessor for Array();
  swift_retain();
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = static Array._allocateUninitialized(_:)();
  }
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 80) = 0x6974656C706D6F63;
  *(void *)(v8 + 88) = 0xEA00000000006E6FLL;
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 120);
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  *(void *)(v8 + 120) = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(boxed_opaque_existential_1, v11, v12);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168)));
}

uint64_t Record.Inner.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Record.Inner.description.getter();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Record.Inner.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + *(void *)(*(void *)v0 + 168)), -1, -1);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 120);
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t Record.Inner.__deallocating_deinit()
{
  Record.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

Swift::Void __swiftcall Record.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 96);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 168)));
  v0[2] = 0;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  uint64_t v7 = (char *)v0 + *(void *)(*v0 + 128);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 168)));
}

Swift::Void __swiftcall Record.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  Swift::UInt rawValue = a1.rawValue;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v104 = *(void *)(*v1 + 104);
  swift_getAssociatedConformanceWitness();
  uint64_t v86 = type metadata accessor for Subscribers.Completion();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  long long v84 = (char *)&v78 - v5;
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v102 = type metadata accessor for Optional();
  uint64_t v95 = *(void (***)(char *, uint64_t))(v102 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v102);
  uint64_t v100 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v105 = (char *)&v78 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v101 = (char *)&v78 - v12;
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v81 = *(void *)(v88 + 64);
  MEMORY[0x1F4188790](v11);
  int v107 = (char *)&v78 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v83 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v78 - v19;
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v24 = (char *)&v78 - v23;
  uint64_t v25 = v3;
  uint64_t v26 = v22;
  uint64_t v27 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v25 + 168));
  os_unfair_lock_lock(v27);
  uint64_t v28 = (char *)v2 + *(void *)(*v2 + 128);
  swift_beginAccess();
  long long v29 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v82 = v28;
  v29(v20, v28, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v26);
    os_unfair_lock_unlock(v27);
    return;
  }
  uint64_t v99 = v15;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v20, v4);
  long long v30 = (void *)*v2;
  uint64_t v108 = *(void *)(*v2 + 152);
  uint64_t v31 = *(void *)((char *)v2 + v108);
  unint64_t v32 = 0x8000000000000000;
  if (v31 != 0x8000000000000000)
  {
    if (rawValue != 0x8000000000000000)
    {
      if (((v31 | rawValue) & 0x8000000000000000) != 0) {
        goto LABEL_51;
      }
      unint64_t v32 = v31 + rawValue;
      if (__OFADD__(v31, rawValue))
      {
        unint64_t v32 = 0x8000000000000000;
      }
      else if ((v32 & 0x8000000000000000) != 0)
      {
        goto LABEL_52;
      }
    }
    *(void *)((char *)v2 + v108) = v32;
    long long v30 = (void *)*v2;
  }
  uint64_t v33 = v30[20];
  if (*((unsigned char *)v2 + v33))
  {
    os_unfair_lock_unlock(v27);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v4);
    return;
  }
  uint64_t v96 = v4;
  uint64_t v103 = v33;
  os_unfair_lock_t v97 = v27;
  uint64_t v79 = v26;
  unint64_t v98 = v24;
  uint64_t v80 = v21;
  char v34 = (char *)v2 + v30[18];
  uint64_t v35 = (void *)((char *)v2 + v30[17]);
  swift_beginAccess();
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v95 + 2);
  Swift::UInt rawValue = v88 + 48;
  uint64_t v94 = (void (**)(char *, char *, uint64_t))(v88 + 32);
  long long v87 = (void (**)(char *, uint64_t *, uint64_t))(v88 + 16);
  unsigned int v93 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
  uint64_t v92 = (void (**)(char *, char *, uint64_t))(v95 + 5);
  uint64_t v91 = v104 + 48;
  ++v95;
  char v89 = (void (**)(char *, uint64_t))(v88 + 8);
  uint64_t v37 = v99;
  uint64_t v38 = v102;
  uint64_t v90 = v36;
  while (1)
  {
    uint64_t v39 = *(void *)((char *)v2 + v108);
    uint64_t v40 = v101;
    if (v39 == 0x8000000000000000) {
      goto LABEL_17;
    }
    if (v39 < 0) {
      break;
    }
    if (!v39) {
      goto LABEL_41;
    }
LABEL_17:
    if (!v2[2])
    {
LABEL_41:
      os_unfair_lock_unlock(v97);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v98, v96);
      return;
    }
    uint64_t v41 = *v36;
    (*v36)(v101, v34, v38);
    unint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))rawValue;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))rawValue)(v40, 1, v6) == 1)
    {
      (*v95)(v40, v38);
      v2[2] = 0;
      swift_bridgeObjectRelease();
      uint64_t v62 = v80;
      uint64_t v63 = v83;
      uint64_t v64 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v83, 1, 1, v96);
      uint64_t v65 = v82;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v65, v63, v79);
      swift_endAccess();
      os_unfair_lock_unlock(v97);
      uint64_t v66 = v85;
      uint64_t v67 = v84;
      uint64_t v68 = v86;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v84, (char *)v2 + *(void *)(*v2 + 120), v86);
      uint64_t v69 = v98;
      (*(void (**)(char *, uint64_t))(v104 + 56))(v67, v64);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v68);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v69, v64);
      return;
    }
    (*v94)(v107, v40, v6);
    uint64_t v43 = *(void *)((char *)v2 + v108);
    if (v43 != 0x8000000000000000)
    {
      if (v43 < 0) {
        goto LABEL_46;
      }
      if (!v43) {
        goto LABEL_47;
      }
      *(void *)((char *)v2 + v108) = v43 - 1;
    }
    swift_beginAccess();
    uint64_t v44 = v35[1];
    if (v44 == MEMORY[0x18C13B800](*v35, v6))
    {
      uint64_t v45 = 1;
    }
    else
    {
      uint64_t v46 = *v35;
      uint64_t v47 = v35[1];
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v88 + 16))(v105, v46+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(void *)(v88 + 72) * v47, v6);
      }
      else
      {
        uint64_t v61 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v81 != 8) {
          goto LABEL_53;
        }
        uint64_t v109 = v61;
        (*v87)(v105, &v109, v6);
        swift_unknownObjectRelease();
      }
      uint64_t v49 = v35[1];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      uint64_t v38 = v102;
      if (v50) {
        goto LABEL_48;
      }
      uint64_t v45 = 0;
      v35[1] = v51;
    }
    uint64_t v52 = v105;
    (*v93)(v105, v45, 1, v6);
    swift_endAccess();
    swift_beginAccess();
    (*v92)(v34, v52, v38);
    swift_endAccess();
    uint64_t v53 = v103;
    *((unsigned char *)v2 + v103) = 1;
    uint64_t v54 = v97;
    os_unfair_lock_unlock(v97);
    uint64_t v55 = v38;
    uint64_t v56 = (*(uint64_t (**)(char *, uint64_t))(v104 + 48))(v107, v96);
    os_unfair_lock_lock(v54);
    uint64_t v57 = *(void *)((char *)v2 + v108);
    unint64_t v58 = 0x8000000000000000;
    if (v57 != 0x8000000000000000)
    {
      if (v56 != 0x8000000000000000)
      {
        if ((v57 | v56) < 0) {
          goto LABEL_49;
        }
        unint64_t v58 = v57 + v56;
        if (__OFADD__(v57, v56))
        {
          unint64_t v58 = 0x8000000000000000;
        }
        else if ((v58 & 0x8000000000000000) != 0)
        {
          goto LABEL_50;
        }
      }
      *(void *)((char *)v2 + v108) = v58;
      uint64_t v55 = v102;
      uint64_t v53 = v103;
    }
    *((unsigned char *)v2 + v53) = 0;
    os_unfair_lock_t v59 = v100;
    uint64_t v36 = v90;
    v41(v100, v34, v55);
    int v60 = v42(v59, 1, v6);
    (*v95)(v59, v55);
    if (v60 == 1)
    {
      v2[2] = 0;
      swift_bridgeObjectRelease();
      uint64_t v70 = v80;
      long long v71 = v83;
      uint64_t v72 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v83, 1, 1, v96);
      uint64_t v73 = v82;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v99 + 40))(v73, v71, v79);
      swift_endAccess();
      os_unfair_lock_unlock(v97);
      uint64_t v74 = v85;
      uint64_t v75 = v84;
      uint64_t v76 = v86;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v84, (char *)v2 + *(void *)(*v2 + 120), v86);
      uint64_t v77 = v98;
      (*(void (**)(char *, uint64_t))(v104 + 56))(v75, v72);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
      (*v89)(v107, v6);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v77, v72);
      return;
    }
    uint64_t v38 = v55;
    (*v89)(v107, v6);
    uint64_t v37 = v99;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

uint64_t Record.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6964726F636572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void protocol witness for Subscription.request(_:) in conformance Record<A, B>.Inner<A1>(Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Inner<A1>()
{
  return Record.Inner.description.getter();
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Record<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Record<A, B>.Inner<A1>@<X0>(uint64_t *a1@<X8>)
{
  return Record.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Record<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Record<A, B>.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0x6E6964726F636572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Record.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Record<A, B>.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.CodingKeys();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Record.Recording<>.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Record.Recording<>.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t Record.Recording<>.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6974656C706D6F63;
  }
  else {
    return 0x74757074756FLL;
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Record<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Record.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Record<A, B>.Recording<>.CodingKeys()
{
  return Record.Recording<>.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Record.Recording<>.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Record<A, B>.Recording<>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Record<A, B>.Recording<>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Record.Recording<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v39 = a9;
  uint64_t v42 = type metadata accessor for Subscribers.Completion();
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v40 = (char *)&v34 - v17;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v45 = a4;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v43 = a6;
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v56 = a8;
  type metadata accessor for Record.Recording<>.CodingKeys();
  swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v41 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v44 = a2;
  uint64_t v20 = type metadata accessor for Record.Recording();
  uint64_t v37 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v34 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v23 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    uint64_t v33 = (uint64_t)a1;
  }
  else
  {
    uint64_t v35 = v22;
    uint64_t v36 = v20;
    uint64_t v24 = v43;
    uint64_t v47 = a1;
    uint64_t v26 = v41;
    uint64_t v25 = v42;
    type metadata accessor for Array();
    char v57 = 0;
    uint64_t v49 = v45;
    swift_getWitnessTable();
    uint64_t v27 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v50;
    LOBYTE(v50) = 1;
    uint64_t v48 = v24;
    swift_getWitnessTable();
    long long v29 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
    uint64_t v31 = v35;
    *((void *)v35 + 1) = v28;
    uint64_t v32 = v36;
    (*(void (**)(unsigned char *, char *, uint64_t))(v38 + 32))(&v31[*(int *)(v36 + 48)], v29, v25);
    *uint64_t v31 = 1;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v37 + 32))(v39, v31, v32);
    uint64_t v33 = (uint64_t)v47;
  }
  return __swift_destroy_boxed_opaque_existential_1(v33);
}

uint64_t Record.Recording<>.encode(into:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a4;
  uint64_t v18 = a6;
  uint64_t v7 = a2[3];
  uint64_t v20 = a2[2];
  uint64_t v8 = a2[4];
  uint64_t v25 = v20;
  uint64_t v26 = v7;
  v17[0] = v8;
  v17[1] = v7;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = v8;
  type metadata accessor for Record.Recording<>.CodingKeys();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v9;
  uint64_t v14 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v25 = *(void *)(v14 + 8);
  char v32 = 0;
  type metadata accessor for Array();
  uint64_t v24 = v21;
  swift_getWitnessTable();
  uint64_t v15 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    LOBYTE(v25) = 1;
    type metadata accessor for Subscribers.Completion();
    uint64_t v23 = v18;
    swift_getWitnessTable();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v13);
}

uint64_t Record.Recording<>.encode(to:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a4;
  uint64_t v18 = a6;
  uint64_t v7 = a2[3];
  uint64_t v20 = a2[2];
  uint64_t v8 = a2[4];
  uint64_t v25 = v20;
  uint64_t v26 = v7;
  v17[0] = v8;
  v17[1] = v7;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = v8;
  type metadata accessor for Record.Recording<>.CodingKeys();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v9;
  uint64_t v14 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v25 = *(void *)(v14 + 8);
  char v32 = 0;
  type metadata accessor for Array();
  uint64_t v24 = v21;
  swift_getWitnessTable();
  uint64_t v15 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v15)
  {
    LOBYTE(v25) = 1;
    type metadata accessor for Subscribers.Completion();
    uint64_t v23 = v18;
    swift_getWitnessTable();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v13);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Record.Recording<>.init(from:));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>.Recording(void *a1, void *a2, uint64_t a3)
{
  return Record.Recording<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32));
}

uint64_t Record<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a6;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v14 = a3;
  uint64_t v7 = *(void *)(a2 + 24);
  v13[1] = *(void *)(a2 + 32);
  long long v13[2] = v7;
  type metadata accessor for Record.CodingKeys();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Record.Recording();
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t Record<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v23 = a6;
  uint64_t v31 = type metadata accessor for Record.Recording();
  uint64_t v26 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  char v32 = (char *)&v21 - v7;
  type metadata accessor for Record.CodingKeys();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v24 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for Record();
  uint64_t v22 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v21 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v14 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v21 = v13;
    uint64_t v37 = v11;
    uint64_t v15 = v24;
    uint64_t v16 = v26;
    uint64_t v33 = v27;
    uint64_t v34 = v28;
    uint64_t v17 = v31;
    uint64_t v35 = v29;
    uint64_t v36 = v30;
    swift_getWitnessTable();
    uint64_t v18 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v18);
    uint64_t v19 = v21;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v32, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v23, v19, v37);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Record<>.init(from:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Record<A, B>.Recording(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, a2[2], a2[3], *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), a2[4]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Record<A, B>(void *a1, uint64_t a2, uint64_t a3)
{
  return Record<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32));
}

uint64_t type metadata accessor for Record.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t specialized Record.Inner.init(downstream:sequence:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v45 = a1;
  uint64_t v48 = a2;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 80);
  uint64_t v46 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v40 = (char *)&v37 - v6;
  uint64_t v7 = *(void *)(v4 + 96);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  v3[2] = 0;
  uint64_t v11 = (char *)v3 + *(void *)(v4 + 128);
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v39(v11, 1, 1, v7);
  uint64_t v13 = (char *)v3 + *(void *)(*v3 + 144);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  v47(v13, 1, 1, v5);
  *(void *)((char *)v3 + *(void *)(*v3 + 152)) = 0;
  *((unsigned char *)v3 + *(void *)(*v3 + 160)) = 0;
  uint64_t v14 = *(void *)(*v3 + 168);
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  *uint64_t v15 = 0;
  *(void *)((char *)v3 + v14) = v15;
  v3[2] = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = (char *)v3 + *(void *)(*v3 + 120);
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Subscribers.Completion();
  uint64_t v18 = v16;
  uint64_t v19 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v18, v44, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v45, v7);
  uint64_t v20 = v40;
  v39(v10, 0, 1, v7);
  uint64_t v21 = (char *)v3 + *(void *)(*v3 + 128);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v21, v10, v43);
  swift_endAccess();
  uint64_t v22 = (void *)((char *)v3 + *(void *)(*v3 + 136));
  *uint64_t v22 = v48;
  v22[1] = 0;
  swift_beginAccess();
  uint64_t v23 = v22[1];
  uint64_t v24 = MEMORY[0x18C13B800](*v22, v5);
  uint64_t v25 = 1;
  BOOL v26 = v23 == v24;
  uint64_t v28 = v46;
  uint64_t v27 = v47;
  if (v26) {
    goto LABEL_6;
  }
  uint64_t v30 = *v22;
  uint64_t v29 = v22[1];
  Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
  Array._checkSubscript(_:wasNativeTypeChecked:)();
  if (IsNativeType)
  {
    uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v38 + 16))(v20, v30+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v29, v5);
  }
  else
  {
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (*(void *)(v38 + 64) != 8) {
      goto LABEL_10;
    }
    uint64_t v49 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v38 + 16))(v20, &v49, v5);
    uint64_t result = swift_unknownObjectRelease();
  }
  uint64_t v33 = v22[1];
  BOOL v34 = __OFADD__(v33, 1);
  uint64_t v35 = v33 + 1;
  if (!v34)
  {
    uint64_t v25 = 0;
    v22[1] = v35;
    uint64_t v27 = v47;
LABEL_6:
    v27(v20, v25, 1, v5);
    swift_endAccess();
    uint64_t v36 = (char *)v3 + *(void *)(*v3 + 144);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v36, v20, v28);
    swift_endAccess();
    return (uint64_t)v3;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Record.Recording<>.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Record.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for Record()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Record()
{
  uint64_t result = type metadata accessor for Record.Recording();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Record(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v8 + 16) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *(void *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(unsigned char *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for Record(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero((void *)a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          *(unsigned char *)(a1 + 2) = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *(unsigned char *)a1 = v19;
        }
      }
    }
    else
    {
      bzero((void *)a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        *(unsigned char *)(a1 + v13) = v18;
        return;
      case 2:
        *(_WORD *)(a1 + v13) = v18;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)(a1 + v13) = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      *(unsigned char *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x18C0278D4);
    case 4:
      *(_DWORD *)(a1 + v13) = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v22 = (unsigned char *)((v20 + v11 + 16) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v27((v20 + v11 + 16) & ~v11, v26);
          }
          else
          {
            if (v12 <= 3) {
              int v23 = ~(-1 << (8 * v12));
            }
            else {
              int v23 = -1;
            }
            if (v12)
            {
              int v24 = v23 & (~v9 + a2);
              if (v12 <= 3) {
                int v25 = v12;
              }
              else {
                int v25 = 4;
              }
              bzero(v22, v12);
              switch(v25)
              {
                case 2:
                  *(_WORD *)uint64_t v22 = v24;
                  break;
                case 3:
                  *(_WORD *)uint64_t v22 = v24;
                  v22[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v22 = v24;
                  break;
                default:
                  *uint64_t v22 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v21 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v21 = a2 - 1;
          }
          *(void *)(v20 + 8) = v21;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Record.Recording()
{
  uint64_t result = type metadata accessor for Subscribers.Completion();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  Swift::Int v3 = (void *)a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = ((v7 + 16) & ~(unint64_t)v7) + v10;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *Swift::Int v3 = *(void *)a2;
    Swift::Int v3 = (void *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    unsigned int v16 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8);
    unsigned int v17 = (const void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8);
    int v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for Record(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    int v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

unint64_t initializeWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  uint64_t v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  int v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v10 = *(void *)(v5 + 64);
    }
    else {
      size_t v10 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

unint64_t assignWithCopy for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  unint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v12(v10, 1, v7);
  int v13 = v12(v11, 1, v7);
  if (v6)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      return a1;
    }
    int v14 = *(_DWORD *)(v8 + 84);
    size_t v15 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, v7);
      return a1;
    }
    unsigned int v17 = *(void (**)(void *, uint64_t))(v8 + 8);
    uint64_t v16 = v8 + 8;
    v17(v10, v7);
    int v14 = *(_DWORD *)(v16 + 76);
    size_t v15 = *(void *)(v16 + 56);
  }
  if (v14) {
    size_t v18 = v15;
  }
  else {
    size_t v18 = v15 + 1;
  }
  memcpy(v10, v11, v18);
  return a1;
}

unint64_t initializeWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)((v6 + 16 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  uint64_t v8 = (const void *)((v6 + 16 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

unint64_t assignWithTake for Record(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  unint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, v7);
  int v14 = v12(v11, 1, v7);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
      return a1;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, v7);
      return a1;
    }
    size_t v18 = *(void (**)(void *, uint64_t))(v8 + 8);
    uint64_t v17 = v8 + 8;
    v18(v10, v7);
    int v15 = *(_DWORD *)(v17 + 76);
    size_t v16 = *(void *)(v17 + 56);
  }
  if (v15) {
    size_t v19 = v16;
  }
  else {
    size_t v19 = v16 + 1;
  }
  memcpy(v10, v11, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Record.Recording(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)(a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v8 + 16) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *(void *)(v17 + 8);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(unsigned char *)(a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v11) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for Record.Recording(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero((void *)a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          *(unsigned char *)(a1 + 2) = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *(unsigned char *)a1 = v19;
        }
      }
    }
    else
    {
      bzero((void *)a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        *(unsigned char *)(a1 + v13) = v18;
        return;
      case 2:
        *(_WORD *)(a1 + v13) = v18;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)(a1 + v13) = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      *(unsigned char *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)(a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x18C0286A4);
    case 4:
      *(_DWORD *)(a1 + v13) = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v22 = (unsigned char *)((v20 + v11 + 16) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v27((v20 + v11 + 16) & ~v11, v26);
          }
          else
          {
            if (v12 <= 3) {
              int v23 = ~(-1 << (8 * v12));
            }
            else {
              int v23 = -1;
            }
            if (v12)
            {
              int v24 = v23 & (~v9 + a2);
              if (v12 <= 3) {
                int v25 = v12;
              }
              else {
                int v25 = 4;
              }
              bzero(v22, v12);
              switch(v25)
              {
                case 2:
                  *(_WORD *)uint64_t v22 = v24;
                  break;
                case 3:
                  *(_WORD *)uint64_t v22 = v24;
                  v22[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v22 = v24;
                  break;
                default:
                  *uint64_t v22 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v21 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v21 = a2 - 1;
          }
          *(void *)(v20 + 8) = v21;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Record.Inner()
{
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for Subscribers.Completion();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t getEnumTag for Record.Recording.State(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t type metadata accessor for Record.Recording.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Record.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for Record.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18C02896CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for Record.CodingKeys()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for Record.Recording.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Record.Recording.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18C028AF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Record<A, B>.Recording<>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Record<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in Record<A, B>.Recording.State()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Record<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Record<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Record<A, B>.Recording<>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized Record.Recording<>.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t Publishers.Filter.init(upstream:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.Filter.init(upstream:isIncluded:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Filter, a6);
}

uint64_t Publisher.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.filter(_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter, a5);
}

uint64_t Publishers.TryFilter.init(upstream:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.Filter.init(upstream:isIncluded:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFilter, a6);
}

uint64_t Publishers.Filter.init(upstream:isIncluded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  BOOL v14 = (void *)(a7 + *(int *)(result + 36));
  *BOOL v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Filter.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unsigned int v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Filter.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x7265746C6946;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Filter<A>.Inner<A1>()
{
  return 0x7265746C6946;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Filter<A>.Inner<A1>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 56));
  return result;
}

uint64_t Publishers.TryFilter.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 24);
  v16[0] = *(void *)(a2 + 16);
  uint64_t v8 = v16[0];
  v16[1] = a3;
  void v16[2] = v9;
  void v16[3] = a4;
  uint64_t v10 = type metadata accessor for Publishers.TryFilter.Inner();
  uint64_t v11 = (uint64_t *)(v5 + *(int *)(a2 + 36));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  swift_allocObject();
  swift_retain();
  v16[0] = specialized Publishers.TryFilter.Inner.init(downstream:filter:)(a1, v12, v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v16, v8, v10, v9, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.TryFilter.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.TryFilter.Inner.description.getter()
{
  return 0x65746C6946797254;
}

uint64_t Publishers.TryFilter.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v10);
  int v5 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7;
  if (v5 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion();

  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.TryFilter.Inner.__deallocating_deinit()
{
  uint64_t v0 = FilterProducer.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryFilter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryFilter.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Filter.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  unsigned int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  int v19 = (uint64_t (**)(uint64_t))(a4 + *(int *)(type metadata accessor for Publishers.Filter() + 36));
  char *v19 = partial apply for closure #1 in Publishers.Filter.filter(_:);
  v19[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.Filter.filter(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  char v11 = a2(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, AssociatedTypeWitness);
  if (v11) {
    char v12 = a4(v10);
  }
  else {
    char v12 = 0;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v12 & 1;
}

uint64_t Publishers.Filter.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  unsigned int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  int v19 = (uint64_t (**)(uint64_t))(a4 + *(int *)(type metadata accessor for Publishers.TryFilter() + 36));
  char *v19 = partial apply for closure #1 in Publishers.Filter.tryFilter(_:);
  v19[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  unsigned int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  int v19 = (uint64_t (**)(uint64_t))(a4 + *(int *)(type metadata accessor for Publishers.TryFilter() + 36));
  char *v19 = partial apply for closure #1 in Publishers.TryFilter.filter(_:);
  v19[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.TryFilter.tryFilter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(v13 + *(int *)(v12 + 36));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  unsigned int v17 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v18 = *(void *)(a3 + 24);
  *((void *)v17 + 2) = v8;
  *((void *)v17 + 3) = v18;
  *((void *)v17 + 4) = v16;
  *((void *)v17 + 5) = v15;
  *((void *)v17 + 6) = a1;
  *((void *)v17 + 7) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  int v19 = (uint64_t (**)(uint64_t))(a4 + *(int *)(type metadata accessor for Publishers.TryFilter() + 36));
  char *v19 = partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:);
  v19[1] = v17;
  swift_retain();
  return swift_retain();
}

uint64_t *specialized Publishers.TryFilter.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 280);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v13 - v8;
  (*(void (**)(char *))(v10 + 16))((char *)v13 - v8);
  char v11 = (void *)swift_allocObject();
  void v11[2] = v6[34];
  _OWORD v11[3] = v7;
  void v11[4] = v6[36];
  void v11[5] = v6[37];
  v11[6] = a2;
  v11[7] = a3;
  v13[0] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error);
  v13[1] = v11;
  return FilterProducer.init(downstream:filter:)((uint64_t)v9, (uint64_t)v13);
}

uint64_t partial apply for closure #1 in Publishers.Filter.filter(_:)(uint64_t a1)
{
  return closure #1 in Publishers.Filter.filter(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(char *))(v1 + 48));
}

uint64_t partial apply for closure #1 in Publishers.Filter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
  if ((*(uint64_t (**)(void))(v1 + 32))()) {
    return v3(a1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.filter(_:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  char v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (v2 || (v5 & 1) == 0) {
    return 0;
  }
  else {
    return v4(a1) & 1;
  }
}

uint64_t partial apply for closure #1 in Publishers.TryFilter.tryFilter(_:)(uint64_t a1)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 48);
  char v5 = (*(uint64_t (**)(void))(v1 + 32))();
  if (!v2)
  {
    if (v5) {
      char v5 = v4(a1);
    }
    else {
      char v5 = 0;
    }
  }
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for Publishers.Filter(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C029D80);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Filter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C029F74);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.TryFilter.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Filter.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  void *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Filter.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  _OWORD *v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_18C02A2F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(unsigned char *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)(*(uint64_t (**)(void))(v1 + 48), a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v27[1] = a8;
  uint64_t v17 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v21, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9, v19, a7);
  uint64_t v22 = (int *)type metadata accessor for Publishers.Breakpoint();
  int v23 = (uint64_t *)(a9 + v22[9]);
  *int v23 = a1;
  v23[1] = a2;
  int v24 = (uint64_t *)(a9 + v22[10]);
  *int v24 = a3;
  v24[1] = a4;
  int v25 = (uint64_t *)(a9 + v22[11]);
  *int v25 = a5;
  v25[1] = a6;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a1);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a3);
  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(a5);
}

int *Publishers.Breakpoint.init(upstream:receiveSubscription:receiveOutput:receiveCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9, a1, a8);
  uint64_t result = (int *)type metadata accessor for Publishers.Breakpoint();
  uint64_t v17 = (void *)(a9 + result[9]);
  *uint64_t v17 = a2;
  v17[1] = a3;
  uint64_t v18 = (void *)(a9 + result[10]);
  *uint64_t v18 = a4;
  v18[1] = a5;
  uint64_t v19 = (void *)(a9 + result[11]);
  void *v19 = a6;
  v19[1] = a7;
  return result;
}

uint64_t type metadata accessor for Publishers.Breakpoint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.breakpointOnError()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  Publisher.breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)(0, 0, 0, 0, (uint64_t)partial apply for closure #1 in Publisher.breakpointOnError(), v6, a1, a2, a3);

  return swift_release();
}

BOOL closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Subscribers.Completion();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a1, v3);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v6, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t sub_18C02A7AC()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in Publisher.breakpointOnError()(uint64_t a1)
{
  return closure #1 in Publisher.breakpointOnError()(a1);
}

uint64_t Publishers.Breakpoint.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Breakpoint.receiveSubscription.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveOutput.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receiveCompletion.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.Breakpoint.receive<A>(subscriber:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v35 = *(void *)(v10 + 16);
  char v32 = v9;
  uint64_t v33 = v11;
  uint64_t v37 = v35;
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  uint64_t v40 = v13;
  uint64_t v34 = type metadata accessor for Publishers.Breakpoint.Inner();
  uint64_t v36 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  int v15 = (char *)&v31 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  uint64_t v16 = a2[10];
  uint64_t v17 = (uint64_t *)(v3 + a2[9]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = *(void *)(v3 + v16);
  uint64_t v21 = *(void *)(v3 + v16 + 8);
  uint64_t v22 = (uint64_t *)(v3 + a2[11]);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v19);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v20);
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v24);
  uint64_t v25 = v33;
  uint64_t v26 = v21;
  uint64_t v27 = v35;
  Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)((uint64_t)v32, v19, v18, v20, v26, v24, v23, (uint64_t)v15, a3);
  uint64_t v28 = v34;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v15, v27, v28, v25, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v15, v28);
}

uint64_t type metadata accessor for Publishers.Breakpoint.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.Breakpoint.Inner.init(downstream:receiveSubscription:receiveOutput:receiveCompletion:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(a8, a1, a9);
  int v15 = (int *)type metadata accessor for Publishers.Breakpoint.Inner();
  uint64_t v16 = (void *)(a8 + v15[13]);
  *uint64_t v16 = a2;
  v16[1] = a3;
  uint64_t v17 = (void *)(a8 + v15[14]);
  *uint64_t v17 = a4;
  v17[1] = a5;
  uint64_t v18 = (void *)(a8 + v15[15]);
  *uint64_t v18 = a6;
  v18[1] = a7;
  uint64_t v19 = v15[16];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v20 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v21 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v20);
    *(void *)(a8 + v19) = v21;
  }
}

uint64_t Publishers.Breakpoint.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Breakpoint.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x696F706B61657242;
  a1[1] = 0xEA0000000000746ELL;
}

uint64_t Publishers.Breakpoint.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 52));
  if (v5)
  {
    swift_retain();
    if (v5(a1)) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 40);
  uint64_t v7 = *(void *)(a2 + 24);

  return v6(a1, v7);
}

uint64_t Publishers.Breakpoint.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 56));
  if (v5)
  {
    swift_retain();
    if (v5(a1)) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 48);
  uint64_t v7 = *(void *)(a2 + 24);

  return v6(a1, v7);
}

uint64_t Publishers.Breakpoint.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + *(int *)(a2 + 60));
  if (v5)
  {
    swift_retain();
    if (v5(a1)) {
      raise(5);
    }
    _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v5);
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 56);
  uint64_t v7 = *(void *)(a2 + 24);

  return v6(a1, v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Breakpoint<A>.Inner<A1>()
{
  return 0x696F706B61657242;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Breakpoint<A>.Inner<A1>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Breakpoint<A>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return Publishers.Breakpoint.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t type metadata completion function for Publishers.Breakpoint()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }
    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)unint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v15;
      swift_retain();
    }
    unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
      return v4;
    }
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.Breakpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      void *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      void *v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    return a1;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v20 = v18[1];
  *unint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (uint64_t *)((v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = *v14;
  if ((unint64_t)*v14 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = v14[1];
    *(void *)unint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      void *v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      void *v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      return a1;
    }
LABEL_21:
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    return a1;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v20 = v18[1];
  *unint64_t v17 = v19;
  v17[1] = v20;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C02BA50);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Breakpoint(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                void *v19 = 0;
                v19[1] = 0;
                *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                void *v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C02BC6CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.Breakpoint.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Breakpoint.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }
    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)unint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v15;
      swift_retain();
    }
    unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v18 = *(void *)(v17 + 8);
      *(void *)unint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      swift_retain();
    }
    *(void *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t destroy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  uint64_t v6 = (void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v6 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }
  *(void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      void *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      void *v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v20 = v18[1];
  *unint64_t v17 = v19;
  v17[1] = v20;
  swift_retain();
  swift_release();
LABEL_22:
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
  }
  *(void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Breakpoint.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      void *v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      void *v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    goto LABEL_22;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v20 = v18[1];
  *unint64_t v17 = v19;
  v17[1] = v20;
  swift_release();
LABEL_22:
  *(void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Breakpoint.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C02C710);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Breakpoint.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                void *v19 = 0;
                v19[1] = 0;
                *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                void *v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C02C934);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.WeakSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t Publishers.WeakSubscriber.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v12 = v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  long long v9 = *(_OWORD *)(v1 + 96);
  v11[0] = *(_OWORD *)(v1 + 80);
  v11[1] = v9;
  type metadata accessor for Publishers.WeakSubscriber();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.WeakSubscriber.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "WeakSubscriber");
  *(unsigned char *)(a1 + 15) = -18;
}

uint64_t Publishers.WeakSubscriber.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = MEMORY[0x18C13C570](v1 + 2);
  if (v4)
  {
    uint64_t v5 = v4;
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    outlined init with take of Subscription?((uint64_t)v10, (uint64_t)v9);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v9, (uint64_t)(v1 + 3));
    swift_endAccess();
    v10[0] = v5;
    (*(void (**)(void *, void))(*(void *)(v3 + 104) + 40))(a1, *(void *)(v3 + 88));
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
}

uint64_t Publishers.WeakSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = MEMORY[0x18C13C570](v1 + 2);
  if (v4)
  {
    v13[0] = v4;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 48))(a1, *(void *)(v3 + 88));
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v6 = (uint64_t)(v1 + 3);
    swift_beginAccess();
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v10);
    if (*((void *)&v11 + 1))
    {
      outlined init with take of Subscription(&v10, (uint64_t)v13);
      uint64_t v8 = v14;
      uint64_t v7 = v15;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
      uint64_t v12 = 0;
      long long v10 = 0u;
      long long v11 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v10, v6);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v10);
    }
    return 0;
  }
  return v5;
}

uint64_t Publishers.WeakSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)(v1 + 3);
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v12, (uint64_t)(v1 + 3));
  swift_endAccess();
  uint64_t v5 = MEMORY[0x18C13C570](v1 + 2);
  if (v5)
  {
    *(void *)&long long v12 = v5;
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 104) + 56))(a1, *(void *)(v3 + 88));
    return swift_unknownObjectRelease();
  }
  else
  {
    outlined init with copy of Subscription?((uint64_t)(v1 + 3), (uint64_t)&v9);
    if (*((void *)&v10 + 1))
    {
      outlined init with take of Subscription(&v9, (uint64_t)&v12);
      uint64_t v8 = *((void *)&v13 + 1);
      uint64_t v7 = v14;
      __swift_project_boxed_opaque_existential_1(&v12, *((uint64_t *)&v13 + 1));
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
      uint64_t v11 = 0;
      long long v9 = 0u;
      long long v10 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v9, v4);
      swift_endAccess();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
    }
    else
    {
      return outlined destroy of Subscription?((uint64_t)&v9);
    }
  }
}

uint64_t Publishers.WeakSubscriber.deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 24);
  return v0;
}

uint64_t Publishers.WeakSubscriber.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of Subscription?(v0 + 24);

  return MEMORY[0x1F4186488](v0, 64, 7);
}

uint64_t type metadata accessor for Publishers.WeakSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.WeakSubscriber<A, B>(void *a1)
{
  return Publishers.WeakSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1)
{
  return Publishers.WeakSubscriber.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.WeakSubscriber<A, B>()
{
  return 0x736275536B616557;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.WeakSubscriber<A, B>()
{
  return Publishers.WeakSubscriber.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.WeakSubscriber<A, B>(uint64_t a1@<X8>)
{
}

uint64_t outlined init with take of Subscription?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Deferred.createPublisher.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

void *assignWithCopy for Deferred(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Deferred(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Deferred(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Deferred(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Publishers.AllSatisfy.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.AllSatisfy.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.AllSatisfy, a6);
}

uint64_t Publisher.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.allSatisfy(_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy, a5);
}

uint64_t Publishers.TryAllSatisfy.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.AllSatisfy.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryAllSatisfy, a6);
}

uint64_t Publishers.AllSatisfy.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryAllSatisfy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.AllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.AllSatisfy.Inner, (uint64_t)&unk_1ED997618, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

uint64_t type metadata accessor for Publishers.AllSatisfy.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.AllSatisfy.Inner.description.getter()
{
  return 0x73697461536C6C41;
}

uint64_t Publishers.AllSatisfy.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v2);
  if (v2[0])
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_beginAccess();
    *(unsigned char *)(v0 + 16) = 0;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.AllSatisfy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryAllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.AllSatisfy.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryAllSatisfy.Inner, (uint64_t)&unk_1ED9975F0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.AllSatisfy.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v10 = v7;
  uint64_t v14 = *(void *)(a2 + 24);
  v21[0] = *(void *)(a2 + 16);
  uint64_t v13 = v21[0];
  v21[1] = a3;
  long long v21[2] = v14;
  void v21[3] = a4;
  uint64_t v15 = a5(0, v21);
  int v16 = (uint64_t *)(v10 + *(int *)(a2 + 36));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_allocObject();
  swift_retain();
  v21[0] = specialized Publishers.AllSatisfy.Inner.init(downstream:initial:reduce:)(a1, 1, v17, v18, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v21, v13, v15, v14, WitnessTable);
  return swift_release();
}

uint64_t Publishers.TryAllSatisfy.Inner.description.getter()
{
  return 0x61536C6C41797254;
}

uint64_t Publishers.TryAllSatisfy.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v2);
  if (v2[0]) {
    return 0;
  }
  swift_beginAccess();
  uint64_t result = 0;
  *(unsigned char *)(v0 + 16) = 0;
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryAllSatisfy.Inner.receive(newValue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Publishers.TryAllSatisfy.Inner.receive(newValue:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryAllSatisfy<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryAllSatisfy.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryAllSatisfy.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.AllSatisfy.Inner.init(downstream:initial:reduce:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void **)v6;
  uint64_t v12 = *(void *)(*(void *)v6 + 448);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v19[-1] - v13;
  (*(void (**)(char *))(v15 + 16))((char *)&v19[-1] - v13);
  char v20 = a2;
  int v16 = (void *)swift_allocObject();
  void v16[2] = v11[55];
  void v16[3] = v12;
  void v16[4] = v11[57];
  void v16[5] = v11[58];
  v16[6] = a3;
  v16[7] = a4;
  v19[0] = a6;
  v19[1] = v16;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)&v20, (uint64_t)v19);
}

uint64_t getEnumTagSinglePayload for Publishers.AllSatisfy(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C02DA30);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.AllSatisfy(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C02DC24);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C02DC4C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4FBC430];
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t key path getter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = *a1;
  long long v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for Subscribers.Sink.receiveValue : <A, B>Subscribers.Sink<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  uint64_t v10 = *a2;
  swift_beginAccess();
  *(void *)(v10 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  *(void *)(v10 + 24) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveValue.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t key path getter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = *a1;
  long long v11 = *(_OWORD *)(a3 + a2 - 24);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a4[1] = v9;
  return swift_retain();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t key path setter for Subscribers.Sink.receiveCompletion : <A, B>Subscribers.Sink<A, B>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  uint64_t v10 = *a2;
  swift_beginAccess();
  *(void *)(v10 + 32) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ());
  *(void *)(v10 + 40) = v9;
  swift_retain();
  return swift_release();
}

uint64_t Subscribers.Sink.receiveCompletion.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t Subscribers.Sink.description.getter()
{
  return 1802398035;
}

uint64_t Subscribers.Sink.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Subscribers.Sink.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 1802398035;
  a1[1] = 0xE400000000000000;
}

uint64_t Subscribers.Sink.init(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(unsigned char *)(v4 + 88) = 2;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  return v4;
}

uint64_t sub_18C02E2A8()
{
  return swift_deallocObject();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Sink<A, B>()
{
  return 1802398035;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscribers.Sink<A, B>()
{
  return Subscribers.Sink.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscribers.Sink<A, B>(void *a1@<X8>)
{
}

uint64_t sub_18C02E30C()
{
  return 24;
}

__n128 sub_18C02E318(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_18C02E334()
{
  return 24;
}

__n128 sub_18C02E340(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for Subscribers.Sink(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Subscribers.Sink);
}

uint64_t dispatch thunk of Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_18C02E380()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())(a1, *(uint64_t (**)(void))(v1 + 40));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_18C02E3F0()
{
  return swift_deallocObject();
}

uint64_t sub_18C02E400()
{
  return swift_deallocObject();
}

uint64_t sub_18C02E410()
{
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t AnySubscriberBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnySubscriberBase.init()()
{
  return v0;
}

uint64_t AnySubscriberBase.deinit()
{
  return v0;
}

uint64_t AnySubscriberBase.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

void AnySubscriberBase.receive(subscription:)()
{
}

void AnySubscriberBase.receive(_:)()
{
}

void AnySubscriberBase.receive(completion:)()
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AnySubscriberBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t AnySubscriberBox.base.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 136) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 152));
}

uint64_t AnySubscriberBox.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 136) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 152), a1);
  return v1;
}

uint64_t AnySubscriberBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
}

uint64_t AnySubscriberBox.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  return v0;
}

uint64_t AnySubscriberBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t AnySubscriberBox.receive(subscription:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 40))(a1, *(void *)(*(void *)v1 + 136));
}

uint64_t AnySubscriberBox.receive(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 144) + 56))(a1, *(void *)(*(void *)v1 + 136));
}

void AnySubscriberBox.__allocating_init()()
{
}

void AnySubscriberBox.init()()
{
}

uint64_t ClosureBasedAnySubscriber.receiveSubscriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveValueThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t ClosureBasedAnySubscriber.receiveCompletionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_retain();
  return v1;
}

void *ClosureBasedAnySubscriber.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  return result;
}

void *ClosureBasedAnySubscriber.init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v6[2] = a1;
  void v6[3] = a2;
  void v6[4] = a3;
  uint64_t v6[5] = a4;
  v6[6] = a5;
  v6[7] = a6;
  return v6;
}

uint64_t ClosureBasedAnySubscriber.__ivar_destroyer()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t ClosureBasedAnySubscriber.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ClosureBasedAnySubscriber.__deallocating_deinit()
{
  ClosureBasedAnySubscriber.deinit();

  return MEMORY[0x1F4186488](v0, 64, 7);
}

uint64_t ClosureBasedAnySubscriber.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t ClosureBasedAnySubscriber.receive(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t ClosureBasedAnySubscriber.receive(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

void ClosureBasedAnySubscriber.__allocating_init()()
{
}

void ClosureBasedAnySubscriber.init()()
{
}

uint64_t AnySubscriber.box.getter()
{
  return swift_retain();
}

uint64_t AnySubscriber.descriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.customMirrorThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t AnySubscriber.playgroundDescriptionThunk.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return v1;
}

void AnySubscriber.combineIdentifier.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

uint64_t AnySubscriber.description.getter()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AnySubscriber.customMirror.getter()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t AnySubscriber.playgroundDescription.getter()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v56 = a6;
  uint64_t v11 = *(void *)(a4 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v51 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v55 = (char *)&v48 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v52 = (char *)&v48 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  char v20 = (char *)&v48 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v57 = v11;
  unint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v21((char *)&v48 - v22, a1, v23);
  swift_getAssociatedConformanceWitness();
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  type metadata accessor for AnySubscriber();
  if (swift_dynamicCast())
  {
    uint64_t v24 = v62;
    uint64_t v25 = v63;
    uint64_t v26 = v64;
    uint64_t v27 = v65;
    uint64_t v29 = v66;
    uint64_t v28 = v67;
    uint64_t v30 = v68;
    uint64_t v31 = v57;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(a5 + 8) + 8))(&v69, a4);
    uint64_t v48 = a5;
    type metadata accessor for AnySubscriberBox();
    v21(v20, a1, a4);
    uint64_t v50 = AnySubscriberBox.__allocating_init(_:)((uint64_t)v20);
    v21(v52, a1, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
    char v32 = v20;
    if (swift_dynamicCast())
    {
      outlined init with take of Subscription(&v58, (uint64_t)v61);
      outlined init with take of Subscription(v61, (uint64_t)&v58);
      uint64_t v52 = (char *)swift_allocObject();
      outlined init with take of Subscription(&v58, (uint64_t)(v52 + 16));
      uint64_t v33 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    }
    else
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      outlined destroy of CustomStringConvertible?((uint64_t)&v58, &demangling cache variable for type metadata for CustomStringConvertible?);
      swift_getDynamicType();
      uint64_t v34 = _typeName(_:qualified:)();
      uint64_t v36 = v35;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v34;
      *(void *)(v37 + 24) = v36;
      uint64_t v52 = (char *)v37;
      uint64_t v33 = partial apply for closure #2 in AnySubscriber.init<A>(_:);
    }
    uint64_t v49 = v33;
    uint64_t v31 = v57;
    v21(v32, a1, a4);
    unint64_t v38 = (*(unsigned __int8 *)(v31 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v29 = (char *)swift_allocObject();
    uint64_t v39 = v54;
    *((void *)v29 + 2) = v53;
    *((void *)v29 + 3) = v39;
    uint64_t v40 = v48;
    *((void *)v29 + 4) = a4;
    *((void *)v29 + 5) = v40;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v29[v38], v32, a4);
    v21(v55, a1, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
    if (swift_dynamicCast())
    {
      outlined init with take of Subscription(&v58, (uint64_t)v61);
      outlined init with take of Subscription(v61, (uint64_t)&v58);
      uint64_t v30 = swift_allocObject();
      outlined init with take of Subscription(&v58, v30 + 16);
      uint64_t v41 = (uint64_t (*)@<X0>(uint64_t *@<X8>))partial apply for closure #4 in AnySubscriber.init<A>(_:);
    }
    else
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      outlined destroy of CustomStringConvertible?((uint64_t)&v58, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
      v21(v51, a1, a4);
      if (swift_dynamicCast())
      {
        outlined init with take of Subscription(&v58, (uint64_t)v61);
        outlined init with take of Subscription(v61, (uint64_t)&v58);
        uint64_t v30 = swift_allocObject();
        outlined init with take of Subscription(&v58, v30 + 16);
        uint64_t v41 = partial apply for closure #5 in AnySubscriber.init<A>(_:);
      }
      else
      {
        uint64_t v60 = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v58, &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        uint64_t v42 = _typeName(_:qualified:)();
        uint64_t v44 = v43;
        uint64_t v30 = swift_allocObject();
        *(void *)(v30 + 16) = v42;
        *(void *)(v30 + 24) = v44;
        uint64_t v41 = partial apply for closure #6 in AnySubscriber.init<A>(_:);
      }
    }
    uint64_t v28 = v41;
    uint64_t v27 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
    uint64_t v24 = v50;
    uint64_t v26 = v52;
    uint64_t v25 = v49;
  }
  uint64_t v45 = v69;
  uint64_t v46 = v56;
  uint64_t *v56 = v24;
  v46[1] = (uint64_t)v25;
  v46[2] = (uint64_t)v26;
  v46[3] = (uint64_t)v27;
  v46[4] = (uint64_t)v29;
  v46[5] = (uint64_t)v28;
  v46[6] = v30;
  v46[7] = v45;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(a1, a4);
}

uint64_t closure #1 in AnySubscriber.init<A>(_:)(void *a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t closure #2 in AnySubscriber.init<A>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v17((char *)v21 - v18, a1, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of Subscription(v21, (uint64_t)v23);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    outlined destroy of CustomStringConvertible?((uint64_t)v21, &demangling cache variable for type metadata for CustomReflectable?);
    v17(v16, a1, a4);
    uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
    default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v8);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t closure #4 in AnySubscriber.init<A>(_:)(void *a1)
{
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t closure #5 in AnySubscriber.init<A>(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a2[3] = MEMORY[0x1E4FBB1A0];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t closure #6 in AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = MEMORY[0x1E4FBB1A0];
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t AnySubscriber.init<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SubjectSubscriber();
  uint64_t v7 = specialized SubjectSubscriber.__allocating_init(_:)();
  *(void *)&long long v19 = v7;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for AnySubscriber();
  swift_retain();
  if (swift_dynamicCast())
  {
    uint64_t v8 = v22;
    uint64_t v9 = v23;
    uint64_t v11 = v24;
    uint64_t v10 = v25;
    uint64_t v13 = v26;
    uint64_t v12 = v27;
    uint64_t v14 = v28;
    uint64_t v15 = v29;
    swift_unknownObjectRelease();
    uint64_t result = swift_release();
  }
  else
  {
    CustomCombineIdentifierConvertible<>.combineIdentifier.getter(&v29);
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for AnySubscriberBox();
    *(void *)&long long v19 = v7;
    uint64_t v8 = AnySubscriberBox.__allocating_init(_:)((uint64_t)&v19);
    uint64_t v22 = v8;
    uint64_t v20 = v6;
    uint64_t v21 = swift_getWitnessTable();
    *(void *)&long long v19 = v7;
    outlined init with take of Subscription(&v19, (uint64_t)v18);
    uint64_t v11 = swift_allocObject();
    outlined init with take of Subscription(v18, v11 + 16);
    uint64_t v9 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    uint64_t v23 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
    uint64_t v24 = v11;
    uint64_t v13 = (void *)swift_allocObject();
    void v13[2] = a1;
    void v13[3] = a2;
    v13[4] = v6;
    void v13[5] = WitnessTable;
    v13[6] = v7;
    uint64_t v10 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    uint64_t v25 = closure #3 in AnySubscriber.init<A>(_:)partial apply;
    uint64_t v26 = v13;
    uint64_t v20 = v6;
    uint64_t v21 = swift_getWitnessTable();
    *(void *)&long long v19 = v7;
    outlined init with take of Subscription(&v19, (uint64_t)v18);
    uint64_t v14 = swift_allocObject();
    outlined init with take of Subscription(v18, v14 + 16);
    swift_retain_n();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v12 = partial apply for closure #4 in AnySubscriber.init<A>(_:);
    uint64_t v15 = v29;
  }
  *a3 = v8;
  a3[1] = (uint64_t)v9;
  a3[2] = v11;
  a3[3] = (uint64_t)v10;
  a3[4] = (uint64_t)v13;
  a3[5] = (uint64_t)v12;
  a3[6] = v14;
  a3[7] = v15;
  return result;
}

void AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (a1)
  {
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a1;
    *(void *)(v18 + 24) = a2;
    long long v19 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> ();
  }
  else
  {
    long long v19 = (uint64_t (*)())specialized closure #1 in Publisher.multicast<A>(subject:);
    uint64_t v18 = 0;
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = (void *)swift_allocObject();
  long long v21[2] = a7;
  void v21[3] = a8;
  void v21[4] = a10;
  if (a3)
  {
    void v21[5] = a3;
    v21[6] = a4;
    uint64_t v22 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand);
  }
  else
  {
    uint64_t v22 = partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
  }
  uint64_t v23 = v22;
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = a7;
  void v24[3] = a8;
  v24[4] = a10;
  v24[5] = v23;
  v24[6] = v21;
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = a7;
  void v25[3] = a8;
  Swift::Int v25[4] = a10;
  if (a5)
  {
    v25[5] = a5;
    v25[6] = a6;
    uint64_t v26 = _s7Combine11SubscribersO10CompletionOy_q_GIegn_AFytIegnr_s5ErrorR_r0_lTRTA_0;
  }
  else
  {
    uint64_t v26 = specialized closure #1 in Publisher.multicast<A>(subject:);
  }
  uint64_t v27 = v26;
  type metadata accessor for ClosureBasedAnySubscriber();
  uint64_t v28 = (void *)swift_allocObject();
  void v28[2] = a7;
  void v28[3] = a8;
  uint64_t v28[4] = a10;
  void v28[5] = v27;
  v28[6] = v25;
  uint64_t v29 = (void *)swift_allocObject();
  void v29[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ());
  v29[3] = v20;
  void v29[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand);
  void v29[5] = v24;
  v29[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  v29[7] = v28;
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v30 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v31 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v30);
    *a9 = v29;
    a9[1] = closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[2] = 0;
    a9[3] = closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[4] = 0;
    a9[5] = closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:);
    a9[6] = 0;
    a9[7] = v31;
  }
}

unint64_t closure #4 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return 0xD000000000000017;
}

uint64_t closure #5 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)()
{
  return Mirror.init(reflecting:)();
}

void closure #6 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000017;
  a1[1] = 0x800000018C0C4160;
}

uint64_t AnySubscriber.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t AnySubscriber.receive(_:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t AnySubscriber.receive(completion:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t _ReferencedBasedAnySubscriber.description.getter()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _ReferencedBasedAnySubscriber.customMirror.getter()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t _ReferencedBasedAnySubscriber.playgroundDescription.getter()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t _ReferencedBasedAnySubscriber.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186488](v0, 80, 7);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*(void *)v1 + 16) + 112);
  swift_unknownObjectRetain();
  v3(a1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)v1 + 16) + 120);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(a1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance _ReferencedBasedAnySubscriber<A, B>(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t))(**(void **)(*(void *)v1 + 16) + 128);
  swift_unknownObjectRetain();
  v3(a1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.description.getter();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.customMirror.getter();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance _ReferencedBasedAnySubscriber<A, B>()
{
  return _ReferencedBasedAnySubscriber.playgroundDescription.getter();
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance _ReferencedBasedAnySubscriber<A, B>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 72);
}

void specialized AnySubscriberBox.init()()
{
}

void specialized ClosureBasedAnySubscriber.init()()
{
}

uint64_t sub_18C0301A4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySubscriber.init<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_18C03020C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)()
{
  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)v0+ ((*(unsigned __int8 *)(*(void *)(v0[4] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[4] - 8) + 80)), v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 16), *(void *)(v1 + 40));
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_18C030348()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_18C0303CC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)partial apply()
{
  return closure #3 in AnySubscriber.init<A>(_:)((uint64_t)(v0 + 6), v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t sub_18C030460()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_18C0304C0()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in implicit closure #2 in AnySubscriber.init(receiveSubscription:receiveValue:receiveCompletion:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Subscribers.Demand)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 40))(&v2);
  return v2;
}

uint64_t sub_18C030510()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for ClosureBasedAnySubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Subscribers.Demand)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscription) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t method lookup function for AnySubscriberBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnySubscriberBase);
}

uint64_t dispatch thunk of AnySubscriberBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(subscription:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AnySubscriberBase.receive(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t method lookup function for AnySubscriberBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnySubscriberBox);
}

uint64_t dispatch thunk of AnySubscriberBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t type metadata completion function for ClosureBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ClosureBasedAnySubscriber(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClosureBasedAnySubscriber);
}

uint64_t dispatch thunk of ClosureBasedAnySubscriber.__allocating_init(_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

void *assignWithCopy for AnySubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_retain();
  swift_release();
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for AnySubscriber(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v4;
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t type metadata completion function for _ReferencedBasedAnySubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _ReferencedBasedAnySubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18C030858()
{
  return swift_deallocObject();
}

uint64_t Publishers.RemoveDuplicates.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.RemoveDuplicates.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.RemoveDuplicates, a6);
}

uint64_t Publisher.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  uint64_t v14 = (uint64_t (*)())swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a1;
  *((void *)v14 + 5) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  uint64_t v15 = (uint64_t (**)())(a5 + *(int *)(type metadata accessor for Publishers.TryRemoveDuplicates() + 36));
  *uint64_t v15 = partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:);
  v15[1] = v14;
  return swift_retain();
}

uint64_t sub_18C0309C4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.tryRemoveDuplicates(by:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t Publishers.TryRemoveDuplicates.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.RemoveDuplicates.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryRemoveDuplicates, a6);
}

uint64_t Publishers.RemoveDuplicates.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryRemoveDuplicates()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t Publishers.RemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000010;
}

uint64_t Publishers.TryRemoveDuplicates.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.RemoveDuplicates.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryRemoveDuplicates.Inner, (uint64_t)&unk_1ED997AF0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

unint64_t Publishers.TryRemoveDuplicates.Inner.description.getter()
{
  return 0xD000000000000013;
}

uint64_t Publishers.RemoveDuplicates.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BABB0;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = (uint64_t)v0 + *(void *)(v1 + 144);
  uint64_t v10 = *(void *)(v1 + 280);
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(void *)(v8 + 80) = 1953718636;
  *(void *)(v8 + 88) = 0xE400000000000000;
  uint64_t v12 = (uint64_t)v0 + *(void *)(*v0 + 304);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v8 + 120) = v13;
  uint64_t v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v14, v12, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.TryRemoveDuplicates.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t v3 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = (uint64_t)v2 + *(void *)(v3 + 304);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v16, v5);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness);
  uint64_t v26 = v5;
  if (v17 == 1)
  {
    uint64_t v18 = v5;
    uint64_t v19 = v25;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v18);
    uint64_t v20 = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
    uint64_t v19 = v25;
    ((void (*)(void *__return_ptr, char *, uint64_t))v2[2])(v27, v15, v25);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
    uint64_t v20 = v24;
    if (LOBYTE(v27[0]) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v24, 1, 1, AssociatedTypeWitness);
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      goto LABEL_4;
    }
  }
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v9, v19, AssociatedTypeWitness);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
  v22(v9, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v16, v9, v26);
  swift_endAccess();
  v21(v20, v19, AssociatedTypeWitness);
  v22(v20, 0, 1, AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
LABEL_4:
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.RemoveDuplicates.Inner.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 304);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryRemoveDuplicates<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryRemoveDuplicates.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryRemoveDuplicates.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.RemoveDuplicates(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0314C8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.RemoveDuplicates(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C0316BCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(unsigned char *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)(*(uint64_t (**)(void))(v1 + 48), a1);
}

uint64_t sub_18C031708()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publishers.Decode.init(upstream:decoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  uint64_t v16 = *(void *)(a5 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a3;
  *((void *)v18 + 3) = a4;
  *((void *)v18 + 4) = a5;
  *((void *)v18 + 5) = a6;
  *((void *)v18 + 6) = a7;
  *((void *)v18 + 7) = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v18[v17], a2, a5);
  uint64_t result = type metadata accessor for Publishers.Decode();
  uint64_t v20 = (uint64_t (**)(uint64_t))(a9 + *(int *)(result + 68));
  char *v20 = partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:);
  v20[1] = (uint64_t (*)(uint64_t))v18;
  return result;
}

uint64_t sub_18C0318A0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Decode.init(upstream:decoder:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(v1[7] + 16))(v1[3], a1, v1[3], v1[6]);
}

uint64_t type metadata accessor for Publishers.Decode()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Decode.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 56);
  long long v23 = *(_OWORD *)(v11 + 16);
  long long v24 = v23;
  uint64_t v25 = v12;
  uint64_t v26 = v14;
  long long v22 = *(_OWORD *)(v11 + 40);
  long long v27 = v22;
  uint64_t v28 = v13;
  uint64_t v29 = v15;
  uint64_t v16 = type metadata accessor for Publishers.Decode.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  unint64_t v17 = (uint64_t *)(v4 + *(int *)(a2 + 68));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_allocObject();
  swift_retain();
  *(void *)&long long v24 = Publishers.Decode.Inner.init(_:decode:)((uint64_t)v10, v18, v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v24, v23, v16, v22, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Decode.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Decode.Inner.__allocating_init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.Decode.Inner.__allocating_init(_:decode:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Decode.Inner.init(_:decode:));
}

void Publishers.Decode.Inner.customMirror.getter()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (_OWORD *)*v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unsigned int v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + v1[20]));
  long long v27 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBBA0;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (uint64_t)v0 + *(void *)(*v0 + 144);
  uint64_t v11 = v1[13];
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0x64656873696E6966;
  *(void *)(v9 + 88) = 0xE800000000000000;
  uint64_t v13 = *v0;
  uint64_t v14 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v9 + 96) = *((unsigned char *)v0 + *(void *)(*v0 + 168));
  *(void *)(v9 + 120) = v14;
  *(void *)(v9 + 128) = 0xD000000000000014;
  *(void *)(v9 + 136) = 0x800000018C0C4210;
  *(void *)(v9 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v13;
  uint64_t v17 = v15 + 16;
  *(void *)(v9 + 144) = v15;
  uint64_t v18 = (uint64_t)v0 + *(void *)(v16 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v18, v17);
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  uint64_t v20 = v1[12];
  long long v22 = v2[5];
  uint64_t v23 = v20;
  uint64_t v24 = v11;
  long long v21 = v2[8];
  long long v25 = v2[7];
  long long v26 = v21;
  type metadata accessor for Publishers.Decode.Inner();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 160)));
}

void Publishers.Decode.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x65646F636544;
  a1[1] = 0xE600000000000000;
}

uint64_t *Publishers.Decode.Inner.init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 160);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *((unsigned char *)v3 + *(void *)(*v3 + 168)) = 0;
  uint64_t v10 = (uint64_t)v3 + *(void *)(*v3 + 176);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 104) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 144), a1);
  uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 152));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Decode.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 104) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 144));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 176));
  return v0;
}

uint64_t Publishers.Decode.Inner.__deallocating_deinit()
{
  return Publishers.Decode.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.Decode.Inner.deinit);
}

uint64_t Publishers.Decode.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  if ((*((unsigned char *)v1 + *(void *)(*v1 + 168)) & 1) != 0
    || (uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 176),
        swift_beginAccess(),
        outlined init with copy of Subscription?(v5, (uint64_t)&v14),
        uint64_t v6 = v16,
        outlined destroy of Subscription?((uint64_t)&v14),
        v6))
  {
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v14);
    outlined init with take of Subscription?((uint64_t)&v14, (uint64_t)v19);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v19, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v10 = *(void *)(v3 + 136);
    long long v11 = *(_OWORD *)(v3 + 80);
    uint64_t v15 = *(void *)(v3 + 96);
    long long v13 = *(_OWORD *)(v3 + 104);
    long long v14 = v11;
    long long v16 = v13;
    long long v17 = *(_OWORD *)(v3 + 120);
    uint64_t v18 = v10;
    *(void *)&long long v16 = type metadata accessor for Publishers.Decode.Inner();
    *((void *)&v16 + 1) = &protocol witness table for Publishers.Decode<A, B, C>.Inner<A1>;
    *(void *)&long long v14 = v1;
    uint64_t v12 = *(void (**)(long long *, void, uint64_t))(v10 + 40);
    swift_retain();
    v12(&v14, v13, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
}

uint64_t Publishers.Decode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v9 + 160));
  os_unfair_lock_lock(v10);
  char v11 = *((unsigned char *)v1 + *(void *)(*v1 + 168));
  os_unfair_lock_unlock(v10);
  uint64_t v12 = 0;
  if ((v11 & 1) == 0)
  {
    (*(void (**)(uint64_t))((char *)v2 + *(void *)(*v2 + 152)))(a1);
    uint64_t v12 = (*(uint64_t (**)(char *, void))(*(void *)(v4 + 136) + 48))(v8, *(void *)(v4 + 104));
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v12;
}

void Publishers.Decode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v17 - v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v17 - v10;
  uint64_t v12 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 160));
  os_unfair_lock_lock(v12);
  uint64_t v13 = *(void *)(*v1 + 168);
  if (*((unsigned char *)v1 + v13))
  {
    os_unfair_lock_unlock(v12);
  }
  else
  {
    uint64_t v18 = v3;
    *((unsigned char *)v1 + v13) = 1;
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    uint64_t v14 = (uint64_t)v1 + *(void *)(*v1 + 176);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v20, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      *(void *)&v20[0] = 0;
      (*(void (**)(_OWORD *, void))(*(void *)(v18 + 136) + 56))(v20, *(void *)(v18 + 104));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, AssociatedTypeWitness);
      uint64_t v15 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v16, v7, AssociatedTypeWitness);
      *(void *)&v20[0] = v15;
      (*(void (**)(_OWORD *, void))(*(void *)(v18 + 136) + 56))(v20, *(void *)(v18 + 104));
      MEMORY[0x18C13C260](v15);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    }
  }
}

uint64_t Publishers.Decode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 160));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }
}

void Publishers.Decode.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 168);
  if ((*(unsigned char *)(v0 + v2) & 1) == 0)
  {
    uint64_t v3 = v0 + *(void *)(*(void *)v0 + 176);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0;
      long long v6 = 0u;
      long long v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(unsigned char *)(v0 + v2) = 1;
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v6);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
  return Publishers.Decode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(void *a1)
{
  return Publishers.Decode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
  return Publishers.Decode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Decode<A, B, C>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
  return 0x65646F636544;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Decode<A, B, C>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Decode<A, B, C>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Decode<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Decode.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t Publishers.Encode.init(upstream:encoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a8, a1);
  uint64_t v15 = *(void *)(a4 - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a3;
  *((void *)v17 + 3) = a4;
  *((void *)v17 + 4) = a5;
  *((void *)v17 + 5) = a6;
  *((void *)v17 + 6) = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(&v17[v16], a2, a4);
  uint64_t result = type metadata accessor for Publishers.Encode();
  uint64_t v19 = (uint64_t (**)(uint64_t))(a8 + *(int *)(result + 60));
  void *v19 = partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:);
  v19[1] = (uint64_t (*)(uint64_t))v17;
  return result;
}

uint64_t sub_18C032ED0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Encode.init(upstream:encoder:)(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return v6(a1, AssociatedTypeWitness, v5, v3, v4);
}

uint64_t type metadata accessor for Publishers.Encode()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Encode.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 48);
  long long v13 = *(_OWORD *)(v11 + 16);
  long long v22 = *(_OWORD *)(v11 + 32);
  long long v23 = v13;
  long long v24 = v13;
  uint64_t v25 = v14;
  long long v26 = v22;
  uint64_t v27 = v15;
  uint64_t v28 = v12;
  uint64_t v16 = type metadata accessor for Publishers.Encode.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v17 = (uint64_t *)(v4 + *(int *)(a2 + 60));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_allocObject();
  swift_retain();
  *(void *)&long long v24 = Publishers.Encode.Inner.init(_:encode:)((uint64_t)v10, v18, v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v24, v23, v16, v22, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Encode.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Encode.Inner.__allocating_init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.Decode.Inner.__allocating_init(_:decode:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Publishers.Encode.Inner.init(_:encode:));
}

uint64_t Publishers.Decode.Inner.__allocating_init(_:decode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  return a4(a1, a2, a3);
}

void Publishers.Encode.Inner.customMirror.getter()
{
  uint64_t v1 = (_OWORD *)*v0;
  uint64_t v2 = (_OWORD *)*v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *((void *)v1 + 19)));
  long long v24 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBBA0;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v11 = *((void *)v1 + 12);
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0x64656873696E6966;
  *(void *)(v9 + 88) = 0xE800000000000000;
  uint64_t v13 = *v0;
  uint64_t v14 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v9 + 96) = *((unsigned char *)v0 + *(void *)(*v0 + 160));
  *(void *)(v9 + 120) = v14;
  *(void *)(v9 + 128) = 0xD000000000000014;
  *(void *)(v9 + 136) = 0x800000018C0C4210;
  *(void *)(v9 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v13;
  uint64_t v17 = v15 + 16;
  *(void *)(v9 + 144) = v15;
  uint64_t v18 = (uint64_t)v0 + *(void *)(v16 + 168);
  swift_beginAccess();
  outlined init with copy of Subscription?(v18, v17);
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  long long v20 = v2[5];
  uint64_t v21 = v11;
  long long v22 = *(_OWORD *)((char *)v2 + 104);
  long long v23 = *(_OWORD *)((char *)v2 + 120);
  type metadata accessor for Publishers.Encode.Inner();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 152)));
}

void Publishers.Encode.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x65646F636E45;
  a1[1] = 0xE600000000000000;
}

uint64_t *Publishers.Encode.Inner.init(_:encode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 152);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  *((unsigned char *)v3 + *(void *)(*v3 + 160)) = 0;
  uint64_t v10 = (uint64_t)v3 + *(void *)(*v3 + 168);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 136), a1);
  uint64_t v11 = (uint64_t *)((char *)v3 + *(void *)(*v3 + 144));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return v3;
}

uint64_t *Publishers.Encode.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_release();
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 168));
  return v0;
}

uint64_t Publishers.Encode.Inner.__deallocating_deinit()
{
  return Publishers.Decode.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.Encode.Inner.deinit);
}

uint64_t Publishers.Decode.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t Publishers.Encode.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 152));
  os_unfair_lock_lock(v4);
  if ((*((unsigned char *)v1 + *(void *)(*v1 + 160)) & 1) != 0
    || (uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 168),
        swift_beginAccess(),
        outlined init with copy of Subscription?(v5, (uint64_t)&v14),
        uint64_t v6 = *((void *)&v15 + 1),
        outlined destroy of Subscription?((uint64_t)&v14),
        v6))
  {
    os_unfair_lock_unlock(v4);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v14);
    outlined init with take of Subscription?((uint64_t)&v14, (uint64_t)v18);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v18, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    uint64_t v10 = *(_UNKNOWN ***)(v3 + 112);
    long long v13 = *(_OWORD *)(v3 + 96);
    long long v14 = *(_OWORD *)(v3 + 80);
    long long v15 = v13;
    uint64_t v16 = v10;
    long long v17 = *(_OWORD *)(v3 + 120);
    uint64_t v12 = v17;
    *((void *)&v15 + 1) = type metadata accessor for Publishers.Encode.Inner();
    uint64_t v16 = &protocol witness table for Publishers.Encode<A, B>.Inner<A1>;
    *(void *)&long long v14 = v1;
    uint64_t v11 = *(void (**)(long long *, void, uint64_t))(v12 + 40);
    swift_retain();
    v11(&v14, v13, v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
}

uint64_t Publishers.Encode.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v4 + 152));
  os_unfair_lock_lock(v10);
  char v11 = *((unsigned char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_unlock(v10);
  uint64_t v12 = 0;
  if ((v11 & 1) == 0)
  {
    (*(void (**)(uint64_t))((char *)v2 + *(void *)(*v2 + 144)))(a1);
    uint64_t v12 = (*(uint64_t (**)(char *, void))(*(void *)(v5 + 120) + 48))(v9, *(void *)(v5 + 96));
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  return v12;
}

void Publishers.Encode.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v17 - v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v17 - v10;
  uint64_t v12 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 152));
  os_unfair_lock_lock(v12);
  uint64_t v13 = *(void *)(*v1 + 160);
  if (*((unsigned char *)v1 + v13))
  {
    os_unfair_lock_unlock(v12);
  }
  else
  {
    uint64_t v18 = v3;
    *((unsigned char *)v1 + v13) = 1;
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    uint64_t v14 = (uint64_t)v1 + *(void *)(*v1 + 168);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v20, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v12);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      *(void *)&v20[0] = 0;
      (*(void (**)(_OWORD *, void))(*(void *)(v18 + 120) + 56))(v20, *(void *)(v18 + 96));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, AssociatedTypeWitness);
      uint64_t v15 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v16, v7, AssociatedTypeWitness);
      *(void *)&v20[0] = v15;
      (*(void (**)(_OWORD *, void))(*(void *)(v18 + 120) + 56))(v20, *(void *)(v18 + 96));
      MEMORY[0x18C13C260](v15);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    }
  }
}

uint64_t Publishers.Encode.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 168);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  os_unfair_lock_unlock(v3);
  outlined init with copy of Subscription?((uint64_t)v11, (uint64_t)v8);
  uint64_t v5 = v9;
  if (v9)
  {
    uint64_t v6 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    outlined destroy of Subscription?((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v11);
    return outlined destroy of Subscription?((uint64_t)v8);
  }
}

void Publishers.Encode.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(*(void *)v0 + 160);
  if ((*(unsigned char *)(v0 + v2) & 1) == 0)
  {
    uint64_t v3 = v0 + *(void *)(*(void *)v0 + 168);
    swift_beginAccess();
    outlined init with copy of Subscription?(v3, (uint64_t)&v6);
    if (*((void *)&v7 + 1))
    {
      outlined init with take of Subscription(&v6, (uint64_t)v9);
      uint64_t v8 = 0;
      long long v6 = 0u;
      long long v7 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v6, v3);
      swift_endAccess();
      *(unsigned char *)(v0 + v2) = 1;
      os_unfair_lock_unlock(v1);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v6);
  }
  os_unfair_lock_unlock(v1);
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Encode.Inner.request(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Encode<A, B>.Inner<A1>(void *a1)
{
  return Publishers.Encode.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Encode.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Encode<A, B>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
  return 0x65646F636E45;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Encode<A, B>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Encode<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Encode<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Encode<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Encode.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t Publisher.decode<A, B>(type:decoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a2, a5);
  return Publishers.Decode.init(upstream:decoder:)((uint64_t)v21, (uint64_t)v19, a3, a4, a5, a6, a7, v26, a9);
}

uint64_t Publisher<>.encode<A>(encoder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v21, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, a3);
  return Publishers.Encode.init(upstream:encoder:)((uint64_t)v19, (uint64_t)v17, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of TopLevelDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of TopLevelEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata completion function for Publishers.Decode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Decode.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.Encode()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Decode(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C034BACLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Decode(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C034DA0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.Encode.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Decode<A, B, C>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_18C034EAC()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t Just.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t *Just.Inner.__allocating_init(downstream:value:)(uint64_t a1, uint64_t a2)
{
  return Just.Inner.init(downstream:value:)(a1, a2);
}

uint64_t Just.Inner.customMirror.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unsigned int v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  unsigned int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v0;
  uint64_t v9 = *(void *)(v2 + 80);
  getContiguousArrayStorageType<A>(for:)(v9, v9);
  uint64_t v10 = *(void *)(v9 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v12, &v1[*(void *)(*(void *)v1 + 112)], v9);
  v16[1] = v11;
  uint64_t v13 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v13);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  type metadata accessor for Just.Inner();
  swift_getWitnessTable();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Just.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 1953723722;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Just<A>.Inner<A1>()
{
  return 1953723722;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Just<A>.Inner<A1>()
{
  return Just.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Just<A>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t static Just<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Just<A>()
{
  return static Just<A>.== infix(_:_:)();
}

uint64_t Just<A>.contains(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Just<A>.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Just.allSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(v2);
  *a2 = result & 1;
  return result;
}

uint64_t Just.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  uint64_t v6 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v10 = v6;
  uint64_t v8 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 32))(a2, &v10, v8);
}

uint64_t Just.prepend(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  uint64_t v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.prepend<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  swift_getWitnessTable();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, v4);
  uint64_t v7 = type metadata accessor for Array();
  specialized closure #1 in Publisher.multicast<A>(subject:)(v7);
  static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  Sequence.publisher.getter(v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.append<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  getContiguousArrayStorageType<A>(for:)(v4, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v4);
  specialized closure #1 in Publisher.multicast<A>(subject:)(v5);
  swift_getWitnessTable();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  swift_bridgeObjectRelease();
  swift_getWitnessTable();
  Sequence.publisher.getter(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t Just.tryAllSatisfy(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = a1(v2);
  *(void *)a2 = result & 1;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void Just.count()(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Just.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    uint64_t v12 = v11;
    if (a1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, 1, 1, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v6);
    }
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.drop(while:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v15 - v9;
  char v11 = a1(v3);
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = v12;
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v7);
  }
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.ignoreOutput()@<X0>(unsigned char *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Just.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
}

uint64_t Just.mapError<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return Result.Publisher.init(_:)((uint64_t)v6, v4, a3);
}

uint64_t Just.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    uint64_t v12 = v11;
    if (a1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, 1, 1, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v6);
    }
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.output<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - v7;
  long long v13 = xmmword_18C0BBE70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = v9;
  if (v14)
  {
    uint64_t v11 = 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, v5);
    uint64_t v11 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v11, 1, v5);
  return Optional.Publisher.init(_:)((uint64_t)v8, a2);
}

uint64_t Just.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = *(void *)(v6 - 8);
    uint64_t v12 = v11;
    if (a1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v3, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v10, 1, 1, v6);
    }
    return Optional.Publisher.init(_:)((uint64_t)v10, a3);
  }
  return result;
}

uint64_t Just.first(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v15 - v9;
  char v11 = a1(v3);
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = v12;
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, v4, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v7);
  }
  return Optional.Publisher.init(_:)((uint64_t)v10, a3);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(unsigned char *))partial apply for closure #1 in Just.tryReduce<A>(_:_:), a6);
}

uint64_t Just.min(by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2);
}

uint64_t Just.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v3, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return Result.Publisher.init(_:)((uint64_t)v8, v5, a3);
}

uint64_t Just.replaceError(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Just.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Just.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6, v3);
  return Result.Publisher.init(_:)((uint64_t)v8, a2, a3);
}

uint64_t Just.tryScan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Just.tryReduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(unsigned char *))partial apply for closure #1 in Just.tryReduce<A>(_:_:), a6);
}

uint64_t Just.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(unsigned char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v14 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v14 - 8);
  int v16 = (char *)&v18 - v15;
  uint64_t v20 = *(void *)(a4 + 16);
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = v7;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC(v19, (uint64_t)&v18 - v15);
  return Result.Publisher.init(_:)((uint64_t)v16, a7);
}

uint64_t partial apply for closure #1 in Just.tryReduce<A>(_:_:)(void *a1)
{
  return partial apply for closure #1 in Just.tryReduce<A>(_:_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void, void))(v1 + 32))(*(void *)(v1 + 48), *(void *)(v1 + 56));
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Just(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Just(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t PublishedSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return PublishedSubject.Conduit.init(_:_:)(a1, a2);
}

uint64_t PublishedSubject.Conduit.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 192);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

void PublishedSubject.Conduit.finish(completion:)(int a1)
{
  uint64_t v2 = v1;
  int v20 = a1;
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v4 = *(void *)(v19 + 168);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v19 - v14;
  int v16 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 208));
  os_unfair_lock_lock(v16);
  unint64_t v17 = (char *)v2 + *(void *)(*v2 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v17, v9, v5);
    swift_endAccess();
    uint64_t v18 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v16);
    if (v18)
    {
      swift_retain();
      PublishedSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    v21[0] = v20 & 1;
    (*(void (**)(char *, uint64_t))(*(void *)(v19 + 176) + 56))(v21, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }
}

void vtable thunk for ConduitBase.finish(completion:) dispatching to PublishedSubject.Conduit.finish(completion:)(unsigned __int8 *a1)
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PublishedSubject<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PublishedSubject.receive<A>(subscriber:)(a1, a2, a3);
}

void PublishedSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v17[0] = *v1;
  uint64_t v2 = v17[0];
  v17[1] = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 208)));
  uint64_t v18 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBFD0;
  *(void *)(v9 + 32) = 0x746E65726170;
  *(void *)(v9 + 40) = 0xE600000000000000;
  uint64_t v10 = v1[2];
  type metadata accessor for PublishedSubject();
  uint64_t v11 = type metadata accessor for Optional();
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 72) = v11;
  *(void *)(v9 + 80) = 0x657274736E776F64;
  *(void *)(v9 + 88) = 0xEA00000000006D61;
  uint64_t v12 = (char *)v1 + *(void *)(*v1 + 192);
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, v12, v13);
  *(void *)(v9 + 128) = 0x646E616D6564;
  *(void *)(v9 + 136) = 0xE600000000000000;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 200));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573;
  uint64_t v15 = v1[2];
  *(void *)(v9 + 216) = v11;
  *(void *)(v9 + 184) = 0xE700000000000000;
  *(void *)(v9 + 192) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 208)));
}

void PublishedSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000018C0BBFE0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PublishedSubject<A>.Conduit<A1>()
{
  return 0xD000000000000010;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PublishedSubject<A>.Conduit<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PublishedSubject<A>.Conduit<A1>(void *a1@<X8>)
{
}

uint64_t instantiation function for generic protocol witness table for PublishedSubject<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t PassthroughSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return PassthroughSubject.Conduit.init(_:_:)(a1, a2);
}

uint64_t PassthroughSubject.Conduit.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 200);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

void PassthroughSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v17[0] = *v1;
  uint64_t v2 = v17[0];
  v17[1] = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 216)));
  uint64_t v18 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBFD0;
  *(void *)(v9 + 32) = 0x746E65726170;
  *(void *)(v9 + 40) = 0xE600000000000000;
  uint64_t v10 = v1[2];
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PassthroughSubject();
  uint64_t v11 = type metadata accessor for Optional();
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 72) = v11;
  *(void *)(v9 + 80) = 0x657274736E776F64;
  *(void *)(v9 + 88) = 0xEA00000000006D61;
  uint64_t v12 = (char *)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, v12, v13);
  *(void *)(v9 + 128) = 0x646E616D6564;
  *(void *)(v9 + 136) = 0xE600000000000000;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 208));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573;
  uint64_t v15 = v1[2];
  *(void *)(v9 + 216) = v11;
  *(void *)(v9 + 184) = 0xE700000000000000;
  *(void *)(v9 + 192) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 216)));
}

void PassthroughSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000018C0BC1B0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PassthroughSubject<A, B>.Conduit<A1>()
{
  return 0xD000000000000012;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance PassthroughSubject<A, B>.Conduit<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance PassthroughSubject<A, B>.Conduit<A1>(void *a1@<X8>)
{
}

uint64_t method lookup function for PassthroughSubject(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PassthroughSubject);
}

uint64_t dispatch thunk of PassthroughSubject.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t Result.tryMap<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v7);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v20 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v20(v9, v17, v5);
    uint64_t v21 = swift_allocError();
    v20(v22, v9, v5);
    *a4 = v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v25(v15);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publisher<>.contains(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v16 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, AssociatedTypeWitness);
  return Publishers.Contains.init(upstream:output:)((uint64_t)v13, (uint64_t)v11, a2, a3);
}

uint64_t Publishers.Contains.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for Publishers.Contains() + 44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v8(v6, a2, AssociatedTypeWitness);
}

uint64_t type metadata accessor for Publishers.Contains()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Contains.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Contains.output.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Contains.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  v15[0] = *(void *)(a2 + 16);
  uint64_t v8 = v15[0];
  v15[1] = a3;
  long long v15[2] = v9;
  void v15[3] = a4;
  v15[4] = v10;
  uint64_t v11 = type metadata accessor for Publishers.Contains.Inner();
  uint64_t v12 = v5 + *(int *)(a2 + 44);
  swift_allocObject();
  v15[0] = specialized Publishers.Contains.Inner.init(downstream:output:)(a1, v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v15, v8, v11, v9, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Contains.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Contains.Inner.description.getter()
{
  return 0x736E6961746E6F43;
}

uint64_t Publishers.Contains.Inner.receive(newValue:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)&v9 - v5, (char *)v0 + *(void *)(v2 + 480), AssociatedTypeWitness);
  char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  if (v7)
  {
    swift_beginAccess();
    *((unsigned char *)v1 + 16) = 1;
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Publishers.Contains.Inner.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 480);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t *Publishers.Contains.Inner.deinit()
{
  uint64_t v0 = ReduceProducer.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 480);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t Publishers.Contains.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Contains.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Contains<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Contains.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.Contains<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[0] = a4;
  v20[1] = a6;
  uint64_t v8 = type metadata accessor for Publishers.Contains();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v20 - v13;
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, a1, v8);
  v16(v12, a2, v8);
  if (v15)
  {
    swift_getAssociatedTypeWitness();
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v17 = 0;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v14, v8);
  return v17 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Contains<A>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Contains<>.== infix(_:_:)(a1, a2, a3[2], a3[3], *(void *)(a4 - 8), a3[4]);
}

uint64_t *specialized Publishers.Contains.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 448);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v10 = v2 + *(void *)(v9 + 480);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v10, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  char v15 = 0;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v8, (uint64_t)&v15, v12);
}

uint64_t type metadata completion function for Publishers.Contains()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Contains(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t destroy for Publishers.Contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t initializeWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for Publishers.Contains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Contains(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for Publishers.Contains(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C0395B8);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.Contains.Inner()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_18C039A0C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 56));
}

uint64_t Publisher.combineLatest<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v51 = a1;
  uint64_t v55 = a8;
  uint64_t v56 = a4;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v57 = a9;
  uint64_t v46 = a12;
  uint64_t v49 = *(void *)(a7 - 8);
  uint64_t v47 = a10;
  uint64_t v48 = a11;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  int v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v27;
  uint64_t v59 = v28;
  uint64_t v60 = v29;
  uint64_t v61 = v30;
  uint64_t v62 = v32;
  uint64_t v63 = v31;
  uint64_t v33 = type metadata accessor for Publishers.CombineLatest3();
  uint64_t v52 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v45 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v50, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v51, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v17, v53, a7);
  uint64_t v36 = v46;
  uint64_t v37 = (uint64_t)v22;
  uint64_t v39 = v47;
  uint64_t v38 = v48;
  Publishers.CombineLatest3.init(_:_:_:)((uint64_t)v26, v37, (uint64_t)v17, a5, a6, a7, (uint64_t)v35);
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = a5;
  v40[3] = a6;
  uint64_t v41 = v54;
  uint64_t v42 = v55;
  v40[4] = a7;
  v40[5] = v42;
  void v40[6] = v39;
  v40[7] = v38;
  v40[8] = v36;
  v40[9] = v41;
  v40[10] = v56;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1), (uint64_t)v40, v33, v42, WitnessTable, v57);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v35, v33);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata3 + 48), a1 + *(int *)(TupleTypeMetadata3 + 64));
}

uint64_t sub_18C039ECC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1)(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 72));
}

uint64_t Publisher.combineLatest<A, B, C, D>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v74 = a1;
  uint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v80 = a9;
  uint64_t v64 = a15;
  uint64_t v65 = a14;
  uint64_t v77 = a11;
  uint64_t v70 = *(void *)(a10 - 8);
  uint64_t v66 = a13;
  uint64_t v67 = a12;
  uint64_t v18 = MEMORY[0x1F4188790](a1);
  long long v71 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v68 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22);
  uint64_t v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v28;
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v33;
  uint64_t v82 = v34;
  uint64_t v62 = v33;
  uint64_t v61 = v34;
  uint64_t v83 = v35;
  uint64_t v84 = a10;
  uint64_t v85 = v37;
  uint64_t v86 = v36;
  uint64_t v87 = v39;
  uint64_t v88 = v38;
  uint64_t v69 = type metadata accessor for Publishers.CombineLatest4();
  uint64_t v72 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v41 = (char *)&v60 - v40;
  uint64_t v63 = (char *)&v60 - v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v73, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v74, a7);
  uint64_t v42 = v68;
  uint64_t v43 = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v68, v75, a8);
  uint64_t v44 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v76, a10);
  uint64_t v45 = v64;
  uint64_t v46 = v65;
  uint64_t v47 = v66;
  uint64_t v48 = v67;
  uint64_t v49 = (uint64_t)v42;
  uint64_t v50 = (uint64_t)v44;
  uint64_t v51 = v62;
  uint64_t v52 = v61;
  Publishers.CombineLatest4.init(_:_:_:_:)((uint64_t)v32, (uint64_t)v60, v49, v50, v62, v61, v43, a10, (uint64_t)v41);
  uint64_t v53 = (void *)swift_allocObject();
  v53[2] = v51;
  v53[3] = v52;
  v53[4] = v43;
  v53[5] = a10;
  uint64_t v55 = v77;
  uint64_t v54 = v78;
  v53[6] = v77;
  v53[7] = v48;
  v53[8] = v47;
  v53[9] = v46;
  v53[10] = v45;
  v53[11] = v54;
  v53[12] = v79;
  uint64_t v56 = v69;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = v63;
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1), (uint64_t)v53, v56, v55, WitnessTable, v80);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v58, v56);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return a2(a1, a1 + TupleTypeMetadata[12], a1 + TupleTypeMetadata[16], a1 + TupleTypeMetadata[20]);
}

uint64_t sub_18C03A500()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1)(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 88));
}

uint64_t Publishers.CombineLatest.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.CombineLatest3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.CombineLatest3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t Publishers.CombineLatest4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.CombineLatest4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.CombineLatest4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

uint64_t static Publishers.CombineLatest<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[1] = a8;
  v22[2] = a3;
  void v22[3] = a4;
  v22[4] = a5;
  v22[5] = a7;
  uint64_t v10 = type metadata accessor for Publishers.CombineLatest();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v22 - v15;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if (v17) {
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v19 = 0;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.CombineLatest<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

uint64_t static Publishers.CombineLatest3<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  v31[1] = a4;
  long long v31[2] = a5;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a8;
  uint64_t v40 = a10;
  uint64_t v12 = type metadata accessor for Publishers.CombineLatest3();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v32 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v31 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v31 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v31 - v22;
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v33 = a1;
  v25(v23, a1, v12);
  uint64_t v34 = a2;
  v25(v21, a2, v12);
  if (v24) {
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v26 = 0;
  }
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v21, v12);
  v27(v23, v12);
  v25(v18, v33, v12);
  uint64_t v28 = v32;
  v25(v32, v34, v12);
  if (v26) {
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v29 = 0;
  }
  v27(v28, v12);
  v27(v18, v12);
  return v29 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.CombineLatest3<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), a3[6], *(void *)(a4 - 16), a3[7]) & 1;
}

uint64_t static Publishers.CombineLatest4<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  void v43[2] = a4;
  void v43[3] = a5;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  v43[1] = a6;
  uint64_t v53 = a7;
  uint64_t v54 = a9;
  uint64_t v55 = a11;
  uint64_t v56 = a13;
  uint64_t v15 = type metadata accessor for Publishers.CombineLatest4();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v46 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)v43 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v43 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v44 = (char *)v43 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v43 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)v43 - v29;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v47 = a1;
  v32(v30, a1, v15);
  uint64_t v48 = a2;
  v32(v28, a2, v15);
  if (v31) {
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v33 = 0;
  }
  uint64_t v34 = v44;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v16 + 8);
  v35(v28, v15);
  v35(v30, v15);
  uint64_t v36 = v47;
  v32(v34, v47, v15);
  uint64_t v37 = v48;
  v32(v23, v48, v15);
  if ((v33 & 1) == 0)
  {
    v35(v23, v15);
    v35(v34, v15);
    uint64_t v39 = v45;
    v32(v45, v36, v15);
    uint64_t v40 = v46;
    v32(v46, v37, v15);
    goto LABEL_8;
  }
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v35(v23, v15);
  v35(v34, v15);
  uint64_t v39 = v45;
  v32(v45, v36, v15);
  uint64_t v40 = v46;
  v32(v46, v37, v15);
  if ((v38 & 1) == 0)
  {
LABEL_8:
    char v41 = 0;
    goto LABEL_9;
  }
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v35(v40, v15);
  v35(v39, v15);
  return v41 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CombineLatest4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.CombineLatest4<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8), a3[7], *(void *)(a4 - 16), a3[8], *(void *)(a4 - 24), a3[9]) & 1;
}

void AbstractCombineLatest.Side.combineIdentifier.getter(void *a1@<X8>)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>()
{
  return 0x4C656E69626D6F43;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance AbstractCombineLatest<A, B, C>.Side<A1>(void *a1@<X8>)
{
}

void AbstractCombineLatest.customMirror.getter()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + v1[23]));
  uint64_t v24 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBFD0;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v11 = v1[12];
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0xD000000000000015;
  *(void *)(v9 + 88) = 0x800000018C0C4240;
  uint64_t v13 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 128));
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Subscription?]);
  *(void *)(v9 + 96) = v14;
  *(void *)(v9 + 120) = v15;
  *(void *)(v9 + 128) = 0x646E616D6564;
  *(void *)(v9 + 136) = 0xE600000000000000;
  uint64_t v16 = *v0;
  *(void *)(v9 + 144) = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 136));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x73726566667562;
  *(void *)(v9 + 184) = 0xE700000000000000;
  uint64_t v17 = (uint64_t *)((char *)v0 + *(void *)(v16 + 120));
  swift_beginAccess();
  uint64_t v18 = *v17;
  *(void *)(v9 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any?]);
  *(void *)(v9 + 192) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  uint64_t v20 = v1[13];
  long long v21 = *((_OWORD *)v2 + 5);
  uint64_t v22 = v11;
  uint64_t v23 = v20;
  type metadata accessor for AbstractCombineLatest();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 184)));
}

void AbstractCombineLatest.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "CombineLatest");
  *(_WORD *)(a1 + 14) = -4864;
}

void AbstractCombineLatest.convert(values:)()
{
}

void protocol witness for CustomReflectable.customMirror.getter in conformance AbstractCombineLatest<A, B, C>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance AbstractCombineLatest<A, B, C>(uint64_t a1@<X8>)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest3(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(a3[3] - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  unint64_t v16 = ((v12 + v14 + v11) & ~v14) + *(void *)(v13 + 64);
  uint64_t v17 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v13 + 80));
  if (v17 <= 7
    && v16 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~v9;
    uint64_t v22 = ~v14;
    uint64_t v25 = a3[3];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v23 = ((unint64_t)a2 + v10) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v21, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((((unint64_t)v4 + v10) & v21) + v15) & v22, (v23 + v15) & v22, v7);
  }
  else
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CombineLatest4(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(a3[3] - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = (v5 + v7) & ~v7;
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(void *)(a3[4] - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v10 + v12;
  uint64_t v14 = (v10 + v12 + v9) & ~v12;
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v16 = *(void *)(a3[5] - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = v15 + v17;
  unint64_t v19 = ((v15 + v17 + v14) & ~v17) + *(void *)(v16 + 64);
  uint64_t v20 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v11 + 80) | *(unsigned char *)(v16 + 80));
  if (v20 <= 7
    && v19 <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v16 + 80)) & 0x100000) == 0)
  {
    uint64_t v25 = ~v7;
    uint64_t v26 = ~v12;
    uint64_t v35 = a3[4];
    uint64_t v36 = ~v17;
    uint64_t v34 = a3[3];
    uint64_t v37 = a3[5];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    char v38 = a1;
    unint64_t v28 = ((unint64_t)a1 + v8) & v25;
    unint64_t v29 = ((unint64_t)a2 + v8) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v28, v29, v34);
    uint64_t v30 = v28 + v13;
    uint64_t v24 = v38;
    uint64_t v31 = v30 & v26;
    unint64_t v32 = (v29 + v13) & v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v30 & v26, v32, v35);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))((v31 + v18) & v36, (v32 + v18) & v36, v37);
  }
  else
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    uint64_t v24 = (uint64_t *)(v23 + ((v20 + 16) & ~v20));
    swift_retain();
  }
  return v24;
}

uint64_t assignWithCopy for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 24))((*(void *)(v15 + 40) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 40) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 32))((*(void *)(v15 + 32) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 32) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.CombineLatest4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(a3[5] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))((*(void *)(v15 + 24) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 24) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CombineLatest4(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = *(void *)(a3[4] - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(unsigned int *)(v13 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = *(void *)(v13 + 64);
  if (v15 <= v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v13 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v23 = *(void *)(*(void *)(a3[2] - 8) + 64) + v16;
  int v24 = a2 - v22;
  if (a2 <= v22) {
    goto LABEL_30;
  }
  uint64_t v25 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 < 2)
    {
LABEL_30:
      if (v22)
      {
        if (v6 == v22)
        {
          unint64_t v32 = *(uint64_t (**)(void))(v5 + 48);
          return v32();
        }
        else
        {
          unint64_t v34 = ((unint64_t)a1 + v23) & ~v16;
          if (v8 == v22)
          {
            uint64_t v35 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v35(v34);
          }
          else
          {
            unint64_t v36 = (v34 + v17 + v18) & ~v18;
            if (v12 == v22)
            {
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
              uint64_t v38 = *(unsigned int *)(v11 + 84);
              uint64_t v39 = a3[4];
            }
            else
            {
              unint64_t v36 = (v36 + v19 + v20) & ~v20;
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
              uint64_t v38 = v15;
              uint64_t v39 = a3[5];
            }
            return v37(v36, v38, v39);
          }
        }
      }
      return 0;
    }
  }
  int v27 = *((unsigned __int8 *)a1 + v25);
  if (!*((unsigned char *)a1 + v25)) {
    goto LABEL_30;
  }
LABEL_20:
  int v29 = (v27 - 1) << v26;
  if (v25 > 3) {
    int v29 = 0;
  }
  if (v25)
  {
    if (v25 <= 3) {
      int v30 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
    }
    else {
      int v30 = 4;
    }
    switch(v30)
    {
      case 2:
        int v31 = *a1;
        break;
      case 3:
        int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)a1;
        break;
      default:
        int v31 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  return v22 + (v31 | v29) + 1;
}

void storeEnumTagSinglePayload for Publishers.CombineLatest4(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v7 = a4[4];
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v7 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = a4[5];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  if (*(_DWORD *)(v16 + 84) <= v14) {
    unsigned int v23 = v14;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v24 = v17 + v18;
  size_t v25 = ((v21 + v22 + ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20)) & ~v22) + *(void *)(*(void *)(v15 - 8) + 64);
  BOOL v26 = a3 >= v23;
  unsigned int v27 = a3 - v23;
  if (v27 != 0 && v26)
  {
    if (v25 <= 3)
    {
      unsigned int v31 = ((v27 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
      if (HIWORD(v31))
      {
        int v28 = 4;
      }
      else if (v31 >= 0x100)
      {
        int v28 = 2;
      }
      else
      {
        int v28 = v31 > 1;
      }
    }
    else
    {
      int v28 = 1;
    }
  }
  else
  {
    int v28 = 0;
  }
  if (v23 < a2)
  {
    unsigned int v29 = ~v23 + a2;
    if (v25 < 4)
    {
      int v30 = (v29 >> (8 * v25)) + 1;
      if (v25)
      {
        int v32 = v29 & ~(-1 << (8 * v25));
        bzero(a1, v25);
        if (v25 == 3)
        {
          *(_WORD *)a1 = v32;
          a1[2] = BYTE2(v32);
        }
        else if (v25 == 2)
        {
          *(_WORD *)a1 = v32;
        }
        else
        {
          *a1 = v32;
        }
      }
    }
    else
    {
      bzero(a1, v25);
      *(_DWORD *)a1 = v29;
      int v30 = 1;
    }
    switch(v28)
    {
      case 1:
        a1[v25] = v30;
        return;
      case 2:
        *(_WORD *)&a1[v25] = v30;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v25] = v30;
        return;
      default:
        return;
    }
  }
  switch(v28)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x18C03C890);
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v8 == v23)
        {
          char v33 = *(void (**)(char *))(v6 + 56);
          unint64_t v34 = a1;
        }
        else
        {
          unint64_t v34 = (char *)((unint64_t)&a1[v24] & ~v18);
          if (v10 == v23)
          {
            char v33 = *(void (**)(char *))(v9 + 56);
          }
          else
          {
            unint64_t v34 = (char *)((unint64_t)&v34[v19 + v20] & ~v20);
            if (v13 == v23)
            {
              char v33 = *(void (**)(char *))(v12 + 56);
            }
            else
            {
              unint64_t v34 = (char *)((unint64_t)&v34[v21 + v22] & ~v22);
              char v33 = *(void (**)(char *))(v16 + 56);
            }
          }
        }
        v33(v34);
      }
      return;
  }
}

void *assignWithCopy for AbstractCombineLatest.Side(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AbstractCombineLatest.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t Publisher.label(_:category:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a4);
  uint64_t v17 = (int *)type metadata accessor for Publishers.Label();
  uint64_t v18 = (void *)(a5 + v17[9]);
  *uint64_t v18 = a1;
  v18[1] = a2;
  uint64_t v19 = (void *)(a5 + v17[10]);
  void *v19 = v14;
  v19[1] = v15;
  *(void *)(a5 + v17[11]) = v22;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

int *Publishers.Label.init(upstream:name:category:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t result = (int *)type metadata accessor for Publishers.Label();
  uint64_t v14 = (void *)(a7 + result[9]);
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a7 + result[10]);
  *uint64_t v15 = v11;
  v15[1] = v12;
  *(void *)(a7 + result[11]) = a5;
  return result;
}

uint64_t type metadata accessor for Publishers.Label()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.label(_:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, v14);
  swift_bridgeObjectRetain();
  return Publishers.Label.init(upstream:name:dsoHandle:)((uint64_t)v12, a1, a2, a3, a4, a5);
}

uint64_t Publishers.Label.init(upstream:name:dsoHandle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a6, a1, a5);
  uint64_t v13 = (int *)type metadata accessor for Publishers.Label();
  uint64_t v14 = (void *)(a6 + v13[9]);
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a5);
  uint64_t v16 = (void *)(a6 + v13[10]);
  *uint64_t v16 = 0x6C616D726F6ELL;
  v16[1] = 0xE600000000000000;
  *(void *)(a6 + v13[11]) = a4;
  return result;
}

uint64_t Publishers.Label.Category.rawValue.getter()
{
  uint64_t v0 = specialized Publishers.Label.Category.rawValue.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t Publishers.Label.Category.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Publishers.Label.Category.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void static Publishers.Label.Category.normal.getter(void *a1@<X8>)
{
  *a1 = 0x6C616D726F6ELL;
  a1[1] = 0xE600000000000000;
}

void static Publishers.Label.Category.important.getter(void *a1@<X8>)
{
  *a1 = 0x6E6174726F706D69;
  a1[1] = 0xE900000000000074;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Publishers.Label<A>.Category@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return Publishers.Label.Category.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Publishers.Label<A>.Category@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized Publishers.Label.Category.rawValue.getter();
  a1[1] = v2;

  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Label.name.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Publishers.Label.category.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(v2 + *(int *)(a1 + 40));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.dsoHandle.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t Publishers.Label.receive<A>(subscriber:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v30[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v31 = *(void *)(v11 + 24);
  uint64_t v32 = v12;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v35 = v31;
  uint64_t v36 = v14;
  uint64_t v15 = type metadata accessor for Publishers.Label.Inner();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v30 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v19 = (uint64_t *)(v4 + a2[9]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = (uint64_t *)(v4 + a2[10]);
  uint64_t v23 = v22[1];
  uint64_t v33 = *v22;
  uint64_t v34 = v23;
  uint64_t v24 = *(void *)(v4 + a2[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = v32;
  uint64_t v26 = a3;
  uint64_t v27 = v31;
  Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)((uint64_t)v10, v21, v20, &v33, v24, v26, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v25, v15, v27, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

void Publishers.Label.Inner.init(downstream:name:category:dsoHandle:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t v13 = (int *)type metadata accessor for Publishers.Label.Inner();
  uint64_t v14 = (void *)(a7 + v13[13]);
  *uint64_t v14 = a2;
  v14[1] = a3;
  uint64_t v15 = (void *)(a7 + v13[14]);
  *uint64_t v15 = v11;
  v15[1] = v12;
  *(void *)(a7 + v13[15]) = a5;
  uint64_t v16 = v13[16];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v17 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v18 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v17);
    *(void *)(a7 + v16) = v18;
  }
}

uint64_t Publishers.Label.Inner.customMirror.getter(int *a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, int *))(v11 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18C0BBFD0;
  *(void *)(v12 + 32) = 0xD00000000000001ALL;
  *(void *)(v12 + 40) = 0x800000018C0C4380;
  uint64_t v13 = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 48) = 0x6C6562614CLL;
  *(void *)(v12 + 56) = 0xE500000000000000;
  *(void *)(v12 + 72) = v13;
  *(void *)(v12 + 80) = 1701667182;
  uint64_t v14 = a1[14];
  uint64_t v15 = (uint64_t *)(v1 + a1[13]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  *(void *)(v12 + 88) = 0xE400000000000000;
  *(void *)(v12 + 96) = v16;
  *(void *)(v12 + 104) = v17;
  *(void *)(v12 + 120) = v13;
  *(void *)(v12 + 128) = 0x79726F6765746163;
  *(void *)(v12 + 136) = 0xE800000000000000;
  uint64_t v19 = *(void *)(v1 + v14);
  uint64_t v18 = *(void *)(v1 + v14 + 8);
  uint64_t v20 = type metadata accessor for Publishers.Label.Category();
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 152) = v18;
  *(void *)(v12 + 168) = v20;
  *(void *)(v12 + 176) = 7304036;
  *(void *)(v12 + 184) = 0xE300000000000000;
  uint64_t v21 = *(void *)(v1 + a1[15]);
  *(void *)(v12 + 216) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
  *(void *)(v12 + 192) = v21;
  uint64_t v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.Label.Inner.playgroundDescription.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  a2[3] = MEMORY[0x1E4FBB1A0];
  *a2 = v5;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.Label.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 40) + 48))(a1, *(void *)(a2 + 24));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Label<A>.Inner<A1>(uint64_t a1)
{
  uint64_t v1 = specialized Publishers.Label.Inner.description.getter(a1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Label<A>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return Publishers.Label.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t specialized Publishers.Label.Category.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t type metadata accessor for Publishers.Label.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Label()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    uint64_t v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    *(void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.Label(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C03DC58);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Label(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                void *v19 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                v19[1] = a2 - 1;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C03DE68);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for Publishers.Label.Category(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Publishers.Label.Category()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Publishers.Label.Category(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Publishers.Label.Category(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Publishers.Label.Category()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Label.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Label.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v10 = *v11;
    v10[1] = v11[1];
    unsigned int v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v13;
    v12[1] = v13[1];
    int v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    *int v14 = *v15;
    *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.Label.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  unsigned int v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v7 = *v8;
  uint64_t v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  unsigned int v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Label.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRelease();
  unsigned int v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Label.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C03E6A0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Label.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                void *v19 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                v19[1] = a2 - 1;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C03E8B8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t specialized Publishers.Label.Inner.description.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t Publishers.Autoconnect.__allocating_init(upstream:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Publishers.Autoconnect.init(upstream:)(a1);
  return v2;
}

uint64_t Publishers.Autoconnect.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.combineIdentifier.getter()
{
  uint64_t v1 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v3);
}

uint64_t method lookup function for Publishers.Autoconnect(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Publishers.Autoconnect);
}

uint64_t dispatch thunk of Publishers.Autoconnect.__allocating_init(upstream:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Publishers.Autoconnect.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Autoconnect.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *a2;
    unint64_t v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    unsigned int v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    unint64_t v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    int v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

void *assignWithCopy for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeWithTake for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for Publishers.Autoconnect.Inner(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Autoconnect.State(uint64_t a1, long long *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }
LABEL_7:
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1(v4, (uint64_t *)a2 + 1);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Publishers.Autoconnect.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for Publishers.Autoconnect.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

uint64_t Publishers.Autoconnect.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18C0BABB0;
  *(void *)(v12 + 32) = 0x746E65726170;
  *(void *)(v12 + 40) = 0xE600000000000000;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v14 = type metadata accessor for Publishers.Autoconnect();
  *(void *)(v12 + 48) = v13;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = 0x657274736E776F64;
  *(void *)(v12 + 88) = 0xEA00000000006D61;
  uint64_t v15 = v1 + *(int *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(v12 + 120) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v12 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_1, v15, v16);
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v9, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Autoconnect.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6E6E6F636F747541;
  a1[1] = 0xEB00000000746365;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Autoconnect<A>.Inner<A1>()
{
  return 0x6E6E6F636F747541;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.description.getter()
{
  return 0;
}

uint64_t Publishers.Autoconnect.SideEffectSubscription.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Publishers.Autoconnect.SideEffectSubscription.description.getter();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Autoconnect<A>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_18C03F2CC()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocObject();
}

uint64_t sub_18C03F30C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1)
{
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

void *assignWithCopy for Publishers.Autoconnect.SideEffectSubscription(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Publishers.Autoconnect.SideEffectSubscription(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Autoconnect.SideEffectSubscription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Publisher.print(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, v14);
  outlined init with copy of TextOutputStream?(a3, (uint64_t)v17);
  Publishers.Print.init(upstream:prefix:to:)((uint64_t)v12, a1, a2, (uint64_t)v17, a4, a5);
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.init(upstream:prefix:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Publishers.Print();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a6[*(int *)(v12 + 36)], a1, a5);
  *(void *)a6 = a2;
  *((void *)a6 + 1) = a3;
  uint64_t v13 = (uint64_t)&a6[*(int *)(v12 + 40)];

  return outlined init with take of TextOutputStream?(a4, v13);
}

uint64_t type metadata accessor for Publishers.Print()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of TextOutputStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Publishers.Print.prefix.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Publishers.Print.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Publishers.Print.stream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextOutputStream?(v2 + *(int *)(a1 + 40), a2);
}

uint64_t Publishers.Print.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(a2 + 24);
  v15[0] = *(void *)(a2 + 16);
  uint64_t v9 = v15[0];
  v15[1] = a3;
  long long v15[2] = v8;
  void v15[3] = a4;
  uint64_t v10 = type metadata accessor for Publishers.Print.Inner();
  uint64_t v11 = *v5;
  unint64_t v12 = v5[1];
  outlined init with copy of TextOutputStream?((uint64_t)v5 + *(int *)(a2 + 40), (uint64_t)v15);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v15[0] = specialized Publishers.Print.Inner.init(downstream:prefix:to:)(a1, v11, v12, (uint64_t)v15);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v15, v9, v10, v8, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Print.Inner()
{
  return swift_getGenericMetadata();
}

double Publishers.Print.Inner.PrintTarget.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Subscription((long long *)a1, (uint64_t)v4);
    outlined init with take of Subscription(v4, a2);
  }
  else
  {
    outlined destroy of TextOutputStream?(a1);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t Publishers.Print.Inner.PrintTarget.write(_:)()
{
  __swift_mutable_project_boxed_opaque_existential_1(v0, *(void *)(v0 + 24));
  return dispatch thunk of TextOutputStream.write(_:)();
}

uint64_t protocol witness for TextOutputStream._writeASCII(_:) in conformance Publishers.Print<A>.Inner<A1>.PrintTarget()
{
  return MEMORY[0x1F4185088]();
}

uint64_t Publishers.Print.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  long long v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Print.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x746E697250;
  a1[1] = 0xE500000000000000;
}

uint64_t *Publishers.Print.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 144)), -1, -1);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112), *(void *)(v1 + 88));
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 128);
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t Publishers.Print.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Print.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t Publishers.Print.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 128);
  uint64_t v6 = *(void *)(*v1 + 104);
  uint64_t v37 = *(void *)(*v1 + 80);
  uint64_t v7 = (uint64_t)v1 + v5;
  long long v34 = *(_OWORD *)(v4 + 88);
  long long v38 = v34;
  uint64_t v39 = v6;
  uint64_t v8 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v10 + 16))(&v40, v7, v9);
  if (*((void *)&v41 + 1))
  {
    *(_OWORD *)uint64_t v35 = v40;
    *(_OWORD *)&v35[16] = v41;
    *(void *)&v35[32] = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_18C0BA630;
    *(void *)&long long v40 = 0;
    *((void *)&v40 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    unint64_t v12 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
    uint64_t v13 = *v12;
    uint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x800000018C0C4410;
    v16._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v17._countAndFlagsBits = 41;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    long long v18 = v40;
    *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v11 + 32) = v18;
    swift_getWitnessTable();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v8 - 8) + 8))(v35, v8);
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v10 + 8))(&v40, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_18C0BA630;
    *(void *)uint64_t v35 = 0;
    *(void *)&v35[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    uint64_t v20 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
    uint64_t v21 = *v20;
    uint64_t v22 = (void *)v20[1];
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._object = (void *)0x800000018C0C4410;
    v24._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
    _print_unlocked<A, B>(_:_:)();
    v25._countAndFlagsBits = 41;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    long long v26 = *(_OWORD *)v35;
    *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v19 + 32) = v26;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(*v2 + 144));
  os_unfair_lock_lock(v27);
  uint64_t v28 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v28, (uint64_t)v35);
  if (v36 == 2
    && (int8x16_t v29 = vorrq_s8(*(int8x16_t *)&v35[8], *(int8x16_t *)&v35[24]),
        !(*(void *)&vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)) | *(void *)v35)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)v35);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v35);
    char v36 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v35, v28);
    swift_endAccess();
    os_unfair_lock_unlock(v27);
    *(void *)&v35[24] = v4;
    *(void *)&v35[32] = &protocol witness table for Publishers.Print<A>.Inner<A1>;
    *(void *)uint64_t v35 = v2;
    uint64_t v33 = *(void (**)(unsigned char *, void, uint64_t))(v6 + 40);
    swift_retain();
    v33(v35, v34, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v35);
    os_unfair_lock_unlock(v27);
    uint64_t v30 = a1[3];
    uint64_t v31 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v30);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v31 + 8) + 8))(v30);
  }
}

uint64_t Publishers.Print.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 96);
  uint64_t v7 = *(void *)(v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v63 - v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Subscribers.Completion();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v63 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&v63 - v13, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v16 = (uint64_t)v2 + *(void *)(*v2 + 128);
    uint64_t v17 = *(void *)(v5 + 88);
    uint64_t v18 = *(void *)(v5 + 104);
    uint64_t v67 = v7;
    uint64_t v68 = v17;
    uint64_t v69 = v6;
    uint64_t v70 = v18;
    uint64_t v19 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
    uint64_t v20 = type metadata accessor for Optional();
    uint64_t v21 = *(void *)(v20 - 8);
    (*(void (**)(long long *, uint64_t, uint64_t))(v21 + 16))(&v71, v16, v20);
    if (*((void *)&v72 + 1))
    {
      *(_OWORD *)uint64_t v65 = v71;
      *(_OWORD *)&v65[16] = v72;
      *(void *)&v65[32] = v73;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_18C0BA630;
      *(void *)&long long v71 = 0;
      *((void *)&v71 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      Swift::String v23 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v71 = v24;
      *((void *)&v71 + 1) = v25;
      v26._object = (void *)0x800000018C0C43D0;
      v26._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v26);
      long long v27 = v71;
      *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v22 + 32) = v27;
      swift_getWitnessTable();
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v19 - 8) + 8))(v65, v19);
    }
    else
    {
      (*(void (**)(long long *, uint64_t))(v21 + 8))(&v71, v20);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_18C0BA630;
      *(void *)uint64_t v65 = 0;
      *(void *)&v65[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      uint64_t v46 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
      uint64_t v47 = *v46;
      uint64_t v48 = v46[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v65 = v47;
      *(void *)&v65[8] = v48;
      v49._object = (void *)0x800000018C0C43D0;
      v49._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v49);
      long long v50 = *(_OWORD *)v65;
      *(void *)(v45 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v45 + 32) = v50;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v64 = v11;
    v28(v11, v14, AssociatedTypeWitness);
    uint64_t v29 = (uint64_t)v2 + *(void *)(*v2 + 128);
    uint64_t v17 = *(void *)(v5 + 88);
    uint64_t v18 = *(void *)(v5 + 104);
    uint64_t v67 = v7;
    uint64_t v68 = v17;
    uint64_t v69 = v6;
    uint64_t v70 = v18;
    uint64_t v30 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
    uint64_t v31 = type metadata accessor for Optional();
    uint64_t v32 = *(void *)(v31 - 8);
    (*(void (**)(long long *, uint64_t, uint64_t))(v32 + 16))(&v71, v29, v31);
    if (*((void *)&v72 + 1))
    {
      *(_OWORD *)uint64_t v65 = v71;
      *(_OWORD *)&v65[16] = v72;
      *(void *)&v65[32] = v73;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_18C0BA630;
      *(void *)&long long v71 = 0;
      *((void *)&v71 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      long long v34 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
      uint64_t v63 = v9;
      uint64_t v35 = v18;
      uint64_t v36 = v17;
      uint64_t v37 = a1;
      uint64_t v39 = *v34;
      long long v38 = (void *)v34[1];
      swift_bridgeObjectRetain();
      v40._countAndFlagsBits = v39;
      a1 = v37;
      uint64_t v17 = v36;
      uint64_t v18 = v35;
      v40._object = v38;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._object = (void *)0x800000018C0C43B0;
      v41._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v41);
      uint64_t v42 = v64;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v43._countAndFlagsBits = 41;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      long long v44 = v71;
      *(void *)(v33 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v33 + 32) = v44;
      swift_getWitnessTable();
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v30 - 8) + 8))(v65, v30);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v42, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(long long *, uint64_t))(v32 + 8))(&v71, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_18C0BA630;
      *(void *)uint64_t v65 = 0;
      *(void *)&v65[8] = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      uint64_t v52 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 120));
      uint64_t v53 = *v52;
      uint64_t v54 = (void *)v52[1];
      swift_bridgeObjectRetain();
      v55._countAndFlagsBits = v53;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._object = (void *)0x800000018C0C43B0;
      v56._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v56);
      uint64_t v57 = v64;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v58._countAndFlagsBits = 41;
      v58._object = (void *)0xE100000000000000;
      String.append(_:)(v58);
      long long v59 = *(_OWORD *)v65;
      *(void *)(v51 + 56) = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v51 + 32) = v59;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v57, AssociatedTypeWitness);
    }
  }
  uint64_t v60 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(*v2 + 144));
  os_unfair_lock_lock(v60);
  *(void *)uint64_t v65 = 1;
  memset(&v65[8], 0, 32);
  char v66 = 2;
  uint64_t v61 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)v65, v61);
  swift_endAccess();
  os_unfair_lock_unlock(v60);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 56))(a1, v17, v18);
}

uint64_t Publishers.Print.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v49 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 128);
  uint64_t v5 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v45 = *(void (**)(long long *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v46 = v4;
  v45(&v51, v4, v6);
  uint64_t v44 = v7;
  uint64_t v48 = v6;
  if (*((void *)&v52 + 1))
  {
    long long v54 = v51;
    long long v55 = v52;
    uint64_t v56 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_18C0BA630;
    *(void *)&long long v51 = 0;
    *((void *)&v51 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    uint64_t v9 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120));
    uint64_t v10 = *v9;
    uint64_t v11 = (void *)v9[1];
    swift_bridgeObjectRetain();
    uint64_t v47 = v10;
    v12._countAndFlagsBits = v10;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x800000018C0C43F0;
    v13._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
    swift_getAssociatedTypeWitness();
    uint64_t v14 = a1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    long long v16 = v51;
    uint64_t v17 = MEMORY[0x1E4FBB1A0];
    *(void *)(v8 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v8 + 32) = v16;
    swift_getWitnessTable();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(long long *, uint64_t))(*(void *)(v5 - 8) + 8))(&v54, v5);
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v7 + 8))(&v51, v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_18C0BA630;
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    uint64_t v19 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 120));
    uint64_t v20 = *v19;
    uint64_t v11 = (void *)v19[1];
    swift_bridgeObjectRetain();
    uint64_t v47 = v20;
    v21._countAndFlagsBits = v20;
    v21._object = v11;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x800000018C0C43F0;
    v22._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v22);
    swift_getAssociatedTypeWitness();
    uint64_t v14 = a1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    long long v24 = v54;
    uint64_t v17 = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v18 + 32) = v24;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v14, v49, v3);
  uint64_t v26 = result;
  if (result == 0x8000000000000000)
  {
    uint64_t v27 = v17;
    uint64_t v28 = (void *)0xE900000000000064;
    uint64_t v29 = 0x6574696D696C6E75;
    uint64_t v30 = (_OWORD *)&__unnamed_11;
    uint64_t v31 = v48;
    goto LABEL_9;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v48;
    if (!result) {
      return v26;
    }
    uint64_t v27 = v17;
    *(void *)&long long v54 = 0x28203A78616DLL;
    *((void *)&v54 + 1) = 0xE600000000000000;
    *(void *)&long long v51 = result;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 41;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v28 = (void *)*((void *)&v54 + 1);
    uint64_t v29 = v54;
    uint64_t v30 = &__unnamed_11;
LABEL_9:
    v45(&v51, v46, v31);
    if (*((void *)&v52 + 1))
    {
      long long v54 = v51;
      long long v55 = v52;
      uint64_t v56 = v53;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v30[99];
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v51 = v47;
      *((void *)&v51 + 1) = v11;
      v35._countAndFlagsBits = 0x2074736575716572;
      v35._object = (void *)0xE800000000000000;
      String.append(_:)(v35);
      v36._countAndFlagsBits = v29;
      v36._object = v28;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 0x7268636E79732820;
      v37._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v37);
      long long v38 = v51;
      *(void *)(v34 + 56) = v27;
      *(_OWORD *)(v34 + 32) = v38;
      swift_getWitnessTable();
      print<A>(_:separator:terminator:to:)();
      swift_bridgeObjectRelease();
      (*(void (**)(long long *, uint64_t))(*(void *)(v5 - 8) + 8))(&v54, v5);
    }
    else
    {
      (*(void (**)(long long *, uint64_t))(v44 + 8))(&v51, v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = v30[99];
      *(void *)&long long v54 = 0;
      *((void *)&v54 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&long long v54 = v47;
      *((void *)&v54 + 1) = v11;
      v40._countAndFlagsBits = 0x2074736575716572;
      v40._object = (void *)0xE800000000000000;
      String.append(_:)(v40);
      v41._countAndFlagsBits = v29;
      v41._object = v28;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = 0x7268636E79732820;
      v42._object = (void *)0xEE002973756F6E6FLL;
      String.append(_:)(v42);
      long long v43 = v54;
      *(void *)(v39 + 56) = v27;
      *(_OWORD *)(v39 + 32) = v43;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
    }
    return v26;
  }
  __break(1u);
  return result;
}

void Publishers.Print.Inner.request(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  if (a1 == 0x8000000000000000)
  {
    uint64_t v6 = (void *)0xE900000000000064;
    uint64_t v7 = 0x6574696D696C6E75;
  }
  else
  {
    if (a1 < 0)
    {
      __break(1u);
      return;
    }
    *(void *)&v31[0] = 0x28203A78616DLL;
    *((void *)&v31[0] + 1) = 0xE600000000000000;
    *(void *)&long long v36 = a1;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t v6 = (void *)0xE600000000000000;
    uint64_t v7 = 0x28203A78616DLL;
    uint64_t v4 = *v1;
  }
  uint64_t v10 = (char *)v1 + *(void *)(v4 + 128);
  long long v11 = *(_OWORD *)(v5 + 96);
  long long v34 = *(_OWORD *)(v5 + 80);
  long long v35 = v11;
  uint64_t v12 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(long long *, char *, uint64_t))(v14 + 16))(&v36, v10, v13);
  if (*((void *)&v37 + 1))
  {
    v31[0] = v36;
    v31[1] = v37;
    uint64_t v32 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_18C0BA630;
    long long v16 = (void *)((char *)v2 + *(void *)(*v2 + 120));
    uint64_t v17 = v16[1];
    *(void *)&long long v36 = *v16;
    *((void *)&v36 + 1) = v17;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 0x2074736575716572;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v7;
    v19._object = v6;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    long long v20 = v36;
    *(void *)(v15 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v15 + 32) = v20;
    swift_getWitnessTable();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(long long *, uint64_t))(*(void *)(v12 - 8) + 8))(v31, v12);
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v14 + 8))(&v36, v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_18C0BA630;
    Swift::String v22 = (void *)((char *)v2 + *(void *)(*v2 + 120));
    uint64_t v23 = v22[1];
    *(void *)&v31[0] = *v22;
    *((void *)&v31[0] + 1) = v23;
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = 0x2074736575716572;
    v24._object = (void *)0xE800000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = v7;
    v25._object = v6;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    long long v26 = v31[0];
    *(void *)(v21 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v21 + 32) = v26;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(*v2 + 144));
  os_unfair_lock_lock(v27);
  uint64_t v28 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v28, (uint64_t)v31);
  if (v33)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v31);
    os_unfair_lock_unlock(v27);
  }
  else
  {
    outlined init with take of Subscription(v31, (uint64_t)&v36);
    os_unfair_lock_unlock(v27);
    uint64_t v29 = *((void *)&v37 + 1);
    uint64_t v30 = v38;
    __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 24))(a1, v29, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  }
}

void Publishers.Print.Inner.cancel()()
{
  uint64_t v1 = v0;
  long long v2 = *(_OWORD *)(*(void *)v0 + 96);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 128);
  long long v25 = *(_OWORD *)(*(void *)v0 + 80);
  long long v26 = v2;
  uint64_t v4 = type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v6 + 16))(&v27, v3, v5);
  if (*((void *)&v28 + 1))
  {
    *(_OWORD *)uint64_t v23 = v27;
    *(_OWORD *)&v23[16] = v28;
    *(void *)&v23[32] = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18C0BA630;
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    Swift::String v8 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120));
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v27 = v10;
    *((void *)&v27 + 1) = v9;
    v11._countAndFlagsBits = 0x2065766965636572;
    v11._object = (void *)0xEE006C65636E6163;
    String.append(_:)(v11);
    long long v12 = v27;
    *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v7 + 32) = v12;
    swift_getWitnessTable();
    print<A>(_:separator:terminator:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v4 - 8) + 8))(v23, v4);
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v6 + 8))(&v27, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_18C0BA630;
    *(void *)uint64_t v23 = 0;
    *(void *)&v23[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    uint64_t v14 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 120));
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v23 = v16;
    *(void *)&v23[8] = v15;
    v17._countAndFlagsBits = 0x2065766965636572;
    v17._object = (void *)0xEE006C65636E6163;
    String.append(_:)(v17);
    long long v18 = *(_OWORD *)v23;
    *(void *)(v13 + 56) = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v13 + 32) = v18;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
  Swift::String v19 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 144));
  os_unfair_lock_lock(v19);
  uint64_t v20 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v20, (uint64_t)v23);
  if (v24)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v23);
    os_unfair_lock_unlock(v19);
  }
  else
  {
    outlined init with take of Subscription((long long *)v23, (uint64_t)&v27);
    *(void *)uint64_t v23 = 1;
    memset(&v23[8], 0, 32);
    char v24 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v23, v20);
    swift_endAccess();
    os_unfair_lock_unlock(v19);
    uint64_t v21 = *((void *)&v28 + 1);
    uint64_t v22 = v29;
    __swift_project_boxed_opaque_existential_1(&v27, *((uint64_t *)&v28 + 1));
    (*(void (**)(uint64_t))(*(void *)(v22 + 8) + 8))(v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Print<A>.Inner<A1>(void *a1)
{
  return Publishers.Print.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Print<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Print.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Print<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.Print.Inner.receive(completion:)(a1);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.Print<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Print<A>.Inner<A1>()
{
  return 0x746E697250;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Print<A>.Inner<A1>()
{
  return Publishers.Print.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Print<A>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Print<A>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Print<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Print.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t specialized Publishers.Print.Inner.init(downstream:prefix:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void **)v5;
  Swift::String v11 = *(void **)v5;
  uint64_t v12 = v5 + *(void *)(*(void *)v5 + 136);
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(void *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 40) = 2;
  uint64_t v13 = *(void *)(*(void *)v5 + 144);
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *uint64_t v14 = 0;
  *(void *)(v5 + v13) = v14;
  uint64_t v15 = v10[11];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v5 + *(void *)(*(void *)v5 + 112), a1, v15);
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
  }
  else
  {
    v27[0] = a2;
    v27[1] = a3;
    v16._countAndFlagsBits = 8250;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    uint64_t v17 = a2;
    unint64_t v18 = a3;
  }
  Swift::String v19 = (void *)(v5 + *(void *)(*(void *)v5 + 120));
  void *v19 = v17;
  v19[1] = v18;
  outlined init with copy of TextOutputStream?(a4, (uint64_t)v26);
  uint64_t v20 = v11[10];
  uint64_t v22 = v11[12];
  uint64_t v21 = v11[13];
  Publishers.Print.Inner.PrintTarget.init(_:)((uint64_t)v26, (uint64_t)v27);
  outlined destroy of TextOutputStream?(a4);
  uint64_t v23 = v5 + *(void *)(*(void *)v5 + 128);
  v26[0] = v20;
  v26[1] = v15;
  void v26[2] = v22;
  void v26[3] = v21;
  type metadata accessor for Publishers.Print.Inner.PrintTarget();
  uint64_t v24 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v24 - 8) + 32))(v23, v27, v24);
  return v5;
}

uint64_t type metadata completion function for Publishers.Print()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Print(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    unint64_t v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = *(void *)(v16 + 24);
    if (v17 < 0xFFFFFFFF)
    {
      long long v18 = *(_OWORD *)v16;
      long long v19 = *(_OWORD *)(v16 + 16);
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
      *(_OWORD *)unint64_t v15 = v18;
      *(_OWORD *)(v15 + 16) = v19;
    }
    else
    {
      *(void *)(v15 + 24) = v17;
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
      (**(void (***)(void))(v17 - 8))();
    }
  }
  return a1;
}

unint64_t destroy for Publishers.Print(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t result = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL)
  {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

void *initializeWithCopy for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  swift_bridgeObjectRetain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = *(void *)(v13 + 24);
  if (v14 < 0xFFFFFFFF)
  {
    long long v15 = *(_OWORD *)v13;
    long long v16 = *(_OWORD *)(v13 + 16);
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    *(_OWORD *)unint64_t v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
  }
  else
  {
    *(void *)(v12 + 24) = v14;
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    (**(void (***)(void))(v14 - 8))();
  }
  return a1;
}

void *assignWithCopy for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = *(void *)(v13 + 24);
  if (*(void *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *(void *)(v12 + 24) = v14;
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      (**(void (***)(unint64_t, unint64_t))(v14 - 8))(v12, v13);
      return a1;
    }
LABEL_7:
    long long v15 = *(_OWORD *)v13;
    long long v16 = *(_OWORD *)(v13 + 16);
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    *(_OWORD *)unint64_t v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v12);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v12, (uint64_t *)v13);
  return a1;
}

_OWORD *initializeWithTake for Publishers.Print(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v13;
  *(void *)(v10 + 32) = v12;
  return a1;
}

void *assignWithTake for Publishers.Print(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)v14;
  long long v16 = *(_OWORD *)(v14 + 16);
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(_OWORD *)unint64_t v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 40;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0426F8);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 16) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Print(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 40;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
              long long v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C042900);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.Print.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for Publishers.Print.Inner.PrintTarget(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t assignWithTake for Publishers.Print.Inner.PrintTarget(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Publishers.Print.Inner.PrintTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Publishers.Print.Inner.PrintTarget()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined destroy of TextOutputStream?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStream?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ObservableObjectPublisher.Conduit.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Conduit()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

BOOL static ObservableObjectPublisher.Inner.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ObservableObjectPublisher.Inner.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ObservableObjectPublisher.Inner.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectPublisher.Inner<A>.State(char *a1, char *a2)
{
  return static ObservableObjectPublisher.Inner.State.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectPublisher.Inner<A>.State()
{
  return ObservableObjectPublisher.Inner.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectPublisher.Inner<A>.State(uint64_t a1)
{
  ObservableObjectPublisher.Inner.State.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectPublisher.Inner<A>.State()
{
  Hasher.init(_seed:)();
  ObservableObjectPublisher.Inner.State.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t ObservableObjectPublisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BA630;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = (char *)v0 + *(void *)(v1 + 136);
  uint64_t v10 = *(void *)(v1 + 112);
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void ObservableObjectPublisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000019;
  a1[1] = 0x800000018C0BCD90;
}

uint64_t ObservableObjectPublisher.Inner.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  swift_weakDestroy();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 112) - 8) + 8);

  return v3(v2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ObservableObjectPublisher.Inner<A>()
{
  return ObservableObjectPublisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ObservableObjectPublisher.Inner<A>(void *a1@<X8>)
{
}

uint64_t ObservableObjectPublisher.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock;
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *uint64_t v2 = 0;
  *(void *)(v0 + v1) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_connections) = MEMORY[0x1E4FBC870];
  *(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_identifier) = 0;
  ObservationRegistrar.init()();
  return v0;
}

uint64_t ObservableObjectPublisher.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock), -1, -1);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ObservableObjectPublisher.__deallocating_deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher_lock), -1, -1);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7Combine25ObservableObjectPublisher__registrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v3, v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ObservableObjectTable.Storage()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 8));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ObservableObjectTable.Storage()
{
  Hasher._combine(_:)(*(void *)(v0 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ObservableObjectTable.Storage()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 8));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>, (void (*)(void))type metadata accessor for ObservableObjectPublisher.Conduit);
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<AnyCancellable>, (void (*)(void))type metadata accessor for AnyCancellable);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v18);
        Swift::Int result = Hasher._finalize()();
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v25;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      long long v26 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v11 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v12 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_OWORD *)(*(void *)(v4 + 48) + 16 * v12) = v26;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(Swift::UInt a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DebugHook.Handler>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      unint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        unint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t result = (void *)swift_unknownObjectRetain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    unint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    unint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(Swift::UInt a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = ~v5;
  while (*(void *)(*(void *)(v3 + 48) + 16 * v6) != a1)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      return 0;
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v1;
  uint64_t v12 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v12;
  }
  uint64_t v8 = *(void *)(*(void *)(v10 + 48) + 16 * v6);
  specialized _NativeSet._delete(at:)(v6);
  *uint64_t v1 = v12;
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, Swift::UInt a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = __CocoaSet.count.getter();
  uint64_t v5 = swift_unknownObjectRetain();
  Swift::Int v6 = specialized _NativeSet.init(_:capacity:)(v5, v4, &demangling cache variable for type metadata for _SetStorage<ObservableObjectPublisher.Conduit>, (void (*)(void))type metadata accessor for ObservableObjectPublisher.Conduit);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t result = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v10 = *(void *)(v6 + 48);
    if (*(void *)(v10 + 8 * result) == a2)
    {
LABEL_6:
      specialized _NativeSet._delete(at:)(result);
      *uint64_t v2 = v6;
      return a2;
    }
    uint64_t v11 = ~v8;
    while (1)
    {
      unint64_t result = (result + 1) & v11;
      if (((*(void *)(v6 + 56 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        break;
      }
      if (*(void *)(v10 + 8 * result) == a2) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  outlined destroy of ObservableObjectTable.Storage(*(void *)(v7 + 48) + 16 * v4);
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObservableObjectTable.Storage, ObservableObjectPublisher>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    outlined init with copy of ObservableObjectTable.Storage(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v22);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    outlined init with take of ObservableObjectTable.Storage((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Subscription>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    outlined init with copy of Subscription(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)outlined init with take of Subscription(v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

_UNKNOWN **default associated conformance accessor for ObservableObject.ObservableObject.ObjectWillChangePublisher: Publisher()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t ObjC metadata update function for ObservableObjectPublisher()
{
  return type metadata accessor for ObservableObjectPublisher();
}

uint64_t method lookup function for ObservableObjectPublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ObservableObjectPublisher);
}

uint64_t dispatch thunk of ObservableObjectPublisher.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _ObservableObjectProperty.objectWillChange.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t getEnumTagSinglePayload for ObservableObjectPublisher.Inner.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ObservableObjectPublisher.Inner.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18C0448FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ObservableObjectPublisher.Inner.State(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t type metadata accessor for ObservableObjectPublisher.Inner.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in ObservableObjectPublisher.Inner<A>.State()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

ValueMetadata *type metadata accessor for ObservableObjectTable()
{
  return &type metadata for ObservableObjectTable;
}

uint64_t initializeWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for ObservableObjectTable.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t storeEnumTagSinglePayload for ObservableObjectTable.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t Publisher.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile, a5);
}

uint64_t Publishers.PrefixWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.PrefixWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.PrefixWhile, a6);
}

uint64_t type metadata accessor for Publishers.PrefixWhile()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.tryPrefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.prefix(while:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile, a5);
}

uint64_t Publisher.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryPrefixWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.PrefixWhile.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryPrefixWhile, a6);
}

uint64_t Publishers.PrefixWhile.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryPrefixWhile()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.PrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.PrefixWhile.Inner, (uint64_t)&unk_1ED997CA8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

uint64_t type metadata accessor for Publishers.PrefixWhile.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.PrefixWhile.Inner.description.getter()
{
  return 0x6857786966657250;
}

uint64_t Publishers.PrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v8);
  if (v8 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    swift_getAssociatedTypeWitness();
  }
  type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();

  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryPrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.PrefixWhile.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryPrefixWhile.Inner, (uint64_t)&unk_1ED997C80, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.PrefixWhile.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v10 = v7;
  uint64_t v14 = *(void *)(a2 + 24);
  v21[0] = *(void *)(a2 + 16);
  uint64_t v13 = v21[0];
  v21[1] = a3;
  long long v21[2] = v14;
  void v21[3] = a4;
  uint64_t v15 = a5(0, v21);
  uint64_t v16 = (uint64_t *)(v10 + *(int *)(a2 + 36));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_allocObject();
  swift_retain();
  v21[0] = specialized Publishers.PrefixWhile.Inner.init(downstream:filter:)(a1, v17, v18, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v21, v13, v15, v14, WitnessTable);
  return swift_release();
}

uint64_t Publishers.TryPrefixWhile.Inner.description.getter()
{
  return 0x6966657250797254;
}

uint64_t Publishers.TryPrefixWhile.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(v2 + 16))(&v8);
  if (v8 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    swift_getAssociatedTypeWitness();
  }
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion();

  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryPrefixWhile<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryPrefixWhile.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryPrefixWhile.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.PrefixWhile.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v9 = *(void **)v5;
  uint64_t v10 = *(void *)(*(void *)v5 + 280);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *))(v13 + 16))((char *)v16 - v11);
  uint64_t v14 = (void *)swift_allocObject();
  long long v14[2] = v9[34];
  void v14[3] = v10;
  _OWORD v14[4] = v9[36];
  void v14[5] = v9[37];
  v14[6] = a2;
  v14[7] = a3;
  v16[0] = a5;
  v16[1] = v14;
  return FilterProducer.init(downstream:filter:)((uint64_t)v12, (uint64_t)v16);
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixWhile(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0455ECLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.PrefixWhile(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C0457E0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C045808()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18C045844()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Future.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return Future.Conduit.init(_:_:)(a1, a2);
}

uint64_t Future.Conduit.State.downstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unsigned int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = *(void *)(a1 + 32);
      swift_getAssociatedConformanceWitness();
      uint64_t v11 = type metadata accessor for Result();
      int v12 = &v5[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v13 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v5, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v10);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v12, v11);
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 56))(a2, 1, 1);
      break;
    default:
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v5, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
      break;
  }
  return result;
}

uint64_t Future.Conduit.State.hasAnyDemand.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
    return 0;
  }
  return v6;
}

uint64_t Future.Conduit.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 200);
  uint64_t v2 = type metadata accessor for Future.Conduit.State();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
}

uint64_t method lookup function for Future(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Future);
}

void *initializeBufferWithCopyOfBuffer for Future.Conduit.State(void *__dst, unsigned __int8 *__src, void *a3)
{
  uint64_t v4 = __dst;
  uint64_t v5 = *(void *)(a3[4] - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(a3[2] - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 - 8);
  int v11 = *(_DWORD *)(v10 + 80) | v9;
  uint64_t v12 = (*(unsigned char *)(v10 + 80) | v9);
  uint64_t v13 = v6 + v12;
  unint64_t v14 = (v6 + v12) & ~v12;
  if (*(void *)(v10 + 64) <= *(void *)(v8 + 64)) {
    uint64_t v15 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    uint64_t v15 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  if (v15 + v14 + 1 > v6) {
    unint64_t v16 = v15 + v14 + 1;
  }
  else {
    unint64_t v16 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (v6 + 1 > v16) {
    unint64_t v17 = v6 + 1;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = (*(unsigned char *)(v5 + 80) | v11);
  if (v18 > 7 || ((*(_DWORD *)(v5 + 80) | v11) & 0x100000) != 0 || v17 + 1 > 0x18)
  {
    uint64_t v21 = *(void *)__src;
    *uint64_t v4 = *(void *)__src;
    uint64_t v4 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return v4;
  }
  unsigned int v22 = __src[v17];
  unsigned int v23 = v22 - 3;
  if (v22 >= 3)
  {
    if (v17 <= 3) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *__src;
        if (v17 < 4) {
          goto LABEL_40;
        }
        goto LABEL_27;
      case 2:
        int v25 = *(unsigned __int16 *)__src;
        if (v17 >= 4) {
          goto LABEL_27;
        }
        goto LABEL_40;
      case 3:
        int v25 = *(unsigned __int16 *)__src | (__src[2] << 16);
        if (v17 < 4) {
          goto LABEL_40;
        }
        goto LABEL_27;
      case 4:
        int v25 = *(_DWORD *)__src;
        if (v17 >= 4)
        {
LABEL_27:
          unsigned int v22 = v25 + 3;
          break;
        }
LABEL_40:
        int v32 = v25 | (v23 << (8 * v17));
        unsigned int v22 = v32 + 3;
        if (v32 == -1) {
          goto LABEL_41;
        }
        goto LABEL_29;
      default:
        break;
    }
  }
  if (v22 == 2)
  {
LABEL_41:
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *((unsigned char *)v4 + v6) = __src[v6];
    char v33 = 2;
LABEL_53:
    *((unsigned char *)v4 + v17) = v33;
    return v4;
  }
LABEL_29:
  if (v22 == 1)
  {
    uint64_t v26 = ~v12;
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    long long v27 = (unsigned __int8 *)((unint64_t)&__src[v13] & v26);
    unsigned int v28 = v27[v15];
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v30 = v15;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v27;
          goto LABEL_47;
        case 2:
          int v31 = *(unsigned __int16 *)v27;
          goto LABEL_47;
        case 3:
          int v31 = *(unsigned __int16 *)v27 | (*(unsigned __int8 *)(((unint64_t)&__src[v13] & v26) + 2) << 16);
          goto LABEL_47;
        case 4:
          int v31 = *(_DWORD *)v27;
LABEL_47:
          int v34 = (v31 | (v29 << (8 * v15))) + 2;
          unsigned int v28 = v31 + 2;
          if (v15 < 4) {
            unsigned int v28 = v34;
          }
          break;
        default:
          break;
      }
    }
    BOOL v35 = v28 == 1;
    if (v28 == 1) {
      uint64_t v36 = v10;
    }
    else {
      uint64_t v36 = v8;
    }
    (*(void (**)(unint64_t))(v36 + 16))(((unint64_t)v4 + v13) & v26);
    *(unsigned char *)((((unint64_t)v4 + v13) & v26) + v15) = v35;
    char v33 = 1;
    goto LABEL_53;
  }
  if (v22)
  {
    memcpy(__dst, __src, v17 + 1);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *((unsigned char *)v4 + v17) = 0;
  }
  return v4;
}

unsigned __int8 *assignWithCopy for Future.Conduit.State(unsigned __int8 *__dst, unsigned __int8 *__src, void *a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = a3[4];
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v43 = a3[2];
    uint64_t v42 = *(void *)(v43 - 8);
    uint64_t v8 = *(void *)(a3[3] - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80) | *(unsigned __int8 *)(v42 + 80);
    uint64_t v10 = v7 + v9;
    unint64_t v11 = (v7 + v9) & ~v9;
    if (*(void *)(v8 + 64) <= *(void *)(v42 + 64)) {
      uint64_t v12 = *(void *)(*(void *)(v43 - 8) + 64);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 64);
    }
    if (v12 + v11 + 1 > v7) {
      unint64_t v13 = v12 + v11 + 1;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (v7 + 1 > v13) {
      unint64_t v14 = v7 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    unsigned int v15 = __dst[v14];
    unsigned int v16 = v15 - 3;
    if (v15 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *__dst;
          if (v14 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 2:
          int v18 = *(unsigned __int16 *)__dst;
          if (v14 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 3:
          int v18 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          if (v14 < 4) {
            goto LABEL_21;
          }
          goto LABEL_19;
        case 4:
          int v18 = *(_DWORD *)__dst;
          if (v14 >= 4) {
LABEL_19:
          }
            unsigned int v15 = v18 + 3;
          else {
LABEL_21:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v9;
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
        uint64_t v21 = (unsigned __int8 *)((unint64_t)&__dst[v10] & v19);
        unsigned int v22 = v21[v12];
        unsigned int v23 = v22 - 2;
        if (v22 >= 2)
        {
          if (v12 <= 3) {
            uint64_t v24 = v12;
          }
          else {
            uint64_t v24 = 4;
          }
          switch(v24)
          {
            case 1:
              int v25 = *v21;
              goto LABEL_37;
            case 2:
              int v25 = *(unsigned __int16 *)v21;
              goto LABEL_37;
            case 3:
              int v25 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(((unint64_t)&__dst[v10] & v19) + 2) << 16);
              goto LABEL_37;
            case 4:
              int v25 = *(_DWORD *)v21;
LABEL_37:
              int v26 = (v25 | (v23 << (8 * v12))) + 2;
              unsigned int v22 = v25 + 2;
              if (v12 < 4) {
                unsigned int v22 = v26;
              }
              break;
            default:
              break;
          }
        }
        if (v22 == 1) {
          unint64_t v20 = *(void (**)(void))(v8 + 8);
        }
        else {
          unint64_t v20 = *(void (**)(void))(v42 + 8);
        }
        goto LABEL_42;
      }
      if (v15) {
        goto LABEL_43;
      }
    }
    unint64_t v20 = *(void (**)(void))(v6 + 8);
LABEL_42:
    v20();
LABEL_43:
    unsigned int v27 = __src[v14];
    unsigned int v28 = v27 - 3;
    if (v27 >= 3)
    {
      if (v14 <= 3) {
        uint64_t v29 = v14;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *__src;
          if (v14 < 4) {
            goto LABEL_64;
          }
          goto LABEL_51;
        case 2:
          int v30 = *(unsigned __int16 *)__src;
          if (v14 >= 4) {
            goto LABEL_51;
          }
          goto LABEL_64;
        case 3:
          int v30 = *(unsigned __int16 *)__src | (__src[2] << 16);
          if (v14 < 4) {
            goto LABEL_64;
          }
          goto LABEL_51;
        case 4:
          int v30 = *(_DWORD *)__src;
          if (v14 >= 4)
          {
LABEL_51:
            unsigned int v27 = v30 + 3;
            break;
          }
LABEL_64:
          int v36 = v30 | (v28 << (8 * v14));
          unsigned int v27 = v36 + 3;
          if (v36 == -1) {
            goto LABEL_65;
          }
          goto LABEL_53;
        default:
          break;
      }
    }
    if (v27 == 2)
    {
LABEL_65:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = __src[v7];
      char v37 = 2;
    }
    else
    {
LABEL_53:
      if (v27 != 1)
      {
        if (v27)
        {
          memcpy(__dst, __src, v14 + 1);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
          __dst[v14] = 0;
        }
        return __dst;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      int v31 = (unsigned __int8 *)((unint64_t)&__src[v10] & v19);
      unsigned int v32 = v31[v12];
      unsigned int v33 = v32 - 2;
      if (v32 >= 2)
      {
        if (v12 <= 3) {
          uint64_t v34 = v12;
        }
        else {
          uint64_t v34 = 4;
        }
        switch(v34)
        {
          case 1:
            int v35 = *v31;
            goto LABEL_71;
          case 2:
            int v35 = *(unsigned __int16 *)v31;
            goto LABEL_71;
          case 3:
            int v35 = *(unsigned __int16 *)v31 | (*(unsigned __int8 *)(((unint64_t)&__src[v10] & v19) + 2) << 16);
            goto LABEL_71;
          case 4:
            int v35 = *(_DWORD *)v31;
LABEL_71:
            int v38 = (v35 | (v33 << (8 * v12))) + 2;
            unsigned int v32 = v35 + 2;
            if (v12 < 4) {
              unsigned int v32 = v38;
            }
            break;
          default:
            break;
        }
      }
      BOOL v39 = v32 == 1;
      uint64_t v40 = v42;
      if (v32 == 1) {
        uint64_t v40 = v8;
      }
      (*(void (**)(unint64_t))(v40 + 16))((unint64_t)&__dst[v10] & v19);
      *(unsigned char *)(((unint64_t)&__dst[v10] & v19) + v12) = v39;
      char v37 = 1;
    }
    __dst[v14] = v37;
  }
  return __dst;
}

unsigned char *initializeWithTake for Future.Conduit.State(unsigned char *__dst, unsigned __int8 *__src, void *a3)
{
  uint64_t v5 = *(void *)(a3[4] - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(a3[2] - 8);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80) | *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  unint64_t v12 = (v6 + v10) & ~v10;
  if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
    uint64_t v13 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  if (v13 + v12 + 1 > v6) {
    unint64_t v14 = v13 + v12 + 1;
  }
  else {
    unint64_t v14 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (v6 + 1 > v14) {
    unint64_t v15 = v6 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  unsigned int v16 = __src[v15];
  unsigned int v17 = v16 - 3;
  if (v16 >= 3)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *__src;
        goto LABEL_19;
      case 2:
        int v19 = *(unsigned __int16 *)__src;
        goto LABEL_19;
      case 3:
        int v19 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_19;
      case 4:
        int v19 = *(_DWORD *)__src;
LABEL_19:
        int v20 = (v19 | (v17 << (8 * v15))) + 3;
        unsigned int v16 = v19 + 3;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  if (v16 == 2)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v6] = __src[v6];
    char v27 = 2;
LABEL_42:
    __dst[v15] = v27;
    return __dst;
  }
  if (v16 == 1)
  {
    uint64_t v21 = ~v10;
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    unsigned int v22 = (unsigned __int8 *)((unint64_t)&__src[v11] & v21);
    unsigned int v23 = v22[v13];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v25 = v13;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v22;
          goto LABEL_36;
        case 2:
          int v26 = *(unsigned __int16 *)v22;
          goto LABEL_36;
        case 3:
          int v26 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(((unint64_t)&__src[v11] & v21) + 2) << 16);
          goto LABEL_36;
        case 4:
          int v26 = *(_DWORD *)v22;
LABEL_36:
          int v28 = (v26 | (v24 << (8 * v13))) + 2;
          unsigned int v23 = v26 + 2;
          if (v13 < 4) {
            unsigned int v23 = v28;
          }
          break;
        default:
          break;
      }
    }
    BOOL v29 = v23 == 1;
    if (v23 == 1) {
      uint64_t v30 = v9;
    }
    else {
      uint64_t v30 = v8;
    }
    (*(void (**)(unint64_t))(v30 + 32))((unint64_t)&__dst[v11] & v21);
    *(unsigned char *)(((unint64_t)&__dst[v11] & v21) + v13) = v29;
    char v27 = 1;
    goto LABEL_42;
  }
  if (v16)
  {
    memcpy(__dst, __src, v15 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v15] = 0;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for Future.Conduit.State(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80) | *(unsigned __int8 *)(*(void *)(a3[2] - 8) + 80);
  unint64_t v6 = (v3 + v5) & ~v5;
  unint64_t v7 = *(void *)(*(void *)(a3[2] - 8) + 64);
  unint64_t v8 = *(void *)(v4 + 64);
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  unint64_t v9 = v7 + v6;
  if (v9 + 1 > v3) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (v3 + 1 > v10) {
    unint64_t v11 = v3 + 1;
  }
  else {
    unint64_t v11 = v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_28;
  }
  unint64_t v12 = v11 + 1;
  char v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    unsigned int v16 = ((a2 + ~(-1 << v13) - 252) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v16 < 2)
    {
LABEL_28:
      unsigned int v18 = *((unsigned __int8 *)a1 + v11);
      if (v18 >= 4) {
        return (v18 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_28;
  }
LABEL_20:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v12 | v17) + 253;
}

void storeEnumTagSinglePayload for Future.Conduit.State(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[4] - 8) + 64);
  uint64_t v6 = *(void *)(a4[3] - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(*(void *)(a4[2] - 8) + 80);
  unint64_t v8 = (v5 + v7) & ~v7;
  unint64_t v9 = *(void *)(*(void *)(a4[2] - 8) + 64);
  unint64_t v10 = *(void *)(v6 + 64);
  if (v10 > v9) {
    unint64_t v9 = v10;
  }
  unint64_t v11 = v9 + v8;
  if (v11 + 1 > v5) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(a4[4] - 8) + 64);
  }
  if (v5 + 1 > v12) {
    unint64_t v12 = v5 + 1;
  }
  size_t v13 = v12 + 1;
  if (a3 < 0xFD)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 252) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v15 = a2 - 253;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v12 != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12 + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x18C046E7CLL);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          a1[v12] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for Future.Conduit.State(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[4] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80) | *(unsigned __int8 *)(*(void *)(a2[2] - 8) + 80);
  unint64_t v5 = (v2 + v4) & ~v4;
  unint64_t v6 = *(void *)(*(void *)(a2[2] - 8) + 64);
  unint64_t v7 = *(void *)(v3 + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = v6 + v5;
  if (v8 + 1 > v2) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a2[4] - 8) + 64);
  }
  if (v2 + 1 > v9) {
    unint64_t v10 = v2 + 1;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = a1[v10];
  int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_18;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v15 = (v14 | (v12 << (8 * v10))) + 3;
        LODWORD(v11) = v14 + 3;
        if (v10 >= 4) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = v15;
        }
        break;
      default:
        return v11;
    }
  }
  return v11;
}

void destructiveInjectEnumTag for Future.Conduit.State(unsigned char *a1, unsigned int a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v5 = *(void *)(a3[3] - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80) | *(unsigned __int8 *)(*(void *)(a3[2] - 8) + 80);
  unint64_t v7 = (v4 + v6) & ~v6;
  unint64_t v8 = *(void *)(*(void *)(a3[2] - 8) + 64);
  unint64_t v9 = *(void *)(v5 + 64);
  if (v9 > v8) {
    unint64_t v8 = v9;
  }
  unint64_t v10 = v8 + v7;
  if (v10 + 1 > v4) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (v4 + 1 > v11) {
    size_t v12 = v4 + 1;
  }
  else {
    size_t v12 = v11;
  }
  if (a2 > 2)
  {
    unsigned int v13 = a2 - 3;
    if (v12 < 4)
    {
      unsigned int v14 = v13 >> (8 * v12);
      int v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 3;
      bzero(a1, v12);
      if (v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if (v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 3;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    a1[v12] = a2;
  }
}

void Future.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = v1;
  uint64_t v37 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v36 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  int v35 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v3[20];
  uint64_t v8 = v3[21];
  uint64_t v9 = v3[22];
  uint64_t v10 = v3[23];
  uint64_t v40 = v38;
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  uint64_t v34 = v10;
  uint64_t v11 = type metadata accessor for Future.Conduit.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unsigned int v33 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v16 = (char *)&v29 - v15;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v3[26]));
  BOOL v39 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_18C0BBFD0;
  *(void *)(v17 + 32) = 0x746E65726170;
  *(void *)(v17 + 40) = 0xE600000000000000;
  uint64_t v29 = v2[2];
  uint64_t v18 = v29;
  uint64_t v30 = v9;
  uint64_t v32 = v8;
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Future();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v31 = v19;
  *(void *)(v17 + 48) = v18;
  *(void *)(v17 + 72) = v19;
  *(void *)(v17 + 80) = 0x657274736E776F64;
  *(void *)(v17 + 88) = 0xEA00000000006D61;
  int v20 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v21(v16, v20, v11);
  *(void *)(v17 + 120) = type metadata accessor for Optional();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 96));
  swift_retain();
  swift_retain();
  Future.Conduit.State.downstream.getter(v11, (uint64_t)boxed_opaque_existential_1);
  unsigned int v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v16, v11);
  strcpy((char *)(v17 + 128), "hasAnyDemand");
  *(unsigned char *)(v17 + 141) = 0;
  *(_WORD *)(v17 + 142) = -5120;
  unsigned int v24 = v33;
  v21(v33, v20, v11);
  uint64_t v25 = v24;
  LOBYTE(v24) = Future.Conduit.State.hasAnyDemand.getter(v11);
  v23(v25, v11);
  uint64_t v26 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v17 + 144) = v24 & 1;
  *(void *)(v17 + 168) = v26;
  *(void *)(v17 + 176) = 0x7463656A627573;
  uint64_t v27 = v2[2];
  *(void *)(v17 + 216) = v31;
  *(void *)(v17 + 184) = 0xE700000000000000;
  *(void *)(v17 + 192) = v27;
  uint64_t v28 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v35, 1, 1, v28);
  uint64_t v40 = v38;
  uint64_t v41 = v32;
  uint64_t v42 = v30;
  uint64_t v43 = v34;
  type metadata accessor for Future.Conduit();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v36);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + *(void *)(*v2 + 208)));
}

void Future.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x657275747546;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Future<A, B>.Conduit<A1>()
{
  return 0x657275747546;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Future<A, B>.Conduit<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Future<A, B>.Conduit<A1>(void *a1@<X8>)
{
}

uint64_t Empty.init(completeImmediately:outputType:failureType:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Empty.completeImmediately.getter()
{
  return *v0;
}

BOOL static Empty.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t getEnumTagSinglePayload for Empty(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Empty(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18C047844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t Publishers.SetFailureType.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.SetFailureType.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.SetFailureType.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.SetFailureType.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "SetFailureType");
  *(unsigned char *)(a1 + 15) = -18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>()
{
  return 0x756C696146746553;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.SetFailureType<A, B>.Inner<A1, B1>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 76));
  return result;
}

uint64_t Publishers.SetFailureType.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, v5);
}

uint64_t static Publishers.SetFailureType<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.SetFailureType<A, B>()
{
  return static Publishers.SetFailureType<>.== infix(_:_:)();
}

uint64_t getEnumTagSinglePayload for Publishers.SetFailureType(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.SetFailureType(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C047F90);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SetFailureType.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.SetFailureType.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t Optional.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  int v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t Optional.Publisher.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for Optional.Publisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *Optional.Publisher.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  return Optional.Publisher.Inner.init(downstream:output:)(a1, a2);
}

uint64_t Optional.Publisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  size_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v0;
  uint64_t v9 = *(void *)(v1 + 80);
  getContiguousArrayStorageType<A>(for:)(v9, v9);
  uint64_t v10 = *(void *)(v9 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v11 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, (uint64_t)v0 + *(void *)(*v0 + 112), v9);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v15 = v11;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  type metadata accessor for Array();
  swift_getWitnessTable();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Optional.Publisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6C616E6F6974704FLL;
  a1[1] = 0xE800000000000000;
}

uint64_t *Optional.Publisher.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  size_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v2 + *(void *)(v3 + 104);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v14, v4);
  v11((uint64_t)v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 112), v15);
  return v2;
}

uint64_t Optional.Publisher.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))((char *)&v8 - v4, 1, 1, v1);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

uint64_t Optional.Publisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = &v19[-v11];
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188790](v10);
  uint64_t v16 = &v19[-v15];
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!a1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_4:
  uint64_t v17 = (uint64_t)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v12, v5);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v16, v12, v4);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
  swift_beginAccess();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 40))(v17, v9, v5);
  swift_endAccess();
  uint64_t v18 = *(void *)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v4, v18);
  v19[0] = 1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v18 + 56))(v19, v4, v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v4);
}

uint64_t protocol witness for Subscription.request(_:) in conformance A?.Publisher.Inner<A1>(uint64_t a1)
{
  return Optional.Publisher.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance A?.Publisher.Inner<A1>()
{
  return 0x6C616E6F6974704FLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance A?.Publisher.Inner<A1>()
{
  return Optional.Publisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance A?.Publisher.Inner<A1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance A?.Publisher.Inner<A1>()
{
  return Optional.Publisher.Inner.cancel()();
}

uint64_t static Optional.Publisher<A>.== infix(_:_:)(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v5 = *((void *)a3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v44 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v35 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v35 - v18;
  int v20 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v20((char *)&v35 - v18, v42, v7);
  v20(v17, v43, v7);
  uint64_t v40 = TupleTypeMetadata2;
  uint64_t v21 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v20(v11, v19, v7);
  uint64_t v42 = v21;
  v20(v21, v17, v7);
  uint64_t v41 = v5;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v43 = a3;
  if (v22(v11, 1, (uint64_t)a3) != 1)
  {
    uint64_t v36 = v12;
    v20(v44, v11, v7);
    uint64_t v26 = v42;
    uint64_t v25 = v43;
    int v27 = v22(v42, 1, (uint64_t)v43);
    uint64_t v28 = v41;
    uint64_t v29 = (void (**)(char *, uint64_t))(v41 + 8);
    if (v27 != 1)
    {
      uint64_t v31 = v37;
      (*(void (**)(char *, char *, char *))(v41 + 32))(v37, v26, v25);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
      v32(v31, (uint64_t)v25);
      unsigned int v33 = *(void (**)(char *, uint64_t))(v36 + 8);
      v33(v17, v7);
      v33(v19, v7);
      v32(v44, (uint64_t)v25);
      v33(v11, v7);
      return v24 & 1;
    }
    uint64_t v30 = *(void (**)(char *, uint64_t))(v36 + 8);
    v30(v17, v7);
    v30(v19, v7);
    (*v29)(v44, (uint64_t)v25);
    goto LABEL_6;
  }
  unsigned int v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v17, v7);
  v23(v19, v7);
  if (v22(v42, 1, (uint64_t)v43) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v40);
    char v24 = 0;
    return v24 & 1;
  }
  v23(v11, v7);
  char v24 = 1;
  return v24 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> A?.Publisher(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static Optional.Publisher<A>.== infix(_:_:)(a1, a2, *(char **)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t Optional.Publisher<A>.contains(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v15[-v11];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(&v15[-v11], v4, v9);
  uint64_t v16 = v8;
  uint64_t v17 = a3;
  uint64_t v18 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher<A>.contains(_:), (uint64_t)v15, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], v13, (uint64_t)&v19);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  *a4 = v19;
  return result;
}

uint64_t partial apply for closure #1 in Optional.Publisher<A>.contains(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:), a4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.allSatisfy(_:)(a1);
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result & 1;
  return result;
}

uint64_t Optional.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v14 = static Array._allocateUninitialized(_:)();
  }
  else
  {
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v15(v13, v10, v5);
    getContiguousArrayStorageType<A>(for:)(v5, v5);
    swift_allocObject();
    uint64_t v16 = static Array._adoptStorage(_:count:)();
    v15(v17, v13, v5);
    uint64_t v14 = v16;
    _finalizeUninitializedArray<A>(_:)();
  }
  uint64_t v21 = v14;
  type metadata accessor for Array();
  uint64_t v18 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 32))(a2, &v21, v18);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:), (void (*)(uint64_t, unsigned char *, uint64_t, void, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a5);
}

uint64_t Optional.Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  return Optional.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.allSatisfy(_:), a4);
}

uint64_t Optional.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *)@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v17[-v13];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(&v17[-v13], v5, v11);
  uint64_t v18 = v10;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a4, (uint64_t)v17, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], v15, (uint64_t)&v21);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
  *a5 = v21;
  return result;
}

uint64_t Optional.Publisher.count()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v12[-v7];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v12[-v7], v2, v5);
  uint64_t v13 = v4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.count(), (uint64_t)v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB550], v9, (uint64_t)&v14);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  char v11 = v15;
  *(void *)a2 = v14;
  *(unsigned char *)(a2 + 8) = v11;
  return result;
}

uint64_t Optional.Publisher.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](v7);
  char v11 = (char *)&v12 - v10;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a1) {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v11, 1, 1, v6);
    }
    else {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3, v7);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, v7);
  }
  return result;
}

uint64_t Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.drop(while:), a4);
}

uint64_t Optional.Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.ignoreOutput()@<X0>(unsigned char *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Optional.Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional.Publisher.compactMap<A>(_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:), (void (*)(uint64_t, unsigned char *, uint64_t, void, uint64_t, void))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a5);
}

uint64_t Optional.Publisher.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t, unsigned char *, uint64_t, void, uint64_t, void)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a5;
  unsigned int v23 = a6;
  uint64_t v8 = v7;
  uint64_t v21 = a2;
  uint64_t v24 = a7;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v21 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  uint64_t v26 = v11;
  uint64_t v27 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = v21;
  v23(v22, v25, v12, MEMORY[0x1E4FBC248], a4, MEMORY[0x1E4FBC278]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)(a1, a2, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output(at:), a3);
}

uint64_t Optional.Publisher.output<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v22[0] = a4;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)v22 - v14;
  long long v23 = xmmword_18C0BBE70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v17 = v24;
  if (v24 < 0 || (uint64_t v18 = v25, v25 > 0x7FFFFFFFFFFFFFFDLL))
  {
    __break(1u);
  }
  else if (v24 == v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v15, 1, 1, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22[0], v15, v9);
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5, v9);
    MEMORY[0x1F4188790](v19);
    v22[-6] = v8;
    v22[-5] = a2;
    v22[-4] = a3;
    v22[-3] = v17;
    v22[-2] = v18;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.output<A>(in:), (uint64_t)&v22[-8], MEMORY[0x1E4FBC248], v8, v20, (uint64_t)v15);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    v21(v13, v9);
    Optional.publisher.getter(v9, v22[0]);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v9);
  }
  return result;
}

uint64_t Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional.Publisher.output(at:)(a1, a2, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.prefix(_:), a3);
}

uint64_t Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v16 = &v20[-v15];
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, v4, v9);
    MEMORY[0x1F4188790](v17);
    *(void *)&v20[-16] = v8;
    *(void *)&v20[-8] = a1;
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(a3, (uint64_t)&v20[-32], MEMORY[0x1E4FBC248], v8, v18, (uint64_t)v16);
    uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
    v19(v13, v9);
    Optional.publisher.getter(v9, a4);
    return ((uint64_t (*)(unsigned char *, uint64_t))v19)(v16, v9);
  }
  return result;
}

uint64_t Optional.Publisher.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional.Publisher.drop(while:)(a1, a2, a3, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.first(where:), a4);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Optional.Publisher.replaceError(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Optional.Publisher.replaceEmpty(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v7);
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v19(v18, v12, v7);
    v19(v16, v18, v7);
  }
  return Just.init(_:)((uint64_t)v16, v7, a3);
}

uint64_t Optional.Publisher.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Optional.Publisher.scan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Optional.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *, char *))partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Optional.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *, char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a6;
  uint64_t v8 = v7;
  uint64_t v22 = a1;
  uint64_t v25 = a7;
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v8, v12);
  uint64_t v27 = v11;
  uint64_t v28 = a5;
  uint64_t v29 = a2;
  uint64_t v30 = v23;
  uint64_t v31 = v22;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(v24, (uint64_t)v26, MEMORY[0x1E4FBC248], a5, v20, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  Optional.publisher.getter(v16, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)()
{
  return partial apply for closure #1 in Optional.Publisher.compactMap<A>(_:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

void partial apply for closure #1 in Optional.Publisher.count()(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t partial apply for closure #1 in Optional.Publisher.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = (*(uint64_t (**)(void))(v2 + 24))();
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
    uint64_t v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Optional.Publisher.first(where:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = (*(uint64_t (**)(void))(v2 + 24))();
  uint64_t v7 = *(void *)(v5 - 8);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v8, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (v4)
  {
    uint64_t v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.output<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v4 - 8);
  if (v5)
  {
    uint64_t v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v4);
}

uint64_t partial apply for closure #1 in Optional.Publisher.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (v4 < 1)
  {
    uint64_t v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
    uint64_t v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

uint64_t partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(uint64_t a1)
{
  return partial apply for closure #1 in Optional.Publisher.reduce<A>(_:_:)(a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(void, uint64_t))(v1 + 32))(*(void *)(v1 + 48), a1);
}

void *assignWithCopy for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *initializeWithTake for Optional.Publisher(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for Optional.Publisher(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Optional.Publisher(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Optional.Publisher(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x18C04B508);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool)@<X0>(uint64_t (*a1)(void)@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(uint64_t (*a1)(void)@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.contains(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere, a5);
}

uint64_t Publishers.ContainsWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.ContainsWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ContainsWhere, a6);
}

uint64_t type metadata accessor for Publishers.ContainsWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.tryContains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.contains(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere, a5);
}

uint64_t Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  int v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *int v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryContainsWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.ContainsWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryContainsWhere, a6);
}

uint64_t Publishers.ContainsWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryContainsWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.ContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.ContainsWhere.Inner, (uint64_t)&unk_1ED997D20, (uint64_t)_s6Output7Combine9PublisherPQzSbIegnd_AESbIegnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtzSb5InputRtd__r__lTRTA_0);
}

uint64_t type metadata accessor for Publishers.ContainsWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.ContainsWhere.Inner.description.getter()
{
  return 0x736E6961746E6F43;
}

void *Publishers.ContainsWhere.Inner.receive(newValue:)()
{
  uint64_t v1 = v0;
  uint64_t result = (*(void *(**)(void *__return_ptr))(v0 + 24))(v5);
  if (LOBYTE(v5[0]) == 1)
  {
    int v3 = *(unsigned __int8 *)(v0 + 17);
    if (v3 == 2)
    {
      __break(1u);
    }
    else
    {
      BOOL v4 = (v3 & 1) == 0;
      swift_beginAccess();
      *(unsigned char *)(v1 + 16) = v4;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for PartialCompletion();
      return (void *)swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return (void *)swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ContainsWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ContainsWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryContainsWhere.Inner, (uint64_t)&unk_1ED997CF8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.ContainsWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v10 = v7;
  uint64_t v14 = *(void *)(a2 + 24);
  v21[0] = *(void *)(a2 + 16);
  uint64_t v13 = v21[0];
  v21[1] = a3;
  long long v21[2] = v14;
  void v21[3] = a4;
  uint64_t v15 = a5(0, v21);
  int v16 = (uint64_t *)(v10 + *(int *)(a2 + 36));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  swift_allocObject();
  swift_retain();
  v21[0] = specialized Publishers.ContainsWhere.Inner.init(downstream:initial:reduce:)(a1, 0, v17, v18, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v21, v13, v15, v14, WitnessTable);
  return swift_release();
}

unint64_t Publishers.TryContainsWhere.Inner.description.getter()
{
  return 0xD000000000000010;
}

uint64_t Publishers.TryContainsWhere.Inner.receive(newValue:)()
{
  (*(void (**)(void *__return_ptr))(v0 + 24))(v2);
  if (LOBYTE(v2[0]) != 1) {
    return 0;
  }
  swift_beginAccess();
  uint64_t result = 0;
  *(unsigned char *)(v0 + 16) = 1;
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryContainsWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Publishers.TryContainsWhere.Inner.receive(newValue:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryContainsWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryContainsWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryContainsWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.ContainsWhere.Inner.init(downstream:initial:reduce:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v11 = *(void **)v6;
  uint64_t v12 = *(void *)(*(void *)v6 + 448);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v19[-1] - v13;
  (*(void (**)(char *))(v15 + 16))((char *)&v19[-1] - v13);
  char v20 = a2;
  int v16 = (void *)swift_allocObject();
  void v16[2] = v11[55];
  void v16[3] = v12;
  void v16[4] = v11[57];
  void v16[5] = v11[58];
  v16[6] = a3;
  v16[7] = a4;
  v19[0] = a6;
  v19[1] = v16;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)&v20, (uint64_t)v19);
}

uint64_t getEnumTagSinglePayload for Publishers.ContainsWhere(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C04BF38);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.ContainsWhere(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C04C12CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C04C154()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of SubscriberTapMarker?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SubscriberTapMarker?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for Publishers()
{
  return &type metadata for Publishers;
}

void (*protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>(uint64_t **a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = (uint64_t *)malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (uint64_t)Published.objectWillChange.modify(v4, a2);
  return protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>;
}

void protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance Published<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*Published.objectWillChange.modify(uint64_t *a1, uint64_t a2))(uint64_t a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = Published.objectWillChange.getter();
  return Published.objectWillChange.modify;
}

uint64_t Published.objectWillChange.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((a2 & 1) == 0) {
    return Published.objectWillChange.setter(*(os_unfair_lock_s **)a1, v2);
  }
  char v3 = (os_unfair_lock_s *)swift_retain();
  Published.objectWillChange.setter(v3, v2);

  return swift_release();
}

uint64_t key path setter for Published.objectWillChange : <A>Published<A>()
{
  uint64_t v0 = type metadata accessor for Published();
  uint64_t v1 = (os_unfair_lock_s *)swift_retain();
  return Published.objectWillChange.setter(v1, v0);
}

void Published.wrappedValue.getter()
{
}

void Published.wrappedValue.setter()
{
}

void Published.wrappedValue.modify()
{
}

uint64_t static Published.enableObservableInteraction.getter()
{
  if (one-time initialization token for observableObservableObjectAvailable != -1) {
    swift_once();
  }
  return static CombineFeatures.observableObservableObjectAvailable;
}

uint64_t applyAcess #1 <A><A1><A2>(_:) in static Published.access<A>(_:keyPath:storage:)()
{
  return ObservableObjectPublisher.access<A, B>(_:keyPath:)();
}

uint64_t applyMutation #1 <A><A1><A2>(_:) in static Published.withMutation<A>(of:keyPath:storage:apply:)()
{
  return ObservableObjectPublisher.withMutation<A, B>(of:keyPath:apply:)();
}

void specialized Published.wrappedValue.setter()
{
}

uint64_t sub_18C04C734@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Published();
  uint64_t result = Published.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18C04C774()
{
  return 8;
}

void *sub_18C04C780(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_18C04C78C()
{
}

void sub_18C04C79C()
{
}

uint64_t sub_18C04C7D0()
{
  return 8;
}

unsigned __int8 *assignWithCopy for Published(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

void *initializeWithTake for Published(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for Published(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

void *assignWithCopy for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyAssign();
  return a1;
}

void *assignWithTake for PublishedSubscriber(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeAssign();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for Published(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *char v3 = *(void *)a2;
    char v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v5) = 1;
  }
  swift_retain();
  return v3;
}

unsigned __int8 *assignWithCopy for Published.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

void *initializeWithTake for Published.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for Published.Storage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for Published.Storage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x18C04D624);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for Published.Storage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for Published.Storage(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t instantiation function for generic protocol witness table for Publishers.MakeConnectable<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of ConnectablePublisher.connect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Publishers.Collect.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.CollectByCount.init(upstream:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for Publishers.CollectByCount();
  *(void *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t Publishers.TimeGroupingStrategy.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  unsigned int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v8 = *(void *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v10 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32);
  if (EnumCaseMultiPayload == 1) {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  }
  else {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata2();
  }
  int v12 = &v5[*(int *)(TupleTypeMetadata3 + 48)];
  v10(a2, v5, v8);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v12, AssociatedTypeWitness);
}

uint64_t Publishers.CollectByTime.strategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for Publishers.TimeGroupingStrategy();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Publishers.CollectByTime.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t *Publishers.CollectByTime.Inner.__allocating_init(downstream:strategy:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.CollectByTime.Inner.init(downstream:strategy:options:)(a1, a2, a3);
}

void Publishers.CollectByTime.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 176)));
  uint64_t v26 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BD860;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 128);
  uint64_t v11 = *(void *)(v2 + 96);
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0x7967657461727473;
  *(void *)(v9 + 88) = 0xE800000000000000;
  uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 136);
  uint64_t v14 = type metadata accessor for Publishers.TimeGroupingStrategy();
  *(void *)(v9 + 120) = v14;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  *(void *)(v9 + 128) = 0x736E6F6974706FLL;
  *(void *)(v9 + 136) = 0xE700000000000000;
  uint64_t v16 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  *(void *)(v9 + 168) = v17;
  char v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v18, v16, v17);
  *(void *)(v9 + 176) = 0x737574617473;
  *(void *)(v9 + 184) = 0xE600000000000000;
  uint64_t v19 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  *(void *)(v9 + 216) = &type metadata for SubscriptionStatus;
  uint64_t v20 = swift_allocObject();
  *(void *)(v9 + 192) = v20;
  outlined init with copy of SubscriptionStatus(v19, v20 + 16);
  *(void *)(v9 + 224) = 0x656C756465686373;
  *(void *)(v9 + 232) = 0xE900000000000064;
  uint64_t v21 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  *(void *)(v9 + 264) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  uint64_t v22 = swift_allocObject();
  *(void *)(v9 + 240) = v22;
  outlined init with copy of Any?(v21, v22 + 16, &demangling cache variable for type metadata for Cancellable?);
  *(void *)(v9 + 272) = 0x646E616D6564;
  *(void *)(v9 + 280) = 0xE600000000000000;
  uint64_t v23 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 192));
  *(void *)(v9 + 312) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 288) = v23;
  uint64_t v24 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v8, 1, 1, v24);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 176)));
}

void Publishers.CollectByTime.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "CollectByTime");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t *Publishers.CollectByTime.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v3 = type metadata accessor for Publishers.TimeGroupingStrategy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = (uint64_t)v0 + *(void *)(*v0 + 144);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 160));
  outlined destroy of CustomStringConvertible?((uint64_t)v0 + *(void *)(*v0 + 184), &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t Publishers.CollectByTime.Inner.__deallocating_deinit()
{
  return Publishers.CollectByTime.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.CollectByTime.Inner.deinit);
}

void Publishers.CollectByTime.Inner.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v2));
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)v10);
  if (v11)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v10);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
  }
  else
  {
    outlined init with take of Subscription((long long *)v10, (uint64_t)v12);
    swift_getAssociatedTypeWitness();
    uint64_t v4 = static Array._allocateUninitialized(_:)();
    uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 152));
    swift_beginAccess();
    *uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v10 = 1;
    memset(&v10[8], 0, 32);
    char v11 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v10, v3);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v2));
    uint64_t v7 = v13;
    uint64_t v6 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
    uint64_t v8 = v1 + *(void *)(*(void *)v1 + 184);
    swift_beginAccess();
    if (*(void *)(v8 + 24))
    {
      outlined init with copy of Subscription(v8, (uint64_t)v10);
      long long v9 = *(_OWORD *)&v10[24];
      __swift_project_boxed_opaque_existential_1(v10, *(uint64_t *)&v10[24]);
      (*(void (**)(void, void))(*((void *)&v9 + 1) + 8))(v9, *((void *)&v9 + 1));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
    memset(v10, 0, sizeof(v10));
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v10, v8, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
}

uint64_t closure #1 in Publishers.CollectByTime.Inner.receive(_:)(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v11 = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v6 + 120) + 48))(&v11, *(void *)(v6 + 96));
  if (result != 0x8000000000000000)
  {
    uint64_t v10 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      if (!result) {
        return result;
      }
      uint64_t v8 = a3[3];
      uint64_t v9 = a3[4];
      __swift_project_boxed_opaque_existential_1(a3, v8);
      uint64_t result = v10 * a4;
      if ((unsigned __int128)(v10 * (__int128)a4) >> 64 != (v10 * a4) >> 63) {
        goto LABEL_6;
      }
      if ((result & 0x8000000000000000) == 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(result, v8, v9);
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v8);
LABEL_6:
  uint64_t result = 0x8000000000000000;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(result, v8, v9);
}

void Publishers.CollectByTime.Inner.receive(completion:)(void (*a1)(char *, char *, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)*v1;
  uint64_t v61 = a1;
  uint64_t v62 = v3;
  uint64_t v4 = v3[13];
  uint64_t v5 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v57 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[1] = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v63 = (char *)v56 - v11;
  uint64_t v12 = v3[11];
  uint64_t v59 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v65 = (uint64_t)v56 - v13;
  uint64_t v64 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Subscribers.Completion();
  uint64_t v60 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v56 - v15;
  uint64_t v17 = (uint64_t)v2 + v3[23];
  swift_beginAccess();
  if (*(void *)(v17 + 24))
  {
    outlined init with copy of Subscription(v17, (uint64_t)v67);
    Swift::String v58 = v16;
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = v14;
    uint64_t v20 = v4;
    uint64_t v21 = v7;
    uint64_t v22 = v12;
    uint64_t v23 = *(void *)&v67[32];
    uint64_t v24 = *(void *)&v67[24];
    __swift_project_boxed_opaque_existential_1(v67, *(uint64_t *)&v67[24]);
    uint64_t v25 = v24;
    uint64_t v12 = v22;
    uint64_t v7 = v21;
    uint64_t v4 = v20;
    uint64_t v14 = v19;
    uint64_t AssociatedTypeWitness = v18;
    uint64_t v16 = v58;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  }
  memset(v67, 0, sizeof(v67));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v67, v17, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  uint64_t v26 = *(void *)(*v2 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v26));
  uint64_t v27 = (uint64_t)v2 + *(void *)(*v2 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v27, (uint64_t)v67);
  int v28 = v68;
  outlined destroy of SubscriptionStatus((uint64_t)v67);
  if (v28)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v26));
  }
  else
  {
    *(void *)uint64_t v67 = 1;
    memset(&v67[8], 0, 32);
    unsigned __int8 v68 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)v67, v27);
    swift_endAccess();
    (*(void (**)(char *, void, uint64_t))(v60 + 16))(v16, v61, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, AssociatedTypeWitness) == 1)
    {
      uint64_t v29 = (void *)((char *)v2 + *(void *)(*v2 + 152));
      swift_beginAccess();
      uint64_t v66 = *v29;
      swift_getAssociatedTypeWitness();
      type metadata accessor for Array();
      swift_getWitnessTable();
      char v30 = Collection.isEmpty.getter();
      uint64_t v31 = v59;
      uint64_t v32 = v65;
      if (v30)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v26));
        unsigned int v33 = v62;
      }
      else
      {
        uint64_t v46 = *v29;
        swift_bridgeObjectRetain();
        *uint64_t v29 = static Array._allocateUninitialized(_:)();
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v26));
        unsigned int v33 = v62;
        uint64_t v47 = v62[14];
        uint64_t v48 = type metadata accessor for Publishers.TimeGroupingStrategy();
        Publishers.TimeGroupingStrategy.scheduler.getter(v48, v32);
        uint64_t v49 = (char *)v2 + *(void *)(*v2 + 144);
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = v2;
        *(void *)(v50 + 24) = v46;
        long long v51 = *(void (**)(char *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v47 + 56);
        swift_retain();
        v51(v49, partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:), v50, v12, v47);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v12);
      }
      uint64_t v52 = v33[14];
      uint64_t v53 = type metadata accessor for Publishers.TimeGroupingStrategy();
      Publishers.TimeGroupingStrategy.scheduler.getter(v53, v32);
      long long v54 = (char *)v2 + *(void *)(*v2 + 144);
      long long v55 = *(void (**)(char *, uint64_t (*)(), void *, uint64_t, uint64_t))(v52 + 56);
      swift_retain();
      v55(v54, partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:), v2, v12, v52);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v12);
    }
    else
    {
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      uint64_t v60 = v7 + 32;
      uint64_t v61 = v34;
      v34(v63, v16, AssociatedTypeWitness);
      swift_getAssociatedTypeWitness();
      uint64_t v35 = static Array._allocateUninitialized(_:)();
      uint64_t v36 = (void *)((char *)v2 + *(void *)(*v2 + 152));
      swift_beginAccess();
      *uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v26));
      uint64_t v37 = v7;
      uint64_t v38 = v62;
      uint64_t v39 = v62[14];
      uint64_t v40 = type metadata accessor for Publishers.TimeGroupingStrategy();
      Publishers.TimeGroupingStrategy.scheduler.getter(v40, v65);
      Swift::String v58 = (char *)v2 + *(void *)(*v2 + 144);
      uint64_t v41 = v57;
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v57, v63, AssociatedTypeWitness);
      unint64_t v42 = (*(unsigned __int8 *)(v37 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
      uint64_t v43 = (char *)swift_allocObject();
      *((void *)v43 + 2) = v64;
      *((void *)v43 + 3) = v12;
      *((void *)v43 + 4) = v38[12];
      *((void *)v43 + 5) = v4;
      *((void *)v43 + 6) = v39;
      *((void *)v43 + 7) = v38[15];
      *((void *)v43 + 8) = v2;
      v61(&v43[v42], v41, AssociatedTypeWitness);
      uint64_t v44 = *(void (**)(char *, uint64_t (*)(), char *, uint64_t, uint64_t))(v39 + 56);
      swift_retain();
      uint64_t v45 = v65;
      v44(v58, partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:), v43, v12, v39);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v45, v12);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v63, AssociatedTypeWitness);
    }
  }
}

uint64_t closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Subscribers.Completion();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v8 - v5, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, void))(*(void *)(v1 + 120) + 56))(v6, *(void *)(v1 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #3 in Publishers.CollectByTime.Inner.receive(completion:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - v7, a2, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, void))(*(void *)(v3 + 120) + 56))(v8, *(void *)(v3 + 96));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTime<A, B>.Inner<A1>(void (*a1)(char *, char *, uint64_t))
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
  return 0x427463656C6C6F43;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByTime<A, B>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTime<A, B>.Inner<A1>()
{
}

uint64_t Publishers.Collect.Inner.description.getter()
{
  return 0x7463656C6C6F43;
}

uint64_t Publishers.Collect.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(v0 + 16))
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = MEMORY[0x18C13B7E0](v8, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    uint64_t v13 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_18C0BA630;
    *(void *)(v10 + 32) = 0x746E756F63;
    *(void *)(v10 + 40) = 0xE500000000000000;
    *(void *)(v10 + 72) = MEMORY[0x1E4FBB550];
    *(void *)(v10 + 48) = v9;
  }
  else
  {
    uint64_t v13 = v0;
  }
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.CollectByCount.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t *Publishers.CollectByCount.Inner.__allocating_init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  return Publishers.CollectByCount.Inner.init(downstream:count:)(a1, a2);
}

void Publishers.CollectByCount.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(v1 + 160)));
  uint64_t v20 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BBFD0;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t v10 = *(void *)(v1 + 88);
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(void *)(v8 + 80) = 0xD000000000000014;
  *(void *)(v8 + 88) = 0x800000018C0C4210;
  uint64_t v12 = (uint64_t)v0 + *(void *)(*v0 + 136);
  swift_beginAccess();
  *(void *)(v8 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v13 = swift_allocObject();
  *(void *)(v8 + 96) = v13;
  outlined init with copy of Any?(v12, v13 + 16, &demangling cache variable for type metadata for Subscription?);
  *(void *)(v8 + 128) = 0x726566667562;
  *(void *)(v8 + 136) = 0xE600000000000000;
  uint64_t v14 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 128));
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Array();
  *(void *)(v8 + 144) = v15;
  *(void *)(v8 + 168) = v16;
  *(void *)(v8 + 176) = 0x746E756F63;
  *(void *)(v8 + 184) = 0xE500000000000000;
  uint64_t v17 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 120));
  *(void *)(v8 + 216) = MEMORY[0x1E4FBB550];
  *(void *)(v8 + 192) = v17;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v0 + *(void *)(*v0 + 160)));
}

void Publishers.CollectByCount.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "CollectByCount");
  *(unsigned char *)(a1 + 15) = -18;
}

uint64_t *Publishers.CollectByCount.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  swift_bridgeObjectRelease();
  outlined destroy of CustomStringConvertible?((uint64_t)v0 + *(void *)(*v0 + 136), &demangling cache variable for type metadata for Subscription?);
  return v0;
}

uint64_t Publishers.CollectByCount.Inner.__deallocating_deinit()
{
  return Publishers.CollectByTime.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.CollectByCount.Inner.deinit);
}

void Publishers.CollectByCount.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v2, (uint64_t)&v7, &demangling cache variable for type metadata for Subscription?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of Subscription(&v7, (uint64_t)v10);
    swift_getAssociatedTypeWitness();
    uint64_t v3 = static Array._allocateUninitialized(_:)();
    uint64_t v4 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
    swift_beginAccess();
    *uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v7, v2, &demangling cache variable for type metadata for Subscription?);
    swift_endAccess();
    *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 144)) = 1;
    os_unfair_lock_unlock(v1);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    outlined destroy of CustomStringConvertible?((uint64_t)&v7, &demangling cache variable for type metadata for Subscription?);
    os_unfair_lock_unlock(v1);
  }
}

unint64_t Publishers.CollectByCount.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t v10 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 160));
  os_unfair_lock_lock(v10);
  uint64_t v11 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  outlined init with copy of Any?(v11, (uint64_t)v19, &demangling cache variable for type metadata for Subscription?);
  uint64_t v12 = v19[3];
  outlined destroy of CustomStringConvertible?((uint64_t)v19, &demangling cache variable for type metadata for Subscription?);
  if (!v12) {
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
  uint64_t v13 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 128));
  swift_beginAccess();
  type metadata accessor for Array();
  Array.append(_:)();
  swift_endAccess();
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x18C13B7E0](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15 == *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)))
  {
    uint64_t v16 = *v13;
    swift_bridgeObjectRetain();
    *uint64_t v13 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v10);
    v19[0] = v16;
    uint64_t v17 = (*(uint64_t (**)(void *, void))(*(void *)(v5 + 104) + 48))(v19, *(void *)(v5 + 88));
    swift_bridgeObjectRelease();
    unint64_t result = 0x8000000000000000;
    if (v17 != 0x8000000000000000)
    {
      if (v17 < 0)
      {
LABEL_11:
        __break(1u);
        return result;
      }
      unint64_t result = v17 * v15;
      if ((unsigned __int128)(v17 * (__int128)v15) >> 64 != (v17 * v15) >> 63) {
        return 0x8000000000000000;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_7:
    os_unfair_lock_unlock(v10);
    return 0;
  }
  return result;
}

uint64_t Publishers.CollectByCount.Inner.receive(completion:)(os_unfair_lock_s *a1)
{
  os_unfair_lock_t v31 = a1;
  uint64_t v29 = *v1;
  uint64_t v2 = v29;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v28 = (uint64_t (**)(char *, os_unfair_lock_t))((char *)&v27 - v4);
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void (***)(char *, os_unfair_lock_t, os_unfair_lock_s *))(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 160));
  os_unfair_lock_lock(v12);
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  uint64_t v14 = v13;
  uint64_t v15 = (os_unfair_lock_s *)v5;
  uint64_t v16 = v6;
  uint64_t v17 = v30;
  outlined assign with take of Subscription?((uint64_t)v33, v14, &demangling cache variable for type metadata for Subscription?);
  swift_endAccess();
  *((unsigned char *)v1 + *(void *)(*v1 + 144)) = 1;
  v16[2](v11, v31, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    int v28 = (uint64_t (**)(char *, os_unfair_lock_t))v16;
    os_unfair_lock_t v31 = v15;
    uint64_t v18 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 128));
    swift_beginAccess();
    v32[0] = *v18;
    swift_getAssociatedTypeWitness();
    type metadata accessor for Array();
    swift_getWitnessTable();
    char v19 = Collection.isEmpty.getter();
    uint64_t v20 = v29;
    if (v19)
    {
      os_unfair_lock_unlock(v12);
    }
    else
    {
      uint64_t v26 = *v18;
      swift_bridgeObjectRetain();
      *uint64_t v18 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v12);
      v32[0] = v26;
      (*(void (**)(uint64_t *, void))(*(void *)(v20 + 104) + 48))(v32, *(void *)(v20 + 88));
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v9, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, void))(*(void *)(v20 + 104) + 56))(v9, *(void *)(v20 + 88));
    return v28[1](v9, v31);
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t (**)(char *, os_unfair_lock_t), char *, uint64_t))(v17 + 32);
    os_unfair_lock_t v31 = v12;
    uint64_t v22 = v28;
    v21(v28, v11, AssociatedTypeWitness);
    swift_getAssociatedTypeWitness();
    uint64_t v23 = static Array._allocateUninitialized(_:)();
    uint64_t v24 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 128));
    swift_beginAccess();
    *uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v31);
    (*(void (**)(char *, uint64_t (**)(char *, os_unfair_lock_t), uint64_t))(v17 + 16))(v9, v22, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, void))(*(void *)(v29 + 104) + 56))(v9, *(void *)(v29 + 88));
    ((void (*)(char *, os_unfair_lock_s *))v16[1])(v9, v15);
    return (*(uint64_t (**)(void, uint64_t))(v17 + 8))(v22, AssociatedTypeWitness);
  }
}

unint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByCount.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByCount<A>.Inner<A1>(os_unfair_lock_s *a1)
{
  return Publishers.CollectByCount.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
  return 0x427463656C6C6F43;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.CollectByCount<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByCount<A>.Inner<A1>()
{
}

uint64_t *Publishers.CollectByTrigger.Inner.__allocating_init(downstream:trigger:sendOnFailure:)(uint64_t a1, uint64_t a2, char a3)
{
  return Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)(a1, a2, a3);
}

uint64_t *Publishers.CollectByTrigger.Inner.init(downstream:trigger:sendOnFailure:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 152);
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  *(uint64_t *)((char *)v3 + v8) = (uint64_t)v9;
  uint64_t v10 = *(void *)(*v3 + 160);
  uint64_t v11 = (void *)swift_slowAlloc();
  *uint64_t v11 = 0;
  *(uint64_t *)((char *)v3 + v10) = (uint64_t)v11;
  uint64_t v12 = *(void *)(*v3 + 168);
  swift_getAssociatedTypeWitness();
  *(uint64_t *)((char *)v3 + v12) = static Array._allocateUninitialized(_:)();
  uint64_t v13 = (uint64_t)v3 + *(void *)(*v3 + 176);
  *(void *)(v13 + 32) = 0;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(unsigned char *)(v13 + 40) = 2;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 184)) = 0;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 192)) = 0;
  uint64_t v14 = (uint64_t)v3 + *(void *)(*v3 + 200);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Subscribers.Completion();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 96) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 128), a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v7 + 88) - 8) + 32))((uint64_t)v3 + *(void *)(*v3 + 136), a2);
  *((unsigned char *)v3 + *(void *)(*v3 + 144)) = a3;
  return v3;
}

uint64_t *Publishers.CollectByTrigger.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 128));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_bridgeObjectRelease();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 176));
  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 200);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t Publishers.CollectByTrigger.Inner.__deallocating_deinit()
{
  return Publishers.CollectByTime.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.CollectByTrigger.Inner.deinit);
}

uint64_t Publishers.CollectByTime.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

void Publishers.CollectByTrigger.Inner.request(_:)(uint64_t a1)
{
  uint64_t v30 = *(void **)v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Subscribers.Completion();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v26 - v12;
  if (a1 != 0x8000000000000000)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v29 = v13;
  uint64_t v14 = *(os_unfair_lock_s **)(v1 + v30[19]);
  uint64_t v27 = v11;
  os_unfair_lock_t v28 = v14;
  os_unfair_lock_lock(v14);
  uint64_t v15 = *(void **)v1;
  uint64_t v16 = *(void *)(*(void *)v1 + 192);
  uint64_t v17 = *(void *)(v1 + v16);
  if (v17 == 0x8000000000000000) {
    goto LABEL_12;
  }
  unint64_t v18 = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    goto LABEL_11;
  }
  if ((v17 | a1) < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v18 = v17 + a1;
  if (!__OFADD__(v17, a1))
  {
    if ((v18 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
LABEL_19:
    __break(1u);
    return;
  }
  unint64_t v18 = 0x8000000000000000;
LABEL_11:
  *(void *)(v1 + v16) = v18;
  uint64_t v15 = *(void **)v1;
LABEL_12:
  uint64_t v19 = v1 + v15[25];
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v19, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    os_unfair_lock_unlock(v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v9, v3);
    uint64_t v20 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 168));
    swift_beginAccess();
    uint64_t v21 = *v20;
    swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    uint64_t *v20 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v27, 1, 1, v3);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v19, v22, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v28);
    os_unfair_recursive_lock_lock_with_options();
    v31[0] = v21;
    uint64_t v23 = v30[15];
    uint64_t v24 = v30[12];
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v31, v24, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 56))(v29, v24, v23);
    os_unfair_recursive_lock_unlock();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v25, v3);
  }
}

void Publishers.CollectByTrigger.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 152));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)v9);
  if (v10)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v9);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription(v9, (uint64_t)v11);
    uint64_t v3 = *(void *)(*(void *)v0 + 184);
    uint64_t v4 = *(void *)(v0 + v3);
    swift_getAssociatedTypeWitness();
    swift_retain();
    uint64_t v5 = static Array._allocateUninitialized(_:)();
    uint64_t v6 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 168));
    swift_beginAccess();
    *uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    *(void *)(v0 + v3) = 0;
    swift_release();
    os_unfair_lock_unlock(v1);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
    if (v4)
    {
      swift_retain();
      Subscribers.Sink.cancel()();
      swift_release_n();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
}

uint64_t Publishers.CollectByTrigger.Inner.receive(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)v1;
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 152));
  os_unfair_lock_lock(v5);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v22);
  if (v25 == 2
    && (int8x16_t v7 = vorrq_s8(v23, v24),
        !(*(void *)&vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)) | v22)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v22);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v22);
    char v25 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v22, v6);
    swift_endAccess();
    uint64_t v11 = v4[14];
    uint64_t v12 = v4[11];
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v13 = type metadata accessor for Subscribers.Sink();
    uint64_t v14 = (void *)swift_allocObject();
    long long v14[2] = v4[10];
    void v14[3] = v12;
    uint64_t v21 = v4[12];
    _OWORD v14[4] = v21;
    void v14[5] = v4[13];
    v14[6] = v11;
    uint64_t v20 = v4[15];
    v14[7] = v20;
    swift_retain();
    uint64_t v15 = Subscribers.Sink.__allocating_init(receiveCompletion:receiveValue:)((uint64_t)specialized closure #1 in Publisher.multicast<A>(subject:), (uint64_t)v14, (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in Publishers.CollectByTrigger.Inner.receive(subscription:), v2);
    *(void *)(v2 + *(void *)(*(void *)v2 + 184)) = v15;
    swift_retain();
    swift_release();
    uint64_t v22 = v15;
    uint64_t WitnessTable = swift_getWitnessTable();
    Publisher.subscribe<A>(_:)((uint64_t)&v22, v12, v13, v11, WitnessTable);
    os_unfair_lock_unlock(v5);
    v24.i64[0] = (uint64_t)v4;
    v24.i64[1] = (uint64_t)&protocol witness table for Publishers.CollectByTrigger<A, B>.Inner<A1>;
    uint64_t v22 = v2;
    uint64_t v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 40);
    swift_retain();
    v17(&v22, v21, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
    uint64_t v18 = a1[3];
    uint64_t v19 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v18);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 24))(0x8000000000000000, v18, v19);
    return swift_release();
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v22);
    os_unfair_lock_unlock(v5);
    uint64_t v9 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v9);
  }
}

uint64_t Publishers.CollectByTrigger.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int8x16_t v7 = &v12[-v6 - 8];
  uint64_t v8 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 152));
  os_unfair_lock_lock(v8);
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v9, (uint64_t)v12);
  LODWORD(v9) = v12[40];
  outlined destroy of SubscriptionStatus((uint64_t)v12);
  if (!v9)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, AssociatedTypeWitness);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
  }
  os_unfair_lock_unlock(v8);
  return 0;
}

void Publishers.CollectByTrigger.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v37 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v32 = (char *)&v32 - v9;
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v35 = (char *)&v32 - v10;
  uint64_t v11 = *(void *)(v4 + 184);
  if (*(void *)((char *)v2 + v11))
  {
    swift_retain();
    Subscribers.Sink.cancel()();
    swift_release();
    uint64_t v4 = *v2;
  }
  uint64_t v12 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v4 + 152));
  os_unfair_lock_lock(v12);
  uint64_t v13 = (uint64_t)v2 + *(void *)(*v2 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v13, (uint64_t)&v39);
  int v14 = v42;
  outlined destroy of SubscriptionStatus((uint64_t)&v39);
  if (v14) {
    goto LABEL_4;
  }
  uint64_t v39 = 1;
  long long v40 = 0u;
  long long v41 = 0u;
  unsigned __int8 v42 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v39, v13);
  swift_endAccess();
  *(void *)((char *)v2 + v11) = 0;
  swift_release();
  uint64_t v15 = (void *)((char *)v2 + *(void *)(*v2 + 168));
  swift_beginAccess();
  v38[0] = *v15;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    os_unfair_lock_unlock(v12);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v37 + 120) + 56))(a1, *(void *)(v37 + 96));
LABEL_12:
    os_unfair_recursive_lock_unlock();
    return;
  }
  uint64_t v16 = v35;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v17(v35, a1, v6);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v16, 1, AssociatedTypeWitness);
  uint64_t v19 = *v2;
  if (v18 == 1)
  {
    uint64_t v20 = *(void *)((char *)v2 + *(void *)(v19 + 192));
    if (v20 == 0x8000000000000000)
    {
LABEL_11:
      uint64_t v21 = *v15;
      swift_bridgeObjectRetain();
      *uint64_t v15 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v12);
      os_unfair_recursive_lock_lock_with_options();
      v38[0] = v21;
      uint64_t v22 = *(void *)(v37 + 120);
      uint64_t v23 = *(void *)(v37 + 96);
      (*(void (**)(void *, uint64_t, uint64_t))(v22 + 48))(v38, v23, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v22 + 56))(a1, v23);
      goto LABEL_12;
    }
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (!v20)
      {
        os_unfair_lock_t v28 = v32;
        v17(v32, a1, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v28, 0, 1, v6);
        uint64_t v29 = (char *)v2 + *(void *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v29, v28, v34);
        swift_endAccess();
LABEL_4:
        os_unfair_lock_unlock(v12);
        return;
      }
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_25;
  }
  if (*((unsigned char *)v2 + *(void *)(v19 + 144)) == 1)
  {
    uint64_t v24 = *(void *)((char *)v2 + *(void *)(v19 + 192));
    if (v24 != 0x8000000000000000)
    {
      if (v24 < 0)
      {
LABEL_25:
        __break(1u);
        return;
      }
      if (!v24)
      {
        uint64_t v30 = v32;
        v17(v32, a1, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v6);
        os_unfair_lock_t v31 = (char *)v2 + *(void *)(*v2 + 200);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v31, v30, v34);
        swift_endAccess();
        os_unfair_lock_unlock(v12);
        goto LABEL_20;
      }
    }
    uint64_t v25 = *v15;
    swift_bridgeObjectRetain();
    *uint64_t v15 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v12);
    os_unfair_recursive_lock_lock_with_options();
    v38[0] = v25;
    uint64_t v26 = *(void *)(v37 + 120);
    uint64_t v27 = *(void *)(v37 + 96);
    (*(void (**)(void *, uint64_t, uint64_t))(v26 + 48))(v38, v27, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 56))(a1, v27, v26);
  }
  else
  {
    *uint64_t v15 = static Array._allocateUninitialized(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v12);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void, void))(*(void *)(v37 + 120) + 56))(a1, *(void *)(v37 + 96), *(void *)(v37 + 120));
  }
  os_unfair_recursive_lock_unlock();
LABEL_20:
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v6);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(void *a1)
{
  return Publishers.CollectByTrigger.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.CollectByTrigger.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>(uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
  return 0xD000000000000010;
}

void protocol witness for Cancellable.cancel() in conformance Publishers.CollectByTrigger<A, B>.Inner<A1>()
{
}

uint64_t static Publishers.Collect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Collect<A>()
{
  return static Publishers.Collect<>.== infix(_:_:)();
}

BOOL static Publishers.CollectByCount<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Publishers.CollectByCount();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if (v11)
  {
    uint64_t v13 = *(void *)&v10[*(int *)(v4 + 36)];
    int v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v10, v4);
    uint64_t v15 = *(void *)&v8[*(int *)(v4 + 36)];
    v14(v8, v4);
    return v13 == v15;
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    return 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.CollectByCount<A>(uint64_t a1, uint64_t a2)
{
  return static Publishers.CollectByCount<>.== infix(_:_:)(a1, a2);
}

uint64_t type metadata completion function for Publishers.TimeGroupingStrategy()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v5;
      swift_getTupleTypeLayout3();
      uint64_t v7 = &v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

void *initializeBufferWithCopyOfBuffer for Publishers.TimeGroupingStrategy(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64);
  unint64_t v14 = v12 + v13;
  unint64_t v15 = ((v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v15 <= v14) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = v15;
  }
  int v17 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80);
  if ((v17 & 0x1000F8) != 0 || v16 + 1 > 0x18)
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v19 + (((v17 & 0xF8 | 7u) + 16) & ~(unint64_t)(v17 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    uint64_t v20 = AssociatedTypeWitness;
    uint64_t v26 = ~v10;
    unsigned int v21 = a2[v16];
    if (v21 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v22 = v16;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          if (v16 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          if (v16 >= 4) {
            goto LABEL_22;
          }
          goto LABEL_20;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v16 < 4) {
            goto LABEL_20;
          }
          goto LABEL_22;
        case 4:
          int v23 = *(_DWORD *)a2;
          if (v16 < 4) {
LABEL_20:
          }
            unsigned int v21 = (v23 | ((v21 - 2) << (8 * v16))) + 2;
          else {
LABEL_22:
          }
            unsigned int v21 = v23 + 2;
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v24 = (unint64_t)&a2[v11] & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v26, v24, v20);
    if (v21 == 1)
    {
      *(void *)((v13 + 7 + (((unint64_t)a1 + v11) & v26)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)a1 + v16) = 1;
    }
    else
    {
      *((unsigned char *)a1 + v16) = 0;
    }
  }
  return a1;
}

unsigned __int8 *assignWithCopy for Publishers.TimeGroupingStrategy(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = ~v10;
    uint64_t v11 = v7 + v10;
    uint64_t v21 = *(void *)(v9 + 64);
    unint64_t v12 = ((v7 + v10) & ~v10) + v21;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12) {
      unint64_t v13 = ((v7 + v10) & ~v10) + v21;
    }
    else {
      unint64_t v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unint64_t v14 = (unint64_t)&a1[v11] & ~v10;
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    unsigned int v15 = a2[v13];
    if (v15 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          if (v13 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v17 = *(_DWORD *)a2;
          if (v13 < 4) {
LABEL_15:
          }
            unsigned int v15 = (v17 | ((v15 - 2) << (8 * v13))) + 2;
          else {
LABEL_17:
          }
            unsigned int v15 = v17 + 2;
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v18 = (unint64_t)&a2[v11] & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v14, v18, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(void *)((v21 + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
    }
    a1[v13] = v19;
  }
  return a1;
}

uint64_t initializeWithTake for Publishers.TimeGroupingStrategy(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = v7 + v10;
  uint64_t v23 = *(void *)(v9 + 64);
  unint64_t v13 = ((v7 + v10) & ~v10) + v23;
  if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v15 = a2[v14];
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_13;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_13:
        int v18 = (v17 | ((v15 - 2) << (8 * v14))) + 2;
        unsigned int v19 = v17 + 2;
        if (v14 >= 4) {
          unsigned int v15 = v19;
        }
        else {
          unsigned int v15 = v18;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
  unint64_t v20 = (unint64_t)&a2[v12] & v11;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))((v12 + a1) & v11, v20, AssociatedTypeWitness);
  if (v15 == 1)
  {
    *(void *)((v23 + 7 + ((v12 + a1) & v11)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v23 + 7 + v20) & 0xFFFFFFFFFFFFFFF8);
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
  }
  *(unsigned char *)(a1 + v14) = v21;
  return a1;
}

unsigned __int8 *assignWithTake for Publishers.TimeGroupingStrategy(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v22 = ~v10;
    uint64_t v11 = v7 + v10;
    uint64_t v21 = *(void *)(v9 + 64);
    unint64_t v12 = ((v7 + v10) & ~v10) + v21;
    if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12) {
      unint64_t v13 = ((v7 + v10) & ~v10) + v21;
    }
    else {
      unint64_t v13 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unint64_t v14 = (unint64_t)&a1[v11] & ~v10;
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v14, AssociatedTypeWitness);
    unsigned int v15 = a2[v13];
    if (v15 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          if (v13 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v17 = *(_DWORD *)a2;
          if (v13 < 4) {
LABEL_15:
          }
            unsigned int v15 = (v17 | ((v15 - 2) << (8 * v13))) + 2;
          else {
LABEL_17:
          }
            unsigned int v15 = v17 + 2;
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    unint64_t v18 = (unint64_t)&a2[v11] & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(v14, v18, AssociatedTypeWitness);
    if (v15 == 1)
    {
      *(void *)((v21 + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
    }
    a1[v13] = v19;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.TimeGroupingStrategy(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v7) {
    unint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v13 < 2)
    {
LABEL_22:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 2) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_22;
  }
LABEL_14:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 255;
}

void storeEnumTagSinglePayload for Publishers.TimeGroupingStrategy(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + *(void *)(v8 + 64);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v9) {
    unint64_t v9 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v12 = a2 - 255;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x18C053600);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for Publishers.TimeGroupingStrategy(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v5) {
    unint64_t v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  uint64_t result = a1[v5];
  if (result >= 2)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v5))) + 2;
        unsigned int v10 = v8 + 2;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t type metadata completion function for Publishers.CollectByTime()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Publishers.TimeGroupingStrategy();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByTime(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v42 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v42 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v47 = v6;
  int v7 = *(_DWORD *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = v6;
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v45 = AssociatedTypeWitness;
  int v10 = *(_DWORD *)(v44 + 80);
  uint64_t v11 = v10;
  int v12 = v10 | v7;
  uint64_t v13 = (v10 | v7) & 0xF8 | 7u;
  uint64_t v14 = v5 + v13;
  uint64_t v43 = *(void *)(v9 + 64) + v10;
  uint64_t v41 = *(void *)(v44 + 64);
  unint64_t v15 = (v43 & ~(unint64_t)v10) + v41;
  if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v15) {
    unint64_t v16 = (v43 & ~(unint64_t)v10) + v41;
  }
  else {
    unint64_t v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v46 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  if (*(_DWORD *)(v17 + 84)) {
    uint64_t v19 = *(void *)(v17 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v17 + 64) + 1;
  }
  uint64_t v20 = v13 | *(_DWORD *)(v4 + 80) | v18;
  if (v20 != 7
    || ((*(_DWORD *)(v17 + 80) | *(_DWORD *)(v4 + 80) | v12) & 0x100000) != 0
    || ((v16 + v18 + 1 + (v14 & ~v13)) & ~v18) + v19 > 0x18)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    uint64_t v25 = (uint64_t *)(v23 + ((v20 + 16) & ~v20));
    swift_retain();
  }
  else
  {
    size_t __n = v19;
    uint64_t v24 = ~v13;
    uint64_t v39 = ~v11;
    uint64_t v40 = v16 + v18 + 1;
    uint64_t v25 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v42);
    unint64_t v26 = ((unint64_t)a1 + v14) & v24;
    uint64_t v27 = (unsigned __int8 *)(((unint64_t)a2 + v14) & v24);
    unsigned int v28 = v27[v16];
    if (v28 >= 2)
    {
      if (v16 <= 3) {
        uint64_t v29 = v16;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *v27;
          goto LABEL_25;
        case 2:
          int v30 = *(unsigned __int16 *)v27;
          goto LABEL_25;
        case 3:
          int v30 = *(unsigned __int16 *)v27 | (v27[2] << 16);
          goto LABEL_25;
        case 4:
          int v30 = *(_DWORD *)v27;
LABEL_25:
          int v31 = (v30 | ((v28 - 2) << (8 * v16))) + 2;
          unsigned int v32 = v30 + 2;
          if (v16 >= 4) {
            unsigned int v28 = v32;
          }
          else {
            unsigned int v28 = v31;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v33 = ~v18;
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v47 + 16))(v26, v27, v3);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))((v43 + v26) & v39, (unint64_t)&v27[v43] & v39, v45);
    if (v28 == 1)
    {
      *(void *)((v41 + 7 + ((v43 + v26) & v39)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41
                                                                                       + 7
                                                                                       + ((unint64_t)&v27[v43] & v39)) & 0xFFFFFFFFFFFFFFF8);
      char v34 = 1;
    }
    else
    {
      char v34 = 0;
    }
    *(unsigned char *)(v26 + v16) = v34;
    uint64_t v35 = (void *)((v40 + v26) & v33);
    uint64_t v36 = (const void *)((unint64_t)&v27[v40] & v33);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v36, 1, v46))
    {
      memcpy(v35, v36, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v35, v36, v46);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v35, 0, 1, v46);
    }
  }
  return v25;
}

uint64_t assignWithCopy for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v46 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(v6 - 8);
  int v43 = *(_DWORD *)(v7 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = (*(_DWORD *)(v9 + 80) | v43) & 0xF8 | 7u;
  uint64_t v12 = v46 + v11;
  uint64_t v47 = a1;
  uint64_t v13 = (unsigned __int8 *)((v12 + a1) & ~v11);
  uint64_t v14 = (unsigned __int8 *)((v12 + a2) & ~v11);
  uint64_t v15 = *(void *)(v7 + 64);
  if (v13 == v14)
  {
    unint64_t v23 = ((v15 + v10) & ~v10) + *(void *)(v9 + 64);
    if (((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v23) {
      unint64_t v18 = ((v15 + v10) & ~v10) + *(void *)(v9 + 64);
    }
    else {
      unint64_t v18 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v44 = ~v10;
    uint64_t v41 = *(void *)(v9 + 64);
    unint64_t v17 = ((v15 + v10) & ~v10) + v41;
    if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v17) {
      unint64_t v18 = ((v15 + v10) & ~v10) + v41;
    }
    else {
      unint64_t v18 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v13, v6);
    uint64_t v42 = v16;
    (*(void (**)(void))(v9 + 8))();
    unsigned int v19 = v14[v18];
    if (v19 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v18 <= 3) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *v14;
          goto LABEL_19;
        case 2:
          int v22 = *(unsigned __int16 *)v14;
          goto LABEL_19;
        case 3:
          int v22 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_19;
        case 4:
          int v22 = *(_DWORD *)v14;
LABEL_19:
          int v24 = (v22 | ((v19 - 2) << (8 * v18))) + 2;
          unsigned int v25 = v22 + 2;
          if (v18 >= 4) {
            unsigned int v19 = v25;
          }
          else {
            unsigned int v19 = v24;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 16))(v13, v14, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&v13[v10 + v15] & ~v10, (unint64_t)&v14[v10 + v15] & v44, v42);
    if (v19 == 1)
    {
      *(void *)((v41 + 7 + ((unint64_t)&v13[v10 + v15] & ~v10)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 7 + ((unint64_t)&v14[v10 + v15] & v44)) & 0xFFFFFFFFFFFFFFF8);
      v13[v18] = 1;
    }
    else
    {
      v13[v18] = 0;
    }
  }
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v18 + v28 + 1;
  int v30 = (void *)((unint64_t)&v13[v29] & ~v28);
  int v31 = (void *)((unint64_t)&v14[v29] & ~v28);
  unsigned int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v33 = v32(v30, 1, v26);
  int v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v30, v31, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      return v47;
    }
    int v35 = *(_DWORD *)(v27 + 84);
    size_t v36 = *(void *)(v27 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v30, v31, v26);
      return v47;
    }
    uint64_t v38 = *(void (**)(void *, uint64_t))(v27 + 8);
    uint64_t v37 = v27 + 8;
    v38(v30, v26);
    int v35 = *(_DWORD *)(v37 + 76);
    size_t v36 = *(void *)(v37 + 56);
  }
  if (v35) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v36 + 1;
  }
  memcpy(v30, v31, v39);
  return v47;
}

uint64_t initializeWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v38 = *(void *)(v6 + 32);
  uint64_t v9 = v8;
  int v35 = *(_DWORD *)(v8 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v8;
  uint64_t v12 = *(_DWORD *)(v10 + 80);
  uint64_t v13 = (*(_DWORD *)(v10 + 80) | v35) & 0xF8 | 7u;
  uint64_t v14 = v38 + v13;
  uint64_t v39 = a1;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (unsigned __int8 *)((v14 + a2) & ~v13);
  uint64_t v17 = ~v12;
  uint64_t v18 = *(void *)(v11 + 64) + v12;
  uint64_t v19 = v18 & ~v12;
  uint64_t v36 = *(void *)(v10 + 64);
  if (((v19 + v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v19 + v36) {
    unint64_t v20 = v19 + v36;
  }
  else {
    unint64_t v20 = ((v19 + v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v21 = v16[v20];
  if (v21 >= 2)
  {
    if (v20 <= 3) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v16;
        goto LABEL_13;
      case 2:
        int v23 = *(unsigned __int16 *)v16;
        goto LABEL_13;
      case 3:
        int v23 = *(unsigned __int16 *)v16 | (v16[2] << 16);
        goto LABEL_13;
      case 4:
        int v23 = *(_DWORD *)v16;
LABEL_13:
        int v24 = (v23 | ((v21 - 2) << (8 * v20))) + 2;
        unsigned int v25 = v23 + 2;
        if (v20 >= 4) {
          unsigned int v21 = v25;
        }
        else {
          unsigned int v21 = v24;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))(v15, v16, v7);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 32))((v18 + v15) & v17, (unint64_t)&v16[v18] & v17, AssociatedTypeWitness);
  if (v21 == 1)
  {
    *(void *)((v36 + 7 + ((v18 + v15) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v36
                                                                                     + 7
                                                                                     + ((unint64_t)&v16[v18] & v17)) & 0xFFFFFFFFFFFFFFF8);
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
  }
  *(unsigned char *)(v15 + v20) = v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v20 + v29 + 1;
  int v31 = (void *)((v30 + v15) & ~v29);
  unsigned int v32 = (const void *)((unint64_t)&v16[v30] & ~v29);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v32, 1, v27))
  {
    if (*(_DWORD *)(v28 + 84)) {
      size_t v33 = *(void *)(v28 + 64);
    }
    else {
      size_t v33 = *(void *)(v28 + 64) + 1;
    }
    memcpy(v31, v32, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v31, v32, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
  }
  return v39;
}

uint64_t assignWithTake for Publishers.CollectByTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v46 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  int v43 = *(_DWORD *)(v7 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = (*(_DWORD *)(v9 + 80) | v43) & 0xF8 | 7u;
  uint64_t v12 = v46 + v11;
  uint64_t v47 = a1;
  uint64_t v13 = (unsigned __int8 *)((v12 + a1) & ~v11);
  uint64_t v14 = (unsigned __int8 *)((v12 + a2) & ~v11);
  uint64_t v15 = *(void *)(v7 + 64);
  if (v13 == v14)
  {
    unint64_t v23 = ((v15 + v10) & ~v10) + *(void *)(v9 + 64);
    if (((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v23) {
      unint64_t v18 = ((v15 + v10) & ~v10) + *(void *)(v9 + 64);
    }
    else {
      unint64_t v18 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v44 = ~v10;
    uint64_t v41 = *(void *)(v9 + 64);
    unint64_t v17 = ((v15 + v10) & ~v10) + v41;
    if (((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v17) {
      unint64_t v18 = ((v15 + v10) & ~v10) + v41;
    }
    else {
      unint64_t v18 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v13, v6);
    uint64_t v42 = v16;
    (*(void (**)(void))(v9 + 8))();
    unsigned int v19 = v14[v18];
    if (v19 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v18 <= 3) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *v14;
          goto LABEL_19;
        case 2:
          int v22 = *(unsigned __int16 *)v14;
          goto LABEL_19;
        case 3:
          int v22 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_19;
        case 4:
          int v22 = *(_DWORD *)v14;
LABEL_19:
          int v24 = (v22 | ((v19 - 2) << (8 * v18))) + 2;
          unsigned int v25 = v22 + 2;
          if (v18 >= 4) {
            unsigned int v19 = v25;
          }
          else {
            unsigned int v19 = v24;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 32))(v13, v14, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&v13[v10 + v15] & ~v10, (unint64_t)&v14[v10 + v15] & v44, v42);
    if (v19 == 1)
    {
      *(void *)((v41 + 7 + ((unint64_t)&v13[v10 + v15] & ~v10)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 7 + ((unint64_t)&v14[v10 + v15] & v44)) & 0xFFFFFFFFFFFFFFF8);
      v13[v18] = 1;
    }
    else
    {
      v13[v18] = 0;
    }
  }
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v18 + v28 + 1;
  uint64_t v30 = (void *)((unint64_t)&v13[v29] & ~v28);
  int v31 = (void *)((unint64_t)&v14[v29] & ~v28);
  unsigned int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v33 = v32(v30, 1, v26);
  int v34 = v32(v31, 1, v26);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v30, v31, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
      return v47;
    }
    int v35 = *(_DWORD *)(v27 + 84);
    size_t v36 = *(void *)(v27 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v30, v31, v26);
      return v47;
    }
    uint64_t v38 = *(void (**)(void *, uint64_t))(v27 + 8);
    uint64_t v37 = v27 + 8;
    v38(v30, v26);
    int v35 = *(_DWORD *)(v37 + 76);
    size_t v36 = *(void *)(v37 + 56);
  }
  if (v35) {
    size_t v39 = v36;
  }
  else {
    size_t v39 = v36 + 1;
  }
  memcpy(v30, v31, v39);
  return v47;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByTime(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v35 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v37 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v37 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = ((v6 + v8) & ~(unint64_t)v8) + *(void *)(v7 + 64);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v9) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v5 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v5;
  }
  if (v15 <= 0xFE) {
    unsigned int v16 = 254;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = (*(_DWORD *)(v37 + 80) | v8) & 0xF8 | 7u;
  uint64_t v21 = *(void *)(v4 + 64) + v20;
  uint64_t v22 = v10 + v17 + 1;
  if (a2 <= v16) {
    goto LABEL_35;
  }
  uint64_t v23 = v19 + ((v22 + (v21 & ~v20)) & ~v17);
  char v24 = 8 * v23;
  if (v23 > 3) {
    goto LABEL_18;
  }
  unsigned int v26 = ((a2 - v16 + ~(-1 << v24)) >> v24) + 1;
  if (HIWORD(v26))
  {
    int v25 = *(_DWORD *)((char *)a1 + v23);
    if (v25) {
      goto LABEL_25;
    }
LABEL_35:
    if (v5 == v16)
    {
      uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48);
      return v30(a1, v5, v35);
    }
    unint64_t v32 = ((unint64_t)a1 + v21) & ~v20;
    if (v15 <= 0xFE)
    {
      unsigned int v33 = *(unsigned __int8 *)(v32 + v10);
      if (v33 >= 2) {
        return (v33 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
    if (v13 >= 2)
    {
      unsigned int v34 = (*(uint64_t (**)(unint64_t))(v12 + 48))((v22 + v32) & ~v17);
      if (v34 >= 2) {
        return v34 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v26 > 0xFF)
  {
    int v25 = *(unsigned __int16 *)((char *)a1 + v23);
    if (*(unsigned __int16 *)((char *)a1 + v23)) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  if (v26 < 2) {
    goto LABEL_35;
  }
LABEL_18:
  int v25 = *((unsigned __int8 *)a1 + v23);
  if (!*((unsigned char *)a1 + v23)) {
    goto LABEL_35;
  }
LABEL_25:
  int v27 = (v25 - 1) << v24;
  if (v23 > 3) {
    int v27 = 0;
  }
  if (v23)
  {
    if (v23 <= 3) {
      int v28 = v23;
    }
    else {
      int v28 = 4;
    }
    switch(v28)
    {
      case 2:
        int v29 = *a1;
        break;
      case 3:
        int v29 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v29 = *(_DWORD *)a1;
        break;
      default:
        int v29 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v29 = 0;
  }
  return v16 + (v29 | v27) + 1;
}

void storeEnumTagSinglePayload for Publishers.CollectByTime(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v40 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(v40 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = ((v8 + v10) & ~(unint64_t)v10) + *(void *)(v9 + 64);
  if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  int v13 = 0;
  uint64_t v14 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v15 = v14;
  unsigned int v16 = *(_DWORD *)(v14 + 84);
  unsigned int v17 = v16 - 1;
  if (!v16) {
    unsigned int v17 = 0;
  }
  if (v6 > v17) {
    unsigned int v17 = v6;
  }
  uint64_t v18 = *(void *)(v5 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v20 = *(void *)(v14 + 64);
  if (v17 <= 0xFE) {
    unsigned int v21 = 254;
  }
  else {
    unsigned int v21 = v17;
  }
  uint64_t v22 = (*(_DWORD *)(v7 + 80) | v10) & 0xF8 | 7u;
  uint64_t v23 = v18 + v22;
  size_t v24 = v12 + 1;
  uint64_t v25 = v12 + 1 + v19;
  uint64_t v26 = (v25 + ((v18 + v22) & ~v22)) & ~v19;
  if (!v16) {
    ++v20;
  }
  size_t v27 = v20 + v26;
  if (a3 > v21)
  {
    if (v27 <= 3)
    {
      unsigned int v28 = ((a3 - v21 + ~(-1 << (8 * v27))) >> (8 * v27)) + 1;
      if (HIWORD(v28))
      {
        int v13 = 4;
      }
      else if (v28 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v28 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  if (v21 < a2)
  {
    unsigned int v29 = ~v21 + a2;
    if (v27 < 4)
    {
      int v30 = (v29 >> (8 * v27)) + 1;
      if (v27)
      {
        int v33 = v29 & ~(-1 << (8 * v27));
        bzero(a1, v27);
        if (v27 == 3)
        {
          *(_WORD *)a1 = v33;
          a1[2] = BYTE2(v33);
        }
        else if (v27 == 2)
        {
          *(_WORD *)a1 = v33;
        }
        else
        {
          *a1 = v33;
        }
      }
    }
    else
    {
      bzero(a1, v27);
      *(_DWORD *)a1 = v29;
      int v30 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v27] = v30;
        return;
      case 2:
        *(_WORD *)&a1[v27] = v30;
        return;
      case 3:
        goto LABEL_65;
      case 4:
        *(_DWORD *)&a1[v27] = v30;
        return;
      default:
        return;
    }
  }
  uint64_t v31 = ~v22;
  uint64_t v32 = ~v19;
  switch(v13)
  {
    case 1:
      a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v27] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_65:
      __break(1u);
      JUMPOUT(0x18C055454);
    case 4:
      *(_DWORD *)&a1[v27] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v6 == v21)
        {
          unsigned int v34 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56);
          v34(a1, a2, v6, v40);
        }
        else
        {
          unint64_t v35 = (unint64_t)&a1[v23] & v31;
          if (v17 > 0xFE)
          {
            if (v16 >= 2)
            {
              size_t v36 = *(void (**)(unint64_t, void))(v15 + 56);
              v36((v25 + v35) & v32, a2 + 1);
            }
          }
          else if (a2 > 0xFE)
          {
            if (v24 <= 3) {
              int v37 = ~(-1 << (8 * v24));
            }
            else {
              int v37 = -1;
            }
            if (v12 != -1)
            {
              int v38 = v37 & (a2 - 255);
              if (v24 <= 3) {
                int v39 = v24;
              }
              else {
                int v39 = 4;
              }
              bzero((void *)((unint64_t)&a1[v23] & v31), v24);
              switch(v39)
              {
                case 2:
                  *(_WORD *)unint64_t v35 = v38;
                  break;
                case 3:
                  *(_WORD *)unint64_t v35 = v38;
                  *(unsigned char *)(v35 + 2) = BYTE2(v38);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v35 = v38;
                  break;
                default:
                  *(unsigned char *)unint64_t v35 = v38;
                  break;
              }
            }
          }
          else
          {
            *(unsigned char *)(v35 + v12) = -(char)a2;
          }
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.CollectByTime.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Publishers.TimeGroupingStrategy();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Publishers.Collect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.Collect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C05598CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CollectByCount(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.CollectByCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.CollectByCount(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C055D34);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.CollectByCount(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unsigned int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C055EF4);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.CollectByTrigger.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Subscribers.Completion();
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Publishers.CollectByTrigger.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t sub_18C0560F8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v2 = *(uint64_t **)(v0 + 64);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #3 in Publishers.CollectByTime.Inner.receive(completion:)(v2, v3);
}

uint64_t sub_18C056258()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  uint64_t v1 = **(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(v1 + 120) + 48))(&v3, *(void *)(v1 + 96));
}

uint64_t partial apply for closure #2 in Publishers.CollectByTime.Inner.receive(completion:)()
{
  return closure #2 in Publishers.CollectByTime.Inner.receive(completion:)(v0);
}

uint64_t sub_18C056328()
{
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.CollectByTime.Inner.receive(_:)()
{
  return closure #1 in Publishers.CollectByTime.Inner.receive(_:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), (void *)(v0 + 32), *(void *)(v0 + 72));
}

uint64_t sub_18C056380()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t objectdestroy_25Tm()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t sub_18C05640C()
{
  return swift_deallocObject();
}

void specialized Publishers.CollectByTrigger.Inner.send(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(*v0 + 152));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(*v0 + 192);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  if (v5 != 0x8000000000000000)
  {
    if (v5 < 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v6 = (uint64_t *)((char *)v0 + *(void *)(*v0 + 168));
  swift_beginAccess();
  uint64_t v12 = *v6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
LABEL_17:
    os_unfair_lock_unlock(v3);
    return;
  }
  uint64_t v7 = *(uint64_t *)((char *)v0 + v4);
  if (v7 == 0x8000000000000000) {
    goto LABEL_9;
  }
  if (v7 < 0) {
    goto LABEL_19;
  }
  if (!v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(uint64_t *)((char *)v0 + v4) = v7 - 1;
LABEL_9:
  uint64_t v8 = *v6;
  swift_bridgeObjectRetain();
  *uint64_t v6 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v3);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v12 = v8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t *, void))(*(void *)(v2 + 120) + 48))(&v12, *(void *)(v2 + 96));
  swift_bridgeObjectRelease();
  os_unfair_recursive_lock_unlock();
  os_unfair_lock_lock(v3);
  uint64_t v10 = *(uint64_t *)((char *)v1 + v4);
  if (v10 == 0x8000000000000000) {
    goto LABEL_17;
  }
  unint64_t v11 = 0x8000000000000000;
  if (v9 == 0x8000000000000000)
  {
LABEL_16:
    *(uint64_t *)((char *)v1 + v4) = v11;
    goto LABEL_17;
  }
  if ((v10 | v9) < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v11 = v10 + v9;
  if (__OFADD__(v10, v9))
  {
    unint64_t v11 = 0x8000000000000000;
    goto LABEL_16;
  }
  if ((v11 & 0x8000000000000000) == 0) {
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

uint64_t Publishers.ReceiveOn.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.ReceiveOn.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.ReceiveOn.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

char *Publishers.ReceiveOn.Inner.__allocating_init(_:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.ReceiveOn.Inner.init(_:scheduler:options:)(a1, a2, a3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
  return 0x4F65766965636552;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>()
{
  return Publishers.ReceiveOn.Inner.customMirror.getter();
}

uint64_t Publishers.ReceiveOn.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.ReceiveOn<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void Publishers.ReceiveOn.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x4F65766965636552;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t sub_18C056A4C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, AssociatedTypeWitness); {

  }
  return swift_deallocObject();
}

uint64_t sub_18C056BB8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t static Subscribers.Demand.> infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 1;
  }
  if ((result & 0x8000000000000000) == 0) {
    return a2 < result;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.max(_:)(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  return result;
}

unint64_t *static Subscribers.Demand.+= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000;
  if (*result != 0x8000000000000000)
  {
    if (a2 != 0x8000000000000000)
    {
      if (((v2 | a2) & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_11;
      }
      unint64_t v3 = v2 + a2;
      if (!__OFADD__(v2, a2))
      {
        if ((v3 & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
LABEL_11:
        __break(1u);
        return result;
      }
      unint64_t v3 = 0x8000000000000000;
    }
LABEL_8:
    *uint64_t result = v3;
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v3;

  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000)
  {
LABEL_7:
    *uint64_t result = v3;
    return result;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = v2 + a2;
    if (__OFADD__(v2, a2))
    {
      *uint64_t result = 0x8000000000000000;
      return result;
    }
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t *static Subscribers.Demand.-= infix(_:_:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != 0x8000000000000000)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      BOOL v3 = __OFSUB__(v2, a2);
      uint64_t v4 = v2 - a2;
      if (v3)
      {
        uint64_t v4 = 0;
LABEL_7:
        *uint64_t result = v4;
        return result;
      }
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t static Subscribers.Demand.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  unint64_t result = a1 - a2;
  if (__OFSUB__(a1, a2)) {
    return 0;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = 0x8000000000000000;
  if (a1 != 0x8000000000000000)
  {
    if (a2 == 0x8000000000000000) {
      return 0;
    }
    if ((a2 | a1) < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t result = a1 - a2;
      if (a1 - a2 >= 0) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t Subscribers.Demand.max.getter(uint64_t result)
{
  if (result == 0x8000000000000000) {
    return 0;
  }
  uint64_t v1 = result;
  if ((result & 0x8000000000000000) == 0) {
    return v1;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.== infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 0;
  }
  if ((result & 0x8000000000000000) == 0) {
    return result == a2;
  }
  __break(1u);
  return result;
}

unint64_t static Subscribers.Demand.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  unint64_t result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != (a1 * a2) >> 63) {
    return 0x8000000000000000;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t static Subscribers.Completion<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v29 = a2;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v30 = (char *)&v25 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  unsigned int v15 = (char *)&v25 - v14;
  unsigned int v16 = (char *)&v25 + *(int *)(v13 + 48) - v14;
  uint64_t v28 = v9;
  unsigned int v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17((char *)&v25 - v14, a1, v8);
  v17(v16, v29, v8);
  uint64_t v29 = v6;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v18(v15, 1, a3) == 1)
  {
    char v19 = 1;
    if (v18(v16, 1, a3) == 1) {
      goto LABEL_8;
    }
  }
  else
  {
    v17(v30, (uint64_t)v15, v8);
    if (v18(v16, 1, a3) != 1)
    {
      uint64_t v20 = v29;
      unsigned int v21 = v26;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v16, a3);
      uint64_t v22 = v30;
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v20 + 8);
      v23(v21, a3);
      v23(v22, a3);
LABEL_8:
      uint64_t v12 = v28;
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, a3);
  }
  char v19 = 0;
  uint64_t v8 = TupleTypeMetadata2;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v8);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Subscribers.Completion<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

void Subscribers.Completion<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(1uLL);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

Swift::Int Subscribers.Completion<>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Subscribers.Completion<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t Subscribers.Completion.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Subscribers.Completion.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t Subscribers.Completion.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x726F727265;
  }
  else {
    return 0x73736563637573;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> Subscribers.Completion<A>(uint64_t a1)
{
  return Subscribers.Completion<>.hashValue.getter(a1);
}

void protocol witness for Hashable.hash(into:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Subscribers.Completion<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Subscribers.Completion<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1C8];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  Swift::Int v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  uint64_t result = Subscribers.Completion.CodingKeys.init(rawValue:)(v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Subscribers.Completion<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Subscribers.Completion.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Subscribers.Completion<A>.CodingKeys()
{
  return Subscribers.Completion.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = Subscribers.Completion.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Subscribers.Completion<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized Record.Recording<>.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Subscribers.Completion<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t Subscribers.Completion<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  v23[1] = a3;
  uint64_t v29 = *(void *)(a2 + 16);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  size_t v24 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Subscribers.Completion.CodingKeys();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v23 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v25 = v13;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v31, a2);
  uint64_t v15 = v29;
  uint64_t v14 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v9, 1, v29) == 1)
  {
    char v32 = 0;
    uint64_t v16 = v27;
    unsigned int v17 = v25;
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, v16);
  }
  else
  {
    char v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v24, v9, v15);
    char v34 = 0;
    uint64_t v20 = v26;
    uint64_t v21 = v27;
    uint64_t v22 = v25;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v20)
    {
      char v33 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v22, v21);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Subscribers.Completion<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return Subscribers.Completion<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t Subscribers.Completion<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v28 = a4;
  uint64_t v27 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v32 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Subscribers.Completion.CodingKeys();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for Subscribers.Completion();
  uint64_t v29 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v25 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v26 = v12;
    uint64_t v14 = v30;
    uint64_t v15 = v31;
    uint64_t v34 = v10;
    uint64_t v16 = v32;
    char v36 = 0;
    if (KeyedDecodingContainer.decode(_:forKey:)())
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
      uint64_t v17 = 1;
      uint64_t v19 = v27;
      uint64_t v18 = v28;
      uint64_t v20 = v34;
      uint64_t v21 = a2;
      uint64_t v22 = v29;
      uint64_t v23 = v26;
    }
    else
    {
      char v35 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
      uint64_t v23 = v26;
      uint64_t v19 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v26, v16, a2);
      uint64_t v17 = 0;
      uint64_t v18 = v28;
      uint64_t v22 = v29;
      uint64_t v20 = v34;
      uint64_t v21 = a2;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v23, v17, 1, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v18, v23, v20);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> Subscribers.Completion<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Subscribers.Completion<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

Combine::Subscribers::Demand __swiftcall Subscribers.Demand.init(rawValue:)(Combine::Subscribers::Demand rawValue)
{
  if (rawValue.rawValue >= 0x8000000000000000) {
    return (Combine::Subscribers::Demand)0x8000000000000000;
  }
  return rawValue;
}

unint64_t static Subscribers.Demand.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = 0x8000000000000000;
  if (a1 == 0x8000000000000000 || a2 == 0x8000000000000000) {
    return result;
  }
  if ((a2 | a1) < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2)) {
    return 0x8000000000000000;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = 0x8000000000000000;
  if (a1 == 0x8000000000000000) {
    return result;
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2)) {
    return 0x8000000000000000;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t type metadata accessor for Subscribers.Completion.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t *static Subscribers.Demand.*= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  int64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000)
  {
LABEL_6:
    *unint64_t result = v3;
    return result;
  }
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = v2 * a2;
    if ((unsigned __int128)(v2 * (__int128)a2) >> 64 != (v2 * a2) >> 63)
    {
      *unint64_t result = 0x8000000000000000;
      return result;
    }
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

unint64_t *static Subscribers.Demand.-= infix(_:_:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = 0x8000000000000000;
  if (*result == 0x8000000000000000) {
    goto LABEL_6;
  }
  if (a2 == 0x8000000000000000)
  {
    *unint64_t result = 0;
    return result;
  }
  if (((v2 | a2) & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = v2 - a2;
    if ((uint64_t)(v2 - a2) >= 0)
    {
LABEL_6:
      *unint64_t result = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 1;
  }
  if ((result & 0x8000000000000000) == 0) {
    return result >= a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.> infix(_:_:)(BOOL result, uint64_t a2)
{
  if (a2 == 0x8000000000000000) {
    return 0;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return a2 < result;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.>= infix(_:_:)(BOOL result, uint64_t a2)
{
  if (a2 == 0x8000000000000000) {
    return 0;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return result >= a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 0;
  }
  if ((result & 0x8000000000000000) == 0) {
    return result < a2;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.< infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return result < a2;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(BOOL result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 0;
  }
  if ((result & 0x8000000000000000) == 0) {
    return a2 >= result;
  }
  __break(1u);
  return result;
}

uint64_t static Subscribers.Demand.<= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 == 0x8000000000000000) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return a2 >= result;
  }
  __break(1u);
  return result;
}

BOOL static Subscribers.Demand.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 == 0x8000000000000000 || a1 < a2;
  return a1 != 0x8000000000000000 && v3;
}

BOOL static Subscribers.Demand.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 == 0x8000000000000000 || a2 >= a1;
  if (a1 == 0x8000000000000000) {
    return a2 == 0x8000000000000000;
  }
  else {
    return v3;
  }
}

uint64_t static Subscribers.Demand.>= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 != 0x8000000000000000 && a1 >= a2;
  return a1 == 0x8000000000000000 || v3;
}

BOOL static Subscribers.Demand.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v3 = a2 != 0x8000000000000000 && a2 < a1;
  if (a1 == 0x8000000000000000) {
    return a2 != 0x8000000000000000;
  }
  else {
    return v3;
  }
}

uint64_t static Subscribers.Demand.!= infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x8000000000000000) {
    return 1;
  }
  if ((result & 0x8000000000000000) == 0) {
    return result != a2;
  }
  __break(1u);
  return result;
}

{
  if (a2 == 0x8000000000000000) {
    return 1;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return a2 != result;
  }
  __break(1u);
  return result;
}

void *Subscribers.Demand.init(from:)(void *a1)
{
  BOOL v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    unint64_t v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v4 >= 0x8000000000000000) {
      BOOL v3 = (void *)0x8000000000000000;
    }
    else {
      BOOL v3 = (void *)v4;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t Subscribers.Demand.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void Subscribers.Demand.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int Subscribers.Demand.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Subscribers.Demand(void *a1, void *a2)
{
  if (*a1 == 0x8000000000000000) {
    return 0;
  }
  return *a2 == 0x8000000000000000 || *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Subscribers.Demand(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  BOOL v4 = *a2 == 0x8000000000000000 || *a2 >= v2;
  if (v2 == 0x8000000000000000) {
    return *a2 == 0x8000000000000000;
  }
  else {
    return v4;
  }
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Subscribers.Demand(void *a1, void *a2)
{
  if (*a1 == 0x8000000000000000) {
    return 1;
  }
  return *a2 != 0x8000000000000000 && *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Subscribers.Demand(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  BOOL v4 = *a2 != 0x8000000000000000 && *a2 < v2;
  if (v2 == 0x8000000000000000) {
    return *a2 != 0x8000000000000000;
  }
  else {
    return v4;
  }
}

uint64_t base witness table accessor for Equatable in <> Subscribers.Completion<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Subscribers.Demand and conformance Subscribers.Demand()
{
  unint64_t result = lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand;
  if (!lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subscribers.Demand and conformance Subscribers.Demand);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Subscribers.Demand@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  unint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (v5 >= 0x8000000000000000) {
    unint64_t v7 = 0x8000000000000000;
  }
  else {
    unint64_t v7 = v5;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v7;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Subscribers.Demand(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Demand()
{
  return Subscribers.Demand.description.getter(*v0);
}

ValueMetadata *type metadata accessor for Subscribers()
{
  return &type metadata for Subscribers;
}

uint64_t destructiveInjectEnumTag for Subscribers.Completion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

ValueMetadata *type metadata accessor for Subscribers.Demand()
{
  return &type metadata for Subscribers.Demand;
}

unsigned char *storeEnumTagSinglePayload for Subscribers.Completion.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18C058808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Subscribers.Completion<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in Subscribers.Completion<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

void ReduceProducer.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v25 = *v1;
  uint64_t v2 = (void *)v25;
  uint64_t v26 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v24 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v23 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v2[22]));
  char v32 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18C0BBFD0;
  *(void *)(v7 + 32) = 0x657274736E776F64;
  *(void *)(v7 + 40) = 0xEA00000000006D61;
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 168);
  uint64_t v9 = v2[10];
  *(void *)(v7 + 72) = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v8, v9);
  *(void *)(v7 + 80) = 0x746C75736572;
  *(void *)(v7 + 88) = 0xE600000000000000;
  uint64_t v11 = v2[12];
  uint64_t v12 = type metadata accessor for Optional();
  *(void *)(v7 + 120) = v12;
  uint64_t v13 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 96));
  uint64_t v14 = (uint64_t)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  v15(v13, v14, v12);
  *(void *)(v7 + 128) = 0x6C616974696E69;
  *(void *)(v7 + 136) = 0xE700000000000000;
  uint64_t v16 = (uint64_t)v1 + *(void *)(*v1 + 144);
  *(void *)(v7 + 168) = v12;
  uint64_t v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 144));
  v15(v17, v16, v12);
  *(void *)(v7 + 176) = 0x737574617473;
  *(void *)(v7 + 184) = 0xE600000000000000;
  *(void *)(v7 + 216) = &type metadata for SubscriptionStatus;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v18 + 16;
  *(void *)(v7 + 192) = v18;
  uint64_t v20 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v20, v19);
  uint64_t v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v23, 1, 1, v21);
  uint64_t v22 = v2[11];
  uint64_t v27 = v9;
  uint64_t v28 = v22;
  uint64_t v29 = v11;
  long long v30 = *(_OWORD *)(v25 + 104);
  long long v31 = *(_OWORD *)(v25 + 120);
  type metadata accessor for ReduceProducer();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v24);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 176)));
}

uint64_t ReduceProducer.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 360))();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall ReduceProducer.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 176));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 192)) = 1;
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t ReduceProducer.description.getter()
{
  return 0x656375646552;
}

uint64_t ReduceProducer.__deallocating_deinit()
{
  ReduceProducer.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void ReduceProducer.receive(newValue:)()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360))();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ReduceProducer<A, B, C, D, E>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368))();
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance ReduceProducer<A, B, C, D, E>@<X0>(uint64_t *a1@<X8>)
{
  return ReduceProducer.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance ReduceProducer<A, B, C, D, E>()
{
}

uint64_t sub_18C058FE8()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t Publisher.map<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v10, v4);
  Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)((uint64_t)v10, a1, a2, a3, a4);
  swift_retain();
  return swift_retain();
}

uint64_t Publishers.MapKeyPath2.init(upstream:keyPath0:keyPath1:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for Publishers.MapKeyPath2();
  *(void *)(a5 + *(int *)(result + 52)) = a2;
  *(void *)(a5 + *(int *)(result + 56)) = a3;
  return result;
}

uint64_t Publisher.map<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, v14);
  Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)((uint64_t)v12, a1, a2, a3, a4, a5);
  swift_retain();
  swift_retain();
  return swift_retain();
}

int *Publishers.MapKeyPath3.init(upstream:keyPath0:keyPath1:keyPath2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = (int *)type metadata accessor for Publishers.MapKeyPath3();
  *(void *)(a6 + result[15]) = a2;
  *(void *)(a6 + result[16]) = a3;
  *(void *)(a6 + result[17]) = a4;
  return result;
}

uint64_t Publishers.MapKeyPath.keyPath.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18C0BA630;
  *(void *)(v12 + 32) = 0x6874615079656BLL;
  *(void *)(v12 + 40) = 0xE700000000000000;
  uint64_t v13 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_getAssociatedTypeWitness();
  *(void *)(v12 + 72) = type metadata accessor for KeyPath();
  *(void *)(v12 + 48) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x726F4665756C6156;
  a1[1] = 0xEB0000000079654BLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath<A, B>.Inner<A1>()
{
  return 0x726F4665756C6156;
}

uint64_t Publishers.MapKeyPath2.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath2.keyPath1.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath2.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = *(void *)(v11 + 40);
  long long v26 = *(_OWORD *)(v11 + 16);
  long long v28 = v26;
  uint64_t v29 = v12;
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  uint64_t v32 = v15;
  uint64_t v16 = type metadata accessor for Publishers.MapKeyPath2.Inner();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v20 = *(int *)(a2 + 56);
  uint64_t v21 = *(void *)(v4 + *(int *)(a2 + 52));
  uint64_t v22 = *(void *)(v4 + v20);
  swift_retain();
  swift_retain();
  uint64_t v23 = v26;
  Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)((uint64_t)v10, v21, v22, a3, (uint64_t)v19);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v19, v23, v16, v13, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t type metadata accessor for Publishers.MapKeyPath2.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.MapKeyPath2.Inner.init(downstream:keyPath0:keyPath1:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = (int *)type metadata accessor for Publishers.MapKeyPath2.Inner();
  *(void *)(a5 + v8[17]) = a2;
  *(void *)(a5 + v8[18]) = a3;
  uint64_t v9 = v8[19];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v10 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v11 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v10);
    *(void *)(a5 + v9) = v11;
  }
}

uint64_t Publishers.MapKeyPath2.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18C0BABB0;
  *(void *)(v12 + 32) = 0x306874615079656BLL;
  *(void *)(v12 + 40) = 0xE800000000000000;
  uint64_t v13 = *(void *)(v1 + *(int *)(a1 + 68));
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for KeyPath();
  *(void *)(v12 + 48) = v13;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = 0x316874615079656BLL;
  *(void *)(v12 + 88) = 0xE800000000000000;
  uint64_t v15 = *(void *)(v1 + *(int *)(a1 + 72));
  *(void *)(v12 + 120) = type metadata accessor for KeyPath();
  *(void *)(v12 + 96) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapKeyPath2.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "ValueForKeys");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 56) + 40))(a1, *(void *)(a2 + 40));
}

uint64_t Publishers.MapKeyPath2.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v18 = a2[4];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = *(void *)(v18 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v5);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v15 = &v7[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v7, v14, v3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v11, v18);
  uint64_t v16 = (*(uint64_t (**)(char *, void))(a2[7] + 48))(v7, a2[5]);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, TupleTypeMetadata2);
  return v16;
}

uint64_t Publishers.MapKeyPath2.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 56) + 56))(a1, *(void *)(a2 + 40));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapKeyPath2<A, B, C>.Inner<A1>()
{
  return 0x726F4665756C6156;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath2<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.MapKeyPath2.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.MapKeyPath3.keyPath0.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath1.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.keyPath2.getter()
{
  return swift_retain();
}

uint64_t Publishers.MapKeyPath3.receive<A>(subscriber:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v11 + 48);
  long long v12 = *(_OWORD *)(v11 + 32);
  long long v27 = *(_OWORD *)(v11 + 16);
  long long v30 = v27;
  long long v31 = v12;
  uint64_t v32 = v13;
  uint64_t v33 = v28;
  uint64_t v34 = v14;
  uint64_t v15 = type metadata accessor for Publishers.MapKeyPath3.Inner();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v27 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  uint64_t v19 = *(void *)(v4 + a2[15]);
  uint64_t v20 = *(void *)(v4 + a2[16]);
  uint64_t v21 = *(void *)(v4 + a2[17]);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v22 = v27;
  uint64_t v23 = a3;
  uint64_t v24 = v28;
  Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)((uint64_t)v10, v19, v20, v21, v23, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v22, v15, v24, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t type metadata accessor for Publishers.MapKeyPath3.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.MapKeyPath3.Inner.init(downstream:keyPath0:keyPath1:keyPath2:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t v10 = (int *)type metadata accessor for Publishers.MapKeyPath3.Inner();
  *(void *)(a6 + v10[19]) = a2;
  *(void *)(a6 + v10[20]) = a3;
  *(void *)(a6 + v10[21]) = a4;
  uint64_t v11 = v10[22];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  long long v12 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v13 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v12);
    *(void *)(a6 + v11) = v13;
  }
}

uint64_t Publishers.MapKeyPath3.Inner.customMirror.getter@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, int *))(v12 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18C0BBBA0;
  *(void *)(v13 + 32) = 0x306874615079656BLL;
  *(void *)(v13 + 40) = 0xE800000000000000;
  uint64_t v14 = *(void *)(v2 + a1[19]);
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for KeyPath();
  *(void *)(v13 + 48) = v14;
  *(void *)(v13 + 72) = v15;
  *(void *)(v13 + 80) = 0x316874615079656BLL;
  *(void *)(v13 + 88) = 0xE800000000000000;
  uint64_t v16 = *(void *)(v2 + a1[20]);
  uint64_t v17 = type metadata accessor for KeyPath();
  *(void *)(v13 + 96) = v16;
  *(void *)(v13 + 120) = v17;
  *(void *)(v13 + 128) = 0x326874615079656BLL;
  *(void *)(v13 + 136) = 0xE800000000000000;
  uint64_t v18 = *(void *)(v2 + a1[21]);
  *(void *)(v13 + 168) = type metadata accessor for KeyPath();
  *(void *)(v13 + 144) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v10, 1, 1, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v6);
  swift_retain();
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.MapKeyPath3.Inner.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 40))(a1, *(void *)(a2 + 48));
}

uint64_t Publishers.MapKeyPath3.Inner.receive(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  uint64_t v4 = a2[5];
  uint64_t v27 = a2[3];
  uint64_t v5 = v27;
  uint64_t v28 = v3;
  uint64_t v6 = v3;
  uint64_t v7 = v4;
  uint64_t v30 = v4;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v31 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](TupleTypeMetadata3);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v6 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  uint64_t v26 = TupleTypeMetadata3;
  uint64_t v22 = &v11[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v23 = &v11[*(int *)(TupleTypeMetadata3 + 64)];
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v11, v21, v27);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v18, v28);
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v23, v14, v30);
  uint64_t v24 = (*(uint64_t (**)(char *, void))(a2[8] + 48))(v11, a2[6]);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v26);
  return v24;
}

uint64_t Publishers.MapKeyPath3.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 64) + 56))(a1, *(void *)(a2 + 48));
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 88));
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.MapKeyPath3<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return Publishers.MapKeyPath3.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C05AE6CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C05B05CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.MapKeyPath2()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  void *v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C05B678);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath2(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C05B87CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Publishers.MapKeyPath2()
{
  return swift_getGenericMetadata();
}