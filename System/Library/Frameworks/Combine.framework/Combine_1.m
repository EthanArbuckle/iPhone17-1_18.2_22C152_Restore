uint64_t type metadata completion function for Publishers.MapKeyPath3()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_release();
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C05BF44);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath3(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C05C150);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Publishers.MapKeyPath3()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Publishers.MapKeyPath3.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath3.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    unsigned int v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v14 = *v15;
    *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 48) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  unsigned int v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_retain();
  swift_release();
  unsigned int v11 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  unsigned int v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath3.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 48) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_release();
  unsigned int v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  swift_release();
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath3.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 48) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C05C888);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath3.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 48) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 48) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C05CA9CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.MapKeyPath2.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath2.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    unsigned int v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 40) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  void *v10 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath2.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  swift_release();
  *(void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.MapKeyPath2.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 40) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C05D124);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapKeyPath2.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 40) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 40) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C05D330);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.MapKeyPath.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.MapKeyPath.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.MapKeyPath3<A, B, C, D>.Inner<A1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t DebugHook.willReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = DebugHook.debugHandlers.getter();
  uint64_t v9 = *(void *)(v15 + 16);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)(v15 + 40);
    do
    {
      uint64_t v11 = *v10;
      uint64_t ObjectType = swift_getObjectType();
      int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8);
      swift_unknownObjectRetain();
      v13(a1, a2, a3, a4, a5, a6, ObjectType, v11);
      swift_unknownObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = DebugHook.debugHandlers.getter();
  uint64_t v9 = *(void *)(v15 + 16);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)(v15 + 40);
    do
    {
      uint64_t v11 = *v10;
      uint64_t ObjectType = swift_getObjectType();
      int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16);
      swift_unknownObjectRetain();
      v13(a1, a2, a3, a4, a5, a6, ObjectType, v11);
      swift_unknownObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.init(subscriber:inner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for SubscriberTap() + 36);

  return outlined init with take of Any?(a2, v6);
}

Swift::Void __swiftcall _Introspection.enable()()
{
  Swift::UInt v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for DebugHook();

  specialized static DebugHook.enable(_:)(v2, v5, v4, v3);
}

uint64_t type metadata accessor for DebugHook()
{
  return self;
}

Swift::Void __swiftcall _Introspection.disable()()
{
  type metadata accessor for DebugHook();

  specialized static DebugHook.disable(_:)();
}

BOOL _Introspection.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DebugHook();

  return specialized static DebugHook.handlerIsEnabled(_:)(v2, v5, a1, a2);
}

uint64_t SubscriberTap.combineIdentifier.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8) + 8))(*(void *)(a1 + 16));
}

_OWORD *SubscriberTap.inner.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v72 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v72 + 64);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  int v13 = (char *)&v59 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  int v16 = (char *)&v59 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  v70 = (char *)&v59 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  v71 = (char *)&v59 - v20;
  uint64_t v21 = v2 + *(int *)(v19 + 36);
  outlined init with copy of Any?(v21, (uint64_t)v77);
  if (v78)
  {
    v22 = v77;
    v23 = a2;
  }
  else
  {
    uint64_t v64 = (uint64_t)v13;
    v69 = v16;
    v65 = v10;
    v63 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v67 = v21;
    v68 = a2;
    outlined destroy of CustomStringConvertible?((uint64_t)v77, &demangling cache variable for type metadata for Any?);
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
    v25 = v71;
    v24(v71, v2, v5);
    uint64_t v26 = *(void *)(a1 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v28 = swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    v83[3] = type metadata accessor for AnySubscriber();
    uint64_t v66 = swift_allocObject();
    v83[0] = v66;
    v24(v70, (uint64_t)v25, v5);
    if (swift_dynamicCast())
    {
      uint64_t v29 = v77[0];
      v30 = (uint64_t (*)())v77[1];
      uint64_t v31 = v77[2];
      v32 = v78;
      v34 = v79;
      v33 = v80;
      uint64_t v35 = v81;
      v36 = v68;
      uint64_t v37 = v72;
      uint64_t v38 = v67;
      v39 = v71;
    }
    else
    {
      uint64_t v62 = v28;
      v70 = (char *)AssociatedTypeWitness;
      v39 = v71;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v26 + 8) + 8))(&v82, v5);
      type metadata accessor for AnySubscriberBox();
      uint64_t v40 = (uint64_t)v69;
      v24(v69, (uint64_t)v39, v5);
      uint64_t v61 = AnySubscriberBox.__allocating_init(_:)(v40);
      v24((char *)v64, (uint64_t)v39, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of Subscription(&v73, (uint64_t)v76);
        outlined init with take of Subscription(v76, (uint64_t)&v73);
        uint64_t v64 = swift_allocObject();
        outlined init with take of Subscription(&v73, v64 + 16);
        v41 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0;
      }
      else
      {
        uint64_t v75 = 0;
        long long v74 = 0u;
        long long v73 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v73, &demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        v42 = v24;
        uint64_t v43 = _typeName(_:qualified:)();
        uint64_t v45 = v44;
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = v43;
        *(void *)(v46 + 24) = v45;
        v24 = v42;
        uint64_t v64 = v46;
        v41 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0;
      }
      v60 = v41;
      v47 = v69;
      v24(v69, (uint64_t)v39, v5);
      uint64_t v48 = v72;
      v49 = (void (*)(char *, char *, uint64_t))v24;
      unint64_t v50 = (*(unsigned __int8 *)(v72 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v34 = (char *)swift_allocObject();
      uint64_t v51 = v62;
      *((void *)v34 + 2) = v70;
      *((void *)v34 + 3) = v51;
      *((void *)v34 + 4) = v5;
      *((void *)v34 + 5) = v26;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(&v34[v50], v47, v5);
      v49(v65, v39, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of Subscription(&v73, (uint64_t)v76);
        outlined init with take of Subscription(v76, (uint64_t)&v73);
        uint64_t v35 = swift_allocObject();
        outlined init with take of Subscription(&v73, v35 + 16);
        v52 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0;
      }
      else
      {
        uint64_t v75 = 0;
        long long v74 = 0u;
        long long v73 = 0u;
        outlined destroy of CustomStringConvertible?((uint64_t)&v73, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        v49(v63, v39, v5);
        if (swift_dynamicCast())
        {
          outlined init with take of Subscription(&v73, (uint64_t)v76);
          outlined init with take of Subscription(v76, (uint64_t)&v73);
          uint64_t v35 = swift_allocObject();
          outlined init with take of Subscription(&v73, v35 + 16);
          v52 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0;
        }
        else
        {
          uint64_t v75 = 0;
          long long v74 = 0u;
          long long v73 = 0u;
          outlined destroy of CustomStringConvertible?((uint64_t)&v73, &demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          uint64_t v53 = _typeName(_:qualified:)();
          uint64_t v55 = v54;
          uint64_t v35 = swift_allocObject();
          *(void *)(v35 + 16) = v53;
          *(void *)(v35 + 24) = v55;
          v52 = _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0;
        }
      }
      v33 = v52;
      v32 = partial apply for closure #3 in AnySubscriber.init<A>(_:);
      v36 = v68;
      uint64_t v37 = v72;
      uint64_t v38 = v67;
      uint64_t v29 = v61;
      uint64_t v31 = v64;
      v30 = v60;
    }
    v56 = (void *)v66;
    uint64_t v57 = v82;
    *(void *)(v66 + 16) = v29;
    v56[3] = v30;
    v56[4] = v31;
    v56[5] = v32;
    v56[6] = v34;
    v56[7] = v33;
    v56[8] = v35;
    v56[9] = v57;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v5);
    outlined destroy of CustomStringConvertible?(v38, &demangling cache variable for type metadata for Any?);
    outlined init with copy of Any((uint64_t)v83, v38);
    v22 = v83;
    v23 = v36;
  }
  return outlined init with take of Any(v22, v23);
}

uint64_t SubscriberTap.receive(subscription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  outlined init with copy of Subscription(a1, (uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
  if (swift_dynamicCast())
  {
    v31[0] = v25;
    v31[1] = v26;
    uint64_t v32 = v27;
    if (one-time initialization token for globalLock != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v6 = static DebugHook.globalHook;
    uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v7);
    if (v6)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, (uint64_t)v31, *(void *)(a2 + 16), *(void *)(a2 + 24));
      swift_release();
    }
    uint64_t v29 = &type metadata for SubscriptionTap;
    v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16);
    uint64_t v10 = a2 + 16;
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(v10 + 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v9 + 40))(v28, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v11 = static DebugHook.globalHook;
    uint64_t v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v12);
    if (v11)
    {
      int v13 = v31;
      uint64_t v14 = v3;
      uint64_t v15 = v8;
      uint64_t v16 = v9;
LABEL_14:
      DebugHook.didReceive<A>(subscriber:subscription:)(v14, (uint64_t)v13, v15, v16);
      swift_release();
    }
  }
  else
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    outlined destroy of CustomStringConvertible?((uint64_t)&v25, &demangling cache variable for type metadata for SubscriptionTap?);
    outlined init with copy of Subscription(a1, (uint64_t)v31);
    if (one-time initialization token for globalLock != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    uint64_t v17 = static DebugHook.globalHook;
    uint64_t v18 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v18);
    if (v17)
    {
      DebugHook.willReceive<A>(subscriber:subscription:)(v3, a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
      swift_release();
    }
    uint64_t v29 = &type metadata for SubscriptionTap;
    v30 = &protocol witness table for SubscriptionTap;
    v28[0] = swift_allocObject();
    outlined init with copy of SubscriptionTap((uint64_t)v31, v28[0] + 16);
    uint64_t v21 = a2 + 16;
    uint64_t v19 = *(void *)(a2 + 16);
    uint64_t v20 = *(void *)(v21 + 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v20 + 40))(v28, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
    v22 = static DebugHook.globalHook;
    v23 = (os_unfair_lock_s *)static DebugHook.globalLock;
    swift_retain();
    os_unfair_lock_unlock(v23);
    if (v22)
    {
      uint64_t v14 = v3;
      int v13 = (_OWORD *)a1;
      uint64_t v15 = v19;
      uint64_t v16 = v20;
      goto LABEL_14;
    }
  }
  return outlined destroy of SubscriptionTap((uint64_t)v31);
}

uint64_t DebugHook.willReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = DebugHook.debugHandlers.getter();
  uint64_t v7 = *(void *)(v13 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24);
      swift_unknownObjectRetain();
      v11(a1, a2, a3, a4, ObjectType, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = DebugHook.debugHandlers.getter();
  uint64_t v7 = *(void *)(v13 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
      swift_unknownObjectRetain();
      v11(a1, a2, a3, a4, ObjectType, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:input:)(v3, a1, v9, v8);
    swift_release();
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v11 = static DebugHook.globalHook;
  uint64_t v12 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v12);
  if (v11)
  {
    DebugHook.didReceive<A>(subscriber:input:resultingDemand:)(v3, a1, v10, v9, v8);
    swift_release();
  }
  return v10;
}

uint64_t DebugHook.willReceive<A>(subscriber:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = DebugHook.debugHandlers.getter();
  uint64_t v7 = *(void *)(v13 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
      swift_unknownObjectRetain();
      v11(a1, a2, a3, a4, ObjectType, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:input:resultingDemand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = DebugHook.debugHandlers.getter();
  uint64_t v8 = *(void *)(v14 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48);
      swift_unknownObjectRetain();
      v12(a1, a2, a3, a4, a5, ObjectType, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
  }

  return swift_bridgeObjectRelease();
}

void SubscriberTap.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  uint64_t v7 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v7);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6)
  {
    DebugHook.willReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v9, v8);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v10 = static DebugHook.globalHook;
  uint64_t v11 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v11);
  if (v10)
  {
    DebugHook.didReceive<A>(subscriber:completion:)(v3, a1, v9, v8);
    swift_release();
  }
}

uint64_t DebugHook.willReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = DebugHook.debugHandlers.getter();
  uint64_t v7 = *(void *)(v13 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      swift_unknownObjectRetain();
      v11(a1, a2, a3, a4, ObjectType, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t DebugHook.didReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = DebugHook.debugHandlers.getter();
  uint64_t v7 = *(void *)(v13 + 16);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(v13 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
      swift_unknownObjectRetain();
      v11(a1, a2, a3, a4, ObjectType, v9);
      swift_unknownObjectRelease();
      v8 += 2;
      --v7;
    }
    while (v7);
  }

  return swift_bridgeObjectRelease();
}

uint64_t SubscriberTap.description.getter()
{
  return 0;
}

Swift::Void __swiftcall SubscriptionTap.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v4 = static DebugHook.globalHook;
  uint64_t v5 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v5);
  if (v4)
  {
    uint64_t v20 = DebugHook.debugHandlers.getter();
    uint64_t v6 = *(void *)(v20 + 16);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)(v20 + 40);
      do
      {
        uint64_t v8 = *v7;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v10 = *(void (**)(void *, Swift::UInt, uint64_t, uint64_t))(v8 + 72);
        swift_unknownObjectRetain();
        v10(v2, a1.rawValue, ObjectType, v8);
        swift_unknownObjectRelease();
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v2[3];
  uint64_t v12 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v11);
  (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v12 + 24))(a1.rawValue, v11, v12);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v13 = static DebugHook.globalHook;
  uint64_t v14 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v14);
  if (v13)
  {
    uint64_t v21 = DebugHook.debugHandlers.getter();
    uint64_t v15 = *(void *)(v21 + 16);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(v21 + 40);
      do
      {
        uint64_t v17 = *v16;
        uint64_t v18 = swift_getObjectType();
        uint64_t v19 = *(void (**)(void *, Swift::UInt, uint64_t, uint64_t))(v17 + 80);
        swift_unknownObjectRetain();
        v19(v2, a1.rawValue, v18, v17);
        swift_unknownObjectRelease();
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall SubscriptionTap.cancel()()
{
  Swift::UInt v1 = v0;
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v2 = static DebugHook.globalHook;
  uint64_t v3 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v3);
  if (v2)
  {
    uint64_t v4 = DebugHook.debugHandlers.getter();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(v4 + 40);
      do
      {
        uint64_t v7 = *v6;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 88);
        swift_unknownObjectRetain();
        v9(v1, ObjectType, v7);
        swift_unknownObjectRelease();
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v1[3];
  uint64_t v10 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v11);
  (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 8))(v11);
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v12 = static DebugHook.globalHook;
  uint64_t v13 = (os_unfair_lock_s *)static DebugHook.globalLock;
  swift_retain();
  os_unfair_lock_unlock(v13);
  if (v12)
  {
    uint64_t v14 = DebugHook.debugHandlers.getter();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(v14 + 40);
      do
      {
        uint64_t v17 = *v16;
        uint64_t v18 = swift_getObjectType();
        uint64_t v19 = *(void (**)(void *, uint64_t, uint64_t))(v17 + 96);
        swift_unknownObjectRetain();
        v19(v1, v18, v17);
        swift_unknownObjectRelease();
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubscriptionTap()
{
  return 0;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance SubscriptionTap()
{
  Swift::UInt v1 = v0;
  uint64_t v3 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 8))(v3);
}

uint64_t DebugHook.debugHandlers.getter()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v15;
    uint64_t result = specialized Set.startIndex.getter(v1);
    int64_t v5 = result;
    int v7 = v6;
    char v9 = v8 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v1 + 32))
    {
      if (((*(void *)(v1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
        goto LABEL_13;
      }
      if (*(_DWORD *)(v1 + 36) != v7) {
        goto LABEL_14;
      }
      unint64_t v10 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      long long v14 = *(_OWORD *)(*(void *)(v1 + 48) + 16 * v5);
      swift_unknownObjectRetain();
      if (v10 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v10 + 1, 1);
      }
      *(void *)(v15 + 16) = v10 + 1;
      *(_OWORD *)(v15 + 16 * v10 + 32) = v14;
      uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, v1);
      int64_t v5 = result;
      int v7 = v12;
      char v9 = v13 & 1;
      if (!--v2)
      {
        outlined consume of Set<DebugHook.Handler>.Index._Variant(result, v12, v13 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
    return v3;
  }
  return result;
}

uint64_t DebugHook.__deallocating_deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 16), -1, -1);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = ~v6;
  do
  {
    uint64_t v9 = *(void *)(*(void *)(a3 + 48) + 16 * v7);
    BOOL result = v9 == a1;
    if (v9 == a1) {
      break;
    }
    unint64_t v7 = (v7 + 1) & v8;
  }
  while (((*(void *)(a3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Introspection>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _Introspection);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (BOOL result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized static DebugHook.enable(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = (os_unfair_lock_t *)static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v7 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(v6[2]);
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    unint64_t v9 = (os_unfair_lock_s *)swift_slowAlloc();
    v9->_os_unfair_lock_opaque = 0;
    *(void *)(v8 + 16) = v9;
    *(void *)(v8 + 24) = MEMORY[0x1E4FBC870];
    os_unfair_lock_lock(v9);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t)v10, a1, a4);
    swift_endAccess();
    swift_unknownObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    static DebugHook.globalHook = (_UNKNOWN *)v8;
  }
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
}

void specialized static DebugHook.disable(_:)()
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v0 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v1 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v1);
    swift_beginAccess();
    Swift::UInt v2 = swift_unknownObjectRetain();
    specialized Set._Variant.remove(_:)(v2);
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v3 = *(void *)(*((void *)v0 + 3) + 16);
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v0 + 2));
    if (!v3)
    {
      static DebugHook.globalHook = 0;
      swift_release();
    }
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  }
  else
  {
    unint64_t v4 = (os_unfair_lock_s *)static DebugHook.globalLock;
    os_unfair_lock_unlock(v4);
  }
}

BOOL specialized static DebugHook.handlerIsEnabled(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for globalLock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)static DebugHook.globalLock);
  uint64_t v6 = static DebugHook.globalHook;
  if (static DebugHook.globalHook)
  {
    unint64_t v7 = (os_unfair_lock_s *)*((void *)static DebugHook.globalHook + 2);
    swift_retain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    BOOL v8 = specialized Set.contains(_:)(a1, a4, *((void *)v6 + 3));
    os_unfair_lock_unlock(*((os_unfair_lock_t *)v6 + 2));
    swift_release();
  }
  else
  {
    BOOL v8 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)static DebugHook.globalLock);
  return v8;
}

uint64_t dispatch thunk of _Introspection.willReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A, B>(publisher:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:subscription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:input:resultingDemand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of _Introspection.willReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of _Introspection.didReceive<A>(subscriber:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of _Introspection.willRequest(subscription:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _Introspection.didRequest(subscription:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _Introspection.willCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of _Introspection.didCancel(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of SubscriberTapMarker.inner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_OWORD *initializeBufferWithCopyOfBuffer for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for DebugHook.Handler()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for DebugHook.Handler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for DebugHook.Handler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for DebugHook.Handler()
{
  return &type metadata for DebugHook.Handler;
}

uint64_t *initializeBufferWithCopyOfBuffer for SubscriberTap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = *(void *)(v11 + 24);
    if (v12 < 0xFFFFFFFF)
    {
      long long v13 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)(v10 + 16) = v13;
    }
    else
    {
      *(void *)(v10 + 24) = v12;
      (**(void (***)(void))(v12 - 8))();
    }
  }
  return v4;
}

unint64_t destroy for SubscriberTap(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t result = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (v9 < 0xFFFFFFFF)
  {
    long long v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v10;
  }
  else
  {
    *(void *)(v7 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t assignWithCopy for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(void *)(v7 + 24) = v9;
      (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
      return a1;
    }
LABEL_7:
    long long v10 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v10;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v7);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v7, (uint64_t *)v8);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for SubscriberTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *(_OWORD *)unint64_t v7 = *v8;
  *(_OWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriberTap(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C060470);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for SubscriberTap(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C060674);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0x7FFFFFFE)
          {
            double result = 0.0;
            *(_OWORD *)unint64_t v19 = 0u;
            *(_OWORD *)(v19 + 16) = 0u;
            *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *(void *)(v19 + 24) = a2;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

unint64_t lazy protocol witness table accessor for type DebugHook.Handler and conformance DebugHook.Handler()
{
  unint64_t result = lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler;
  if (!lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DebugHook.Handler and conformance DebugHook.Handler);
  }
  return result;
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in SubscriberTap<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t outlined consume of Set<DebugHook.Handler>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_18C06071C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t outlined init with copy of SubscriptionTap(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of SubscriptionTap(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18C060844()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU0_TA_0()
{
  return closure #2 in AnySubscriber.init<A>(_:)(*(void *)(v0 + 16));
}

uint64_t sub_18C06089C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t sub_18C060924()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU4_TA_0@<X0>(void *a1@<X8>)
{
  return closure #6 in AnySubscriber.init<A>(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU3_TA_0@<X0>(uint64_t *a1@<X8>)
{
  return closure #5 in AnySubscriber.init<A>(_:)((void *)(v1 + 16), a1);
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcypycfU2_TA_0()
{
  return closure #4 in AnySubscriber.init<A>(_:)((void *)(v0 + 16));
}

uint64_t _s7Combine13AnySubscriberVyACyxq_Gqd__c5InputQyd__Rsz7FailureQyd__Rs_AA0C0Rd__lufcSSycfU_TA_0()
{
  return closure #1 in AnySubscriber.init<A>(_:)((void *)(v0 + 16));
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SubscriptionTap(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

ValueMetadata *type metadata accessor for SubscriptionTap()
{
  return &type metadata for SubscriptionTap;
}

Swift::Int ConduitBase.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t initializeBufferWithCopyOfBuffer for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ConduitList(uint64_t a1)
{
  return outlined consume of ConduitList<A, Never><A>(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for ConduitList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConduitList<A, Never><A>(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ConduitList<A, Never><A>(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ConduitList(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ConduitList<A, Never><A>(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConduitList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConduitList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ConduitList(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ConduitList(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConduitBase<A, B>()
{
  return ConduitBase.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ConduitBase<A, B>()
{
}

uint64_t AsyncPublisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t AsyncPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AsyncPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncPublisher.Iterator.Inner.State);
}

uint64_t AsyncPublisher.Iterator.Inner.__deallocating_deinit()
{
  AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncPublisher.Iterator.Inner.State);

  return MEMORY[0x1F4186488](v0, 80, 7);
}

Swift::Void __swiftcall AsyncPublisher.Iterator.Inner.cancel()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)&v22 - v3;
  os_unfair_lock_t v26 = *(os_unfair_lock_t *)(v0 + 16);
  os_unfair_lock_lock(v26);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  uint64_t v7 = v0 + 32;
  swift_beginAccess();
  unsigned int v8 = (void (**)(void, void, void))type metadata accessor for AsyncPublisher.Iterator.Inner.State();
  uint64_t v9 = (uint64_t)*(v8 - 1);
  (*(void (**)(long long *, uint64_t, void))(v9 + 16))(&v31, v7, v8);
  if (v32 >= 2)
  {
LABEL_11:
    outlined init with take of Subscription(&v31, (uint64_t)v29);
    memset(v27, 0, sizeof(v27));
    long long v28 = xmmword_18C0BA640;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, void))(v9 + 40))(v7, v27, v8);
    swift_endAccess();
    os_unfair_lock_unlock(v26);
    long long v15 = v30;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    (*(void (**)(void))(*(void *)(*((void *)&v15 + 1) + 8) + 8))(v15);
    if (MEMORY[0x18C13B800](v5, v6))
    {
      unsigned int v16 = (void (**)(void, char *, uint64_t))(v25 + 32);
      uint64_t v17 = 4;
      do
      {
        uint64_t v18 = v17 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v20 = *(void *)(v5 + 8 * v17);
          BOOL v14 = __OFADD__(v18, 1);
          uint64_t v21 = v17 - 3;
          if (v14) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v20 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v14 = __OFADD__(v18, 1);
          uint64_t v21 = v17 - 3;
          if (v14)
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
        (*v16)(*(void *)(*(void *)(v20 + 64) + 40), v4, v2);
        swift_continuation_resume();
        ++v17;
      }
      while (v21 != MEMORY[0x18C13B800](v5, v6));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    memset(v29, 0, sizeof(v29));
    long long v30 = xmmword_18C0BA640;
    swift_beginAccess();
    uint64_t v23 = v9;
    unint64_t v10 = *(void (**)(uint64_t, void *, void))(v9 + 40);
    v24 = v8;
    v10(v7, v29, v8);
    swift_endAccess();
    os_unfair_lock_unlock(v26);
    if (!MEMORY[0x18C13B800](v5, v6)) {
      goto LABEL_20;
    }
    unsigned int v8 = (void (**)(void, void, void))(v25 + 32);
    uint64_t v11 = 4;
    do
    {
      uint64_t v12 = v11 - 4;
      Swift::Bool v13 = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (v13)
      {
        uint64_t v7 = *(void *)(v5 + 8 * v11);
        BOOL v14 = __OFADD__(v12, 1);
        uint64_t v9 = v11 - 3;
        if (v14) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v7 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v14 = __OFADD__(v12, 1);
        uint64_t v9 = v11 - 3;
        if (v14)
        {
LABEL_10:
          __break(1u);
          goto LABEL_11;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
      (*v8)(*(void *)(*(void *)(v7 + 64) + 40), v4, v2);
      swift_continuation_resume();
      ++v11;
    }
    while (v9 != MEMORY[0x18C13B800](v5, v6));
LABEL_20:
    swift_bridgeObjectRelease();
    (*(void (**)(long long *, void (**)(void, void, void)))(v23 + 8))(&v31, v24);
  }
}

uint64_t AsyncPublisher.Iterator.Inner.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](AsyncPublisher.Iterator.Inner.next(), 0, 0);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance AsyncPublisher<A>.Iterator.Inner()
{
  return specialized AsyncPublisher.Iterator.Inner.receive(completion:)();
}

void protocol witness for Cancellable.cancel() in conformance AsyncPublisher<A>.Iterator.Inner()
{
}

uint64_t closure #2 in AsyncPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](closure #2 in AsyncPublisher.Iterator.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncPublisher<A>.Iterator()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _s7Combine14AsyncPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(a1, a2, (void (*)(void))AsyncPublisher.makeAsyncIterator());
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  return v0;
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *uint64_t v1 = 0;
  *(void *)(v0 + 16) = v1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for UnsafeContinuation();
  *(void *)(v0 + 24) = Array.init()();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 2;
  *(void *)(v0 + 80) = 0;
  return v0;
}

uint64_t *AsyncThrowingPublisher.Iterator.Inner.deinit()
{
  return AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State);
}

uint64_t *AsyncPublisher.Iterator.Inner.deinit(uint64_t (*a1)(void, void, void))
{
  uint64_t v3 = *v1;
  MEMORY[0x18C13C4B0](v1[2], -1, -1);
  swift_bridgeObjectRelease();
  uint64_t v4 = a1(0, *(void *)(v3 + 80), *(void *)(v3 + 88));
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8))(v1 + 4, v4);
  return v1;
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.__deallocating_deinit()
{
  AsyncPublisher.Iterator.Inner.deinit((uint64_t (*)(void, void, void))type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State);

  return MEMORY[0x1F4186488](v0, 88, 7);
}

void AsyncThrowingPublisher.Iterator.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v12, v1 + 32, v4);
  if (v15 == 2
    && (int8x16_t v6 = vorrq_s8(v13, v14),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | v12)))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(&v12, v4);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v12);
    char v15 = 0;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v5 + 40))(v1 + 32, &v12, v4);
    swift_endAccess();
    uint64_t v9 = *(void *)(v1 + 80);
    *(void *)(v1 + 80) = 0;
    os_unfair_lock_unlock(v3);
    if (v9)
    {
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v9, v10, v11);
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(&v12, v4);
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.receive(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int8x16_t v6 = (char *)&v23 - v5;
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v28, v1 + 32, v8);
  uint64_t v10 = (uint64_t *)(v1 + 24);
  if (!v28[40])
  {
    uint64_t v24 = v9;
    swift_beginAccess();
    uint64_t v27 = *v10;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    swift_getWitnessTable();
    if ((Collection.isEmpty.getter() & 1) == 0)
    {
      swift_beginAccess();
      swift_getWitnessTable();
      RangeReplaceableCollection.removeFirst()();
      swift_endAccess();
      uint64_t v20 = v26;
      os_unfair_lock_unlock(v7);
      uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, a1, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v6, 0, 1, AssociatedTypeWitness);
      (*(void (**)(void, char *, uint64_t))(v25 + 32))(*(void *)(*(void *)(v20 + 64) + 40), v6, v4);
      swift_continuation_throwingResume();
      goto LABEL_14;
    }
    os_unfair_lock_unlock(v7);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_beginAccess();
  uint64_t v11 = *v10;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v12 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v7);
  if (!MEMORY[0x18C13B800](v11, v12))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  int8x16_t v13 = (void (**)(void, char *, uint64_t))(v25 + 32);
  uint64_t v14 = 4;
  while (1)
  {
    uint64_t v15 = v14 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    uint64_t v17 = *(void *)(v11 + 8 * v14);
    BOOL v18 = __OFADD__(v15, 1);
    uint64_t v19 = v14 - 3;
    if (v18) {
      goto LABEL_10;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
    (*v13)(*(void *)(*(void *)(v17 + 64) + 40), v6, v4);
    swift_continuation_throwingResume();
    ++v14;
    if (v19 == MEMORY[0x18C13B800](v11, v12)) {
      goto LABEL_11;
    }
  }
  uint64_t v17 = _ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  BOOL v18 = __OFADD__(v15, 1);
  uint64_t v19 = v14 - 3;
  if (!v18) {
    goto LABEL_6;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_bridgeObjectRelease();
  uint64_t v8 = v23;
LABEL_14:
  uint64_t v9 = v24;
LABEL_16:
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v28, v8);
  return 0;
}

uint64_t UnsafeContinuation.resume(returning:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void, uint64_t))(*(void *)(a3 - 8) + 32))(*(void *)(*(void *)(a2 + 64) + 40), a1);

  return swift_continuation_throwingResume();
}

void AsyncThrowingPublisher.Iterator.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v54 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v49 = (char *)&v45 - v3;
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion();
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v51 = (char *)&v45 - v12;
  os_unfair_lock_t v56 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v56);
  int8x16_t v13 = v1 + 4;
  swift_beginAccess();
  uint64_t v14 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v58, v1 + 4, v14);
  if (v59)
  {
    if (v59 == 1)
    {
      MEMORY[0x18C13C260](v58[0]);
      swift_beginAccess();
      uint64_t v16 = v1[3];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      uint64_t AssociatedTypeWitness = type metadata accessor for UnsafeContinuation();
      type metadata accessor for Array();
      Array.removeAll(keepingCapacity:)(0);
      swift_endAccess();
      os_unfair_lock_unlock(v56);
      if (MEMORY[0x18C13B800](v16, AssociatedTypeWitness))
      {
        uint64_t v14 = v4 - 8;
        uint64_t v15 = v6 + 32;
        uint64_t v6 = 4;
        while (1)
        {
          uint64_t v17 = v6 - 4;
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            uint64_t v1 = *(void **)(v16 + 8 * v6);
            BOOL v19 = __OFADD__(v17, 1);
            int8x16_t v13 = (void *)(v6 - 3);
            if (v19) {
              goto LABEL_11;
            }
          }
          else
          {
            uint64_t v1 = (void *)_ArrayBuffer._getElementSlowPath(_:)();
            swift_unknownObjectRelease();
            BOOL v19 = __OFADD__(v17, 1);
            int8x16_t v13 = (void *)(v6 - 3);
            if (v19)
            {
LABEL_11:
              __break(1u);
              goto LABEL_12;
            }
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v8, 1, 1, v4);
          (*(void (**)(void, char *, uint64_t))v15)(*(void *)(v1[8] + 40), v8, v5);
          swift_continuation_throwingResume();
          ++v6;
          if (v13 == (void *)MEMORY[0x18C13B800](v16, AssociatedTypeWitness)) {
            goto LABEL_29;
          }
        }
      }
      goto LABEL_29;
    }
  }
  else
  {
LABEL_12:
    (*(void (**)(void *, uint64_t))(v15 + 8))(v58, v14);
  }
  uint64_t v50 = AssociatedTypeWitness;
  uint64_t v46 = v6;
  uint64_t v20 = v1 + 3;
  swift_beginAccess();
  uint64_t v21 = v1[3];
  swift_bridgeObjectRetain();
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v22 = type metadata accessor for UnsafeContinuation();
  uint64_t v23 = MEMORY[0x18C13B7E0](v21, v22);
  swift_bridgeObjectRelease();
  if (v23 >= 1)
  {
    v58[0] = 0;
    char v59 = 1;
    swift_beginAccess();
    (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v13, v58, v14);
    swift_endAccess();
    swift_beginAccess();
    type metadata accessor for Array();
    swift_getWitnessTable();
    RangeReplaceableCollection.removeFirst()();
    swift_endAccess();
    uint64_t v24 = v57;
    uint64_t v25 = *v20;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    Array.removeAll(keepingCapacity:)(0);
    swift_endAccess();
    os_unfair_lock_unlock(v56);
    uint64_t v26 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
    uint64_t v27 = v55;
    uint64_t v28 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v26, 1, v50) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v8, 1, 1, v4);
      (*(void (**)(void, char *, uint64_t))(v46 + 32))(*(void *)(*(void *)(v24 + 64) + 40), v8, v5);
      swift_continuation_throwingResume();
    }
    else
    {
      unint64_t v32 = v49;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v49, v26, v28);
      uint64_t v33 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v34, v32, v28);
      v58[0] = v33;
      UnsafeContinuation.resume(throwing:)((uint64_t)v58, v24, v5, v45);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v28);
    }
    if (MEMORY[0x18C13B800](v25, v22))
    {
      uint64_t v35 = (void (**)(void, char *, uint64_t))(v46 + 32);
      uint64_t v36 = 4;
      do
      {
        uint64_t v37 = v36 - 4;
        Swift::Bool v38 = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (v38)
        {
          uint64_t v39 = *(void *)(v25 + 8 * v36);
          BOOL v19 = __OFADD__(v37, 1);
          uint64_t v40 = v36 - 3;
          if (v19) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v39 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v19 = __OFADD__(v37, 1);
          uint64_t v40 = v36 - 3;
          if (v19)
          {
LABEL_28:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v8, 1, 1, v4);
        (*v35)(*(void *)(*(void *)(v39 + 64) + 40), v8, v5);
        swift_continuation_throwingResume();
        ++v36;
      }
      while (v40 != MEMORY[0x18C13B800](v25, v22));
    }
LABEL_29:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v29 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v47, v54, v53);
  uint64_t v30 = v55;
  uint64_t v31 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v29, 1, v50) == 1)
  {
    v58[0] = 0;
  }
  else
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v42 = v49;
    v41(v49, v29, v31);
    uint64_t v43 = swift_allocError();
    v41(v44, v42, v31);
    v58[0] = v43;
  }
  char v59 = 1;
  swift_beginAccess();
  (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v13, v58, v14);
  swift_endAccess();
  os_unfair_lock_unlock(v56);
}

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v8, a1, a4);

  return MEMORY[0x1F4188208](a2, v7);
}

Swift::Void __swiftcall AsyncThrowingPublisher.Iterator.Inner.cancel()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v27 - v3;
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 24);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v7 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  uint64_t v8 = v0 + 32;
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v10 + 16))(v35, v8, v9);
  if (!v36)
  {
    outlined init with take of Subscription(v35, (uint64_t)v30);
    v33[0] = 0;
    char v34 = 1;
    swift_beginAccess();
    (*(void (**)(uint64_t, void *, uint64_t))(v10 + 40))(v8, v33, v9);
    swift_endAccess();
    os_unfair_lock_unlock(v5);
    uint64_t v20 = v31;
    uint64_t v19 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(uint64_t))(*(void *)(v19 + 8) + 8))(v20);
    if (MEMORY[0x18C13B800](v6, v7))
    {
      uint64_t v21 = (void (**)(void, char *, uint64_t))(v29 + 32);
      uint64_t v22 = 4;
      do
      {
        uint64_t v23 = v22 - 4;
        Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          uint64_t v25 = *(void *)(v6 + 8 * v22);
          BOOL v17 = __OFADD__(v23, 1);
          uint64_t v26 = v22 - 3;
          if (v17) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v25 = _ArrayBuffer._getElementSlowPath(_:)();
          swift_unknownObjectRelease();
          BOOL v17 = __OFADD__(v23, 1);
          uint64_t v26 = v22 - 3;
          if (v17)
          {
LABEL_20:
            __break(1u);
            break;
          }
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
        (*v21)(*(void *)(*(void *)(v25 + 64) + 40), v4, v2);
        swift_continuation_throwingResume();
        ++v22;
      }
      while (v26 != MEMORY[0x18C13B800](v6, v7));
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return;
  }
  v33[0] = 0;
  char v34 = 1;
  swift_beginAccess();
  uint64_t v27 = v10;
  uint64_t v11 = *(void (**)(uint64_t, void *, uint64_t))(v10 + 40);
  uint64_t v28 = v9;
  v11(v8, v33, v9);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  if (!MEMORY[0x18C13B800](v6, v7)) {
    goto LABEL_11;
  }
  uint64_t v12 = (void (**)(void, char *, uint64_t))(v29 + 32);
  uint64_t v13 = 4;
  while (1)
  {
    uint64_t v14 = v13 - 4;
    Swift::Bool v15 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!v15) {
      break;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v13);
    BOOL v17 = __OFADD__(v14, 1);
    uint64_t v18 = v13 - 3;
    if (v17) {
      goto LABEL_10;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v4, 1, 1, AssociatedTypeWitness);
    (*v12)(*(void *)(*(void *)(v16 + 64) + 40), v4, v2);
    swift_continuation_throwingResume();
    ++v13;
    if (v18 == MEMORY[0x18C13B800](v6, v7)) {
      goto LABEL_11;
    }
  }
  uint64_t v16 = _ArrayBuffer._getElementSlowPath(_:)();
  swift_unknownObjectRelease();
  BOOL v17 = __OFADD__(v14, 1);
  uint64_t v18 = v13 - 3;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_bridgeObjectRelease();
  (*(void (**)(long long *, uint64_t))(v27 + 8))(v35, v28);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.Inner.next(), 0, 0);
}

uint64_t AsyncThrowingPublisher.Iterator.Inner.next()()
{
  uint64_t v6 = (char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
     + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  *uint64_t v1 = v0;
  v1[1] = AsyncThrowingPublisher.Iterator.Inner.next();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return ((uint64_t (*)(uint64_t, void, void, void (*)(uint64_t), uint64_t, uint64_t))v6)(v3, 0, 0, partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next(), v4, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.Inner.next(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = *(os_unfair_lock_s **)(a2 + 16);
  os_unfair_lock_lock(v9);
  uint64_t v10 = a2 + 32;
  swift_beginAccess();
  uint64_t v11 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v12 + 16))(v27, a2 + 32, v11);
  if (!v28)
  {
    outlined init with take of Subscription(v27, (uint64_t)v21);
    uint64_t v26 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    uint64_t v15 = v22;
    uint64_t v16 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(1, v15, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return;
  }
  if (v28 != 1)
  {
    uint64_t v25 = a1;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    uint64_t v17 = *(void *)(a2 + 80);
    unint64_t v18 = 0x8000000000000000;
    if (v17 != 0x8000000000000000)
    {
      if (v17 < 0)
      {
        __break(1u);
        return;
      }
      BOOL v19 = __OFADD__(v17, 1);
      unint64_t v20 = v17 + 1;
      if (!v19) {
        unint64_t v18 = v20;
      }
    }
    *(void *)(a2 + 80) = v18;
    os_unfair_lock_unlock(v9);
    return;
  }
  uint64_t v13 = *(void *)&v27[0];
  v21[0] = 0;
  char v24 = 1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void *, uint64_t))(v12 + 40))(v10, v21, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v9);
  if (v13)
  {
    v21[0] = v13;
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    UnsafeContinuation.resume(throwing:)((uint64_t)v21, a1, v5, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(a1 + 64) + 40), v8, v5);
    swift_continuation_throwingResume();
  }
}

void protocol witness for Subscriber.receive(subscription:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(void *a1)
{
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(uint64_t a1)
{
  return 0;
}

void protocol witness for Subscriber.receive(completion:) in conformance AsyncThrowingPublisher<A>.Iterator.Inner(uint64_t a1)
{
}

void protocol witness for Cancellable.cancel() in conformance AsyncThrowingPublisher<A>.Iterator.Inner()
{
}

uint64_t AsyncThrowingPublisher.Iterator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AsyncThrowingPublisher.Iterator.Inner();
  uint64_t v9 = swift_allocObject();
  AsyncThrowingPublisher.Iterator.Inner.init()();
  type metadata accessor for AnyCancellable();
  uint64_t v13 = v9;
  swift_retain_n();
  uint64_t v10 = AnyCancellable.__allocating_init<A>(_:)((uint64_t)&v13, v8, (uint64_t)&protocol witness table for AsyncThrowingPublisher<A>.Iterator.Inner);
  uint64_t v13 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v13, a2, v8, a3, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t result = swift_release();
  *a4 = v9;
  a4[1] = v10;
  return result;
}

uint64_t AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.next(), 0, 0);
}

uint64_t AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)v0[4];
  uint64_t v3 = *v2;
  v0[5] = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  v4[2] = *(void *)(v1 + 16);
  v4[3] = *(void *)(v1 + 24);
  v4[4] = v2;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to withTaskCancellationHandler<A>(handler:operation:)
                                                                                    + async function pointer to withTaskCancellationHandler<A>(handler:operation:));
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  *uint64_t v5 = v0;
  v5[1] = AsyncThrowingPublisher.Iterator.next();
  uint64_t v7 = v0[2];
  return v9(v7, (uint64_t)partial apply for closure #1 in AsyncThrowingPublisher.Iterator.next(), v3, (uint64_t)&async function pointer to partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next(), (uint64_t)v4, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.next(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](closure #2 in AsyncThrowingPublisher.Iterator.next(), 0, 0);
}

uint64_t closure #2 in AsyncThrowingPublisher.Iterator.next()()
{
  uint64_t v1 = **(void ***)(v0 + 24);
  *(void *)(v0 + 32) = v1;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in AsyncThrowingPublisher.Iterator.next();
  v2[2] = *(void *)(v0 + 16);
  v2[3] = v1;
  v2[4] = *v1;
  return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.Inner.next(), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #2 in AsyncThrowingPublisher.Iterator.next(), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = partial apply for closure #2 in AsyncThrowingPublisher.Iterator.next();
  return MEMORY[0x1F4188298](closure #2 in AsyncThrowingPublisher.Iterator.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncThrowingPublisher<A>.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = partial apply for closure #2 in AsyncPublisher.Iterator.next();
  v6[2] = a1;
  return MEMORY[0x1F4188298](AsyncThrowingPublisher.Iterator.next(), 0, 0);
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v12;
  void *v12 = v6;
  v12[1] = _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F4187C88](a1, a2, a3, a5, a6);
}

uint64_t _s7Combine22AsyncThrowingPublisherV8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t AsyncThrowingPublisher.makeAsyncIterator()(uint64_t a1)
{
  return AsyncPublisher.makeAsyncIterator()(a1, (uint64_t (*)(char *, uint64_t, void))AsyncThrowingPublisher.Iterator.init(_:));
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncPublisher<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncThrowingPublisher<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncThrowingPublisher<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(a1, a2, (void (*)(void))AsyncThrowingPublisher.makeAsyncIterator());
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncPublisher<A>(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v5(v3, a1);
}

uint64_t destroy for AsyncPublisher.Iterator()
{
  swift_release();

  return swift_release();
}

uint64_t getEnumTagSinglePayload for AsyncPublisher(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AsyncPublisher(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C064508);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncThrowingPublisher()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for AsyncPublisher.Iterator(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AsyncPublisher.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AsyncPublisher.Iterator(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncThrowingPublisher.Iterator.Inner()
{
  return type metadata completion function for AsyncPublisher.Iterator.Inner();
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    JUMPOUT(0x18C13C260);
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *a2;
    MEMORY[0x18C13C270](*a2);
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      MEMORY[0x18C13C260](*(void *)a1);
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *a2;
      MEMORY[0x18C13C270](v7);
      *(void *)a1 = v7;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *(_OWORD *)a2;
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for AsyncThrowingPublisher.Iterator.Inner.State(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      MEMORY[0x18C13C260](*(void *)a1);
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t type metadata accessor for AsyncThrowingPublisher.Iterator.Inner.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized AsyncPublisher.Iterator.Inner.receive(completion:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v5 = &v18[-v4];
  long long v6 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v6);
  memset(v19, 0, sizeof(v19));
  long long v20 = xmmword_18C0BA640;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for AsyncPublisher.Iterator.Inner.State();
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v7 - 8) + 40))(v0 + 32, v19, v7);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 24);
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for UnsafeContinuation();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v6);
  if (MEMORY[0x18C13B800](v8, v9))
  {
    unsigned int v10 = (void (**)(void, unsigned char *, uint64_t))(v3 + 32);
    uint64_t v11 = 4;
    do
    {
      uint64_t v12 = v11 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v14 = *(void *)(v8 + 8 * v11);
        BOOL v15 = __OFADD__(v12, 1);
        uint64_t v16 = v11 - 3;
        if (v15) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v14 = _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        BOOL v15 = __OFADD__(v12, 1);
        uint64_t v16 = v11 - 3;
        if (v15)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
      (*v10)(*(void *)(*(void *)(v14 + 64) + 40), v5, v2);
      swift_continuation_resume();
      ++v11;
    }
    while (v16 != MEMORY[0x18C13B800](v8, v9));
  }
  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(uint64_t a1)
{
  closure #1 in AsyncThrowingPublisher.Iterator.Inner.next()(a1, v1);
}

uint64_t Publisher.prefix<A>(untilOutputFrom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.PrefixUntilOutput.init(upstream:other:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publishers.PrefixUntilOutput.init(upstream:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.PrefixUntilOutput();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.PrefixUntilOutput()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.PrefixUntilOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.PrefixUntilOutput.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.PrefixUntilOutput.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2[2];
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v12 = a2[3];
  uint64_t v13 = a3;
  uint64_t v14 = v12;
  uint64_t v15 = v7;
  uint64_t v16 = v6;
  uint64_t v17 = a4;
  uint64_t v18 = v6;
  uint64_t v8 = type metadata accessor for Publishers.PrefixUntilOutput.Inner();
  swift_allocObject();
  uint64_t v11 = specialized Publishers.PrefixUntilOutput.Inner.init(_:trigger:)(a1);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v11, v5, v8, v7, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.PrefixUntilOutput.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.PrefixUntilOutput.Inner.Termination.combineIdentifier.getter(void *a1@<X8>)
{
}

uint64_t Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(a1);
}

uint64_t Publishers.PrefixUntilOutput.Inner.terminationReceive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 72, (uint64_t)&v10);
  if (v13 == 2
    && (int8x16_t v4 = vorrq_s8(v11, v12),
        !(*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v10)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v10);
    char v13 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v10, v1 + 72);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(1, v8, v9);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v10);
    os_unfair_lock_unlock(v3);
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination(void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.Termination.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination(void *a1@<X8>)
{
}

char *Publishers.PrefixUntilOutput.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 15), -1, -1);
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 24));
  outlined destroy of SubscriptionStatus((uint64_t)(v0 + 72));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 96) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 184)]);
  return v0;
}

uint64_t Publishers.PrefixUntilOutput.Inner.__deallocating_deinit()
{
  Publishers.PrefixUntilOutput.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.request(_:)(Combine::Subscribers::Demand a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)v6);
  if (v7)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    outlined init with take of Subscription(v6, (uint64_t)v8);
    os_unfair_lock_unlock(v3);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(Swift::UInt, uint64_t, uint64_t))(v5 + 24))(a1.rawValue, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
}

Swift::Void __swiftcall Publishers.PrefixUntilOutput.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 24, (uint64_t)&v4);
  if (v7)
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v4, (uint64_t)&v11);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v0 + 72, (uint64_t)&v4);
  if (v7)
  {
    uint64_t v10 = 0;
    long long v9 = 0u;
    long long v8 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v4);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v4, (uint64_t)&v8);
  }
  uint64_t v4 = 1;
  long long v5 = 0u;
  long long v6 = 0u;
  char v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 24);
  swift_endAccess();
  uint64_t v4 = 1;
  long long v5 = 0u;
  long long v6 = 0u;
  char v7 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v4, v0 + 72);
  swift_endAccess();
  *(void *)(v0 + 16) = 0;
  swift_release();
  os_unfair_lock_unlock(v1);
  if (*((void *)&v12 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v11, (uint64_t)&v4);
    long long v2 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(void))(*(void *)(*((void *)&v2 + 1) + 8) + 8))(v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }
  if (*((void *)&v9 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v8, (uint64_t)&v4);
    long long v3 = v6;
    __swift_project_boxed_opaque_existential_1(&v4, v6);
    (*(void (**)(void))(*(void *)(*((void *)&v3 + 1) + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
  }
  outlined destroy of Subscription?((uint64_t)&v8);
  outlined destroy of Subscription?((uint64_t)&v11);
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v20 - v7;
  long long v9 = *(os_unfair_lock_s **)(v1 + 120);
  os_unfair_lock_lock(v9);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v1 + 24, (uint64_t)&v24);
  if (v27 == 2
    && (int8x16_t v10 = vorrq_s8(v25, v26),
        !(*(void *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | v24)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v24);
    int v23 = *(unsigned __int8 *)(v1 + 113);
    if (v23 == 1)
    {
      uint64_t v24 = 1;
      int8x16_t v25 = 0u;
      int8x16_t v26 = 0u;
      char v27 = 2;
    }
    else
    {
      outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v24);
      char v27 = 0;
    }
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v24, v1 + 24);
    swift_endAccess();
    uint64_t v21 = v6;
    os_unfair_lock_unlock(v9);
    uint64_t v14 = v1 + *(void *)(*(void *)v1 + 184);
    v26.i64[0] = v3;
    v26.i64[1] = (uint64_t)&protocol witness table for Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>;
    uint64_t v24 = v1;
    uint64_t v15 = *(void *)(v3 + 128);
    uint64_t v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 40);
    uint64_t v17 = *(void *)(v3 + 96);
    swift_retain();
    uint64_t v22 = v14;
    v16(&v24, v17, v15);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    if (v23)
    {
      uint64_t v19 = a1[3];
      uint64_t v18 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v19);
      (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 8))(v19);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 56))(v8, v17, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v8, v5);
    }
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v24);
    os_unfair_lock_unlock(v9);
    uint64_t v12 = a1[3];
    uint64_t v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 8))(v12);
  }
  return result;
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v4);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)v6);
  if (v6[40])
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v4);
    return 0;
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)v6);
    os_unfair_lock_unlock(v4);
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 128) + 48))(a1, *(void *)(v3 + 96));
  }
}

uint64_t Publishers.PrefixUntilOutput.Inner.receive(completion:)(uint64_t a1)
{
  long long v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (os_unfair_lock_s *)v1[15];
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 3), (uint64_t)&v9);
  if (v12)
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v9, (uint64_t)v16);
  }
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v2 + 9), (uint64_t)&v9);
  if (v12)
  {
    uint64_t v15 = 0;
    long long v14 = 0u;
    long long v13 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)&v9);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v9, (uint64_t)&v13);
  }
  uint64_t v9 = 1;
  long long v10 = 0u;
  long long v11 = 0u;
  char v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 3));
  swift_endAccess();
  uint64_t v9 = 1;
  long long v10 = 0u;
  long long v11 = 0u;
  char v12 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v9, (uint64_t)(v2 + 9));
  swift_endAccess();
  v2[2] = 0;
  swift_release();
  os_unfair_lock_unlock(v5);
  if (*((void *)&v14 + 1))
  {
    outlined init with copy of Subscription((uint64_t)&v13, (uint64_t)&v9);
    long long v6 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8) + 8))(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  outlined init with copy of Subscription?((uint64_t)v16, (uint64_t)&v9);
  uint64_t v7 = v11;
  outlined destroy of Subscription?((uint64_t)&v9);
  if (v7) {
    (*(void (**)(uint64_t, void))(*(void *)(v4 + 128) + 56))(a1, *(void *)(v4 + 96));
  }
  outlined destroy of Subscription?((uint64_t)v16);
  return outlined destroy of Subscription?((uint64_t)&v13);
}

void protocol witness for Subscription.request(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(Combine::Subscribers::Demand a1)
{
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(void *a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(_:)(a1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.PrefixUntilOutput.Inner.receive(completion:)(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.PrefixUntilOutput<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.PrefixUntilOutput.receive<A>(subscriber:)(a1, a4, a2, a3);
}

void specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(completion:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 120);
  os_unfair_lock_lock(v1);
  uint64_t v2 = 1;
  long long v3 = 0u;
  long long v4 = 0u;
  char v5 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v2, v0 + 72);
  swift_endAccess();
  *(void *)(v0 + 16) = 0;
  swift_release();
  os_unfair_lock_unlock(v1);
}

void specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(completion:)()
{
}

uint64_t *specialized Publishers.PrefixUntilOutput.Inner.init(_:trigger:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((unsigned char *)v1 + 64) = 2;
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 11) = 0u;
  v1[13] = 0;
  *((_WORD *)v1 + 56) = 2;
  char v5 = (_DWORD *)swift_slowAlloc();
  *char v5 = 0;
  v1[15] = (uint64_t)v5;
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v3 + 96) - 8) + 16))((uint64_t)v1 + *(void *)(*v1 + 184), a1, *(void *)(v3 + 96));
  v1[2] = (uint64_t)v1;
  swift_retain_n();
  swift_release();
  long long v11 = v1;
  uint64_t v6 = *(void *)(v3 + 136);
  long long v10 = *(_OWORD *)(v4 + 104);
  uint64_t v7 = type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v11, v10, v7, v6, WitnessTable);
  swift_release();
  return v1;
}

uint64_t getEnumTagSinglePayload for Publishers.PrefixUntilOutput(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.PrefixUntilOutput(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C066564);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.PrefixUntilOutput.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for Publishers.PrefixUntilOutput.Inner.Termination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

uint64_t type metadata accessor for Publishers.PrefixUntilOutput.Inner.Termination()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.PrefixUntilOutput<A, B>.Inner<A1, B1>.Termination()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = (char *)&v12 - v6;
  uint64_t v8 = (os_unfair_lock_s *)v0[15];
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 9), (uint64_t)&v17);
  int v9 = v20;
  outlined destroy of SubscriptionStatus((uint64_t)&v17);
  if (v9)
  {
    os_unfair_lock_unlock(v8);
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus((uint64_t)(v1 + 3), (uint64_t)&v17);
    uint64_t v13 = v2;
    if (v20)
    {
      uint64_t v16 = 0;
      long long v14 = 0u;
      long long v15 = 0u;
      outlined destroy of SubscriptionStatus((uint64_t)&v17);
    }
    else
    {
      outlined init with take of Subscription((long long *)&v17, (uint64_t)&v14);
    }
    uint64_t v17 = 1;
    long long v18 = 0u;
    long long v19 = 0u;
    unsigned __int8 v20 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v17, (uint64_t)(v1 + 3));
    swift_endAccess();
    uint64_t v17 = 1;
    long long v18 = 0u;
    long long v19 = 0u;
    unsigned __int8 v20 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v17, (uint64_t)(v1 + 9));
    swift_endAccess();
    v1[2] = 0;
    swift_release();
    *((unsigned char *)v1 + 113) = 1;
    os_unfair_lock_unlock(v8);
    if (*((void *)&v15 + 1))
    {
      outlined init with copy of Subscription((uint64_t)&v14, (uint64_t)&v17);
      long long v10 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, v19);
      (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8) + 8))(v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, void))(*(void *)(v13 + 128) + 56))(v7, *(void *)(v13 + 96));
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined destroy of Subscription?((uint64_t)&v14);
  }
  return 0;
}

uint64_t specialized Publishers.PrefixUntilOutput.Inner.Termination.receive(_:)()
{
  return specialized Publishers.PrefixUntilOutput.Inner.terminationReceive(_:)();
}

void SubjectSubscriber.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
  uint64_t v14 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18C0BBBA0;
  *(void *)(v7 + 32) = 0xD000000000000011;
  *(void *)(v7 + 40) = 0x800000018C0C4870;
  uint64_t v8 = MEMORY[0x18C13C570](v0 + 24);
  uint64_t v9 = type metadata accessor for Optional();
  *(void *)(v7 + 48) = v8;
  *(void *)(v7 + 72) = v9;
  *(void *)(v7 + 80) = 0xD000000000000014;
  *(void *)(v7 + 88) = 0x800000018C0C4210;
  swift_beginAccess();
  *(void *)(v7 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription?);
  uint64_t v10 = swift_allocObject();
  *(void *)(v7 + 96) = v10;
  outlined init with copy of Subscription?(v0 + 32, v10 + 16);
  *(void *)(v7 + 128) = 0x7463656A627573;
  *(void *)(v7 + 136) = 0xE700000000000000;
  uint64_t v11 = MEMORY[0x18C13C570](v0 + 24);
  *(void *)(v7 + 168) = v9;
  *(void *)(v7 + 144) = v11;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

void SubjectSubscriber.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x7463656A627553;
  a1[1] = 0xE700000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SubjectSubscriber<A>()
{
  return 0x7463656A627553;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance SubjectSubscriber<A>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance SubjectSubscriber<A>(void *a1@<X8>)
{
}

uint64_t specialized SubjectSubscriber.__allocating_init(_:)()
{
  return specialized SubjectSubscriber.init(_:)();
}

uint64_t dispatch thunk of Subject.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Subject.send(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Subject.send(subscription:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_18C066DB4()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t Publisher.tryReduce<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Publishers.TryReduce.init(upstream:initial:nextPartialResult:));
}

uint64_t Publishers.TryReduce.init(upstream:initial:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Reduce.init(upstream:initial:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryReduce, a8);
}

uint64_t type metadata accessor for Publishers.TryReduce()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Reduce.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Reduce.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.Reduce.Inner);
}

uint64_t type metadata accessor for Publishers.Reduce.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Reduce.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  uint64_t v21 = a1;
  unint64_t v22 = v4;
  uint64_t v5 = v3[56];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void (***)(void, void, void))(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v20 - v12;
  MEMORY[0x1F4188790](v11);
  long long v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))((char *)v2 + v3[19]);
  uint64_t v17 = (char *)v2 + v3[17];
  swift_beginAccess();
  ((void (**)(char *, char *, uint64_t))v7)[2](v13, v17, v6);
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    v16(v13, v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v5);
    ((void (**)(char *, char *, uint64_t))v7)[4](v10, v15, v6);
    swift_beginAccess();
    ((void (**)(char *, char *, uint64_t))v7)[5](v17, v10, v6);
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for PartialCompletion();
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Reduce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Reduce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Reduce.initial.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t Publishers.Reduce.nextPartialResult.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryReduce.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Reduce.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryReduce.Inner);
}

uint64_t Publishers.Reduce.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *))
{
  uint64_t v7 = v5;
  uint64_t v26 = a1;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v16 = *(void *)(a2 + 32);
  v28[0] = *(void *)(a2 + 16);
  uint64_t v15 = v28[0];
  v28[1] = v11;
  v28[2] = a3;
  void v28[3] = v16;
  v28[4] = a4;
  uint64_t v17 = a5(0, v28);
  uint64_t v18 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, v7 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v11);
  long long v19 = (uint64_t *)(v7 + *(int *)(a2 + 48));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  swift_allocObject();
  swift_retain();
  unint64_t v22 = specialized Publishers.Reduce.Inner.init(downstream:initial:reduce:)(v26, (uint64_t)v14, v20, v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v27);
  v28[0] = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v28, v15, v17, v16, WitnessTable);
  return swift_release();
}

uint64_t Publishers.TryReduce.Inner.description.getter()
{
  return 0x6375646552797254;
}

uint64_t Publishers.TryReduce.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 448);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void (***)(void, void, void))(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  long long v19 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v19 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))((char *)v1 + *(void *)(v3 + 152));
  uint64_t v15 = (uint64_t)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  ((void (**)(char *, uint64_t, uint64_t))v6)[2](v11, v15, v5);
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    v14(v11, a1);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v4);
    uint64_t v18 = v19;
    ((void (**)(char *, char *, uint64_t))v6)[4](v19, v13, v5);
    swift_beginAccess();
    ((void (**)(uint64_t, char *, uint64_t))v6)[5](v15, v18, v5);
    swift_endAccess();
    return 0;
  }
  return result;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryReduce.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryReduce.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryReduce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryReduce.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryReduce.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.Reduce.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v17 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v17 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)v17 - v13, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  v17[0] = a3;
  v17[1] = a4;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v14, (uint64_t)v12, (uint64_t)v17);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Reduce(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v4 = *a2;
    char v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    long long v19 = (void *)((v11 + v18) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v19[1];
    uint64_t v21 = (void *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v19;
    v21[1] = v20;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(_OWORD *)((*(void *)(v9 + 32) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.Reduce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(_OWORD *)((*(void *)(v9 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Reduce(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C067F30);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v10 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v12 + v23) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void storeEnumTagSinglePayload for Publishers.Reduce(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
                v25(v24);
              }
              else
              {
                uint64_t v26 = (void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
                if ((a2 & 0x80000000) != 0)
                {
                  uint64_t v27 = a2 ^ 0x80000000;
                  v26[1] = 0;
                }
                else
                {
                  uint64_t v27 = a2 - 1;
                }
                *uint64_t v26 = v27;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v21 = v20;
  }
  else {
    int v21 = 1;
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v22 = ~v12 + a2;
    bzero(a1, ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x18C0681DCLL);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.Reduce.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.CompactMap, a7);
}

uint64_t Publisher.tryCompactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publisher.compactMap<A>(_:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryCompactMap, a6);
}

uint64_t Publishers.TryCompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.CompactMap.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryCompactMap, a7);
}

uint64_t Publishers.CompactMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8, a1, a4);
  uint64_t result = a7(0, a4, a5, a6);
  unsigned int v16 = (void *)(a8 + *(int *)(result + 44));
  *unsigned int v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryCompactMap()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.CompactMap.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.CompactMap.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x4D746361706D6F43;
  a1[1] = 0xEA00000000007061;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.CompactMap<A, B>.Inner<A1>()
{
  return 0x4D746361706D6F43;
}

uint64_t Publishers.CompactMap.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryCompactMap.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  v17[0] = *(void *)(a2 + 16);
  uint64_t v9 = v17[0];
  v17[1] = v8;
  void v17[2] = a3;
  v17[3] = v8;
  v17[4] = v10;
  v17[5] = a4;
  uint64_t v11 = type metadata accessor for Publishers.TryCompactMap.Inner();
  uint64_t v12 = (uint64_t *)(v5 + *(int *)(a2 + 44));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_allocObject();
  swift_retain();
  v17[0] = specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)(a1, v13, v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v17, v9, v11, v10, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.TryCompactMap.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.TryCompactMap.Inner.description.getter()
{
  return 0x61706D6F43797254;
}

uint64_t Publishers.TryCompactMap.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t))(v2 + 16))(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryCompactMap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryCompactMap.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v9 = a3[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (uint64_t *)(v14 + *(int *)(v13 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  int v18 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v9;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v16;
  *((void *)v18 + 7) = v17;
  *((void *)v18 + 8) = v24;
  *((void *)v18 + 9) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, v9);
  int v21 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(a5
                                                                 + *(int *)(type metadata accessor for Publishers.TryCompactMap()
                                                                          + 44));
  *int v21 = partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:);
  v21[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v24 = a8;
  uint64_t v25 = a7;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t result = a2(a1);
  if (!v8)
  {
    MEMORY[0x1F4188790](result);
    *(&v22 - 6) = a5;
    *(&v22 - 5) = a6;
    uint64_t v18 = v25;
    *(&v22 - 4) = v25;
    *(&v22 - 3) = v19;
    uint64_t v20 = v23;
    *(&v22 - 2) = v22;
    *(&v22 - 1) = v20;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error), (uint64_t)(&v22 - 8), v21, v18, (uint64_t)&v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return result;
}

uint64_t *specialized Publishers.TryCompactMap.Inner.init(downstream:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v9 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)v9 - v5);
  v9[0] = a2;
  v9[1] = a3;
  return FilterProducer.init(downstream:filter:)((uint64_t)v6, (uint64_t)v9);
}

uint64_t partial apply for closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Publishers.TryCompactMap.compactMap<A>(_:)(a1, *(uint64_t (**)(uint64_t))(v2 + 48), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t type metadata completion function for Publishers.TryCompactMap.Inner()
{
  return swift_initClassMetadata2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.CompactMap.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.CompactMap.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed B) -> (@out A1?, @error @owned Error)(uint64_t a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 48))();
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t Publisher.merge<A, B, C, D>(with:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, long long a10, long long a11, uint64_t a12)
{
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v53 = a8;
  long long v51 = a11;
  long long v52 = a10;
  uint64_t v48 = a9;
  uint64_t v13 = *(void *)(a9 - 8);
  uint64_t v47 = a12;
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v14);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v19);
  uint64_t v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v24);
  uint64_t v31 = (char *)&v41 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v32;
  MEMORY[0x1F4188790](v29);
  char v34 = (char *)&v41 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v35 + 16))(v34, v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v45, a5);
  uint64_t v37 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v46, v43);
  uint64_t v38 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v49, v44);
  uint64_t v39 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v50, v48);
  return Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v34, (uint64_t)v31, (uint64_t)v26, (uint64_t)v21, (uint64_t)v16, v42, a5, v37, v53, v38, v39);
}

uint64_t Publishers.Merge5.init(_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9, a1, a6);
  uint64_t v17 = (int *)type metadata accessor for Publishers.Merge5();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v17[25], a2, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v17[26], a3, a8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + v17[27], a4, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(a9 + v17[28], a5, a11);
}

uint64_t type metadata accessor for Publishers.Merge5()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Merge.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.Merge.merge<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v27 = a5;
  uint64_t v28 = a4;
  uint64_t v26 = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 16);
  MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v6, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + *(int *)(a2 + 52), v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v26, a3);
  return Publishers.Merge3.init(_:_:_:)((uint64_t)v22, (uint64_t)v18, (uint64_t)v12, v20, v14, a3, v27);
}

uint64_t Publishers.Merge.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a7;
  uint64_t v40 = a6;
  uint64_t v36 = a5;
  uint64_t v37 = a2;
  uint64_t v33 = a4;
  uint64_t v35 = a1;
  uint64_t v38 = a8;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  char v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 + 24);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v15);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 + 16);
  MEMORY[0x1F4188790](v21);
  uint64_t v27 = (char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v8, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v8 + *(int *)(a3 + 52), v19);
  uint64_t v29 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v35, v33);
  uint64_t v30 = (uint64_t)v34;
  uint64_t v31 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v34, v37, v36);
  return Publishers.Merge4.init(_:_:_:_:)((uint64_t)v27, (uint64_t)v23, (uint64_t)v17, v30, v25, v19, v29, v31, v38);
}

uint64_t Publishers.Merge.merge<A, B, C>(with:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v53 = a9;
  uint64_t v54 = a8;
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v44 = a6;
  uint64_t v45 = a1;
  uint64_t v42 = a5;
  uint64_t v52 = a3;
  uint64_t v47 = *(void *)(a7 - 8);
  uint64_t v50 = a11;
  uint64_t v51 = a10;
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v46 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 + 24);
  uint64_t v41 = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v21);
  uint64_t v29 = (char *)&v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v30 + 16);
  MEMORY[0x1F4188790](v27);
  uint64_t v33 = (char *)&v41 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v11, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v11 + *(int *)(a4 + 52), v25);
  uint64_t v35 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v45, v42);
  uint64_t v37 = (uint64_t)v43;
  uint64_t v36 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v43, v48, v44);
  uint64_t v38 = (uint64_t)v46;
  uint64_t v39 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v52, v49);
  return Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v33, (uint64_t)v29, (uint64_t)v23, v37, v38, v31, v41, v35, v53, v36, v39);
}

uint64_t Publishers.Merge.merge<A, B, C, D>(with:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v57 = a8;
  uint64_t v58 = a1;
  uint64_t v55 = a7;
  uint64_t v53 = a6;
  uint64_t v66 = a4;
  uint64_t v68 = a9;
  long long v67 = a11;
  uint64_t v62 = a10;
  uint64_t v63 = a3;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v60 = a2;
  uint64_t v61 = v15;
  uint64_t v64 = a13;
  uint64_t v65 = a12;
  uint64_t v16 = MEMORY[0x1F4188790](a1);
  char v59 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  os_unfair_lock_t v56 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v19);
  uint64_t v54 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v23);
  uint64_t v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v50 = v29;
  uint64_t v51 = v31;
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v27);
  uint64_t v35 = (char *)&v49 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(v36 + 16);
  uint64_t v49 = v36;
  MEMORY[0x1F4188790](v33);
  uint64_t v39 = (char *)&v49 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v13, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v13 + *(int *)(a5 + 52), v31);
  uint64_t v41 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v58, v53);
  uint64_t v42 = (uint64_t)v54;
  uint64_t v43 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v54, v60, v55);
  uint64_t v44 = (uint64_t)v56;
  uint64_t v45 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v56, v63, v57);
  uint64_t v46 = v62;
  uint64_t v47 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v59, v66, v62);
  return Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v39, (uint64_t)v35, (uint64_t)v50, v42, v44, v47, v37, v51, v68, v41, v43, v45, v46);
}

uint64_t Publishers.Merge.merge<A, B, C, D, E>(with:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, uint64_t a15)
{
  uint64_t v61 = a8;
  uint64_t v58 = a7;
  uint64_t v68 = a2;
  uint64_t v69 = a3;
  uint64_t v66 = a1;
  uint64_t v77 = a9;
  long long v75 = a14;
  long long v76 = a13;
  uint64_t v73 = a15;
  uint64_t v74 = a5;
  uint64_t v71 = a12;
  uint64_t v72 = a4;
  uint64_t v70 = *(void *)(a12 - 8);
  uint64_t v62 = a10;
  uint64_t v65 = a11;
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  long long v67 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v63 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v78 = (uint64_t)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v60 = (char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v28);
  uint64_t v34 = (char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_t v56 = v34;
  uint64_t v36 = *(void *)(v35 + 24);
  uint64_t v57 = v36;
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v32);
  uint64_t v40 = (char *)&v55 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *(void *)(v41 + 16);
  uint64_t v55 = v41;
  uint64_t v59 = v42;
  MEMORY[0x1F4188790](v38);
  uint64_t v44 = (char *)&v55 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v45 + 16))(v44, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v15 + *(int *)(a6 + 52), v36);
  uint64_t v46 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v66, v58);
  uint64_t v47 = (uint64_t)v60;
  uint64_t v48 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v60, v68, v61);
  uint64_t v49 = v62;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v78, v69, v62);
  uint64_t v50 = (uint64_t)v63;
  uint64_t v51 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v72, v65);
  uint64_t v52 = v71;
  uint64_t v53 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v74, v71);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v44, (uint64_t)v40, (uint64_t)v56, v47, v78, v50, v53, v59, v77, v57, v46, v48, v49, v51, v52);
}

uint64_t Publishers.Merge.merge<A, B, C, D, E, F>(with:_:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, uint64_t a17, uint64_t a18)
{
  uint64_t v66 = a8;
  uint64_t v84 = a5;
  uint64_t v79 = a2;
  uint64_t v80 = a4;
  uint64_t v82 = a3;
  uint64_t v77 = a1;
  uint64_t v91 = a9;
  long long v89 = a16;
  long long v90 = a15;
  uint64_t v87 = a17;
  uint64_t v88 = a6;
  uint64_t v86 = a18;
  uint64_t v70 = a10;
  uint64_t v71 = a11;
  uint64_t v85 = a14;
  uint64_t v83 = *(void *)(a14 - 8);
  uint64_t v74 = a12;
  uint64_t v78 = a13;
  uint64_t v20 = MEMORY[0x1F4188790](a1);
  uint64_t v81 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  long long v75 = (char *)v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v72 = (char *)v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v92 = (uint64_t)v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v29);
  uint64_t v35 = (char *)v62 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v35;
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v33);
  uint64_t v40 = (char *)v62 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v40;
  uint64_t v42 = *(void *)(v41 + 24);
  uint64_t v65 = v42;
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v38);
  uint64_t v46 = (char *)v62 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v67 = v46;
  uint64_t v48 = *(void *)(v47 + 16);
  v62[1] = v47;
  uint64_t v68 = v48;
  MEMORY[0x1F4188790](v44);
  uint64_t v50 = (char *)v62 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v51 + 16))(v50, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v46, v18 + *(int *)(a7 + 52), v42);
  uint64_t v52 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v77, v66);
  uint64_t v53 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v79, v70);
  uint64_t v54 = v71;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v92, v82, v71);
  uint64_t v55 = (uint64_t)v72;
  uint64_t v56 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v80, v74);
  uint64_t v57 = (uint64_t)v75;
  uint64_t v58 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v84, v78);
  uint64_t v59 = (uint64_t)v81;
  uint64_t v60 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v81, v88, v85);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v50, (uint64_t)v67, (uint64_t)v64, (uint64_t)v63, v92, v55, v57, v59, v91, v68, v65, v52, v53, v54, v56, v58, v60);
}

uint64_t Publishers.Merge3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.Merge3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t Publishers.Merge3.merge<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v36 = a5;
  uint64_t v37 = a4;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v32 = *(void *)(v11 + 32);
  uint64_t v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v32 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v13);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 16);
  MEMORY[0x1F4188790](v19);
  uint64_t v25 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v6, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + *(int *)(a2 + 68), v17);
  uint64_t v27 = v6 + *(int *)(a2 + 72);
  uint64_t v28 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v27, v32);
  uint64_t v30 = (uint64_t)v33;
  uint64_t v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v33, v35, v34);
  return Publishers.Merge4.init(_:_:_:_:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v15, v30, v23, v17, v28, v29, v36);
}

uint64_t Publishers.Merge3.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v48 = a7;
  uint64_t v49 = a6;
  uint64_t v45 = a5;
  uint64_t v46 = a2;
  uint64_t v41 = a4;
  uint64_t v47 = a8;
  uint64_t v43 = *(void *)(a5 - 8);
  uint64_t v44 = a1;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v39 = *(void *)(v16 + 32);
  uint64_t v40 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v39 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v14);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v21 + 24);
  uint64_t v38 = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v18);
  uint64_t v26 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 + 16);
  MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v8, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v8 + *(int *)(a3 + 68), v22);
  uint64_t v32 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v8 + *(int *)(a3 + 72), v39);
  uint64_t v34 = (uint64_t)v40;
  uint64_t v33 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v40, v44, v41);
  uint64_t v35 = (uint64_t)v42;
  uint64_t v36 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v46, v45);
  return Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v30, (uint64_t)v26, (uint64_t)v20, v34, v35, v28, v38, v32, v47, v33, v36);
}

uint64_t Publishers.Merge3.merge<A, B, C>(with:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v61 = a9;
  uint64_t v62 = a8;
  uint64_t v56 = a2;
  uint64_t v57 = a7;
  uint64_t v52 = a6;
  uint64_t v53 = a1;
  uint64_t v49 = a5;
  uint64_t v60 = a3;
  uint64_t v55 = *(void *)(a7 - 8);
  uint64_t v58 = a11;
  uint64_t v59 = a10;
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v54 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v50 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v48 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 32);
  uint64_t v45 = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v20);
  uint64_t v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v28 + 24);
  uint64_t v46 = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v25);
  uint64_t v33 = (char *)&v45 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void *)(v34 + 16);
  MEMORY[0x1F4188790](v31);
  uint64_t v36 = (char *)&v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v37 + 16))(v36, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v11 + *(int *)(a4 + 68), v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v11 + *(int *)(a4 + 72), v23);
  uint64_t v38 = (uint64_t)v48;
  uint64_t v39 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v48, v53, v49);
  uint64_t v40 = (uint64_t)v50;
  uint64_t v41 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v56, v52);
  uint64_t v42 = (uint64_t)v54;
  uint64_t v43 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v60, v57);
  return Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v36, (uint64_t)v33, (uint64_t)v27, v38, v40, v42, v47, v46, v61, v45, v39, v41, v43);
}

uint64_t Publishers.Merge3.merge<A, B, C, D>(with:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v62 = a8;
  uint64_t v63 = a1;
  uint64_t v59 = a7;
  uint64_t v56 = a6;
  uint64_t v71 = a4;
  uint64_t v73 = a9;
  long long v72 = a11;
  uint64_t v67 = a10;
  uint64_t v68 = a3;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v65 = a2;
  uint64_t v66 = v15;
  uint64_t v69 = a13;
  uint64_t v70 = a12;
  uint64_t v16 = MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v60 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v57 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22);
  uint64_t v74 = (uint64_t)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v28 + 32);
  uint64_t v52 = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v26);
  uint64_t v33 = (char *)&v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v33;
  uint64_t v35 = *(void *)(v34 + 24);
  uint64_t v54 = v35;
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v31);
  uint64_t v39 = (char *)&v52 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = *(void *)(v40 + 16);
  MEMORY[0x1F4188790](v37);
  uint64_t v42 = (char *)&v52 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v43 + 16))(v42, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v39, v13 + *(int *)(a5 + 68), v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, v13 + *(int *)(a5 + 72), v29);
  uint64_t v44 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v74, v63, v56);
  uint64_t v45 = (uint64_t)v57;
  uint64_t v46 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v65, v59);
  uint64_t v47 = (uint64_t)v60;
  uint64_t v48 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v68, v62);
  uint64_t v49 = v67;
  uint64_t v50 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v64, v71, v67);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v42, (uint64_t)v39, (uint64_t)v53, v74, v45, v47, v50, v55, v73, v54, v52, v44, v46, v48, v49);
}

uint64_t Publishers.Merge3.merge<A, B, C, D, E>(with:_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, uint64_t a15)
{
  uint64_t v66 = a8;
  uint64_t v63 = a7;
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v72 = a1;
  uint64_t v83 = a9;
  long long v81 = a14;
  long long v82 = a13;
  uint64_t v79 = a15;
  uint64_t v80 = a5;
  uint64_t v77 = a12;
  uint64_t v78 = a4;
  uint64_t v76 = *(void *)(a12 - 8);
  uint64_t v68 = a10;
  uint64_t v71 = a11;
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v73 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v69 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v85 = (uint64_t)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v64 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v26);
  uint64_t v84 = (uint64_t)&v57 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v32 + 32);
  uint64_t v58 = v33;
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v30);
  uint64_t v37 = (char *)&v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v37;
  uint64_t v39 = *(void *)(v38 + 24);
  uint64_t v60 = v39;
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v35);
  uint64_t v43 = (char *)&v57 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v43;
  uint64_t v62 = *(void *)(v44 + 16);
  MEMORY[0x1F4188790](v41);
  uint64_t v46 = (char *)&v57 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v47 + 16))(v46, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v43, v15 + *(int *)(a6 + 68), v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v15 + *(int *)(a6 + 72), v33);
  uint64_t v48 = v63;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v84, v72, v63);
  uint64_t v49 = (uint64_t)v64;
  uint64_t v50 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v74, v66);
  uint64_t v51 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v85, v75, v68);
  uint64_t v52 = (uint64_t)v69;
  uint64_t v53 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v78, v71);
  uint64_t v54 = v77;
  uint64_t v55 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v73, v80, v77);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v46, (uint64_t)v61, (uint64_t)v59, v84, v49, v85, v52, v55, v83, v62, v60, v58, v48, v50, v51, v53, v54);
}

uint64_t Publishers.Merge4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.Merge4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.Merge4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

uint64_t Publishers.Merge4.merge<A>(with:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v43 = a1;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v41 = *(void *)(a3 - 8);
  uint64_t v42 = a3;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v39 = *(void *)(v10 + 40);
  uint64_t v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v39 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v8);
  uint64_t v37 = *(void *)(v14 + 32);
  uint64_t v38 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v37 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 24);
  uint64_t v36 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v16);
  uint64_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v25 + 16);
  MEMORY[0x1F4188790](v22);
  uint64_t v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, v6, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[21], v20);
  uint64_t v30 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + a2[22], v37);
  uint64_t v31 = (uint64_t)v38;
  uint64_t v32 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v38, v6 + a2[23], v39);
  uint64_t v33 = (uint64_t)v40;
  uint64_t v34 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
  return Publishers.Merge5.init(_:_:_:_:_:)((uint64_t)v28, (uint64_t)v24, (uint64_t)v18, v31, v33, v26, v36, v30, v45, v32, v34);
}

uint64_t Publishers.Merge4.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v52 = a7;
  uint64_t v53 = a6;
  uint64_t v50 = a5;
  uint64_t v51 = a2;
  uint64_t v46 = a4;
  uint64_t v54 = a8;
  uint64_t v48 = *(void *)(a5 - 8);
  uint64_t v49 = a1;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v47 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v43 = *(void *)(v15 + 40);
  uint64_t v44 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v43 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v55 = *(void *)(v19 + 32);
  uint64_t v56 = (uint64_t)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v55 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 + 24);
  uint64_t v42 = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v21);
  uint64_t v29 = (char *)&v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v30 + 16);
  MEMORY[0x1F4188790](v27);
  uint64_t v33 = (char *)&v41 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v8, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v8 + a3[21], v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v8 + a3[22], v55);
  uint64_t v35 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v56, v8 + a3[23], v43);
  uint64_t v36 = (uint64_t)v44;
  uint64_t v37 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v49, v46);
  uint64_t v38 = (uint64_t)v47;
  uint64_t v39 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v51, v50);
  return Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v33, (uint64_t)v29, (uint64_t)v23, v56, v36, v38, v31, v42, v54, v55, v35, v37, v39);
}

uint64_t Publishers.Merge4.merge<A, B, C>(with:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v70 = a3;
  uint64_t v71 = a8;
  uint64_t v66 = a2;
  uint64_t v67 = a7;
  uint64_t v62 = a6;
  uint64_t v59 = a5;
  uint64_t v72 = a9;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v64 = a1;
  uint64_t v65 = v13;
  uint64_t v68 = a11;
  uint64_t v69 = a10;
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v63 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v60 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v57 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = *(void *)(v22 + 40);
  uint64_t v23 = *(void *)(v73 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v26;
  uint64_t v55 = *(void *)(v27 + 32);
  uint64_t v28 = *(void *)(v55 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v24);
  uint64_t v31 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v32 + 24);
  uint64_t v53 = v31;
  uint64_t v54 = v33;
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v29);
  uint64_t v37 = (char *)&v51 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(v38 + 16);
  MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v51 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v41 + 16))(v40, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v37, v11 + a4[21], v33);
  uint64_t v42 = v31;
  uint64_t v43 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v42, v11 + a4[22], v55);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v11 + a4[23], v73);
  uint64_t v44 = (uint64_t)v57;
  uint64_t v45 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v64, v59);
  uint64_t v46 = (uint64_t)v60;
  uint64_t v47 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v66, v62);
  uint64_t v48 = (uint64_t)v63;
  uint64_t v49 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v70, v67);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v40, (uint64_t)v37, (uint64_t)v53, (uint64_t)v52, v44, v46, v48, v56, v72, v54, v43, v73, v45, v47, v49);
}

uint64_t Publishers.Merge4.merge<A, B, C, D>(with:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v65 = a8;
  uint64_t v62 = a7;
  uint64_t v59 = a6;
  uint64_t v74 = a4;
  uint64_t v66 = a1;
  uint64_t v76 = a9;
  long long v75 = a11;
  uint64_t v70 = a10;
  uint64_t v71 = a3;
  uint64_t v15 = *(void *)(a10 - 8);
  uint64_t v68 = a2;
  uint64_t v69 = v15;
  uint64_t v72 = a13;
  uint64_t v73 = a12;
  uint64_t v16 = MEMORY[0x1F4188790](a1);
  uint64_t v67 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v63 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v60 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v79 = *(void *)(v27 + 40);
  uint64_t v80 = (uint64_t)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v79 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v25);
  uint64_t v77 = *(void *)(v31 + 32);
  uint64_t v78 = (uint64_t)&v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v77 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v29);
  uint64_t v35 = (char *)&v55 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v35;
  uint64_t v37 = *(void *)(v36 + 24);
  uint64_t v56 = v37;
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v33);
  uint64_t v41 = (char *)&v55 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v41;
  uint64_t v43 = *(void *)(v42 + 16);
  MEMORY[0x1F4188790](v39);
  uint64_t v45 = (char *)&v55 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v13, v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v13 + a5[21], v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v13 + a5[22], v77);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v78, v13 + a5[23], v79);
  uint64_t v47 = v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v80, v66, v59);
  uint64_t v48 = v62;
  uint64_t v49 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v68, v62);
  uint64_t v50 = (uint64_t)v63;
  uint64_t v51 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v71, v65);
  uint64_t v52 = v70;
  uint64_t v53 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v67, v74, v70);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v45, (uint64_t)v57, (uint64_t)v55, v78, v80, v49, v50, v53, v76, v43, v56, v77, v79, v47, v48, v51, v52);
}

uint64_t Publishers.Merge5.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 100));
}

uint64_t Publishers.Merge5.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 104));
}

uint64_t Publishers.Merge5.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 108));
}

uint64_t Publishers.Merge5.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 112));
}

uint64_t Publishers.Merge5.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v10 = type metadata accessor for Publishers._Merged();
  swift_allocObject();
  uint64_t v11 = specialized Publishers._Merged.init(downstream:count:)(a1, 5);
  uint64_t v25 = v10;
  uint64_t v26 = &protocol witness table for Publishers._Merged<A, B, C>;
  uint64_t v22 = (uint64_t)v11;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  v12(&v22, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, (uint64_t)v11, &v19);
  v18[0] = v19;
  v18[1] = v20;
  v18[2] = v21;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v9;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v13 = type metadata accessor for Publishers._Merged.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v13, v17, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[3], v13, a2[8], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[4], v13, a2[9], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[5], v13, a2[10], WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(4, (uint64_t)v11, &v22);
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  uint64_t v21 = v24;
  Publisher.subscribe<A>(_:)((uint64_t)&v19, a2[6], v13, a2[11], WitnessTable);
  swift_release();
  return swift_release();
}

uint64_t Publishers.Merge5.merge<A>(with:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v49 = a1;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v47 = *(void *)(a3 - 8);
  uint64_t v48 = a3;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v45 = *(void *)(v10 + 48);
  uint64_t v46 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(v45 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v42 = *(void *)(v13 + 40);
  uint64_t v43 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v42 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v52 = *(void *)(v17 + 32);
  uint64_t v53 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v52 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v41 = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v19);
  uint64_t v27 = (char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v28 + 16);
  MEMORY[0x1F4188790](v25);
  uint64_t v31 = (char *)&v40 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v6, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v6 + a2[25], v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v6 + a2[26], v52);
  uint64_t v33 = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v53, v6 + a2[27], v42);
  uint64_t v34 = v6 + a2[28];
  uint64_t v35 = (uint64_t)v43;
  uint64_t v36 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v34, v45);
  uint64_t v37 = (uint64_t)v46;
  uint64_t v38 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v49, v48);
  return Publishers.Merge6.init(_:_:_:_:_:_:)((uint64_t)v31, (uint64_t)v27, (uint64_t)v21, v53, v35, v37, v29, v41, v51, v52, v33, v36, v38);
}

uint64_t Publishers.Merge5.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v58 = a7;
  uint64_t v59 = a6;
  uint64_t v56 = a5;
  uint64_t v57 = a2;
  uint64_t v52 = a4;
  uint64_t v60 = a8;
  uint64_t v54 = *(void *)(a5 - 8);
  uint64_t v55 = a1;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v53 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v49 = *(void *)(v15 + 48);
  uint64_t v50 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v62 = *(void *)(v18 + 40);
  uint64_t v63 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v62 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v47 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = *(void *)(v22 + 32);
  uint64_t v23 = *(void *)(v61 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 + 24);
  uint64_t v45 = v26;
  uint64_t v46 = v28;
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v24);
  uint64_t v32 = (char *)&v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v33 + 16);
  MEMORY[0x1F4188790](v30);
  uint64_t v36 = (char *)&v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v8, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v8 + a3[25], v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v8 + a3[26], v61);
  uint64_t v38 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v47, v8 + a3[27], v62);
  uint64_t v39 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v63, v8 + a3[28], v49);
  uint64_t v40 = (uint64_t)v50;
  uint64_t v41 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v55, v52);
  uint64_t v42 = (uint64_t)v53;
  uint64_t v43 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v57, v56);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v36, (uint64_t)v32, (uint64_t)v45, v38, v63, v40, v42, v34, v60, v46, v61, v62, v39, v41, v43);
}

uint64_t Publishers.Merge5.merge<A, B, C>(with:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v74 = a3;
  uint64_t v75 = a8;
  uint64_t v70 = a2;
  uint64_t v71 = a7;
  uint64_t v66 = a6;
  uint64_t v63 = a5;
  uint64_t v76 = a9;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v68 = a1;
  uint64_t v69 = v13;
  uint64_t v72 = a11;
  uint64_t v73 = a10;
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v67 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v64 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v61 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = *(void *)(v22 + 48);
  uint64_t v60 = *(void *)(v79 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v78 = (uint64_t)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(v25 + 40);
  uint64_t v26 = *(void *)(v59 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v23);
  uint64_t v77 = (uint64_t)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v29 + 32);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v27);
  uint64_t v34 = (char *)&v55 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v34;
  uint64_t v36 = *(void *)(v35 + 24);
  uint64_t v56 = v36;
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v32);
  uint64_t v40 = (char *)&v55 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v40;
  uint64_t v58 = *(void *)(v41 + 16);
  MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v55 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v44 + 16))(v43, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v40, v11 + a4[25], v36);
  uint64_t v45 = v34;
  uint64_t v46 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v45, v11 + a4[26], v30);
  uint64_t v47 = v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v77, v11 + a4[27], v59);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v78, v11 + a4[28], v79);
  uint64_t v48 = (uint64_t)v61;
  uint64_t v49 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v68, v63);
  uint64_t v50 = (uint64_t)v64;
  uint64_t v51 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v70, v66);
  uint64_t v52 = (uint64_t)v67;
  uint64_t v53 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v67, v74, v71);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v43, (uint64_t)v57, (uint64_t)v55, v77, v78, v48, v50, v52, v76, v58, v56, v46, v47, v79, v49, v51, v53);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Merge5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Merge5.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.Merge6.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 116));
}

uint64_t Publishers.Merge6.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 120));
}

uint64_t Publishers.Merge6.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 124));
}

uint64_t Publishers.Merge6.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 128));
}

uint64_t Publishers.Merge6.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 132));
}

uint64_t Publishers.Merge6.merge<A>(with:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v56 = a1;
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  uint64_t v54 = *(void *)(a3 - 8);
  uint64_t v55 = a3;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v52 = *(void *)(v10 + 56);
  uint64_t v53 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v52 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v49 = *(void *)(v13 + 48);
  uint64_t v50 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = *(void *)(v49 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v60 = *(void *)(v16 + 40);
  uint64_t v61 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v60 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v14);
  uint64_t v47 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(v20 + 32);
  uint64_t v21 = *(void *)(v59 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v25 + 24);
  uint64_t v45 = v24;
  uint64_t v46 = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v22);
  uint64_t v30 = (char *)&v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v31 + 16);
  MEMORY[0x1F4188790](v28);
  uint64_t v34 = (char *)&v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v6, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v6 + a2[29], v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v6 + a2[30], v59);
  uint64_t v36 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v47, v6 + a2[31], v60);
  uint64_t v37 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v61, v6 + a2[32], v49);
  uint64_t v38 = v6 + a2[33];
  uint64_t v39 = (uint64_t)v50;
  uint64_t v40 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v38, v52);
  uint64_t v41 = (uint64_t)v53;
  uint64_t v42 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v56, v55);
  return Publishers.Merge7.init(_:_:_:_:_:_:_:)((uint64_t)v34, (uint64_t)v30, (uint64_t)v45, v36, v61, v39, v41, v32, v58, v46, v59, v60, v37, v40, v42);
}

uint64_t Publishers.Merge6.merge<A, B>(with:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v66 = a7;
  uint64_t v67 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a2;
  uint64_t v60 = a4;
  uint64_t v68 = a8;
  uint64_t v62 = *(void *)(a5 - 8);
  uint64_t v63 = a1;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v61 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v57 = *(void *)(v15 + 56);
  uint64_t v58 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(v57 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v55 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = *(void *)(v18 + 48);
  uint64_t v54 = *(void *)(v71 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v70 = (uint64_t)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(v21 + 40);
  uint64_t v22 = *(void *)(v53 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v19);
  uint64_t v69 = (uint64_t)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v49 = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v23);
  uint64_t v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v30;
  uint64_t v32 = *(void *)(v31 + 24);
  uint64_t v51 = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v28);
  uint64_t v36 = (char *)&v49 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = *(void *)(v37 + 16);
  MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v49 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v40 + 16))(v39, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v8 + a3[29], v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v8 + a3[30], v26);
  uint64_t v41 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v69, v8 + a3[31], v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v70, v8 + a3[32], v71);
  uint64_t v42 = (uint64_t)v55;
  uint64_t v43 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v8 + a3[33], v57);
  uint64_t v44 = (uint64_t)v58;
  uint64_t v45 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v63, v60);
  uint64_t v46 = (uint64_t)v61;
  uint64_t v47 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v65, v64);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v39, (uint64_t)v36, (uint64_t)v50, v69, v70, v42, v44, v46, v68, v52, v51, v49, v41, v71, v43, v45, v47);
}

uint64_t Publishers.Merge7.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 132));
}

uint64_t Publishers.Merge7.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 136));
}

uint64_t Publishers.Merge7.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 140));
}

uint64_t Publishers.Merge7.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 144));
}

uint64_t Publishers.Merge7.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge7.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 64) - 8) + 16))(a2, v2 + *(int *)(a1 + 152));
}

uint64_t Publishers.Merge7.merge<A>(with:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v65 = a1;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v63 = *(void *)(a3 - 8);
  uint64_t v64 = a3;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v61 = *(void *)(v10 + 64);
  uint64_t v62 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = *(void *)(v61 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v58 = *(void *)(v13 + 56);
  uint64_t v59 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = *(void *)(v58 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v70 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(v16 + 48);
  uint64_t v55 = *(void *)(v56 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v69 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *(void *)(v19 + 40);
  uint64_t v20 = *(void *)(v54 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v68 = (uint64_t)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 + 32);
  uint64_t v49 = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v21);
  uint64_t v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v29 + 24);
  uint64_t v50 = v28;
  uint64_t v51 = v30;
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v26);
  uint64_t v34 = (char *)&v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v52 = v34;
  uint64_t v53 = v36;
  MEMORY[0x1F4188790](v32);
  uint64_t v38 = (char *)&v48 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v39 + 16))(v38, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v6 + a2[33], v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v6 + a2[34], v24);
  uint64_t v40 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v68, v6 + a2[35], v54);
  uint64_t v41 = v56;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v69, v6 + a2[36], v56);
  uint64_t v42 = v58;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v70, v6 + a2[37], v58);
  uint64_t v43 = (uint64_t)v59;
  uint64_t v44 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v6 + a2[38], v61);
  uint64_t v45 = (uint64_t)v62;
  uint64_t v46 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v65, v64);
  return Publishers.Merge8.init(_:_:_:_:_:_:_:_:)((uint64_t)v38, (uint64_t)v52, (uint64_t)v50, v68, v69, v70, v43, v45, v67, v53, v51, v49, v40, v41, v42, v44, v46);
}

uint64_t Publishers.Merge8.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 148));
}

uint64_t Publishers.Merge8.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 152));
}

uint64_t Publishers.Merge8.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 156));
}

uint64_t Publishers.Merge8.e.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 48) - 8) + 16))(a2, v2 + *(int *)(a1 + 160));
}

uint64_t Publishers.Merge8.f.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 56) - 8) + 16))(a2, v2 + *(int *)(a1 + 164));
}

uint64_t Publishers.Merge8.g.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 64) - 8) + 16))(a2, v2 + *(int *)(a1 + 168));
}

uint64_t Publishers.Merge8.h.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 72) - 8) + 16))(a2, v2 + *(int *)(a1 + 172));
}

uint64_t Publishers.MergeMany.publishers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Publishers.MergeMany.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Publishers._Merged.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers._Merged.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x656772654DLL;
  a1[1] = 0xE500000000000000;
}

uint64_t Publishers._Merged.Side.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v17 = *v1;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18C0BA630;
  *(void *)(v11 + 32) = 0xD000000000000012;
  *(void *)(v11 + 40) = 0x800000018C0C48F0;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 72) = &type metadata for CombineIdentifier;
  long long v13 = *(_OWORD *)(a1 + 32);
  v16[0] = *(_OWORD *)(a1 + 16);
  v16[1] = v13;
  type metadata accessor for Publishers._Merged();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v12);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers._Merged<A, B, C>.Side()
{
  return 0x656772654DLL;
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers._Merged<A, B, C>.Side(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers._Merged<A, B, C>()
{
  return Publishers._Merged.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers._Merged<A, B, C>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers._Merged<A, B, C>()
{
  return Publishers._Merged.cancel()();
}

uint64_t static Publishers.Merge<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[1] = a8;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a7;
  uint64_t v10 = type metadata accessor for Publishers.Merge();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v22 - v15;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if (v17) {
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v19 = 0;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

uint64_t static Publishers.Merge3<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  v31[1] = a4;
  _OWORD v31[2] = a5;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a8;
  uint64_t v40 = a10;
  uint64_t v12 = type metadata accessor for Publishers.Merge3();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v32 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v31 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v31 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v31 - v22;
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v33 = a1;
  v25(v23, a1, v12);
  uint64_t v34 = a2;
  v25(v21, a2, v12);
  if (v24) {
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v26 = 0;
  }
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v21, v12);
  v27(v23, v12);
  v25(v18, v33, v12);
  uint64_t v28 = v32;
  v25(v32, v34, v12);
  if (v26) {
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v29 = 0;
  }
  v27(v28, v12);
  v27(v18, v12);
  return v29 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge3<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), a3[6], *(void *)(a4 - 16), a3[7]) & 1;
}

uint64_t static Publishers.Merge4<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  v43[2] = a4;
  v43[3] = a5;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  v43[1] = a6;
  uint64_t v53 = a7;
  uint64_t v54 = a9;
  uint64_t v55 = a11;
  uint64_t v56 = a13;
  uint64_t v15 = type metadata accessor for Publishers.Merge4();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v46 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)v43 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v43 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v44 = (char *)v43 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v43 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)v43 - v29;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v47 = a1;
  v32(v30, a1, v15);
  uint64_t v48 = a2;
  v32(v28, a2, v15);
  if (v31) {
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v33 = 0;
  }
  uint64_t v34 = v44;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v16 + 8);
  v35(v28, v15);
  v35(v30, v15);
  uint64_t v36 = v47;
  v32(v34, v47, v15);
  uint64_t v37 = v48;
  v32(v23, v48, v15);
  if ((v33 & 1) == 0)
  {
    v35(v23, v15);
    v35(v34, v15);
    uint64_t v39 = v45;
    v32(v45, v36, v15);
    uint64_t v40 = v46;
    v32(v46, v37, v15);
    goto LABEL_8;
  }
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v35(v23, v15);
  v35(v34, v15);
  uint64_t v39 = v45;
  v32(v45, v36, v15);
  uint64_t v40 = v46;
  v32(v46, v37, v15);
  if ((v38 & 1) == 0)
  {
LABEL_8:
    char v41 = 0;
    goto LABEL_9;
  }
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v35(v40, v15);
  v35(v39, v15);
  return v41 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge4<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8), a3[7], *(void *)(a4 - 16), a3[8], *(void *)(a4 - 24), a3[9]) & 1;
}

uint64_t static Publishers.Merge5<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  v53[2] = a4;
  v53[3] = a5;
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  v53[0] = a7;
  v53[1] = a6;
  uint64_t v65 = a7;
  uint64_t v66 = a8;
  uint64_t v67 = a10;
  uint64_t v68 = a12;
  uint64_t v69 = a14;
  uint64_t v70 = a16;
  uint64_t v18 = type metadata accessor for Publishers.Merge5();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v58 = (char *)v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v57 = (char *)v53 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v55 = (char *)v53 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v56 = (char *)v53 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)v53 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v54 = (char *)v53 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)v53 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)v53 - v36;
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v59 = a1;
  v39(v37, a1, v18);
  uint64_t v60 = a2;
  v39(v35, a2, v18);
  if (v38) {
    char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v40 = 0;
  }
  char v41 = v54;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v19 + 8);
  v42(v35, v18);
  v42(v37, v18);
  uint64_t v43 = v59;
  v39(v41, v59, v18);
  uint64_t v44 = v60;
  v39(v30, v60, v18);
  if ((v40 & 1) == 0)
  {
    v42(v30, v18);
    v42(v41, v18);
    uint64_t v46 = v56;
    v39(v56, v43, v18);
    uint64_t v47 = v55;
    v39(v55, v44, v18);
    goto LABEL_9;
  }
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42(v30, v18);
  v42(v41, v18);
  uint64_t v46 = v56;
  v39(v56, v43, v18);
  uint64_t v47 = v55;
  v39(v55, v44, v18);
  if ((v45 & 1) == 0)
  {
LABEL_9:
    v42(v47, v18);
    v42(v46, v18);
    uint64_t v49 = v57;
    v39(v57, v43, v18);
    uint64_t v50 = v58;
    v39(v58, v44, v18);
    goto LABEL_10;
  }
  char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42(v47, v18);
  v42(v46, v18);
  uint64_t v49 = v57;
  v39(v57, v43, v18);
  uint64_t v50 = v58;
  v39(v58, v44, v18);
  if ((v48 & 1) == 0)
  {
LABEL_10:
    char v51 = 0;
    goto LABEL_11;
  }
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_11:
  v42(v50, v18);
  v42(v49, v18);
  return v51 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge5<A, B, C, D, E>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge5<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], *(void *)(a4 - 8), a3[8], *(void *)(a4 - 16), a3[9], *(void *)(a4 - 24), a3[10], *(void *)(a4 - 32), a3[11]) & 1;
}

uint64_t static Publishers.Merge6<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  v62[4] = a4;
  v62[5] = a5;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  v62[3] = a6;
  void v62[2] = a7;
  uint64_t v76 = a7;
  uint64_t v77 = a8;
  v62[1] = a8;
  uint64_t v78 = a9;
  uint64_t v79 = a11;
  uint64_t v80 = a13;
  uint64_t v81 = a15;
  uint64_t v82 = a17;
  uint64_t v83 = a19;
  uint64_t v21 = type metadata accessor for Publishers.Merge6();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v69 = (char *)v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v68 = (char *)v62 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v66 = (char *)v62 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v67 = (char *)v62 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v64 = (char *)v62 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v65 = (char *)v62 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)v62 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v63 = (char *)v62 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v42 = (char *)v62 - v41;
  MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)v62 - v43;
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v71 = a1;
  v46(v44, a1, v21);
  uint64_t v70 = a2;
  v46(v42, a2, v21);
  if (v45) {
    char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v47 = 0;
  }
  char v48 = v63;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v22 + 8);
  v49(v42, v21);
  v49(v44, v21);
  v46(v48, v71, v21);
  uint64_t v50 = v70;
  v46(v37, v70, v21);
  if ((v47 & 1) == 0)
  {
    v49(v37, v21);
    v49(v48, v21);
    uint64_t v52 = v65;
    v46(v65, v71, v21);
    uint64_t v53 = v64;
    v46(v64, v50, v21);
    goto LABEL_10;
  }
  char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
  v49(v37, v21);
  v49(v48, v21);
  uint64_t v52 = v65;
  v46(v65, v71, v21);
  uint64_t v53 = v64;
  v46(v64, v50, v21);
  if ((v51 & 1) == 0)
  {
LABEL_10:
    v49(v53, v21);
    v49(v52, v21);
    uint64_t v55 = v67;
    v46(v67, v71, v21);
    uint64_t v56 = v66;
    v46(v66, v70, v21);
    uint64_t v57 = v68;
    uint64_t v58 = v69;
    goto LABEL_11;
  }
  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  v49(v53, v21);
  v49(v52, v21);
  uint64_t v55 = v67;
  v46(v67, v71, v21);
  uint64_t v56 = v66;
  v46(v66, v70, v21);
  uint64_t v57 = v68;
  uint64_t v58 = v69;
  if ((v54 & 1) == 0)
  {
LABEL_11:
    v49(v56, v21);
    v49(v55, v21);
    v46(v57, v71, v21);
    v46(v58, v70, v21);
    goto LABEL_12;
  }
  char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  v49(v56, v21);
  v49(v55, v21);
  v46(v57, v71, v21);
  v46(v58, v70, v21);
  if ((v59 & 1) == 0)
  {
LABEL_12:
    char v60 = 0;
    goto LABEL_13;
  }
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_13:
  v49(v58, v21);
  v49(v57, v21);
  return v60 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge6<A, B, C, D, E, F>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge6<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], *(void *)(a4 - 8), a3[9], *(void *)(a4 - 16), a3[10], *(void *)(a4 - 24), a3[11], *(void *)(a4 - 32), a3[12], *(void *)(a4 - 40), a3[13]) & 1;
}

uint64_t static Publishers.Merge7<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v86 = a3;
  uint64_t v87 = a4;
  v75[5] = a4;
  v75[6] = a5;
  uint64_t v88 = a5;
  uint64_t v89 = a6;
  v75[4] = a6;
  v75[3] = a7;
  uint64_t v90 = a7;
  uint64_t v91 = a8;
  v75[2] = a8;
  v75[1] = a9;
  uint64_t v92 = a9;
  uint64_t v93 = a10;
  uint64_t v94 = a12;
  uint64_t v95 = a14;
  uint64_t v96 = a16;
  uint64_t v97 = a18;
  uint64_t v98 = a20;
  uint64_t v99 = a22;
  uint64_t v24 = type metadata accessor for Publishers.Merge7();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v83 = (char *)v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v82 = (char *)v75 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v80 = (char *)v75 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v81 = (char *)v75 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v78 = (char *)v75 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v79 = (char *)v75 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v76 = (char *)v75 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v77 = (char *)v75 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)v75 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  char v47 = (char *)v75 - v46;
  uint64_t v48 = MEMORY[0x1F4188790](v45);
  uint64_t v50 = (char *)v75 - v49;
  MEMORY[0x1F4188790](v48);
  uint64_t v52 = (char *)v75 - v51;
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v54 = a1;
  uint64_t v55 = *(void (**)(char *))(v25 + 16);
  uint64_t v84 = v54;
  v55(v52);
  uint64_t v85 = a2;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v50, a2, v24);
  if (v53) {
    char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v56 = 0;
  }
  uint64_t v57 = *(void (**)(char *, uint64_t))(v25 + 8);
  v57(v50, v24);
  v57(v52, v24);
  uint64_t v58 = v84;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v47, v84, v24);
  uint64_t v59 = v85;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v44, v85, v24);
  if ((v56 & 1) == 0)
  {
    v57(v44, v24);
    v57(v47, v24);
    uint64_t v61 = v77;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v77, v58, v24);
    uint64_t v62 = v76;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v76, v59, v24);
    goto LABEL_11;
  }
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57(v44, v24);
  v57(v47, v24);
  uint64_t v61 = v77;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v77, v58, v24);
  uint64_t v62 = v76;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v76, v59, v24);
  if ((v60 & 1) == 0)
  {
LABEL_11:
    v57(v62, v24);
    v57(v61, v24);
    uint64_t v64 = v79;
    uint64_t v65 = v58;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v79, v58, v24);
    uint64_t v66 = v78;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v78, v59, v24);
    goto LABEL_12;
  }
  char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57(v62, v24);
  v57(v61, v24);
  uint64_t v64 = v79;
  uint64_t v65 = v58;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v79, v58, v24);
  uint64_t v66 = v78;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v78, v59, v24);
  if ((v63 & 1) == 0)
  {
LABEL_12:
    v57(v66, v24);
    v57(v64, v24);
    uint64_t v68 = v81;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v81, v65, v24);
    uint64_t v69 = v80;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v80, v59, v24);
    goto LABEL_13;
  }
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57(v66, v24);
  v57(v64, v24);
  uint64_t v68 = v81;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v81, v65, v24);
  uint64_t v69 = v80;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v80, v59, v24);
  if ((v67 & 1) == 0)
  {
LABEL_13:
    v57(v69, v24);
    v57(v68, v24);
    uint64_t v71 = v82;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v82, v65, v24);
    uint64_t v72 = v83;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v83, v59, v24);
    goto LABEL_14;
  }
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57(v69, v24);
  v57(v68, v24);
  uint64_t v71 = v82;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v82, v65, v24);
  uint64_t v72 = v83;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v83, v59, v24);
  if ((v70 & 1) == 0)
  {
LABEL_14:
    char v73 = 0;
    goto LABEL_15;
  }
  char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_15:
  v57(v72, v24);
  v57(v71, v24);
  return v73 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge7<A, B, C, D, E, F, G>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge7<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], *(void *)(a4 - 8), a3[10], *(void *)(a4 - 16), a3[11], *(void *)(a4 - 24), a3[12], *(void *)(a4 - 32), a3[13], *(void *)(a4 - 40),
           a3[14],
           *(void *)(a4 - 48),
           a3[15]) & 1;
}

uint64_t static Publishers.Merge8<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v99 = a3;
  uint64_t v100 = a4;
  v86[5] = a4;
  v86[6] = a5;
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  v86[4] = a6;
  v86[3] = a7;
  uint64_t v103 = a7;
  uint64_t v104 = a8;
  v86[2] = a8;
  v86[1] = a9;
  uint64_t v105 = a9;
  uint64_t v106 = a10;
  v86[0] = a10;
  uint64_t v107 = a11;
  uint64_t v108 = a13;
  uint64_t v109 = a15;
  uint64_t v110 = a17;
  uint64_t v111 = a19;
  uint64_t v112 = a21;
  uint64_t v113 = a23;
  uint64_t v114 = a25;
  uint64_t v27 = type metadata accessor for Publishers.Merge8();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v96 = (char *)v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v95 = (char *)v86 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v93 = (char *)v86 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v94 = (char *)v86 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v91 = (char *)v86 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v92 = (char *)v86 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v89 = (char *)v86 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v90 = (char *)v86 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v87 = (char *)v86 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v88 = (char *)v86 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v51 = (char *)v86 - v50;
  uint64_t v52 = MEMORY[0x1F4188790](v49);
  uint64_t v54 = (char *)v86 - v53;
  uint64_t v55 = MEMORY[0x1F4188790](v52);
  uint64_t v57 = (char *)v86 - v56;
  MEMORY[0x1F4188790](v55);
  uint64_t v59 = (char *)v86 - v58;
  char v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v61 = a1;
  uint64_t v62 = *(void (**)(char *))(v28 + 16);
  uint64_t v97 = v61;
  v62(v59);
  uint64_t v98 = a2;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v57, a2, v27);
  if (v60) {
    char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v63 = 0;
  }
  uint64_t v64 = *(void (**)(char *, uint64_t))(v28 + 8);
  v64(v57, v27);
  v64(v59, v27);
  uint64_t v65 = v97;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v54, v97, v27);
  uint64_t v66 = v98;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v51, v98, v27);
  if ((v63 & 1) == 0)
  {
    v64(v51, v27);
    v64(v54, v27);
    uint64_t v68 = v88;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v88, v65, v27);
    uint64_t v69 = v87;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v87, v66, v27);
    goto LABEL_12;
  }
  char v67 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64(v51, v27);
  v64(v54, v27);
  uint64_t v68 = v88;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v88, v65, v27);
  uint64_t v69 = v87;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v87, v66, v27);
  if ((v67 & 1) == 0)
  {
LABEL_12:
    v64(v69, v27);
    v64(v68, v27);
    uint64_t v71 = v90;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v90, v65, v27);
    uint64_t v72 = v89;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v89, v98, v27);
    char v73 = v92;
    uint64_t v74 = v91;
    goto LABEL_13;
  }
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64(v69, v27);
  v64(v68, v27);
  uint64_t v71 = v90;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v90, v65, v27);
  uint64_t v72 = v89;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v89, v98, v27);
  char v73 = v92;
  uint64_t v74 = v91;
  if ((v70 & 1) == 0)
  {
LABEL_13:
    v64(v72, v27);
    v64(v71, v27);
    uint64_t v76 = v97;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v73, v97, v27);
    uint64_t v77 = v98;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v74, v98, v27);
    goto LABEL_14;
  }
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64(v72, v27);
  v64(v71, v27);
  uint64_t v76 = v97;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v73, v97, v27);
  uint64_t v77 = v98;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v74, v98, v27);
  if ((v75 & 1) == 0)
  {
LABEL_14:
    v64(v74, v27);
    v64(v73, v27);
    uint64_t v79 = v94;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v94, v76, v27);
    uint64_t v80 = v93;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v93, v77, v27);
    goto LABEL_15;
  }
  char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64(v74, v27);
  v64(v73, v27);
  uint64_t v79 = v94;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v94, v76, v27);
  uint64_t v80 = v93;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v93, v77, v27);
  if ((v78 & 1) == 0)
  {
LABEL_15:
    v64(v80, v27);
    v64(v79, v27);
    uint64_t v82 = v95;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v95, v76, v27);
    uint64_t v83 = v96;
    ((void (*)(char *, uint64_t, uint64_t))v62)(v96, v77, v27);
    goto LABEL_16;
  }
  char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
  v64(v80, v27);
  v64(v79, v27);
  uint64_t v82 = v95;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v95, v76, v27);
  uint64_t v83 = v96;
  ((void (*)(char *, uint64_t, uint64_t))v62)(v96, v77, v27);
  if ((v81 & 1) == 0)
  {
LABEL_16:
    char v84 = 0;
    goto LABEL_17;
  }
  char v84 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_17:
  v64(v83, v27);
  v64(v82, v27);
  return v84 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Merge8<A, B, C, D, E, F, G, H>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Merge8<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], *(void *)(a4 - 8), a3[11], *(void *)(a4 - 16), a3[12], *(void *)(a4 - 24), a3[13], *(void *)(a4 - 32), a3[14],
           *(void *)(a4 - 40),
           a3[15],
           *(void *)(a4 - 48),
           a3[16],
           *(void *)(a4 - 56),
           a3[17]) & 1;
}

uint64_t static Publishers.MergeMany<>.== infix(_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4183FC8](*a1, *a2, a3, a5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.MergeMany<A>(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return static Publishers.MergeMany<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), a4, *(void *)(a4 - 8));
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t getEnumTagSinglePayload for Publishers.Merge(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C072BACLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Merge3(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge3(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x18C073224);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Merge4(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = *(void *)(a3[4] - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(unsigned int *)(v13 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = *(void *)(v13 + 64);
  if (v15 <= v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v13 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v23 = *(void *)(*(void *)(a3[2] - 8) + 64) + v16;
  int v24 = a2 - v22;
  if (a2 <= v22) {
    goto LABEL_30;
  }
  uint64_t v25 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 < 2)
    {
LABEL_30:
      if (v22)
      {
        if (v6 == v22)
        {
          uint64_t v32 = *(uint64_t (**)(void))(v5 + 48);
          return v32();
        }
        else
        {
          unint64_t v34 = ((unint64_t)a1 + v23) & ~v16;
          if (v8 == v22)
          {
            uint64_t v35 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v35(v34);
          }
          else
          {
            unint64_t v36 = (v34 + v17 + v18) & ~v18;
            if (v12 == v22)
            {
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
              uint64_t v38 = *(unsigned int *)(v11 + 84);
              uint64_t v39 = a3[4];
            }
            else
            {
              unint64_t v36 = (v36 + v19 + v20) & ~v20;
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
              uint64_t v38 = v15;
              uint64_t v39 = a3[5];
            }
            return v37(v36, v38, v39);
          }
        }
      }
      return 0;
    }
  }
  int v27 = *((unsigned __int8 *)a1 + v25);
  if (!*((unsigned char *)a1 + v25)) {
    goto LABEL_30;
  }
LABEL_20:
  int v29 = (v27 - 1) << v26;
  if (v25 > 3) {
    int v29 = 0;
  }
  if (v25)
  {
    if (v25 <= 3) {
      int v30 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
    }
    else {
      int v30 = 4;
    }
    switch(v30)
    {
      case 2:
        int v31 = *a1;
        break;
      case 3:
        int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)a1;
        break;
      default:
        int v31 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  return v22 + (v31 | v29) + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge4(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v7 = a4[4];
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v7 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = a4[5];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  if (*(_DWORD *)(v16 + 84) <= v14) {
    unsigned int v23 = v14;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v24 = v17 + v18;
  size_t v25 = ((v21 + v22 + ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20)) & ~v22) + *(void *)(*(void *)(v15 - 8) + 64);
  BOOL v26 = a3 >= v23;
  unsigned int v27 = a3 - v23;
  if (v27 != 0 && v26)
  {
    if (v25 <= 3)
    {
      unsigned int v31 = ((v27 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
      if (HIWORD(v31))
      {
        int v28 = 4;
      }
      else if (v31 >= 0x100)
      {
        int v28 = 2;
      }
      else
      {
        int v28 = v31 > 1;
      }
    }
    else
    {
      int v28 = 1;
    }
  }
  else
  {
    int v28 = 0;
  }
  if (v23 < a2)
  {
    unsigned int v29 = ~v23 + a2;
    if (v25 < 4)
    {
      int v30 = (v29 >> (8 * v25)) + 1;
      if (v25)
      {
        int v32 = v29 & ~(-1 << (8 * v25));
        bzero(a1, v25);
        if (v25 == 3)
        {
          *(_WORD *)a1 = v32;
          a1[2] = BYTE2(v32);
        }
        else if (v25 == 2)
        {
          *(_WORD *)a1 = v32;
        }
        else
        {
          *a1 = v32;
        }
      }
    }
    else
    {
      bzero(a1, v25);
      *(_DWORD *)a1 = v29;
      int v30 = 1;
    }
    switch(v28)
    {
      case 1:
        a1[v25] = v30;
        return;
      case 2:
        *(_WORD *)&a1[v25] = v30;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v25] = v30;
        return;
      default:
        return;
    }
  }
  switch(v28)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x18C073A6CLL);
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v8 == v23)
        {
          uint64_t v33 = *(void (**)(char *))(v6 + 56);
          unint64_t v34 = a1;
        }
        else
        {
          unint64_t v34 = (char *)((unint64_t)&a1[v24] & ~v18);
          if (v10 == v23)
          {
            uint64_t v33 = *(void (**)(char *))(v9 + 56);
          }
          else
          {
            unint64_t v34 = (char *)((unint64_t)&v34[v19 + v20] & ~v20);
            if (v13 == v23)
            {
              uint64_t v33 = *(void (**)(char *))(v12 + 56);
            }
            else
            {
              unint64_t v34 = (char *)((unint64_t)&v34[v21 + v22] & ~v22);
              uint64_t v33 = *(void (**)(char *))(v16 + 56);
            }
          }
        }
        v33(v34);
      }
      return;
  }
}

uint64_t type metadata instantiation function for Publishers.Merge5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 104);
}

uint64_t type metadata completion function for Publishers.Merge5()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initStructMetadata();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge5(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(a3[3] - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = (v5 + v7) & ~v7;
  uint64_t v10 = *(void *)(a3[4] - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v46 = *(void *)(v6 + 64) + v11;
  uint64_t v12 = v46 + v9;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v14 = a3[6];
  uint64_t v15 = v12 & ~v11;
  uint64_t v16 = *(void *)(a3[5] - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = v13 + v17;
  uint64_t v19 = *(void *)(v16 + 64);
  uint64_t v20 = *(void *)(v14 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = v19 + v21;
  unint64_t v23 = ((v19 + v21 + ((v13 + v17 + v15) & ~v17)) & ~v21) + *(void *)(v20 + 64);
  uint64_t v24 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v10 + 80) | *(unsigned char *)(v16 + 80) | *(unsigned char *)(v20 + 80));
  if (v24 <= 7
    && v23 <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v16 + 80) | *(_DWORD *)(v20 + 80)) & 0x100000) == 0)
  {
    uint64_t v44 = a3[5];
    uint64_t v29 = ~v7;
    uint64_t v40 = a3[4];
    uint64_t v41 = ~v11;
    uint64_t v42 = ~v17;
    uint64_t v43 = ~v21;
    uint64_t v39 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    uint64_t v45 = a1;
    unint64_t v31 = ((unint64_t)a1 + v8) & v29;
    unint64_t v32 = ((unint64_t)a2 + v8) & v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v31, v32, v39);
    uint64_t v33 = v31 + v46;
    int v28 = v45;
    uint64_t v34 = v33 & v41;
    unint64_t v35 = (v32 + v46) & v41;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(v33 & v41, v35, v40);
    uint64_t v36 = (v34 + v18) & v42;
    unint64_t v37 = (v35 + v18) & v42;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v36, v37, v44);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16))((v36 + v22) & v43, (v37 + v22) & v43, v14);
  }
  else
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    int v28 = (uint64_t *)(v27 + ((v24 + 16) & ~v24));
    swift_retain();
  }
  return v28;
}

uint64_t destroy for Publishers.Merge5(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  (*(void (**)(unint64_t))(v10 + 8))(v12);
  uint64_t v13 = *(void *)(v11 + 56);
  uint64_t v14 = *(void *)(a2[5] - 8);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = (v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  (*(void (**)(unint64_t))(v14 + 8))(v16);
  uint64_t v17 = *(void *)(a2[6] - 8);
  uint64_t v18 = *(uint64_t (**)(unint64_t))(v17 + 8);
  unint64_t v19 = (v16 + *(void *)(v15 + 56) + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);

  return v18(v19);
}

uint64_t initializeWithCopy for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v25, v26);
  uint64_t v27 = *(void *)(a3[6] - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 16))((*(void *)(v22 + 48) + *(unsigned __int8 *)(v27 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (*(void *)(v22 + 48) + *(unsigned __int8 *)(v27 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t assignWithCopy for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v25, v26);
  uint64_t v27 = *(void *)(a3[6] - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))((*(void *)(v22 + 40) + *(unsigned __int8 *)(v27 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (*(void *)(v22 + 40) + *(unsigned __int8 *)(v27 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v25, v26);
  uint64_t v27 = *(void *)(a3[6] - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 32))((*(void *)(v22 + 32) + *(unsigned __int8 *)(v27 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (*(void *)(v22 + 32) + *(unsigned __int8 *)(v27 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge5(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v25, v26);
  uint64_t v27 = *(void *)(a3[6] - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))((*(void *)(v22 + 24) + *(unsigned __int8 *)(v27 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (*(void *)(v22 + 24) + *(unsigned __int8 *)(v27 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge5(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v44 = *(void *)(a3[2] - 8);
  unsigned int v5 = *(_DWORD *)(v44 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v44 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = *(void *)(a3[4] - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= v12) {
    unsigned int v15 = v12;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v16 = *(void *)(a3[6] - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 80);
  if (v17 <= v15) {
    unsigned int v24 = v15;
  }
  else {
    unsigned int v24 = *(_DWORD *)(v16 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v25 = *(void *)(*(void *)(a3[2] - 8) + 64) + v18;
  uint64_t v26 = *(void *)(*(void *)(v9 - 8) + 64) + v23;
  int v27 = a2 - v24;
  if (a2 <= v24) {
    goto LABEL_33;
  }
  uint64_t v28 = ((v26 + ((v21 + v22 + ((v19 + v20 + (v25 & ~v18)) & ~v20)) & ~v22)) & ~v23)
      + *(void *)(*(void *)(a3[6] - 8) + 64);
  char v29 = 8 * v28;
  if (v28 > 3) {
    goto LABEL_16;
  }
  unsigned int v31 = ((v27 + ~(-1 << v29)) >> v29) + 1;
  if (HIWORD(v31))
  {
    int v30 = *(_DWORD *)((char *)a1 + v28);
    if (!v30) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v31 > 0xFF)
  {
    int v30 = *(unsigned __int16 *)((char *)a1 + v28);
    if (!*(unsigned __int16 *)((char *)a1 + v28)) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v31 >= 2)
  {
LABEL_16:
    int v30 = *((unsigned __int8 *)a1 + v28);
    if (!*((unsigned char *)a1 + v28)) {
      goto LABEL_33;
    }
LABEL_23:
    int v32 = (v30 - 1) << v29;
    if (v28 > 3) {
      int v32 = 0;
    }
    if (v28)
    {
      if (v28 <= 3) {
        int v33 = ((v26 + ((v21 + v22 + ((v19 + v20 + (v25 & ~v18)) & ~v20)) & ~v22)) & ~v23)
      }
            + *(_DWORD *)(*(void *)(a3[6] - 8) + 64);
      else {
        int v33 = 4;
      }
      switch(v33)
      {
        case 2:
          int v34 = *a1;
          break;
        case 3:
          int v34 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v34 = *(_DWORD *)a1;
          break;
        default:
          int v34 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v34 = 0;
    }
    return v24 + (v34 | v32) + 1;
  }
LABEL_33:
  if (!v24) {
    return 0;
  }
  if (v5 == v24)
  {
    unint64_t v35 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v44 + 48);
    uint64_t v36 = a1;
    uint64_t v37 = *(unsigned int *)(v44 + 84);
    uint64_t v38 = a3[2];
    return v35(v36, v37, v38);
  }
  unint64_t v40 = ((unint64_t)a1 + v25) & ~v18;
  if (v7 == v24)
  {
    uint64_t v41 = *(uint64_t (**)(unint64_t))(v6 + 48);
    return v41(((unint64_t)a1 + v25) & ~v18);
  }
  else
  {
    if (v11 == v24)
    {
      unint64_t v35 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v10 + 48);
      uint64_t v36 = (unsigned __int16 *)((v40 + v19 + v20) & ~v20);
      uint64_t v37 = *(unsigned int *)(v10 + 84);
      uint64_t v38 = a3[4];
      return v35(v36, v37, v38);
    }
    uint64_t v36 = (unsigned __int16 *)((((v40 + v19 + v20) & ~v20) + v21 + v22) & ~v22);
    if (v14 == v24)
    {
      unint64_t v35 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v13 + 48);
      uint64_t v37 = *(unsigned int *)(v13 + 84);
      uint64_t v38 = a3[5];
      return v35(v36, v37, v38);
    }
    unint64_t v42 = ((unint64_t)v36 + v26) & ~v23;
    uint64_t v43 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 48);
    return v43(v42, v17);
  }
}

void storeEnumTagSinglePayload for Publishers.Merge5(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v39 = *(void *)(a4[2] - 8);
  unsigned int v6 = *(_DWORD *)(v39 + 84);
  uint64_t v7 = *(void *)(a4[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4[4] - 8);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v39 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(void *)(a4[4] - 8);
  unsigned int v12 = *(_DWORD *)(v9 + 84);
  if (v12 <= v10) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v14 = a4[6];
  uint64_t v38 = a4[5];
  uint64_t v15 = *(void *)(v38 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  if (v16 <= v13) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v15 + 84);
  }
  uint64_t v18 = *(void *)(v14 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = *(void *)(v9 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v18 + 80);
  if (*(_DWORD *)(v18 + 84) <= v17) {
    unsigned int v25 = v17;
  }
  else {
    unsigned int v25 = *(_DWORD *)(v18 + 84);
  }
  uint64_t v26 = *(void *)(*(void *)(a4[2] - 8) + 64) + v19;
  uint64_t v27 = *(void *)(*(void *)(v38 - 8) + 64) + v24;
  size_t v28 = ((v27 + ((v22 + v23 + ((v20 + v21 + (v26 & ~v19)) & ~v21)) & ~v23)) & ~v24)
      + *(void *)(*(void *)(v14 - 8) + 64);
  if (a3 <= v25)
  {
    int v29 = 0;
  }
  else if (v28 <= 3)
  {
    unsigned int v34 = ((a3 - v25 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
    if (HIWORD(v34))
    {
      int v29 = 4;
    }
    else if (v34 >= 0x100)
    {
      int v29 = 2;
    }
    else
    {
      int v29 = v34 > 1;
    }
  }
  else
  {
    int v29 = 1;
  }
  if (v25 < a2)
  {
    unsigned int v30 = ~v25 + a2;
    if (v28 < 4)
    {
      int v31 = (v30 >> (8 * v28)) + 1;
      if (v28)
      {
        int v35 = v30 & ~(-1 << (8 * v28));
        bzero(a1, v28);
        if (v28 == 3)
        {
          *(_WORD *)a1 = v35;
          a1[2] = BYTE2(v35);
        }
        else if (v28 == 2)
        {
          *(_WORD *)a1 = v35;
        }
        else
        {
          *a1 = v35;
        }
      }
    }
    else
    {
      bzero(a1, v28);
      *(_DWORD *)a1 = v30;
      int v31 = 1;
    }
    switch(v29)
    {
      case 1:
        a1[v28] = v31;
        return;
      case 2:
        *(_WORD *)&a1[v28] = v31;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v28] = v31;
        return;
      default:
        return;
    }
  }
  uint64_t v32 = ~v19;
  uint64_t v33 = ~v24;
  switch(v29)
  {
    case 1:
      a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x18C07516CLL);
    case 4:
      *(_DWORD *)&a1[v28] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v6 == v25)
        {
          uint64_t v36 = *(void (**)(char *))(v39 + 56);
          uint64_t v37 = a1;
        }
        else
        {
          uint64_t v37 = (char *)((unint64_t)&a1[v26] & v32);
          if (v8 == v25)
          {
            uint64_t v36 = *(void (**)(char *))(v7 + 56);
          }
          else
          {
            uint64_t v37 = (char *)((unint64_t)&v37[v20 + v21] & ~v21);
            if (v12 == v25)
            {
              uint64_t v36 = *(void (**)(char *))(v11 + 56);
            }
            else
            {
              uint64_t v37 = (char *)((unint64_t)&v37[v22 + v23] & ~v23);
              if (v16 == v25)
              {
                uint64_t v36 = *(void (**)(char *))(v15 + 56);
              }
              else
              {
                uint64_t v37 = (char *)((unint64_t)&v37[v27] & v33);
                uint64_t v36 = *(void (**)(char *))(v18 + 56);
              }
            }
          }
        }
        v36(v37);
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge6(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v54 = v5 + v9;
  uint64_t v10 = (v5 + v9) & ~v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = *(void *)(v7 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v53 = v11 + v13;
  uint64_t v14 = (v11 + v13 + v10) & ~v13;
  uint64_t v15 = *(void *)(v12 + 64);
  uint64_t v55 = *(void *)(a3[5] - 8);
  uint64_t v16 = *(_DWORD *)(v55 + 80);
  uint64_t v52 = v15 + v16;
  uint64_t v17 = (v15 + v16 + v14) & ~v16;
  uint64_t v18 = *(void *)(v55 + 64);
  uint64_t v19 = *(void *)(a3[6] - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80);
  uint64_t v51 = v18 + v20;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v22 = a3[7];
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80);
  uint64_t v25 = v21 + v24;
  unint64_t v26 = ((v21 + v24 + ((v18 + v20 + v17) & ~v20)) & ~v24) + *(void *)(v23 + 64);
  uint64_t v27 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v12 + 80) | *(unsigned char *)(v55 + 80) | *(unsigned char *)(v19 + 80) | *(unsigned char *)(v23 + 80));
  if (v27 <= 7
    && v26 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v55 + 80) | *(_DWORD *)(v19 + 80) | *(_DWORD *)(v23 + 80)) & 0x100000) == 0)
  {
    uint64_t v50 = a3[6];
    uint64_t v32 = *(void *)(v7 - 8);
    uint64_t v33 = ~v9;
    uint64_t v48 = a3[5];
    uint64_t v34 = ~v13;
    uint64_t v45 = a3[4];
    uint64_t v46 = ~v16;
    uint64_t v47 = ~v20;
    uint64_t v49 = ~v24;
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    uint64_t v36 = v6;
    int v31 = a1;
    unint64_t v37 = ((unint64_t)a1 + v54) & v33;
    unint64_t v38 = ((unint64_t)a2 + v54) & v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v37, v38, v36);
    unint64_t v39 = (v38 + v53) & v34;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 16))((v37 + v53) & v34, v39, v45);
    unint64_t v40 = (((v37 + v53) & v34) + v52) & v46;
    unint64_t v41 = (v39 + v52) & v46;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 16))(v40, v41, v48);
    unint64_t v42 = (v40 + v51) & v47;
    uint64_t v43 = (v41 + v51) & v47;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v42, v43, v50);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 16))((v42 + v25) & v49, (v43 + v25) & v49, v22);
  }
  else
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    int v31 = (uint64_t *)(v30 + ((v27 + 16) & ~v27));
    swift_retain();
  }
  return v31;
}

uint64_t assignWithCopy for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 40);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 24;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v32, v33);
  uint64_t v34 = *(void *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v34 + 24))((*(void *)(v29 + 40) + *(unsigned __int8 *)(v34 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80), (*(void *)(v29 + 40) + *(unsigned __int8 *)(v34 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 32);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 32;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v32, v33);
  uint64_t v34 = *(void *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v34 + 32))((*(void *)(v29 + 32) + *(unsigned __int8 *)(v34 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80), (*(void *)(v29 + 32) + *(unsigned __int8 *)(v34 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge6(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 24);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 40;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v32, v33);
  uint64_t v34 = *(void *)(a3[7] - 8);
  (*(void (**)(unint64_t, unint64_t))(v34 + 40))((*(void *)(v29 + 24) + *(unsigned __int8 *)(v34 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80), (*(void *)(v29 + 24) + *(unsigned __int8 *)(v34 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge6(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v55 = a3[2];
  uint64_t v54 = *(void *)(v55 - 8);
  unsigned int v5 = *(_DWORD *)(v54 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a3[5];
  uint64_t v52 = v8;
  uint64_t v53 = a3[4];
  uint64_t v9 = *(void *)(v53 - 8);
  if (v7 <= v5) {
    unsigned int v10 = *(_DWORD *)(v54 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  if (v11 <= v10) {
    unsigned int v12 = v10;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(v8 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= v12) {
    unsigned int v15 = v12;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v50 = a3[7];
  uint64_t v51 = a3[6];
  uint64_t v16 = *(void *)(v51 - 8);
  unsigned int v17 = *(_DWORD *)(v16 + 84);
  uint64_t v18 = *(void *)(v50 - 8);
  if (v17 <= v15) {
    unsigned int v19 = v15;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v20 = *(unsigned int *)(v18 + 84);
  uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v56 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v23 = *(void *)(v9 + 64);
  uint64_t v24 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v25 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v26 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v27 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v28 = *(void *)(v18 + 64);
  if (v20 > v19) {
    unsigned int v19 = *(_DWORD *)(v18 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v29 = *(void *)(*(void *)(v55 - 8) + 64) + v21;
  uint64_t v30 = v25 + v26;
  uint64_t v31 = *(void *)(*(void *)(v51 - 8) + 64) + v27;
  int v32 = a2 - v19;
  if (a2 <= v19) {
    goto LABEL_35;
  }
  uint64_t v33 = (v31 + ((v30 + ((v23 + v24 + ((v56 + v22 + (v29 & ~v21)) & ~v22)) & ~v24)) & ~v26)) & ~v27;
  uint64_t v34 = v33 + v28;
  char v35 = 8 * (v33 + v28);
  if (v34 > 3) {
    goto LABEL_18;
  }
  unsigned int v37 = ((v32 + ~(-1 << v35)) >> v35) + 1;
  if (HIWORD(v37))
  {
    int v36 = *(_DWORD *)((char *)a1 + v34);
    if (!v36) {
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  if (v37 > 0xFF)
  {
    int v36 = *(unsigned __int16 *)((char *)a1 + v34);
    if (!*(unsigned __int16 *)((char *)a1 + v34)) {
      goto LABEL_35;
    }
    goto LABEL_25;
  }
  if (v37 >= 2)
  {
LABEL_18:
    int v36 = *((unsigned __int8 *)a1 + v34);
    if (!*((unsigned char *)a1 + v34)) {
      goto LABEL_35;
    }
LABEL_25:
    int v38 = (v36 - 1) << v35;
    if (v34 > 3) {
      int v38 = 0;
    }
    if (v34)
    {
      if (v34 <= 3) {
        int v39 = v34;
      }
      else {
        int v39 = 4;
      }
      switch(v39)
      {
        case 2:
          int v40 = *a1;
          break;
        case 3:
          int v40 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v40 = *(_DWORD *)a1;
          break;
        default:
          int v40 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v40 = 0;
    }
    return v19 + (v40 | v38) + 1;
  }
LABEL_35:
  if (!v19) {
    return 0;
  }
  if (v5 == v19)
  {
    uint64_t v41 = v55;
    unint64_t v42 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v43 = a1;
    uint64_t v44 = *(unsigned int *)(v54 + 84);
    return v42(v43, v44, v41);
  }
  unint64_t v46 = ((unint64_t)a1 + v29) & ~v21;
  if (v7 == v19)
  {
    uint64_t v47 = *(uint64_t (**)(unint64_t))(v6 + 48);
    return v47(((unint64_t)a1 + v29) & ~v21);
  }
  else
  {
    if (v11 == v19)
    {
      unint64_t v42 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48);
      uint64_t v43 = (unsigned __int16 *)((v46 + v56 + v22) & ~v22);
      uint64_t v44 = v11;
      uint64_t v41 = v53;
      return v42(v43, v44, v41);
    }
    uint64_t v43 = (unsigned __int16 *)((((v46 + v56 + v22) & ~v22) + v23 + v24) & ~v24);
    if (v14 == v19)
    {
      unint64_t v42 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v13 + 48);
      uint64_t v44 = *(unsigned int *)(v13 + 84);
      uint64_t v41 = v52;
      return v42(v43, v44, v41);
    }
    uint64_t v43 = (unsigned __int16 *)(((unint64_t)v43 + v30) & ~v26);
    if (v17 == v19)
    {
      unint64_t v42 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48);
      uint64_t v44 = *(unsigned int *)(v16 + 84);
      uint64_t v41 = v51;
      return v42(v43, v44, v41);
    }
    unint64_t v48 = ((unint64_t)v43 + v31) & ~v27;
    uint64_t v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48);
    return v49(v48, v20, v50);
  }
}

void storeEnumTagSinglePayload for Publishers.Merge6(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v52 = v6;
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4[3] - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= v7) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v51 = a4[4];
  uint64_t v12 = *(void *)(v51 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(void *)(a4[5] - 8);
  if (v13 <= v11) {
    unsigned int v15 = v11;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v16 = *(void *)(a4[5] - 8);
  unsigned int v50 = *(_DWORD *)(v14 + 84);
  if (v50 <= v15) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v18 = *(void *)(a4[6] - 8);
  uint64_t v19 = v18;
  unsigned int v20 = *(_DWORD *)(v18 + 84);
  unsigned int v49 = v20;
  if (v20 <= v17) {
    unsigned int v20 = v17;
  }
  uint64_t v21 = *(void *)(a4[7] - 8);
  uint64_t v22 = *(void *)(v6 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = *(void *)(v8 + 64);
  uint64_t v25 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v26 = *(void *)(*(void *)(v51 - 8) + 64);
  uint64_t v27 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v28 = *(void *)(v14 + 64);
  uint64_t v29 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v30 = *(void *)(v18 + 64);
  uint64_t v31 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v32 = v22 + v23;
  uint64_t v33 = v28 + v29;
  uint64_t v34 = v30 + v31;
  size_t v35 = ((v34 + ((v28 + v29 + ((v26 + v27 + ((v24 + v25 + ((v22 + v23) & ~v23)) & ~v25)) & ~v27)) & ~v29)) & ~v31)
      + *(void *)(v21 + 64);
  if (*(_DWORD *)(v21 + 84) <= v20) {
    unsigned int v36 = v20;
  }
  else {
    unsigned int v36 = *(_DWORD *)(v21 + 84);
  }
  if (a3 <= v36)
  {
    int v37 = 0;
  }
  else if (v35 <= 3)
  {
    unsigned int v43 = ((a3 - v36 + ~(-1 << (8 * v35))) >> (8 * v35)) + 1;
    if (HIWORD(v43))
    {
      int v37 = 4;
    }
    else if (v43 >= 0x100)
    {
      int v37 = 2;
    }
    else
    {
      int v37 = v43 > 1;
    }
  }
  else
  {
    int v37 = 1;
  }
  if (v36 < a2)
  {
    unsigned int v38 = ~v36 + a2;
    if (v35 < 4)
    {
      int v39 = (v38 >> (8 * v35)) + 1;
      if (v35)
      {
        int v44 = v38 & ~(-1 << (8 * v35));
        bzero(a1, v35);
        if (v35 == 3)
        {
          *(_WORD *)a1 = v44;
          a1[2] = BYTE2(v44);
        }
        else if (v35 == 2)
        {
          *(_WORD *)a1 = v44;
        }
        else
        {
          *a1 = v44;
        }
      }
    }
    else
    {
      bzero(a1, v35);
      *(_DWORD *)a1 = v38;
      int v39 = 1;
    }
    switch(v37)
    {
      case 1:
        a1[v35] = v39;
        return;
      case 2:
        *(_WORD *)&a1[v35] = v39;
        return;
      case 3:
        goto LABEL_65;
      case 4:
        *(_DWORD *)&a1[v35] = v39;
        return;
      default:
        return;
    }
  }
  uint64_t v40 = ~v23;
  uint64_t v41 = ~v29;
  uint64_t v42 = ~v31;
  switch(v37)
  {
    case 1:
      a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_65:
      __break(1u);
      JUMPOUT(0x18C0766A8);
    case 4:
      *(_DWORD *)&a1[v35] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      if (v7 == v36)
      {
        uint64_t v45 = *(void (**)(unsigned char *))(v52 + 56);
        unint64_t v46 = a1;
        goto LABEL_37;
      }
      unint64_t v46 = (unsigned char *)((unint64_t)&a1[v32] & v40);
      if (v10 == v36)
      {
        uint64_t v45 = *(void (**)(unsigned char *))(v9 + 56);
        goto LABEL_61;
      }
      unint64_t v46 = (unsigned char *)((unint64_t)&v46[v24 + v25] & ~v25);
      if (v13 == v36)
      {
        uint64_t v45 = *(void (**)(unsigned char *))(v12 + 56);
        goto LABEL_37;
      }
      unint64_t v46 = (unsigned char *)((unint64_t)&v46[v26 + v27] & ~v27);
      if (v50 == v36)
      {
        uint64_t v45 = *(void (**)(unsigned char *))(v16 + 56);
LABEL_37:
LABEL_61:
        v45(v46);
        return;
      }
      unint64_t v46 = (unsigned char *)((unint64_t)&v46[v33] & v41);
      if (v49 == v36)
      {
        uint64_t v45 = *(void (**)(unsigned char *))(v19 + 56);
        goto LABEL_61;
      }
      unint64_t v47 = (unint64_t)&v46[v34] & v42;
      unint64_t v48 = *(void (**)(unint64_t))(v21 + 56);
      v48(v47);
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge7(uint64_t *a1, uint64_t *a2, void *a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v47 = *(void *)(a3[4] - 8);
  uint64_t v7 = a3[5];
  uint64_t v45 = *(void *)(v7 - 8);
  int v8 = *(_DWORD *)(v45 + 80);
  uint64_t v46 = a3[6];
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v44 = a3[7];
  uint64_t v41 = *(void *)(v44 - 8);
  int v9 = *(_DWORD *)(v41 + 80);
  uint64_t v42 = a3[8];
  uint64_t v39 = *(void *)(v42 - 8);
  int v10 = *(_DWORD *)(v39 + 80);
  uint64_t v11 = *(void *)(v5 + 64) + *(_DWORD *)(v47 + 80);
  uint64_t v40 = *(void *)(v4 + 64) + v6;
  uint64_t v12 = *(void *)(v47 + 64) + v8;
  uint64_t v13 = *(void *)(v45 + 64) + *(_DWORD *)(v43 + 80);
  uint64_t v14 = *(void *)(v43 + 64) + v9;
  uint64_t v15 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v47 + 80) | v8 | *(unsigned char *)(v43 + 80) | v9 | v10);
  if (v15 <= 7
    && ((*(void *)(*(void *)(v44 - 8) + 64)
       + *(_DWORD *)(v39 + 80)
       + ((v14
         + ((v13
           + ((v12 + ((v11 + (v40 & ~v6)) & ~(unint64_t)*(_DWORD *)(v47 + 80))) & ~(unint64_t)*(_DWORD *)(v45 + 80))) & ~(unint64_t)*(_DWORD *)(v43 + 80))) & ~(unint64_t)*(_DWORD *)(v41 + 80))) & ~(unint64_t)*(_DWORD *)(v39 + 80))
     + *(void *)(*(void *)(v42 - 8) + 64) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v47 + 80) | v8 | *(_DWORD *)(v43 + 80) | v9 | v10) & 0x100000) == 0)
  {
    uint64_t v19 = ~v6;
    unint64_t v32 = ~(unint64_t)*(_DWORD *)(v47 + 80);
    unint64_t v33 = ~(unint64_t)v8;
    uint64_t v34 = a3[4];
    unint64_t v35 = ~(unint64_t)*(_DWORD *)(v43 + 80);
    uint64_t v36 = *(void *)(*(void *)(v44 - 8) + 64) + *(_DWORD *)(v39 + 80);
    unint64_t v37 = ~(unint64_t)v9;
    unint64_t v38 = ~(unint64_t)*(_DWORD *)(v39 + 80);
    uint64_t v20 = a3[3];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    unint64_t v22 = ((unint64_t)v3 + v40) & v19;
    unint64_t v23 = ((unint64_t)a2 + v40) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v22, v23, v20);
    unint64_t v24 = (v23 + v11) & v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16))((v22 + v11) & v32, v24, v34);
    unint64_t v25 = (((v22 + v11) & v32) + v12) & v33;
    unint64_t v26 = (v24 + v12) & v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 16))(v25, v26, v7);
    unint64_t v27 = (v25 + v13) & v35;
    unint64_t v28 = (v26 + v13) & v35;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v43 + 16))(v27, v28, v46);
    unint64_t v29 = (v27 + v14) & v37;
    unint64_t v30 = (v28 + v14) & v37;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))(v29, v30, v44);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))((v29 + v36) & v38, (v30 + v36) & v38, v42);
  }
  else
  {
    uint64_t v18 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 40);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 24;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 40);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 24;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 24))(v39, v40);
  uint64_t v41 = *(void *)(a3[8] - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 24))((*(void *)(v36 + 40) + *(unsigned __int8 *)(v41 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (*(void *)(v36 + 40) + *(unsigned __int8 *)(v41 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 32);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 32;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 32);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 32;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v39, v40);
  uint64_t v41 = *(void *)(a3[8] - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 32))((*(void *)(v36 + 32) + *(unsigned __int8 *)(v41 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (*(void *)(v36 + 32) + *(unsigned __int8 *)(v41 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge7(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 24);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 40;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 24);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 40;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v39, v40);
  uint64_t v41 = *(void *)(a3[8] - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 40))((*(void *)(v36 + 24) + *(unsigned __int8 *)(v41 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), (*(void *)(v36 + 24) + *(unsigned __int8 *)(v41 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge7(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v58 = a3[2];
  uint64_t v56 = a3[3];
  uint64_t v57 = *(void *)(v58 - 8);
  unsigned int v5 = *(_DWORD *)(v57 + 84);
  uint64_t v6 = *(void *)(v56 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v57 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a3[5];
  uint64_t v54 = a3[4];
  uint64_t v10 = *(void *)(v54 - 8);
  unsigned int v55 = *(_DWORD *)(v10 + 84);
  if (v55 > v8) {
    unsigned int v8 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v11 = *(void *)(v9 - 8);
  unsigned int v53 = *(_DWORD *)(v11 + 84);
  if (v53 <= v8) {
    unsigned int v12 = v8;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v13 = *(void *)(a3[6] - 8);
  unsigned int v52 = *(_DWORD *)(v13 + 84);
  if (v52 <= v12) {
    unsigned int v14 = v12;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v49 = a3[8];
  uint64_t v50 = a3[7];
  uint64_t v15 = *(void *)(v50 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  unsigned int v51 = v16;
  if (v16 <= v14) {
    unsigned int v16 = v14;
  }
  uint64_t v17 = *(void *)(a3[8] - 8);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = v13;
  uint64_t v21 = *(void *)(*(void *)(v54 - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = *(void *)(v13 + 64);
  uint64_t v25 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v26 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v27 = *(void *)(v17 + 64);
  if (*(_DWORD *)(v17 + 84) <= v16) {
    unsigned int v28 = v16;
  }
  else {
    unsigned int v28 = *(_DWORD *)(v17 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v29 = *(void *)(*(void *)(v56 - 8) + 64);
  uint64_t v30 = *(void *)(*(void *)(v58 - 8) + 64) + v18;
  uint64_t v31 = *(void *)(*(void *)(v9 - 8) + 64) + v23;
  uint64_t v32 = v24 + v25;
  uint64_t v33 = *(void *)(*(void *)(v50 - 8) + 64) + v26;
  unsigned int v34 = a2 - v28;
  if (a2 <= v28) {
    goto LABEL_37;
  }
  uint64_t v35 = (v33 + ((v32 + ((v31 + ((v21 + v22 + ((v29 + v19 + (v30 & ~v18)) & ~v19)) & ~v22)) & ~v23)) & ~v25)) & ~v26;
  uint64_t v36 = v35 + v27;
  char v37 = 8 * (v35 + v27);
  if (v36 > 3) {
    goto LABEL_20;
  }
  unsigned int v39 = ((v34 + ~(-1 << v37)) >> v37) + 1;
  if (HIWORD(v39))
  {
    int v38 = *(_DWORD *)((char *)a1 + v36);
    if (!v38) {
      goto LABEL_37;
    }
    goto LABEL_27;
  }
  if (v39 > 0xFF)
  {
    int v38 = *(unsigned __int16 *)((char *)a1 + v36);
    if (!*(unsigned __int16 *)((char *)a1 + v36)) {
      goto LABEL_37;
    }
    goto LABEL_27;
  }
  if (v39 >= 2)
  {
LABEL_20:
    int v38 = *((unsigned __int8 *)a1 + v36);
    if (!*((unsigned char *)a1 + v36)) {
      goto LABEL_37;
    }
LABEL_27:
    int v40 = (v38 - 1) << v37;
    if (v36 > 3) {
      int v40 = 0;
    }
    if (v36)
    {
      if (v36 <= 3) {
        int v41 = v36;
      }
      else {
        int v41 = 4;
      }
      switch(v41)
      {
        case 2:
          int v42 = *a1;
          break;
        case 3:
          int v42 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v42 = *(_DWORD *)a1;
          break;
        default:
          int v42 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v42 = 0;
    }
    return v28 + (v42 | v40) + 1;
  }
LABEL_37:
  if (!v28) {
    return 0;
  }
  if (v5 == v28)
  {
    uint64_t v43 = v58;
    uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v57 + 48);
    uint64_t v7 = *(unsigned int *)(v57 + 84);
    goto LABEL_57;
  }
  unint64_t v46 = ((unint64_t)a1 + v30) & ~v18;
  if (v7 == v28)
  {
    uint64_t v43 = v56;
    uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48);
    a1 = (unsigned __int16 *)(((unint64_t)a1 + v30) & ~v18);
    goto LABEL_57;
  }
  uint64_t v7 = v55;
  if (v55 == v28)
  {
    uint64_t v43 = v54;
    uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48);
    a1 = (unsigned __int16 *)((v46 + v29 + v19) & ~v19);
    goto LABEL_57;
  }
  a1 = (unsigned __int16 *)((((v46 + v29 + v19) & ~v19) + v21 + v22) & ~v22);
  uint64_t v7 = v53;
  if (v53 == v28)
  {
    uint64_t v43 = v9;
    uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    goto LABEL_57;
  }
  unint64_t v47 = ((unint64_t)a1 + v31) & ~v23;
  if (v52 != v28)
  {
    a1 = (unsigned __int16 *)((v32 + v47) & ~v25);
    uint64_t v7 = v51;
    if (v51 != v28)
    {
      a1 = (unsigned __int16 *)(((unint64_t)a1 + v33) & ~v26);
      uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v17 + 48);
      uint64_t v7 = *(unsigned int *)(v17 + 84);
      uint64_t v43 = v49;
      return v44(a1, v7, v43);
    }
    uint64_t v44 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v43 = v50;
LABEL_57:
    return v44(a1, v7, v43);
  }
  unint64_t v48 = *(uint64_t (**)(unint64_t))(v20 + 48);
  return v48(v47);
}

void storeEnumTagSinglePayload for Publishers.Merge7(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v56 = *(void *)(a4[2] - 8);
  unsigned int v5 = *(_DWORD *)(v56 + 84);
  uint64_t v6 = *(void *)(a4[3] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v55 = v7;
  if (v7 <= v5) {
    unsigned int v7 = *(_DWORD *)(v56 + 84);
  }
  uint64_t v52 = a4[4];
  uint64_t v8 = *(void *)(v52 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  unsigned int v54 = v9;
  if (v9 <= v7) {
    unsigned int v9 = v7;
  }
  uint64_t v49 = a4[5];
  uint64_t v10 = *(void *)(v49 - 8);
  uint64_t v11 = *(void *)(a4[6] - 8);
  unsigned int v50 = *(_DWORD *)(v10 + 84);
  if (v50 > v9) {
    unsigned int v9 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v12 = *(void *)(a4[6] - 8);
  unsigned int v48 = *(_DWORD *)(v11 + 84);
  if (v48 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v46 = a4[7];
  uint64_t v14 = *(void *)(v46 - 8);
  unsigned int v47 = *(_DWORD *)(v14 + 84);
  if (v47 <= v13) {
    unsigned int v15 = v13;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v16 = *(void *)(a4[8] - 8);
  uint64_t v17 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v53 = *(void *)(a4[3] - 8);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v53 + 64);
  uint64_t v51 = *(void *)(v52 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v21 = *(void *)(v51 + 64);
  uint64_t v22 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v23 = *(void *)(*(void *)(v49 - 8) + 64);
  uint64_t v24 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = *(void *)(v11 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v27 = *(void *)(*(void *)(v46 - 8) + 64);
  uint64_t v28 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v29 = v17 + v18;
  uint64_t v30 = v23 + v24;
  uint64_t v31 = v25 + v26;
  size_t v32 = ((v27
        + v28
        + ((v25 + v26 + ((v23 + v24 + ((v21 + v22 + ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20)) & ~v22)) & ~v24)) & ~v26)) & ~v28)
      + *(void *)(v16 + 64);
  if (*(_DWORD *)(v16 + 84) <= v15) {
    unsigned int v33 = v15;
  }
  else {
    unsigned int v33 = *(_DWORD *)(v16 + 84);
  }
  if (a3 <= v33)
  {
    int v34 = 0;
  }
  else if (v32 <= 3)
  {
    unsigned int v39 = ((a3 - v33 + ~(-1 << (8 * v32))) >> (8 * v32)) + 1;
    if (HIWORD(v39))
    {
      int v34 = 4;
    }
    else if (v39 >= 0x100)
    {
      int v34 = 2;
    }
    else
    {
      int v34 = v39 > 1;
    }
  }
  else
  {
    int v34 = 1;
  }
  if (v33 < a2)
  {
    unsigned int v35 = ~v33 + a2;
    if (v32 < 4)
    {
      int v36 = (v35 >> (8 * v32)) + 1;
      if (v32)
      {
        int v40 = v35 & ~(-1 << (8 * v32));
        bzero(a1, v32);
        if (v32 == 3)
        {
          *(_WORD *)a1 = v40;
          a1[2] = BYTE2(v40);
        }
        else if (v32 == 2)
        {
          *(_WORD *)a1 = v40;
        }
        else
        {
          *a1 = v40;
        }
      }
    }
    else
    {
      bzero(a1, v32);
      *(_DWORD *)a1 = v35;
      int v36 = 1;
    }
    switch(v34)
    {
      case 1:
        a1[v32] = v36;
        return;
      case 2:
        *(_WORD *)&a1[v32] = v36;
        return;
      case 3:
        goto LABEL_67;
      case 4:
        *(_DWORD *)&a1[v32] = v36;
        return;
      default:
        return;
    }
  }
  uint64_t v37 = ~v18;
  uint64_t v38 = ~v26;
  switch(v34)
  {
    case 1:
      a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_67:
      __break(1u);
      JUMPOUT(0x18C077DF4);
    case 4:
      *(_DWORD *)&a1[v32] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v5 == v33)
      {
        int v41 = *(void (**)(unsigned char *))(v56 + 56);
        int v42 = a1;
        goto LABEL_55;
      }
      int v42 = (unsigned char *)((unint64_t)&a1[v29] & v37);
      if (v55 == v33)
      {
        int v41 = *(void (**)(unsigned char *))(v53 + 56);
        goto LABEL_55;
      }
      int v42 = (unsigned char *)((unint64_t)&v42[v19 + v20] & ~v20);
      if (v54 == v33)
      {
        uint64_t v43 = v51;
LABEL_54:
        int v41 = *(void (**)(unsigned char *))(v43 + 56);
        goto LABEL_55;
      }
      int v42 = (unsigned char *)((unint64_t)&v42[v21 + v22] & ~v22);
      if (v50 == v33)
      {
        uint64_t v43 = v10;
        goto LABEL_54;
      }
      unint64_t v44 = (unint64_t)&v42[v30] & ~v24;
      if (v48 != v33)
      {
        int v42 = (unsigned char *)((v31 + v44) & v38);
        if (v47 != v33)
        {
          int v42 = (unsigned char *)((unint64_t)&v42[v27 + v28] & ~v28);
          int v41 = *(void (**)(unsigned char *))(v16 + 56);
          goto LABEL_57;
        }
        int v41 = *(void (**)(unsigned char *))(v14 + 56);
LABEL_55:
LABEL_57:
        v41(v42);
        return;
      }
      uint64_t v45 = *(void (**)(unint64_t))(v12 + 56);
      v45(v44);
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Merge8(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v50 = a3[3];
  uint64_t v48 = *(void *)(v50 - 8);
  uint64_t v49 = a3[4];
  uint64_t v46 = *(void *)(v49 - 8);
  uint64_t v47 = a3[5];
  uint64_t v44 = *(void *)(v47 - 8);
  uint64_t v45 = a3[6];
  uint64_t v42 = *(void *)(v45 - 8);
  uint64_t v43 = a3[7];
  uint64_t v40 = *(void *)(v43 - 8);
  uint64_t v41 = a3[8];
  uint64_t v38 = *(void *)(v41 - 8);
  int v5 = *(_DWORD *)(v38 + 80);
  uint64_t v39 = a3[9];
  uint64_t v37 = *(void *)(v39 - 8);
  int v6 = *(_DWORD *)(v37 + 80);
  uint64_t v7 = *(void *)(v4 + 64) + *(_DWORD *)(v48 + 80);
  uint64_t v8 = *(void *)(v48 + 64) + *(_DWORD *)(v46 + 80);
  uint64_t v9 = *(void *)(v46 + 64) + *(_DWORD *)(v44 + 80);
  uint64_t v10 = *(void *)(v44 + 64) + *(_DWORD *)(v42 + 80);
  uint64_t v11 = *(void *)(v42 + 64) + *(_DWORD *)(v40 + 80);
  uint64_t v12 = *(void *)(v40 + 64) + v5;
  uint64_t v13 = (*(unsigned char *)(v48 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v46 + 80) | *(unsigned char *)(v44 + 80) | *(unsigned char *)(v42 + 80) | *(unsigned char *)(v40 + 80) | v5 | v6);
  if (v13 <= 7
    && ((*(void *)(*(void *)(v41 - 8) + 64)
       + *(_DWORD *)(v37 + 80)
       + ((v12
         + ((v11
           + ((v10
             + ((v9
               + ((v8 + (v7 & ~(unint64_t)*(_DWORD *)(v48 + 80))) & ~(unint64_t)*(_DWORD *)(v46 + 80))) & ~(unint64_t)*(_DWORD *)(v44 + 80))) & ~(unint64_t)*(_DWORD *)(v42 + 80))) & ~(unint64_t)*(_DWORD *)(v40 + 80))) & ~(unint64_t)*(_DWORD *)(v38 + 80))) & ~(unint64_t)*(_DWORD *)(v37 + 80))
     + *(void *)(*(void *)(v39 - 8) + 64) <= 0x18
    && ((*(_DWORD *)(v48 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v46 + 80) | *(_DWORD *)(v44 + 80) | *(_DWORD *)(v42 + 80) | *(_DWORD *)(v40 + 80) | v5 | v6) & 0x100000) == 0)
  {
    unint64_t v18 = ~(unint64_t)*(_DWORD *)(v48 + 80);
    unint64_t v20 = ~(unint64_t)*(_DWORD *)(v46 + 80);
    unint64_t v32 = ~(unint64_t)*(_DWORD *)(v44 + 80);
    unint64_t v33 = ~(unint64_t)*(_DWORD *)(v42 + 80);
    unint64_t v34 = ~(unint64_t)*(_DWORD *)(v40 + 80);
    unint64_t v35 = ~(unint64_t)v5;
    uint64_t v36 = *(void *)(*(void *)(v41 - 8) + 64) + *(_DWORD *)(v37 + 80);
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    unint64_t v21 = ((unint64_t)a1 + v7) & v18;
    unint64_t v22 = ((unint64_t)a2 + v7) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v48 + 16))(v21, v22, v50);
    unint64_t v23 = (v22 + v8) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 16))((v21 + v8) & v20, v23, v49);
    unint64_t v24 = (v23 + v9) & v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))((((v21 + v8) & v20) + v9) & v32, v24, v47);
    unint64_t v25 = (((((v21 + v8) & v20) + v9) & v32) + v10) & v33;
    unint64_t v26 = (v24 + v10) & v33;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v42 + 16))(v25, v26, v45);
    unint64_t v27 = (v25 + v11) & v34;
    unint64_t v28 = (v26 + v11) & v34;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16))(v27, v28, v43);
    unint64_t v29 = (v27 + v12) & v35;
    unint64_t v30 = (v28 + v12) & v35;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v29, v30, v41);
    uint64_t v17 = a1;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))((v29 + v36) & ~(unint64_t)v6, (v30 + v36) & ~(unint64_t)v6, v39);
  }
  else
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v17;
}

uint64_t assignWithCopy for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 40);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 24;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 40);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 24;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 24))(v39, v40);
  uint64_t v41 = *(void *)(v36 + 40);
  uint64_t v42 = *(void *)(a3[8] - 8);
  uint64_t v43 = v42 + 24;
  uint64_t v44 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = (v45 + v39) & ~v44;
  uint64_t v47 = (v45 + v40) & ~v44;
  (*(void (**)(uint64_t, uint64_t))(v42 + 24))(v46, v47);
  uint64_t v48 = *(void *)(a3[9] - 8);
  (*(void (**)(unint64_t, unint64_t))(v48 + 24))((*(void *)(v43 + 40) + *(unsigned __int8 *)(v48 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80), (*(void *)(v43 + 40) + *(unsigned __int8 *)(v48 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
  return a1;
}

uint64_t initializeWithTake for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 32);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 32;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 32);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 32;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 32))(v39, v40);
  uint64_t v41 = *(void *)(v36 + 32);
  uint64_t v42 = *(void *)(a3[8] - 8);
  uint64_t v43 = v42 + 32;
  uint64_t v44 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = (v45 + v39) & ~v44;
  uint64_t v47 = (v45 + v40) & ~v44;
  (*(void (**)(uint64_t, uint64_t))(v42 + 32))(v46, v47);
  uint64_t v48 = *(void *)(a3[9] - 8);
  (*(void (**)(unint64_t, unint64_t))(v48 + 32))((*(void *)(v43 + 32) + *(unsigned __int8 *)(v48 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80), (*(void *)(v43 + 32) + *(unsigned __int8 *)(v48 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
  return a1;
}

uint64_t assignWithTake for Publishers.Merge8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24);
  uint64_t v21 = *(void *)(a3[5] - 8);
  uint64_t v22 = v21 + 40;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  uint64_t v25 = (v24 + v18) & ~v23;
  uint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v22 + 24);
  uint64_t v28 = *(void *)(a3[6] - 8);
  uint64_t v29 = v28 + 40;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v27 + v30;
  uint64_t v32 = (v31 + v25) & ~v30;
  uint64_t v33 = (v31 + v26) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v28 + 40))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 24);
  uint64_t v35 = *(void *)(a3[7] - 8);
  uint64_t v36 = v35 + 40;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = v34 + v37;
  uint64_t v39 = (v38 + v32) & ~v37;
  uint64_t v40 = (v38 + v33) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v39, v40);
  uint64_t v41 = *(void *)(v36 + 24);
  uint64_t v42 = *(void *)(a3[8] - 8);
  uint64_t v43 = v42 + 40;
  uint64_t v44 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v45 = v41 + v44;
  uint64_t v46 = (v45 + v39) & ~v44;
  uint64_t v47 = (v45 + v40) & ~v44;
  (*(void (**)(uint64_t, uint64_t))(v42 + 40))(v46, v47);
  uint64_t v48 = *(void *)(a3[9] - 8);
  (*(void (**)(unint64_t, unint64_t))(v48 + 40))((*(void *)(v43 + 24) + *(unsigned __int8 *)(v48 + 80) + v46) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80), (*(void *)(v43 + 24) + *(unsigned __int8 *)(v48 + 80) + v47) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Merge8(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v59 = a3[2];
  uint64_t v56 = a3[3];
  uint64_t v58 = *(void *)(v59 - 8);
  unsigned int v5 = *(_DWORD *)(v58 + 84);
  uint64_t v6 = *(void *)(v56 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v57 = v7;
  if (v7 <= v5) {
    unsigned int v7 = *(_DWORD *)(v58 + 84);
  }
  uint64_t v55 = a3[4];
  uint64_t v8 = *(void *)(v55 - 8);
  if (*(_DWORD *)(v8 + 84) <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v53 = a3[5];
  uint64_t v10 = *(void *)(v53 - 8);
  uint64_t v51 = a3[6];
  uint64_t v11 = *(void *)(v51 - 8);
  unsigned int v54 = *(_DWORD *)(v10 + 84);
  if (v54 > v9) {
    unsigned int v9 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v52 = *(_DWORD *)(v11 + 84);
  if (v52 > v9) {
    unsigned int v9 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v49 = a3[7];
  uint64_t v12 = *(void *)(v49 - 8);
  unsigned int v50 = *(_DWORD *)(v12 + 84);
  if (v50 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v46 = a3[9];
  uint64_t v47 = a3[8];
  uint64_t v14 = *(void *)(v47 - 8);
  uint64_t v15 = *(void *)(v46 - 8);
  unsigned int v48 = *(_DWORD *)(v14 + 84);
  if (v48 <= v13) {
    unsigned int v16 = v13;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v17 = *(void *)(a3[9] - 8);
  uint64_t v18 = *(unsigned int *)(v15 + 84);
  uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v61 = *(void *)(*(void *)(v56 - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v60 = *(void *)(*(void *)(v55 - 8) + 64);
  uint64_t v21 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = *(void *)(v11 + 64);
  uint64_t v24 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v25 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v26 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v27 = *(void *)(v15 + 64);
  if (v18 <= v16) {
    unsigned int v28 = v16;
  }
  else {
    unsigned int v28 = *(_DWORD *)(v15 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v29 = *(void *)(*(void *)(v59 - 8) + 64) + v19;
  uint64_t v30 = *(void *)(*(void *)(v53 - 8) + 64) + v22;
  uint64_t v31 = v23 + v24;
  uint64_t v32 = *(void *)(*(void *)(v49 - 8) + 64) + v25;
  uint64_t v33 = *(void *)(*(void *)(v47 - 8) + 64) + v26;
  if (a2 <= v28) {
    goto LABEL_37;
  }
  uint64_t v34 = ((v33
        + ((v32 + ((v31 + ((v30 + ((v60 + v21 + ((v61 + v20 + (v29 & ~v19)) & ~v20)) & ~v21)) & ~v22)) & ~v24)) & ~v25)) & ~v26)
      + v27;
  char v35 = 8 * v34;
  if (v34 <= 3)
  {
    unsigned int v37 = ((a2 - v28 + ~(-1 << v35)) >> v35) + 1;
    if (HIWORD(v37))
    {
      int v36 = *(_DWORD *)((char *)a1 + v34);
      if (!v36) {
        goto LABEL_37;
      }
      goto LABEL_29;
    }
    if (v37 > 0xFF)
    {
      int v36 = *(unsigned __int16 *)((char *)a1 + v34);
      if (!*(unsigned __int16 *)((char *)a1 + v34)) {
        goto LABEL_37;
      }
      goto LABEL_29;
    }
    if (v37 < 2)
    {
LABEL_37:
      if (v28)
      {
        if (v5 == v28)
        {
          uint64_t v39 = v59;
          uint64_t v40 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v58 + 48);
          uint64_t v41 = *(unsigned int *)(v58 + 84);
          goto LABEL_40;
        }
        unint64_t v43 = ((unint64_t)a1 + v29) & ~v19;
        if (v57 == v28)
        {
          uint64_t v44 = *(uint64_t (**)(unint64_t))(*(void *)(v56 - 8) + 48);
          unint64_t v45 = v43;
        }
        else if (*(_DWORD *)(v8 + 84) == v28)
        {
          uint64_t v44 = *(uint64_t (**)(unint64_t))(*(void *)(v55 - 8) + 48);
          unint64_t v45 = (v43 + v61 + v20) & ~v20;
        }
        else
        {
          a1 = (unsigned __int16 *)((((v43 + v61 + v20) & ~v20) + v60 + v21) & ~v21);
          uint64_t v41 = v54;
          if (v54 == v28)
          {
            uint64_t v40 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48);
            uint64_t v39 = v53;
LABEL_40:
            return v40(a1, v41, v39);
          }
          unint64_t v45 = ((unint64_t)a1 + v30) & ~v22;
          if (v52 == v28)
          {
            uint64_t v44 = *(uint64_t (**)(unint64_t))(*(void *)(v51 - 8) + 48);
            return v44(v45);
          }
          unint64_t v45 = (v31 + v45) & ~v24;
          if (v50 == v28)
          {
            uint64_t v44 = *(uint64_t (**)(unint64_t))(v12 + 48);
            return v44(v45);
          }
          unint64_t v45 = (v32 + v45) & ~v25;
          if (v48 != v28)
          {
            a1 = (unsigned __int16 *)((v33 + v45) & ~v26);
            uint64_t v40 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v17 + 48);
            uint64_t v41 = v18;
            uint64_t v39 = v46;
            return v40(a1, v41, v39);
          }
          uint64_t v44 = *(uint64_t (**)(unint64_t))(v14 + 48);
        }
        return v44(v45);
      }
      return 0;
    }
  }
  int v36 = *((unsigned __int8 *)a1 + v34);
  if (!*((unsigned char *)a1 + v34)) {
    goto LABEL_37;
  }
LABEL_29:
  int v38 = (v36 - 1) << v35;
  if (v34 > 3) {
    int v38 = 0;
  }
  if (v34)
  {
    if (v34 > 3) {
      LODWORD(v34) = 4;
    }
    switch((int)v34)
    {
      case 2:
        LODWORD(v34) = *a1;
        break;
      case 3:
        LODWORD(v34) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v34) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v34) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v28 + (v34 | v38) + 1;
}

void storeEnumTagSinglePayload for Publishers.Merge8(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v61 = *(void *)(a4[2] - 8);
  unsigned int v4 = *(_DWORD *)(v61 + 84);
  uint64_t v5 = *(void *)(a4[3] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a4[4] - 8);
  unsigned int v60 = v6;
  if (v6 <= v4) {
    unsigned int v6 = *(_DWORD *)(v61 + 84);
  }
  unsigned int v59 = *(_DWORD *)(v7 + 84);
  if (v59 > v6) {
    unsigned int v6 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v8 = a4[6];
  uint64_t v55 = a4[5];
  uint64_t v9 = *(void *)(v55 - 8);
  unsigned int v56 = *(_DWORD *)(v9 + 84);
  if (v56 > v6) {
    unsigned int v6 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(void *)(a4[7] - 8);
  unsigned int v53 = *(_DWORD *)(v10 + 84);
  if (v53 > v6) {
    unsigned int v6 = *(_DWORD *)(*(void *)(v8 - 8) + 84);
  }
  uint64_t v12 = *(void *)(a4[7] - 8);
  unsigned int v52 = *(_DWORD *)(v11 + 84);
  if (v52 > v6) {
    unsigned int v6 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v50 = a4[8];
  uint64_t v13 = *(void *)(v50 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  unsigned int v51 = v14;
  if (v14 <= v6) {
    unsigned int v14 = v6;
  }
  uint64_t v15 = *(void *)(a4[9] - 8);
  uint64_t v58 = *(void *)(a4[3] - 8);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v57 = *(void *)(a4[4] - 8);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = *(void *)(v7 + 64);
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = *(void *)(v58 + 64);
  uint64_t v22 = *(void *)(v54 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = *(void *)(v11 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v27 = *(void *)(*(void *)(v50 - 8) + 64);
  uint64_t v28 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v29 = *(void *)(*(void *)(a4[2] - 8) + 64) + v16;
  uint64_t v30 = v18;
  uint64_t v31 = v22 + v23;
  uint64_t v32 = *(void *)(v10 + 64) + v24;
  uint64_t v33 = v25 + v26;
  uint64_t v34 = v27 + v28;
  size_t v35 = ((v27
        + v28
        + ((v25
          + v26
          + ((v32 + ((v22 + v23 + ((v18 + v19 + ((v21 + v17 + (v29 & ~v16)) & ~v17)) & ~v19)) & ~v23)) & ~v24)) & ~v26)) & ~v28)
      + *(void *)(v15 + 64);
  if (*(_DWORD *)(v15 + 84) <= v14) {
    unsigned int v36 = v14;
  }
  else {
    unsigned int v36 = *(_DWORD *)(v15 + 84);
  }
  if (a3 > v36)
  {
    unsigned int v38 = a2;
    if (v35 <= 3)
    {
      unsigned int v45 = ((a3 - v36 + ~(-1 << (8 * v35))) >> (8 * v35)) + 1;
      if (HIWORD(v45))
      {
        int v37 = 4;
      }
      else if (v45 >= 0x100)
      {
        int v37 = 2;
      }
      else
      {
        int v37 = v45 > 1;
      }
    }
    else
    {
      int v37 = 1;
    }
  }
  else
  {
    int v37 = 0;
    unsigned int v38 = a2;
  }
  if (v36 < v38)
  {
    unsigned int v39 = ~v36 + v38;
    if (v35 < 4)
    {
      int v40 = (v39 >> (8 * v35)) + 1;
      if (v35)
      {
        int v46 = v39 & ~(-1 << (8 * v35));
        bzero(a1, v35);
        if (v35 == 3)
        {
          *(_WORD *)a1 = v46;
          a1[2] = BYTE2(v46);
        }
        else if (v35 == 2)
        {
          *(_WORD *)a1 = v46;
        }
        else
        {
          *a1 = v46;
        }
      }
    }
    else
    {
      bzero(a1, v35);
      *(_DWORD *)a1 = v39;
      int v40 = 1;
    }
    switch(v37)
    {
      case 1:
        a1[v35] = v40;
        return;
      case 2:
        *(_WORD *)&a1[v35] = v40;
        return;
      case 3:
        goto LABEL_73;
      case 4:
        *(_DWORD *)&a1[v35] = v40;
        return;
      default:
        return;
    }
  }
  uint64_t v41 = ~v16;
  uint64_t v42 = ~v24;
  uint64_t v43 = ~v26;
  uint64_t v44 = ~v28;
  switch(v37)
  {
    case 1:
      a1[v35] = 0;
      if (!v38) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v35] = 0;
      if (!v38) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_73:
      __break(1u);
      JUMPOUT(0x18C0798D4);
    case 4:
      *(_DWORD *)&a1[v35] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!v38) {
        return;
      }
LABEL_36:
      if (v4 == v36)
      {
        uint64_t v47 = *(void (**)(unsigned char *))(v61 + 56);
        unsigned int v48 = a1;
        goto LABEL_55;
      }
      unsigned int v48 = (unsigned char *)((unint64_t)&a1[v29] & v41);
      if (v60 == v36)
      {
        uint64_t v47 = *(void (**)(unsigned char *))(v58 + 56);
        goto LABEL_55;
      }
      unsigned int v48 = (unsigned char *)((unint64_t)&v48[v21 + v17] & ~v17);
      if (v59 == v36)
      {
        uint64_t v49 = v57;
LABEL_54:
        uint64_t v47 = *(void (**)(unsigned char *))(v49 + 56);
LABEL_55:
        goto LABEL_72;
      }
      unsigned int v48 = (unsigned char *)((unint64_t)&v48[v30 + v19] & ~v19);
      if (v56 == v36)
      {
        uint64_t v49 = v54;
        goto LABEL_54;
      }
      unsigned int v48 = (unsigned char *)((unint64_t)&v48[v31] & ~v23);
      if (v53 == v36)
      {
        uint64_t v47 = *(void (**)(unsigned char *))(v20 + 56);
      }
      else
      {
        unsigned int v48 = (unsigned char *)((unint64_t)&v48[v32] & v42);
        if (v52 == v36)
        {
          uint64_t v47 = *(void (**)(unsigned char *))(v12 + 56);
        }
        else
        {
          unsigned int v48 = (unsigned char *)((unint64_t)&v48[v33] & v43);
          if (v51 == v36)
          {
            uint64_t v47 = *(void (**)(unsigned char *))(v13 + 56);
          }
          else
          {
            unsigned int v48 = (unsigned char *)((unint64_t)&v48[v34] & v44);
            uint64_t v47 = *(void (**)(unsigned char *))(v15 + 56);
          }
        }
      }
LABEL_72:
      v47(v48);
      return;
  }
}

void *assignWithCopy for Publishers._Merged.Side(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for Publishers._Merged.Side(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t partial apply for closure #1 in Publishers._Merged.receive(completion:_:)()
{
  return (*(uint64_t (**)(void, void))(v0[5] + 56))(v0[6], v0[4]);
}

uint64_t Result.Publisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for Result();

  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.publisher.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  uint64_t v6 = type metadata accessor for Result();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a2, v4, v6);
}

uint64_t Result.Publisher.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Result.Publisher.init(catching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v12 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v12);
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *))partial apply for closure #1 in Result.Publisher.init(catching:), (uint64_t)&v15[-v13]);
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  return _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF((void (*)(char *))partial apply for closure #2 in Result.Publisher.init(catching:), v12, a6);
}

uint64_t closure #2 in Result.Publisher.init(catching:)()
{
  return swift_dynamicCast();
}

uint64_t _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v3, v7);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 32))(a3, v3, *(void *)(a2 + 16));
    type metadata accessor for Result();
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t *Result.Publisher.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  return Result.Publisher.Inner.init(downstream:output:)(a1, a2);
}

uint64_t Result.Publisher.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v0;
  uint64_t v8 = *(void *)(v1 + 80);
  getContiguousArrayStorageType<A>(for:)(v8, v8);
  uint64_t v9 = *(void *)(v8 - 8);
  swift_allocObject();
  swift_retain();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v0 + *(void *)(*v0 + 120), v8);
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v14 = v10;
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  type metadata accessor for Array();
  swift_getWitnessTable();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

void Result.Publisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 1701015119;
  a1[1] = 0xE400000000000000;
}

uint64_t Result.Publisher.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))((char *)&v8 - v4, 1, 1, v1);
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 112);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v6, v5, v2);
  return swift_endAccess();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return 1701015119;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return Result.Publisher.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Result<A, B>.Publisher.Inner<A1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Result<A, B>.Publisher.Inner<A1>()
{
  return Result.Publisher.Inner.cancel()();
}

uint64_t static Result.Publisher<>.== infix(_:_:)()
{
  return MEMORY[0x1F4185F78]();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Result<A, B>.Publisher()
{
  return static Result.Publisher<>.== infix(_:_:)();
}

uint64_t Result.Publisher<>.contains(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  uint64_t v20 = a4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = type metadata accessor for Result();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, v8);
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v18;
  uint64_t v24 = v7;
  uint64_t v25 = v19;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in Result.Publisher<>.contains(_:), v8, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Result.publisher.getter(v12, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t partial apply for closure #1 in Result.Publisher<>.contains(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  type metadata accessor for Result();
  return swift_storeEnumTagMultiPayload();
}

uint64_t Result.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *))partial apply for closure #1 in Result.Publisher.allSatisfy(_:), a4);
}

uint64_t Result.Publisher.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryAllSatisfy(_:)(a1, a2, a3, (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:), a4);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t Result.Publisher.collect()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = type metadata accessor for Result();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - v7;
  type metadata accessor for Array();
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v14, v5);
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in Result.Publisher.collect(), v5, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  Result.publisher.getter(v9, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t closure #1 in Result.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v6 = *(void *)(a2 - 8);
  swift_allocObject();
  uint64_t v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t result = v7;
  _finalizeUninitializedArray<A>(_:)();
  *a3 = v7;
  return result;
}

uint64_t partial apply for closure #1 in Result.Publisher.collect()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in Result.Publisher.collect()(a1, *(void *)(v2 + 16), a2);
}

uint64_t Result.Publisher.tryMin(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryMin(by:)(a1, a2, a3, (void (*)(unsigned char *))partial apply for closure #1 in Result.Publisher.tryMin(by:), a4);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryMin(by:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in Result.Publisher.tryMin(by:)(a1, a2);
}

{
  uint64_t v2;

  return closure #1 in Result.Publisher.tryMin(by:)(*(void *)(v2 + 40), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), a1, a2);
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a3, v3);
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 24) - 8) + 32))(a2, v3, *(void *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t Result.Publisher.tryMax(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryMin(by:)(a1, a2, a3, (void (*)(unsigned char *))partial apply for closure #1 in Result.Publisher.tryMin(by:), a4);
}

uint64_t Result.Publisher.tryMin(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(unsigned char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = v5;
  uint64_t v18 = a5;
  uint64_t v11 = *(void *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v17 - v14;
  uint64_t v19 = v11;
  long long v20 = *(_OWORD *)(a3 + 24);
  uint64_t v21 = v7;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC(a4, (uint64_t)&v17 - v14);
  Result.publisher.getter(v12, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in Result.Publisher.tryMin(by:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v26 = v15;
  uint64_t v16 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v24 - v17, a1, v16);
  uint64_t v19 = v28;
  _ss6ResultOsRi_zrlE3getxyq_YKF(v16, (uint64_t)v14, a6);
  if (!v19) {
    return v25(a6, a6);
  }
  long long v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v20(v12, v14, a4);
  uint64_t v21 = swift_allocError();
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(v22, v12, a4);
  *uint64_t v27 = v21;
  return result;
}

uint64_t Result.Publisher.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.allSatisfy(_:)(a1, a2, a3, (void (*)(char *))partial apply for closure #1 in Result.Publisher.allSatisfy(_:), a4);
}

uint64_t Result.Publisher.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a2;
  long long v20 = a4;
  uint64_t v18 = a1;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v18;
  uint64_t v26 = v19;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF(v20, v9, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.allSatisfy(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result & 1;
  return result;
}

uint64_t Result.Publisher.tryContains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return Result.Publisher.tryAllSatisfy(_:)(a1, a2, a3, (void (*)(char *))partial apply for closure #1 in Result.Publisher.tryAllSatisfy(_:), a4);
}

uint64_t Result.Publisher.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v18 - v14, v5, v12);
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  Result.tryMap<A>(_:)(v19, v12, MEMORY[0x1E4FBB390], &v25);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  char v17 = v26;
  *(void *)a5 = v25;
  *(unsigned char *)(a5 + 8) = v17;
  return result;
}

uint64_t Result.Publisher.count()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v17 = a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = type metadata accessor for Result();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3, v7);
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in Optional.Publisher.count(), v7, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  Result.publisher.getter(v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t Result.Publisher.ignoreOutput()@<X0>(unsigned char *a1@<X8>)
{
  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Result.Publisher.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = a4;
  uint64_t v25 = v8;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF((void (*)(char *))partial apply for closure #1 in Result.Publisher.map<A>(_:), v9, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.map<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Result.Publisher.tryMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a5;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = a4;
  uint64_t v25 = v8;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  Result.tryMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Result.Publisher.tryMap<A>(_:), v9, a4, v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryMap<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Result.Publisher.mapError<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v20 = a3[4];
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v14 = type metadata accessor for Result();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  uint64_t v27 = a4;
  uint64_t v28 = v20;
  uint64_t v29 = a5;
  uint64_t v30 = v22;
  uint64_t v31 = v23;
  _ss6ResultOsRi_zrlE8mapErroryAByxqd__Gqd__q_XEs0C0Rd__lF((void (*)(char *))partial apply for closure #1 in Result.Publisher.mapError<A>(_:), v10, (uint64_t)v17);
  Result.publisher.getter(v14, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t partial apply for closure #1 in Result.Publisher.mapError<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t Result.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Result.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *))partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Result.Publisher.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  uint64_t v23 = a6;
  uint64_t v7 = a4[2];
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v19 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v14 = type metadata accessor for Result();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (void *)((char *)v19 - v16);
  (*(void (**)(char *, void, uint64_t))(v11 + 16))(v13, v19[1], v10);
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  uint64_t v26 = a5;
  uint64_t v27 = v9;
  uint64_t v28 = v20;
  uint64_t v29 = v22;
  uint64_t v30 = v21;
  Result.tryMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Result.Publisher.tryReduce<A>(_:_:), v10, a5, v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Result.publisher.getter(v14, v23);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryReduce<A>(_:_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 64), a1);
}

uint64_t Result.Publisher.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - v11;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v18 - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v19;
  uint64_t v26 = v20;
  Result.tryMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Result.Publisher.tryRemoveDuplicates(by:), v9, v6, v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Result.publisher.getter(v13, v21);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t partial apply for closure #1 in Result.Publisher.tryRemoveDuplicates(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(a1, a1);
  if (!v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  }
  return result;
}

uint64_t Result.Publisher.replaceError(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v16 - v13, v4, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    Result.Publisher.init(_:)((uint64_t)v10, v7, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    return Result.Publisher.init(_:)((uint64_t)v10, v7, a3);
  }
}

uint64_t Result.Publisher.replaceEmpty(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Result.Publisher.retry(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t Result.Publisher.scan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Result.Publisher.reduce<A>(_:_:)(a1, a2, a3, a4, a5, (void (*)(char *))partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:), a6);
}

uint64_t Result.Publisher.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a6;
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v25 = a7;
  uint64_t v9 = a4[2];
  uint64_t v8 = a4[3];
  uint64_t v10 = a4[4];
  uint64_t v11 = type metadata accessor for Result();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = type metadata accessor for Result();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  uint64_t v28 = a5;
  uint64_t v29 = v10;
  uint64_t v30 = v21;
  uint64_t v31 = v23;
  uint64_t v32 = v22;
  _ss6ResultO3mapyAByqd__q_Gqd__xXERi_d__lF(v24, v11, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  Result.publisher.getter(v15, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t partial apply for closure #1 in Result.Publisher.reduce<A>(_:_:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 48))(*(void *)(v1 + 64), a1);
}

uint64_t Result.Publisher.tryScan<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v20 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - v15;
  long long v21 = *(_OWORD *)(a4 + 16);
  uint64_t v17 = *(void *)(a4 + 32);
  uint64_t v22 = a5;
  uint64_t v23 = v17;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = v7;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *))partial apply for closure #1 in Result.Publisher.tryScan<A>(_:_:), (uint64_t)v16);
  Result.publisher.getter(v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t closure #1 in Result.Publisher.tryScan<A>(_:_:)@<X0>(void (*a1)(uint64_t, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t *a8)
{
  uint64_t v35 = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v30 = a7;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v34 = v16;
  uint64_t v17 = type metadata accessor for Result();
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v30 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v20, v35, v17);
  uint64_t v25 = v36;
  _ss6ResultOsRi_zrlE3getxyq_YKF(v17, (uint64_t)v15, (uint64_t)v23);
  if (v25)
  {
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v13, v15, a6);
    uint64_t v27 = swift_allocError();
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v28, v13, a6);
    *a8 = v27;
  }
  else
  {
    v33(v31, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in Result.Publisher.tryScan<A>(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Result.Publisher.tryScan<A>(_:_:)(*(void (**)(uint64_t, char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 16), *(void *)(v2 + 24), a2, a1);
}

uint64_t Result.Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  return Result.Publisher.init(catching:)((uint64_t)partial apply for closure #1 in Result.Publisher<>.setFailureType<A>(to:), (uint64_t)&v5, v6, a2, a3, a4);
}

uint64_t closure #1 in Result.Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v9 - v5, a1, v4);
  return _ss6ResultOsRi_zrlE3getxyq_YKF(v4, v7, a2);
}

uint64_t partial apply for closure #1 in Result.Publisher<>.setFailureType<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Result.Publisher<>.setFailureType<A>(to:)(*(void *)(v1 + 40), a1);
}

void *initializeBufferWithCopyOfBuffer for Result.Publisher(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

unsigned __int8 *assignWithCopy for Result.Publisher(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t initializeWithTake for Result.Publisher(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for Result.Publisher(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Result.Publisher(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for Result.Publisher(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x18C07D6E4);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t partial apply for closure #1 in Result.Publisher.init(catching:)(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t partial apply for closure #2 in Result.Publisher.init(catching:)()
{
  return closure #2 in Result.Publisher.init(catching:)();
}

uint64_t type metadata completion function for Publishers.Invoke1I1O.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Invoke1I1O.Inner.init(downstream:invoke:target:));
}

void Publishers.Invoke1I1O.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x4931656B6F766E49;
  a1[1] = 0xEA00000000004F31;
}

uint64_t *Publishers.Invoke1I1O.Inner.init(downstream:invoke:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 160)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 168)) = 0;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 176);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  uint64_t v11 = *(void *)(*v4 + 184);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  _DWORD *v12 = 0;
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 104) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 136), a1);
  int v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 144));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 152), a4);
  return v4;
}

uint64_t *Publishers.Invoke1I1O.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 104) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 152));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 176));
  return v0;
}

uint64_t Publishers.Invoke1I1O.Inner.__deallocating_deinit()
{
  return Publishers.Invoke1I1O.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.Invoke1I1O.Inner.deinit);
}

uint64_t type metadata accessor for Publishers.Invoke1I1O.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for Publishers.Invoke2I1O.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 176);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    outlined init with copy of Subscription(v3, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t Publishers.Invoke1I1O.Inner.cancel()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 176);
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    outlined init with copy of Subscription(v1, (uint64_t)&v5);
    uint64_t v3 = *((void *)&v6 + 1);
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v5, v1);
  return swift_endAccess();
}

uint64_t Publishers.Invoke1I1O.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v12);
  uint64_t v5 = v13;
  outlined destroy of Subscription?((uint64_t)v12);
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v12, v4);
    swift_endAccess();
    uint64_t v13 = v3;
    int v14 = &protocol witness table for Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>;
    v12[0] = v1;
    uint64_t v9 = *(void *)(v3 + 128);
    uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 104);
    swift_retain();
    v10(v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
}

void Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + v4));
  uint64_t v5 = *(void *)(*(void *)v2 + 160);
  uint64_t v6 = *(void *)(v2 + v5);
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + v5) = v8;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v2 + v4));
    uint64_t v9 = (void (*)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(uint64_t (**)(uint64_t))(v2 + *(void *)(*(void *)v2 + 144)))(v2+ *(void *)(*(void *)v2 + 152));
    swift_retain();
    v9(a1, partial apply for closure #1 in Publishers.Invoke1I1O.Inner.receive(_:), v2);
    swift_release();
    swift_release();
  }
}

void closure #1 in Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v48 = a2;
  uint64_t v50 = a1;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 112);
  uint64_t v6 = *(void *)(*a3 + 128);
  uint64_t v51 = *(void *)(*a3 + 104);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v43 = (char *)&v42 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v42 = (char *)&v42 - v13;
  uint64_t v14 = *(void *)(v4 + 96);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v17);
  BOOL v22 = (char *)&v42 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v50, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    uint64_t v23 = v51;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    uint64_t v25 = v46;
    uint64_t v24 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v12, v48, v47);
    uint64_t v26 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v12, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
    }
    else
    {
      uint64_t v36 = v42;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v42, v12, v5);
      int v37 = v43;
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v43, v36, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v37, 0, 1, v5);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 56))(v37, v23, v6);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v45);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v5);
    }
    return;
  }
  uint64_t v27 = v49;
  uint64_t v50 = v20;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, v14);
  uint64_t v28 = v51;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v22, v51, v6);
  uint64_t v30 = *(void *)(*a3 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)a3 + v30));
  uint64_t v31 = *(void *)(*a3 + 160);
  uint64_t v32 = *(uint64_t *)((char *)a3 + v31);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(uint64_t *)((char *)a3 + v31) = v34;
  if (*((unsigned char *)a3 + *(void *)(*a3 + 168)) == 1 && !v34)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
    uint64_t v35 = v43;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v43, 1, 1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 56))(v35, v28, v6);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v45);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v22, v14);
    return;
  }
  uint64_t v38 = v50;
  if (v29 != 0x8000000000000000)
  {
    if ((v29 & 0x8000000000000000) == 0)
    {
      if (!v29)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
        (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
        return;
      }
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    return;
  }
LABEL_12:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
  uint64_t v39 = (uint64_t)a3 + *(void *)(*a3 + 176);
  swift_beginAccess();
  if (*(void *)(v39 + 24))
  {
    outlined init with copy of Subscription(v39, (uint64_t)v52);
    swift_endAccess();
    uint64_t v40 = v53;
    uint64_t v41 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24))(v29, v40, v41);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
    swift_endAccess();
  }
}

void Publishers.Invoke1I1O.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  *((unsigned char *)v1 + *(void *)(*v1 + 168)) = 1;
  uint64_t v5 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  if (!v5) {
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 128) + 56))(a1, *(void *)(v3 + 104));
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>(void *a1)
{
  return Publishers.Invoke1I1O.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>(uint64_t a1)
{
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>(uint64_t a1)
{
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.Invoke1I1O.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return 0x4931656B6F766E49;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return Publishers.Invoke1I1O.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return Publishers.Invoke1I1O.Inner.cancel()();
}

uint64_t Publishers.Invoke2I1O.Inner.__allocating_init(downstream:invoke:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Invoke2I1O.Inner.init(downstream:invoke:target:));
}

uint64_t Publishers.Invoke1I1O.Inner.__allocating_init(downstream:invoke:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a5(a1, a2, a3, a4);
}

uint64_t Publishers.Invoke1I1O.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Invoke2I1O.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x4932656B6F766E49;
  a1[1] = 0xEA00000000004F31;
}

uint64_t *Publishers.Invoke2I1O.Inner.init(downstream:invoke:target:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 176)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 184)) = 0;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 192);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  uint64_t v11 = *(void *)(*v4 + 200);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  _DWORD *v12 = 0;
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 120) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 152), a1);
  uint64_t v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 160));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 168), a4);
  return v4;
}

uint64_t *Publishers.Invoke2I1O.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 200)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 120) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 152));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 168));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 192));
  return v0;
}

uint64_t Publishers.Invoke2I1O.Inner.__deallocating_deinit()
{
  return Publishers.Invoke1I1O.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.Invoke2I1O.Inner.deinit);
}

uint64_t Publishers.Invoke1I1O.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t type metadata accessor for Publishers.Invoke2I1O.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Invoke2I1O.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 192);
  uint64_t result = swift_beginAccess();
  if (*(void *)(v3 + 24))
  {
    outlined init with copy of Subscription(v3, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t Publishers.Invoke2I1O.Inner.cancel()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 192);
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    outlined init with copy of Subscription(v1, (uint64_t)&v5);
    uint64_t v3 = *((void *)&v6 + 1);
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v5, v1);
  return swift_endAccess();
}

uint64_t Publishers.Invoke2I1O.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 192);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v12);
  uint64_t v5 = v13;
  outlined destroy of Subscription?((uint64_t)v12);
  if (v5)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v12);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v12, v4);
    swift_endAccess();
    uint64_t v13 = v3;
    uint64_t v14 = &protocol witness table for Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>;
    v12[0] = v1;
    uint64_t v9 = *(void *)(v3 + 144);
    uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 40);
    uint64_t v11 = *(void *)(v3 + 120);
    swift_retain();
    v10(v12, v11, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
}

void Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)v3 + 96);
  uint64_t v7 = *(void *)(*(void *)v3 + 104);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v19 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))((char *)&v19 - v10, a1, v6);
  uint64_t v12 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v12, a2, v7);
  uint64_t v13 = *(void *)(*(void *)v3 + 200);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + v13));
  uint64_t v14 = *(void *)(*(void *)v3 + 176);
  uint64_t v15 = *(void *)(v3 + v14);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + v14) = v17;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + v13));
    uint64_t v18 = (void (*)(char *, char *, void (*)(uint64_t, uint64_t), uint64_t))(*(uint64_t (**)(uint64_t))(v3 + *(void *)(*(void *)v3 + 160)))(v3+ *(void *)(*(void *)v3 + 168));
    swift_retain();
    v18(v11, v12, partial apply for closure #1 in Publishers.Invoke2I1O.Inner.receive(_:), v3);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
  }
}

void closure #1 in Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v48 = a2;
  uint64_t v50 = a1;
  uint64_t v4 = *a3;
  uint64_t v5 = *(void *)(*a3 + 128);
  uint64_t v6 = *(void *)(*a3 + 144);
  uint64_t v51 = *(void *)(*a3 + 120);
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v43 = (char *)&v42 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v47 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v49 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v42 = (char *)&v42 - v13;
  uint64_t v14 = *(void *)(v4 + 112);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v17);
  BOOL v22 = (char *)&v42 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v50, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    uint64_t v23 = v51;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    uint64_t v25 = v46;
    uint64_t v24 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v12, v48, v47);
    uint64_t v26 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v12, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v24);
    }
    else
    {
      uint64_t v36 = v42;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v42, v12, v5);
      int v37 = v43;
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v43, v36, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v37, 0, 1, v5);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 56))(v37, v23, v6);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v45);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v5);
    }
    return;
  }
  uint64_t v27 = v49;
  uint64_t v50 = v20;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, v14);
  uint64_t v28 = v51;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v22, v51, v6);
  uint64_t v30 = *(void *)(*a3 + 200);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)a3 + v30));
  uint64_t v31 = *(void *)(*a3 + 176);
  uint64_t v32 = *(uint64_t *)((char *)a3 + v31);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(uint64_t *)((char *)a3 + v31) = v34;
  if (*((unsigned char *)a3 + *(void *)(*a3 + 184)) == 1 && !v34)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
    uint64_t v35 = v43;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v43, 1, 1, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 56))(v35, v28, v6);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v45);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v22, v14);
    return;
  }
  uint64_t v38 = v50;
  if (v29 != 0x8000000000000000)
  {
    if ((v29 & 0x8000000000000000) == 0)
    {
      if (!v29)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
        (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
        return;
      }
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    return;
  }
LABEL_12:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a3 + v30));
  uint64_t v39 = (uint64_t)a3 + *(void *)(*a3 + 192);
  swift_beginAccess();
  if (*(void *)(v39 + 24))
  {
    outlined init with copy of Subscription(v39, (uint64_t)v52);
    swift_endAccess();
    uint64_t v40 = v53;
    uint64_t v41 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 24))(v29, v40, v41);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v14);
    swift_endAccess();
  }
}

void Publishers.Invoke2I1O.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 200);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  *((unsigned char *)v1 + *(void *)(*v1 + 184)) = 1;
  uint64_t v5 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 176));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
  if (!v5) {
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 144) + 56))(a1, *(void *)(v3 + 120));
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>(void *a1)
{
  return Publishers.Invoke2I1O.Inner.receive(subscription:)(a1);
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>(uint64_t a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  Publishers.Invoke2I1O.Inner.receive(_:)(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>(uint64_t a1)
{
}

uint64_t protocol witness for Subscription.request(_:) in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>(uint64_t a1)
{
  return Publishers.Invoke2I1O.Inner.request(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return 0x4932656B6F766E49;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return Publishers.Invoke2I1O.Inner.cancel()();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Invoke2I1O<A, B, C, D, E>.Inner<A1, B1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Invoke1I1O<A, B, C>.Inner<A1, B1>()
{
  return swift_getAssociatedConformanceWitness();
}

void partial apply for closure #1 in Publishers.Invoke1I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in Publishers.Invoke1I1O.Inner.receive(_:)(a1, a2, v2);
}

void partial apply for closure #1 in Publishers.Invoke2I1O.Inner.receive(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in Publishers.Invoke2I1O.Inner.receive(_:)(a1, a2, v2);
}

void *initializeBufferWithCopyOfBuffer for PartialCompletion(void *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = __dst;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(__dst);
      *((unsigned char *)v3 + v6) = 1;
    }
    else if (v11)
    {
      memcpy(__dst, a2, v6 + 1);
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(__dst);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

unsigned __int8 *assignWithCopy for PartialCompletion(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        goto LABEL_14;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        goto LABEL_14;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_14;
      case 4:
        int v13 = *(_DWORD *)__dst;
LABEL_14:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (!v10)
  {
    uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v16 = *(void *)(a3 + 16);
    goto LABEL_20;
  }
  if (v10 == 1)
  {
    uint64_t v15 = *(void *)(v6 - 8);
    uint64_t v16 = *(void *)(a3 + 24);
LABEL_20:
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(__dst, v16);
  }
  unsigned int v17 = __src[v9];
  unsigned int v18 = v17 - 2;
  if (v17 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v19 = v9;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *__src;
        goto LABEL_30;
      case 2:
        int v20 = *(unsigned __int16 *)__src;
        goto LABEL_30;
      case 3:
        int v20 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_30;
      case 4:
        int v20 = *(_DWORD *)__src;
LABEL_30:
        int v21 = (v20 | (v18 << (8 * v9))) + 2;
        unsigned int v17 = v20 + 2;
        if (v9 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  else if (v17)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(__dst, __src, v5);
    __dst[v9] = 0;
  }
  return __dst;
}

unsigned char *initializeWithTake for PartialCompletion(unsigned char *__dst, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(unsigned char *))(v4 + 32))(__dst);
    __dst[v5] = 1;
  }
  else if (v6)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for PartialCompletion(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst == __src) {
    return __dst;
  }
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v6 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unsigned int v10 = __dst[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *__dst;
        goto LABEL_14;
      case 2:
        int v13 = *(unsigned __int16 *)__dst;
        goto LABEL_14;
      case 3:
        int v13 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
        goto LABEL_14;
      case 4:
        int v13 = *(_DWORD *)__dst;
LABEL_14:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (!v10)
  {
    uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v16 = *(void *)(a3 + 16);
    goto LABEL_20;
  }
  if (v10 == 1)
  {
    uint64_t v15 = *(void *)(v6 - 8);
    uint64_t v16 = *(void *)(a3 + 24);
LABEL_20:
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(__dst, v16);
  }
  unsigned int v17 = __src[v9];
  unsigned int v18 = v17 - 2;
  if (v17 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v19 = v9;
    }
    else {
      uint64_t v19 = 4;
    }
    switch(v19)
    {
      case 1:
        int v20 = *__src;
        goto LABEL_30;
      case 2:
        int v20 = *(unsigned __int16 *)__src;
        goto LABEL_30;
      case 3:
        int v20 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_30;
      case 4:
        int v20 = *(_DWORD *)__src;
LABEL_30:
        int v21 = (v20 | (v18 << (8 * v9))) + 2;
        unsigned int v17 = v20 + 2;
        if (v9 < 4) {
          unsigned int v17 = v21;
        }
        break;
      default:
        break;
    }
  }
  if (v17 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(__dst, __src, v6);
    __dst[v9] = 1;
  }
  else if (v17)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(__dst, __src, v5);
    __dst[v9] = 0;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for PartialCompletion(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 3) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 254;
}

void storeEnumTagSinglePayload for PartialCompletion(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x18C0809A0);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for PartialCompletion(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for PartialCompletion(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8)
                                                                                + 64))
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t Publisher.tryScan<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Publisher.scan<A>(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Publishers.TryScan.init(upstream:initialResult:nextPartialResult:));
}

uint64_t Publishers.TryScan.init(upstream:initialResult:nextPartialResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Scan.init(upstream:initialResult:nextPartialResult:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryScan, a8);
}

uint64_t type metadata accessor for Publishers.TryScan()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.Scan.Inner.init(downstream:nextPartialResult:initialResult:));
}

uint64_t Publishers.Scan.Inner.customMirror.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  size_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  int v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BABB0;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = v0 + v1[15];
  uint64_t v10 = v1[12];
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(void *)(v8 + 80) = 0x746C75736572;
  *(void *)(v8 + 88) = 0xE600000000000000;
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  uint64_t v13 = v1[11];
  *(void *)(v8 + 120) = v13;
  int v14 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v14, v12, v13);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Scan.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 1851876179;
  a1[1] = 0xE400000000000000;
}

uint64_t Publishers.Scan.Inner.receive(completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112) + 56))(a1, *(void *)(*(void *)v1 + 96));
}

uint64_t *Publishers.Scan.Inner.deinit()
{
  uint64_t v1 = *v0;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*v0 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  return v0;
}

uint64_t Publishers.Scan.Inner.__deallocating_deinit()
{
  return Publishers.Scan.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.Scan.Inner.deinit);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Scan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Scan.Inner.receive(completion:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Scan<A, B>.Inner<A1>()
{
  return 1851876179;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Scan<A, B>.Inner<A1>()
{
  return Publishers.Scan.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Scan<A, B>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t Publishers.TryScan.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a1;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 + 32);
  v29[0] = *(void *)(v15 + 16);
  uint64_t v14 = v29[0];
  v29[1] = v5;
  v29[2] = v17;
  void v29[3] = v16;
  v29[4] = v18;
  uint64_t v19 = type metadata accessor for Publishers.TryScan.Inner();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v27, a3);
  uint64_t v20 = *(int *)(a2 + 44);
  int v21 = (uint64_t *)(v28 + *(int *)(a2 + 48));
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v28 + v20, v5);
  swift_allocObject();
  swift_retain();
  v29[0] = Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:)((uint64_t)v13, v22, v23, (uint64_t)v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v14, v19, v16, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.TryScan.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.TryScan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:));
}

uint64_t Publishers.Scan.Inner.__allocating_init(downstream:nextPartialResult:initialResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a5(a1, a2, a3, a4);
}

uint64_t Publishers.TryScan.Inner.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v21 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBBA0;
  *(void *)(v9 + 32) = 0x657274736E776F64;
  *(void *)(v9 + 40) = 0xEA00000000006D61;
  uint64_t v10 = (char *)v0 + v2[15];
  uint64_t v11 = v2[12];
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0x737574617473;
  *(void *)(v9 + 88) = 0xE600000000000000;
  uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  *(void *)(v9 + 120) = &type metadata for SubscriptionStatus;
  uint64_t v14 = swift_allocObject();
  *(void *)(v9 + 96) = v14;
  outlined init with copy of SubscriptionStatus(v13, v14 + 16);
  *(void *)(v9 + 128) = 0x746C75736572;
  *(void *)(v9 + 136) = 0xE600000000000000;
  uint64_t v15 = (char *)v1 + *(void *)(*v1 + 136);
  swift_beginAccess();
  uint64_t v16 = v2[11];
  *(void *)(v9 + 168) = v16;
  uint64_t v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v17, v15, v16);
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.TryScan.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6E616353797254;
  a1[1] = 0xE700000000000000;
}

uint64_t *Publishers.TryScan.Inner.init(downstream:nextPartialResult:initialResult:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (uint64_t)v4 + *(void *)(*v4 + 144);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 40) = 2;
  uint64_t v11 = *(void *)(*v4 + 152);
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v4 + v11) = (uint64_t)v12;
  _DWORD *v12 = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 96) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 120), a1);
  uint64_t v13 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 128));
  void *v13 = a2;
  v13[1] = a3;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v9 + 88) - 8) + 32))((uint64_t)v4 + *(void *)(*v4 + 136), a4);
  return v4;
}

uint64_t *Publishers.TryScan.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 152)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 144));
  return v0;
}

uint64_t Publishers.TryScan.Inner.__deallocating_deinit()
{
  return Publishers.Scan.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.TryScan.Inner.deinit);
}

uint64_t Publishers.Scan.Inner.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t Publishers.TryScan.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v4));
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v13);
  if (v16 == 2
    && (int8x16_t v6 = vorrq_s8(v14, v15),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v13)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v13);
    char v16 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v13, v5);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    v15.i64[0] = v3;
    v15.i64[1] = (uint64_t)&protocol witness table for Publishers.TryScan<A, B>.Inner<A1>;
    uint64_t v13 = v1;
    uint64_t v10 = *(void *)(v3 + 112);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 96);
    swift_retain();
    v11(&v13, v12, v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v13);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v4));
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 8) + 8))(v7);
  }
}

uint64_t Publishers.TryScan.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v22 = (void *)*v1;
  uint64_t v3 = v22[11];
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  int v21 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v19 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v13 = *(void (**)(char *, uint64_t))((char *)v1 + *(void *)(v12 + 128));
  int8x16_t v14 = (char *)v1 + *(void *)(v12 + 136);
  swift_beginAccess();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v20(v9, v14, v3);
  v13(v9, a1);
  int8x16_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v9, v3);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v14, v11, v3);
  swift_endAccess();
  char v16 = v21;
  v20(v21, v14, v3);
  uint64_t v17 = (*(uint64_t (**)(char *, void))(v22[14] + 48))(v16, v22[12]);
  v15(v16, v3);
  return v17;
}

void Publishers.TryScan.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v17 = *v1;
  uint64_t v2 = v17;
  uint64_t v18 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v16 - v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(v2 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + v11));
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)v19);
  LODWORD(v12) = v20;
  outlined destroy of SubscriptionStatus((uint64_t)v19);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + v11));
  if (!v12)
  {
    uint64_t v13 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v18, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    {
      v19[0] = 0;
      (*(void (**)(void *, void))(*(void *)(v13 + 112) + 56))(v19, *(void *)(v13 + 96));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, AssociatedTypeWitness);
      uint64_t v14 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v15, v6, AssociatedTypeWitness);
      v19[0] = v14;
      (*(void (**)(void *, void))(*(void *)(v13 + 112) + 56))(v19, *(void *)(v13 + 96));
      MEMORY[0x18C13C260](v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    }
  }
}

void Publishers.TryScan.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + v3));
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v4, (uint64_t)v7);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)v7);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)v9);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + v3));
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void Publishers.TryScan.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 144);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryScan<A, B>.Inner<A1>(void *a1)
{
  return Publishers.TryScan.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryScan<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.TryScan.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryScan<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryScan<A, B>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
  return 0x6E616353797254;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
  return Publishers.TryScan.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryScan<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryScan<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryScan<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryScan.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t getEnumTagSinglePayload for Publishers.Scan(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C08285CLL);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v10 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v12 + v23) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void storeEnumTagSinglePayload for Publishers.Scan(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
                v25(v24);
              }
              else
              {
                uint64_t v26 = (void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
                if ((a2 & 0x80000000) != 0)
                {
                  uint64_t v27 = a2 ^ 0x80000000;
                  v26[1] = 0;
                }
                else
                {
                  uint64_t v27 = a2 - 1;
                }
                *uint64_t v26 = v27;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v21 = v20;
  }
  else {
    int v21 = 1;
  }
  if (((v14 + (v13 & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v22 = ~v12 + a2;
    bzero(a1, ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x18C082B08);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.TryScan.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_18C082C2C()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

void ImmediateScheduler.SchedulerTimeType.distance(to:)(void *a1@<X8>)
{
  *a1 = 0;
}

Combine::ImmediateScheduler::SchedulerTimeType::Stride __swiftcall ImmediateScheduler.SchedulerTimeType.Stride.init(integerLiteral:)(Combine::ImmediateScheduler::SchedulerTimeType::Stride integerLiteral)
{
  v1->magnitude = integerLiteral.magnitude;
  return integerLiteral;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(void *)v0;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.magnitude.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*ImmediateScheduler.SchedulerTimeType.Stride.magnitude.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

Combine::ImmediateScheduler::SchedulerTimeType::Stride __swiftcall ImmediateScheduler.SchedulerTimeType.Stride.init(floatLiteral:)(Swift::Double floatLiteral)
{
  if ((~*(void *)&floatLiteral & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (floatLiteral <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (floatLiteral < 9.22337204e18)
  {
    *unint64_t v1 = (uint64_t)floatLiteral;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v67 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v66 = (char *)&v62 - v7;
  uint64_t v8 = *(void *)(a2 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v64 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v62 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  char v70 = (char *)&v62 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v71 = (char *)&v62 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v69 = (char *)&v62 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  int v22 = (char *)&v62 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)&v62 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v62 - v26;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v72 = a1;
  v28((char *)&v62 - v26, a1, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v28(v25, (uint64_t)v27, a2);
  uint64_t v65 = v13;
  BOOL v29 = (a1 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v68 = v8;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v25, a2);
  v28(v22, (uint64_t)v27, a2);
  if (!v29) {
    goto LABEL_15;
  }
  int64_t v75 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v31)
    {
      if (v32 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v55 = v69;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v56 = dispatch thunk of static Comparable.< infix(_:_:)();
        v30(v55, a2);
        uint64_t v57 = v64;
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v64, v22, a2);
        if (v56)
        {
          v30(v57, a2);
        }
        else
        {
          uint64_t v58 = v57;
          int64_t v59 = v75;
          uint64_t v60 = dispatch thunk of BinaryInteger._lowWord.getter();
          v30(v58, a2);
          if (v60 >= v59) {
            goto LABEL_16;
          }
        }
LABEL_34:
        uint64_t v51 = 0;
        char v52 = 1;
        uint64_t v41 = v72;
        uint64_t v40 = v73;
        goto LABEL_35;
      }
LABEL_10:
      lazy protocol witness table accessor for type Int and conformance Int();
      BOOL v33 = v69;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      v30(v33, a2);
      v30(v22, a2);
      if ((v34 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_34;
    }
    if (v32 < 64) {
      goto LABEL_13;
    }
LABEL_15:
    v30(v22, a2);
    goto LABEL_16;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v35 = dispatch thunk of BinaryInteger._lowWord.getter();
  v30(v22, a2);
  if (v35 < v75) {
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
  int v37 = v71;
  v28(v71, (uint64_t)v27, a2);
  if (v36 < 65)
  {
    uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v30(v37, a2);
    if (v42 != 64)
    {
      uint64_t v50 = v70;
      v28(v70, (uint64_t)v27, a2);
      uint64_t v39 = v50;
      uint64_t v41 = v72;
      uint64_t v40 = v73;
      goto LABEL_26;
    }
    char v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v44 = v70;
    v28(v70, (uint64_t)v27, a2);
    uint64_t v39 = v44;
    uint64_t v41 = v72;
    uint64_t v40 = v73;
    if (v43)
    {
LABEL_26:
      v30(v39, a2);
      goto LABEL_27;
    }
  }
  else
  {
    v30(v37, a2);
    uint64_t v38 = v70;
    v28(v70, (uint64_t)v27, a2);
    uint64_t v39 = v38;
    uint64_t v41 = v72;
    uint64_t v40 = v73;
  }
  int64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
  char v45 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v45)
  {
    if (v46 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v47 = v69;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      v30(v47, a2);
      uint64_t v49 = v39;
      goto LABEL_29;
    }
    goto LABEL_24;
  }
  if (v46 <= 63)
  {
LABEL_24:
    dispatch thunk of BinaryInteger._lowWord.getter();
    goto LABEL_26;
  }
  uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v53 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v69, v39, a2);
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v54 = v65;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
  v30(v54, a2);
  uint64_t v49 = v53;
LABEL_29:
  v30(v49, a2);
  if (v48)
  {
    uint64_t v51 = 0;
    char v52 = 1;
    goto LABEL_35;
  }
LABEL_27:
  uint64_t v51 = dispatch thunk of BinaryInteger._lowWord.getter();
  char v52 = 0;
LABEL_35:
  v30(v27, a2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v30)(v41, a2);
  *(void *)uint64_t v40 = v51;
  *(unsigned char *)(v40 + 8) = v52;
  return result;
}

BOOL static ImmediateScheduler.SchedulerTimeType.Stride.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t *static ImmediateScheduler.SchedulerTimeType.Stride.* infix(_:_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v3 >> 63) {
    *a3 = v3;
  }
  else {
    __break(1u);
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.+ infix(_:_:)@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.- infix(_:_:)@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.-= infix(_:_:)(void *result, void *a2)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

uint64_t *static ImmediateScheduler.SchedulerTimeType.Stride.*= infix(_:_:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v2 >> 63) {
    *uint64_t result = v2;
  }
  else {
    __break(1u);
  }
  return result;
}

void *static ImmediateScheduler.SchedulerTimeType.Stride.+= infix(_:_:)(void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void static ImmediateScheduler.SchedulerTimeType.Stride.seconds(_:)(void *a1@<X8>)
{
  *a1 = 0;
}

void static ImmediateScheduler.SchedulerTimeType.Stride.nanoseconds(_:)(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL static ImmediateScheduler.SchedulerTimeType.Stride.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return 0x647574696E67616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x647574696E67616DLL && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys);
  }
  return result;
}

uint64_t ImmediateScheduler.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

double *protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(double *result@<X0>, void *a2@<X8>)
{
  double v2 = *result;
  if ((~*(void *)result & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    *a2 = (uint64_t)v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *protocol witness for static SignedNumeric.- prefix(_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(0, *result)) {
    __break(1u);
  }
  else {
    *a2 = -*result;
  }
  return result;
}

void protocol witness for SignedNumeric.negate() in conformance ImmediateScheduler.SchedulerTimeType.Stride()
{
  if (__OFSUB__(0, *v0)) {
    __break(1u);
  }
  else {
    *uint64_t v0 = -*v0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ImmediateScheduler.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys and conformance ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t *protocol witness for static Numeric.* infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v3 >> 63) {
    *a3 = v3;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for static Numeric.*= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v2 >> 63) {
    *unint64_t result = v2;
  }
  else {
    __break(1u);
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *result, void *a2)
{
  if (__OFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance ImmediateScheduler.SchedulerTimeType.Stride(void *result, void *a2)
{
  if (__OFSUB__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

void *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance ImmediateScheduler.SchedulerTimeType.Stride@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t ImmediateScheduler.schedule(options:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void ImmediateScheduler.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ImmediateScheduler.schedule(after:tolerance:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t ImmediateScheduler.schedule(after:interval:tolerance:options:_:)@<X0>(void (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  a1();
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB3ACFE8;
  uint64_t v4 = unk_1EB3ACFF0;
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(static Subscriptions._EmptySubscription.singleton, qword_1EB3ACFE8);
  a2[3] = v3;
  a2[4] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16);

  return v7(boxed_opaque_existential_1, v5, v3);
}

uint64_t associated type witness table accessor for ExpressibleByFloatLiteral.FloatLiteralType : _ExpressibleByBuiltinFloatLiteral in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB450];
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType.Stride and conformance ImmediateScheduler.SchedulerTimeType.Stride);
  }
  return result;
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Comparable in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Numeric in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB588];
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in ImmediateScheduler.SchedulerTimeType.Stride()
{
  return MEMORY[0x1E4FBB5C0];
}

unint64_t lazy protocol witness table accessor for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImmediateScheduler.SchedulerTimeType and conformance ImmediateScheduler.SchedulerTimeType);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Scheduler.SchedulerTimeType.Strideable.Stride : SchedulerTimeIntervalConvertible in ImmediateScheduler()
{
  return &protocol witness table for ImmediateScheduler.SchedulerTimeType.Stride;
}

uint64_t protocol witness for Scheduler.schedule(options:_:) in conformance ImmediateScheduler(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance ImmediateScheduler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance ImmediateScheduler@<X0>(void (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  a1();
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  uint64_t v3 = qword_1EB3ACFE8;
  uint64_t v4 = unk_1EB3ACFF0;
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(static Subscriptions._EmptySubscription.singleton, qword_1EB3ACFE8);
  a2[3] = v3;
  a2[4] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16);

  return v7(boxed_opaque_existential_1, v5, v3);
}

ValueMetadata *type metadata accessor for ImmediateScheduler()
{
  return &type metadata for ImmediateScheduler;
}

ValueMetadata *type metadata accessor for ImmediateScheduler.SchedulerTimeType()
{
  return &type metadata for ImmediateScheduler.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for ImmediateScheduler.SchedulerTimeType.Stride()
{
  return &type metadata for ImmediateScheduler.SchedulerTimeType.Stride;
}

unsigned char *storeEnumTagSinglePayload for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18C084374);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ImmediateScheduler.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_1ED991F30;
}

uint64_t Publisher.count()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Count.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.Count.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Count.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  v10[1] = a3;
  void v10[2] = v6;
  v10[3] = a4;
  uint64_t v7 = type metadata accessor for Publishers.Count.Inner();
  swift_allocObject();
  v10[0] = specialized Publishers.Count.Inner.init(downstream:initial:reduce:)(a1, 0, 0);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v10, v5, v7, v6, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Count.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Count.Inner.description.getter()
{
  return 0x746E756F43;
}

uint64_t Publishers.Count.Inner.receive(newValue:)()
{
  unint64_t v1 = (void *)(v0 + 16);
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    if (!__OFADD__(*v1, 1))
    {
      *(void *)(v0 + 16) = *v1 + 1;
      *(unsigned char *)(v0 + 24) = 0;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for PartialCompletion();
      return swift_storeEnumTagMultiPayload();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Count<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Count.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.Count<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Count<A>()
{
  return static Publishers.Count<>.== infix(_:_:)();
}

uint64_t *specialized Publishers.Count.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, char a3)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v10 - v5);
  uint64_t v10 = a2;
  char v11 = a3 & 1;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v6, (uint64_t)&v10, v8);
}

uint64_t getEnumTagSinglePayload for Publishers.Count(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.Count(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C084CB0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Publishers.Count()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.last(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.LastWhere, a5);
}

uint64_t Publishers.LastWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.LastWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.LastWhere, a6);
}

uint64_t type metadata accessor for Publishers.LastWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.tryLast(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.last(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryLastWhere, a5);
}

uint64_t Publisher.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryLastWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.LastWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryLastWhere, a6);
}

uint64_t Publishers.LastWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryLastWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.LastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.LastWhere.Inner, (uint64_t)&unk_1ED998108, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool));
}

uint64_t type metadata accessor for Publishers.LastWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.LastWhere.Inner.description.getter()
{
  return 0x726568577473614CLL;
}

uint64_t Publishers.LastWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  uint64_t v17 = a2;
  uint64_t v5 = *v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  int v11 = (char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v18[-1] - v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((char *)v3 + *(void *)(v5 + 152)))(v18, a1);
  if (LOBYTE(v18[0]) == 1)
  {
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    int v15 = (char *)v3 + *(void *)(*v3 + 136);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v15, v11, v7);
    swift_endAccess();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.LastWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryLastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.LastWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryLastWhere.Inner, (uint64_t)&unk_1ED9980E0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.LastWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v26 = a1;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v25 - v16;
  v29[0] = v12;
  v29[1] = a3;
  v29[2] = v11;
  void v29[3] = a4;
  uint64_t v18 = a5(0, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v17, 1, 1, AssociatedTypeWitness);
  uint64_t v19 = (uint64_t *)(v25 + *(int *)(a2 + 36));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  swift_allocObject();
  swift_retain();
  int v22 = specialized Publishers.TryLastWhere.Inner.init(downstream:initial:reduce:)(v26, (uint64_t)v17, v20, v21, v27, v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29[0] = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v12, v18, v11, WitnessTable);
  return swift_release();
}

uint64_t Publishers.TryLastWhere.Inner.description.getter()
{
  return 0x577473614C797254;
}

uint64_t Publishers.TryLastWhere.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(void *__return_ptr, uint64_t))((char *)v2 + *(void *)(v4 + 152)))(v16, a1);
  if (LOBYTE(v16[0]) == 1)
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    uint64_t v14 = (char *)v2 + *(void *)(*v2 + 136);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v14, v10, v6);
    swift_endAccess();
  }
  return 0;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryLastWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryLastWhere.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryLastWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryLastWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t *specialized Publishers.TryLastWhere.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 456);
  uint64_t v10 = *(void *)(*v6 + 440);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v8 + 448);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v17, a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v24, v11);
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v10;
  v20[3] = v16;
  v20[4] = v9;
  v20[5] = *(void *)(v8 + 464);
  uint64_t v21 = v27;
  v20[6] = v26;
  v20[7] = v21;
  v29[0] = v28;
  v29[1] = v20;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v29);
}

uint64_t type metadata accessor for Publishers.TryLastWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.LastWhere(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C085B28);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.LastWhere(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C085D1CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C085D44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publishers.IgnoreOutput.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.IgnoreOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.IgnoreOutput.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unsigned int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.IgnoreOutput.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "IgnoreOutput");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.IgnoreOutput<A>.Inner<A1>()
{
  return 0x754F65726F6E6749;
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.IgnoreOutput<A>.Inner<A1>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 52));
  return result;
}

uint64_t static Publishers.IgnoreOutput<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.IgnoreOutput<A>()
{
  return static Publishers.IgnoreOutput<>.== infix(_:_:)();
}

uint64_t getEnumTagSinglePayload for Publishers.IgnoreOutput(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.IgnoreOutput(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C0863BCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.IgnoreOutput.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.IgnoreOutput.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.IgnoreOutput.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C086764);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.IgnoreOutput.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C086924);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

void (*CurrentValueSubject.value.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  unsigned int v7 = malloc(v6);
  v3[4] = v7;
  CurrentValueSubject.value.getter((uint64_t)v7);
  return CurrentValueSubject.value.modify;
}

void CurrentValueSubject.value.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized CurrentValueSubject.value.setter((uint64_t)v3);
    unsigned int v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized CurrentValueSubject.value.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t CurrentValueSubject.Conduit.__allocating_init(_:_:)(uint64_t a1, uint64_t a2)
{
  return CurrentValueSubject.Conduit.init(_:_:)(a1, a2);
}

void CurrentValueSubject.send(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  size_t v8 = (char *)v17 - v7;
  unsigned int v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  if (*((unsigned char *)v1 + 24) == 1)
  {
    *((unsigned char *)v1 + 24) = 0;
    uint64_t v10 = *(void *)(v4 - 8);
    v17[1] = v3;
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v4);
    uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 120);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
    swift_endAccess();
    uint64_t v13 = (uint64_t)v1 + *(void *)(*v1 + 128);
    swift_beginAccess();
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    outlined copy of ConduitList<A, Never><A>(*(void *)v13, v15);
    type metadata accessor for ConduitList();
    ConduitList.removeAll()();
    os_unfair_lock_unlock(v9);
    MEMORY[0x1F4188790](v16);
    v17[-2] = a1;
    ConduitList.forEach(_:)((uint64_t)partial apply for closure #1 in PassthroughSubject.send(completion:), (uint64_t)&v17[-4], v14, v15);
    outlined consume of ConduitList<A, Never><A>(v14, v15);
  }
  else
  {
    os_unfair_lock_unlock(v9);
  }
}

void CurrentValueSubject.Conduit.finish(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v19 = *v1;
  uint64_t v3 = v19;
  uint64_t v20 = a1;
  uint64_t v4 = *(void *)(v19 + 176);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unsigned int v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  char v15 = (char *)&v19 - v14;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 216));
  os_unfair_lock_lock(v16);
  unint64_t v17 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v17, v9, v5);
    swift_endAccess();
    uint64_t v18 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v16);
    if (v18)
    {
      swift_retain();
      PassthroughSubject.disassociate(_:)((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 + 184) + 56))(v20, v4);
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }
}

void CurrentValueSubject.Conduit.customMirror.getter(uint64_t a1@<X8>)
{
  v17[0] = *v1;
  uint64_t v2 = v17[0];
  v17[1] = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 216)));
  uint64_t v18 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBFD0;
  *(void *)(v9 + 32) = 0x746E65726170;
  *(void *)(v9 + 40) = 0xE600000000000000;
  uint64_t v10 = v1[2];
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CurrentValueSubject();
  uint64_t v11 = type metadata accessor for Optional();
  *(void *)(v9 + 48) = v10;
  *(void *)(v9 + 72) = v11;
  *(void *)(v9 + 80) = 0x657274736E776F64;
  *(void *)(v9 + 88) = 0xEA00000000006D61;
  uint64_t v12 = (char *)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  uint64_t v13 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, v12, v13);
  *(void *)(v9 + 128) = 0x646E616D6564;
  *(void *)(v9 + 136) = 0xE600000000000000;
  *(void *)(v9 + 144) = *(void *)((char *)v1 + *(void *)(*v1 + 208));
  *(void *)(v9 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v9 + 176) = 0x7463656A627573;
  uint64_t v15 = v1[2];
  *(void *)(v9 + 216) = v11;
  *(void *)(v9 + 184) = 0xE700000000000000;
  *(void *)(v9 + 192) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 216)));
}

void CurrentValueSubject.Conduit.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD000000000000013;
  a1[1] = 0x800000018C0C0770;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>()
{
  return 0xD000000000000013;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance CurrentValueSubject<A, B>.Conduit<A1>(void *a1@<X8>)
{
}

void sub_18C0875D0(uint64_t a1@<X8>)
{
}

void sub_18C0875F4(uint64_t a1)
{
}

uint64_t sub_18C087618()
{
  return 24;
}

__n128 sub_18C087624(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for CurrentValueSubject(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CurrentValueSubject);
}

uint64_t dispatch thunk of CurrentValueSubject.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t Subscribers.Assign.__allocating_init(object:keyPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  Subscribers.Assign.init(object:keyPath:)(a1, a2);
  return v4;
}

uint64_t Subscribers.Assign.object.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Subscribers.Assign.keyPath.getter()
{
  return swift_retain();
}

uint64_t Subscribers.Assign.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = (uint64_t)v1 + *(void *)(v2 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 0x6E6769737341;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
    uint64_t v22 = 0x206E6769737341;
    unint64_t v23 = 0xE700000000000000;
    swift_getDynamicType();
    v14._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 46;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    uint64_t v16 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (v17)
    {
      unint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v18 = 0xE000000000000000;
    }
    unint64_t v19 = v18;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    uint64_t v13 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v3);
  }
  return v13;
}

uint64_t Subscribers.Assign.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = *v1;
  uint64_t v2 = v21;
  uint64_t v22 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18C0BBBA0;
  *(void *)(v9 + 32) = 0x7463656A626FLL;
  *(void *)(v9 + 40) = 0xE600000000000000;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v2 + 104);
  swift_beginAccess();
  uint64_t v11 = type metadata accessor for Optional();
  *(void *)(v9 + 72) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v10, v11);
  *(void *)(v9 + 80) = 0x6874615079656BLL;
  *(void *)(v9 + 88) = 0xE700000000000000;
  uint64_t v13 = *v1;
  uint64_t v14 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112));
  uint64_t v15 = type metadata accessor for ReferenceWritableKeyPath();
  *(void *)(v9 + 96) = v14;
  *(void *)(v9 + 120) = v15;
  *(void *)(v9 + 128) = 0x737574617473;
  *(void *)(v9 + 136) = 0xE600000000000000;
  uint64_t v16 = (uint64_t)v1 + *(void *)(v13 + 120);
  swift_beginAccess();
  *(void *)(v9 + 168) = &type metadata for SubscriptionStatus;
  uint64_t v17 = swift_allocObject();
  *(void *)(v9 + 144) = v17;
  outlined init with copy of SubscriptionStatus(v16, v17 + 16);
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Subscribers.Assign.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Subscribers.Assign.description.getter();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_18C087D74()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

void *Subscribers.Assign.deinit()
{
  MEMORY[0x18C13C4B0](v0[2], -1, -1);
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 104);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 120));
  return v0;
}

uint64_t Subscribers.Assign.__deallocating_deinit()
{
  Subscribers.Assign.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

Swift::Void __swiftcall Subscribers.Assign.cancel()()
{
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - v3;
  uint64_t v5 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v5);
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v12);
  if (v15)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v12);
    os_unfair_lock_unlock(v5);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v12, (uint64_t)v16);
    uint64_t v12 = 1;
    long long v13 = 0u;
    long long v14 = 0u;
    char v15 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, v6);
    swift_endAccess();
    uint64_t v7 = (char *)v0 + *(void *)(*v0 + 104);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v4, (uint64_t)partial apply for closure #1 in Subscribers.Assign.cancel(), (uint64_t)v0, v1, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v8);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v9 = v17;
    uint64_t v10 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t))(*(void *)(v10 + 8) + 8))(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
}

void protocol witness for Cancellable.cancel() in conformance Subscribers.Assign<A, B>()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Subscribers.Assign<A, B>()
{
  return Subscribers.Assign.description.getter();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Subscribers.Assign<A, B>@<X0>(uint64_t a1@<X8>)
{
  return Subscribers.Assign.customMirror.getter(a1);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Subscribers.Assign<A, B>@<X0>(uint64_t *a1@<X8>)
{
  return Subscribers.Assign.playgroundDescription.getter(a1);
}

uint64_t method lookup function for Subscribers.Assign(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Subscribers.Assign);
}

uint64_t dispatch thunk of Subscribers.Assign.__allocating_init(object:keyPath:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t Scheduler.schedule(after:interval:tolerance:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a5;
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v18 - v15, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 72))(a1, a2, a3, v16, v19, v20, a6, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t Scheduler.schedule(after:interval:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(uint64_t, uint64_t))(a6 + 48))(a5, a6);
  Scheduler.schedule(after:interval:tolerance:_:)(a1, a2, (uint64_t)v14, a3, v17, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.seconds(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.microseconds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static SchedulerTimeIntervalConvertible.nanoseconds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of Scheduler.now.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Scheduler.minimumTolerance.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Scheduler.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:tolerance:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 64))();
}

uint64_t dispatch thunk of Scheduler.schedule(after:interval:tolerance:options:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t Publishers.SwitchToLatest.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Publisher<>.switchToLatest()(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  v9[0] = a1;
  v9[1] = swift_getAssociatedTypeWitness();
  void v9[2] = a2;
  void v9[3] = swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Publishers.SetFailureType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v9 - v6;
  Publisher<>.setFailureType<A>(to:)(a1, (uint64_t)v9 - v6);
  swift_getWitnessTable();
  Publisher<>.switchToLatest()(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Publisher<>.switchToLatest()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = swift_getAssociatedTypeWitness();
  v13[1] = swift_getAssociatedTypeWitness();
  v13[2] = a3;
  v13[3] = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Publishers.SetFailureType();
  uint64_t v7 = type metadata accessor for Publishers.Map();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v13 - v9;
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  Publisher.map<A>(_:)((uint64_t)partial apply for closure #1 in Publisher<>.switchToLatest(), (uint64_t)v11, a1, v6, a2, (uint64_t)v10);
  swift_release();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Publisher<>.switchToLatest()(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t closure #1 in Publisher<>.switchToLatest()@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return Publisher<>.setFailureType<A>(to:)(AssociatedTypeWitness, a1);
}

uint64_t sub_18C088A28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher<>.switchToLatest()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Publisher<>.switchToLatest()(a1);
}

uint64_t Publishers.SwitchToLatest.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t *Publishers.SwitchToLatest.Outer.__allocating_init(downstream:)(uint64_t a1)
{
  return Publishers.SwitchToLatest.Outer.init(downstream:)(a1);
}

uint64_t Publishers.SwitchToLatest.Outer.Side.customMirror.getter(_OWORD *a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v17 = *v1;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18C0BA630;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 32) = 0xD000000000000012;
  *(void *)(v11 + 40) = 0x800000018C0C48F0;
  *(void *)(v11 + 72) = &type metadata for CombineIdentifier;
  long long v13 = a1[2];
  v16[0] = a1[1];
  v16[1] = v13;
  _OWORD v16[2] = a1[3];
  type metadata accessor for Publishers.SwitchToLatest.Outer();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v12);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.SwitchToLatest.Outer.Side.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "SwitchToLatest");
  *(unsigned char *)(a1 + 15) = -18;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>.Side()
{
  return 0x6F54686374697753;
}

uint64_t Publishers.SwitchToLatest.Outer.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Publishers.SwitchToLatest.Outer.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 184)) = 1;
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 144);
  swift_beginAccess();
  outlined init with copy of Subscription?(v2, (uint64_t)v14);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v12, v2);
  swift_endAccess();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of Subscription?(v3, (uint64_t)v12);
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v9, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  outlined init with copy of Subscription?((uint64_t)v14, (uint64_t)&v9);
  uint64_t v4 = *((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    uint64_t v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v9);
  }
  outlined init with copy of Subscription?((uint64_t)v12, (uint64_t)&v9);
  uint64_t v6 = *((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
    outlined destroy of Subscription?((uint64_t)v12);
    outlined destroy of Subscription?((uint64_t)v14);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v12);
    outlined destroy of Subscription?((uint64_t)v14);
    return outlined destroy of Subscription?((uint64_t)&v9);
  }
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
  return Publishers.SwitchToLatest.Outer.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.SwitchToLatest<A, B>.Outer<A1>()
{
  return Publishers.SwitchToLatest.Outer.cancel()();
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.SwitchToLatest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t assignWithCopy for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for Publishers.SwitchToLatest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t Publishers.Retry.init(upstream:retries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for Publishers.Retry();
  uint64_t v9 = a5 + *(int *)(result + 36);
  *(void *)uint64_t v9 = a2;
  *(unsigned char *)(v9 + 8) = a3 & 1;
  return result;
}

uint64_t Publishers.Retry.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Retry.retries.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

void *Publishers.Retry.Inner.__allocating_init(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  swift_allocObject();
  return Publishers.Retry.Inner.init(_:_:_:)(a1, a2, a3, v7);
}

void Publishers.Retry.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(*v0 + 104);
  uint64_t v26 = v2;
  long long v22 = *(_OWORD *)(v1 + 88);
  long long v27 = v22;
  uint64_t v28 = v3;
  uint64_t v4 = type metadata accessor for Publishers.Retry.Inner.State();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v21 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - v8;
  long long v10 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v11, v4);
  uint64_t v12 = v22;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    uint64_t v15 = v10;
  }
  else
  {
    *(void *)&long long v22 = v10;
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v12);
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v9, v2);
    uint64_t v16 = v21;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v21, 1, 1, TupleTypeMetadata2);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v11, v16, v4);
    swift_endAccess();
    uint64_t v17 = (uint64_t)v0 + *(void *)(*v0 + 128);
    swift_beginAccess();
    outlined init with copy of Subscription?(v17, (uint64_t)&v23);
    if (*((void *)&v24 + 1))
    {
      outlined init with take of Subscription(&v23, (uint64_t)&v26);
      uint64_t v25 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v23, v17);
      swift_endAccess();
      os_unfair_lock_unlock((os_unfair_lock_t)v22);
      uint64_t v18 = v28;
      uint64_t v19 = v29;
      __swift_project_boxed_opaque_existential_1(&v26, v28);
      (*(void (**)(uint64_t))(*(void *)(v19 + 8) + 8))(v18);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      return;
    }
    outlined destroy of Subscription?((uint64_t)&v23);
    uint64_t v15 = (os_unfair_lock_s *)v22;
  }
  os_unfair_lock_unlock(v15);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Retry<A>.Inner<A1>()
{
}

uint64_t static Publishers.Retry<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Publishers.Retry();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  long long v10 = (char *)&v22 - v9;
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if (v11)
  {
    uint64_t v13 = &v10[*(int *)(v4 + 36)];
    uint64_t v14 = *(void *)v13;
    char v15 = v13[8];
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v10, v4);
    uint64_t v17 = &v8[*(int *)(v4 + 36)];
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = v17[8];
    v16(v8, v4);
    if ((v15 & 1) == 0) {
      return (v14 == v18) & ~v19;
    }
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
    return 0;
  }
  return v19;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Retry<A>(uint64_t a1, uint64_t a2)
{
  return static Publishers.Retry<>.== infix(_:_:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Retry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v11 = *(unsigned char *)(v10 + 8);
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v10;
    *(unsigned char *)(v12 + 8) = v11;
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t initializeWithTake for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t assignWithTake for Publishers.Retry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Retry(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v7 = (a2 - v5 + 255) >> (8 * v6);
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C089DACLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v6);
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Retry(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v13 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = (a3 - v7 + 255) >> v9;
    if (v8 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v14 = (~v7 + a2) >> v9;
  if (v8 < 4) {
    int v15 = v14 + 1;
  }
  else {
    int v15 = 1;
  }
  if (v8 >= 4) {
    unsigned int v16 = ~v7 + a2;
  }
  else {
    unsigned int v16 = (~(_BYTE)v7 + a2);
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v16;
  }
  else {
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v8] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v15;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x18C089F94);
    case 4:
      *(_DWORD *)&a1[v8] = v15;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Retry.Chances(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Publishers.Retry.Chances(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for Publishers.Retry.Chances(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for Publishers.Retry.Chances(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for Publishers.Retry.Chances()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for Publishers.Retry.Inner.State(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = *(void *)(v7 + 64) + v11;
  unint64_t v13 = v12 & ~(unint64_t)v11;
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = v13 + v14;
  int v16 = v10 | v8;
  if (v10 | v8) {
    size_t v17 = v13 + v14;
  }
  else {
    size_t v17 = v15 + 1;
  }
  uint64_t v18 = (*(unsigned char *)(v7 + 80) | v11);
  if (v18 > 7 || ((*(_DWORD *)(v7 + 80) | v11) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return a1;
  }
  unint64_t v26 = ~(unint64_t)v11;
  if (!v16)
  {
    if (!*((unsigned char *)a2 + v15)) {
      goto LABEL_33;
    }
    int v22 = (*((unsigned __int8 *)a2 + v15) - 1) << (8 * v15);
    if (v15 > 3) {
      int v22 = 0;
    }
    if (v15)
    {
      int v23 = v15 <= 3 ? v15 : 4;
      switch(v23)
      {
        case 2:
          int v24 = *a2;
          break;
        case 3:
          int v24 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v24 = *(_DWORD *)a2;
          break;
        default:
          int v24 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v24 = 0;
    }
    if ((v24 | v22) == 0xFFFFFFFF) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
      goto LABEL_33;
    }
LABEL_27:
    memcpy(a1, a2, v17);
    return a1;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v12) & ~(unint64_t)v11, v10, v5))
  {
    goto LABEL_27;
  }
LABEL_33:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v26, ((unint64_t)a2 + v12) & v26, v5);
  if (!v16) {
    *((unsigned char *)a1 + v15) = 0;
  }
  return a1;
}

unsigned __int16 *assignWithCopy for Publishers.Retry.Inner.State(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  char v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 24))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    char v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  uint64_t v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  char v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 16))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

unsigned char *initializeWithTake for Publishers.Retry.Inner.State(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Retry.Inner.State(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v10) {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v12;
  int v15 = a2 - v11;
  if (a2 > v11)
  {
    uint64_t v16 = v13 + (v14 & ~v12);
    char v17 = 8 * v16;
    if (v16 > 3) {
      goto LABEL_12;
    }
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (v18) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v19 <= 0xFF)
      {
        if (v19 < 2) {
          goto LABEL_29;
        }
LABEL_12:
        int v18 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          goto LABEL_29;
        }
LABEL_19:
        int v20 = (v18 - 1) << v17;
        if (v16 > 3) {
          int v20 = 0;
        }
        if (v16)
        {
          if (v16 <= 3) {
            int v21 = v16;
          }
          else {
            int v21 = 4;
          }
          switch(v21)
          {
            case 2:
              int v22 = *a1;
              break;
            case 3:
              int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v22 = *(_DWORD *)a1;
              break;
            default:
              int v22 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v20) + 1;
      }
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_19;
      }
    }
  }
LABEL_29:
  if (v10 < 2) {
    return 0;
  }
  if (v5 >= v9) {
    unsigned int v24 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    unsigned int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v14) & ~v12, v9, v6);
  }
  if (v24 >= 2) {
    return v24 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Retry.Inner.State(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  if (v14) {
    unsigned int v15 = v14 - 1;
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v12 + v13;
  size_t v17 = ((v12 + v13) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  if (v14) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 == 0 || !v19)
  {
LABEL_19:
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v18 > 3)
  {
    int v6 = 1;
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v21 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
  if (!HIWORD(v21))
  {
    if (v21 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v21 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v15 < a2)
  {
LABEL_20:
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v24 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_63;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
LABEL_27:
  uint64_t v25 = ~v13;
  switch(v6)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x18C08AFF8);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v14 >= 2)
        {
          if (a2 + 1 <= v14)
          {
            if (a2 != -1)
            {
              if (v8 >= v11)
              {
                int v31 = *(void (**)(char *, uint64_t))(v7 + 56);
                uint64_t v32 = a2 + 1;
                v31(a1, v32);
              }
              else
              {
                int v29 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                uint64_t v30 = a2 + 1;
                v29((unint64_t)&a1[v16] & v25, v30, v11, v9);
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v26 = ~(-1 << (8 * v17));
            }
            else {
              int v26 = -1;
            }
            if (v17)
            {
              int v27 = v26 & (a2 - v14);
              if (v17 <= 3) {
                int v28 = v17;
              }
              else {
                int v28 = 4;
              }
              bzero(a1, v17);
              switch(v28)
              {
                case 2:
                  *(_WORD *)a1 = v27;
                  break;
                case 3:
                  *(_WORD *)a1 = v27;
                  a1[2] = BYTE2(v27);
                  break;
                case 4:
                  *(_DWORD *)a1 = v27;
                  break;
                default:
                  *a1 = v27;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t getEnumTag for Publishers.Retry.Inner.State(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  if (v7 | v5)
  {
    if (v5 >= v7) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    else {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a1 + v10) & ~v9, v7, v2);
    }
  }
  else
  {
    uint64_t v12 = (v10 & ~v9) + *(void *)(*(void *)(v2 - 8) + 64);
    if (*((unsigned char *)a1 + v12))
    {
      int v13 = (*((unsigned __int8 *)a1 + v12) - 1) << (8 * v12);
      if (v12 > 3) {
        int v13 = 0;
      }
      if (v12)
      {
        if (v12 > 3) {
          LODWORD(v12) = 4;
        }
        switch((int)v12)
        {
          case 2:
            LODWORD(v12) = *a1;
            break;
          case 3:
            LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v12) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v12) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return (v12 | v13) + 1;
    }
    else
    {
      return 0;
    }
  }
}

void destructiveInjectEnumTag for Publishers.Retry.Inner.State(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = ((v10 + v11) & ~v11) + v12;
  if (v13 >= a2)
  {
    if (v13)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v14] = 0;
      if (!a2) {
        return;
      }
    }
    if (v7 >= v9)
    {
      unsigned int v20 = *(void (**)(void))(v6 + 56);
      v20();
    }
    else
    {
      unint64_t v18 = (unint64_t)&a1[v10 + v11] & ~v11;
      BOOL v19 = *(void (**)(unint64_t))(v8 + 56);
      v19(v18);
    }
    return;
  }
  unsigned int v15 = ~v13 + a2;
  if (v14 >= 4)
  {
    bzero(a1, ((v10 + v11) & ~v11) + v12);
    *(_DWORD *)a1 = v15;
    LOBYTE(v16) = 1;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v16 = (v15 >> (8 * v14)) + 1;
  if (!v14)
  {
LABEL_25:
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v17 = v15 & ~(-1 << (8 * v14));
  bzero(a1, ((v10 + v11) & ~v11) + v12);
  if (v14 == 3)
  {
    *(_WORD *)a1 = v17;
    a1[2] = BYTE2(v17);
    goto LABEL_25;
  }
  if (v14 == 2)
  {
    *(_WORD *)a1 = v17;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  *a1 = v17;
  if (!v13) {
LABEL_26:
  }
    a1[v14] = v16;
}

uint64_t Publishers.Retry.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Retry.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x7972746552;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Retry<A>.Inner<A1>()
{
  return 0x7972746552;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Retry<A>.Inner<A1>()
{
  return Publishers.Retry.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Retry<A>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t type metadata completion function for ContinuationSubscriber()
{
  return swift_initClassMetadata2();
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  return MEMORY[0x1F4188298](withUnsafeThrowingContinuation<A>(isolation:_:), v6, v8);
}

uint64_t withUnsafeThrowingContinuation<A>(isolation:_:)()
{
  uint64_t v1 = (void (*)(uint64_t))v0[11];
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v3 = swift_continuation_init();
  v1(v3);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t ContinuationSubscriber.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0;
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *uint64_t v3 = 0;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 16) = a1;
  return v2;
}

uint64_t ContinuationSubscriber.init(_:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *uint64_t v3 = 0;
  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t ContinuationSubscriber.deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 64), -1, -1);
  outlined destroy of Subscription?(v0 + 24);
  return v0;
}

uint64_t ContinuationSubscriber.__deallocating_deinit()
{
  MEMORY[0x18C13C4B0](*(void *)(v0 + 64), -1, -1);
  outlined destroy of Subscription?(v0 + 24);

  return MEMORY[0x1F4186488](v0, 72, 7);
}

uint64_t type metadata accessor for ContinuationSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t ContinuationSubscriber.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 64);
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + 24;
  swift_beginAccess();
  outlined init with copy of Subscription?(v1 + 24, (uint64_t)v11);
  uint64_t v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (v5)
  {
    os_unfair_lock_unlock(v3);
    uint64_t v7 = a1[3];
    uint64_t v6 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v7);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    os_unfair_lock_unlock(v3);
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(1, v9, v10);
  }
}

uint64_t ContinuationSubscriber.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v7);
  uint64_t v8 = v1[2];
  if (v8)
  {
    v1[2] = 0;
    os_unfair_lock_unlock(v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    UnsafeContinuation.resume(returning:)((uint64_t)v6, v8, v3);
  }
  else
  {
    os_unfair_lock_unlock(v7);
  }
  return 0;
}

void ContinuationSubscriber.handleFailure(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v9 = *(void *)(v8 + 88);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v12 = (char *)&v15 - v11;
  unsigned int v13 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v13);
  uint64_t v14 = v1[2];
  if (v14)
  {
    v1[2] = 0;
    os_unfair_lock_unlock(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    swift_dynamicCast();
    UnsafeContinuation.resume(throwing:)((uint64_t)v7, v14, *(void *)(v3 + 80), v4);
  }
  else
  {
    os_unfair_lock_unlock(v13);
  }
}

uint64_t ContinuationSubscriber.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v14 - v5 + 16;
  uint64_t v7 = type metadata accessor for Subscribers.Completion();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9 + 16;
  uint64_t v11 = (os_unfair_lock_s *)v1[8];
  os_unfair_lock_lock(v11);
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v14, (uint64_t)(v1 + 3));
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    os_unfair_lock_unlock(v11);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    os_unfair_lock_unlock(v11);
    ContinuationSubscriber.handleFailure(_:)((uint64_t)v6);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t static ContinuationSubscriber.withUnsafeSubscription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](static ContinuationSubscriber.withUnsafeSubscription<A>(_:), 0, 0);
}

uint64_t static ContinuationSubscriber.withUnsafeSubscription<A>(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = v1[10];
  v5[2] = v6;
  v5[3] = v1[11];
  v5[4] = v3;
  v5[5] = v1[13];
  v5[6] = v2;
  v5[7] = v4;
  uint64_t v10 = (char *)&async function pointer to withUnsafeContinuation<A>(isolation:_:)
      + async function pointer to withUnsafeContinuation<A>(isolation:_:);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ContinuationSubscriber.withUnsafeSubscription<A>(_:);
  uint64_t v8 = v0[2];
  return ((uint64_t (*)(uint64_t, void, void, uint64_t (*)(uint64_t), void *, uint64_t))v10)(v8, 0, 0, partial apply for closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:), v5, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v15[1] = MEMORY[0x1E4FBC248];
  v15[2] = MEMORY[0x1E4FBC248];
  v15[3] = MEMORY[0x1E4FBC278];
  v15[4] = MEMORY[0x1E4FBC278];
  uint64_t v10 = type metadata accessor for ContinuationSubscriber();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(void *)(v11 + 56) = 0;
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  _DWORD *v12 = 0;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 16) = a1;
  v15[0] = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v15, a5, v10, a7, WitnessTable);
  return swift_release();
}

uint64_t static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:), 0, 0);
}

uint64_t static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = (void *)v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  uint64_t v6 = v1[10];
  v5[2] = v6;
  v5[3] = v1[11];
  v5[4] = v3;
  v5[5] = v1[13];
  v5[6] = v2;
  v5[7] = v4;
  uint64_t v10 = (char *)&async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:)
      + async function pointer to withUnsafeThrowingContinuation<A>(isolation:_:);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  *uint64_t v7 = v0;
  v7[1] = static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:);
  uint64_t v8 = v0[2];
  return ((uint64_t (*)(uint64_t, void, void, uint64_t (*)(uint64_t), void *, uint64_t))v10)(v8, 0, 0, partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:), v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v15[1] = swift_getAssociatedTypeWitness();
  v15[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v15[3] = swift_getAssociatedConformanceWitness();
  v15[4] = MEMORY[0x1E4FBC0F0];
  uint64_t v10 = type metadata accessor for ContinuationSubscriber();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(void *)(v11 + 56) = 0;
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  _DWORD *v12 = 0;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 16) = a1;
  v15[0] = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v15, a5, v10, a7, WitnessTable);
  return swift_release();
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ContinuationSubscriber<A, B, C>(void *a1)
{
  return ContinuationSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance ContinuationSubscriber<A, B, C>(uint64_t a1)
{
  return 0;
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance ContinuationSubscriber<A, B, C>(uint64_t a1)
{
  return ContinuationSubscriber.receive(completion:)(a1);
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in ContinuationSubscriber<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(a1, closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:));
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(a1, closure #1 in static ContinuationSubscriber.withUnsafeSubscription<A>(_:));
}

uint64_t partial apply for closure #1 in static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t Publishers.MapError.init(upstream:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (void *)(a5 + *(int *)(type metadata accessor for Publishers.MapError() + 52));
  void *v10 = a2;
  v10[1] = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
}

uint64_t Publishers.MapError.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.MapError.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  swift_retain();
  return v2;
}

uint64_t Publishers.MapError.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for Publishers.MapError();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 52));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t Publishers.MapError.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.MapError.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x726F72724570614DLL;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.MapError<A, B>.Inner<A1>()
{
  return 0x726F72724570614DLL;
}

uint64_t getEnumTagSinglePayload for Publishers.MapError(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C08CDF8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapError(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C08CFECLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *unint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.MapError.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C08D168);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.MapError.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              unint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C08D370);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t Publishers.Throttle.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Throttle.interval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Throttle.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t Publishers.Throttle.latest.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t Publishers.Throttle.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Throttle.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x656C74746F726854;
  a1[1] = 0xE800000000000000;
}

void *Publishers.Throttle.Inner.deinit()
{
  MEMORY[0x18C13C4B0](v0[3], -1, -1);
  MEMORY[0x18C13C4B0](v0[2], -1, -1);
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + 144);
  uint64_t v2 = type metadata accessor for Publishers.Throttle.Inner.State();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = (char *)v0 + *(void *)(*v0 + 160);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)v0 + *(void *)(*v0 + 168);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  return v0;
}

uint64_t Publishers.Throttle.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Throttle.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void Publishers.Throttle.Inner.cancel()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 120);
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v35 = (char *)&v29 - v5;
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[13];
  uint64_t v8 = v1[14];
  uint64_t v9 = v1[10];
  uint64_t v43 = v9;
  uint64_t v44 = v6;
  uint64_t v10 = v6;
  uint64_t v45 = v3;
  uint64_t v46 = v7;
  uint64_t v36 = v8;
  uint64_t v37 = v7;
  uint64_t v47 = v8;
  uint64_t v48 = v2;
  uint64_t v11 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v38 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v16 = (char *)&v29 - v15;
  os_unfair_lock_t v39 = (os_unfair_lock_t)v0[2];
  os_unfair_lock_lock(v39);
  int v17 = (char *)v0 + *(void *)(*v0 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v17, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = v9;
    uint64_t v43 = v9;
    uint64_t v44 = v10;
    uint64_t v30 = v10;
    uint64_t v45 = v3;
    uint64_t v46 = v37;
    uint64_t v47 = v36;
    uint64_t v48 = v2;
    uint64_t v43 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
    uint64_t v44 = v3;
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
    uint64_t v32 = v4;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t v46 = type metadata accessor for Optional();
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    uint64_t v19 = &v16[TupleTypeMetadata[12]];
    uint64_t v20 = &v16[TupleTypeMetadata[20]];
    outlined init with take of Subscription((long long *)&v16[TupleTypeMetadata[16]], (uint64_t)v40);
    uint64_t v21 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v19, v3);
    uint64_t v43 = v31;
    uint64_t v44 = v30;
    uint64_t v45 = v3;
    uint64_t v46 = v37;
    uint64_t v47 = v36;
    uint64_t v48 = v2;
    uint64_t v22 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
    (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v16, v22);
    int v23 = v38;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v17, v23, v11);
    swift_endAccess();
    int v24 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v35, 1, 1);
    uint64_t v25 = (char *)v0 + *(void *)(*v0 + 160);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v25, v24, v32);
    swift_endAccess();
    *(void *)((char *)v0 + *(void *)(*v0 + 152)) = 0;
    os_unfair_lock_unlock(v39);
    uint64_t v26 = v41;
    uint64_t v27 = v42;
    __swift_project_boxed_opaque_existential_1(v40, v41);
    (*(void (**)(uint64_t))(*(void *)(v27 + 8) + 8))(v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    int v28 = v38;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v17, v28, v11);
    swift_endAccess();
    os_unfair_lock_unlock(v39);
  }
}

void Publishers.Throttle.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v70 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = v3[14];
  uint64_t v5 = v3[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v67 = (char *)&v59 - v7;
  uint64_t v72 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v71 = (char *)&v59 - v8;
  uint64_t v10 = v3[12];
  uint64_t v11 = v3[13];
  uint64_t v12 = v3[15];
  uint64_t v83 = v3[10];
  uint64_t v9 = v83;
  uint64_t v84 = v5;
  uint64_t v85 = v10;
  uint64_t v86 = v11;
  uint64_t v87 = v4;
  uint64_t v88 = v12;
  uint64_t v13 = type metadata accessor for Publishers.Throttle.Inner.State();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v73 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v77 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v74 = (char *)&v59 - v20;
  uint64_t v83 = v9;
  uint64_t v84 = v5;
  uint64_t v78 = v10;
  uint64_t v85 = v10;
  uint64_t v86 = v11;
  uint64_t v87 = v4;
  uint64_t v88 = v12;
  uint64_t v21 = type metadata accessor for Publishers.Throttle.Inner.Scheduling();
  uint64_t v76 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  int64_t v75 = (char *)&v59 - v22;
  int v23 = (os_unfair_lock_s *)v2[2];
  os_unfair_lock_lock(v23);
  int v24 = (char *)v2 + *(void *)(*v2 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v24, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v63 = v24;
    os_unfair_lock_t v66 = v23;
    uint64_t v64 = v13;
    uint64_t v62 = v5;
    uint64_t v65 = v14;
    uint64_t v61 = v4;
    uint64_t v25 = v78;
    uint64_t v79 = v21;
    uint64_t v80 = v78;
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Subscription);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Subscribers.Completion();
    uint64_t v82 = type metadata accessor for Optional();
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    uint64_t v27 = &v19[TupleTypeMetadata[12]];
    int v28 = (long long *)&v19[TupleTypeMetadata[16]];
    uint64_t v29 = &v19[TupleTypeMetadata[20]];
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v19, v21);
    uint64_t v30 = v74;
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v74, v27, v25);
    outlined init with take of Subscription(v28, (uint64_t)&v83);
    uint64_t v31 = type metadata accessor for Subscribers.Completion();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v31) == 1)
    {
      uint64_t v33 = type metadata accessor for Optional();
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v29, v33);
      uint64_t v60 = v21;
      uint64_t v34 = v75;
      uint64_t v35 = v62;
      (*(void (**)(void))(v72 + 16))();
      uint64_t v36 = v67;
      (*(void (**)(uint64_t))(v61 + 40))(v35);
      uint64_t v37 = (char *)v2 + *(void *)(*v2 + 168);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v68 + 40))(v37, v36, AssociatedTypeWitness);
      swift_endAccess();
      uint64_t v38 = v30;
      os_unfair_lock_t v39 = v73;
      uint64_t v40 = &v73[TupleTypeMetadata[12]];
      uint64_t v41 = (uint64_t)&v73[TupleTypeMetadata[16]];
      uint64_t v42 = &v73[TupleTypeMetadata[20]];
      uint64_t v43 = v34;
      uint64_t v44 = v60;
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v73, v43, v60);
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v40, v38, v78);
      outlined init with copy of Subscription((uint64_t)&v83, v41);
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v42, v70, v31);
      uint64_t v45 = v42;
      uint64_t v46 = v44;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v45, 0, 1, v31);
      uint64_t v47 = v72;
      uint64_t v48 = v64;
      swift_storeEnumTagMultiPayload();
      uint64_t v49 = v63;
      swift_beginAccess();
      uint64_t v50 = v49;
      uint64_t v51 = v39;
      uint64_t v52 = v48;
      uint64_t v53 = v62;
      uint64_t v54 = v74;
      uint64_t v55 = v71;
      (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v50, v51, v52);
      swift_endAccess();
      uint64_t v56 = *(void *)(*v2 + 176);
      if (*((unsigned char *)v2 + v56))
      {
        os_unfair_lock_unlock(v66);
      }
      else
      {
        *((unsigned char *)v2 + v56) = 1;
        os_unfair_lock_unlock(v66);
        swift_retain();
        Scheduler.schedule(_:)((uint64_t)partial apply for closure #1 in Publishers.Throttle.Inner.receive(completion:), (uint64_t)v2, v53, v61);
        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v55, v53);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v78);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v46);
      return;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v30, v78);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v21);
    uint64_t v57 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v57 - 8) + 8))(v29, v57);
    uint64_t v14 = v65;
    uint64_t v13 = v64;
    int v23 = v66;
    int v24 = v63;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
  if ((*((unsigned char *)v2 + *(void *)(*v2 + 176)) & 1) == 0)
  {
    uint64_t v58 = v73;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v24, v58, v13);
    swift_endAccess();
  }
  os_unfair_lock_unlock(v23);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Throttle<A, B>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Throttle<A, B>.Inner<A1>()
{
  return 0x656C74746F726854;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Throttle<A, B>.Inner<A1>()
{
  return Publishers.Throttle.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Throttle<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Throttle<A, B>.Inner<A1>()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Throttle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v32 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v32 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v13 + v15;
  uint64_t v17 = *(void *)(v14 + 64);
  unint64_t v18 = v17 + ((v13 + v15 + v12) & ~v15) + 1;
  uint64_t v19 = (*(unsigned char *)(v9 + 80) | *(unsigned char *)(v6 + 80) | *(unsigned char *)(v14 + 80));
  if (v19 <= 7
    && v18 <= 0x18
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v14 + 80)) & 0x100000) == 0)
  {
    int v23 = a1;
    uint64_t v24 = ~v10;
    uint64_t v30 = AssociatedTypeWitness;
    uint64_t v31 = ~v15;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v23, a2, v32);
    unint64_t v25 = ((unint64_t)v23 + v11) & v24;
    unint64_t v26 = ((unint64_t)a2 + v11) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v25, v26, v30);
    unint64_t v27 = (v25 + v16) & v31;
    unint64_t v28 = (v26 + v16) & v31;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(v27, v28, v5);
    *(unsigned char *)(v27 + v17) = *(unsigned char *)(v28 + v17);
  }
  else
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    int v23 = (uint64_t *)(v22 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  return v23;
}

uint64_t assignWithCopy for Publishers.Throttle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v20, v21, v8);
  *(unsigned char *)(*(void *)(v17 + 40) + v20) = *(unsigned char *)(*(void *)(v17 + 40) + v21);
  return a1;
}

uint64_t initializeWithTake for Publishers.Throttle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 32);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20, v21, v8);
  *(unsigned char *)(*(void *)(v17 + 32) + v20) = *(unsigned char *)(*(void *)(v17 + 32) + v21);
  return a1;
}

uint64_t assignWithTake for Publishers.Throttle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40))(v20, v21, v8);
  *(unsigned char *)(*(void *)(v17 + 24) + v20) = *(unsigned char *)(*(void *)(v17 + 24) + v21);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for Publishers.Throttle.Inner.State(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v70 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v59 = v4;
  uint64_t v60 = *(void *)(v4 - 8);
  int v5 = *(_DWORD *)(v60 + 80);
  uint64_t v65 = *(void *)(v70 + 64) + v5;
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v63 = *(void *)(v60 + 64);
  int v7 = *(_DWORD *)(v61 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v63 + v7 + (v65 & ~(unint64_t)v5) + 1;
  uint64_t v10 = *(void *)(v61 + 64);
  unint64_t v11 = (v9 & ~(unint64_t)v7) + v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = v70;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(_DWORD *)(v14 + 80);
  unint64_t v17 = (v16 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v16;
  if (v15) {
    uint64_t v18 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 64) + 1;
  }
  if (v15 >= 2) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  if (v19 + v17 <= v11) {
    unint64_t v20 = (v9 & ~(unint64_t)v7) + v10;
  }
  else {
    unint64_t v20 = v19 + v17;
  }
  size_t v21 = v20 + 1;
  int v22 = v5 | v7 | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v70 + 80);
  if ((v22 & 0x1000F8) != 0 || v21 > 0x18)
  {
    uint64_t v24 = *(void *)a2;
    *a1 = *(void *)a2;
    unint64_t v25 = (void *)(v24 + (((v22 & 0xF8 | 7u) + 16) & ~(unint64_t)(v22 & 0xF8 | 7u)));
    swift_retain();
    return v25;
  }
  uint64_t v57 = v10;
  uint64_t v58 = v6;
  unint64_t v25 = a1;
  unsigned int v26 = a2[v20];
  unsigned int v27 = v26 - 2;
  if (v26 < 2)
  {
    uint64_t v29 = v61;
    uint64_t v30 = v63;
  }
  else
  {
    if (v20 <= 3) {
      uint64_t v28 = v20;
    }
    else {
      uint64_t v28 = 4;
    }
    uint64_t v29 = v61;
    uint64_t v30 = v63;
    switch(v28)
    {
      case 1:
        int v31 = *a2;
        if (v20 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 2:
        int v31 = *(unsigned __int16 *)a2;
        if (v20 >= 4) {
          goto LABEL_29;
        }
        goto LABEL_27;
      case 3:
        int v31 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v20 < 4) {
          goto LABEL_27;
        }
        goto LABEL_29;
      case 4:
        int v31 = *(_DWORD *)a2;
        if (v20 < 4) {
LABEL_27:
        }
          unsigned int v26 = (v31 | (v27 << (8 * v20))) + 2;
        else {
LABEL_29:
        }
          unsigned int v26 = v31 + 2;
        break;
      default:
        break;
    }
  }
  unint64_t v32 = ~(unint64_t)v5;
  uint64_t v33 = ~v8;
  if (v26 == 1)
  {
    unint64_t v56 = v20;
    uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
    size_t v64 = v19;
    uint64_t v66 = AssociatedTypeWitness;
    size_t __na = v18;
    unsigned int v71 = *(_DWORD *)(v14 + 84);
    (*(void (**)(void *))(v13 + 16))(v25);
    unint64_t v36 = v9;
    uint64_t v37 = v30;
    unint64_t v38 = ((unint64_t)v25 + v65) & v32;
    uint64_t v39 = v29;
    unint64_t v40 = (unint64_t)&a2[v65] & v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v60 + 16))(v38, v40, v59);
    *(unsigned char *)(v38 + v37) = *(unsigned char *)(v40 + v37);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))(((unint64_t)v25 + v36) & v33, (unint64_t)&a2[v36] & v33, v58);
    unint64_t v41 = (v57 + 7 + (((unint64_t)v25 + v36) & v33)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v57 + 7 + ((unint64_t)&a2[v36] & v33)) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)(v42 + 24);
    *(void *)(v41 + 24) = v43;
    *(void *)(v41 + 32) = *(void *)(v42 + 32);
    (**(void (***)(unint64_t, unint64_t))(v43 - 8))(v41, v42);
    uint64_t v44 = v42 + v16;
    uint64_t v45 = (void *)((v41 + v16 + 40) & ~v16);
    uint64_t v46 = (unsigned __int8 *)((v44 + 40) & ~v16);
    if (v71 > 1)
    {
      unsigned int v53 = (*(uint64_t (**)(unsigned __int8 *))(v62 + 48))(v46);
      uint64_t v48 = v62;
      size_t v47 = v64;
      unint64_t v49 = v56;
      if (v53 >= 2)
      {
LABEL_55:
        memcpy(v45, v46, v47);
LABEL_56:
        *((unsigned char *)v25 + v49) = 1;
        return v25;
      }
    }
    else
    {
      uint64_t v48 = v62;
      size_t v47 = v64;
      unint64_t v49 = v56;
      if (v46[__na])
      {
        int v50 = (v46[__na] - 1) << (8 * __na);
        if (__na > 3) {
          int v50 = 0;
        }
        if (__na)
        {
          int v51 = __na <= 3 ? __na : 4;
          switch(v51)
          {
            case 2:
              int v52 = *(unsigned __int16 *)v46;
              break;
            case 3:
              int v52 = *(unsigned __int16 *)v46 | (v46[2] << 16);
              break;
            case 4:
              int v52 = *(_DWORD *)v46;
              break;
            default:
              int v52 = *v46;
              break;
          }
        }
        else
        {
          int v52 = 0;
        }
        if ((v52 | v50) != 0xFFFFFFFF) {
          goto LABEL_55;
        }
      }
    }
    uint64_t v54 = v48;
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v66))
    {
      memcpy(v45, v46, __na);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v54 + 16))(v45, v46, v66);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v45, 0, 1, v66);
    }
    if (v71 <= 1) {
      *((unsigned char *)v45 + __na) = 0;
    }
    goto LABEL_56;
  }
  if (v26)
  {
    memcpy(a1, a2, v21);
  }
  else
  {
    (*(void (**)(void *))(v70 + 16))(a1);
    unint64_t v34 = ((unint64_t)a1 + v65) & v32;
    unint64_t v35 = (unint64_t)&a2[v65] & v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v60 + 16))(v34, v35, v59);
    *(unsigned char *)(v34 + v30) = *(unsigned char *)(v35 + v30);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(((unint64_t)a1 + v9) & v33, (unint64_t)&a2[v9] & v33, v58);
    *((unsigned char *)a1 + v20) = 0;
  }
  return v25;
}

uint64_t destroy for Publishers.Throttle.Inner.State(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v6 = *(void *)(v40 + 64);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v11 = v6 + v8;
  uint64_t v38 = *(void *)(v42 + 64);
  uint64_t v39 = *(void *)(v7 + 64) + v10 + ((v6 + v8) & ~v8) + 1;
  unint64_t v12 = (v39 & ~v10) + v38;
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(result - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v16 = (v15 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v15;
  uint64_t v17 = *(unsigned int *)(v14 + 84);
  if (v17) {
    uint64_t v18 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 64) + 1;
  }
  if (v17 < 2) {
    ++v16;
  }
  unint64_t v19 = v16 + v18;
  if (v19 <= v12) {
    unint64_t v19 = (v39 & ~v10) + v38;
  }
  unsigned int v20 = a1[v19];
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *a1;
        if (v19 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 2:
        int v23 = *(unsigned __int16 *)a1;
        if (v19 >= 4) {
          goto LABEL_20;
        }
        goto LABEL_18;
      case 3:
        int v23 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v19 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 4:
        int v23 = *(_DWORD *)a1;
        if (v19 < 4) {
LABEL_18:
        }
          unsigned int v20 = (v23 | (v21 << (8 * v19))) + 2;
        else {
LABEL_20:
        }
          unsigned int v20 = v23 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v24 = ~v8;
  uint64_t v25 = ~v10;
  if (v20 != 1)
  {
    if (v20) {
      return result;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(a1, v41);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v11] & v24, v4);
    unsigned int v26 = (unsigned __int16 *)((unint64_t)&a1[v39] & v25);
    unsigned int v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v42 + 8);
    uint64_t v28 = v9;
LABEL_24:
    return v27(v26, v28);
  }
  uint64_t v35 = v18;
  uint64_t v36 = *(void *)(result - 8);
  uint64_t v37 = result;
  (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(a1, v41);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v11] & v24, v4);
  unint64_t v29 = (unint64_t)&a1[v39] & v25;
  (*(void (**)(unint64_t, uint64_t))(v42 + 8))(v29, v9);
  unint64_t v30 = (v38 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(v30);
  int v31 = (unsigned __int16 *)((v30 + v15 + 40) & ~v15);
  if (v17 > 1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v36 + 48))(v31, v17, v37);
    if (result >= 2) {
      return result;
    }
    goto LABEL_44;
  }
  if (!*((unsigned char *)v31 + v35)) {
    goto LABEL_44;
  }
  int v32 = (*((unsigned __int8 *)v31 + v35) - 1) << (8 * v35);
  if (v35 > 3) {
    int v32 = 0;
  }
  if (v35)
  {
    int v33 = v35 <= 3 ? v35 : 4;
    switch(v33)
    {
      case 2:
        int v34 = *v31;
        break;
      case 3:
        int v34 = *v31 | (*((unsigned __int8 *)v31 + 2) << 16);
        break;
      case 4:
        int v34 = *(_DWORD *)v31;
        break;
      default:
        int v34 = *(unsigned __int8 *)v31;
        break;
    }
  }
  else
  {
    int v34 = 0;
  }
  if ((v34 | v32) == 0xFFFFFFFF)
  {
LABEL_44:
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v36 + 48))(v31, 1, v37);
    if (result) {
      return result;
    }
    uint64_t v28 = v37;
    unsigned int v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v36 + 8);
    unsigned int v26 = v31;
    goto LABEL_24;
  }
  return result;
}

unsigned __int8 *assignWithCopy for Publishers.Throttle.Inner.State(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v61 = AssociatedTypeWitness;
    uint64_t v8 = *(void *)(v60 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v59 = v8 + v10;
    uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v54 = *(void *)(v9 + 64);
    uint64_t v62 = v54 + v12 + ((v8 + v10) & ~v10) + 1;
    uint64_t v53 = *(void *)(v11 + 64);
    size_t v13 = (v62 & ~v12) + v53;
    uint64_t v63 = *(void *)(a3 + 32);
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = v15;
    uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v56 = v15;
    uint64_t v57 = v14;
    unsigned int v18 = *(_DWORD *)(v15 + 84);
    if (v18) {
      uint64_t v19 = *(void *)(v16 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v16 + 64) + 1;
    }
    unsigned int v55 = v18;
    if (v18 >= 2) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v19 + 1;
    }
    if (v20 + ((v17 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v17) > v13) {
      size_t v13 = v20 + ((v17 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v17);
    }
    unsigned int v21 = a1[v13];
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a1;
          if (v13 < 4) {
            goto LABEL_22;
          }
          goto LABEL_23;
        case 2:
          int v24 = *(unsigned __int16 *)a1;
          if (v13 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v13 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 4:
          int v24 = *(_DWORD *)a1;
          if (v13 < 4) {
LABEL_22:
          }
            v24 |= v22 << (8 * v13);
LABEL_23:
          unsigned int v21 = v24 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v25 = ~v10;
    uint64_t v58 = ~v12;
    size_t __n = v20;
    uint64_t v52 = ~v17;
    if (v21 != 1)
    {
      if (!v21)
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v60 + 8))(a1, v61);
        (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&a1[v59] & v25, v6);
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v62] & v58, v63);
      }
      goto LABEL_46;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v60 + 8))(a1, v61);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&a1[v59] & v25, v6);
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))((unint64_t)&a1[v62] & v58, v63);
    unint64_t v26 = (v53 + ((unint64_t)&a1[v62] & v58) + 7) & 0xFFFFFFFFFFFFFFF8;
    __swift_destroy_boxed_opaque_existential_1(v26);
    unsigned int v27 = (unsigned __int16 *)((v26 + v17 + 40) & v52);
    if (v55 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int16 *))(v56 + 48))(v27) >= 2) {
        goto LABEL_46;
      }
    }
    else if (*((unsigned char *)v27 + v19))
    {
      int v28 = (*((unsigned __int8 *)v27 + v19) - 1) << (8 * v19);
      if (v19 > 3) {
        int v28 = 0;
      }
      if (v19)
      {
        int v29 = v19 <= 3 ? v19 : 4;
        switch(v29)
        {
          case 2:
            int v30 = *v27;
            break;
          case 3:
            int v30 = *v27 | (*((unsigned __int8 *)v27 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)v27;
            break;
          default:
            int v30 = *(unsigned __int8 *)v27;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      if ((v30 | v28) != 0xFFFFFFFF)
      {
LABEL_46:
        unsigned int v31 = a2[v13];
        unsigned int v32 = v31 - 2;
        if (v31 >= 2)
        {
          if (v13 <= 3) {
            uint64_t v33 = v13;
          }
          else {
            uint64_t v33 = 4;
          }
          switch(v33)
          {
            case 1:
              int v34 = *a2;
              if (v13 >= 4) {
                goto LABEL_62;
              }
              goto LABEL_56;
            case 2:
              int v34 = *(unsigned __int16 *)a2;
              if (v13 >= 4) {
                goto LABEL_62;
              }
              goto LABEL_56;
            case 3:
              int v34 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v13 < 4) {
                goto LABEL_56;
              }
              goto LABEL_62;
            case 4:
              int v34 = *(_DWORD *)a2;
              if (v13 < 4)
              {
LABEL_56:
                unsigned int v31 = (v34 | (v32 << (8 * v13))) + 2;
                break;
              }
LABEL_62:
              unsigned int v31 = v34 + 2;
              if (v31 == 1) {
                goto LABEL_63;
              }
              goto LABEL_58;
            default:
              break;
          }
        }
        if (v31 != 1)
        {
LABEL_58:
          if (v31)
          {
            memcpy(a1, a2, v13 + 1);
          }
          else
          {
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v60 + 16))(a1, a2, v61);
            unint64_t v35 = (unint64_t)&a1[v59] & v25;
            unint64_t v36 = (unint64_t)&a2[v59] & v25;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v35, v36, v6);
            *(unsigned char *)(v35 + v54) = *(unsigned char *)(v36 + v54);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((unint64_t)&a1[v62] & v58, (unint64_t)&a2[v62] & v58, v63);
            a1[v13] = 0;
          }
          return a1;
        }
LABEL_63:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v60 + 16))(a1, a2, v61);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v59] & v25, (unint64_t)&a2[v59] & v25, v6);
        *(unsigned char *)(((unint64_t)&a1[v59] & v25) + v54) = *(unsigned char *)(((unint64_t)&a2[v59] & v25) + v54);
        unint64_t v37 = (unint64_t)&a2[v62] & v58;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((unint64_t)&a1[v62] & v58, v37, v63);
        unint64_t v38 = (v53 + 7 + ((unint64_t)&a1[v62] & v58)) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v39 = (v53 + 7 + v37) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v40 = *(void *)(v39 + 24);
        *(void *)(v38 + 24) = v40;
        *(void *)(v38 + 32) = *(void *)(v39 + 32);
        (**(void (***)(unint64_t, unint64_t))(v40 - 8))(v38, v39);
        uint64_t v41 = v39 + v17;
        uint64_t v42 = (void *)((v38 + v17 + 40) & v52);
        uint64_t v43 = (unsigned __int8 *)((v41 + 40) & v52);
        if (v55 > 1)
        {
          uint64_t v46 = v56;
          uint64_t v45 = v57;
          size_t v44 = v19;
          if ((*(unsigned int (**)(unsigned __int8 *, void, uint64_t))(v56 + 48))(v43, v55, v57) >= 2)
          {
LABEL_84:
            memcpy(v42, v43, __n);
            goto LABEL_85;
          }
        }
        else
        {
          size_t v44 = v19;
          uint64_t v46 = v56;
          uint64_t v45 = v57;
          if (v43[v19])
          {
            int v47 = (v43[v19] - 1) << (8 * v19);
            if (v19 > 3) {
              int v47 = 0;
            }
            if (v19)
            {
              int v48 = v19 <= 3 ? v19 : 4;
              switch(v48)
              {
                case 2:
                  int v49 = *(unsigned __int16 *)v43;
                  break;
                case 3:
                  int v49 = *(unsigned __int16 *)v43 | (v43[2] << 16);
                  break;
                case 4:
                  int v49 = *(_DWORD *)v43;
                  break;
                default:
                  int v49 = *v43;
                  break;
              }
            }
            else
            {
              int v49 = 0;
            }
            if ((v49 | v47) != 0xFFFFFFFF) {
              goto LABEL_84;
            }
          }
        }
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v45))
        {
          memcpy(v42, v43, v44);
          if (v55 > 1) {
            goto LABEL_85;
          }
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v46 + 16))(v42, v43, v45);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
          if (v55 > 1)
          {
LABEL_85:
            a1[v13] = 1;
            return a1;
          }
        }
        *((unsigned char *)v42 + v44) = 0;
        goto LABEL_85;
      }
    }
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v56 + 48))(v27, 1, v57)) {
      (*(void (**)(unsigned __int16 *, uint64_t))(v56 + 8))(v27, v57);
    }
    goto LABEL_46;
  }
  return a1;
}

unsigned char *initializeWithTake for Publishers.Throttle.Inner.State(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(v60 + 64);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v64 = *(void *)(v8 + 64);
  uint64_t v63 = v64 + v12 + ((v7 + v9) & ~v9) + 1;
  uint64_t v59 = *(void *)(v11 + 64);
  size_t v13 = (v63 & ~v12) + v59;
  unint64_t v14 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = *(void *)(a3 + 32);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  unsigned int v19 = *(_DWORD *)(v16 + 84);
  if (v19) {
    uint64_t v20 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v16 + 64) + 1;
  }
  if (v19 >= 2) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  if (v21 + ((v18 + v14 + 40) & ~v18) <= v13) {
    size_t v22 = (v63 & ~v12) + v59;
  }
  else {
    size_t v22 = v21 + ((v18 + v14 + 40) & ~v18);
  }
  unsigned int v23 = a2[v22];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v22 <= 3) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *a2;
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 2:
        int v26 = *(unsigned __int16 *)a2;
        if (v22 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_20;
      case 3:
        int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v22 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 4:
        int v26 = *(_DWORD *)a2;
        if (v22 < 4) {
LABEL_20:
        }
          unsigned int v23 = (v26 | (v24 << (8 * v22))) + 2;
        else {
LABEL_22:
        }
          unsigned int v23 = v26 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v27 = ~v9;
  uint64_t v28 = ~v12;
  if (v23 == 1)
  {
    size_t v54 = v21;
    uint64_t v55 = *(void *)(v15 - 8);
    uint64_t v57 = v15;
    size_t __n = v20;
    size_t v56 = v22;
    int v34 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v60 + 32);
    unsigned int v61 = *(_DWORD *)(v17 + 84);
    v34(a1, a2, v62);
    unint64_t v35 = (unint64_t)&a1[v10] & v27;
    unint64_t v36 = (unint64_t)&a2[v10];
    uint64_t v33 = a1;
    unint64_t v37 = v36 & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v35, v36 & v27, v5);
    *(unsigned char *)(v35 + v64) = *(unsigned char *)(v37 + v64);
    unint64_t v38 = (unint64_t)&a1[v63] & v28;
    unint64_t v39 = (unint64_t)&a2[v63] & v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(v38, v39, v65);
    unint64_t v40 = (v59 + 7 + v38) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v59 + 7 + v39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = *(void *)(v41 + 32);
    long long v43 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v43;
    *(void *)(v40 + 32) = v42;
    size_t v44 = (void *)((v40 + v18 + 40) & ~v18);
    uint64_t v45 = (unsigned __int8 *)((v41 + v18 + 40) & ~v18);
    if (v61 > 1)
    {
      unsigned int v50 = (*(uint64_t (**)(unsigned __int8 *))(v55 + 48))(v45);
      uint64_t v46 = v55;
      if (v50 >= 2)
      {
LABEL_48:
        memcpy(v44, v45, v54);
        size_t v52 = v56;
LABEL_49:
        a1[v52] = 1;
        return v33;
      }
    }
    else
    {
      uint64_t v46 = v55;
      if (v45[__n])
      {
        int v47 = (v45[__n] - 1) << (8 * __n);
        if (__n > 3) {
          int v47 = 0;
        }
        if (__n)
        {
          int v48 = __n <= 3 ? __n : 4;
          switch(v48)
          {
            case 2:
              int v49 = *(unsigned __int16 *)v45;
              break;
            case 3:
              int v49 = *(unsigned __int16 *)v45 | (v45[2] << 16);
              break;
            case 4:
              int v49 = *(_DWORD *)v45;
              break;
            default:
              int v49 = *v45;
              break;
          }
        }
        else
        {
          int v49 = 0;
        }
        if ((v49 | v47) != 0xFFFFFFFF) {
          goto LABEL_48;
        }
      }
    }
    uint64_t v51 = v46;
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v46 + 48))(v45, 1, v57))
    {
      memcpy(v44, v45, __n);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v51 + 32))(v44, v45, v57);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v44, 0, 1, v57);
    }
    size_t v52 = v56;
    if (v61 <= 1) {
      *((unsigned char *)v44 + __n) = 0;
    }
    goto LABEL_49;
  }
  if (v23)
  {
    uint64_t v33 = a1;
    memcpy(a1, a2, v22 + 1);
  }
  else
  {
    size_t v29 = v22;
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v60 + 32))(a1, a2, v62);
    unint64_t v30 = (unint64_t)&a1[v10] & v27;
    unint64_t v31 = (unint64_t)&a2[v10] & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v30, v31, v5);
    char v32 = *(unsigned char *)(v31 + v64);
    uint64_t v33 = a1;
    *(unsigned char *)(v30 + v64) = v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((unint64_t)&a1[v63] & v28, (unint64_t)&a2[v63] & v28, v65);
    a1[v29] = 0;
  }
  return v33;
}

uint64_t getEnumTagSinglePayload for Publishers.Throttle.Inner.State(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v7 = ((*(void *)(*(void *)(v6 - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 32) - 8) + 80)
       + ((*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)
         + *(unsigned __int8 *)(*(void *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))
       + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 32) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  if (!v10) {
    ++v11;
  }
  if (v10 >= 2) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  unint64_t v13 = v12 + v9;
  if (v13 <= v7) {
    unint64_t v14 = v7;
  }
  else {
    unint64_t v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_28;
  }
  unint64_t v15 = v14 + 1;
  char v16 = 8 * (v14 + 1);
  if ((v14 + 1) <= 3)
  {
    unsigned int v19 = ((a2 + ~(-1 << v16) - 253) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v19 < 2)
    {
LABEL_28:
      unsigned int v21 = *((unsigned __int8 *)a1 + v14);
      if (v21 >= 3) {
        return (v21 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_20:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v15 | v20) + 254;
}

void storeEnumTagSinglePayload for Publishers.Throttle.Inner.State(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v9 = ((*(void *)(*(void *)(v8 - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 32) - 8) + 80)
       + ((*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)
         + *(unsigned __int8 *)(*(void *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80))
       + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 32) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v11 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  uint64_t v13 = *(void *)(v10 + 64);
  if (!v12) {
    ++v13;
  }
  if (v12 >= 2) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v13 + 1;
  }
  unint64_t v15 = v14 + v11;
  if (v15 <= v9) {
    unint64_t v15 = v9;
  }
  size_t v16 = v15 + 1;
  if (a3 < 0xFE)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 + ~(-1 << (8 * v16)) - 253) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v18 = a2 - 254;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v15 != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v15 + 1);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x18C091290);
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v17)
    {
      case 1:
        a1[v16] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v16] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v16] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          a1[v15] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for Publishers.Throttle.Inner.State(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v5 = ((*(void *)(*(void *)(v4 - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8) + 80)
       + ((*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)
         + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80))
       + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (!v8) {
    ++v9;
  }
  if (v8 >= 2) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v9 + 1;
  }
  unint64_t v11 = v10 + v7;
  if (v11 <= v5) {
    unint64_t v11 = v5;
  }
  uint64_t result = a1[v11];
  if (result >= 2)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v11 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_20;
        }
        goto LABEL_18;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 < 4) {
          goto LABEL_18;
        }
        goto LABEL_20;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v11 < 4) {
LABEL_18:
        }
          uint64_t result = (v14 | ((result - 2) << (8 * v11))) + 2;
        else {
LABEL_20:
        }
          uint64_t result = (v14 + 2);
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for Publishers.Throttle.Inner.State(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v7 = ((*(void *)(*(void *)(v6 - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 32) - 8) + 80)
       + ((*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)
         + *(unsigned __int8 *)(*(void *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))
       + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 32) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  if (!v10) {
    ++v11;
  }
  if (v10 >= 2) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  size_t v13 = v12 + v9;
  if (v13 <= v7) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = v13;
  }
  if (a2 > 1)
  {
    if (v14 <= 3) {
      char v15 = ((a2 - 2) >> (8 * v14)) + 2;
    }
    else {
      char v15 = 2;
    }
    if (v14 <= 3) {
      int v16 = (a2 - 2) & ~(-1 << (8 * v14));
    }
    else {
      int v16 = a2 - 2;
    }
    a1[v14] = v15;
    if (v14 >= 4) {
      int v17 = 4;
    }
    else {
      int v17 = v14;
    }
    bzero(a1, v14);
    switch(v17)
    {
      case 2:
        *(_WORD *)a1 = v16;
        break;
      case 3:
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
        break;
      case 4:
        *(_DWORD *)a1 = v16;
        break;
      default:
        *a1 = v16;
        break;
    }
  }
  else
  {
    a1[v14] = a2;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Throttle.Inner.Scheduling(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v7 + 80) | v9);
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | v9) & 0x100000) != 0
    || v11 + (v10 & ~(unint64_t)v9) + 1 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    unint64_t v16 = ~(unint64_t)v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v17 = ((unint64_t)a2 + v10) & v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v16, v17, v5);
    *(unsigned char *)((((unint64_t)a1 + v10) & v16) + v11) = *(unsigned char *)(v17 + v11);
  }
  return a1;
}

uint64_t assignWithCopy for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 40) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v5);
  *(unsigned char *)(*(void *)(v9 + 40) + v12) = *(unsigned char *)(*(void *)(v9 + 40) + v13);
  return a1;
}

uint64_t initializeWithTake for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 32) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v5);
  *(unsigned char *)(*(void *)(v9 + 32) + v12) = *(unsigned char *)(*(void *)(v9 + 32) + v13);
  return a1;
}

uint64_t assignWithTake for Publishers.Throttle.Inner.Scheduling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v7 + 24) + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v5);
  *(unsigned char *)(*(void *)(v9 + 24) + v12) = *(unsigned char *)(*(void *)(v9 + 24) + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Throttle.Inner.Scheduling(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = *(void *)(v9 + 64);
  if (v10 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 > v13)
  {
    uint64_t v15 = v12 + (v14 & ~v11) + 1;
    char v16 = 8 * v15;
    if (v15 > 3) {
      goto LABEL_9;
    }
    unsigned int v18 = ((a2 - v13 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (v18 >= 2)
    {
LABEL_9:
      int v17 = *((unsigned __int8 *)a1 + v15);
      if (!*((unsigned char *)a1 + v15)) {
        goto LABEL_26;
      }
LABEL_16:
      int v19 = (v17 - 1) << v16;
      if (v15 > 3) {
        int v19 = 0;
      }
      if (v12 + (v14 & ~v11) == -1)
      {
        int v21 = 0;
      }
      else
      {
        if (v15 <= 3) {
          int v20 = v12 + (v14 & ~v11) + 1;
        }
        else {
          int v20 = 4;
        }
        switch(v20)
        {
          case 2:
            int v21 = *a1;
            break;
          case 3:
            int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v21 = *(_DWORD *)a1;
            break;
          default:
            int v21 = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v27 = v13 + (v21 | v19);
      return (v27 + 1);
    }
  }
LABEL_26:
  if (v8 == v13)
  {
    size_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    return v22(a1, v8, AssociatedTypeWitness);
  }
  unint64_t v24 = ((unint64_t)a1 + v14) & ~v11;
  if (v10 != v13)
  {
    unsigned int v26 = *(unsigned __int8 *)(v24 + v12);
    if (v26 < 2) {
      return 0;
    }
    int v27 = (v26 + 2147483646) & 0x7FFFFFFF;
    return (v27 + 1);
  }
  uint64_t v25 = *(uint64_t (**)(unint64_t))(v9 + 48);

  return v25(v24);
}

void storeEnumTagSinglePayload for Publishers.Throttle.Inner.Scheduling(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = *(void *)(v11 + 64);
  if (v12 <= v10) {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (v15 <= 0xFE) {
    unsigned int v15 = 254;
  }
  uint64_t v16 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13;
  size_t v17 = v14 + (v16 & ~v13) + 1;
  if (a3 <= v15)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v22 = ((a3 - v15 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v22))
    {
      int v18 = 4;
    }
    else if (v22 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v22 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v15 < a2)
  {
    unsigned int v19 = ~v15 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v14 + (v16 & ~v13) != -1)
      {
        int v23 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v14 + (v16 & ~v13) + 1);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  uint64_t v21 = ~v13;
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x18C0923DCLL);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v10 == v15)
        {
          unint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v24(a1, a2, v10, AssociatedTypeWitness);
        }
        else
        {
          unint64_t v25 = (unint64_t)&a1[v16] & v21;
          if (v12 == v15)
          {
            unsigned int v26 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
            v26(v25, a2);
          }
          else
          {
            *(unsigned char *)(v25 + v14) = a2 + 1;
          }
        }
      }
      return;
  }
}

char *Publishers.Share.__allocating_init(upstream:)(uint64_t a1)
{
  uint64_t v3 = specialized Publishers.Share.__allocating_init(upstream:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

uint64_t Publishers.Share.upstream.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 104));
}

char *Publishers.Share.init(upstream:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized Publishers.Share.init(upstream:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

BOOL static Publishers.Share.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Publishers.Share<A>(uint64_t *a1, uint64_t *a2)
{
  return static Publishers.Share.== infix(_:_:)(*a1, *a2);
}

char *specialized Publishers.Share.__allocating_init(upstream:)(uint64_t a1)
{
  return specialized Publishers.Share.init(upstream:)(a1);
}

uint64_t method lookup function for Publishers.Share(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Publishers.Share);
}

uint64_t dispatch thunk of Publishers.Share.__allocating_init(upstream:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error)@<X0>(uint64_t (*a1)(void)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t Publisher<>.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  unsigned int v12 = (uint64_t (*)())swift_allocObject();
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + 4) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a1);
  uint64_t result = type metadata accessor for Publishers.Comparison();
  uint64_t v14 = (uint64_t (**)())(a4 + *(int *)(result + 36));
  *uint64_t v14 = partial apply for closure #1 in Publisher<>.min();
  v14[1] = v12;
  return result;
}

uint64_t sub_18C092748()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher<>.min()()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t Publishers.Comparison.init(upstream:areInIncreasingOrder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.Comparison.init(upstream:areInIncreasingOrder:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Comparison, a6);
}

uint64_t type metadata accessor for Publishers.Comparison()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher<>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a1);
  unsigned int v12 = (uint64_t (*)())swift_allocObject();
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + 4) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, a1);
  uint64_t result = type metadata accessor for Publishers.Comparison();
  uint64_t v14 = (uint64_t (**)())(a4 + *(int *)(result + 36));
  *uint64_t v14 = partial apply for closure #1 in Publisher<>.max();
  v14[1] = v12;
  return result;
}

uint64_t sub_18C09292C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher<>.max()()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t Publisher.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.min(by:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.Comparison, a5);
}

uint64_t Publisher.tryMin(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.min(by:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryComparison, a5);
}

uint64_t Publisher.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v15, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v15, a3);
  uint64_t v16 = (void *)(a6 + *(int *)(a5(0, a3, a4) + 36));
  *uint64_t v16 = a1;
  v16[1] = a2;
  return swift_retain();
}

uint64_t Publishers.TryComparison.init(upstream:areInIncreasingOrder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.Comparison.init(upstream:areInIncreasingOrder:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryComparison, a6);
}

uint64_t Publishers.Comparison.init(upstream:areInIncreasingOrder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(result + 36));
  *uint64_t v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryComparison()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publisher.max(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a1;
  *((void *)v14 + 5) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  uint64_t v15 = (uint64_t (**)(uint64_t, uint64_t))(a5
                                                  + *(int *)(type metadata accessor for Publishers.Comparison() + 36));
  *uint64_t v15 = partial apply for closure #1 in Publisher.max(by:);
  v15[1] = v14;
  return swift_retain();
}

uint64_t sub_18C092D04()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.max(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(a2, a1) & 1;
}

uint64_t Publisher.tryMax(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v13, v5);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
  *((void *)v14 + 2) = a3;
  *((void *)v14 + 3) = a4;
  *((void *)v14 + 4) = a1;
  *((void *)v14 + 5) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, a3);
  uint64_t v15 = (uint64_t (**)(uint64_t, uint64_t))(a5
                                                  + *(int *)(type metadata accessor for Publishers.TryComparison() + 36));
  *uint64_t v15 = partial apply for closure #1 in Publisher.tryMax(by:);
  v15[1] = v14;
  return swift_retain();
}

uint64_t partial apply for closure #1 in Publisher.tryMax(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(a2, a1) & 1;
}

uint64_t Publishers.Comparison.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Comparison.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.Comparison.Inner, (uint64_t)&unk_1ED998248, (uint64_t)_s6Output7Combine9PublisherPQzAESbIegnnd_A2ESbIegnnr_AbCRzAB10SubscriberRd__7FailureQyd__AGRtz5InputQyd__AARtzr__lTRTA_0);
}

uint64_t type metadata accessor for Publishers.Comparison.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Comparison.Inner.description.getter()
{
  return 0x73697261706D6F43;
}

uint64_t Publishers.Comparison.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v23[0] = a1;
  v23[3] = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 456);
  v23[1] = *(void *)(*v2 + 440);
  v23[2] = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)v23 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)v23 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v19 = (char *)v23 - v18;
  uint64_t v20 = (uint64_t)v2 + *(void *)(v3 + 136);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v20, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    (*(void (**)(char *, void, uint64_t))(v17 + 16))(v13, v23[0], AssociatedTypeWitness);
LABEL_5:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v20, v10, v6);
    swift_endAccess();
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, AssociatedTypeWitness);
  uint64_t v21 = v23[0];
  (*(void (**)(void *__return_ptr, void, char *))((char *)v2 + *(void *)(*v2 + 152)))(v24, v23[0], v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, AssociatedTypeWitness);
  if (LOBYTE(v24[0]) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v21, AssociatedTypeWitness);
    goto LABEL_5;
  }
LABEL_6:
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Comparison<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Comparison.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.TryComparison.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Comparison.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryComparison.Inner, (uint64_t)&unk_1ED998220, (uint64_t)_s6Output7Combine9PublisherPQzAESbs5Error_pIegnndzo_A2ESbsAF_pIegnnrzo_AbCRzAB10SubscriberRd__5InputQyd__AARtzsAF_p7FailureRtd__r__lTRTA_0);
}

uint64_t Publishers.Comparison.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v26 = a1;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v25 - v16;
  v29[0] = v12;
  v29[1] = a3;
  void v29[2] = v11;
  void v29[3] = a4;
  uint64_t v18 = a5(0, v29);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v17, 1, 1, AssociatedTypeWitness);
  unsigned int v19 = (uint64_t *)(v25 + *(int *)(a2 + 36));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  swift_allocObject();
  swift_retain();
  unsigned int v22 = specialized Publishers.Comparison.Inner.init(downstream:initial:reduce:)(v26, (uint64_t)v17, v20, v21, v27, v28);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v29[0] = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v29, v12, v18, v11, WitnessTable);
  return swift_release();
}

uint64_t Publishers.TryComparison.Inner.description.getter()
{
  return 0x61706D6F43797254;
}

uint64_t Publishers.TryComparison.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v2 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = v2;
  uint64_t v20 = v16;
  uint64_t v21 = (uint64_t)v1 + *(void *)(v19 + 136);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v21, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, v27, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v11, v20);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v21, v8, v20);
  }
  else
  {
    uint64_t v26 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, AssociatedTypeWitness);
    uint64_t v22 = v27;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))((char *)v1 + *(void *)(*v1 + 152)))(v28, v27, v18);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    if (LOBYTE(v28[0]) != 1) {
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, v22, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, AssociatedTypeWitness);
    uint64_t v24 = v26;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v11, v26);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v21, v8, v24);
  }
  swift_endAccess();
  return 0;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryComparison.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryComparison.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryComparison<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryComparison.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for Publishers.TryComparison.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t *specialized Publishers.Comparison.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v24 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 456);
  uint64_t v10 = *(void *)(*v6 + 440);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v8 + 448);
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v17, a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v24, v11);
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v10;
  v20[3] = v16;
  v20[4] = v9;
  v20[5] = *(void *)(v8 + 464);
  uint64_t v21 = v27;
  v20[6] = v26;
  v20[7] = v21;
  v29[0] = v28;
  v29[1] = v20;
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v18, (uint64_t)v15, (uint64_t)v29);
}

uint64_t getEnumTagSinglePayload for Publishers.Comparison(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C093D9CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Comparison(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C093F90);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C093FB8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s6Output7Combine9PublisherPQzAESbs5Error_pIegnndzo_A2ESbsAF_pIegnnrzo_AbCRzAB10SubscriberRd__5InputQyd__AARtzsAF_p7FailureRtd__r__lTRTA_0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  if (!v2) {
    *a1 = result & 1;
  }
  return result;
}

uint64_t Publisher.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unsigned int v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, a3);
  Publisher.map<A>(_:)((uint64_t)partial apply for closure #1 in Publisher.replaceNil<A>(with:), (uint64_t)v13, a2, a3, a4, a5);
  return swift_release();
}

uint64_t closure #1 in Publisher.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - v10, a1, v8);
  uint64_t v12 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a4, v11, a3);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a4, a2, a3);
}

uint64_t sub_18C09430C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publisher.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Publisher.replaceNil<A>(with:)(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)), *(void *)(v2 + 24), a2);
}

uint64_t Publisher.replaceEmpty(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.replaceError(with:)(a1, a2, a3, (uint64_t (*)(char *, char *, uint64_t, uint64_t))Publishers.ReplaceEmpty.init(upstream:output:));
}

uint64_t Publishers.ReplaceEmpty.init(upstream:output:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publishers.ReplaceError.init(upstream:output:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ReplaceEmpty, a5);
}

uint64_t type metadata accessor for Publishers.ReplaceEmpty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.ReplaceEmpty.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = v7;
  v20[1] = a3;
  v20[2] = v6;
  v20[3] = a4;
  uint64_t v16 = type metadata accessor for Publishers.ReplaceEmpty.Inner();
  (*(void (**)(char *, void, uint64_t))(v13 + 16))(v15, v19[0], a3);
  (*(void (**)(char *, void, uint64_t))(v9 + 16))(v12, v19[1], AssociatedTypeWitness);
  swift_allocObject();
  v20[0] = Publishers.ReplaceEmpty.Inner.init(downstream:output:)((uint64_t)v15, (uint64_t)v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v20, v7, v16, v6, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.ReplaceEmpty.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.ReplaceEmpty.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  return Publishers.ReplaceEmpty.Inner.__allocating_init(downstream:output:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Publishers.ReplaceEmpty.Inner.init(downstream:output:));
}

void Publishers.ReplaceEmpty.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "ReplaceEmpty");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t *Publishers.ReplaceEmpty.Inner.init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *((unsigned char *)v2 + *(void *)(*v2 + 128)) = 0;
  uint64_t v6 = *(void *)(*v2 + 136);
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *(uint64_t *)((char *)v2 + v6) = (uint64_t)v7;
  *uint64_t v7 = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 144)) = 0;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 160);
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(unsigned char *)(v8 + 40) = 2;
  uint64_t v9 = (uint64_t)v2 + *(void *)(*v2 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v9, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v5 + 88) - 8) + 32))((uint64_t)v2 + *(void *)(*v2 + 120), a1);
  return v2;
}

uint64_t *Publishers.ReplaceEmpty.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 136)), -1, -1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 120));
  outlined destroy of SubscriptionStatus((uint64_t)v0 + *(void *)(*v0 + 160));
  return v0;
}

uint64_t Publishers.ReplaceEmpty.Inner.__deallocating_deinit()
{
  return Publishers.ReplaceEmpty.Inner.__deallocating_deinit((uint64_t (*)(void))Publishers.ReplaceEmpty.Inner.deinit);
}

uint64_t Publishers.ReplaceEmpty.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 136));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)&v15);
  if (v18 == 2
    && (int8x16_t v6 = vorrq_s8(v16, v17),
        !(*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | (unint64_t)v15)))
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)&v15);
    char v18 = 0;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v15, v5);
    swift_endAccess();
    os_unfair_lock_unlock(v4);
    v17.i64[0] = v3;
    v17.i64[1] = (uint64_t)&protocol witness table for Publishers.ReplaceEmpty<A>.Inner<A1>;
    uint64_t v15 = v1;
    uint64_t v10 = *(void *)(v3 + 104);
    uint64_t v11 = *(void (**)(uint64_t **, uint64_t, uint64_t))(v10 + 40);
    uint64_t v12 = *(void *)(v3 + 88);
    swift_retain();
    v11(&v15, v12, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 24))(0x8000000000000000, v13, v14);
  }
  else
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v15);
    os_unfair_lock_unlock(v4);
    uint64_t v8 = a1[3];
    uint64_t v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v8);
  }
}

uint64_t Publishers.ReplaceEmpty.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 136));
  os_unfair_lock_lock(v4);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v7);
  LODWORD(v5) = v7[40];
  outlined destroy of SubscriptionStatus((uint64_t)v7);
  if (v5)
  {
    os_unfair_lock_unlock(v4);
    return 0;
  }
  else
  {
    *((unsigned char *)v1 + *(void *)(*v1 + 128)) = 1;
    os_unfair_lock_unlock(v4);
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 104) + 48))(a1, *(void *)(v3 + 88));
  }
}

void Publishers.ReplaceEmpty.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v23 = *v1;
  uint64_t v2 = v23;
  uint64_t v24 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v2 + 136));
  os_unfair_lock_lock(v11);
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v25);
  int v13 = v28;
  outlined destroy of SubscriptionStatus((uint64_t)&v25);
  if (v13) {
    goto LABEL_2;
  }
  uint64_t v22 = v5;
  uint64_t v25 = 1;
  long long v26 = 0u;
  long long v27 = 0u;
  unsigned __int8 v28 = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v25, v12);
  swift_endAccess();
  if (*((unsigned char *)v1 + *(void *)(*v1 + 128)) == 1)
  {
    os_unfair_lock_unlock(v11);
    (*(void (**)(uint64_t, void))(*(void *)(v23 + 104) + 56))(v24, *(void *)(v23 + 88));
  }
  else
  {
    int v14 = *((unsigned __int8 *)v1 + *(void *)(*v1 + 144));
    uint64_t v15 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v16 = v22;
    uint64_t v17 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v10, v24, v4);
    v10[v15] = v14;
    uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, AssociatedTypeWitness) == 1)
    {
      if (!v14)
      {
        *((unsigned char *)v1 + *(void *)(*v1 + 152)) = 1;
LABEL_2:
        os_unfair_lock_unlock(v11);
        return;
      }
      os_unfair_lock_unlock(v11);
      uint64_t v19 = *(void *)(v23 + 104);
      uint64_t v20 = *(void *)(v23 + 88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))((uint64_t)v1 + *(void *)(*v1 + 112), v20, v19);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v7, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 56))(v7, v20, v19);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
    }
    else
    {
      os_unfair_lock_unlock(v11);
      (*(void (**)(uint64_t, void))(*(void *)(v23 + 104) + 56))(v17, *(void *)(v23 + 88));
      (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v4);
    }
  }
}

void Publishers.ReplaceEmpty.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 136));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void Publishers.ReplaceEmpty.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v15 - v7;
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!a1)
  {
LABEL_11:
    __break(1u);
    return;
  }
LABEL_4:
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + v3[17]);
  os_unfair_lock_lock(v9);
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 152)) == 1)
  {
    os_unfair_lock_unlock(v9);
    uint64_t v10 = v3[13];
    uint64_t v11 = v3[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v1 + *(void *)(*(void *)v1 + 112), v11, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 56))(v8, v11, v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    uint64_t v12 = v1 + *(void *)(*(void *)v1 + 160);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v12, (uint64_t)v15);
    if (v16)
    {
      outlined destroy of SubscriptionStatus((uint64_t)v15);
      *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 144)) = 1;
      os_unfair_lock_unlock(v9);
    }
    else
    {
      outlined init with take of Subscription(v15, (uint64_t)v17);
      *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 144)) = 1;
      os_unfair_lock_unlock(v9);
      uint64_t v13 = v18;
      uint64_t v14 = v19;
      __swift_project_boxed_opaque_existential_1(v17, v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(a1, v13, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.ReplaceEmpty<A>.Inner<A1>(void *a1)
{
  return Publishers.ReplaceEmpty.Inner.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.ReplaceEmpty<A>.Inner<A1>(uint64_t a1)
{
  return Publishers.ReplaceEmpty.Inner.receive(_:)(a1);
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.ReplaceEmpty<A>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.ReplaceEmpty<A>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.ReplaceEmpty<A>.Inner<A1>()
{
  return 0x456563616C706552;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.ReplaceEmpty<A>.Inner<A1>()
{
  return Publishers.ReplaceEmpty.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.ReplaceEmpty<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.ReplaceEmpty<A>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.ReplaceEmpty<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.ReplaceEmpty.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t Publishers.ReplaceEmpty.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t Publishers.ReplaceEmpty.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t Publishers.ReplaceError.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2)
{
  return Publishers.ReplaceEmpty.Inner.__allocating_init(downstream:output:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))Publishers.ReplaceError.Inner.init(downstream:output:));
}

uint64_t Publishers.ReplaceEmpty.Inner.__allocating_init(downstream:output:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  return a3(a1, a2);
}

uint64_t Publishers.ReplaceEmpty.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.ReplaceError.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "ReplaceError");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.ReplaceError<A>.Inner<A1>()
{
  return 0x456563616C706552;
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.ReplaceError<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

uint64_t static Publishers.ReplaceEmpty<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Publishers.ReplaceEmpty<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ReplaceEmpty);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.ReplaceEmpty<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Publishers.ReplaceEmpty<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static Publishers.ReplaceError<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Publishers.ReplaceEmpty<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.ReplaceError);
}

uint64_t static Publishers.ReplaceEmpty<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t))
{
  v21[0] = a4;
  v21[1] = a6;
  uint64_t v9 = a7(0, a3, a4);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v21 - v14;
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, a1, v9);
  v17(v13, a2, v9);
  if (v16)
  {
    swift_getAssociatedTypeWitness();
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v18 = 0;
  }
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v19(v15, v9);
  return v18 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.ReplaceError<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Publishers.ReplaceError<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t type metadata completion function for Publishers.ReplaceEmpty.Inner()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.ReplaceEmpty(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  int v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v7 + 64) + v9;
  uint64_t v11 = (*(unsigned char *)(v7 + 80) | v9);
  if (v11 > 7
    || ((*(_DWORD *)(v7 + 80) | v9) & 0x100000) != 0
    || (v10 & ~(unint64_t)v9) + *(void *)(v8 + 64) > 0x18)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    unint64_t v15 = ~(unint64_t)v9;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v15, ((unint64_t)a2 + v10) & v15, v5);
  }
  return a1;
}

uint64_t assignWithCopy for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v5);
  return a1;
}

uint64_t initializeWithTake for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v5);
  return a1;
}

uint64_t assignWithTake for Publishers.ReplaceEmpty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.ReplaceEmpty(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v5 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10, v5);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(*(void *)(v5 - 8) + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for Publishers.ReplaceEmpty(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v8 + 64) + v12;
  size_t v15 = (v14 & ~v12) + *(void *)(*(void *)(v7 - 8) + 64);
  if (a3 <= v13)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v13 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v17 = ~v13 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C09670CLL);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v11)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v8 + 56);
          v22(a1, a2);
        }
        else
        {
          uint64_t v21 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v21((unint64_t)&a1[v14] & ~v12, a2, v11, v7);
        }
      }
      return;
  }
}

uint64_t Publisher.assertNoFailure(_:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v24 = a6;
  HIDWORD(v23) = a5;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v8, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a8, v17, a7);
  unsigned int v19 = (int *)type metadata accessor for Publishers.AssertNoFailure();
  int v20 = (void *)(a8 + v19[9]);
  *int v20 = a1;
  v20[1] = a2;
  uint64_t v21 = a8 + v19[10];
  *(void *)uint64_t v21 = a3;
  *(void *)(v21 + 8) = a4;
  *(unsigned char *)(v21 + 16) = BYTE4(v23);
  *(void *)(a8 + v19[11]) = v24;
  return swift_bridgeObjectRetain();
}

int *Publishers.AssertNoFailure.init(upstream:prefix:file:line:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9, a1, a8);
  uint64_t result = (int *)type metadata accessor for Publishers.AssertNoFailure();
  unsigned int v17 = (void *)(a9 + result[9]);
  *unsigned int v17 = a2;
  v17[1] = a3;
  uint64_t v18 = a9 + result[10];
  *(void *)uint64_t v18 = a4;
  *(void *)(v18 + 8) = a5;
  *(unsigned char *)(v18 + 16) = a6;
  *(void *)(a9 + result[11]) = a7;
  return result;
}

uint64_t type metadata accessor for Publishers.AssertNoFailure()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.AssertNoFailure.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.AssertNoFailure.prefix.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Publishers.AssertNoFailure.file.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 40));
}

uint64_t Publishers.AssertNoFailure.line.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t Publishers.AssertNoFailure.receive<A>(subscriber:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v33 = *(void *)(v10 + 16);
  unint64_t v31 = v9;
  uint64_t v32 = v11;
  uint64_t v35 = v33;
  uint64_t v36 = v12;
  uint64_t v37 = v11;
  uint64_t v38 = v13;
  uint64_t v14 = type metadata accessor for Publishers.AssertNoFailure.Inner();
  uint64_t v34 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v29 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  unsigned int v17 = (uint64_t *)(v3 + a2[9]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v3 + a2[10];
  uint64_t v21 = *(void *)v20;
  uint64_t v30 = *(void *)(v20 + 8);
  uint64_t v22 = *(void *)(v3 + a2[11]);
  char v23 = *(unsigned char *)(v20 + 16);
  swift_bridgeObjectRetain();
  uint64_t v24 = v32;
  uint64_t v25 = v21;
  uint64_t v26 = v33;
  Publishers.AssertNoFailure.Inner.init(downstream:prefix:file:line:)((uint64_t)v31, v19, v18, v25, v30, v23, v22, (uint64_t)v16, a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v16, v26, v14, v24, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v14);
}

uint64_t type metadata accessor for Publishers.AssertNoFailure.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.AssertNoFailure.Inner.init(downstream:prefix:file:line:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(a8, a1, a9);
  uint64_t v15 = (int *)type metadata accessor for Publishers.AssertNoFailure.Inner();
  uint64_t v16 = (void *)(a8 + v15[13]);
  *uint64_t v16 = a2;
  v16[1] = a3;
  uint64_t v17 = a8 + v15[14];
  *(void *)uint64_t v17 = a4;
  *(void *)(v17 + 8) = a5;
  *(unsigned char *)(v17 + 16) = a6;
  *(void *)(a8 + v15[15]) = a7;
  uint64_t v18 = v15[16];
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  uint64_t v19 = (os_unfair_lock_s *)static lock in Global #1 in CombineIdentifier.init();
  os_unfair_lock_lock((os_unfair_lock_t)static lock in Global #1 in CombineIdentifier.init());
  uint64_t v20 = static generation in Global #1 in CombineIdentifier.init();
  if (static generation in Global #1 in CombineIdentifier.init() == -1)
  {
    __break(1u);
  }
  else
  {
    ++static generation in Global #1 in CombineIdentifier.init();
    os_unfair_lock_unlock(v19);
    *(void *)(a8 + v18) = v20;
  }
}

uint64_t Publishers.AssertNoFailure.Inner.customMirror.getter(int *a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unsigned int v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, int *))(v11 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18C0BBBA0;
  *(void *)(v12 + 32) = 1701603686;
  *(void *)(v12 + 40) = 0xE400000000000000;
  uint64_t v13 = a1[13];
  uint64_t v14 = v1 + a1[14];
  char v15 = *(unsigned char *)(v14 + 16);
  uint64_t v16 = MEMORY[0x1E4FBBA00];
  *(_OWORD *)(v12 + 48) = *(_OWORD *)v14;
  *(unsigned char *)(v12 + 64) = v15;
  uint64_t v17 = *(void *)(v1 + a1[15]);
  *(void *)(v12 + 72) = v16;
  *(void *)(v12 + 80) = 1701734764;
  uint64_t v18 = MEMORY[0x1E4FBB808];
  *(void *)(v12 + 88) = 0xE400000000000000;
  *(void *)(v12 + 96) = v17;
  *(void *)(v12 + 120) = v18;
  *(void *)(v12 + 128) = 0x786966657270;
  uint64_t v19 = v1 + v13;
  uint64_t v20 = *(void *)(v1 + v13);
  uint64_t v21 = *(void *)(v19 + 8);
  *(void *)(v12 + 168) = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 136) = 0xE600000000000000;
  *(void *)(v12 + 144) = v20;
  *(void *)(v12 + 152) = v21;
  uint64_t v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_bridgeObjectRetain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.AssertNoFailure.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6F4E747265737341;
  a1[1] = 0xEF6572756C696146;
}

uint64_t Publishers.AssertNoFailure.Inner.receive(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Subscribers.Completion();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-v7];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(&v10[-v7], a1, v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    char v11 = 1;
    return (*(uint64_t (**)(char *, void))(*(void *)(a2 + 40) + 56))(&v11, *(void *)(a2 + 24));
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.AssertNoFailure<A>.Inner<A1>()
{
  return 0x6F4E747265737341;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.AssertNoFailure<A>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return Publishers.AssertNoFailure.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t type metadata completion function for Publishers.AssertNoFailure()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.AssertNoFailure(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    v10[1] = v11[1];
    unint64_t v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v14 = *(_OWORD *)v13;
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = v14;
    *(void *)(((unint64_t)v10 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 47) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.AssertNoFailure(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.AssertNoFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  *(void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.AssertNoFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.AssertNoFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = v11;
  *(void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.AssertNoFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.AssertNoFailure(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0978D4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.AssertNoFailure(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                void *v19 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                v19[1] = a2 - 1;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C097ADCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Publishers.AssertNoFailure.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.AssertNoFailure.Inner(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    v10[1] = v11[1];
    unint64_t v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v14 = *(_OWORD *)v13;
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    *(_OWORD *)unint64_t v12 = v14;
    int v15 = (void *)(((unint64_t)v10 + 47) & 0xFFFFFFFFFFFFFFF8);
    int v16 = (void *)(((unint64_t)v11 + 47) & 0xFFFFFFFFFFFFFFF8);
    *int v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Publishers.AssertNoFailure.Inner(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Publishers.AssertNoFailure.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  unint64_t v12 = (void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Publishers.AssertNoFailure.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  char v11 = (void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for Publishers.AssertNoFailure.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = v11;
  unint64_t v12 = (void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.AssertNoFailure.Inner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  unint64_t v9 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  long long v11 = (void *)(((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.AssertNoFailure.Inner(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C098234);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.AssertNoFailure.Inner(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                void *v19 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                v19[1] = a2 - 1;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18C098444);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t Publisher.drop<A>(untilOutputFrom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v15, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  return Publishers.DropUntilOutput.init(upstream:other:)((uint64_t)v13, (uint64_t)v11, a2, a3, a4);
}

uint64_t Publishers.DropUntilOutput.init(upstream:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for Publishers.DropUntilOutput();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for Publishers.DropUntilOutput()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.DropUntilOutput.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.DropUntilOutput.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.DropUntilOutput.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v26 = v4 + *(int *)(a2 + 52);
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v24 = *(void *)(a2 + 16);
  unsigned int v11 = (uint64_t *)v24;
  uint64_t v15 = specialized Publishers.DropUntilOutput.Inner.__allocating_init(downstream:other:)((uint64_t)v9);
  unsigned __int8 v28 = v11;
  uint64_t v29 = v12;
  uint64_t v30 = a3;
  uint64_t v31 = v12;
  uint64_t v32 = (_UNKNOWN **)v13;
  uint64_t v33 = v14;
  uint64_t v34 = a4;
  uint64_t v35 = v14;
  uint64_t v16 = type metadata accessor for Publishers.DropUntilOutput.Inner();
  uint64_t v31 = v16;
  uint64_t v32 = &protocol witness table for Publishers.DropUntilOutput<A, B>.Inner<A1, B1>;
  unsigned __int8 v28 = v15;
  uint64_t v17 = *(void (**)(uint64_t **, uint64_t, uint64_t))(a4 + 40);
  swift_retain_n();
  v17(&v28, a3, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  uint64_t v18 = v24;
  long long v27 = v15;
  unsigned __int8 v28 = (uint64_t *)v24;
  uint64_t v29 = v12;
  uint64_t v30 = a3;
  uint64_t v31 = v12;
  uint64_t v32 = (_UNKNOWN **)v13;
  uint64_t v33 = v14;
  uint64_t v34 = a4;
  uint64_t v35 = v14;
  uint64_t v19 = type metadata accessor for Publishers.DropUntilOutput.Inner.OtherSubscriber();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v27, v12, v19, v14, WitnessTable);
  unsigned __int8 v28 = v15;
  uint64_t v21 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v28, v18, v16, v13, v21);
  return swift_release_n();
}

uint64_t Publishers.DropUntilOutput.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.DropUntilOutput.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x69746E55706F7244;
  a1[1] = 0xEF74757074754F6CLL;
}

uint64_t *Publishers.DropUntilOutput.Inner.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 160)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 168)), -1, -1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 144));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 176));
  outlined destroy of Subscription?((uint64_t)v0 + *(void *)(*v0 + 192));
  return v0;
}

uint64_t Publishers.DropUntilOutput.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.DropUntilOutput.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t Publishers.DropUntilOutput.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v2, (uint64_t)v15);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 192);
  swift_beginAccess();
  outlined init with copy of Subscription?(v3, (uint64_t)v14);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v11, v2);
  swift_endAccess();
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v11, v3);
  swift_endAccess();
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 208)) = 1;
  os_unfair_lock_unlock(v1);
  outlined init with copy of Subscription?((uint64_t)v15, (uint64_t)&v9);
  if (v10)
  {
    outlined init with take of Subscription(&v9, (uint64_t)&v11);
    uint64_t v4 = *((void *)&v12 + 1);
    uint64_t v5 = v13;
    __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
    (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v9);
  }
  outlined init with copy of Subscription?((uint64_t)v14, (uint64_t)&v9);
  if (v10)
  {
    outlined init with take of Subscription(&v9, (uint64_t)&v11);
    uint64_t v6 = *((void *)&v12 + 1);
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
    (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 8))(v6);
    outlined destroy of Subscription?((uint64_t)v14);
    outlined destroy of Subscription?((uint64_t)v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v14);
    outlined destroy of Subscription?((uint64_t)v15);
    return outlined destroy of Subscription?((uint64_t)&v9);
  }
}

void Publishers.DropUntilOutput.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 184);
  uint64_t v6 = *(uint64_t *)((char *)v1 + v5);
  unint64_t v7 = 0x8000000000000000;
  if (v6 == 0x8000000000000000) {
    goto LABEL_9;
  }
  if (a1 != 0x8000000000000000)
  {
    if ((v6 | a1) < 0)
    {
      __break(1u);
      goto LABEL_14;
    }
    unint64_t v7 = v6 + a1;
    if (!__OFADD__(v6, a1))
    {
      if ((v7 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      __break(1u);
      return;
    }
    unint64_t v7 = 0x8000000000000000;
  }
LABEL_8:
  *(uint64_t *)((char *)v1 + v5) = v7;
  uint64_t v4 = *v1;
LABEL_9:
  uint64_t v8 = (uint64_t)v1 + *(void *)(v4 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v8, (uint64_t)&v11);
  if (v12)
  {
    outlined init with take of Subscription(&v11, (uint64_t)v13);
    os_unfair_lock_unlock(v3);
    uint64_t v9 = v14;
    uint64_t v10 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v11);
    os_unfair_lock_unlock(v3);
  }
}

void Publishers.DropUntilOutput.Inner.receive(subscription:)(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + *(void *)(*(void *)v1 + 160));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(void *)(*(void *)v1 + 176);
  swift_beginAccess();
  outlined init with copy of Subscription?(v4, (uint64_t)v11);
  uint64_t v5 = v12;
  outlined destroy of Subscription?((uint64_t)v11);
  if (!v5 && (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 208)) & 1) == 0)
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v11);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v11, v4);
    swift_endAccess();
    uint64_t v8 = *(void *)(v1 + *(void *)(*(void *)v1 + 184));
    if (v8 != 0x8000000000000000)
    {
      if (v8 < 0)
      {
        __break(1u);
        return;
      }
      if (!v8)
      {
        os_unfair_lock_unlock(v3);
        return;
      }
    }
    os_unfair_lock_unlock(v3);
    uint64_t v9 = a1[3];
    uint64_t v10 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
    return;
  }
  os_unfair_lock_unlock(v3);
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v7);
}

void Publishers.DropUntilOutput.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  uint64_t v5 = *v1;
  if (*((unsigned char *)v1 + *(void *)(*v1 + 152)) == 1 && (*((unsigned char *)v1 + *(void *)(v5 + 208)) & 1) == 0)
  {
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 128) + 48))(a1, *(void *)(v3 + 96));
    os_unfair_recursive_lock_unlock();
  }
  else
  {
    uint64_t v6 = *(void *)(v5 + 184);
    uint64_t v7 = *(uint64_t *)((char *)v1 + v6);
    if (v7 == 0x8000000000000000)
    {
LABEL_7:
      os_unfair_lock_unlock(v4);
      return;
    }
    if (v7 < 0)
    {
      __break(1u);
    }
    else if (v7)
    {
      *(uint64_t *)((char *)v1 + v6) = v7 - 1;
      goto LABEL_7;
    }
    __break(1u);
  }
}

void Publishers.DropUntilOutput.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v4);
  uint64_t v5 = *(void *)(*v1 + 208);
  if (*((unsigned char *)v1 + v5))
  {
    os_unfair_lock_unlock(v4);
  }
  else
  {
    *((unsigned char *)v1 + v5) = 1;
    os_unfair_lock_unlock(v4);
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 128) + 56))(a1, *(void *)(v3 + 96));
    os_unfair_recursive_lock_unlock();
  }
}

void Publishers.DropUntilOutput.Inner.OtherSubscriber.combineIdentifier.getter(void *a1@<X8>)
{
}

uint64_t Publishers.DropUntilOutput.Inner.OtherSubscriber.customMirror.getter()
{
  return Publishers.DropUntilOutput.Inner.customMirror.getter();
}

uint64_t Publishers.DropUntilOutput.Inner.OtherSubscriber.receive(subscription:)(void *a1)
{
  return Publishers.DropUntilOutput.Inner.receiveOther(subscription:)(a1);
}

uint64_t Publishers.DropUntilOutput.Inner.receiveOther(subscription:)(void *a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 192);
  swift_beginAccess();
  outlined init with copy of Subscription?(v3, (uint64_t)v10);
  uint64_t v4 = v11;
  outlined destroy of Subscription?((uint64_t)v10);
  if (v4)
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
  }
  else
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)v10, v3);
    swift_endAccess();
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(1, v8, v9);
  }
}

uint64_t Publishers.DropUntilOutput.Inner.receiveOther()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 160));
  os_unfair_lock_lock(v1);
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 152)) = 1;
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 192);
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)v4, v2);
  swift_endAccess();
  os_unfair_lock_unlock(v1);
  return 0;
}

void Publishers.DropUntilOutput.Inner.OtherSubscriber.receive(completion:)(uint64_t a1)
{
}

void Publishers.DropUntilOutput.Inner.receiveOther(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 160));
  os_unfair_lock_lock(v5);
  uint64_t v6 = *v2;
  if (*((unsigned char *)v2 + *(void *)(*v2 + 152)) == 1)
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = (uint64_t)v2 + *(void *)(v6 + 192);
    swift_beginAccess();
    outlined assign with take of Subscription?((uint64_t)&v14, v7);
    swift_endAccess();
    os_unfair_lock_unlock(v5);
  }
  else
  {
    *((unsigned char *)v2 + *(void *)(v6 + 200)) = 1;
    uint64_t v8 = (uint64_t)v2 + *(void *)(*v2 + 176);
    swift_beginAccess();
    outlined init with copy of Subscription?(v8, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with take of Subscription(&v11, (uint64_t)&v14);
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      swift_beginAccess();
      outlined assign with take of Subscription?((uint64_t)&v11, v8);
      swift_endAccess();
      os_unfair_lock_unlock(v5);
      uint64_t v10 = *((void *)&v15 + 1);
      uint64_t v9 = v16;
      __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
      (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
    }
    else
    {
      outlined destroy of Subscription?((uint64_t)&v11);
      os_unfair_lock_unlock(v5);
    }
    os_unfair_recursive_lock_lock_with_options();
    (*(void (**)(uint64_t, void))(*(void *)(v4 + 128) + 56))(a1, *(void *)(v4 + 96));
    os_unfair_recursive_lock_unlock();
  }
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber(void *a1)
{
  return Publishers.DropUntilOutput.Inner.OtherSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber()
{
  return specialized Publishers.DropUntilOutput.Inner.OtherSubscriber.receive(_:)();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber()
{
  return 0x69746E55706F7244;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber()
{
  return Publishers.DropUntilOutput.Inner.OtherSubscriber.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber(void *a1@<X8>)
{
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>.OtherSubscriber(void *a1@<X8>)
{
}

void protocol witness for Subscriber.receive(subscription:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>(void *a1)
{
}

void protocol witness for Subscriber.receive(_:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
}

void protocol witness for Subscription.request(_:) in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>()
{
  return Publishers.DropUntilOutput.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.DropUntilOutput<A, B>.Inner<A1, B1>()
{
  return Publishers.DropUntilOutput.Inner.cancel()();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.DropUntilOutput<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.DropUntilOutput.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.DropUntilOutput<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[1] = a8;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a7;
  uint64_t v10 = type metadata accessor for Publishers.DropUntilOutput();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  long long v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v22 - v15;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if (v17) {
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v19 = 0;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.DropUntilOutput<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.DropUntilOutput<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

uint64_t specialized Publishers.DropUntilOutput.Inner.OtherSubscriber.receive(_:)()
{
  return Publishers.DropUntilOutput.Inner.receiveOther()();
}

uint64_t *specialized Publishers.DropUntilOutput.Inner.init(downstream:other:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *((unsigned char *)v1 + *(void *)(*v1 + 152)) = 0;
  uint64_t v4 = *(void *)(*v1 + 160);
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  *(uint64_t *)((char *)v1 + v4) = (uint64_t)v5;
  uint64_t v6 = *(void *)(*v1 + 168);
  uint64_t v7 = (void *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(uint64_t *)((char *)v1 + v6) = (uint64_t)v7;
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 176);
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 184)) = 0;
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 192);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 200)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 96) - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 144), a1);
  return v1;
}

uint64_t *specialized Publishers.DropUntilOutput.Inner.__allocating_init(downstream:other:)(uint64_t a1)
{
  return specialized Publishers.DropUntilOutput.Inner.init(downstream:other:)(a1);
}

uint64_t type metadata accessor for Publishers.DropUntilOutput.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.DropUntilOutput.Inner.OtherSubscriber()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.DropUntilOutput(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.DropUntilOutput(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C09A484);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.DropUntilOutput.Inner()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Publishers.HandleEvents.init(upstream:receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v17 = (int *)type metadata accessor for Publishers.HandleEvents();
  unsigned int v18 = (void *)(a9 + v17[9]);
  int v19 = (void *)(a9 + v17[10]);
  unsigned int v20 = (void *)(a9 + v17[11]);
  int v21 = (void *)(a9 + v17[12]);
  unint64_t v22 = (void *)(a9 + v17[13]);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9, a1, a13);
  *unsigned int v18 = a2;
  v18[1] = a3;
  void *v19 = a4;
  v19[1] = a5;
  *unsigned int v20 = a6;
  v20[1] = a7;
  *int v21 = a8;
  v21[1] = a10;
  void *v22 = a11;
  v22[1] = a12;
  return result;
}

uint64_t Publishers.HandleEvents.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t key path getter for Publishers.HandleEvents.receiveSubscription : <A>Publishers.HandleEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 36));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    unsigned int v7 = _s7Combine12Subscription_pIegn_AaB_pytIegnr_TRTA_0;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(uint64_t))v6;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v4);
}

uint64_t key path setter for Publishers.HandleEvents.receiveSubscription : <A>Publishers.HandleEvents<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _s7Combine12Subscription_pytIegnr_AaB_pIegn_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  unsigned int v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 36));
  uint64_t v8 = *v7;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v3);
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v8);
  *unsigned int v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t Publishers.HandleEvents.receiveSubscription.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.HandleEvents.receiveSubscription.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 36));
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Publishers.HandleEvents.receiveSubscription.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

uint64_t key path getter for Publishers.HandleEvents.receiveOutput : <A>Publishers.HandleEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 16);
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  unsigned int v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 40));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7)
  {
    unsigned int v10 = (uint64_t (*)())swift_allocObject();
    *((void *)v10 + 2) = v5;
    *((void *)v10 + 3) = v6;
    *((void *)v10 + 4) = v8;
    *((void *)v10 + 5) = v9;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> ();
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v10 = 0;
  }
  *a4 = v11;
  a4[1] = v10;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v8);
}

uint64_t key path setter for Publishers.HandleEvents.receiveOutput : <A>Publishers.HandleEvents<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1)
  {
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v5;
    void v9[3] = v6;
    void v9[4] = v7;
    v9[5] = v8;
    unsigned int v10 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ());
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 40));
  uint64_t v12 = *v11;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v7);
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  uint64_t *v11 = (uint64_t)v10;
  v11[1] = (uint64_t)v9;
  return result;
}

uint64_t Publishers.HandleEvents.receiveOutput.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 40));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.HandleEvents.receiveOutput.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 40));
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Publishers.HandleEvents.receiveOutput.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

uint64_t key path getter for Publishers.HandleEvents.receiveCompletion : <A>Publishers.HandleEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 16);
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 44));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7)
  {
    unsigned int v10 = (uint64_t (*)())swift_allocObject();
    *((void *)v10 + 2) = v5;
    *((void *)v10 + 3) = v6;
    *((void *)v10 + 4) = v8;
    *((void *)v10 + 5) = v9;
    uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<A.Publisher.Failure>) -> ();
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v10 = 0;
  }
  *a4 = v11;
  a4[1] = v10;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v8);
}

uint64_t key path setter for Publishers.HandleEvents.receiveCompletion : <A>Publishers.HandleEvents<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1)
  {
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v5;
    void v9[3] = v6;
    void v9[4] = v7;
    v9[5] = v8;
    unsigned int v10 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<A.Publisher.Failure>) -> (@out ());
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 44));
  uint64_t v12 = *v11;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v7);
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v12);
  uint64_t *v11 = (uint64_t)v10;
  v11[1] = (uint64_t)v9;
  return result;
}

uint64_t Publishers.HandleEvents.receiveCompletion.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 44));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.HandleEvents.receiveCompletion.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 44));
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Publishers.HandleEvents.receiveCompletion.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

uint64_t key path getter for Publishers.HandleEvents.receiveCancel : <A>Publishers.HandleEvents<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 48));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v4);
}

uint64_t key path setter for Publishers.HandleEvents.receiveCancel : <A>Publishers.HandleEvents<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 48));
  uint64_t v8 = *v7;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v3);
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v8);
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t Publishers.HandleEvents.receiveCancel.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.HandleEvents.receiveCancel.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 48));
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Publishers.HandleEvents.receiveCancel.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

uint64_t key path getter for Publishers.HandleEvents.receiveRequest : <A>Publishers.HandleEvents<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 52));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Subscribers.Demand) -> ();
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;

  return outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v4);
}

uint64_t key path setter for Publishers.HandleEvents.receiveRequest : <A>Publishers.HandleEvents<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Demand) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Publishers.HandleEvents() + 52));
  uint64_t v8 = *v7;
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v3);
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(v8);
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t Publishers.HandleEvents.receiveRequest.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

uint64_t Publishers.HandleEvents.receiveRequest.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  uint64_t result = _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Publishers.HandleEvents.receiveRequest.modify())()
{
  return specialized closure #1 in Publisher.multicast<A>(subject:);
}

uint64_t Publishers.HandleEvents.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.HandleEvents.Inner.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "HandleEvents");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.HandleEvents<A>.Inner<A1>()
{
  return 0x7645656C646E6148;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.HandleEvents<A>.Inner<A1>()
{
  return Publishers.HandleEvents.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.HandleEvents<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

uint64_t sub_18C09B2CC()
{
  return 16;
}

__n128 sub_18C09B2D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18C09B2EC()
{
  return 16;
}

__n128 sub_18C09B2F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18C09B30C()
{
  return 16;
}

__n128 sub_18C09B318(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18C09B32C()
{
  return 16;
}

__n128 sub_18C09B338(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18C09B34C()
{
  return 16;
}

__n128 sub_18C09B358(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.HandleEvents(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }
    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      uint64_t v15 = *(void *)(v14 + 8);
      *(void *)unint64_t v13 = *(void *)v14;
      *(void *)(v13 + 8) = v15;
      swift_retain();
    }
    unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v17 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v18 = *(void *)(v17 + 8);
      *(void *)unint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = v18;
      swift_retain();
    }
    unint64_t v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v20 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v21 = *(void *)(v20 + 8);
      *(void *)unint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = v21;
      swift_retain();
    }
    unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v23 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
      return v4;
    }
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = v24;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *int v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *int v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)int v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      void *v12 = v14;
      v12[1] = v16;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      void *v12 = v14;
      v12[1] = v15;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v20 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v20;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
LABEL_22:
  unint64_t v22 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (unint64_t *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = *v23;
  if (*v22 < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      unint64_t v26 = v23[1];
      void *v22 = v24;
      v22[1] = v26;
      swift_retain();
      goto LABEL_29;
    }
  }
  else
  {
    if (v24 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v23[1];
      void *v22 = v24;
      v22[1] = v25;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
LABEL_29:
  long long v27 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v28 = (unint64_t *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = *v28;
  if (*v27 < 0xFFFFFFFFuLL)
  {
    if (v29 >= 0xFFFFFFFF)
    {
      unint64_t v31 = v28[1];
      *long long v27 = v29;
      v27[1] = v31;
      swift_retain();
      return a1;
    }
LABEL_35:
    *(_OWORD *)long long v27 = *(_OWORD *)v28;
    return a1;
  }
  if (v29 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_35;
  }
  unint64_t v30 = v28[1];
  *long long v27 = v29;
  v27[1] = v30;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
  }
  unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
  }
  unint64_t v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
  }
  unint64_t v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (uint64_t *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v20;
  if ((unint64_t)*v20 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v22 = v20[1];
    *(void *)unint64_t v19 = v21;
    *(void *)(v19 + 8) = v22;
  }
  return a1;
}

uint64_t assignWithTake for Publishers.HandleEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      void *v12 = v14;
      v12[1] = v16;
      goto LABEL_15;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v13[1];
      void *v12 = v14;
      v12[1] = v15;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
LABEL_15:
  unint64_t v17 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (unint64_t *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      goto LABEL_22;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v20 = v18[1];
      *unint64_t v17 = v19;
      v17[1] = v20;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
LABEL_22:
  uint64_t v22 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (unint64_t *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = *v23;
  if (*v22 < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      unint64_t v26 = v23[1];
      void *v22 = v24;
      v22[1] = v26;
      goto LABEL_29;
    }
  }
  else
  {
    if (v24 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v23[1];
      void *v22 = v24;
      v22[1] = v25;
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
LABEL_29:
  long long v27 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v28 = (unint64_t *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = *v28;
  if (*v27 < 0xFFFFFFFFuLL)
  {
    if (v29 >= 0xFFFFFFFF)
    {
      unint64_t v31 = v28[1];
      *long long v27 = v29;
      v27[1] = v31;
      return a1;
    }
LABEL_35:
    *(_OWORD *)long long v27 = *(_OWORD *)v28;
    return a1;
  }
  if (v29 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_35;
  }
  unint64_t v30 = v28[1];
  *long long v27 = v29;
  v27[1] = v30;
  swift_release();
  return a1;
}

uint64_t sub_18C09BC58()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Demand) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Subscribers.Demand) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> ()()
{
  return thunk for @escaping @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_18C09BD24()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t _s7Combine12Subscription_pytIegnr_AaB_pIegn_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> (@out ())(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t _s7Combine12Subscription_pIegn_AaB_pytIegnr_TRTA_0(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Subscribers.Completion<B>) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t Publisher.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publisher.prepend(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))Publisher.append<A>(_:));
}

uint64_t Publisher.append<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v28 = a6;
  uint64_t v29 = a3;
  uint64_t v30 = MEMORY[0x1E4FBC248];
  uint64_t v31 = a5;
  uint64_t v32 = MEMORY[0x1E4FBC278];
  uint64_t v25 = type metadata accessor for Publishers.Sequence();
  uint64_t v10 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v12 = (char *)v24 - v11;
  v24[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v29 = a3;
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = a5;
  uint64_t v32 = AssociatedConformanceWitness;
  uint64_t v15 = type metadata accessor for Publishers.Sequence();
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - v17;
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, v26, a2);
  Sequence.publisher.getter(a3, (uint64_t)v12);
  uint64_t v22 = v25;
  Publishers.Sequence.setFailureType<A>(to:)(v25, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v22);
  swift_getWitnessTable();
  return Publishers.Concatenate.init(prefix:suffix:)((uint64_t)v20, (uint64_t)v18, a2, v15, v28);
}

uint64_t Publishers.Concatenate.prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Concatenate.suffix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.Concatenate.Inner.__allocating_init(_:suffix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  Publishers.Concatenate.Inner.init(_:suffix:)(a1, a2);
  return v4;
}

uint64_t Publishers.Concatenate.Inner.prefixSubscriber.getter()
{
  return swift_retain();
}

uint64_t Publishers.Concatenate.Inner.PrefixSubscriber.customMirror.getter()
{
  return Publishers.Concatenate.Inner.customMirror.getter();
}

uint64_t Publishers.Concatenate.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Concatenate.Inner.PrefixSubscriber.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6E657461636E6F43;
  a1[1] = 0xEB00000000657461;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber()
{
  return 0x6E657461636E6F43;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber()
{
  return Publishers.Concatenate.Inner.PrefixSubscriber.customMirror.getter();
}

void Publishers.Concatenate.Inner.PrefixSubscriber.combineIdentifier.getter(void *a1@<X8>)
{
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Concatenate<A, B>.Inner<A1>.PrefixSubscriber(void *a1@<X8>)
{
}

Swift::Void __swiftcall Publishers.Concatenate.Inner.cancel()()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v17 - v4;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + *(void *)(v1 + 168)));
  uint64_t v6 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v6, (uint64_t)&v18);
  if (v21)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v18);
    uint64_t v7 = v0 + *(void *)(*(void *)v0 + 144);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v7, (uint64_t)&v18);
    if (v21)
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v18);
      uint64_t v18 = 1;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v7);
      swift_endAccess();
      uint64_t v18 = 1;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
      swift_endAccess();
      uint64_t v8 = v0 + *(void *)(*(void *)v0 + 152);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
      _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #3 in Publishers.Concatenate.Inner.cancel(), v0, v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v9);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      outlined init with take of Subscription((long long *)&v18, (uint64_t)v22);
      uint64_t v18 = 1;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v7);
      swift_endAccess();
      uint64_t v18 = 1;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
      swift_endAccess();
      uint64_t v14 = v0 + *(void *)(*(void *)v0 + 152);
      swift_beginAccess();
      uint64_t v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
      MEMORY[0x1F4188790](v15);
      *(&v17 - 2) = v0;
      *(&v17 - 1) = (uint64_t)v22;
      _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #2 in Publishers.Concatenate.Inner.cancel(), (uint64_t)(&v17 - 4), v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v16);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
  }
  else
  {
    outlined init with take of Subscription((long long *)&v18, (uint64_t)v22);
    uint64_t v18 = 1;
    long long v19 = 0u;
    long long v20 = 0u;
    char v21 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, v6);
    swift_endAccess();
    uint64_t v18 = 1;
    long long v19 = 0u;
    long long v20 = 0u;
    char v21 = 2;
    uint64_t v10 = v0 + *(void *)(*(void *)v0 + 144);
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v18, v10);
    swift_endAccess();
    uint64_t v11 = v0 + *(void *)(*(void *)v0 + 152);
    swift_beginAccess();
    uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    MEMORY[0x1F4188790](v12);
    *(&v17 - 2) = v0;
    *(&v17 - 1) = (uint64_t)v22;
    _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Publishers.Concatenate.Inner.cancel(), (uint64_t)(&v17 - 4), v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
}

uint64_t closure #1 in Publishers.Concatenate.Inner.cancel()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 88);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v13 - v7, 1, 1, v4);
  uint64_t v9 = a1 + *(void *)(*(void *)a1 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + *(void *)(*(void *)a1 + 168)));
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v10);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 8))(v10);
}

void closure #3 in Publishers.Concatenate.Inner.cancel()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 88);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))((char *)&v8 - v5, 1, 1, v2);
  uint64_t v7 = a1 + *(void *)(*(void *)a1 + 152);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + *(void *)(*(void *)a1 + 168)));
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Concatenate<A, B>.Inner<A1>()
{
  return Publishers.Concatenate.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Concatenate<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Concatenate<A, B>.Inner<A1>()
{
}

uint64_t static Publishers.Concatenate<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[1] = a8;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a7;
  uint64_t v10 = type metadata accessor for Publishers.Concatenate();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v22 - v15;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if (v17) {
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v19 = 0;
  }
  long long v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Concatenate<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Concatenate<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

void partial apply for closure #3 in Publishers.Concatenate.Inner.cancel()()
{
  closure #3 in Publishers.Concatenate.Inner.cancel()(v0);
}

uint64_t partial apply for closure #2 in Publishers.Concatenate.Inner.cancel()()
{
  return closure #1 in Publishers.Concatenate.Inner.cancel()(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for closure #1 in Publishers.Concatenate.Inner.cancel()()
{
  return partial apply for closure #2 in Publishers.Concatenate.Inner.cancel()();
}

uint64_t CombineIdentifier.value.getter()
{
  return *(void *)v0;
}

uint64_t CombineIdentifier.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_unknownObjectRelease();
  *a2 = a1;
  return result;
}

uint64_t CombineIdentifier.description.getter()
{
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

void CombineIdentifier.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static CombineIdentifier.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CombineIdentifier()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CombineIdentifier()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CombineIdentifier()
{
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t Publishers.Debounce.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Debounce.dueTime.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Debounce.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t Publishers.Debounce.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 60);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

char *Publishers.Debounce.Inner.__allocating_init(_:dueTime:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Debounce.Inner.init(_:dueTime:scheduler:options:)(a1, a2, a3, a4);
}

void Publishers.Debounce.Inner.customMirror.getter()
{
  os_unfair_lock_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_unfair_lock_lock(v0[2]);
  uint64_t v18 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BBBA0;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = (char *)v0 + *(void *)&(*v0)[36]._os_unfair_lock_opaque;
  uint64_t v10 = *(void *)&v1[24]._os_unfair_lock_opaque;
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(void *)(v8 + 80) = 0xD000000000000010;
  *(void *)(v8 + 88) = 0x800000018C0C4A10;
  os_unfair_lock_t v12 = *v0;
  *(void *)(v8 + 96) = *(os_unfair_lock_t *)((char *)v0 + *(void *)&(*v0)[52]._os_unfair_lock_opaque);
  *(void *)(v8 + 120) = &type metadata for Subscribers.Demand;
  strcpy((char *)(v8 + 128), "currentValue");
  *(unsigned char *)(v8 + 141) = 0;
  *(_WORD *)(v8 + 142) = -5120;
  uint64_t v13 = (char *)v0 + *(void *)&v12[48]._os_unfair_lock_opaque;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  *(void *)(v8 + 168) = v14;
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 144));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v0[2]);
}

void Publishers.Debounce.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x65636E756F626544;
  a1[1] = 0xE800000000000000;
}

uint64_t Publishers.Debounce.Inner.deinit()
{
  os_unfair_lock_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = (uint64_t *)&v0[*(void *)(*(void *)v0 + 184)];
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_beginAccess();
  uint64_t v5 = v1[10];
  uint64_t v6 = v1[11];
  uint64_t v7 = v1[14];
  uint64_t v8 = v1[15];
  swift_bridgeObjectRetain();
  v33[0] = v5;
  v33[1] = v6;
  uint64_t v31 = v6;
  long long v30 = *((_OWORD *)v2 + 6);
  long long v34 = v30;
  uint64_t v35 = v7;
  uint64_t v36 = v8;
  uint64_t v9 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  uint64_t result = swift_endAccess();
  int64_t v11 = 0;
  uint64_t v12 = v4 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v4 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v20 >= v16) {
      goto LABEL_21;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_21;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_21;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v11);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_5:
    uint64_t v19 = *(void *)(v9 - 8);
    (*(void (**)(void *, unint64_t, uint64_t))(v19 + 16))(v33, *(void *)(v4 + 56) + 40 * v18, v9);
    (*(void (**)(unsigned char *, void *, uint64_t))(v19 + 32))(v32, v33, v9);
    Publishers.Debounce.Inner.CancellerState.cancel()(v9);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v19 + 8))(v32, v9);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_21:
    swift_release();
    unint64_t v23 = v0;
    MEMORY[0x18C13C4B0](*((void *)v0 + 3), -1, -1);
    MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
    (*(void (**)(char *, void))(*(void *)(v30 - 8) + 8))(&v23[*(void *)(*(void *)v23 + 144)], v30);
    unint64_t v24 = &v23[*(void *)(*(void *)v23 + 152)];
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(&v23[*(void *)(*(void *)v23 + 160)], v31);
    uint64_t v26 = &v23[*(void *)(*(void *)v23 + 168)];
    swift_getAssociatedTypeWitness();
    uint64_t v27 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
    outlined destroy of SubscriptionStatus((uint64_t)&v23[*(void *)(*(void *)v23 + 176)]);
    swift_bridgeObjectRelease();
    uint64_t v28 = &v23[*(void *)(*(void *)v23 + 192)];
    swift_getAssociatedTypeWitness();
    uint64_t v29 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 8))(v28, v29);
    return (uint64_t)v0;
  }
  unint64_t v21 = *(void *)(v12 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_21;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t Publishers.Debounce.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Debounce.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void Publishers.Debounce.Inner.cancel()()
{
  uint64_t v1 = (_OWORD *)*v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v3, (uint64_t)v23);
  if (v23[40])
  {
    outlined destroy of SubscriptionStatus((uint64_t)v23);
    os_unfair_lock_unlock(v2);
    return;
  }
  outlined init with take of Subscription((long long *)v23, (uint64_t)v24);
  *(void *)unint64_t v23 = 1;
  memset(&v23[8], 0, 32);
  v23[40] = 2;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)v23, v3);
  swift_endAccess();
  *(void *)((char *)v0 + *(void *)(*v0 + 208)) = 0;
  uint64_t v4 = (void *)((char *)v0 + *(void *)(*v0 + 184));
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  long long v6 = v1[6];
  *(_OWORD *)unint64_t v23 = v1[5];
  *(_OWORD *)&v23[16] = v6;
  *(_OWORD *)&v23[32] = v1[7];
  uint64_t v7 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v2);
  int64_t v8 = 0;
  uint64_t v9 = v5 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v5 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_7;
    }
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v13) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v9 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v9 + 8 * v8);
        if (!v18) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_7:
    uint64_t v16 = *(void *)(v7 - 8);
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v16 + 16))(v23, *(void *)(v5 + 56) + 40 * v15, v7);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v22, v23, v7);
    Publishers.Debounce.Inner.CancellerState.cancel()(v7);
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v22, v7);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13)
  {
LABEL_23:
    swift_release();
    uint64_t v20 = v25;
    uint64_t v21 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t))(*(void *)(v21 + 8) + 8))(v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    return;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
}

void Publishers.Debounce.Inner.receive(completion:)(uint64_t a1)
{
  uint64_t v57 = a1;
  size_t v54 = (void *)*v1;
  uint64_t v2 = (void *)v54[15];
  uint64_t v3 = v54[12];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v52 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v45 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v53 = *(void **)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - v10;
  os_unfair_lock_t v55 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v55);
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v12, (uint64_t)&v59);
  if ((_BYTE)v63)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v59);
    os_unfair_lock_unlock(v55);
    return;
  }
  uint64_t v49 = v5;
  unsigned int v50 = v7;
  uint64_t v56 = v4;
  outlined init with take of Subscription(&v59, (uint64_t)v64);
  outlined init with copy of Subscription((uint64_t)v64, (uint64_t)&v59);
  LOBYTE(v63) = 1;
  swift_beginAccess();
  outlined assign with take of SubscriptionStatus((uint64_t)&v59, v12);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v11, 1, 1, AssociatedTypeWitness);
  int64_t v13 = (char *)v1 + *(void *)(*v1 + 192);
  swift_beginAccess();
  ((void (*)(char *, char *, uint64_t))v53[5])(v13, v11, v9);
  swift_endAccess();
  uint64_t v14 = *(void *)(*v1 + 184);
  uint64_t v53 = v1;
  unint64_t v15 = (void *)((char *)v1 + v14);
  swift_beginAccess();
  uint64_t v16 = *v15;
  swift_beginAccess();
  uint64_t v18 = v54[10];
  uint64_t v17 = v54[11];
  uint64_t v20 = v54[13];
  uint64_t v19 = v54[14];
  swift_bridgeObjectRetain();
  uint64_t v46 = v18;
  *(void *)&long long v59 = v18;
  *((void *)&v59 + 1) = v17;
  uint64_t v48 = v17;
  uint64_t v51 = v3;
  uint64_t v60 = v3;
  uint64_t v61 = v20;
  uint64_t v45 = v20;
  uint64_t v47 = v19;
  uint64_t v62 = v19;
  uint64_t v63 = v2;
  size_t v54 = v2;
  uint64_t v21 = type metadata accessor for Publishers.Debounce.Inner.CancellerState();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  os_unfair_lock_unlock(v55);
  int64_t v22 = 0;
  uint64_t v23 = v16 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v16 + 64);
  int64_t v27 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      unint64_t v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v29 = v28 | (v22 << 6);
      goto LABEL_7;
    }
    int64_t v31 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v32 = v57;
    uint64_t v33 = v56;
    if (v31 >= v27) {
      goto LABEL_23;
    }
    unint64_t v34 = *(void *)(v23 + 8 * v31);
    ++v22;
    if (!v34)
    {
      int64_t v22 = v31 + 1;
      if (v31 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v34 = *(void *)(v23 + 8 * v22);
      if (!v34)
      {
        int64_t v22 = v31 + 2;
        if (v31 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v34 = *(void *)(v23 + 8 * v22);
        if (!v34) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v26 = (v34 - 1) & v34;
    unint64_t v29 = __clz(__rbit64(v34)) + (v22 << 6);
LABEL_7:
    uint64_t v30 = *(void *)(v21 - 8);
    (*(void (**)(long long *, unint64_t, uint64_t))(v30 + 16))(&v59, *(void *)(v16 + 56) + 40 * v29, v21);
    (*(void (**)(unsigned char *, long long *, uint64_t))(v30 + 32))(v58, &v59, v21);
    Publishers.Debounce.Inner.CancellerState.cancel()(v21);
    (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v58, v21);
  }
  int64_t v35 = v31 + 3;
  if (v35 >= v27)
  {
LABEL_23:
    swift_release();
    uint64_t v36 = v53;
    uint64_t v37 = v52;
    uint64_t v38 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v32, v33);
    unint64_t v39 = (*(unsigned __int8 *)(v37 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    unint64_t v40 = (char *)swift_allocObject();
    uint64_t v41 = v48;
    *((void *)v40 + 2) = v46;
    *((void *)v40 + 3) = v41;
    uint64_t v42 = v45;
    *((void *)v40 + 4) = v51;
    *((void *)v40 + 5) = v42;
    uint64_t v43 = v47;
    size_t v44 = v54;
    *((void *)v40 + 6) = v47;
    *((void *)v40 + 7) = v44;
    *((void *)v40 + 8) = v36;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v40[v39], v38, v33);
    swift_retain();
    Scheduler.schedule(_:)((uint64_t)partial apply for closure #1 in Publishers.Debounce.Inner.receive(completion:), (uint64_t)v40, v41, v43);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
    return;
  }
  unint64_t v34 = *(void *)(v23 + 8 * v35);
  if (v34)
  {
    int64_t v22 = v35;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v22 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v34 = *(void *)(v23 + 8 * v22);
    ++v35;
    if (v34) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t closure #1 in Publishers.Debounce.Inner.receive(completion:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  os_unfair_recursive_lock_lock_with_options();
  (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 56))(a2, *(void *)(v3 + 96));

  return os_unfair_recursive_lock_unlock();
}

void protocol witness for Subscriber.receive(completion:) in conformance Publishers.Debounce<A, B>.Inner<A1>(uint64_t a1)
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Debounce<A, B>.Inner<A1>()
{
  return 0x65636E756F626544;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Debounce<A, B>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Debounce<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Debounce<A, B>.Inner<A1>()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Debounce(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v40 = *(void *)(a3 + 16);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v4 = *(void *)(v41 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = AssociatedTypeWitness;
  int v6 = *(_DWORD *)(v37 + 80);
  uint64_t v7 = v6;
  uint64_t v36 = v4 + v6;
  uint64_t v8 = (v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v37 + 64);
  uint64_t v10 = *(void *)(v3 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v11;
  uint64_t v35 = v9 + v11;
  uint64_t v13 = (v9 + v12 + v8) & ~v12;
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v39 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = v14 + v16;
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v18 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v15 + 64) + 1;
  }
  uint64_t v19 = (v6 | *(unsigned char *)(v41 + 80) | v11 | *(unsigned char *)(v15 + 80));
  if (v19 <= 7
    && v18 + ((v14 + v16 + v13) & (unint64_t)~v16) <= 0x18
    && ((v6 | *(_DWORD *)(v41 + 80) | v11 | *(_DWORD *)(v15 + 80)) & 0x100000) == 0)
  {
    size_t __n = v18;
    unint64_t v24 = ~(unint64_t)v6;
    uint64_t v25 = ~v12;
    uint64_t v26 = ~v16;
    uint64_t v23 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v41 + 16))(a1, a2, v40);
    unint64_t v27 = ((unint64_t)a1 + v36) & ~v7;
    unint64_t v28 = ((unint64_t)a2 + v36) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 16))(v27, v28, v38);
    unint64_t v29 = (v27 + v35) & v25;
    unint64_t v30 = (v28 + v35) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(v29, v30, v3);
    int64_t v31 = (void *)((v29 + v17) & v26);
    uint64_t v32 = (const void *)((v30 + v17) & v26);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v32, 1, v39))
    {
      memcpy(v31, v32, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v31, v32, v39);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v31, 0, 1, v39);
    }
  }
  else
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    uint64_t v23 = (uint64_t *)(v22 + ((v19 + 16) & ~v19));
    swift_retain();
  }
  return v23;
}

uint64_t assignWithCopy for Publishers.Debounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 40) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 40);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  uint64_t v26 = (void *)((v21 + v24 + v20) & ~v24);
  unint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v20) = v27(v25, 1, v22);
  int v28 = v27(v26, 1, v22);
  if (v20)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v25, v26, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      return a1;
    }
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v25, v26, v22);
      return a1;
    }
    uint64_t v32 = *(void (**)(void *, uint64_t))(v23 + 8);
    uint64_t v31 = v23 + 8;
    v32(v25, v22);
    int v29 = *(_DWORD *)(v31 + 76);
    size_t v30 = *(void *)(v31 + 56);
  }
  if (v29) {
    size_t v33 = v30;
  }
  else {
    size_t v33 = v30 + 1;
  }
  memcpy(v25, v26, v33);
  return a1;
}

uint64_t initializeWithTake for Publishers.Debounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 32;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 32) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 32);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  uint64_t v26 = (const void *)((v21 + v24 + v20) & ~v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22))
  {
    if (*(_DWORD *)(v23 + 84)) {
      size_t v27 = *(void *)(v23 + 64);
    }
    else {
      size_t v27 = *(void *)(v23 + 64) + 1;
    }
    memcpy(v25, v26, v27);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v25, v26, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Debounce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 24) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 24);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  uint64_t v26 = (void *)((v21 + v24 + v20) & ~v24);
  size_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v20) = v27(v25, 1, v22);
  int v28 = v27(v26, 1, v22);
  if (v20)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v25, v26, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      return a1;
    }
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v25, v26, v22);
      return a1;
    }
    uint64_t v32 = *(void (**)(void *, uint64_t))(v23 + 8);
    uint64_t v31 = v23 + 8;
    v32(v25, v22);
    int v29 = *(_DWORD *)(v31 + 76);
    size_t v30 = *(void *)(v31 + 56);
  }
  if (v29) {
    size_t v33 = v30;
  }
  else {
    size_t v33 = v30 + 1;
  }
  memcpy(v25, v26, v33);
  return a1;
}

uint64_t sub_18C09F4F0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, AssociatedTypeWitness); {

  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Publishers.Debounce.Inner.receive(completion:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  uint64_t v2 = *(uint64_t **)(v0 + 64);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in Publishers.Debounce.Inner.receive(completion:)(v2, v3);
}

uint64_t sub_18C09F72C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Fail.init(error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

uint64_t Fail.init(outputType:failure:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Fail.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t Fail.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = type metadata accessor for Subscribers.Completion();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  if (one-time initialization token for singleton != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(static Subscriptions._EmptySubscription.singleton, a3, a4);
  uint64_t v12 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v4, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 56))(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Fail<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Fail.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Fail<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Fail<A, B>()
{
  return static Fail<>.== infix(_:_:)();
}

uint64_t type metadata completion function for Fail()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Fail(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Fail(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C09FE10);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t Publisher.last()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t Publishers.Last.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.Last.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Last.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)v18 - v12;
  v18[0] = v8;
  v18[1] = a3;
  v18[2] = v7;
  uint64_t v18[3] = a4;
  uint64_t v14 = type metadata accessor for Publishers.Last.Inner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1, AssociatedTypeWitness);
  swift_allocObject();
  int v15 = specialized Publishers.Last.Inner.init(downstream:initial:reduce:)(a1, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18[0] = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)v18, v8, v14, v7, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.Last.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t Publishers.Last.Inner.description.getter()
{
  return 1953718604;
}

uint64_t Publishers.Last.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  BOOL v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v15 - v10, a1, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
  uint64_t v13 = v2 + *(void *)(*(void *)v2 + 136);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v13, v9, v5);
  swift_endAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for PartialCompletion();
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Last<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.Last.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.Last<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Last<A>()
{
  return static Publishers.Last<>.== infix(_:_:)();
}

uint64_t *specialized Publishers.Last.Inner.init(downstream:initial:reduce:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v9, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  return ReduceProducer.init(downstream:initial:reduce:)((uint64_t)v10, (uint64_t)v8, v12);
}

uint64_t getEnumTagSinglePayload for Publishers.Last(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.Last(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C0A0968);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Publishers.Last()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PublisherBoxBase.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PublisherBoxBase.init()()
{
  return v0;
}

uint64_t PublisherBoxBase.deinit()
{
  return v0;
}

uint64_t PublisherBoxBase.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

void PublisherBoxBase.receive<A>(subscriber:)()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PublisherBoxBase<A, B>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t PublisherBox.base.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 120) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 136));
}

uint64_t PublisherBox.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 120) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 136), a1);
  return v1;
}

uint64_t PublisherBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));
}

uint64_t PublisherBox.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));
  return v0;
}

void PublisherBox.__allocating_init()()
{
}

void PublisherBox.init()()
{
}

uint64_t AnyPublisher.description.getter()
{
  return 0x696C627550796E41;
}

void AnyPublisher.playgroundDescription.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB1A0];
  strcpy((char *)a1, "AnyPublisher");
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void specialized PublisherBox.init()()
{
}

uint64_t method lookup function for PublisherBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PublisherBoxBase);
}

uint64_t dispatch thunk of PublisherBoxBase.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of PublisherBoxBase.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t method lookup function for PublisherBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PublisherBox);
}

uint64_t dispatch thunk of PublisherBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t Publishers.Map.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.Map.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.Map, a7);
}

uint64_t Publishers.TryMap.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publishers.Map.init(upstream:transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Publishers.TryMap, a7);
}

uint64_t Publishers.Map.init(upstream:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a8, a1, a4);
  uint64_t result = a7(0, a4, a5, a6);
  uint64_t v16 = (void *)(a8 + *(int *)(result + 44));
  *uint64_t v16 = a2;
  v16[1] = a3;
  return result;
}

uint64_t Publishers.Map.Inner.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unsigned int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  BOOL v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Map.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 7364941;
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Map<A, B>.Inner<A1>()
{
  return 7364941;
}

void Publishers.TryMap.Inner.__allocating_init(downstream:map:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t Publishers.TryMap.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unsigned int v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = v0;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = *(void *)(v1 + 112);
  long long v11 = *(_OWORD *)(v2 + 96);
  v13[0] = *(_OWORD *)(v2 + 80);
  v13[1] = v11;
  uint64_t v14 = v10;
  type metadata accessor for Publishers.TryMap.Inner();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.TryMap.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x70614D797254;
  a1[1] = 0xE600000000000000;
}

void Publishers.TryMap.Inner.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryMap<A, B>.Inner<A1>()
{
  return 0x70614D797254;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.TryMap<A, B>.Inner<A1>()
{
  return Publishers.TryMap.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryMap<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.TryMap<A, B>.Inner<A1>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + *(void *)(**(void **)v1 + 152));
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryMap<A, B>.Inner<A1>()
{
}

uint64_t closure #1 in Publishers.Map.tryMap<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  a2(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a7);
}

uint64_t partial apply for closure #1 in Publishers.Map.tryMap<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.Map.tryMap<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.Map.tryMap<A>(_:));
}

uint64_t Publishers.TryMap.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v24 = a1;
  uint64_t v25 = a5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(v6 + *(int *)(v14 + 44));
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[4];
  *((void *)v18 + 2) = v10;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = v20;
  *((void *)v18 + 6) = v24;
  *((void *)v18 + 7) = a2;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, v10);
  uint64_t v21 = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v25, v13, v10);
  uint64_t v22 = (uint64_t (**)(uint64_t))(v21 + *(int *)(type metadata accessor for Publishers.TryMap() + 44));
  void *v22 = partial apply for closure #1 in Publishers.TryMap.map<A>(_:);
  v22[1] = v18;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in Publishers.TryMap.map<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a7 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v11);
  if (!v7)
  {
    a2(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a7);
  }
  return result;
}

uint64_t partial apply for closure #1 in Publishers.TryMap.map<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.Map.tryMap<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.TryMap.map<A>(_:));
}

uint64_t closure #1 in Publishers.TryMap.tryMap<A>(_:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a7 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v11);
  if (!v7)
  {
    a2(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a7);
  }
  return result;
}

uint64_t partial apply for closure #1 in Publishers.TryMap.tryMap<A>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Publishers.Map.tryMap<A>(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in Publishers.TryMap.tryMap<A>(_:));
}

uint64_t partial apply for closure #1 in Publishers.Map.tryMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[8], v2[9], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t Publishers.Timeout.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Timeout.interval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Timeout.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t Publishers.Timeout.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 60);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Publishers.Timeout.customError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 64));
  outlined copy of (@escaping @callee_guaranteed @substituted <A> (@in_guaranteed Subscribers.Completion<A>) -> (@unowned Bool) for <A.Failure>)?<A><A1>(v2);
  return v2;
}

void *Publishers.Timeout.Inner.__allocating_init(_:interval:scheduler:options:customError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Publishers.Timeout.Inner.init(_:interval:scheduler:options:customError:)(a1, a2, a3, a4, a5, a6);
}

uint64_t Publishers.Timeout.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Timeout.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x74756F656D6954;
  a1[1] = 0xE700000000000000;
}

void Publishers.Timeout.Inner.timedOut()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Subscribers.Completion();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v24 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v12);
  uint64_t v13 = *v1;
  uint64_t v14 = *(void *)(*v1 + 192);
  if (*((unsigned char *)v1 + v14))
  {
    os_unfair_lock_unlock(v12);
  }
  else
  {
    uint64_t v27 = v2;
    uint64_t v15 = (uint64_t)v1 + *(void *)(v13 + 184);
    swift_beginAccess();
    outlined init with copy of SubscriptionStatus(v15, (uint64_t)&v28);
    if (v31)
    {
      outlined destroy of SubscriptionStatus((uint64_t)&v28);
      os_unfair_lock_unlock(v12);
    }
    else
    {
      outlined init with take of Subscription((long long *)&v28, (uint64_t)v32);
      uint64_t v16 = (void *)((char *)v1 + *(void *)(*v1 + 176));
      uint64_t v17 = (void (*)(void))*v16;
      uint64_t v26 = v16[1];
      *((unsigned char *)v1 + v14) = 1;
      uint64_t v18 = v17;
      uint64_t v28 = 1;
      long long v29 = 0u;
      long long v30 = 0u;
      char v31 = 2;
      swift_beginAccess();
      outlined assign with take of SubscriptionStatus((uint64_t)&v28, v15);
      swift_endAccess();
      *(void *)((char *)v1 + *(void *)(*v1 + 200)) = 0;
      swift_release();
      os_unfair_lock_unlock(v12);
      if (v18)
      {
        uint64_t v19 = swift_retain();
        uint64_t v25 = v18;
        v18(v19);
        uint64_t v21 = v33;
        uint64_t v20 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(uint64_t))(*(void *)(v20 + 8) + 8))(v21);
        os_unfair_recursive_lock_lock_with_options();
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v8, v11, AssociatedTypeWitness);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, AssociatedTypeWitness);
        (*(void (**)(char *, void))(*(void *)(v27 + 120) + 56))(v8, *(void *)(v27 + 96));
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        os_unfair_recursive_lock_unlock();
        _sxSbRi_zRi0_zly6OutputQzIsegnd_Sg7Combine9PublisherRzAD10SubscriberRd__7FailureQyd__AGRtz5InputQyd__ABRSr__lWOe((uint64_t)v25);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v23 = v33;
        uint64_t v22 = v34;
        __swift_project_boxed_opaque_existential_1(v32, v33);
        (*(void (**)(uint64_t))(*(void *)(v22 + 8) + 8))(v23);
        os_unfair_recursive_lock_lock_with_options();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, AssociatedTypeWitness);
        (*(void (**)(char *, void))(*(void *)(v27 + 120) + 56))(v8, *(void *)(v27 + 96));
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        os_unfair_recursive_lock_unlock();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    }
  }
}

void Publishers.Timeout.Inner.scheduledReceive(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v4);
  if (*((unsigned char *)v1 + *(void *)(*v1 + 192))) {
    goto LABEL_13;
  }
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v5, (uint64_t)v14);
  outlined init with copy of SubscriptionStatus((uint64_t)v14, (uint64_t)v9);
  if (v10 != 1 && v10)
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)v9);
  }
  else
  {
    outlined init with take of Subscription(v9, (uint64_t)&v11);
  }
  outlined destroy of SubscriptionStatus((uint64_t)v14);
  if (!*((void *)&v12 + 1))
  {
    outlined destroy of Subscription?((uint64_t)&v11);
LABEL_13:
    os_unfair_lock_unlock(v4);
    return;
  }
  outlined init with take of Subscription(&v11, (uint64_t)v15);
  os_unfair_lock_unlock(v4);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v3 + 120) + 48))(a1, *(void *)(v3 + 96));
  os_unfair_recursive_lock_unlock();
  if (v6 == 0x8000000000000000) {
    goto LABEL_10;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (!v6)
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return;
    }
LABEL_10:
    uint64_t v7 = v16;
    uint64_t v8 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, v7, v8);
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t Publishers.Timeout.Inner.receive(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = *(void *)(*v1 + 120);
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v10 = *(void *)(*v1 + 192);
  if ((*((unsigned char *)v1 + v10) & 1) != 0
    || (uint64_t v11 = (uint64_t)v1 + *(void *)(*v1 + 184),
        swift_beginAccess(),
        outlined init with copy of SubscriptionStatus(v11, (uint64_t)v26),
        LODWORD(v11) = v26[40],
        outlined destroy of SubscriptionStatus((uint64_t)v26),
        v11))
  {
    os_unfair_lock_unlock(v9);
  }
  else
  {
    uint64_t v23 = v3;
    uint64_t v13 = *(void *)(*v2 + 200);
    if (*(void *)((char *)v2 + v13))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    *((unsigned char *)v2 + v10) = 0;
    *(void *)((char *)v2 + v13) = Publishers.Timeout.Inner.timeoutClock()();
    swift_release();
    os_unfair_lock_unlock(v9);
    uint64_t v14 = *v2;
    v22[1] = (char *)v2 + *(void *)(*v2 + 160);
    v22[0] = (char *)v2 + *(void *)(v14 + 168);
    uint64_t v15 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v8, v24, AssociatedTypeWitness);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = (char *)swift_allocObject();
    uint64_t v18 = v23;
    *((void *)v17 + 2) = v23[10];
    uint64_t v19 = v18[11];
    *((void *)v17 + 3) = v19;
    *((void *)v17 + 4) = v5;
    *((void *)v17 + 5) = v18[13];
    uint64_t v20 = v18[14];
    *((void *)v17 + 6) = v20;
    *((void *)v17 + 7) = v4;
    *((void *)v17 + 8) = v2;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v17[v16], v8, AssociatedTypeWitness);
    uint64_t v21 = *(void (**)(void, void (*)(), char *, uint64_t, uint64_t))(v20 + 56);
    swift_retain();
    v21(v22[0], partial apply for closure #1 in Publishers.Timeout.Inner.receive(_:), v17, v19, v20);
    swift_release();
  }
  return 0;
}

void Publishers.Timeout.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 184);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v12);
  outlined init with copy of SubscriptionStatus((uint64_t)&v12, (uint64_t)v7);
  if (v8 != 1 && v8)
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
    outlined destroy of SubscriptionStatus((uint64_t)v7);
  }
  else
  {
    outlined init with take of Subscription(v7, (uint64_t)&v9);
  }
  outlined destroy of SubscriptionStatus((uint64_t)&v12);
  if (*((void *)&v10 + 1))
  {
    outlined init with take of Subscription(&v9, (uint64_t)v16);
    uint64_t v12 = 1;
    long long v13 = 0u;
    long long v14 = 0u;
    char v15 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v12, v2);
    swift_endAccess();
    uint64_t v3 = *(void *)(*v0 + 200);
    uint64_t v4 = *(void *)((char *)v0 + v3);
    *(void *)((char *)v0 + v3) = 0;
    os_unfair_lock_unlock(v1);
    if (v4)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v5);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)&v9);
    os_unfair_lock_unlock(v1);
  }
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.Timeout<A, B>.Inner<A1>(uint64_t a1)
{
  return Publishers.Timeout.Inner.receive(_:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Timeout<A, B>.Inner<A1>()
{
  return 0x74756F656D6954;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Timeout<A, B>.Inner<A1>()
{
  return Publishers.Timeout.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Timeout<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Timeout<A, B>.Inner<A1>()
{
}

uint64_t type metadata completion function for Publishers.Timeout()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Timeout(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v42 = *(void *)(a3 + 16);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v4 = *(void *)(v43 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = AssociatedTypeWitness;
  int v6 = *(_DWORD *)(v39 + 80);
  uint64_t v7 = v6;
  uint64_t v38 = v4 + v6;
  uint64_t v8 = (v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v3 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v37 = *(void *)(v39 + 64) + v10;
  unint64_t v11 = (v37 + v8) & ~(unint64_t)v10;
  uint64_t v12 = *(void *)(v9 + 64);
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v41 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v16 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v13 + 64) + 1;
  }
  unsigned int v17 = v6 | *(_DWORD *)(v43 + 80) & 0xF8 | v10 | v14;
  if (v17 > 7
    || ((v10 | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v43 + 80) | v6) & 0x100000) != 0
    || ((v16 + 7 + ((v12 + v14 + v11) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v24 = (uint64_t *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
  }
  else
  {
    size_t __n = v16;
    uint64_t v36 = v16 + 7;
    unint64_t v21 = ~(unint64_t)v6;
    unint64_t v22 = ~(unint64_t)v10;
    uint64_t v23 = ~v14;
    uint64_t v24 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v43 + 16))(a1, a2, v42);
    unint64_t v25 = ((unint64_t)a1 + v38) & ~v7;
    unint64_t v26 = ((unint64_t)a2 + v38) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16))(v25, v26, v40);
    unint64_t v27 = (v25 + v37) & v22;
    unint64_t v28 = (v26 + v37) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v27, v28, v3);
    long long v29 = (void *)((v27 + v15) & v23);
    long long v30 = (const void *)((v28 + v15) & v23);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v30, 1, v41))
    {
      memcpy(v29, v30, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v29, v30, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v41);
    }
    unint64_t v31 = ((unint64_t)v29 + v36) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = ((unint64_t)v30 + v36) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v32 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
      return v24;
    }
    uint64_t v33 = *(void *)(v32 + 8);
    *(void *)unint64_t v31 = *(void *)v32;
    *(void *)(v31 + 8) = v33;
  }
  swift_retain();
  return v24;
}

uint64_t assignWithCopy for Publishers.Timeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v20, v21, v8);
  uint64_t v22 = *(void *)(v17 + 40);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (void *)((v22 + v25 + v20) & ~v25);
  unint64_t v27 = (void *)((v22 + v25 + v21) & ~v25);
  unint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v20) = v28(v26, 1, v23);
  int v29 = v28(v27, 1, v23);
  if (v20)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v26, v27, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
      goto LABEL_12;
    }
    int v30 = *(_DWORD *)(v24 + 84);
    size_t v31 = *(void *)(v24 + 64);
  }
  else
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v26, v27, v23);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
    int v30 = *(_DWORD *)(v24 + 84);
    size_t v31 = *(void *)(v24 + 64);
  }
  if (v30) {
    size_t v32 = v31;
  }
  else {
    size_t v32 = v31 + 1;
  }
  memcpy(v26, v27, v32);
LABEL_12:
  if (*(_DWORD *)(v24 + 84)) {
    uint64_t v33 = *(void *)(v24 + 64);
  }
  else {
    uint64_t v33 = *(void *)(v24 + 64) + 1;
  }
  uint64_t v34 = (void *)(((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (unint64_t *)(((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = *v35;
  if (*v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      unint64_t v38 = v35[1];
      void *v34 = v36;
      v34[1] = v38;
      swift_retain();
      return a1;
    }
LABEL_21:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    return a1;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v37 = v35[1];
  void *v34 = v36;
  v34[1] = v37;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Timeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v15 + 32;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = *(void *)(v11 + 32) + v17;
  uint64_t v19 = (v18 + v13) & ~v17;
  uint64_t v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v19, v20, v8);
  uint64_t v21 = *(void *)(v16 + 32);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v21 + v24 + v19) & ~v24);
  unint64_t v26 = (const void *)((v21 + v24 + v20) & ~v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v26, 1, v22))
  {
    int v27 = *(_DWORD *)(v23 + 84);
    uint64_t v28 = *(void *)(v23 + 64);
    if (v27) {
      size_t v29 = *(void *)(v23 + 64);
    }
    else {
      size_t v29 = v28 + 1;
    }
    memcpy(v25, v26, v29);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v25, v26, v22);
    size_t v31 = *(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v30 = v23 + 56;
    v31(v25, 0, 1, v22);
    int v27 = *(_DWORD *)(v30 + 28);
    uint64_t v28 = *(void *)(v30 + 8);
  }
  if (v27) {
    uint64_t v32 = v28;
  }
  else {
    uint64_t v32 = v28 + 1;
  }
  unint64_t v33 = ((unint64_t)v25 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = (uint64_t *)(((unint64_t)v26 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = *v34;
  if ((unint64_t)*v34 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  }
  else
  {
    uint64_t v36 = v34[1];
    *(void *)unint64_t v33 = v35;
    *(void *)(v33 + 8) = v36;
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Timeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v7 + v12 + a1) & ~v12;
  uint64_t v14 = (v7 + v12 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v17 = v16 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40))(v20, v21, v8);
  uint64_t v22 = *(void *)(v17 + 24);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (void *)((v22 + v25 + v20) & ~v25);
  int v27 = (void *)((v22 + v25 + v21) & ~v25);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v20) = v28(v26, 1, v23);
  int v29 = v28(v27, 1, v23);
  if (v20)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v26, v27, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
      goto LABEL_12;
    }
    int v30 = *(_DWORD *)(v24 + 84);
    size_t v31 = *(void *)(v24 + 64);
  }
  else
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v26, v27, v23);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
    int v30 = *(_DWORD *)(v24 + 84);
    size_t v31 = *(void *)(v24 + 64);
  }
  if (v30) {
    size_t v32 = v31;
  }
  else {
    size_t v32 = v31 + 1;
  }
  memcpy(v26, v27, v32);
LABEL_12:
  if (*(_DWORD *)(v24 + 84)) {
    uint64_t v33 = *(void *)(v24 + 64);
  }
  else {
    uint64_t v33 = *(void *)(v24 + 64) + 1;
  }
  uint64_t v34 = (void *)(((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (unint64_t *)(((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = *v35;
  if (*v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      unint64_t v38 = v35[1];
      void *v34 = v36;
      v34[1] = v38;
      return a1;
    }
LABEL_21:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    return a1;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v37 = v35[1];
  void *v34 = v36;
  v34[1] = v37;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Timeout(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v41 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v41 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v40 = v7;
  if (v7 <= v5) {
    unsigned int v7 = v5;
  }
  uint64_t v8 = *(void *)(v3 - 8);
  unsigned int v38 = *(_DWORD *)(v8 + 84);
  if (v38 <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  uint64_t v15 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v16 = *(void *)(v6 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 64);
  if (!v12) {
    ++v20;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v21 = *(void *)(v4 + 64) + v15;
  uint64_t v22 = v20 + 7;
  uint64_t v23 = a1;
  if (v14 < a2)
  {
    unint64_t v24 = ((v22 + ((v18 + v19 + ((v16 + v17 + (v21 & ~v15)) & ~v17)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v24 & 0xFFFFFFF8) != 0) {
      unsigned int v25 = 2;
    }
    else {
      unsigned int v25 = a2 - v14 + 1;
    }
    if (v25 >= 0x10000) {
      unsigned int v26 = 4;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v25 < 0x100) {
      unsigned int v26 = 1;
    }
    if (v25 >= 2) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    switch(v27)
    {
      case 1:
        int v28 = *((unsigned __int8 *)a1 + v24);
        if (!*((unsigned char *)a1 + v24)) {
          break;
        }
        goto LABEL_33;
      case 2:
        int v28 = *(unsigned __int16 *)((char *)a1 + v24);
        if (*(_WORD *)((char *)a1 + v24)) {
          goto LABEL_33;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0A3E7CLL);
      case 4:
        int v28 = *(_DWORD *)((char *)a1 + v24);
        if (!v28) {
          break;
        }
LABEL_33:
        int v29 = v28 - 1;
        if ((v24 & 0xFFFFFFF8) != 0)
        {
          int v29 = 0;
          int v30 = *a1;
        }
        else
        {
          int v30 = 0;
        }
        return v14 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  if (v5 == v14)
  {
    uint64_t v31 = v41;
    size_t v32 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v33 = v5;
LABEL_42:
    return v32(v23, v33, v31);
  }
  uint64_t v23 = (_DWORD *)(((unint64_t)a1 + v21) & ~v15);
  if (v40 == v14)
  {
    size_t v32 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v33 = v40;
    uint64_t v31 = AssociatedTypeWitness;
    goto LABEL_42;
  }
  uint64_t v23 = (_DWORD *)(((unint64_t)v23 + v16 + v17) & ~v17);
  if (v38 == v14)
  {
    size_t v32 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v33 = v38;
    uint64_t v31 = v3;
    goto LABEL_42;
  }
  unint64_t v35 = ((unint64_t)v23 + v18 + v19) & ~v19;
  if (v13 == v14)
  {
    if (v12 >= 2)
    {
      unsigned int v37 = (*(uint64_t (**)(unint64_t))(v11 + 48))(v35);
      if (v37 >= 2) {
        return v37 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v36 = *(void *)((v22 + v35) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF) {
    LODWORD(v36) = -1;
  }
  if ((v36 + 1) >= 2) {
    return v36;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Timeout(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v38 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v39 = v6;
  unsigned int v37 = v8;
  if (v8 <= v6) {
    unsigned int v8 = v6;
  }
  uint64_t v9 = *(void *)(v4 - 8);
  unsigned int v36 = *(_DWORD *)(v9 + 84);
  if (v36 <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)(v12 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(v7 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(v9 + 64);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(v12 + 64);
  if (v15 <= v10) {
    unsigned int v22 = v10;
  }
  else {
    unsigned int v22 = v15;
  }
  if (v22 <= 0x7FFFFFFE) {
    unsigned int v22 = 2147483646;
  }
  uint64_t v23 = *(void *)(v5 + 64) + v16;
  if (!v14) {
    ++v21;
  }
  uint64_t v24 = v21 + 7;
  size_t v25 = ((v24 + ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v22 < a3)
  {
    if (((v24
         + ((v19
           + v20
           + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v26 = a3 - v22 + 1;
    else {
      unsigned int v26 = 2;
    }
    if (v26 >= 0x10000) {
      int v27 = 4;
    }
    else {
      int v27 = 2;
    }
    if (v26 < 0x100) {
      int v27 = 1;
    }
    if (v26 >= 2) {
      int v11 = v27;
    }
    else {
      int v11 = 0;
    }
  }
  if (a2 > v22)
  {
    if (((v24
         + ((v19
           + v20
           + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v28 = a2 - v22;
    else {
      int v28 = 1;
    }
    if (((v24
         + ((v19
           + v20
           + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v29 = ~v22 + a2;
      bzero(a1, v25);
      *a1 = v29;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v25) = v28;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v25) = v28;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(unsigned int *)((char *)a1 + v25) = v28;
        return;
      default:
        return;
    }
  }
  uint64_t v30 = ~v16;
  uint64_t v31 = a1;
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)((char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x18C0A4374);
    case 4:
      *(unsigned int *)((char *)a1 + v25) = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (!a2) {
        return;
      }
LABEL_42:
      if (v39 == v22)
      {
        size_t v32 = *(void (**)(_DWORD *))(v38 + 56);
        goto LABEL_44;
      }
      uint64_t v31 = (_DWORD *)(((unint64_t)a1 + v23) & v30);
      if (v37 == v22)
      {
        size_t v32 = *(void (**)(_DWORD *))(v7 + 56);
        goto LABEL_46;
      }
      uint64_t v31 = (_DWORD *)(((unint64_t)v31 + v17 + v18) & ~v18);
      if (v36 == v22)
      {
        size_t v32 = *(void (**)(_DWORD *))(v9 + 56);
LABEL_44:
LABEL_46:
        v32(v31);
        return;
      }
      unint64_t v33 = ((unint64_t)v31 + v19 + v20) & ~v20;
      if (v15 == v22)
      {
        uint64_t v34 = *(void (**)(unint64_t, void))(v13 + 56);
        v34(v33, a2 + 1);
      }
      else
      {
        unint64_t v35 = (void *)((v24 + v33) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *unint64_t v35 = 0;
          v35[1] = 0;
          *(_DWORD *)unint64_t v35 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *unint64_t v35 = a2;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.Timeout.Inner()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t AssociatedTypeWitness = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
        if (v4 <= 0x3F) {
          return swift_initClassMetadata2();
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t sub_18C0A45CC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, AssociatedTypeWitness); {

  }
  return swift_deallocObject();
}

uint64_t sub_18C0A4738()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

void partial apply for closure #1 in Publishers.Timeout.Inner.receive(_:)()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  Publishers.Timeout.Inner.scheduledReceive(_:)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_18C0A489C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

int *Publishers.Buffer.init(upstream:size:prefetch:whenFull:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = (int *)type metadata accessor for Publishers.Buffer();
  *(void *)(a6 + result[9]) = a2;
  *(unsigned char *)(a6 + result[10]) = v8;
  uint64_t v12 = (void *)(a6 + result[11]);
  void *v12 = v9;
  v12[1] = v10;
  return result;
}

BOOL static Publishers.PrefetchStrategy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Publishers.PrefetchStrategy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Publishers.PrefetchStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Publishers.PrefetchStrategy(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Publishers.PrefetchStrategy()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Publishers.PrefetchStrategy()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Publishers.PrefetchStrategy()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Publishers.Buffer.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Buffer.size.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t Publishers.Buffer.prefetch.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 40));
  return result;
}

unint64_t Publishers.Buffer.whenFull.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)(v2 + *(int *)(a1 + 44));
  unint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of Publishers.BufferingStrategy<A><A>(v4);
}

uint64_t *Publishers.Buffer.Inner.__allocating_init(_:size:prefetch:whenFull:)(uint64_t a1, uint64_t a2, char *a3, uint64_t *a4)
{
  return Publishers.Buffer.Inner.init(_:size:prefetch:whenFull:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type Publishers.PrefetchStrategy and conformance Publishers.PrefetchStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type Publishers.PrefetchStrategy and conformance Publishers.PrefetchStrategy;
  if (!lazy protocol witness table cache variable for type Publishers.PrefetchStrategy and conformance Publishers.PrefetchStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Publishers.PrefetchStrategy and conformance Publishers.PrefetchStrategy);
  }
  return result;
}

char *Publishers.Buffer.Inner.deinit()
{
  uint64_t v1 = *(void *)v0;
  MEMORY[0x18C13C4B0](*((void *)v0 + 2), -1, -1);
  outlined consume of Publishers.BufferingStrategy<A.Failure><A><A1>(*((void *)v0 + 6));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 88) - 8) + 8))(&v0[*(void *)(*(void *)v0 + 152)]);
  outlined destroy of SubscriptionStatus((uint64_t)&v0[*(void *)(*(void *)v0 + 160)]);
  swift_bridgeObjectRelease();
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 192)];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t Publishers.Buffer.Inner.__deallocating_deinit()
{
  uint64_t v0 = Publishers.Buffer.Inner.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void Publishers.Buffer.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 160);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v7);
  if (v10)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v7);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v7, (uint64_t)v11);
    uint64_t v7 = 1;
    long long v8 = 0u;
    long long v9 = 0u;
    char v10 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v7, v2);
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    uint64_t v3 = Array.init()();
    unint64_t v4 = (void *)((char *)v0 + *(void *)(*v0 + 176));
    swift_beginAccess();
    uint64_t *v4 = v3;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v1);
    uint64_t v5 = v12;
    uint64_t v6 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t))(*(void *)(v6 + 8) + 8))(v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Buffer<A>.Inner<A1>()
{
}

unsigned char *storeEnumTagSinglePayload for Publishers.PrefetchStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18C0A508CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Publishers.BufferingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for Publishers.BufferingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for Publishers.BufferingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.BufferingStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Publishers.BufferingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for Publishers.BufferingStrategy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Buffer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
    unint64_t v12 = ((unint64_t)v4 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v13 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
      return v4;
    }
    uint64_t v14 = *(void *)(v13 + 8);
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = v14;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = (void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (unint64_t *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *v12;
  if (*v11 < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v12[1];
      void *v11 = v13;
      v11[1] = v15;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  if (v13 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v14 = v12[1];
  void *v11 = v13;
  v11[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (uint64_t *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *v12;
  if ((unint64_t)*v12 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = v12[1];
    *(void *)unint64_t v11 = v13;
    *(void *)(v11 + 8) = v14;
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Buffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = (void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (unint64_t *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *v12;
  if (*v11 < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      unint64_t v15 = v12[1];
      void *v11 = v13;
      v11[1] = v15;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  if (v13 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v14 = v12[1];
  void *v11 = v13;
  v11[1] = v14;
  swift_release();
  return a1;
}

void Publishers.Buffer.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  os_unfair_lock_t v20 = *v1;
  uint64_t v21 = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v19 = (uint64_t)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(v1[2]);
  unsigned int v22 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18C0BBFD0;
  *(void *)(v7 + 32) = 0x7365756C6176;
  *(void *)(v7 + 40) = 0xE600000000000000;
  uint64_t v8 = (uint64_t *)((char *)v1 + *(void *)&(*v1)[44]._os_unfair_lock_opaque);
  swift_beginAccess();
  uint64_t v9 = *v8;
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Array();
  *(void *)(v7 + 48) = v9;
  *(void *)(v7 + 72) = v10;
  *(void *)(v7 + 80) = 0x6574617473;
  *(void *)(v7 + 88) = 0xE500000000000000;
  uint64_t v11 = (uint64_t)v1 + *(void *)&(*v1)[40]._os_unfair_lock_opaque;
  swift_beginAccess();
  *(void *)(v7 + 120) = &type metadata for SubscriptionStatus;
  uint64_t v12 = swift_allocObject();
  *(void *)(v7 + 96) = v12;
  outlined init with copy of SubscriptionStatus(v11, v12 + 16);
  *(void *)(v7 + 128) = 0xD000000000000010;
  *(void *)(v7 + 136) = 0x800000018C0C4A10;
  os_unfair_lock_t v13 = *v1;
  *(void *)(v7 + 144) = *(os_unfair_lock_t *)((char *)v1 + *(void *)&(*v1)[42]._os_unfair_lock_opaque);
  *(void *)(v7 + 168) = &type metadata for Subscribers.Demand;
  *(void *)(v7 + 176) = 0x6C616E696D726574;
  *(void *)(v7 + 184) = 0xE800000000000000;
  unint64_t v14 = (char *)v1 + *(void *)&v13[48]._os_unfair_lock_opaque;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v15 = type metadata accessor for Optional();
  *(void *)(v7 + 216) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 192));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, v14, v15);
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 1, 1, v17);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v19);
  swift_retain();
  swift_bridgeObjectRetain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v1[2]);
}

void Publishers.Buffer.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x726566667542;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Buffer<A>.Inner<A1>()
{
  return 0x726566667542;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Buffer<A>.Inner<A1>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Buffer<A>.Inner<A1>(void *a1@<X8>)
{
}

unint64_t outlined consume of Publishers.BufferingStrategy<A.Failure><A><A1>(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_18C0A5B88()
{
  if (*(unsigned __int8 *)(v0 + 56) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t Publishers.Sequence.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Sequence.Inner.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 104);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - v6;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 200)));
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v7, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_6:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  if (!*((void *)&v13 + 1))
  {
LABEL_7:
    outlined destroy of CustomStringConvertible?((uint64_t)&v12);
    uint64_t v9 = 0x65636E6575716553;
    goto LABEL_8;
  }
  outlined init with take of Subscription(&v12, (uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
LABEL_8:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 200)));
  return v9;
}

void Publishers.Sequence.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  v20[1] = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + 104);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)v20 - v12;
  os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(v2 + 200)));
  uint64_t v23 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18C0BA630;
  *(void *)(v14 + 32) = 0x65636E6575716573;
  *(void *)(v14 + 40) = 0xE800000000000000;
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 152);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
  uint64_t v16 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v9) == 1)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
    swift_retain();
    v17(v13, v10);
    *(void *)(v14 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    *(void *)(v14 + 48) = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v22 = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v13, v9);
    outlined init with take of Any(v21, (_OWORD *)(v14 + 48));
    swift_retain();
  }
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v1 + *(void *)(*v1 + 200)));
}

uint64_t Publishers.Sequence.Inner.playgroundDescription.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Publishers.Sequence.Inner.description.getter();
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>()
{
  return Publishers.Sequence.Inner.description.getter();
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>@<X0>(uint64_t *a1@<X8>)
{
  return Publishers.Sequence.Inner.playgroundDescription.getter(a1);
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Sequence<A, B>.Inner<A1, B1, C1>()
{
}

uint64_t Publishers.Sequence<>.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence<>.min(by:)(a1, a2, a3, MEMORY[0x1E4FBB260], a4);
}

uint64_t Publishers.Sequence<>.max(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence<>.min(by:)(a1, a2, a3, MEMORY[0x1E4FBB258], a4);
}

uint64_t Publishers.Sequence<>.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence<>.min(by:)(a1, a2, a3, MEMORY[0x1E4FBB268], a4);
}

uint64_t Publishers.Sequence<>.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v16 - v13;
  a4(a1, a2, v10, v9);
  Optional.publisher.getter(v11, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t Publishers.Sequence.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.allSatisfy(_:)(a1, a2, a3, MEMORY[0x1E4FBB250], a4);
}

uint64_t Publishers.Sequence.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.tryAllSatisfy(_:)(a1, a2, a3, MEMORY[0x1E4FBB250], a4);
}

uint64_t Publishers.Sequence.collect()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  uint64_t v9 = type metadata accessor for Result();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v14 - v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  uint64_t *v12 = Array.init<A>(_:)();
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v9, a2);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Publishers.Sequence.compactMap<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = Sequence.compactMap<A>(_:)();
  uint64_t v2 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v2 - 8) + 32))(a1, &v4, v2);
}

uint64_t Publishers.Sequence.contains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.allSatisfy(_:)(a1, a2, a3, MEMORY[0x1E4FBB288], a4);
}

uint64_t Publishers.Sequence.allSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Result();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v15 - v12;
  unsigned char *v13 = a4(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 32)) & 1;
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v10, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Publishers.Sequence.tryContains(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.tryAllSatisfy(_:)(a1, a2, a3, MEMORY[0x1E4FBB288], a4);
}

uint64_t Publishers.Sequence.tryAllSatisfy(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = a4(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 32));
  *(void *)a5 = result & 1;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

uint64_t Publishers.Sequence.drop(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v13[0] = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DropWhileSequence();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, v4);
  Sequence.drop(while:)();
  swift_getWitnessTable();
  return (*(uint64_t (**)(void, char *, uint64_t))(v9 + 32))(v13[0], v11, v8);
}

uint64_t Publishers.Sequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Sequence = type metadata accessor for DropFirstSequence();
  uint64_t v10 = *(void *)(Sequence - 8);
  MEMORY[0x1F4188790](Sequence);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  Sequence.dropFirst(_:)();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, Sequence);
}

uint64_t Publishers.Sequence.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.filter(_:)(a1, a2, a3, MEMORY[0x1E4FBB270], a4);
}

uint64_t Publishers.Sequence.ignoreOutput()@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();

  return Empty.init(completeImmediately:)(1, a1);
}

uint64_t Publishers.Sequence.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, v5, v11);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v21 = v11;
  uint64_t v22 = v15;
  uint64_t v23 = a4;
  long long v24 = *(_OWORD *)(a3 + 32);
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1), (uint64_t)v20, v11, a4, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v16);
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v27 = v17;
  uint64_t v18 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, &v27, v18);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  long long v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  os_unfair_lock_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  unsigned int v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v26);
  int v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = Array.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  long long v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    unint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        unsigned int v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  unsigned int v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  os_unfair_lock_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    unsigned int v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    unsigned int v39 = v41;
    unsigned int v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t Publishers.Sequence.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PrefixSequence();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  Sequence.prefix(_:)();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
}

uint64_t Publishers.Sequence.prefix(while:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Publishers.Sequence.filter(_:)(a1, a2, a3, MEMORY[0x1E4FBB278], a4);
}

uint64_t Publishers.Sequence.filter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 + 16);
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v11);
  v16[0] = a4(a1, a2, v11, *(void *)(a3 + 32));
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v14 - 8) + 32))(a5, v16, v14);
}

uint64_t Publishers.Sequence.reduce<A>(_:_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  Sequence.reduce<A>(_:_:)();
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence.tryReduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v20 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v13 = type metadata accessor for Result();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - v15;
  long long v17 = *(_OWORD *)(a4 + 32);
  long long v21 = *(_OWORD *)(a4 + 16);
  uint64_t v22 = a5;
  long long v23 = v17;
  uint64_t v24 = v7;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(unsigned char *))partial apply for closure #1 in Publishers.Sequence.tryReduce<A>(_:_:), (uint64_t)&v19 - v15);
  Result.publisher.getter(v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t Publishers.Sequence.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v18 = v9;
  uint64_t v19 = v13;
  uint64_t v20 = a3;
  long long v17 = *(_OWORD *)(a2 + 32);
  long long v21 = v17;
  uint64_t v22 = a1;
  type metadata accessor for Optional();
  uint64_t v14 = Sequence.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v23 = v14;
  uint64_t v15 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 32))(a4, &v23, v15);
}

uint64_t closure #1 in Publishers.Sequence.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, char *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(a4, a2, a3);
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v16(v15, v12, a3);
    v16(a4, v15, a3);
  }
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, a3);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a4, 0, 1, v8);
}

uint64_t Publishers.Sequence.scan<A>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v34 = a6;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v38 = *(void *)(a4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v39 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v46 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v46);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void *)(a5 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v33 - v24;
  uint64_t v48 = static Array._allocateUninitialized(_:)();
  uint64_t v35 = v20;
  uint64_t v26 = v41;
  unsigned int v40 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v41 = v20 + 16;
  v40(v25, v26, a5);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v16, v44, v7);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v44 = v19;
  uint64_t v39 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v28 = v45;
  unsigned int v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  uint64_t v38 = v45 + 48;
  if (v37(v14, 1, AssociatedTypeWitness) != 1)
  {
    unsigned int v36 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v29 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v45 = v28 + 32;
    do
    {
      v36(v10, v14, AssociatedTypeWitness);
      v42(v25, v10);
      (*v29)(v25, a5);
      (*v30)(v25, v23, a5);
      v40(v23, (uint64_t)v25, a5);
      type metadata accessor for Array();
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v37(v14, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, a5);
  uint64_t v47 = v48;
  uint64_t v31 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 32))(v34, &v47, v31);
}

uint64_t Publishers.Sequence<>.removeDuplicates()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v48 = a3;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v66 = *(void *)(a1 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v57 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v51 = (char *)&v47 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v63 = (char *)&v47 - v11;
  uint64_t v12 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v65 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v65);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v47 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v47 - v24;
  uint64_t v69 = static Array._allocateUninitialized(_:)();
  os_unfair_lock_t v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v56 = v5 + 56;
  v55(v25, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v67, v3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v66 = v15;
  uint64_t v67 = v17;
  uint64_t v27 = v20;
  uint64_t v64 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v28 = v5;
  uint64_t v29 = v65;
  uint64_t v31 = v5 + 48;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v30(v23, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v34 = v28 + 32;
    long long v59 = (void (**)(char *, char *, uint64_t))(v49 + 16);
    uint64_t v60 = v35;
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v34 - 16);
    uint64_t v54 = (void (**)(char *, uint64_t))(v49 + 8);
    unsigned int v36 = (void (**)(char *, uint64_t))(v34 - 24);
    uint64_t v61 = v31;
    uint64_t v62 = v34;
    uint64_t v50 = v27;
    uint64_t v58 = v23;
    unsigned int v37 = v63;
    do
    {
      unsigned int v40 = v23;
      uint64_t v41 = v60;
      v60(v37, v40, AssociatedTypeWitness);
      (*v59)(v27, v25, v29);
      if (v30(v27, 1, AssociatedTypeWitness) == 1)
      {
        uint64_t v38 = *v54;
        (*v54)(v25, v29);
        v38(v27, v29);
        uint64_t v39 = *v53;
        (*v53)(v25, v37, AssociatedTypeWitness);
        v55(v25, 0, 1, AssociatedTypeWitness);
        v39(v57, v37, AssociatedTypeWitness);
        type metadata accessor for Array();
        uint64_t v29 = v65;
        Array.append(_:)();
        (*v36)(v37, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v42 = v51;
        v41(v51, v27, AssociatedTypeWitness);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v43 = *v36;
          (*v36)(v42, AssociatedTypeWitness);
          v43(v37, AssociatedTypeWitness);
          uint64_t v29 = v65;
        }
        else
        {
          uint64_t v44 = v65;
          (*v54)(v25, v65);
          uint64_t v45 = *v53;
          (*v53)(v25, v37, AssociatedTypeWitness);
          v55(v25, 0, 1, AssociatedTypeWitness);
          v45(v57, v37, AssociatedTypeWitness);
          type metadata accessor for Array();
          uint64_t v29 = v44;
          uint64_t v27 = v50;
          Array.append(_:)();
          uint64_t v46 = *v36;
          (*v36)(v42, AssociatedTypeWitness);
          v46(v37, AssociatedTypeWitness);
        }
      }
      uint64_t v23 = v58;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v30(v23, 1, AssociatedTypeWitness) != 1);
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v67, v66);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v29);
  uint64_t v68 = v69;
  uint64_t v32 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 32))(v48, &v68, v32);
}

uint64_t Publishers.Sequence<>.contains(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  *uint64_t v5 = Sequence<>.contains(_:)() & 1;
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v2, a1);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence<>.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Publishers.Sequence<>.min()(a1, a2, MEMORY[0x1E4FBB298], a3);
}

uint64_t Publishers.Sequence<>.max()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Publishers.Sequence<>.min()(a1, a2, MEMORY[0x1E4FBB290], a3);
}

uint64_t Publishers.Sequence<>.min()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  a3(v8, v7, a2);
  Optional.publisher.getter(v9, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Publishers.Sequence<>.first()@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  Collection.first.getter();
  Optional.publisher.getter(v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence<>.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - v4;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  dispatch thunk of Collection.indices.getter();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v10 = Sequence<>.contains(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *))(v12 + 16))(v5);
    v11(v17, 0);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v5, v13, 1, AssociatedTypeWitness);
  return Optional.Publisher.init(_:)((uint64_t)v5, v16);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(unsigned char *, void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned char v17[32];

  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - v4;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  dispatch thunk of Collection.indices.getter();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v10 = Sequence<>.contains(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *))(v12 + 16))(v5);
    v11(v17, 0);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v13 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v5, v13, 1, AssociatedTypeWitness);
  return Optional.Publisher.init(_:)((uint64_t)v5, v16);
}

uint64_t Publishers.Sequence<>.count()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v7 - v4);
  *uint64_t v5 = dispatch thunk of Collection.count.getter();
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v2, a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;

  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v7 - v4);
  *uint64_t v5 = dispatch thunk of Collection.count.getter();
  swift_storeEnumTagMultiPayload();
  Result.publisher.getter(v2, a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence<>.output(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[1] = a1;
  uint64_t v16 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  v15[0] = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v15 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Range();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  Range.relative<A>(to:)();
  dispatch thunk of Collection.subscript.getter();
  (*(void (**)(void, char *, uint64_t))(v3 + 16))(v15[0], v7, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = Array.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = v12;
  uint64_t v13 = type metadata accessor for Array();
  swift_getWitnessTable();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 32))(v16, &v17, v13);
}

uint64_t Publishers.Sequence<>.last()@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  BidirectionalCollection.last.getter();
  Optional.publisher.getter(v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence<>.last(where:)@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - v4;
  BidirectionalCollection.last(where:)();
  Optional.publisher.getter(v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Publishers.Sequence<>.output(in:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v84 = a1;
  uint64_t v90 = a4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 8) + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v88 = (char *)&v73 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v83 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v96 = (char *)&v73 - v13;
  uint64_t v14 = *(void **)(v8 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v85 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v94 = (char *)&v73 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v73 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v73 - v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = type metadata accessor for Range();
  uint64_t v97 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v95 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v98 = (char *)&v73 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v86 = (char *)&v73 - v30;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v87 = v4;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v82 = AssociatedConformanceWitness;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v80 = v6;
    uint64_t v81 = v5;
    uint64_t v92 = v25;
    uint64_t v93 = TupleTypeMetadata2;
    uint64_t v32 = v96;
    uint64_t v33 = &v96[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v34 = (void (*)(char *, char *, uint64_t))v14[4];
    v34(v96, v23, v8);
    uint64_t v35 = v33;
    uint64_t v79 = v33;
    v34(v33, v21, v8);
    unsigned int v36 = v83;
    uint64_t v78 = &v83[*(int *)(TupleTypeMetadata2 + 48)];
    unsigned int v37 = v78;
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v14[2];
    v38(v83, v32, v8);
    uint64_t v91 = v38;
    uint64_t v73 = v14 + 2;
    v38(v37, v35, v8);
    uint64_t v39 = v95;
    v34(v95, v36, v8);
    unsigned int v40 = (char *)v14[1];
    ((void (*)(char *, uint64_t))v40)(v78, v8);
    uint64_t v41 = &v36[*(int *)(v93 + 48)];
    v34(v36, v32, v8);
    v34(v41, v79, v8);
    uint64_t v42 = v92;
    uint64_t v43 = &v39[*(int *)(v92 + 36)];
    int64_t v75 = v14 + 4;
    uint64_t v74 = v34;
    v34(v43, v41, v8);
    uint64_t v79 = (char *)(v14 + 1);
    uint64_t v78 = v40;
    ((void (*)(char *, uint64_t))v40)(v36, v8);
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    uint64_t v77 = v97 + 32;
    uint64_t v76 = v44;
    v44(v98, v39, v42);
    uint64_t v45 = v84;
    uint64_t v46 = v42;
    if (dispatch thunk of static Comparable.> infix(_:_:)())
    {
      uint64_t v47 = v98;
      v91(v94, v98, v8);
      uint64_t v48 = v93;
    }
    else
    {
      uint64_t v49 = &v98[*(int *)(v42 + 36)];
      if (dispatch thunk of static Comparable.< infix(_:_:)())
      {
        uint64_t v50 = v94;
        uint64_t v51 = v49;
      }
      else
      {
        uint64_t v50 = v94;
        uint64_t v51 = v45;
      }
      v91(v50, v51, v8);
      uint64_t v48 = v93;
      uint64_t v47 = v98;
    }
    uint64_t v52 = *(int *)(v46 + 36);
    uint64_t v53 = &v47[v52];
    uint64_t v54 = &v45[v52];
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      os_unfair_lock_t v55 = v85;
      uint64_t v56 = v85;
      uint64_t v57 = v53;
    }
    else if (dispatch thunk of static Comparable.> infix(_:_:)())
    {
      os_unfair_lock_t v55 = v85;
      uint64_t v56 = v85;
      uint64_t v57 = v47;
    }
    else
    {
      os_unfair_lock_t v55 = v85;
      uint64_t v56 = v85;
      uint64_t v57 = v54;
    }
    uint64_t v58 = v91;
    v91(v56, v57, v8);
    long long v59 = v96;
    uint64_t v60 = &v96[*(int *)(v48 + 48)];
    uint64_t v61 = v48;
    uint64_t v62 = v74;
    v74(v96, v94, v8);
    v62(v60, v55, v8);
    uint64_t v63 = v59;
    uint64_t v64 = &v36[*(int *)(v61 + 48)];
    v58(v36, v63, v8);
    v58(v64, v60, v8);
    uint64_t v65 = v95;
    v62(v95, v36, v8);
    uint64_t v66 = v78;
    ((void (*)(char *, uint64_t))v78)(v64, v8);
    uint64_t v67 = &v36[*(int *)(v61 + 48)];
    v62(v36, v63, v8);
    v62(v67, v60, v8);
    uint64_t v68 = v92;
    v62(&v65[*(int *)(v92 + 36)], v67, v8);
    ((void (*)(char *, uint64_t))v66)(v36, v8);
    uint64_t v69 = v86;
    v76(v86, v65, v68);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v97 + 8);
    v70(v98, v68);
    dispatch thunk of Collection.subscript.getter();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v71 = Array.init<A>(_:)();
    v70(v69, v68);
    uint64_t v99 = v71;
    uint64_t v72 = type metadata accessor for Array();
    swift_getWitnessTable();
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v72 - 8) + 32))(v90, &v99, v72);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Publishers.Sequence<>.count()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  *a1 = result;
  return result;
}

uint64_t Publishers.Sequence<>.prepend(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = v6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, v4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, v4);
}

uint64_t Publishers.Sequence<>.prepend<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, v4);
}

uint64_t Publishers.Sequence<>.append(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = v6;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_getWitnessTable();
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, v4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, v4);
}

uint64_t Publishers.Sequence<>.append<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static RangeReplaceableCollection.+ infix<A>(_:_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, v4);
}

uint64_t static Publishers.Sequence<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Sequence<A, B>()
{
  return static Publishers.Sequence<>.== infix(_:_:)();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1)()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t partial apply for closure #1 in Publishers.Sequence.tryReduce<A>(_:_:)(void *a1)
{
  uint64_t result = Sequence.reduce<A>(_:_:)();
  if (v1) {
    *a1 = v1;
  }
  return result;
}

uint64_t partial apply for closure #1 in Publishers.Sequence.replaceNil<A>(with:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in Publishers.Sequence.replaceNil<A>(with:)(a1, *(void *)(v2 + 56), *(void *)(v2 + 32), a2);
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Publisher.zip<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v35 = a8;
  uint64_t v39 = a6;
  uint64_t v40 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v41 = a9;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  uint64_t v45 = v23;
  uint64_t v24 = type metadata accessor for Publishers.Zip();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v34 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v36, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v37, a5);
  uint64_t v28 = v35;
  Publishers.Zip.init(_:_:)((uint64_t)v19, (uint64_t)v15, a4, a5, (uint64_t)v27);
  uint64_t v29 = (void *)swift_allocObject();
  void v29[2] = a4;
  void v29[3] = a5;
  uint64_t v30 = v38;
  uint64_t v31 = v39;
  void v29[4] = v39;
  void v29[5] = a7;
  v29[6] = v28;
  v29[7] = v30;
  v29[8] = v40;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output) -> (@out B1), (uint64_t)v29, v24, v31, WitnessTable, v41);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28[4];

  v28[1] = a8;
  v28[2] = a6;
  uint64_t v28[3] = a7;
  v28[0] = a9;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a2, a5);
  return Publishers.Zip3.init(_:_:_:)((uint64_t)v24, (uint64_t)v22, (uint64_t)v17, a3, a4, a5, v28[0]);
}

uint64_t sub_18C0AAF90()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publisher.zip<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v51 = a1;
  uint64_t v55 = a8;
  uint64_t v56 = a4;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v57 = a9;
  uint64_t v46 = a12;
  uint64_t v49 = *(void *)(a7 - 8);
  uint64_t v47 = a10;
  uint64_t v48 = a11;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v27;
  uint64_t v59 = v28;
  uint64_t v60 = v29;
  uint64_t v61 = v30;
  uint64_t v62 = v32;
  uint64_t v63 = v31;
  uint64_t v33 = type metadata accessor for Publishers.Zip3();
  uint64_t v52 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v45 - v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v50, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v51, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v17, v53, a7);
  uint64_t v36 = v46;
  uint64_t v37 = (uint64_t)v22;
  uint64_t v39 = v47;
  uint64_t v38 = v48;
  Publishers.Zip3.init(_:_:_:)((uint64_t)v26, v37, (uint64_t)v17, a5, a6, a7, (uint64_t)v35);
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = a5;
  void v40[3] = a6;
  uint64_t v41 = v54;
  uint64_t v42 = v55;
  v40[4] = a7;
  v40[5] = v42;
  v40[6] = v39;
  v40[7] = v38;
  v40[8] = v36;
  v40[9] = v41;
  v40[10] = v56;
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output) -> (@out C1), (uint64_t)v40, v33, v42, WitnessTable, v57);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v35, v33);
}

uint64_t sub_18C0AB564()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publisher.zip<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11)
{
  uint64_t v42 = a9;
  uint64_t v43 = a8;
  uint64_t v39 = a7;
  uint64_t v40 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  long long v41 = a10;
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v38 = a11;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v15);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v20);
  uint64_t v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v35 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v36, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v37, a6);
  uint64_t v33 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v40, v39);
  return Publishers.Zip4.init(_:_:_:_:)((uint64_t)v29, (uint64_t)v27, (uint64_t)v22, (uint64_t)v17, a4, a5, a6, v33, v42);
}

uint64_t Publishers.Zip4.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9, a1, a5);
  uint64_t v16 = (int *)type metadata accessor for Publishers.Zip4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a9 + v16[21], a2, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v16[22], a3, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v16[23], a4, a8);
}

uint64_t type metadata accessor for Publishers.Zip4()
{
  return swift_getGenericMetadata();
}

uint64_t Publisher.zip<A, B, C, D>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v74 = a1;
  uint64_t v78 = a4;
  uint64_t v79 = a5;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v80 = a9;
  uint64_t v64 = a15;
  uint64_t v65 = a14;
  uint64_t v77 = a11;
  uint64_t v70 = *(void *)(a10 - 8);
  uint64_t v66 = a13;
  uint64_t v67 = a12;
  uint64_t v18 = MEMORY[0x1F4188790](a1);
  uint64_t v71 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v68 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22);
  uint64_t v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v28;
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = v33;
  uint64_t v82 = v34;
  uint64_t v62 = v33;
  uint64_t v61 = v34;
  uint64_t v83 = v35;
  uint64_t v84 = a10;
  uint64_t v85 = v37;
  uint64_t v86 = v36;
  uint64_t v87 = v39;
  uint64_t v88 = v38;
  uint64_t v69 = type metadata accessor for Publishers.Zip4();
  uint64_t v72 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  long long v41 = (char *)&v60 - v40;
  uint64_t v63 = (char *)&v60 - v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v73, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v74, a7);
  uint64_t v42 = v68;
  uint64_t v43 = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v68, v75, a8);
  uint64_t v44 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v71, v76, a10);
  uint64_t v45 = v64;
  uint64_t v46 = v65;
  uint64_t v47 = v66;
  uint64_t v48 = v67;
  uint64_t v49 = (uint64_t)v42;
  uint64_t v50 = (uint64_t)v44;
  uint64_t v51 = v62;
  uint64_t v52 = v61;
  Publishers.Zip4.init(_:_:_:_:)((uint64_t)v32, (uint64_t)v60, v49, v50, v62, v61, v43, a10, (uint64_t)v41);
  uint64_t v53 = (void *)swift_allocObject();
  v53[2] = v51;
  v53[3] = v52;
  void v53[4] = v43;
  v53[5] = a10;
  uint64_t v55 = v77;
  uint64_t v54 = v78;
  v53[6] = v77;
  v53[7] = v48;
  v53[8] = v47;
  v53[9] = v46;
  v53[10] = v45;
  v53[11] = v54;
  v53[12] = v79;
  uint64_t v56 = v69;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = v63;
  Publisher.map<A>(_:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output, @in_guaranteed A1.Publisher.Output, @in_guaranteed B1.Publisher.Output, @in_guaranteed C1.Publisher.Output) -> (@out D1), (uint64_t)v53, v56, v55, WitnessTable, v80);
  swift_retain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v58, v56);
}

uint64_t sub_18C0ABE9C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publishers.Zip.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t Publishers.Zip3.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t Publishers.Zip3.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 72));
}

uint64_t Publishers.Zip4.b.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t Publishers.Zip4.c.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 88));
}

uint64_t Publishers.Zip4.d.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 40) - 8) + 16))(a2, v2 + *(int *)(a1 + 92));
}

uint64_t Publishers.Zip4.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a2[2];
  uint64_t v26 = a2[6];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = a2[3];
  uint64_t v29 = a2[7];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v30 = a2[4];
  uint64_t v31 = a2[8];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v32 = a2[5];
  uint64_t v33 = a2[9];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v8;
  uint64_t v23 = a4;
  uint64_t v43 = v9;
  uint64_t v44 = v10;
  uint64_t v27 = v10;
  uint64_t v45 = v11;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  type metadata accessor for Zip4Inner();
  swift_allocObject();
  uint64_t v12 = specialized AbstractZip.init(downstream:upstreamCount:)(a1, 4uLL);
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(0, v12, &v38);
  uint64_t v35 = v38;
  uint64_t v36 = v39;
  uint64_t v37 = v40;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v44 = v10;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v41 = TupleTypeMetadata;
  uint64_t v42 = v11;
  uint64_t v43 = a3;
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v45 = a4;
  uint64_t v14 = type metadata accessor for AbstractZip.Side();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v25, v14, v26, WitnessTable);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(1, v12, &v38);
  uint64_t v35 = v38;
  uint64_t v36 = v39;
  uint64_t v37 = v40;
  uint64_t v41 = TupleTypeMetadata;
  uint64_t v42 = v11;
  uint64_t v43 = a3;
  uint64_t v44 = v8;
  uint64_t v45 = v23;
  uint64_t v16 = type metadata accessor for AbstractZip.Side();
  uint64_t v17 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v28, v16, v29, v17);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(2, v12, &v38);
  uint64_t v35 = v38;
  uint64_t v36 = v39;
  uint64_t v37 = v40;
  uint64_t v41 = TupleTypeMetadata;
  uint64_t v42 = v11;
  uint64_t v43 = a3;
  uint64_t v44 = v9;
  uint64_t v45 = v23;
  uint64_t v18 = type metadata accessor for AbstractZip.Side();
  uint64_t v19 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v30, v18, v31, v19);
  swift_release();
  swift_retain();
  Publishers._Merged.Side.init(index:merger:)(3, v12, &v38);
  uint64_t v35 = v38;
  uint64_t v36 = v39;
  uint64_t v37 = v40;
  uint64_t v41 = TupleTypeMetadata;
  uint64_t v42 = v11;
  uint64_t v43 = a3;
  uint64_t v44 = v27;
  uint64_t v45 = v23;
  uint64_t v20 = type metadata accessor for AbstractZip.Side();
  uint64_t v21 = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v35, v32, v20, v33, v21);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.Zip4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return Publishers.Zip4.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.Zip<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[1] = a8;
  void v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a7;
  uint64_t v10 = type metadata accessor for Publishers.Zip();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v22 - v15;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  if (v17) {
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v19 = 0;
  }
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  return v19 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Zip<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Zip<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

uint64_t static Publishers.Zip3<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  v31[1] = a4;
  _OWORD v31[2] = a5;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a8;
  uint64_t v40 = a10;
  uint64_t v12 = type metadata accessor for Publishers.Zip3();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v32 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v31 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)v31 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v31 - v22;
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v33 = a1;
  v25(v23, a1, v12);
  uint64_t v34 = a2;
  v25(v21, a2, v12);
  if (v24) {
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v26 = 0;
  }
  uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v21, v12);
  v27(v23, v12);
  v25(v18, v33, v12);
  uint64_t v28 = v32;
  v25(v32, v34, v12);
  if (v26) {
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v29 = 0;
  }
  v27(v28, v12);
  v27(v18, v12);
  return v29 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Zip3<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Zip3<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), a3[6], *(void *)(a4 - 16), a3[7]) & 1;
}

uint64_t static Publishers.Zip4<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  v43[2] = a4;
  v43[3] = a5;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  v43[1] = a6;
  uint64_t v53 = a7;
  uint64_t v54 = a9;
  uint64_t v55 = a11;
  uint64_t v56 = a13;
  uint64_t v15 = type metadata accessor for Publishers.Zip4();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v46 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v45 = (char *)v43 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v43 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v44 = (char *)v43 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v43 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)v43 - v29;
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v47 = a1;
  v32(v30, a1, v15);
  uint64_t v48 = a2;
  v32(v28, a2, v15);
  if (v31) {
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v33 = 0;
  }
  uint64_t v34 = v44;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v16 + 8);
  v35(v28, v15);
  v35(v30, v15);
  uint64_t v36 = v47;
  v32(v34, v47, v15);
  uint64_t v37 = v48;
  v32(v23, v48, v15);
  if ((v33 & 1) == 0)
  {
    v35(v23, v15);
    v35(v34, v15);
    uint64_t v39 = v45;
    v32(v45, v36, v15);
    uint64_t v40 = v46;
    v32(v46, v37, v15);
    goto LABEL_8;
  }
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v35(v23, v15);
  v35(v34, v15);
  uint64_t v39 = v45;
  v32(v45, v36, v15);
  uint64_t v40 = v46;
  v32(v46, v37, v15);
  if ((v38 & 1) == 0)
  {
LABEL_8:
    char v41 = 0;
    goto LABEL_9;
  }
  char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
LABEL_9:
  v35(v40, v15);
  v35(v39, v15);
  return v41 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Zip4<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static Publishers.Zip4<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8), a3[7], *(void *)(a4 - 16), a3[8], *(void *)(a4 - 24), a3[9]) & 1;
}

uint64_t AbstractZip.Side.customMirror.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v20 = *v1;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18C0BA630;
  uint64_t v12 = (void *)(v11 + 48);
  *(void *)(v11 + 32) = 0xD000000000000012;
  *(void *)(v11 + 40) = 0x800000018C0C48F0;
  *(void *)(v11 + 72) = &type metadata for CombineIdentifier;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 48);
  long long v17 = *(_OWORD *)(a1 + 16);
  uint64_t v18 = v13;
  uint64_t v19 = v14;
  type metadata accessor for AbstractZip();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v12);
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void AbstractZip.Side.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 7367002;
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AbstractZip<A, B, C>.Side<A1>()
{
  return 7367002;
}

uint64_t AbstractZip.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v0;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  long long v9 = *(_OWORD *)(v1 + 96);
  v11[0] = *(_OWORD *)(v1 + 80);
  v11[1] = v9;
  type metadata accessor for AbstractZip();
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t *AbstractZip.deinit()
{
  uint64_t v1 = *v0;
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 176)), -1, -1);
  MEMORY[0x18C13C4B0](*(uint64_t *)((char *)v0 + *(void *)(*v0 + 184)), -1, -1);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 96) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112), *(void *)(v1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 208);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Subscribers.Completion();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t AbstractZip.__deallocating_deinit()
{
  uint64_t v0 = AbstractZip.deinit();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

void AbstractZip.convert(values:)()
{
}

void AbstractZip.lockedSendCompletion(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t v44 = *(void *)(*v1 + 104);
  uint64_t v43 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Subscribers.Completion();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v40 = *(uint64_t *)((char *)v2 + *(void *)(v4 + 168));
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 120)) = (uint64_t)specialized Array.init(repeating:count:)(MEMORY[0x1E4FBC860], v40);
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t *)((char *)v2 + *(void *)(*v2 + 128));
  swift_beginAccess();
  uint64_t v39 = v14;
  uint64_t v15 = *v14;
  uint64_t v41 = *(void *)(*v2 + 192);
  *((unsigned char *)v2 + v41) = 1;
  uint64_t v16 = *(void *)(v6 - 8);
  long long v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v45 = a1;
  v17(v13, a1, v6);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v46 = v6;
  uint64_t v38 = v16 + 56;
  uint64_t v37 = v18;
  v18(v13, 0, 1, v6);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v42 = v13;
  v19(v11, v13, v7);
  uint64_t v20 = (uint64_t)v2 + *(void *)(*v2 + 208);
  swift_beginAccess();
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 40);
  swift_bridgeObjectRetain();
  uint64_t v36 = v20;
  uint64_t v48 = v7;
  uint64_t v47 = v8 + 40;
  uint64_t v35 = v21;
  v21(v20, v11, v7);
  swift_endAccess();
  uint64_t v34 = *(void *)(*v2 + 176);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v34));
  unint64_t v22 = 0;
  unint64_t v23 = *(void *)(v15 + 16);
  uint64_t v24 = *(void *)(*v2 + 160);
  uint64_t v52 = v15;
  uint64_t v50 = v15 + 32;
  uint64_t v49 = (uint64_t)v59 + 8;
  long long v51 = xmmword_18C0BA640;
  if (v23) {
    goto LABEL_5;
  }
LABEL_4:
  memset(v59, 0, 32);
  unint64_t v22 = v23;
  v59[2] = v51;
  while (1)
  {
    outlined init with take of Subscription?((uint64_t)v59, (uint64_t)v60, &demangling cache variable for type metadata for (offset: Int, element: Subscription?)?);
    if (v61 == 1)
    {
      swift_bridgeObjectRelease();
      os_unfair_recursive_lock_lock_with_options();
      (*(void (**)(uint64_t, uint64_t))(v44 + 56))(v45, v43);
      os_unfair_recursive_lock_unlock();
      uint64_t v29 = v34;
      os_unfair_lock_lock(*(os_unfair_lock_t *)((char *)v2 + v34));
      uint64_t v61 = 0;
      memset(v60, 0, sizeof(v60));
      uint64_t v30 = specialized Array.init(repeating:count:)((uint64_t)v60, v40);
      uint64_t *v39 = v30;
      swift_bridgeObjectRelease();
      char v31 = v42;
      v37(v42, 1, 1, v46);
      uint64_t v32 = v36;
      swift_beginAccess();
      v35(v32, v31, v48);
      swift_endAccess();
      *((unsigned char *)v2 + v41) = 0;
      *(uint64_t *)((char *)v2 + *(void *)(*v2 + 200)) = 0;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)v2 + v29));
      return;
    }
    unint64_t v25 = v60[0];
    outlined init with take of Subscription?((uint64_t)&v60[1], (uint64_t)v59, &demangling cache variable for type metadata for Subscription?);
    if ((v25 & 0x8000000000000000) != 0) {
      break;
    }
    uint64_t v26 = *(uint64_t *)((char *)v2 + v24);
    if (v25 >= *(void *)(v26 + 16)) {
      goto LABEL_17;
    }
    if (*(unsigned char *)(v26 + v25 + 32) == 1)
    {
      outlined destroy of Subscription?((uint64_t)v59);
      if (v22 == v23) {
        goto LABEL_4;
      }
    }
    else
    {
      outlined init with copy of Subscription?((uint64_t)v59, (uint64_t)&v53);
      if (!v54)
      {
        outlined destroy of Subscription?((uint64_t)v59);
        swift_bridgeObjectRelease();
        outlined destroy of Subscription?((uint64_t)&v53);
        return;
      }
      outlined init with take of Subscription(&v53, (uint64_t)&v55);
      uint64_t v28 = v57;
      uint64_t v27 = v58;
      __swift_project_boxed_opaque_existential_1(&v55, v57);
      (*(void (**)(uint64_t))(*(void *)(v27 + 8) + 8))(v28);
      outlined destroy of Subscription?((uint64_t)v59);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      if (v22 == v23) {
        goto LABEL_4;
      }
    }
LABEL_5:
    if (v22 >= *(void *)(v52 + 16)) {
      goto LABEL_18;
    }
    outlined init with copy of Subscription?(v50 + 40 * v22, (uint64_t)v56);
    *(void *)&v59[0] = v22;
    outlined init with take of Subscription?((uint64_t)v56, v49, &demangling cache variable for type metadata for Subscription?);
    ++v22;
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
}

void AbstractZip.cancel()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + v1));
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  if (*(unsigned char *)(v0 + v2))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    uint64_t v4 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 128));
    swift_beginAccess();
    uint64_t v5 = *v4;
    *(unsigned char *)(v0 + v2) = 1;
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v6 = *(void *)(v0 + *(void *)(*(void *)v0 + 168));
    swift_bridgeObjectRetain();
    uint64_t *v4 = specialized Array.init(repeating:count:)((uint64_t)&v11, v6);
    swift_bridgeObjectRelease();
    *(void *)(v0 + *(void *)(*(void *)v0 + 120)) = specialized Array.init(repeating:count:)(MEMORY[0x1E4FBC860], v6);
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + v1));
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v8 = v5 + 32;
      do
      {
        outlined init with copy of Subscription?(v8, (uint64_t)&v11);
        uint64_t v10 = *((void *)&v12 + 1);
        if (*((void *)&v12 + 1))
        {
          uint64_t v9 = v13;
          __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
          (*(void (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
        }
        else
        {
          outlined destroy of Subscription?((uint64_t)&v11);
        }
        v8 += 40;
        --v7;
      }
      while (v7);
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AbstractZip<A, B, C>()
{
  return AbstractZip.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance AbstractZip<A, B, C>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance AbstractZip<A, B, C>()
{
}

uint64_t Zip2Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    outlined init with copy of Any(a3 + 32, (uint64_t)v7);
    uint64_t result = swift_dynamicCast();
    if (v3 != 1)
    {
      outlined init with copy of Any(a3 + 64, (uint64_t)&v6);
      return swift_dynamicCast();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t vtable thunk for AbstractZip.convert(values:) dispatching to Zip2Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);

  return Zip2Inner.convert(values:)(a2, v4, a1);
}

uint64_t Zip4Inner.convert(values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a5 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_7;
  }
  outlined init with copy of Any(a5 + 32, (uint64_t)v11);
  uint64_t result = swift_dynamicCast();
  if (v5 == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  outlined init with copy of Any(a5 + 64, (uint64_t)v10);
  uint64_t result = swift_dynamicCast();
  if (v5 < 3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  outlined init with copy of Any(a5 + 96, (uint64_t)v9);
  uint64_t result = swift_dynamicCast();
  if (v5 != 3)
  {
    outlined init with copy of Any(a5 + 128, (uint64_t)&v8);
    return swift_dynamicCast();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t vtable thunk for AbstractZip.convert(values:) dispatching to Zip4Inner.convert(values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return Zip4Inner.convert(values:)(a2, a2 + TupleTypeMetadata[12], a2 + TupleTypeMetadata[16], a2 + TupleTypeMetadata[20], a1);
}

uint64_t type metadata accessor for Zip4Inner()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.Zip(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for Publishers.Zip(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18C0AE3D0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          unint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Zip3(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            char v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for Publishers.Zip3(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x18C0AEA48);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      char v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.Zip4(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = *(void *)(a3[4] - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(unsigned int *)(v13 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(*(void *)(a3[4] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v21 = *(void *)(v13 + 64);
  if (v15 <= v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v13 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v23 = *(void *)(*(void *)(a3[2] - 8) + 64) + v16;
  int v24 = a2 - v22;
  if (a2 <= v22) {
    goto LABEL_30;
  }
  uint64_t v25 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v28 < 2)
    {
LABEL_30:
      if (v22)
      {
        if (v6 == v22)
        {
          uint64_t v32 = *(uint64_t (**)(void))(v5 + 48);
          return v32();
        }
        else
        {
          unint64_t v34 = ((unint64_t)a1 + v23) & ~v16;
          if (v8 == v22)
          {
            uint64_t v35 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v35(v34);
          }
          else
          {
            unint64_t v36 = (v34 + v17 + v18) & ~v18;
            if (v12 == v22)
            {
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
              uint64_t v38 = *(unsigned int *)(v11 + 84);
              uint64_t v39 = a3[4];
            }
            else
            {
              unint64_t v36 = (v36 + v19 + v20) & ~v20;
              uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
              uint64_t v38 = v15;
              uint64_t v39 = a3[5];
            }
            return v37(v36, v38, v39);
          }
        }
      }
      return 0;
    }
  }
  int v27 = *((unsigned __int8 *)a1 + v25);
  if (!*((unsigned char *)a1 + v25)) {
    goto LABEL_30;
  }
LABEL_20:
  int v29 = (v27 - 1) << v26;
  if (v25 > 3) {
    int v29 = 0;
  }
  if (v25)
  {
    if (v25 <= 3) {
      int v30 = ((v19 + v20 + ((v17 + v18 + (v23 & ~v16)) & ~v18)) & ~v20) + v21;
    }
    else {
      int v30 = 4;
    }
    switch(v30)
    {
      case 2:
        int v31 = *a1;
        break;
      case 3:
        int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)a1;
        break;
      default:
        int v31 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  return v22 + (v31 | v29) + 1;
}

void storeEnumTagSinglePayload for Publishers.Zip4(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  uint64_t v7 = a4[4];
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v7 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = a4[5];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = *(void *)(*(void *)(a4[3] - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  if (*(_DWORD *)(v16 + 84) <= v14) {
    unsigned int v23 = v14;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v24 = v17 + v18;
  size_t v25 = ((v21 + v22 + ((v19 + v20 + ((v17 + v18) & ~v18)) & ~v20)) & ~v22) + *(void *)(*(void *)(v15 - 8) + 64);
  BOOL v26 = a3 >= v23;
  unsigned int v27 = a3 - v23;
  if (v27 != 0 && v26)
  {
    if (v25 <= 3)
    {
      unsigned int v31 = ((v27 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
      if (HIWORD(v31))
      {
        int v28 = 4;
      }
      else if (v31 >= 0x100)
      {
        int v28 = 2;
      }
      else
      {
        int v28 = v31 > 1;
      }
    }
    else
    {
      int v28 = 1;
    }
  }
  else
  {
    int v28 = 0;
  }
  if (v23 < a2)
  {
    unsigned int v29 = ~v23 + a2;
    if (v25 < 4)
    {
      int v30 = (v29 >> (8 * v25)) + 1;
      if (v25)
      {
        int v32 = v29 & ~(-1 << (8 * v25));
        bzero(a1, v25);
        if (v25 == 3)
        {
          *(_WORD *)a1 = v32;
          a1[2] = BYTE2(v32);
        }
        else if (v25 == 2)
        {
          *(_WORD *)a1 = v32;
        }
        else
        {
          *a1 = v32;
        }
      }
    }
    else
    {
      bzero(a1, v25);
      *(_DWORD *)a1 = v29;
      int v30 = 1;
    }
    switch(v28)
    {
      case 1:
        a1[v25] = v30;
        return;
      case 2:
        *(_WORD *)&a1[v25] = v30;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v25] = v30;
        return;
      default:
        return;
    }
  }
  switch(v28)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x18C0AF290);
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        if (v8 == v23)
        {
          uint64_t v33 = *(void (**)(char *))(v6 + 56);
          unint64_t v34 = a1;
        }
        else
        {
          unint64_t v34 = (char *)((unint64_t)&a1[v24] & ~v18);
          if (v10 == v23)
          {
            uint64_t v33 = *(void (**)(char *))(v9 + 56);
          }
          else
          {
            unint64_t v34 = (char *)((unint64_t)&v34[v19 + v20] & ~v20);
            if (v13 == v23)
            {
              uint64_t v33 = *(void (**)(char *))(v12 + 56);
            }
            else
            {
              unint64_t v34 = (char *)((unint64_t)&v34[v21 + v22] & ~v22);
              uint64_t v33 = *(void (**)(char *))(v16 + 56);
            }
          }
        }
        v33(v34);
      }
      return;
  }
}

uint64_t type metadata completion function for Zip4Inner()
{
  return swift_initClassMetadata2();
}

unint64_t Publisher.output(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (result > 0x7FFFFFFFFFFFFFFDLL)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3, a2);
    return Publishers.Output.init(upstream:range:)((uint64_t)v10, a1, a1 + 1, a2, a3);
  }
  return result;
}

uint64_t Publishers.Output.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Output.range.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t Publishers.Output.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Output.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x74757074754FLL;
  a1[1] = 0xE600000000000000;
}

void Publishers.Output.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 144));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 120);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Output<A>.Inner<A1>()
{
  return 0x74757074754FLL;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Output<A>.Inner<A1>()
{
  return Publishers.Output.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Output<A>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Output<A>.Inner<A1>()
{
}

BOOL static Publishers.Output<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Publishers.Output();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  BOOL v17 = (v11 & 1) != 0
     && (uint64_t v13 = *(int *)(v4 + 36), v14 = &v10[v13], v15 = *(void *)&v10[v13], v16 = &v8[v13], v15 == *(void *)v16)
     && *((void *)v14 + 1) == *((void *)v16 + 1);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Output<A>(uint64_t a1, uint64_t a2)
{
  return static Publishers.Output<>.== infix(_:_:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Output(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for Publishers.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for Publishers.Output(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.Output(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0AFC2CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Output(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C0AFDECLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t Publishers.Catch.init(upstream:handler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Catch.init(upstream:handler:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for Publishers.Catch, a8);
}

uint64_t Publisher.tryCatch<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return Publisher.catch<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryCatch, a7);
}

uint64_t Publishers.TryCatch.init(upstream:handler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return Publishers.Catch.init(upstream:handler:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryCatch, a8);
}

uint64_t Publishers.Catch.init(upstream:handler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9, a1, a4);
  v19[0] = a4;
  v19[1] = a5;
  void v19[2] = a6;
  void v19[3] = a7;
  uint64_t result = a8(0, v19);
  uint64_t v18 = (void *)(a9 + *(int *)(result + 52));
  *uint64_t v18 = a2;
  v18[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryCatch()
{
  return swift_getGenericMetadata();
}

char *Publishers.Catch.Inner.__allocating_init(downstream:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Publishers.Catch.Inner.init(downstream:handler:)(a1, a2, a3);
}

void Publishers.Catch.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6863746143;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS()
{
  return 0x6863746143;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.Catch.Inner.UncaughtS.customMirror.getter);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.Catch.Inner.UncaughtS.playgroundDescription.getter);
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t *a1@<X0>, void *a2@<X8>)
{
}

void Publishers.Catch.Inner.CaughtS.customMirror.getter()
{
}

void Publishers.Catch.Inner.CaughtS.receive(subscription:)(void *a1)
{
}

void Publishers.Catch.Inner.receivePost(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  long long v4 = *(_OWORD *)(*v1 + 96);
  void v19[2] = *(_OWORD *)(*v1 + 80);
  void v19[3] = v4;
  void v19[4] = *(_OWORD *)(v3 + 112);
  uint64_t v5 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unsigned int v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v11 = (char *)v19 - v10;
  int v12 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v12);
  int v13 = (char *)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v13, v5);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v9);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v13, v9, v5);
    swift_endAccess();
    uint64_t v14 = v1[3];
    os_unfair_lock_unlock(v12);
    if (v14 == 0x8000000000000000)
    {
LABEL_5:
      uint64_t v15 = a1[3];
      uint64_t v16 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v14, v15, v16);
      return;
    }
    if (v14 < 0)
    {
      __break(1u);
    }
    else if (v14)
    {
      goto LABEL_5;
    }
  }
  else
  {
    os_unfair_lock_unlock(v12);
    uint64_t v18 = a1[3];
    uint64_t v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v18);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

uint64_t Publishers.Catch.Inner.CaughtS.receive(completion:)(uint64_t a1)
{
  return Publishers.Catch.Inner.receivePost(completion:)(a1);
}

uint64_t Publishers.Catch.Inner.receivePost(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v4 = *(void *)(*v1 + 120);
  long long v5 = *(_OWORD *)(*v1 + 96);
  void v16[3] = *(_OWORD *)(*v1 + 80);
  void v16[4] = v5;
  v16[0] = v5;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v6 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v12 = (char *)v16 - v11;
  int v13 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v13);
  uint64_t v14 = (char *)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v14, v6);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v14, v10, v6);
    swift_endAccess();
    os_unfair_lock_unlock(v13);
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 56))(a1, *(void *)&v16[0], v4);
  }
  else
  {
    os_unfair_lock_unlock(v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.Catch.Inner.CaughtS.receive(subscription:));
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.CaughtS(uint64_t a1)
{
  return Publishers.Catch.Inner.CaughtS.receive(_:)(a1, *v1);
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.Catch.Inner.CaughtS.receive(completion:));
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.Catch.Inner.CaughtS.customMirror.getter);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.CaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.Catch.Inner.playgroundDescription.getter);
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(uint64_t *a1@<X0>, void (*a2)(void, void *)@<X2>, void *a3@<X8>)
{
}

void Publishers.Catch.Inner.cancel()()
{
  uint64_t v1 = *v0;
  long long v2 = *(_OWORD *)(*v0 + 96);
  long long v16 = *(_OWORD *)(*v0 + 80);
  long long v17 = v2;
  long long v18 = *(_OWORD *)(v1 + 112);
  uint64_t v3 = type metadata accessor for Publishers.Catch.Inner.State();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (long long *)&v15[-v8];
  uint64_t v10 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 144);
  swift_beginAccess();
  (*(void (**)(long long *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1 || EnumCaseMultiPayload == 2)
  {
    outlined init with take of Subscription(v9, (uint64_t)&v16);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    uint64_t v13 = *((void *)&v17 + 1);
    uint64_t v14 = v18;
    __swift_project_boxed_opaque_existential_1(&v16, *((uint64_t *)&v17 + 1));
    (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 8))(v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
  }
  else if (EnumCaseMultiPayload == 4)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    os_unfair_lock_unlock(v10);
    (*(void (**)(long long *, uint64_t))(v4 + 8))(v9, v3);
  }
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Catch<A, B>.Inner<A1>()
{
}

uint64_t Publishers.Catch.handler.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  swift_retain();
  return v2;
}

uint64_t Publishers.TryCatch.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = v9;
  uint64_t v22 = a3;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = a4;
  type metadata accessor for Publishers.TryCatch.Inner();
  int v12 = (uint64_t *)(v4 + *(int *)(a2 + 52));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_allocObject();
  swift_retain();
  uint64_t v15 = specialized Publishers.TryCatch.Inner.init(downstream:handler:)(a1, v13, v14);
  swift_release();
  uint64_t v19 = v15;
  uint64_t v21 = v9;
  uint64_t v22 = a3;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = a4;
  uint64_t v16 = type metadata accessor for Publishers.TryCatch.Inner.UncaughtS();
  uint64_t WitnessTable = swift_getWitnessTable();
  Publisher.subscribe<A>(_:)((uint64_t)&v19, v20, v16, v11, WitnessTable);
  return swift_release();
}

uint64_t type metadata accessor for Publishers.TryCatch.Inner()
{
  return swift_getGenericMetadata();
}

void Publishers.Catch.Inner.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock((os_unfair_lock_t)v0[2]);
  uint64_t v15 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18C0BABB0;
  *(void *)(v8 + 32) = 0x657274736E776F64;
  *(void *)(v8 + 40) = 0xEA00000000006D61;
  uint64_t v9 = (uint64_t)v0 + *(void *)(*v0 + 152);
  uint64_t v10 = *(void *)(v1 + 96);
  *(void *)(v8 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v9, v10);
  *(void *)(v8 + 80) = 0x646E616D6564;
  *(void *)(v8 + 88) = 0xE600000000000000;
  uint64_t v12 = v0[3];
  *(void *)(v8 + 120) = &type metadata for Subscribers.Demand;
  *(void *)(v8 + 96) = v12;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v4);
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock((os_unfair_lock_t)v0[2]);
}

void Publishers.TryCatch.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x6863746143797254;
  a1[1] = 0xE800000000000000;
}

uint64_t Publishers.TryCatch.Inner.__deallocating_deinit()
{
  return Publishers.Catch.Inner.__deallocating_deinit((uint64_t (*)(void, _OWORD *))type metadata accessor for Publishers.TryCatch.Inner.State);
}

uint64_t Publishers.TryCatch.Inner.UncaughtS.receive(subscription:)(void *a1)
{
  return Publishers.TryCatch.Inner.receivePre(subscription:)(a1);
}

uint64_t Publishers.TryCatch.Inner.receivePre(subscription:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v61 = a1;
  uint64_t v52 = *v1;
  uint64_t v3 = v52;
  uint64_t v4 = v52[11];
  uint64_t v51 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  long long v53 = (char *)&v44 - v5;
  uint64_t v6 = (void *)v52[13];
  uint64_t v7 = (os_unfair_lock_t *)v52[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v44 - v9;
  uint64_t v60 = v10;
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v58);
  uint64_t v54 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v57 = (char *)&v44 - v13;
  uint64_t v14 = v3[12];
  uint64_t v15 = (_UNKNOWN **)v3[14];
  uint64_t v16 = v3[15];
  uint64_t v63 = v7;
  uint64_t v64 = v4;
  uint64_t v50 = v4;
  uint64_t v65 = v14;
  uint64_t v66 = v6;
  uint64_t v49 = v6;
  uint64_t v67 = v15;
  uint64_t v68 = v16;
  uint64_t v17 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v44 - v22;
  os_unfair_lock_lock(v2[2]);
  uint64_t v24 = (char *)v2 + *(void *)&(*v2)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
  if (swift_getEnumCaseMultiPayload())
  {
    os_unfair_lock_unlock(v2[2]);
    uint64_t v25 = v61[3];
    uint64_t v26 = v61[4];
    __swift_project_boxed_opaque_existential_1(v61, v25);
    (*(void (**)(uint64_t))(*(void *)(v26 + 8) + 8))(v25);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
  else
  {
    uint64_t v46 = v21;
    uint64_t v44 = v15;
    uint64_t v45 = v7;
    uint64_t v47 = v14;
    uint64_t v48 = v16;
    unsigned int v29 = v55;
    uint64_t v28 = v56;
    int v30 = v57;
    uint64_t v31 = v58;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v57, v23, v58);
    int v32 = v54;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v54, v30, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v32, 1, v60) == 1)
    {
      uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v32, v31);
      uint64_t v34 = (uint64_t)v46;
      outlined init with copy of Subscription((uint64_t)v61, (uint64_t)v46);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 40))(v24, v34, v17);
      swift_endAccess();
      os_unfair_lock_unlock(v2[2]);
      uint64_t v66 = v52;
      uint64_t v67 = &protocol witness table for Publishers.TryCatch<A, B>.Inner<A1>;
      uint64_t v63 = v2;
      uint64_t v35 = v48;
      unint64_t v36 = *(void (**)(os_unfair_lock_t **, uint64_t, uint64_t))(v48 + 40);
      swift_retain();
      v36(&v63, v47, v35);
      v33(v30, v31);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v29, v32, v60);
      uint64_t v37 = (uint64_t)v46;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 40))(v24, v37, v17);
      swift_endAccess();
      os_unfair_lock_unlock(v2[2]);
      uint64_t v38 = v53;
      (*(void (**)(char *))((char *)v2 + *(void *)&(*v2)[40]._os_unfair_lock_opaque))(v29);
      uint64_t v39 = v47;
      uint64_t v62 = v2;
      swift_retain();
      uint64_t v40 = v50;
      uint64_t v63 = v45;
      uint64_t v64 = v50;
      uint64_t v65 = v39;
      uint64_t v66 = v49;
      uint64_t v41 = (uint64_t)v44;
      uint64_t v67 = v44;
      uint64_t v68 = v48;
      uint64_t v42 = type metadata accessor for Publishers.TryCatch.Inner.CaughtS();
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v62, v40, v42, v41, WitnessTable);
      swift_release();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v40);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v60);
      return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    }
  }
}

void Publishers.TryCatch.Inner.UncaughtS.receive(_:)(uint64_t a1)
{
}

void Publishers.TryCatch.Inner.receivePre(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  os_unfair_lock_lock((os_unfair_lock_t)v1[2]);
  uint64_t v5 = v1[3];
  if (v5 != 0x8000000000000000)
  {
    if (v5 < 0)
    {
      __break(1u);
    }
    else if (v5)
    {
      v1[3] = v5 - 1;
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_5:
  os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v4 + 120) + 48))(a1, *(void *)(v4 + 96));
  os_unfair_lock_lock((os_unfair_lock_t)v2[2]);
  uint64_t v7 = v2[3];
  if (v7 == 0x8000000000000000)
  {
LABEL_13:
    os_unfair_lock_unlock((os_unfair_lock_t)v2[2]);
    return;
  }
  unint64_t v8 = 0x8000000000000000;
  if (v6 == 0x8000000000000000)
  {
LABEL_12:
    v2[3] = v8;
    goto LABEL_13;
  }
  if ((v7 | v6) < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6))
  {
    unint64_t v8 = 0x8000000000000000;
    goto LABEL_12;
  }
  if ((v8 & 0x8000000000000000) == 0) {
    goto LABEL_12;
  }
LABEL_17:
  __break(1u);
}

uint64_t Publishers.TryCatch.Inner.UncaughtS.receive(completion:)(uint64_t a1)
{
  return Publishers.TryCatch.Inner.receivePre(completion:)(a1);
}

uint64_t Publishers.TryCatch.Inner.receivePre(completion:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v56 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)&(*v1)[22]._os_unfair_lock_opaque;
  uint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v52 = (char *)v45 - v5;
  uint64_t v6 = v3[13];
  uint64_t v7 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v45 - v10;
  uint64_t v12 = v3[12];
  uint64_t v13 = v3[14];
  uint64_t v14 = v3[15];
  uint64_t v59 = v7;
  uint64_t v60 = v4;
  uint64_t v51 = v4;
  uint64_t v53 = v14;
  uint64_t v54 = v12;
  uint64_t v61 = v12;
  uint64_t v62 = v6;
  uint64_t v48 = v13;
  uint64_t v63 = v13;
  uint64_t v64 = v14;
  uint64_t v15 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v55 = (char *)v45 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v45 - v22;
  uint64_t v49 = v6;
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = type metadata accessor for Subscribers.Completion();
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v45 - v25;
  (*(void (**)(char *, uint64_t))(v27 + 16))((char *)v45 - v25, v56);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v26, 1, AssociatedTypeWitness) == 1)
  {
    os_unfair_lock_lock(v2[2]);
    uint64_t v28 = (char *)v2 + *(void *)&(*v2)[36]._os_unfair_lock_opaque;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v28, v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unsigned int v29 = v55;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v28, v29, v15);
      swift_endAccess();
      os_unfair_lock_unlock(v2[2]);
      v58[0] = 0;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 56))(v58, v54);
    }
    else
    {
      os_unfair_lock_unlock(v2[2]);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  }
  else
  {
    int v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v56 = AssociatedTypeWitness;
    v30(v11, v26, AssociatedTypeWitness);
    os_unfair_lock_lock(v2[2]);
    uint64_t v31 = (char *)v2 + *(void *)&(*v2)[36]._os_unfair_lock_opaque;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v31, v15);
    uint64_t v32 = v15;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      os_unfair_lock_unlock(v2[2]);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v56);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v46 = v19;
      uint64_t v47 = v9;
      uint64_t v34 = v55;
      uint64_t v35 = v15;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
      v45[2] = v16 + 40;
      v45[1] = v36;
      v36(v31, v34, v15);
      swift_endAccess();
      os_unfair_lock_unlock(v2[2]);
      uint64_t v37 = v52;
      (*(void (**)(char *))((char *)v2 + *(void *)&(*v2)[40]._os_unfair_lock_opaque))(v11);
      uint64_t v57 = v2;
      swift_retain();
      uint64_t v40 = v51;
      uint64_t v59 = v7;
      uint64_t v60 = v51;
      uint64_t v41 = v48;
      uint64_t v61 = v54;
      uint64_t v62 = v49;
      uint64_t v63 = v48;
      uint64_t v64 = v53;
      uint64_t v42 = type metadata accessor for Publishers.TryCatch.Inner.CaughtS();
      uint64_t WitnessTable = swift_getWitnessTable();
      Publisher.subscribe<A>(_:)((uint64_t)&v57, v40, v42, v41, WitnessTable);
      swift_release();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v40);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v56);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v46, v35);
    }
    else
    {
      uint64_t v39 = v55;
      uint64_t v38 = v56;
      if (EnumCaseMultiPayload)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v55, v11, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v39, 0, 1, v38);
        swift_storeEnumTagMultiPayload();
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v31, v39, v32);
        swift_endAccess();
        os_unfair_lock_unlock(v2[2]);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v38);
        return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v32);
      }
    }
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.TryCatch.Inner.UncaughtS.receive(subscription:));
}

uint64_t protocol witness for Subscriber.receive(_:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(_:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.TryCatch.Inner.UncaughtS.receive(_:));
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.TryCatch.Inner.UncaughtS.receive(completion:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS()
{
  return 0x6863746143797254;
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.TryCatch.Inner.UncaughtS.playgroundDescription.getter);
}

void protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Publishers.TryCatch<A, B>.Inner<A1>.UncaughtS(uint64_t *a1@<X0>, void *a2@<X8>)
{
}

void Publishers.Catch.Inner.UncaughtS.combineIdentifier.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(void, void *)@<X7>, void *a8@<X8>)
{
  v9[0] = a1;
  v9[1] = a2;
  long long v9[2] = a3;
  void v9[3] = a4;
  void v9[4] = a5;
  v9[5] = a6;
  a7(0, v9);
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(a8);
}

void Publishers.TryCatch.Inner.CaughtS.receive(subscription:)(void *a1)
{
}

void Publishers.TryCatch.Inner.receivePost(subscription:)(void *a1)
{
  uint64_t v3 = *v1;
  long long v4 = *(_OWORD *)(*v1 + 96);
  v18[2] = *(_OWORD *)(*v1 + 80);
  uint64_t v18[3] = v4;
  void v18[4] = *(_OWORD *)(v3 + 112);
  uint64_t v5 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v18 - v10;
  os_unfair_lock_lock((os_unfair_lock_t)v1[2]);
  uint64_t v12 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v12, v5);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with copy of Subscription((uint64_t)a1, (uint64_t)v9);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v9, v5);
    swift_endAccess();
    uint64_t v13 = v1[3];
    os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
    if (v13 == 0x8000000000000000)
    {
LABEL_5:
      uint64_t v14 = a1[3];
      uint64_t v15 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(v13, v14, v15);
      return;
    }
    if (v13 < 0)
    {
      __break(1u);
    }
    else if (v13)
    {
      goto LABEL_5;
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v17);
    (*(void (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v17);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
}

uint64_t Publishers.Catch.Inner.CaughtS.receive(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)a2 + 120) + 48))(a1, *(void *)(*(void *)a2 + 96));
}

uint64_t Publishers.TryCatch.Inner.CaughtS.receive(completion:)(uint64_t a1)
{
  return Publishers.TryCatch.Inner.receivePost(completion:)(a1);
}

uint64_t Publishers.TryCatch.Inner.receivePost(completion:)(uint64_t a1)
{
  uint64_t v31 = a1;
  os_unfair_lock_t v2 = *v1;
  os_unfair_lock_t v3 = *v1;
  uint64_t v4 = *(void *)&(*v1)[28]._os_unfair_lock_opaque;
  uint64_t v5 = *(void *)&(*v1)[22]._os_unfair_lock_opaque;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v28 = (char *)&v27 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Subscribers.Completion();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)&v2[20]._os_unfair_lock_opaque;
  uint64_t v13 = *(void *)&v2[30]._os_unfair_lock_opaque;
  v34[3] = v12;
  v34[4] = v5;
  long long v33 = *(_OWORD *)&v3[24]._os_unfair_lock_opaque;
  long long v35 = v33;
  uint64_t v36 = v4;
  uint64_t v37 = v13;
  uint64_t v14 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v27 - v19;
  os_unfair_lock_lock(v1[2]);
  uint64_t v21 = (char *)v1 + *(void *)&(*v1)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v27 = AssociatedConformanceWitness;
    uint64_t v22 = v28;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v21, v18, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v1[2]);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v11, v31, v30);
    uint64_t v23 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      v34[0] = 0;
      (*(void (**)(void *, void, uint64_t))(v13 + 56))(v34, v33, v13);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v11, AssociatedTypeWitness);
      uint64_t v24 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v25, v22, AssociatedTypeWitness);
      v34[0] = v24;
      (*(void (**)(void *, void, uint64_t))(v13 + 56))(v34, v33, v13);
      MEMORY[0x18C13C260](v24);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v22, AssociatedTypeWitness);
    }
  }
  else
  {
    os_unfair_lock_unlock(v1[2]);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.CaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(subscription:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.TryCatch.Inner.CaughtS.receive(subscription:));
}

uint64_t protocol witness for Subscriber.receive(completion:) in conformance Publishers.TryCatch<A, B>.Inner<A1>.CaughtS(uint64_t a1, void *a2, uint64_t a3)
{
  return protocol witness for Subscriber.receive(completion:) in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))Publishers.TryCatch.Inner.CaughtS.receive(completion:));
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void))
{
  return a3(*v3, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryCatch<A, B>.Inner<A1>.CaughtS(void *a1, uint64_t a2)
{
  return protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void))Publishers.TryCatch.Inner.playgroundDescription.getter);
}

uint64_t protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Catch<A, B>.Inner<A1>.UncaughtS(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void))
{
  return a3(*v3, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

void Publishers.TryCatch.Inner.cancel()()
{
  os_unfair_lock_t v1 = *v0;
  long long v2 = *(_OWORD *)&(*v0)[24]._os_unfair_lock_opaque;
  long long v15 = *(_OWORD *)&(*v0)[20]._os_unfair_lock_opaque;
  long long v16 = v2;
  long long v17 = *(_OWORD *)&v1[28]._os_unfair_lock_opaque;
  uint64_t v3 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (long long *)&v14[-v8];
  os_unfair_lock_lock(v0[2]);
  uint64_t v10 = (char *)v0 + *(void *)&(*v0)[36]._os_unfair_lock_opaque;
  swift_beginAccess();
  (*(void (**)(long long *, char *, uint64_t))(v4 + 16))(v9, v10, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1 || EnumCaseMultiPayload == 2)
  {
    outlined init with take of Subscription(v9, (uint64_t)&v15);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v10, v7, v3);
    swift_endAccess();
    os_unfair_lock_unlock(v0[2]);
    uint64_t v12 = *((void *)&v16 + 1);
    uint64_t v13 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 8))(v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  else if (EnumCaseMultiPayload == 4)
  {
    os_unfair_lock_unlock(v0[2]);
  }
  else
  {
    os_unfair_lock_unlock(v0[2]);
    (*(void (**)(long long *, uint64_t))(v4 + 8))(v9, v3);
  }
}

void Publishers.TryCatch.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  long long v4 = *(_OWORD *)(*v1 + 96);
  long long v17 = *(_OWORD *)(*v1 + 80);
  long long v18 = v4;
  long long v19 = *(_OWORD *)(v3 + 112);
  uint64_t v5 = type metadata accessor for Publishers.TryCatch.Inner.State();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (long long *)((char *)&v16 - v7);
  if (a1 == 0x8000000000000000) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (!a1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18C0B2D98);
  }
LABEL_4:
  os_unfair_lock_lock((os_unfair_lock_t)v1[2]);
  uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(long long *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of Subscription(v8, (uint64_t)&v17);
      uint64_t v10 = v1[3];
      unint64_t v11 = 0x8000000000000000;
      if (v10 == 0x8000000000000000) {
        goto LABEL_20;
      }
      if (a1 == 0x8000000000000000) {
        goto LABEL_19;
      }
      if ((v10 | a1) < 0) {
        goto LABEL_27;
      }
      unint64_t v11 = v10 + a1;
      if (__OFADD__(v10, a1))
      {
        unint64_t v11 = 0x8000000000000000;
        goto LABEL_19;
      }
      if ((v11 & 0x8000000000000000) == 0)
      {
LABEL_19:
        v1[3] = v11;
LABEL_20:
        os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
        uint64_t v14 = *((void *)&v18 + 1);
        uint64_t v15 = v19;
        __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(a1, v14, v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
        return;
      }
      goto LABEL_29;
    case 2u:
      outlined init with take of Subscription(v8, (uint64_t)&v17);
      goto LABEL_20;
    case 3u:
      uint64_t v12 = v1[3];
      unint64_t v13 = 0x8000000000000000;
      if (v12 == 0x8000000000000000) {
        goto LABEL_23;
      }
      if (a1 == 0x8000000000000000) {
        goto LABEL_22;
      }
      if ((v12 | a1) < 0) {
        goto LABEL_28;
      }
      unint64_t v13 = v12 + a1;
      if (__OFADD__(v12, a1))
      {
        unint64_t v13 = 0x8000000000000000;
        goto LABEL_22;
      }
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_30;
      }
LABEL_22:
      v1[3] = v13;
LABEL_23:
      os_unfair_lock_unlock((os_unfair_lock_t)v1[2]);
      return;
    case 4u:
      goto LABEL_23;
    default:
      goto LABEL_31;
  }
}

void protocol witness for Subscription.request(_:) in conformance Publishers.TryCatch<A, B>.Inner<A1>(uint64_t a1)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.TryCatch<A, B>.Inner<A1>(void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance Publishers.TryCatch<A, B>.Inner<A1>()
{
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryCatch<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryCatch.receive<A>(subscriber:)(a1, a4, a2, a3);
}

char *specialized Publishers.TryCatch.Inner.init(downstream:handler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)v3;
  *((void *)v3 + 3) = 0;
  uint64_t v8 = &v3[*(void *)(v7 + 144)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v7 + 96);
  type metadata accessor for Publishers.TryCatch.Inner.State();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(&v3[*(void *)(*(void *)v3 + 152)], a1, v13);
  uint64_t v10 = &v3[*(void *)(*(void *)v3 + 160)];
  *(void *)uint64_t v10 = a2;
  *((void *)v10 + 1) = a3;
  swift_retain();
  unint64_t v11 = (_DWORD *)swift_slowAlloc();
  _DWORD *v11 = 0;
  *((void *)v3 + 2) = v11;
  return v3;
}

uint64_t type metadata accessor for Publishers.TryCatch.Inner.UncaughtS()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.Catch(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0B3188);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.Catch(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C0B337CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          long long v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *long long v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata completion function for Publishers.TryCatch.Inner(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Publishers.Catch.Inner(a1, a2, a3, (uint64_t (*)(uint64_t, _OWORD *))type metadata accessor for Publishers.TryCatch.Inner.State);
}

uint64_t type metadata accessor for Publishers.TryCatch.Inner.State()
{
  return swift_getGenericMetadata();
}

char *initializeBufferWithCopyOfBuffer for Publishers.TryCatch.Inner.State(char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 0x28) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v7 > 3)
  {
    int v8 = *(_DWORD *)(v5 + 80);
    if ((unint64_t)(v7 + 1) > 0x18 || (v8 & 0x1000F8) != 0)
    {
LABEL_33:
      uint64_t v17 = *(void *)a2;
      *(void *)a1 = *(void *)a2;
      a1 = (char *)(v17 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
      swift_retain();
      return a1;
    }
LABEL_20:
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 < 3) {
      goto LABEL_46;
    }
    goto LABEL_36;
  }
  unsigned int v10 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  int v8 = *(_DWORD *)(v5 + 80);
  if (v10 > 0xFFFC)
  {
    if ((unint64_t)(v7 + 4) > 0x18 || (v8 & 0x1000F8) != 0) {
      goto LABEL_33;
    }
    unsigned int v13 = *(_DWORD *)&a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3) {
      goto LABEL_36;
    }
  }
  else
  {
    int v11 = v8 & 0x1000F8;
    if (v10 <= 0xFC)
    {
      if ((unint64_t)(v7 + 1) > 0x18 || v11 != 0) {
        goto LABEL_33;
      }
      goto LABEL_20;
    }
    if ((unint64_t)(v7 + 2) > 0x18 || v11 != 0) {
      goto LABEL_33;
    }
    unsigned int v13 = *(unsigned __int16 *)&a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
LABEL_36:
      if (v7 <= 3) {
        uint64_t v19 = v7;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_44;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_44;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_44;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_44:
          int v21 = (v20 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v20 + 3;
          if (v7 < 4) {
            unsigned int v13 = v21;
          }
          break;
        default:
          break;
      }
    }
  }
LABEL_46:
  switch(v13)
  {
    case 2u:
      long long v22 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v22;
      (**(void (***)(void *, unsigned __int8 *))(v22 - 8))(a1, a2);
      if (v7 <= 3)
      {
        unsigned int v23 = ((1 << (8 * v7)) + 1) >> (8 * v7);
        if (v23 > 0xFFFC)
        {
          int v25 = 2;
          goto LABEL_71;
        }
        if (v23 > 0xFC)
        {
          LOWORD(v25) = 2;
          goto LABEL_74;
        }
      }
      a1[v7] = 2;
      return a1;
    case 1u:
      long long v24 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v24;
      (**(void (***)(void *, unsigned __int8 *))(v24 - 8))(a1, a2);
      if (v7 > 3)
      {
LABEL_59:
        a1[v7] = 1;
        return a1;
      }
      int v25 = 1;
      unsigned int v26 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v26 <= 0xFFFC)
      {
        if (v26 <= 0xFC) {
          goto LABEL_59;
        }
LABEL_74:
        *(_WORD *)&a1[v7] = v25;
        return a1;
      }
LABEL_71:
      *(_DWORD *)&a1[v7] = v25;
      return a1;
    case 0u:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
        if (v7 > 3) {
          goto LABEL_69;
        }
      }
      else
      {
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_69:
          a1[v7] = 0;
          return a1;
        }
      }
      unsigned int v29 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v29 > 0xFFFC)
      {
        *(_DWORD *)&a1[v7] = 0;
        return a1;
      }
      if (v29 > 0xFC)
      {
        *(_WORD *)&a1[v7] = 0;
        return a1;
      }
      goto LABEL_69;
  }
  if (v7 > 3) {
    goto LABEL_64;
  }
  unsigned int v27 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  uint64_t v28 = 2;
  if (v27 > 0xFFFC) {
    uint64_t v28 = 4;
  }
  if (v27 <= 0xFC) {
LABEL_64:
  }
    uint64_t v28 = 1;
  memcpy(a1, a2, v28 + v7);
  return a1;
}

unsigned __int8 *assignWithCopy for Publishers.TryCatch.Inner.State(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 0x28) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = v6;
  }
  char v8 = 8 * v7;
  if (v7 > 3)
  {
LABEL_11:
    unsigned int v10 = a1[v7];
    unsigned int v11 = v10 - 3;
    if (v10 < 3) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
  unsigned int v9 = ((1 << v8) + 1) >> v8;
  if (v9 <= 0xFFFC)
  {
    if (v9 > 0xFC)
    {
      unsigned int v10 = *(unsigned __int16 *)&a1[v7];
      unsigned int v11 = v10 - 3;
      if (v10 < 3) {
        goto LABEL_29;
      }
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  unsigned int v10 = *(_DWORD *)&a1[v7];
  unsigned int v11 = v10 - 3;
  if (v10 < 3) {
    goto LABEL_29;
  }
LABEL_16:
  if (v7 <= 3) {
    uint64_t v12 = v7;
  }
  else {
    uint64_t v12 = 4;
  }
  switch(v12)
  {
    case 1:
      int v13 = *a1;
      if (v7 < 4) {
        goto LABEL_27;
      }
      goto LABEL_28;
    case 2:
      int v13 = *(unsigned __int16 *)a1;
      if (v7 >= 4) {
        goto LABEL_28;
      }
      goto LABEL_27;
    case 3:
      int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
      if (v7 >= 4) {
        goto LABEL_28;
      }
      goto LABEL_27;
    case 4:
      int v13 = *(_DWORD *)a1;
      if (v7 < 4) {
LABEL_27:
      }
        v13 |= v11 << v8;
LABEL_28:
      unsigned int v10 = v13 + 3;
      break;
    default:
      break;
  }
LABEL_29:
  if (v10 == 2 || v10 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    if (v7 > 3) {
      goto LABEL_39;
    }
  }
  else
  {
    if (!v10
      && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, AssociatedTypeWitness))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    if (v7 > 3)
    {
LABEL_39:
      unsigned int v15 = a2[v7];
      unsigned int v16 = v15 - 3;
      if (v15 < 3) {
        goto LABEL_57;
      }
      goto LABEL_44;
    }
  }
  unsigned int v14 = ((1 << v8) + 1) >> v8;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)&a2[v7];
    unsigned int v16 = v15 - 3;
    if (v15 < 3) {
      goto LABEL_57;
    }
    goto LABEL_44;
  }
  if (v14 <= 0xFC) {
    goto LABEL_39;
  }
  unsigned int v15 = *(unsigned __int16 *)&a2[v7];
  unsigned int v16 = v15 - 3;
  if (v15 < 3) {
    goto LABEL_57;
  }
LABEL_44:
  if (v7 <= 3) {
    uint64_t v17 = v7;
  }
  else {
    uint64_t v17 = 4;
  }
  switch(v17)
  {
    case 1:
      int v18 = *a2;
      if (v7 < 4) {
        goto LABEL_55;
      }
      goto LABEL_56;
    case 2:
      int v18 = *(unsigned __int16 *)a2;
      if (v7 >= 4) {
        goto LABEL_56;
      }
      goto LABEL_55;
    case 3:
      int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      if (v7 >= 4) {
        goto LABEL_56;
      }
      goto LABEL_55;
    case 4:
      int v18 = *(_DWORD *)a2;
      if (v7 < 4) {
LABEL_55:
      }
        v18 |= v16 << v8;
LABEL_56:
      unsigned int v15 = v18 + 3;
      break;
    default:
      break;
  }
LABEL_57:
  switch(v15)
  {
    case 2u:
      uint64_t v19 = *((void *)a2 + 3);
      *((void *)a1 + 3) = v19;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      (**(void (***)(unsigned __int8 *, unsigned __int8 *))(v19 - 8))(a1, a2);
      if (v7 <= 3)
      {
        unsigned int v20 = ((1 << v8) + 1) >> v8;
        if (v20 > 0xFFFC)
        {
          int v22 = 2;
          goto LABEL_82;
        }
        if (v20 > 0xFC)
        {
          LOWORD(v22) = 2;
          goto LABEL_85;
        }
      }
      a1[v7] = 2;
      return a1;
    case 1u:
      uint64_t v21 = *((void *)a2 + 3);
      *((void *)a1 + 3) = v21;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      (**(void (***)(unsigned __int8 *, unsigned __int8 *))(v21 - 8))(a1, a2);
      if (v7 > 3)
      {
LABEL_70:
        a1[v7] = 1;
        return a1;
      }
      int v22 = 1;
      unsigned int v23 = ((1 << v8) + 1) >> v8;
      if (v23 <= 0xFFFC)
      {
        if (v23 <= 0xFC) {
          goto LABEL_70;
        }
LABEL_85:
        *(_WORD *)&a1[v7] = v22;
        return a1;
      }
LABEL_82:
      *(_DWORD *)&a1[v7] = v22;
      return a1;
    case 0u:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
        if (v7 > 3) {
          goto LABEL_80;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_80:
          a1[v7] = 0;
          return a1;
        }
      }
      unsigned int v26 = ((1 << v8) + 1) >> v8;
      if (v26 > 0xFFFC)
      {
        *(_DWORD *)&a1[v7] = 0;
        return a1;
      }
      if (v26 > 0xFC)
      {
        *(_WORD *)&a1[v7] = 0;
        return a1;
      }
      goto LABEL_80;
  }
  if (v7 > 3) {
    goto LABEL_75;
  }
  unsigned int v24 = ((1 << v8) + 1) >> v8;
  uint64_t v25 = 2;
  if (v24 > 0xFFFC) {
    uint64_t v25 = 4;
  }
  if (v24 <= 0xFC) {
LABEL_75:
  }
    uint64_t v25 = 1;
  memcpy(a1, a2, v25 + v7);
  return a1;
}

_OWORD *initializeWithTake for Publishers.TryCatch.Inner.State(_OWORD *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 0x28) {
    uint64_t v7 = 40;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v7 > 3) {
    goto LABEL_10;
  }
  unsigned int v8 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  if (v8 > 0xFFFC)
  {
    unsigned int v9 = *(_DWORD *)&a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  if (v8 > 0xFC)
  {
    unsigned int v9 = *(unsigned __int16 *)&a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_10:
    unsigned int v9 = a2[v7];
    unsigned int v10 = v9 - 3;
    if (v9 < 3) {
      goto LABEL_25;
    }
  }
LABEL_15:
  if (v7 <= 3) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = 4;
  }
  switch(v11)
  {
    case 1:
      int v12 = *a2;
      goto LABEL_23;
    case 2:
      int v12 = *(unsigned __int16 *)a2;
      goto LABEL_23;
    case 3:
      int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
      goto LABEL_23;
    case 4:
      int v12 = *(_DWORD *)a2;
LABEL_23:
      int v13 = (v12 | (v10 << (8 * v7))) + 3;
      unsigned int v9 = v12 + 3;
      if (v7 < 4) {
        unsigned int v9 = v13;
      }
      break;
    default:
      break;
  }
LABEL_25:
  switch(v9)
  {
    case 2u:
      long long v14 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v14;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      if (v7 <= 3)
      {
        unsigned int v15 = ((1 << (8 * v7)) + 1) >> (8 * v7);
        if (v15 > 0xFFFC)
        {
          int v17 = 2;
          goto LABEL_50;
        }
        if (v15 > 0xFC)
        {
          LOWORD(v17) = 2;
          goto LABEL_53;
        }
      }
      *((unsigned char *)a1 + v7) = 2;
      return a1;
    case 1u:
      long long v16 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v16;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      if (v7 > 3)
      {
LABEL_38:
        *((unsigned char *)a1 + v7) = 1;
        return a1;
      }
      int v17 = 1;
      unsigned int v18 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v18 <= 0xFFFC)
      {
        if (v18 <= 0xFC) {
          goto LABEL_38;
        }
LABEL_53:
        *(_WORD *)((char *)a1 + v7) = v17;
        return a1;
      }
LABEL_50:
      *(_DWORD *)((char *)a1 + v7) = v17;
      return a1;
    case 0u:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v6);
        if (v7 > 3) {
          goto LABEL_48;
        }
      }
      else
      {
        (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        if (v7 > 3)
        {
LABEL_48:
          *((unsigned char *)a1 + v7) = 0;
          return a1;
        }
      }
      unsigned int v21 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v21 > 0xFFFC)
      {
        *(_DWORD *)((char *)a1 + v7) = 0;
        return a1;
      }
      if (v21 > 0xFC)
      {
        *(_WORD *)((char *)a1 + v7) = 0;
        return a1;
      }
      goto LABEL_48;
  }
  if (v7 > 3) {
    goto LABEL_43;
  }
  unsigned int v19 = ((1 << (8 * v7)) + 1) >> (8 * v7);
  uint64_t v20 = 2;
  if (v19 > 0xFFFC) {
    uint64_t v20 = 4;
  }
  if (v19 <= 0xFC) {
LABEL_43:
  }
    uint64_t v20 = 1;
  memcpy(a1, a2, v20 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.TryCatch.Inner.State(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 0x28) {
    unint64_t v5 = 40;
  }
  if (v5 > 3)
  {
    int v6 = 4;
LABEL_10:
    char v8 = 8;
    goto LABEL_11;
  }
  unsigned int v7 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v7 > 0xFFFC) {
    goto LABEL_14;
  }
  int v6 = v7 + 3;
  if (v7 <= 0xFC) {
    goto LABEL_10;
  }
  char v8 = 16;
LABEL_11:
  unsigned int v9 = (1 << v8) - v6;
  if ((v9 & 0x80000000) == 0)
  {
    if (v5 > 3) {
      goto LABEL_18;
    }
LABEL_15:
    unsigned int v10 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v11 = 2;
    if (v10 > 0xFFFC) {
      uint64_t v11 = 4;
    }
    if (v10 > 0xFC) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_14:
  unsigned int v9 = 0x7FFFFFFF;
  if (v5 <= 3) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v11 = 1;
LABEL_19:
  if (!a2) {
    return 0;
  }
  if (a2 <= v9) {
    goto LABEL_38;
  }
  unint64_t v12 = v11 + v5;
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((a2 - v9 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_38;
      }
      goto LABEL_30;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_38;
      }
      goto LABEL_30;
    }
    if (v15 < 2)
    {
LABEL_38:
      if (v9)
      {
        if (v5 <= 3)
        {
          unsigned int v23 = ((1 << (8 * v5)) + 1) >> (8 * v5);
          if (v23 > 0xFFFC)
          {
            unsigned int v18 = *(_DWORD *)((char *)a1 + v5);
            unsigned int v19 = ~v18;
LABEL_48:
            unsigned int v26 = 0x7FFFFFFF;
LABEL_49:
            if (v26 > v19) {
              return -v18;
            }
            else {
              return 0;
            }
          }
          int v21 = v23 + 3;
          if (v23 > 0xFC)
          {
            int v25 = *(unsigned __int16 *)((char *)a1 + v5);
            unsigned int v18 = v25 | 0xFFFF0000;
            unsigned int v19 = v25 ^ 0xFFFF;
            char v20 = 16;
          }
          else
          {
            int v24 = *((unsigned __int8 *)a1 + v5);
            unsigned int v18 = v24 | 0xFFFFFF00;
            unsigned int v19 = v24 ^ 0xFF;
            char v20 = 8;
          }
        }
        else
        {
          int v17 = *((unsigned __int8 *)a1 + v5);
          unsigned int v18 = v17 | 0xFFFFFF00;
          unsigned int v19 = v17 ^ 0xFF;
          char v20 = 8;
          int v21 = 4;
        }
        unsigned int v26 = (1 << v20) - v21;
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_38;
  }
LABEL_30:
  int v16 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v16 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v12 | v16) + 1;
}

void storeEnumTagSinglePayload for Publishers.TryCatch.Inner.State(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 0x28) {
    unint64_t v7 = 40;
  }
  char v8 = 8 * v7;
  if (v7 > 3)
  {
    int v9 = 4;
LABEL_8:
    char v10 = 8;
    goto LABEL_9;
  }
  unsigned int v12 = ((1 << v8) + 1) >> v8;
  if (v12 > 0xFFFC) {
    goto LABEL_15;
  }
  int v9 = v12 + 3;
  if (v12 <= 0xFC) {
    goto LABEL_8;
  }
  char v10 = 16;
LABEL_9:
  unsigned int v11 = (1 << v10) - v9;
  if ((v11 & 0x80000000) == 0)
  {
    if (v7 > 3) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_15:
  unsigned int v11 = 0x7FFFFFFF;
  if (v7 > 3)
  {
LABEL_19:
    uint64_t v14 = 1;
    goto LABEL_20;
  }
LABEL_16:
  unsigned int v13 = ((1 << v8) + 1) >> v8;
  uint64_t v14 = 2;
  if (v13 > 0xFFFC) {
    uint64_t v14 = 4;
  }
  if (v13 <= 0xFC) {
    goto LABEL_19;
  }
LABEL_20:
  size_t v15 = v14 + v7;
  if (a3 <= v11)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v11 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v11 < a2)
  {
    unsigned int v17 = ~v11 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x18C0B4720);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_39;
    default:
LABEL_39:
      if (!a2) {
        return;
      }
LABEL_40:
      int v21 = -a2;
      if (v7 > 3) {
        goto LABEL_41;
      }
      unsigned int v22 = ((1 << v8) + 1) >> v8;
      if (v22 > 0xFFFC)
      {
        *(_DWORD *)&a1[v7] = v21;
      }
      else if (v22 <= 0xFC)
      {
LABEL_41:
        a1[v7] = v21;
      }
      else
      {
        *(_WORD *)&a1[v7] = v21;
      }
      return;
  }
}

uint64_t getEnumTag for Publishers.TryCatch.Inner.State(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  if (v3 <= 0x28) {
    unint64_t v3 = 40;
  }
  if (v3 > 3) {
    goto LABEL_7;
  }
  unsigned int v5 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v5 > 0xFFFC)
  {
    uint64_t result = *(unsigned int *)&a1[v3];
  }
  else
  {
    if (v5 <= 0xFC)
    {
LABEL_7:
      uint64_t result = a1[v3];
      goto LABEL_12;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v3];
  }
LABEL_12:
  if (result >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_21;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_21;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_21;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_21:
        unsigned int v8 = (v7 | ((result - 3) << (8 * v3))) + 3;
        unsigned int v9 = v7 + 3;
        if (v3 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for Publishers.TryCatch.Inner.State(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 0x28) {
    size_t v6 = 40;
  }
  else {
    size_t v6 = v5;
  }
  if (a2 > 2)
  {
    unsigned int v7 = a2 - 3;
    if (v6 < 4)
    {
      int v9 = (v7 >> (8 * v6)) + 3;
      v7 &= ~(-1 << (8 * v6));
      char v10 = (int *)&a1[v6];
      unsigned int v11 = ((1 << (8 * v6)) + 1) >> (8 * v6);
      if (v11 > 0xFFFC)
      {
        int *v10 = v9;
      }
      else if (v11 > 0xFC)
      {
        *(_WORD *)char v10 = v9;
      }
      else
      {
        *(unsigned char *)char v10 = v9;
      }
    }
    else
    {
      a1[v6] = 3;
    }
    if (v6 >= 4) {
      int v12 = 4;
    }
    else {
      int v12 = v6;
    }
    bzero(a1, v6);
    switch(v12)
    {
      case 2:
        *(_WORD *)a1 = v7;
        break;
      case 3:
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
        break;
      case 4:
        *(_DWORD *)a1 = v7;
        break;
      default:
        *a1 = v7;
        break;
    }
  }
  else
  {
    if (v6 > 3)
    {
LABEL_9:
      a1[v6] = a2;
      return;
    }
    unsigned int v8 = ((1 << (8 * v6)) + 1) >> (8 * v6);
    if (v8 > 0xFFFC)
    {
      *(_DWORD *)&a1[v6] = a2;
    }
    else
    {
      if (v8 <= 0xFC) {
        goto LABEL_9;
      }
      *(_WORD *)&a1[v6] = a2;
    }
  }
}

uint64_t type metadata accessor for Publishers.Catch.Inner.CaughtS()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Publishers.TryCatch.Inner.CaughtS()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for Subscriber.Failure : Error in Publishers.Catch<A, B>.Inner<A1>.CaughtS()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t Publishers.FlatMap.init(upstream:maxPublishers:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for Publishers.FlatMap();
  *(void *)(a6 + *(int *)(result + 52)) = a2;
  unsigned int v11 = (void *)(a6 + *(int *)(result + 56));
  void *v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t sub_18C0B4BA0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Publishers.FlatMap.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t Publishers.FlatMap.maxPublishers.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t Publishers.FlatMap.transform.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  swift_retain();
  return v2;
}

uint64_t *Publishers.FlatMap.Outer.__allocating_init(downstream:maxPublishers:map:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FlatMap.Outer.init(downstream:maxPublishers:map:)(a1, a2, a3, a4);
}

uint64_t Publishers.FlatMap.Outer.Side.customMirror.getter(_OWORD *a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  unsigned int v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1[1];
  uint64_t v10 = v1[2];
  uint64_t v17 = *v1;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18C0BA630;
  int v12 = (void *)(v11 + 48);
  *(void *)(v11 + 32) = 0xD000000000000012;
  *(void *)(v11 + 40) = 0x800000018C0C48F0;
  *(void *)(v11 + 72) = &type metadata for CombineIdentifier;
  long long v13 = a1[2];
  v16[0] = a1[1];
  v16[1] = v13;
  void v16[2] = a1[3];
  type metadata accessor for Publishers.FlatMap.Outer();
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter(v12);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v5);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.FlatMap.Outer.Side.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x70614D74616C46;
  a1[1] = 0xE700000000000000;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.FlatMap<A, B>.Outer<A1>.Side()
{
  return 0x70614D74616C46;
}

uint64_t Publishers.FlatMap.Outer.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.FlatMap<A, B>.Outer<A1>()
{
  return Publishers.FlatMap.Outer.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.FlatMap<A, B>.Outer<A1>(void *a1@<X8>)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.FlatMap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v10 = *v11;
    int v12 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    uint64_t v14 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v14 = *v12;
    v14[1] = v13;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for Publishers.FlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Publishers.FlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Publishers.FlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Publishers.FlatMap(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0B54A8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.FlatMap(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x18C0B56B8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t Publishers.Delay.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Delay.interval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Delay.tolerance.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Publishers.Delay.scheduler.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t Publishers.Delay.options.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 64);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

char *Publishers.Delay.Inner.__allocating_init(_:interval:tolerance:scheduler:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Publishers.Delay.Inner.init(_:interval:tolerance:scheduler:options:)(a1, a2, a3, a4, a5);
}

void Publishers.Delay.Inner.cancel()()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v1);
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 176);
  swift_beginAccess();
  outlined init with copy of SubscriptionStatus(v2, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of SubscriptionStatus((uint64_t)&v5);
    os_unfair_lock_unlock(v1);
  }
  else
  {
    outlined init with take of Subscription((long long *)&v5, (uint64_t)v9);
    uint64_t v5 = 1;
    long long v6 = 0u;
    long long v7 = 0u;
    char v8 = 2;
    swift_beginAccess();
    outlined assign with take of SubscriptionStatus((uint64_t)&v5, v2);
    swift_endAccess();
    os_unfair_lock_unlock(v1);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

void protocol witness for Cancellable.cancel() in conformance Publishers.Delay<A, B>.Inner<A1>()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for Publishers.Delay(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v38 = *(void *)(a3 + 16);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v4 = *(void *)(v39 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v32 = v4 + v6;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v34 = v7 + v6;
  uint64_t v35 = *(void *)(v3 - 8);
  int v8 = *(_DWORD *)(v35 + 80);
  uint64_t v33 = v7 + v8;
  uint64_t v9 = *(void *)(v35 + 64);
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v37 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v10 + 64) + 1;
  }
  uint64_t v14 = (v6 | *(unsigned char *)(v39 + 80) | v8 | *(unsigned char *)(v10 + 80));
  if (v14 <= 7
    && v13
     + ((v9
       + v11
       + ((v33 + ((v34 + (v32 & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(unint64_t)v8)) & ~v11) <= 0x18
    && ((v6 | *(_DWORD *)(v39 + 80) | v8 | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    unint64_t v19 = ~(unint64_t)v6;
    size_t __n = v13;
    uint64_t v31 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v39 + 16))(a1, a2, v38);
    unint64_t v20 = ((unint64_t)a1 + v32) & v19;
    unint64_t v21 = ((unint64_t)a2 + v32) & v19;
    unsigned int v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    v22(v20, v21, AssociatedTypeWitness);
    unint64_t v23 = (v34 + v20) & v19;
    unint64_t v24 = (v34 + v21) & v19;
    v22(v23, v24, AssociatedTypeWitness);
    unint64_t v25 = (v23 + v33) & ~(unint64_t)v8;
    unint64_t v26 = (v24 + v33) & ~(unint64_t)v8;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 16))(v25, v26, v3);
    unsigned int v27 = (void *)((v25 + v12) & v31);
    uint64_t v28 = (const void *)((v26 + v12) & v31);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v28, 1, v37))
    {
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v27, v28, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v37);
    }
    return a1;
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v18 = v17 + ((v14 + 16) & ~v14);
    swift_retain();
  }
  return (uint64_t *)v18;
}

uint64_t assignWithCopy for Publishers.Delay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v10 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v7 + v13;
  uint64_t v39 = a1;
  uint64_t v15 = (v7 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 40);
  uint64_t v18 = (v17 + v13 + v15) & ~v13;
  uint64_t v19 = (v17 + v13 + v16) & ~v13;
  v11(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v20 + 24;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v17 + v22 + v18) & ~v22;
  uint64_t v24 = (v17 + v22 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 24))(v23, v24, v8);
  uint64_t v25 = *(void *)(v21 + 40);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  unsigned int v29 = (void *)((v25 + v28 + v23) & ~v28);
  uint64_t v30 = (void *)((v25 + v28 + v24) & ~v28);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v24) = v31(v29, 1, v26);
  int v32 = v31(v30, 1, v26);
  if (v24)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v29, v30, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
      return v39;
    }
    int v33 = *(_DWORD *)(v27 + 84);
    size_t v34 = *(void *)(v27 + 64);
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v29, v30, v26);
      return v39;
    }
    uint64_t v36 = *(void (**)(void *, uint64_t))(v27 + 8);
    uint64_t v35 = v27 + 8;
    v36(v29, v26);
    int v33 = *(_DWORD *)(v35 + 76);
    size_t v34 = *(void *)(v35 + 56);
  }
  if (v33) {
    size_t v37 = v34;
  }
  else {
    size_t v37 = v34 + 1;
  }
  memcpy(v29, v30, v37);
  return v39;
}

uint64_t initializeWithTake for Publishers.Delay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = v10 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v7 + v13;
  uint64_t v15 = (v7 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 32);
  uint64_t v18 = (v17 + v13 + v15) & ~v13;
  uint64_t v19 = (v17 + v13 + v16) & ~v13;
  v11(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v20 + 32;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v17 + v22 + v18) & ~v22;
  uint64_t v24 = (v17 + v22 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v23, v24, v8);
  uint64_t v25 = *(void *)(v21 + 32);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  unsigned int v29 = (void *)((v25 + v28 + v23) & ~v28);
  uint64_t v30 = (const void *)((v25 + v28 + v24) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
  {
    if (*(_DWORD *)(v27 + 84)) {
      size_t v31 = *(void *)(v27 + 64);
    }
    else {
      size_t v31 = *(void *)(v27 + 64) + 1;
    }
    memcpy(v29, v30, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v29, v30, v26);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithTake for Publishers.Delay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  uint64_t v12 = v10 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v7 + v13;
  uint64_t v39 = a1;
  uint64_t v15 = (v7 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 24);
  uint64_t v18 = (v17 + v13 + v15) & ~v13;
  uint64_t v19 = (v17 + v13 + v16) & ~v13;
  v11(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v8 - 8);
  uint64_t v21 = v20 + 40;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v17 + v22 + v18) & ~v22;
  uint64_t v24 = (v17 + v22 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(v23, v24, v8);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  unsigned int v29 = (void *)((v25 + v28 + v23) & ~v28);
  uint64_t v30 = (void *)((v25 + v28 + v24) & ~v28);
  size_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v24) = v31(v29, 1, v26);
  int v32 = v31(v30, 1, v26);
  if (v24)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v29, v30, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
      return v39;
    }
    int v33 = *(_DWORD *)(v27 + 84);
    size_t v34 = *(void *)(v27 + 64);
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v29, v30, v26);
      return v39;
    }
    uint64_t v36 = *(void (**)(void *, uint64_t))(v27 + 8);
    uint64_t v35 = v27 + 8;
    v36(v29, v26);
    int v33 = *(_DWORD *)(v35 + 76);
    size_t v34 = *(void *)(v35 + 56);
  }
  if (v33) {
    size_t v37 = v34;
  }
  else {
    size_t v37 = v34 + 1;
  }
  memcpy(v29, v30, v37);
  return v39;
}

uint64_t getEnumTagSinglePayload for Publishers.Delay(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  uint64_t v41 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v41 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v40 = v7;
  if (v7 <= v5) {
    unsigned int v7 = v5;
  }
  uint64_t v8 = *(void *)(v3 - 8);
  unsigned int v38 = *(_DWORD *)(v8 + 84);
  if (v38 <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v10 + 84);
  unsigned int v13 = v12 - 1;
  if (!v12) {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v13 = v9;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(v10 + 64);
  if (v12) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = v18 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v4 + 64) + v14;
  uint64_t v21 = v15 + v14;
  uint64_t v22 = v15 + v16;
  uint64_t v23 = *(void *)(v8 + 64) + v17;
  uint64_t v24 = a1;
  if (a2 <= v13) {
    goto LABEL_33;
  }
  uint64_t v25 = v19 + ((v23 + ((v22 + ((v21 + (v20 & ~v14)) & ~v14)) & ~v16)) & ~v17);
  char v26 = 8 * v25;
  if (v25 > 3) {
    goto LABEL_16;
  }
  unsigned int v28 = ((a2 - v13 + ~(-1 << v26)) >> v26) + 1;
  if (HIWORD(v28))
  {
    int v27 = *(_DWORD *)((char *)a1 + v25);
    if (!v27) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v28 > 0xFF)
  {
    int v27 = *(unsigned __int16 *)((char *)a1 + v25);
    if (!*(unsigned __int16 *)((char *)a1 + v25)) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
  if (v28 >= 2)
  {
LABEL_16:
    int v27 = *((unsigned __int8 *)a1 + v25);
    if (!*((unsigned char *)a1 + v25)) {
      goto LABEL_33;
    }
LABEL_23:
    int v29 = (v27 - 1) << v26;
    if (v25 > 3) {
      int v29 = 0;
    }
    if (v25)
    {
      if (v25 <= 3) {
        int v30 = v25;
      }
      else {
        int v30 = 4;
      }
      switch(v30)
      {
        case 2:
          int v31 = *a1;
          break;
        case 3:
          int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v31 = *(_DWORD *)a1;
          break;
        default:
          int v31 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v31 = 0;
    }
    return v13 + (v31 | v29) + 1;
  }
LABEL_33:
  if (!v13) {
    return 0;
  }
  if (v5 == v13)
  {
    uint64_t v32 = v41;
    int v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v34 = v5;
    return v33(v24, v34, v32);
  }
  uint64_t v36 = ~v14;
  uint64_t v24 = (unsigned __int16 *)(((unint64_t)a1 + v20) & v36);
  if (v40 == v13)
  {
    int v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v34 = v40;
    uint64_t v32 = AssociatedTypeWitness;
    return v33(v24, v34, v32);
  }
  uint64_t v24 = (unsigned __int16 *)((v22 + (((unint64_t)v24 + v21) & v36)) & ~v16);
  if (v38 == v13)
  {
    int v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v34 = v38;
    uint64_t v32 = v3;
    return v33(v24, v34, v32);
  }
  unsigned int v37 = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v24 + v23) & ~v17);
  if (v37 >= 2) {
    return v37 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Delay(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  uint64_t v52 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(v52 - 8);
  uint64_t v51 = v5;
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v53 = v6;
  unsigned int v50 = v8;
  if (v8 <= v6) {
    unsigned int v8 = v6;
  }
  uint64_t v9 = *(void *)(v4 - 8);
  unsigned int v48 = *(_DWORD *)(v9 + 84);
  if (v48 <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)(v12 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v15 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = *(void *)(v5 + 64) + v17;
  uint64_t v19 = *(void *)(v7 + 64);
  uint64_t v20 = v19 + v17;
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = v19 + v21;
  uint64_t v23 = (v19 + v21 + ((v19 + v17 + (v18 & ~v17)) & ~v17)) & ~v21;
  uint64_t v24 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v25 = *(void *)(v9 + 64) + v24;
  uint64_t v26 = (v25 + v23) & ~v24;
  size_t v27 = *(void *)(v12 + 64);
  if (v14) {
    size_t v28 = v27;
  }
  else {
    size_t v28 = v27 + 1;
  }
  size_t v29 = v26 + v28;
  if (a3 > v16)
  {
    if (v29 <= 3)
    {
      unsigned int v30 = ((a3 - v16 + ~(-1 << (8 * v29))) >> (8 * v29)) + 1;
      if (HIWORD(v30))
      {
        int v11 = 4;
      }
      else if (v30 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v30 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  if (v16 < a2)
  {
    unsigned int v31 = ~v16 + a2;
    if (v29 < 4)
    {
      int v32 = (v31 >> (8 * v29)) + 1;
      if (v29)
      {
        int v37 = v31 & ~(-1 << (8 * v29));
        bzero(a1, v26 + v28);
        if (v29 == 3)
        {
          *(_WORD *)a1 = v37;
          a1[2] = BYTE2(v37);
        }
        else if (v29 == 2)
        {
          *(_WORD *)a1 = v37;
        }
        else
        {
          *a1 = v37;
        }
      }
    }
    else
    {
      bzero(a1, v26 + v28);
      *(_DWORD *)a1 = v31;
      int v32 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v29] = v32;
        return;
      case 2:
        *(_WORD *)&a1[v29] = v32;
        return;
      case 3:
        goto LABEL_68;
      case 4:
        *(_DWORD *)&a1[v29] = v32;
        return;
      default:
        return;
    }
  }
  uint64_t v33 = ~v17;
  uint64_t v34 = ~v21;
  uint64_t v35 = ~v24;
  uint64_t v36 = a1;
  switch(v11)
  {
    case 1:
      a1[v29] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v29] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_68:
      __break(1u);
      JUMPOUT(0x18C0B723CLL);
    case 4:
      *(_DWORD *)&a1[v29] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (!a2) {
        return;
      }
LABEL_34:
      if (v53 == v16)
      {
        uint64_t v38 = v52;
        uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
        uint64_t v40 = a2;
        uint64_t v41 = v53;
LABEL_42:
        v39(v36, v40, v41, v38);
        return;
      }
      uint64_t v36 = (unsigned char *)((unint64_t)&a1[v18] & v33);
      if (v50 == v16)
      {
        uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
        uint64_t v40 = a2;
        uint64_t v41 = v50;
        uint64_t v38 = AssociatedTypeWitness;
        goto LABEL_42;
      }
      uint64_t v36 = (unsigned char *)((v22 + ((unint64_t)&v36[v20] & v33)) & v34);
      if (v48 == v16)
      {
        uint64_t v39 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v40 = a2;
        uint64_t v41 = v48;
        uint64_t v38 = v4;
        goto LABEL_42;
      }
      uint64_t v42 = (unsigned char *)((unint64_t)&v36[v25] & v35);
      if (v15 >= a2)
      {
        uint64_t v46 = *(void (**)(unint64_t, void))(v13 + 56);
        unint64_t v47 = (unint64_t)&v36[v25] & v35;
        v46(v47, a2 + 1);
      }
      else
      {
        if (v28 <= 3) {
          int v43 = ~(-1 << (8 * v28));
        }
        else {
          int v43 = -1;
        }
        if (v28)
        {
          int v44 = v43 & (~v15 + a2);
          if (v28 <= 3) {
            int v45 = v28;
          }
          else {
            int v45 = 4;
          }
          bzero(v42, v28);
          switch(v45)
          {
            case 2:
              *(_WORD *)uint64_t v42 = v44;
              break;
            case 3:
              *(_WORD *)uint64_t v42 = v44;
              v42[2] = BYTE2(v44);
              break;
            case 4:
              *(_DWORD *)uint64_t v42 = v44;
              break;
            default:
              unsigned char *v42 = v44;
              break;
          }
        }
      }
      return;
  }
}

uint64_t sub_18C0B7274()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(void *)(type metadata accessor for Subscribers.Completion() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, AssociatedTypeWitness); {

  }
  return swift_deallocObject();
}

uint64_t sub_18C0B73E0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t Publishers.Drop.init(upstream:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for Publishers.Drop();
  *(void *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t Publishers.Drop.upstream.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Publishers.Drop.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t *Publishers.Drop.Inner.__allocating_init(downstream:count:)(uint64_t a1, uint64_t a2)
{
  return Publishers.Drop.Inner.init(downstream:count:)(a1, a2);
}

uint64_t Publishers.Drop.Inner.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  default argument 3 of Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v3);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void Publishers.Drop.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 1886351940;
  a1[1] = 0xE400000000000000;
}

uint64_t Publishers.Drop.Inner.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + *(void *)(*(void *)v0 + 120));
  os_unfair_lock_lock(v1);
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 128);
  swift_beginAccess();
  outlined init with copy of Subscription?(v2, (uint64_t)v9);
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  swift_beginAccess();
  outlined assign with take of Subscription?((uint64_t)&v6, v2);
  swift_endAccess();
  os_unfair_lock_unlock(v1);
  outlined init with copy of Subscription?((uint64_t)v9, (uint64_t)&v6);
  uint64_t v3 = *((void *)&v7 + 1);
  if (*((void *)&v7 + 1))
  {
    uint64_t v4 = v8;
    __swift_project_boxed_opaque_existential_1(&v6, *((uint64_t *)&v7 + 1));
    (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
    outlined destroy of Subscription?((uint64_t)v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  }
  else
  {
    outlined destroy of Subscription?((uint64_t)v9);
    return outlined destroy of Subscription?((uint64_t)&v6);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Publishers.Drop<A>.Inner<A1>()
{
  return 1886351940;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Publishers.Drop<A>.Inner<A1>()
{
  return Publishers.Drop.Inner.customMirror.getter();
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Publishers.Drop<A>.Inner<A1>(void *a1@<X8>)
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance Publishers.Drop<A>.Inner<A1>()
{
  return Publishers.Drop.Inner.cancel()();
}

BOOL static Publishers.Drop<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Publishers.Drop();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if (v11)
  {
    uint64_t v13 = *(void *)&v10[*(int *)(v4 + 36)];
    int v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v10, v4);
    uint64_t v15 = *(void *)&v8[*(int *)(v4 + 36)];
    v14(v8, v4);
    return v13 == v15;
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    return 0;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.Drop<A>(uint64_t a1, uint64_t a2)
{
  return static Publishers.Drop<>.== infix(_:_:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for Publishers.Drop(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0B7BD0);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Publishers.Drop(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unsigned int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C0B7D90);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t Future<>.value.getter(uint64_t a1)
{
  uint64_t v4 = *v1;
  v2[2] = *(void *)(*v1 + 80);
  uint64_t v5 = MEMORY[0x1E4FBC248];
  v2[3] = MEMORY[0x1E4FBC248];
  v2[4] = v5;
  uint64_t v6 = MEMORY[0x1E4FBC278];
  v2[5] = MEMORY[0x1E4FBC278];
  v2[6] = v6;
  type metadata accessor for ContinuationSubscriber();
  v2[7] = v1;
  unsigned int v7 = (void *)swift_task_alloc();
  v2[8] = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  *unsigned int v7 = v2;
  v7[1] = Future<>.value.getter;
  return static ContinuationSubscriber.withUnsafeSubscription<A>(_:)(a1, (uint64_t)(v2 + 7), v4, WitnessTable);
}

uint64_t Future<>.value.getter()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t Future.value.getter(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = *v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v7 = *(void *)(v4 + 96);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v5 + 80);
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 40) = v7;
  *(void *)(v2 + 48) = MEMORY[0x1E4FBC0F0];
  type metadata accessor for ContinuationSubscriber();
  *(void *)(v2 + 56) = v1;
  size_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  void *v8 = v2;
  v8[1] = Future.value.getter;
  return static ContinuationSubscriber.withUnsafeThrowingSubscription<A>(_:)(a1, v2 + 56, v5, WitnessTable);
}

uint64_t Future.value.getter()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](Future.value.getter, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Publishers.First.init(upstream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Publishers.FirstWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.FirstWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.FirstWhere, a6);
}

uint64_t Publisher.tryFirst(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Publisher.first(where:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFirstWhere, a5);
}

uint64_t Publishers.TryFirstWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Publishers.FirstWhere.init(upstream:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Publishers.TryFirstWhere, a6);
}

uint64_t Publishers.FirstWhere.init(upstream:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  int v14 = (void *)(a7 + *(int *)(result + 36));
  *int v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for Publishers.TryFirstWhere()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Publishers.First.Inner.description.getter()
{
  return 0x7473726946;
}

uint64_t Publishers.FirstWhere.Inner.description.getter()
{
  return 0x7473726946797254;
}

uint64_t Publishers.TryFirstWhere.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.FirstWhere.receive<A>(subscriber:)(a1, a2, a3, a4, (uint64_t (*)(void, void *))type metadata accessor for Publishers.TryFirstWhere.Inner, (uint64_t)&unk_1ED9986A8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@unowned Bool, @error @owned Error));
}

uint64_t Publishers.TryFirstWhere.Inner.description.getter()
{
  return 0x7473726946797254;
}

uint64_t Publishers.TryFirstWhere.Inner.receive(newValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v12 = (char *)v16 - v11;
  (*(void (**)(void *__return_ptr, uint64_t))((char *)v2 + *(void *)(v4 + 152)))(v16, a1);
  if (LOBYTE(v16[0]) == 1)
  {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    int v14 = (char *)v2 + *(void *)(*v2 + 136);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v14, v10, v6);
    swift_endAccess();
  }
  return 0;
}

uint64_t vtable thunk for ReduceProducer.receive(newValue:) dispatching to Publishers.TryFirstWhere.Inner.receive(newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = Publishers.TryFirstWhere.Inner.receive(newValue:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Publishers.TryFirstWhere<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Publishers.TryFirstWhere.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t static Publishers.First<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> Publishers.First<A>()
{
  return static Publishers.First<>.== infix(_:_:)();
}

uint64_t type metadata accessor for Publishers.TryFirstWhere.Inner()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Publishers.First(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Publishers.First(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18C0B8ADCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for Publishers.FirstWhere(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18C0B8C58);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Publishers.FirstWhere(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18C0B8E4CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_18C0B8E74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x1F4187538]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x1F4187540]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x1F4187578]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x1F4187588]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1F4183500]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t BidirectionalCollection.last(where:)()
{
  return MEMORY[0x1F41836D8]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x1F41836E0]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x1F4183738]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1F4183748]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x1F4183750]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t Sequence.allSatisfy(_:)()
{
  return MEMORY[0x1F4183BE0]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x1F4183BF0]();
}

uint64_t Sequence.drop(while:)()
{
  return MEMORY[0x1F4183C30]();
}

uint64_t Sequence.prefix(_:)()
{
  return MEMORY[0x1F4183C58]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x1F4183C68]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t Sequence.dropFirst(_:)()
{
  return MEMORY[0x1F4183CA8]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x1F4183D60]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t static Array.+ infix(_:_:)()
{
  return MEMORY[0x1F4183ED8]();
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t type metadata accessor for UnsafeContinuation()
{
  return MEMORY[0x1F4187E00]();
}

uint64_t Set.count.getter()
{
  return MEMORY[0x1F4184188]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x1F41841A8]();
}

uint64_t Set.remove(_:)()
{
  return MEMORY[0x1F41841B0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x1F4184230]();
}

uint64_t Set.init<A>(_:)()
{
  return MEMORY[0x1F4184250]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.indices.getter()
{
  return MEMORY[0x1F4184318]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1F4184330]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x1F4184398]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x1F41843C0]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x1F4184438]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append(_:)()
{
  return MEMORY[0x1F4184470]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x1F41844A0]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
}

uint64_t static RangeReplaceableCollection.+ infix<A>(_:_:)()
{
  return MEMORY[0x1F41844E0]();
}

{
  return MEMORY[0x1F41844E8]();
}

{
  return MEMORY[0x1F41844F0]();
}

uint64_t Range.relative<A>(to:)()
{
  return MEMORY[0x1F41845A8]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x1F4184830]();
}

uint64_t dispatch thunk of Strideable.distance(to:)()
{
  return MEMORY[0x1F4184838]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x1F4184938]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x1F4184940]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x1F4184950]();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return MEMORY[0x1F4184988]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x1F4184A40]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t _forEachField(of:options:body:)()
{
  return MEMORY[0x1F4184E78]();
}

uint64_t type metadata accessor for PrefixSequence()
{
  return MEMORY[0x1F4184E90]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t dispatch thunk of TextOutputStream.write(_:)()
{
  return MEMORY[0x1F4185080]();
}

Swift::Void __swiftcall TextOutputStream._lock()()
{
}

Swift::Void __swiftcall TextOutputStream._unlock()()
{
}

uint64_t dispatch thunk of CustomReflectable.customMirror.getter()
{
  return MEMORY[0x1F41850C8]();
}

uint64_t type metadata accessor for DropFirstSequence()
{
  return MEMORY[0x1F41850D0]();
}

uint64_t type metadata accessor for DropWhileSequence()
{
  return MEMORY[0x1F41850D8]();
}

uint64_t static _EachFieldOptions.ignoreUnknown.getter()
{
  return MEMORY[0x1F4185188]();
}

uint64_t static _EachFieldOptions.classType.getter()
{
  return MEMORY[0x1F4185190]();
}

uint64_t type metadata accessor for _EachFieldOptions()
{
  return MEMORY[0x1F4185198]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x1F41852E0]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x1F41852E8]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x1F41852F0]();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return MEMORY[0x1F41852F8]();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return MEMORY[0x1F4185300]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185570]();
}

{
  return MEMORY[0x1F4185588]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x1F41855F0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185698]();
}

{
  return MEMORY[0x1F41856B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x1F4185710]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t type metadata accessor for ReferenceWritableKeyPath()
{
  return MEMORY[0x1F4185778]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1F4185A38]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x1F4185A80]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185B18]();
}

uint64_t dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter()
{
  return MEMORY[0x1F4185D50]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t print<A>(_:separator:terminator:to:)()
{
  return MEMORY[0x1F4185E88]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1F4185F28]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1F4185F38]();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F50]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F60]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x1F4186008]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

int raise(int a1)
{
  return MEMORY[0x1F40CDC00](*(void *)&a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1F4188200]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1F4186498]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1F41864C8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1F41865C8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1F4186630]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1F4186648]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186718]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186780]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1F41868A8]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1F41868B0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1F41868D0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1F41868D8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}