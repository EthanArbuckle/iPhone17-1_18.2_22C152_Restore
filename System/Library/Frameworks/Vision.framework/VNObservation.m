@interface VNObservation
+ (BOOL)supportsSecureCoding;
+ (id)defaultOriginatingRequestClassNameForRequestRevision:(unint64_t)a3;
+ (id)defaultOriginatingRequestSpecifierForRevision:(unint64_t)a3;
- (BOOL)isEqual:(id)a3;
- (CMTimeRange)timeRange;
- (NSPointerArray)requestImageBuffers;
- (NSPointerArray)requestImageBuffersCacheKeys;
- (NSUUID)uuid;
- (VNConfidence)confidence;
- (VNObservation)init;
- (VNObservation)initWithCoder:(id)a3;
- (VNObservation)initWithOriginatingRequestSpecifier:(id)a3;
- (VNObservation)initWithRequestRevision:(unint64_t)a3;
- (VNObservation)observationWithOriginatingRequestSpecifier:(id)a3;
- (VNRequestSpecifier)originatingRequestSpecifier;
- (id)VNCoreMLTransformerDetectionprintAndReturnError:(id *)a3;
- (id)VNCoreMLTransformerSceneprintsAndReturnError:(id *)a3;
- (id)VNEntityIdentificationModelPrintWithOriginatingRequestSpecifier:(id)a3 error:(id *)a4;
- (id)debugQuickLookObject;
- (id)description;
- (id)getDataDetectorResults:(id *)a3;
- (id)getDataDetectorResultsForString:(id)a3 error:(id *)a4;
- (id)vn_cloneObject;
- (unint64_t)hash;
- (unint64_t)requestRevision;
- (void)encodeWithCoder:(id)a3;
- (void)setConfidence:(float)a3;
- (void)setRequestImageBuffers:(id)a3;
- (void)setRequestImageBuffersCacheKeys:(id)a3;
- (void)setTimeRange:(id *)a3;
- (void)setUUID:(id)a3;
@end

@implementation VNObservation

- (id)VNEntityIdentificationModelPrintWithOriginatingRequestSpecifier:(id)a3 error:(id *)a4
{
  id v5 = a3;
  if (a4)
  {
    v6 = NSString;
    v7 = (objc_class *)objc_opt_class();
    v8 = NSStringFromClass(v7);
    v9 = [v6 stringWithFormat:@"%@ does not provide an entity print that is compatible with a print generated by %@", v8, v5];

    VNEntityIdentificationModelErrorWithLocalizedDescriptionAndUnderlyingError(3, v9, 0);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
  }
  return 0;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_requestImageBuffersCacheKeys, 0);
  objc_storeStrong((id *)&self->_requestImageBuffers, 0);
  objc_storeStrong((id *)&self->_uuid, 0);

  objc_storeStrong((id *)&self->_originatingRequestSpecifier, 0);
}

- (void)setRequestImageBuffersCacheKeys:(id)a3
{
}

- (NSPointerArray)requestImageBuffersCacheKeys
{
  return self->_requestImageBuffersCacheKeys;
}

- (void)setRequestImageBuffers:(id)a3
{
}

- (NSPointerArray)requestImageBuffers
{
  return self->_requestImageBuffers;
}

- (void)setTimeRange:(id *)a3
{
  long long v3 = *(_OWORD *)&a3->var0.var0;
  long long v4 = *(_OWORD *)&a3->var1.var1;
  *(_OWORD *)&self->_timeRange.start.epoch = *(_OWORD *)&a3->var0.var3;
  *(_OWORD *)&self->_timeRange.duration.timescale = v4;
  *(_OWORD *)&self->_timeRange.start.value = v3;
}

- (CMTimeRange)timeRange
{
  long long v3 = *(_OWORD *)&self[1].start.epoch;
  *(_OWORD *)&retstr->start.value = *(_OWORD *)&self[1].start.value;
  *(_OWORD *)&retstr->start.epoch = v3;
  *(_OWORD *)&retstr->duration.timescale = *(_OWORD *)&self[1].duration.timescale;
  return self;
}

- (void)setConfidence:(float)a3
{
  self->_confidence = a3;
}

- (VNConfidence)confidence
{
  return self->_confidence;
}

- (void)setUUID:(id)a3
{
}

- (NSUUID)uuid
{
  return self->_uuid;
}

- (id)debugQuickLookObject
{
  long long v3 = [(VNObservation *)self requestImageBuffersCacheKeys];
  if ([v3 count])
  {
    long long v4 = [(VNObservation *)self requestImageBuffers];
    id v5 = (void *)[v4 count];

    if (!v5) {
      goto LABEL_9;
    }
    v6 = [(VNObservation *)self requestImageBuffers];
    long long v3 = [v6 pointerAtIndex:0];

    v7 = [(VNObservation *)self requestImageBuffersCacheKeys];
    v8 = [v7 pointerAtIndex:0];

    v9 = (__CVBuffer *)[v3 cachedPixelBufferRepresentationForKey:v8];
    v10 = v9;
    if (v9)
    {
      size_t Width = CVPixelBufferGetWidth(v9);
      size_t Height = CVPixelBufferGetHeight(v10);
      v13 = [MEMORY[0x1E4F1E050] imageWithCVPixelBuffer:v10];
      CVPixelBufferRelease(v10);
      v14 = [MEMORY[0x1E4F1E018] contextWithOptions:0];
      v15 = (CGImage *)objc_msgSend(v14, "createCGImage:fromRect:", v13, 0.0, 0.0, (double)Width, (double)Height);
      id v5 = VNDebugImageFromCGImage((uint64_t)v15);
      CGImageRelease(v15);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }

LABEL_9:

  return v5;
}

- (id)getDataDetectorResultsForString:(id)a3 error:(id *)a4
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v25 = 0;
  v7 = (const void *)DDScannerCreate();
  v8 = 0;
  if (v7)
  {
    if (DDScannerScanString())
    {
      CFArrayRef v11 = (const __CFArray *)DDScannerCopyResultsWithOptions();
      CFRelease(v7);
      if (v11)
      {
        CFIndex Count = CFArrayGetCount(v11);
        v8 = [MEMORY[0x1E4F5F150] resultsFromCoreResults:v11];
        CFRelease(v11);
        if (Count < 1)
        {
          v9 = 0;
        }
        else
        {
          v9 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:Count];
          long long v23 = 0u;
          long long v24 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          id v13 = v8;
          uint64_t v14 = [v13 countByEnumeratingWithState:&v21 objects:v26 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v22;
            do
            {
              for (uint64_t i = 0; i != v14; ++i)
              {
                if (*(void *)v22 != v15) {
                  objc_enumerationMutation(v13);
                }
                uint64_t v17 = *(void *)(*((void *)&v21 + 1) + 8 * i);
                v18 = [VNDataDetectorResult alloc];
                v19 = -[VNDataDetectorResult initWithDDScannerResult:observation:](v18, "initWithDDScannerResult:observation:", v17, self, (void)v21);
                [v9 addObject:v19];
              }
              uint64_t v14 = [v13 countByEnumeratingWithState:&v21 objects:v26 count:16];
            }
            while (v14);
          }

          v8 = v13;
        }
        goto LABEL_19;
      }
    }
    else
    {
      CFRelease(v7);
    }
LABEL_17:
    v9 = 0;
    goto LABEL_20;
  }
  if (!a4) {
    goto LABEL_17;
  }
  +[VNError errorWithCode:9 message:@"Could not create DataDetector" underlyingError:v25];
  v9 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_19:

LABEL_20:

  return v9;
}

- (id)getDataDetectorResults:(id *)a3
{
  if (a3)
  {
    long long v4 = NSString;
    id v5 = (objc_class *)objc_opt_class();
    id v6 = NSStringFromClass(v5);
    v7 = [v4 stringWithFormat:@"Data detecor not supported for %@", v6];
    *a3 = +[VNError errorWithCode:8 message:v7];
  }
  return 0;
}

- (VNRequestSpecifier)originatingRequestSpecifier
{
  return self->_originatingRequestSpecifier;
}

- (unint64_t)requestRevision
{
  v2 = [(VNObservation *)self originatingRequestSpecifier];
  unint64_t v3 = [v2 requestRevision];

  return v3;
}

- (BOOL)isEqual:(id)a3
{
  long long v4 = (VNObservation *)a3;
  if (self == v4)
  {
    BOOL v12 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v5 = v4;
      originatingRequestSpecifier = self->_originatingRequestSpecifier;
      v7 = [(VNObservation *)v5 originatingRequestSpecifier];
      LOBYTE(originatingRequestSpecifier) = [(VNRequestSpecifier *)originatingRequestSpecifier isEqual:v7];

      if ((originatingRequestSpecifier & 1) != 0
        && (uuid = self->_uuid,
            [(VNObservation *)v5 uuid],
            v9 = objc_claimAutoreleasedReturnValue(),
            LOBYTE(uuid) = [(NSUUID *)uuid isEqual:v9],
            v9,
            (uuid & 1) != 0)
        && (float confidence = self->_confidence, [(VNObservation *)v5 confidence], confidence == v11))
      {
        long long v14 = *(_OWORD *)&self->_timeRange.start.epoch;
        *(_OWORD *)&range1.start.value = *(_OWORD *)&self->_timeRange.start.value;
        *(_OWORD *)&range1.start.epoch = v14;
        *(_OWORD *)&range1.duration.timescale = *(_OWORD *)&self->_timeRange.duration.timescale;
        if (v5) {
          [(VNObservation *)v5 timeRange];
        }
        else {
          memset(&v15, 0, sizeof(v15));
        }
        BOOL v12 = CMTimeRangeEqual(&range1, &v15) != 0;
      }
      else
      {
        BOOL v12 = 0;
      }
    }
    else
    {
      BOOL v12 = 0;
    }
  }

  return v12;
}

- (unint64_t)hash
{
  unint64_t v3 = [(VNObservation *)self uuid];
  uint64_t v4 = [v3 hash];

  unint64_t v5 = [(VNRequestSpecifier *)self->_originatingRequestSpecifier hash] ^ __ROR8__(v4, 51);
  float confidence = self->_confidence;
  uint64_t v7 = LODWORD(confidence);
  if (confidence == 0.0) {
    uint64_t v7 = 0;
  }
  return self->_timeRange.duration.epoch ^ __ROR8__(self->_timeRange.duration.flags ^ __ROR8__(self->_timeRange.duration.timescale ^ __ROR8__(self->_timeRange.duration.value ^ __ROR8__(self->_timeRange.start.epoch ^ __ROR8__(self->_timeRange.start.flags ^ __ROR8__(self->_timeRange.start.timescale ^ __ROR8__(self->_timeRange.start.value, 51), 51), 51), 51), 51), 51), 51) ^ __ROR8__(v7 ^ __ROR8__(v5, 51), 51);
}

- (id)description
{
  id v3 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  v16.receiver = self;
  v16.super_class = (Class)VNObservation;
  uint64_t v4 = [(VNObservation *)&v16 description];
  unint64_t v5 = [(VNObservation *)self uuid];
  id v6 = [v5 UUIDString];
  [v3 appendFormat:@"%@ %@", v4, v6];

  if (self->_originatingRequestSpecifier) {
    [v3 appendFormat:@" %@", self->_originatingRequestSpecifier];
  }
  [(VNObservation *)self confidence];
  objc_msgSend(v3, "appendFormat:", @" confidence=%f", v7);
  memset(&v15, 0, sizeof(v15));
  [(VNObservation *)self timeRange];
  CMTimeRange range1 = v15;
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&range2.start.value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&range2.start.epoch = v8;
  *(_OWORD *)&range2.duration.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  if (!CMTimeRangeEqual(&range1, &range2))
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTimeRange range = v15;
    v10 = (__CFString *)CMTimeRangeCopyDescription(v9, &range);
    [v3 appendFormat:@" timeRange=%@", v10];
  }

  return v3;
}

- (id)vn_cloneObject
{
  uint64_t v3 = [objc_alloc((Class)objc_opt_class()) initWithOriginatingRequestSpecifier:self->_originatingRequestSpecifier];
  if (v3)
  {
    uint64_t v4 = [(NSUUID *)self->_uuid copy];
    unint64_t v5 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v4;

    *(float *)(v3 + 16) = self->_confidence;
    long long v6 = *(_OWORD *)&self->_timeRange.start.value;
    long long v7 = *(_OWORD *)&self->_timeRange.duration.timescale;
    *(_OWORD *)(v3 + 64) = *(_OWORD *)&self->_timeRange.start.epoch;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 48) = v6;
    objc_storeStrong((id *)(v3 + 32), self->_requestImageBuffers);
    objc_storeStrong((id *)(v3 + 40), self->_requestImageBuffersCacheKeys);
  }

  return (id)v3;
}

- (void)encodeWithCoder:(id)a3
{
  id v4 = a3;
  objc_msgSend(v4, "vn_encodeCodingVersion:forKey:", 0, @"VNObservation");
  [v4 encodeObject:self->_originatingRequestSpecifier forKey:@"request"];
  [v4 encodeObject:self->_uuid forKey:@"uuid"];
  *(float *)&double v5 = self->_confidence;
  objc_msgSend(v4, "vn_encodeValidatedConfidence:forKey:", @"confidence", v5);
  long long v6 = *(_OWORD *)&self->_timeRange.start.epoch;
  v7[0] = *(_OWORD *)&self->_timeRange.start.value;
  v7[1] = v6;
  v7[2] = *(_OWORD *)&self->_timeRange.duration.timescale;
  objc_msgSend(v4, "vn_encodeTimeRange:forKey:", v7, @"timeRange");
}

- (VNObservation)initWithCoder:(id)a3
{
  id v4 = a3;
  double v5 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"request"];
  if (!v5)
  {
    if ([v4 containsValueForKey:@"requestRevision"]) {
      uint64_t v6 = [v4 decodeIntegerForKey:@"requestRevision"];
    }
    else {
      uint64_t v6 = 1;
    }
    long long v7 = [(id)objc_opt_class() defaultOriginatingRequestClassNameForRequestRevision:v6];
    if (v7)
    {
      id v23 = 0;
      double v5 = +[VNRequestSpecifier specifierForRequestClassName:v7 revision:v6 error:&v23];
      id v8 = v23;
      CFAllocatorRef v9 = v8;
      if (!v5)
      {
        [v4 failWithError:v8];

        double v5 = 0;
LABEL_12:
        long long v14 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      double v5 = 0;
    }
  }
  v22.receiver = self;
  v22.super_class = (Class)VNObservation;
  self = [(VNObservation *)&v22 init];
  if (!self) {
    goto LABEL_12;
  }
  v10 = [MEMORY[0x1E4F29128] UUID];
  uuid = self->_uuid;
  self->_uuid = v10;

  objc_storeStrong((id *)&self->_originatingRequestSpecifier, v5);
  self->_float confidence = 1.0;
  uint64_t v12 = MEMORY[0x1E4F1FA30];
  long long v13 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&self->_timeRange.start.value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&self->_timeRange.start.epoch = v13;
  *(_OWORD *)&self->_timeRange.duration.timescale = *(_OWORD *)(v12 + 32);
  if (objc_msgSend(v4, "vn_decodeCodingVersionForKey:", @"VNObservation")) {
    goto LABEL_12;
  }
  CMTimeRange v15 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"uuid"];
  objc_super v16 = self->_uuid;
  self->_uuid = v15;

  objc_msgSend(v4, "vn_decodeValidatedConfidenceForKey:", @"confidence");
  self->_float confidence = v17;
  if (v4)
  {
    objc_msgSend(v4, "vn_decodeTimeRangeForKey:", @"timeRange");
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
  }
  *(_OWORD *)&self->_timeRange.start.value = v19;
  *(_OWORD *)&self->_timeRange.start.epoch = v20;
  *(_OWORD *)&self->_timeRange.duration.timescale = v21;
  self = self;
  long long v14 = self;
LABEL_18:

  return v14;
}

- (VNObservation)initWithOriginatingRequestSpecifier:(id)a3
{
  id v5 = a3;
  v12.receiver = self;
  v12.super_class = (Class)VNObservation;
  uint64_t v6 = [(VNObservation *)&v12 init];
  if (v6)
  {
    uint64_t v7 = [MEMORY[0x1E4F29128] UUID];
    uuid = v6->_uuid;
    v6->_uuid = (NSUUID *)v7;

    objc_storeStrong((id *)&v6->_originatingRequestSpecifier, a3);
    v6->_float confidence = 1.0;
    uint64_t v9 = MEMORY[0x1E4F1FA30];
    long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
    *(_OWORD *)&v6->_timeRange.start.value = *MEMORY[0x1E4F1FA30];
    *(_OWORD *)&v6->_timeRange.start.epoch = v10;
    *(_OWORD *)&v6->_timeRange.duration.timescale = *(_OWORD *)(v9 + 32);
  }

  return v6;
}

- (VNObservation)initWithRequestRevision:(unint64_t)a3
{
  id v4 = [(id)objc_opt_class() defaultOriginatingRequestSpecifierForRevision:a3];
  if (v4)
  {
    self = [(VNObservation *)self initWithOriginatingRequestSpecifier:v4];
    id v5 = self;
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

- (VNObservation)init
{
  return [(VNObservation *)self initWithRequestRevision:0];
}

- (VNObservation)observationWithOriginatingRequestSpecifier:(id)a3
{
  id v5 = a3;
  if ([(VNRequestSpecifier *)self->_originatingRequestSpecifier isEqual:v5])
  {
    uint64_t v6 = self;
  }
  else
  {
    uint64_t v6 = [(VNObservation *)self vn_cloneObject];
    objc_storeStrong((id *)&v6->_originatingRequestSpecifier, a3);
  }

  return v6;
}

+ (BOOL)supportsSecureCoding
{
  return 1;
}

+ (id)defaultOriginatingRequestSpecifierForRevision:(unint64_t)a3
{
  id v4 = [(id)objc_opt_class() defaultOriginatingRequestClassNameForRequestRevision:a3];
  id v13 = 0;
  id v5 = +[VNRequestSpecifier specifierForRequestClassName:v4 revision:a3 error:&v13];
  id v6 = v13;
  if (!a3 || v5)
  {
    id v11 = v5;
  }
  else
  {
    uint64_t v7 = NSString;
    id v8 = (objc_class *)objc_opt_class();
    uint64_t v9 = NSStringFromClass(v8);
    long long v10 = [v7 stringWithFormat:@"%@ could not resolve originating request class of %@: %@", v9, v4, v6];
    +[VNError VNAssert:0 log:v10];

    id v11 = 0;
  }

  return v11;
}

+ (id)defaultOriginatingRequestClassNameForRequestRevision:(unint64_t)a3
{
  return 0;
}

- (id)VNCoreMLTransformerDetectionprintAndReturnError:(id *)a3
{
  if (a3)
  {
    id v4 = [NSString alloc];
    id v5 = (objc_class *)objc_opt_class();
    id v6 = NSStringFromClass(v5);
    uint64_t v7 = (void *)[v4 initWithFormat:@"%@ cannot provide a detectionprint", v6];

    *a3 = +[VNError errorForDataUnavailableWithLocalizedDescription:v7];
  }
  return 0;
}

- (id)VNCoreMLTransformerSceneprintsAndReturnError:(id *)a3
{
  if (a3)
  {
    id v4 = [NSString alloc];
    id v5 = (objc_class *)objc_opt_class();
    id v6 = NSStringFromClass(v5);
    uint64_t v7 = (void *)[v4 initWithFormat:@"%@ cannot provide sceneprints", v6];

    *a3 = +[VNError errorForDataUnavailableWithLocalizedDescription:v7];
  }
  return 0;
}

@end