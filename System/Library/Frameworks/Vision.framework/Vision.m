void apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::createSubimageRotatedAroundCenter(apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage *this, apple::vision::libraries::facecore::utils::aev::AEVGImage *a2, CGPoint a3, float a4)
{
  CGFloat y;
  CGFloat x;
  __float2 v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t vars8;

  y = a3.y;
  x = a3.x;
  v8 = __sincosf_stret(a4);
  v9 = x;
  v10 = y;

  apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::createSubimageRotatedAroundCenter(this, a2, *(CGPoint *)&v9, v8.__cosval, v8.__sinval);
}

void apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::createSubimageRotatedAroundCenter(apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage *this, apple::vision::libraries::facecore::utils::aev::AEVGImage *a2, CGPoint a3, float a4, float a5)
{
}

void sub_1DBA01068(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10B1C40162CB8B9);
  _Unwind_Resume(a1);
}

double apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::computeInvertedRotationMatrix(apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage *this)
{
  double v1 = *((double *)this + 11);
  if (!*((unsigned char *)this + 120)) {
    double v1 = -v1;
  }
  float v2 = *((double *)this + 12);
  float v3 = v1;
  double v4 = 1.0 / (float)((float)(v3 * v3) + (float)(v2 * v2));
  double result = v4 * v2;
  *((double *)this + 7) = result;
  *((double *)this + 8) = v4 * (float)-v3;
  *((double *)this + 9) = v4 * v3;
  *((double *)this + 10) = result;
  return result;
}

void apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::computeImageData(apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage *this)
{
  apple::vision::libraries::facecore::utils::aev::AEVGRotatedImage::computeInvertedRotationMatrix(this);
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    if (!*((void *)this + 2))
    {
      uint64_t v3 = *(void *)(v2 + 16);
      *((void *)this + 2) = malloc_type_malloc(8 * *((int *)this + 8), 0x10040436913F5uLL);
      *((void *)this + 1) = malloc_type_malloc(*((int *)this + 8) * (uint64_t)*((int *)this + 7), 0x100004077774924uLL);
      double v4 = dispatch_get_global_queue(2, 0);
      size_t v5 = *((int *)this + 9);
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = ___ZN5apple6vision9libraries8facecore5utils3aev16AEVGRotatedImage16computeImageDataEv_block_invoke;
      v6[3] = &__block_descriptor_48_e8_v16__0Q8l;
      v6[4] = this;
      v6[5] = v3;
      dispatch_apply(v5, v4, v6);
    }
  }
}

uint64_t ___ZN5apple6vision9libraries8facecore5utils3aev16AEVGRotatedImage16computeImageDataEv_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(int *)(v2 + 32);
  unint64_t v4 = *(int *)(v2 + 36);
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if ((int)v5 < (int)v6)
  {
    int v7 = v5 - (int)v3 / 2;
    unint64_t v5 = (int)v5;
    int v8 = *(_DWORD *)(v2 + 28);
    do
    {
      *(void *)(*(void *)(v2 + 16) + 8 * v5) = *(void *)(v2 + 8) + v5 * v8;
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(*(void *)(v2 + 16) + 8 * v5);
        int v11 = -(v8 >> 1);
        do
        {
          *(unsigned char *)(v10 + v9) = *(unsigned char *)(*(void *)(*(void *)(result + 40)
                                                      + 8
                                                      * (int)vcvtmd_s64_f64(*(double *)(v2 + 112)+ *(double *)(v2 + 80) * (double)v7+ *(double *)(v2 + 72) * (double)(v11 + (int)v9)+ 0.5))+ (int)vcvtmd_s64_f64(*(double *)(v2 + 104)+ *(double *)(v2 + 64) * (double)v7+ *(double *)(v2 + 56) * (double)(v11 + (int)v9)+ 0.5));
          ++v9;
        }
        while (v9 < *(int *)(v2 + 28));
        int v8 = *(_DWORD *)(v2 + 28);
      }
      ++v7;
      ++v5;
    }
    while (v5 != (int)v6);
  }
  return result;
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::KPointDescriptorArray(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this)
{
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::~KPointDescriptorArray(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::swap(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *a2)
{
  uint64_t v3 = *(void *)this;
  *(void *)this = *(void *)a2;
  *(void *)a2 = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  *((_DWORD *)this + 262) = *((_DWORD *)a2 + 262);
  memccpy((char *)this + 24, (char *)a2 + 24, 256, 4uLL);
  return this;
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::clear(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this)
{
  *((void *)this + 1) = *(void *)this;
  bzero((char *)this + 24, 0x404uLL);
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::computeFirstAndLastRows(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a2, int **a3, int **a4)
{
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6C28C50, MEMORY[0x1E4FBA1C8]);
}

void sub_1DBA015A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  double v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

#error "1DBA01624: too big function (funcsize=0)"

uint64_t apple::vision::libraries::facecore::mod::classifiers::SvmModel::SvmModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  std::string::basic_string[abi:ne180100]<0>(__p, "fc-svm-sv.dat");
  apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
  *(void *)(a1 + 80) = v7;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  int v8 = *(void **)(a2 + 88);
  if (!*v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "fc-svm-sv-coef.dat");
    apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
    **(void **)(a2 + 88) = v9;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    int v8 = *(void **)(a2 + 88);
  }
  *(void *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

void sub_1DBA26598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::classifiers::SvmModel::predict_probability(apple::vision::libraries::facecore::mod::classifiers::SvmModel *this, const float *a2, float *a3)
{
  uint64_t v6 = *((int *)this + 18);
  v67 = (float *)malloc_type_malloc((int)((2 * ((v6 - 1) * v6 + (((int)v6 - 1) * (int)v6 < 0))) & 0xFFFFFFFC), 0xF05B1280uLL);
  apple::vision::libraries::facecore::mod::classifiers::SvmModel::predict_values(this, a2, v67);
  uint64_t size = 8 * v6;
  uint64_t v7 = (void **)malloc_type_malloc(8 * v6, 0x150AB347uLL);
  unint64_t v8 = v6;
  uint64_t v65 = v6;
  v71 = v7;
  if ((int)v6 >= 1)
  {
    size_t v9 = 4 * v6;
    uint64_t v6 = v6;
    do
    {
      *v7++ = malloc_type_malloc(v9, 0xDD9669BBuLL);
      --v6;
    }
    while (v6);
    int v10 = 0;
    uint64_t v7 = v71;
    int v11 = v71 + 1;
    unint64_t v12 = v8 - 1;
    uint64_t v13 = 4;
    do
    {
      uint64_t v14 = v6 + 1;
      if (v6 + 1 < v8)
      {
        uint64_t v68 = v13;
        uint64_t v15 = 0;
        v16 = v7[v6];
        v17 = &v67[v10];
        uint64_t v18 = *((void *)this + 13) + 4 * v10;
        int v69 = v10;
        uint64_t v19 = *((void *)this + 14) + 4 * v10;
        uint64_t v20 = (uint64_t)v16 + v13;
        do
        {
          float v21 = *(float *)(v19 + 4 * v15) + (float)(v17[v15] * *(float *)(v18 + 4 * v15));
          if (v21 >= 0.0)
          {
            double v22 = expf(-v21);
            double v23 = v22;
          }
          else
          {
            double v22 = expf(v21);
            double v23 = 1.0;
          }
          float v24 = v23 / (v22 + 1.0);
          if (v24 < 0.0000001) {
            float v24 = 0.0000001;
          }
          if (v24 > 1.0) {
            float v24 = 1.0;
          }
          *(float *)(v20 + 4 * v15) = v24;
          *((float *)v11[v15++] + v6) = 1.0 - v24;
        }
        while (v12 != v15);
        int v10 = v69 + v15;
        uint64_t v7 = v71;
        uint64_t v14 = v6 + 1;
        uint64_t v13 = v68;
      }
      ++v11;
      v13 += 4;
      --v12;
      uint64_t v6 = v14;
    }
    while (v14 != v8);
  }
  if ((int)v8 <= 100) {
    int v25 = 100;
  }
  else {
    int v25 = v8;
  }
  int v70 = v25;
  v26 = malloc_type_malloc(size, 0x74AAA138uLL);
  v27 = malloc_type_malloc(4 * v65, 0xFA1F807uLL);
  float v28 = (float)(int)v8;
  if ((int)v8 > 0)
  {
    uint64_t v29 = 0;
    v30 = (uint64_t *)(v7 + 1);
    uint64_t v31 = 1;
    uint64_t v32 = 1;
    do
    {
      a3[v29] = 1.0 / v28;
      v33 = malloc_type_malloc(4 * v65, 0x58095333uLL);
      v26[v29] = v33;
      v33[v29] = 0;
      if (v29)
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          float v35 = *((float *)v7[i] + v29);
          *(float *)&v33[v29] = *(float *)&v33[v29] + (float)(v35 * v35);
          v33[i] = *(_DWORD *)(v26[i] + 4 * v29);
        }
      }
      uint64_t v36 = v29 + 1;
      if (v29 + 1 < v8)
      {
        v37 = (float *)&v33[v32];
        v38 = (char *)v7[v29] + v32 * 4;
        v39 = v30;
        unint64_t v40 = v8;
        do
        {
          uint64_t v41 = *v39++;
          *(float *)&v33[v29] = *(float *)&v33[v29] + (float)(*(float *)(v41 + 4 * v29) * *(float *)(v41 + 4 * v29));
          float v42 = *(float *)(v41 + 4 * v29);
          LODWORD(v41) = *v38++;
          *v37++ = -(float)(v42 * *(float *)&v41);
          --v40;
        }
        while (v31 != v40);
      }
      ++v31;
      ++v32;
      ++v30;
      ++v29;
    }
    while (v36 != v8);
  }
  int v43 = 0;
  float v44 = 0.005 / v28;
  do
  {
    if ((int)v65 < 1)
    {
      if (v44 > 0.0) {
        goto LABEL_51;
      }
      goto LABEL_47;
    }
    uint64_t v45 = 0;
    float v46 = 0.0;
    do
    {
      uint64_t v47 = 0;
      v27[v45] = 0;
      uint64_t v48 = v26[v45];
      float v49 = 0.0;
      do
      {
        float v49 = v49 + (float)(*(float *)(v48 + 4 * v47) * a3[v47]);
        *(float *)&v27[v45] = v49;
        ++v47;
      }
      while (v8 != v47);
      float v46 = v46 + (float)(a3[v45++] * v49);
    }
    while (v45 != v8);
    uint64_t v50 = 0;
    float v51 = 0.0;
    do
    {
      float v52 = vabds_f32(*(float *)&v27[v50], v46);
      if (v52 > v51) {
        float v51 = v52;
      }
      ++v50;
    }
    while (v8 != v50);
    if (v51 < v44) {
      break;
    }
    if ((int)v8 >= 1)
    {
      for (uint64_t j = 0; j != v8; ++j)
      {
        uint64_t v54 = 0;
        uint64_t v55 = v26[j];
        float v56 = (float)(v46 - *(float *)&v27[j]) / *(float *)(v55 + 4 * j);
        a3[j] = a3[j] + v56;
        float v57 = (float)(*(float *)&v27[j] + *(float *)&v27[j]) + (float)(v56 * *(float *)(v55 + 4 * j));
        float v58 = v56 + 1.0;
        do
        {
          *(float *)&v27[v54] = (float)(*(float *)&v27[v54] + (float)(v56 * *(float *)(v55 + 4 * v54))) / v58;
          a3[v54] = a3[v54] / v58;
          ++v54;
        }
        while (v8 != v54);
        float v46 = (float)((float)(v46 + (float)(v56 * v57)) / v58) / v58;
      }
    }
LABEL_47:
    ++v43;
    uint64_t v7 = v71;
  }
  while (v43 != v70);
  if ((int)v65 < 1)
  {
    free(v26);
    free(v27);
    goto LABEL_56;
  }
  v59 = (void **)v26;
  unint64_t v60 = v8;
  do
  {
    v61 = *v59++;
    free(v61);
    --v60;
  }
  while (v60);
LABEL_51:
  free(v26);
  free(v27);
  uint64_t v7 = v71;
  if ((int)v8 >= 1)
  {
    v62 = v71;
    do
    {
      v63 = *v62++;
      free(v63);
      --v8;
    }
    while (v8);
  }
LABEL_56:
  free(v67);

  free(v7);
}

float *apple::vision::libraries::facecore::mod::classifiers::SvmModel::predict_values(apple::vision::libraries::facecore::mod::classifiers::SvmModel *this, const float *a2, float *a3)
{
  v56[1] = v56;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *((unsigned int *)this + 18);
  int v60 = *((_DWORD *)this + 19);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  unint64_t v8 = (float *)((char *)v56 - ((v7 + 15) & 0x7FFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v13 = (float *)((char *)v56 - v12);
  float __C = 1.0;
  uint64_t v58 = v9;
  if (v11 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v57 = v11;
    vDSP_Length v16 = v10;
    uint64_t v17 = 4 * v10;
    uint64_t v18 = v8;
    do
    {
      vDSP_vsbsm(a2, 1, (const float *)(*(void *)(v9 + 80) + v14), 1, &__C, v13, 1, v16);
      vDSP_svesq(v13, 1, v18, v16);
      uint64_t v19 = v57;
      uint64_t v9 = v58;
      *uint64_t v18 = -(float)(*(float *)(v58 + 12) * *v18);
      ++v18;
      ++v15;
      v14 += v17;
    }
    while (v15 < v19);
  }
  vvexpf(v8, v8, &v60);
  double result = (float *)MEMORY[0x1F4188790](v20);
  float v24 = (_DWORD *)((char *)v56 - ((v23 + 15) & 0x7FFFFFFF0));
  *float v24 = 0;
  if ((int)v5 > 1)
  {
    int v25 = 0;
    v26 = (int *)v22[16];
    v27 = v24 + 1;
    unint64_t v28 = v5 - 1;
    do
    {
      int v29 = *v26++;
      v25 += v29;
      *v27++ = v25;
      --v28;
    }
    while (v28);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v30 = 0;
    LODWORD(v31) = 0;
    uint64_t v32 = 1;
    do
    {
      uint64_t v33 = v30 + 1;
      if (v30 + 1 < v5)
      {
        uint64_t v34 = (int)v24[v30];
        uint64_t v35 = v22[16];
        uint64_t v36 = *(unsigned int *)(v35 + 4 * v30);
        uint64_t v37 = v22[11];
        uint64_t v38 = v22[12];
        uint64_t v39 = *(void *)(v37 + 8 * v30);
        uint64_t v31 = (int)v31;
        uint64_t v40 = 4 * v34;
        double result = &v8[v34];
        uint64_t v41 = v32;
        do
        {
          if ((int)v36 < 1)
          {
            float v43 = 0.0;
          }
          else
          {
            float v42 = (float *)(*(void *)(v37 + 8 * v41 - 8) + v40);
            float v43 = 0.0;
            uint64_t v44 = v36;
            uint64_t v45 = result;
            do
            {
              float v46 = *v42++;
              float v47 = v46;
              float v48 = *v45++;
              float v43 = v43 + (float)(v47 * v48);
              --v44;
            }
            while (v44);
          }
          uint64_t v49 = *(unsigned int *)(v35 + 4 * v41);
          if ((int)v49 >= 1)
          {
            uint64_t v50 = (int)v24[v41];
            float v51 = (float *)(v39 + 4 * v50);
            float v52 = &v8[v50];
            do
            {
              float v53 = *v51++;
              float v54 = v53;
              float v55 = *v52++;
              float v43 = v43 + (float)(v54 * v55);
              --v49;
            }
            while (v49);
          }
          a3[v31] = v43 - *(float *)(v38 + 4 * v31);
          ++v31;
          ++v41;
        }
        while (v41 != v5);
      }
      ++v32;
      uint64_t v30 = v33;
    }
    while (v33 != v5);
  }
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 == 5)
  {
    if (v4 >= 0) {
      uint64_t v8 = (const void *)a2;
    }
    else {
      uint64_t v8 = *(const void **)a2;
    }
    uint64_t result = memcmp(v8, "false", 5uLL);
    if (!result) {
      return result;
    }
  }
  else if (v5 == 4)
  {
    uint64_t v6 = *(_DWORD **)a2;
    if (v4 >= 0) {
      uint64_t v6 = (_DWORD *)a2;
    }
    if (*v6 == 1702195828) {
      return 1;
    }
  }
  if (v4 < 0) {
    uint64_t v2 = (void *)*v2;
  }
  if (*((char *)a1 + 23) < 0) {
    a1 = (uint64_t *)*a1;
  }
  uint64_t v9 = objc_msgSend(NSString, "stringWithFormat:", @"Expected true/false but found<%s> for %s parameter.", v2, a1);
  +[VNFaceCoreExceptionUtils throwInvalidArgumentException:v9];

  return 0;
}

void sub_1DBA26EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::utils::ParsingUtils::parseFloatValue(const char *a1, uint64_t a2, int a3, int a4, float a5, float a6)
{
  int v10 = (const char *)a2;
  int v12 = *(char *)(a2 + 23);
  uint64_t v13 = (const char *)a2;
  if (v12 < 0) {
    uint64_t v13 = *(const char **)a2;
  }
  float v14 = atof(v13);
  BOOL v15 = v14 >= a5;
  if (!a3) {
    BOOL v15 = v14 > a5;
  }
  if (!v15) {
    goto LABEL_9;
  }
  BOOL v16 = v14 <= a6;
  if (!a4) {
    BOOL v16 = v14 < a6;
  }
  if (!v16)
  {
LABEL_9:
    if (v12 < 0) {
      int v10 = *(const char **)v10;
    }
    uint64_t v17 = "(";
    if (a3) {
      uint64_t v17 = "[";
    }
    uint64_t v18 = ")";
    if (a4) {
      uint64_t v18 = "]";
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    throwValidatedException("Value <%s> evaluated to <%.4f> is out of range %s%.4f, %.4f%s for %s parameter.", v10, v14, v17, a5, a6, v18, a1);
  }
  return v14;
}

void throwValidatedException(const char *a1, ...)
{
  va_start(va, a1);
  uint64_t v3 = 0;
  vasprintf(&v3, a1, va);
  id v1 = [NSString alloc];
  uint64_t v2 = objc_msgSend(v1, "initWithValidatedFormat:validFormatSpecifiers:error:", @"%s", @"%s", 0, v3);
  +[VNFaceCoreExceptionUtils throwInvalidArgumentException:v2];

  free(v3);
}

void sub_1DBA270B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue(const char *a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v10 = (const char *)a2;
  int v12 = *(char *)(a2 + 23);
  uint64_t v13 = (const char *)a2;
  if (v12 < 0) {
    uint64_t v13 = *(const char **)a2;
  }
  uint64_t v14 = atoi(v13);
  uint64_t v15 = v14;
  BOOL v16 = (int)v14 >= a3;
  if (!a5) {
    BOOL v16 = (int)v14 > a3;
  }
  if (!v16) {
    goto LABEL_9;
  }
  BOOL v17 = (int)v14 <= a4;
  if (!a6) {
    BOOL v17 = (int)v14 < a4;
  }
  if (!v17)
  {
LABEL_9:
    if (v12 < 0) {
      int v10 = *(const char **)v10;
    }
    uint64_t v18 = "(";
    if (a5) {
      uint64_t v18 = "[";
    }
    uint64_t v19 = "]";
    if (!a6) {
      uint64_t v19 = ")";
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    throwValidatedException("Value <%s> evaluated to <%i> is out of range %s%i, %i%s for %s parameter.", v10, v14, v18, a3, a4, v19, a1);
  }
  return v15;
}

double apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::FaceImage(apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *this, int a2)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(_OWORD *)((char *)this + 40) = xmmword_1DBF81200;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = a2;
  return result;
}

void apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::~FaceImage(apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x1E0196CF0](v2, 0x1000C8077774924);
  }
  *((void *)this + 2) = 0;
}

void apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::SetImage(apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *this, const unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9, int a10)
{
  double v12 = a9;
  *((double *)this + 5) = (double)-a10;
  *((double *)this + 6) = v12;
  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 2) = a5;
  int v13 = (int)(v12 * (double)(*((_DWORD *)this + 38) * a8 + 1) + 0.5);
  if (*((_DWORD *)this + 6) != v13 || *((_DWORD *)this + 7) != v13 || *((_DWORD *)this + 8) != a5)
  {
    *((_DWORD *)this + 6) = v13;
    *((_DWORD *)this + 7) = v13;
    *((_DWORD *)this + 8) = a5;
    uint64_t v14 = *((void *)this + 2);
    if (v14) {
      MEMORY[0x1E0196CF0](v14, 0x1000C8077774924);
    }
    *((void *)this + 2) = 0;
    operator new[]();
  }
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::SetParameters(this, a6, a7);
  int v15 = *((_DWORD *)this + 7);
  if (v15 >= 1)
  {
    int v16 = 0;
    BOOL v17 = (unsigned __int8 *)*((void *)this + 2);
    int v18 = *((_DWORD *)this + 6);
    do
    {
      if (v18 >= 1)
      {
        int v19 = 0;
        double v20 = (double)v16;
        do
        {
          int v21 = *((_DWORD *)this + 8);
          if (v21 == 1)
          {
            unsigned __int8 v26 = 0;
            int v27 = (int)(*((double *)this + 17)
                      + *((double *)this + 15) * v20
                      + *((double *)this + 13) * (double)v19
                      + 0.5);
            if ((v27 & 0x80000000) == 0)
            {
              int v28 = (int)(*((double *)this + 18)
                        + *((double *)this + 16) * v20
                        + *((double *)this + 14) * (double)v19
                        + 0.5);
              if ((v28 & 0x80000000) == 0)
              {
                if (*(_DWORD *)this <= v27 || *((_DWORD *)this + 1) <= v28) {
                  unsigned __int8 v26 = 0;
                }
                else {
                  unsigned __int8 v26 = a2[*((_DWORD *)this + 2) * (v27 + *(_DWORD *)this * v28)];
                }
              }
            }
            *v17++ = v26;
          }
          else if (v21 == 3)
          {
            unsigned __int8 v22 = 0;
            double v23 = (double)v19;
            int v24 = (int)(*((double *)this + 17)
                      + *((double *)this + 15) * v20
                      + *((double *)this + 13) * (double)v19
                      + 0.5);
            if ((v24 & 0x80000000) == 0)
            {
              int v25 = (int)(*((double *)this + 18) + *((double *)this + 16) * v20 + *((double *)this + 14) * v23 + 0.5);
              if ((v25 & 0x80000000) == 0)
              {
                if (*(_DWORD *)this <= v24 || *((_DWORD *)this + 1) <= v25) {
                  unsigned __int8 v22 = 0;
                }
                else {
                  unsigned __int8 v22 = a2[*((_DWORD *)this + 2) * (v24 + *(_DWORD *)this * v25)];
                }
              }
            }
            unsigned __int8 v34 = 0;
            unsigned __int8 *v17 = v22;
            int v35 = (int)(*((double *)this + 17) + *((double *)this + 15) * v20 + *((double *)this + 13) * v23 + 0.5);
            if ((v35 & 0x80000000) == 0)
            {
              int v36 = (int)(*((double *)this + 18) + *((double *)this + 16) * v20 + *((double *)this + 14) * v23 + 0.5);
              if ((v36 & 0x80000000) == 0)
              {
                if (*(_DWORD *)this <= v35 || *((_DWORD *)this + 1) <= v36) {
                  unsigned __int8 v34 = 0;
                }
                else {
                  unsigned __int8 v34 = a2[*((_DWORD *)this + 2) * (v35 + *(_DWORD *)this * v36) + 1];
                }
              }
            }
            unsigned __int8 v37 = 0;
            v17[1] = v34;
            int v38 = (int)(*((double *)this + 17) + *((double *)this + 15) * v20 + *((double *)this + 13) * v23 + 0.5);
            if ((v38 & 0x80000000) == 0)
            {
              int v39 = (int)(*((double *)this + 18) + *((double *)this + 16) * v20 + *((double *)this + 14) * v23 + 0.5);
              if ((v39 & 0x80000000) == 0)
              {
                if (*(_DWORD *)this <= v38 || *((_DWORD *)this + 1) <= v39) {
                  unsigned __int8 v37 = 0;
                }
                else {
                  unsigned __int8 v37 = a2[*((_DWORD *)this + 2) * (v38 + *(_DWORD *)this * v39) + 2];
                }
              }
            }
            v17[2] = v37;
            v17 += 3;
          }
          else if (v21 >= 1)
          {
            uint64_t v29 = 0;
            double v30 = (double)v19;
            do
            {
              unsigned __int8 v31 = 0;
              int v32 = (int)(*((double *)this + 17) + *((double *)this + 15) * v20 + *((double *)this + 13) * v30 + 0.5);
              if ((v32 & 0x80000000) == 0)
              {
                int v33 = (int)(*((double *)this + 18) + *((double *)this + 16) * v20 + *((double *)this + 14) * v30 + 0.5);
                if ((v33 & 0x80000000) == 0)
                {
                  if (*(_DWORD *)this <= v32 || *((_DWORD *)this + 1) <= v33) {
                    unsigned __int8 v31 = 0;
                  }
                  else {
                    unsigned __int8 v31 = a2[*((_DWORD *)this + 2) * (v32 + *(_DWORD *)this * v33) + v29];
                  }
                }
              }
              v17[v29++] = v31;
            }
            while ((int)v29 < *((_DWORD *)this + 8));
            v17 += v29;
          }
          ++v19;
          int v18 = *((_DWORD *)this + 6);
        }
        while (v19 < v18);
        int v15 = *((_DWORD *)this + 7);
      }
      ++v16;
    }
    while (v16 < v15);
  }
}

double apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::SetParameters(apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *this, int a2, int a3)
{
  double v4 = (double)a2;
  double v5 = (double)a3;
  double v6 = (double)(*((_DWORD *)this + 6) - 1) * 0.5;
  double v7 = (double)(*((_DWORD *)this + 7) - 1) * 0.5;
  __double2 v8 = __sincos_stret(*((double *)this + 5) / 180.0 * 3.1415);
  double v9 = *((double *)this + 6);
  *((double *)this + 7) = v9 * v8.__cosval;
  *((double *)this + 8) = v9 * v8.__sinval;
  double v10 = -(v8.__sinval * v9);
  *((double *)this + 9) = v10;
  *((double *)this + 10) = v9 * v8.__cosval;
  *((double *)this + 11) = v6 - (v10 * v5 + v9 * v8.__cosval * v4);
  *((double *)this + 12) = v7 - (v9 * v8.__cosval * v5 + v9 * v8.__sinval * v4);
  double v11 = -v8.__sinval / v9;
  *((double *)this + 13) = v8.__cosval / v9;
  *((double *)this + 14) = v11;
  *((double *)this + 15) = v8.__sinval / v9;
  *((double *)this + 16) = v8.__cosval / v9;
  double result = v4 - (v7 * (v8.__sinval / v9) + v8.__cosval / v9 * v6);
  *((double *)this + 17) = result;
  *((double *)this + 18) = v5 - (v7 * (v8.__cosval / v9) + v11 * v6);
  return result;
}

double derotatePoint(CGPoint a1, CGPoint a2, double (*a3)[2], int a4)
{
  int v4 = (int)(a1.x - a2.x);
  if (a4) {
    int v4 = vcvtmd_s64_f64((*a3)[1] * (double)(int)(a1.y - a2.y) + (*a3)[0] * (double)v4 + 0.5);
  }
  return (double)(int)(a2.x + (double)v4);
}

apple::vision::libraries::facecore::utils::aev::AEVGImage *apple::vision::libraries::facecore::utils::aev::AEVGImage::AEVGImage(apple::vision::libraries::facecore::utils::aev::AEVGImage *this)
{
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F360D070;
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 9) = 4;
  apple::vision::libraries::facecore::utils::aev::AEVGImage::computeImageData((int *)this);
  return this;
}

apple::vision::libraries::facecore::utils::aev::AEVGImage *apple::vision::libraries::facecore::utils::aev::AEVGImage::AEVGImage(apple::vision::libraries::facecore::utils::aev::AEVGImage *this, unsigned __int8 *a2, int a3, int a4, char a5)
{
  *(void *)this = &unk_1F360D070;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = a4;
  *((unsigned char *)this + 24) = a5;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 9) = 4;
  apple::vision::libraries::facecore::utils::aev::AEVGImage::computeImageData((int *)this);
  return this;
}

uint64_t apple::vision::libraries::facecore::utils::aev::AEVGImage::detachBaseImage(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 48))
  {
    this = *(void *)(this + 40);
    if (this)
    {
      apple::vision::libraries::facecore::utils::aev::AEVGImage::~AEVGImage((apple::vision::libraries::facecore::utils::aev::AEVGImage *)this);
      this = MEMORY[0x1E0196D10]();
    }
  }
  *(void *)(v1 + 40) = 0;
  return this;
}

void apple::vision::libraries::facecore::utils::aev::AEVGImage::~AEVGImage(apple::vision::libraries::facecore::utils::aev::AEVGImage *this)
{
  *(void *)this = &unk_1F360D070;
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = (void *)*((void *)this + 1);
    if (v2) {
      free(v2);
    }
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {
    free(v3);
  }
  apple::vision::libraries::facecore::utils::aev::AEVGImage::detachBaseImage((uint64_t)this);
}

int *apple::vision::libraries::facecore::utils::aev::AEVGImage::computeImageData(int *this)
{
  if (*((void *)this + 1))
  {
    uint64_t v1 = this;
    if (!*((void *)this + 2))
    {
      this = (int *)malloc_type_malloc(8 * this[8], 0x10040436913F5uLL);
      v1[2] = this;
      uint64_t v2 = *((unsigned int *)v1 + 8);
      if ((int)v2 >= 1)
      {
        uint64_t v3 = 0;
        uint64_t v4 = v1[1];
        uint64_t v5 = *((int *)v1 + 7);
        uint64_t v6 = 8 * v2;
        do
        {
          *(void *)(v1[2] + v3) = v4;
          v4 += v5;
          v3 += 8;
        }
        while (v6 != v3);
      }
    }
  }
  return this;
}

uint64_t apple::vision::libraries::facecore::utils::aev::AEVGImage::equalizeHistogram(apple::vision::libraries::facecore::utils::aev::AEVGImage *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  bzero(v15, 0x400uLL);
  bzero(v14, 0x400uLL);
  if (*((_DWORD *)this + 8) * *((_DWORD *)this + 7) > 0)
  {
    uint64_t v3 = (unsigned __int8 *)*((void *)this + 1);
    uint64_t v4 = (*((_DWORD *)this + 8) * *((_DWORD *)this + 7));
    do
    {
      int v5 = *v3++;
      *(float *)&v15[4 * v5] = *(float *)&v15[4 * v5] + 1.0;
      --v4;
    }
    while (v4);
  }
  uint64_t v6 = 0;
  int v7 = 0;
  do
  {
    int v7 = (int)(float)(*(float *)&v15[4 * v6] + (float)v7);
    *(float *)&v14[4 * v6++] = (float)v7;
  }
  while (v6 != 256);
  uint64_t result = MEMORY[0x1F4188790](v2);
  for (uint64_t i = 0; i != 1024; i += 4)
  {
    if (*(float *)&v15[i] != 0.0) {
      *(_DWORD *)&v13[i] = vcvtmd_s64_f64((float)(*(float *)&v14[i] - *(float *)&v14[4 * v10])/ (float)((float)(int)v9 - *(float *)&v14[4 * v10])* 255.0+ 0.5);
    }
  }
  if ((int)v9 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      *(unsigned char *)(*((void *)this + 1) + v12) = *(_DWORD *)&v13[4 * *(unsigned __int8 *)(*((void *)this + 1) + v12)];
      ++v12;
    }
    while (v9 != v12);
  }
  return result;
}

void apple::vision::libraries::facecore::utils::aev::AEVGImage::performGammaCorrection(apple::vision::libraries::facecore::utils::aev::AEVGImage *this, float a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  float __A = a2;
  MEMORY[0x1F4188790](this);
  uint64_t v4 = (float *)((char *)block - ((v3 + 15) & 0x7FFFFFFF0));
  vDSP_vfill(&__A, v4, 1, v5);
  uint64_t v6 = dispatch_get_global_queue(2, 0);
  size_t v7 = *((int *)this + 9);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN5apple6vision9libraries8facecore5utils3aev9AEVGImage22performGammaCorrectionEf_block_invoke;
  block[3] = &__block_descriptor_48_e8_v16__0Q8l;
  block[4] = this;
  block[5] = v4;
  dispatch_apply(v7, v6, block);
}

void ___ZN5apple6vision9libraries8facecore5utils3aev9AEVGImage22performGammaCorrectionEf_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(int *)(v2 + 32);
  unint64_t v4 = *(int *)(v2 + 36);
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  size_t v7 = (float *)((char *)&v10 - ((4 * *(unsigned int *)(v2 + 28) + 15) & 0x7FFFFFFF0));
  HIDWORD(v10) = 1132396544;
  if ((int)v5 < (int)v6)
  {
    uint64_t v9 = (int)v5;
    do
    {
      vDSP_vfltu8(*(const unsigned __int8 **)(*(void *)(v2 + 16) + 8 * v9), 1, v7, 1, *(int *)(v2 + 28));
      vDSP_vsdiv(v7, 1, (const float *)&v10 + 1, v7, 1, *(int *)(v2 + 28));
      vvpowf(v7, *(const float **)(a1 + 40), v7, (const int *)(v2 + 28));
      vDSP_vsmul(v7, 1, (const float *)&v10 + 1, v7, 1, *(int *)(v2 + 28));
      vDSP_vfixu8(v7, 1, *(unsigned __int8 **)(*(void *)(v2 + 16) + 8 * v9++), 1, *(int *)(v2 + 28));
    }
    while (v9 != v6);
  }
}

void apple::vision::libraries::facecore::utils::aev::AEVGImage::getImageRescaledAndRotatedAroundCenter(apple::vision::libraries::facecore::utils::aev::AEVGImage *this, CGPoint a2, float a3, CGSize a4, CGSize a5)
{
}

void sub_1DBA2814C(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10B1C404708251DLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5apple6vision9libraries8facecore5utils3aev9AEVGImage38getImageRescaledAndRotatedAroundCenterE7CGPointfb6CGSizeS7_ib_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(int *)(result + 72);
  unint64_t v4 = *(int *)(v2 + 36);
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if ((int)v5 < (int)v6)
  {
    int v7 = v5 - (int)v3 / 2;
    unint64_t v5 = (int)v5;
    LODWORD(v8) = *(_DWORD *)(result + 76);
    do
    {
      if ((int)v8 >= 1)
      {
        uint64_t v9 = 0;
        int v10 = (int)(float)(*(float *)(result + 80) * (float)v7);
        signed int v11 = -(v8 >> 1);
        do
        {
          int v12 = *(_DWORD *)(result + 88);
          if (v12 < 1)
          {
            int v13 = 0;
            float v17 = 0.0;
          }
          else
          {
            int v13 = 0;
            int v14 = (int)(float)(*(float *)(result + 84) * (float)v11);
            int v15 = v12 + v14;
            int v16 = v12 + v10;
            float v17 = 0.0;
            do
            {
              double v18 = (double)v14;
              int v19 = v10;
              do
              {
                double v20 = (double)v14;
                int v21 = v19;
                if (*(unsigned char *)(result + 92))
                {
                  unsigned __int8 v22 = *(double **)(result + 40);
                  int v23 = vcvtmd_s64_f64(v22[1] * (double)v19 + *v22 * v18 + 0.5);
                  int v21 = vcvtmd_s64_f64(v22[3] * (double)v19 + v22[2] * v18 + 0.5);
                  double v20 = (double)v23;
                }
                int v24 = (int)(*(double *)(result + 48) + v20);
                double v25 = *(double *)(result + 56) + (double)v21;
                LOBYTE(v25) = *(unsigned char *)(*(void *)(*(void *)(v2 + 16) + 8 * (int)v25) + v24);
                float v17 = v17 + (float)LODWORD(v25);
                ++v13;
                ++v19;
              }
              while (v19 < v16);
              ++v14;
            }
            while (v14 < v15);
          }
          *(unsigned char *)(*(void *)(*(void *)(result + 64) + 8 * v5) + v9) = vcvtmd_s64_f64((float)(v17 / (float)v13) + 0.5);
          ++v11;
          ++v9;
          uint64_t v8 = *(int *)(result + 76);
        }
        while (v9 < v8);
      }
      ++v7;
      ++v5;
    }
    while (v5 != (int)v6);
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::utils::aev::AEVLinearSVMModel::AEVLinearSVMModel(uint64_t this, double *a2, double a3, int a4, char a5)
{
  *(void *)this = a2;
  *(double *)(this + 8) = a3;
  *(_DWORD *)(this + 16) = a4;
  *(unsigned char *)(this + 20) = a5;
  return this;
}

void apple::vision::libraries::facecore::utils::aev::AEVLinearSVMModel::~AEVLinearSVMModel(void **this)
{
  if (*((unsigned char *)this + 20)) {
    free(*this);
  }
}

double apple::vision::libraries::facecore::utils::aev::AEVLinearSVMModel::computePredictionForData(double **this, double *a2)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
    double v4 = 0.0;
  }
  else
  {
    uint64_t v3 = *this;
    double v4 = 0.0;
    do
    {
      double v5 = *v3++;
      double v6 = v5;
      double v7 = *a2++;
      double v4 = v4 + v6 * v7;
      --v2;
    }
    while (v2);
  }
  return v4 - *((double *)this + 1);
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x84BDA12F684BDA13 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 216 * v6;
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1DBA28414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::getFaces(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a3;
  if (*a3 != a3[1])
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v16 = _Q0;
    do
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v18 = 0u;
      memset(v17, 0, sizeof(v17));
      uint64_t v24 = 0x3FF0000000000000;
      int v25 = 0;
      long long v27 = v16;
      long long v28 = v16;
      long long v29 = v16;
      *(void *)((char *)&v17[1] + 12) = *(void *)(v7 + 28);
      LODWORD(v17[0]) = *(_DWORD *)v7;
      DWORD2(v20) = *(_DWORD *)(v7 + 104);
      uint64_t v23 = 0x100000001;
      int v26 = (int)*(double *)(v7 + 152);
      DWORD2(v18) = *(_DWORD *)(v7 + 72);
      unint64_t v14 = a2[1];
      if (v14 >= a2[2])
      {
        uint64_t v15 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(a2, (uint64_t)v17);
      }
      else
      {
        apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)a2[1], (uint64_t)v17);
        uint64_t v15 = v14 + 216;
        a2[1] = v14 + 216;
      }
      a2[1] = v15;
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v17);
      v7 += 216;
    }
    while (v7 != a3[1]);
  }
  if (a4 >= 1) {
    apple::vision::libraries::facecore::processing::detection::FaceManager::groupFaces(a1, a2, a4, 60, 1.0, 0.25);
  }
}

void sub_1DBA28574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::groupFaces(uint64_t a1, uint64_t *a2, int a3, int a4, float a5, float a6)
{
  memset(&v68, 0, sizeof(v68));
  uint64_t v72 = 0;
  v73 = 0;
  unint64_t v74 = 0;
  int v69 = 0;
  int v70 = 0;
  unint64_t v71 = 0;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::reserve(&v72, 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) / 3);
  std::vector<apple::vision::libraries::facecore::FaceInternal>::reserve((uint64_t *)&v69, 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) / 3);
  std::vector<int>::reserve(&v68, 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) / 3);
  int v12 = (apple::vision::libraries::facecore::Face *)*a2;
  signed int v11 = (apple::vision::libraries::facecore::Face *)a2[1];
  uint64_t v13 = ((uint64_t)v11 - *a2) >> 3;
  unint64_t v14 = 0x84BDA12F684BDA13 * v13;
  if (1749801491 * (int)v13 >= 1)
  {
    unint64_t v15 = 0;
    double v16 = a5;
    do
    {
      uint64_t v17 = ((uint64_t)v73 - v72) >> 3;
      unint64_t v18 = 0x84BDA12F684BDA13 * v17;
      if (1749801491 * (int)v17 < 1)
      {
LABEL_14:
        if (v14 <= v15
          || ((v34 = (uint64_t)v12 + 216 * v15, int v35 = v70, (unint64_t)v70 >= v71)
            ? (int v36 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>((uint64_t *)&v69, v34)): (apple::vision::libraries::facecore::FaceInternal::FaceInternal(v70, v34), int v36 = (apple::vision::libraries::facecore::Face *)((char *)v35 + 216)), v70 = v36, 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3) <= v15))
        {
LABEL_63:
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v37 = *a2 + 216 * v15;
        unsigned int v38 = *(_DWORD *)(v37 + 164);
        *(int32x2_t *)(v37 + 28) = vmul_s32(*(int32x2_t *)(v37 + 28), vdup_n_s32(v38));
        *(_DWORD *)v37 *= v38;
        *(_DWORD *)(v37 + 104) *= v38;
        int v39 = v73;
        if ((unint64_t)v73 >= v74)
        {
          uint64_t v40 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(&v72, v37);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal(v73, v37);
          uint64_t v40 = (apple::vision::libraries::facecore::Face *)((char *)v39 + 216);
        }
        v73 = v40;
        std::vector<int>::pointer end = v68.__end_;
        if (v68.__end_ >= v68.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v68.__begin_;
          int64_t v44 = v68.__end_ - v68.__begin_;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
          }
          int64_t v46 = (char *)v68.__end_cap_.__value_ - (char *)v68.__begin_;
          if (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            float v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68.__end_cap_, v47);
            std::vector<int>::pointer begin = v68.__begin_;
            std::vector<int>::pointer end = v68.__end_;
          }
          else
          {
            float v48 = 0;
          }
          uint64_t v49 = (int *)&v48[4 * v44];
          *uint64_t v49 = 1;
          float v42 = v49 + 1;
          while (end != begin)
          {
            int v50 = *--end;
            *--uint64_t v49 = v50;
          }
          v68.__begin_ = v49;
          v68.__end_ = v42;
          v68.__end_cap_.__value_ = (int *)&v48[4 * v47];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v68.__end_ = 1;
          float v42 = end + 1;
        }
        v68.__end_ = v42;
        int v12 = (apple::vision::libraries::facecore::Face *)*a2;
        signed int v11 = (apple::vision::libraries::facecore::Face *)a2[1];
      }
      else
      {
        if (v14 <= v15) {
LABEL_61:
        }
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
        unint64_t v19 = 0;
        long long v20 = (char *)v12 + 216 * v15;
        long long v21 = v69;
        int v22 = *((_DWORD *)v20 + 7);
        uint64_t v23 = (_DWORD *)(v72 + 104);
        while (1)
        {
          if ((v70 - (apple::vision::libraries::facecore::Face *)v69) / 216 == v19) {
            goto LABEL_61;
          }
          int v24 = *((_DWORD *)v21 + 7);
          int v25 = *((_DWORD *)v21 + 8);
          int v26 = *((_DWORD *)v20 + 8);
          int v27 = (int)(sqrt((double)(v22 - v24) * (double)(v22 - v24) + (double)(v26 - v25) * (double)(v26 - v25)) * v16);
          int v28 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 > v27)
          {
            int v29 = *(_DWORD *)v21;
            if (*(_DWORD *)v21 > v27)
            {
              int v30 = *((_DWORD *)v20 + 26);
              int v31 = *((_DWORD *)v21 + 26);
              int v32 = (int)vabds_f32((float)v30, (float)v31);
              if ((float)(vabds_f32((float)v28, (float)v29) / (float)(v29 + v28)) < a6 && v32 < a4) {
                break;
              }
            }
          }
          ++v19;
          v21 += 27;
          v23 += 54;
          if (v18 == v19) {
            goto LABEL_14;
          }
        }
        std::vector<int>::pointer v52 = v68.__begin_;
        if (v19 >= v68.__end_ - v68.__begin_) {
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
        }
        *((_DWORD *)v21 + 7) = (v22 + v68.__begin_[v19] * v24) / (v68.__begin_[v19] + 1);
        *((_DWORD *)v21 + 8) = (v26 + v52[v19] * v25) / (v52[v19] + 1);
        *(_DWORD *)long long v21 = (v28 + v52[v19] * v29) / (v52[v19] + 1);
        *((_DWORD *)v21 + 26) = (v30 + v52[v19] * v31) / (v52[v19] + 1);
        unsigned int v53 = *((_DWORD *)v12 + 54 * v15 + 41);
        int32x2_t v54 = vmul_s32(*(int32x2_t *)(v20 + 28), vdup_n_s32(v53));
        *(int32x2_t *)(v20 + 28) = v54;
        int v55 = *(_DWORD *)v20 * v53;
        *(_DWORD *)long long v20 = v55;
        int v56 = *((_DWORD *)v20 + 26) * v53;
        *((_DWORD *)v20 + 26) = v56;
        if (v18 <= v19) {
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
        }
        *(int32x2_t *)(v23 - 19) = vadd_s32(*(int32x2_t *)(v23 - 19), v54);
        *(v23 - 26) += v55;
        *v23 += v56;
        v23[11] += *((_DWORD *)v12 + 54 * v15 + 37);
        v23[15] += v53;
        ++v52[v19];
      }
      ++v15;
      uint64_t v51 = (v11 - v12) >> 3;
      unint64_t v14 = 0x84BDA12F684BDA13 * v51;
    }
    while ((uint64_t)v15 < 1749801491 * (int)v51);
  }
  while (v11 != v12)
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)((char *)v11 - 216));
  a2[1] = (uint64_t)v12;
  uint64_t v57 = v72;
  uint64_t v58 = v73;
  unint64_t v59 = 0x84BDA12F684BDA13 * (((uint64_t)v73 - v72) >> 3);
  if ((int)v59 >= 1)
  {
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    do
    {
      std::vector<int>::pointer v62 = v68.__begin_;
      if (v61 >= v68.__end_ - v68.__begin_) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      if (v68.__begin_[v61] >= a3)
      {
        if (v59 <= v61) {
          goto LABEL_63;
        }
        v63 = (int *)(v57 + v60);
        int v64 = *(_DWORD *)(v57 + v60 + 164);
        int v65 = v63[8] / v64;
        v63[7] /= v64;
        v63[8] = v65;
        *v63 /= v64;
        v63[26] /= v64;
        int v66 = v64 / v62[v61];
        v63[41] = v66;
        v63[41] = v62[v61] + v66;
        if ((unint64_t)v12 >= a2[2])
        {
          int v12 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(a2, (uint64_t)v63);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal(v12, (uint64_t)v63);
          int v12 = (apple::vision::libraries::facecore::Face *)((char *)v12 + 216);
          a2[1] = (uint64_t)v12;
        }
        a2[1] = (uint64_t)v12;
        uint64_t v57 = v72;
        uint64_t v58 = v73;
      }
      ++v61;
      unint64_t v59 = 0x84BDA12F684BDA13 * (((uint64_t)v58 - v57) >> 3);
      v60 += 216;
    }
    while ((uint64_t)v61 < (int)v59);
  }
  if (a3 >= 1) {
    apple::vision::libraries::facecore::processing::detection::FaceManager::groupFaces(a1, a2, 0, 75, 1.0, 0.5);
  }
  if (v68.__begin_)
  {
    v68.__end_ = v68.__begin_;
    operator delete(v68.__begin_);
  }
  v68.__begin_ = (std::vector<int>::pointer)&v69;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  int v69 = (void **)&v72;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v69);
}

void sub_1DBA28BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, char **a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a13 = &a16;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    int v12 = v7;
    if (end != this->__begin_)
    {
      int v12 = v7;
      do
      {
        int v13 = *--end;
        *--int v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

double apple::vision::libraries::facecore::processing::detection::FaceManager::getEyes(uint64_t a1, int *a2)
{
  int v3 = a2[7];
  int v4 = a2[26];
  __double2 v5 = __sincos_stret((double)(v4 - 45) / 180.0 * 3.1415);
  double v6 = (double)*a2;
  int v7 = a2[8];
  a2[1] = v3 + (int)(v5.__sinval * v6 / 1.8);
  a2[2] = v7 - (int)(v5.__cosval * v6 / 1.8);
  __double2 v8 = __sincos_stret((double)(v4 + 45) / 180.0 * 3.1415);
  double result = v8.__cosval * v6 / 1.8;
  a2[3] = v3 + (int)(v8.__sinval * v6 / 1.8);
  a2[4] = v7 - (int)result;
  return result;
}

int32x2_t apple::vision::libraries::facecore::processing::detection::FaceManager::getMouth(uint64_t a1, uint64_t a2)
{
  __double2 v3 = __sincos_stret((double)*(int *)(a2 + 104) / 180.0 * 3.1415);
  int32x2_t v4 = *(int32x2_t *)(a2 + 28);
  __asm { FMOV            V1.2D, #0.5 }
  *(int32x2_t *)&v3.__sinval = vmovn_s64(vcvtq_s64_f64(vmulq_f64(vmulq_n_f64((float64x2_t)v3, (double)*(int *)a2), _Q1)));
  LODWORD(_Q1.f64[0]) = vsub_s32(v4, *(int32x2_t *)&v3.__sinval).u32[0];
  int32x2_t result = vadd_s32(v4, *(int32x2_t *)&v3.__sinval);
  HIDWORD(_Q1.f64[0]) = result.i32[1];
  *(float64_t *)(a2 + 20) = _Q1.f64[0];
  return result;
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::getAccuracy(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 1749801491 * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v4 = *a2 + 148;
    do
    {
      if (!v2) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v5 = *(_DWORD *)v4;
      if (*(int *)v4 <= 0)
      {
        *(void *)(v4 + 4) = 0;
      }
      else
      {
        double v6 = *(double *)(v4 + 52);
        double v7 = *(double *)(v4 + 60);
        if (v5 > 2)
        {
          if (v5 > 0xC)
          {
            *(void *)(v4 + 4) = 0x3FF0000000000000;
            goto LABEL_14;
          }
          double v9 = ((double)(int)(v5 - 2) / 10.0 + *(double *)(v4 + 44) + v6 * 3.0 + v7 * 2.0) * 0.142857143;
        }
        else
        {
          double v8 = (v7 + v6 * 3.0) * 0.25;
          if (v5 == 2) {
            double v9 = v8 * 0.7;
          }
          else {
            double v9 = v8 * 0.5;
          }
        }
        *(double *)(v4 + 4) = v9;
      }
LABEL_14:
      --v2;
      v4 += 216;
      --v3;
    }
    while (v3);
  }
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::removeOverlappingFaces(uint64_t a1, uint64_t *a2)
{
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t isInside = std::vector<apple::vision::libraries::facecore::FaceInternal>::reserve(&v14, 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3));
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if ((int)(1749801491 * ((unint64_t)(v4 - *a2) >> 3)) >= 1)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = 0x84BDA12F684BDA13 * ((v4 - v5) >> 3);
      if ((int)v7 >= 1)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        do
        {
          if (v6 != v9)
          {
            int v10 = (int *)(v5 + 216 * v6);
            int v11 = v10[37];
            if (v11 <= *(_DWORD *)(v5 + v8 + 148))
            {
              uint64_t isInside = apple::vision::libraries::facecore::processing::detection::FaceManager::isInside(isInside, (int *)(v5 + 216 * v6), (int *)(v5 + v8));
              if (isInside) {
                goto LABEL_21;
              }
              uint64_t isInside = apple::vision::libraries::facecore::processing::detection::FaceManager::isInside(isInside, (int *)(v5 + v8), (int *)(v5 + 216 * v6));
              if ((isInside & 1) != 0
                || apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeOptimisticFaceOverlap((apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *)isInside, (double)v10[7], (double)v10[8], (double)*v10, (double)*(int *)(v5 + v8 + 28), (double)*(int *)(v5 + v8 + 32), (double)*(int *)(v5 + v8)) > 0.6)
              {
                goto LABEL_21;
              }
              uint64_t v5 = *a2;
              int v11 = *(_DWORD *)(*a2 + 216 * v6 + 148);
            }
            if (v11 <= 9 && v11 <= *(_DWORD *)(v5 + v8 + 148))
            {
              if (apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeOptimisticFaceOverlap((apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *)isInside, (double)*(int *)(v5 + 216 * v6 + 28), (double)*(int *)(v5 + 216 * v6 + 32), (double)*(int *)(v5 + 216 * v6), (double)*(int *)(v5 + v8 + 28), (double)*(int *)(v5 + v8 + 32), (double)*(int *)(v5 + v8)) > 0.4)goto LABEL_21; {
              uint64_t v5 = *a2;
              }
            }
          }
          ++v9;
          unint64_t v7 = 0x84BDA12F684BDA13 * ((a2[1] - v5) >> 3);
          v8 += 216;
        }
        while (v9 < (int)v7);
      }
      if (v7 <= v6) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = v5 + 216 * v6;
      int v13 = v15;
      if ((unint64_t)v15 >= v16)
      {
        uint64_t isInside = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(&v14, v12);
      }
      else
      {
        apple::vision::libraries::facecore::FaceInternal::FaceInternal(v15, v12);
        uint64_t isInside = (uint64_t)v13 + 216;
      }
      unint64_t v15 = (apple::vision::libraries::facecore::Face *)isInside;
LABEL_21:
      ++v6;
      uint64_t v5 = *a2;
      uint64_t v4 = a2[1];
    }
    while ((uint64_t)v6 < (int)(1749801491 * ((unint64_t)(v4 - *a2) >> 3)));
  }
  if (&v14 != a2) {
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)a2, v14, (uint64_t)v15, 0x84BDA12F684BDA13 * (((uint64_t)v15 - v14) >> 3));
  }
  uint64_t v17 = (void **)&v14;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void sub_1DBA2919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL apple::vision::libraries::facecore::processing::detection::FaceManager::isInside(uint64_t a1, int *a2, int *a3)
{
  int v3 = a2[7];
  int v4 = *a2;
  int v5 = a3[7];
  int v6 = *a3;
  if (v3 - *a2 < v5 - *a3) {
    return 0;
  }
  int v8 = a3[8];
  int v9 = v8 + v6;
  int v10 = v8 - v6;
  int v11 = a2[8];
  int v12 = v11 + v4;
  int v13 = v11 - v4;
  return v4 + v3 <= v6 + v5 && v13 >= v10 && v12 <= v9;
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::removeHitsOnBorders(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  if (a4 >= a3) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  if (v4 >= 1) {
    int v5 = v4 - 1;
  }
  else {
    int v5 = v4;
  }
  uint64_t v6 = *a2;
  unint64_t v7 = (long long *)a2[1];
  unint64_t v8 = 0x84BDA12F684BDA13 * (((uint64_t)v7 - *a2) >> 3);
  if ((int)v8 >= 1)
  {
    int v12 = 0;
    int v13 = v5 >> 1;
    do
    {
      if (v8 <= v12) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v14 = v6 + 216 * v12;
      int v15 = *(_DWORD *)v14;
      if (*(_DWORD *)v14 > v13)
      {
        *(_DWORD *)uint64_t v14 = v13;
        int v15 = v13;
      }
      int v16 = *(_DWORD *)(v14 + 28);
      if (v16 >= v15
        && ((v17 = *(_DWORD *)(v14 + 32), int v18 = v15 + v16, v17 >= v15) ? (v19 = v18 < a3) : (v19 = 0),
            v19 ? (BOOL v20 = v17 + v15 < a4) : (BOOL v20 = 0),
            v20))
      {
        ++v12;
      }
      else
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)&v23, (long long *)(v14 + 216), v7, v14);
        unint64_t v7 = v21;
        int v22 = (long long *)a2[1];
        if (v22 != v21)
        {
          do
            apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)((char *)v22 - 216));
          while (v22 != v7);
        }
        a2[1] = (uint64_t)v7;
        uint64_t v6 = *a2;
      }
      unint64_t v8 = 0x84BDA12F684BDA13 * (((uint64_t)v7 - v6) >> 3);
    }
    while (v12 < (int)v8);
  }
}

void apple::vision::libraries::facecore::processing::detection::FaceManager::sortFacesBySize(uint64_t a1, void *a2)
{
  memset(v24, 0, sizeof(v24));
  uint64_t v25 = 0x100000001;
  uint64_t v26 = 0x3FF0000000000000;
  uint64_t v27 = 0x100000000;
  __asm { FMOV            V0.2D, #1.0 }
  long long v28 = _Q0;
  long long v29 = _Q0;
  long long v30 = _Q0;
  unint64_t v7 = 0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3);
  if ((int)v7 >= 2)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (v7 - 1);
    int64_t v11 = (int)v7;
    uint64_t v12 = 1749801491 * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v13 = 1;
    uint64_t v14 = 216;
    while (1)
    {
      unint64_t v15 = v9 + 1;
      if ((uint64_t)(v9 + 1) < v11) {
        break;
      }
      int v19 = v9;
LABEL_12:
      if (v9 != v19)
      {
        if (0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3) <= v19) {
          goto LABEL_23;
        }
        unint64_t v21 = v19;
        apple::vision::libraries::facecore::FaceInternal::operator=((uint64_t)v24, *a2 + 216 * v19);
        unint64_t v22 = 0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3);
        if (v22 <= v9 || v22 <= v21) {
          goto LABEL_23;
        }
        apple::vision::libraries::facecore::FaceInternal::operator=(*a2 + 216 * (int)v21, *a2 + 216 * v9);
        if (0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3) <= v9) {
          goto LABEL_23;
        }
        apple::vision::libraries::facecore::FaceInternal::operator=(*a2 + 216 * v9, (uint64_t)v24);
      }
      ++v13;
      v14 += 216;
      ++v9;
      if (v15 == v10) {
        goto LABEL_22;
      }
    }
    unint64_t v16 = 0x84BDA12F684BDA13 * ((uint64_t)(a2[1] - *a2) >> 3);
    int v17 = (int *)(*a2 + v14);
    unint64_t v18 = v13;
    int v19 = v9;
    while (v16 > v18 && v16 > v19)
    {
      int v20 = *v17;
      v17 += 54;
      if (v20 > *(_DWORD *)(*a2 + 216 * v19)) {
        int v19 = v18;
      }
      if (v12 == ++v18) {
        goto LABEL_12;
      }
    }
LABEL_23:
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_22:
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v24);
}

void sub_1DBA2957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t apple::vision::libraries::facecore::FaceInternal::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    apple::vision::libraries::facecore::Face::operator=(a1, a2);
    uint64_t v4 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v4;
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  }
  return a1;
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(216 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 216;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (apple::vision::libraries::facecore::Face *)(v11 + v10);
    v10 -= 216;
    apple::vision::libraries::facecore::FaceInternal::FaceInternal(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(i - 216));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x97B425ED097B42) {
    unint64_t v9 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (apple::vision::libraries::facecore::Face *)&v10[216 * v4];
  unint64_t v16 = &v10[216 * v9];
  apple::vision::libraries::facecore::FaceInternal::FaceInternal(v14, a2);
  unint64_t v15 = (char *)v14 + 216;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1DBA298A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::Face::~Face(apple::vision::libraries::facecore::Face *this)
{
  unint64_t v2 = (void **)*((void *)this + 17);
  if (v2)
  {
    free(*v2);
    *unint64_t v2 = 0;
    MEMORY[0x1E0196D10](v2, 0x10C0C40FA6900CELL);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6C28C58, MEMORY[0x1E4FBA1D0]);
}

void sub_1DBA299C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 - 216));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 apple::vision::libraries::facecore::FaceInternal::FaceInternal(apple::vision::libraries::facecore::Face *a1, uint64_t a2)
{
  uint64_t v3 = apple::vision::libraries::facecore::Face::Face(a1, (const apple::vision::libraries::facecore::Face *)a2);
  uint64_t v4 = *(void *)(a2 + 152);
  *((void *)v3 + 18) = *(void *)(a2 + 144);
  *((void *)v3 + 19) = v4;
  *((void *)v3 + 20) = *(void *)(a2 + 160);
  *(_OWORD *)((char *)v3 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)((char *)v3 + 184) = *(_OWORD *)(a2 + 184);
  __n128 result = *(__n128 *)(a2 + 200);
  *(__n128 *)((char *)v3 + 200) = result;
  return result;
}

apple::vision::libraries::facecore::Face *apple::vision::libraries::facecore::Face::Face(apple::vision::libraries::facecore::Face *this, const apple::vision::libraries::facecore::Face *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *(void *)((char *)this + 4) = *(void *)((char *)a2 + 4);
  *(void *)((char *)this + 12) = *(void *)((char *)a2 + 12);
  *(void *)((char *)this + 20) = *(void *)((char *)a2 + 20);
  *(void *)((char *)this + 28) = *(void *)((char *)a2 + 28);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3);
  int v4 = *((_DWORD *)a2 + 18);
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 18) = v4;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<apple::vision::libraries::facecore::coord>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::coord*,apple::vision::libraries::facecore::coord*>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 54) = *((_WORD *)a2 + 54);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((unsigned char *)this + 120) = *((unsigned char *)a2 + 120);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((void *)this + 17) = 0;
  if (*((void *)a2 + 17)) {
    operator new();
  }
  return this;
}

void sub_1DBA29C04(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v4, 0x10C0C40FA6900CELL);
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 88) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBA29CB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::vector<apple::vision::libraries::facecore::coord>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::coord*,apple::vision::libraries::facecore::coord*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBA29DB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

apple::vision::libraries::facecore::naturalSmileData *apple::vision::libraries::facecore::naturalSmileData::naturalSmileData(apple::vision::libraries::facecore::naturalSmileData *this, const naturalSmileData *a2)
{
  if (*(void *)a2) {
    uint64_t v4 = malloc_type_malloc(*((void *)a2 + 1), 0x1CBB7C65uLL);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)this = v4;
  size_t v5 = *((void *)a2 + 1);
  if (v4) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  else {
    uint64_t v6 = 0;
  }
  *((void *)this + 1) = v6;
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  if (v4) {
    memcpy(v4, *(const void **)a2, v5);
  }
  return this;
}

void std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x12F684BDA12F684) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x97B425ED097B426 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x97B425ED097B42) {
      unint64_t v11 = 0x12F684BDA12F684;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v16 - 216));
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1DBA29FC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DBA29FC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<apple::vision::libraries::facecore::FaceInternal>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v3 - 216));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<apple::vision::libraries::facecore::FaceInternal>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[216 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)(a4 + v7), a2 + v7);
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DBA2A0E8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 216;
    do
    {
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 + v2));
      v2 -= 216;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      apple::vision::libraries::facecore::FaceInternal::operator=(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  size_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    long long v7 = *v5;
    long long v8 = v5[2];
    *(_OWORD *)(a4 + 16) = v5[1];
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)a4 = v7;
    std::vector<double>::__move_assign(a4 + 48, (__n128 *)v5 + 3);
    *(_DWORD *)(a4 + 72) = *((_DWORD *)v5 + 18);
    std::vector<double>::__move_assign(a4 + 80, (__n128 *)v5 + 5);
    long long v9 = *(long long *)((char *)v5 + 104);
    long long v10 = *(long long *)((char *)v5 + 120);
    *(void *)(a4 + 136) = *((void *)v5 + 17);
    *(_OWORD *)(a4 + 120) = v10;
    *(_OWORD *)(a4 + 104) = v9;
    long long v12 = v5[11];
    long long v11 = v5[12];
    long long v13 = v5[10];
    *(void *)(a4 + 208) = *((void *)v5 + 26);
    *(_OWORD *)(a4 + 176) = v12;
    *(_OWORD *)(a4 + 192) = v11;
    *(_OWORD *)(a4 + 160) = v13;
    *(_OWORD *)(a4 + 144) = v5[9];
    a4 += 216;
    size_t v5 = (long long *)((char *)v5 + 216);
  }
  while (v5 != v6);
  return v6;
}

__n128 std::vector<double>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t apple::vision::libraries::facecore::Face::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void ***)(a1 + 136);
    if (v4)
    {
      free(*v4);
      *uint64_t v4 = 0;
      MEMORY[0x1E0196D10](v4, 0x10C0C40FA6900CELL);
    }
    *(void *)(a1 + 136) = 0;
    if (*(void *)(a2 + 136)) {
      operator new();
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 4) = *(void *)(a2 + 4);
    *(void *)(a1 + 12) = *(void *)(a2 + 12);
    *(void *)(a1 + 20) = *(void *)(a2 + 20);
    *(void *)(a1 + 28) = *(void *)(a2 + 28);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 48), *(char **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  }
  return a1;
}

void sub_1DBA2A3B8(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10C0C40FA6900CELL);
  _Unwind_Resume(a1);
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void *apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::GradientLocalDescriptor(void *this)
{
  this[14] = 0;
  this[8] = 0;
  this[9] = 0;
  return this;
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::~GradientLocalDescriptor(apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4) {
    free(v4);
  }
}

__n128 apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::init(apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *this, int a2, int a3)
{
  *((_DWORD *)this + 8) = a2;
  *((_DWORD *)this + 9) = a3;
  if (a3 >= a2) {
    int v6 = a2;
  }
  else {
    int v6 = a3;
  }
  double v7 = floor(log((double)v6) / 0.693147181) + -3.0;
  if (v7 < 1.0) {
    double v7 = 1.0;
  }
  *((_DWORD *)this + 10) = (int)v7;
  *(_OWORD *)((char *)this + 44) = xmmword_1DBF812C0;
  *((_DWORD *)this + 15) = 0;
  uint64_t v8 = (void *)*((void *)this + 8);
  if (v8) {
    free(v8);
  }
  long long v9 = (void *)*((void *)this + 9);
  if (v9) {
    free(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 14);
  if (v10) {
    free(v10);
  }
  int v11 = a3 * a2;
  *((void *)this + 9) = malloc_type_malloc(4 * (v11 + v11 * (*((_DWORD *)this + 14) - *((_DWORD *)this + 13))), 0xA706F15BuLL);
  long long v12 = malloc_type_malloc(8 * v11 * (*((_DWORD *)this + 14) - *((_DWORD *)this + 13)), 0x55F1E759uLL);
  uint64_t v13 = 0;
  *((void *)this + 14) = v12;
  *(_OWORD *)this = xmmword_1DBF812D0;
  *((_OWORD *)this + 1) = xmmword_1DBF812E0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_OWORD *)this + 6) = xmmword_1DBF812F0;
  *((_DWORD *)this + 30) = -1;
  uint64x2_t v14 = (uint64x2_t)xmmword_1DBF81300;
  int64x2_t v19 = vdupq_n_s64(2uLL);
  float64x2_t v20 = (float64x2_t)vdupq_n_s64(0xBFB9000000000000);
  uint64x2_t v18 = (uint64x2_t)vdupq_n_s64(0x101uLL);
  do
  {
    int64x2_t v23 = (int64x2_t)v14;
    unsigned __int8 v24 = vmovn_s64((int64x2_t)vcgtq_u64(v18, v14)).u8[0];
    v15.i64[0] = (int)v13;
    v15.i64[1] = (int)v13 + 1;
    float64x2_t __x = vmulq_f64(vcvtq_f64_s64(v15), v20);
    long double v22 = exp(__x.f64[1]);
    double v16 = exp(__x.f64[0]);
    if (v24) {
      apple::vision::libraries::facecore::mod::facerecognition::expn_tab[v13] = v16;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x101uLL), *(uint64x2_t *)&v23)).i32[1]) {
      apple::vision::libraries::facecore::mod::facerecognition::expn_tab[v13 + 1] = v22;
    }
    v13 += 2;
    __n128 result = (__n128)v19;
    uint64x2_t v14 = (uint64x2_t)vaddq_s64(v23, v19);
  }
  while (v13 != 258);
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::extract(apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *this, const float *a2, int a3, int a4, double *a5, int a6, unsigned __int8 *a7, int *a8)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::init(this, a3, a4);
  if (*((_DWORD *)this + 15) != 2)
  {
    LODWORD(v11) = 0;
    int v12 = 0;
    uint64_t v36 = a6;
    char v13 = 1;
    int v32 = a6;
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
    float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x4080000000000000uLL);
    do
    {
      if (v13)
      {
        if (apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::process_first_octave(this, a2))break; {
      }
        }
      else if (apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::process_next_octave(this))
      {
        break;
      }
      if ((int)v11 >= a6)
      {
LABEL_20:
        int v17 = *((_DWORD *)this + 15);
      }
      else
      {
        uint64_t v11 = (int)v11;
        int v14 = v12;
        int v15 = v12 << 7;
        while (1)
        {
          int v16 = 4 * v11;
          apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::keypoint_init((uint64_t)this, (uint64_t)v38, a5[v16 + 1], a5[4 * (int)v11], a5[v16 + 2]);
          int v17 = *((_DWORD *)this + 15);
          if (v38[0] != v17) {
            break;
          }
          double v18 = *(double *)((char *)a5 + ((8 * v16) | 0x18));
          int64x2_t v19 = (int8x16_t *)&a7[v15];
          memset(v40, 0, sizeof(v40));
          memset(v39, 0, sizeof(v39));
          float64x2_t v20 = v40;
          apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::calc_keypoint_descriptor((uint64_t)this, v40, (uint64_t)v38, 1.57079633 - v18);
          uint64_t v21 = 0;
          long double v22 = (char *)&v39[25] + 12;
          do
          {
            uint64_t v23 = 0;
            unsigned __int8 v24 = v20;
            uint64_t v25 = v22;
            do
            {
              *((_DWORD *)&v39[24] + 8 * v23 - 32 * v21) = v40[8 * v21 + 2 * v23];
              uint64_t v26 = 4;
              uint64_t v27 = v25;
              do
              {
                *v27-- = *(_DWORD *)((char *)v24 + v26);
                v26 += 4;
              }
              while (v26 != 32);
              ++v23;
              v25 += 8;
              v24 += 2;
            }
            while (v23 != 4);
            ++v21;
            v22 -= 128;
            v20 += 8;
          }
          while (v21 != 4);
          for (uint64_t i = 0; i != 32; i += 4)
          {
            *(int16x4_t *)v29.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v39[i + 2]), v35), v34))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvt_hight_f64_f32((float32x4_t)v39[i + 2]), v35), v34))));
            v29.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v39[i + 3]), v35), v34))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvt_hight_f64_f32((float32x4_t)v39[i + 3]), v35), v34))));
            *(int16x4_t *)v30.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v39[i]), v35), v34))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvt_hight_f64_f32((float32x4_t)v39[i]), v35), v34))));
            v30.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v39[i + 1]), v35), v34))), (int16x4_t)vmovn_s64(vcvtq_s64_f64(vminnmq_f64(vmulq_f64(vcvt_hight_f64_f32((float32x4_t)v39[i + 1]), v35), v34))));
            *v19++ = vuzp1q_s8(v30, v29);
          }
          ++v14;
          ++v11;
          v15 += 128;
          if (v11 >= v36)
          {
            int v12 = v14;
            a6 = v32;
            goto LABEL_20;
          }
        }
        int v12 = v14;
        a6 = v32;
      }
      char v13 = 0;
    }
    while (v17 != 2);
  }
  *a8 = 128;
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::process_first_octave(apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *this, const float *a2)
{
  if (!*((_DWORD *)this + 10)) {
    return 5;
  }
  *((_DWORD *)this + 15) = *((_DWORD *)this + 12);
  int v3 = *((_DWORD *)this + 8);
  int v4 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 21) = v4;
  memcpy(*((void **)this + 9), a2, 4 * v3 * v4);
  double v5 = *((double *)this + 1);
  double v6 = v5 * pow(*((long double *)this + 2), (double)*((int *)this + 13));
  double v7 = *(double *)this;
  double v8 = v7 * ldexp(1.0, -*((_DWORD *)this + 12));
  if (v6 > v8) {
    apple::vision::libraries::facecore::mod::filters::basic_smoothing(*((apple::vision::libraries::facecore::mod::filters **)this + 9), *((float **)this + 9), (const float *)*((unsigned int *)this + 8), *((_DWORD *)this + 9), sqrt(v6 * v6 - v8 * v8));
  }
  double v9 = *((double *)this + 3);
  long double v10 = pow(*((long double *)this + 2), (double)(*((_DWORD *)this + 13) + 1));
  apple::vision::libraries::facecore::mod::filters::basic_smoothing((apple::vision::libraries::facecore::mod::filters *)(*((void *)this + 9)+ 4 * *((_DWORD *)this + 21) * *((_DWORD *)this + 20)), *((float **)this + 9), (const float *)*((unsigned int *)this + 8), *((_DWORD *)this + 9), v9 * v10);
  return 0;
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::process_next_octave(apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *this)
{
  int v1 = *((_DWORD *)this + 15);
  if (v1 == *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - 1) {
    return 5;
  }
  int v4 = (apple::vision::libraries::facecore::mod::filters *)*((void *)this + 9);
  unint64_t v5 = *((unsigned int *)this + 21);
  int v6 = *((_DWORD *)this + 13);
  if ((int)v5 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *((int *)this + 20);
    double v9 = (char *)v4 - 4 * (int)v8 * (int)v5 * v6;
    int v10 = v8 - 1;
    uint64_t v11 = 8 * v8;
    int v12 = (_DWORD *)*((void *)this + 9);
    do
    {
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          *v12++ = *(_DWORD *)&v9[4 * v13];
          v13 += 2;
        }
        while ((int)v13 < v10);
      }
      v7 += 2;
      v9 += v11;
    }
    while (v7 < v5);
  }
  int v14 = v1 + 1;
  *((_DWORD *)this + 15) = v14;
  unint64_t v15 = (*((int *)this + 8) >> v14);
  int v16 = *((int *)this + 9) >> v14;
  *((_DWORD *)this + 20) = v15;
  *((_DWORD *)this + 21) = v16;
  double v18 = *((double *)this + 1);
  long double v17 = *((double *)this + 2);
  float v19 = v17;
  double v20 = v18 * powf(v19, (float)v6);
  float v21 = v17;
  double v22 = v18 * powf(v21, (float)-*((_DWORD *)this + 11));
  if (v20 > v22)
  {
    apple::vision::libraries::facecore::mod::filters::basic_smoothing(v4, (float *)v4, (const float *)v15, v16, sqrt(v20 * v20 - v22 * v22));
    int v6 = *((_DWORD *)this + 13);
    long double v17 = *((double *)this + 2);
    unint64_t v15 = *((unsigned int *)this + 20);
    int v16 = *((_DWORD *)this + 21);
    int v4 = (apple::vision::libraries::facecore::mod::filters *)*((void *)this + 9);
  }
  double v23 = *((double *)this + 3);
  long double v24 = pow(v17, (double)(v6 + 1));
  apple::vision::libraries::facecore::mod::filters::basic_smoothing((apple::vision::libraries::facecore::mod::filters *)((char *)v4 + 4 * v16 * (int)v15), (float *)v4, (const float *)v15, v16, v23 * v24);
  return 0;
}

float apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::keypoint_init(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  double v10 = log(a5 / *(double *)(a1 + 8)) / 0.693147181;
  signed int v12 = *(_DWORD *)(a1 + 48);
  int v11 = *(_DWORD *)(a1 + 52);
  double v13 = (double)*(int *)(a1 + 44);
  signed int v14 = vcvtmd_s64_f64(v10 - ((double)v11 + 0.5) / v13);
  if (v12 + *(_DWORD *)(a1 + 40) - 1 < v14) {
    signed int v14 = v12 + *(_DWORD *)(a1 + 40) - 1;
  }
  if (v14 <= v12) {
    int v15 = *(_DWORD *)(a1 + 48);
  }
  else {
    int v15 = v14;
  }
  double v16 = (v10 - (double)v15) * v13;
  int v17 = (int)(v16 + 0.5);
  if (*(_DWORD *)(a1 + 56) - 2 < v17) {
    int v17 = *(_DWORD *)(a1 + 56) - 2;
  }
  if (v17 <= v11 + 1) {
    int v18 = v11 + 1;
  }
  else {
    int v18 = v17;
  }
  long double v19 = ldexp(1.0, v15);
  *(_DWORD *)a2 = v15;
  *(_DWORD *)(a2 + 4) = (int)(a3 / v19 + 0.5);
  *(_DWORD *)(a2 + 8) = (int)(a4 / v19 + 0.5);
  *(_DWORD *)(a2 + 12) = v18;
  *(float *)&long double v19 = a3;
  float v20 = a4;
  *(_DWORD *)(a2 + 16) = LODWORD(v19);
  *(float *)(a2 + 20) = v20;
  float result = v16;
  float v22 = a5;
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 28) = v22;
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::calc_keypoint_descriptor(uint64_t a1, _OWORD *a2, uint64_t a3, double a4)
{
  double v8 = *(double *)(a1 + 96);
  int v9 = *(_DWORD *)(a1 + 60);
  double v10 = ldexp(1.0, v9);
  int v11 = *(_DWORD *)(a1 + 84);
  uint64_t v12 = *(int *)(a1 + 80);
  float v13 = *(float *)(a3 + 16);
  float v14 = *(float *)(a3 + 20);
  float v15 = *(float *)(a3 + 28);
  int v16 = *(_DWORD *)(a3 + 12);
  __double2 v17 = __sincos_stret(a4);
  if (*(_DWORD *)a3 == v9)
  {
    double v18 = v13 / v10;
    int v19 = (int)(v18 + 0.5);
    if ((v19 & 0x80000000) == 0)
    {
      int v20 = v12 - v19;
      if ((int)v12 > v19)
      {
        double v21 = v14 / v10;
        int v22 = (int)(v21 + 0.5);
        if ((v22 & 0x80000000) == 0 && v11 - 1 > v22 && v16 > *(_DWORD *)(a1 + 52) && v16 <= *(_DWORD *)(a1 + 56) - 2)
        {
          double v23 = v8 * (v15 / v10);
          int v24 = vcvtmd_s64_f64(v23 * 5.0 * 0.5 + 0.5);
          apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::update_gradient(a1);
          a2[30] = 0u;
          a2[31] = 0u;
          a2[28] = 0u;
          a2[29] = 0u;
          a2[26] = 0u;
          a2[27] = 0u;
          a2[24] = 0u;
          a2[25] = 0u;
          a2[22] = 0u;
          a2[23] = 0u;
          a2[20] = 0u;
          a2[21] = 0u;
          a2[18] = 0u;
          a2[19] = 0u;
          a2[16] = 0u;
          a2[17] = 0u;
          a2[14] = 0u;
          a2[15] = 0u;
          a2[12] = 0u;
          a2[13] = 0u;
          a2[10] = 0u;
          a2[11] = 0u;
          a2[8] = 0u;
          a2[9] = 0u;
          a2[6] = 0u;
          a2[7] = 0u;
          int v25 = -v24;
          a2[4] = 0u;
          a2[5] = 0u;
          if (1 - v22 <= -v24) {
            LODWORD(v26) = -v24;
          }
          else {
            LODWORD(v26) = 1 - v22;
          }
          a2[2] = 0uLL;
          a2[3] = 0uLL;
          if (v11 - v22 - 2 >= v24) {
            int v27 = v24;
          }
          else {
            int v27 = v11 - v22 - 2;
          }
          *a2 = 0uLL;
          a2[1] = 0uLL;
          if ((int)v26 <= v27)
          {
            uint64_t v28 = 2 * v12;
            uint64_t v29 = *(void *)(a1 + 112)
                + 4 * (2 * v19)
                + 4 * 2 * (int)v12 * v22
                + 4 * 2 * (int)v12 * v11 * (v16 + ~*(_DWORD *)(a1 + 52));
            if (1 - v19 > v25) {
              int v25 = 1 - v19;
            }
            int v30 = v20 - 2;
            if (v20 - 2 >= v24) {
              int v30 = v24;
            }
            uint64_t v26 = (int)v26;
            int v34 = v27 + 1;
            do
            {
              if (v25 <= v30)
              {
                float v33 = v21;
                double v35 = (float)((float)(v26 + v22) - v33);
                double v36 = v17.__sinval * v35;
                double v37 = v17.__cosval * v35;
                float v38 = *(double *)(a1 + 104);
                double v39 = (v38 + v38) * v38;
                int v40 = v25;
                int v41 = v25;
                do
                {
                  float v42 = (float *)(v29 + 4 * v26 * v28 + 8 * v41);
                  float v31 = a4;
                  for (float i = v42[1] - v31; i > 6.28318531; float i = i + -6.2832)
                    ;
                  while (i < 0.0)
                    float i = i + 6.2832;
                  float v32 = v18;
                  double v44 = (float)((float)(v40 + v19) - v32);
                  float v45 = (v36 + v17.__cosval * v44) / v23;
                  float v46 = (v37 + -v17.__sinval * v44) / v23;
                  double v47 = (float)((float)(v46 * v46) + (float)(v45 * v45)) / v39;
                  double v48 = 0.0;
                  if (v47 <= 25.0)
                  {
                    int v49 = vcvtmd_s64_f64(v47 * 10.24);
                    double v48 = apple::vision::libraries::facecore::mod::facerecognition::expn_tab[v49]
                        + (v47 * 10.24 - (double)v49)
                        * (apple::vision::libraries::facecore::mod::facerecognition::expn_tab[v49 + 1]
                         - apple::vision::libraries::facecore::mod::facerecognition::expn_tab[v49]);
                  }
                  int v50 = 0;
                  float v51 = *v42;
                  float v52 = (float)(i * 8.0) / 6.28318531;
                  float v53 = v48;
                  int v54 = vcvtmd_s64_f64(v45 + -0.5);
                  int v55 = vcvtmd_s64_f64(v46 + -0.5);
                  unsigned int v56 = vcvtms_s32_f32(v52);
                  float v57 = v45 - ((double)v54 + 0.5);
                  float v58 = v46 - ((double)v55 + 0.5);
                  float v59 = v51 * v53;
                  float v60 = (float)(int)floorf(v52) - v52;
                  char v61 = 1;
                  do
                  {
                    int v62 = 0;
                    char v63 = v61;
                    int v64 = v50 + v54;
                    float v65 = (float)(v50 ^ 1);
                    unsigned int v66 = v50 + v54 - 2;
                    float v67 = v59 * vabds_f32(v65, v57);
                    uint64_t v68 = (uint64_t)&a2[2 * v64 + 20];
                    char v69 = 1;
                    do
                    {
                      int v70 = 0;
                      char v71 = v69;
                      unsigned int v72 = v62 + v55 - 2;
                      float v73 = v67 * vabds_f32((float)(v62 ^ 1), v58);
                      uint64_t v74 = v68 + 128 * (v62 + v55);
                      BOOL v76 = v66 < 0xFFFFFFFC || v72 < 0xFFFFFFFC;
                      char v77 = 1;
                      do
                      {
                        char v78 = v77;
                        if (!v76)
                        {
                          float v79 = v73 * fabsf(v60 + (float)(v70 ^ 1));
                          unsigned int v80 = v70 + v56;
                          int v81 = v80 & 7;
                          int v83 = -v80;
                          BOOL v82 = v83 < 0;
                          int v84 = v83 & 7;
                          if (v82) {
                            int v85 = v81;
                          }
                          else {
                            int v85 = -v84;
                          }
                          *(float *)(v74 + 4 * v85) = v79 + *(float *)(v74 + 4 * v85);
                        }
                        char v77 = 0;
                        int v70 = 1;
                      }
                      while ((v78 & 1) != 0);
                      char v69 = 0;
                      int v62 = 1;
                    }
                    while ((v71 & 1) != 0);
                    char v61 = 0;
                    int v50 = 1;
                  }
                  while ((v63 & 1) != 0);
                  ++v40;
                  ++v41;
                }
                while (v30 + 1 != v40);
              }
              ++v26;
            }
            while (v34 != v26);
          }
          uint64_t v86 = 0;
          int32x2_t v87 = 0;
          do
          {
            *(float *)v87.i32 = *(float *)v87.i32 + (float)(*(float *)((char *)a2 + v86) * *(float *)((char *)a2 + v86));
            v86 += 4;
          }
          while (v86 != 512);
          v88.i32[1] = 1044740494;
          if (*(float *)v87.i32 >= 0.00000001)
          {
            float v89 = (float)((float)((float)((float)(*(float *)v87.i32 * -0.5)
                                        * COERCE_FLOAT(1597463007 - (v87.i32[0] >> 1)))
                                * COERCE_FLOAT(1597463007 - (v87.i32[0] >> 1)))
                        + 1.5)
                * COERCE_FLOAT(1597463007 - (v87.i32[0] >> 1));
            *(float *)v87.i32 = (float)(*(float *)v87.i32
                                      * (float)(v89
                                              * (float)((float)((float)((float)(*(float *)v87.i32 * -0.5) * v89) * v89)
                                                      + 1.5)))
                              + 0.00000011921;
          }
          else
          {
            int32x2_t v87 = (int32x2_t)0x3400000034000000;
          }
          uint64_t v90 = 0;
          float32x4_t v91 = (float32x4_t)vdupq_lane_s32(v87, 0);
          do
          {
            a2[v90] = vdivq_f32((float32x4_t)a2[v90], v91);
            ++v90;
          }
          while (v90 != 32);
          double v92 = *(double *)(a1 + 88);
          double v93 = *(float *)v87.i32;
          if (v92 <= 0.0 || v92 <= v93)
          {
            uint64_t v95 = 0;
            float64x2_t v96 = (float64x2_t)vdupq_n_s64(0x3FC999999999999AuLL);
            do
            {
              int32x2_t v97 = vmovn_s64(vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)a2 + v95)), v96));
              if (v97.i8[0]) {
                *(_DWORD *)((char *)a2 + v95) = 1045220557;
              }
              if (v97.i8[4]) {
                *(_DWORD *)((char *)a2 + v95 + 4) = 1045220557;
              }
              v95 += 8;
            }
            while (v95 != 512);
            uint64_t v98 = 0;
            float v99 = 0.0;
            do
            {
              float v99 = v99 + (float)(*(float *)((char *)a2 + v98) * *(float *)((char *)a2 + v98));
              v98 += 4;
            }
            while (v98 != 512);
            if (v99 >= 0.00000001)
            {
              float v100 = (float)((float)((float)((float)(v99 * -0.5) * COERCE_FLOAT(1597463007 - (SLODWORD(v99) >> 1)))
                                   * COERCE_FLOAT(1597463007 - (SLODWORD(v99) >> 1)))
                           + 1.5)
                   * COERCE_FLOAT(1597463007 - (SLODWORD(v99) >> 1));
              *(float *)v88.i32 = (float)(v99
                                        * (float)(v100
                                                * (float)((float)((float)((float)(v99 * -0.5) * v100) * v100) + 1.5)))
                                + 0.00000011921;
            }
            else
            {
              int32x2_t v88 = (int32x2_t)0x3400000034000000;
            }
            uint64_t v101 = 0;
            float32x4_t v102 = (float32x4_t)vdupq_lane_s32(v88, 0);
            do
            {
              a2[v101] = vdivq_f32((float32x4_t)a2[v101], v102);
              ++v101;
            }
            while (v101 != 32);
          }
          else
          {
            a2[30] = 0u;
            a2[31] = 0u;
            a2[28] = 0u;
            a2[29] = 0u;
            a2[26] = 0u;
            a2[27] = 0u;
            a2[24] = 0u;
            a2[25] = 0u;
            a2[22] = 0u;
            a2[23] = 0u;
            a2[20] = 0u;
            a2[21] = 0u;
            a2[18] = 0u;
            a2[19] = 0u;
            a2[16] = 0u;
            a2[17] = 0u;
            a2[14] = 0u;
            a2[15] = 0u;
            a2[12] = 0u;
            a2[13] = 0u;
            a2[10] = 0u;
            a2[11] = 0u;
            a2[8] = 0u;
            a2[9] = 0u;
            a2[6] = 0u;
            a2[7] = 0u;
            a2[4] = 0u;
            a2[5] = 0u;
            a2[2] = 0u;
            a2[3] = 0u;
            *a2 = 0u;
            a2[1] = 0u;
          }
        }
      }
    }
  }
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::update_gradient(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 60);
  if (*(_DWORD *)(this + 120) != v1)
  {
    int v2 = *(_DWORD *)(this + 84);
    uint64_t v3 = *(int *)(this + 80);
    int v4 = (float *)(*(void *)(this + 72) + 4 * v2 * (int)v3);
    unint64_t v5 = *(float **)(this + 112);
    int v6 = v4 + 1;
    float v7 = v4[1] - *v4;
    float v8 = v4[v3] - *v4;
    *(float *)&int v9 = (float)(v8 * v8) + (float)(v7 * v7);
    double v10 = *(float *)&v9;
    float v11 = (float)((float)((float)((float)(*(float *)&v9 * -0.5) * COERCE_FLOAT(1597463007 - (v9 >> 1)))
                        * COERCE_FLOAT(1597463007 - (v9 >> 1)))
                + 1.5)
        * COERCE_FLOAT(1597463007 - (v9 >> 1));
    float v12 = *(float *)&v9 * (float)(v11 * (float)((float)((float)((float)(*(float *)&v9 * -0.5) * v11) * v11) + 1.5));
    if (v10 < 0.00000001) {
      float v12 = 0.0;
    }
    *unint64_t v5 = v12;
    float v13 = -v8;
    if (v8 >= 0.0) {
      float v13 = v8;
    }
    float v14 = v13 + 0.00000011921;
    float v15 = v7 + (float)(v13 + 0.00000011921);
    if (v7 >= 0.0)
    {
      float v19 = v7 - v14;
      float v17 = 0.7854;
      float v18 = v19 / v15;
    }
    else
    {
      float v16 = v14 - v7;
      float v17 = 2.3562;
      float v18 = v15 / v16;
    }
    float v20 = v17 + (float)((float)((float)((float)(v18 * 0.1821) * v18) + -0.9675) * v18);
    float v21 = -v20;
    if (v8 >= 0.0) {
      float v21 = v20;
    }
    for (float i = v21 + 6.2832; i > 6.28318531; float i = i + -6.2832)
      ;
    while (i < 0.0)
      float i = i + 6.2832;
    v5[1] = i;
    uint64_t v23 = v3 - 1;
    int v24 = v5 + 2;
    if ((int)v3 < 3)
    {
      uint64_t v29 = v5;
    }
    else
    {
      unint64_t v25 = (unint64_t)&v4[v23];
      do
      {
        float v27 = v4[1];
        float v26 = v4[2];
        float v28 = *v4;
        int v4 = v6;
        uint64_t v29 = v24;
        float v30 = (float)(v26 - v28) * 0.5;
        float v31 = v6[v3] - v27;
        *(float *)&int v32 = (float)(v31 * v31) + (float)(v30 * v30);
        double v33 = *(float *)&v32;
        float v34 = (float)((float)((float)((float)(*(float *)&v32 * -0.5) * COERCE_FLOAT(1597463007 - (v32 >> 1)))
                            * COERCE_FLOAT(1597463007 - (v32 >> 1)))
                    + 1.5)
            * COERCE_FLOAT(1597463007 - (v32 >> 1));
        float v35 = *(float *)&v32
            * (float)(v34 * (float)((float)((float)((float)(*(float *)&v32 * -0.5) * v34) * v34) + 1.5));
        if (v33 < 0.00000001) {
          float v35 = 0.0;
        }
        *int v24 = v35;
        float v36 = -v31;
        if (v31 >= 0.0) {
          float v36 = v31;
        }
        float v37 = v36 + 0.00000011921;
        if (v30 >= 0.0)
        {
          float v38 = v30 - v37;
          float v39 = v30 + v37;
          float v40 = 0.7854;
        }
        else
        {
          float v38 = v30 + v37;
          float v39 = v37 - v30;
          float v40 = 2.3562;
        }
        if (v31 >= 0.0) {
          float v41 = v40
        }
              + (float)((float)((float)((float)((float)(v38 / v39) * 0.1821) * (float)(v38 / v39)) + -0.9675)
                      * (float)(v38 / v39));
        else {
          float v41 = -(float)(v40
        }
                       + (float)((float)((float)((float)((float)(v38 / v39) * 0.1821) * (float)(v38 / v39)) + -0.9675)
                               * (float)(v38 / v39)));
        for (float j = v41 + 6.2832; j > 6.28318531; float j = j + -6.2832)
          ;
        while (j < 0.0)
          float j = j + 6.2832;
        v5[3] = j;
        ++v6;
        v24 += 2;
        unint64_t v5 = v29;
      }
      while ((unint64_t)(v4 + 1) < v25);
    }
    float v43 = v4[1];
    float v44 = v43 - *v4;
    float v45 = v6[v3] - v43;
    *(float *)&int v46 = (float)(v45 * v45) + (float)(v44 * v44);
    double v47 = *(float *)&v46;
    float v48 = (float)((float)((float)((float)(*(float *)&v46 * -0.5) * COERCE_FLOAT(1597463007 - (v46 >> 1)))
                        * COERCE_FLOAT(1597463007 - (v46 >> 1)))
                + 1.5)
        * COERCE_FLOAT(1597463007 - (v46 >> 1));
    float v49 = *(float *)&v46 * (float)(v48 * (float)((float)((float)((float)(*(float *)&v46 * -0.5) * v48) * v48) + 1.5));
    if (v47 < 0.00000001) {
      float v49 = 0.0;
    }
    *int v24 = v49;
    float v50 = -v45;
    if (v45 >= 0.0) {
      float v50 = v45;
    }
    float v51 = v50 + 0.00000011921;
    float v52 = v44 + (float)(v50 + 0.00000011921);
    if (v44 >= 0.0)
    {
      float v56 = v44 - v51;
      float v54 = 0.7854;
      float v55 = v56 / v52;
    }
    else
    {
      float v53 = v51 - v44;
      float v54 = 2.3562;
      float v55 = v52 / v53;
    }
    if (v45 >= 0.0) {
      float v57 = v54 + (float)((float)((float)((float)(v55 * 0.1821) * v55) + -0.9675) * v55);
    }
    else {
      float v57 = -(float)(v54 + (float)((float)((float)((float)(v55 * 0.1821) * v55) + -0.9675) * v55));
    }
    for (float k = v57 + 6.2832; k > 6.28318531; float k = k + -6.2832)
      ;
    while (k < 0.0)
      float k = k + 6.2832;
    v29[3] = k;
    float v59 = v6 + 1;
    float v60 = v24 + 2;
    uint64_t v61 = -(int)v3;
    if (v2 >= 3)
    {
      int v62 = v2 - 2;
      int v63 = 1;
      do
      {
        unint64_t v64 = (unint64_t)(v6 + 2);
        float v65 = v6[2] - v6[1];
        unsigned int v66 = &v59[v3];
        float v67 = (float)(*v66 - v59[v61]) * 0.5;
        *(float *)&int v68 = (float)(v67 * v67) + (float)(v65 * v65);
        double v69 = *(float *)&v68;
        float v70 = (float)((float)((float)((float)(*(float *)&v68 * -0.5) * COERCE_FLOAT(1597463007 - (v68 >> 1)))
                            * COERCE_FLOAT(1597463007 - (v68 >> 1)))
                    + 1.5)
            * COERCE_FLOAT(1597463007 - (v68 >> 1));
        float v71 = *(float *)&v68
            * (float)(v70 * (float)((float)((float)((float)(*(float *)&v68 * -0.5) * v70) * v70) + 1.5));
        if (v69 < 0.00000001) {
          float v71 = 0.0;
        }
        *float v60 = v71;
        float v72 = -v67;
        if (v67 >= 0.0) {
          float v72 = v67;
        }
        float v73 = v72 + 0.00000011921;
        if (v65 >= 0.0)
        {
          float v74 = v65 - v73;
          float v75 = v65 + v73;
          float v76 = 0.7854;
        }
        else
        {
          float v74 = v65 + v73;
          float v75 = v73 - v65;
          float v76 = 2.3562;
        }
        if (v67 >= 0.0) {
          float v77 = v76
        }
              + (float)((float)((float)((float)((float)(v74 / v75) * 0.1821) * (float)(v74 / v75)) + -0.9675)
                      * (float)(v74 / v75));
        else {
          float v77 = -(float)(v76
        }
                       + (float)((float)((float)((float)((float)(v74 / v75) * 0.1821) * (float)(v74 / v75)) + -0.9675)
                               * (float)(v74 / v75)));
        for (float m = v77 + 6.2832; m > 6.28318531; float m = m + -6.2832)
          ;
        while (m < 0.0)
          float m = m + 6.2832;
        float v79 = v24 + 4;
        v24[3] = m;
        unsigned int v80 = v66 - 1;
        if (v64 >= (unint64_t)(v66 - 1))
        {
          int v6 = (float *)v64;
          v24 += 4;
        }
        else
        {
          int v6 = (float *)v64;
          do
          {
            float v81 = v6[1];
            ++v6;
            float v82 = (float)(v81 - *(float *)(v64 - 4)) * 0.5;
            float v83 = (float)(*(float *)(v64 + 4 * v3) - *(float *)(v64 + 4 * v61)) * 0.5;
            *(float *)&int v84 = (float)(v83 * v83) + (float)(v82 * v82);
            double v85 = *(float *)&v84;
            float v86 = (float)((float)((float)((float)(*(float *)&v84 * -0.5) * COERCE_FLOAT(1597463007 - (v84 >> 1)))
                                * COERCE_FLOAT(1597463007 - (v84 >> 1)))
                        + 1.5)
                * COERCE_FLOAT(1597463007 - (v84 >> 1));
            float v87 = *(float *)&v84
                * (float)(v86 * (float)((float)((float)((float)(*(float *)&v84 * -0.5) * v86) * v86) + 1.5));
            if (v85 < 0.00000001) {
              float v87 = 0.0;
            }
            *float v79 = v87;
            float v88 = -v83;
            if (v83 >= 0.0) {
              float v88 = v83;
            }
            float v89 = v88 + 0.00000011921;
            if (v82 >= 0.0)
            {
              float v90 = v82 - v89;
              float v91 = v82 + v89;
              float v92 = 0.7854;
            }
            else
            {
              float v90 = v82 + v89;
              float v91 = v89 - v82;
              float v92 = 2.3562;
            }
            if (v83 >= 0.0) {
              float v93 = v92
            }
                  + (float)((float)((float)((float)((float)(v90 / v91) * 0.1821) * (float)(v90 / v91)) + -0.9675)
                          * (float)(v90 / v91));
            else {
              float v93 = -(float)(v92
            }
                           + (float)((float)((float)((float)((float)(v90 / v91) * 0.1821) * (float)(v90 / v91)) + -0.9675)
                                   * (float)(v90 / v91)));
            for (float n = v93 + 6.2832; n > 6.28318531; float n = n + -6.2832)
              ;
            while (n < 0.0)
              float n = n + 6.2832;
            int v24 = v79 + 2;
            v79[1] = n;
            v79 += 2;
            unint64_t v64 = (unint64_t)v6;
          }
          while (v6 < v80);
        }
        float v95 = *v6 - *(v6 - 1);
        float v96 = (float)(v6[v3] - v6[v61]) * 0.5;
        *(float *)&int v97 = (float)(v96 * v96) + (float)(v95 * v95);
        double v98 = *(float *)&v97;
        float v99 = (float)((float)((float)((float)(*(float *)&v97 * -0.5) * COERCE_FLOAT(1597463007 - (v97 >> 1)))
                            * COERCE_FLOAT(1597463007 - (v97 >> 1)))
                    + 1.5)
            * COERCE_FLOAT(1597463007 - (v97 >> 1));
        float v100 = *(float *)&v97
             * (float)(v99 * (float)((float)((float)((float)(*(float *)&v97 * -0.5) * v99) * v99) + 1.5));
        if (v98 < 0.00000001) {
          float v100 = 0.0;
        }
        *int v24 = v100;
        float v101 = -v96;
        if (v96 >= 0.0) {
          float v101 = v96;
        }
        float v102 = v101 + 0.00000011921;
        if (v95 >= 0.0)
        {
          float v103 = v95 - v102;
          float v104 = v95 + v102;
          float v105 = 0.7854;
        }
        else
        {
          float v103 = v95 + v102;
          float v104 = v102 - v95;
          float v105 = 2.3562;
        }
        if (v96 >= 0.0) {
          float v106 = v105
        }
               + (float)((float)((float)((float)((float)(v103 / v104) * 0.1821) * (float)(v103 / v104)) + -0.9675)
                       * (float)(v103 / v104));
        else {
          float v106 = -(float)(v105
        }
                        + (float)((float)((float)((float)((float)(v103 / v104) * 0.1821) * (float)(v103 / v104))
                                        + -0.9675)
                                * (float)(v103 / v104)));
        for (ifloat i = v106 + 6.2832; ii > 6.28318531; ifloat i = ii + -6.2832)
          ;
        while (ii < 0.0)
          ifloat i = ii + 6.2832;
        v24[1] = ii;
        float v59 = v6 + 1;
        float v60 = v24 + 2;
      }
      while (v63++ != v62);
    }
    float v109 = v6[1];
    float v110 = v6[2] - v109;
    float v111 = v109 - v59[v61];
    *(float *)&int v112 = (float)(v111 * v111) + (float)(v110 * v110);
    double v113 = *(float *)&v112;
    float v114 = (float)((float)((float)((float)(*(float *)&v112 * -0.5) * COERCE_FLOAT(1597463007 - (v112 >> 1)))
                         * COERCE_FLOAT(1597463007 - (v112 >> 1)))
                 + 1.5)
         * COERCE_FLOAT(1597463007 - (v112 >> 1));
    float v115 = *(float *)&v112
         * (float)(v114 * (float)((float)((float)((float)(*(float *)&v112 * -0.5) * v114) * v114) + 1.5));
    if (v113 < 0.00000001) {
      float v115 = 0.0;
    }
    *float v60 = v115;
    float v116 = -v111;
    if (v111 >= 0.0) {
      float v116 = v111;
    }
    float v117 = v116 + 0.00000011921;
    float v118 = v110 + (float)(v116 + 0.00000011921);
    if (v110 >= 0.0)
    {
      float v122 = v110 - v117;
      float v120 = 0.7854;
      float v121 = v122 / v118;
    }
    else
    {
      float v119 = v117 - v110;
      float v120 = 2.3562;
      float v121 = v118 / v119;
    }
    if (v111 >= 0.0) {
      float v123 = v120 + (float)((float)((float)((float)(v121 * 0.1821) * v121) + -0.9675) * v121);
    }
    else {
      float v123 = -(float)(v120 + (float)((float)((float)((float)(v121 * 0.1821) * v121) + -0.9675) * v121));
    }
    for (jfloat j = v123 + 6.2832; jj > 6.28318531; jfloat j = jj + -6.2832)
      ;
    while (jj < 0.0)
      jfloat j = jj + 6.2832;
    v24[3] = jj;
    v125 = v59 + 1;
    v126 = v60 + 2;
    if ((int)v3 < 3)
    {
      v131 = v60;
    }
    else
    {
      unint64_t v127 = (unint64_t)&v59[v23];
      do
      {
        float v129 = v59[1];
        float v128 = v59[2];
        float v130 = *v59;
        float v59 = v125;
        v131 = v126;
        float v132 = (float)(v128 - v130) * 0.5;
        float v133 = v129 - v125[v61];
        *(float *)&int v134 = (float)(v133 * v133) + (float)(v132 * v132);
        double v135 = *(float *)&v134;
        float v136 = (float)((float)((float)((float)(*(float *)&v134 * -0.5) * COERCE_FLOAT(1597463007 - (v134 >> 1)))
                             * COERCE_FLOAT(1597463007 - (v134 >> 1)))
                     + 1.5)
             * COERCE_FLOAT(1597463007 - (v134 >> 1));
        float v137 = *(float *)&v134
             * (float)(v136 * (float)((float)((float)((float)(*(float *)&v134 * -0.5) * v136) * v136) + 1.5));
        if (v135 < 0.00000001) {
          float v137 = 0.0;
        }
        float *v126 = v137;
        float v138 = -v133;
        if (v133 >= 0.0) {
          float v138 = v133;
        }
        float v139 = v138 + 0.00000011921;
        if (v132 >= 0.0)
        {
          float v140 = v132 - v139;
          float v141 = v132 + v139;
          float v142 = 0.7854;
        }
        else
        {
          float v140 = v132 + v139;
          float v141 = v139 - v132;
          float v142 = 2.3562;
        }
        if (v133 >= 0.0) {
          float v143 = v142
        }
               + (float)((float)((float)((float)((float)(v140 / v141) * 0.1821) * (float)(v140 / v141)) + -0.9675)
                       * (float)(v140 / v141));
        else {
          float v143 = -(float)(v142
        }
                        + (float)((float)((float)((float)((float)(v140 / v141) * 0.1821) * (float)(v140 / v141))
                                        + -0.9675)
                                * (float)(v140 / v141)));
        for (kfloat k = v143 + 6.2832; kk > 6.28318531; kfloat k = kk + -6.2832)
          ;
        while (kk < 0.0)
          kfloat k = kk + 6.2832;
        v60[3] = kk;
        ++v125;
        v126 += 2;
        float v60 = v131;
      }
      while ((unint64_t)(v59 + 1) < v127);
    }
    float v145 = v59[1];
    float v146 = v145 - *v59;
    float v147 = v145 - v125[v61];
    *(float *)&int v148 = (float)(v147 * v147) + (float)(v146 * v146);
    double v149 = *(float *)&v148;
    LODWORD(v150) = 1597463007 - (v148 >> 1);
    float v151 = *(float *)&v148
         * (float)((float)((float)((float)((float)((float)(*(float *)&v148 * -0.5) * v150) * v150) + 1.5) * v150)
                 * (float)((float)((float)((float)(*(float *)&v148 * -0.5)
                                         * (float)((float)((float)((float)((float)(*(float *)&v148 * -0.5) * v150) * v150)
                                                         + 1.5)
                                                 * v150))
                                 * (float)((float)((float)((float)((float)(*(float *)&v148 * -0.5) * v150) * v150) + 1.5)
                                         * v150))
                         + 1.5));
    if (v149 >= 0.00000001) {
      float v152 = v151;
    }
    else {
      float v152 = 0.0;
    }
    float *v126 = v152;
    float v153 = -v147;
    if (v147 >= 0.0) {
      float v153 = v147;
    }
    float v154 = v153 + 0.00000011921;
    if (v146 >= 0.0)
    {
      float v155 = v146 - v154;
      float v156 = v146 + v154;
      float v157 = 0.7854;
    }
    else
    {
      float v155 = v146 + v154;
      float v156 = v154 - v146;
      float v157 = 2.3562;
    }
    float v158 = v157
         + (float)((float)((float)((float)((float)(v155 / v156) * 0.1821) * (float)(v155 / v156)) + -0.9675)
                 * (float)(v155 / v156));
    float v159 = -v158;
    if (v147 >= 0.0) {
      float v159 = v158;
    }
    for (mfloat m = v159 + 6.2832; mm > 6.28318531; mfloat m = mm + -6.2832)
      ;
    while (mm < 0.0)
      mfloat m = mm + 6.2832;
    v131[3] = mm;
    *(_DWORD *)(this + 120) = v1;
  }
  return this;
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::KCropImage(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *this, const image *a2, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a3)
{
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    MEMORY[0x1E0196CF0](v2, 0x1000C8077774924);
    *((void *)this + 3) = 0;
  }
}

double apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::copyCoordinates(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a2)
{
  *((void *)this + 2) = *((void *)a2 + 2);
  double result = *(double *)a2;
  *(void *)this = *(void *)a2;
  return result;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::takeOwnershipToCropBuffer(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a2)
{
  *((void *)this + 2) = *((void *)a2 + 2);
  *(void *)this = *(void *)a2;
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = MEMORY[0x1E0196CF0](result, 0x1000C8077774924);
    *((void *)this + 3) = 0;
  }
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  return result;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::generateCropWithFace(uint64_t a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[7] - *a2;
  int v4 = a2[8] - *a2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)a1 = 2 * v2;
  *(_DWORD *)(a1 + 4) = 2 * v2;
  float result = (float)v3;
  *(float *)(a1 + 32) = (float)v3;
  *(float *)(a1 + 36) = (float)v4;
  float v6 = (float)(v3 + 2 * v2);
  *(float *)(a1 + 40) = v6;
  *(float *)(a1 + 44) = (float)v4;
  float v7 = (float)(v4 + 2 * v2);
  *(float *)(a1 + 48) = v6;
  *(float *)(a1 + 52) = v7;
  *(float *)(a1 + 56) = (float)v3;
  *(float *)(a1 + 60) = v7;
  return result;
}

int32x2_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::updateFaceWithCrop(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  v3.i64[0] = (int)v2;
  v3.i64[1] = SHIDWORD(v2);
  float64x2_t v4 = vcvtq_f64_s64(v3);
  v3.i64[0] = (int)*a1;
  v3.i64[1] = (int)HIDWORD(*a1);
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v10 = vmulq_f64(vcvtq_f64_s64(v3), _Q2);
  int32x2_t result = vmovn_s64(vcvtq_s64_f64(vaddq_f64(v10, v4)));
  *(int32x2_t *)(a2 + 28) = result;
  *(_DWORD *)a2 = (int)v10.f64[0];
  return result;
}

int32x2_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::generateCropFromPreviousCrop(int32x2_t *this, int32x2_t *a2, const image *a3, unsigned int a4)
{
  int32x2_t v4 = vdup_n_s32(a4);
  int32x2_t v5 = vmax_s32(vsub_s32(a2[2], v4), 0);
  this[2] = v5;
  int32x2_t result = vsub_s32(vmin_s32(vadd_s32(vadd_s32(a2[2], *a2), v4), *(int32x2_t *)&a3->var1), v5);
  *this = result;
  return result;
}

#error "1DBA2C094: too big function (funcsize=0)"

uint64_t apple::vision::libraries::facecore::mod::aam::AffineWarp::SetWarpTarget(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result + 200;
  for (float i = (double *)(result + 1384); ; i += 12)
  {
    int32x2_t v5 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 8));
    double v7 = *v5;
    double v6 = v5[1];
    float v8 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 4));
    int v9 = (double *)(a2 + 16 * *(int *)(v3 + v2));
    double v10 = *v8 - v7;
    double v11 = v8[1] - v6;
    double v12 = *v9 - v7;
    double v13 = v9[1] - v6;
    double v14 = v10 * v13 - v12 * v11;
    if (v14 == 0.0) {
      break;
    }
    double v15 = 1.0 / v14;
    *float i = v13 * v15;
    i[1] = v15 * -v12;
    i[2] = -(v11 * v15);
    i[3] = v10 * v15;
    i[8] = v7;
    i[9] = v6;
    v2 += 12;
    if (v2 == 1188)
    {
      *(unsigned char *)(result + 20408) = 1;
      return result;
    }
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::mod::aam::AffineWarp::SetWarpTargetMts(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result + 200;
  int32x2_t v4 = (double *)(result + 10888);
  do
  {
    int32x2_t v5 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 8));
    double v6 = *v5;
    double v7 = v5[1];
    float v8 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 4));
    int v9 = (double *)(a2 + 16 * *(int *)(v3 + v2));
    double v10 = *v8 - v6;
    double v11 = v8[1] - v7;
    double v12 = *v9 - v6;
    double v13 = v9[1] - v7;
    double v14 = 1.0 / (v10 * v13 - v12 * v11);
    *int32x2_t v4 = v13 * v14;
    v4[1] = -(v12 * v14);
    v4[2] = -(v11 * v14);
    v4[3] = v10 * v14;
    v4[8] = v6;
    v4[9] = v7;
    v2 += 12;
    v4 += 12;
  }
  while (v2 != 1188);
  return result;
}

uint64_t apple::vision::libraries::facecore::mod::aam::AffineWarp::SetSourceImage(uint64_t this, float *a2, int a3, int a4)
{
  *(void *)(this + 20392) = a2;
  *(_DWORD *)(this + 20400) = a3;
  *(_DWORD *)(this + 20404) = a4;
  *(unsigned char *)(this + 20409) = 1;
  return this;
}

double apple::vision::libraries::facecore::mod::aam::AffineWarp::UpdateWarpTable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 200;
  int32x2_t v4 = (double *)(a1 + 1384);
  do
  {
    int32x2_t v5 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 8));
    double result = *v5;
    double v7 = v5[1];
    float v8 = (double *)(a2 + 16 * *(int *)(v3 + v2 - 4));
    int v9 = (double *)(a2 + 16 * *(int *)(v3 + v2));
    double v10 = v9[1];
    double v11 = *v8 - result;
    double v12 = *v9 - result;
    double v13 = v4[2];
    double v14 = v4[3];
    double v15 = *v4;
    double v16 = v4[1];
    double v17 = v8[1] - v7;
    v4[4] = v12 * v13 + v11 * *v4;
    v4[5] = v12 * v14 + v11 * v16;
    v4[6] = (v10 - v7) * v13 + v17 * v15;
    v4[7] = (v10 - v7) * v14 + v17 * v16;
    v4[10] = result;
    v4[11] = v7;
    v2 += 12;
    v4 += 12;
  }
  while (v2 != 1188);
  return result;
}

void apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 20408) || !*(unsigned char *)(a1 + 20409))
  {
    exceptiofloat n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "soft_assertion failed!");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  apple::vision::libraries::facecore::mod::aam::AffineWarp::UpdateWarpTable(a1, a2);
  uint64_t v5 = a1 + 4 * *(int *)(a1 + 80);
  int v19 = *(_DWORD *)(v5 + 120);
  if (v19)
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = *(_DWORD *)(v5 + 84);
    double v9 = 0.0;
    do
    {
      if (v8)
      {
        uint64_t v10 = 4 * v6;
        v6 += v8;
        double v11 = 0.0;
        int v12 = v8;
        do
        {
          int v13 = *(_DWORD *)(*(void *)(a1 + 72) + v10);
          if (v13 != -1)
          {
            double v14 = (double *)(a1 + 96 * v13);
            double v15 = v11 - v14[181];
            double v16 = v9 - v14[182];
            float v17 = v14[183] + v14[177] * v15 + v14[178] * v16;
            *(float *)&double v15 = v14[184] + v14[179] * v15 + v14[180] * v16;
            int v20 = LODWORD(v15);
            float v21 = v17;
            *(float *)(a3 + v10) = apple::vision::libraries::facecore::mod::aam::utils::SampleImage<float,float>(&v21, (float *)&v20, *(void *)(a1 + 20392), (_DWORD *)(a1 + 20400), (_DWORD *)(a1 + 20404));
          }
          double v11 = v11 + 1.0;
          v10 += 4;
          --v12;
        }
        while (v12);
      }
      double v9 = v9 + 1.0;
      ++v7;
    }
    while (v7 != v19);
  }
}

void sub_1DBA5453C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::mod::aam::utils::SampleImage<float,float>(float *a1, float *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  float v5 = floorf(*a1);
  float v6 = *a2;
  float v7 = floorf(*a2);
  int v8 = (int)(v5 + 0.5);
  float v9 = 1.0;
  int v10 = (int)(v7 + 0.5);
  float v11 = 0.0;
  if (v8 < 0)
  {
    int v8 = 0;
    float v13 = 1.0;
    float v12 = 0.0;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  float v12 = 1.0;
  if (*a4 - 2 >= v8)
  {
    float v14 = *a1 - v5;
    float v13 = 1.0 - v14;
    float v12 = v14;
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    int v10 = 0;
    goto LABEL_11;
  }
  float v13 = 0.0;
  int v8 = *a4 - 2;
  if (v10 < 0) {
    goto LABEL_9;
  }
LABEL_6:
  if (*a5 - 2 >= v10)
  {
    float v11 = v6 - v7;
    float v9 = 1.0 - (float)(v6 - v7);
  }
  else
  {
    float v9 = 0.0;
    float v11 = 1.0;
    int v10 = *a5 - 2;
  }
LABEL_11:
  int v15 = v8 + *a4 * v10;
  return (float)((float)((float)((float)(v12 * v9) * *(float *)(a3 + 4 * (v15 + 1)))
                       + (float)(*(float *)(a3 + 4 * v15) * (float)(v13 * v9)))
               + (float)(*(float *)(a3 + 4 * (v15 + *a4)) * (float)(v13 * v11)))
       + (float)(*(float *)(a3 + 4 * (v15 + 1 + *a4)) * (float)(v12 * v11));
}

double apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp_dWdp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 20408))
  {
    exceptiofloat n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "soft_assertion failed!");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = apple::vision::libraries::facecore::mod::aam::AffineWarp::UpdateWarpTable(a1, a2);
  uint64_t v8 = a1 + 4 * *(int *)(a1 + 80);
  int v9 = *(_DWORD *)(v8 + 120);
  if (v9 >= 1)
  {
    int v10 = 0;
    double result = (double)v9;
    int v11 = *(_DWORD *)(v8 + 84);
    double v12 = 0.0;
    do
    {
      if (v11 >= 1)
      {
        float v13 = (float *)(a3 + 4 * v10);
        float v14 = (float *)(a4 + 4 * v10);
        int v15 = (int *)(*(void *)(a1 + 72) + 4 * v10);
        double v16 = 0.0;
        do
        {
          int v18 = *v15++;
          int v17 = v18;
          if (v18 == -1)
          {
            float v22 = 0.0;
            float v23 = 0.0;
          }
          else
          {
            int v19 = (double *)(a1 + 96 * v17);
            double v20 = v16 - v19[181];
            double v21 = v12 - v19[182];
            float v22 = v19[183] + v19[177] * v20 + v19[178] * v21;
            float v23 = v19[184] + v19[179] * v20 + v19[180] * v21;
          }
          *v13++ = v22;
          *v14++ = v23;
          double v16 = v16 + 1.0;
          ++v10;
        }
        while (v16 < (double)v11);
      }
      double v12 = v12 + 1.0;
    }
    while (v12 < result);
  }
  return result;
}

void sub_1DBA5478C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float64x2_t apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  bzero(a3, 0x3F0uLL);
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 192;
  do
  {
    uint64_t v8 = 0;
    int v9 = (double *)(a1 + 96 * v6);
    double v10 = v9[181];
    double v11 = v9[182];
    double v12 = v9[183];
    double v13 = v9[177];
    double v14 = v9[178];
    double v15 = v9[184];
    double v16 = v9[179];
    double v17 = v9[180];
    do
    {
      uint64_t v18 = *(int *)(v7 + v8);
      int v19 = (double *)(a2 + 16 * v18);
      double v20 = *v19 - v10;
      double v21 = v19[1] - v11;
      f64 = a3[v18].f64;
      double v23 = *f64 + v12 + v13 * v20 + v14 * v21;
      double v24 = f64[1] + v15 + v16 * v20 + v17 * v21;
      double v25 = *((double *)v30 + v18);
      double *f64 = v23;
      f64[1] = v24;
      *((double *)v30 + v18) = v25 + 1.0;
      v8 += 4;
    }
    while (v8 != 12);
    ++v6;
    v7 += 12;
  }
  while (v6 != 99);
  for (uint64_t i = 0; i != 63; ++i)
  {
    float v27 = (const double *)v30 + i;
    float64x2_t v28 = vld1q_dup_f64(v27);
    float64x2_t result = vdivq_f64(a3[i], v28);
    a3[i] = result;
  }
  return result;
}

#error "1DBA5491C: too big function (funcsize=0)"

uint64_t apple::vision::libraries::facecore::mod::Image::SetSize(uint64_t this, int a2, int a3, int a4)
{
  if ((a3 | a2) < 0 || a4 <= 0)
  {
    exceptiofloat n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "SetSize - incorrect image size");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = this;
  if (*(_DWORD *)this != a2 || *(_DWORD *)(this + 4) != a3)
  {
    *(_DWORD *)this = a2;
    *(_DWORD *)(this + 4) = a3;
    *(_DWORD *)(this + 8) = a4;
    if (*(unsigned char *)(this + 24))
    {
      uint64_t v5 = *(void *)(this + 16);
      if (v5) {
        MEMORY[0x1E0196CF0](v5, 0x1000C8077774924);
      }
    }
    *(unsigned char *)(v4 + 24) = 1;
    *(void *)(v4 + 16) = 0;
    operator new[]();
  }
  if (*(_DWORD *)(this + 8) != a4) {
    operator new[]();
  }
  return this;
}

void sub_1DBA7BBF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

apple::vision::libraries::facecore::mod::Image *apple::vision::libraries::facecore::mod::Image::Image(apple::vision::libraries::facecore::mod::Image *this, int a2, int a3, int a4)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = 0;
  apple::vision::libraries::facecore::mod::Image::SetSize((uint64_t)this, a2, a3, a4);
  return this;
}

void apple::vision::libraries::facecore::mod::Image::~Image(apple::vision::libraries::facecore::mod::Image *this)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      MEMORY[0x1E0196CF0](v2, 0x1000C8077774924);
    }
    *((void *)this + 2) = 0;
  }
}

uint64_t apple::vision::libraries::facecore::mod::Image::SetBuffer(uint64_t this, unsigned __int8 *a2, int a3, int a4, int a5)
{
  uint64_t v9 = this;
  if (*(unsigned char *)(this + 24))
  {
    this = *(void *)(this + 16);
    if (this) {
      this = MEMORY[0x1E0196CF0](this, 0x1000C8077774924);
    }
  }
  *(unsigned char *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = a2;
  *(_DWORD *)uint64_t v9 = a3;
  *(_DWORD *)(v9 + 4) = a4;
  *(_DWORD *)(v9 + 8) = a5;
  return this;
}

#error "1DBA7BCFC: too big function (funcsize=0)"

void *apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::SVMBasedFrontalClassifier(void *this)
{
  *this = &unk_1F360CD68;
  this[1] = 0;
  return this;
}

void apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::~SVMBasedFrontalClassifier(apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier *this)
{
  *(void *)this = &unk_1F360CD68;
  uint64_t v2 = (apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier *)*((void *)this + 1);
  if (v2)
  {
    apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::~FrontalSVMClassifier(v2);
    MEMORY[0x1E0196D10]();
    *((void *)this + 1) = 0;
  }
}

double apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::initialize(apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier *this, apple::vision::libraries::facecore::FaceCoreContext *a2, double result)
{
  if (*((unsigned char *)a2 + 69))
  {
    if (!*((void *)this + 1)) {
      operator new();
    }
    uint64_t v3 = (apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier *)*((void *)this + 1);
    if (*((_DWORD *)a2 + 2) == 1) {
      uint64_t v4 = *((void *)a2 + 10);
    }
    else {
      uint64_t v4 = *((void *)a2 + 9);
    }
    uint64_t v5 = v4;
    return apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::setThreshold(v3, (double *)&v5);
  }
  return result;
}

void sub_1DBAA3C24(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x1090C40A7E26980);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::performProcessing(apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier **this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  uint64_t result = (*(uint64_t (**)(apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier **))*this)(this);
  if (*((unsigned char *)a2 + 69))
  {
    uint64_t v5 = *((void *)a2 + 16);
    if (*((void *)a2 + 17) != v5)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 1;
      do
      {
        uint64_t v8 = (int *)(v5 + 216 * v6);
        if (v8[36])
        {
          if (*(_DWORD *)(v5 + 216 * v6 + 148) < *((_DWORD *)a2 + 7) && v8[18] == 0) {
            apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::classifyFace(this[1], *((const unsigned __int8 **)a2 + 14), *((_DWORD *)a2 + 30), *((_DWORD *)a2 + 31), v8[7], v8[8], v8[26], *v8, 0);
          }
        }
        uint64_t v6 = v7;
        uint64_t v5 = *((void *)a2 + 16);
      }
      while (0x84BDA12F684BDA13 * ((*((void *)a2 + 17) - v5) >> 3) > v7++);
    }
  }
  return result;
}

apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix *apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::SimilarityMatrix(apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix *this)
{
  if (!apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::m_nbInst)
  {
    apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::alloc_nb_faces = 256;
    apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::alloc_dim_faces = 156;
    apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::cpu_input = 0;
    apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::cpu_output = 0;
  }
  ++apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::m_nbInst;
  pthread_mutex_unlock(&apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::m_mutex);
  return this;
}

void apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::~SimilarityMatrix(apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix *this)
{
}

void __clang_call_terminate(void *a1)
{
}

void *apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::FaceprintAndMeshExtractor(void *this)
{
  *this = &unk_1F360CC48;
  this[1] = 0;
  return this;
}

apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor *apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::deleteFaceprintExtractor(apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor *this)
{
  uint64_t result = (apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor *)*((void *)this + 1);
  if (result)
  {
    apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::~FaceprintExtractor(result);
    uint64_t result = (apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor *)MEMORY[0x1E0196D10]();
    *((void *)this + 1) = 0;
  }
  return result;
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::~FaceprintAndMeshExtractor(apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor *this)
{
  *(void *)this = &unk_1F360CC48;
  apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::deleteFaceprintExtractor(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F360CC48;
  apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::deleteFaceprintExtractor(this);

  JUMPOUT(0x1E0196D10);
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::performProcessing(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination ***this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (!*(_DWORD *)(*((void *)a2 + 26) + 72) && *((unsigned __int8 *)a2 + 176) | *((unsigned __int8 *)a2 + 177))
  {
    uint64_t v4 = *((void *)a2 + 27);
    apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::initializeFaceprintExtractorIfNeeded((apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor *)this, a2);
    uint64_t v5 = (uint64_t)this[1];
    if (!v5 || !apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::m_initDone)
    {
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:@"API not configured for face details extraction."];
      uint64_t v5 = (uint64_t)this[1];
    }
    apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::setFaceprintExtraction(v5, *((unsigned char *)a2 + 176));
    uint64_t v6 = (uint64_t)this[1];
    unsigned int v7 = (unsigned __int8 *)*((void *)a2 + 14);
    int v8 = *((_DWORD *)a2 + 30);
    int v9 = *((_DWORD *)a2 + 31);
    apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v31, v4);
    apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::ExtractFaceprint(v6, v7, v8, v9, (uint64_t)v31, (uint64_t)a2, (uint64_t)&v32);
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v31);
    if ((char **)(v4 + 48) != &v32) {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v4 + 48), v32, (uint64_t)v33, (v33 - v32) >> 3);
    }
    if (*((unsigned char *)a2 + 177))
    {
      apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::GetShapeVertices(this[1], &v29);
      double v10 = v29;
      double v11 = v30;
      uint32x2_t v12 = (uint32x2_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(v29[35], v29[38])));
      *(int32x2_t *)(v4 + 20) = vshr_n_s32((int32x2_t)vsra_n_u32(v12, v12, 0x1FuLL), 1uLL);
      if ((int)((unint64_t)((char *)v11 - (char *)v10) >> 3) < 2) {
        goto LABEL_29;
      }
      uint64_t v13 = 0;
      double v14 = (char **)(v4 + 80);
      double v15 = (void *)(v4 + 96);
      double v16 = *(uint64_t **)(v4 + 88);
      do
      {
        f64 = v10[v13].f64;
        uint64_t v18 = (int)*f64;
        uint64_t v19 = (int)f64[1];
        if ((unint64_t)v16 >= *v15)
        {
          uint64_t v20 = ((char *)v16 - *v14) >> 3;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = *v15 - (void)*v14;
          uint64_t v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23) {
            double v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4 + 96, v23);
          }
          else {
            double v24 = 0;
          }
          double v25 = &v24[8 * v20];
          *(void *)double v25 = v18 | (v19 << 32);
          double v16 = (uint64_t *)(v25 + 8);
          float v27 = *(char **)(v4 + 80);
          float v26 = *(char **)(v4 + 88);
          if (v26 != v27)
          {
            do
            {
              uint64_t v28 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v25 - 1) = v28;
              v25 -= 8;
            }
            while (v26 != v27);
            float v26 = *v14;
          }
          *(void *)(v4 + 80) = v25;
          *(void *)(v4 + 88) = v16;
          *(void *)(v4 + 96) = &v24[8 * v23];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          *v16++ = v18 | (v19 << 32);
        }
        *(void *)(v4 + 88) = v16;
        ++v13;
        double v10 = v29;
      }
      while (v13 < (int)((unint64_t)((char *)v30 - (char *)v29) >> 3) / 2);
      if (v29)
      {
LABEL_29:
        float v30 = v10;
        operator delete(v10);
      }
    }
    if (v36)
    {
      float v37 = v36;
      operator delete(v36);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (v32)
    {
      double v33 = v32;
      operator delete(v32);
    }
  }
}

void sub_1DBAA4200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  apple::vision::libraries::facecore::processing::extraction::Faceprint::~Faceprint((apple::vision::libraries::facecore::processing::extraction::Faceprint *)(v12 - 176));
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::initializeFaceprintExtractorIfNeeded(apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (!*((void *)this + 1))
  {
    if (*((char *)a2 + 255) < 0) {
      std::string::__init_copy_ctor_external(&v3, *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
    }
    else {
      std::string v3 = *(std::string *)((char *)a2 + 232);
    }
    std::string::size_type size = HIBYTE(v3.__r_.__value_.__r.__words[2]);
    if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v3.__r_.__value_.__l.__size_;
    }
    if (size) {
      operator new();
    }
    if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v3.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1DBAA4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  MEMORY[0x1E0196D10](v17, 0x1020C40BCB15178);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::deleteFaceprintExtractor(v16);
    uint64_t v20 = [NSString stringWithFormat:@"Could not initialize faceprint extractor from path: %s"];
    +[VNFaceCoreExceptionUtils throwInvalidArgumentException:v20];

    __cxa_end_catch();
    JUMPOUT(0x1DBAA42E4);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::extraction::Faceprint::~Faceprint(apple::vision::libraries::facecore::processing::extraction::Faceprint *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  std::string v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain::FaceDetectionProcessingChain(apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F360CE08;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1F360CCC8;
  *((void *)this + 5) = &unk_1F360CCE8;
  *((void *)this + 6) = &unk_1F360CC98;
  *((_DWORD *)this + 14) = 4000000;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = &unk_1F360CDA8;
  *((void *)this + 11) = &unk_1F360CD48;
  *((void *)this + 12) = 0;
  apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::SVMBasedFrontalClassifier((void *)this + 13);
  *((void *)this + 15) = &unk_1F360CD28;
  *((void *)this + 16) = &unk_1F360CD88;
  apple::vision::libraries::facecore::processing::detection::DetectorFactory::getDetector(a2, v4);
}

void sub_1DBAA4658(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::~EyesAndMouthLocalizer(v4);
  v1[6] = v3;
  uint64_t v6 = v1[8];
  if (v6) {
    MEMORY[0x1E0196CF0](v6, 0x1000C8052888210);
  }
  *uint64_t v1 = v2;
  std::string::size_type v7 = (void *)v1[1];
  if (v7)
  {
    v1[2] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain::initializeProcessingChain(apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *this)
{
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 32);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 40);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 48);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, *((void *)this + 9));
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 80);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 104);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 88);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 120);

  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 128);
}

void apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing::~QuotientImagePreprocessing(apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing *this)
{
  *(void *)this = &unk_1F360CC98;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    MEMORY[0x1E0196CF0](v1, 0x1000C8052888210);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F360CC98;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    MEMORY[0x1E0196CF0](v1, 0x1000C8052888210);
  }

  JUMPOUT(0x1E0196D10);
}

void apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain::~FaceDetectionProcessingChain(apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *this)
{
  *(void *)this = &unk_1F360CE08;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  apple::vision::libraries::facecore::processing::postprocessing::SVMBasedFrontalClassifier::~SVMBasedFrontalClassifier((apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *)((char *)this + 104));
  apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::~EyesAndMouthLocalizer((apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *)((char *)this + 88));
  *((void *)this + 6) = &unk_1F360CC98;
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C8052888210);
  }
  *(void *)this = &unk_1F360CDE8;
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void apple::vision::libraries::facecore::processing::preprocessing::RegionOfInterestPreprocessing::performProcessing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 184);
  uint64_t v2 = *(void *)(a2 + 192);
  if ((int)((unint64_t)(v2 - v3) >> 5) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
    {
      int v6 = *(_DWORD *)(a2 + 120);
      int v7 = *(_DWORD *)(a2 + 16);
      if (v7 == 270 || v7 == 90)
      {
        int v8 = *(_DWORD *)(a2 + 124);
      }
      else
      {
        int v8 = *(_DWORD *)(a2 + 120);
        int v6 = *(_DWORD *)(a2 + 124);
      }
      uint64_t v9 = v3 + v4;
      int v10 = *(_DWORD *)(v3 + v4 + 16);
      int v11 = *(_DWORD *)(v3 + v4 + 20);
      int v12 = *(_DWORD *)(v3 + v4 + 24);
      int v13 = *(_DWORD *)(v3 + v4 + 28);
      if (v12 + v10 >= 1 && v10 < v8 && v13 + v11 >= 1 && v11 < v6)
      {
        int v17 = v10 & ~(v10 >> 31);
        int v18 = v11 & ~(v11 >> 31);
        int v19 = v12 + v17;
        if (v8 < v19) {
          int v19 = v8;
        }
        int v20 = v13 + v18;
        if (v6 < v20) {
          int v20 = v6;
        }
        if (v17 >= v8) {
          int v17 = 0;
        }
        if (v18 >= v6) {
          int v18 = 0;
        }
        if (v19 >= 0) {
          int v8 = v19;
        }
        if (v20 < 0) {
          int v20 = v6;
        }
        *(_DWORD *)(v9 + 16) = v17;
        *(_DWORD *)(v9 + 20) = v6 - v20;
        *(_DWORD *)(v9 + 24) = v8 - v17;
        *(_DWORD *)(v9 + 28) = v20 - v18;
      }
      else
      {
        *(_OWORD *)uint64_t v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        uint64_t v3 = *(void *)(a2 + 184);
        uint64_t v2 = *(void *)(a2 + 192);
      }
      ++v5;
      v4 += 32;
    }
    while (v5 < (int)((unint64_t)(v2 - v3) >> 5));
  }
}

void apple::vision::libraries::facecore::processing::preprocessing::InitialImageRotationPreprocessing::performProcessing(apple::vision::libraries::facecore::processing::preprocessing::InitialImageRotationPreprocessing *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  long long v7 = *((_OWORD *)a2 + 7);
  uint64_t v3 = apple::vision::libraries::facecore::utils::ImageRotationUtils::rotateImageByAngle((apple::vision::libraries::facecore::utils::ImageRotationUtils *)&v7, (image *)*((unsigned int *)a2 + 4));
  if ((void)v7 != v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    apple::vision::libraries::facecore::FaceCoreContext::cleanUpProcessedImage(a2);
    *((void *)a2 + 14) = v5;
    *((void *)a2 + 15) = v6;
  }
}

uint64_t apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing::initialize(uint64_t this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if ((*((unsigned char *)a2 + 64) & 2) != 0 && !*(void *)(this + 16)) {
    operator new[]();
  }
  return this;
}

void apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing::performProcessing(apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing *this, image *a2)
{
  if (((uint64_t)a2[4].var0 & 2) != 0)
  {
    (**(void (***)(apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing *))this)(this);
    apple::vision::libraries::facecore::FaceCoreContext::duplicateImageDataIfNeeded((uint64_t)a2);
    apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing::preprocess(this, a2 + 7, 7.0, 7.0, 1.5);
  }
}

void apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing::preprocess(apple::vision::libraries::facecore::processing::preprocessing::QuotientImagePreprocessing *this, image *a2, float a3, float a4, float a5)
{
  unsigned int var1 = a2->var1;
  unsigned int var2 = a2->var2;
  uint64_t v8 = var2 * var1;
  uint64_t v9 = (float *)*((void *)this + 2);
  if ((int)v8 <= 0)
  {
    uint64_t v24 = *((void *)this + 2);
    apple::vision::libraries::facecore::mod::filters::blur<float>(v24, var1, var2, 0, a3);
  }
  else
  {
    float v11 = a4;
    uint64_t v12 = 0;
    var0 = a2->var0;
    do
    {
      LOBYTE(a4) = var0[v12];
      a4 = (float)LODWORD(a4);
      v9[v12++] = a4;
    }
    while (v8 != v12);
    apple::vision::libraries::facecore::mod::filters::blur<float>((uint64_t)v9, var1, var2, 0, a3);
    for (uint64_t i = 0; i != v8; ++i)
    {
      LOBYTE(v14) = var0[i];
      float v14 = (float)LODWORD(v14) / (float)(v9[i] + v11);
      if (v14 > a5) {
        float v14 = a5;
      }
      v9[i] = v14;
    }
    float v16 = *v9;
    uint64_t v17 = v8;
    int v18 = v9;
    float v19 = *v9;
    do
    {
      float v20 = *v18++;
      float v21 = v20;
      if (v19 < v20) {
        float v19 = v21;
      }
      if (v21 < v16) {
        float v16 = v21;
      }
      --v17;
    }
    while (v17);
    if (vabds_f32(v19, v16) < 0.000000001) {
      float v19 = v19 + 0.000000001;
    }
    float v22 = v19 - v16;
    do
    {
      float v23 = *v9++;
      *var0++ = (int)((float)((float)((float)(v23 - v16) * 255.0) / v22) + 0.5);
      --v8;
    }
    while (v8);
  }
}

void apple::vision::libraries::facecore::mod::filters::blur<float>(uint64_t a1, unsigned int a2, unsigned int a3, int a4, float a5)
{
  if (a4)
  {
    apple::vision::libraries::facecore::mod::filters::deriche<float>(a1, a3, a2, 0, 120, 1, a5);
    uint64_t v9 = a1;
    unsigned int v10 = a3;
    int v11 = a2;
  }
  else
  {
    apple::vision::libraries::facecore::mod::filters::deriche<float>(a1, a2, a3, 0, 120, 1, a5);
    uint64_t v9 = a1;
    unsigned int v10 = a2;
    int v11 = a3;
  }

  apple::vision::libraries::facecore::mod::filters::deriche<float>(v9, v10, v11, 0, 121, 1, a5);
}

void apple::vision::libraries::facecore::mod::filters::deriche<float>(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, float a7)
{
  if (a7 < 0.0 || a4 >= 3) {
    printf("deriche() : Bad arguments (sigma=%g, order=%d)", a7, a4);
  }
  if (a7 >= 0.01)
  {
    float v15 = 0.0;
    if (a7 <= 0.0) {
      float v16 = 0.0;
    }
    else {
      float v16 = 1.695 / a7;
    }
    float v17 = expf(v16);
    float v18 = expf(-v16);
    float v19 = v18 * v18;
    if (a4 == 2)
    {
      float v33 = (float)((float)((float)((float)((float)(v17 * 3.0) + -1.0) - (float)((float)(v17 * 3.0) * v17))
                          + (float)((float)(v17 * v17) * v17))
                  * -2.0)
          / (float)((float)((float)((float)(v17 * 3.0) + 1.0) + (float)((float)(v17 * 3.0) * v17))
                  + (float)((float)(v17 * v17) * v17));
      float v39 = (float)-(float)(v19 + -1.0) / (float)((float)(v16 + v16) * v18);
      float v34 = v18 * (float)-(float)(v33 * (float)((float)(v39 * v16) + 1.0));
      float v98 = 1.0;
      float v35 = v18 * (float)((float)(1.0 - (float)(v39 * v16)) * v33);
      float v36 = -(float)(v33 * v19);
      if (a6) {
        float v37 = v33;
      }
      else {
        float v37 = 0.0;
      }
      if (a6) {
        float v38 = v33 * 0.5;
      }
      else {
        float v38 = 0.0;
      }
      if (a6) {
        float v15 = v33 + (float)(v33 * 0.5);
      }
    }
    else
    {
      float v20 = 1.0;
      float v21 = 1.0 - v18;
      float v22 = (float)(v21 * v21) / (float)((float)((float)((float)(v16 + v16) * v18) + 1.0) - v19);
      float v23 = -(float)(v22 * v19);
      float v24 = (float)(v17 + -1.0) * (float)(v17 + -1.0);
      float v25 = (float)((float)((float)(v17 + (float)(v16 * v17)) + -1.0) * v22) / v24;
      float v26 = v22 + v25;
      if (a6) {
        float v27 = v22;
      }
      else {
        float v27 = 0.0;
      }
      if (!a6)
      {
        float v25 = 0.0;
        float v26 = 0.0;
      }
      float v28 = (float)(v21 * (float)-(float)(v21 * v21)) / (float)(v18 * (float)((float)(v18 + 1.0) + (float)(v18 + 1.0)));
      float v29 = v18 * v28;
      float v30 = -(float)(v28 * v18);
      float v31 = (float)(v17 * v28) / v24;
      float v32 = v31 + 0.0;
      if (!a6)
      {
        float v31 = 0.0;
        float v32 = 0.0;
      }
      if (a4 == 1) {
        float v20 = -1.0;
      }
      float v98 = v20;
      if (a4 == 1) {
        float v33 = 0.0;
      }
      else {
        float v33 = v22;
      }
      if (a4 == 1) {
        float v34 = v29;
      }
      else {
        float v34 = (float)(v16 + -1.0) * (float)(v18 * v22);
      }
      if (a4 == 1) {
        float v35 = v30;
      }
      else {
        float v35 = (float)(v16 + 1.0) * (float)(v18 * v22);
      }
      if (a4 == 1) {
        float v36 = 0.0;
      }
      else {
        float v36 = v23;
      }
      if (a4 == 1) {
        float v37 = 0.0;
      }
      else {
        float v37 = v27;
      }
      if (a4 == 1) {
        float v38 = v31;
      }
      else {
        float v38 = v25;
      }
      if (a4 == 1) {
        float v15 = v32;
      }
      else {
        float v15 = v26;
      }
    }
    float v40 = v18 + v18;
    float v97 = -(float)(v18 * v18);
    if ((int)a2 <= a3) {
      signed int v41 = a3;
    }
    else {
      signed int v41 = a2;
    }
    std::vector<double>::vector(__p, v41);
    float v42 = __p[0];
    if (a5 == 121)
    {
      if ((int)a2 >= 2 && a3 >= 1)
      {
        uint64_t v72 = 0;
        double v73 = v40;
        double v74 = v97;
        float v75 = v98 * v38;
        float v76 = (double *)__p[0];
        do
        {
          float v77 = (float *)(a1 + 4 * v72 * a2);
          float v80 = *v77;
          float v79 = v77[1];
          char v78 = v77 + 2;
          double v81 = (float)(v15 * v80);
          double v82 = (float)((float)(v38 * v80) + (float)(v37 * v79));
          float v83 = v76 + 2;
          *float v76 = v81;
          v76[1] = v82;
          if (a2 >= 3)
          {
            unsigned int v84 = a2 - 2;
            do
            {
              float v85 = *v78++;
              double v86 = (float)((float)(v34 * v80) + (float)(v33 * v85)) + v73 * v82 + v74 * v81;
              *v83++ = v86;
              double v81 = v82;
              double v82 = v86;
              float v80 = v85;
              --v84;
            }
            while (v84);
          }
          float v87 = *(v78 - 2);
          float v88 = *(v78 - 1);
          *(double *)&uint64_t v89 = (float)(v75 * v88);
          float v76 = v83 - 2;
          *((float32x2_t *)v78 - 1) = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(v83 - 2), (float64x2_t)vdupq_lane_s64(v89, 0)));
          if (a2 >= 3)
          {
            float v90 = v83 - 3;
            float v91 = v78 - 3;
            unsigned int v92 = a2 - 2;
            double v93 = (float)(v75 * v88);
            do
            {
              double v94 = (float)((float)(v36 * v88) + (float)(v35 * v87)) + v73 * v93 + v74 * *(double *)&v89;
              float v88 = v87;
              float v87 = *v91;
              double v95 = *v90--;
              float v96 = v94 + v95;
              *v91-- = v96;
              *(double *)&uint64_t v89 = v93;
              double v93 = v94;
              --v92;
            }
            while (v92);
            float v76 = v90 + 1;
          }
          ++v72;
        }
        while (v72 != a3);
      }
    }
    else if (a5 == 120 && a3 >= 2 && (int)a2 >= 1)
    {
      uint64_t v43 = 0;
      double v44 = v40;
      double v45 = v97;
      float v46 = v98 * v38;
      uint64_t v47 = 8 * a2;
      uint64_t v48 = -4 * a2;
      float v49 = (double *)__p[0];
      do
      {
        float v50 = (float *)(a1 + 4 * v43);
        float v51 = *v50;
        float v52 = &v50[a2];
        float v53 = *v52;
        double v54 = (float)(v15 * *v50);
        double v55 = (float)((float)(v38 * *v50) + (float)(v37 * *v52));
        float v56 = v49 + 2;
        *float v49 = v54;
        v49[1] = v55;
        if (a3 < 3)
        {
          float v51 = v53;
        }
        else
        {
          int v57 = a3 - 2;
          uint64_t v58 = a1;
          do
          {
            float v59 = v34 * v51;
            float v51 = *(float *)(v58 + v47);
            double v60 = (float)(v59 + (float)(v33 * v51)) + v44 * v55 + v45 * v54;
            *v56++ = v60;
            v58 += 4 * a2;
            double v54 = v55;
            double v55 = v60;
            --v57;
          }
          while (v57);
          float v52 = (float *)(v58 - v48);
        }
        double v61 = (float)(v46 * v51);
        double v62 = *(v56 - 2);
        float v49 = v56 - 2;
        float v63 = *(v56 - 1) + v61;
        float v64 = v52[-a2];
        *float v52 = v63;
        *(float *)&double v62 = v62 + v61;
        v52[-a2] = *(float *)&v62;
        if (a3 >= 3)
        {
          float v65 = v56 - 3;
          unsigned int v66 = &v52[-2 * a2];
          int v67 = a3 - 2;
          double v68 = (float)(v46 * v51);
          do
          {
            double v69 = (float)((float)(v36 * v51) + (float)(v35 * v64)) + v44 * v68 + v45 * v61;
            float v51 = v64;
            float v64 = *v66;
            double v70 = *v65--;
            float v71 = v69 + v70;
            *unsigned int v66 = v71;
            v66 -= a2;
            double v61 = v68;
            double v68 = v69;
            --v67;
          }
          while (v67);
          float v49 = v65 + 1;
        }
        ++v43;
        v48 -= 4;
        v47 += 4;
      }
      while (v43 != a2);
    }
    if (v42)
    {
      __p[1] = v42;
      operator delete(v42);
    }
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DBAA5280(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::postprocessing::AccuracyAndHitsBasedPostprocessing::performProcessing(apple::vision::libraries::facecore::processing::postprocessing::AccuracyAndHitsBasedPostprocessing *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  uint64_t v21 = 0;
  float v22 = 0;
  unint64_t v23 = 0;
  uint64_t v3 = *((void *)a2 + 16);
  if (*((void *)a2 + 17) != v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v15, v3 + 216 * v4);
      float v6 = v20;
      float v16 = v6;
      if (v20 < 0.25 || v17 != 0) {
        goto LABEL_37;
      }
      BOOL v8 = v20 < 0.4 || v19 <= 5;
      if (v8 && (v20 >= 0.52 ? (BOOL v9 = v19 < 3) : (BOOL v9 = 1), v9))
      {
        BOOL v10 = v20 >= 0.4;
        if (v19 != 2) {
          BOOL v10 = 0;
        }
        BOOL v11 = v19 <= 2 || v20 < 0.5;
        if (v11 && !v10 && (v20 < 0.37 || v19 != 1)) {
          goto LABEL_37;
        }
        int v18 = 0;
        int v13 = v22;
        if ((unint64_t)v22 >= v23)
        {
LABEL_35:
          float v14 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(&v21, (uint64_t)v15);
          goto LABEL_36;
        }
      }
      else
      {
        int v18 = 1;
        int v13 = v22;
        if ((unint64_t)v22 >= v23) {
          goto LABEL_35;
        }
      }
      apple::vision::libraries::facecore::FaceInternal::FaceInternal(v22, (uint64_t)v15);
      float v14 = (apple::vision::libraries::facecore::Face *)((char *)v13 + 216);
LABEL_36:
      float v22 = v14;
LABEL_37:
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v15);
      uint64_t v4 = v5;
      uint64_t v3 = *((void *)a2 + 16);
      BOOL v8 = 0x84BDA12F684BDA13 * ((*((void *)a2 + 17) - v3) >> 3) > v5++;
    }
    while (v8);
  }
  apple::vision::libraries::facecore::FaceCoreContext::updateDetectedFaces((uint64_t)a2, &v21);
  v15[0] = (void **)&v21;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](v15);
}

void sub_1DBAA544C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 136);
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::initialize(uint64_t this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (*((unsigned char *)a2 + 68))
  {
    if (!*(void *)(this + 8)) {
      operator new();
    }
  }
  return this;
}

void sub_1DBAA54E0(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x1030C400CB930ACLL);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::performProcessing(apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  uint64_t result = (**(uint64_t (***)(apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer *))this)(this);
  if (*((unsigned char *)a2 + 68))
  {
    uint64_t v5 = *((void *)a2 + 27);
    if (v5)
    {
      if (*(_DWORD *)(v5 + 144))
      {
        float v6 = (unsigned __int8 *)*((void *)a2 + 14);
        int v7 = *((_DWORD *)a2 + 30);
        int v8 = *((_DWORD *)a2 + 31);
        apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::processFace((uint64_t)this, v6, v7, v8);
      }
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 16);
      uint64_t v9 = *((void *)a2 + 17);
      if ((int)(1749801491 * ((unint64_t)(v9 - v10) >> 3)) >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        do
        {
          if (*(_DWORD *)(v10 + v11 + 144)) {
            apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::processFace((uint64_t)this, *((unsigned __int8 **)a2 + 14), *((_DWORD *)a2 + 30), *((_DWORD *)a2 + 31));
          }
          ++v12;
          v11 += 216;
        }
        while (v12 < (int)(1749801491 * ((unint64_t)(v9 - v10) >> 3)));
      }
    }
  }
  return result;
}

void apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::processFace(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  int v7 = apple::vision::libraries::facecore::mod::Image::Image((apple::vision::libraries::facecore::mod::Image *)v9, 0, 0, 1);
  apple::vision::libraries::facecore::mod::Image::SetBuffer((uint64_t)v7, a2, a3, a4, 1);
  apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::FaceAlignment((apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *)v8);
}

void sub_1DBAA57CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)va);
  apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::~FaceAlignment((apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *)va1);
  apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)(v9 - 80));
  _Unwind_Resume(a1);
}

double apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::tranformImagePointInverse(apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *this, double a2, double a3, double *a4, double *a5)
{
  uint64_t v5 = (float *)*((void *)this + 1);
  float v6 = v5[1];
  float v8 = v5[2];
  float v7 = v5[3];
  double v9 = (float)((float)(*v5 * v7) - (float)(v6 * v8));
  double v10 = 1.0 / v9;
  double v11 = 1.0 / v9 * v7;
  double v12 = -1.0 / v9;
  double v13 = v10 * *v5;
  double v14 = a2 - *((float *)this + 5);
  double v15 = a3 - *((float *)this + 6);
  *a4 = v15 * (v12 * v6) + v11 * v14;
  double result = v15 * v13 + v12 * v8 * v14;
  *a5 = result;
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::FaceAlignment(apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *this)
{
  *(void *)this = &unk_1F360CF38;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0x40000;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  operator new[]();
}

void apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::~FaceAlignment(apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *this)
{
  apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::~FaceAlignment(this);

  JUMPOUT(0x1E0196D10);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(void *)this = &unk_1F360CF38;
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MEMORY[0x1E0196CF0](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x1E0196CF0](v4, 0x1000C8000313F17);
  }
}

void apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::_getTranformation(const double **this, float *a2, float *a3, float *a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  __A[0] = (double)a5;
  __A[1] = (double)-a6;
  long long v54 = xmmword_1DBF81400;
  double v55 = (double)a6;
  double v56 = (double)a5;
  long long v57 = xmmword_1DBF81200;
  double v58 = (double)a7;
  double v59 = (double)-a8;
  long long v60 = xmmword_1DBF81400;
  double v61 = (double)a8;
  double v62 = (double)a7;
  long long v63 = xmmword_1DBF81200;
  double v64 = (double)a9;
  double v65 = (double)-a10;
  long long v66 = xmmword_1DBF81400;
  double v67 = (double)a10;
  double v68 = (double)a9;
  long long v69 = xmmword_1DBF81200;
  vDSP_mtransD(__A, 1, __C, 1, 4uLL, 6uLL);
  vDSP_mmulD(__C, 1, __A, 1, &v36, 1, 4uLL, 4uLL, 6uLL);
  vDSP_mmulD(__C, 1, this[5], 1, v33, 1, 4uLL, 1uLL, 6uLL);
  double v14 = v36 * v41 - v37 * v40;
  double v15 = v36 * v42 - v38 * v40;
  double v16 = v36 * v43 - v39 * v40;
  double v17 = v37 * v42 - v38 * v41;
  double v18 = v37 * v43 - v39 * v41;
  double v19 = v38 * v43 - v39 * v42;
  double v20 = v44 * v49 - v45 * v48;
  double v21 = v44 * v50 - v46 * v48;
  double v22 = v44 * v51 - v47 * v48;
  double v23 = v45 * v50 - v46 * v49;
  double v24 = v45 * v51 - v47 * v49;
  double v25 = v46 * v51 - v47 * v50;
  v35[0] = v41 * v25 - v42 * v24 + v43 * v23;
  v35[1] = v38 * v24 - v37 * v25 - v39 * v23;
  v35[2] = v49 * v19 - v50 * v18 + v51 * v17;
  v35[3] = v18 * v46 - v45 * v19 - v47 * v17;
  v35[4] = v42 * v22 - v40 * v25 - v43 * v21;
  v35[5] = v36 * v25 - v38 * v22 + v39 * v21;
  v35[6] = v16 * v50 - v48 * v19 - v51 * v15;
  v35[7] = v44 * v19 - v46 * v16 + v47 * v15;
  v35[8] = v40 * v24 - v41 * v22 + v43 * v20;
  v35[9] = v37 * v22 - v36 * v24 - v39 * v20;
  v35[10] = v48 * v18 - v49 * v16 + v51 * v14;
  v35[11] = v16 * v45 - v44 * v18 - v47 * v14;
  v35[12] = v41 * v21 - v40 * v23 - v42 * v20;
  v35[13] = v36 * v23 - v37 * v21 + v38 * v20;
  v35[14] = v15 * v49 - v48 * v17 - v50 * v14;
  v35[15] = v44 * v17 - v45 * v15 + v46 * v14;
  double __B = v14 * v25 - v15 * v24 + v16 * v23 + v17 * v22 - v18 * v21 + v19 * v20;
  vDSP_vsdivD(v35, 1, &__B, v34, 1, 0x10uLL);
  vDSP_mmulD(v33, 1, v34, 1, v32, 1, 1uLL, 4uLL, 4uLL);
  float v26 = v32[0];
  float v27 = v32[1];
  *a2 = v26;
  a2[1] = -v27;
  a2[2] = v27;
  a2[3] = v26;
  double v28 = v32[3];
  float v29 = v32[2];
  *a3 = v29;
  float v30 = v28;
  *a4 = v30;
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::_transformImage(apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *this, apple::vision::libraries::facecore::mod::Image *a2, float *a3, float a4, float a5, int a6, unsigned __int8 *a7)
{
  if (a6 < 1)
  {
    LOBYTE(v26) = 1;
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    float v9 = a3[1];
    float v11 = a3[2];
    float v10 = a3[3];
    double v12 = (float)((float)(*a3 * v10) - (float)(v9 * v11));
    double v13 = 1.0 / v12;
    double v14 = 1.0 / v12 * v10;
    double v15 = -1.0 / v12;
    double v16 = v15 * v9;
    double v17 = v15 * v11;
    double v18 = v13 * *a3;
    uint64_t v19 = *((unsigned int *)a2 + 2);
    int v20 = *((_DWORD *)a2 + 2);
    uint64_t v21 = *((void *)a2 + 2);
    int v22 = *(_DWORD *)a2;
    int v23 = *(_DWORD *)a2 - 1;
    int v24 = *((_DWORD *)a2 + 1) - 1;
    int v25 = a6 * a6;
    LOBYTE(v26) = 1;
    do
    {
      int v27 = 0;
      double v28 = (float)((float)v8 - a5);
      double v29 = v16 * v28;
      double v30 = v18 * v28;
      int v31 = v7;
      do
      {
        double v32 = (float)((float)v27 - a4);
        double v33 = v29 + v14 * v32;
        int v34 = (int)v33;
        if ((int)v33 < 0 || v23 <= v34 || (double v35 = v30 + v17 * v32, v36 = (int)v35, (int)v35 < 0) || v24 <= v36)
        {
          if ((int)v19 < 1)
          {
            LOBYTE(v26) = 0;
          }
          else
          {
            uint64_t v26 = v19;
            int v57 = v31;
            do
            {
              a7[v57] = 0;
              v57 += v25;
              --v26;
            }
            while (v26);
          }
        }
        else if (v20 >= 1)
        {
          int v37 = v34 + v22 * v36;
          double v38 = v33 - (double)v34;
          double v39 = v35 - (double)v36;
          double v40 = (1.0 - v38) * (1.0 - v39);
          double v41 = v38 * (1.0 - v39);
          double v42 = v39 * (1.0 - v38);
          double v43 = v38 * v39;
          double v44 = (unsigned __int8 *)(v21 + (int)v19 + (int)v19 * (uint64_t)(v37 + v22));
          double v45 = (unsigned __int8 *)(v21 + (int)v19 + (int)v19 * (uint64_t)v37);
          double v46 = (unsigned __int8 *)(v21 + (int)v19 * (uint64_t)(v37 + v22));
          double v47 = (unsigned __int8 *)(v21 + (int)v19 * (uint64_t)v37);
          uint64_t v48 = v19;
          int v49 = v31;
          do
          {
            unsigned int v51 = *v47++;
            unsigned int v50 = v51;
            unsigned int v53 = *v46++;
            unsigned int v52 = v53;
            unsigned int v55 = *v45++;
            unsigned int v54 = v55;
            unsigned int v56 = *v44++;
            a7[v49] = (int)(v41 * (double)v54 + v40 * (double)v50 + v42 * (double)v52 + v43 * (double)v56 + 0.5);
            v49 += v25;
            --v48;
          }
          while (v48);
        }
        ++v27;
        ++v31;
      }
      while (v27 != a6);
      ++v8;
      v7 += a6;
    }
    while (v8 != a6);
  }
  return v26 & 1;
}

void apple::vision::libraries::facecore::processing::postprocessing::RegularFacesFilter::performProcessing(apple::vision::libraries::facecore::processing::postprocessing::RegularFacesFilter *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  uint64_t v12 = 0;
  double v13 = 0;
  unint64_t v14 = 0;
  uint64_t v3 = *((void *)a2 + 16);
  if (*((void *)a2 + 17) != v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v10, v3 + 216 * v4);
      if (v11) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = *((_DWORD *)a2 + 2) == 4;
      }
      if (v6)
      {
        int v7 = v13;
        if ((unint64_t)v13 >= v14)
        {
          int v8 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(&v12, (uint64_t)v10);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal(v13, (uint64_t)v10);
          int v8 = (apple::vision::libraries::facecore::Face *)((char *)v7 + 216);
        }
        double v13 = v8;
      }
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v10);
      uint64_t v4 = v5;
      uint64_t v3 = *((void *)a2 + 16);
    }
    while (0x84BDA12F684BDA13 * ((*((void *)a2 + 17) - v3) >> 3) > v5++);
  }
  apple::vision::libraries::facecore::FaceCoreContext::updateDetectedFaces((uint64_t)a2, &v12);
  v10[0] = (void **)&v12;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_1DBAA60B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 72);
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::postprocessing::FacesCoordinatesPostprocessing::performProcessing(apple::vision::libraries::facecore::processing::postprocessing::FacesCoordinatesPostprocessing *this, apple::vision::libraries::facecore::FaceCoreContext *a2, uint64_t a3, image *a4)
{
  uint64_t v4 = *((void *)a2 + 16);
  if (*((void *)a2 + 17) != v4)
  {
    uint64_t v6 = 0;
    int v7 = (coord *)((char *)a2 + 112);
    unsigned int v8 = 1;
    do
    {
      uint64_t result = apple::vision::libraries::facecore::utils::ImageRotationUtils::computeFaceCoordinatesInImageRotatedByAngle((360 - *((_DWORD *)a2 + 4)), v4 + 216 * v6, v7, a4);
      uint64_t v6 = v8;
      uint64_t v4 = *((void *)a2 + 16);
    }
    while (0x84BDA12F684BDA13 * ((*((void *)a2 + 17) - v4) >> 3) > v8++);
  }
  return result;
}

void apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::~EyesAndMouthLocalizer(apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer *this)
{
  *(void *)this = &unk_1F360CD48;
  uint64_t v2 = (apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth *)*((void *)this + 1);
  if (v2)
  {
    apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth::~EyesAndMouth(v2);
    MEMORY[0x1E0196D10]();
    *((void *)this + 1) = 0;
  }
}

#error "1DBAA61E4: too big function (funcsize=0)"

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::KeypointLocalization_U8(void *a1, uint64_t a2)
{
}

void sub_1DBACB360(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::~KeypointLocalization(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::~KeypointLocalization_U8(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *this)
{
  *(void *)this = &unk_1F360D040;
  uint64_t v2 = (void *)*((void *)this + 151);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 152);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 153);
  if (v4) {
    free(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 154);
  if (v5) {
    free(v5);
  }

  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::~KeypointLocalization(this);
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::matrixMultiply(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *this, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, int a6, int a7, int a8)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  if (a8 == 256)
  {
    uint64_t v9 = a5;
    float v10 = a2;
    int v11 = a7 + 7;
    uint64_t v12 = (int)((a7 + 7) & 0xFFFFFFF8);
    v15[0] = a2;
    v15[1] = a3;
    v15[2] = a4;
    v15[3] = a5;
    v15[4] = a6;
    v15[5] = v12;
    matrixMultiply256_NEON((uint64_t)v15);
    if (a6 >= 1)
    {
      int v13 = 0;
      do
      {
        if ((int)v12 >= 1)
        {
          uint64_t v14 = 0;
          do
            v10[v14++] -= *v9;
          while ((v11 & 0xFFFFFFF8) != v14);
        }
        ++v13;
        ++v9;
        v10 += v12;
      }
      while (v13 != a6);
    }
  }
}

double apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *this, __int16 *a2, unsigned __int8 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5 = 0;
  int v6 = 0;
  unsigned __int16 v7 = 0;
  do
  {
    for (uint64_t i = 0; i != 16; ++i)
    {
      int v9 = a3[i];
      a2[i] = v9;
      v7 += v9;
      v6 += v9 * v9;
    }
    ++v5;
    a2 += 16;
    a3 += 32;
  }
  while (v5 != 16);
  *a4 = v7;
  double result = sqrt((double)((v6 << 8) - v7 * v7));
  *a5 = (int)result;
  return result;
}

float apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::localize(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *this, const apple::vision::libraries::facecore::mod::Image *a2, int a3, int a4, int *a5, int *a6)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  int v10 = a4 - 16;
  do
  {
    for (uint64_t i = 0; i != 32; ++i)
      *(unsigned char *)(*((void *)this + 151) + v8 + i) = *(unsigned char *)(*((void *)a2 + 2)
                                                              + a3
                                                              - 16
                                                              + (int)i
                                                              + v10 * *(_DWORD *)a2);
    ++v9;
    v8 += 32;
    ++v10;
  }
  while (v9 != 32);
  uint64_t v12 = 0;
  uint64_t v13 = *((void *)this + 152);
  uint64_t v14 = *((void *)this + 151);
  uint64_t v15 = *((void *)this + 153);
  uint64_t v16 = *((void *)this + 154);
  uint64_t v17 = v13;
  do
  {
    uint64_t v18 = 0;
    uint64_t v19 = 8 * v12;
    uint64_t v20 = v14;
    do
    {
      uint64_t v21 = 0;
      int v22 = 0;
      unsigned __int16 v23 = 0;
      uint64_t v24 = v20;
      uint64_t v25 = v17;
      do
      {
        for (uint64_t j = 0; j != 16; ++j)
        {
          int v27 = *(unsigned __int8 *)(v24 + j);
          *(_WORD *)(v25 + 2 * j) = v27;
          v23 += v27;
          v22 += v27 * v27;
        }
        ++v21;
        v25 += 32;
        v24 += 32;
      }
      while (v21 != 16);
      *(_WORD *)(v15 + 2 * (v18 + v19)) = v23;
      *(_WORD *)(v16 + 2 * (v18 + v19)) = (int)sqrt((double)((v22 << 8) - v23 * v23));
      ++v18;
      v17 += 512;
      v20 += 2;
    }
    while (v18 != 8);
    ++v12;
    v14 += 64;
  }
  while (v12 != 8);
  for (uint64_t k = 0; k != 64; ++k)
  {
    for (uint64_t m = 0; m != 512; m += 2)
      *(_WORD *)(v13 + m) = ((*(unsigned __int16 *)(v13 + m) << 20) - (*(unsigned __int16 *)(v15 + 2 * k) << 12))
                          / *(unsigned __int16 *)(v16 + 2 * k);
    v13 += 512;
  }
  double v30 = (__int16 *)malloc_type_malloc(0x8C00uLL, 0x74B25170uLL);
  int v31 = (__int16 *)malloc_type_malloc(0x8C00uLL, 0xA377FB5uLL);
  double v32 = malloc_type_malloc(0x118uLL, 0x100004052888210uLL);
  double v33 = (apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *)malloc_type_malloc(0x118uLL, 0x100004052888210uLL);
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::matrixMultiply(v33, v30, *((__int16 **)this + 155), *((__int16 **)this + 152), *((__int16 **)this + 156), 256, 64, 256);
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::matrixMultiply(v34, v31, *((__int16 **)this + 158), *((__int16 **)this + 152), *((__int16 **)this + 159), 256, 64, 256);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = *((void *)this + 157);
  uint64_t v39 = *((void *)this + 160);
  do
  {
    uint64_t v40 = 0;
    int v41 = 0;
    int v42 = 0;
    uint64_t v43 = v36;
    do
    {
      v42 -= (((*(__int16 *)(v38 + v40) * *(__int16 *)((char *)v30 + v43)) >> 16) * *(__int16 *)((char *)v30 + v43)) >> 6;
      v41 -= (((*(__int16 *)(v39 + v40) * *(__int16 *)((char *)v31 + v43)) >> 16) * *(__int16 *)((char *)v31 + v43)) >> 6;
      v43 += 128;
      v40 += 2;
    }
    while (v40 != 512);
    v32[v37] = v42;
    *((_DWORD *)v33 + v37++) = v41;
    v36 += 2;
  }
  while (v37 != 64);
  int v44 = 0;
  int v45 = *v32 - *(_DWORD *)v33;
  for (uint64_t n = 1; n != 64; ++n)
  {
    if (v32[n] - *((_DWORD *)v33 + n) > v45)
    {
      int v44 = n;
      int v45 = v32[n] - *((_DWORD *)v33 + n);
    }
  }
  float v98 = (__int16 *)(*((void *)this + 152) + 0x8000);
  float v99 = a5;
  *a5 = 2 * (v44 & 7);
  signed int v48 = (v44 >> 2) & 0xFFFFFFFE;
  BOOL v47 = v48 <= 0;
  *a6 = v48;
  uint64_t v49 = *((void *)this + 151) + 32 * v48;
  uint64_t v50 = *a5;
  uint64_t v51 = v49 + v50;
  float v100 = (unsigned __int8 *)(v49 + v50);
  if (v47)
  {
    int v54 = 0;
  }
  else
  {
    if ((int)v50 < 1)
    {
      int v53 = 0;
      unsigned int v52 = v98;
    }
    else
    {
      unsigned int v52 = v98;
      apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v35, v98, (unsigned __int8 *)(v51 - 33), (unsigned __int16 *)(*((void *)this + 153) + 128), (unsigned __int16 *)(*((void *)this + 154) + 128));
      v102[0] = *(unsigned char *)a5 - 1;
      v102[1] = *(unsigned char *)a6 - 1;
      int v53 = 1;
    }
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v35, &v52[v53 << 8], (unsigned __int8 *)(v51 - 32), (unsigned __int16 *)(*((void *)this + 153) + 2 * (v53 | 0x40u)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v53 | 0x40u)));
    unsigned int v55 = &v102[2 * v53];
    *unsigned int v55 = *a5;
    v55[1] = *(unsigned char *)a6 - 1;
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v56, &v52[(v53 + 1) << 8], (unsigned __int8 *)(v51 - 31), (unsigned __int16 *)(*((void *)this + 153) + 2 * (v53 + 65)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v53 + 65)));
    LODWORD(v50) = *a5;
    int v57 = &v102[2 * (v53 + 1)];
    *int v57 = *a5 + 1;
    v57[1] = *(unsigned char *)a6 - 1;
    int v54 = v53 | 2;
  }
  if ((int)v50 < 1)
  {
    long long v60 = a5;
    double v59 = v100;
    double v58 = v98;
  }
  else
  {
    double v58 = v98;
    double v59 = v100;
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v35, &v98[v54 << 8], v100 - 1, (unsigned __int16 *)(*((void *)this + 153) + 2 * (v54 | 0x40u)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v54 | 0x40u)));
    long long v60 = v99;
    double v61 = &v102[2 * v54];
    unsigned char *v61 = *(unsigned char *)v99 - 1;
    v61[1] = *a6;
    ++v54;
  }
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v35, &v58[v54 << 8], v59 + 1, (unsigned __int16 *)(*((void *)this + 153) + 2 * (v54 | 0x40u)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v54 | 0x40u)));
  int v63 = *v60;
  double v64 = &v102[2 * v54];
  *double v64 = *v60 + 1;
  v64[1] = *a6;
  double v65 = v60;
  long long v66 = v58;
  int v67 = v54 + 1;
  if (v63 >= 1)
  {
    double v68 = &v58[v67 << 8];
    long long v69 = v65;
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v62, v68, v100 + 31, (unsigned __int16 *)(*((void *)this + 153) + 2 * (v54 + 65)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v54 + 65)));
    uint64_t v70 = &v102[2 * v67];
    *uint64_t v70 = *(unsigned char *)v69 - 1;
    v70[1] = *(unsigned char *)a6 + 1;
    int v67 = v54 + 2;
  }
  float v71 = v66;
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v62, &v66[v67 << 8], v100 + 32, (unsigned __int16 *)(*((void *)this + 153) + 2 * (v67 | 0x40u)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v67 | 0x40u)));
  uint64_t v72 = &v102[2 * v67];
  *uint64_t v72 = *v99;
  v72[1] = *(unsigned char *)a6 + 1;
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::copyPatch(v73, &v66[(v67 + 1) << 8], v100 + 33, (unsigned __int16 *)(*((void *)this + 153) + 2 * (v67 + 65)), (unsigned __int16 *)(*((void *)this + 154) + 2 * (v67 + 65)));
  uint64_t v75 = 0;
  float v76 = &v102[2 * (v67 + 1)];
  *float v76 = *(unsigned char *)v99 + 1;
  v76[1] = *(unsigned char *)a6 + 1;
  uint64_t v77 = (v67 + 2);
  uint64_t v78 = *((void *)this + 153);
  uint64_t v79 = *((void *)this + 154);
  float v80 = v71;
  do
  {
    for (iuint64_t i = 0; ii != 256; ++ii)
      v80[ii] = (((unsigned __int16)v80[ii] << 20) - (*(unsigned __int16 *)(v78 + 2 * (v75 + 64)) << 12))
              / *(unsigned __int16 *)(v79 + 2 * (v75 + 64));
    ++v75;
    v80 += 256;
  }
  while (v75 != v77);
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::matrixMultiply(v74, v30, *((__int16 **)this + 155), v71, *((__int16 **)this + 156), 256, v67 + 2, 256);
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::matrixMultiply(v82, v31, *((__int16 **)this + 158), v71, *((__int16 **)this + 159), 256, v67 + 2, 256);
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = *((void *)this + 157);
  uint64_t v86 = *((void *)this + 160);
  do
  {
    uint64_t v87 = 0;
    int v88 = 0;
    int v89 = 0;
    uint64_t v90 = v83;
    do
    {
      v89 -= (((*(__int16 *)(v85 + v87) * *(__int16 *)((char *)v30 + v90)) >> 16) * *(__int16 *)((char *)v30 + v90)) >> 6;
      v88 -= (((*(__int16 *)(v86 + v87) * *(__int16 *)((char *)v31 + v90)) >> 16) * *(__int16 *)((char *)v31 + v90)) >> 6;
      v90 += 16;
      v87 += 2;
    }
    while (v87 != 512);
    uint64_t v91 = 4 * v84 + 256;
    *(_DWORD *)((char *)v32 + v91) = v89;
    *(_DWORD *)((char *)v33 + v91) = v88;
    ++v84;
    v83 += 2;
  }
  while (v84 != v77);
  uint64_t v92 = 0;
  int v93 = -1;
  do
  {
    if (v32[v92 + 64] - *((_DWORD *)v33 + v92 + 64) > v45)
    {
      int v93 = v92;
      int v45 = v32[v92 + 64] - *((_DWORD *)v33 + v92 + 64);
    }
    ++v92;
  }
  while (v77 != v92);
  if ((v93 & 0x80000000) == 0)
  {
    double v94 = &v102[2 * v93];
    *float v99 = *v94;
    *a6 = v94[1];
  }
  free(v30);
  free(v31);
  free(v32);
  free(v33);
  *float v99 = a3 + *v99 - 8;
  *a6 = a4 + *a6 - 8;
  return (float)v45;
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::AamFeature()
{
}

void sub_1DBACBED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::~AamFeature(apple::vision::libraries::facecore::mod::aam::AamFeature *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::setLandmarksAndDoShearch(uint64_t a1, const unsigned __int8 *a2, int a3, int a4, int *a5)
{
  apple::vision::libraries::facecore::mod::aam::AamSearch::SetEyePositions(*(void *)a1, (double)a5[1], (double)a5[2], (double)a5[3], (double)a5[4], (double)a5[5], (double)a5[6]);
  apple::vision::libraries::facecore::mod::aam::AamSearch::MakeSearchImage(*(apple::vision::libraries::facecore::mod::aam::AamSearch **)a1, a2, a3, a4);
  apple::vision::libraries::facecore::mod::aam::AamSearch::InitSimilarityTransform(*(apple::vision::libraries::facecore::mod::aam::AamSearch **)a1);
  uint64_t v9 = *(apple::vision::libraries::facecore::mod::aam::AamSearch **)a1;
  int v10 = *(_DWORD *)(a1 + 8);

  apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearch(v9, 4, 0.1, 3.0, 100, v10);
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::extractFaceprint(apple::vision::libraries::facecore::mod::aam::AamSearch3d **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::Optimize3dOrthographicSuccessive(*this);
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetShapeParameters(*this, *((_DWORD *)*this + 13774), &v22);
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::Get3dShapeParameters(*this, &v20);
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetTextureParameters(*this, 7, (double **)&v18);
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetShapeStd(*this, __p);
  apple::vision::libraries::facecore::mod::aam::AamFeature::Mahalanobis(v4, (uint64_t *)&v22, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::Get3dShapeStd(*this, v16);
  apple::vision::libraries::facecore::mod::aam::AamFeature::Mahalanobis(v5, (uint64_t *)&v20, (uint64_t *)v16);
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetTextureStd(*this, 7, v15);
  apple::vision::libraries::facecore::mod::aam::AamFeature::Mahalanobis(v6, (uint64_t *)&v18, (uint64_t *)v15);
  unsigned __int16 v7 = v15[0];
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  apple::vision::libraries::facecore::mod::aam::AamFeature::Normalize(1.0, (uint64_t)v7, (uint64_t *)&v22);
  apple::vision::libraries::facecore::mod::aam::AamFeature::Normalize(1.0, v8, (uint64_t *)&v20);
  apple::vision::libraries::facecore::mod::aam::AamFeature::Normalize(1.0, v9, (uint64_t *)&v18);
  std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)a2, 0, v22, v23, (v23 - v22) >> 3);
  std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)a2, a2[1], v20, v21, (v21 - v20) >> 3);
  std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)a2, a2[1], (char *)v18, v19, (v19 - (unsigned char *)v18) >> 3);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = v11 - *a2;
  if (v11 != *a2)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v12 >> 3;
    do
    {
      *(double *)(v10 + 8 * v13) = defaultL1Weight[v13] * *(double *)(v10 + 8 * v13);
      ++v13;
    }
    while (v14 > v13);
  }
  if (v18)
  {
    uint64_t v19 = (char *)v18;
    operator delete(v18);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v22)
  {
    unsigned __int16 v23 = v22;
    operator delete(v22);
  }
}

void sub_1DBACC1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  int v22 = *(void **)(v20 - 64);
  if (v22)
  {
    *(void *)(v20 - 56) = v22;
    operator delete(v22);
  }
  unsigned __int16 v23 = *(void **)(v20 - 40);
  if (v23)
  {
    *(void *)(v20 - 32) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::Mahalanobis(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1] - *a2;
  uint64_t v5 = *a3;
  if ((a3[1] - *a3) >> 3 >= (unint64_t)(v4 >> 3)) {
    unint64_t v6 = v4 >> 3;
  }
  else {
    unint64_t v6 = (a3[1] - *a3) >> 3;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      double v8 = *(double *)(v5 + 8 * v7);
      if (v8 != 0.0) {
        *(double *)(v3 + 8 * v7) = sqrt(1.0 / fabs(v8)) * *(double *)(v3 + 8 * v7);
      }
      ++v7;
    }
    while (v6 > v7);
  }
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::Normalize(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  unint64_t v5 = (v4 - *a3) >> 3;
  if (v4 == *a3)
  {
    double v7 = 0.0;
  }
  else
  {
    uint64_t v6 = 0;
    double v7 = 0.0;
    do
    {
      double v7 = v7 + *(double *)(v3 + 8 * v6) * *(double *)(v3 + 8 * v6);
      ++v6;
    }
    while (v5 > v6);
  }
  double v8 = sqrt(v7);
  if (v8 > 0.0 && v4 != v3)
  {
    uint64_t v10 = 0;
    do
    {
      *(double *)(v3 + 8 * v10) = *(double *)(v3 + 8 * v10) / v8 * a1;
      ++v10;
    }
    while (v5 > v10);
  }
}

void apple::vision::libraries::facecore::mod::aam::AamFeature::GetShapeVertices(apple::vision::libraries::facecore::mod::aam::AamSearch **this@<X0>, void *a2@<X8>)
{
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetShape(*this, (char *)v26);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v5 = (char **)(a2 + 2);
  do
  {
    uint64_t v6 = &v26[v4];
    double v7 = *v5;
    if (v3 >= *v5)
    {
      uint64_t v9 = (char *)*a2;
      uint64_t v10 = (uint64_t)&v3[-*a2] >> 3;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v12 = v7 - v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v13);
        uint64_t v9 = (char *)*a2;
        uint64_t v3 = (char *)a2[1];
      }
      else
      {
        unint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      *(void *)uint64_t v15 = *v6;
      double v8 = v15 + 8;
      while (v3 != v9)
      {
        uint64_t v16 = *((void *)v3 - 1);
        v3 -= 8;
        *((void *)v15 - 1) = v16;
        v15 -= 8;
      }
      double v7 = &v14[8 * v13];
      *a2 = v15;
      a2[1] = v8;
      a2[2] = v7;
      if (v9)
      {
        operator delete(v9);
        double v7 = *v5;
      }
    }
    else
    {
      *(void *)uint64_t v3 = *v6;
      double v8 = v3 + 8;
    }
    a2[1] = v8;
    uint64_t v17 = (void *)&v26[v4] + 1;
    if (v8 >= v7)
    {
      uint64_t v18 = (char *)*a2;
      uint64_t v19 = (uint64_t)&v8[-*a2] >> 3;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61) {
LABEL_36:
      }
        std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
      uint64_t v21 = v7 - v18;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        unsigned __int16 v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 2), v22);
        uint64_t v18 = (char *)*a2;
        double v8 = (char *)a2[1];
      }
      else
      {
        unsigned __int16 v23 = 0;
      }
      uint64_t v24 = &v23[8 * v19];
      *(void *)uint64_t v24 = *v17;
      uint64_t v3 = v24 + 8;
      while (v8 != v18)
      {
        uint64_t v25 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v24 - 1) = v25;
        v24 -= 8;
      }
      *a2 = v24;
      a2[1] = v3;
      a2[2] = &v23[8 * v22];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(void *)double v8 = *v17;
      uint64_t v3 = v8 + 8;
    }
    a2[1] = v3;
    ++v4;
  }
  while (v4 != 63);
}

void sub_1DBACC510(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *apple::vision::libraries::facecore::mod::aam::AamFeature::GetTriList@<X0>(apple::vision::libraries::facecore::mod::aam::AamSearch3d **this@<X0>, void *a2@<X8>)
{
  return apple::vision::libraries::facecore::mod::aam::AamSearch3d::GetTriList(*this, a2);
}

char *std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  double v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    double v28 = &v18[8 * v15];
    __p = v18;
    int v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    double v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)double v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    double v35 = v30;
    unint64_t v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    unsigned __int16 v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    uint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  unsigned __int16 v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1DBACC710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  double v7 = v5;
  if (*a1 != __src)
  {
    double v8 = __src;
    double v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    double v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void apple::vision::libraries::facecore::processing::detection::Detector::Detector(apple::vision::libraries::facecore::processing::detection::Detector *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1F360CEE8;
  *((void *)this + 1) = 0;
  *((void *)this + 7) = 0;
  operator new();
}

void sub_1DBACCB08(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  MEMORY[0x1E0196D10](v4, 0x10B2C405E811E7BLL);
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::Detector::~Detector(apple::vision::libraries::facecore::processing::detection::Detector *this)
{
  *(void *)this = &unk_1F360CEE8;
  uint64_t v2 = (apple::vision::libraries::facecore::processing::detection::PostProcessing *)*((void *)this + 1);
  if (v2)
  {
    apple::vision::libraries::facecore::processing::detection::PostProcessing::~PostProcessing(v2);
    MEMORY[0x1E0196D10]();
    *((void *)this + 1) = 0;
  }
  uint64_t v3 = (apple::vision::libraries::facecore::mod::windows::Window **)*((void *)this + 7);
  if (v3)
  {
    apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(v3);
    MEMORY[0x1E0196D10]();
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4)
  {
    uint64_t v5 = apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::~DetectorAttributes(v4);
    MEMORY[0x1E0196D10](v5, 0x10B2C405E811E7BLL);
    *((void *)this + 9) = 0;
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6)
  {
    uint64_t v7 = apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::~DetectorAttributes(v6);
    MEMORY[0x1E0196D10](v7, 0x10B2C405E811E7BLL);
    *((void *)this + 8) = 0;
  }
  double v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::processing::detection::Detector::~Detector(this);

  JUMPOUT(0x1E0196D10);
}

void apple::vision::libraries::facecore::processing::detection::Detector::initialize(apple::vision::libraries::facecore::processing::detection::Detector *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (!*((void *)this + 1)) {
    operator new();
  }
  if (vabds_f32(*((float *)this + 23), apple::vision::libraries::facecore::FaceCoreContext::getMinFaceSize(a2)) >= 0.00001)
  {
    *((float *)this + 23) = apple::vision::libraries::facecore::FaceCoreContext::getMinFaceSize(a2);
    apple::vision::libraries::facecore::processing::detection::Detector::setMinWindowSize(this);
  }
  int v4 = *((_DWORD *)a2 + 5);
  if (*((unsigned char *)this + 96) || v4 != *((_DWORD *)this + 4) || *((_DWORD *)a2 + 6) != *((_DWORD *)this + 21))
  {
    *((_DWORD *)this + 4) = v4;
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 6);
    apple::vision::libraries::facecore::processing::detection::Detector::updateDetectionAngles(this, a2);
  }
  if (*((unsigned char *)this + 88) != (*((_DWORD *)a2 + 16) & 1))
  {
    *((unsigned char *)this + 88) = *((_DWORD *)a2 + 16) & 1;
    apple::vision::libraries::facecore::processing::detection::Detector::updateShadowPreprocessing(this, (uint64_t **)a2);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((*(unsigned char *)(v5 + 9) != 0) != (*((unsigned char *)a2 + 88) != 0)) {
    *(unsigned char *)(v5 + 9) = *((unsigned char *)a2 + 88);
  }
  if ((*(unsigned char *)(v5 + 10) != 0) != (*((unsigned char *)a2 + 89) != 0)) {
    *(unsigned char *)(v5 + 10) = *((unsigned char *)a2 + 89);
  }
}

void sub_1DBACCDC4(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x1030C4096EB08D0);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::Detector::updateDetectionAngles(apple::vision::libraries::facecore::processing::detection::Detector *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  int v2 = (int)a2;
  generateAngles(*((_DWORD *)this + 4), *((_DWORD *)this + 21), (double **)&__p);
  *((void *)this + 4) = *((void *)this + 3);
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<double *>,std::__wrap_iter<double *>,std::back_insert_iterator<std::vector<double>>,0>(__p, v7, (uint64_t)this + 24);
  int v5 = *((_DWORD *)this + 20);
  if (v5 == 2)
  {
    apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::createIntegrals(*((void *)this + 8), (*((void *)this + 4) - *((void *)this + 3)) >> 3, v2, v4);
    int v5 = *((_DWORD *)this + 20);
  }
  if (!v5) {
    apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::createIntegrals(*((void *)this + 9), (*((void *)this + 4) - *((void *)this + 3)) >> 3, v2, v4);
  }
  *((unsigned char *)this + 96) = 0;
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DBACCE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t apple::vision::libraries::facecore::processing::detection::Detector::updateShadowPreprocessing(apple::vision::libraries::facecore::processing::detection::Detector *this, uint64_t **a2)
{
  apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::setShadowPreprocessing(*((void *)this + 8), *((unsigned __int8 *)this + 88), a2);
  uint64_t v4 = *((void *)this + 9);
  int v5 = *((unsigned __int8 *)this + 88);

  return apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::setShadowPreprocessing(v4, v5, a2);
}

void apple::vision::libraries::facecore::processing::detection::Detector::performProcessing(apple::vision::libraries::facecore::processing::detection::Detector *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  (**(void (***)(apple::vision::libraries::facecore::processing::detection::Detector *))this)(this);
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  int v4 = *((_DWORD *)this + 20);
  if (v4 == 2) {
    apple::vision::libraries::facecore::processing::detection::Detector::detect<apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>>((uint64_t)this, &v5);
  }
  if (!v4) {
    apple::vision::libraries::facecore::processing::detection::Detector::detect<apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>>((uint64_t)this, &v5);
  }
  apple::vision::libraries::facecore::FaceCoreContext::updateDetectedFaces((uint64_t)a2, (uint64_t *)&v6);
  *(void *)&long long v5 = &v6;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_1DBACCFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::Detector::detect<apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  is_mul_ok((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3, 0x18uLL);
  operator new[]();
}

void sub_1DBACD630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void apple::vision::libraries::facecore::processing::detection::Detector::detect<apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  is_mul_ok((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3, 0x18uLL);
  operator new[]();
}

void sub_1DBACDCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::setShadowPreprocessing(uint64_t a1, int a2, uint64_t **this)
{
  *(unsigned char *)(a1 + 56) = a2;
  if (a2 && !*(void *)(a1 + 64)) {
    *(void *)(a1 + 64) = apple::vision::libraries::facecore::FaceCoreContext::getPreprocessingLookupTable(this);
  }

  return apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::updateIntegralsLookupTables(a1);
}

void apple::vision::libraries::facecore::processing::detection::Detector::setMinWindowSize(apple::vision::libraries::facecore::processing::detection::Detector *this)
{
  uint64_t v1 = (apple::vision::libraries::facecore::mod::windows::Window **)*((void *)this + 7);
  if (v1)
  {
    apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(v1);
    MEMORY[0x1E0196D10]();
  }
  operator new();
}

void sub_1DBACDE3C(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x30C402F5D85C2);
  _Unwind_Resume(a1);
}

void generateAngles(int a1@<W0>, int a2@<W1>, double **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 >= 1)
  {
    long long v5 = 0;
    int v6 = 0;
    double v7 = (double)a2;
    unsigned int v8 = a1 >> 1;
    uint64_t v9 = a3 + 2;
    do
    {
      double v10 = v7 * (double)(int)(v6 - v8);
      if ((unint64_t)v5 >= *v9)
      {
        int64_t v12 = *a3;
        uint64_t v13 = v5 - *a3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v9 - (void)v12;
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v9, v16);
          int64_t v12 = *a3;
          long long v5 = a3[1];
        }
        else
        {
          unint64_t v17 = 0;
        }
        uint64_t v18 = (double *)&v17[8 * v13];
        *uint64_t v18 = v10;
        uint64_t v11 = v18 + 1;
        while (v5 != v12)
        {
          uint64_t v19 = *((void *)v5-- - 1);
          *((void *)v18-- - 1) = v19;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = (double *)&v17[8 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *long long v5 = v10;
        uint64_t v11 = v5 + 1;
      }
      a3[1] = v11;
      ++v6;
      long long v5 = v11;
    }
    while (v6 != a1);
  }
}

void sub_1DBACDF98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::createIntegrals(uint64_t a1, int a2, int a3, apple::vision::libraries::facecore::FaceCoreContext *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v8 = (uint64_t *)(a1 + 8);
  if (v7 != *(void *)(a1 + 8))
  {
    unint64_t v9 = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      uint64_t v10 = *(void *)(v7 + 8 * v9);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        uint64_t v7 = *v8;
      }
      *(void *)(v7 + 8 * v9++) = 0;
      uint64_t v7 = *(void *)(a1 + 8);
    }
    while (v9 < (*(void *)(a1 + 16) - v7) >> 3);
  }
  *(void *)(a1 + 16) = v7;
  if (a2 >= 1) {
    apple::vision::libraries::facecore::processing::detection::IntegralImage::create((apple::vision::libraries::facecore::processing::detection::IntegralImage *)0x14C, 470, a3, a4);
  }

  return apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::updateIntegralsLookupTables(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::createIntegrals(uint64_t a1, int a2, int a3, apple::vision::libraries::facecore::FaceCoreContext *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v8 = (uint64_t *)(a1 + 8);
  if (v7 != *(void *)(a1 + 8))
  {
    unint64_t v9 = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      uint64_t v10 = *(void *)(v7 + 8 * v9);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        uint64_t v7 = *v8;
      }
      *(void *)(v7 + 8 * v9++) = 0;
      uint64_t v7 = *(void *)(a1 + 8);
    }
    while (v9 < (*(void *)(a1 + 16) - v7) >> 3);
  }
  *(void *)(a1 + 16) = v7;
  if (a2 >= 1) {
    apple::vision::libraries::facecore::processing::detection::IntegralImage::create((apple::vision::libraries::facecore::processing::detection::IntegralImage *)0x244, 820, a3, a4);
  }

  return apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::updateIntegralsLookupTables(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::Detector::refine(apple::vision::libraries::facecore::processing::detection::Detector *this, apple::vision::libraries::facecore::processing::detection::IntegralImage *a2, char a3, float a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10)
{
  int v10 = a9;
  int v11 = a8;
  unsigned int v12 = a7;
  unsigned int v13 = a6;
  uint64_t v15 = this;
  if (a3) {
    unint64_t v16 = &apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::evaluatorsWithProfile(void)::e;
  }
  else {
    unint64_t v16 = (uint64_t *)(*((void *)this + 9) + 32);
  }
  if (a8 > a9) {
    return 0;
  }
  char v18 = 0;
  int v19 = 0;
  float v20 = a4 * a4;
  __asm { FMOV            V0.2D, #1.0 }
  long long v55 = _Q0;
  do
  {
    (*(void (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *, float))(*(void *)a2 + 24))(a2, (float)v11);
    (*(void (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *))(*(void *)a2 + 40))(a2);
    (*(void (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *))(*(void *)a2 + 48))(a2);
    uint64_t v26 = *((void *)v15 + 7);
    uint64_t v27 = *(void *)(v26 + 8);
    if (*(void *)(v26 + 16) != v27)
    {
      uint64_t v28 = 0;
      unsigned int v52 = 0;
      int v29 = *((_DWORD *)a2 + 3);
      int v49 = *((_DWORD *)a2 + 12) + v29 * *((_DWORD *)a2 + 14);
      int v48 = v11;
      while (1)
      {
        unsigned int v30 = *(unsigned __int16 *)(v27 + 2 * v28);
        if (v30 >= v13 && v30 <= v12)
        {
          unsigned int v53 = (*((_DWORD *)a2 + 15) - v30) & ~((int)(*((_DWORD *)a2 + 15) - v30) >> 31);
          if (*((_DWORD *)a2 + 14) < v53) {
            break;
          }
        }
LABEL_33:
        uint64_t v27 = *(void *)(v26 + 8);
        uint64_t v28 = ++v52;
        if (v52 >= (unint64_t)((*(void *)(v26 + 16) - v27) >> 1)) {
          goto LABEL_34;
        }
      }
      unsigned int v32 = (*((_DWORD *)a2 + 13) - v30) & ~((int)(*((_DWORD *)a2 + 13) - v30) >> 31);
      unsigned int v58 = v30 + 1;
      unsigned int v56 = v30 >> 1;
      unsigned int v33 = v49;
      unsigned int v34 = *((_DWORD *)a2 + 14);
      while (1)
      {
        unsigned int v35 = *((_DWORD *)a2 + 12);
        if (v35 < v32) {
          break;
        }
LABEL_31:
        v33 += 4 * v29;
        v34 += 4;
        if (v34 >= v53)
        {
          uint64_t v15 = this;
          uint64_t v26 = *((void *)this + 7);
          int v10 = a9;
          int v11 = v48;
          unsigned int v13 = a6;
          unsigned int v12 = a7;
          goto LABEL_33;
        }
      }
      unsigned int v50 = v33;
      unsigned int v51 = v34;
      int v57 = (int)(float)((float)(v58 + 2 * v34) * 0.5);
      while (1)
      {
        uint64_t v36 = *v16;
        if (*v16 == v16[1])
        {
          if ((v18 & 1) == 0)
          {
LABEL_28:
            char v18 = 0;
            goto LABEL_29;
          }
        }
        else
        {
          while (1)
          {
            uint64_t v37 = *(unsigned int (**)(uint64_t))(**(void **)v36 + 16 * v28 + 8);
            uint64_t v38 = (*(uint64_t (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *))(*(void *)a2 + 56))(a2);
            if (v37(v38 + 4 * v33) >= *(_DWORD *)(*(void *)v36 + 8)) {
              break;
            }
            v36 += 8;
            if (v36 == v16[1]) {
              goto LABEL_28;
            }
          }
        }
        long long v61 = 0u;
        long long v62 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v63 = 0u;
        uint64_t v70 = 0x100000001;
        uint64_t v72 = 0x100000000;
        long long v73 = v55;
        long long v74 = v55;
        long long v75 = v55;
        HIDWORD(v62) = (int)(float)((float)(v58 + 2 * v35) * 0.5);
        LODWORD(v63) = v57;
        LODWORD(v61) = v56;
        DWORD2(v67) = (int)(float)-*((float *)a2 + 18);
        uint64_t v71 = 0x3FF0000000000000;
        double v59 = 0.0;
        double v60 = 0.0;
        apple::vision::libraries::facecore::processing::detection::IntegralImage::getOriginalCoord(a2, (double)SHIDWORD(v62), (double)v57, &v60, &v59);
        LODWORD(v61) = (int)(float)((float)(int)v61 / *((float *)a2 + 19));
        HIDWORD(v62) = (int)v60;
        int v39 = *((_DWORD *)a2 + 16);
        int v40 = *((_DWORD *)a2 + 17);
        LODWORD(v63) = (int)v59;
        int v41 = v39;
        if (v40 >= 0) {
          int v42 = v40;
        }
        else {
          int v42 = v40 + 1;
        }
        float v43 = (double)((int)v59 - (v42 >> 1)) * (double)((int)v59 - (v42 >> 1))
            + (double)((int)v60 - v41 / 2) * (double)((int)v60 - v41 / 2);
        if (v20 > v43 && ++v19 > a5)
        {
          apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v61);
          return 1;
        }
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v61);
        char v18 = 1;
LABEL_29:
        v33 += 4;
        v35 += 4;
        if (v35 >= v32)
        {
          int v29 = *((_DWORD *)a2 + 3);
          unsigned int v33 = v50;
          unsigned int v34 = v51;
          goto LABEL_31;
        }
      }
    }
LABEL_34:
    uint64_t result = 0;
    v11 += a10;
  }
  while (v11 <= v10);
  return result;
}

void sub_1DBACE704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(apple::vision::libraries::facecore::mod::windows::Window **this)
{
  int v2 = *this;
  if (v2)
  {
    apple::vision::libraries::facecore::mod::windows::Window::~Window(v2);
    MEMORY[0x1E0196D10]();
  }
  uint64_t v3 = this[4];
  if (v3)
  {
    this[5] = v3;
    operator delete(v3);
  }
  int v4 = this[1];
  if (v4)
  {
    this[2] = v4;
    operator delete(v4);
  }
}

void apple::vision::libraries::facecore::mod::windows::Window::~Window(apple::vision::libraries::facecore::mod::windows::Window *this)
{
  if (!*((unsigned char *)this + 20))
  {
    if (*(void *)this)
    {
      MEMORY[0x1E0196CF0]();
      *(void *)this = 0;
    }
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      MEMORY[0x1E0196CF0](v2, 0x1000C8077774924);
      *((void *)this + 1) = 0;
    }
  }
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<double *>,std::__wrap_iter<double *>,std::back_insert_iterator<std::vector<double>>,0>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  int v4 = a2;
  do
    std::back_insert_iterator<std::vector<double>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<double>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  long long v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    unsigned int v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v6, v12);
      unsigned int v8 = *(void **)v4;
      long long v5 = *(void **)(v4 + 8);
    }
    else
    {
      unsigned int v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *long long v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::DetectorAttributes(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (char **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  apple::vision::libraries::facecore::FaceCoreContext::FaceCoreContext((apple::vision::libraries::facecore::FaceCoreContext *)(a1 + 72));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v5 = *(void **)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((char *)v5 - *v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v6 - (void)*v4;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 48, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[8 * v8];
    unint64_t v14 = &v12[8 * v11];
    *(void *)unsigned int v13 = a2;
    uint64_t v7 = v13 + 8;
    uint64_t v16 = *(char **)(a1 + 32);
    uint64_t v15 = *(char **)(a1 + 40);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = *v4;
    }
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *long long v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(a1 + 40) = v7;
  return a1;
}

void sub_1DBACEA54(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::FaceCoreContext::~FaceCoreContext(v3);
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::DetectorAttributes(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (char **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  apple::vision::libraries::facecore::FaceCoreContext::FaceCoreContext((apple::vision::libraries::facecore::FaceCoreContext *)(a1 + 72));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v5 = *(void **)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((char *)v5 - *v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v6 - (void)*v4;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 48, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[8 * v8];
    unint64_t v14 = &v12[8 * v11];
    *(void *)unsigned int v13 = a2;
    uint64_t v7 = v13 + 8;
    uint64_t v16 = *(char **)(a1 + 32);
    uint64_t v15 = *(char **)(a1 + 40);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = *v4;
    }
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *long long v5 = a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(a1 + 40) = v7;
  return a1;
}

void sub_1DBACEBA8(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::FaceCoreContext::~FaceCoreContext(v3);
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::~DetectorAttributes(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v2 = *(apple::vision::libraries::facecore::mod::windows::Window ***)a1;
  if (*(void *)a1)
  {
    apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(v2);
    MEMORY[0x1E0196D10]();
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != *(void *)(a1 + 8))
  {
    unint64_t v4 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        uint64_t v3 = *(void *)(a1 + 8);
      }
      *(void *)(v3 + 8 * v4++) = 0;
      uint64_t v3 = *(void *)(a1 + 8);
    }
    while (v4 < (*(void *)(a1 + 16) - v3) >> 3);
  }
  *(void *)(a1 + 16) = v3;
  apple::vision::libraries::facecore::FaceCoreContext::~FaceCoreContext((apple::vision::libraries::facecore::FaceCoreContext *)(a1 + 72));
  unint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi580ELi820EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  (*(void (**)(void, void, void, void))(**((void **)__p + a2) + 16))(*((void *)__p + a2), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  if (__p)
  {
    unint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1DBACED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi580ELi820EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3);
  float v5 = *(double *)(*(void *)(v4 + 24) + 8 * a2);
  (*(void (**)(void, float))(**((void **)__p + a2) + 24))(*((void *)__p + a2), v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DBACEDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi580ELi820EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  (*(void (**)(void))(**((void **)__p + a2) + 40))(*((void *)__p + a2));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
  (*(void (**)(void))(**((void **)__p + a2) + 48))(*((void *)__p + a2));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
  apple::vision::libraries::facecore::processing::detection::IntegralImage::setROIs(*((void *)__p + a2), (uint64_t *)(*(void *)(a1 + 40) + 184));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1DBACEF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi580ELi820EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_4(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = *(uint64_t **)(v5 + 56);
  uint64_t v9 = *v6;
  uint64_t v7 = v6 + 1;
  uint64_t v8 = v9;
  uint64_t v10 = a1[6];
  if (*(_DWORD *)(v5 + 52) <= (int)a2)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    __p = 0;
    std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
    apple::vision::libraries::facecore::processing::detection::detectWindows(v4, v8, v7, *((void *)__p + a2), (uint64_t *)(a1[6] + 32), (uint64_t *)(a1[7] + 24 * a2), *(double *)(*(void *)(v5 + 24) + 8 * a2));
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    __p = 0;
    std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
    apple::vision::libraries::facecore::processing::detection::detectWindows(v4, v8, v7, *((void *)__p + a2), &apple::vision::libraries::facecore::processing::detection::DetectorAttributes<580,820>::evaluatorsWithProfile(void)::e, (uint64_t *)(a1[7] + 24 * a2), *(double *)(*(void *)(v5 + 24) + 8 * a2));
  }
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_1DBACF070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBACF0F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::__insert_with_size[abi:ne180100]<std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x84BDA12F684BDA13 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 216 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__move_range((uint64_t)a1, v5, v12, v5 + 216 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,0>(v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x7B425ED097B425EDLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x12F684BDA12F684) {
        std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x84BDA12F684BDA13 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x84BDA12F684BDA13 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x97B425ED097B42) {
        unint64_t v18 = 0x12F684BDA12F684;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>>(v9, v18);
      }
      else {
        int v19 = 0;
      }
      int64_t v22 = (apple::vision::libraries::facecore::Face *)&v19[216 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[216 * v18];
      uint64_t v23 = 216 * a5;
      uint64_t v24 = (apple::vision::libraries::facecore::Face *)((char *)v22 + 216 * a5);
      do
      {
        apple::vision::libraries::facecore::FaceInternal::FaceInternal(v22, v7);
        int64_t v22 = (apple::vision::libraries::facecore::Face *)((char *)v22 + 216);
        v7 += 216;
        v23 -= 216;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<apple::vision::libraries::facecore::FaceInternal>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1DBACF2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = v6;
    do
    {
      apple::vision::libraries::facecore::Face::Face(v8, (int *)v10);
      *(_OWORD *)(v11 + 144) = *(_OWORD *)(v10 + 144);
      long long v12 = *(_OWORD *)(v10 + 160);
      long long v13 = *(_OWORD *)(v10 + 176);
      long long v14 = *(_OWORD *)(v10 + 192);
      *(void *)(v11 + 208) = *(void *)(v10 + 208);
      *(_OWORD *)(v11 + 176) = v13;
      *(_OWORD *)(v11 + 192) = v14;
      *(_OWORD *)(v11 + 160) = v12;
      v10 += 216;
      uint64_t v8 = v11 + 216;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)&v16, a2, v7, v6);
}

uint64_t std::vector<apple::vision::libraries::facecore::FaceInternal>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>,std::reverse_iterator<apple::vision::libraries::facecore::FaceInternal*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

float apple::vision::libraries::facecore::Face::Face(uint64_t a1, int *a2)
{
  int v2 = *a2;
  *a2 = 0;
  *(_DWORD *)a1 = v2;
  uint64_t v3 = *(void *)(a2 + 1);
  *(void *)(a2 + 1) = 0;
  *(void *)(a1 + 4) = v3;
  uint64_t v4 = *(void *)(a2 + 3);
  *(void *)(a2 + 3) = 0;
  *(void *)(a1 + 12) = v4;
  uint64_t v5 = *(void *)(a2 + 5);
  *(void *)(a2 + 5) = 0;
  *(void *)(a1 + 20) = v5;
  uint64_t v6 = *(void *)(a2 + 7);
  *(void *)(a2 + 7) = 0;
  *(void *)(a1 + 28) = v6;
  int v7 = a2[9];
  LODWORD(v6) = a2[10];
  *(void *)(a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v6;
  LODWORD(v6) = a2[11];
  a2[11] = 0;
  *(_DWORD *)(a1 + 44) = v6;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  LODWORD(v6) = a2[18];
  a2[18] = 0;
  *(_DWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 10) = 0;
  LODWORD(v6) = a2[26];
  a2[26] = 0;
  *(_DWORD *)(a1 + 104) = v6;
  LOBYTE(v6) = *((unsigned char *)a2 + 108);
  *((unsigned char *)a2 + 108) = 0;
  *(unsigned char *)(a1 + 108) = v6;
  LOBYTE(v6) = *((unsigned char *)a2 + 109);
  *((unsigned char *)a2 + 109) = 0;
  *(unsigned char *)(a1 + 109) = v6;
  int v8 = a2[28];
  a2[28] = 0;
  *(_DWORD *)(a1 + 112) = v8;
  int v9 = a2[29];
  a2[29] = 0;
  *(_DWORD *)(a1 + 116) = v9;
  LOBYTE(v6) = *((unsigned char *)a2 + 120);
  *((unsigned char *)a2 + 120) = 0;
  *(unsigned char *)(a1 + 120) = v6;
  int v10 = a2[31];
  a2[31] = 0;
  *(_DWORD *)(a1 + 124) = v10;
  LOBYTE(v6) = *((unsigned char *)a2 + 128);
  *((unsigned char *)a2 + 128) = 0;
  *(unsigned char *)(a1 + 128) = v6;
  float result = *((float *)a2 + 33);
  a2[33] = 0;
  *(float *)(a1 + 132) = result;
  uint64_t v12 = *((void *)a2 + 17);
  *((void *)a2 + 17) = 0;
  *(void *)(a1 + 136) = v12;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 216);
      long long v10 = *(_OWORD *)(a3 + v7 - 200);
      *(_OWORD *)(v8 - 184) = *(_OWORD *)(a3 + v7 - 184);
      *(_OWORD *)(v8 - 200) = v10;
      *(_OWORD *)(v8 - 216) = v9;
      std::vector<double>::__move_assign(a4 + v7 - 168, (__n128 *)(a3 + v7 - 168));
      *(_DWORD *)(v8 - 144) = *(_DWORD *)(a3 + v7 - 144);
      std::vector<double>::__move_assign(a4 + v7 - 136, (__n128 *)(a3 + v7 - 136));
      long long v11 = *(_OWORD *)(a3 + v7 - 112);
      long long v12 = *(_OWORD *)(a3 + v7 - 96);
      *(void *)(v8 - 80) = *(void *)(a3 + v7 - 80);
      *(_OWORD *)(v8 - 112) = v11;
      *(_OWORD *)(v8 - 96) = v12;
      long long v13 = *(_OWORD *)(a3 + v7 - 40);
      long long v14 = *(_OWORD *)(a3 + v7 - 24);
      uint64_t v15 = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 8) = v15;
      *(_OWORD *)(v8 - 24) = v14;
      *(_OWORD *)(v8 - 40) = v13;
      *(_OWORD *)(v8 - 72) = *(_OWORD *)(a3 + v7 - 72);
      v7 -= 216;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)(a4 + v7), a2 + v7);
      v7 += 216;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DBACF6D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 216;
    do
    {
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 + v2));
      v2 -= 216;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi332ELi470EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  (*(void (**)(void, void, void, void))(**((void **)__p + a2) + 16))(*((void *)__p + a2), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_1DBACF788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi332ELi470EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v3 + 8), *(void *)(v3 + 16), (uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3);
  float v5 = *(double *)(*(void *)(v4 + 24) + 8 * a2);
  (*(void (**)(void, float))(**((void **)__p + a2) + 24))(*((void *)__p + a2), v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DBACF834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi332ELi470EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 3);
  (*(void (**)(void))(**((void **)__p + a2) + 40))(*((void *)__p + a2));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
  (*(void (**)(void))(**((void **)__p + a2) + 48))(*((void *)__p + a2));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __p = 0;
  std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
  apple::vision::libraries::facecore::processing::detection::IntegralImage::setROIs(*((void *)__p + a2), (uint64_t *)(*(void *)(a1 + 40) + 184));
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
}

void sub_1DBACF978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection8Detector6detectINS4_18DetectorAttributesILi332ELi470EEEEENSt3__16vectorINS2_12FaceInternalENS9_9allocatorISB_EEEERNS2_15FaceCoreContextEPhjjPT__block_invoke_4(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = *(uint64_t **)(v5 + 56);
  uint64_t v9 = *v6;
  uint64_t v7 = v6 + 1;
  uint64_t v8 = v9;
  uint64_t v10 = a1[6];
  if (*(_DWORD *)(v5 + 52) <= (int)a2)
  {
    long long v12 = 0;
    uint64_t v13 = 0;
    __p = 0;
    std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
    apple::vision::libraries::facecore::processing::detection::detectWindows(v4, v8, v7, *((void *)__p + a2), (uint64_t *)(a1[6] + 32), (uint64_t *)(a1[7] + 24 * a2), *(double *)(*(void *)(v5 + 24) + 8 * a2));
  }
  else
  {
    long long v12 = 0;
    uint64_t v13 = 0;
    __p = 0;
    std::vector<apple::vision::libraries::facecore::processing::detection::IntegralImage *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::detection::IntegralImage **,apple::vision::libraries::facecore::processing::detection::IntegralImage **>(&__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
    apple::vision::libraries::facecore::processing::detection::detectWindows(v4, v8, v7, *((void *)__p + a2), apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::evaluatorsWithProfile(void)::e, (uint64_t *)(a1[7] + 24 * a2), *(double *)(*(void *)(v5 + 24) + 8 * a2));
  }
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
}

void sub_1DBACFAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t apple::vision::libraries::facecore::processing::detection::DetectorAttributes<332,470>::updateIntegralsLookupTables(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 56)) {
    uint64_t v2 = *(unsigned __int8 **)(result + 64);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(result + 8);
  if ((int)((unint64_t)(*(void *)(result + 16) - v3) >> 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      float result = apple::vision::libraries::facecore::processing::detection::IntegralImage::setShadowLUT(*(void *)(v3 + 8 * v4++), v2);
      uint64_t v3 = *(void *)(v1 + 8);
    }
    while (v4 < (int)((unint64_t)(*(void *)(v1 + 16) - v3) >> 3));
  }
  return result;
}

void apple::vision::libraries::facecore::mod::windows::InlinedNestedWindows<332>::InlinedNestedWindows(uint64_t a1, int a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __int16 v27 = 24;
  __src = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  do
  {
    std::vector<unsigned short>::insert((uint64_t)&__src, (char *)__src, (char *)&v27);
    LOWORD(v4) = v27;
    __int16 v27 = (int)((double)v4 * 1.2);
  }
  while ((int)((double)v4 * 1.2) < 0x14D);
  uint64_t v6 = __src;
  uint64_t v5 = v25;
  if (v25 != __src)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (void **)(a1 + 8);
    do
    {
      int v9 = (unsigned __int16)v6[v7];
      if (v9 >= a2 || v7 && (unsigned __int16)v6[v7 - 1] > a2)
      {
        long long v11 = *(char **)(a1 + 16);
        unint64_t v10 = *(void *)(a1 + 24);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = (char *)*v8;
          uint64_t v14 = v11 - (unsigned char *)*v8;
          if (v14 <= -3) {
            std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          unint64_t v16 = v10 - (void)v13;
          if (v16 <= (v14 >> 1) + 1) {
            unint64_t v17 = v15 + 1;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v18 = v17;
          }
          if (v18)
          {
            int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 24, v18);
            uint64_t v13 = *(char **)(a1 + 8);
            long long v11 = *(char **)(a1 + 16);
            LOWORD(v9) = v6[v7];
          }
          else
          {
            int v19 = 0;
          }
          uint64_t v20 = &v19[2 * v15];
          *(_WORD *)uint64_t v20 = v9;
          long long v12 = v20 + 2;
          while (v11 != v13)
          {
            __int16 v21 = *((_WORD *)v11 - 1);
            v11 -= 2;
            *((_WORD *)v20 - 1) = v21;
            v20 -= 2;
          }
          *(void *)(a1 + 8) = v20;
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = &v19[2 * v18];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_WORD *)long long v11 = v9;
          long long v12 = v11 + 2;
        }
        *(void *)(a1 + 16) = v12;
        uint64_t v6 = __src;
        uint64_t v5 = v25;
      }
      ++v7;
    }
    while (v7 < (v5 - (unsigned char *)v6) >> 1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fc-sw-3.dat");
  apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fc-sw-4.dat");
  apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1DBACFD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(v17);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)&v6[-*(void *)a1];
    if (v14 <= -3) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 1;
    uint64_t v17 = v14 >> 1;
    unint64_t v18 = v7 - (void)v13;
    if (v18 <= v17 + 1) {
      unint64_t v19 = v17 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    uint64_t v32 = a1 + 16;
    if (v20) {
      __int16 v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 16, v20);
    }
    else {
      __int16 v21 = 0;
    }
    int64_t v22 = &v21[2 * v16];
    __p = v21;
    uint64_t v29 = v22;
    unsigned int v30 = v22;
    uint64_t v31 = &v21[2 * v20];
    if (v16 == v20)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v4 - v13;
        }
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v8, v24);
        int64_t v22 = &v25[2 * (v24 >> 2)];
        __p = v25;
        uint64_t v29 = v22;
        uint64_t v31 = &v25[2 * v26];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= v23 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v29 = v22;
      }
    }
    *(_WORD *)int64_t v22 = *(_WORD *)v3;
    unsigned int v30 = v22 + 2;
    unint64_t v4 = std::vector<unsigned short>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v30 != v29) {
      v30 += (v29 - v30 + 1) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_WORD *)__src = *(_WORD *)a3;
    *(void *)(a1 + 8) = __src + 2;
  }
  else
  {
    int v9 = __src + 2;
    unint64_t v10 = v6 - 2;
    long long v11 = *(_WORD **)(a1 + 8);
    while (v10 < v6)
    {
      __int16 v12 = *(_WORD *)v10;
      v10 += 2;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-2 * ((v6 - v9) >> 1)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 2 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(_WORD *)unint64_t v4 = *(_WORD *)v3;
  }
  return v4;
}

void sub_1DBACFFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      __int16 v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void apple::vision::libraries::facecore::mod::windows::InlinedNestedWindows<580>::InlinedNestedWindows(uint64_t a1, int a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  __int16 v27 = 24;
  __src = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  do
  {
    std::vector<unsigned short>::insert((uint64_t)&__src, (char *)__src, (char *)&v27);
    LOWORD(v4) = v27;
    __int16 v27 = (int)((double)v4 * 1.2);
  }
  while ((int)((double)v4 * 1.2) < 0x245);
  uint64_t v6 = __src;
  uint64_t v5 = v25;
  if (v25 != __src)
  {
    unint64_t v7 = 0;
    uint64_t v8 = (void **)(a1 + 8);
    do
    {
      int v9 = (unsigned __int16)v6[v7];
      if (v9 >= a2 || v7 && (unsigned __int16)v6[v7 - 1] > a2)
      {
        uint64_t v11 = *(char **)(a1 + 16);
        unint64_t v10 = *(void *)(a1 + 24);
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = (char *)*v8;
          uint64_t v14 = v11 - (unsigned char *)*v8;
          if (v14 <= -3) {
            std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          unint64_t v16 = v10 - (void)v13;
          if (v16 <= (v14 >> 1) + 1) {
            unint64_t v17 = v15 + 1;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v18 = v17;
          }
          if (v18)
          {
            unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a1 + 24, v18);
            uint64_t v13 = *(char **)(a1 + 8);
            uint64_t v11 = *(char **)(a1 + 16);
            LOWORD(v9) = v6[v7];
          }
          else
          {
            unint64_t v19 = 0;
          }
          uint64_t v20 = &v19[2 * v15];
          *(_WORD *)uint64_t v20 = v9;
          int64_t v12 = v20 + 2;
          while (v11 != v13)
          {
            __int16 v21 = *((_WORD *)v11 - 1);
            v11 -= 2;
            *((_WORD *)v20 - 1) = v21;
            v20 -= 2;
          }
          *(void *)(a1 + 8) = v20;
          *(void *)(a1 + 16) = v12;
          *(void *)(a1 + 24) = &v19[2 * v18];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_WORD *)uint64_t v11 = v9;
          int64_t v12 = v11 + 2;
        }
        *(void *)(a1 + 16) = v12;
        uint64_t v6 = __src;
        uint64_t v5 = v25;
      }
      ++v7;
    }
    while (v7 < (v5 - (unsigned char *)v6) >> 1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fc-sw-7.dat");
  apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fc-sw-8.dat");
  apple::vision::libraries::facecore::mod::bundle::getMemoryBlock((apple::vision::libraries::facecore::mod::bundle *)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  operator new();
}

void sub_1DBAD0354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  apple::vision::libraries::facecore::mod::windows::NestedWindows::~NestedWindows(v17);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::Weighting(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (char *)this + 9480320;
  int v3 = *((_DWORD *)this + *((int *)this + 2370082) + 2370101);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = *(void *)v2;
    do
      *(_DWORD *)(v5 + 4 * v4++) = 1065353216;
    while (v3 != v4);
  }
  uint64_t v6 = *((int *)this + 1338);
  unint64_t v7 = (char *)this + 4 * v6;
  unsigned int v8 = *((_DWORD *)v7 + 1357);
  if (v8)
  {
    int v9 = (double *)*((void *)this + (v6 - 5) + 1185082);
    double v10 = 0.0;
    uint64_t v11 = *((unsigned int *)v7 + 1357);
    do
    {
      double v12 = *v9++;
      double v10 = v10 + v12 * v12;
      --v11;
    }
    while (v11);
    int v13 = 0;
    double v14 = 1.0 / sqrt(v10 / (double)v8);
    unsigned int v15 = *((_DWORD *)v7 + 1339);
    uint64_t v16 = *((void *)this + (v6 - 5) + 1185082);
    uint64_t v17 = *(void *)v2;
    do
    {
      double v18 = *(double *)(v16
                      + 8
                      * (int)(float)((float)((float)((v15 + v13) / v15) + (float)((float)(v13 % v15) * (float)(int)v15))
                                   + -1.0));
      float v19 = 0.0;
      if (v18 != 0.0) {
        float v19 = v18 * (v14 * *(float *)(v17 + 4 * v13));
      }
      *(float *)(v17 + 4 * v13++) = v19;
    }
    while (v8 != v13);
  }
  unint64_t v20 = 1374389535 * v8;
  uint64_t v41 = 0;
  std::vector<double>::vector(&v42, 0x64uLL, &v41);
  uint64_t v21 = 0;
  int64_t v22 = (float *)*((void *)this + 668);
  char v23 = (char *)v42;
  do
  {
    *(double *)&v23[v21] = *v22;
    int64_t v22 = (float *)((char *)v22 + ((v20 >> 35) & 0xFFFFFFC));
    v21 += 8;
  }
  while (v21 != 800);
  __p = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  unint64_t v24 = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, v23, (uint64_t)v43, (v43 - v23) >> 3);
  double v25 = apple::vision::libraries::facecore::mod::aam::AamSearch::median((uint64_t)v24, (double **)&__p);
  if (__p)
  {
    int v39 = __p;
    operator delete(__p);
  }
  int v26 = *((_DWORD *)this + *((int *)this + 1338) + 1357);
  if (v26)
  {
    int v27 = 0;
    uint64_t v28 = *((void *)this + 668);
    uint64_t v29 = *(void *)v2;
    uint64_t v30 = *((void *)v2 + 24);
    do
    {
      double v31 = (float)(*(float *)(v28 + 4 * v27) / *(float *)(v29 + 4 * v27));
      float v32 = 1.0;
      if (v25 * 5.0 < v31 || v25 * -5.0 > v31)
      {
        *(_DWORD *)(v29 + 4 * v27) = 0;
        float v32 = 0.0;
      }
      *(float *)(v30 + 4 * v27++) = v32;
    }
    while (v26 != v27);
  }
  int v34 = *((_DWORD *)this + *((int *)v2 + 2) + 2370101);
  if (v34)
  {
    int v35 = 0;
    uint64_t v36 = *((void *)this + 668);
    uint64_t v37 = *(void *)v2;
    do
    {
      *(float *)(v36 + 4 * v35) = *(float *)(v36 + 4 * v35) * *(float *)(v37 + 4 * v35);
      ++v35;
    }
    while (v34 != v35);
  }
  if (v42)
  {
    float v43 = v42;
    operator delete(v42);
  }
}

void sub_1DBAD0644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::median(uint64_t a1, double **a2)
{
  int v3 = a2[1];
  int v4 = *a2;
  if (v3 == *a2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "median of an empty vector");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  int v13 = 0;
  uint64_t v5 = std::remove[abi:ne180100]<std::__wrap_iter<double *>,int>(v4, v3, &v13);
  uint64_t v6 = *a2;
  if (a2[1] != v5) {
    a2[1] = v5;
  }
  char v7 = (_BYTE)v5 - (_BYTE)v6;
  unint64_t v8 = v5 - v6;
  if (v5 != v6)
  {
    uint64_t v9 = 0;
    do
    {
      double v10 = v6[v9];
      if (v10 < 0.0) {
        v6[v9] = -v10;
      }
      ++v9;
    }
    while (v8 > v9);
  }
  std::__sort<std::__less<double,double> &,double *>();
  double result = (*a2)[v8 >> 1];
  if ((v7 & 8) == 0) {
    return (result + (*a2)[(v8 >> 1) - 1]) * 0.5;
  }
  return result;
}

void sub_1DBAD0794(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double *std::remove[abi:ne180100]<std::__wrap_iter<double *>,int>(double *result, double *a2, int *a3)
{
  if (result == a2)
  {
LABEL_4:
    double result = a2;
  }
  else
  {
    while (*result != (double)*a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result == a2) {
    return a2;
  }
  int v3 = result + 1;
  if (result + 1 != a2)
  {
    double v4 = (double)*a3;
    do
    {
      if (*v3 != v4) {
        *result++ = *v3;
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    char v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DBAD0880(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::KeypointLocalization(void *a1, uint64_t a2)
{
  *a1 = &unk_1F360D028;
  a1[1] = a2;
  operator new[]();
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::~KeypointLocalization(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization *this)
{
  *(void *)this = &unk_1F360D028;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x1E0196CF0](v2, 0x1000C80BDFB0063);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C80BDFB0063);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    MEMORY[0x1E0196CF0](v4, 0x1000C80BDFB0063);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    MEMORY[0x1E0196CF0](v5, 0x1000C80BDFB0063);
  }
}

float apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::localize(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization *this, const apple::vision::libraries::facecore::mod::Image *a2, int a3, int a4, int *a5, int *a6)
{
  int v9 = 0;
  __p = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  long long v66 = 0;
  long long v67 = 0;
  long long v68 = 0;
  int v64 = a3 - 8;
  int v10 = a4 - 8;
  do
  {
    int v11 = 0;
    int v65 = v9;
    int v12 = v64 + 2 * v9;
    do
    {
      int v13 = v12 - *(_DWORD *)(*((void *)this + 1) + 64);
      double v14 = v70;
      if (v70 >= v71)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v70 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v71 - (unsigned char *)__p;
        if ((v71 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71, v20);
          uint64_t v16 = (char *)__p;
          double v14 = v70;
        }
        else
        {
          uint64_t v21 = 0;
        }
        int64_t v22 = &v21[4 * v17];
        *(_DWORD *)int64_t v22 = v13;
        unsigned int v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        __p = v22;
        uint64_t v70 = v15;
        uint64_t v71 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v70 = v13;
        unsigned int v15 = v14 + 4;
      }
      uint64_t v70 = v15;
      int v24 = v10 + 2 * v11 - *(_DWORD *)(*((void *)this + 1) + 68);
      double v25 = v67;
      if (v67 >= v68)
      {
        int v27 = (char *)v66;
        uint64_t v28 = (v67 - (unsigned char *)v66) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v68 - (unsigned char *)v66;
        if ((v68 - (unsigned char *)v66) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          float v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68, v31);
          int v27 = (char *)v66;
          double v25 = v67;
        }
        else
        {
          float v32 = 0;
        }
        unsigned int v33 = (int *)&v32[4 * v28];
        int *v33 = v24;
        int v26 = (char *)(v33 + 1);
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *--unsigned int v33 = v34;
        }
        long long v66 = v33;
        long long v67 = v26;
        long long v68 = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)long long v67 = v24;
        int v26 = v25 + 4;
      }
      long long v67 = v26;
      ++v11;
    }
    while (v11 != 8);
    int v9 = v65 + 1;
  }
  while (v65 != 7);
  *a5 = a3;
  *a6 = a4;
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::getMaxInSamples((uint64_t)this, &__p, (int **)&v66, (int *)a2, a5, a6);
  int v35 = 0;
  uint64_t v70 = (char *)__p;
  long long v67 = (char *)v66;
  do
  {
    for (int i = 0; i != 3; ++i)
    {
      int v37 = v35 - 1 + *a5 - *(_DWORD *)(*((void *)this + 1) + 64);
      uint64_t v38 = v70;
      if (v70 >= v71)
      {
        uint64_t v40 = (char *)__p;
        uint64_t v41 = (v70 - (unsigned char *)__p) >> 2;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v43 = v71 - (unsigned char *)__p;
        if ((v71 - (unsigned char *)__p) >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71, v44);
          uint64_t v40 = (char *)__p;
          uint64_t v38 = v70;
        }
        else
        {
          int v45 = 0;
        }
        double v46 = (int *)&v45[4 * v41];
        *double v46 = v37;
        int v39 = (char *)(v46 + 1);
        while (v38 != v40)
        {
          int v47 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *--double v46 = v47;
        }
        __p = v46;
        uint64_t v70 = v39;
        uint64_t v71 = &v45[4 * v44];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v70 = v37;
        int v39 = v38 + 4;
      }
      uint64_t v70 = v39;
      int v48 = ~*(_DWORD *)(*((void *)this + 1) + 68) + i + *a6;
      int v49 = v67;
      if (v67 >= v68)
      {
        unsigned int v51 = (char *)v66;
        uint64_t v52 = (v67 - (unsigned char *)v66) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v68 - (unsigned char *)v66;
        if ((v68 - (unsigned char *)v66) >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          unsigned int v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v68, v55);
          unsigned int v51 = (char *)v66;
          int v49 = v67;
        }
        else
        {
          unsigned int v56 = 0;
        }
        int v57 = (int *)&v56[4 * v52];
        *int v57 = v48;
        unsigned int v50 = (char *)(v57 + 1);
        while (v49 != v51)
        {
          int v58 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *--int v57 = v58;
        }
        long long v66 = v57;
        long long v67 = v50;
        long long v68 = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(_DWORD *)long long v67 = v48;
        unsigned int v50 = v49 + 4;
      }
      long long v67 = v50;
    }
    ++v35;
  }
  while (v35 != 3);
  float MaxInSamples = apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::getMaxInSamples((uint64_t)this, &__p, (int **)&v66, (int *)a2, a5, a6);
  if (v66)
  {
    long long v67 = (char *)v66;
    operator delete(v66);
  }
  if (__p)
  {
    uint64_t v70 = (char *)__p;
    operator delete(__p);
  }
  return MaxInSamples;
}

void sub_1DBAD0E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

float apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::getMaxInSamples(uint64_t a1, void *a2, int **a3, int *a4, _DWORD *a5, _DWORD *a6)
{
  unsigned int v51 = a6;
  unint64_t v53 = a4;
  uint64_t v54 = a3;
  v55[3] = *(float **)MEMORY[0x1E4F143B8];
  int v9 = (_DWORD *)*a2;
  uint64_t v8 = a2[1];
  uint64_t v52 = (_DWORD **)a2;
  unint64_t v10 = v8 - (void)v9;
  unint64_t v11 = (unint64_t)(v8 - (void)v9) >> 2;
  int v12 = *(_DWORD **)(a1 + 8);
  uint64_t v13 = (int)v12[15];
  uint64_t v14 = (v12[13] / (int)v13);
  uint64_t v15 = (v12[14] / (int)v13);
  int v16 = v15 * v14;
  MEMORY[0x1F4188790](a1);
  unint64_t v18 = (__int16 *)((char *)&v51 - v17);
  bzero((char *)&v51 - v17, v19);
  uint64_t v20 = (v10 >> 2);
  if ((int)v11 >= 1)
  {
    uint64_t v21 = 0;
    int64_t v22 = *v54;
    uint64_t v23 = *((void *)v53 + 2);
    float v24 = (float)v16;
    int v25 = *v53;
    uint64_t v26 = 2 * (v15 * v14);
    int v27 = v18;
    do
    {
      if ((int)v14 >= 1)
      {
        uint64_t v28 = 0;
        unint64_t v29 = (unsigned __int8 *)(v23 + (int)v9[v21] + v25 * (uint64_t)v22[v21]);
        uint64_t v30 = v27;
        do
        {
          uint64_t v31 = v15;
          float v32 = v29;
          unsigned int v33 = v30;
          if ((int)v15 >= 1)
          {
            do
            {
              __int16 *v33 = *v32;
              v33 += (int)v14;
              v32 += (int)v13 * (uint64_t)v25;
              --v31;
            }
            while (v31);
          }
          ++v28;
          ++v30;
          v29 += v13;
        }
        while (v28 != v14);
      }
      if (v16 < 1)
      {
        float v36 = 0.0;
        float v35 = 0.0;
      }
      else
      {
        unint64_t v34 = 0;
        float v35 = 0.0;
        float v36 = 0.0;
        do
        {
          int v37 = v27[v34 / 2];
          float v36 = v36 + (float)v37;
          float v35 = v35 + (float)(v37 * v37);
          v34 += 2;
        }
        while (v26 != v34);
      }
      if (v16 >= 1)
      {
        unint64_t v38 = 0;
        float v39 = v36 / v24;
        float v40 = sqrtf((float)(v35 / v24) - (float)(v39 * v39));
        do
        {
          v27[v38 / 2] = (int)(float)((float)((float)v27[v38 / 2] - v39) / v40);
          v38 += 2;
        }
        while (v26 != v38);
      }
      ++v21;
      v27 += v16;
    }
    while (v21 != v20);
  }
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::computeScores((__int16 ***)a1, v18, v11, v55);
  uint64_t v41 = v55[0];
  if ((int)v11 > 0)
  {
    unint64_t v42 = *v54;
    uint64_t v43 = v51;
    unint64_t v44 = *v52;
    float v45 = -1000000000.0;
    double v46 = v55[0];
    do
    {
      float v47 = *v46;
      if (*v46 > v45)
      {
        int v48 = *v42;
        uint64_t v49 = *(void *)(a1 + 8);
        *a5 = *(_DWORD *)(v49 + 64) + *v44;
        *uint64_t v43 = *(_DWORD *)(v49 + 68) + v48;
        float v45 = v47;
      }
      ++v44;
      ++v42;
      ++v46;
      --v20;
    }
    while (v20);
    goto LABEL_24;
  }
  float v45 = -1000000000.0;
  if (v55[0]) {
LABEL_24:
  }
    operator delete(v41);
  return v45;
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::computeScores(__int16 ***this@<X0>, __int16 *a2@<X1>, int a3@<W2>, float **a4@<X8>)
{
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::computeClassScores(this, a2, a3, this[1], (float **)&v23);
  apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::computeClassScores(this, a2, a3, this[1] + 3, (float **)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (float *)v23;
  if ((int)((unint64_t)((char *)v24 - (unsigned char *)v23) >> 2) >= 1)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = a4 + 2;
    do
    {
      float v12 = v8[v10] - *((float *)__p[0] + v10);
      if ((unint64_t)v9 >= *v11)
      {
        uint64_t v14 = *a4;
        uint64_t v15 = v9 - *a4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = *v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          size_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v18);
          uint64_t v14 = *a4;
          int v9 = a4[1];
        }
        else
        {
          size_t v19 = 0;
        }
        uint64_t v20 = (float *)&v19[4 * v15];
        *uint64_t v20 = v12;
        uint64_t v13 = v20 + 1;
        while (v9 != v14)
        {
          int v21 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *a4 = v20;
        a4[1] = v13;
        a4[2] = (float *)&v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *int v9 = v12;
        uint64_t v13 = v9 + 1;
      }
      a4[1] = v13;
      ++v10;
      uint64_t v8 = (float *)v23;
      int v9 = v13;
    }
    while (v10 < (int)((unint64_t)((char *)v24 - (unsigned char *)v23) >> 2));
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    uint64_t v8 = (float *)v23;
  }
  if (v8)
  {
    float v24 = v8;
    operator delete(v8);
  }
}

void sub_1DBAD1340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization::computeClassScores(void *a1@<X0>, __int16 *a2@<X1>, int a3@<W2>, __int16 **a4@<X3>, float **a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (*(_DWORD *)(a1[1] + 56)
                       / *(_DWORD *)(a1[1] + 60)
                       * (*(_DWORD *)(a1[1] + 52)
                        / *(_DWORD *)(a1[1] + 60)));
    uint64_t v11 = a3;
    float v12 = *a4;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v13 = (_WORD *)(a1[4] + v8);
        uint64_t v14 = v10;
        uint64_t v15 = a2;
        unint64_t v16 = v12;
        do
        {
          __int16 v18 = *v15++;
          __int16 v17 = v18;
          __int16 v19 = *v16++;
          *uint64_t v13 = v17 - v19;
          v13 += a3;
          --v14;
        }
        while (v14);
      }
      ++v9;
      v8 += 2;
      a2 += (int)v10;
    }
    while (v9 != a3);
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = a5 + 2;
    do
    {
      uint64_t v24 = *(unsigned int *)(a1[1] + 48);
      if ((int)v24 < 1)
      {
        float v27 = 0.0;
      }
      else
      {
        int v25 = a4[2];
        uint64_t v26 = (__int16 *)(a1[5] + v20);
        float v27 = 0.0;
        do
        {
          int v28 = *v25++;
          float v27 = v27 + (float)((float)((float)((float)*v26 * -0.5) * (float)*v26) * (float)v28);
          v26 += v11;
          --v24;
        }
        while (v24);
      }
      if ((unint64_t)v21 >= *v23)
      {
        uint64_t v30 = *a5;
        uint64_t v31 = v21 - *a5;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = *v23 - (void)v30;
        if (v33 >> 1 > v32) {
          unint64_t v32 = v33 >> 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          float v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v34);
          uint64_t v30 = *a5;
          int v21 = a5[1];
        }
        else
        {
          float v35 = 0;
        }
        float v36 = (float *)&v35[4 * v31];
        *float v36 = v27;
        unint64_t v29 = v36 + 1;
        while (v21 != v30)
        {
          int v37 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v36-- - 1) = v37;
        }
        *a5 = v36;
        a5[1] = v29;
        a5[2] = (float *)&v35[4 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *int v21 = v27;
        unint64_t v29 = v21 + 1;
      }
      a5[1] = v29;
      ++v22;
      v20 += 2;
      int v21 = v29;
    }
    while (v22 != v11);
  }
}

void sub_1DBAD1590(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void fast9_detect(uint64_t a1, int a2, int a3, int a4, int a5, void *a6)
{
  a6[1] = *a6;
  std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPoint>::resize((uint64_t)a6, 0x2710uLL);
  if (a3 >= 7)
  {
    int v11 = 0;
    uint64_t v12 = 2 * a4;
    uint64_t v13 = 3 * a4;
    uint64_t v14 = (a3 - 3);
    uint64_t v92 = (int)v13 - 1;
    uint64_t v93 = a4;
    uint64_t v15 = v12 - 2;
    uint64_t v16 = a4 - 3;
    uint64_t v17 = -2 * a4 - 2;
    uint64_t v18 = -3 * a4;
    uint64_t v19 = (int)v18 - 1;
    uint64_t v20 = v18 + 1;
    uint64_t v21 = 2 - v12;
    uint64_t v22 = 3;
    uint64_t v23 = a4 + 3;
    uint64_t v24 = (int)v12 + 2;
    uint64_t v25 = (int)v13 + 1;
    uint64_t v26 = -3 - a4;
    uint64_t v27 = 3 - a4;
    while (a2 < 7)
    {
LABEL_817:
      if (++v22 == v14) {
        goto LABEL_820;
      }
    }
    uint64_t v28 = a1 + v22 * v93;
    uint64_t v29 = *a6;
    uint64_t v30 = 3;
    while (1)
    {
      uint64_t v31 = v28 + v30;
      int v32 = *(unsigned __int8 *)(v28 + v30);
      int v33 = v32 + a5;
      int v34 = v32 - a5;
      int v35 = *(unsigned __int8 *)(v28 + v30 + v13);
      if (v33 < v35) {
        break;
      }
      if (v34 <= v35)
      {
        int v47 = *(unsigned __int8 *)(v31 + v20);
        if (v33 < v47)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v18) || v33 >= *(unsigned __int8 *)(v31 + v19)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
              goto LABEL_781;
            }
            goto LABEL_214;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v27))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
              goto LABEL_781;
            }
            goto LABEL_282;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
              goto LABEL_781;
            }
            goto LABEL_366;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v23))
          {
LABEL_677:
            if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
              goto LABEL_781;
            }
            goto LABEL_678;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v24))
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v25)) {
              goto LABEL_780;
            }
            int v48 = *(unsigned __int8 *)(v31 + v17);
            goto LABEL_681;
          }
LABEL_554:
          if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
            goto LABEL_781;
          }
          goto LABEL_555;
        }
        if (v34 <= v47 || v34 <= *(unsigned __int8 *)(v31 + v18) || v34 <= *(unsigned __int8 *)(v31 + v19)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v21))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v17)
            || v34 <= *(unsigned __int8 *)(v31 + v26)
            || v34 <= *(unsigned __int8 *)(v31 - 3))
          {
            goto LABEL_781;
          }
          int v66 = *(unsigned __int8 *)(v31 + v16);
          goto LABEL_294;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v27))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v17)
            || v34 <= *(unsigned __int8 *)(v31 + v26)
            || v34 <= *(unsigned __int8 *)(v31 - 3))
          {
            goto LABEL_781;
          }
          int v74 = *(unsigned __int8 *)(v31 + v16);
          goto LABEL_381;
        }
        if (v34 > *(unsigned __int8 *)(v31 + 3))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v23))
          {
            if (v34 > *(unsigned __int8 *)(v31 + v24))
            {
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v25)) {
                goto LABEL_780;
              }
              goto LABEL_86;
            }
LABEL_114:
            if (v34 <= *(unsigned __int8 *)(v31 + v17)) {
              goto LABEL_781;
            }
LABEL_144:
            int v52 = *(unsigned __int8 *)(v31 + v26);
            goto LABEL_779;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v17)) {
            goto LABEL_781;
          }
LABEL_644:
          if (v34 <= *(unsigned __int8 *)(v31 + v26)) {
            goto LABEL_781;
          }
LABEL_645:
          int v52 = *(unsigned __int8 *)(v31 - 3);
          goto LABEL_779;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v17)
          || v34 <= *(unsigned __int8 *)(v31 + v26)
          || v34 <= *(unsigned __int8 *)(v31 - 3))
        {
          goto LABEL_781;
        }
LABEL_693:
        int v52 = *(unsigned __int8 *)(v31 + v16);
        goto LABEL_779;
      }
      int v44 = *(unsigned __int8 *)(v31 + v25);
      if (v33 < v44)
      {
        int v45 = *(unsigned __int8 *)(v31 + v18);
        if (v33 < v45)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20) || v33 >= *(unsigned __int8 *)(v31 + v19)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17)
              || v33 >= *(unsigned __int8 *)(v31 + v26)
              || v33 >= *(unsigned __int8 *)(v31 - 3)
              || v33 >= *(unsigned __int8 *)(v31 + v16))
            {
              goto LABEL_781;
            }
            goto LABEL_273;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v27))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17)
              || v33 >= *(unsigned __int8 *)(v31 + v26)
              || v33 >= *(unsigned __int8 *)(v31 - 3))
            {
              goto LABEL_781;
            }
            goto LABEL_358;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17) || v33 >= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_455;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v23))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v17) || v33 >= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_680;
          }
          int v43 = -(int)v22;
          if (v33 < *(unsigned __int8 *)(v31 + v24)) {
            goto LABEL_780;
          }
          goto LABEL_554;
        }
        if (v34 <= v45 || v34 <= *(unsigned __int8 *)(v31 + v19) || v34 <= *(unsigned __int8 *)(v31 + v17)) {
          goto LABEL_781;
        }
        if (v34 > *(unsigned __int8 *)(v31 + v26))
        {
          if (v34 <= *(unsigned __int8 *)(v31 - 3))
          {
            if (v34 <= *(unsigned __int8 *)(v31 + v23)
              || v34 <= *(unsigned __int8 *)(v31 + 3)
              || v34 <= *(unsigned __int8 *)(v31 + v27))
            {
              goto LABEL_781;
            }
          }
          else if (v34 <= *(unsigned __int8 *)(v31 + v16))
          {
            if (v34 <= *(unsigned __int8 *)(v31 + 3) || v34 <= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else if (v34 <= *(unsigned __int8 *)(v31 + v15))
          {
            if (v34 <= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else
          {
            int v43 = v22;
            if (v34 > *(unsigned __int8 *)(v31 + v92)) {
              goto LABEL_780;
            }
          }
          goto LABEL_641;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v24)
          || v34 <= *(unsigned __int8 *)(v31 + v23)
          || v34 <= *(unsigned __int8 *)(v31 + 3))
        {
          goto LABEL_781;
        }
        goto LABEL_499;
      }
      if (v34 <= v44)
      {
        int v54 = *(unsigned __int8 *)(v31 + v18);
        if (v33 < v54)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17))
          {
            goto LABEL_781;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 < *(unsigned __int8 *)(v31 + v27))
            {
              if (v33 < *(unsigned __int8 *)(v31 + 3))
              {
                if (v33 < *(unsigned __int8 *)(v31 + v23))
                {
                  int v43 = -(int)v22;
                  if (v33 < *(unsigned __int8 *)(v31 + v24)) {
                    goto LABEL_780;
                  }
LABEL_555:
                  int v48 = *(unsigned __int8 *)(v31 + v26);
                  goto LABEL_681;
                }
LABEL_678:
                int v85 = *(unsigned __int8 *)(v31 + v26);
LABEL_679:
                if (v33 >= v85) {
                  goto LABEL_781;
                }
                goto LABEL_680;
              }
LABEL_366:
              if (v33 >= *(unsigned __int8 *)(v31 + v26)) {
                goto LABEL_781;
              }
              goto LABEL_455;
            }
LABEL_282:
            if (v33 >= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_283;
          }
LABEL_214:
          if (v33 >= *(unsigned __int8 *)(v31 + v26)) {
            goto LABEL_781;
          }
          goto LABEL_215;
        }
        if (v34 <= v54 || v34 <= *(unsigned __int8 *)(v31 + v19) || v34 <= *(unsigned __int8 *)(v31 + v17)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v26))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v24)) {
            goto LABEL_781;
          }
        }
        else if (v34 > *(unsigned __int8 *)(v31 - 3))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v16))
          {
            if (v34 > *(unsigned __int8 *)(v31 + v15))
            {
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v92)) {
                goto LABEL_780;
              }
LABEL_641:
              if (v34 <= *(unsigned __int8 *)(v31 + v21)) {
                goto LABEL_781;
              }
              int v52 = *(unsigned __int8 *)(v31 + v20);
              goto LABEL_779;
            }
LABEL_499:
            if (v34 <= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
            goto LABEL_641;
          }
LABEL_498:
          if (v34 <= *(unsigned __int8 *)(v31 + 3)) {
            goto LABEL_781;
          }
          goto LABEL_499;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v23)) {
          goto LABEL_781;
        }
        goto LABEL_498;
      }
      int v50 = *(unsigned __int8 *)(v31 + v24);
      if (v33 < v50)
      {
        int v51 = *(unsigned __int8 *)(v31 + v19);
        if (v33 < v51)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v17))
          {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v26) || v33 >= *(unsigned __int8 *)(v31 - 3)) {
              goto LABEL_781;
            }
            goto LABEL_216;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v27))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_283;
          }
          if (v33 < *(unsigned __int8 *)(v31 + 3))
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v23)) {
              goto LABEL_780;
            }
            goto LABEL_678;
          }
          goto LABEL_366;
        }
        if (v34 <= v51 || v34 <= *(unsigned __int8 *)(v31 + v17) || v34 <= *(unsigned __int8 *)(v31 + v26)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 - 3))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v23)
            || v34 <= *(unsigned __int8 *)(v31 + 3)
            || v34 <= *(unsigned __int8 *)(v31 + v27))
          {
            goto LABEL_781;
          }
        }
        else if (v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + 3) || v34 <= *(unsigned __int8 *)(v31 + v27)) {
            goto LABEL_781;
          }
        }
        else if (v34 <= *(unsigned __int8 *)(v31 + v15))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v27)) {
            goto LABEL_781;
          }
        }
        else
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
        }
        goto LABEL_698;
      }
      if (v34 <= v50)
      {
        int v63 = *(unsigned __int8 *)(v31 + v19);
        if (v33 < v63)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v17)
            || v33 >= *(unsigned __int8 *)(v31 + v26))
          {
            goto LABEL_781;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 < *(unsigned __int8 *)(v31 + v27))
            {
              if (v33 < *(unsigned __int8 *)(v31 + 3))
              {
                int v43 = -(int)v22;
                if (v33 < *(unsigned __int8 *)(v31 + v23)) {
                  goto LABEL_780;
                }
LABEL_680:
                int v48 = *(unsigned __int8 *)(v31 - 3);
                goto LABEL_681;
              }
LABEL_455:
              int v79 = *(unsigned __int8 *)(v31 - 3);
LABEL_456:
              if (v33 >= v79) {
                goto LABEL_781;
              }
              goto LABEL_457;
            }
LABEL_283:
            if (v33 >= *(unsigned __int8 *)(v31 - 3)) {
              goto LABEL_781;
            }
            goto LABEL_358;
          }
LABEL_215:
          if (v33 >= *(unsigned __int8 *)(v31 - 3)) {
            goto LABEL_781;
          }
          goto LABEL_216;
        }
        if (v34 <= v63 || v34 <= *(unsigned __int8 *)(v31 + v17) || v34 <= *(unsigned __int8 *)(v31 + v26)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 - 3))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v23)) {
            goto LABEL_781;
          }
        }
        else if (v34 > *(unsigned __int8 *)(v31 + v16))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v15))
          {
            int v43 = v22;
            if (v34 > *(unsigned __int8 *)(v31 + v92)) {
              goto LABEL_780;
            }
LABEL_698:
            if (v34 <= *(unsigned __int8 *)(v31 + v21) || v34 <= *(unsigned __int8 *)(v31 + v20)) {
              goto LABEL_781;
            }
            int v52 = *(unsigned __int8 *)(v31 + v18);
            goto LABEL_779;
          }
LABEL_660:
          if (v34 <= *(unsigned __int8 *)(v31 + v27)) {
            goto LABEL_781;
          }
          goto LABEL_698;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + 3)) {
          goto LABEL_781;
        }
        goto LABEL_660;
      }
      int v57 = *(unsigned __int8 *)(v31 + v23);
      if (v33 < v57)
      {
        int v58 = *(unsigned __int8 *)(v31 + v17);
        if (v33 < v58)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v26))
          {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 >= *(unsigned __int8 *)(v31 - 3)) {
              goto LABEL_781;
            }
            goto LABEL_216;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v27))
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + 3)) {
              goto LABEL_780;
            }
            goto LABEL_455;
          }
          goto LABEL_283;
        }
        if (v34 <= v58 || v34 <= *(unsigned __int8 *)(v31 + v26) || v34 <= *(unsigned __int8 *)(v31 - 3)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + 3)
            || v34 <= *(unsigned __int8 *)(v31 + v27)
            || v34 <= *(unsigned __int8 *)(v31 + v21))
          {
            goto LABEL_781;
          }
        }
        else if (v34 <= *(unsigned __int8 *)(v31 + v15))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v27) || v34 <= *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_781;
          }
        }
        else
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_781;
          }
        }
        goto LABEL_776;
      }
      if (v34 <= v57)
      {
        int v78 = *(unsigned __int8 *)(v31 + v17);
        if (v33 < v78)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v26)
            || v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            goto LABEL_781;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v21))
          {
            if (v33 < *(unsigned __int8 *)(v31 + v27))
            {
              int v43 = -(int)v22;
              if (v33 < *(unsigned __int8 *)(v31 + 3)) {
                goto LABEL_780;
              }
LABEL_457:
              int v48 = *(unsigned __int8 *)(v31 + v16);
              goto LABEL_681;
            }
LABEL_358:
            int v73 = *(unsigned __int8 *)(v31 + v16);
LABEL_359:
            if (v33 >= v73) {
              goto LABEL_781;
            }
LABEL_360:
            int v48 = *(unsigned __int8 *)(v31 + v15);
            goto LABEL_681;
          }
LABEL_216:
          int v61 = *(unsigned __int8 *)(v31 + v16);
LABEL_217:
          if (v33 >= v61) {
            goto LABEL_781;
          }
          goto LABEL_273;
        }
        if (v34 <= v78 || v34 <= *(unsigned __int8 *)(v31 + v26) || v34 <= *(unsigned __int8 *)(v31 - 3)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + 3)
            || v34 <= *(unsigned __int8 *)(v31 + v27)
            || v34 <= *(unsigned __int8 *)(v31 + v21))
          {
            goto LABEL_781;
          }
        }
        else if (v34 <= *(unsigned __int8 *)(v31 + v15))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v27) || v34 <= *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_781;
          }
        }
        else
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_781;
          }
        }
LABEL_776:
        if (v34 <= *(unsigned __int8 *)(v31 + v20) || v34 <= *(unsigned __int8 *)(v31 + v18)) {
          goto LABEL_781;
        }
        int v52 = *(unsigned __int8 *)(v31 + v19);
        goto LABEL_779;
      }
      int v68 = *(unsigned __int8 *)(v31 + 3);
      if (v33 < v68)
      {
        int v69 = *(unsigned __int8 *)(v31 + v16);
        if (v33 < v69)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17)
            || v33 >= *(unsigned __int8 *)(v31 + v26)
            || v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            goto LABEL_781;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v21))
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_780;
            }
            goto LABEL_360;
          }
          goto LABEL_273;
        }
        if (v34 <= v69)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v27)
            || v33 >= *(unsigned __int8 *)(v31 + v21)
            || v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19))
          {
            goto LABEL_781;
          }
          goto LABEL_677;
        }
        int v84 = *(unsigned __int8 *)(v31 + v26);
        if (v33 < v84)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v27)
            || v33 >= *(unsigned __int8 *)(v31 + v21)
            || v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19))
          {
            goto LABEL_781;
          }
          int v85 = *(unsigned __int8 *)(v31 + v17);
          goto LABEL_679;
        }
        if (v34 <= v84 || v34 <= *(unsigned __int8 *)(v31 - 3)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v15))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v27)
            || v34 <= *(unsigned __int8 *)(v31 + v21)
            || v34 <= *(unsigned __int8 *)(v31 + v20))
          {
            goto LABEL_781;
          }
        }
        else
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v21) || v34 <= *(unsigned __int8 *)(v31 + v20)) {
            goto LABEL_781;
          }
        }
LABEL_811:
        if (v34 <= *(unsigned __int8 *)(v31 + v18) || v34 <= *(unsigned __int8 *)(v31 + v19)) {
          goto LABEL_781;
        }
LABEL_86:
        int v52 = *(unsigned __int8 *)(v31 + v17);
        goto LABEL_779;
      }
      if (v34 <= v68)
      {
        int v86 = *(unsigned __int8 *)(v31 + v26);
        if (v33 < v86)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17)
            || v33 >= *(unsigned __int8 *)(v31 - 3)
            || v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            goto LABEL_781;
          }
          if (v33 < *(unsigned __int8 *)(v31 + v21))
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_780;
            }
            goto LABEL_360;
          }
LABEL_273:
          int v65 = *(unsigned __int8 *)(v31 + v15);
LABEL_274:
          if (v33 >= v65) {
            goto LABEL_781;
          }
LABEL_275:
          int v48 = *(unsigned __int8 *)(v31 + v92);
LABEL_681:
          int v43 = -(int)v22;
          if (v33 < v48) {
            goto LABEL_780;
          }
          goto LABEL_781;
        }
        if (v34 <= v86 || v34 <= *(unsigned __int8 *)(v31 - 3) || v34 <= *(unsigned __int8 *)(v31 + v16)) {
          goto LABEL_781;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v15))
        {
          if (v34 <= *(unsigned __int8 *)(v31 + v27)
            || v34 <= *(unsigned __int8 *)(v31 + v21)
            || v34 <= *(unsigned __int8 *)(v31 + v20))
          {
            goto LABEL_781;
          }
        }
        else
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v21) || v34 <= *(unsigned __int8 *)(v31 + v20)) {
            goto LABEL_781;
          }
        }
        goto LABEL_811;
      }
      int v81 = *(unsigned __int8 *)(v31 + v27);
      if (v33 >= v81)
      {
        if (v34 > v81)
        {
          int v87 = *(unsigned __int8 *)(v31 + v21);
          if (v33 < v87)
          {
            if (v34 <= *(unsigned __int8 *)(v31 + v92))
            {
              if (v33 >= *(unsigned __int8 *)(v31 + v20)
                || v33 >= *(unsigned __int8 *)(v31 + v18)
                || v33 >= *(unsigned __int8 *)(v31 + v19)
                || v33 >= *(unsigned __int8 *)(v31 + v17)
                || v33 >= *(unsigned __int8 *)(v31 + v26))
              {
                goto LABEL_781;
              }
              goto LABEL_283;
            }
            int v74 = *(unsigned __int8 *)(v31 + v16);
            if (v33 < v74)
            {
              if (v33 >= *(unsigned __int8 *)(v31 + v20)
                || v33 >= *(unsigned __int8 *)(v31 + v18)
                || v33 >= *(unsigned __int8 *)(v31 + v19)
                || v33 >= *(unsigned __int8 *)(v31 + v17)
                || v33 >= *(unsigned __int8 *)(v31 + v26))
              {
                goto LABEL_781;
              }
              int v73 = *(unsigned __int8 *)(v31 - 3);
              goto LABEL_359;
            }
LABEL_381:
            if (v34 <= v74) {
              goto LABEL_781;
            }
LABEL_696:
            int v52 = *(unsigned __int8 *)(v31 + v15);
LABEL_779:
            int v43 = v22;
            if (v34 > v52) {
              goto LABEL_780;
            }
            goto LABEL_781;
          }
          if (v34 > v87)
          {
            int v90 = *(unsigned __int8 *)(v31 + v20);
            if (v33 < v90)
            {
              int v67 = *(unsigned __int8 *)(v31 + v15);
              if (v33 < v67)
              {
                if (v33 >= *(unsigned __int8 *)(v31 + v18)
                  || v33 >= *(unsigned __int8 *)(v31 + v19)
                  || v33 >= *(unsigned __int8 *)(v31 + v17)
                  || v33 >= *(unsigned __int8 *)(v31 + v26)
                  || v33 >= *(unsigned __int8 *)(v31 - 3))
                {
                  goto LABEL_781;
                }
                int v65 = *(unsigned __int8 *)(v31 + v16);
                goto LABEL_274;
              }
LABEL_296:
              if (v34 <= v67) {
                goto LABEL_781;
              }
LABEL_654:
              int v52 = *(unsigned __int8 *)(v31 + v92);
              goto LABEL_779;
            }
            if (v34 > v90)
            {
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v18))
              {
LABEL_780:
                uint64_t v91 = (_DWORD *)(v29 + 8 * v11);
                *uint64_t v91 = v30;
                v91[1] = v43;
                if (++v11 == 10000) {
                  return;
                }
                goto LABEL_781;
              }
              goto LABEL_654;
            }
LABEL_295:
            int v67 = *(unsigned __int8 *)(v31 + v15);
            goto LABEL_296;
          }
          int v66 = *(unsigned __int8 *)(v31 + v16);
          if (v33 < v66)
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v20)
              || v33 >= *(unsigned __int8 *)(v31 + v18)
              || v33 >= *(unsigned __int8 *)(v31 + v19)
              || v33 >= *(unsigned __int8 *)(v31 + v17)
              || v33 >= *(unsigned __int8 *)(v31 + v26))
            {
              goto LABEL_781;
            }
            int v61 = *(unsigned __int8 *)(v31 - 3);
            goto LABEL_217;
          }
LABEL_294:
          if (v34 <= v66) {
            goto LABEL_781;
          }
          goto LABEL_295;
        }
        int v89 = *(unsigned __int8 *)(v31 - 3);
        if (v33 < v89)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17)
            || v33 >= *(unsigned __int8 *)(v31 + v26)
            || v33 >= *(unsigned __int8 *)(v31 + v16)
            || v33 >= *(unsigned __int8 *)(v31 + v15))
          {
            goto LABEL_781;
          }
          int v43 = -(int)v22;
          if (v33 < *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_780;
          }
          goto LABEL_275;
        }
        if (v34 > v89 && v34 > *(unsigned __int8 *)(v31 + v16) && v34 > *(unsigned __int8 *)(v31 + v15))
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 > *(unsigned __int8 *)(v31 + v21)
            && v34 > *(unsigned __int8 *)(v31 + v20)
            && v34 > *(unsigned __int8 *)(v31 + v18))
          {
            goto LABEL_795;
          }
        }
      }
      else
      {
        int v82 = *(unsigned __int8 *)(v31 + v15);
        if (v33 < v82)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17)
            || v33 >= *(unsigned __int8 *)(v31 + v26)
            || v33 >= *(unsigned __int8 *)(v31 - 3)
            || v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            goto LABEL_781;
          }
          int v43 = -(int)v22;
          if (v33 < *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_780;
          }
          goto LABEL_275;
        }
        if (v34 <= v82)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v21)
            || v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17))
          {
            goto LABEL_781;
          }
          goto LABEL_366;
        }
        int v88 = *(unsigned __int8 *)(v31 - 3);
        if (v33 < v88)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v21)
            || v33 >= *(unsigned __int8 *)(v31 + v20)
            || v33 >= *(unsigned __int8 *)(v31 + v18)
            || v33 >= *(unsigned __int8 *)(v31 + v19)
            || v33 >= *(unsigned __int8 *)(v31 + v17))
          {
            goto LABEL_781;
          }
          int v79 = *(unsigned __int8 *)(v31 + v26);
          goto LABEL_456;
        }
        if (v34 > v88 && v34 > *(unsigned __int8 *)(v31 + v16))
        {
          int v43 = v22;
          if (v34 > *(unsigned __int8 *)(v31 + v92)) {
            goto LABEL_780;
          }
          if (v34 > *(unsigned __int8 *)(v31 + v21)
            && v34 > *(unsigned __int8 *)(v31 + v20)
            && v34 > *(unsigned __int8 *)(v31 + v18))
          {
LABEL_795:
            if (v34 <= *(unsigned __int8 *)(v31 + v19)) {
              goto LABEL_781;
            }
            goto LABEL_114;
          }
        }
      }
LABEL_781:
      if (++v30 == a2 - 3) {
        goto LABEL_817;
      }
    }
    int v36 = *(unsigned __int8 *)(v31 + v25);
    if (v33 >= v36)
    {
      int v46 = *(unsigned __int8 *)(v31 + v18);
      if (v34 <= v36)
      {
        if (v33 < v46)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v19) || v33 >= *(unsigned __int8 *)(v31 + v17)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v26))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v24)
              || v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + 3) || v33 >= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v15))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v92)) {
              goto LABEL_780;
            }
          }
LABEL_568:
          if (v33 >= *(unsigned __int8 *)(v31 + v21)) {
            goto LABEL_781;
          }
          int v48 = *(unsigned __int8 *)(v31 + v20);
          goto LABEL_681;
        }
        if (v34 <= v46
          || v34 <= *(unsigned __int8 *)(v31 + v20)
          || v34 <= *(unsigned __int8 *)(v31 + v19)
          || v34 <= *(unsigned __int8 *)(v31 + v17))
        {
          goto LABEL_781;
        }
        if (v34 > *(unsigned __int8 *)(v31 + v21))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v27))
          {
            if (v34 > *(unsigned __int8 *)(v31 + 3))
            {
              if (v34 > *(unsigned __int8 *)(v31 + v23))
              {
                int v43 = v22;
                if (v34 > *(unsigned __int8 *)(v31 + v24)) {
                  goto LABEL_780;
                }
                goto LABEL_144;
              }
              goto LABEL_644;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_692;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v26) || v34 <= *(unsigned __int8 *)(v31 - 3)) {
            goto LABEL_781;
          }
          goto LABEL_695;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v26)
          || v34 <= *(unsigned __int8 *)(v31 - 3)
          || v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          goto LABEL_781;
        }
      }
      else
      {
        if (v33 < v46)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v19) || v33 >= *(unsigned __int8 *)(v31 + v17)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 + v26))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v24)
              || v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + 3) || v33 >= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v15))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_781;
            }
          }
          else
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v92)) {
              goto LABEL_780;
            }
          }
          goto LABEL_568;
        }
        if (v34 <= v46 || v34 <= *(unsigned __int8 *)(v31 + v20) || v34 <= *(unsigned __int8 *)(v31 + v19)) {
          goto LABEL_781;
        }
        if (v34 > *(unsigned __int8 *)(v31 + v21))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v27))
          {
            if (v34 > *(unsigned __int8 *)(v31 + 3))
            {
              if (v34 > *(unsigned __int8 *)(v31 + v23))
              {
                int v43 = v22;
                if (v34 > *(unsigned __int8 *)(v31 + v24)) {
                  goto LABEL_780;
                }
                goto LABEL_114;
              }
              if (v34 <= *(unsigned __int8 *)(v31 + v17)) {
                goto LABEL_781;
              }
              goto LABEL_644;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v17) || v34 <= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
            goto LABEL_692;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v17)
            || v34 <= *(unsigned __int8 *)(v31 + v26)
            || v34 <= *(unsigned __int8 *)(v31 - 3))
          {
            goto LABEL_781;
          }
LABEL_695:
          if (v34 <= *(unsigned __int8 *)(v31 + v16)) {
            goto LABEL_781;
          }
          goto LABEL_696;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v17)
          || v34 <= *(unsigned __int8 *)(v31 + v26)
          || v34 <= *(unsigned __int8 *)(v31 - 3)
          || v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          goto LABEL_781;
        }
      }
    }
    else
    {
      int v37 = *(unsigned __int8 *)(v31 + v24);
      if (v33 < v37)
      {
        int v38 = *(unsigned __int8 *)(v31 + v23);
        if (v33 >= v38)
        {
          int v53 = *(unsigned __int8 *)(v31 + v17);
          if (v34 <= v38)
          {
            if (v33 < v53)
            {
              if (v33 >= *(unsigned __int8 *)(v31 + v26) || v33 >= *(unsigned __int8 *)(v31 - 3)) {
                goto LABEL_781;
              }
              if (v33 >= *(unsigned __int8 *)(v31 + v16))
              {
                if (v33 >= *(unsigned __int8 *)(v31 + 3) || v33 >= *(unsigned __int8 *)(v31 + v27)) {
                  goto LABEL_781;
                }
              }
              else
              {
                if (v33 < *(unsigned __int8 *)(v31 + v15))
                {
                  int v43 = -(int)v22;
                  if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                    goto LABEL_780;
                  }
                  if (v33 >= *(unsigned __int8 *)(v31 + v21) || v33 >= *(unsigned __int8 *)(v31 + v20)) {
                    goto LABEL_781;
                  }
                  goto LABEL_601;
                }
                if (v33 >= *(unsigned __int8 *)(v31 + v27)) {
                  goto LABEL_781;
                }
              }
              if (v33 >= *(unsigned __int8 *)(v31 + v21) || v33 >= *(unsigned __int8 *)(v31 + v20)) {
                goto LABEL_781;
              }
LABEL_601:
              if (v33 >= *(unsigned __int8 *)(v31 + v18)) {
                goto LABEL_781;
              }
              int v48 = *(unsigned __int8 *)(v31 + v19);
              goto LABEL_681;
            }
            if (v34 <= v53
              || v34 <= *(unsigned __int8 *)(v31 + v20)
              || v34 <= *(unsigned __int8 *)(v31 + v18)
              || v34 <= *(unsigned __int8 *)(v31 + v19)
              || v34 <= *(unsigned __int8 *)(v31 + v26)
              || v34 <= *(unsigned __int8 *)(v31 - 3))
            {
              goto LABEL_781;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v21))
            {
              if (v34 <= *(unsigned __int8 *)(v31 + v16)) {
                goto LABEL_781;
              }
              int v72 = *(unsigned __int8 *)(v31 + v15);
              goto LABEL_739;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v27))
            {
              int v83 = *(unsigned __int8 *)(v31 + v16);
LABEL_772:
              if (v34 <= v83) {
                goto LABEL_781;
              }
              goto LABEL_773;
            }
            int v43 = v22;
            if (v34 > *(unsigned __int8 *)(v31 + 3)) {
              goto LABEL_780;
            }
LABEL_537:
            int v52 = *(unsigned __int8 *)(v31 + v16);
            goto LABEL_779;
          }
          if (v33 < v53)
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v26) || v33 >= *(unsigned __int8 *)(v31 - 3)) {
              goto LABEL_781;
            }
            if (v33 >= *(unsigned __int8 *)(v31 + v16))
            {
              if (v33 >= *(unsigned __int8 *)(v31 + 3)
                || v33 >= *(unsigned __int8 *)(v31 + v27)
                || v33 >= *(unsigned __int8 *)(v31 + v21)
                || v33 >= *(unsigned __int8 *)(v31 + v20))
              {
                goto LABEL_781;
              }
            }
            else if (v33 >= *(unsigned __int8 *)(v31 + v15))
            {
              if (v33 >= *(unsigned __int8 *)(v31 + v27)
                || v33 >= *(unsigned __int8 *)(v31 + v21)
                || v33 >= *(unsigned __int8 *)(v31 + v20))
              {
                goto LABEL_781;
              }
            }
            else
            {
              int v43 = -(int)v22;
              if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                goto LABEL_780;
              }
              if (v33 >= *(unsigned __int8 *)(v31 + v21) || v33 >= *(unsigned __int8 *)(v31 + v20)) {
                goto LABEL_781;
              }
            }
            goto LABEL_601;
          }
          if (v34 <= v53
            || v34 <= *(unsigned __int8 *)(v31 + v20)
            || v34 <= *(unsigned __int8 *)(v31 + v18)
            || v34 <= *(unsigned __int8 *)(v31 + v19)
            || v34 <= *(unsigned __int8 *)(v31 + v26))
          {
            goto LABEL_781;
          }
          if (v34 > *(unsigned __int8 *)(v31 + v21))
          {
            if (v34 <= *(unsigned __int8 *)(v31 + v27))
            {
              if (v34 <= *(unsigned __int8 *)(v31 - 3)) {
                goto LABEL_781;
              }
LABEL_736:
              int v83 = *(unsigned __int8 *)(v31 + v16);
              goto LABEL_772;
            }
            int v43 = v22;
            if (v34 > *(unsigned __int8 *)(v31 + 3)) {
              goto LABEL_780;
            }
            goto LABEL_535;
          }
          if (v34 <= *(unsigned __int8 *)(v31 - 3) || v34 <= *(unsigned __int8 *)(v31 + v16)) {
            goto LABEL_781;
          }
        }
        else
        {
          int v39 = *(unsigned __int8 *)(v31 + 3);
          if (v33 < v39)
          {
            int v40 = *(unsigned __int8 *)(v31 + v27);
            if (v33 < v40)
            {
              int v41 = *(unsigned __int8 *)(v31 + v21);
              if (v33 < v41)
              {
                int v42 = *(unsigned __int8 *)(v31 + v20);
                if (v33 < v42)
                {
                  int v43 = -(int)v22;
                  if (v33 < *(unsigned __int8 *)(v31 + v18)) {
                    goto LABEL_780;
                  }
LABEL_528:
                  int v48 = *(unsigned __int8 *)(v31 + v92);
                  goto LABEL_681;
                }
                int v71 = *(unsigned __int8 *)(v31 + v15);
                if (v34 <= v42)
                {
                  if (v33 >= v71) {
                    goto LABEL_781;
                  }
                  goto LABEL_528;
                }
                if (v33 < v71) {
                  goto LABEL_528;
                }
                if (v34 <= v71
                  || v34 <= *(unsigned __int8 *)(v31 + v18)
                  || v34 <= *(unsigned __int8 *)(v31 + v19)
                  || v34 <= *(unsigned __int8 *)(v31 + v17)
                  || v34 <= *(unsigned __int8 *)(v31 + v26)
                  || v34 <= *(unsigned __int8 *)(v31 - 3))
                {
                  goto LABEL_781;
                }
                int v72 = *(unsigned __int8 *)(v31 + v16);
                goto LABEL_739;
              }
              if (v34 > v41)
              {
                if (v33 < *(unsigned __int8 *)(v31 + v92))
                {
                  int v64 = *(unsigned __int8 *)(v31 + v16);
                  if (v33 < v64)
                  {
                    int v48 = *(unsigned __int8 *)(v31 + v15);
                    goto LABEL_681;
                  }
                  if (v34 <= v64
                    || v34 <= *(unsigned __int8 *)(v31 + v20)
                    || v34 <= *(unsigned __int8 *)(v31 + v18)
                    || v34 <= *(unsigned __int8 *)(v31 + v19)
                    || v34 <= *(unsigned __int8 *)(v31 + v17)
                    || v34 <= *(unsigned __int8 *)(v31 + v26))
                  {
                    goto LABEL_781;
                  }
                  int v83 = *(unsigned __int8 *)(v31 - 3);
                  goto LABEL_772;
                }
                if (v34 <= *(unsigned __int8 *)(v31 + v20)
                  || v34 <= *(unsigned __int8 *)(v31 + v18)
                  || v34 <= *(unsigned __int8 *)(v31 + v19)
                  || v34 <= *(unsigned __int8 *)(v31 + v17)
                  || v34 <= *(unsigned __int8 *)(v31 + v26)
                  || v34 <= *(unsigned __int8 *)(v31 - 3))
                {
                  goto LABEL_781;
                }
                goto LABEL_736;
              }
              int v77 = *(unsigned __int8 *)(v31 + v16);
              if (v33 < v77)
              {
                if (v33 >= *(unsigned __int8 *)(v31 + v15)) {
                  goto LABEL_781;
                }
                goto LABEL_528;
              }
              if (v34 <= v77
                || v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19)
                || v34 <= *(unsigned __int8 *)(v31 + v17)
                || v34 <= *(unsigned __int8 *)(v31 + v26)
                || v34 <= *(unsigned __int8 *)(v31 - 3))
              {
                goto LABEL_781;
              }
              goto LABEL_703;
            }
            if (v34 <= v40)
            {
              int v70 = *(unsigned __int8 *)(v31 - 3);
              if (v33 < v70)
              {
                if (v33 >= *(unsigned __int8 *)(v31 + v16) || v33 >= *(unsigned __int8 *)(v31 + v15)) {
                  goto LABEL_781;
                }
                int v43 = -(int)v22;
                if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                  goto LABEL_780;
                }
                if (v33 >= *(unsigned __int8 *)(v31 + v21)
                  || v33 >= *(unsigned __int8 *)(v31 + v20)
                  || v33 >= *(unsigned __int8 *)(v31 + v18)
                  || v33 >= *(unsigned __int8 *)(v31 + v19))
                {
                  goto LABEL_781;
                }
                goto LABEL_326;
              }
              if (v34 <= v70
                || v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19)
                || v34 <= *(unsigned __int8 *)(v31 + v17)
                || v34 <= *(unsigned __int8 *)(v31 + v26)
                || v34 <= *(unsigned __int8 *)(v31 + v16))
              {
                goto LABEL_781;
              }
              int v76 = *(unsigned __int8 *)(v31 + v15);
              goto LABEL_450;
            }
            int v59 = *(unsigned __int8 *)(v31 + v15);
            if (v33 < v59)
            {
              int v60 = *(unsigned __int8 *)(v31 - 3);
              if (v33 < v60)
              {
                if (v33 >= *(unsigned __int8 *)(v31 + v16)) {
                  goto LABEL_781;
                }
                int v43 = -(int)v22;
                if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                  goto LABEL_780;
                }
                if (v33 >= *(unsigned __int8 *)(v31 + v21)
                  || v33 >= *(unsigned __int8 *)(v31 + v20)
                  || v33 >= *(unsigned __int8 *)(v31 + v18)
                  || v33 >= *(unsigned __int8 *)(v31 + v19))
                {
                  goto LABEL_781;
                }
LABEL_326:
                if (v33 >= *(unsigned __int8 *)(v31 + v17)) {
                  goto LABEL_781;
                }
                int v48 = *(unsigned __int8 *)(v31 + v26);
                goto LABEL_681;
              }
              if (v34 <= v60
                || v34 <= *(unsigned __int8 *)(v31 + v21)
                || v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19)
                || v34 <= *(unsigned __int8 *)(v31 + v17))
              {
                goto LABEL_781;
              }
              int v80 = *(unsigned __int8 *)(v31 + v26);
              goto LABEL_536;
            }
            if (v34 > v59)
            {
              if (v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19)
                || v34 <= *(unsigned __int8 *)(v31 + v17)
                || v34 <= *(unsigned __int8 *)(v31 + v26)
                || v34 <= *(unsigned __int8 *)(v31 - 3))
              {
                goto LABEL_781;
              }
              int v76 = *(unsigned __int8 *)(v31 + v16);
LABEL_450:
              if (v34 <= v76) {
                goto LABEL_781;
              }
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v21)) {
                goto LABEL_780;
              }
              goto LABEL_740;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v21)
              || v34 <= *(unsigned __int8 *)(v31 + v20)
              || v34 <= *(unsigned __int8 *)(v31 + v18)
              || v34 <= *(unsigned __int8 *)(v31 + v19)
              || v34 <= *(unsigned __int8 *)(v31 + v17)
              || v34 <= *(unsigned __int8 *)(v31 + v26))
            {
              goto LABEL_781;
            }
LABEL_535:
            int v80 = *(unsigned __int8 *)(v31 - 3);
LABEL_536:
            if (v34 <= v80) {
              goto LABEL_781;
            }
            goto LABEL_537;
          }
          if (v34 <= v39)
          {
            int v62 = *(unsigned __int8 *)(v31 + v26);
            if (v33 < v62)
            {
              if (v33 >= *(unsigned __int8 *)(v31 - 3) || v33 >= *(unsigned __int8 *)(v31 + v16)) {
                goto LABEL_781;
              }
              if (v33 >= *(unsigned __int8 *)(v31 + v15))
              {
                if (v33 >= *(unsigned __int8 *)(v31 + v27)
                  || v33 >= *(unsigned __int8 *)(v31 + v21)
                  || v33 >= *(unsigned __int8 *)(v31 + v20)
                  || v33 >= *(unsigned __int8 *)(v31 + v18))
                {
                  goto LABEL_781;
                }
              }
              else
              {
                int v43 = -(int)v22;
                if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                  goto LABEL_780;
                }
                if (v33 >= *(unsigned __int8 *)(v31 + v21)
                  || v33 >= *(unsigned __int8 *)(v31 + v20)
                  || v33 >= *(unsigned __int8 *)(v31 + v18))
                {
                  goto LABEL_781;
                }
              }
              goto LABEL_611;
            }
            if (v34 <= v62
              || v34 <= *(unsigned __int8 *)(v31 + v20)
              || v34 <= *(unsigned __int8 *)(v31 + v18)
              || v34 <= *(unsigned __int8 *)(v31 + v19)
              || v34 <= *(unsigned __int8 *)(v31 + v17)
              || v34 <= *(unsigned __int8 *)(v31 - 3)
              || v34 <= *(unsigned __int8 *)(v31 + v16))
            {
              goto LABEL_781;
            }
          }
          else
          {
            int v55 = *(unsigned __int8 *)(v31 + v16);
            if (v33 < v55)
            {
              int v56 = *(unsigned __int8 *)(v31 + v26);
              if (v33 < v56)
              {
                if (v33 >= *(unsigned __int8 *)(v31 - 3)) {
                  goto LABEL_781;
                }
                if (v33 >= *(unsigned __int8 *)(v31 + v15))
                {
                  if (v33 >= *(unsigned __int8 *)(v31 + v27)
                    || v33 >= *(unsigned __int8 *)(v31 + v21)
                    || v33 >= *(unsigned __int8 *)(v31 + v20)
                    || v33 >= *(unsigned __int8 *)(v31 + v18))
                  {
                    goto LABEL_781;
                  }
                }
                else
                {
                  int v43 = -(int)v22;
                  if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                    goto LABEL_780;
                  }
                  if (v33 >= *(unsigned __int8 *)(v31 + v21)
                    || v33 >= *(unsigned __int8 *)(v31 + v20)
                    || v33 >= *(unsigned __int8 *)(v31 + v18))
                  {
                    goto LABEL_781;
                  }
                }
LABEL_611:
                if (v33 >= *(unsigned __int8 *)(v31 + v19)) {
                  goto LABEL_781;
                }
                int v48 = *(unsigned __int8 *)(v31 + v17);
                goto LABEL_681;
              }
              if (v34 <= v56
                || v34 <= *(unsigned __int8 *)(v31 + v27)
                || v34 <= *(unsigned __int8 *)(v31 + v21)
                || v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19))
              {
                goto LABEL_781;
              }
              int v75 = *(unsigned __int8 *)(v31 + v17);
              goto LABEL_430;
            }
            if (v34 <= v55)
            {
              if (v34 <= *(unsigned __int8 *)(v31 + v27)
                || v34 <= *(unsigned __int8 *)(v31 + v21)
                || v34 <= *(unsigned __int8 *)(v31 + v20)
                || v34 <= *(unsigned __int8 *)(v31 + v18)
                || v34 <= *(unsigned __int8 *)(v31 + v19)
                || v34 <= *(unsigned __int8 *)(v31 + v17))
              {
                goto LABEL_781;
              }
              int v75 = *(unsigned __int8 *)(v31 + v26);
LABEL_430:
              if (v34 <= v75) {
                goto LABEL_781;
              }
              int v52 = *(unsigned __int8 *)(v31 - 3);
              goto LABEL_779;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v20)
              || v34 <= *(unsigned __int8 *)(v31 + v18)
              || v34 <= *(unsigned __int8 *)(v31 + v19)
              || v34 <= *(unsigned __int8 *)(v31 + v17)
              || v34 <= *(unsigned __int8 *)(v31 + v26)
              || v34 <= *(unsigned __int8 *)(v31 - 3))
            {
              goto LABEL_781;
            }
          }
          if (v34 > *(unsigned __int8 *)(v31 + v21))
          {
            int v43 = v22;
            if (v34 > *(unsigned __int8 *)(v31 + v27)) {
              goto LABEL_780;
            }
LABEL_773:
            int v52 = *(unsigned __int8 *)(v31 + v15);
            goto LABEL_779;
          }
        }
LABEL_703:
        int v72 = *(unsigned __int8 *)(v31 + v15);
LABEL_739:
        if (v34 <= v72) {
          goto LABEL_781;
        }
LABEL_740:
        int v52 = *(unsigned __int8 *)(v31 + v92);
        goto LABEL_779;
      }
      int v49 = *(unsigned __int8 *)(v31 + v19);
      if (v34 <= v37)
      {
        if (v33 < v49)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v17) || v33 >= *(unsigned __int8 *)(v31 + v26)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27)
              || v33 >= *(unsigned __int8 *)(v31 + v21))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27)
              || v33 >= *(unsigned __int8 *)(v31 + v21))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v15))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v27) || v33 >= *(unsigned __int8 *)(v31 + v21)) {
              goto LABEL_781;
            }
          }
          else
          {
            int v43 = -(int)v22;
            if (v33 < *(unsigned __int8 *)(v31 + v92)) {
              goto LABEL_780;
            }
            if (v33 >= *(unsigned __int8 *)(v31 + v21)) {
              goto LABEL_781;
            }
          }
LABEL_584:
          if (v33 >= *(unsigned __int8 *)(v31 + v20)) {
            goto LABEL_781;
          }
          int v48 = *(unsigned __int8 *)(v31 + v18);
          goto LABEL_681;
        }
        if (v34 <= v49
          || v34 <= *(unsigned __int8 *)(v31 + v20)
          || v34 <= *(unsigned __int8 *)(v31 + v18)
          || v34 <= *(unsigned __int8 *)(v31 + v17)
          || v34 <= *(unsigned __int8 *)(v31 + v26))
        {
          goto LABEL_781;
        }
        if (v34 > *(unsigned __int8 *)(v31 + v21))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v27))
          {
            if (v34 > *(unsigned __int8 *)(v31 + 3))
            {
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v23)) {
                goto LABEL_780;
              }
              goto LABEL_645;
            }
            goto LABEL_692;
          }
          if (v34 <= *(unsigned __int8 *)(v31 - 3)) {
            goto LABEL_781;
          }
          goto LABEL_695;
        }
        if (v34 <= *(unsigned __int8 *)(v31 - 3) || v34 <= *(unsigned __int8 *)(v31 + v16)) {
          goto LABEL_781;
        }
      }
      else
      {
        if (v33 < v49)
        {
          if (v33 >= *(unsigned __int8 *)(v31 + v17) || v33 >= *(unsigned __int8 *)(v31 + v26)) {
            goto LABEL_781;
          }
          if (v33 >= *(unsigned __int8 *)(v31 - 3))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + v23)
              || v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27)
              || v33 >= *(unsigned __int8 *)(v31 + v21))
            {
              goto LABEL_781;
            }
          }
          else if (v33 >= *(unsigned __int8 *)(v31 + v16))
          {
            if (v33 >= *(unsigned __int8 *)(v31 + 3)
              || v33 >= *(unsigned __int8 *)(v31 + v27)
              || v33 >= *(unsigned __int8 *)(v31 + v21))
            {
              goto LABEL_781;
            }
          }
          else
          {
            if (v33 < *(unsigned __int8 *)(v31 + v15))
            {
              int v43 = -(int)v22;
              if (v33 < *(unsigned __int8 *)(v31 + v92)) {
                goto LABEL_780;
              }
              if (v33 >= *(unsigned __int8 *)(v31 + v21) || v33 >= *(unsigned __int8 *)(v31 + v20)) {
                goto LABEL_781;
              }
              int v48 = *(unsigned __int8 *)(v31 + v18);
              goto LABEL_681;
            }
            if (v33 >= *(unsigned __int8 *)(v31 + v27) || v33 >= *(unsigned __int8 *)(v31 + v21)) {
              goto LABEL_781;
            }
          }
          goto LABEL_584;
        }
        if (v34 <= v49
          || v34 <= *(unsigned __int8 *)(v31 + v20)
          || v34 <= *(unsigned __int8 *)(v31 + v18)
          || v34 <= *(unsigned __int8 *)(v31 + v17))
        {
          goto LABEL_781;
        }
        if (v34 > *(unsigned __int8 *)(v31 + v21))
        {
          if (v34 > *(unsigned __int8 *)(v31 + v27))
          {
            if (v34 > *(unsigned __int8 *)(v31 + 3))
            {
              int v43 = v22;
              if (v34 > *(unsigned __int8 *)(v31 + v23)) {
                goto LABEL_780;
              }
              goto LABEL_644;
            }
            if (v34 <= *(unsigned __int8 *)(v31 + v26)) {
              goto LABEL_781;
            }
LABEL_692:
            if (v34 <= *(unsigned __int8 *)(v31 - 3)) {
              goto LABEL_781;
            }
            goto LABEL_693;
          }
          if (v34 <= *(unsigned __int8 *)(v31 + v26) || v34 <= *(unsigned __int8 *)(v31 - 3)) {
            goto LABEL_781;
          }
          goto LABEL_695;
        }
        if (v34 <= *(unsigned __int8 *)(v31 + v26)
          || v34 <= *(unsigned __int8 *)(v31 - 3)
          || v34 <= *(unsigned __int8 *)(v31 + v16))
        {
          goto LABEL_781;
        }
      }
    }
    if (v34 <= *(unsigned __int8 *)(v31 + v15)) {
      goto LABEL_781;
    }
    goto LABEL_654;
  }
  int v11 = 0;
LABEL_820:

  std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPoint>::resize((uint64_t)a6, v11);
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPoint>::__append((char **)a1, a2 - v2);
  }
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::detectKeypointInCrop(uint64_t a1, int a2, void *a3)
{
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPoint>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      uint64_t v8 = *a1;
      char v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      uint64_t v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain::DetailsExtractionProcessingChain(apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F360CE28;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &unk_1F360CD08;
  *((void *)this + 5) = &unk_1F360CD48;
  *((void *)this + 6) = 0;
  apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::FaceprintAndMeshExtractor((void *)this + 7);
  *((void *)this + 9) = &unk_1F360CC78;
  *((void *)this + 10) = &unk_1F360CDC8;
  apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain::initializeProcessingChain(this);
  return this;
}

void sub_1DBAD3BD4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::~FaceprintAndMeshExtractor(v5);
  apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::~EyesAndMouthLocalizer(v3);
  *uint64_t v1 = v2;
  char v7 = (void *)v1[1];
  if (v7)
  {
    v1[2] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain::initializeProcessingChain(apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *this)
{
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 32);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 40);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 56);
  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 72);

  apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(this, (uint64_t)this + 80);
}

void apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain::~DetailsExtractionProcessingChain(apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *this)
{
  *(void *)this = &unk_1F360CE28;
  apple::vision::libraries::facecore::processing::extraction::FaceprintAndMeshExtractor::~FaceprintAndMeshExtractor((apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *)((char *)this + 56));
  apple::vision::libraries::facecore::processing::postprocessing::EyesAndMouthLocalizer::~EyesAndMouthLocalizer((apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *)((char *)this + 40));
  *(void *)this = &unk_1F360CDE8;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void apple::vision::libraries::facecore::processing::preprocessing::DetailsExtractionImageRotationAndCroppingPreprocessing::performProcessing(apple::vision::libraries::facecore::processing::preprocessing::DetailsExtractionImageRotationAndCroppingPreprocessing *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (!*((void *)a2 + 27)) {
    operator new();
  }
  apple::vision::libraries::facecore::processing::preprocessing::DetailsExtractionImageRotationAndCroppingPreprocessing::performProcessing();
}

void sub_1DBAD3E68(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A0C40AA1930FBLL);
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::processing::postprocessing::DetailsExtractionFaceCoordsTranslation::performProcessing(apple::vision::libraries::facecore::processing::postprocessing::DetailsExtractionFaceCoordsTranslation *this, apple::vision::libraries::facecore::FaceCoreContext *a2, uint64_t a3, image *a4)
{
  uint64_t v6 = *((void *)a2 + 26);
  uint64_t v5 = *((void *)a2 + 27);
  apple::vision::libraries::facecore::utils::ImageRotationUtils::computeFaceCoordinatesInImageRotatedByAngle((360 - *((_DWORD *)a2 + 4)), v5, (coord *)a2 + 14, a4);
  apple::vision::libraries::facecore::utils::ImageRotationUtils::translateFaceCoordinatesByVector(v5, *((_DWORD *)a2 + 56), *((_DWORD *)a2 + 57));
  if (v6 != v5) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v6 + 48), *(char **)(v5 + 48), *(void *)(v5 + 56), (uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 3);
  }
  *(_DWORD *)(v6 + 72) = 0;
  *(void *)(v6 + 20) = *(void *)(v5 + 20);
  *(void *)(v6 + 4) = *(void *)(v5 + 4);
  *(void *)(v6 + 12) = *(void *)(v5 + 12);
  *(void *)(v6 + 28) = *(void *)(v5 + 28);
  if (v6 != v5) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(v6 + 80), *(char **)(v5 + 80), *(void *)(v5 + 88), (uint64_t)(*(void *)(v5 + 88) - *(void *)(v5 + 80)) >> 3);
  }
  *(_WORD *)(v6 + 108) = *(_WORD *)(v5 + 108);
  *(unsigned char *)(v6 + 120) = *(unsigned char *)(v5 + 120);
  *(unsigned char *)(v6 + 128) = *(unsigned char *)(v5 + 128);
  *(void *)(v6 + 112) = *(void *)(v5 + 112);
  *(_DWORD *)(v6 + 124) = *(_DWORD *)(v5 + 124);
  float result = *(float *)(v5 + 132);
  *(float *)(v6 + 132) = result;
  *(void *)(v6 + 136) = *(void *)(v5 + 136);
  *(void *)(v5 + 136) = 0;
  return result;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::initBias(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
}

_OWORD *apple::vision::libraries::facecore::mod::aam::AamSearch::setBias(_OWORD *this)
{
  long long v1 = this[490462];
  long long v2 = this[490463];
  uint64_t v3 = this + 591586;
  uint64_t v4 = 31;
  do
  {
    *(v3 - 2) = v1;
    *(v3 - 1) = v2;
    *uint64_t v3 = 0uLL;
    v3[1] = 0uLL;
    v3[2] = 0uLL;
    v3[3] = 0uLL;
    v3[4] = 0uLL;
    v3[5] = 0uLL;
    v3[6] = 0uLL;
    v3[7] = 0uLL;
    v3[8] = 0uLL;
    v3[9] = 0uLL;
    v3[10] = 0uLL;
    v3[11] = 0uLL;
    v3[12] = 0uLL;
    v3[13] = 0uLL;
    v3[14] = 0uLL;
    v3[15] = 0uLL;
    v3[16] = 0uLL;
    v3[17] = 0uLL;
    v3[18] = 0uLL;
    v3[19] = 0uLL;
    v3[20] = 0uLL;
    v3[21] = 0uLL;
    v3[22] = 0uLL;
    v3[23] = 0uLL;
    v3[24] = 0uLL;
    v3[25] = 0uLL;
    v3[26] = 0uLL;
    v3[27] = 0uLL;
    v3 += 30;
    --v4;
  }
  while (v4);
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v6 = 0;
    double v7 = flt_1DBF82678[i];
    do
    {
      uint64_t v8 = 0;
      double v9 = flt_1DBF8268C[v6];
      char v10 = 1;
      do
      {
        char v11 = v10;
        uint64_t v12 = (uint64_t)&this[60 * v6 + 591584 + 30 * ((6 * i) | 1) + 30 * v8];
        *(double *)(v12 + 32) = v7;
        float v13 = flt_1DBF82670[v8];
        *(void *)(v12 + 40) = 0;
        *(double *)(v12 + 48) = v9;
        *(double *)(v12 + 56) = v13;
        uint64_t v8 = 1;
        char v10 = 0;
      }
      while ((v11 & 1) != 0);
      ++v6;
    }
    while (v6 != 3);
  }
  return this;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::CalcPriorsQuad(apple::vision::libraries::facecore::mod::aam::AamSearch *this, int a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetSearchTextureStd(this, a2, &v38);
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetShapeStd(this, &v36);
  uint64_t v4 = (float32x2_t *)((char *)this + 7847152);
  memset_pattern16(&__b, &unk_1DBF826A0, 0x20uLL);
  memset_pattern16(v41, &unk_1DBF826B0, 0xD0uLL);
  int64x2_t v35 = vdupq_n_s64(0x3FB999999999999AuLL);
  v41[0] = v35;
  v41[1] = v35;
  memset_pattern16(v42, &unk_1DBF826B0, 0x190uLL);
  v42[0] = v35;
  v42[1] = v35;
  memset_pattern16(v47, &unk_1DBF826C0, 0x20uLL);
  uint64_t v5 = 0;
  double v6 = *((double *)this + 16726);
  double v43 = v6;
  long long v7 = *(_OWORD *)((char *)this + 133816);
  long long v44 = v7;
  uint64_t v45 = *((void *)this + 16729);
  uint64_t v8 = v36;
  uint64_t v9 = (v37 - v36) >> 3;
  do
  {
    if (v9 == v5) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    *(void *)&v47[8 * v5 + 32] = *(void *)&v8[8 * v5];
    v46[v5] = *((void *)this + v5 + 16730);
    ++v5;
  }
  while (v5 != 26);
  uint64_t v10 = 0;
  char v11 = v38;
  uint64_t v12 = (v39 - v38) >> 3;
  do
  {
    if (v12 == v10) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    *(void *)&v47[8 * v10 + 240] = *(void *)&v11[8 * v10];
    *(double *)&v46[v10 + 26] = *((float *)this + v10 + 33512);
    ++v10;
  }
  while (v10 != 30);
  unint64_t v13 = -480;
  float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
  __asm { FMOV            V3.2D, #-2.0 }
  do
  {
    float64x2_t v20 = *(float64x2_t *)&v47[v13 + 480];
    int64x2_t v21 = vcgtq_f64(v14, vabsq_f64(v20));
    int32x2_t v22 = vmovn_s64(v21);
    if (v22.i8[0]) {
      *(void *)&v47[v13 + 480] = 0x3DDB7CDFD9D7BDBBLL;
    }
    if (v22.i8[4]) {
      *(void *)&v47[v13 + 488] = 0x3DDB7CDFD9D7BDBBLL;
    }
    float64x2_t v23 = (float64x2_t)vbslq_s8((int8x16_t)v21, (int8x16_t)v14, (int8x16_t)v20);
    float64x2_t v24 = vsubq_f64(vdivq_f64(*(float64x2_t *)&v46[v13 / 8 + 56], v23), *(float64x2_t *)((char *)this + v13 + 9464864));
    float64x2_t v25 = (float64x2_t)v42[v13 / 0x10 + 15];
    float64x2_t v26 = vmulq_f64(v25, v24);
    *v4++ = vcvt_f32_f64(vmulq_f64(v26, v26));
    v42[v13 / 0x10 + 55] = vmulq_f64(v24, vdivq_f64(vmulq_f64(vmulq_f64(v25, v25), _Q3), v23));
    v13 += 16;
  }
  while (v13);
  uint64_t v27 = 0;
  uint64_t v28 = (char *)this + 14400 * a2 + 7717552;
  uint64_t v29 = (char *)this + 7775152;
  do
  {
    for (uint64_t i = 0; i != 60; ++i)
    {
      float v31 = *((double *)&v42[25] + i);
      *(float *)&v29[4 * i] = *(float *)&v28[4 * i] * v31;
    }
    ++v27;
    v28 += 240;
    v29 += 240;
  }
  while (v27 != 60);
  uint64_t v32 = 0;
  float v33 = v6;
  do
  {
    *(float *)((char *)this + v32 + 7775152) = *(float *)((char *)this + v32 + 7775152) * v33;
    v32 += 244;
  }
  while (v32 != 976);
  float v34 = *(double *)&v7;
  *((float *)this + 1943789) = *((float *)this + 1943789) * v34;
  *((float *)this + 1943848) = *((float *)this + 1943848) * v34;
  if (v8)
  {
    int v37 = v8;
    operator delete(v8);
    char v11 = v38;
  }
  if (v11)
  {
    int v39 = v11;
    operator delete(v11);
  }
}

void sub_1DBAD43F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch::GetPriorsConstants(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(v1 + 133808);
  double v3 = *(double *)(v1 + 133816);
  *(double *)(v1 + 133792) = sqrt(v2 * v2 + v3 * v3);
  *(long double *)(v1 + 133800) = atan(v3 / v2) * 180.0 / 3.14159265;
  bzero(v50, 0x3F0uLL);
  bzero(v49, 0x3F0uLL);
  bzero(v48, 0x3F0uLL);
  uint64_t v4 = 0;
  __src = (char *)(v1 + 103344);
  int v41 = (char *)(v1 + 104352);
  uint64_t v5 = v1 + 7796872;
  uint64_t v6 = 5;
  do
  {
    uint64_t v43 = v5;
    uint64_t v44 = v4;
    long long v7 = (void *)(v1 + 14400 * v4 + 7789552);
    uint64_t v45 = v6;
    apple::vision::libraries::facecore::mod::aam::AamSearch::setLod((apple::vision::libraries::facecore::mod::aam::AamSearch *)v1, v6);
    apple::vision::libraries::facecore::mod::aam::AffineWarp::UpdateWarpTable(v1 + 34656, v1 + 8);
    bzero(v7, 0x3840uLL);
    uint64_t v8 = 0;
    uint64_t v9 = 103344;
    do
    {
      memcpy(__dst, (const void *)(v1 + 1008 * v8 + 103344), sizeof(__dst));
      memcpy(v51, (const void *)(v1 + 2024), sizeof(v51));
      for (uint64_t i = 0; i != 63; ++i)
        v51[i] = vsubq_f64(v51[i], *(float64x2_t *)&__dst[i * 16]);
      memcpy(v50, v51, sizeof(v50));
      apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices(v1 + 34656, (uint64_t)v50, v51);
      memcpy(v49, v51, sizeof(v49));
      uint64_t v11 = 0;
      double v12 = 0.0;
      do
      {
        double v12 = v12
            + *(double *)(v1 + v9 + v11 + 8) * *(double *)&v49[v11 + 8]
            + *(double *)(v1 + v9 + v11) * *(double *)&v49[v11];
        v11 += 16;
      }
      while (v11 != 1008);
      *(&v52 + v8++) = v12;
      v9 += 1008;
    }
    while (v8 != 4);
    double v13 = v53;
    double v14 = *(double *)(v1 + 133808);
    double v15 = *(double *)(v1 + 133816);
    float v16 = (v52 - v14) / v14;
    uint64_t v46 = v45 - 5;
    uint64_t v17 = (float *)(v1 + 14400 * (v45 - 5));
    uint64_t v18 = v17 + 1947388;
    v17[1947388] = v16;
    float v19 = (v13 - v15) / v14;
    v17[1947449] = v19;
    double v20 = v55;
    double v21 = *(double *)(v1 + 133832);
    float v22 = (v54 - *(double *)(v1 + 133824)) / v14;
    v17[1947510] = v22;
    float v23 = (v20 - v21) / v14;
    v17[1947571] = v23;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(v51, (const void *)(v1 + 2024), sizeof(v51));
    for (uint64_t j = 0; j != 63; ++j)
      v51[j] = vsubq_f64(v51[j], *(float64x2_t *)&__dst[j * 16]);
    memcpy(v50, v51, sizeof(v50));
    apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices(v1 + 34656, (uint64_t)v50, v51);
    memcpy(v49, v51, sizeof(v49));
    uint64_t v25 = 0;
    double v26 = 0.0;
    do
    {
      double v26 = v26
          + *(double *)(v1 + 104360 + v25) * *(double *)&v49[v25 + 8]
          + *(double *)&v41[v25] * *(double *)&v49[v25];
      v25 += 16;
    }
    while (v25 != 1008);
    double v53 = v26;
    float v27 = (v26 - *(double *)(v1 + 133816)) / *(double *)(v1 + 133816);
    v18[1] = v27;
    memcpy(__dst, v41, sizeof(__dst));
    memcpy(v51, (const void *)(v1 + 2024), sizeof(v51));
    for (uint64_t k = 0; k != 63; ++k)
      v51[k] = vsubq_f64(v51[k], *(float64x2_t *)&__dst[k * 16]);
    memcpy(v50, v51, sizeof(v50));
    apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices(v1 + 34656, (uint64_t)v50, v51);
    memcpy(v49, v51, sizeof(v49));
    uint64_t v29 = 0;
    double v30 = 0.0;
    do
    {
      double v30 = v30
          + *(double *)(v1 + 103352 + v29) * *(double *)&v49[v29 + 8]
          + *(double *)&__src[v29] * *(double *)&v49[v29];
      v29 += 16;
    }
    while (v29 != 1008);
    uint64_t v31 = 0;
    double v52 = v30;
    float v32 = (v30 - *(double *)(v1 + 133808)) / *(double *)(v1 + 133816);
    *(float *)(v1 + 14400 * v46 + 7789792) = v32;
    uint64_t v33 = v1 + 107376;
    do
    {
      memcpy(__dst, (const void *)(v1 + 1008 * v31 + 107376), sizeof(__dst));
      memcpy(v51, (const void *)(v1 + 2024), sizeof(v51));
      for (uint64_t m = 0; m != 63; ++m)
        v51[m] = vsubq_f64(v51[m], *(float64x2_t *)&__dst[m * 16]);
      memcpy(v50, v51, sizeof(v50));
      apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices(v1 + 34656, (uint64_t)v50, v51);
      memcpy(v49, v51, sizeof(v49));
      apple::vision::libraries::facecore::mod::aam::AamSearch::InverseTransformShape(v1, (uint64_t)v49, __dst);
      memcpy(v51, __dst, sizeof(v51));
      for (uint64_t n = 0; n != 63; ++n)
        v51[n] = vsubq_f64(v51[n], *(float64x2_t *)(v1 + 3032 + n * 16));
      float result = memcpy(v48, v51, sizeof(v48));
      uint64_t v37 = 0;
      double v38 = 0.0;
      do
      {
        double v38 = v38
            + *(double *)(v33 + v37 + 8) * *(double *)&v48[v37 + 8]
            + *(double *)(v33 + v37) * *(double *)&v48[v37];
        v37 += 16;
      }
      while (v37 != 1008);
      float v39 = v38;
      *(float *)(v1 + 14400 * v46 + 240 * (v31 + 4) + 4 * (v31 + 4) + 7789552) = v39;
      ++v31;
      v33 += 1008;
    }
    while (v31 != 26);
    uint64_t v40 = -7320;
    do
    {
      *(_DWORD *)(v43 + v40 + 7320) = 1065353216;
      v40 += 244;
    }
    while (v40);
    uint64_t v6 = v45 + 1;
    uint64_t v4 = v44 + 1;
    uint64_t v5 = v43 + 14400;
  }
  while (v44 != 3);
  return result;
}

#error "1DBAD4A7C: too big function (funcsize=0)"

#error "1DBAFC038: too big function (funcsize=0)"

void apple::vision::libraries::facecore::processing::ProcessingChain::appendElement(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = v6;
  long long v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      double v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v14);
    }
    else {
      double v15 = 0;
    }
    float v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)float v16 = a2;
    uint64_t v8 = v16 + 8;
    float v19 = (char *)a1[1];
    uint64_t v18 = (char *)a1[2];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v9;
    }
    a1[1] = v16;
    a1[2] = v8;
    a1[3] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *long long v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[2] = v8;
}

uint64_t apple::vision::libraries::facecore::processing::ProcessingChain::performProcessing(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if ((int)((unint64_t)(*(void *)(result + 16) - v2) >> 3) >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 8))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 8);
    }
    while (v5 < (int)((unint64_t)(*(void *)(v4 + 16) - v2) >> 3));
  }
  return result;
}

void *apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::KeypointTrackerManager(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F360CE48;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)(a1 + 9));
  a1[5] = a2;
  a1[4] = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1DBB20E44(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  *uint64_t v1 = v2;
  unint64_t v6 = (void *)v1[1];
  if (v6)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::~KeypointTrackerManager(apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *this)
{
  *(void *)this = &unk_1F360CE48;
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  if ((int)((unint64_t)(v3 - v2) >> 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(v2 + 8 * v4);
      if (v5)
      {
        apple::vision::libraries::facecore::processing::tracking::KeypointTracker::~KeypointTracker(v5);
        MEMORY[0x1E0196D10]();
        uint64_t v2 = *((void *)this + 6);
        uint64_t v3 = *((void *)this + 7);
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v3 - v2) >> 3));
  }
  *((void *)this + 7) = v2;
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints((apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *)((char *)this + 72));
  unint64_t v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  *(void *)this = &unk_1F360CDE8;
  long long v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::createFaceKeypointTracker()
{
}

void sub_1DBB20FCC(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10F0C40D8A5690BLL);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::trackCrop(apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *this, apple::vision::libraries::facecore::processing::tracking::KeypointTracker *a2, const image *a3)
{
  CurrentCrop = (int32x2_t *)apple::vision::libraries::facecore::processing::tracking::KeypointTracker::getCurrentCrop(a2);
  apple::vision::libraries::facecore::processing::tracking::KeypointTracker::track((int32x2_t *)a2, a3, CurrentCrop);
  uint64_t result = (uint64_t)a2 + 72;
  if (*((_DWORD *)a2 + 54))
  {
    int v7 = *((_DWORD *)a2 + 25);
    int v8 = *((_DWORD *)a2 + 18);
    if (v7 < v8 || v8 + v7 >= a3->var1 || (int v9 = *((_DWORD *)a2 + 26), v9 < v8) || v9 + v8 >= a3->var2) {
      *((_DWORD *)a2 + 54) = 0;
    }
  }
  ++*(_DWORD *)a2;
  ++*((_DWORD *)a2 + 29);
  return result;
}

apple::vision::libraries::facecore::processing::tracking::KeypointTracker *apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::deleteTrackerAtIndex(apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *this, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)this + 6);
  uint64_t result = *(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(v4 + 8 * a2);
  if (result)
  {
    apple::vision::libraries::facecore::processing::tracking::KeypointTracker::~KeypointTracker(result);
    uint64_t result = (apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)MEMORY[0x1E0196D10]();
    uint64_t v4 = *((void *)this + 6);
  }
  uint64_t v6 = v4 + 8 * v3;
  uint64_t v7 = *((void *)this + 7);
  uint64_t v8 = v7 - (v6 + 8);
  if (v7 != v6 + 8) {
    uint64_t result = (apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)memmove((void *)v6, (const void *)(v6 + 8), v7 - (v6 + 8));
  }
  *((void *)this + 7) = v6 + v8;
  return result;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::loopThroughDetectedFacesToFindAPotentialOverlap(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  if ((int)(1749801491 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3)) < 1)
  {
    char v39 = 0;
  }
  else
  {
    char v39 = 0;
    int v8 = 0;
    do
    {
      CurrentCrop = (long long *)apple::vision::libraries::facecore::processing::tracking::KeypointTracker::getCurrentCrop(*(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(*(void *)(a1 + 48) + 8 * *a3));
      long long v10 = CurrentCrop[3];
      long long v12 = *CurrentCrop;
      long long v11 = CurrentCrop[1];
      long long v43 = CurrentCrop[2];
      long long v44 = v10;
      long long v41 = v12;
      long long v42 = v11;
      apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v40, *(void *)a2 + 216 * v8);
      if (apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeSymetricFaceOverlap(v13, (double)(int)v41 + (double)(int)v42, (double)(int)v41 + (double)SDWORD1(v42), (double)(int)v41, (double)v40[7], (double)v40[8], (double)v40[0]) > 0.2)
      {
        unint64_t v14 = (unint64_t)v8 >> 6;
        if ((*(void *)(*a4 + 8 * v14) & (1 << v8)) != 0)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)&v46, (long long *)(*(void *)a2 + 216 * v8 + 216), *(long long **)(a2 + 8), *(void *)a2 + 216 * v8);
          uint64_t v16 = v15;
          for (uint64_t i = *(void *)(a2 + 8);
                i != v16;
          *(void *)(a2 + 8) = v16;
          uint64_t v18 = v8 - 63;
          if (v8 < 63) {
            uint64_t v18 = v8;
          }
          uint64_t v19 = v18 >> 6;
          if (v8 < 0) {
            unint64_t v20 = v19;
          }
          else {
            unint64_t v20 = (unint64_t)v8 >> 6;
          }
          uint64_t v21 = *a4;
          unint64_t v22 = a4[1];
          uint64_t v23 = *a4 + 8 * v20;
          uint64_t v24 = v8 & 0x3F;
          uint64_t v25 = v24 | (v20 << 6);
          uint64_t v26 = v25 - 63;
          if (v25 - 63 < 0) {
            uint64_t v26 = v24 | (v20 << 6);
          }
          uint64_t v27 = v26 >> 6;
          uint64_t v28 = v20 & 0x3FFFFFFFFFFFFFFLL;
          if (v25 < 0) {
            uint64_t v28 = v27;
          }
          uint64_t v29 = (unint64_t *)(v23 + (((unint64_t)(v24 + 1) >> 3) & 8));
          unsigned int v30 = (v24 + 1) & 0x3F;
          uint64_t v31 = v21 + 8 * (v22 >> 6);
          unsigned int v32 = v22 & 0x3F;
          uint64_t v46 = v21 + 8 * v28;
          int v47 = v8 & 0x3F;
          if (v24 == v30) {
            std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v29, v30, v31, v32, (uint64_t)&v46, (uint64_t)v45);
          }
          else {
            std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v29, v30, v31, v32, (uint64_t)&v46, (uint64_t)v45);
          }
          --v8;
          --a4[1];
        }
        else
        {
          uint64_t v33 = (void *)apple::vision::libraries::facecore::processing::tracking::KeypointTracker::getCurrentCrop(*(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(*(void *)(a1 + 48) + 8 * *a3));
          apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::generateCropWithFace((uint64_t)v33, (int *)(*(void *)a2 + 216 * v8));
          apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::updateFaceWithCrop(v33, *(void *)a2 + 216 * v8);
          uint64_t v34 = *(void *)(a1 + 48);
          uint64_t v35 = *(void *)a2 + 216 * v8;
          *(_DWORD *)(v35 + 40) = *(_DWORD *)(*(void *)(v34 + 8 * *a3) + 112);
          uint64_t v36 = *(void *)(v34 + 8 * *a3);
          int v37 = *(_DWORD *)(v36 + 116) + 1;
          *(_DWORD *)(v36 + 116) = v37;
          *(_DWORD *)(v35 + 44) = v37;
          apple::vision::libraries::facecore::FaceInternal::operator=(*(void *)(v34 + 8 * *a3) + 72, v35);
          *(void *)(*a4 + 8 * v14) |= 1 << v8;
          char v39 = 1;
        }
      }
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v40);
      apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v41);
      ++v8;
    }
    while (v8 < (int)(1749801491 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3)));
  }
  return v39 & 1;
}

void sub_1DBB2141C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)(v2 - 208));
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::loopThroughOverlapFacesToAddNewKeypointTrackes(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if ((int)v2 >= 1)
  {
    unint64_t v3 = 0;
    do
    {
      if (((*(void *)(*a2 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0) {
        apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::createFaceKeypointTracker();
      }
      ++v3;
    }
    while ((uint64_t)v3 < (int)v2);
  }
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performProcessing(apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *this, image *a2)
{
  var0 = a2[8].var0;
  uint64_t v4 = *(char **)&a2[8].var1;
  uint64_t v5 = a2 + 8;
  while (v4 != var0)
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 - 216));
  *(void *)&a2[8].unsigned int var1 = var0;
  uint64_t v7 = a2 + 6;
  int v8 = *((_DWORD *)this + 9);
  if (*((void *)this + 7) == *((void *)this + 6))
  {
    if (v8 == -1 || v8 >= 5) {
      apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performDetection((uint64_t)this, v5, (uint64_t)v7, (uint64_t)a2);
    }
  }
  else if (v8 >= a2[2].var1)
  {
    apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performRefining((uint64_t)this, (uint64_t *)v5, v7, (uint64_t)a2);
  }
  else
  {
    apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performTracking(this, a2 + 6, (apple::vision::libraries::facecore::FaceCoreContext *)a2);
  }
  long long v11 = (apple::vision::libraries::facecore::Face *)a2[8].var0;
  for (uint64_t i = *(apple::vision::libraries::facecore::Face **)&a2[8].var1;
        i != v11;
  *(void *)&a2[8].unsigned int var1 = v11;
  uint64_t v12 = *((void *)this + 6);
  if ((int)((unint64_t)(*((void *)this + 7) - v12) >> 3) >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(v12 + 8 * v13) + 72;
      if ((char *)v11 >= a2[9].var0)
      {
        long long v11 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>((uint64_t *)v5, v14);
      }
      else
      {
        apple::vision::libraries::facecore::FaceInternal::FaceInternal(v11, v14);
        long long v11 = (apple::vision::libraries::facecore::Face *)((char *)v11 + 216);
        *(void *)&a2[8].unsigned int var1 = v11;
      }
      *(void *)&a2[8].unsigned int var1 = v11;
      ++v13;
      uint64_t v12 = *((void *)this + 6);
    }
    while (v13 < (int)((unint64_t)(*((void *)this + 7) - v12) >> 3));
  }
  ++*((_DWORD *)this + 9);
}

void sub_1DBB216E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 136) = v2;
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performDetection(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 36) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 40) + 8))(*(void *)(a1 + 40), a4);
  if ((void *)(a4 + 128) != a2) {
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)a2, *(void *)(a4 + 128), *(void *)(a4 + 136), 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(a4 + 136) - *(void *)(a4 + 128)) >> 3));
  }
  if ((int)(1749801491 * ((a2[1] - *a2) >> 3)) >= 1) {
    apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::createFaceKeypointTracker();
  }
}

apple::vision::libraries::facecore::processing::tracking::KeypointTracker *apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performTracking(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this, const image *a2, apple::vision::libraries::facecore::FaceCoreContext *a3)
{
  uint64_t v3 = *((void *)this + 6);
  if ((int)((unint64_t)(*((void *)this + 7) - v3) >> 3) >= 1)
  {
    uint64_t v6 = this;
    int v7 = 0;
    do
    {
      this = (apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::trackCrop(this, *(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(v3 + 8 * v7), a2);
      if (*((_DWORD *)this + 36))
      {
        if (*((unsigned char *)a3 + 44)) {
          apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogram((const unsigned __int8 *)a2->var0, a2->var1, a2->var2, 1, *((_DWORD *)this + 7), *((_DWORD *)this + 8), *(_DWORD *)this, &__p, *((_DWORD *)this + 26), *((_DWORD *)this + 1), *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 5), *((_DWORD *)this + 6));
        }
      }
      else if (*((unsigned char *)a3 + 60))
      {
        this = apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::deleteTrackerAtIndex(v6, v7--);
      }
      ++v7;
      uint64_t v3 = *((void *)v6 + 6);
    }
    while (v7 < (int)((unint64_t)(*((void *)v6 + 7) - v3) >> 3));
  }
  return this;
}

void sub_1DBB219EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::performRefining(uint64_t a1, uint64_t *a2, const image *a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 36) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 40) + 8))(*(void *)(a1 + 40), a4);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(&v20, *a2, a2[1], 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3));
  uint64_t v9 = *a2;
  for (uint64_t i = a2[1];
        i != v9;
  a2[1] = v9;
  std::vector<BOOL>::vector(__p, 0x84BDA12F684BDA13 * ((v21 - v20) >> 3));
  int v18 = 0;
  if ((int)((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t APotentialOverlap = apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::loopThroughDetectedFacesToFindAPotentialOverlap(a1, (uint64_t)&v20, &v18, (uint64_t *)__p);
      if ((APotentialOverlap & 1) == 0)
      {
        uint64_t v12 = *(apple::vision::libraries::facecore::processing::tracking::KeypointTracker **)(*(void *)(a1 + 48)
                                                                                            + 8 * v10);
        int v13 = *(_DWORD *)v12 + 1;
        *(_DWORD *)uint64_t v12 = v13;
        if (v13 >= *(_DWORD *)(a4 + 36)
          || !*(_DWORD *)(apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::trackCrop((apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *)APotentialOverlap, v12, a3)+ 144))
        {
          apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::deleteTrackerAtIndex((apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *)a1, v10--);
        }
      }
      int v18 = ++v10;
    }
    while (v10 < (int)((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3));
  }
  apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::loopThroughOverlapFacesToAddNewKeypointTrackes(a1, __p);
  uint64_t v14 = *(void *)(a1 + 48);
  if ((int)((unint64_t)(*(void *)(a1 + 56) - v14) >> 3) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (apple::vision::libraries::facecore::Face *)a2[1];
    do
    {
      uint64_t v17 = *(void *)(v14 + 8 * v15) + 72;
      if ((unint64_t)v16 >= a2[2])
      {
        uint64_t v16 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(a2, v17);
      }
      else
      {
        apple::vision::libraries::facecore::FaceInternal::FaceInternal(v16, v17);
        uint64_t v16 = (apple::vision::libraries::facecore::Face *)((char *)v16 + 216);
        a2[1] = (uint64_t)v16;
      }
      a2[1] = (uint64_t)v16;
      ++v15;
      uint64_t v14 = *(void *)(a1 + 48);
    }
    while (v15 < (int)((unint64_t)(*(void *)(a1 + 56) - v14) >> 3));
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  __p[0] = &v20;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DBB21C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  __p = &a14;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      char *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      unint64_t *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
  if (v6 <= 0)
  {
    int v18 = *(unint64_t **)a5;
    unsigned int v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      char v7 = a2;
      if (v6 >= (unint64_t)(64 - a2)) {
        unint64_t v8 = 64 - a2;
      }
      else {
        unint64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)result);
      }
      v6 -= v8;
      unint64_t v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      uint64_t v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10)) {
        unint64_t v11 = (64 - v10);
      }
      else {
        unint64_t v11 = v8;
      }
      unint64_t v12 = *(unint64_t **)a5;
      unint64_t v13 = v9 >> (a2 - v10);
      BOOL v14 = v10 >= a2;
      int v16 = v10 - a2;
      BOOL v15 = v16 != 0 && v14;
      unint64_t v17 = v9 << v16;
      if (!v15) {
        unint64_t v17 = v13;
      }
      *unint64_t v12 = **(void **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      int v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v20 = v8 - v11;
      if (v20 >= 1)
      {
        *int v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        unsigned int v19 = v20;
      }
      ++result;
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(a5 + 8);
      int v18 = *(unint64_t **)a5;
    }
    unsigned int v21 = 64 - v19;
    uint64_t v22 = -1 << v19;
    if (v6 >= 64)
    {
      uint64_t v23 = *v18;
      do
      {
        unint64_t v24 = v6;
        unint64_t v26 = *result++;
        unint64_t v25 = v26;
        *int v18 = v23 & ~v22 | (v26 << v19);
        unint64_t v27 = v18[1];
        ++v18;
        uint64_t v23 = v27 & v22 | (v25 >> v21);
        *int v18 = v23;
        int64_t v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(void *)a5 = v18;
    }
    if (v6 >= 1)
    {
      unint64_t v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21) {
        int64_t v29 = 64 - v19;
      }
      else {
        int64_t v29 = v6;
      }
      *int v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      int v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(void *)a5 = v18;
      unsigned int v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      uint64_t v30 = v6 - v29;
      if (v30 >= 1)
      {
        *int v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        unsigned int v19 = v30;
      }
    }
  }
  *(void *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void *std::vector<apple::vision::libraries::facecore::FaceInternal>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int64_t v6 = result;
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::FaceInternal>,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DBB21FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

char *generateFeaturesForEyeCrop(apple::vision::libraries::facecore::utils::aev::AEVGImage *a1, double **a2, int *a3)
{
  apple::vision::libraries::facecore::utils::aev::AEVGImage::equalizeHistogram(a1);
  apple::vision::libraries::facecore::utils::aev::AEVGImage::performGammaCorrection(a1, 0.5);

  return apple::vision::libraries::facecore::utils::aev::AEVFeaturesGenerationUtils::generateFeaturesVector(a2, a3, a1, 0, 0, 1);
}

void computeBlinkPredictionForEye(apple::vision::libraries::facecore::utils::aev::AEVGImage *this, CGPoint *a2, int a3, int a4, float a5, apple::vision::libraries::facecore::utils::aev::AEVLinearSVMModel *a6, char *a7)
{
  int v7 = 4 * a3 + 3;
  if ((a3 & 0x20000000) == 0) {
    int v7 = 4 * a3;
  }
  v8.height = (double)(4 * a4 / 4);
  v9.width = 48.0;
  v9.height = 42.0;
  v8.width = (double)(v7 >> 2);
  apple::vision::libraries::facecore::utils::aev::AEVGImage::getImageRescaledAndRotatedAroundCenter(this, *a2, a5, v8, v9);
}

void sub_1DBB223E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::smileandblink::BlinkDetector::detectBlink(apple::vision::libraries::facecore::mod::smileandblink::BlinkDetector *this, image *a2, apple::vision::libraries::facecore::Face *a3)
{
  int var0_high = HIDWORD(a2->var0);
  int var1 = a2->var1;
  int var2 = a2->var2;
  int var0 = (int)a2[1].var0;
  float v7 = -(float)(var0 - var1);
  if (var0 >= var1) {
    float v7 = (float)(var0 - var1);
  }
  if (v7 > 0.0)
  {
    int v8 = var0_high - var2;
    if (var0_high - var2 < 0) {
      int v8 = var2 - var0_high;
    }
    atanf((float)(var0 - var1) / (float)v8);
  }
  operator new();
}

void sub_1DBB226B4(_Unwind_Exception *exception_object)
{
}

void ___ZN5apple6vision9libraries8facecore3mod13smileandblink13BlinkDetector11detectBlinkERNS2_5imageERNS2_4FaceEb_block_invoke(uint64_t a1, uint64_t a2)
{
}

void apple::vision::libraries::facecore::mod::filters::basic_smoothing(apple::vision::libraries::facecore::mod::filters *this, float *a2, const float *a3, int a4, double a5)
{
  unsigned int v6 = a3;
  float v8 = a5;
  deriche_gradient<float>((uint64_t)a2, (uint64_t)this, a3, a4, 0, 120, 1, v8);

  deriche_gradient<float>((uint64_t)this, (uint64_t)this, v6, a4, 0, 121, 1, v8);
}

void deriche_gradient<float>(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, float a8)
{
  if (a8 < 0.0 || a5 >= 3) {
    printf("deriche() : Bad arguments (sigma=%g, order=%d)", a8, a5);
  }
  if (a8 >= 0.01)
  {
    float v17 = 0.0;
    if (a8 <= 0.0) {
      float v18 = 0.0;
    }
    else {
      float v18 = 1.695 / a8;
    }
    float v19 = expf(v18);
    float v20 = expf(-v18);
    float v21 = v20 * v20;
    if (a5 == 2)
    {
      float v35 = (float)((float)((float)((float)((float)(v19 * 3.0) + -1.0) - (float)((float)(v19 * 3.0) * v19))
                          + (float)((float)(v19 * v19) * v19))
                  * -2.0)
          / (float)((float)((float)((float)(v19 * 3.0) + 1.0) + (float)((float)(v19 * 3.0) * v19))
                  + (float)((float)(v19 * v19) * v19));
      float v41 = (float)-(float)(v21 + -1.0) / (float)((float)(v18 + v18) * v20);
      float v36 = v20 * (float)-(float)(v35 * (float)((float)(v41 * v18) + 1.0));
      float v110 = 1.0;
      float v37 = v20 * (float)((float)(1.0 - (float)(v41 * v18)) * v35);
      float v38 = -(float)(v35 * v21);
      if (a7) {
        float v39 = v35;
      }
      else {
        float v39 = 0.0;
      }
      if (a7) {
        float v40 = v35 * 0.5;
      }
      else {
        float v40 = 0.0;
      }
      if (a7) {
        float v17 = v35 + (float)(v35 * 0.5);
      }
    }
    else
    {
      float v22 = 1.0;
      float v23 = 1.0 - v20;
      float v24 = (float)(v23 * v23) / (float)((float)((float)((float)(v18 + v18) * v20) + 1.0) - v21);
      float v25 = -(float)(v24 * v21);
      float v26 = (float)(v19 + -1.0) * (float)(v19 + -1.0);
      float v27 = (float)((float)((float)(v19 + (float)(v18 * v19)) + -1.0) * v24) / v26;
      float v28 = v24 + v27;
      if (a7) {
        float v29 = v24;
      }
      else {
        float v29 = 0.0;
      }
      if (!a7)
      {
        float v27 = 0.0;
        float v28 = 0.0;
      }
      float v30 = (float)(v23 * (float)-(float)(v23 * v23)) / (float)(v20 * (float)((float)(v20 + 1.0) + (float)(v20 + 1.0)));
      float v31 = v20 * v30;
      float v32 = -(float)(v30 * v20);
      float v33 = (float)(v19 * v30) / v26;
      float v34 = v33 + 0.0;
      if (!a7)
      {
        float v33 = 0.0;
        float v34 = 0.0;
      }
      if (a5 == 1) {
        float v22 = -1.0;
      }
      float v110 = v22;
      if (a5 == 1) {
        float v35 = 0.0;
      }
      else {
        float v35 = v24;
      }
      if (a5 == 1) {
        float v36 = v31;
      }
      else {
        float v36 = (float)(v18 + -1.0) * (float)(v20 * v24);
      }
      if (a5 == 1) {
        float v37 = v32;
      }
      else {
        float v37 = (float)(v18 + 1.0) * (float)(v20 * v24);
      }
      if (a5 == 1) {
        float v38 = 0.0;
      }
      else {
        float v38 = v25;
      }
      if (a5 == 1) {
        float v39 = 0.0;
      }
      else {
        float v39 = v29;
      }
      if (a5 == 1) {
        float v40 = v33;
      }
      else {
        float v40 = v27;
      }
      if (a5 == 1) {
        float v17 = v34;
      }
      else {
        float v17 = v28;
      }
    }
    float v42 = v20 + v20;
    float v109 = -(float)(v20 * v20);
    if ((int)a3 <= a4) {
      signed int v43 = a4;
    }
    else {
      signed int v43 = a3;
    }
    std::vector<double>::vector(__p, v43);
    long long v44 = __p[0];
    if (a6 == 121)
    {
      if ((int)a3 >= 2 && a4 >= 1)
      {
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t v78 = a2 + 8;
        double v79 = v42;
        double v80 = v109;
        float v81 = v110 * v40;
        uint64_t v82 = a1 + 8;
        int v83 = (double *)__p[0];
        do
        {
          int v84 = (float *)(a1 + 4 * v77 * a3);
          float v85 = *v84;
          double v86 = (float)(v17 * *v84);
          double v87 = (float)((float)(v40 * *v84) + (float)(v39 * v84[1]));
          int v88 = v83 + 2;
          *int v83 = v86;
          v83[1] = v87;
          if (a3 < 3)
          {
            double v94 = v84 + 2;
            uint64_t v93 = v78 + 4 * v77 * a3;
          }
          else
          {
            unsigned int v89 = a3 - 2;
            uint64_t v90 = v76;
            do
            {
              float v91 = *(float *)(v82 + v90);
              double v92 = (float)((float)(v36 * v85) + (float)(v35 * v91)) + v79 * v87 + v80 * v86;
              *v88++ = v92;
              v90 += 4;
              double v86 = v87;
              double v87 = v92;
              float v85 = v91;
              --v89;
            }
            while (v89);
            uint64_t v93 = v78 + v90;
            double v94 = (float *)(v82 + v90);
          }
          float v95 = *(v94 - 1);
          double v96 = (float)(v81 * v95);
          double v97 = *(v88 - 2);
          int v83 = v88 - 2;
          float v98 = *(v88 - 1) + v96;
          *(float *)(v93 - 4) = v98;
          float v99 = *(v94 - 2);
          *(float *)&double v97 = v97 + v96;
          *(_DWORD *)(v93 - 8) = LODWORD(v97);
          if (a3 >= 3)
          {
            float v100 = v88 - 3;
            float v101 = (float *)(v93 - 12);
            float v102 = v94 - 3;
            unsigned int v103 = a3 - 2;
            double v104 = (float)(v81 * v95);
            do
            {
              double v105 = (float)((float)(v38 * v95) + (float)(v37 * v99)) + v79 * v104 + v80 * v96;
              float v95 = v99;
              float v106 = *v102--;
              float v99 = v106;
              double v107 = *v100--;
              float v108 = v105 + v107;
              *v101-- = v108;
              double v96 = v104;
              double v104 = v105;
              --v103;
            }
            while (v103);
            int v83 = v100 + 1;
          }
          ++v77;
          v76 += 4 * a3;
        }
        while (v77 != a4);
      }
    }
    else if (a6 == 120 && a4 >= 2 && (int)a3 >= 1)
    {
      uint64_t v45 = 0;
      double v46 = v42;
      double v47 = v109;
      float v48 = v110 * v40;
      uint64_t v49 = 4 * a3;
      uint64_t v50 = 0;
      int v51 = (double *)__p[0];
      do
      {
        double v52 = (float *)(a1 + 4 * v50);
        float v53 = *v52;
        float v54 = v52[a3];
        double v55 = (float)(v17 * *v52);
        double v56 = (float)((float)(v40 * *v52) + (float)(v39 * v54));
        int v57 = v51 + 2;
        *int v51 = v55;
        v51[1] = v56;
        if (a4 < 3)
        {
          int v62 = (_DWORD *)(a2 + 4 * v50);
          int v63 = (float *)&v62[a3];
        }
        else
        {
          int v58 = a4 - 2;
          uint64_t v59 = v45;
          do
          {
            float v60 = v36 * v53;
            float v53 = *(float *)(a1 + 8 * a3 + v59);
            double v61 = (float)(v60 + (float)(v35 * v53)) + v46 * v56 + v47 * v55;
            *v57++ = v61;
            v59 += v49;
            double v55 = v56;
            double v56 = v61;
            --v58;
          }
          while (v58);
          int v62 = (_DWORD *)(a2 + v59);
          int v63 = (float *)(a2 + 4 * a3 + v59);
          double v52 = (float *)(a1 + v59);
          float v54 = v53;
        }
        double v64 = (float)(v48 * v54);
        double v65 = *(v57 - 2);
        int v51 = v57 - 2;
        float v66 = *(v57 - 1) + v64;
        float *v63 = v66;
        float v67 = *v52;
        *(float *)&double v65 = v65 + v64;
        *int v62 = LODWORD(v65);
        if (a4 >= 3)
        {
          int v68 = v57 - 3;
          int v69 = a4 - 2;
          uint64_t v70 = -4 * a3;
          double v71 = (float)(v48 * v54);
          do
          {
            double v72 = (float)((float)(v38 * v54) + (float)(v37 * v67)) + v46 * v71 + v47 * v64;
            float v73 = *(float *)((char *)v52 + v70);
            double v74 = *v68--;
            float v75 = v72 + v74;
            *(float *)((char *)v62 + v70) = v75;
            float v54 = v67;
            v70 -= v49;
            double v64 = v71;
            double v71 = v72;
            float v67 = v73;
            --v69;
          }
          while (v69);
          int v51 = v68 + 1;
        }
        ++v50;
        v45 += 4;
      }
      while (v50 != a3);
    }
    if (v44)
    {
      __p[1] = v44;
      operator delete(v44);
    }
  }
}

#error "1DBB22D10: too big function (funcsize=0)"

#error "1DBB4AAC4: too big function (funcsize=0)"

double apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap(apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7 = a4 + a4;
  double v8 = a7 + a7;
  double v9 = a5 + a7 - (a2 + a4);
  if (v9 >= 0.0)
  {
    double result = 0.0;
    if (v9 >= v8) {
      return result;
    }
    double v11 = a4 + a4;
    if (v7 + v9 >= v8) {
      double v11 = v8 - v9;
    }
  }
  else
  {
    double result = 0.0;
    if (v7 <= -v9) {
      return result;
    }
    if (v7 + v9 >= v8) {
      double v11 = a7 + a7;
    }
    else {
      double v11 = v7 + v9;
    }
  }
  double v12 = a6 + a7 - (a3 + a4);
  if (v12 >= 0.0)
  {
    double result = 0.0;
    if (v12 >= v8) {
      return result;
    }
    double v13 = a4 + a4;
    if (v7 + v12 >= v8) {
      double v13 = v8 - v12;
    }
  }
  else
  {
    double result = 0.0;
    if (v7 <= -v12) {
      return result;
    }
    double v13 = v7 + v12;
    if (v7 + v12 >= v8) {
      double v13 = a7 + a7;
    }
  }
  return v11 * v13 / (v7 * v7);
}

double apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeSymetricFaceOverlap(apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v13 = apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap(this, a2, a3, a4, a5, a6, a7);
  return (v13
        + apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap(v14, a5, a6, a7, a2, a3, a4))* 0.5;
}

double apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeOptimisticFaceOverlap(apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v13 = apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap(this, a2, a3, a4, a5, a6, a7);
  return fmax(v13, apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap(v14, a5, a6, a7, a2, a3, a4));
}

void apple::vision::libraries::facecore::processing::extraction::SmileAndBlinkDetailsExtraction::performProcessing(apple::vision::libraries::facecore::processing::extraction::SmileAndBlinkDetailsExtraction *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  if (*((unsigned char *)a2 + 179)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *((unsigned char *)a2 + 178) == 0;
  }
  if (!v2 || *((unsigned char *)a2 + 180) != 0)
  {
    int v4 = (image *)*((void *)a2 + 27);
    if (*((unsigned char *)a2 + 180)) {
      operator new();
    }
    if (*((unsigned char *)a2 + 178)) {
      apple::vision::libraries::facecore::mod::smileandblink::SmileDetector::detectSmile((apple::vision::libraries::facecore::FaceCoreContext *)((char *)a2 + 112), v4, 0);
    }
    if (*((unsigned char *)a2 + 179))
    {
      apple::vision::libraries::facecore::mod::smileandblink::BlinkDetector::detectBlink((apple::vision::libraries::facecore::FaceCoreContext *)((char *)a2 + 112), v4, 0);
    }
  }
}

void sub_1DBB70A88(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10C0C40FA6900CELL);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::FaceTracker::FaceTracker(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = &unk_1F360CE68;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 20;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 1;
  *(unsigned char *)(a1 + 89) = 1;
  operator new[]();
}

void sub_1DBB70B90(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F360CDE8;
  uint64_t v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::detection::FaceTracker::~FaceTracker(apple::vision::libraries::facecore::processing::detection::FaceTracker *this)
{
  *(void *)this = &unk_1F360CE68;
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 24;
      uint64_t v6 = 24 * v4;
      do
      {
        double v9 = (void **)(v5 + v6);
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v9);
        v6 -= 24;
      }
      while (v6);
    }
    MEMORY[0x1E0196CF0](v3, 0x20C80960023A9);
  }
  uint64_t v7 = *((void *)this + 9);
  if (v7)
  {
    MEMORY[0x1E0196CF0](v7, 0x1000C8077774924);
    *((void *)this + 9) = 0;
  }
  *(void *)this = &unk_1F360CDE8;
  double v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::processing::detection::FaceTracker::~FaceTracker(this);

  JUMPOUT(0x1E0196D10);
}

void *apple::vision::libraries::facecore::processing::detection::FaceTracker::getCurrentFaces@<X0>(void *this@<X0>, void *a2@<X8>)
{
  unsigned int v2 = *((_DWORD *)this + 14);
  if ((v2 & 0x80000000) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t *)(this[8] + 24 * v2);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    return std::vector<apple::vision::libraries::facecore::FaceInternal>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(a2, *v3, v3[1], 0x84BDA12F684BDA13 * ((v3[1] - *v3) >> 3));
  }
  return this;
}

void apple::vision::libraries::facecore::processing::detection::FaceTracker::performProcessing(apple::vision::libraries::facecore::processing::detection::FaceTracker *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 89) = *((_DWORD *)a2 + 2) == 6;
  *((unsigned char *)this + 44) = 0;
  apple::vision::libraries::facecore::processing::detection::FaceTracker::detectFaces(this, a2);
  apple::vision::libraries::facecore::processing::detection::FaceTracker::getCurrentFaces(this, v8);
  apple::vision::libraries::facecore::FaceCoreContext::updateDetectedFaces((uint64_t)a2, v8);
  double v9 = (void **)v8;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v4 = (int *)*((void *)a2 + 16);
  uint64_t v5 = (int *)*((void *)a2 + 17);
  unint64_t v6 = 126 - 2 * __clz(0x84BDA12F684BDA13 * (((char *)v5 - (char *)v4) >> 3));
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *,false>(v4, v5, (uint64_t)v8, v7, 1);
}

void sub_1DBB70DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::FaceTracker::detectFaces(apple::vision::libraries::facecore::processing::detection::FaceTracker *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v4 = *((_DWORD *)a2 + 30);
  int v5 = *((_DWORD *)a2 + 31);
  unint64_t v6 = (const void *)*((void *)a2 + 14);
  if (*((void *)this + 9) && *((unsigned char *)this + 88)) {
    goto LABEL_17;
  }
  float FrameDifference = apple::vision::libraries::facecore::processing::detection::FaceTracker::getFrameDifference(this, *((unsigned __int8 **)a2 + 14), v4, v5);
  int v8 = *((_DWORD *)this + 14);
  if (v8 < 1) {
    goto LABEL_17;
  }
  if (FrameDifference >= 0.01) {
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 21) >= *((_DWORD *)a2 + 12)) {
    goto LABEL_17;
  }
  uint64_t v10 = (uint64_t *)(*((void *)this + 8) + 24 * v8);
  uint64_t v9 = *v10;
  if (v10[1] != *v10)
  {
    if (*(_DWORD *)(v9 + 160)) {
      goto LABEL_17;
    }
  }
  apple::vision::libraries::facecore::processing::detection::FaceTracker::getCurrentFaces(this, &v26);
  double v12 = v26;
  double v11 = v27;
  float v32 = &v26;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (v11 == v12)
  {
LABEL_17:
    *((_DWORD *)this + 21) = 0;
    (*(void (**)(void, apple::vision::libraries::facecore::FaceCoreContext *))(**((void **)this + 4) + 8))(*((void *)this + 4), a2);
    if (&v29 != (uint64_t *)((char *)a2 + 128)) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)&v29, *((void *)a2 + 16), *((void *)a2 + 17), 0x84BDA12F684BDA13 * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3));
    }
  }
  else
  {
    ++*((_DWORD *)this + 21);
    uint64_t v13 = *((void *)this + 8);
    int v14 = *((_DWORD *)this + 14);
    BOOL v15 = (uint64_t *)(v13 + 24 * v14);
    if (&v29 != v15)
    {
      uint64_t v16 = *(void *)(v13 + 24 * v14 + 8);
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)&v29, *v15, v16, 0x84BDA12F684BDA13 * ((v16 - *v15) >> 3));
    }
    if ((int)(1749801491 * ((v30 - v29) >> 3)) >= 1)
    {
      uint64_t v17 = 1749801491 * ((v30 - v29) >> 3);
      float v18 = (int *)(v29 + 160);
      do
      {
        ++*(v18 - 29);
        if (*v18 >= 1) {
          ++*v18;
        }
        v18 += 54;
        --v17;
      }
      while (v17);
    }
  }
  float v26 = 0;
  float v27 = 0;
  unint64_t v28 = 0;
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  if ((int)(1749801491 * ((unint64_t)(v30 - v29) >> 3)) >= 1)
  {
    uint64_t v21 = 0;
    float v22 = 0;
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = v20 + v21;
      if (*(_DWORD *)(v20 + v21 + 144))
      {
        if ((unint64_t)v22 >= v28)
        {
          float v22 = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>((uint64_t *)&v26, v24);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal(v22, v24);
          float v22 = (apple::vision::libraries::facecore::Face *)((char *)v22 + 216);
        }
        float v27 = (void **)v22;
        uint64_t v20 = v29;
        uint64_t v19 = v30;
      }
      ++v23;
      v21 += 216;
    }
    while (v23 < (int)(1749801491 * ((unint64_t)(v19 - v20) >> 3)));
  }
  apple::vision::libraries::facecore::processing::detection::FaceTracker::addFaces((uint64_t)this, (uint64_t)a2, (uint64_t *)&v26);
  apple::vision::libraries::facecore::processing::detection::FaceTracker::updateSampling((uint64_t)this, (uint64_t)a2, v27 != v26);
  float v25 = (void *)*((void *)this + 9);
  if (v25 && v5 * v4 <= 3999999) {
    memcpy(v25, v6, v5 * v4);
  }
  float v32 = &v26;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  float v26 = (void **)&v29;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v26);
}

void sub_1DBB71128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::processing::detection::FaceTracker::getFrameDifference(apple::vision::libraries::facecore::processing::detection::FaceTracker *this, unsigned __int8 *a2, int a3, int a4)
{
  int v4 = a4 * a3;
  float v5 = 1.0;
  if (a4 * a3 <= 4000000)
  {
    unint64_t v6 = (unsigned __int8 *)*((void *)this + 9);
    if (!v6) {
      operator new[]();
    }
    float v7 = 0.0;
    if (v4 >= 1)
    {
      uint64_t v8 = (a4 * a3);
      do
      {
        int v10 = *a2++;
        int v9 = v10;
        int v11 = *v6++;
        int v12 = v9 - v11;
        if (v12 < 0) {
          int v12 = -v12;
        }
        float v7 = v7 + (float)((float)v12 / 255.0);
        --v8;
      }
      while (v8);
    }
    return v7 / (float)v4;
  }
  return v5;
}

void apple::vision::libraries::facecore::processing::detection::FaceTracker::addFaces(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if ((int)(1749801491 * ((a3[1] - *a3) >> 3)) >= 1)
  {
    uint64_t v6 = 1749801491 * ((a3[1] - *a3) >> 3);
    float v7 = (_DWORD *)(v5 + 160);
    do
    {
      *float v7 = 0;
      v7 += 54;
      --v6;
    }
    while (v6);
  }
  int v8 = *(_DWORD *)(a1 + 56);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    unsigned int v10 = (v8 + 1) % *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 56) = v10;
    uint64_t v11 = 24 * v10;
    uint64_t v13 = (uint64_t *)(v9 + v11 + 8);
    uint64_t v12 = *v13;
    uint64_t v14 = *(void *)(v9 + v11);
    while (v12 != v14)
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v12 - 216));
    *uint64_t v13 = v14;
    operator new[]();
  }
  *(_DWORD *)(a1 + 56) = 0;
  BOOL v15 = *(uint64_t **)(a1 + 64);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (v16 != *v15)
  {
    do
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v16 - 216));
    while (v16 != v17);
    uint64_t v5 = *a3;
  }
  v15[1] = v17;
  uint64_t v18 = a3[1];
  if ((int)(1749801491 * ((unint64_t)(v18 - v5) >> 3)) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = v5 + v19;
      if (*(_DWORD *)(v5 + v19 + 144))
      {
        int v22 = *(_DWORD *)(a1 + 52);
        *(_DWORD *)(a1 + 52) = v22 + 1;
        *(_DWORD *)(v21 + 40) = v22;
        *(_DWORD *)(v21 + 44) = 1;
        uint64_t v23 = *(void *)(a1 + 64);
        unint64_t v24 = *(void *)(v23 + 8);
        if (v24 >= *(void *)(v23 + 16))
        {
          uint64_t v25 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(*(uint64_t **)(a1 + 64), v21);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal(*(apple::vision::libraries::facecore::Face **)(v23 + 8), v21);
          uint64_t v25 = v24 + 216;
          *(void *)(v23 + 8) = v24 + 216;
        }
        *(void *)(v23 + 8) = v25;
        uint64_t v5 = *a3;
        uint64_t v18 = a3[1];
      }
      ++v20;
      v19 += 216;
    }
    while (v20 < (int)(1749801491 * ((unint64_t)(v18 - v5) >> 3)));
  }
  ++*(_DWORD *)(a1 + 40);
}

void sub_1DBB71870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::FaceTracker::updateSampling(uint64_t result, uint64_t a2, int a3)
{
  if (*(unsigned char *)(result + 89))
  {
    int v3 = *(_DWORD *)(result + 80);
    if (a3)
    {
      switch(v3)
      {
        case 7:
LABEL_9:
          *(_DWORD *)(a2 + 12) = 1036831949;
          *(void *)(a2 + 20) = 0x600000005;
          int v4 = 5;
          break;
        case 5:
LABEL_8:
          *(_DWORD *)(a2 + 12) = 1036831949;
          *(void *)(a2 + 20) = 0x600000003;
          int v4 = 3;
          break;
        case 3:
LABEL_10:
          *(_DWORD *)(a2 + 12) = 1045220557;
          *(void *)(a2 + 20) = 0x600000001;
          int v4 = 1;
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(v3)
      {
        case 1:
          goto LABEL_8;
        case 3:
          goto LABEL_9;
        case 5:
          *(_DWORD *)(a2 + 12) = 1045220557;
          *(void *)(a2 + 20) = 0x600000001;
          *(_DWORD *)(result + 80) = 1;
          if (!*(unsigned char *)(result + 88)) {
            return result;
          }
          *(_DWORD *)(a2 + 12) = 1036831949;
          int v4 = 7;
          *(_DWORD *)(a2 + 20) = 7;
          break;
        case 7:
          goto LABEL_10;
        default:
          return result;
      }
    }
    *(_DWORD *)(result + 80) = v4;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x84BDA12F684BDA13 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int v29 = *(a2 - 54);
          uint64_t v28 = (uint64_t)(a2 - 54);
          int v30 = *(_DWORD *)(v28 + 44);
          int v31 = v11[11];
          BOOL v32 = v29 > *v11;
          BOOL v6 = v30 == v31;
          BOOL v33 = v30 > v31;
          if (!v6) {
            BOOL v32 = v33;
          }
          if (v32)
          {
            std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)v11, v28);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11, v11 + 54, a2 - 54);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11, v11 + 54, v11 + 108, a2 - 54);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11, v11 + 54, v11 + 108, v11 + 162, a2 - 54);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 5183) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[54 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x6C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11, &v11[54 * (v15 >> 1)], a2 - 54);
      uint64_t v18 = 54 * v16;
      uint64_t v19 = &v11[54 * v16 - 54];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11 + 54, v19, a2 - 108);
      uint64_t v20 = v11 + 108;
      uint64_t v21 = &v11[v18 + 54];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v20, v21, a2 - 162);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v19, v17, v21);
      std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)v17);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(&v11[54 * (v15 >> 1)], v11, a2 - 54);
      if (a5) {
        goto LABEL_15;
      }
    }
    int v22 = *(a1 - 43);
    int v23 = a1[11];
    BOOL v6 = v22 == v23;
    BOOL v24 = v22 > v23;
    if (v6) {
      BOOL v24 = *(a1 - 54) > *a1;
    }
    if (!v24)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,std::__less<void,void> &>((uint64_t)a1, (unint64_t)a2);
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v25 = (int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,std::__less<void,void> &>((uint64_t)a1, (unint64_t)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
    char v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, v25);
    uint64_t v11 = v25 + 54;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v25 + 54, a2))
    {
      a4 = -v13;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if ((v27 & 1) == 0)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *,false>(a1, v25, a3, -v13, a5 & 1);
      uint64_t v11 = v25 + 54;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(v11, a2);
  }
}

  uint64_t v12 = (__n128 *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (unint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0x84BDA12F684BDA13 * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((uint64_t)&a2[-14].n128_i64[1], (uint64_t)v12))
          {
            std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)v12, (uint64_t)&a2[-14].n128_i64[1]);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12, (uint64_t)&v12[13].n128_i64[1], (uint64_t)&a2[-14].n128_i64[1], a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12, (uint64_t)&v12[13].n128_i64[1], (uint64_t)&v12[27], (uint64_t)&a2[-14].n128_i64[1], a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12, (uint64_t)&v12[13].n128_i64[1], (uint64_t)&v12[27], (uint64_t)&v12[40].n128_i64[1], (uint64_t)&a2[-14].n128_i64[1], a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 5183) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(v12, a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = (uint64_t)v12 + 216 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x6C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12, (uint64_t)v12 + 216 * (v16 >> 1), (uint64_t)&a2[-14].n128_i64[1], a3);
      uint64_t v19 = 27 * v17;
      uint64_t v20 = (uint64_t)&v12[-13] + 216 * v17 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)&v12[13].n128_i64[1], v20, (uint64_t)&a2[-27], a3);
      uint64_t v21 = (uint64_t)&v12[27];
      int v22 = (uint64_t)&v12[13].n128_i64[v19 + 1];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(v21, v22, (uint64_t)&a2[-41].n128_i64[1], a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(v20, v18, v22, a3);
      int v23 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, v18);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12 + 216 * (v16 >> 1), (uint64_t)v12, (uint64_t)&a2[-14].n128_i64[1], a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((((uint64_t (*)(unint64_t, unint64_t, __n128))*a3)(a1 - 216, a1, v23) & 1) == 0)
    {
      uint64_t v12 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&)>(a1, (unint64_t)a2, (unsigned int (**)(_OWORD *, unint64_t, __n128))a3);
      goto LABEL_18;
    }
LABEL_13:
    BOOL v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&)>(a1, (unint64_t)a2, (uint64_t (**)(unint64_t, _OWORD *, __n128))a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    char v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, v24, a3);
    uint64_t v12 = (__n128 *)(v24 + 216);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(v24 + 216, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (__n128 *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if ((v26 & 1) == 0)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (__n128 *)(v24 + 216);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v12, (int *)a2, (uint64_t (**)(int *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((int *)v12, (int *)a2, (uint64_t (**)(int *, int *))a3);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, int *a2)
{
  if ((int *)a1 != a2)
  {
    uint64_t v55 = v2;
    uint64_t v56 = v3;
    char v5 = (int *)(a1 + 216);
    if ((int *)(a1 + 216) != a2)
    {
      uint64_t v6 = 0;
      float v7 = (int *)a1;
      float v37 = a2;
      do
      {
        int v8 = v5;
        int v9 = v7[65];
        int v10 = v7[11];
        BOOL v11 = v9 == v10;
        BOOL v12 = v9 > v10;
        if (v11) {
          BOOL v12 = v7[54] > *v7;
        }
        if (v12)
        {
          apple::vision::libraries::facecore::Face::Face((uint64_t)v38, v8);
          long long v13 = *(_OWORD *)(v7 + 102);
          long long v52 = *(_OWORD *)(v7 + 98);
          long long v53 = v13;
          uint64_t v54 = *((void *)v7 + 53);
          long long v14 = *(_OWORD *)(v7 + 94);
          long long v50 = *(_OWORD *)(v7 + 90);
          long long v51 = v14;
          uint64_t v15 = v6;
          while (1)
          {
            uint64_t v16 = a1 + v15;
            long long v17 = *(_OWORD *)(a1 + v15 + 16);
            *(_OWORD *)(v16 + 216) = *(_OWORD *)(a1 + v15);
            *(_OWORD *)(v16 + 232) = v17;
            *(_OWORD *)(v16 + 248) = *(_OWORD *)(a1 + v15 + 32);
            std::vector<double>::__move_assign(a1 + v15 + 264, (__n128 *)(a1 + v15 + 48));
            *(_DWORD *)(v16 + 288) = *(_DWORD *)(v16 + 72);
            std::vector<double>::__move_assign(v16 + 296, (__n128 *)(v16 + 80));
            long long v18 = *(_OWORD *)(a1 + v15 + 120);
            *(_OWORD *)(v16 + 320) = *(_OWORD *)(v16 + 104);
            *(_OWORD *)(v16 + 336) = v18;
            *(void *)(v16 + 352) = *(void *)(v16 + 136);
            long long v19 = *(_OWORD *)(a1 + v15 + 192);
            *(_OWORD *)(v16 + 392) = *(_OWORD *)(v16 + 176);
            *(_OWORD *)(v16 + 408) = v19;
            *(void *)(v16 + 424) = *(void *)(v16 + 208);
            long long v20 = *(_OWORD *)(a1 + v15 + 160);
            *(_OWORD *)(v16 + 360) = *(_OWORD *)(v16 + 144);
            *(_OWORD *)(v16 + 376) = v20;
            if (!v15) {
              break;
            }
            int v21 = *(_DWORD *)(v16 - 172);
            BOOL v11 = HIDWORD(v39) == v21;
            BOOL v22 = SHIDWORD(v39) > v21;
            if (v11) {
              BOOL v22 = SLODWORD(v38[0]) > *(_DWORD *)(v16 - 216);
            }
            v15 -= 216;
            if (!v22)
            {
              uint64_t v23 = a1 + v15 + 216;
              goto LABEL_14;
            }
          }
          uint64_t v23 = a1;
LABEL_14:
          long long v24 = v38[1];
          *(_OWORD *)uint64_t v23 = v38[0];
          *(_OWORD *)(v23 + 16) = v24;
          *(_OWORD *)(v23 + 32) = v39;
          char v27 = *(void **)(v16 + 48);
          uint64_t v26 = v16 + 48;
          uint64_t v25 = v27;
          if (v27)
          {
            *(void *)(v23 + 56) = v25;
            operator delete(v25);
            *(void *)uint64_t v26 = 0;
            *(void *)(v26 + 8) = 0;
            *(void *)(v26 + 16) = 0;
          }
          uint64_t v28 = (void *)(v26 + 32);
          uint64_t v29 = v41;
          *(void *)uint64_t v26 = v40;
          uint64_t v30 = v42;
          *(void *)(v23 + 56) = v29;
          *(void *)(v23 + 64) = v30;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v40 = 0;
          *(_DWORD *)(v23 + 72) = v43;
          int v31 = *(void **)(v26 + 32);
          if (v31)
          {
            *(void *)(v23 + 88) = v31;
            operator delete(v31);
            *uint64_t v28 = 0;
            *(void *)(v26 + 40) = 0;
            *(void *)(v26 + 48) = 0;
          }
          uint64_t v32 = v45;
          *uint64_t v28 = v44;
          uint64_t v33 = v46;
          *(void *)(v23 + 88) = v32;
          *(void *)(v23 + 96) = v33;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          long long v34 = v48;
          *(_OWORD *)(v26 + 56) = v47;
          *(_OWORD *)(v26 + 72) = v34;
          *(void *)(v26 + 88) = v49;
          long long v35 = v53;
          *(_OWORD *)(v26 + 128) = v52;
          *(_OWORD *)(v26 + 144) = v35;
          *(void *)(v26 + 160) = v54;
          long long v36 = v51;
          *(_OWORD *)(v26 + 96) = v50;
          *(_OWORD *)(v26 + 112) = v36;
          apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v38);
          a2 = v37;
        }
        char v5 = v8 + 54;
        v6 += 216;
        float v7 = v8;
      }
      while (v8 + 54 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(int *a1, int *a2)
{
  if (a1 != a2)
  {
    uint64_t v45 = v2;
    uint64_t v46 = v3;
    char v5 = a1;
    uint64_t v6 = a1 + 54;
    if (a1 + 54 != a2)
    {
      float v7 = a1 - 54;
      do
      {
        int v8 = v6;
        int v9 = v5[65];
        int v10 = v5[11];
        BOOL v11 = v9 == v10;
        BOOL v12 = v9 > v10;
        if (v11) {
          BOOL v12 = v5[54] > *v5;
        }
        if (v12)
        {
          apple::vision::libraries::facecore::Face::Face((uint64_t)v30, v8);
          long long v13 = *(_OWORD *)(v5 + 102);
          long long v42 = *(_OWORD *)(v5 + 98);
          long long v43 = v13;
          uint64_t v44 = *((void *)v5 + 53);
          long long v14 = *(_OWORD *)(v5 + 94);
          long long v40 = *(_OWORD *)(v5 + 90);
          long long v41 = v14;
          uint64_t v15 = v7;
          do
          {
            long long v16 = *(_OWORD *)(v15 + 58);
            *((_OWORD *)v15 + 27) = *(_OWORD *)(v15 + 54);
            *((_OWORD *)v15 + 28) = v16;
            *((_OWORD *)v15 + 29) = *(_OWORD *)(v15 + 62);
            std::vector<double>::__move_assign((uint64_t)(v15 + 120), (__n128 *)(v15 + 66));
            v15[126] = v15[72];
            std::vector<double>::__move_assign((uint64_t)(v15 + 128), (__n128 *)(v15 + 74));
            long long v17 = v15 + 134;
            long long v18 = *(_OWORD *)(v15 + 102);
            *((_OWORD *)v15 + 38) = *(_OWORD *)(v15 + 98);
            *((_OWORD *)v15 + 39) = v18;
            long long v19 = *(_OWORD *)(v15 + 94);
            *((_OWORD *)v15 + 36) = *(_OWORD *)(v15 + 90);
            *((_OWORD *)v15 + 37) = v19;
            long long v20 = *((_OWORD *)v15 + 20);
            long long v21 = *((_OWORD *)v15 + 21);
            *((void *)v15 + 71) = *((void *)v15 + 44);
            *((void *)v15 + 80) = *((void *)v15 + 53);
            int v22 = v15[11];
            BOOL v23 = SHIDWORD(v31) > v22;
            if (HIDWORD(v31) == v22) {
              BOOL v23 = SLODWORD(v30[0]) > *v15;
            }
            v15 -= 54;
            _OWORD *v17 = v20;
            v17[1] = v21;
          }
          while (v23);
          long long v24 = v30[1];
          *((_OWORD *)v15 + 27) = v30[0];
          *((_OWORD *)v15 + 28) = v24;
          *((_OWORD *)v15 + 29) = v31;
          uint64_t v25 = (void *)*((void *)v15 + 60);
          if (v25)
          {
            *((void *)v15 + 61) = v25;
            operator delete(v25);
            *((void *)v15 + 60) = 0;
            *((void *)v15 + 61) = 0;
            *((void *)v15 + 62) = 0;
          }
          *((_OWORD *)v15 + 30) = v32;
          *((void *)v15 + 62) = v33;
          uint64_t v33 = 0;
          long long v32 = 0uLL;
          v15[126] = v34;
          uint64_t v26 = (void *)*((void *)v15 + 64);
          if (v26)
          {
            *((void *)v15 + 65) = v26;
            operator delete(v26);
            *((void *)v15 + 64) = 0;
            *((void *)v15 + 65) = 0;
            *((void *)v15 + 66) = 0;
          }
          *((_OWORD *)v15 + 32) = v35;
          *((void *)v15 + 66) = v36;
          uint64_t v36 = 0;
          long long v35 = 0uLL;
          long long v27 = v38;
          *(_OWORD *)(v15 + 134) = v37;
          *(_OWORD *)(v15 + 138) = v27;
          *((void *)v15 + 71) = v39;
          long long v28 = v43;
          *((_OWORD *)v15 + 38) = v42;
          *((_OWORD *)v15 + 39) = v28;
          *((void *)v15 + 80) = v44;
          long long v29 = v41;
          *((_OWORD *)v15 + 36) = v40;
          *((_OWORD *)v15 + 37) = v29;
          apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v30);
        }
        uint64_t v6 = v8 + 54;
        v7 += 54;
        char v5 = v8;
      }
      while (v8 + 54 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v6 = a2[11];
  int v7 = a1[11];
  BOOL v8 = v6 == v7;
  BOOL v9 = v6 > v7;
  if (v8) {
    BOOL v9 = *a2 > *a1;
  }
  int v10 = a3[11];
  BOOL v8 = v10 == v6;
  BOOL v11 = v10 > v6;
  if (v8) {
    BOOL v11 = *a3 > *a2;
  }
  if (v9)
  {
    if (v11)
    {
      std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)a3);
      return 1;
    }
    std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)a2);
    int v17 = a3[11];
    int v18 = a2[11];
    BOOL v8 = v17 == v18;
    BOOL v19 = v17 > v18;
    if (v8) {
      BOOL v19 = *a3 > *a2;
    }
    if (!v19) {
      return 1;
    }
    uint64_t v15 = (uint64_t)a2;
    uint64_t v16 = (uint64_t)a3;
LABEL_17:
    std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v15, v16);
    return 2;
  }
  if (v11)
  {
    std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a2, (uint64_t)a3);
    int v12 = a2[11];
    int v13 = a1[11];
    BOOL v8 = v12 == v13;
    BOOL v14 = v12 > v13;
    if (v8) {
      BOOL v14 = *a2 > *a1;
    }
    if (!v14) {
      return 1;
    }
    uint64_t v15 = (uint64_t)a1;
    uint64_t v16 = (uint64_t)a2;
    goto LABEL_17;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  apple::vision::libraries::facecore::Face::Face((uint64_t)v48, (int *)a1);
  long long v4 = *(_OWORD *)(a1 + 192);
  long long v60 = *(_OWORD *)(a1 + 176);
  long long v61 = v4;
  uint64_t v62 = *(void *)(a1 + 208);
  long long v5 = *(_OWORD *)(a1 + 144);
  long long v59 = *(_OWORD *)(a1 + 160);
  long long v58 = v5;
  int v6 = *(_DWORD *)(a2 - 172);
  BOOL v7 = HIDWORD(v49) == v6;
  BOOL v8 = SHIDWORD(v49) > v6;
  if (v7) {
    BOOL v8 = SLODWORD(v48[0]) > *(_DWORD *)(a2 - 216);
  }
  if (v8)
  {
    BOOL v9 = (_DWORD *)a1;
    do
    {
      int v10 = v9[54];
      v9 += 54;
      int v11 = v9[11];
      BOOL v12 = SLODWORD(v48[0]) > v10;
      BOOL v7 = HIDWORD(v49) == v11;
      BOOL v13 = SHIDWORD(v49) > v11;
      if (!v7) {
        BOOL v12 = v13;
      }
    }
    while (!v12);
  }
  else
  {
    BOOL v14 = (_DWORD *)(a1 + 216);
    do
    {
      BOOL v9 = v14;
      if ((unint64_t)v14 >= a2) {
        break;
      }
      int v15 = v14[11];
      BOOL v16 = SLODWORD(v48[0]) > *v9;
      BOOL v7 = HIDWORD(v49) == v15;
      BOOL v17 = SHIDWORD(v49) > v15;
      if (!v7) {
        BOOL v16 = v17;
      }
      BOOL v14 = v9 + 54;
    }
    while (!v16);
  }
  if ((unint64_t)v9 < a2)
  {
    do
    {
      int v18 = *(_DWORD *)(a2 - 216);
      a2 -= 216;
      int v19 = *(_DWORD *)(a2 + 44);
      BOOL v20 = SLODWORD(v48[0]) > v18;
      BOOL v7 = HIDWORD(v49) == v19;
      BOOL v21 = SHIDWORD(v49) > v19;
      if (!v7) {
        BOOL v20 = v21;
      }
    }
    while (v20);
  }
  while ((unint64_t)v9 < a2)
  {
    std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)v9, a2);
    do
    {
      int v22 = v9[54];
      v9 += 54;
      int v23 = v9[11];
      BOOL v24 = SLODWORD(v48[0]) > v22;
      BOOL v7 = HIDWORD(v49) == v23;
      BOOL v25 = SHIDWORD(v49) > v23;
      if (!v7) {
        BOOL v24 = v25;
      }
    }
    while (!v24);
    do
    {
      int v26 = *(_DWORD *)(a2 - 216);
      a2 -= 216;
      int v27 = *(_DWORD *)(a2 + 44);
      BOOL v28 = SLODWORD(v48[0]) > v26;
      BOOL v7 = HIDWORD(v49) == v27;
      BOOL v29 = SHIDWORD(v49) > v27;
      if (!v7) {
        BOOL v28 = v29;
      }
    }
    while (v28);
  }
  uint64_t v30 = (long long *)(v9 - 54);
  if (v9 - 54 != (_DWORD *)a1)
  {
    long long v31 = *v30;
    long long v32 = *(_OWORD *)(v9 - 46);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 - 50);
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)a1 = v31;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v9 - 42));
    *(_DWORD *)(a1 + 72) = *(v9 - 36);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v9 - 34));
    long long v33 = *((_OWORD *)v9 - 7);
    long long v34 = *((_OWORD *)v9 - 6);
    *(void *)(a1 + 136) = *((void *)v9 - 10);
    *(_OWORD *)(a1 + 120) = v34;
    *(_OWORD *)(a1 + 104) = v33;
    long long v35 = *(_OWORD *)(v9 - 10);
    long long v36 = *(_OWORD *)(v9 - 6);
    long long v37 = *(_OWORD *)(v9 - 14);
    *(void *)(a1 + 208) = *((void *)v9 - 1);
    *(_OWORD *)(a1 + 176) = v35;
    *(_OWORD *)(a1 + 192) = v36;
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 - 18);
  }
  long long v38 = v48[0];
  long long v39 = v49;
  *(_OWORD *)(v9 - 50) = v48[1];
  *(_OWORD *)(v9 - 46) = v39;
  long long *v30 = v38;
  long long v40 = (void *)*((void *)v9 - 21);
  if (v40)
  {
    *((void *)v9 - 20) = v40;
    operator delete(v40);
    *((void *)v9 - 21) = 0;
    *((void *)v9 - 20) = 0;
    *((void *)v9 - 19) = 0;
  }
  *(_OWORD *)(v9 - 42) = v50;
  *((void *)v9 - 19) = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  long long v41 = (void *)*((void *)v9 - 17);
  *(v9 - 36) = v52;
  if (v41)
  {
    *((void *)v9 - 16) = v41;
    operator delete(v41);
    *((void *)v9 - 17) = 0;
    *((void *)v9 - 16) = 0;
    *((void *)v9 - 15) = 0;
  }
  *(_OWORD *)(v9 - 34) = v53;
  *((void *)v9 - 15) = v54;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  long long v42 = v55;
  long long v43 = v56;
  *((void *)v9 - 10) = v57;
  *((_OWORD *)v9 - 7) = v42;
  *((_OWORD *)v9 - 6) = v43;
  long long v45 = v60;
  long long v44 = v61;
  uint64_t v46 = v62;
  *(_OWORD *)(v9 - 14) = v59;
  *((void *)v9 - 1) = v46;
  *(_OWORD *)(v9 - 6) = v44;
  *(_OWORD *)(v9 - 10) = v45;
  *(_OWORD *)(v9 - 18) = v58;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v48);
  return v9;
}

void sub_1DBB72684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  apple::vision::libraries::facecore::Face::Face((uint64_t)v48, (int *)a1);
  uint64_t v4 = 0;
  long long v5 = *(_OWORD *)(a1 + 192);
  long long v60 = *(_OWORD *)(a1 + 176);
  long long v61 = v5;
  uint64_t v62 = *(void *)(a1 + 208);
  long long v6 = *(_OWORD *)(a1 + 144);
  long long v59 = *(_OWORD *)(a1 + 160);
  long long v58 = v6;
  do
  {
    int v7 = *(_DWORD *)(a1 + v4 + 260);
    BOOL v8 = *(_DWORD *)(a1 + v4 + 216) > SLODWORD(v48[0]);
    BOOL v9 = v7 == HIDWORD(v49);
    BOOL v10 = v7 > SHIDWORD(v49);
    if (!v9) {
      BOOL v8 = v10;
    }
    v4 += 216;
  }
  while (v8);
  unint64_t v11 = a1 + v4;
  if (v4 == 216)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      int v16 = *(_DWORD *)(a2 - 216);
      a2 -= 216;
      int v17 = *(_DWORD *)(a2 + 44);
      BOOL v18 = v16 > SLODWORD(v48[0]);
      BOOL v9 = v17 == HIDWORD(v49);
      BOOL v19 = v17 > SHIDWORD(v49);
      if (!v9) {
        BOOL v18 = v19;
      }
    }
    while (!v18);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(a2 - 216);
      a2 -= 216;
      int v13 = *(_DWORD *)(a2 + 44);
      BOOL v14 = v12 > SLODWORD(v48[0]);
      BOOL v9 = v13 == HIDWORD(v49);
      BOOL v15 = v13 > SHIDWORD(v49);
      if (!v9) {
        BOOL v14 = v15;
      }
    }
    while (!v14);
  }
  unint64_t v20 = v11;
  if (v11 < a2)
  {
    unint64_t v21 = a2;
    do
    {
      std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v20, v21);
      do
      {
        int v22 = *(_DWORD *)(v20 + 216);
        v20 += 216;
        int v23 = *(_DWORD *)(v20 + 44);
        BOOL v24 = v22 > SLODWORD(v48[0]);
        BOOL v9 = v23 == HIDWORD(v49);
        BOOL v25 = v23 > SHIDWORD(v49);
        if (!v9) {
          BOOL v24 = v25;
        }
      }
      while (v24);
      do
      {
        int v26 = *(_DWORD *)(v21 - 216);
        v21 -= 216;
        int v27 = *(_DWORD *)(v21 + 44);
        BOOL v28 = v26 > SLODWORD(v48[0]);
        BOOL v9 = v27 == HIDWORD(v49);
        BOOL v29 = v27 > SHIDWORD(v49);
        if (!v9) {
          BOOL v28 = v29;
        }
      }
      while (!v28);
    }
    while (v20 < v21);
  }
  uint64_t v30 = (long long *)(v20 - 216);
  if (v20 - 216 != a1)
  {
    long long v31 = *v30;
    long long v32 = *(_OWORD *)(v20 - 184);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v20 - 200);
    *(_OWORD *)(a1 + 32) = v32;
    *(_OWORD *)a1 = v31;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v20 - 168));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v20 - 144);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v20 - 136));
    long long v33 = *(_OWORD *)(v20 - 112);
    long long v34 = *(_OWORD *)(v20 - 96);
    *(void *)(a1 + 136) = *(void *)(v20 - 80);
    *(_OWORD *)(a1 + 120) = v34;
    *(_OWORD *)(a1 + 104) = v33;
    long long v35 = *(_OWORD *)(v20 - 40);
    long long v36 = *(_OWORD *)(v20 - 24);
    long long v37 = *(_OWORD *)(v20 - 56);
    *(void *)(a1 + 208) = *(void *)(v20 - 8);
    *(_OWORD *)(a1 + 176) = v35;
    *(_OWORD *)(a1 + 192) = v36;
    *(_OWORD *)(a1 + 160) = v37;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v20 - 72);
  }
  long long v38 = v48[0];
  long long v39 = v49;
  *(_OWORD *)(v20 - 200) = v48[1];
  *(_OWORD *)(v20 - 184) = v39;
  long long *v30 = v38;
  long long v40 = *(void **)(v20 - 168);
  if (v40)
  {
    *(void *)(v20 - 160) = v40;
    operator delete(v40);
    *(void *)(v20 - 168) = 0;
    *(void *)(v20 - 160) = 0;
    *(void *)(v20 - 152) = 0;
  }
  *(_OWORD *)(v20 - 168) = v50;
  *(void *)(v20 - 152) = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  long long v41 = *(void **)(v20 - 136);
  *(_DWORD *)(v20 - 144) = v52;
  if (v41)
  {
    *(void *)(v20 - 128) = v41;
    operator delete(v41);
    *(void *)(v20 - 136) = 0;
    *(void *)(v20 - 128) = 0;
    *(void *)(v20 - 120) = 0;
  }
  *(_OWORD *)(v20 - 136) = v53;
  *(void *)(v20 - 120) = v54;
  long long v53 = 0uLL;
  uint64_t v54 = 0;
  long long v42 = v55;
  long long v43 = v56;
  *(void *)(v20 - 80) = v57;
  *(_OWORD *)(v20 - 112) = v42;
  *(_OWORD *)(v20 - 96) = v43;
  long long v45 = v60;
  long long v44 = v61;
  uint64_t v46 = v62;
  *(_OWORD *)(v20 - 56) = v59;
  *(void *)(v20 - 8) = v46;
  *(_OWORD *)(v20 - 24) = v44;
  *(_OWORD *)(v20 - 40) = v45;
  *(_OWORD *)(v20 - 72) = v58;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v48);
  return v20 - 216;
}

void sub_1DBB72960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(_DWORD *a1, int *a2)
{
  uint64_t v2 = a2;
  BOOL v4 = 1;
  switch(0x84BDA12F684BDA13 * (((char *)a2 - (char *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      int v5 = *(a2 - 43);
      int v6 = a1[11];
      BOOL v7 = *(a2 - 54) > *a1;
      BOOL v8 = v5 == v6;
      BOOL v9 = v5 > v6;
      if (!v8) {
        BOOL v7 = v9;
      }
      if (v7) {
        std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)(a2 - 54));
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a1 + 54, a2 - 54);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a1 + 54, a1 + 108, a2 - 54);
      return v4;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a1 + 54, a1 + 108, a1 + 162, a2 - 54);
      return v4;
    default:
      BOOL v10 = a1 + 108;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a1 + 54, a1 + 108);
      unint64_t v11 = a1 + 162;
      if (a1 + 162 == v2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      long long v42 = v2;
      break;
  }
  while (1)
  {
    int v14 = v11[11];
    int v15 = v10[11];
    BOOL v8 = v14 == v15;
    BOOL v16 = v14 > v15;
    if (v8) {
      BOOL v16 = *v11 > *v10;
    }
    if (!v16) {
      goto LABEL_24;
    }
    apple::vision::libraries::facecore::Face::Face((uint64_t)v43, v11);
    long long v17 = *((_OWORD *)v11 + 12);
    long long v57 = *((_OWORD *)v11 + 11);
    long long v58 = v17;
    uint64_t v59 = *((void *)v11 + 26);
    long long v18 = *((_OWORD *)v11 + 10);
    long long v55 = *((_OWORD *)v11 + 9);
    long long v56 = v18;
    uint64_t v19 = v12;
    while (1)
    {
      unint64_t v20 = (char *)a1 + v19;
      unint64_t v21 = (_OWORD *)((char *)a1 + v19 + 648);
      long long v22 = *(_OWORD *)((char *)a1 + v19 + 448);
      *unint64_t v21 = *(_OWORD *)((char *)a1 + v19 + 432);
      v21[1] = v22;
      v21[2] = *(_OWORD *)((char *)a1 + v19 + 464);
      int v23 = (__n128 *)((char *)a1 + v19 + 480);
      std::vector<double>::__move_assign((uint64_t)a1 + v19 + 696, v23);
      *((_DWORD *)v20 + 180) = *((_DWORD *)v20 + 126);
      BOOL v24 = (void **)((char *)a1 + v19 + 512);
      std::vector<double>::__move_assign((uint64_t)(v20 + 728), (__n128 *)v20 + 32);
      long long v25 = *(_OWORD *)((char *)a1 + v19 + 552);
      *((_OWORD *)v20 + 47) = *(_OWORD *)(v20 + 536);
      *((_OWORD *)v20 + 48) = v25;
      *((void *)v20 + 98) = *((void *)v20 + 71);
      long long v26 = *(_OWORD *)((char *)a1 + v19 + 624);
      *(_OWORD *)(v20 + 824) = *((_OWORD *)v20 + 38);
      *(_OWORD *)(v20 + 840) = v26;
      *((void *)v20 + 107) = *((void *)v20 + 80);
      long long v27 = *(_OWORD *)((char *)a1 + v19 + 592);
      *(_OWORD *)(v20 + 792) = *((_OWORD *)v20 + 36);
      *(_OWORD *)(v20 + 808) = v27;
      if (v19 == -432) {
        break;
      }
      int v28 = *((_DWORD *)v20 + 65);
      BOOL v8 = HIDWORD(v44) == v28;
      BOOL v29 = SHIDWORD(v44) > v28;
      if (v8) {
        BOOL v29 = SLODWORD(v43[0]) > *((_DWORD *)v20 + 54);
      }
      v19 -= 216;
      if (!v29)
      {
        uint64_t v30 = (uint64_t)a1 + v19 + 648;
        goto LABEL_18;
      }
    }
    uint64_t v30 = (uint64_t)a1;
LABEL_18:
    long long v31 = v43[1];
    *(_OWORD *)uint64_t v30 = v43[0];
    *(_OWORD *)(v30 + 16) = v31;
    *(_OWORD *)(v30 + 32) = v44;
    long long v32 = (void *)*((void *)v20 + 60);
    if (v32)
    {
      *(void *)(v30 + 56) = v32;
      operator delete(v32);
      v23->n128_u64[0] = 0;
      v23->n128_u64[1] = 0;
      v23[1].n128_u64[0] = 0;
    }
    uint64_t v33 = v46;
    v23->n128_u64[0] = v45;
    uint64_t v34 = v47;
    *(void *)(v30 + 56) = v33;
    *(void *)(v30 + 64) = v34;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v45 = 0;
    *(_DWORD *)(v30 + 72) = v48;
    long long v35 = *v24;
    if (*v24)
    {
      *(void *)(v30 + 88) = v35;
      operator delete(v35);
      *BOOL v24 = 0;
      *((void *)v20 + 65) = 0;
      *((void *)v20 + 66) = 0;
    }
    uint64_t v36 = v50;
    *BOOL v24 = v49;
    uint64_t v37 = v51;
    *(void *)(v30 + 88) = v36;
    *(void *)(v30 + 96) = v37;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    long long v49 = 0;
    long long v38 = v53;
    *(_OWORD *)(v20 + 536) = v52;
    *(_OWORD *)(v20 + 552) = v38;
    *((void *)v20 + 71) = v54;
    long long v39 = v58;
    *((_OWORD *)v20 + 38) = v57;
    *((_OWORD *)v20 + 39) = v39;
    *((void *)v20 + 80) = v59;
    long long v40 = v56;
    ++v13;
    *((_OWORD *)v20 + 36) = v55;
    *((_OWORD *)v20 + 37) = v40;
    if (v13 == 8) {
      break;
    }
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v43);
    uint64_t v2 = v42;
LABEL_24:
    BOOL v10 = v11;
    v12 += 216;
    v11 += 54;
    if (v11 == v2) {
      return 1;
    }
  }
  BOOL v4 = v11 + 54 == v42;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v43);
  return v4;
}

__n128 std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(uint64_t a1, uint64_t a2)
{
  apple::vision::libraries::facecore::Face::Face((uint64_t)v20, (int *)a1);
  long long v4 = *(_OWORD *)(a1 + 192);
  long long v31 = *(_OWORD *)(a1 + 176);
  long long v32 = v4;
  uint64_t v33 = *(void *)(a1 + 208);
  long long v5 = *(_OWORD *)(a1 + 144);
  long long v30 = *(_OWORD *)(a1 + 160);
  long long v29 = v5;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  std::vector<double>::__move_assign(a1 + 48, (__n128 *)(a2 + 48));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  std::vector<double>::__move_assign(a1 + 80, (__n128 *)(a2 + 80));
  long long v8 = *(_OWORD *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  long long v11 = *(_OWORD *)(a2 + 176);
  long long v10 = *(_OWORD *)(a2 + 192);
  long long v12 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  long long v13 = v20[1];
  *(_OWORD *)a2 = v20[0];
  *(_OWORD *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 32) = v20[2];
  int v14 = *(void **)(a2 + 48);
  if (v14)
  {
    *(void *)(a2 + 56) = v14;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 48) = v21;
  *(void *)(a2 + 64) = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  *(_DWORD *)(a2 + 72) = v23;
  int v15 = *(void **)(a2 + 80);
  if (v15)
  {
    *(void *)(a2 + 88) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(a2 + 80) = v24;
  *(void *)(a2 + 96) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  long long v16 = v27;
  *(_OWORD *)(a2 + 104) = v26;
  *(_OWORD *)(a2 + 120) = v16;
  *(void *)(a2 + 136) = v28;
  long long v17 = v32;
  *(_OWORD *)(a2 + 176) = v31;
  *(_OWORD *)(a2 + 192) = v17;
  *(void *)(a2 + 208) = v33;
  long long v18 = v30;
  *(_OWORD *)(a2 + 144) = v29;
  *(_OWORD *)(a2 + 160) = v18;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v20);
  return result;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a2, a3);
  int v9 = a4[11];
  int v10 = a3[11];
  BOOL v11 = v9 == v10;
  BOOL v12 = v9 > v10;
  if (v11) {
    BOOL v12 = *a4 > *a3;
  }
  if (v12)
  {
    *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a3, (uint64_t)a4).n128_u64[0];
    int v13 = a3[11];
    int v14 = a2[11];
    BOOL v11 = v13 == v14;
    BOOL v15 = v13 > v14;
    if (v11) {
      BOOL v15 = *a3 > *a2;
    }
    if (v15)
    {
      *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a2, (uint64_t)a3).n128_u64[0];
      int v16 = a2[11];
      int v17 = a1[11];
      BOOL v11 = v16 == v17;
      BOOL v18 = v16 > v17;
      if (v11) {
        BOOL v18 = *a2 > *a1;
      }
      if (v18)
      {
        *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)a2).n128_u64[0];
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a2, a3, a4);
  int v11 = a5[11];
  int v12 = a4[11];
  BOOL v13 = v11 == v12;
  BOOL v14 = v11 > v12;
  if (v13) {
    BOOL v14 = *a5 > *a4;
  }
  if (v14)
  {
    *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a4, (uint64_t)a5).n128_u64[0];
    int v15 = a4[11];
    int v16 = a3[11];
    BOOL v13 = v15 == v16;
    BOOL v17 = v15 > v16;
    if (v13) {
      BOOL v17 = *a4 > *a3;
    }
    if (v17)
    {
      *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a3, (uint64_t)a4).n128_u64[0];
      int v18 = a3[11];
      int v19 = a2[11];
      BOOL v13 = v18 == v19;
      BOOL v20 = v18 > v19;
      if (v13) {
        BOOL v20 = *a3 > *a2;
      }
      if (v20)
      {
        *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a2, (uint64_t)a3).n128_u64[0];
        int v21 = a2[11];
        int v22 = a1[11];
        BOOL v13 = v21 == v22;
        BOOL v23 = v21 > v22;
        if (v13) {
          BOOL v23 = *a2 > *a1;
        }
        if (v23)
        {
          *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)a1, (uint64_t)a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 216;
    if ((char *)a2 - (char *)a1 >= 217)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[54 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)a1, a4, v9, v12);
        v12 -= 54;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((int *)v6 != a3)
    {
      BOOL v14 = (int *)v6;
      do
      {
        int v15 = v14[11];
        int v16 = a1[11];
        BOOL v17 = v15 == v16;
        BOOL v18 = v15 > v16;
        if (v17) {
          BOOL v18 = *v14 > *a1;
        }
        if (v18)
        {
          std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>((uint64_t)v14, (uint64_t)a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 54;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 217)
    {
      unint64_t v19 = v8 / 0xD8uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)a1, v6, a4, v19);
        v6 -= 216;
      }
      while (v19-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v67 = v4;
    uint64_t v68 = v5;
    long long v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0x84BDA12F684BDA13 * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x97B425ED097B426 * (((uint64_t)a4 - a1) >> 3)) | 1;
      int v12 = (long long *)(a1 + 216 * v11);
      if (0x97B425ED097B426 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        int v17 = *(_DWORD *)v12;
      }
      else
      {
        int v13 = *((_DWORD *)v12 + 11);
        int v14 = *((_DWORD *)v12 + 65);
        BOOL v16 = v13 == v14;
        BOOL v15 = v13 > v14;
        if (v16) {
          BOOL v15 = *(_DWORD *)v12 > *((_DWORD *)v12 + 54);
        }
        BOOL v16 = !v15;
        if (v15) {
          int v17 = *((_DWORD *)v12 + 54);
        }
        else {
          int v17 = *(_DWORD *)v12;
        }
        if (!v16)
        {
          int v12 = (long long *)((char *)v12 + 216);
          uint64_t v11 = 0x97B425ED097B426 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      int v18 = *((_DWORD *)v12 + 11);
      int v19 = a4[11];
      BOOL v20 = v17 > *a4;
      BOOL v16 = v18 == v19;
      BOOL v21 = v18 > v19;
      if (!v16) {
        BOOL v20 = v21;
      }
      if (!v20)
      {
        apple::vision::libraries::facecore::Face::Face((uint64_t)v52, a4);
        long long v22 = *((_OWORD *)v7 + 12);
        long long v64 = *((_OWORD *)v7 + 11);
        long long v65 = v22;
        uint64_t v66 = *((void *)v7 + 26);
        long long v23 = *((_OWORD *)v7 + 10);
        long long v62 = *((_OWORD *)v7 + 9);
        long long v63 = v23;
        do
        {
          long long v24 = v12;
          long long v25 = *v12;
          long long v26 = v12[2];
          *((_OWORD *)v7 + 1) = v12[1];
          *((_OWORD *)v7 + 2) = v26;
          *(_OWORD *)long long v7 = v25;
          long long v27 = v12 + 3;
          std::vector<double>::__move_assign((uint64_t)(v7 + 12), (__n128 *)v12 + 3);
          v7[18] = *((_DWORD *)v12 + 18);
          uint64_t v28 = v12 + 5;
          std::vector<double>::__move_assign((uint64_t)(v7 + 20), (__n128 *)v12 + 5);
          long long v29 = *(long long *)((char *)v12 + 104);
          long long v30 = *(long long *)((char *)v12 + 120);
          *((void *)v7 + 17) = *((void *)v12 + 17);
          *(_OWORD *)(v7 + 30) = v30;
          *(_OWORD *)(v7 + 26) = v29;
          long long v32 = v12[11];
          long long v31 = v12[12];
          long long v33 = v12[10];
          *((void *)v7 + 26) = *((void *)v12 + 26);
          *((_OWORD *)v7 + 11) = v32;
          *((_OWORD *)v7 + 12) = v31;
          *((_OWORD *)v7 + 10) = v33;
          *((_OWORD *)v7 + 9) = v12[9];
          if (v9 < v11) {
            break;
          }
          int v12 = (long long *)(a1 + 216 * ((2 * v11) | 1));
          if (2 * v11 + 2 >= a3)
          {
            int v38 = *(_DWORD *)v12;
            uint64_t v11 = (2 * v11) | 1;
          }
          else
          {
            int v34 = *((_DWORD *)v12 + 11);
            int v35 = *((_DWORD *)v12 + 65);
            BOOL v16 = v34 == v35;
            BOOL v36 = v34 > v35;
            if (v16) {
              BOOL v36 = *(_DWORD *)v12 > *((_DWORD *)v12 + 54);
            }
            BOOL v37 = !v36;
            int v38 = v36 ? *((_DWORD *)v12 + 54) : *(_DWORD *)v12;
            if (v37)
            {
              uint64_t v11 = (2 * v11) | 1;
            }
            else
            {
              int v12 = (long long *)((char *)v12 + 216);
              uint64_t v11 = 2 * v11 + 2;
            }
          }
          int v39 = *((_DWORD *)v12 + 11);
          BOOL v40 = v38 > SLODWORD(v52[0]);
          BOOL v16 = v39 == HIDWORD(v53);
          BOOL v41 = v39 > SHIDWORD(v53);
          if (v16) {
            BOOL v41 = v40;
          }
          long long v7 = (int *)v24;
        }
        while (!v41);
        long long v42 = v52[0];
        long long v43 = v53;
        v24[1] = v52[1];
        v24[2] = v43;
        *long long v24 = v42;
        long long v44 = (void *)*((void *)v24 + 6);
        if (v44)
        {
          *((void *)v24 + 7) = v44;
          operator delete(v44);
          void *v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
        }
        v24[3] = v54;
        *((void *)v24 + 8) = v55;
        long long v54 = 0uLL;
        uint64_t v55 = 0;
        *((_DWORD *)v24 + 18) = v56;
        unint64_t v45 = (void *)*((void *)v24 + 10);
        if (v45)
        {
          *((void *)v24 + 11) = v45;
          operator delete(v45);
          *uint64_t v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
        }
        v24[5] = v57;
        *((void *)v24 + 12) = v58;
        long long v57 = 0uLL;
        uint64_t v58 = 0;
        uint64_t v46 = v61;
        long long v47 = v60;
        *(long long *)((char *)v24 + 104) = v59;
        *(long long *)((char *)v24 + 120) = v47;
        *((void *)v24 + 17) = v46;
        long long v49 = v64;
        long long v48 = v65;
        long long v50 = v63;
        *((void *)v24 + 26) = v66;
        v24[11] = v49;
        v24[12] = v48;
        v24[10] = v50;
        _OWORD v24[9] = v62;
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v52);
      }
    }
  }
  return result;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    apple::vision::libraries::facecore::Face::Face((uint64_t)&v37, (int *)a1);
    long long v8 = *(_OWORD *)(a1 + 192);
    long long v50 = *(_OWORD *)(a1 + 176);
    long long v51 = v8;
    uint64_t v52 = *(void *)(a1 + 208);
    long long v9 = *(_OWORD *)(a1 + 160);
    long long v48 = *(_OWORD *)(a1 + 144);
    long long v49 = v9;
    uint64_t v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, a3, a4);
    uint64_t v11 = v10;
    int v12 = (long long *)(a2 - 216);
    int v13 = (void *)(v10 + 48);
    if (v10 == a2 - 216)
    {
      long long v28 = v37;
      long long v29 = v39;
      *(_OWORD *)(v10 + 16) = v38;
      *(_OWORD *)(v10 + 32) = v29;
      *(_OWORD *)uint64_t v10 = v28;
      long long v30 = *(void **)(v10 + 48);
      if (v30)
      {
        *(void *)(v11 + 56) = v30;
        operator delete(v30);
        *int v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
      }
      long long v31 = *(void **)(v11 + 80);
      *(_OWORD *)(v11 + 48) = v40;
      *(void *)(v11 + 64) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(_DWORD *)(v11 + 72) = v42;
      if (v31)
      {
        *(void *)(v11 + 88) = v31;
        operator delete(v31);
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 96) = 0;
      }
      *(_OWORD *)(v11 + 80) = v43;
      *(void *)(v11 + 96) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      uint64_t v32 = v47;
      long long v33 = v46;
      *(_OWORD *)(v11 + 104) = v45;
      *(_OWORD *)(v11 + 120) = v33;
      *(void *)(v11 + 136) = v32;
      long long v35 = v50;
      long long v34 = v51;
      long long v36 = v49;
      *(void *)(v11 + 208) = v52;
      *(_OWORD *)(v11 + 176) = v35;
      *(_OWORD *)(v11 + 192) = v34;
      *(_OWORD *)(v11 + 160) = v36;
      *(_OWORD *)(v11 + 144) = v48;
    }
    else
    {
      long long v14 = *v12;
      long long v15 = *(_OWORD *)(a2 - 184);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 - 200);
      *(_OWORD *)(v10 + 32) = v15;
      *(_OWORD *)uint64_t v10 = v14;
      std::vector<double>::__move_assign(v10 + 48, (__n128 *)(a2 - 168));
      *(_DWORD *)(v11 + 72) = *(_DWORD *)(a2 - 144);
      std::vector<double>::__move_assign(v11 + 80, (__n128 *)(a2 - 136));
      long long v16 = *(_OWORD *)(a2 - 112);
      long long v17 = *(_OWORD *)(a2 - 96);
      *(void *)(v11 + 136) = *(void *)(a2 - 80);
      *(_OWORD *)(v11 + 120) = v17;
      *(_OWORD *)(v11 + 104) = v16;
      long long v18 = *(_OWORD *)(a2 - 40);
      long long v19 = *(_OWORD *)(a2 - 24);
      long long v20 = *(_OWORD *)(a2 - 56);
      *(void *)(v11 + 208) = *(void *)(a2 - 8);
      *(_OWORD *)(v11 + 176) = v18;
      *(_OWORD *)(v11 + 192) = v19;
      *(_OWORD *)(v11 + 160) = v20;
      *(_OWORD *)(v11 + 144) = *(_OWORD *)(a2 - 72);
      uint64_t v21 = v11 + 216;
      long long v22 = v38;
      *int v12 = v37;
      *(_OWORD *)(a2 - 200) = v22;
      *(_OWORD *)(a2 - 184) = v39;
      long long v23 = *(void **)(a2 - 168);
      if (v23)
      {
        *(void *)(a2 - 160) = v23;
        operator delete(v23);
        *(void *)(a2 - 168) = 0;
        *(void *)(a2 - 160) = 0;
        *(void *)(a2 - 152) = 0;
      }
      *(_OWORD *)(a2 - 168) = v40;
      *(void *)(a2 - 152) = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      *(_DWORD *)(a2 - 144) = v42;
      long long v24 = *(void **)(a2 - 136);
      if (v24)
      {
        *(void *)(a2 - 128) = v24;
        operator delete(v24);
        *(void *)(a2 - 136) = 0;
        *(void *)(a2 - 128) = 0;
        *(void *)(a2 - 120) = 0;
      }
      *(_OWORD *)(a2 - 136) = v43;
      *(void *)(a2 - 120) = v44;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v25 = v46;
      *(_OWORD *)(a2 - 112) = v45;
      *(_OWORD *)(a2 - 96) = v25;
      *(void *)(a2 - 80) = v47;
      long long v26 = v51;
      *(_OWORD *)(a2 - 40) = v50;
      *(_OWORD *)(a2 - 24) = v26;
      *(void *)(a2 - 8) = v52;
      long long v27 = v49;
      *(_OWORD *)(a2 - 72) = v48;
      *(_OWORD *)(a2 - 56) = v27;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(a1, v21, a3, 0x84BDA12F684BDA13 * ((v21 - a1) >> 3));
    }
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v37);
  }
}

void sub_1DBB73818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 216 * v5 + 216;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      int v11 = *(_DWORD *)(v8 + 44);
      int v12 = *(_DWORD *)(v8 + 260);
      BOOL v13 = v11 == v12;
      BOOL v14 = v11 > v12;
      if (v13) {
        BOOL v14 = *(_DWORD *)v8 > *(_DWORD *)(v8 + 216);
      }
      if (v14)
      {
        v8 += 216;
        uint64_t v9 = v10;
      }
    }
    long long v15 = *(_OWORD *)v8;
    long long v16 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(a1 + 32) = v16;
    *(_OWORD *)a1 = v15;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v8 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 + 72);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v8 + 80));
    long long v17 = *(_OWORD *)(v8 + 104);
    long long v18 = *(_OWORD *)(v8 + 120);
    *(void *)(a1 + 136) = *(void *)(v8 + 136);
    *(_OWORD *)(a1 + 120) = v18;
    *(_OWORD *)(a1 + 104) = v17;
    long long v20 = *(_OWORD *)(v8 + 176);
    long long v19 = *(_OWORD *)(v8 + 192);
    long long v21 = *(_OWORD *)(v8 + 160);
    *(void *)(a1 + 208) = *(void *)(v8 + 208);
    *(_OWORD *)(a1 + 176) = v20;
    *(_OWORD *)(a1 + 192) = v19;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v8 + 144);
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,apple::vision::libraries::facecore::FaceInternal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v54 = v4;
    uint64_t v55 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 216 * (v6 >> 1));
    int v11 = (long long *)(a2 - 216);
    int v12 = *((_DWORD *)v10 + 11);
    int v13 = *(_DWORD *)(a2 - 172);
    BOOL v14 = *(_DWORD *)v10 > *(_DWORD *)(a2 - 216);
    BOOL v15 = v12 == v13;
    BOOL v16 = v12 > v13;
    if (!v15) {
      BOOL v14 = v16;
    }
    if (v14)
    {
      apple::vision::libraries::facecore::Face::Face((uint64_t)v39, (int *)(a2 - 216));
      long long v17 = *(_OWORD *)(a2 - 56);
      long long v18 = *(_OWORD *)(a2 - 24);
      long long v51 = *(_OWORD *)(a2 - 40);
      long long v52 = v18;
      uint64_t v53 = *(void *)(a2 - 8);
      long long v19 = *(_OWORD *)(a2 - 72);
      long long v50 = v17;
      long long v49 = v19;
      do
      {
        long long v20 = v10;
        long long v21 = *v10;
        long long v22 = v10[2];
        v11[1] = v10[1];
        v11[2] = v22;
        *int v11 = v21;
        long long v23 = v10 + 3;
        std::vector<double>::__move_assign((uint64_t)(v11 + 3), (__n128 *)v10 + 3);
        *((_DWORD *)v11 + 18) = *((_DWORD *)v10 + 18);
        long long v24 = v10 + 5;
        std::vector<double>::__move_assign((uint64_t)(v11 + 5), (__n128 *)v10 + 5);
        long long v25 = *(long long *)((char *)v10 + 104);
        long long v26 = *(long long *)((char *)v10 + 120);
        *((void *)v11 + 17) = *((void *)v10 + 17);
        *(long long *)((char *)v11 + 120) = v26;
        *(long long *)((char *)v11 + 104) = v25;
        long long v28 = v10[11];
        long long v27 = v10[12];
        long long v29 = v10[10];
        *((void *)v11 + 26) = *((void *)v10 + 26);
        v11[11] = v28;
        v11[12] = v27;
        v11[10] = v29;
        v11[9] = v10[9];
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 216 * v9);
        int v30 = *((_DWORD *)v10 + 11);
        BOOL v15 = v30 == HIDWORD(v40);
        BOOL v31 = v30 > SHIDWORD(v40);
        if (v15) {
          BOOL v31 = *(_DWORD *)v10 > SLODWORD(v39[0]);
        }
        int v11 = v20;
      }
      while (v31);
      long long v32 = v39[1];
      *long long v20 = v39[0];
      v20[1] = v32;
      v20[2] = v40;
      long long v33 = (void *)*((void *)v20 + 6);
      if (v33)
      {
        *((void *)v20 + 7) = v33;
        operator delete(v33);
        *long long v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
      }
      _OWORD v20[3] = v41;
      *((void *)v20 + 8) = v42;
      uint64_t v42 = 0;
      long long v41 = 0uLL;
      *((_DWORD *)v20 + 18) = v43;
      long long v34 = (void *)*((void *)v20 + 10);
      if (v34)
      {
        *((void *)v20 + 11) = v34;
        operator delete(v34);
        *long long v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
      }
      v20[5] = v44;
      *((void *)v20 + 12) = v45;
      uint64_t v45 = 0;
      long long v44 = 0uLL;
      long long v35 = v47;
      *(long long *)((char *)v20 + 104) = v46;
      *(long long *)((char *)v20 + 120) = v35;
      *((void *)v20 + 17) = v48;
      long long v36 = v52;
      v20[11] = v51;
      v20[12] = v36;
      *((void *)v20 + 26) = v53;
      long long v37 = v50;
      v20[9] = v49;
      v20[10] = v37;
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v39);
    }
  }
  return result;
}

#error "1DBB73B8C: too big function (funcsize=0)"

__n128 apple::vision::libraries::facecore::mod::aam::AamSearch3d::Init3dModel(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  int v18 = 0;
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64(0, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)4, (uint64_t)&v18, a5);
  if (v18 != 63)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "MeshVertices missmatch");
    goto LABEL_14;
  }
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)4, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)4, (uint64_t)&v18, v6);
  if (v18 != 20)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "MeshPCs missmatch");
    goto LABEL_14;
  }
  uint64_t v8 = (char *)this + 12851008;
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)8, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)0x5E8, (uint64_t)this + 12851008, v7);
  uint64_t v10 = 0;
  uint64_t v11 = 20;
  do
  {
    apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)(v10 + 1520), (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)0x5E8, (uint64_t)this + v10 + 12852520, v9);
    v10 += 1512;
    --v11;
  }
  while (v11);
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)0x7C10, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)0xA0, (uint64_t)this + 12882760, v9);
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)0x7CB0, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)4, (uint64_t)&v18, v12);
  if (v18 != 99)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "Mesh3dTriangles missmatch");
    goto LABEL_14;
  }
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 12885440), 0x129uLL);
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)0x7CB4, (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)(12 * v18), *((void *)this + 1610680), v13);
  apple::vision::libraries::facecore::mod::aam::utils::readFromBase64((apple::vision::libraries::facecore::mod::aam::utils *)(12 * v18 + 31924), (uint64_t)apple::vision::libraries::facecore::mod::aam::aam3DInlined, (char *)4, (uint64_t)&v18, v14);
  if (v18 != 1337)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "Didn't find termination tag in 3d model file");
LABEL_14:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *((_OWORD *)this + 803186) = 0u;
  *((_OWORD *)this + 803187) = 0u;
  *((_OWORD *)this + 803184) = 0u;
  *((_OWORD *)this + 803185) = 0u;
  *((_OWORD *)this + 803182) = 0u;
  *((_OWORD *)this + 803183) = 0u;
  *((_OWORD *)this + 803180) = 0u;
  *((_OWORD *)this + 803181) = 0u;
  uint64_t v15 = 63;
  *((_OWORD *)this + 803178) = 0u;
  *((_OWORD *)this + 803179) = 0u;
  do
  {
    __n128 result = *(__n128 *)v8;
    *(_OWORD *)(v8 + 31912) = *(_OWORD *)v8;
    *((void *)v8 + 3991) = *((void *)v8 + 2);
    v8 += 24;
    --v15;
  }
  while (v15);
  return result;
}

void sub_1DBB9A5D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::GetTriList@<X0>(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *((const void **)this + 1610680), *((void *)this + 1610681), (uint64_t)(*((void *)this + 1610681) - *((void *)this + 1610680)) >> 2);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch3d::Get3dShapeParameters@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = std::vector<double>::vector(a2, 0x14uLL);
  uint64_t v4 = 0;
  uint64_t v5 = *v3;
  do
  {
    double result = *(double *)((char *)this + v4 + 12850848);
    *(double *)(v5 + v4) = result;
    v4 += 8;
  }
  while (v4 != 160);
  return result;
}

double apple::vision::libraries::facecore::mod::aam::AamSearch3d::Get3dShapeStd@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = std::vector<double>::vector(a2, 0x14uLL);
  uint64_t v4 = 0;
  uint64_t v5 = *v3;
  do
  {
    double result = *(double *)((char *)this + v4 + 12882760);
    *(double *)(v5 + v4) = result;
    v4 += 8;
  }
  while (v4 != 160);
  return result;
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::Optimize3dOrthographicSuccessive(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  int v179 = v2;
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (double *)(v1 + 12850776);
  *(void *)(v1 + 12850792) = 0;
  *(void *)(v1 + 12850800) = 0;
  v176 = (double *)(v1 + 12884440);
  *(void *)(v1 + 12850808) = 0;
  *(void *)(v1 + 12850816) = 0xBFF0000000000000;
  *(_OWORD *)(v1 + 12850848) = 0u;
  *(_OWORD *)(v1 + 12850864) = 0u;
  *(_OWORD *)(v1 + 12850880) = 0u;
  *(_OWORD *)(v1 + 12850896) = 0u;
  *(_OWORD *)(v1 + 12850912) = 0u;
  *(_OWORD *)(v1 + 12850928) = 0u;
  *(_OWORD *)(v1 + 12850944) = 0u;
  *(_OWORD *)(v1 + 12850960) = 0u;
  *(_OWORD *)(v1 + 12850976) = 0u;
  *(_OWORD *)(v1 + 12850992) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(void *)(v1 + 12850832) = 0;
  *(void *)(v1 + 12850840) = 0;
  uint64_t v9 = v1 + 12851008;
  uint64_t v171 = v1 + 12851008;
  uint64_t v172 = v1;
  uint64_t v10 = v1 + 12882920;
  *(void *)(v1 + 12850824) = 0;
  uint64_t v11 = 63;
  *(_OWORD *)(v1 + 12850776) = _Q0;
  do
  {
    *(_OWORD *)(v9 + 31912) = *(_OWORD *)v9;
    *(void *)(v9 + 31928) = *(void *)(v9 + 16);
    v9 += 24;
    --v11;
  }
  while (v11);
  v166[1] = v166;
  __CLPK_integer v184 = 6;
  uint64_t v12 = MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v12);
  BOOL v14 = (double *)((char *)v165 + v13);
  vDSP_vclrD(v165, 1, 0x2F4uLL);
  vDSP_vclrD(v14, 1, 126 * v184);
  v177 = v3;
  if (v179 >= 1)
  {
    int v16 = 0;
    uint64_t v17 = v172 + 12884432;
    v170 = (double *)(v172 + 1016);
    long long v18 = xmmword_1DBF81400;
    long long v19 = xmmword_1DBF81200;
    float64x2_t v167 = (float64x2_t)vdupq_n_s64(0x3FE3333333333333uLL);
    long long v168 = xmmword_1DBF81200;
    long long v169 = xmmword_1DBF81400;
    do
    {
      LODWORD(v178) = v16;
      uint64_t v20 = 0;
      double v21 = v3[2];
      double v22 = v3[3];
      double v23 = v3[4];
      double v24 = v3[5];
      double v25 = v3[6];
      double v27 = *v3;
      double v26 = v3[1];
      int v28 = 2 * v184;
      uint64_t v29 = 16 * v184;
      uint64_t v30 = v184;
      int v31 = 1;
      long long v32 = v165;
      long long v33 = apple::vision::libraries::facecore::mod::aam::point3d2d;
      do
      {
        int v34 = *v33++;
        long long v35 = (double *)(v10 + 24 * v34);
        double v36 = *v35;
        double v37 = v35[1];
        double v38 = v21 * v37 + v26 * *v35;
        double v39 = v35[2];
        long long v40 = &v14[v20];
        double v41 = v38 + v22 * v39;
        *long long v32 = v41;
        double v42 = v37 * v24 + v23 * v36 + v25 * v39;
        *long long v40 = v41;
        v40[1] = v42;
        int v43 = &v32[v30];
        *int v43 = v42;
        double v44 = v27 * (v37 * v22 + v36 * 0.0 + -v21 * v39);
        v40[126] = v44;
        v165[v31] = v44;
        double v45 = v27 * (v37 * v25 + v36 * 0.0 + -v24 * v39);
        v40[127] = v45;
        double v46 = v37 * 0.0 + -v22 * v36 + v26 * v39;
        v43[1] = v45;
        v40[252] = v27 * v46;
        double v47 = v27 * (v37 * 0.0 + -v25 * v36 + v23 * v39);
        v32[2] = v27 * v46;
        v40[253] = v47;
        double v48 = v27 * (v37 * -v26 + v21 * v36 + v39 * 0.0);
        _OWORD v43[2] = v47;
        v40[378] = v48;
        double v49 = v27 * (v37 * -v23 + v24 * v36 + v39 * 0.0);
        v32[3] = v48;
        v40[379] = v49;
        v43[3] = v49;
        double v32[4] = 1.0;
        *((_OWORD *)v40 + 252) = v18;
        v43[4] = 0.0;
        v32[5] = 0.0;
        *((_OWORD *)v40 + 315) = v19;
        v43[5] = 1.0;
        v31 += v28;
        v20 += 2;
        long long v32 = (double *)((char *)v32 + v29);
      }
      while (v20 != 126);
      v175 = v165;
      MEMORY[0x1F4188790](v15);
      v174 = (double *)((char *)v165 - v50);
      vDSP_mmulD(v14, 1, v165, 1, (double *)((char *)v165 - v50), 1, v184, v184, 0x7EuLL);
      uint64_t v51 = 0;
      double v52 = *v3;
      double v53 = v3[1];
      double v54 = v3[2];
      double v55 = v3[3];
      double v56 = v3[4];
      double v57 = v3[5];
      double v59 = v3[6];
      double v58 = v3[7];
      long long v60 = v176;
      double v61 = v3[8];
      do
      {
        long long v62 = (double *)(v10 + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v51]);
        double v63 = v62[1];
        double v64 = v62[2];
        double v65 = v61 + v52 * (v63 * v57 + v56 * *v62 + v59 * v64);
        *(v60 - 1) = v58 + v52 * (v54 * v63 + v53 * *v62 + v55 * v64);
        *long long v60 = v65;
        v60 += 2;
        ++v51;
      }
      while (v51 != 63);
      memcpy(v185, v170, 0x3F0uLL);
      for (uint64_t i = 0; i != 252; i += 4)
        *(float64x2_t *)&v185[i] = vsubq_f64(*(float64x2_t *)&v185[i], *(float64x2_t *)(v17 + i * 4));
      uint64_t v67 = memcpy(v180, v185, 0x3F0uLL);
      MEMORY[0x1F4188790](v67);
      v173 = &v165[-126];
      vDSP_mtransD(v180, 1, &v165[-126], 1, 0x7EuLL, 1uLL);
      MEMORY[0x1F4188790](v68);
      uint64_t v70 = (float64x2_t *)((char *)v165 - ((v69 + 15) & 0xFFFFFFFF0));
      vDSP_mmulD(v14, 1, v173, 1, v70->f64, 1, v71, 1uLL, 0x7EuLL);
      v185[0] = 1;
      MEMORY[0x1F4188790](v72);
      LODWORD(v183[0]) = 0;
      uint64_t v15 = dgesv_(&v184, v185, v174, &v184, (__CLPK_integer *)((char *)v165 - ((v73 + 15) & 0x7FFFFFFF0)), v70->f64, &v184, (__CLPK_integer *)v183);
      double v74 = v177;
      double v75 = v177[1];
      double v76 = *v177 + v70->f64[0] * 0.6;
      float64_t v77 = v70->f64[1] * 0.6;
      float64_t v78 = v70[1].f64[0] * 0.6;
      float64_t v79 = v70[1].f64[1] * 0.6;
      float64x2_t v80 = v70[2];
      uint64_t v3 = v177;
      *(float64x2_t *)(v177 + 7) = vmlaq_f64(*(float64x2_t *)(v177 + 7), v167, v80);
      v80.f64[0] = v74[2];
      double v81 = v74[3];
      double v82 = v75 + v79 * v80.f64[0] - v81 * v78;
      double v83 = v80.f64[0] - v75 * v79 + v81 * v77;
      double v84 = v81 + v75 * v78 - v77 * v80.f64[0];
      *double v74 = v76;
      v74[1] = v82;
      v74[2] = v83;
      v74[3] = v84;
      double v85 = v74[4];
      double v86 = v74[5];
      double v87 = v74[6];
      double v88 = v85 + v79 * v86 - v87 * v78;
      double v89 = v86 - v85 * v79 + v87 * v77;
      double v90 = v87 + v85 * v78 - v77 * v86;
      double v91 = v83 * v90 - v84 * v89;
      double v92 = v84 * v88 - v82 * v90;
      double v93 = v82 * v89 - v83 * v88;
      double v94 = v92 * v84 - v93 * v83;
      double v95 = v93 * v82 - v91 * v84;
      double v96 = v91 * v83 - v92 * v82;
      v74[4] = v94;
      v74[5] = v95;
      v74[6] = v96;
      double v97 = sqrt(v95 * v95 + v94 * v94 + v96 * v96);
      if (v97 != 0.0)
      {
        double v98 = 1.0 / v97;
        v3[4] = v94 * v98;
        v3[5] = v95 * v98;
        v3[6] = v96 * v98;
      }
      double v99 = sqrt(v83 * v83 + v82 * v82 + v84 * v84);
      int v100 = (int)v178;
      long long v19 = v168;
      long long v18 = v169;
      if (v99 != 0.0)
      {
        double v101 = 1.0 / v99;
        v3[1] = v82 * v101;
        v3[2] = v83 * v101;
        v3[3] = v84 * v101;
      }
      int v16 = v100 + 1;
    }
    while (v16 != v179);
  }
  __CLPK_integer v184 = 20;
  uint64_t v102 = MEMORY[0x1F4188790](v15);
  unsigned int v103 = &v165[-2520];
  MEMORY[0x1F4188790](v102);
  double v105 = (double *)((char *)v165 + v104);
  vDSP_vclrD(&v165[-2520], 1, 0x9D8uLL);
  v178 = v105;
  vDSP_vclrD(v105, 1, 126 * v184);
  uint64_t v106 = v172;
  if (v179 >= 1)
  {
    int v107 = 0;
    uint64_t v108 = v172 + 12884432;
    *(void *)&long long v169 = v172 + 1016;
    *(void *)&long long v168 = v178 + 1;
    float v109 = (double *)(v172 + 12850848);
    uint64_t v110 = v172 + 12852520;
    v170 = &v165[-2520];
    do
    {
      LODWORD(v175) = v107;
      uint64_t v111 = 0;
      double v112 = *v3;
      double v113 = v3[1];
      double v114 = v3[2];
      double v115 = v3[3];
      uint64_t v116 = v184;
      double v117 = v3[4];
      double v118 = v3[5];
      double v120 = v3[6];
      double v119 = v3[7];
      double v121 = v3[8];
      float v122 = (double *)v168;
      float v123 = (double *)v103;
      do
      {
        uint64_t v124 = 0;
        v125 = v122;
        v126 = v123;
        do
        {
          unint64_t v127 = (double *)(v106
                          + 1512 * v111
                          + 12852520
                          + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v124]);
          double v128 = *v127;
          double v129 = v127[1];
          double v130 = v127[2];
          double v131 = v119 + v112 * (v114 * v129 + v113 * *v127 + v115 * v130);
          double *v126 = v131;
          double v132 = v121 + v112 * (v129 * v118 + v117 * v128 + v120 * v130);
          *(v125 - 1) = v131;
          double *v125 = v132;
          v126[v116] = v132;
          v126 += 2 * v116;
          v125 += 2;
          ++v124;
        }
        while (v124 != 63);
        ++v111;
        ++v123;
        v122 += 126;
      }
      while (v111 != 20);
      v174 = v165;
      MEMORY[0x1F4188790](v106);
      v173 = (double *)((char *)v165 - v133);
      vDSP_mmulD(v178, 1, v103, 1, (double *)((char *)v165 - v133), 1, v184, v184, 0x7EuLL);
      uint64_t v134 = 0;
      double v135 = *v3;
      double v136 = v3[1];
      double v137 = v3[2];
      double v138 = v3[3];
      double v139 = v3[4];
      double v140 = v3[5];
      double v142 = v3[6];
      double v141 = v3[7];
      float v143 = v176;
      double v144 = v3[8];
      do
      {
        float v145 = (double *)(v10 + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v134]);
        double v146 = v145[1];
        double v147 = v145[2];
        double v148 = v144 + v135 * (v146 * v140 + v139 * *v145 + v142 * v147);
        *(v143 - 1) = v141 + v135 * (v137 * v146 + v136 * *v145 + v138 * v147);
        *float v143 = v148;
        v143 += 2;
        ++v134;
      }
      while (v134 != 63);
      memcpy(v185, (const void *)v169, 0x3F0uLL);
      for (uint64_t j = 0; j != 252; j += 4)
        *(float64x2_t *)&v185[j] = vsubq_f64(*(float64x2_t *)&v185[j], *(float64x2_t *)(v108 + j * 4));
      float v150 = memcpy(v183, v185, sizeof(v183));
      MEMORY[0x1F4188790](v150);
      vDSP_mtransD(v183, 1, &v165[-126], 1, 0x7EuLL, 1uLL);
      MEMORY[0x1F4188790](v151);
      float v153 = (double *)((char *)v165 - ((v152 + 15) & 0xFFFFFFFF0));
      vDSP_mmulD(v178, 1, &v165[-126], 1, v153, 1, v154, 1uLL, 0x7EuLL);
      __CLPK_integer v182 = 1;
      MEMORY[0x1F4188790](v155);
      __CLPK_integer v181 = 0;
      dgesv_(&v184, &v182, v173, &v184, (__CLPK_integer *)((char *)v165 - ((v156 + 15) & 0x7FFFFFFF0)), v153, &v184, &v181);
      for (uint64_t k = 0; k != 20; k += 2)
        *(float64x2_t *)&v109[k] = vaddq_f64(*(float64x2_t *)&v153[k], *(float64x2_t *)&v109[k]);
      uint64_t v158 = v171;
      uint64_t v159 = 63;
      do
      {
        *(_OWORD *)(v158 + 31912) = *(_OWORD *)v158;
        *(void *)(v158 + 31928) = *(void *)(v158 + 16);
        v158 += 24;
        --v159;
      }
      while (v159);
      uint64_t v160 = 0;
      v161 = v109;
      do
      {
        memcpy(v185, (const void *)(v110 + 8 * v160), sizeof(v185));
        apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator*=((uint64_t)v185, v161);
        memcpy(v180, v162, sizeof(v180));
        apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator+=(v10, (uint64_t)v180);
        v160 += 189;
        ++v161;
      }
      while (v160 != 3780);
      int v107 = v175 + 1;
      uint64_t v106 = v172;
      uint64_t v3 = v177;
      unsigned int v103 = v170;
    }
    while (v175 + 1 != v179);
  }
  v163 = (void *)(v106 + 12884432);
  apple::vision::libraries::facecore::mod::aam::AamSearch::TransformShape(v106, v106 + 12884432, (char *)v185);
  return memcpy(v163, v185, 0x3F0uLL);
}

double apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator+=(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 1512; i += 24)
  {
    uint64_t v3 = (float64x2_t *)(a1 + i);
    *uint64_t v3 = vaddq_f64(*(float64x2_t *)(a2 + i), *(float64x2_t *)(a1 + i));
    double result = *(double *)(a2 + i + 16) + *(double *)(a1 + i + 16);
    v3[1].f64[0] = result;
  }
  return result;
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::Optimize3dOrthographic(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  int v146 = v2;
  uint64_t v3 = v1;
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (double *)(v1 + 12850776);
  *(void *)(v1 + 12850792) = 0;
  *(void *)(v1 + 12850800) = 0;
  float v145 = (double *)(v1 + 12884440);
  *(void *)(v1 + 12850808) = 0;
  *(void *)(v1 + 12850816) = 0xBFF0000000000000;
  *(_OWORD *)(v1 + 12850848) = 0u;
  *(_OWORD *)(v1 + 12850864) = 0u;
  *(_OWORD *)(v1 + 12850880) = 0u;
  *(_OWORD *)(v1 + 12850896) = 0u;
  *(_OWORD *)(v1 + 12850912) = 0u;
  *(_OWORD *)(v1 + 12850928) = 0u;
  *(_OWORD *)(v1 + 12850944) = 0u;
  *(_OWORD *)(v1 + 12850960) = 0u;
  *(_OWORD *)(v1 + 12850976) = 0u;
  *(_OWORD *)(v1 + 12850992) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(void *)(v1 + 12850832) = 0;
  *(void *)(v1 + 12850840) = 0;
  uint64_t v10 = v1 + 12851008;
  uint64_t v11 = v1 + 12882920;
  *(void *)(v1 + 12850824) = 0;
  uint64_t v12 = 63;
  uint64_t v144 = v1 + 12851008;
  *(_OWORD *)(v1 + 12850776) = _Q0;
  do
  {
    *(_OWORD *)(v10 + 31912) = *(_OWORD *)v10;
    *(void *)(v10 + 31928) = *(void *)(v10 + 16);
    v10 += 24;
    --v12;
  }
  while (v12);
  v137[1] = v137;
  __CLPK_integer v154 = 11;
  uint64_t v13 = MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (double *)((char *)v136 + v14);
  vDSP_vclrD(v136, 1, 0x56AuLL);
  vDSP_vclrD(v15, 1, 0x56AuLL);
  if (v146 >= 1)
  {
    int v16 = 0;
    uint64_t v17 = v3 + 12884432;
    double v140 = (const void *)(v3 + 1016);
    long long v18 = (double *)(v3 + 12850848);
    long long v19 = xmmword_1DBF81400;
    long long v20 = xmmword_1DBF81200;
    double v142 = v4;
    uint64_t v143 = v3;
    uint64_t v141 = v3 + 12884432;
    uint64_t v149 = v3 + 12852520;
    long long v138 = xmmword_1DBF81200;
    long long v139 = xmmword_1DBF81400;
    do
    {
      int v148 = v16;
      uint64_t v21 = 0;
      double v22 = v4[2];
      double v23 = v4[3];
      double v24 = v4[4];
      double v25 = v4[5];
      double v26 = v4[6];
      double v28 = *v4;
      double v27 = v4[1];
      int v29 = 2 * v154;
      uint64_t v30 = 16 * v154;
      uint64_t v31 = v154;
      int v32 = 1;
      long long v33 = v136;
      int v34 = apple::vision::libraries::facecore::mod::aam::point3d2d;
      do
      {
        int v35 = *v34++;
        double v36 = (double *)(v11 + 24 * v35);
        double v37 = *v36;
        double v38 = v36[1];
        double v39 = v22 * v38 + v27 * *v36;
        double v40 = v36[2];
        double v41 = &v15[v21];
        double v42 = v39 + v23 * v40;
        double *v33 = v42;
        double v43 = v38 * v25 + v24 * v37 + v26 * v40;
        *double v41 = v42;
        v41[1] = v43;
        double v44 = &v33[v31];
        *double v44 = v43;
        double v45 = v28 * (v38 * v23 + v37 * 0.0 + -v22 * v40);
        v41[126] = v45;
        v136[v32] = v45;
        double v46 = v28 * (v38 * v26 + v37 * 0.0 + -v25 * v40);
        v41[127] = v46;
        double v47 = v38 * 0.0 + -v23 * v37 + v27 * v40;
        v44[1] = v46;
        v41[252] = v28 * v47;
        double v48 = v28 * (v38 * 0.0 + -v26 * v37 + v24 * v40);
        v33[2] = v28 * v47;
        v41[253] = v48;
        double v49 = v28 * (v38 * -v27 + v22 * v37 + v40 * 0.0);
        v44[2] = v48;
        v41[378] = v49;
        double v50 = v28 * (v38 * -v24 + v25 * v37 + v40 * 0.0);
        v33[3] = v49;
        v41[379] = v50;
        v44[3] = v50;
        double v33[4] = 1.0;
        *((_OWORD *)v41 + 252) = v19;
        v44[4] = 0.0;
        v33[5] = 0.0;
        *((_OWORD *)v41 + 315) = v20;
        v44[5] = 1.0;
        v32 += v29;
        v21 += 2;
        long long v33 = (double *)((char *)v33 + v30);
      }
      while (v21 != 126);
      uint64_t v51 = 0;
      double v52 = *v4;
      double v53 = v4[1];
      double v54 = v4[2];
      double v55 = v4[3];
      __CLPK_integer v56 = v154;
      double v57 = v4[4];
      double v58 = v4[5];
      double v60 = v4[6];
      double v59 = v4[7];
      double v61 = v4[8];
      int v62 = 2 * v154;
      int v63 = 6;
      uint64_t v64 = 6048;
      do
      {
        uint64_t v65 = 0;
        uint64_t v66 = v64;
        int v67 = v63;
        do
        {
          uint64_t v68 = (double *)(v3
                         + 1512 * v51
                         + 12852520
                         + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v65]);
          double v69 = *v68;
          double v70 = v68[1];
          double v71 = v68[2];
          double v72 = v54 * v70 + v53 * *v68 + v55 * v71;
          uint64_t v73 = (double *)((char *)v15 + v66);
          double v74 = v70 * v58 + v57 * v69 + v60 * v71;
          double v75 = v59 + v52 * v72;
          double v76 = v61 + v52 * v74;
          double *v73 = v75;
          v73[1] = v76;
          v136[v67] = v75;
          v136[v56 + v67] = v76;
          v67 += v62;
          v66 += 16;
          ++v65;
        }
        while (v65 != 63);
        ++v51;
        ++v63;
        v64 += 1008;
      }
      while (v51 != 5);
      double v147 = v136;
      MEMORY[0x1F4188790](12852520);
      float64_t v78 = (double *)((char *)v136 - v77);
      vDSP_mmulD(v15, 1, v136, 1, (double *)((char *)v136 - v77), 1, v154, v154, 0x7EuLL);
      uint64_t v79 = 0;
      double v80 = *v4;
      double v81 = v4[1];
      double v82 = v4[2];
      double v83 = v4[3];
      double v84 = v4[4];
      double v85 = v4[5];
      double v87 = v4[6];
      double v86 = v4[7];
      double v88 = v145;
      double v89 = v4[8];
      do
      {
        double v90 = (double *)(v11 + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v79]);
        double v91 = v90[1];
        double v92 = v90[2];
        double v93 = v89 + v80 * (v91 * v85 + v84 * *v90 + v87 * v92);
        *(v88 - 1) = v86 + v80 * (v82 * v91 + v81 * *v90 + v83 * v92);
        *double v88 = v93;
        v88 += 2;
        ++v79;
      }
      while (v79 != 63);
      memcpy(v155, v140, 0x3F0uLL);
      for (uint64_t i = 0; i != 1008; i += 16)
        *(float64x2_t *)&v155[i] = vsubq_f64(*(float64x2_t *)&v155[i], *(float64x2_t *)(v17 + i));
      double v95 = memcpy(v153, v155, sizeof(v153));
      MEMORY[0x1F4188790](v95);
      vDSP_mtransD(v153, 1, &v136[-126], 1, 0x7EuLL, 1uLL);
      MEMORY[0x1F4188790](v96);
      double v98 = (float64x2_t *)((char *)v136 - ((v97 + 15) & 0xFFFFFFFF0));
      vDSP_mmulD(v15, 1, &v136[-126], 1, v98->f64, 1, v99, 1uLL, 0x7EuLL);
      __CLPK_integer v152 = 1;
      MEMORY[0x1F4188790](v100);
      __CLPK_integer v151 = 0;
      dgesv_(&v154, &v152, v78, &v154, (__CLPK_integer *)((char *)v136 - ((v101 + 15) & 0x7FFFFFFF0)), v98->f64, &v154, &v151);
      double v102 = v98->f64[1];
      uint64_t v4 = v142;
      double v103 = v142[1];
      double v104 = v98->f64[0] + *v142;
      double v105 = v98[1].f64[0];
      double v106 = v98[1].f64[1];
      *(float64x2_t *)(v142 + 7) = vaddq_f64(v98[2], *(float64x2_t *)(v142 + 7));
      double v107 = v4[2];
      double v108 = v4[3];
      double v109 = v103 + v106 * v107 - v108 * v105;
      double v110 = v107 - v103 * v106 + v108 * v102;
      double v111 = v108 + v103 * v105 - v102 * v107;
      *uint64_t v4 = v104;
      v4[1] = v109;
      v4[2] = v110;
      v4[3] = v111;
      double v112 = v4[4];
      double v113 = v4[5];
      double v114 = v4[6];
      double v115 = v112 + v106 * v113 - v114 * v105;
      double v116 = v113 - v112 * v106 + v114 * v102;
      double v117 = v114 + v112 * v105 - v102 * v113;
      double v118 = v110 * v117 - v111 * v116;
      double v119 = v111 * v115 - v109 * v117;
      double v120 = v109 * v116 - v110 * v115;
      double v121 = v119 * v111 - v120 * v110;
      double v122 = v120 * v109 - v118 * v111;
      double v123 = v118 * v110 - v119 * v109;
      v4[4] = v121;
      v4[5] = v122;
      v4[6] = v123;
      double v124 = sqrt(v122 * v122 + v121 * v121 + v123 * v123);
      if (v124 != 0.0)
      {
        double v125 = 1.0 / v124;
        v4[4] = v121 * v125;
        v4[5] = v122 * v125;
        v4[6] = v123 * v125;
      }
      double v126 = sqrt(v110 * v110 + v109 * v109 + v111 * v111);
      uint64_t v127 = v149;
      if (v126 != 0.0)
      {
        double v128 = 1.0 / v126;
        v4[1] = v109 * v128;
        v4[2] = v110 * v128;
        v4[3] = v111 * v128;
      }
      for (uint64_t j = 0; j != 5; ++j)
        v18[j] = v98[3].f64[j] + v18[j];
      uint64_t v130 = v144;
      uint64_t v131 = 63;
      do
      {
        *(_OWORD *)(v130 + 31912) = *(_OWORD *)v130;
        *(void *)(v130 + 31928) = *(void *)(v130 + 16);
        v130 += 24;
        --v131;
      }
      while (v131);
      uint64_t v132 = 0;
      uint64_t v133 = v18;
      do
      {
        memcpy(v155, (const void *)(v127 + 8 * v132), sizeof(v155));
        apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator*=((uint64_t)v155, v133);
        memcpy(v150, v134, sizeof(v150));
        apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator+=(v11, (uint64_t)v150);
        uint64_t v127 = v149;
        v132 += 189;
        ++v133;
      }
      while (v132 != 945);
      int v16 = v148 + 1;
      uint64_t v3 = v143;
      uint64_t v17 = v141;
      long long v20 = v138;
      long long v19 = v139;
    }
    while (v148 + 1 != v146);
  }
  apple::vision::libraries::facecore::mod::aam::AamSearch::TransformShape(v3, v3 + 12884432, v155);
  return memcpy((void *)(v3 + 12884432), v155, 0x3F0uLL);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch3d::CalculateParameterUpdatesSic3d(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this, double *a2, double *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this);
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  if (v6 <= 50)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    unsigned int v205 = 86;
    uint64_t v10 = MEMORY[0x1F4188790](v3);
    MEMORY[0x1F4188790](v10);
    vDSP_vclrD(v189, 1, 0x56uLL);
    vDSP_vclrD(v190, 1, 0x56uLL);
    memcpy(v189, v8, 0x1E0uLL);
    double v204 = 0.0005;
    v203 = 0;
    v202 = 0;
    std::valarray<float>::resize((uint64_t)&v202, 0x1F0uLL, 0.0);
    uint64_t v11 = 0;
    long long v12 = *(_OWORD *)(v9 + 134128);
    long long v212 = *(_OWORD *)(v9 + 134112);
    long long v213 = v12;
    long long v214 = *(_OWORD *)(v9 + 134144);
    long long v13 = *(_OWORD *)(v9 + 134064);
    long long v208 = *(_OWORD *)(v9 + 134048);
    long long v209 = v13;
    long long v14 = *(_OWORD *)(v9 + 134096);
    long long v210 = *(_OWORD *)(v9 + 134080);
    int v207 = 1065353216;
    uint64_t v215 = *(void *)(v9 + 134160);
    long long v211 = v14;
    uint64_t v15 = 1;
    int v16 = v202;
    uint64_t v17 = (float *)v202;
    do
    {
      uint64_t v18 = 0;
      do
      {
        v17[((int)v11 - 1) * (int)v11 / 2 + v18] = *((float *)&v207 + v11) * *((float *)&v207 + v18);
        ++v18;
      }
      while (v15 != v18);
      ++v11;
      ++v15;
      ++v17;
    }
    while (v11 != 31);
    uint64_t v19 = 0;
    long long v20 = v203;
    uint64_t v21 = *(int *)(v9 + 55092) - 5;
    do
    {
      uint64_t v22 = 86 * v19;
      for (uint64_t i = v19; i != 30; ++i)
      {
        if (v20 == (unsigned char *)v16)
        {
          double v25 = 0.0;
        }
        else
        {
          double v24 = (float *)(v9 + 1785600 * v21 + 59520 * i + 1984 * v19 + 161392);
          double v25 = 0.0;
          unint64_t v26 = (v20 - (unsigned char *)v16) & 0xFFFFFFFFFFFFFFFCLL;
          double v27 = (float *)v16;
          do
          {
            float v28 = *v27++;
            float v29 = v28;
            float v30 = *v24++;
            double v25 = v25 + (float)(v29 * v30);
            v26 -= 4;
          }
          while (v26);
        }
        v190[86 * i + v19] = v25;
        v190[v22 + i] = v25;
      }
      ++v19;
    }
    while (v19 != 30);
    uint64_t v31 = v9 + 111600 * v21 + 7303792;
    do
    {
      uint64_t v32 = 0;
      uint64_t v33 = v31;
      do
      {
        uint64_t v34 = 0;
        double v35 = 0.0;
        do
        {
          double v35 = v35 + (float)(*(float *)((char *)&v207 + v34) * *(float *)(v33 + v34));
          v34 += 4;
        }
        while (v34 != 124);
        v190[86 * v32 + v19] = v35;
        v190[86 * v19 + v32++] = v35;
        v33 += 3720;
      }
      while (v32 != 30);
      ++v19;
      v31 += 124;
    }
    while (v19 != 60);
    double v36 = &v191;
    uint64_t v37 = 30;
    uint64_t v38 = 20640;
    do
    {
      unint64_t v39 = 0;
      double v40 = v36;
      do
      {
        if (v39)
        {
          v36[v39 / 8] = 0;
          *double v40 = 0;
        }
        else
        {
          v190[87 * v37] = 1.0;
        }
        v39 += 688;
        ++v40;
      }
      while (v38 != v39);
      ++v37;
      v36 += 87;
      v38 -= 688;
    }
    while (v37 != 60);
    uint64_t v41 = 0;
    uint64_t v42 = v9 + 7775152;
    do
    {
      uint64_t v43 = v42;
      for (uint64_t j = v41; j != 60; ++j)
      {
        uint64_t v45 = 0;
        uint64_t v46 = v41 + 86 * j;
        double v47 = 0.0;
        do
        {
          double v47 = v47 + (float)(*(float *)(v43 + v45) * *(float *)(v42 + v45));
          v45 += 4;
        }
        while (v45 != 236);
        double v48 = v190[v46] + v47;
        v190[v46] = v48;
        v190[86 * v41 + j] = v48;
        v43 += 240;
      }
      ++v41;
      v42 += 240;
    }
    while (v41 != 60);
    v194 = v189;
    v195 = (double *)(v9 + 12884440);
    uint64_t v196 = v9 + 12850776;
    v192[2] = v192;
    unsigned int v205 = 86;
    uint64_t v49 = MEMORY[0x1F4188790](v22);
    MEMORY[0x1F4188790](v49);
    uint64_t v51 = (double *)((char *)v188 + v50);
    vDSP_vclrD(v188, 1, 0x2A54uLL);
    vDSP_vclrD(v51, 1, 0x2A54uLL);
    uint64_t v52 = 0;
    uint64_t v193 = v9 + 1016;
    uint64_t v53 = v9 + 12886728;
    double v54 = v51;
    double v55 = v188;
    do
    {
      *(_OWORD *)(v7 + 448) = 0u;
      *(_OWORD *)(v7 + 464) = 0u;
      *(_OWORD *)(v7 + 416) = 0u;
      *(_OWORD *)(v7 + 432) = 0u;
      *(_OWORD *)(v7 + 384) = 0u;
      *(_OWORD *)(v7 + 400) = 0u;
      *(_OWORD *)(v7 + 352) = 0u;
      *(_OWORD *)(v7 + 368) = 0u;
      *(_OWORD *)(v7 + 320) = 0u;
      *(_OWORD *)(v7 + 336) = 0u;
      *(_OWORD *)(v7 + 288) = 0u;
      *(_OWORD *)(v7 + 304) = 0u;
      *(_OWORD *)(v7 + 256) = 0u;
      *(_OWORD *)(v7 + 272) = 0u;
      *(_OWORD *)(v7 + 224) = 0u;
      *(_OWORD *)(v7 + 240) = 0u;
      *(_OWORD *)(v7 + 192) = 0u;
      *(_OWORD *)(v7 + 208) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 176) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(void *)(v7 + 8 * v52) = 0x3FF0000000000000;
      apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateParametersSic3d((apple::vision::libraries::facecore::mod::aam::AamSearch3d *)v9, (double *)v7);
      apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateShapeSic3d((apple::vision::libraries::facecore::mod::aam::AamSearch3d *)v9);
      uint64_t v56 = 0;
      double v57 = v55;
      do
      {
        float64x2_t v58 = vnegq_f64(vsubq_f64(*(float64x2_t *)(v9 + v56 * 8 + 1016), *(float64x2_t *)(v53 + v56 * 8)));
        *double v57 = v58.f64[0];
        *(float64x2_t *)&v54[v56] = v58;
        v57[86] = v58.f64[1];
        v57 += 172;
        v56 += 2;
      }
      while (v56 != 126);
      ++v52;
      ++v55;
      v54 += 126;
    }
    while (v52 != 4);
    double v59 = v51 + 504;
    uint64_t v60 = 4;
    double v61 = v188;
    do
    {
      *(_OWORD *)(v7 + 448) = 0u;
      *(_OWORD *)(v7 + 464) = 0u;
      *(_OWORD *)(v7 + 416) = 0u;
      *(_OWORD *)(v7 + 432) = 0u;
      *(_OWORD *)(v7 + 384) = 0u;
      *(_OWORD *)(v7 + 400) = 0u;
      *(_OWORD *)(v7 + 352) = 0u;
      *(_OWORD *)(v7 + 368) = 0u;
      *(_OWORD *)(v7 + 320) = 0u;
      *(_OWORD *)(v7 + 336) = 0u;
      *(_OWORD *)(v7 + 288) = 0u;
      *(_OWORD *)(v7 + 304) = 0u;
      *(_OWORD *)(v7 + 256) = 0u;
      *(_OWORD *)(v7 + 272) = 0u;
      *(_OWORD *)(v7 + 224) = 0u;
      *(_OWORD *)(v7 + 240) = 0u;
      *(_OWORD *)(v7 + 192) = 0u;
      *(_OWORD *)(v7 + 208) = 0u;
      *(_OWORD *)(v7 + 160) = 0u;
      *(_OWORD *)(v7 + 176) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 144) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(void *)(v7 + 8 * v60) = 0x3FF0000000000000;
      apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateParametersSic3d((apple::vision::libraries::facecore::mod::aam::AamSearch3d *)v9, (double *)v7);
      apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateShapeSic3d((apple::vision::libraries::facecore::mod::aam::AamSearch3d *)v9);
      uint64_t v62 = -1008;
      int v63 = v61;
      do
      {
        float64x2_t v64 = vnegq_f64(vsubq_f64(*(float64x2_t *)(v9 + v62 + 2024), *(float64x2_t *)(v53 + v62 + 1008)));
        v63[4] = v64.f64[0];
        *(float64x2_t *)&v59[(unint64_t)v62 / 8 + 126] = v64;
        v63[90] = v64.f64[1];
        v63 += 172;
        v62 += 16;
      }
      while (v62);
      ++v60;
      ++v61;
      v59 += 126;
    }
    while (v60 != 30);
    uint64_t v65 = 0;
    uint64_t v66 = v9 + 12882920;
    int v67 = (double *)v196;
    double v68 = *(double *)(v196 + 16);
    double v69 = *(double *)(v196 + 24);
    double v70 = *(double *)(v196 + 32);
    double v71 = *(double *)(v196 + 40);
    double v72 = *(double *)(v196 + 48);
    double v73 = *(double *)(v196 + 8);
    double v74 = -*(double *)v196;
    uint64_t v75 = 4032;
    uint64_t v76 = 8190;
    uint64_t v77 = 7560;
    float64_t v78 = apple::vision::libraries::facecore::mod::aam::point3d2d;
    do
    {
      int v79 = *v78++;
      double v80 = (double *)(v66 + 24 * v79);
      double v81 = *v80;
      double v82 = v80[1];
      double v83 = v68 * v82 + v73 * *v80;
      double v84 = v80[2];
      double v85 = &v51[v77];
      double v86 = -(v83 + v69 * v84);
      double v87 = &v188[v65];
      double v88 = -(v82 * v71 + v70 * v81 + v72 * v84);
      *double v85 = v86;
      v85[1] = v88;
      v87[146] = v88;
      double v89 = (v82 * v69 + v81 * 0.0 + -v68 * v84) * v74;
      v85[126] = v89;
      double v90 = (v82 * v72 + v81 * 0.0 + -v71 * v84) * v74;
      v87[60] = v86;
      v87[61] = v89;
      v85[127] = v90;
      double v91 = (v82 * 0.0 + -v69 * v81 + v73 * v84) * v74;
      v87[147] = v90;
      v85[252] = v91;
      double v92 = (v82 * 0.0 + -v72 * v81 + v70 * v84) * v74;
      v85[253] = v92;
      v87[148] = v92;
      double v93 = (v82 * -v73 + v68 * v81 + v84 * 0.0) * v74;
      v85[378] = v93;
      v87[62] = v91;
      v87[63] = v93;
      double v94 = (v82 * -v70 + v71 * v81 + v84 * 0.0) * v74;
      v85[379] = v94;
      v87[149] = v94;
      *(_OWORD *)&v51[2 * v75] = xmmword_1DBF82860;
      *((_OWORD *)v87 + 32) = xmmword_1DBF82860;
      *(_OWORD *)&v51[v76] = xmmword_1DBF82870;
      *((_OWORD *)v87 + 75) = xmmword_1DBF82870;
      v65 += 172;
      ++v75;
      v76 += 2;
      v77 += 2;
    }
    while (v75 != 4095);
    uint64_t v95 = 0;
    double v96 = v67[1];
    double v97 = -*v67;
    double v98 = v67[2];
    double v99 = v67[3];
    vDSP_Length v100 = (int)v205;
    uint64_t v197 = v205;
    double v101 = v67[4];
    double v102 = v67[5];
    double v104 = v67[6];
    double v103 = v67[7];
    int v105 = 2 * v205;
    int v106 = 66;
    double v107 = v67[8];
    uint64_t v108 = 66528;
    do
    {
      uint64_t v109 = 0;
      uint64_t v110 = v108;
      LODWORD(v111) = v106;
      do
      {
        double v112 = (double *)(v9
                        + 1512 * v95
                        + 12852520
                        + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v109]);
        double v113 = *v112;
        double v114 = v112[1];
        double v115 = v112[2];
        double v116 = v98 * v114 + v96 * *v112 + v99 * v115;
        double v117 = (double *)((char *)v51 + v110);
        double v118 = v114 * v102 + v101 * v113 + v104 * v115;
        double v119 = v103 + v97 * v116;
        double v120 = v107 + v97 * v118;
        *double v117 = v119;
        v117[1] = v120;
        v188[(int)v111] = v119;
        v188[(int)v100 + (int)v111] = v120;
        uint64_t v111 = (v111 + v105);
        v110 += 16;
        ++v109;
      }
      while (v109 != 63);
      ++v95;
      ++v106;
      v108 += 1008;
    }
    while (v95 != 20);
    v192[1] = v188;
    v192[3] = (v197 * v197);
    MEMORY[0x1F4188790](v111);
    double v122 = (double *)((char *)v188 - v121);
    vDSP_mmulD(v51, 1, v188, 1, (double *)((char *)v188 - v121), 1, v100, v100, 0x7EuLL);
    MEMORY[0x1F4188790](v123);
    double v125 = v122;
    double v126 = (double *)((char *)v188 - ((v124 + 15) & 0x7FFFFFFF0));
    vDSP_vsmaD(v125, 1, &v204, v190, 1, v126, 1, v127);
    uint64_t v128 = 0;
    double v129 = *v67;
    double v130 = v67[1];
    double v131 = v67[2];
    double v132 = v67[3];
    double v133 = v67[4];
    double v134 = v67[5];
    double v136 = v67[6];
    double v135 = v67[7];
    double v137 = v67[8];
    long long v138 = v195;
    do
    {
      long long v139 = (double *)(v66 + 24 * apple::vision::libraries::facecore::mod::aam::point3d2d[v128]);
      double v140 = v139[1];
      double v141 = v139[2];
      double v142 = v137 + v129 * (v140 * v134 + v133 * *v139 + v136 * v141);
      *(v138 - 1) = v135 + v129 * (v131 * v140 + v130 * *v139 + v132 * v141);
      *long long v138 = v142;
      v138 += 2;
      ++v128;
    }
    while (v128 != 63);
    memcpy(v206, (const void *)(v9 + 12884432), 0x3F0uLL);
    uint64_t v143 = 0;
    uint64_t v144 = v193;
    do
    {
      *(float64x2_t *)&v206[v143] = vsubq_f64(*(float64x2_t *)&v206[v143], *(float64x2_t *)(v144 + v143));
      v143 += 16;
    }
    while (v143 != 1008);
    float v145 = memcpy(v201, v206, sizeof(v201));
    MEMORY[0x1F4188790](v145);
    vDSP_mtransD(v201, 1, &v188[-126], 1, 0x7EuLL, 1uLL);
    uint64_t v147 = MEMORY[0x1F4188790](v146);
    uint64_t v149 = (double *)((char *)v188 - ((v148 + 15) & 0xFFFFFFFF0));
    MEMORY[0x1F4188790](v147);
    __CLPK_integer v151 = (float64x2_t *)((char *)v188 - v150);
    vDSP_mmulD(v51, 1, &v188[-126], 1, v149, 1, v100, 1uLL, 0x7EuLL);
    vDSP_vsmaD(v149, 1, &v204, v194, 1, v151->f64, 1, v100);
    __CLPK_integer v200 = 1;
    MEMORY[0x1F4188790](v152);
    __CLPK_integer v199 = 0;
    dgesv_((__CLPK_integer *)&v205, &v200, v126, (__CLPK_integer *)&v205, (__CLPK_integer *)((char *)v188 - ((v153 + 15) & 0x7FFFFFFF0)), v151->f64, (__CLPK_integer *)&v205, &v199);
    double v154 = v151[30].f64[1];
    uint64_t v155 = (double *)v196;
    double v156 = *(double *)(v196 + 8);
    double v157 = v151[30].f64[0] + *(double *)v196;
    double v158 = v151[31].f64[0];
    double v159 = v151[31].f64[1];
    *(float64x2_t *)(v196 + 56) = vaddq_f64(v151[32], *(float64x2_t *)(v196 + 56));
    double v160 = v155[2];
    double v161 = v155[3];
    double v162 = v156 + v159 * v160 - v161 * v158;
    double v163 = v160 - v156 * v159 + v161 * v154;
    double v164 = v161 + v156 * v158 - v154 * v160;
    *uint64_t v155 = v157;
    v155[1] = v162;
    v155[2] = v163;
    v155[3] = v164;
    double v165 = v155[4];
    double v166 = v155[5];
    double v167 = v155[6];
    double v168 = v165 + v159 * v166 - v167 * v158;
    double v169 = v166 - v165 * v159 + v167 * v154;
    double v170 = v167 + v165 * v158 - v154 * v166;
    double v171 = v163 * v170 - v164 * v169;
    double v172 = v164 * v168 - v162 * v170;
    double v173 = v162 * v169 - v163 * v168;
    double v174 = v172 * v164 - v173 * v163;
    double v175 = v173 * v162 - v171 * v164;
    double v176 = v171 * v163 - v172 * v162;
    v155[4] = v174;
    v155[5] = v175;
    v155[6] = v176;
    double v177 = sqrt(v175 * v175 + v174 * v174 + v176 * v176);
    if (v177 != 0.0)
    {
      double v178 = 1.0 / v177;
      v155[4] = v174 * v178;
      v155[5] = v175 * v178;
      v155[6] = v176 * v178;
    }
    double v179 = sqrt(v163 * v163 + v162 * v162 + v164 * v164);
    if (v179 != 0.0)
    {
      double v180 = 1.0 / v179;
      v155[1] = v162 * v180;
      v155[2] = v163 * v180;
      v155[3] = v164 * v180;
    }
    for (uint64_t k = 0; k != 10; ++k)
      *(float64x2_t *)(v9 + 12850848 + k * 16) = vaddq_f64(v151[k + 33], *(float64x2_t *)(v9 + 12850848 + k * 16));
    uint64_t v182 = v9 + 12851008;
    uint64_t v183 = 63;
    do
    {
      *(_OWORD *)(v182 + 31912) = *(_OWORD *)v182;
      *(void *)(v182 + 31928) = *(void *)(v182 + 16);
      v182 += 24;
      --v183;
    }
    while (v183);
    uint64_t v184 = 0;
    uint64_t v185 = v9 + 12852520;
    uint64_t v186 = (double *)(v9 + 12850848);
    do
    {
      memcpy(v206, (const void *)(v185 + 8 * v184), 0x5E8uLL);
      apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator*=((uint64_t)v206, v186);
      memcpy(v198, v187, sizeof(v198));
      apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator+=(v66, (uint64_t)v198);
      v184 += 189;
      ++v186;
    }
    while (v184 != 3780);
    memcpy((void *)v7, v151, 0x1E0uLL);
    if (v202)
    {
      if (v203 != (unsigned char *)v202) {
        v203 += ((char *)v202 - v203 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      }
      operator delete(v202);
    }
  }
}

void sub_1DBB9C7A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(unsigned char **)(v1 + 2600);
  if (v3)
  {
    uint64_t v4 = *(unsigned char **)(v1 + 2608);
    if (v4 != v3) {
      *(void *)(v1 + 2608) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateParametersSic3d(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this, double *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (double *)((char *)this + 12885464);
  do
  {
    float v6 = a2[v4 + 30];
    *((float *)this + v4 + 33512) = *((float *)this + v4 + 33512) + (float)(v6 * 0.9);
    ++v4;
  }
  while (v4 != 30);
  uint64_t v7 = a2 + 4;
  memcpy(__dst, (char *)this + 2024, sizeof(__dst));
  for (uint64_t i = 0; i != 240; i += 8)
    ;
  for (uint64_t j = 0; j != 4; ++j)
  {
    double v31 = a2[j] * 0.899999976;
    memcpy(__src, (char *)this + 1008 * j + 103344, 0x3F0uLL);
    for (uint64_t k = 0; k != 1008; k += 16)
      *(float64x2_t *)&__src[k] = vmulq_n_f64(*(float64x2_t *)&__src[k], v31);
    memcpy(v34, __src, sizeof(v34));
    for (uint64_t m = 0; m != 63; ++m)
      *(float64x2_t *)&__dst[m * 16] = vsubq_f64(*(float64x2_t *)&__dst[m * 16], v34[m]);
  }
  for (uint64_t n = 0; n != 26; ++n)
  {
    double v32 = v7[n] * 0.899999976;
    memcpy(__src, (char *)this + 1008 * n + 107376, 0x3F0uLL);
    for (iuint64_t i = 0; ii != 1008; ii += 16)
      *(float64x2_t *)&__src[ii] = vmulq_n_f64(*(float64x2_t *)&__src[ii], v32);
    memcpy(v34, __src, sizeof(v34));
    for (juint64_t j = 0; jj != 63; ++jj)
      *(float64x2_t *)&__dst[jj * 16] = vsubq_f64(*(float64x2_t *)&__dst[jj * 16], v34[jj]);
  }
  apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices((uint64_t)this + 34656, (uint64_t)__dst, v34);
  uint64_t v15 = 0;
  double v16 = 0.0;
  do
  {
    double v16 = v16
        + *(double *)((char *)this + v15 * 16 + 103352) * v34[v15].f64[1]
        + *(double *)((char *)this + v15 * 16 + 103344) * v34[v15].f64[0];
    ++v15;
  }
  while (v15 != 63);
  uint64_t v17 = 0;
  *uint64_t v5 = v16;
  double v18 = 0.0;
  do
  {
    double v18 = v18
        + *(double *)((char *)this + v17 * 16 + 104360) * v34[v17].f64[1]
        + *(double *)((char *)this + v17 * 16 + 104352) * v34[v17].f64[0];
    ++v17;
  }
  while (v17 != 63);
  uint64_t v19 = 0;
  v5[1] = v18;
  double v20 = 0.0;
  do
  {
    double v20 = v20
        + *(double *)((char *)this + v19 * 16 + 105368) * v34[v19].f64[1]
        + *(double *)((char *)this + v19 * 16 + 105360) * v34[v19].f64[0];
    ++v19;
  }
  while (v19 != 63);
  uint64_t v21 = 0;
  v5[2] = v20;
  double v22 = 0.0;
  do
  {
    double v22 = v22
        + *(double *)((char *)this + v21 * 16 + 106376) * v34[v21].f64[1]
        + *(double *)((char *)this + v21 * 16 + 106368) * v34[v21].f64[0];
    ++v21;
  }
  while (v21 != 63);
  double v23 = sqrt(v16 * v16 + v18 * v18);
  v5[3] = v22;
  v5[4] = v23;
  if (v23 == 0.0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "0.0 == q_scale");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v5[5] = atan(v18 / v16) * 180.0 / 3.14159265;
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::InverseTransformShapeSic3d((uint64_t)this, (uint64_t)v34, __src);
  for (kuint64_t k = 0; kk != 1008; kk += 16)
    *(float64x2_t *)&__src[kk] = vsubq_f64(*(float64x2_t *)&__src[kk], *(float64x2_t *)((char *)this + kk + 3032));
  double result = memcpy(v33, __src, sizeof(v33));
  uint64_t v26 = 0;
  double v27 = (char *)this + 107376;
  do
  {
    uint64_t v28 = 0;
    double v29 = 0.0;
    do
    {
      double v29 = v29 + *(double *)&v27[v28 + 8] * *(double *)&v33[v28 + 8] + *(double *)&v27[v28] * *(double *)&v33[v28];
      v28 += 16;
    }
    while (v28 != 1008);
    *((double *)this + v26++ + 1610689) = v29;
    v27 += 1008;
  }
  while (v26 != 26);
  return result;
}

void sub_1DBB9CC84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::UpdateShapeSic3d(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 12886728;
  do
  {
    *(_OWORD *)&v3[v2] = *(_OWORD *)((char *)this + v2 + 3032);
    v2 += 16;
  }
  while (v2 != 1008);
  for (uint64_t i = 0; i != 26; ++i)
  {
    uint64_t v5 = (const double *)((char *)this + 8 * i + 12885512);
    memcpy(__dst, (char *)this + 1008 * i + 107376, sizeof(__dst));
    uint64_t v6 = 0;
    float64x2_t v7 = vld1q_dup_f64(v5);
    do
    {
      *(float64x2_t *)&__dst[v6] = vmulq_f64(v7, *(float64x2_t *)&__dst[v6]);
      v6 += 16;
    }
    while (v6 != 1008);
    memcpy(v10, __dst, sizeof(v10));
    for (uint64_t j = 0; j != 1008; j += 16)
      *(float64x2_t *)&v3[j] = vaddq_f64(*(float64x2_t *)&v10[j], *(float64x2_t *)&v3[j]);
  }
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::TransformShapeSic3d((uint64_t)this, (uint64_t)v3, __dst);
  return memcpy((char *)this + 12885720, __dst, 0x3F0uLL);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch3d::Constrain3d(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this)
{
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::Optimize3dOrthographic(this);

  return memcpy((char *)this + 8, (char *)this + 12884432, 0x3F0uLL);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch3d::InverseTransformShapeSic3d(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = (double *)(a1 + 12885464);
  bzero(a3, 0x3F0uLL);
  uint64_t v6 = 0;
  double v7 = *v5;
  double v8 = v5[1];
  double v10 = v5[2];
  double v9 = v5[3];
  double v11 = *v5 * v10 + v9 * v8;
  double v12 = v5[4] * v5[4];
  double v13 = v8 * v10 - v9 * *v5;
  do
  {
    double v14 = *(double *)(a2 + v6);
    double v15 = *(double *)(a2 + v6 + 8);
    double v16 = (double *)&a3[v6];
    double *v16 = (v8 * v15 + v7 * v14 - v11) / v12;
    v16[1] = (v7 * v15 + -v8 * v14 + v13) / v12;
    v6 += 16;
  }
  while (v6 != 1008);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch3d::TransformShapeSic3d(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = (double *)(a1 + 12885464);
  bzero(a3, 0x3F0uLL);
  uint64_t v6 = 0;
  double v7 = *v5;
  double v8 = v5[1];
  double v9 = v5[2];
  double v10 = v5[3];
  do
  {
    double v11 = *(double *)(a2 + v6);
    double v12 = *(double *)(a2 + v6 + 8);
    double v13 = (double *)&a3[v6];
    *double v13 = v9 + v12 * -v8 + v7 * v11;
    v13[1] = v7 * v12 + v8 * v11 + v10;
    v6 += 16;
  }
  while (v6 != 1008);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch3d::~AamSearch3d(apple::vision::libraries::facecore::mod::aam::AamSearch3d *this)
{
  apple::vision::libraries::facecore::mod::aam::AamSearch3d::~AamSearch3d(this);

  JUMPOUT(0x1E0196D10);
}

{
  char *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)this + 12885440;
  *(void *)this = &unk_1F360CFB8;
  uint64_t v3 = (void *)*((void *)this + 1610680);
  if (v3)
  {
    *((void *)v2 + 1) = v3;
    operator delete(v3);
  }

  apple::vision::libraries::facecore::mod::aam::AamSearch::~AamSearch(this);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      double v14 = 0;
    }
    double v15 = &v14[4 * v11];
    double v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    uint64_t v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBB9D0F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

double apple::vision::libraries::facecore::mod::aam::ShapeTemplate<apple::vision::libraries::facecore::mod::aam::utils::vec3<double>,63>::operator*=(uint64_t a1, double *a2)
{
  for (uint64_t i = 0; i != 1512; i += 24)
  {
    uint64_t v3 = (double *)(a1 + i);
    double v4 = *(double *)(a1 + i + 8);
    *uint64_t v3 = *a2 * *(double *)(a1 + i);
    v3[1] = *a2 * v4;
    double result = *a2 * *(double *)(a1 + i + 16);
    v3[2] = result;
  }
  return result;
}

void std::valarray<float>::resize(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t v6 = *(unsigned char **)a1;
  if (v6)
  {
    uint64_t v7 = *(unsigned char **)(a1 + 8);
    if (v7 != v6) {
      *(void *)(a1 + 8) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v8 = (float *)operator new(4 * a2);
    *(void *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v8;
  }
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::MatchingModule(apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *a2, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *a3, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a4, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v6 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(a2);
  *((void *)this + 9) = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(*((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray **)this + 1));
  *((_DWORD *)this + 21) = 255;
  std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::resize((uint64_t)v6, 0x320uLL);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::computeFirstAndLastRows(*((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray **)this+ 1), *((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage **)this + 3), (int **)this + 12, (int **)this + 13);
}

void sub_1DBB9D314(_Unwind_Exception *exception_object)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 60 * a2;
  }
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::~MatchingModule(apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2) {
    MEMORY[0x1E0196CF0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C8052888210);
  }
  unint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::matchElements(apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *this)
{
  Points = (void *)apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(*(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray **)this);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(Points[1] - *Points) >> 3) >= 2)
  {
    uint64_t v3 = (void *)apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(*((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray **)this + 1));
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3) >= 2)
    {
      uint64_t v6 = *(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray **)this;
      uint64_t v7 = *((void *)this + 1);
      int v8 = *(_DWORD *)(*(void *)this + 1048);
      if (v8 >= *(_DWORD *)(v7 + 1048)) {
        int v8 = *(_DWORD *)(v7 + 1048);
      }
      int v9 = *((_DWORD *)this + 21);
      *((_DWORD *)this + 20) = v9;
      *((_DWORD *)this + 22) = v8;
      if (v9 > v8)
      {
        int v10 = *((_DWORD *)v6 + v9 + 6);
        int v11 = *(_DWORD *)(v7 + 4 * v9 + 24);
        if (v10 < 801 || v11 <= 800)
        {
          uint64_t v12 = v9 + 5;
          int v13 = v9 - 1;
          do
          {
            int v9 = v13;
            *((_DWORD *)this + 20) = v13;
            if (v12 - 6 <= v8) {
              break;
            }
            v10 += *((_DWORD *)v6 + v12);
            v11 += *(_DWORD *)(v7 + 4 * v12--);
            --v13;
          }
          while (v10 < 801 || v11 < 801);
        }
      }
      int v14 = 0;
      int v19 = 0;
      if (v9 >= v8)
      {
        while (1)
        {
          apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::loopThroughDescriptorsToFindMatches(this, (int *)this + 20, &v19, v4, v5);
          int v15 = *((_DWORD *)this + 20);
          int v16 = *((_DWORD *)this + 22);
          int v14 = v19;
          if (v15 <= v16) {
            break;
          }
          int v17 = v15 - 1;
          int v18 = v15 >> 1;
          if (v18 > v16) {
            int v16 = v18;
          }
          *((_DWORD *)this + 20) = v16;
          *((_DWORD *)this + 21) = v17;
          if (v14 >= 800) {
            goto LABEL_19;
          }
        }
      }
      if (v14 >= 30) {
LABEL_19:
      }
        *((_DWORD *)this + 14) = v14;
    }
  }
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::loopThroughDescriptorsToFindMatches(apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *this, int *a2, int *a3, int32x4_t a4, uint8x8_t a5)
{
  uint8x8_t v5 = (uint64_t *)*((void *)this + 8);
  uint64_t v6 = *v5;
  if ((int)(-1431655765 * ((unint64_t)(v5[1] - *v5) >> 3)) >= 1)
  {
    int v8 = *a3;
    if (*a3 <= 799)
    {
      uint64_t v11 = 0;
      do
      {
        int v12 = *(_DWORD *)(v6 + 24 * v11 + 16);
        if (v12 >= *a2 && v12 <= *((_DWORD *)this + 21))
        {
          uint64_t v13 = *((void *)this + 3);
          int v14 = *(_DWORD *)(v6 + 24 * v11 + 4) + *(_DWORD *)(*((void *)this + 2) + 20) - *(_DWORD *)(v13 + 20);
          int v15 = v14 + 40;
          uint64_t v16 = (v14 - 40) & ~((v14 - 40) >> 31);
          int v17 = *(_DWORD *)(v13 + 4) - 1;
          if (v15 < v17) {
            int v17 = v15;
          }
          if ((int)v16 <= v17)
          {
            int v18 = v17 - v16 + 1;
            int v19 = (int *)(*((void *)this + 12) + 4 * v16);
            while (1)
            {
              int v21 = *v19++;
              int v20 = v21;
              if (v21 != -1) {
                break;
              }
              if (!--v18) {
                goto LABEL_20;
              }
            }
            uint64_t v22 = v17;
            do
              int v23 = *(_DWORD *)(*((void *)this + 13) + 4 * v22);
            while (v23 == -1 && v22-- > v16);
            *(double *)a4.i64 = apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::findMatches(this, v20, v23, v11, a3, a4, a5);
            uint8x8_t v5 = (uint64_t *)*((void *)this + 8);
            uint64_t v6 = *v5;
            int v8 = *a3;
          }
        }
LABEL_20:
        ++v11;
      }
      while (v11 < (int)(-1431655765 * ((unint64_t)(v5[1] - v6) >> 3)) && v8 < 800);
    }
  }
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint8x8_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - (unsigned char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = (void *)((char *)v7 + 60 * a2);
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[3] = 0;
        v7[4] = 0;
        v7[6] = 0xFFFFFFFF00000000;
        *((_DWORD *)v7 + 14) = 0;
        uint64_t v7 = (void *)((char *)v7 + 60);
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x444444444444444) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x222222222222222) {
      unint64_t v11 = 0x444444444444444;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    int v14 = &v12[60 * v8];
    int v15 = &v14[60 * a2];
    uint64_t v16 = v14;
    do
    {
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 3) = 0;
      *((void *)v16 + 4) = 0;
      *((void *)v16 + 6) = 0xFFFFFFFF00000000;
      *((_DWORD *)v16 + 14) = 0;
      v16 += 60;
    }
    while (v16 != v15);
    int v17 = &v12[60 * v11];
    int v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 60);
        long long v21 = *(_OWORD *)(v18 - 44);
        long long v22 = *(_OWORD *)(v18 - 28);
        *((_OWORD *)v14 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)(v14 - 28) = v22;
        *(_OWORD *)(v14 - 44) = v21;
        *(_OWORD *)(v14 - 60) = v20;
        v14 -= 60;
        v18 -= 60;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(60 * a2);
}

double apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::findMatches(apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *this, int a2, int a3, int a4, int *a5, int32x4_t a6, uint8x8_t a7)
{
  if (a2 <= a3)
  {
    int v7 = 999999999;
    unint64_t v9 = (int *)(**((void **)this + 8) + 24 * a4);
    uint64_t v10 = **((void **)this + 9);
    uint64_t v11 = a2;
    int v12 = a3 + 1;
    int v13 = 1000000000;
    int v14 = -1;
    do
    {
      int v15 = (int *)(v10 + 24 * v11);
      int v16 = v15[4];
      if (v16 >= *((_DWORD *)this + 20) && v16 <= *((_DWORD *)this + 21))
      {
        uint64_t v17 = *v9;
        uint64_t v18 = *v15;
        int v19 = (int *)*((void *)this + 2);
        long long v20 = (int *)*((void *)this + 3);
        int v21 = v17 + v19[4] - v20[4] - v18;
        if (v21 < 0) {
          int v21 = v18 - (v17 + v19[4] - v20[4]);
        }
        if (v21 <= 40)
        {
          int v22 = *(_DWORD *)(v10 + 24 * v11 + 20);
          int v23 = v9[5];
          BOOL v24 = v23 == v22 || v23 == (((_BYTE)v22 + 62) & 0x3F);
          int v25 = ((_BYTE)v22 + 2) & 0x3F;
          if (v24 || v23 == v25)
          {
            uint64_t v27 = *((void *)v19 + 3);
            uint64_t v28 = *v19;
            double v29 = (unsigned __int8 *)(v27 + (int)v28 * (uint64_t)v9[1] + v17);
            uint64_t v30 = *((void *)v20 + 3);
            int v31 = v15[1];
            uint64_t v32 = *v20;
            int v33 = *v29 - *(unsigned __int8 *)(v30 + (int)v32 * (uint64_t)v31 + v18);
            if (v33 < 0) {
              int v33 = *(unsigned __int8 *)(v30 + (int)v32 * (uint64_t)v31 + v18) - *v29;
            }
            if (v33 <= 0x19)
            {
              int v34 = 0;
              uint64_t v35 = (uint64_t)&v29[-2 * v28 - 2];
              double v36 = (unsigned __int8 *)(v30 + v18 + (int)v32 * (uint64_t)v31 - 2 * v32 + 2);
              int v37 = 5;
              do
              {
                a6.i32[0] = *(_DWORD *)v35;
                a7.i32[0] = *((_DWORD *)v36 - 1);
                a7 = (uint8x8_t)vmovl_u8(a7).u64[0];
                int32x4_t v38 = (int32x4_t)vsubl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8), (uint16x4_t)a7);
                a6 = vmulq_s32(v38, v38);
                int v39 = *(unsigned __int8 *)(v35 + 4) - *v36;
                a6.i32[0] = vaddvq_s32(a6);
                v34 += a6.i32[0] + v39 * v39;
                v35 += v28;
                v36 += v32;
                --v37;
              }
              while (v37);
              if (v34 >= v13)
              {
                if (v34 < v7) {
                  int v7 = v34;
                }
              }
              else
              {
                int v13 = v34;
                int v14 = v11;
              }
            }
          }
        }
      }
      ++v11;
    }
    while (v12 != v11);
    if (v13 < 0x8000)
    {
      if (v7)
      {
        int v40 = 100 * v13 / v7;
        if (v40 <= 19)
        {
          uint64_t v41 = (int32x2_t *)(**((void **)this + 8) + 24 * a4);
          __int32 v42 = v41[2].i32[1];
          uint64_t v43 = (int32x2_t *)(**((void **)this + 9) + 24 * v14);
          __int32 v44 = v43[2].i32[1];
          uint64_t v45 = 60 * *a5;
          uint64_t v46 = *((void *)this + 4) + v45;
          *(int32x2_t *)a6.i8 = vadd_s32(*(int32x2_t *)(*((void *)this + 2) + 16), *v41);
          int32x2_t v47 = vadd_s32(*(int32x2_t *)(*((void *)this + 3) + 16), *v43);
          *(_DWORD *)(v46 + 52) = 100 - v40;
          *(void *)uint64_t v46 = a6.i64[0];
          *(void *)(v46 + 8) = 0;
          *(_DWORD *)(v46 + 16) = v13;
          *(_DWORD *)(v46 + 20) = v42;
          double v48 = (int32x2_t *)(*((void *)this + 4) + v45);
          v48[3] = v47;
          v48[4] = 0;
          v48[5].i32[0] = v13;
          v48[5].i32[1] = v44;
          *(_DWORD *)(*((void *)this + 4) + v45 + 48) = 1;
          ++*a5;
        }
      }
    }
  }
  return *(double *)a6.i64;
}

#error "1DBB9DAC8: too big function (funcsize=0)"

#error "1DBBC2430: too big function (funcsize=0)"

void *apple::vision::libraries::facecore::processing::tracking::keypointtracker::storeIndexOfCornerInRow(void *result, uint64_t a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  *(_DWORD *)(a2 + 4 * *(int *)(*result + 4)) = 0;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3);
  if ((int)v4 >= 2)
  {
    uint8x8_t v5 = (int *)(v3 + 28);
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *v5;
      if (v7 != *(v5 - 6)) {
        *(_DWORD *)(a2 + 4 * v7) = v6;
      }
      v5 += 6;
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

BOOL apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkLeftForCorner(void *a1, int a2, _DWORD *a3)
{
  unsigned int v3 = a2 - 1;
  BOOL result = 0;
  if (a2 >= 1)
  {
    unint64_t v4 = (_DWORD *)(*a1 + 24 * v3);
    if (*v4 == *a3 - 1
      && v4[1] == a3[1]
      && *(_DWORD *)(*a1 + 24 * v3 + 16) >= *(_DWORD *)(*a1 + 24 * a2 + 16))
    {
      return 1;
    }
  }
  return result;
}

BOOL apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkRightForCorner(uint64_t *a1, signed int a2, _DWORD *a3)
{
  uint64_t v3 = *a1;
  BOOL result = 0;
  if ((int)(-1431655765 * ((unint64_t)(a1[1] - *a1) >> 3) - 1) > a2)
  {
    uint64_t v4 = a2 + 1;
    uint8x8_t v5 = (_DWORD *)(v3 + 24 * v4);
    if (*v5 == *a3 + 1 && v5[1] == a3[1] && *(_DWORD *)(v3 + 24 * v4 + 16) >= *(_DWORD *)(v3 + 24 * a2 + 16)) {
      return 1;
    }
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkAboveForCorner(uint64_t *a1, _DWORD *a2, uint64_t a3, int a4)
{
  int v4 = a2[1];
  if (v4 && *(_DWORD *)(a3 + 4 * (v4 - 1)) != -1)
  {
    uint64_t v5 = *a1;
    if (*(_DWORD *)(*a1 + 4) >= v4 - 1) {
      int v6 = 0;
    }
    else {
      int v6 = *(_DWORD *)(a3 + 4 * (v4 - 1));
    }
    int v7 = v6;
    unint64_t v8 = (_DWORD *)(v5 + 24 * v6);
    int v9 = v8[1];
    if (v9 < v4)
    {
      do
      {
        if (*v8 >= *a2 - 1) {
          break;
        }
        ++v7;
        int v10 = v8[7];
        v8 += 6;
      }
      while (v10 < v4);
      int v9 = *(_DWORD *)(v5 + 24 * v7 + 4);
    }
    if (v9 < v4)
    {
      int v11 = *a2 + 1;
      int v12 = (_DWORD *)(v5 + 24 * a4 + 16);
      int v13 = (_DWORD *)(v5 + 24 * v7 + 16);
      do
      {
        int v14 = *(v13 - 4);
        if (v14 > v11) {
          break;
        }
        BOOL v16 = v14 == v11 || v14 == *a2 || v14 == *a2 - 1;
        if (v16 && *v13 >= *v12) {
          return 1;
        }
        int v17 = v13[3];
        v13 += 6;
      }
      while (v17 < v4);
    }
  }
  return 0;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkBelowForCorner(uint64_t *a1, int *a2, uint64_t a3, int a4, int a5)
{
  int v5 = a2[1];
  if (v5 != a4)
  {
    int v6 = v5 + 1;
    if (*(_DWORD *)(a3 + 4 * (v5 + 1)) != -1)
    {
      uint64_t v7 = *a1;
      int v8 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
      if (v8 >= 1)
      {
        if (*(_DWORD *)(v7 + 4) <= v5) {
          int v9 = *(_DWORD *)(a3 + 4 * (v5 + 1));
        }
        else {
          int v9 = 0;
        }
        if (v9 < v8)
        {
          for (uint64_t i = (_DWORD *)(v7 + 24 * v9 + 4); *i == v6 && *(i - 1) < *a2 - 1; i += 6)
          {
            if (v8 == ++v9) {
              return 0;
            }
          }
        }
        BOOL v11 = __OFSUB__(v8, v9);
        int v12 = v8 - v9;
        if (!((v12 < 0) ^ v11 | (v12 == 0)))
        {
          int v13 = (_DWORD *)(v7 + 24 * a5 + 16);
          for (uint64_t j = (int *)(v7 + 24 * v9); j[1] == v6; j += 6)
          {
            int v15 = *j;
            int v16 = *a2;
            int v17 = *a2 + 1;
            if (*j > v17) {
              break;
            }
            BOOL v19 = v15 == v17 || v15 == v16 || v15 == v16 - 1;
            if (v19 && j[4] >= *v13) {
              return 1;
            }
            uint64_t result = 0;
            if (!--v12) {
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::isThereIsACornerAroundWithBetterScore(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  int v8 = (int *)(*a1 + 24 * a2);
  if (apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkLeftForCorner(a1, a2, v8)
    || apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkRightForCorner(a1, a2, v8)
    || (apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkAboveForCorner(a1, v8, a3, a2) & 1) != 0)
  {
    return 1;
  }

  return apple::vision::libraries::facecore::processing::tracking::keypointtracker::checkBelowForCorner(a1, v8, a3, a4, a2);
}

void *apple::vision::libraries::facecore::processing::tracking::keypointtracker::nonMaxSuppression(apple::vision::libraries::facecore::processing::tracking::keypointtracker *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *a2, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a3, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *a4)
{
  uint64_t result = (void *)apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(this);
  if (result[1] != *result)
  {
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(this);
    uint64_t Points = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(a3);
    int v8 = (void *)apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(this);
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::resize(Points, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[1] - *v8) >> 3));
    operator new[]();
  }
  return result;
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    int v14 = &v12[24 * v8];
    int v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    int v17 = &v14[v16];
    BOOL v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t MY_TRANSPOSE(uint64_t result, const float *a2, int a3, int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a5;
    do
    {
      if (a4 >= 1)
      {
        uint64_t v7 = 0;
        unint64_t v8 = a2;
        do
        {
          if (a3 >= 1)
          {
            uint64_t v9 = 0;
            int v10 = a3 + a3 / 4;
            do
            {
              *(float *)(result + 4 * ((v5 + v7 * v6) * a3 + v10 % a3)) = v8[v9++];
              --v10;
            }
            while (a3 != v9);
          }
          ++v7;
          v8 += a3;
        }
        while (v7 != a4);
      }
      ++v5;
      a2 += a4 * (uint64_t)a3;
    }
    while (v5 != v6);
  }
  return result;
}

void computeDoG(float *a1, int a2, unsigned int a3, int a4, float **a5)
{
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v16[3] = a5;
  size_t v9 = (a3 >> 2) + 1;
  global_queue = dispatch_get_global_queue(2, 0);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = ___Z10computeDoGPfjjjPS__block_invoke;
  v11[3] = &unk_1E6C28CF0;
  int v12 = 4;
  unsigned int v13 = a3;
  int v14 = a2;
  int v15 = a4;
  v11[4] = v16;
  v11[5] = a1;
  dispatch_apply(v9, global_queue, v11);
  _Block_object_dispose(v16, 8);
}

uint64_t ___Z10computeDoGPfjjjPS__block_invoke(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 48);
  int v3 = v2 * a2;
  int v4 = v2 + v2 * a2;
  if (v3 < v4)
  {
    int v5 = *(_DWORD *)(result + 52);
    int v6 = v5 - 1;
    while (1)
    {
      if (v3 >= v5) {
        return result;
      }
      uint64_t v7 = *(unsigned int *)(result + 56);
      int v8 = v7 * v3;
      unsigned int v9 = v3 ? v7 * v3 - v7 : 0;
      BOOL v10 = v3 == v6 || v3 == 0;
      float v11 = v10 ? 1.0 : 0.5;
      if ((int)v7 >= 1) {
        break;
      }
LABEL_36:
      if (++v3 == v4) {
        return result;
      }
    }
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 40);
    uint64_t v14 = v8;
    int v15 = (float *)(v13 + 4 * v8);
    uint64_t v16 = v13 + 4 * v9;
    if (v3 == v6) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = (v14 + v7);
    }
    if (!v3) {
      uint64_t v17 = (v14 + v7);
    }
    uint64_t v18 = (v7 - 1);
    uint64_t v19 = v13 + 4 * v17;
    unsigned int v20 = *(_DWORD *)(result + 60);
    while (1)
    {
      if (v12)
      {
        if (v12 != v18)
        {
          float v23 = (float)(v15[v12 + 1] - v15[v12 - 1]) * 0.5;
          goto LABEL_26;
        }
        float v21 = v15[v18];
        float v22 = v15[v18 - 1];
      }
      else
      {
        float v22 = *v15;
        float v21 = v15[1];
      }
      float v23 = v21 - v22;
LABEL_26:
      float v24 = v11 * (float)(*(float *)(v19 + 4 * v12) - *(float *)(v16 + 4 * v12));
      float v25 = fabsf(v24) + 0.00000011921;
      if (v23 >= 0.0)
      {
        float v26 = v23 - v25;
        float v27 = v23 + v25;
        float v28 = 0.7854;
      }
      else
      {
        float v26 = v23 + v25;
        float v27 = v25 - v23;
        float v28 = 2.3562;
      }
      float v29 = v28
          + (float)((float)((float)((float)((float)(v26 / v27) * 0.1821) * (float)(v26 / v27)) + -0.9675)
                  * (float)(v26 / v27));
      float v30 = -v29;
      if (v24 >= 0.0) {
        float v30 = v29;
      }
      while (v30 > 6.28318531)
        float v30 = v30 + -6.2832;
      while (v30 < 0.0)
        float v30 = v30 + 6.2832;
      *(float *)&int v31 = (float)(v24 * v24) + (float)(v23 * v23);
      float v32 = (float)((float)((float)((float)(*(float *)&v31 * -0.5) * COERCE_FLOAT(1597463007 - (v31 >> 1)))
                          * COERCE_FLOAT(1597463007 - (v31 >> 1)))
                  + 1.5)
          * COERCE_FLOAT(1597463007 - (v31 >> 1));
      float v33 = *(float *)&v31 * (float)(v32 * (float)((float)((float)((float)(*(float *)&v31 * -0.5) * v32) * v32) + 1.5));
      float v34 = (float)(v30 * (float)v20) / 6.2832;
      unsigned int v35 = vcvtms_s32_f32(v34);
      float v36 = v34 - (float)(int)floorf(v34);
      *(float *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) + 8 * (v35 % v20))
               + 4 * (v12 + v14)) = v33 * (float)(1.0 - v36);
      *(float *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) + 8 * ((v35 + 1) % v20))
               + 4 * (v12 + v14)) = v33 * v36;
      if (++v12 == v7) {
        goto LABEL_36;
      }
    }
  }
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::InitData(apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *this, float *a2, int a3, int a4)
{
  *((_DWORD *)this + 1) = a3;
  *((_DWORD *)this + 2) = a4;
  if (*((void *)this + 7))
  {
    unint64_t v5 = *(unsigned int *)this;
    if (!v5) {
      goto LABEL_8;
    }
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*((void *)this + 7) + 8 * i);
      if (v7)
      {
        MEMORY[0x1E0196CF0](v7, 0x1000C8052888210);
        *(void *)(*((void *)this + 7) + 8 * i) = 0;
        unint64_t v5 = *(unsigned int *)this;
      }
    }
    if (*((void *)this + 7)) {
LABEL_8:
    }
      MEMORY[0x1E0196CF0]();
  }
  operator new[]();
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::ComputeFastDenseDescriptor(apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *this, unsigned int a2, unsigned int a3, double *a4, unsigned __int8 *a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::TriangleKernelConvol(apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *this, const float *a2, float *a3)
{
}

void apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::~GradientDenseDescriptor(apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *this)
{
  if (*((void *)this + 7))
  {
    unint64_t v2 = *(unsigned int *)this;
    if (!v2) {
      goto LABEL_8;
    }
    for (unint64_t i = 0; i < v2; *(void *)(v4 + 8 * i++) = 0)
    {
      uint64_t v4 = *((void *)this + 7);
      uint64_t v5 = *(void *)(v4 + 8 * i);
      if (v5)
      {
        MEMORY[0x1E0196CF0](v5, 0x1000C8052888210);
        uint64_t v4 = *((void *)this + 7);
        unint64_t v2 = *(unsigned int *)this;
      }
    }
    if (*((void *)this + 7)) {
LABEL_8:
    }
      MEMORY[0x1E0196CF0]();
    *((void *)this + 7) = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    MEMORY[0x1E0196CF0](v6, 0x1000C8052888210);
    *((void *)this + 3) = 0;
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7)
  {
    MEMORY[0x1E0196CF0](v7, 0x1000C8000313F17);
    *((void *)this + 4) = 0;
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8)
  {
    MEMORY[0x1E0196CF0](v8, 0x1000C8000313F17);
    *((void *)this + 5) = 0;
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9)
  {
    MEMORY[0x1E0196CF0](v9, 0x1000C8052888210);
    *((void *)this + 6) = 0;
  }
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingArray::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem*,apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem*>((char *)a1, *(char **)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

char *std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem*,apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x444444444444444) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x222222222222222) {
      unint64_t v12 = 0x444444444444444;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  int v15 = (unsigned char *)*((void *)result + 1);
  if (0xEEEEEEEEEEEEEEEFLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x444444444444445) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingElem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[60 * v4];
  return result;
}

__n128 apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::FrontalSVMClassifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 2304) = 0;
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)(a1 + 3776) = *(_OWORD *)(a3 + 16);
  *(__n128 *)(a1 + 3760) = result;
  *(void *)(a1 + 3792) = a2;
  return result;
}

void apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::~FrontalSVMClassifier(apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier *this)
{
  uint64_t v1 = *((void *)this + 288);
  if (v1) {
    MEMORY[0x1E0196D10](v1, 0x1090C40A7E26980);
  }
}

double apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::setThreshold(apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier *this, double *a2)
{
  double result = *a2;
  *((double *)this + 289) = *a2;
  return result;
}

void apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier::classifyFace(apple::vision::libraries::facecore::mod::classifiers::FrontalSVMClassifier *this, const unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, int a8, BOOL a9)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 288))
  {
    __float2 v16 = __sincosf_stret((float)a7 / 360.0);
    uint64_t v17 = 0;
    float v18 = (float)a8 / 12.0;
    while (1)
    {
      uint64_t v19 = 0;
      float v20 = (float)v17 + -12.0;
      uint64_t v21 = 23 - v17;
      if (!a9) {
        uint64_t v21 = v17;
      }
      float v22 = (char *)this + 96 * v21;
      do
      {
        float v23 = (float)v19 + -12.0;
        float v24 = (float)((float)a5
                    + (float)(v18 * (float)((float)(v23 * (float)-v16.__sinval) + (float)(v16.__cosval * v20))))
            + 0.5;
        float v25 = (float)((float)a6 + (float)(v18 * (float)((float)(v16.__cosval * v23) + (float)(v16.__sinval * v20))))
            + 0.5;
        int v26 = (int)v24 & ~((int)v24 >> 31);
        int v27 = (int)v25 & ~((int)v25 >> 31);
        if (v26 >= a3) {
          int v26 = a3 - 1;
        }
        if (v27 >= a4) {
          int v27 = a4 - 1;
        }
        LOBYTE(v25) = a2[v26 + v27 * a3];
        *(float *)&v22[4 * v19++] = (float)LODWORD(v25);
      }
      while (v19 != 24);
      if (++v17 == 24)
      {
        v29[0] = 8;
        long long v30 = 0u;
        long long v31 = 0u;
        uint64_t v32 = 0;
        apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::InitData((apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *)v29, (float *)this, 24, 24);
      }
    }
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E0196B30](exception, "No SVM model has been loaded");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DBBEAED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamLoader::loadTexture()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v10 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v1 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v8[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = v1;
  v8[1] = 0;
  unint64_t v2 = (std::ios_base *)((char *)v8 + *(void *)(v8[0] - 24));
  std::ios_base::init(v2, v9);
  uint64_t v3 = MEMORY[0x1E4FBA460] + 24;
  v2[1].__vftable = 0;
  v2[1].__fmtflags_ = -1;
  v8[0] = v3;
  uint64_t v10 = v0;
  MEMORY[0x1E0196B80](v9);
  std::ifstream::open();
  if (v9[15])
  {
    int v7 = 0;
    std::istream::read();
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "Number of image PCs in texture model file doesn't match code");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = __cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  MEMORY[0x1E0196B40](v4, &v6);
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DBBEB654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  __cxa_free_exception(v57);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  std::ifstream::~ifstream(&a57);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1DBBEB9E4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1E0196CB0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0196CB0](a1 + 128);
  return a1;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1E0196B90](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1E0196CB0](a1 + 53);
  return a1;
}

void apple::vision::libraries::facecore::mod::aam::AamLoader::loadModel()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v10 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v1 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v8[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = v1;
  v8[1] = 0;
  uint64_t v2 = (std::ios_base *)((char *)v8 + *(void *)(v8[0] - 24));
  std::ios_base::init(v2, v9);
  uint64_t v3 = MEMORY[0x1E4FBA460] + 24;
  v2[1].__vftable = 0;
  v2[1].__fmtflags_ = -1;
  v8[0] = v3;
  uint64_t v10 = v0;
  MEMORY[0x1E0196B80](v9);
  std::ifstream::open();
  if (v9[15])
  {
    int v7 = 0;
    std::istream::read();
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = __cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  MEMORY[0x1E0196B40](v4, &v6);
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DBBEC940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  __cxa_free_exception(v61);
  a21 = (void *)*MEMORY[0x1E4FBA408];
  uint64_t v63 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)&a21 + *(a21 - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  a23 = v63;
  a24 = MEMORY[0x1E4FBA470] + 16;
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1E0196CB0](&a40);
  a61 = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)&a61 + *(void *)(a61 - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1E0196B90](a12);
  std::istream::~istream();
  MEMORY[0x1E0196CB0](a11);
  _Unwind_Resume(a1);
}

void std::valarray<unsigned int>::resize(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = *(unsigned char **)a1;
  if (v6)
  {
    int v7 = *(unsigned char **)(a1 + 8);
    if (v7 != v6) {
      *(void *)(a1 + 8) = &v7[(v6 - v7 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    if (a2 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = operator new(4 * a2);
    *(void *)a1 = v8;
    do
    {
      *v8++ = a3;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v8;
  }
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamLoader::loadOldModel(uint64_t a1, uint64_t a2)
{
  v18[19] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = MEMORY[0x1E4FBA460] + 64;
  v18[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v4 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v16[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = v5;
  v16[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24));
  std::ios_base::init(v6, v17);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v16[0] = v7;
  v18[0] = v3;
  MEMORY[0x1E0196B80](v17);
  std::ifstream::open();
  if (!v17[15])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x1E0196B40](exception, v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  for (uint64_t i = 5; i != 7; ++i)
  {
    long double v9 = ldexp(1.0, i);
    int v10 = (int)(v9 * v9);
    v15[0] = 0;
    uint64_t v11 = (void *)(a2 + 8 * i + 9480616);
    if (!*v11) {
      operator new[]();
    }
    v15[0] = 0;
    if (v10 >= 1)
    {
      for (int j = 0; j < v10; v15[0] = j)
      {
        MEMORY[0x1E0196BC0](v16, *v11 + 8 * j);
        int j = v15[0] + 1;
      }
    }
    MEMORY[0x1E0196BD0](v16, v15);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)), *(_DWORD *)((char *)&v17[2] + *(void *)(v16[0] - 24)) | 4);
  }
  v16[0] = *v4;
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = v4[3];
  MEMORY[0x1E0196B90](v17);
  std::istream::~istream();
  MEMORY[0x1E0196CB0](v18);
  return 1;
}

void sub_1DBBED01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ifstream::~ifstream(&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1E0196BE0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1E0196BF0](v13);
  return a1;
}

void sub_1DBBED1D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1E0196BF0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DBBED1B4);
}

void sub_1DBBED228(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_1DBBED3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *char __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void apple::vision::libraries::facecore::utils::ImageRotationUtils::extractCropFromImageAndRotateByAngle(apple::vision::libraries::facecore::utils::ImageRotationUtils *this, image *a2)
{
}

uint64_t apple::vision::libraries::facecore::utils::ImageRotationUtils::rotateImageByAngle(apple::vision::libraries::facecore::utils::ImageRotationUtils *this, image *a2)
{
  if (((int)a2 % 360) <= 0xFFFFFE97) {
    int v2 = (int)a2 % 360;
  }
  else {
    int v2 = (int)a2 % 360 + 360;
  }
  if (v2) {
    apple::vision::libraries::facecore::utils::ImageRotationUtils::extractCropFromImageAndRotateByAngle(this, 0);
  }
  return *(void *)this;
}

uint64_t apple::vision::libraries::facecore::utils::ImageRotationUtils::computeFaceCoordinatesInImageRotatedByAngle(uint64_t a1, uint64_t a2, coord *a3, image *a4)
{
  apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(a1, (int8x8_t *)(a2 + 20), a3, a4);
  apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(a1, (int8x8_t *)(a2 + 4), a3, v7);
  apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(a1, (int8x8_t *)(a2 + 12), a3, v8);
  uint64_t result = apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(a1, (int8x8_t *)(a2 + 28), a3, v9);
  uint64_t v12 = *(void *)(a2 + 80);
  unint64_t v13 = *(void *)(a2 + 88) - v12;
  if (v13 && (int)(v13 >> 3) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      uint64_t result = apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(a1, (int8x8_t *)(v12 + v14), a3, v11);
      ++v15;
      uint64_t v12 = *(void *)(a2 + 80);
      v14 += 8;
    }
    while (v15 < (int)((unint64_t)(*(void *)(a2 + 88) - v12) >> 3));
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::utils::ImageRotationUtils::computeCoordinateInImageRotatedByAngle(uint64_t this, int8x8_t *a2, coord *a3, image *a4)
{
  int v4 = (int)this % 360;
  if (((int)this % 360) > 0xFFFFFE97) {
    int v4 = (int)this % 360 + 360;
  }
  switch(v4)
  {
    case 90:
      __int32 v5 = a2->i32[0];
      a2->i32[0] = a3[1].var1 + ~a2->i32[1];
      a2->i32[1] = v5;
      break;
    case 270:
      int v6 = a3[1].var0 + ~a2->i32[0];
      a2->i32[0] = a2->i32[1];
      a2->i32[1] = v6;
      break;
    case 180:
      *a2 = (int8x8_t)vadd_s32((int32x2_t)a3[1], (int32x2_t)vmvn_s8(*a2));
      break;
  }
  return this;
}

uint64_t apple::vision::libraries::facecore::utils::ImageRotationUtils::translateFaceCoordinatesByVector(uint64_t result, unsigned int a2, unsigned int a3)
{
  int32x4_t v3 = (int32x4_t)vdupq_lane_s64(__SPAIR64__(a3, a2), 0);
  *(int32x4_t *)(result + 4) = vaddq_s32(*(int32x4_t *)(result + 4), v3);
  *(int32x4_t *)(result + 20) = vaddq_s32(*(int32x4_t *)(result + 20), v3);
  uint64_t v4 = *(void *)(result + 80);
  unint64_t v5 = *(void *)(result + 88) - v4;
  if (v5 && (int)(v5 >> 3) >= 1)
  {
    uint64_t v6 = (v5 >> 3);
    uint64_t v7 = (_DWORD *)(v4 + 4);
    do
    {
      *(v7 - 1) += a2;
      *v7 += a3;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

#error "1DBBED8CC: too big function (funcsize=0)"

void apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogram(const unsigned __int8 *a1@<X1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, void *a8@<X8>, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::FaceImage((apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *)v24, 2);
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::SetImage((apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *)v24, a1, a2, a3, a4, a5, a6, a7, 100.0 / (float)a7, a9);
  operator new[]();
}

void sub_1DBC134E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  float v25 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v25;
    operator delete(v25);
  }
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::~FaceImage((apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *)&a23);
  _Unwind_Resume(a1);
}

void *apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetHistogram@<X0>(const unsigned __int8 *a1@<X1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, void *a7@<X8>)
{
  uint64_t v46 = 0;
  uint64_t result = std::vector<double>::vector(a7, 0x24uLL, &v46);
  int v44 = a5;
  int v15 = a6 + a5;
  if (a5 - a6 <= a6 + a5)
  {
    int v16 = 0;
    int v17 = a6 + a4;
    int v18 = a3 - 1;
    double v19 = (double)a6;
    uint64_t v20 = a4 - a6;
    uint64_t v21 = a2 - 1;
    uint64_t v22 = a5 - a6;
    int v42 = a2;
    uint64_t v40 = a2;
    uint64_t v23 = v18;
    int v24 = v15 + 1;
    int v39 = a4 - a6 - 1;
    int v25 = (2 * a6) | 1;
    int v41 = a4 - a6;
    uint64_t v43 = result;
    int v37 = a6 + a4;
    int v38 = a6;
    int v36 = v15 + 1;
    do
    {
      if ((int)v20 <= v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = *result;
        unint64_t v45 = (uint64_t)(result[1] - *result) >> 3;
        do
        {
          if (v22 >= 1
            && v22 < v23
            && v20 + v27 >= 1
            && v20 + v27 < v21
            && sqrt((double)(v44 - (int)v22) * (double)(v44 - (int)v22) + (double)a6 * (double)a6) <= v19)
          {
            float v29 = (float)(a1[v20 + (v22 + 1) * v40 + v27] - a1[v20 + (v22 - 1) * v40 + v27]);
            float v30 = (float)(a1[v41 + 1 + (int)v22 * v42 + (int)v27] - a1[v39 + (int)v22 * v42 + (int)v27]);
            float v31 = atan2f(v29, v30);
            if (v31 < 0.0) {
              float v31 = v31 + 6.2832;
            }
            LODWORD(v32) = (float)((float)(v31 * 180.0) / 31.416);
            if (v32 <= 0x23) {
              unint64_t v32 = v32;
            }
            else {
              unint64_t v32 = 0;
            }
            if (v45 <= v32) {
              std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
            }
            ++v16;
            *(double *)(v28 + 8 * v32) = *(double *)(v28 + 8 * v32) + sqrtf((float)(v29 * v29) + (float)(v30 * v30));
          }
          ++v27;
          --a6;
        }
        while (v25 != v27);
        uint64_t result = v43;
        int v17 = v37;
        a6 = v38;
        int v24 = v36;
        uint64_t v26 = v22 + 1;
      }
      else
      {
        uint64_t v26 = v22 + 1;
      }
      uint64_t v22 = v26;
    }
    while (v24 != v26);
    if (v16 >= 1)
    {
      uint64_t v33 = 0;
      uint64_t v34 = *result;
      uint64_t v35 = (uint64_t)(result[1] - *result) >> 3;
      do
      {
        if (v35 == v33) {
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
        }
        *(double *)(v34 + 8 * v33) = *(double *)(v34 + 8 * v33) / (double)v16;
        ++v33;
      }
      while (v33 != 36);
    }
  }
  return result;
}

void sub_1DBC13850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v18 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::SmoothHistogram(uint64_t a1, void *a2, int a3)
{
  unint64_t v5 = (uint64_t)(a2[1] - *a2) >> 3;
  uint64_t v22 = 0;
  std::vector<double>::vector(&v23, v5, &v22);
  uint64_t v6 = v23;
  unint64_t v7 = v24 - v23;
  uint64_t v8 = (void *)*a2;
  uint64_t v9 = a2[1] - *a2;
  unint64_t v10 = v9 >> 3;
  if ((int)v7 >= 1)
  {
    unint64_t v11 = 0;
    int v12 = a3 + 1;
    int v13 = -a3;
    uint64_t v14 = ((unint64_t)((char *)v24 - (char *)v23) >> 3);
    do
    {
      if (v12 + (int)v11 >= (int)v10) {
        signed int v15 = v9 >> 3;
      }
      else {
        signed int v15 = v12 + v11;
      }
      if ((int)((v11 - a3) & ~(((int)v11 - a3) >> 31)) >= v15)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = v13 & ~(v13 >> 31);
        do
        {
          if (v10 <= v17 + v16 || v7 <= v11) {
            std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
          }
          v6[v11] = *(double *)&v8[v17 + v16++] + v6[v11];
        }
        while (v17 + v16 < v15);
      }
      if (v11 == v7) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      v6[v11] = v6[v11] / (double)(int)v16;
      ++v11;
      ++v13;
    }
    while (v11 != v14);
  }
  if ((int)v10 < 1)
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    uint64_t v19 = ((unint64_t)v9 >> 3);
    uint64_t v20 = v6;
    do
    {
      if (!v7 || !v10) {
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v21 = *(void *)v20++;
      *v8++ = v21;
      --v10;
      --v7;
      --v19;
    }
    while (v19);
  }
  int v24 = v6;
  operator delete(v6);
}

void sub_1DBC139E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::NormalizeHistogram(uint64_t a1, double **a2)
{
  int v2 = *a2;
  int32x4_t v3 = a2[1];
  uint64_t v4 = (char *)v3 - (char *)*a2;
  uint64_t v5 = v4 >> 3;
  if ((int)(v4 >> 3) >= 1)
  {
    uint64_t v6 = (int)(v4 >> 3);
    double v7 = 0.0;
    uint64_t v8 = *a2;
    do
    {
      if (v3 == v2) {
        goto LABEL_10;
      }
      long double v9 = *v8++;
      double v7 = v7 + pow(v9, 4.0);
      --v6;
    }
    while (v6);
    if (v7 > 0.0)
    {
      uint64_t v10 = ((unint64_t)v4 >> 3);
      double v11 = sqrt(v7);
      while (v5)
      {
        *int v2 = *v2 / v11;
        ++v2;
        --v5;
        if (!--v10) {
          return;
        }
      }
LABEL_10:
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
  }
}

double apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogramAccuracy(double *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v46 = 0;
  int32x2_t v47 = 0;
  double v48 = 0;
  do
  {
    double Distance = apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetDistance((uint64_t)a1, a2, v3, 145);
    double v5 = Distance;
    uint64_t v6 = v50;
    if (v50 >= v51)
    {
      a1 = (double *)__p;
      uint64_t v8 = ((char *)v50 - (unsigned char *)__p) >> 3;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = (char *)v51 - (unsigned char *)__p;
      if (((char *)v51 - (unsigned char *)__p) >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v51, v11);
        a1 = (double *)__p;
        uint64_t v6 = v50;
      }
      else
      {
        int v12 = 0;
      }
      int v13 = (double *)&v12[8 * v8];
      *int v13 = v5;
      double v7 = v13 + 1;
      while (v6 != a1)
      {
        uint64_t v14 = *((void *)v6-- - 1);
        *((void *)v13-- - 1) = v14;
      }
      __p = v13;
      uint64_t v50 = v7;
      uint64_t v51 = (double *)&v12[8 * v11];
      if (a1) {
        operator delete(a1);
      }
    }
    else
    {
      *uint64_t v50 = Distance;
      double v7 = v6 + 1;
    }
    uint64_t v50 = v7;
    signed int v15 = v47;
    if (v47 >= v48)
    {
      a1 = v46;
      uint64_t v17 = (v47 - (char *)v46) >> 3;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v48 - (char *)v46;
      if ((v48 - (char *)v46) >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v48, v20);
        a1 = v46;
        signed int v15 = v47;
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = &v21[8 * v17];
      *(void *)uint64_t v22 = apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogramArray[145 * v3];
      uint64_t v16 = v22 + 8;
      while (v15 != (char *)a1)
      {
        uint64_t v23 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v22 - 1) = v23;
        v22 -= 8;
      }
      uint64_t v46 = (double *)v22;
      double v48 = &v21[8 * v20];
      if (a1) {
        operator delete(a1);
      }
    }
    else
    {
      *(void *)int32x2_t v47 = apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogramArray[145 * v3];
      uint64_t v16 = v47 + 8;
    }
    int32x2_t v47 = v16;
    ++v3;
  }
  while (v3 != 403);
  int v24 = (double *)__p;
  uint64_t v25 = (char *)v50 - (unsigned char *)__p;
  unint64_t v26 = ((char *)v50 - (unsigned char *)__p) >> 3;
  uint64_t v27 = v46;
  if ((int)v26 > 1)
  {
    unint64_t v28 = 0;
    unint64_t v29 = (v16 - (char *)v46) >> 3;
    int64_t v30 = (int)(v25 >> 3);
    uint64_t v31 = ((unint64_t)v25 >> 3);
    uint64_t v32 = 1;
    do
    {
      unint64_t v33 = v28 + 1;
      if ((uint64_t)(v28 + 1) < v30)
      {
        unint64_t v34 = v32;
        int v35 = v28;
        while (v26 > v34 && v26 > v35)
        {
          if (v24[v34] < v24[v35]) {
            int v35 = v34;
          }
          if (v31 == ++v34) {
            goto LABEL_46;
          }
        }
LABEL_66:
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
      }
      int v35 = v28;
LABEL_46:
      if (v28 != v35)
      {
        if (v26 <= v35) {
          goto LABEL_66;
        }
        if (v29 <= v35) {
          goto LABEL_66;
        }
        if (v26 <= v28) {
          goto LABEL_66;
        }
        double v36 = v24[v35];
        double v37 = v46[v35];
        v24[v35] = v24[v28];
        if (v29 <= v28) {
          goto LABEL_66;
        }
        v46[v35] = v46[v28];
        v24[v28] = v36;
        v46[v28] = v37;
      }
      ++v32;
      ++v28;
    }
    while (v33 != v26 - 1);
    uint64_t v27 = v46;
  }
  uint64_t v38 = 0;
  unint64_t v39 = v16 - (char *)v27;
  double v40 = 0.0;
  do
  {
    if (v39 <= 0x17) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    double v40 = v40 + v27[v38++];
  }
  while (v38 != 3);
  uint64_t v41 = 0;
  double v42 = 0.0;
  do
  {
    if (v39 <= 0x4F) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    double v42 = v42 + v27[v41++];
  }
  while (v41 != 10);
  uint64_t v43 = 0;
  double v44 = 0.0;
  do
  {
    if (v39 <= 0x77) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    double v44 = v44 + v27[v43++];
  }
  while (v43 != 15);
  operator delete(v27);
  if (__p)
  {
    uint64_t v50 = (double *)__p;
    operator delete(__p);
  }
  return (v40 / 3.0 + 0.0 + v42 / 10.0 + v44 / 15.0) / 3.0;
}

void sub_1DBC13E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

double apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetDistance(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(double **)a2;
  unint64_t v5 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  LODWORD(v6) = a4 - 1;
  if (a4 - 1 >= (int)v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v6;
  }
  unint64_t v7 = (v6 - 1);
  if ((int)v6 < 1) {
    return 0.0;
  }
  uint64_t v8 = (double *)((char *)&apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogramArray
                + 8 * a4 * a3
                + 8);
  double result = 0.0;
  do
  {
    if (v5 <= v7) {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__throw_out_of_range[abi:ne180100]();
    }
    double v10 = *v4++;
    double v11 = v10;
    double v12 = *v8++;
    double result = result + vabdd_f64(v11, v12);
    --v6;
  }
  while (v6);
  return result;
}

#error "1DBC13F5C: too big function (funcsize=0)"

BOOL apple::vision::libraries::facecore::mod::aam::utils::readFromBase64(apple::vision::libraries::facecore::mod::aam::utils *this, uint64_t a2, char *a3, uint64_t a4, char *a5)
{
  if (a3)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    unsigned int v7 = 4 * this;
    unsigned int v8 = this;
    do
    {
      unint64_t v9 = (unsigned __int8 *)(a2 + v7 / 3uLL);
      int v10 = *v9;
      int v11 = v10 - 65;
      if ((v10 - 65) >= 0x1A)
      {
        if ((v10 - 97) > 0x19)
        {
          if ((v10 - 48) > 9)
          {
            switch(v10)
            {
              case '+':
                int v11 = 62;
                break;
              case '/':
                int v11 = 63;
                break;
              case '=':
                int v11 = 0;
                break;
              default:
                int v11 = *v9;
                break;
            }
          }
          else
          {
            int v11 = v10 + 4;
          }
        }
        else
        {
          int v11 = v10 - 71;
        }
      }
      unsigned int v12 = v9[1];
      unsigned int v13 = v12 - 65;
      if (v12 - 65 >= 0x1A)
      {
        if (v12 - 97 > 0x19)
        {
          if (v12 - 48 > 9)
          {
            switch(v12)
            {
              case '+':
                unsigned int v13 = 62;
                break;
              case '/':
                unsigned int v13 = 63;
                break;
              case '=':
                unsigned int v13 = 0;
                break;
              default:
                unsigned int v13 = v12;
                break;
            }
          }
          else
          {
            unsigned int v13 = v12 + 4;
          }
        }
        else
        {
          unsigned int v13 = v12 - 71;
        }
      }
      int v14 = v5 + this - 3 * (v8 / 3);
      if (v14 == 2)
      {
        LOBYTE(v15) = v13 & 0x3F | ((_BYTE)v11 << 6);
      }
      else if (v14 == 1)
      {
        int v15 = (16 * v11) | (v13 >> 2) & 0xF;
      }
      else
      {
        if (v14) {
          return v6;
        }
        int v15 = (4 * v11) | (v13 >> 4) & 3;
      }
      *(unsigned char *)(a4 + v5) = v15;
      ++v8;
      BOOL v6 = ++v5 >= (unint64_t)a3;
      v7 += 4;
    }
    while (a3 != v5);
  }
  else
  {
    return 1;
  }
  return v6;
}

#error "1DBC38D5C: too big function (funcsize=0)"

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeNonHomogeousDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (result)
  {
    int v5 = 0;
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    int v8 = 0;
    do
    {
      unsigned int v9 = __clz(result);
      int v10 = result << v9;
      int v11 = v9 + v8;
      unsigned int v12 = __clz(~(result << v9));
      if (v12 > v7)
      {
        int v5 = v11;
        unsigned int v6 = v12;
        unsigned int v7 = v12;
      }
      double result = (v10 << v12);
      int v8 = v12 + v11;
    }
    while (result);
    int v13 = 15 - v5;
  }
  else
  {
    unsigned int v6 = 0;
    int v13 = 15;
  }
  int v14 = v13 - v6 + 1;
  if (v14 <= v13)
  {
    int v16 = -v6;
    int v15 = 255;
    do
    {
      if (*(_DWORD *)(a2 + 4 * (((_BYTE)v13 + 1 + (_BYTE)v16) & 0xF)) < v15) {
        int v15 = *(_DWORD *)(a2 + 4 * (((_BYTE)v13 + 1 + (_BYTE)v16) & 0xF));
      }
    }
    while (!__CFADD__(v16++, 1));
  }
  else
  {
    int v15 = 255;
  }
  BOOL v18 = __OFADD__(v14, v13);
  int v20 = v14 + v13;
  char v19 = (v20 < 0) ^ v18;
  int v21 = a4 + v15 - 1;
  int v22 = 2 * v20;
  if (v19) {
    v22 += 64;
  }
  *(_DWORD *)(a3 + 16) = v21;
  *(_DWORD *)(a3 + 20) = v22 | (a5 != 0);
  return result;
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeDescriptor(unsigned int *a1, uint64_t *a2, int a3, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t Points = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(this);
  uint64_t v8 = a2[1] - *a2;
  if (v8)
  {
    unsigned int v9 = (uint64_t *)Points;
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::resize(Points, (int)(v8 >> 3));
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::make_offsets((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures *)v32, (int *)*a1, v10);
    memset(v31, 0, sizeof(v31));
    uint64_t v11 = *a2;
    if ((int)((unint64_t)(a2[1] - *a2) >> 3) >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = 0;
        int v14 = 0;
        uint64_t v15 = v11 + 8 * v12;
        int v16 = *(_DWORD *)(v15 + 4);
        if (v16 >= 0) {
          int v17 = *(_DWORD *)(v15 + 4);
        }
        else {
          int v17 = -v16;
        }
        *(_DWORD *)(v15 + 4) = v17;
        *(void *)(*v9 + 24 * v12) = *(void *)v15;
        uint64_t v11 = *a2;
        int v18 = v16 >> 31;
        if (v16 < 0) {
          int v19 = a3;
        }
        else {
          int v19 = -a3;
        }
        uint64_t v20 = *(int *)(*a2 + 8 * v12) + *((void *)a1 + 3) + (*(int *)(*a2 + 8 * v12 + 4) - 3) * (int)*a1 - 3;
        int v21 = v19 + *(unsigned __int8 *)(v20 + v33);
        int v22 = 1;
        do
        {
          int v23 = *(unsigned __int8 *)(v20 + *(int *)&v32[v13]);
          int v24 = v21 - v23;
          int v25 = v23 - v21;
          if (v16 >= 0) {
            int v25 = v24;
          }
          if (v25 >= 1)
          {
            v14 |= v22;
            *(_DWORD *)((char *)v31 + v13) = v25;
          }
          v22 *= 2;
          v13 += 4;
        }
        while (v13 != 64);
        uint64_t v26 = v14 | (v14 << 16);
        uint64_t v27 = *v9;
        if (v26 == -1)
        {
          uint64_t v28 = 0;
          v29.i64[0] = 0xFF000000FFLL;
          v29.i64[1] = 0xFF000000FFLL;
          do
            int32x4_t v29 = vminq_s32((int32x4_t)v31[v28++], v29);
          while (v28 != 4);
          uint64_t v30 = v27 + 24 * v12;
          *(_DWORD *)(v30 + 16) = a3 - 1 + vminvq_s32(v29);
          *(_DWORD *)(v30 + 20) = v18 | 0x40;
        }
        else
        {
          apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeNonHomogeousDescriptor(v26, (uint64_t)v31, v27 + 24 * v12, a3, v18);
          uint64_t v11 = *a2;
        }
        ++v12;
      }
      while (v12 < (int)((unint64_t)(a2[1] - v11) >> 3));
    }
  }
}

#error "1DBC622A8: too big function (funcsize=0)"

unsigned char *apple::vision::libraries::facecore::mod::facerecognition::b64decode(unsigned char *this, const char *a2, uint64_t a3, char *a4)
{
  int v18 = 0;
  if ((int)a2 < 1) {
    return this;
  }
  int v5 = (int)a2;
  unsigned int v6 = this;
  int v7 = 0;
  LODWORD(v8) = 0;
  uint64_t v9 = a2;
  do
  {
    unint64_t v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v8 = (int)v8;
      do
      {
        if ((v6[v8] - 123) < 0xB0u
          || (uint64_t v12 = v6[v8] - 43,
              apple::vision::libraries::facecore::mod::facerecognition::cd64[v12] == 36)
          || v12 == 80)
        {
          char v13 = 0;
        }
        else
        {
          char v13 = apple::vision::libraries::facecore::mod::facerecognition::cd64[v12] - 61;
        }
        ++v8;
      }
      while (v8 < v9 && !v13);
      if (v8 >= v9)
      {
        char v14 = 0;
        goto LABEL_17;
      }
      ++v11;
      if (v13)
      {
        char v14 = v13 - 1;
LABEL_17:
        *((unsigned char *)&v18 + v10) = v14;
      }
      if ((int)v8 >= v5) {
        break;
      }
    }
    while (v10++ < 3);
    if (v11)
    {
      __src[0] = (BYTE1(v18) >> 4) | (4 * v18);
      __src[1] = (BYTE2(v18) >> 2) | (16 * BYTE1(v18));
      __src[2] = HIBYTE(v18) | (BYTE2(v18) << 6);
      if (v11 >= 2)
      {
        int v16 = v11 - 1;
        this = memcpy((void *)(a3 + v7), __src, (v11 - 1));
        v7 += v16;
      }
    }
  }
  while ((int)v8 < v5);
  return this;
}

void computeHOG32InputDataForImage(apple::vision::libraries::facecore::utils::aev::AEVGImage *a1, float **a2, int **a3)
{
}

void computeHOG32FeaturesForImage(apple::vision::libraries::facecore::utils::aev::AEVGImage *a1, float **a2, int *a3)
{
  *(void *)&v5[1] = 0;
  v5[0] = 3;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  computeHOG32InputDataForImage(a1, &v4, &v3);
}

void apple::vision::libraries::facecore::utils::aev::AEVHOG32Descriptor::computeHog32Features(apple::vision::libraries::facecore::utils::aev::AEVHOG32Descriptor *this, int32x2_t *a2, int *a3, float **a4, int **a5, int *a6, double a7, double a8)
{
  *(float *)&a8 = (float)(int)a6;
  int32x2_t v9 = vcvt_s32_f32(vrnda_f32(vdiv_f32(vcvt_f32_s32(*a2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0))));
  __int32 v10 = v9.i32[1] * v9.i32[0];
  malloc_type_calloc(18 * v9.i32[1] * v9.i32[0], 4uLL, 0x100004052888210uLL);
  malloc_type_calloc(v10, 4uLL, 0x100004052888210uLL);
  *(_DWORD *)a5 = 3;
  operator new[]();
}

char *apple::vision::libraries::facecore::utils::aev::AEVFeaturesGenerationUtils::generateFeaturesVector(void *a1, int *a2, apple::vision::libraries::facecore::utils::aev::AEVGImage *a3, int a4, uint64_t a5, int a6)
{
  if (!a4)
  {
    int v11 = 0;
    if (!a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v11 = *((_DWORD *)a3 + 8) * *((_DWORD *)a3 + 7);
  if (a5)
  {
LABEL_5:
    int v12 = *(_DWORD *)(a5 + 8);
    v11 += ((*(_DWORD *)a5 - v12) / *(_DWORD *)(a5 + 12)
          + 1
          + ((*(_DWORD *)a5 - v12) / *(_DWORD *)(a5 + 12) + 1) * ((*(_DWORD *)(a5 + 4) - v12) / *(_DWORD *)(a5 + 12)))
         * (v12
          / *(_DWORD *)(a5 + 16))
         * (v12
          / *(_DWORD *)(a5 + 16))
         * *(_DWORD *)(a5 + 20);
  }
LABEL_6:
  int32x4_t v29 = 0;
  int v28 = 0;
  if (a6) {
    computeHOG32FeaturesForImage(a3, &v29, &v28);
  }
  double result = (char *)malloc_type_malloc(8 * v11, 0x100004000313F17uLL);
  if (!a4 || (uint64_t v15 = *((unsigned int *)a3 + 7), (int)v15 < 1))
  {
    int v17 = 0;
    if (!a5) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = *((unsigned int *)a3 + 8);
  do
  {
    if ((int)v18 >= 1)
    {
      int v19 = (uint64_t *)*((void *)a3 + 2);
      uint64_t v20 = (double *)&result[8 * v17];
      v17 += v18;
      uint64_t v21 = v18;
      do
      {
        uint64_t v22 = *v19++;
        LOBYTE(v14) = *(unsigned char *)(v22 + v16);
        double v14 = (double)*(unint64_t *)&v14 / 255.0;
        *v20++ = v14;
        --v21;
      }
      while (v21);
    }
    ++v16;
  }
  while (v16 != v15);
  if (a5)
  {
LABEL_18:
    int v23 = *(_DWORD *)(a5 + 8);
    uint64_t v24 = (((*(_DWORD *)a5 - v23) / *(_DWORD *)(a5 + 12)
                        + 1
                        + ((*(_DWORD *)a5 - v23) / *(_DWORD *)(a5 + 12) + 1)
                        * ((*(_DWORD *)(a5 + 4) - v23)
                         / *(_DWORD *)(a5 + 12)))
                       * (v23
                        / *(_DWORD *)(a5 + 16))
                       * (v23
                        / *(_DWORD *)(a5 + 16))
                       * *(_DWORD *)(a5 + 20));
    if ((int)v24 >= 1)
    {
      int v25 = *(float **)(a5 + 24);
      uint64_t v26 = (double *)&result[8 * v17];
      do
      {
        float v27 = *v25++;
        *v26++ = v27;
        --v24;
      }
      while (v24);
    }
  }
LABEL_21:
  *a1 = result;
  *a2 = v11;
  return result;
}

#error "1DBC89198: too big function (funcsize=0)"

#error "1DBCB0714: too big function (funcsize=0)"

double apple::vision::libraries::facecore::utils::OverlappingUtils::computeFaceOverlap(int *a1, int *a2)
{
  return apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils::computeAsymetricFaceOverlap((apple::vision::libraries::facecore::utils::aev::AEVOverlappingUtils *)a1, (double)a1[7], (double)a1[8], (double)*a1, (double)a2[7], (double)a2[8], (double)*a2);
}

void apple::vision::libraries::facecore::utils::OverlappingUtils::appendUniqueFaces(int **a1, uint64_t *a2, double a3)
{
  for (uint64_t i = *a1; i != a1[1]; i += 36)
  {
    for (int j = (int *)*a2; j != (int *)a2[1]; j += 36)
    {
      if (apple::vision::libraries::facecore::utils::OverlappingUtils::computeFaceOverlap(j, i) >= a3) {
        goto LABEL_10;
      }
    }
    if ((unint64_t)j >= a2[2])
    {
      uint64_t v8 = std::vector<apple::vision::libraries::facecore::Face>::__push_back_slow_path<apple::vision::libraries::facecore::Face const&>(a2, (const apple::vision::libraries::facecore::Face *)i);
    }
    else
    {
      apple::vision::libraries::facecore::Face::Face((apple::vision::libraries::facecore::Face *)j, (const apple::vision::libraries::facecore::Face *)i);
      uint64_t v8 = (uint64_t)(j + 36);
      a2[1] = (uint64_t)(j + 36);
    }
    a2[1] = v8;
LABEL_10:
    ;
  }
}

void sub_1DBCD3E24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<apple::vision::libraries::facecore::Face>::__push_back_slow_path<apple::vision::libraries::facecore::Face const&>(uint64_t *a1, const apple::vision::libraries::facecore::Face *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    __int32 v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>>(v7, v9);
  }
  else {
    __int32 v10 = 0;
  }
  char v13 = v10;
  double v14 = (apple::vision::libraries::facecore::Face *)&v10[144 * v4];
  uint64_t v16 = &v10[144 * v9];
  apple::vision::libraries::facecore::Face::Face(v14, a2);
  uint64_t v15 = (char *)v14 + 144;
  std::vector<apple::vision::libraries::facecore::Face>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<apple::vision::libraries::facecore::Face>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1DBCD3F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<apple::vision::libraries::facecore::Face>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<apple::vision::libraries::facecore::Face>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 144;
  while (a3 + v10 != a5)
  {
    int v12 = (apple::vision::libraries::facecore::Face *)(v11 + v10);
    v10 -= 144;
    apple::vision::libraries::facecore::Face::Face(v12, (const apple::vision::libraries::facecore::Face *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<apple::vision::libraries::facecore::Face>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(i - 144));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

#error "1DBCD40F4: too big function (funcsize=0)"

#error "1DBCFB110: too big function (funcsize=0)"

#error "1DBD20E18: too big function (funcsize=0)"

#error "1DBD44C28: too big function (funcsize=0)"

void apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::FeatureCombination(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 9) = a2;
  operator new();
}

void sub_1DBD6EEC0(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::~FeatureCombination(dispatch_object_t *this)
{
  dispatch_release(this[8]);
  pthread_mutex_lock(&apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_mutexRead);
  apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::deleteFeatures((apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *)this);
  uint64_t v2 = (apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix *)this[6];
  if (v2)
  {
    apple::vision::libraries::facecore::mod::facerecognition::SimilarityMatrix::~SimilarityMatrix(v2);
    MEMORY[0x1E0196D10]();
    this[6] = 0;
  }
  if (--apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_nbInst) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam == 0;
  }
  if (!v3)
  {
    apple::vision::libraries::facecore::mod::aam::AamFeature::~AamFeature((apple::vision::libraries::facecore::mod::aam::AamFeature *)apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam);
    MEMORY[0x1E0196D10]();
    apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aauint64_t m = 0;
    apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_initAamDone = 0;
  }
  pthread_mutex_unlock(&apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_mutexRead);
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::deleteFeatures(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 4) = 0;
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 3) = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 2) = 0;
  }
  if (*(void *)this)
  {
    MEMORY[0x1E0196CF0](*(void *)this, 0x1000C8052888210);
    *(void *)this = 0;
  }
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    uint64_t result = MEMORY[0x1E0196CF0](result, 0x1000C8052888210);
    *((void *)this + 1) = 0;
  }
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::loadModelFile(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *a1)
{
  *((_DWORD *)a1 + 10) = 0;
  operator new();
}

void sub_1DBD7089C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x1E0196D10](v30, 0x1020C403A5D3213);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pthread_mutex_unlock(&apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_mutexRead);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1DBD70940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_1DBD70A3C()
{
  MEMORY[0x1E0196D10](v0, 0x1080C408FF83AFFLL);
  JUMPOUT(0x1DBD70A24);
}

void sub_1DBD70A5C(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A1C4028537CF6);
  _Unwind_Resume(a1);
}

void sub_1DBD70A98()
{
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::initCombinationParameters(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *this, float *a2, float *a3)
{
  uint64_t v4 = *(void *)this;
  if (v4)
  {
    MEMORY[0x1E0196CF0](v4, 0x1000C8052888210, a3);
    *(void *)this = 0;
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    MEMORY[0x1E0196CF0](v5, 0x1000C8052888210, a3);
    *((void *)this + 1) = 0;
  }
  operator new[]();
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::extractFaceprint(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, unsigned char *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v102 = 0;
  double v103 = &v102;
  uint64_t v104 = 0x4002000000;
  int v105 = __Block_byref_object_copy_;
  int v106 = __Block_byref_object_dispose_;
  double v107 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = &v94;
  uint64_t v96 = 0x4002000000;
  double v97 = __Block_byref_object_copy_;
  double v98 = __Block_byref_object_dispose_;
  double v99 = 0;
  vDSP_Length v100 = 0;
  uint64_t v101 = 0;
  uint64_t v86 = 0;
  double v87 = &v86;
  uint64_t v88 = 0x4002000000;
  double v89 = __Block_byref_object_copy_;
  double v90 = __Block_byref_object_dispose_;
  double v91 = 0;
  uint64_t v93 = 0;
  double v92 = 0;
  if (!apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam)
  {
    uint64_t v18 = 0;
    float64x2_t v64 = 0;
    int v17 = 0;
    if (!a6) {
      goto LABEL_36;
    }
    goto LABEL_10;
  }
  pthread_mutex_lock(&apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_mutexComputeAam);
  uint64_t v16 = apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam;
  apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v85, a5);
  apple::vision::libraries::facecore::mod::aam::AamFeature::setLandmarksAndDoShearch(v16, a2, a3, a4, v85);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v85);
  if (a6)
  {
    apple::vision::libraries::facecore::mod::aam::AamFeature::extractFaceprint((apple::vision::libraries::facecore::mod::aam::AamSearch3d **)apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam, (uint64_t *)&v70);
    float64x2_t v64 = (char *)*((void *)&v70 + 1);
    int v17 = (char *)v70;
  }
  else
  {
    float64x2_t v64 = 0;
    int v17 = 0;
  }
  apple::vision::libraries::facecore::mod::aam::AamFeature::GetShapeVertices((apple::vision::libraries::facecore::mod::aam::AamSearch **)apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam, &v70);
  int v19 = v87;
  uint64_t v21 = v87 + 5;
  uint64_t v20 = (void *)v87[5];
  if (v20)
  {
    v87[6] = (uint64_t)v20;
    operator delete(v20);
    *uint64_t v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
  }
  *(_OWORD *)(v19 + 5) = v70;
  v19[7] = v71;
  apple::vision::libraries::facecore::mod::aam::AamFeature::GetTriList((apple::vision::libraries::facecore::mod::aam::AamSearch3d **)apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam, &v70);
  uint64_t v18 = (void *)v70;
  pthread_mutex_unlock(&apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_mutexComputeAam);
  uint64_t v22 = (float64x2_t *)v87[5];
  __asm { FMOV            V2.2D, #0.5 }
  *(int32x4_t *)(a5 + 4) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(vmulq_f64(vaddq_f64(v22[10], v22[14]), _Q2), _Q2)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(vmulq_f64(vaddq_f64(v22[22], v22[18]), _Q2), _Q2)));
  *(int32x2_t *)(a5 + 20) = vmovn_s64(vcvtq_s64_f64(vaddq_f64(vmulq_f64(vaddq_f64(v22[35], v22[38]), _Q2), _Q2)));
  if (a6)
  {
LABEL_10:
    if (*(void *)(a1 + 16))
    {
      apple::vision::libraries::facecore::mod::Image::Image((apple::vision::libraries::facecore::mod::Image *)v83, 0, 0, 1);
      apple::vision::libraries::facecore::mod::Image::SetBuffer((uint64_t)v83, a2, a3, a4, 1);
      uint64_t v28 = *(void *)(a1 + 16);
      int v29 = *(_DWORD *)(a5 + 4);
      int v30 = *(_DWORD *)(a5 + 8);
      int v31 = *(_DWORD *)(a5 + 12);
      int v32 = *(_DWORD *)(a5 + 16);
      int v33 = *(_DWORD *)(a5 + 20);
      int v34 = *(_DWORD *)(a5 + 24);
      *(_DWORD *)(v28 + 24) = 0;
      *(_DWORD *)(v28 + 20) = 0;
      apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::_getTranformation((const double **)v28, *(float **)(v28 + 8), (float *)(v28 + 20), (float *)(v28 + 24), v29, v30, v31, v32, v33, v34);
      *a7 = apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment::_transformImage((apple::vision::libraries::facecore::mod::facerecognition::FaceAlignment *)v28, (apple::vision::libraries::facecore::mod::Image *)v83, *(float **)(v28 + 8), *(float *)(v28 + 20), *(float *)(v28 + 24), 128, *(unsigned __int8 **)(v28 + 32));
      apple::vision::libraries::facecore::mod::Image::Image((apple::vision::libraries::facecore::mod::Image *)&v80, 0, 0, 1);
      apple::vision::libraries::facecore::mod::Image::SetBuffer((uint64_t)&v80, *(unsigned __int8 **)(v28 + 32), 128, 128, v84);
      uint64_t v35 = v82;
      int v36 = v80;
      int v37 = v81;
      if (*(void *)(a1 + 24))
      {
        unint64_t v39 = *(NSObject **)(a1 + 56);
        uint64_t v38 = *(NSObject **)(a1 + 64);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN5apple6vision9libraries8facecore3mod15facerecognition18FeatureCombination16extractFaceprintEPhiiNS2_12FaceInternalEbRbPNS2_15FaceCoreContextE_block_invoke;
        block[3] = &unk_1E6C28D18;
        block[4] = &v94;
        block[5] = a1;
        int v78 = v80;
        int v79 = v81;
        void block[6] = v82;
        block[7] = a8;
        dispatch_group_async(v38, v39, block);
      }
      if (apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam)
      {
        if (*(void *)(a1 + 32))
        {
          *(void *)&long long v70 = 0;
          *((void *)&v70 + 1) = &v70;
          uint64_t v71 = 0x4002000000;
          double v72 = __Block_byref_object_copy_;
          double v73 = __Block_byref_object_dispose_;
          __p = 0;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v41 = *(NSObject **)(a1 + 56);
          double v40 = *(NSObject **)(a1 + 64);
          v67[0] = MEMORY[0x1E4F143A8];
          v67[1] = 0x40000000;
          v67[2] = ___ZN5apple6vision9libraries8facecore3mod15facerecognition18FeatureCombination16extractFaceprintEPhiiNS2_12FaceInternalEbRbPNS2_15FaceCoreContextE_block_invoke_2;
          v67[3] = &unk_1E6C28EC8;
          v67[4] = &v86;
          v67[5] = &v70;
          v67[6] = &v102;
          v67[7] = a1;
          v67[8] = a8;
          v67[9] = v35;
          int v68 = v36;
          int v69 = v37;
          dispatch_group_async(v40, v41, v67);
          _Block_object_dispose(&v70, 8);
          if (__p)
          {
            uint64_t v75 = __p;
            operator delete(__p);
          }
        }
      }
      unint64_t v42 = (v64 - v17) >> 3;
      if (v64 != v17)
      {
        uint64_t v43 = 0;
        double v44 = *(float **)(a1 + 8);
        float v45 = **(float **)a1;
        float v46 = *v44 - v45;
        if (vabds_f32(*v44, v45) < 0.000000001) {
          float v46 = v46 + 0.000000001;
        }
        do
        {
          *(double *)&v17[8 * v43] = (*(double *)&v17[8 * v43] - v45) / v46;
          ++v43;
        }
        while (v42 > v43);
      }
      std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)&v110, (uint64_t)v111, v17, v64, v42);
      int32x2_t v47 = (char *)v95[5];
      double v48 = (char *)v95[6];
      if (v48 == v47)
      {
        unint64_t v54 = (v48 - v47) >> 3;
      }
      else
      {
        uint64_t v49 = 0;
        float v50 = *(float *)(*(void *)(a1 + 8) + 4);
        float v51 = *(float *)(*(void *)a1 + 4);
        float v52 = v50 - v51;
        if (vabds_f32(v50, v51) < 0.000000001) {
          float v52 = v52 + 0.000000001;
        }
        unsigned int v53 = 1;
        do
        {
          *(double *)&v47[8 * v49] = (*(double *)&v47[8 * v49] - v51) / v52;
          uint64_t v49 = v53;
          int32x2_t v47 = (char *)v95[5];
          double v48 = (char *)v95[6];
          unint64_t v54 = (v48 - v47) >> 3;
          BOOL v55 = v54 > v53++;
        }
        while (v55);
      }
      std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)&v110, (uint64_t)v111, v47, v48, v54);
      uint64_t v56 = (char *)v103[5];
      double v57 = (char *)v103[6];
      if (v57 == v56)
      {
        unint64_t v63 = (v57 - v56) >> 3;
      }
      else
      {
        uint64_t v58 = 0;
        float v59 = *(float *)(*(void *)(a1 + 8) + 8);
        float v60 = *(float *)(*(void *)a1 + 8);
        float v61 = v59 - v60;
        if (vabds_f32(v59, v60) < 0.000000001) {
          float v61 = v61 + 0.000000001;
        }
        unsigned int v62 = 1;
        do
        {
          *(double *)&v56[8 * v58] = (*(double *)&v56[8 * v58] - v60) / v61;
          uint64_t v58 = v62;
          uint64_t v56 = (char *)v103[5];
          double v57 = (char *)v103[6];
          unint64_t v63 = (v57 - v56) >> 3;
          BOOL v55 = v63 > v62++;
        }
        while (v55);
      }
      std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)&v110, (uint64_t)v111, v56, v57, v63);
      std::vector<double>::__insert_with_size[abi:ne180100]<std::__wrap_iter<double *>,std::__wrap_iter<double *>>((uint64_t)&v110, (uint64_t)v111, 0, 0, 0);
      apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)&v80);
      apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)v83);
    }
  }
LABEL_36:
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a9, v110, (uint64_t)v111, (v111 - (unsigned char *)v110) >> 3);
  if (v18) {
    operator delete(v18);
  }
  _Block_object_dispose(&v86, 8);
  if (v91)
  {
    double v92 = v91;
    operator delete(v91);
  }
  _Block_object_dispose(&v94, 8);
  if (v99)
  {
    vDSP_Length v100 = v99;
    operator delete(v99);
  }
  _Block_object_dispose(&v102, 8);
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
  if (v17) {
    operator delete(v17);
  }
  if (v110)
  {
    uint64_t v111 = v110;
    operator delete(v110);
  }
}

void sub_1DBD71294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)&a42);
  apple::vision::libraries::facecore::mod::Image::~Image((apple::vision::libraries::facecore::mod::Image *)&a46);
  if (v47) {
    operator delete(v47);
  }
  _Block_object_dispose(&STACK[0x220], 8);
  float v50 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v50;
    operator delete(v50);
  }
  _Block_object_dispose((const void *)(v48 - 256), 8);
  float v51 = *(void **)(v48 - 216);
  if (v51)
  {
    *(void *)(v48 - 208) = v51;
    operator delete(v51);
  }
  _Block_object_dispose((const void *)(v48 - 192), 8);
  float v52 = *(void **)(v48 - 152);
  if (v52)
  {
    *(void *)(v48 - 144) = v52;
    operator delete(v52);
  }
  if (v46) {
    operator delete(v46);
  }
  unsigned int v53 = *(void **)(v48 - 128);
  if (v53)
  {
    *(void *)(v48 - 120) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

double ___ZN5apple6vision9libraries8facecore3mod15facerecognition18FeatureCombination16extractFaceprintEPhiiNS2_12FaceInternalEbRbPNS2_15FaceCoreContextE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)(a1 + 40) + 24) + 16))(&v5);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = (void *)v2[5];
  if (v3)
  {
    v2[6] = v3;
    operator delete(v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)(v2 + 5) = v5;
  v2[7] = v6;
  return result;
}

double ___ZN5apple6vision9libraries8facecore3mod15facerecognition18FeatureCombination16extractFaceprintEPhiiNS2_12FaceInternalEbRbPNS2_15FaceCoreContextE_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = *(void *)(*(void *)(a1[4] + 8) + 40);
  if ((unint64_t)(*(void *)(*(void *)(a1[4] + 8) + 48) - v3) >= 0x10)
  {
    LODWORD(v4) = 0;
    do
    {
      double v5 = *(double *)(v3 + 8 * (2 * v4));
      double v6 = *(double *)(v3 + 8 * ((2 * v4) | 1u));
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(float **)(v7 + 8);
      float v9 = *(float *)(v7 + 24);
      double v10 = v6 * v8[1] + *v8 * v5 + *(float *)(v7 + 20);
      float v12 = v8[2];
      float v11 = v8[3];
      char v13 = *(void **)(a1[5] + 8);
      double v14 = (double *)v13[6];
      unint64_t v15 = v13[7];
      if ((unint64_t)v14 >= v15)
      {
        int v17 = (double *)v13[5];
        uint64_t v18 = v14 - v17;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_39;
        }
        unint64_t v19 = v15 - (void)v17;
        unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 2;
        if (v20 <= v18 + 1) {
          unint64_t v20 = v18 + 1;
        }
        if (v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v13 + 7), v21);
          int v17 = (double *)v13[5];
          double v14 = (double *)v13[6];
        }
        else
        {
          uint64_t v22 = 0;
        }
        int v23 = (double *)&v22[8 * v18];
        *int v23 = v10;
        uint64_t v16 = v23 + 1;
        while (v14 != v17)
        {
          uint64_t v24 = *((void *)v14-- - 1);
          *((void *)v23-- - 1) = v24;
        }
        v13[5] = v23;
        v13[6] = v16;
        v13[7] = &v22[8 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *double v14 = v10;
        uint64_t v16 = v14 + 1;
      }
      double v25 = v6 * v11 + v12 * v5 + v9;
      v13[6] = v16;
      uint64_t v26 = *(void **)(a1[5] + 8);
      float v27 = (double *)v26[6];
      unint64_t v28 = v26[7];
      if ((unint64_t)v27 >= v28)
      {
        int v30 = (double *)v26[5];
        uint64_t v31 = v27 - v30;
        if ((unint64_t)(v31 + 1) >> 61) {
LABEL_39:
        }
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        unint64_t v32 = v28 - (void)v30;
        unint64_t v33 = (uint64_t)(v28 - (void)v30) >> 2;
        if (v33 <= v31 + 1) {
          unint64_t v33 = v31 + 1;
        }
        if (v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v26 + 7), v34);
          int v30 = (double *)v26[5];
          float v27 = (double *)v26[6];
        }
        else
        {
          uint64_t v35 = 0;
        }
        int v36 = (double *)&v35[8 * v31];
        *int v36 = v25;
        int v29 = v36 + 1;
        while (v27 != v30)
        {
          uint64_t v37 = *((void *)v27-- - 1);
          *((void *)v36-- - 1) = v37;
        }
        v26[5] = v36;
        v26[6] = v29;
        v26[7] = &v35[8 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        double *v27 = v25;
        int v29 = v27 + 1;
      }
      v26[6] = v29;
      unint64_t v4 = (v4 + 1);
      uint64_t v3 = *(void *)(*(void *)(a1[4] + 8) + 40);
    }
    while (v4 < (unint64_t)((*(void *)(*(void *)(a1[4] + 8) + 48) - v3) >> 3) >> 1);
  }
  apple::vision::libraries::facecore::FaceCoreContext::setFaceVertices(a1[8], *(void *)(a1[5] + 8) + 40);
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 32) + 16))(&v41);
  uint64_t v38 = *(void **)(a1[6] + 8);
  unint64_t v39 = (void *)v38[5];
  if (v39)
  {
    v38[6] = v39;
    operator delete(v39);
  }
  double result = *(double *)&v41;
  *(_OWORD *)(v38 + 5) = v41;
  v38[7] = v42;
  return result;
}

uint64_t apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::getAamObject(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination *this)
{
  return apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::m_aam;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    double v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::FeatureProcessing(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a4;
  *(_DWORD *)(a1 + 48) = a5;
  operator new[]();
}

void sub_1DBD71BE8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1E0196CB0](v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::bundle::initializeGlobals(apple::vision::libraries::facecore::mod::bundle *this)
{
  if (apple::vision::libraries::facecore::mod::bundle::initializeGlobals(void)::onceToken != -1) {
    dispatch_once(&apple::vision::libraries::facecore::mod::bundle::initializeGlobals(void)::onceToken, &__block_literal_global);
  }
  if (!apple::vision::libraries::facecore::mod::bundle::_bundle)
  {
    +[VNFaceCoreExceptionUtils throwRuntimeErrorException:@"Error while trying to get resource path: bundle is NULL!"];
  }
}

void ___ZN5apple6vision9libraries8facecore3mod6bundle17initializeGlobalsEv_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)apple::vision::libraries::facecore::mod::bundle::_semaphore;
  apple::vision::libraries::facecore::mod::bundle::_semaphore = v0;

  uint64_t v2 = [MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.VN"];
  uint64_t v3 = (void *)apple::vision::libraries::facecore::mod::bundle::_bundle;
  apple::vision::libraries::facecore::mod::bundle::_bundle = v2;

  operator new();
}

void apple::vision::libraries::facecore::mod::bundle::getResourcePath(char *a1@<X0>, void *a2@<X8>)
{
  apple::vision::libraries::facecore::mod::bundle::initializeGlobals((apple::vision::libraries::facecore::mod::bundle *)a1);
  obint j = (id)apple::vision::libraries::facecore::mod::bundle::_semaphore;
  objc_sync_enter(obj);
  if (a1[23] >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  uint64_t v5 = [NSString stringWithUTF8String:v4];
  double v6 = [(id)apple::vision::libraries::facecore::mod::bundle::_bundle pathForResource:v5 ofType:0];
  if (!v6)
  {
    uint64_t v7 = NSString;
    uint64_t v8 = [(id)apple::vision::libraries::facecore::mod::bundle::_bundle resourcePath];
    float v9 = [v7 stringWithFormat:@"Error while trying to get resource path for file: %@, bundle resources path: %@ - resource not found (resource path == NULL)", v5, v8];

    +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v9];
  }
  id v10 = v6;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v10 UTF8String]);

  objc_sync_exit(obj);
}

void sub_1DBD71E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::bundle::getBundleResourcePath(apple::vision::libraries::facecore::mod::bundle *this@<X0>, void *a2@<X8>)
{
  apple::vision::libraries::facecore::mod::bundle::initializeGlobals(this);
  obint j = (id)apple::vision::libraries::facecore::mod::bundle::_semaphore;
  objc_sync_enter(obj);
  id v3 = [(id)apple::vision::libraries::facecore::mod::bundle::_bundle resourcePath];
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);

  objc_sync_exit(obj);
}

void sub_1DBD71F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::mod::bundle::getMemoryBlock(apple::vision::libraries::facecore::mod::bundle *a1)
{
  apple::vision::libraries::facecore::mod::bundle::initializeGlobals(a1);
  id v2 = (id)apple::vision::libraries::facecore::mod::bundle::_semaphore;
  objc_sync_enter(v2);
  uint64_t v3 = apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::get((uint64_t **)apple::vision::libraries::facecore::mod::bundle::_memoryBlockManager, (uint64_t)a1);
  objc_sync_exit(v2);

  return v3;
}

void sub_1DBD71FB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::get(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::find<std::string>((uint64_t)a1, (void **)a2);
  if (a1 + 1 == (uint64_t **)v4)
  {
    apple::vision::libraries::facecore::mod::bundle::getResourcePath((char *)a2, __p);
    if (v39 >= 0) {
      double v6 = __p;
    }
    else {
      double v6 = (void **)__p[0];
    }
    uint64_t v7 = fopen((const char *)v6, "rb");
    if (!v7)
    {
      uint64_t v8 = NSString;
      int v9 = *(char *)(a2 + 23);
      id v10 = *(void **)a2;
      float v11 = __error();
      if (v9 >= 0) {
        float v12 = (void *)a2;
      }
      else {
        float v12 = v10;
      }
      char v13 = [v8 stringWithFormat:@"Could not open file: %s, error: %d", v12, *v11];
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v13];
    }
    if (fseek(v7, 0, 2))
    {
      double v14 = NSString;
      int v15 = *(char *)(a2 + 23);
      uint64_t v16 = *(void **)a2;
      int v17 = __error();
      if (v15 >= 0) {
        uint64_t v18 = (void *)a2;
      }
      else {
        uint64_t v18 = v16;
      }
      unint64_t v19 = [v14 stringWithFormat:@"Error while calling fseek on file: %s, error: %d", v18, *v17];
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v19];
    }
    size_t v20 = MEMORY[0x1E0196F40](v7);
    if (v20 == -1)
    {
      unint64_t v21 = NSString;
      int v22 = *(char *)(a2 + 23);
      int v23 = *(void **)a2;
      uint64_t v24 = __error();
      if (v22 >= 0) {
        double v25 = (void *)a2;
      }
      else {
        double v25 = v23;
      }
      uint64_t v26 = [v21 stringWithFormat:@"Error while calling ftell on file: %s, error: %d", v25, *v24];
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v26];
    }
    if (fseek(v7, 0, 0))
    {
      float v27 = NSString;
      int v28 = *(char *)(a2 + 23);
      int v29 = *(void **)a2;
      int v30 = __error();
      if (v28 >= 0) {
        uint64_t v31 = (void *)a2;
      }
      else {
        uint64_t v31 = v29;
      }
      unint64_t v32 = [v27 stringWithFormat:@"Error while calling fseek on file: %s, error: %d", v31, *v30];
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v32];
    }
    int v33 = fileno(v7);
    double v40 = (long long *)a2;
    unint64_t v34 = std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (void **)a2, (uint64_t)&std::piecewise_construct, &v40);
    v34[7] = v20;
    uint64_t v5 = v34 + 7;
    uint64_t v35 = mmap(0, v20, 1, 1, v33, 0);
    v34[8] = (uint64_t)v35;
    if (v35 == (void *)-1)
    {
      int v36 = [NSString stringWithFormat:@"Error while calling mmap, error: %d", *__error()];
      +[VNFaceCoreExceptionUtils throwRuntimeErrorException:v36];
    }
    v34[9] = (uint64_t)v7;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v4 + 7);
  }
  return *v5;
}

void sub_1DBD72288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::find<std::string>(uint64_t a1, void **a2)
{
  id v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  size_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        size_t v7 = v4;
        int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    size_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  size_t v7 = (std::string *)(v6 + 4);
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1DBD725B0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            long long v9 = (uint64_t **)a2[2];
          }
          else
          {
            long long v9 = (uint64_t **)v2[1];
            id v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *long long v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *size_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *size_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,apple::vision::libraries::facecore::mod::bundle::MemoryBlockManager::Entry>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

#error "1DBD7281C: too big function (funcsize=0)"

void apple::vision::libraries::facecore::processing::detection::IntegralImage::create(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, int a2, int a3, apple::vision::libraries::facecore::FaceCoreContext *a4)
{
}

void sub_1DBD962F4(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10B1C40D6FC7171);
  _Unwind_Resume(a1);
}

apple::vision::libraries::facecore::processing::detection::IntegralImage *apple::vision::libraries::facecore::processing::detection::IntegralImage::IntegralImage(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, int a2, int a3)
{
  *(void *)this = &unk_1F360CE98;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = (int)(float)((float)(a3 - a2) * 0.5);
  *((void *)this + 15) = malloc_type_valloc(2 * a2, 0x1000040BDFB0063uLL);
  *((void *)this + 16) = malloc_type_valloc((*((_DWORD *)this + 2) * *((_DWORD *)this + 2)), 0x100004077774924uLL);
  *((void *)this + 17) = malloc_type_valloc((*((_DWORD *)this + 3) * *((_DWORD *)this + 3)), 0x100004077774924uLL);
  int v4 = malloc_type_valloc(4 * (*((_DWORD *)this + 3) * *((_DWORD *)this + 3)), 0x100004052888210uLL);
  *((void *)this + 18) = v4;
  *((unsigned char *)this + 152) = 0;
  *(_OWORD *)((char *)this + 24) = *((_OWORD *)this + 8);
  *((void *)this + 5) = v4;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0x3F80000000000000;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 104) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 39) = 0;
  *((unsigned char *)this + 20) = 0;
  return this;
}

void sub_1DBD9642C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 168) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::processing::detection::IntegralImage::~IntegralImage(void **this)
{
  *this = &unk_1F360CE98;
  free(this[15]);
  free(this[16]);
  free(this[17]);
  free(this[18]);
  size_t v2 = this[20];
  if (v2)
  {
    this[21] = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::processing::detection::IntegralImage::~IntegralImage(this);

  JUMPOUT(0x1E0196D10);
}

uint64_t apple::vision::libraries::facecore::processing::detection::IntegralImage::setShadowLUT(uint64_t this, unsigned __int8 *a2)
{
  *(unsigned char *)(this + 104) = a2 != 0;
  *(void *)(this + 96) = a2;
  return this;
}

float apple::vision::libraries::facecore::processing::detection::IntegralImage::setImage(int32x2_t *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  this[11].i32[0] = a3;
  this[11].i32[1] = a4;
  this[19].i8[0] = 0;
  bzero(*(void **)&this[16], (this[1].i32[0] * this[1].i32[0]));
  signed int v9 = this[1].i32[0];
  if (v9 >= 0) {
    int v10 = this[1].i32[0];
  }
  else {
    int v10 = v9 + 1;
  }
  int v11 = v10 >> 1;
  if (a3 <= a4) {
    unsigned int v12 = a4;
  }
  else {
    unsigned int v12 = a3;
  }
  this[10].i32[0] = v11;
  this[10].i32[1] = v11;
  *(float *)v8.i32 = (float)v12 / (float)v9;
  if (*(float *)v8.i32 < 1.0) {
    *(float *)v8.i32 = 1.0;
  }
  this[9].i32[1] = v8.i32[0];
  int32x2_t v13 = vmin_s32(vdup_n_s32(v9), vcvt_s32_f32(vadd_f32(vdiv_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__(a4, a3)), (float32x2_t)vdup_lane_s32(v8, 0)), (float32x2_t)0x3F0000003F000000)));
  this[8] = v13;
  LODWORD(v14) = v13.i32[0];
  if (v9 >= v13.i32[0]) {
    unsigned __int32 v15 = v9 - v13.i32[0];
  }
  else {
    unsigned __int32 v15 = v9 - v13.i32[0] + 1;
  }
  this[13].i16[1] = v15 >> 1;
  int v16 = v13.i32[1];
  BOOL v17 = __OFSUB__(v9, v13.i32[1]);
  int v18 = v9 - v13.i32[1];
  if (v18 < 0 != v17) {
    ++v18;
  }
  this[13].i16[3] = v18 >> 1;
  this[13].i16[2] = v13.i16[0] + (v15 >> 1);
  this[14].i16[0] = v13.i16[2] + (v18 >> 1);
  if (*(float *)v8.i32 <= 1.0)
  {
    if ((int)(a4 * a3) >= 1)
    {
      int v25 = 0;
      do
      {
        uint64_t v26 = v25;
        if ((int)a3 >= 1)
        {
          float v27 = &a2[v25];
          int v28 = (unsigned char *)(*(void *)&this[16] + v26);
          uint64_t v29 = a3;
          do
          {
            unsigned int v31 = *v27++;
            uint64_t v30 = v31;
            *int v28 = v31;
            if (this[13].i8[0]) {
              *int v28 = *(unsigned char *)(*(void *)&this[12] + v30);
            }
            ++v28;
            --v29;
          }
          while (v29);
        }
        int v25 = v26 + a3;
      }
      while ((int)(v26 + a3) < (int)(a4 * a3));
    }
  }
  else if (this[2].i8[4])
  {
    v46.data = a2;
    v46.height = a4;
    v46.width = a3;
    v46.rowBytes = a3;
    dest.data = (void *)this[3];
    dest.height = v13.i32[1];
    dest.width = v13.i32[0];
    dest.rowBytes = v13.i32[0];
    vImageScale_Planar8(&v46, &dest, 0, 0);
    if (this[13].i8[0])
    {
      int v19 = this[8].i32[1];
      if (v19 >= 1)
      {
        int v20 = 0;
        int v21 = 0;
        LODWORD(v22) = this[8].i32[0];
        do
        {
          if ((int)v22 >= 1)
          {
            uint64_t v23 = 0;
            uint64_t v24 = *(void *)&this[16] + v20;
            do
            {
              *(unsigned char *)(v24 + v23) = *(unsigned char *)(*(void *)&this[12] + *(unsigned __int8 *)(v24 + v23));
              ++v23;
              uint64_t v22 = this[8].i32[0];
            }
            while (v23 < v22);
            int v19 = this[8].i32[1];
          }
          ++v21;
          v20 += v22;
        }
        while (v21 < v19);
      }
    }
  }
  else
  {
    if (v13.i32[0] >= 1)
    {
      uint64_t v32 = 0;
      int32x2_t v33 = this[15];
      uint64_t v34 = (v13.u32[0] + 1) & 0x1FFFFFFFELL;
      int64x2_t v35 = (int64x2_t)xmmword_1DBF81300;
      uint64x2_t v36 = (uint64x2_t)vdupq_n_s64((unint64_t)v13.u32[0] - 1);
      int64x2_t v37 = vdupq_n_s64(2uLL);
      do
      {
        int32x2_t v38 = vmovn_s64((int64x2_t)vcgeq_u64(v36, (uint64x2_t)v35));
        if (v38.i8[0]) {
          *(_WORD *)(*(void *)&v33 + 2 * v32) = (int)(float)(*(float *)v8.i32 * (float)(int)v32);
        }
        if (v38.i8[4]) {
          *(_WORD *)(*(void *)&v33 + 2 * v32 + 2) = (int)(float)(*(float *)v8.i32 * (float)(v32 + 1));
        }
        v32 += 2;
        int64x2_t v35 = vaddq_s64(v35, v37);
      }
      while (v34 != v32);
    }
    if (v16 >= 1)
    {
      int v39 = 0;
      for (int i = 0; i < v16; ++i)
      {
        if ((int)v14 >= 1)
        {
          uint64_t v41 = 0;
          float v42 = *(float *)&this[9].i32[1] * (float)i;
          uint64_t v43 = *(void *)&this[16] + v39;
          do
          {
            uint64_t v44 = a2[(int)v42 * a3 + *(unsigned __int16 *)(*(void *)&this[15] + 2 * v41)];
            *(unsigned char *)(v43 + v41) = v44;
            if (this[13].i8[0]) {
              *(unsigned char *)(v43 + v41) = *(unsigned char *)(*(void *)&this[12] + v44);
            }
            ++v41;
            uint64_t v14 = this[8].i32[0];
          }
          while (v41 < v14);
          int v16 = this[8].i32[1];
        }
        v39 += v14;
      }
    }
  }
  float result = 1.0 / *(float *)&this[9].i32[1];
  *(float *)&this[9].i32[1] = result;
  return result;
}

void apple::vision::libraries::facecore::processing::detection::IntegralImage::setAnglePrivate(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, float a2)
{
  *((unsigned char *)this + 152) = 1;
  *((float *)this + 18) = a2;
  float v4 = (float)(a2 * 0.0055556) * 3.1416;
  float v5 = tanf(v4 * 0.5);
  float v6 = sinf(v4);
  int v7 = *((_DWORD *)this + 3);
  int v8 = (*((_DWORD *)this + 2) - 1) >> 1;
  *((_DWORD *)this + 20) = v8;
  *((_DWORD *)this + 21) = v8;
  *((void *)this + 3) = *((void *)this + 16);
  long long v9 = *(_OWORD *)((char *)this + 136);
  *((_OWORD *)this + 2) = v9;
  bzero((void *)v9, (v7 * v7));
  int v10 = *((_DWORD *)this + 3);
  int v11 = v10 - 1;
  int v12 = *((_DWORD *)this + 16);
  int v13 = *((_DWORD *)this + 17);
  if (v13 * v12 >= 1)
  {
    int v14 = 0;
    int v15 = v11 - v13;
    if (v11 < v13) {
      ++v15;
    }
    int v16 = (v15 >> 1) * v10;
    BOOL v17 = __OFSUB__(v11, v12);
    int v18 = v11 - v12;
    if (v18 < 0 != v17) {
      ++v18;
    }
    int v19 = v16 + (v18 >> 1);
    do
    {
      memcpy((void *)(*((void *)this + 4) + v19), (const void *)(*((void *)this + 3) + v14), v12);
      int v12 = *((_DWORD *)this + 16);
      int v13 = *((_DWORD *)this + 17);
      v14 += v12;
      int v10 = *((_DWORD *)this + 3);
      v19 += v10;
    }
    while (v14 < v13 * v12);
    int v11 = v10 - 1;
  }
  float v20 = fabsf(v5);
  int v21 = (int)(float)(v20 * (float)((v13 - 1) >> 1));
  float v22 = fabsf(v6);
  int v23 = (int)(float)(v22 * (float)(((v12 - 1) >> 1) - v21));
  int v24 = v21 + ((v12 - 1) >> 1);
  if (v11 >= 0) {
    int v25 = v11;
  }
  else {
    int v25 = v11 + 1;
  }
  int v26 = v24 + (int)(float)(v20 * (float)(((v13 - 1) >> 1) - (int)(float)(v22 * (float)v24)));
  int v27 = (v25 >> 1) - v26;
  int v28 = v27 & 3;
  if (v26 - (v25 >> 1) >= 0) {
    int v28 = -((v26 - (v25 >> 1)) & 3);
  }
  int v29 = (v27 - v28) & ~((v27 - v28) >> 31);
  int v30 = v26 + (v25 >> 1);
  int v31 = v30 & 3;
  if (v30 <= 0) {
    int v31 = -(-v30 & 3);
  }
  int v32 = v31 + v30;
  if (v32 < v10) {
    int v11 = v32;
  }
  *((_DWORD *)this + 12) = v29;
  *((_DWORD *)this + 13) = v11;
  int v33 = v23 + ((v13 - 1) >> 1);
  *((_DWORD *)this + 14) = (v25 >> 1) - v33;
  *((_DWORD *)this + 15) = v33 + (v25 >> 1);
  float v34 = *((float *)this + 18);
  if (fabsf(v34) > 0.001)
  {
    if (*((unsigned char *)this + 20))
    {
      src.width = v12;
      src.rowBytes = v12;
      int64x2_t v35 = (void *)*((void *)this + 4);
      src.data = (void *)*((void *)this + 3);
      src.height = v13;
      v36.width = v10;
      v36.rowBytes = v10;
      v36.data = v35;
      v36.height = v10;
      vImageRotate_Planar8(&src, &v36, 0, a2 * -0.017453, 0, 4u);
    }
    else
    {
      performShearRotation(*((unsigned __int8 **)this + 4), v34, v10, v12, v13);
    }
  }
  bzero(*((void **)this + 5), (4 * *((_DWORD *)this + 3) * *((_DWORD *)this + 3)));
}

void performShearRotation(unsigned __int8 *a1, float a2, int a3, int a4, int a5)
{
  float v8 = (float)(a2 * 0.0055556) * 3.1416;
  float v9 = tanf(v8 * 0.5);
  float v10 = sinf(v8);
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = a3 + 1;
  }
  int v12 = v11 >> 1;
  if (a3 >= a5) {
    int v13 = a3 - a5;
  }
  else {
    int v13 = a3 - a5 + 1;
  }
  int v14 = v13 >> 1;
  int v15 = (v13 >> 1) - (v11 >> 1);
  int v64 = v11 >> 1;
  if (v15 < v12 - (v13 >> 1))
  {
    int v16 = a3 * (~v14 + a3);
    int v17 = 2 * v12 - 2 * v14;
    do
    {
      int v18 = (int)(float)(v9 * (float)v15);
      if (v18)
      {
        BOOL v19 = v18 < 0;
        if (v18 < 0) {
          int v18 = -v18;
        }
        int v20 = v18 + v16;
        if (v19) {
          int v21 = v16;
        }
        else {
          int v21 = v18 + v16;
        }
        if (!v19) {
          int v20 = v16;
        }
        memmove(&a1[v21], &a1[v20], a3 - v18);
      }
      ++v15;
      v16 -= a3;
      --v17;
    }
    while (v17);
  }
  int v22 = a3 - a4;
  if (a3 < a4) {
    ++v22;
  }
  int v23 = v22 >> 1;
  float v24 = (float)a5 * 0.5;
  float v25 = fabsf(v9);
  int v26 = (int)(float)(v24 * v25);
  LODWORD(v27) = v23 - v26;
  int v28 = v23 - v26 - v64;
  if (v28 <= -2)
  {
    uint64_t v29 = (a3 * a3);
    int v30 = (a3 - (v13 >> 1)) * a3;
    int v31 = v23 + v14 * a3 - v26;
    uint64_t v27 = (int)v27;
    uint64_t v32 = (int)v29 - v14 * a3;
    uint64_t v33 = v14 * a3;
    int v34 = v26 - v14 * a3 - v23 - 2;
    int v35 = a3 * (a3 - v14 - 1) - v26;
    int v36 = v29 - v14 * a3 - v26;
    int v37 = -2 - v23;
    int v38 = -v26;
    int v39 = v26 + v14 * a3;
    do
    {
      uint64_t v40 = v31;
      int v41 = (int)(float)(v10 * (float)++v28);
      if (v41)
      {
        if (v41 >= 0) {
          int v42 = (int)(float)(v10 * (float)v28);
        }
        else {
          int v42 = -v41;
        }
        if (v41 < 1)
        {
          if ((int)v33 < (int)v32)
          {
            uint64_t v51 = v29 - 2 - v31;
            uint64_t v52 = -(uint64_t)(v42 * a3);
            int v53 = v34 + a3 * (a3 + v42);
            uint64_t v54 = v40;
            do
            {
              if (v52 + v54 >= 0)
              {
                a1[(v52 + v54)] = a1[v54];
                a1[v53] = a1[v51];
              }
              a1[v54] = 0;
              a1[v51] = 0;
              v54 += a3;
              v51 -= a3;
              v53 -= a3;
            }
            while (v54 < v27 + v32);
          }
        }
        else if (v30 >= (int)v33)
        {
          int v43 = v26 + a3 * (v14 - v42);
          int v44 = v38 + a3 * (a3 - v14 + v42);
          int v45 = v37;
          int v46 = v23;
          do
          {
            int v47 = v39 + v45;
            uint64_t v48 = v36 + v46;
            if (v44 + v46 >= (int)v29)
            {
              uint64_t v49 = v47;
            }
            else
            {
              a1[v44 + v46] = a1[v48];
              uint64_t v49 = v47;
              a1[v43 + v45] = a1[v47];
            }
            a1[v48] = 0;
            a1[v49] = 0;
            int v50 = v35 + v46;
            v46 -= a3;
            v45 += a3;
          }
          while (v27 + v33 <= v50);
        }
      }
      ++v27;
      int v31 = v40 + 1;
      --v34;
      ++v23;
      --v26;
      --v39;
    }
    while (v28 != -1);
  }
  int v55 = v14 - (int)(float)(fabsf(v10) * (float)((float)((float)a4 * 0.5) - (float)(v24 * v25)));
  int v56 = v55 - v64;
  int v57 = v64 - v55;
  if (v55 - v64 < v64 - v55)
  {
    int v58 = a3 * (~v55 + a3);
    do
    {
      int v59 = (int)(float)(v9 * (float)v56);
      if (v59)
      {
        BOOL v60 = v59 < 0;
        if (v59 < 0) {
          int v59 = -v59;
        }
        int v61 = v59 + v58;
        if (v60) {
          int v62 = v58;
        }
        else {
          int v62 = v59 + v58;
        }
        if (!v60) {
          int v61 = v58;
        }
        memmove(&a1[v62], &a1[v61], ~v59 + a3);
      }
      ++v56;
      v58 -= a3;
    }
    while (v56 < v57);
  }
}

uint64_t apple::vision::libraries::facecore::processing::detection::IntegralImage::setAngle(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, float a2)
{
  return (*(uint64_t (**)(float))(*(void *)this + 32))(a2);
}

uint64_t apple::vision::libraries::facecore::processing::detection::IntegralImage::computeIntegralImage(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 12);
  uint64_t v2 = *(int *)(this + 48);
  int v3 = v1 - v2;
  uint64_t v4 = *(int *)(this + 56) * (uint64_t)v1;
  uint64_t v6 = *(void *)(this + 32);
  uint64_t v5 = *(void *)(this + 40);
  int v7 = *(unsigned __int8 *)(v6 + (int)v4 + (int)v2);
  *(_DWORD *)(v5 + 4 * ((int)v4 + (int)v2)) = v7;
  if (v1 - (int)v2 >= 2)
  {
    unsigned int v8 = v1 - v2 + 1;
    float v9 = (_DWORD *)(v5 + 4 * ((int)v4 + (int)v2) + 4);
    float v10 = (unsigned __int8 *)(v2 + v4 + v6 + 1);
    do
    {
      int v11 = *v10++;
      v7 += v11;
      *v9++ = v7;
      --v8;
    }
    while (v8 > 2);
  }
  uint64_t v12 = *(int *)(this + 56) + 1;
  if (v3 <= 0) {
    int v13 = -(-v3 & 3);
  }
  else {
    int v13 = v3 & 3;
  }
  LODWORD(v14) = *(_DWORD *)(this + 12);
  if ((int)v12 < (int)v14)
  {
    uint64_t v15 = *(int *)(this + 48) + v12 * (int)v14;
    int v16 = (_DWORD *)(v5 + 4 * v15);
    int v17 = (unsigned __int8 *)(v6 + v15);
    do
    {
      if (v3 <= v13)
      {
        int v18 = 0;
        int v21 = v17;
        int v20 = v16;
        float v25 = &v16[-(int)v14];
      }
      else
      {
        int v18 = 0;
        int v19 = v3;
        int v20 = v16;
        int v21 = v17;
        do
        {
          int v22 = v18 + *v21;
          *int v20 = v22 + v20[-(int)v14];
          int v23 = v22 + v21[1];
          v20[1] = v23 + v20[-(int)v14 + 1];
          int v24 = v23 + v21[2];
          v20[2] = v24 + v20[-(int)v14 + 2];
          int v18 = v24 + v21[3];
          _OWORD v20[3] = v18 + v20[-(int)v14 + 3];
          v21 += 4;
          v20 += 4;
          v19 -= 4;
        }
        while (v19 > v13);
        float v25 = &v20[-(int)v14];
      }
      unsigned int v26 = v13 + 1;
      if (v13 >= 1)
      {
        do
        {
          int v28 = *v21++;
          int v27 = v28;
          int v29 = *v25++;
          v18 += v27;
          *v20++ = v18 + v29;
          --v26;
        }
        while (v26 > 1);
      }
      uint64_t v14 = *(int *)(this + 12);
      v17 += v14;
      v16 += v14;
      LODWORD(v12) = v12 + 1;
    }
    while ((int)v12 < (int)v14);
  }
  return this;
}

double apple::vision::libraries::facecore::processing::detection::IntegralImage::getOriginalCoord(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, double a2, double a3, double *a4, double *a5)
{
  double v8 = (double)(*((_DWORD *)this + 3) - 1);
  double v9 = a2 - v8 * 0.5;
  double v10 = a3 - v8 * 0.5;
  __double2 v11 = __sincos_stret(*((float *)this + 18) * -0.0174532925);
  double v12 = *((float *)this + 19);
  int v13 = *((_DWORD *)this + 23);
  *a4 = (v11.__cosval * v9 - v11.__sinval * v10) / v12 + (double)(*((_DWORD *)this + 22) - 1) * 0.5;
  double result = (v10 * v11.__cosval + v11.__sinval * v9) / v12 + (double)(v13 - 1) * 0.5;
  *a5 = result;
  return result;
}

void apple::vision::libraries::facecore::processing::detection::IntegralImage::setROIs(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v4 = a1 + 160;
  *(void *)(v4 + 8) = v5;
  std::vector<apple::vision::libraries::facecore::utils::RegionOfInterest>::resize(v4, (a2[1] - *a2) >> 5);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1] - *a2;
  if ((int)(v7 >> 5) >= 1)
  {
    float v8 = *(float *)(a1 + 76);
    uint64_t v9 = (v7 >> 5);
    double v10 = (_DWORD *)(*(void *)(a1 + 160) + 8);
    __double2 v11 = (int *)(v6 + 28);
    do
    {
      int v12 = *(v11 - 1);
      double v13 = (double)v12 * 0.5 + (double)*(v11 - 3);
      double v14 = (double)*(v11 - 2);
      int v15 = *v11;
      v11 += 8;
      double v16 = (float)(v8 * (float)v12);
      double v17 = (float)(v8 * (float)v15);
      double v20 = 0.0;
      double v21 = 0.0;
      apple::vision::libraries::facecore::processing::detection::IntegralImage::getRotatedScaledCoord((apple::vision::libraries::facecore::processing::detection::IntegralImage *)a1, v13, (double)v15 * 0.5 + v14, &v21, &v20);
      double v18 = v21 - v16 * 0.5;
      double v19 = v20 - v17 * 0.5;
      *(v10 - 2) = (int)v18;
      *(v10 - 1) = (int)(v18 + v16);
      *double v10 = (int)v19;
      v10[1] = (int)(v19 + v17);
      v10 += 8;
      --v9;
    }
    while (v9);
  }
}

void std::vector<apple::vision::libraries::facecore::utils::RegionOfInterest>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<apple::vision::libraries::facecore::utils::RegionOfInterest>::__append((void **)a1, a2 - v2);
  }
}

double apple::vision::libraries::facecore::processing::detection::IntegralImage::getRotatedScaledCoord(apple::vision::libraries::facecore::processing::detection::IntegralImage *this, double a2, double a3, double *a4, double *a5)
{
  float v8 = *((float *)this + 19);
  double v9 = (a2 - (double)(*((_DWORD *)this + 22) - 1) * 0.5) * v8;
  double v10 = (a3 - (double)(*((_DWORD *)this + 23) - 1) * 0.5) * v8;
  __double2 v11 = __sincos_stret(*((float *)this + 18) * -0.0174532925);
  double v12 = (double)(*((_DWORD *)this + 3) - 1);
  *a4 = v11.__cosval * v9 + v11.__sinval * v10 + v12 * 0.5;
  double result = v11.__cosval * v10 - v11.__sinval * v9 + v12 * 0.5;
  *a5 = result;
  return result;
}

uint64_t apple::vision::libraries::facecore::processing::detection::IntegralImage::getIntegral(apple::vision::libraries::facecore::processing::detection::IntegralImage *this)
{
  if (!*((unsigned char *)this + 152))
  {
    (*(void (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *, float))(*(void *)this + 24))(this, *((float *)this + 18));
    (*(void (**)(apple::vision::libraries::facecore::processing::detection::IntegralImage *))(*(void *)this + 40))(this);
  }
  return *((void *)this + 5);
}

void std::vector<apple::vision::libraries::facecore::utils::RegionOfInterest>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::utils::RegionOfInterest>>(v4, v12);
    }
    else {
      double v13 = 0;
    }
    double v14 = &v13[32 * v10];
    int v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    double v16 = &v14[32 * a2];
    double v18 = (char *)*a1;
    double v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      double v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::utils::RegionOfInterest>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void apple::vision::libraries::facecore::processing::detection::DetectorFactory::getDetector(apple::vision::libraries::facecore::processing::detection::DetectorFactory *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
}

void sub_1DBD97470(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A1C40E36E1996);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::detectWindowsWithROI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, double a6)
{
  uint64_t v17 = 0;
  double v18 = &v17;
  uint64_t v19 = 0x4002000000;
  double v20 = __Block_byref_object_copy__0;
  double v21 = __Block_byref_object_dispose__0;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::vector(v22, (int)((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 5));
  global_queue = dispatch_get_global_queue(2, 0);
  size_t v13 = (int)((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 5);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  void v16[2] = ___ZN5apple6vision9libraries8facecore10processing9detection20detectWindowsWithROIERKNS2_15FaceCoreContextERKNSt3__16vectorItNS8_9allocatorItEEEERKNS4_13IntegralImageEdRKNS9_IPKNS4_8cascades9t_cascadeENSA_ISL_EEEERNS9_INS2_12FaceInternalENSA_ISQ_EEEE_block_invoke;
  v16[3] = &unk_1E6C28D40;
  v16[5] = a2;
  v16[6] = a3;
  *(double *)&v16[7] = a6;
  v16[8] = a4;
  void v16[4] = &v17;
  dispatch_apply(v13, global_queue, v16);
  if ((int)((*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 5) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__insert_with_size[abi:ne180100]<std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>>(a5, a5[1], *(void *)(v18[5] + v14), *(void *)(v18[5] + v14 + 8), 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v18[5] + v14 + 8) - *(void *)(v18[5] + v14)) >> 3));
      ++v15;
      v14 += 24;
    }
    while (v15 < (int)((*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 5));
  }
  _Block_object_dispose(&v17, 8);
  int v23 = (void **)v22;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void sub_1DBD97644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  *(void *)(v11 - 88) = v10;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection20detectWindowsWithROIERKNS2_15FaceCoreContextERKNSt3__16vectorItNS8_9allocatorItEEEERKNS4_13IntegralImageEdRKNS9_IPKNS4_8cascades9t_cascadeENSA_ISL_EEEERNS9_INS2_12FaceInternalENSA_ISQ_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  apple::vision::libraries::facecore::processing::detection::detectWindowsInROI(*(uint64_t **)(a1 + 40), v2, *(uint64_t ***)(a1 + 64), (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2), *(_DWORD *)(*(void *)(v2 + 160) + 32 * a2), *(_DWORD *)(*(void *)(v2 + 160) + 32 * a2 + 4), *(_DWORD *)(*(void *)(v2 + 160) + 32 * a2 + 8), *(_DWORD *)(*(void *)(v2 + 160) + 32 * a2 + 12), *(double *)(a1 + 56));
}

void apple::vision::libraries::facecore::processing::detection::detectWindowsInROI(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t *a4, int a5, int a6, int a7, int a8, double a9)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if ((int)((unint64_t)(v10 - *a1) >> 1) >= 1)
  {
    int v11 = a7;
    uint64_t v19 = 0;
    do
    {
      unsigned int v20 = *(unsigned __int16 *)(v9 + 2 * v19);
      if ((int)(a8 - v20) >= v11)
      {
        int v21 = (int)(float)((float)((float)v20 * 0.05) + 1.0);
        do
        {
          int v22 = a5;
          if (a6 - (unsigned __int16)v20 >= a5)
          {
            do
            {
              if (apple::vision::libraries::facecore::processing::detection::evaluateCascade(a3, *(void *)(a2 + 40), v19, v22 + v11 * *(_DWORD *)(a2 + 12)))
              {
                apple::vision::libraries::facecore::processing::detection::addFaceToVector(*(unsigned __int16 *)(*a1 + 2 * v19), v22, v11, (apple::vision::libraries::facecore::processing::detection::IntegralImage *)a2, a4, a9);
              }
              v22 += v21;
              uint64_t v9 = *a1;
              int v23 = *(unsigned __int16 *)(*a1 + 2 * v19);
            }
            while (v22 <= a6 - v23);
            LOWORD(v20) = *(_WORD *)(*a1 + 2 * v19);
          }
          else
          {
            int v23 = (unsigned __int16)v20;
          }
          v11 += v21;
        }
        while (v11 <= a8 - v23);
        uint64_t v10 = a1[1];
        int v11 = a7;
      }
      ++v19;
    }
    while (v19 < (int)((unint64_t)(v10 - v9) >> 1));
  }
}

void apple::vision::libraries::facecore::processing::detection::detectWindowsInROIWithGCD(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6, int a7, int a8, double a9)
{
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x4002000000;
  int v30 = __Block_byref_object_copy__0;
  int v31 = __Block_byref_object_dispose__0;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::vector(v32, (int)((uint64_t)(a1[1] - *a1) >> 1));
  global_queue = dispatch_get_global_queue(2, 0);
  size_t v19 = (int)((uint64_t)(a1[1] - *a1) >> 1);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN5apple6vision9libraries8facecore10processing9detection25detectWindowsInROIWithGCDERKNSt3__16vectorItNS5_9allocatorItEEEERKNS4_13IntegralImageEdRKNS6_IPKNS4_8cascades9t_cascadeENS7_ISI_EEEERNS6_INS2_12FaceInternalENS7_ISN_EEEEiiii_block_invoke;
  block[3] = &unk_1E6C28F10;
  int v23 = a7;
  int v24 = a8;
  int v25 = a5;
  int v26 = a6;
  void block[6] = a3;
  block[7] = a2;
  *(double *)&void block[8] = a9;
  block[4] = &v27;
  block[5] = a1;
  dispatch_apply(v19, global_queue, block);
  if ((int)((a1[1] - *a1) >> 1) >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    do
    {
      std::vector<apple::vision::libraries::facecore::FaceInternal>::__insert_with_size[abi:ne180100]<std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal*>>(a4, a4[1], *(void *)(v28[5] + v20), *(void *)(v28[5] + v20 + 8), 0x84BDA12F684BDA13 * ((uint64_t)(*(void *)(v28[5] + v20 + 8) - *(void *)(v28[5] + v20)) >> 3));
      ++v21;
      v20 += 24;
    }
    while (v21 < (int)((a1[1] - *a1) >> 1));
  }
  _Block_object_dispose(&v27, 8);
  uint64_t v33 = (void **)v32;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1DBD97A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  *(void *)(v14 - 112) = v13;
  std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 112));
  _Unwind_Resume(a1);
}

void ___ZN5apple6vision9libraries8facecore10processing9detection25detectWindowsInROIWithGCDERKNSt3__16vectorItNS5_9allocatorItEEEERKNS4_13IntegralImageEdRKNS6_IPKNS4_8cascades9t_cascadeENS7_ISI_EEEERNS6_INS2_12FaceInternalENS7_ISN_EEEEiiii_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(**(void **)(a1 + 40) + 2 * a2);
  int v4 = *(_DWORD *)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 76);
  if (v4 <= (int)(v3 - v2))
  {
    int v7 = (int)(float)((float)((float)v2 * 0.05) + 1.0);
    int v8 = *(_DWORD *)(a1 + 84);
    do
    {
      int v9 = *(_DWORD *)(a1 + 80);
      if (v9 <= v8 - (unsigned __int16)v2)
      {
        do
        {
          if (apple::vision::libraries::facecore::processing::detection::evaluateCascade(*(uint64_t ***)(a1 + 48), *(void *)(*(void *)(a1 + 56) + 40), a2, v9 + v4 * *(_DWORD *)(*(void *)(a1 + 56) + 12)))
          {
            apple::vision::libraries::facecore::processing::detection::addFaceToVector(*(unsigned __int16 *)(**(void **)(a1 + 40) + 2 * a2), v9, v4, *(apple::vision::libraries::facecore::processing::detection::IntegralImage **)(a1 + 56), (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 24 * a2), *(double *)(a1 + 64));
          }
          v9 += v7;
          int v8 = *(_DWORD *)(a1 + 84);
          int v10 = *(unsigned __int16 *)(**(void **)(a1 + 40) + 2 * a2);
        }
        while (v9 <= v8 - v10);
        int v3 = *(_DWORD *)(a1 + 76);
        LOWORD(v2) = *(_WORD *)(**(void **)(a1 + 40) + 2 * a2);
      }
      else
      {
        int v10 = (unsigned __int16)v2;
      }
      v4 += v7;
    }
    while (v4 <= v3 - v10);
  }
}

BOOL apple::vision::libraries::facecore::processing::detection::evaluateCascade(uint64_t **a1, uint64_t a2, int a3, int a4)
{
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = a3;
  uint64_t v7 = **a1;
  unsigned int v8 = 1;
  uint64_t v9 = a2 + 4 * a4;
  do
  {
    unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16 * v5) + 16 * v6 + 8))(v9);
    uint64_t v7 = **a1;
    BOOL v11 = v10 >= *(_DWORD *)(v7 + 16 * v5 + 8);
    BOOL result = v11;
    if (v11) {
      break;
    }
    unint64_t v5 = v8++;
  }
  while (v5 < a1[1] - *a1);
  return result;
}

void apple::vision::libraries::facecore::processing::detection::addFaceToVector(int a1, int a2, int a3, apple::vision::libraries::facecore::processing::detection::IntegralImage *this, uint64_t *a5, double a6)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  uint64_t v27 = 0x100000001;
  uint64_t v29 = 0x100000000;
  __asm { FMOV            V1.2D, #1.0 }
  long long v30 = _Q1;
  long long v31 = _Q1;
  long long v32 = _Q1;
  HIDWORD(v19) = (int)(float)((float)(a1 + 1 + 2 * a2) * 0.5);
  LODWORD(v20) = (int)(float)((float)(a1 + 1 + 2 * a3) * 0.5);
  if (a1 >= 0) {
    int v13 = a1;
  }
  else {
    int v13 = a1 + 1;
  }
  LODWORD(v18) = v13 >> 1;
  DWORD2(v24) = (int)-a6;
  uint64_t v28 = 0x3FF0000000000000;
  double v16 = 0.0;
  double v17 = 0.0;
  apple::vision::libraries::facecore::processing::detection::IntegralImage::getOriginalCoord(this, (double)(int)(float)((float)(a1 + 1 + 2 * a2) * 0.5), (double)(int)(float)((float)(a1 + 1 + 2 * a3) * 0.5), &v17, &v16);
  LODWORD(v18) = (int)(float)((float)(int)v18 / *((float *)this + 19));
  HIDWORD(v19) = (int)v17;
  LODWORD(v20) = (int)v16;
  unint64_t v14 = a5[1];
  if (v14 >= a5[2])
  {
    uint64_t v15 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(a5, (uint64_t)&v18);
  }
  else
  {
    apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)a5[1], (uint64_t)&v18);
    uint64_t v15 = v14 + 216;
    a5[1] = v14 + 216;
  }
  a5[1] = v15;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v18);
}

void sub_1DBD97D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v4;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::detectWindowsWithoutROI(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a3 + 40);
    uint64_t v11 = *a4;
    unint64_t v12 = a4[1] - *a4;
    uint64_t v13 = v12 & 0x7FFFFFFF8;
    int v29 = (int)-a6;
    uint64_t v14 = (v12 >> 3);
    __asm { FMOV            V0.2D, #1.0 }
    long long v28 = _Q0;
    do
    {
      uint64_t v20 = v14;
      uint64_t v21 = v11;
      if (v13)
      {
        while (1)
        {
          unint64_t v22 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v9);
          if (v22 < (uint64_t)(a2[1] - *a2) >> 1
            && (*(unsigned int (**)(uint64_t))(**(void **)v21 + 16 * v22 + 8))(v10 + 4
                                                                                               * *(unsigned int *)(*(void *)a1 + 4 * v9)) >= *(_DWORD *)(*(void *)v21 + 8))
          {
            break;
          }
          v21 += 8;
          if (!--v20) {
            goto LABEL_12;
          }
        }
        unsigned int v23 = *(unsigned __int16 *)(*a2 + 2 * *(unsigned __int8 *)(*(void *)(a1 + 8) + v9));
        unsigned int v24 = *(_DWORD *)(*(void *)a1 + 4 * v9);
        unsigned int v25 = *(_DWORD *)(a3 + 12);
        long long v34 = 0u;
        long long v35 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        uint64_t v43 = 0x100000001;
        uint64_t v45 = 0x100000000;
        long long v46 = v28;
        long long v47 = v28;
        long long v48 = v28;
        HIDWORD(v35) = (int)(float)((float)(int)(v23 + 1 + 2 * (v24 % v25)) * 0.5);
        LODWORD(v36) = (int)(float)((float)(int)(v23 + 1 + 2 * (v24 / v25)) * 0.5);
        LODWORD(v34) = v23 >> 1;
        DWORD2(v40) = v29;
        uint64_t v44 = 0x3FF0000000000000;
        double v32 = 0.0;
        double v33 = 0.0;
        apple::vision::libraries::facecore::processing::detection::IntegralImage::getOriginalCoord((apple::vision::libraries::facecore::processing::detection::IntegralImage *)a3, (double)SHIDWORD(v35), (double)(int)v36, &v33, &v32);
        LODWORD(v34) = (int)(float)((float)(int)v34 / *(float *)(a3 + 76));
        HIDWORD(v35) = (int)v33;
        LODWORD(v36) = (int)v32;
        unint64_t v26 = a5[1];
        if (v26 >= a5[2])
        {
          uint64_t v27 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(a5, (uint64_t)&v34);
        }
        else
        {
          apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)a5[1], (uint64_t)&v34);
          uint64_t v27 = v26 + 216;
          a5[1] = v26 + 216;
        }
        a5[1] = v27;
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v34);
      }
LABEL_12:
      ++v9;
    }
    while (v9 != v6);
  }
}

void sub_1DBD97F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  *(void *)(v10 + 8) = v9;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::detectWindows(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, double a7)
{
  if (*(void *)(a1 + 184) == *(void *)(a1 + 192)) {
    apple::vision::libraries::facecore::processing::detection::detectWindowsWithoutROI(a2, a3, a4, a5, a6, a7);
  }
  else {
    apple::vision::libraries::facecore::processing::detection::detectWindowsWithROI(a1, (uint64_t)a3, a4, (uint64_t)a5, a6, a7);
  }
}

void apple::vision::libraries::facecore::processing::detection::detectWindowsGCD(uint64_t a1, double a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = *(void *)(a1 + 184);
  uint64_t v10 = *(void *)(a1 + 192);
  if (v9 == v10 || *(_DWORD *)(a1 + 20) != 1) {
    operator new[]();
  }
  if (v10 - v9 == 32)
  {
    unint64_t v12 = *(int **)(a5 + 160);
    int v13 = *v12;
    int v14 = v12[1];
    int v15 = v12[2];
    int v16 = v12[3];
    apple::vision::libraries::facecore::processing::detection::detectWindowsInROIWithGCD(a4, a5, a6, a7, v13, v14, v15, v16, a2);
  }
  else
  {
    apple::vision::libraries::facecore::processing::detection::detectWindowsWithROI(a1, (uint64_t)a4, a5, a6, a7, a2);
  }
}

void ___ZN5apple6vision9libraries8facecore10processing9detection16detectWindowsGCDERKNS2_15FaceCoreContextEPKNS2_3mod7windows6WindowERKNSt3__16vectorItNSD_9allocatorItEEEERKNS4_13IntegralImageEdRKNSE_IPKNS4_8cascades9t_cascadeENSF_ISQ_EEEERNSE_INS2_12FaceInternalENSF_ISV_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

void std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DBD98488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<apple::vision::libraries::facecore::FaceInternal>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

#error "1DBD984F0: too big function (funcsize=0)"

apple::vision::libraries::facecore::mod::aam::AamSearch *apple::vision::libraries::facecore::mod::aam::AamSearch::AamSearch(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  *(void *)this = &unk_1F360CFF0;
  bzero((char *)this + 8, 0x13D0uLL);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 5080);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 5272);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 5464);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 5656);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 34656);
  uint64_t v2 = -9504;
  do
  {
    uint64_t v3 = (char *)this + v2 + 36104;
    *((_OWORD *)v3 + 595) = 0uLL;
    *((_OWORD *)v3 + 594) = 0uLL;
    v2 += 96;
  }
  while (v2);
  uint64_t v4 = -9504;
  do
  {
    size_t v5 = (char *)this + v4 + 45608;
    *((_OWORD *)v5 + 595) = 0uLL;
    *((_OWORD *)v5 + 594) = 0uLL;
    v4 += 96;
  }
  while (v4);
  *((_WORD *)this + 27532) = 0;
  *((void *)this + 6884) = 0;
  *((_WORD *)this + 27540) = 0;
  *(void *)((char *)this + 55084) = 0x6400000000;
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 55112);
  uint64_t v6 = 0;
  uint64_t v7 = (char *)this + 55112;
  do
  {
    apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)(v7 + 192));
    v6 -= 192;
    v7 += 192;
  }
  while (v6 != -9600);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 64904);
  uint64_t v8 = 0;
  uint64_t v9 = (char *)this + 64904;
  do
  {
    apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)(v9 + 192));
    v8 -= 192;
    v9 += 192;
  }
  while (v8 != -19200);
  uint64_t v10 = 0;
  uint64_t v11 = (char *)this + 84104;
  do
  {
    apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)(v11 + 192));
    v10 -= 192;
    v11 += 192;
  }
  while (v10 != -5760);
  uint64_t v12 = 0;
  int v13 = (char *)this + 89864;
  do
  {
    apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)(v13 + 192));
    v12 -= 192;
    v13 += 192;
  }
  while (v12 != -5760);
  *((_OWORD *)this + 6448) = 0u;
  *((_OWORD *)this + 6449) = 0u;
  *((_OWORD *)this + 6446) = 0u;
  *((_OWORD *)this + 6447) = 0u;
  *((_OWORD *)this + 6444) = 0u;
  *((_OWORD *)this + 6445) = 0u;
  *((_OWORD *)this + 6442) = 0u;
  *((_OWORD *)this + 6443) = 0u;
  *((_OWORD *)this + 6441) = 0u;
  bzero((char *)this + 148720, 0x2370uLL);
  *((void *)this + 1185030) = 0;
  *((_OWORD *)this + 592514) = 0u;
  *(_OWORD *)((char *)this + 103208) = 0u;
  *(_OWORD *)((char *)this + 103224) = 0u;
  *(_OWORD *)((char *)this + 103240) = 0u;
  *(_OWORD *)((char *)this + 103256) = 0u;
  bzero((char *)this + 103344, 0x7620uLL);
  bzero((char *)this + 141448, 0x13B0uLL);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 9480248);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 9480440);
  *((void *)this + 1185081) = 0;
  *(_OWORD *)((char *)this + 9480632) = 0u;
  bzero((char *)this + 11578208, 0x3F0uLL);
  bzero((char *)this + 11579576, 0x3F0uLL);
  apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid((uint64_t)this + 11580584);
  vDSP_vclrD((double *)this + 732, 1, 0xE10uLL);
  *((void *)this + 16780) = 0;
  *((_OWORD *)this + 8388) = 0u;
  *((_OWORD *)this + 8389) = 0u;
  *((_OWORD *)this + 8386) = 0u;
  *((_OWORD *)this + 8387) = 0u;
  *((_OWORD *)this + 8384) = 0u;
  *((_OWORD *)this + 8385) = 0u;
  *((_OWORD *)this + 8382) = 0u;
  *((_OWORD *)this + 8383) = 0u;
  *((_OWORD *)this + 8380) = 0u;
  *((_OWORD *)this + 8381) = 0u;
  *((_OWORD *)this + 8378) = 0u;
  *((_OWORD *)this + 8379) = 0u;
  *((_OWORD *)this + 592541) = 0u;
  *((_OWORD *)this + 592542) = 0u;
  return this;
}

void sub_1DBDC00A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  apple::vision::libraries::facecore::mod::aam::AamSearch::AamSearch(v26);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a20);
  for (uint64_t i = 0; i != 72; i += 8)
    free(*(void **)(v27 + i));
  for (uint64_t j = 0; j != 72; j += 8)
    free(*(void **)(a18 + j));
  a20 = a11;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a20);
  for (uint64_t k = 0; k != -144; k -= 16)
    std::valarray<unsigned int>::~valarray(a19 + 103184 + k);
  uint64_t v31 = a19 + 95624;
  do
  {
    uint64_t v33 = 0;
    a12 -= 192;
    do
    {
      free(*(void **)(v31 + v33));
      v33 += 8;
    }
    while (v33 != 72);
    v31 -= 192;
  }
  while (a12 != v22);
  uint64_t v34 = a19 + 89864;
  do
  {
    uint64_t v35 = 0;
    v22 -= 192;
    do
    {
      free(*(void **)(v34 + v35));
      v35 += 8;
    }
    while (v35 != 72);
    v34 -= 192;
  }
  while (v22 != v21);
  uint64_t v36 = a19 + 84104;
  do
  {
    uint64_t v37 = 0;
    v21 -= 192;
    do
    {
      free(*(void **)(v36 + v37));
      v37 += 8;
    }
    while (v37 != 72);
    v36 -= 192;
  }
  while (v21 != a13);
  for (uint64_t m = 0; m != 72; m += 8)
    free(*(void **)(v25 + m));
  uint64_t v39 = a19 + 64712;
  do
  {
    uint64_t v40 = 0;
    v25 -= 192;
    do
    {
      free(*(void **)(v39 + v40));
      v40 += 8;
    }
    while (v40 != 72);
    v39 -= 192;
  }
  while (v25 != v20);
  for (uint64_t n = 0; n != 72; n += 8)
    free(*(void **)(v24 + n));
  for (iuint64_t i = 0; ii != 72; ii += 8)
    free(*(void **)(v23 + ii));
  for (juint64_t j = 0; jj != 72; jj += 8)
    free(*(void **)(a15 + jj));
  for (kuint64_t k = 0; kk != 72; kk += 8)
    free(*(void **)(a16 + kk));
  for (muint64_t m = 0; mm != 72; mm += 8)
    free(*(void **)(a17 + mm));
  for (nuint64_t n = 0; nn != 72; nn += 8)
    free(*(void **)(a14 + nn));
  std::valarray<unsigned int>::~valarray(a19 + 5064);
  std::valarray<unsigned int>::~valarray(a19 + 5048);
  _Unwind_Resume(a1);
}

void sub_1DBDC0398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v15)
  {
    do
    {
      uint64_t v16 = 0;
      v14 -= 192;
      do
      {
        free(*(void **)(v13 + v16));
        v16 += 8;
      }
      while (v16 != 72);
      v13 -= 192;
    }
    while (v14 != a13);
  }
  JUMPOUT(0x1DBDC0288);
}

void sub_1DBDC03D0()
{
  if (v2)
  {
    do
    {
      uint64_t v4 = 0;
      v3 -= 192;
      do
      {
        free(*(void **)(v1 + v4));
        v4 += 8;
      }
      while (v4 != 72);
      v1 -= 192;
    }
    while (v3 != v0);
  }
  JUMPOUT(0x1DBDC02DCLL);
}

uint64_t std::valarray<unsigned int>::~valarray(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (v2)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    if (v3 != v2) {
      *(void *)(a1 + 8) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::~AamSearch(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (void *)((char *)this + 9480656);
  *(void *)this = &unk_1F360CFF0;
  uint64_t v3 = *((void *)this + 1185082);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C8000313F17);
  }
  uint64_t v4 = v2[1];
  if (v4) {
    MEMORY[0x1E0196CF0](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = v2[2];
  if (v5) {
    MEMORY[0x1E0196CF0](v5, 0x1000C8000313F17);
  }
  uint64_t v6 = (void **)((char *)this + 103192);
  uint64_t v7 = v2[3];
  if (v7) {
    MEMORY[0x1E0196CF0](v7, 0x1000C8000313F17);
  }
  for (uint64_t i = 0; i != 72; i += 8)
    free(*(void **)((char *)this + i + 11580584));
  uint64_t v36 = (void **)((char *)this + 9480632);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  for (uint64_t j = 0; j != 72; j += 8)
    free(*(void **)((char *)this + j + 9480440));
  for (uint64_t k = 0; k != 72; k += 8)
    free(*(void **)((char *)this + k + 9480248));
  uint64_t v36 = (void **)((char *)this + 9480224);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v36);
  uint64_t v11 = -144;
  do
  {
    uint64_t v12 = *(v6 - 1);
    if (v12)
    {
      if (*v6 != v12) {
        *uint64_t v6 = (char *)*v6 + ((v12 - (unsigned char *)*v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      }
      operator delete(v12);
      *(v6 - 1) = 0;
      *uint64_t v6 = 0;
    }
    v6 -= 2;
    v11 += 16;
  }
  while (v11);
  uint64_t v13 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 90056);
  uint64_t v14 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 95816);
  uint64_t v15 = (char *)this + 95624;
  do
  {
    uint64_t v16 = 0;
    uint64_t v14 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)v14 - 192);
    do
    {
      free(*(void **)&v15[v16]);
      v16 += 8;
    }
    while (v16 != 72);
    v15 -= 192;
  }
  while (v14 != v13);
  double v17 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 84296);
  long long v18 = (char *)this + 89864;
  do
  {
    uint64_t v19 = 0;
    uint64_t v13 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)v13 - 192);
    do
    {
      free(*(void **)&v18[v19]);
      v19 += 8;
    }
    while (v19 != 72);
    v18 -= 192;
  }
  while (v13 != v17);
  uint64_t v20 = (char *)this + 84104;
  do
  {
    uint64_t v21 = 0;
    double v17 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)v17 - 192);
    do
    {
      free(*(void **)&v20[v21]);
      v21 += 8;
    }
    while (v21 != 72);
    v20 -= 192;
  }
  while (v17 != (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 65096));
  uint64_t v22 = 0;
  uint64_t v23 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 64904);
  do
  {
    free(*(void **)((char *)v23 + v22));
    v22 += 8;
  }
  while (v22 != 72);
  uint64_t v24 = (char *)this + 64712;
  do
  {
    uint64_t v25 = 0;
    uint64_t v23 = (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)v23 - 192);
    do
    {
      free(*(void **)&v24[v25]);
      v25 += 8;
    }
    while (v25 != 72);
    v24 -= 192;
  }
  while (v23 != (apple::vision::libraries::facecore::mod::aam::AamSearch *)((char *)this + 55304));
  for (uint64_t m = 0; m != 72; m += 8)
    free(*(void **)((char *)this + m + 55112));
  for (uint64_t n = 0; n != 72; n += 8)
    free(*(void **)((char *)this + n + 34656));
  for (iuint64_t i = 707; ii != 716; ++ii)
    free(*((void **)this + ii));
  for (juint64_t j = 683; jj != 692; ++jj)
    free(*((void **)this + jj));
  for (kuint64_t k = 659; kk != 668; ++kk)
    free(*((void **)this + kk));
  for (muint64_t m = 635; mm != 644; ++mm)
    free(*((void **)this + mm));
  double v32 = (unsigned char *)*((void *)this + 633);
  if (v32)
  {
    uint64_t v33 = (unsigned char *)*((void *)this + 634);
    if (v33 != v32) {
      *((void *)this + 634) = &v33[(v32 - v33 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v32);
    *((void *)this + 633) = 0;
    *((void *)this + 634) = 0;
  }
  uint64_t v34 = (unsigned char *)*((void *)this + 631);
  if (v34)
  {
    uint64_t v35 = (unsigned char *)*((void *)this + 632);
    if (v35 != v34) {
      *((void *)this + 632) = &v35[(v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v34);
    *((void *)this + 631) = 0;
    *((void *)this + 632) = 0;
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::mod::aam::AamSearch::~AamSearch(this);

  JUMPOUT(0x1E0196D10);
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(apple::vision::libraries::facecore::mod::aam::AamSearch *this, int a2)
{
  uint64_t v3 = (char *)this + 55079;
  uint64_t v4 = (char *)this + 34728;
  *((_DWORD *)this + 1290) = a2;
  uint64_t v5 = a2;
  uint64_t v6 = (void *)((char *)this + 8 * a2);
  *((void *)this + 644) = v6[635];
  *((_DWORD *)this + 1338) = a2;
  *((void *)this + 668) = v6[659];
  *((_DWORD *)this + 1386) = a2;
  *((void *)this + 692) = v6[683];
  *((_DWORD *)this + 1434) = a2;
  *((void *)this + 716) = v6[707];
  *((_DWORD *)this + 13798) = a2;
  *((void *)this + 6898) = v6[6889];
  *((_DWORD *)this + 2895166) = a2;
  *((void *)this + 1447582) = v6[1447573];
  *((_DWORD *)this + 2370082) = a2;
  *((void *)this + 1185040) = v6[1185031];
  *((_DWORD *)this + 2370130) = a2;
  *((void *)this + 1185064) = v6[1185055];
  uint64_t v7 = (char *)this + 84296;
  uint64_t v8 = 30;
  do
  {
    *((_DWORD *)v7 + 20) = a2;
    *((void *)v7 + 9) = *(void *)&v7[8 * a2];
    *((_DWORD *)v7 + 1460) = a2;
    *((void *)v7 + 729) = *(void *)&v7[8 * a2 + 5760];
    v7 += 192;
    --v8;
  }
  while (v8);
  uint64_t v9 = (char *)this + 55304;
  uint64_t v10 = 50;
  do
  {
    *((_DWORD *)v9 + 20) = a2;
    *((void *)v9 + 9) = *(void *)&v9[8 * a2];
    v9 += 192;
    --v10;
  }
  while (v10);
  uint64_t v11 = 0;
  *uint64_t v3 = 0;
  *((void *)this + 12900) = *((void *)this + 2 * a2 + 12882);
  double v12 = (double)(*((_DWORD *)this + a2 + 13799) - 1);
  do
  {
    *(float64x2_t *)((char *)this + v11 + 2024) = vmulq_n_f64(*(float64x2_t *)((char *)this + v11 + 4040), v12);
    v11 += 16;
  }
  while (v11 != 1008);
  uint64_t v13 = (char *)this + 34656;
  memcpy(v15, (char *)this + 2024, sizeof(v15));
  *((_DWORD *)v4 + 2) = a2;
  *(void *)uint64_t v4 = *(void *)&v13[8 * v5];
  uint64_t result = apple::vision::libraries::facecore::mod::aam::AffineWarp::SetWarpTarget((uint64_t)v13, (uint64_t)v15);
  *(_DWORD *)(v3 + 13) = a2;
  return result;
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::SetEyePositions(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = (unsigned char *)(this + 55073);
  *(double *)(this + 103272) = a2;
  *(double *)(this + 103280) = a3;
  *(double *)(this + 103288) = a4;
  *(double *)(this + 103296) = a5;
  *(double *)(this + 103304) = a6;
  *(double *)(this + 103312) = a7;
  double v8 = *(double *)(this + 103224) - *(double *)(this + 103208);
  double v9 = sqrt((a4 - a2) * (a4 - a2) + (a5 - a3) * (a5 - a3));
  if (v9 <= v8 * 128.0 && v9 <= v8 * 64.0 && v9 <= v8 * 256.0) {
    int v12 = 5;
  }
  else {
    int v12 = 6;
  }
  *(_DWORD *)(this + 55096) = v12;
  if (*(unsigned char *)(this + 55081)) {
    this = printf("Eye distance: %g maxLod: %d\nTemplate eye distance at this LOD: %g\n", v9, v12, v8 * (double)(1 << v12));
  }
  *uint64_t v7 = 1;
  return this;
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::MakeSearchImage(apple::vision::libraries::facecore::mod::aam::AamSearch *this, const unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v4 = (char *)this + 55073;
  if (!*((unsigned char *)this + 55073))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "must SetEyePositions() before calling MakeSearchImage()");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v9 = (double *)((char *)this + 103208);
  apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, 6);
  double v74 = v4;
  unsigned int v10 = *((_DWORD *)this + *(int *)(v4 + 119) + 13799) - 1;
  double v12 = v9[8];
  double v11 = v9[9];
  double v14 = v9[10];
  double v13 = v9[11];
  double v15 = v14 - v12;
  double v16 = v13 - v11;
  int v17 = vcvtmd_s64_f64(sqrt(v16 * v16 + v15 * v15) / (v9[2] * (double)v10 - *v9 * (double)v10));
  if (v17 <= 1) {
    int v18 = 1;
  }
  else {
    int v18 = v17;
  }
  double v19 = v12 - v15;
  double v20 = v11 - v16;
  double v21 = v12 - v15 - v16 * -0.75;
  double v22 = v11 - v16 - v15 * 0.75;
  double v23 = v14 + v15;
  double v24 = v13 + v16;
  double v25 = v14 + v15 - v16 * -0.75;
  double v26 = v13 + v16 - v15 * 0.75;
  double v27 = v16 * -2.25;
  double v28 = v15 * 2.25;
  double v29 = v19 + v27;
  double v30 = v28 + v20;
  double v31 = v23 + v27;
  double v32 = v28 + v24;
  int v33 = (int)v21;
  if ((int)v29 < (int)v21) {
    int v33 = (int)v29;
  }
  unsigned int v34 = v33 & ~(v33 >> 31);
  int v35 = (int)v26;
  if ((int)v26 >= (int)v22) {
    int v35 = (int)v22;
  }
  unsigned int v36 = v35 & ~(v35 >> 31);
  int v37 = (int)v25;
  if ((int)v25 <= (int)v31) {
    int v37 = (int)v31;
  }
  if (v37 >= a3) {
    int v38 = a3;
  }
  else {
    int v38 = v37;
  }
  int v39 = (int)v30;
  if ((int)v30 <= (int)v32) {
    int v39 = (int)v32;
  }
  if (v39 >= a4) {
    int v40 = a4;
  }
  else {
    int v40 = v39;
  }
  unsigned int v41 = (v38 - v34) / v18;
  *((_DWORD *)this + 1462) = v41;
  unsigned int v42 = (v40 - v36) / v18;
  *((_DWORD *)this + 1463) = v42;
  double v43 = (double)v18;
  unsigned char v9[8] = (v12 - (double)v34) / (double)v18;
  v9[9] = (v11 - (double)v36) / (double)v18;
  v9[10] = (v14 - (double)v34) / (double)v18;
  v9[11] = (v13 - (double)v36) / (double)v18;
  double v44 = v9[12];
  if (v44 != 0.0)
  {
    double v45 = (v9[13] - (double)v36) / v43;
    v9[12] = (v44 - (double)v34) / v43;
    v9[13] = v45;
  }
  long long v46 = (int **)((char *)this + 5064);
  std::valarray<float>::resize((uint64_t)this + 5064, (int)(v42 * v41), 0.0);
  std::valarray<float>::resize((uint64_t)this + 5048, *((int *)this + 1463) * (uint64_t)*((int *)this + 1462), 0.0);
  unsigned int v48 = v40 - v18 + 1;
  if (v36 < v48)
  {
    int v49 = 0;
    unsigned int v50 = v38 - v18 + 1;
    unsigned int v51 = v18 + v36;
    unsigned int v52 = v34 + a3 * v36;
    unsigned int v53 = v36;
    do
    {
      unsigned int v54 = v53 + v18;
      if (v34 < v50)
      {
        int v55 = *v46;
        unsigned int v56 = v52;
        unsigned int v57 = v34;
        do
        {
          unsigned int v58 = v57 + v18;
          double v59 = 0.0;
          if (v53 < v54)
          {
            unsigned int v60 = v56;
            unsigned int v61 = v53;
            do
            {
              unsigned int v62 = v60;
              int v63 = v18;
              if (v57 < v58)
              {
                do
                {
                  LOBYTE(v47) = a2[v62];
                  double v47 = (double)*(unint64_t *)&v47 / 255.0;
                  double v59 = v59 + v47;
                  ++v62;
                  --v63;
                }
                while (v63);
              }
              ++v61;
              v60 += a3;
            }
            while (v61 != v51);
          }
          *(float *)&int v64 = v59 / (float)(v18 * v18);
          v55[v49++] = v64;
          v56 += v18;
          v57 += v18;
        }
        while (v58 < v50);
      }
      v51 += v18;
      v52 += a3 * v18;
      v53 += v18;
    }
    while (v54 < v48);
  }
  int v65 = *((_DWORD *)this + 1462);
  int v66 = *((_DWORD *)this + 1463);
  uint64_t v67 = (v66 * v65);
  int v68 = (float *)*((void *)this + 631);
  if ((int)v67 >= 1)
  {
    int v69 = *v46;
    long long v70 = (_DWORD *)*((void *)this + 631);
    do
    {
      int v71 = *v69++;
      *v70++ = v71;
      --v67;
    }
    while (v67);
  }
  uint64_t result = apple::vision::libraries::facecore::mod::aam::AffineWarp::SetSourceImage((uint64_t)this + 34656, v68, v65, v66);
  *((_DWORD *)v9 + 28) = v18;
  *((_DWORD *)v9 + 29) = v34;
  *((_DWORD *)v9 + 30) = v36;
  v74[2] = 1;
  return result;
}

void sub_1DBDC0E74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v1 = (char *)this + 55075;
  if (!*((unsigned char *)this + 55075))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "Must load a searchimage prior to filtering it");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v2 = *((_DWORD *)this + *((int *)this + 13798) + 13799) - 1;
  double v3 = sqrt((*((double *)this + 12912) - *((double *)this + 12910))* (*((double *)this + 12912) - *((double *)this + 12910))+ (*((double *)this + 12911) - *((double *)this + 12909))* (*((double *)this + 12911) - *((double *)this + 12909)))/ (*((double *)this + 12903) * (double)v2 - *((double *)this + 12901) * (double)v2);
  if (v3 >= 1.0)
  {
    float v8 = v3 * 0.5;
    apple::vision::libraries::facecore::mod::filters::blur<float>(*((void *)this + 631), *((_DWORD *)this + 1462), *((_DWORD *)this + 1463), 0, v8);
    v1[1] = 1;
  }
  else
  {
    uint64_t v4 = (*((_DWORD *)this + 1463) * *((_DWORD *)this + 1462));
    if ((int)v4 >= 1)
    {
      uint64_t v5 = (int *)*((void *)this + 633);
      uint64_t v6 = (_DWORD *)*((void *)this + 631);
      do
      {
        int v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
  }
}

void sub_1DBDC0FA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch::InitSimilarityTransform(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v1 = (char *)this + 55073;
  if (!*((unsigned char *)this + 55073))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "must SetEyePositions() prior to calling InitSimilarityTransform()");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v3 = (double *)((char *)this + 7847392);
  uint64_t v4 = (double *)((char *)this + 103240);
  double v5 = *((double *)this + 12907);
  double v6 = *((double *)this + 12905);
  double v7 = v5 - v6;
  float64x2_t v8 = *(float64x2_t *)((char *)this + 103272);
  _Q5 = *(float64x2_t *)((char *)this + 103288);
  _Q3 = vsubq_f64(_Q5, v8);
  _D6 = *((double *)this + 12913);
  if (_D6 == 0.0)
  {
    double v13 = *((double *)this + 12906);
    double v17 = -_Q3.f64[1];
    double v26 = 1.0;
  }
  else
  {
    double v12 = *((double *)this + 12908);
    double v13 = *((double *)this + 12906);
    double v14 = v7 * *((double *)this + 450) - (v12 - v13) * *((double *)this + 449) + v6 * v12 - v5 * v13;
    double v15 = sqrt((v12 - v13) * (v12 - v13) + v7 * v7);
    double v16 = v14 / v15 / v15;
    double v17 = -_Q3.f64[1];
    __asm { FMLS            D17, D6, V3.D[1] }
    _D6 = *((void *)this + 12910);
    __asm { FMLS            D17, D6, V5.D[0] }
    double v25 = sqrt(vmlad_n_f64(vmuld_lane_f64(_Q3.f64[1], _Q3, 1), _Q3.f64[0], _Q3.f64[0]));
    double v26 = fmin(fmax(_D17 / v25 / v25 / v16, 0.75), 1.25);
  }
  float64x2_t v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0);
  float64x2_t v44 = vdivq_f64(_Q3, v27);
  double v45 = v17 / v7;
  v28.f64[0] = -_Q3.f64[0];
  v28.f64[1] = v17;
  float64x2_t v43 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64(v28, v6), v8, v7), v27);
  bzero(v47, 0x3F0uLL);
  uint64_t v29 = 0;
  double v30 = 1.0;
  if (v26 != 0.0) {
    double v30 = v26;
  }
  float64x2_t v31 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44.f64[0], 0);
  v31.f64[0] = v45;
  float64x2_t v32 = vmulq_n_f64(v31, v30);
  do
  {
    *(float64x2_t *)&v47[v29] = vaddq_f64(v43, vmlaq_n_f64(vmulq_n_f64(v32, *(double *)((char *)this + v29 + 3040) - v13), v44, *(double *)((char *)this + v29 + 3032)));
    v29 += 16;
  }
  while (v29 != 1008);
  uint64_t v33 = 0;
  double v34 = 0.0;
  do
  {
    double v34 = v34
        + *(double *)((char *)this + v33 + 103352) * *(double *)&v47[v33 + 8]
        + *(double *)((char *)this + v33 + 103344) * *(double *)&v47[v33];
    v33 += 16;
  }
  while (v33 != 1008);
  uint64_t v35 = 0;
  *double v3 = v34;
  v4[3821] = v34;
  double v36 = 0.0;
  do
  {
    double v36 = v36
        + *(double *)((char *)this + v35 + 104360) * *(double *)&v47[v35 + 8]
        + *(double *)((char *)this + v35 + 104352) * *(double *)&v47[v35];
    v35 += 16;
  }
  while (v35 != 1008);
  uint64_t v37 = 0;
  v3[1] = v36;
  v4[3822] = v36;
  double v38 = 0.0;
  do
  {
    double v38 = v38
        + *(double *)((char *)this + v37 + 105368) * *(double *)&v47[v37 + 8]
        + *(double *)((char *)this + v37 + 105360) * *(double *)&v47[v37];
    v37 += 16;
  }
  while (v37 != 1008);
  uint64_t v39 = 0;
  v3[2] = v38;
  v4[3823] = v38;
  double v40 = 0.0;
  do
  {
    double v40 = v40
        + *(double *)((char *)this + v39 + 106376) * *(double *)&v47[v39 + 8]
        + *(double *)((char *)this + v39 + 106368) * *(double *)&v47[v39];
    v39 += 16;
  }
  while (v39 != 1008);
  v3[3] = v40;
  v4[3824] = v40;
  memcpy((char *)this + 8, (char *)this + 3032, 0x3F0uLL);
  apple::vision::libraries::facecore::mod::aam::AamSearch::TransformShape((uint64_t)this, (uint64_t)this + 8, __src);
  uint64_t result = memcpy((char *)this + 8, __src, 0x3F0uLL);
  v1[1] = 1;
  return result;
}

void sub_1DBDC1308(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::TransformShape(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  double v5 = (double *)(a1 + 133808);
  bzero(a3, 0x3F0uLL);
  uint64_t v6 = 0;
  double v7 = *v5;
  double v8 = v5[1];
  double v9 = v5[2];
  double v10 = v5[3];
  do
  {
    double v11 = *(double *)(a2 + v6);
    double v12 = *(double *)(a2 + v6 + 8);
    double v13 = (double *)&a3[v6];
    *double v13 = v9 + v12 * -v8 + v7 * v11;
    v13[1] = v7 * v12 + v8 * v11 + v10;
    v6 += 16;
  }
  while (v6 != 1008);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::ImageGradientAndMultiply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2 + 4 * *(int *)(a2 + 80);
  int v6 = *(_DWORD *)(v5 + 84);
  int v7 = *(_DWORD *)(v5 + 156);
  uint64_t v8 = (v6 + 1);
  if (v8 < v7 + ~v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a2 + 72);
    uint64_t v11 = a5 + 4 * v8;
    int v12 = 2 * v6 + 2 - v7;
    unsigned int v13 = v6 + 1;
    do
    {
      float v14 = *(float *)(v10 + 4 * (v6 + (int)v9 + 2));
      if (v14 == 0.0 || (float v15 = *(float *)(v10 + 4 * (v6 + (int)v9)), v15 == 0.0))
      {
        uint64_t v16 = v13;
        float v17 = 0.0;
      }
      else
      {
        uint64_t v16 = v8 + v9;
        float v17 = (float)((float)(v14 - v15) * 0.5) * *(float *)(v11 + 4 * v9);
      }
      *(float *)(a3 + 4 * v16) = v17;
      float v18 = *(float *)(v10 + 4 * (2 * v6 + (int)v9 + 1));
      if (v18 == 0.0 || (float v19 = *(float *)(v10 + 4 * ((int)v9 + 1)), v19 == 0.0))
      {
        uint64_t v20 = v13;
        float v21 = 0.0;
      }
      else
      {
        uint64_t v20 = v8 + v9;
        float v21 = (float)((float)(v18 - v19) * 0.5) * *(float *)(v11 + 4 * v9);
      }
      *(float *)(a4 + 4 * v20) = v21;
      ++v9;
      ++v13;
    }
    while (v12 + v9);
  }
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::calculate_dWdp(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  unsigned int v2 = (char *)this + 34656;
  float v14 = (char *)this + 107376;
  float v15 = (void **)((char *)this + 85136);
  int v3 = 5;
  do
  {
    int v16 = v3;
    apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v3);
    uint64_t v4 = 84376;
    uint64_t v5 = 84452;
    uint64_t v6 = 90212;
    uint64_t v7 = 90136;
    uint64_t v8 = 4;
    uint64_t v9 = 84368;
    uint64_t v10 = 103344;
    do
    {
      bzero(*(void **)((char *)this + v9), 4 * *(unsigned int *)((char *)this + 4 * *(int *)((char *)this + v4) + v5));
      bzero(*(void **)((char *)this + v9 + 5760), 4 * *(unsigned int *)((char *)this + 4 * *(int *)((char *)this + v7) + v6));
      apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp_dWdp((uint64_t)v2, (uint64_t)this + v10, *(void *)((char *)this + v9), *(void *)((char *)this + v9 + 5760));
      v10 += 1008;
      v9 += 192;
      v4 += 192;
      v5 += 192;
      v7 += 192;
      v6 += 192;
      --v8;
    }
    while (v8);
    uint64_t v11 = (uint64_t)v14;
    int v12 = v15;
    uint64_t v13 = 26;
    do
    {
      bzero(*v12, 4 * *((unsigned int *)v12 + *((int *)v12 + 2) + 21));
      bzero(v12[720], 4 * *((unsigned int *)v12 + *((int *)v12 + 1442) + 1461));
      apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp_dWdp((uint64_t)v2, v11, (uint64_t)*v12, (uint64_t)v12[720]);
      v12 += 24;
      v11 += 1008;
      --v13;
    }
    while (v13);
    int v3 = v16 + 1;
  }
  while (v16 != 6);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::CalculateSDFactorsWithTemporarySDimages(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 5464;
  uint64_t v7 = *(int *)(a1 + 55092);
  *(_DWORD *)(a1 + 5544) = v7;
  uint64_t v8 = *(void **)(a1 + 5464 + 8 * v7);
  *(void *)(a1 + 5536) = v8;
  bzero(v8, 4 * *(unsigned int *)(v6 + 4 * v7 + 156));
  uint64_t v9 = *(int *)(a1 + 55092);
  *(_DWORD *)(a1 + 5736) = v9;
  uint64_t v10 = *(void **)(a1 + 5656 + 8 * v9);
  *(void *)(a1 + 5728) = v10;
  bzero(v10, 4 * *(unsigned int *)(a1 + 5656 + 4 * v9 + 156));
  apple::vision::libraries::facecore::mod::aam::AamSearch::ImageGradientAndMultiply(v11, a1 + 5080, *(void *)(a1 + 5536), *(void *)(a1 + 5728), *(void *)(a3 + 72));
  for (uint64_t i = 0; i != 30; ++i)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 192 * i + 90056 + 4 * *(int *)(a1 + 192 * i + 90136) + 156);
    float v14 = 0.0;
    float v15 = 0.0;
    if (v13)
    {
      int v16 = *(float **)(a1 + 192 * i + 90128);
      float v17 = *(float **)(a1 + 5728);
      uint64_t v18 = 4 * v13;
      do
      {
        float v19 = *v16++;
        float v20 = v19;
        float v21 = *v17++;
        float v15 = v15 + (float)(v20 * v21);
        v18 -= 4;
      }
      while (v18);
    }
    uint64_t v22 = *(unsigned int *)(a1 + 192 * i + 84296 + 4 * *(int *)(a1 + 192 * i + 84376) + 156);
    if (v22)
    {
      double v23 = *(float **)(a1 + 192 * i + 84368);
      double v24 = *(float **)(a1 + 5536);
      uint64_t v25 = 4 * v22;
      float v14 = 0.0;
      do
      {
        float v26 = *v23++;
        float v27 = v26;
        float v28 = *v24++;
        float v14 = v14 + (float)(v27 * v28);
        v25 -= 4;
      }
      while (v25);
    }
    *(double *)(a2 + 8 * i) = (float)(v15 + v14);
  }
  uint64_t v29 = 0;
  double v30 = *(float **)(a3 + 72);
  do
  {
    uint64_t v31 = *(unsigned int *)(a1 + 192 * v29 + 55304 + 4 * *(int *)(a1 + 192 * v29 + 55384) + 156);
    if (v31)
    {
      float64x2_t v32 = *(float **)(a1 + 192 * v29 + 55376);
      uint64_t v33 = 4 * v31;
      float v34 = 0.0;
      uint64_t v35 = v30;
      do
      {
        float v36 = *v32++;
        float v37 = v36;
        float v38 = *v35++;
        float v34 = v34 + (float)(v37 * v38);
        v33 -= 4;
      }
      while (v33);
    }
    else
    {
      float v34 = 0.0;
    }
    double result = v34;
    *(double *)(a2 + 8 * v29++ + 240) = result;
  }
  while (v29 != 30);
  return result;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::ComputeHessianUsingTrick(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  __p = 0;
  float v37 = 0;
  std::valarray<float>::resize((uint64_t)&__p, 0x1F0uLL, 0.0);
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  long long v4 = *((_OWORD *)this + 8383);
  long long v43 = *((_OWORD *)this + 8382);
  long long v44 = v4;
  long long v45 = *((_OWORD *)this + 8384);
  long long v5 = *((_OWORD *)this + 8379);
  long long v39 = *((_OWORD *)this + 8378);
  long long v40 = v5;
  long long v6 = *((_OWORD *)this + 8381);
  long long v41 = *((_OWORD *)this + 8380);
  long long v42 = v6;
  int v38 = 1065353216;
  uint64_t v46 = *((void *)this + 16770);
  uint64_t v7 = 1;
  uint64_t v8 = (float *)__p;
  do
  {
    uint64_t v9 = 0;
    uint64_t v3 = (int)v3;
    float v10 = *((float *)&v38 + v2);
    do
      v8[v3++] = v10 * *((float *)&v38 + v9++);
    while (v7 != v9);
    ++v2;
    ++v7;
  }
  while (v2 != 31);
  uint64_t v11 = 0;
  int v12 = v37;
  uint64_t v13 = *((int *)this + 13773) - 5;
  unint64_t v14 = ((char *)v37 - (char *)v8) & 0xFFFFFFFFFFFFFFFCLL;
  float v15 = (char *)this + 5856;
  do
  {
    for (uint64_t i = v11; i != 30; ++i)
    {
      if (v12 == v8)
      {
        double v18 = 0.0;
      }
      else
      {
        float v17 = (float *)((char *)this + 1785600 * v13 + 59520 * i + 1984 * v11 + 161392);
        double v18 = 0.0;
        unint64_t v19 = v14;
        float v20 = v8;
        do
        {
          float v21 = *v20++;
          float v22 = v21;
          float v23 = *v17++;
          double v18 = v18 + (float)(v22 * v23);
          v19 -= 4;
        }
        while (v19);
      }
      *(double *)&v15[480 * i + 8 * v11] = v18;
      *(double *)&v15[480 * v11 + 8 * i] = v18;
    }
    ++v11;
  }
  while (v11 != 30);
  double v24 = (char *)this + 111600 * v13 + 7303792;
  uint64_t v25 = 30;
  float v26 = (char *)this + 5856;
  do
  {
    uint64_t v27 = 0;
    float v28 = v24;
    do
    {
      uint64_t v29 = 0;
      double v30 = 0.0;
      do
      {
        double v30 = v30 + (float)(*(float *)((char *)&v38 + v29) * *(float *)&v28[v29]);
        v29 += 4;
      }
      while (v29 != 124);
      *(double *)&v26[480 * v27 + 8 * v25] = v30;
      *(double *)&v26[480 * v25 + 8 * v27++] = v30;
      v28 += 3720;
    }
    while (v27 != 30);
    ++v25;
    v24 += 124;
  }
  while (v25 != 60);
  uint64_t v31 = (char *)this + 20496;
  uint64_t v32 = 30;
  uint64_t v33 = 14400;
  do
  {
    uint64_t v34 = 0;
    uint64_t v35 = v31;
    do
    {
      if (v34)
      {
        *(void *)&v31[v34] = 0;
        *uint64_t v35 = 0;
      }
      else
      {
        *((void *)this + 61 * v32 + 732) = 0x3FF0000000000000;
      }
      v34 += 480;
      ++v35;
    }
    while (v33 != v34);
    ++v32;
    v31 += 488;
    v33 -= 480;
  }
  while (v32 != 60);
  if (v8)
  {
    if (v12 != v8) {
      float v37 = (float *)((char *)v12 + (((char *)v8 - (char *)v12 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    }
    operator delete(v8);
  }
}

void sub_1DBDC1B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::AddPriorsToHessian(uint64_t this)
{
  uint64_t v1 = 0;
  uint64_t v2 = this + 7775152;
  do
  {
    uint64_t v3 = v2;
    for (uint64_t i = v1; i != 60; ++i)
    {
      uint64_t v5 = 0;
      uint64_t v6 = this + 8 * (v1 + 60 * i);
      double v7 = 0.0;
      do
      {
        float32x4_t v8 = vmulq_f32(*(float32x4_t *)(v3 + v5), *(float32x4_t *)(v2 + v5));
        float64x2_t v9 = vcvt_hight_f64_f32(v8);
        float64x2_t v10 = vcvtq_f64_f32(*(float32x2_t *)v8.f32);
        double v7 = v7 + v10.f64[0] + v10.f64[1] + v9.f64[0] + v9.f64[1];
        v5 += 16;
      }
      while (v5 != 240);
      double v11 = *(double *)(v6 + 5856) + v7;
      *(double *)(v6 + 5856) = v11;
      *(double *)(this + 8 * (i + 60 * v1) + 5856) = v11;
      v3 += 240;
    }
    ++v1;
    v2 += 240;
  }
  while (v1 != 60);
  return this;
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::SolveHessianForParameterUpdates(apple::vision::libraries::facecore::mod::aam::AamSearch *this, double *a2, double *a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this);
  uint64_t v5 = v4;
  double v7 = v6;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  __CLPK_integer v14 = 60;
  __CLPK_integer v12 = 0;
  __CLPK_integer v13 = 1;
  vDSP_mtransD((const double *)(v3 + 5856), 1, v15, 1, 0x3CuLL, 0x3CuLL);
  MEMORY[0x1F4188790](v8);
  vDSP_mtransD(v7, 1, v11, 1, 0x3CuLL, 1uLL);
  uint64_t result = dgesv_(&v14, &v13, v15, &v14, v16, v11, &v14, &v12);
  for (uint64_t i = 0; i != 60; ++i)
    *(double *)(v5 + i * 8) = v11[i];
  return result;
}

void sub_1DBDC1D90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::UpdateShape(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (char *)this + 1016;
  memcpy((char *)this + 1016, (char *)this + 3032, 0x3F0uLL);
  for (uint64_t i = 0; i != 26; ++i)
  {
    uint64_t v4 = (const double *)((char *)this + 8 * i + 133840);
    memcpy(__dst, (char *)this + 1008 * i + 107376, sizeof(__dst));
    uint64_t v5 = 0;
    float64x2_t v6 = vld1q_dup_f64(v4);
    do
    {
      *(float64x2_t *)&__dst[v5] = vmulq_f64(v6, *(float64x2_t *)&__dst[v5]);
      v5 += 16;
    }
    while (v5 != 1008);
    memcpy(v29, __dst, sizeof(v29));
    for (uint64_t j = 0; j != 1008; j += 16)
      *(float64x2_t *)((char *)this + j + 1016) = vaddq_f64(*(float64x2_t *)&v29[j], *(float64x2_t *)((char *)this + j + 1016));
  }
  apple::vision::libraries::facecore::mod::aam::AamSearch::TransformShape((uint64_t)this, (uint64_t)v2, __dst);
  memcpy((char *)this + 8, __dst, 0x3F0uLL);
  double v8 = *((double *)this + 59) - *((double *)this + 67);
  double v9 = *((double *)this + 60) - *((double *)this + 68);
  double v10 = *((double *)this + 69);
  double v11 = *((double *)this + 70);
  double v12 = *((double *)this + 79);
  double v13 = *((double *)this + 80);
  double v14 = -v9;
  if (v8 * (v11 - v13) - v9 * (v10 - v12) > 0.0)
  {
    double v15 = (v10 + v12) * 0.5;
    *((double *)this + 69) = v15;
    double v16 = (v11 + v13) * 0.5;
    *((double *)this + 70) = v16;
    *((double *)this + 79) = v15;
    *((double *)this + 80) = v16;
  }
  double v17 = *((double *)this + 71);
  double v18 = *((double *)this + 72);
  double v19 = *((double *)this + 77);
  double v20 = *((double *)this + 78);
  if ((v17 - v19) * v14 + v8 * (v18 - v20) > 0.0)
  {
    double v21 = (v17 + v19) * 0.5;
    *((double *)this + 71) = v21;
    double v22 = (v18 + v20) * 0.5;
    *((double *)this + 72) = v22;
    *((double *)this + 77) = v21;
    *((double *)this + 78) = v22;
  }
  double v23 = *((double *)this + 73);
  double v24 = *((double *)this + 74);
  double v25 = *((double *)this + 75);
  double v26 = *((double *)this + 76);
  double result = (v23 - v25) * v14 + v8 * (v24 - v26);
  if (result > 0.0)
  {
    double result = (v23 + v25) * 0.5;
    *((double *)this + 73) = result;
    double v28 = (v24 + v26) * 0.5;
    *((double *)this + 74) = v28;
    *((double *)this + 75) = result;
    *((double *)this + 76) = v28;
  }
  return result;
}

void sub_1DBDC2030(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::mod::aam::AamSearch::ConstrainCoefficients(uint64_t this, double a2)
{
  uint64_t v2 = (double *)(this + 133840);
  uint64_t v3 = 26;
  do
  {
    double v4 = *(v2 - 32) * a2;
    if (fabs(*v2) > v4)
    {
      if (*v2 >= 0.0) {
        double v5 = *(v2 - 32) * a2;
      }
      else {
        double v5 = -v4;
      }
      *uint64_t v2 = v5;
    }
    ++v2;
    --v3;
  }
  while (v3);
  uint64_t v6 = 0;
  uint64_t v7 = this + 400 * *(int *)(this + 55092) + 95816;
  uint64_t v8 = this + 134048;
  do
  {
    double v9 = *(double *)(v7 + 8 * v6) * a2;
    float v10 = *(float *)(v8 + 4 * v6);
    if (v9 < fabsf(v10))
    {
      float v11 = v9;
      if (v10 >= 0.0) {
        float v12 = v11;
      }
      else {
        float v12 = -v11;
      }
      *(float *)(v8 + 4 * v6) = v12;
    }
    ++v6;
  }
  while (v6 != 30);
  return this;
}

void sub_1DBDC2148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::reset(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (char *)this + 133792;
  uint64_t v3 = (char *)this + 55073;
  *((unsigned char *)this + 55080) = 0;
  memset_pattern16((char *)this + 146488, &unk_1DBFF67D0, 0x48uLL);
  *(_OWORD *)uint64_t v2 = xmmword_1DBF81400;
  *((void *)v2 + 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 133816) = 0u;
  *(_OWORD *)((char *)this + 133832) = 0u;
  *(_OWORD *)((char *)this + 133848) = 0u;
  *(_OWORD *)((char *)this + 133864) = 0u;
  *(_OWORD *)((char *)this + 133880) = 0u;
  *(_OWORD *)((char *)this + 133896) = 0u;
  *(_OWORD *)((char *)this + 133912) = 0u;
  *(_OWORD *)((char *)this + 133928) = 0u;
  *(_OWORD *)((char *)this + 133944) = 0u;
  *(_OWORD *)((char *)this + 133960) = 0u;
  *(_OWORD *)((char *)this + 133976) = 0u;
  *(_OWORD *)((char *)this + 133992) = 0u;
  *(_OWORD *)((char *)this + 134008) = 0u;
  *(_OWORD *)((char *)this + 134024) = 0u;
  *(_OWORD *)((char *)this + 134040) = 0u;
  *(_OWORD *)((char *)this + 134056) = 0u;
  *(_OWORD *)((char *)this + 134072) = 0u;
  *(_OWORD *)((char *)this + 134088) = 0u;
  *(_OWORD *)((char *)this + 134104) = 0u;
  *(_OWORD *)((char *)this + 134120) = 0u;
  *(_OWORD *)((char *)this + 134136) = 0u;
  *(_OWORD *)((char *)this + 134152) = 0u;
  *(_OWORD *)((char *)this + 134168) = 0u;
  *(_OWORD *)((char *)this + 134184) = 0u;
  *(_OWORD *)((char *)this + 134200) = 0u;
  *(_OWORD *)((char *)this + 134216) = 0u;
  *(_OWORD *)((char *)this + 134232) = 0u;
  memcpy((char *)this + 8, (char *)this + 2024, 0x3F0uLL);
  if (*v3) {
    apple::vision::libraries::facecore::mod::aam::AamSearch::InitSimilarityTransform(this);
  }
  bzero(*((void **)this + 644), 4 * *((unsigned int *)this + *((int *)this + 1290) + 1309));
  bzero(*((void **)this + 668), 4 * *((unsigned int *)this + *((int *)this + 1338) + 1357));
  bzero(*((void **)this + 692), 4 * *((unsigned int *)this + *((int *)this + 1386) + 1405));
  double v4 = (void *)*((void *)this + 716);
  size_t v5 = 4 * *((unsigned int *)this + *((int *)this + 1434) + 1453);

  bzero(v4, v5);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearch(apple::vision::libraries::facecore::mod::aam::AamSearch *this, int a2, double a3, double a4, int a5, int a6)
{
  float v12 = (_OWORD *)((char *)this + 9464384);
  double v13 = (char *)this + 55080;
  apple::vision::libraries::facecore::mod::aam::AamSearch::initBias(this);
  apple::vision::libraries::facecore::mod::aam::AamSearch::setBias(this);
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetPriorsConstants(this);
  memcpy(v12, (char *)this + 9465344, 0x1E0uLL);
  *((_DWORD *)v13 + 2) = a5;
  *double v13 = 0;
  int v14 = *((_DWORD *)v13 + 4);
  if (v14 >= a6) {
    int v14 = a6;
  }
  *((_DWORD *)v13 + 4) = v14;
  if ((a2 & 0x20) == 0) {
    apple::vision::libraries::facecore::mod::aam::AamSearch::reset(this);
  }
  __dst = (double *)((char *)this + 8);
  uint64_t v86 = (void *)((char *)this + 11577840);
  if (a2 > 11)
  {
    switch(a2)
    {
      case 256:
        exception_object = (_Unwind_Exception *)((char *)this + 133808);
        if (*((int *)v13 + 4) >= 5) {
          int v24 = 5;
        }
        else {
          int v24 = *((_DWORD *)v13 + 4);
        }
        apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v24);
        apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
        for (uint64_t i = 0; i != 208; i += 16)
          *(_OWORD *)((char *)this + i + 11579216) = *(_OWORD *)((char *)this + i + 133840);
        for (uint64_t j = 0; j != 120; j += 4)
          *(_DWORD *)((char *)this + j + 11579424) = *(_DWORD *)((char *)this + j + 134048);
        uint64_t v27 = 0;
        long long v28 = *((_OWORD *)this + 8364);
        *(_OWORD *)((char *)this + 11579544) = *(_OWORD *)&exception_object->exception_class;
        *(_OWORD *)((char *)this + 11579560) = v28;
        uint64_t v29 = (char *)this + 11579576;
        do
        {
          *(_OWORD *)&v29[v27] = *(_OWORD *)((char *)this + v27 + 8);
          v27 += 16;
        }
        while (v27 != 1008);
        uint64_t v30 = 0;
        int v84 = 0;
        uint64_t v31 = v13 + 1;
        double v32 = 1000.0;
        do
        {
          long long v33 = *((_OWORD *)this + 30 * v30 + 591597);
          v12[12] = *((_OWORD *)this + 30 * v30 + 591596);
          v12[13] = v33;
          v12[14] = *((_OWORD *)this + 30 * v30 + 591598);
          long long v34 = *((_OWORD *)this + 30 * v30 + 591593);
          v12[8] = *((_OWORD *)this + 30 * v30 + 591592);
          v12[9] = v34;
          long long v35 = *((_OWORD *)this + 30 * v30 + 591595);
          v12[10] = *((_OWORD *)this + 30 * v30 + 591594);
          v12[11] = v35;
          long long v36 = *((_OWORD *)this + 30 * v30 + 591589);
          v12[4] = *((_OWORD *)this + 30 * v30 + 591588);
          v12[5] = v36;
          long long v37 = *((_OWORD *)this + 30 * v30 + 591591);
          v12[6] = *((_OWORD *)this + 30 * v30 + 591590);
          v12[7] = v37;
          long long v38 = *((_OWORD *)this + 30 * v30 + 591585);
          *float v12 = *((_OWORD *)this + 30 * v30 + 591584);
          v12[1] = v38;
          long long v39 = *((_OWORD *)this + 30 * v30 + 591587);
          v12[2] = *((_OWORD *)this + 30 * v30 + 591586);
          v12[3] = v39;
          apple::vision::libraries::facecore::mod::aam::AamSearch::InitSimilarityTransform(this);
          *double v13 = 0;
          *uint64_t v86 = 0x408F400000000000;
          *((_DWORD *)v13 + 1) = 0;
          if (a5 >= 1)
          {
            do
            {
              if (*v31) {
                putchar(46);
              }
              apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 0, a3, a4);
              (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *))(*(void *)this + 16))(this);
              if (*v13) {
                break;
              }
              int v40 = *((_DWORD *)v13 + 1) + 1;
              *((_DWORD *)v13 + 1) = v40;
            }
            while (v40 < a5);
          }
          if (*v31)
          {
            if (*v13) {
              long long v41 = ">";
            }
            else {
              long long v41 = "<";
            }
            puts(v41);
          }
          uint64_t v42 = *((unsigned int *)this + *((int *)this + 1338) + 1357);
          if (v42)
          {
            long long v43 = (float *)*((void *)this + 668);
            uint64_t v44 = 4 * v42;
            double v45 = 0.0;
            do
            {
              float v46 = *v43++;
              double v45 = v45 + (float)(v46 * v46);
              v44 -= 4;
            }
            while (v44);
          }
          else
          {
            double v45 = 0.0;
          }
          double v47 = sqrt(v45 / (double)v42);
          if (v47 < v32)
          {
            uint64_t v48 = 0;
            int v84 = v30;
            do
            {
              *(_OWORD *)((char *)this + v48 + 11579216) = *(_OWORD *)((char *)this + v48 + 133840);
              v48 += 16;
            }
            while (v48 != 208);
            for (uint64_t k = 0; k != 120; k += 4)
              *(_DWORD *)((char *)this + k + 11579424) = *(_DWORD *)((char *)this + k + 134048);
            uint64_t v50 = 0;
            long long v51 = *((_OWORD *)this + 8364);
            *(_OWORD *)((char *)this + 11579544) = *(_OWORD *)&exception_object->exception_class;
            *(_OWORD *)((char *)this + 11579560) = v51;
            do
            {
              *(_OWORD *)&v29[v50] = *(_OWORD *)((char *)this + v50 + 8);
              v50 += 16;
            }
            while (v50 != 1008);
            int v52 = *((_DWORD *)this + *((int *)this + 1290) + 1309);
            if (v52)
            {
              int v53 = 0;
              uint64_t v54 = *((void *)this + 644);
              uint64_t v55 = *((void *)this + 1447582);
              do
              {
                *(_DWORD *)(v55 + 4 * v53) = *(_DWORD *)(v54 + 4 * v53);
                ++v53;
              }
              while (v52 != v53);
            }
            apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
            double v32 = v47;
          }
          ++v30;
        }
        while (v30 != 30);
        long long v64 = *((_OWORD *)this + 723712);
        *((_OWORD *)this + 8375) = *((_OWORD *)this + 723711);
        *((_OWORD *)this + 8376) = v64;
        *((_OWORD *)this + 8377) = *((_OWORD *)this + 723713);
        long long v65 = *((_OWORD *)this + 723708);
        *((_OWORD *)this + 8371) = *((_OWORD *)this + 723707);
        *((_OWORD *)this + 8372) = v65;
        long long v66 = *((_OWORD *)this + 723710);
        *((_OWORD *)this + 8373) = *((_OWORD *)this + 723709);
        *((_OWORD *)this + 8374) = v66;
        long long v67 = *((_OWORD *)this + 723704);
        *((_OWORD *)this + 8367) = *((_OWORD *)this + 723703);
        *((_OWORD *)this + 8368) = v67;
        long long v68 = *((_OWORD *)this + 723706);
        *((_OWORD *)this + 8369) = *((_OWORD *)this + 723705);
        *((_OWORD *)this + 8370) = v68;
        long long v69 = *((_OWORD *)this + 723702);
        *((_OWORD *)this + 8365) = *((_OWORD *)this + 723701);
        *((_OWORD *)this + 8366) = v69;
        long long v70 = *((_OWORD *)this + 723719);
        *((_OWORD *)this + 8382) = *((_OWORD *)this + 723718);
        *((_OWORD *)this + 8383) = v70;
        *((_OWORD *)this + 8384) = *((_OWORD *)this + 723720);
        *((void *)this + 16770) = *((void *)this + 1447442);
        long long v71 = *((_OWORD *)this + 723715);
        *((_OWORD *)this + 8378) = *((_OWORD *)this + 723714);
        *((_OWORD *)this + 8379) = v71;
        long long v72 = *((_OWORD *)this + 723717);
        *((_OWORD *)this + 8380) = *((_OWORD *)this + 723716);
        *((_OWORD *)this + 8381) = v72;
        *(void *)&long long v69 = *((void *)this + 1447443);
        *(void *)&long long v72 = *((void *)this + 1447444);
        exception_object->exception_class = v69;
        *((void *)this + 16727) = v72;
        uint64_t v73 = *((void *)this + 1447445);
        uint64_t v74 = *((void *)this + 1447446);
        *((void *)this + 16728) = v73;
        *((void *)this + 16729) = v74;
        *(void *)float v12 = v69;
        *((void *)v12 + 1) = v72;
        *((void *)v12 + 2) = v73;
        *((void *)v12 + 3) = v74;
        memcpy(__dst, (char *)this + 11579576, 0x3F0uLL);
        int v75 = *((_DWORD *)this + *((int *)this + 1290) + 1309);
        if (v75)
        {
          int v76 = 0;
          uint64_t v77 = *((void *)this + 1447582);
          uint64_t v78 = *((void *)this + 644);
          do
          {
            *(_DWORD *)(v78 + 4 * v76) = *(_DWORD *)(v77 + 4 * v76);
            ++v76;
          }
          while (v75 != v76);
        }
        for (uint64_t m = 0; m != 480; m += 8)
          *(void *)((char *)this + m + 9464384) = *(void *)((char *)this + 480 * v84 + m + 9465344);
        if (*((int *)v13 + 4) >= 6)
        {
          int v80 = 6;
          do
          {
            apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v80);
            uint64_t v81 = 0;
            *double v13 = 0;
            *uint64_t v86 = 0x408F400000000000;
            do
            {
              *(float *)((char *)this + v81 + 134048) = *(float *)((char *)this + v81 + 134048)
                                                      + *(float *)((char *)this + v81 + 134048);
              v81 += 4;
            }
            while (v81 != 120);
            *((_DWORD *)v13 + 1) = 0;
            if (a5 >= 1)
            {
              do
              {
                if (*v31) {
                  putchar(46);
                }
                apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 0, a3, a4);
                if (*v13) {
                  break;
                }
                int v82 = *((_DWORD *)v13 + 1) + 1;
                *((_DWORD *)v13 + 1) = v82;
              }
              while (v82 < a5);
            }
            apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
            if (*v31)
            {
              if (*v13) {
                double v83 = ">";
              }
              else {
                double v83 = "<";
              }
              puts(v83);
            }
            BOOL v18 = v80++ < *((_DWORD *)v13 + 4);
          }
          while (v18);
        }
        goto LABEL_133;
      case 128:
        if (*((int *)v13 + 4) >= 5)
        {
          int v56 = 5;
          do
          {
            apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v56);
            apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
            uint64_t v57 = 0;
            *double v13 = 0;
            *uint64_t v86 = 0x408F400000000000;
            do
            {
              *(float *)((char *)this + v57 + 134048) = *(float *)((char *)this + v57 + 134048)
                                                      + *(float *)((char *)this + v57 + 134048);
              v57 += 4;
            }
            while (v57 != 120);
            *((_DWORD *)v13 + 1) = 0;
            if (a5 >= 1)
            {
              do
              {
                if (v13[1]) {
                  putchar(46);
                }
                apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 128, a3, a4);
                (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *))(*(void *)this
                                                                                                  + 16))(this);
                if (*v13) {
                  break;
                }
                int v58 = *((_DWORD *)v13 + 1) + 1;
                *((_DWORD *)v13 + 1) = v58;
              }
              while (v58 < a5);
            }
            apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
            BOOL v18 = v56++ < *((_DWORD *)v13 + 4);
          }
          while (v18);
        }
        goto LABEL_133;
      case 12:
        if (*((int *)v13 + 4) >= 5)
        {
          int v15 = 5;
          do
          {
            apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v15);
            apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
            *double v13 = 0;
            *uint64_t v86 = 0x408F400000000000;
            *((_DWORD *)v13 + 1) = 0;
            if (a5 >= 1)
            {
              while (1)
              {
                if (v13[1]) {
                  putchar(46);
                }
                apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 12, a3, (double)(v15 - 5) * 0.5 + 0.0);
                (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *))(*(void *)this
                                                                                                  + 16))(this);
                if (*v13) {
                  break;
                }
                int v16 = *((_DWORD *)v13 + 1) + 1;
                *((_DWORD *)v13 + 1) = v16;
                if (v16 >= a5) {
                  goto LABEL_18;
                }
              }
              printf("Converged in %d steps.\n", *((_DWORD *)v13 + 1));
            }
LABEL_18:
            apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
            if (v13[1])
            {
              if (*v13) {
                double v17 = ">";
              }
              else {
                double v17 = "<";
              }
              puts(v17);
            }
            BOOL v18 = v15++ < *((_DWORD *)v13 + 4);
          }
          while (v18);
        }
        goto LABEL_133;
    }
LABEL_102:
    apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, *((_DWORD *)v13 + 4));
    apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
    *double v13 = 0;
    *uint64_t v86 = 0x408F400000000000;
    *((_DWORD *)v13 + 1) = 0;
    if (a5 >= 1)
    {
      do
      {
        if (v13[1]) {
          putchar(46);
        }
        apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, a2, a3, a4);
        (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *))(*(void *)this + 16))(this);
        if (*v13) {
          break;
        }
        int v62 = *((_DWORD *)v13 + 1) + 1;
        *((_DWORD *)v13 + 1) = v62;
      }
      while (v62 < a5);
    }
    apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
    if (v13[1])
    {
      if (*v13) {
        int v63 = ">";
      }
      else {
        int v63 = "<";
      }
      puts(v63);
    }
    goto LABEL_133;
  }
  if (a2 == 4)
  {
    if (*((int *)v13 + 4) >= 5)
    {
      int v59 = 5;
      do
      {
        apple::vision::libraries::facecore::mod::aam::AamSearch::setLod(this, v59);
        apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
        *double v13 = 0;
        *uint64_t v86 = 0x408F400000000000;
        *((_DWORD *)v13 + 1) = 0;
        if (a5 >= 1)
        {
          do
          {
            if (v13[1]) {
              putchar(46);
            }
            (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *, double))(*(void *)this + 16))(this, *__dst);
            apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 4, a3, a4);
            if (*v13) {
              break;
            }
            int v60 = *((_DWORD *)v13 + 1) + 1;
            *((_DWORD *)v13 + 1) = v60;
          }
          while (v60 < a5);
        }
        apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
        if (v13[1])
        {
          if (*v13) {
            unsigned int v61 = ">";
          }
          else {
            unsigned int v61 = "<";
          }
          puts(v61);
        }
        BOOL v18 = v59++ < *((_DWORD *)v13 + 4);
      }
      while (v18);
    }
    goto LABEL_133;
  }
  if (a2 != 8) {
    goto LABEL_102;
  }
  uint64_t v19 = 0;
  double v20 = 0.0;
  do
  {
    *double v13 = 0;
    *uint64_t v86 = 0x408F400000000000;
    int v21 = dword_1DBFF67E0[v19];
    *((_DWORD *)v13 + 1) = 0;
    while (1)
    {
      if (v13[1]) {
        putchar(46);
      }
      apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(this, 8, a3, v20);
      (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *))(*(void *)this + 16))(this);
      if (*v13) {
        break;
      }
      int v22 = *((_DWORD *)v13 + 1) + 1;
      *((_DWORD *)v13 + 1) = v22;
      if (v22 >= v21)
      {
        double v23 = "<";
        if (!v13[1]) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
    double v23 = ">";
    if (!v13[1]) {
      goto LABEL_37;
    }
LABEL_36:
    puts(v23);
LABEL_37:
    ++v19;
    double v20 = v20 + 0.5;
  }
  while (v19 != 6);
  apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(this);
LABEL_133:
  if (v13[1])
  {
    putchar(10);
  }
}

void sub_1DBDC3148(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  JUMPOUT(0x1DBDC3154);
}

#error "1DBDC31C4: call analysis failed (funcsize=27)"

void *apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearchStep(apple::vision::libraries::facecore::mod::aam::AamSearch *this, char a2, double a3, double a4)
{
  v95[60] = *(double *)MEMORY[0x1E4F143B8];
  double v4 = (char *)this + 55074;
  if (!*((unsigned char *)this + 55074))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "Must initialize shape prior to doing search ");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = (char *)this + 11577840;
  double v9 = (double *)((char *)this + 145488);
  float v10 = (uint64_t *)((char *)this + 34728);
  float v11 = (_OWORD *)((char *)this + 143464);
  uint64_t v12 = 63;
  do
  {
    v11[63] = *v11;
    ++v11;
    --v12;
  }
  while (v12);
  uint64_t v13 = 63;
  int v14 = (_OWORD *)((char *)this + 142456);
  do
  {
    v14[63] = *v14;
    ++v14;
    --v13;
  }
  while (v13);
  int v15 = (char *)this + 141448;
  uint64_t v16 = 63;
  double v17 = (_OWORD *)((char *)this + 141448);
  do
  {
    v17[63] = *v17;
    ++v17;
    --v16;
  }
  while (v16);
  BOOL v18 = (char *)this + 8;
  do
  {
    *(_OWORD *)&v15[v16] = *(_OWORD *)((char *)this + v16 + 8);
    v16 += 16;
  }
  while (v16 != 1008);
  for (uint64_t i = 0; i != 1008; i += 16)
    ;
  double v90 = (char *)this + 142456;
  double v91 = (_OWORD *)((char *)this + 133808);
  apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp((uint64_t)this + 34656, (uint64_t)this + 8, *((void *)this + 668));
  v4[5] = 0;
  uint64_t v21 = *((int *)this + 1338);
  unsigned int v22 = *((_DWORD *)this + v21 + 1357);
  if (v22)
  {
    for (unsigned int j = 0; j < v22; ++j)
      unsigned int v22 = *((_DWORD *)this + (int)v21 + 1357);
    if (*(_DWORD *)(v4 + 26) == 1)
    {
      if (v22)
      {
        int v24 = 0;
        double v25 = 0.0;
        do
        {
          int v26 = v24;
          if ((*(_DWORD *)(*v10 + 4 * v24) & 0x80000000) == 0) {
            double v25 = v25 + *(float *)(*((void *)this + 668) + 4 * v24);
          }
          ++v24;
        }
        while (v22 != v26 + 1);
        int v27 = 0;
        uint64_t v28 = *v10;
        float v29 = v25 / (double)*((int *)this + *(int *)(v4 + 18) + 25754);
        do
        {
          int v30 = v27;
          if ((*(_DWORD *)(v28 + 4 * v27) & 0x80000000) == 0) {
            *(float *)(*((void *)this + 668) + 4 * v27) = *(float *)(*((void *)this + 668) + 4 * v27) - v29;
          }
          ++v27;
        }
        while (v22 != v30 + 1);
      }
    }
    else if (v22)
    {
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)(v4 + 110);
      uint64_t v33 = *((void *)this + 668);
      do
      {
        *(float *)(v33 + 4 * v31) = *(float *)(v33 + 4 * v31) - *(float *)(v32 + 4 * (int)v31);
        ++v31;
      }
      while (v22 != v31);
    }
  }
  if ((a2 & 1) == 0)
  {
    bzero(*((void **)this + 644), 4 * *((unsigned int *)this + *((int *)this + 1290) + 1309));
    apple::vision::libraries::facecore::mod::aam::AamSearch::DoSyntheticImageComposite(this);
    unsigned int v22 = *((_DWORD *)this + *((int *)this + 1338) + 1357);
    if (v22)
    {
      uint64_t v34 = 0;
      uint64_t v35 = *((void *)this + 644);
      uint64_t v36 = *((void *)this + 668);
      do
      {
        *(float *)(v36 + 4 * v34) = *(float *)(v36 + 4 * v34) - *(float *)(v35 + 4 * (int)v34);
        ++v34;
      }
      while (v22 != v34);
    }
    v4[5] = 1;
    if (*(_DWORD *)(v4 + 26) != 1)
    {
      int v37 = *((_DWORD *)this + *((int *)this + 1290) + 1309);
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = *(void *)(v4 + 110);
        uint64_t v40 = *((void *)this + 644);
        do
        {
          *(float *)(v40 + 4 * v38) = *(float *)(v39 + 4 * (int)v38) + *(float *)(v40 + 4 * v38);
          ++v38;
        }
        while (v37 != v38);
      }
    }
  }
  uint64_t v41 = v22;
  if (v22)
  {
    uint64_t v42 = (float *)*((void *)this + 668);
    uint64_t v43 = 4 * v41;
    double v44 = 0.0;
    do
    {
      float v45 = *v42++;
      double v44 = v44 + (float)(v45 * v45);
      v43 -= 4;
    }
    while (v43);
  }
  else
  {
    double v44 = 0.0;
  }
  double v46 = sqrt(v44 / (double)v41);
  if (v46 <= *(double *)v8)
  {
    uint64_t v58 = 0;
    *(double *)uint64_t v8 = v46;
    do
    {
      *(_OWORD *)((char *)this + v58 + 11577848) = *(_OWORD *)((char *)this + v58 + 133840);
      v58 += 16;
    }
    while (v58 != 208);
    for (uint64_t k = 0; k != 120; k += 4)
      *(_DWORD *)((char *)this + k + 11578056) = *(_DWORD *)((char *)this + k + 134048);
    uint64_t v60 = 0;
    long long v61 = v91[1];
    *((_OWORD *)v8 + 21) = *v91;
    *((_OWORD *)v8 + 22) = v61;
    do
    {
      *(_OWORD *)((char *)this + v60 + 11578208) = *(_OWORD *)((char *)this + v60 + 8);
      v60 += 16;
    }
    while (v60 != 1008);
    apple::vision::libraries::facecore::mod::aam::AamSearch::Weighting(this);
    apple::vision::libraries::facecore::mod::aam::AamSearch::CalcPriorsQuad(this, *((_DWORD *)this + 1338));
    apple::vision::libraries::facecore::mod::aam::AamSearch::CalculateSDFactorsWithTemporarySDimages((uint64_t)this, (uint64_t)v95, (uint64_t)this + 5272);
    uint64_t v62 = 0;
    int v63 = (char *)this + 7775152;
    do
    {
      uint64_t v64 = 0;
      double v65 = 0.0;
      do
      {
        float32x4_t v66 = vmulq_f32(*(float32x4_t *)&v63[v64], *(float32x4_t *)((char *)this + v64 + 7847152));
        float64x2_t v67 = vcvt_hight_f64_f32(v66);
        float64x2_t v68 = vcvtq_f64_f32(*(float32x2_t *)v66.f32);
        double v65 = v65 + v68.f64[0] + v68.f64[1] + v67.f64[0] + v67.f64[1];
        v64 += 16;
      }
      while (v64 != 240);
      v95[v62] = v65 + v95[v62];
      ++v62;
      v63 += 240;
    }
    while (v62 != 60);
    if (a2)
    {
      uint64_t v69 = 0;
      long long v70 = (char *)this + 134248;
      do
      {
        uint64_t v71 = 0;
        double v72 = 0.0;
        do
        {
          float64x2_t v73 = vmulq_f64(*(float64x2_t *)&v95[v71], *(float64x2_t *)&v70[v71 * 8]);
          double v72 = v72 + v73.f64[0] + v73.f64[1];
          v71 += 2;
        }
        while (v71 != 30);
        v94[v69++] = v72;
        v70 += 240;
      }
      while (v69 != 30);
    }
    else
    {
      apple::vision::libraries::facecore::mod::aam::AamSearch::ComputeHessianUsingTrick(this);
      apple::vision::libraries::facecore::mod::aam::AamSearch::AddPriorsToHessian((uint64_t)this);
      apple::vision::libraries::facecore::mod::aam::AamSearch::SolveHessianForParameterUpdates(this, v95, v94);
    }
    apple::vision::libraries::facecore::mod::aam::AamSearch::UpdateParameters(this, v94);
    apple::vision::libraries::facecore::mod::aam::AamSearch::ConstrainCoefficients((uint64_t)this, a4);
    double updated = apple::vision::libraries::facecore::mod::aam::AamSearch::UpdateShape(this);
    if ((a2 & 0x40) != 0) {
      (*(void (**)(apple::vision::libraries::facecore::mod::aam::AamSearch *, double))(*(void *)this + 32))(this, updated);
    }
    memcpy(__dst, (char *)this + 141448, sizeof(__dst));
    for (uint64_t m = 0; m != 1008; m += 16)
      *(float64x2_t *)&__dst[m] = vsubq_f64(*(float64x2_t *)&__dst[m], *(float64x2_t *)&v18[m]);
    memcpy(__src, __dst, sizeof(__src));
    memcpy((char *)this + 145480, __src, 0x3F0uLL);
    double v76 = 0.0;
    uint64_t v77 = 63;
    uint64_t v78 = v9;
    do
    {
      double v76 = v76 + *v78 * *v78 + *(v78 - 1) * *(v78 - 1);
      v78 += 2;
      --v77;
    }
    while (v77);
    if (sqrt(v76) < a3) {
      v4[6] = 1;
    }
    memcpy(__dst, v90, sizeof(__dst));
    for (uint64_t n = 0; n != 1008; n += 16)
      *(float64x2_t *)&__dst[n] = vsubq_f64(*(float64x2_t *)&__dst[n], *(float64x2_t *)&v18[n]);
    memcpy(__src, __dst, sizeof(__src));
    double result = memcpy((char *)this + 145480, __src, 0x3F0uLL);
    double v80 = 0.0;
    uint64_t v81 = 63;
    do
    {
      double v80 = v80 + *v9 * *v9 + *(v9 - 1) * *(v9 - 1);
      v9 += 2;
      --v81;
    }
    while (v81);
    if (sqrt(v80) < a3)
    {
      for (iuint64_t i = 0; ii != 1008; ii += 16)
        *(float64x2_t *)&v18[ii] = vaddq_f64(*(float64x2_t *)&v15[ii], *(float64x2_t *)&v18[ii]);
      uint64_t v83 = 8;
      __asm { FMOV            V0.2D, #0.5 }
      do
      {
        *(float64x2_t *)((char *)this + v83) = vmulq_f64(*(float64x2_t *)((char *)this + v83), _Q0);
        v83 += 16;
      }
      while (v83 != 1016);
    }
  }
  else
  {
    long long v47 = *(_OWORD *)((char *)this + 11578024);
    *((_OWORD *)this + 8375) = *(_OWORD *)((char *)this + 11578008);
    *((_OWORD *)this + 8376) = v47;
    *((_OWORD *)this + 8377) = *(_OWORD *)((char *)this + 11578040);
    long long v48 = *(_OWORD *)((char *)this + 11577960);
    *((_OWORD *)this + 8371) = *(_OWORD *)((char *)this + 11577944);
    *((_OWORD *)this + 8372) = v48;
    long long v49 = *(_OWORD *)((char *)this + 11577992);
    *((_OWORD *)this + 8373) = *(_OWORD *)((char *)this + 11577976);
    *((_OWORD *)this + 8374) = v49;
    long long v50 = *(_OWORD *)((char *)this + 11577896);
    *((_OWORD *)this + 8367) = *(_OWORD *)((char *)this + 11577880);
    *((_OWORD *)this + 8368) = v50;
    long long v51 = *(_OWORD *)((char *)this + 11577928);
    *((_OWORD *)this + 8369) = *(_OWORD *)((char *)this + 11577912);
    *((_OWORD *)this + 8370) = v51;
    long long v52 = *(_OWORD *)((char *)this + 11577864);
    *((_OWORD *)this + 8365) = *(_OWORD *)((char *)this + 11577848);
    *((_OWORD *)this + 8366) = v52;
    long long v53 = *(_OWORD *)((char *)this + 11578136);
    *((_OWORD *)this + 8382) = *(_OWORD *)((char *)this + 11578120);
    *((_OWORD *)this + 8383) = v53;
    *((_OWORD *)this + 8384) = *(_OWORD *)((char *)this + 11578152);
    *((void *)this + 16770) = *((void *)this + 1447271);
    long long v54 = *(_OWORD *)((char *)this + 11578072);
    *((_OWORD *)this + 8378) = *(_OWORD *)((char *)this + 11578056);
    *((_OWORD *)this + 8379) = v54;
    long long v55 = *(_OWORD *)((char *)this + 11578104);
    *((_OWORD *)this + 8380) = *(_OWORD *)((char *)this + 11578088);
    *((_OWORD *)this + 8381) = v55;
    long long v56 = *((_OWORD *)v8 + 22);
    *double v91 = *((_OWORD *)v8 + 21);
    v91[1] = v56;
    double result = memcpy((char *)this + 8, (char *)this + 11578208, 0x3F0uLL);
    v4[6] = 1;
  }
  return result;
}

void sub_1DBDC3A98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeSearchLod(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (_OWORD *)((char *)this + 133792);
  uint64_t v3 = (int *)((char *)this + 55092);
  apple::vision::libraries::facecore::mod::aam::AamSearch::CalculateConfidenceMeasure(this, *((_DWORD *)this + 13773));
  uint64_t v4 = 0;
  size_t v5 = (char *)this + 208 * *v3 + 146560;
  do
  {
    *(void *)&v5[v4] = *(void *)((char *)this + v4 + 133840);
    v4 += 8;
  }
  while (v4 != 208);
  apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeTextureParameters(this);
  uint64_t v6 = *v3;
  uint64_t v7 = (char *)this + 32 * v6 + 147456;
  long long v8 = v2[2];
  *((_OWORD *)v7 + 61) = *v2;
  *((_OWORD *)v7 + 62) = v8;
  apple::vision::libraries::facecore::mod::aam::AamSearch::GetShape(this, v10);
  return memcpy((char *)this + 1008 * (int)v6 + 148720, v10, 0x3F0uLL);
}

float apple::vision::libraries::facecore::mod::aam::AamSearch::DoSyntheticImageComposite(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v1 = *((unsigned int *)this + *((int *)this + 13773) + 25754);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (int **)((char *)this + 103200);
    uint64_t v3 = (int *)*((void *)this + 12900);
    uint64_t v4 = *((void *)this + 6922);
    size_t v5 = (float *)((char *)this + 134048);
    uint64_t v6 = *((void *)this + 6946);
    uint64_t v7 = *((void *)this + 6970);
    uint64_t v8 = *((void *)this + 6994);
    uint64_t v9 = *((void *)this + 7018);
    uint64_t v10 = *((void *)this + 7042);
    uint64_t v11 = *((void *)this + 7066);
    uint64_t v12 = *((void *)this + 7090);
    uint64_t v13 = *((unsigned int *)this + *((int *)this + 13773) + 25754);
    uint64_t v14 = *((void *)this + 644);
    do
    {
      uint64_t v15 = *v3++;
      *(float *)(v14 + 4 * v15) = (float)((float)((float)((float)((float)((float)((float)((float)(v5[1]
                                                                                                * *(float *)(v6 + 4 * v15))
                                                                                        + (float)(*v5
                                                                                                * *(float *)(v4 + 4 * v15)))
                                                                                + (float)(v5[2]
                                                                                        * *(float *)(v7 + 4 * v15)))
                                                                        + (float)(v5[3] * *(float *)(v8 + 4 * v15)))
                                                                + (float)(v5[4] * *(float *)(v9 + 4 * v15)))
                                                        + (float)(v5[5] * *(float *)(v10 + 4 * v15)))
                                                + (float)(v5[6] * *(float *)(v11 + 4 * v15)))
                                        + (float)(v5[7] * *(float *)(v12 + 4 * v15)))
                                + *(float *)(v14 + 4 * v15);
      --v13;
    }
    while (v13);
    uint64_t v16 = *v2;
    uint64_t v17 = *((void *)this + 7114);
    uint64_t v18 = *((void *)this + 7138);
    uint64_t v19 = *((void *)this + 7162);
    uint64_t v20 = *((void *)this + 7186);
    uint64_t v21 = *((void *)this + 7210);
    uint64_t v22 = *((void *)this + 7234);
    uint64_t v23 = *((void *)this + 7258);
    uint64_t v24 = *((void *)this + 7282);
    uint64_t v25 = v1;
    uint64_t v26 = *((void *)this + 644);
    do
    {
      uint64_t v27 = *v16++;
      *(float *)(v26 + 4 * v27) = (float)((float)((float)((float)((float)((float)((float)((float)(v5[9]
                                                                                                * *(float *)(v18 + 4 * v27))
                                                                                        + (float)(v5[8]
                                                                                                * *(float *)(v17 + 4 * v27)))
                                                                                + (float)(v5[10]
                                                                                        * *(float *)(v19 + 4 * v27)))
                                                                        + (float)(v5[11] * *(float *)(v20 + 4 * v27)))
                                                                + (float)(v5[12] * *(float *)(v21 + 4 * v27)))
                                                        + (float)(v5[13] * *(float *)(v22 + 4 * v27)))
                                                + (float)(v5[14] * *(float *)(v23 + 4 * v27)))
                                        + (float)(v5[15] * *(float *)(v24 + 4 * v27)))
                                + *(float *)(v26 + 4 * v27);
      --v25;
    }
    while (v25);
    uint64_t v28 = *v2;
    uint64_t v29 = *((void *)this + 7306);
    uint64_t v30 = *((void *)this + 7330);
    uint64_t v31 = *((void *)this + 7354);
    uint64_t v32 = *((void *)this + 7378);
    uint64_t v33 = *((void *)this + 644);
    do
    {
      uint64_t v34 = *v28++;
      float result = (float)((float)((float)((float)(v5[17] * *(float *)(v30 + 4 * v34))
                                     + (float)(v5[16] * *(float *)(v29 + 4 * v34)))
                             + (float)(v5[18] * *(float *)(v31 + 4 * v34)))
                     + (float)(v5[19] * *(float *)(v32 + 4 * v34)))
             + *(float *)(v33 + 4 * v34);
      *(float *)(v33 + 4 * v34) = result;
      --v1;
    }
    while (v1);
  }
  return result;
}

void *apple::vision::libraries::facecore::mod::aam::AamSearch::UpdateParameters(apple::vision::libraries::facecore::mod::aam::AamSearch *this, double *a2)
{
  uint64_t v4 = 0;
  size_t v5 = (double *)((char *)this + 133792);
  do
  {
    float v6 = a2[v4 + 30];
    *((float *)this + v4 + 33512) = *((float *)this + v4 + 33512) + (float)(v6 * 0.9);
    ++v4;
  }
  while (v4 != 30);
  uint64_t v7 = a2 + 4;
  memcpy(__dst, (char *)this + 2024, sizeof(__dst));
  for (uint64_t i = 0; i != 240; i += 8)
    ;
  for (uint64_t j = 0; j != 4; ++j)
  {
    double v31 = a2[j] * 0.899999976;
    memcpy(__src, (char *)this + 1008 * j + 103344, 0x3F0uLL);
    for (uint64_t k = 0; k != 1008; k += 16)
      *(float64x2_t *)&__src[k] = vmulq_n_f64(*(float64x2_t *)&__src[k], v31);
    memcpy(v34, __src, sizeof(v34));
    for (uint64_t m = 0; m != 63; ++m)
      *(float64x2_t *)&__dst[m * 16] = vsubq_f64(*(float64x2_t *)&__dst[m * 16], v34[m]);
  }
  for (uint64_t n = 0; n != 26; ++n)
  {
    double v32 = v7[n] * 0.899999976;
    memcpy(__src, (char *)this + 1008 * n + 107376, 0x3F0uLL);
    for (iuint64_t i = 0; ii != 1008; ii += 16)
      *(float64x2_t *)&__src[ii] = vmulq_n_f64(*(float64x2_t *)&__src[ii], v32);
    memcpy(v34, __src, sizeof(v34));
    for (juint64_t j = 0; jj != 63; ++jj)
      *(float64x2_t *)&__dst[jj * 16] = vsubq_f64(*(float64x2_t *)&__dst[jj * 16], v34[jj]);
  }
  apple::vision::libraries::facecore::mod::aam::AffineWarp::WarpVertices((uint64_t)this + 34656, (uint64_t)__dst, v34);
  uint64_t v15 = 0;
  double v16 = 0.0;
  do
  {
    double v16 = v16
        + *(double *)((char *)this + v15 * 16 + 103352) * v34[v15].f64[1]
        + *(double *)((char *)this + v15 * 16 + 103344) * v34[v15].f64[0];
    ++v15;
  }
  while (v15 != 63);
  uint64_t v17 = 0;
  v5[2] = v16;
  double v18 = 0.0;
  do
  {
    double v18 = v18
        + *(double *)((char *)this + v17 * 16 + 104360) * v34[v17].f64[1]
        + *(double *)((char *)this + v17 * 16 + 104352) * v34[v17].f64[0];
    ++v17;
  }
  while (v17 != 63);
  uint64_t v19 = 0;
  _DWORD v5[3] = v18;
  double v20 = 0.0;
  do
  {
    double v20 = v20
        + *(double *)((char *)this + v19 * 16 + 105368) * v34[v19].f64[1]
        + *(double *)((char *)this + v19 * 16 + 105360) * v34[v19].f64[0];
    ++v19;
  }
  while (v19 != 63);
  uint64_t v21 = 0;
  v5[4] = v20;
  double v22 = 0.0;
  do
  {
    double v22 = v22
        + *(double *)((char *)this + v21 * 16 + 106376) * v34[v21].f64[1]
        + *(double *)((char *)this + v21 * 16 + 106368) * v34[v21].f64[0];
    ++v21;
  }
  while (v21 != 63);
  v5[5] = v22;
  double v23 = sqrt(v16 * v16 + v18 * v18);
  *size_t v5 = v23;
  if (v23 == 0.0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "UpdateParameters: 0.0 == q_scale");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v5[1] = atan(v18 / v16) * 180.0 / 3.14159265;
  apple::vision::libraries::facecore::mod::aam::AamSearch::InverseTransformShape((uint64_t)this, (uint64_t)v34, __src);
  for (kuint64_t k = 0; kk != 1008; kk += 16)
    *(float64x2_t *)&__src[kk] = vsubq_f64(*(float64x2_t *)&__src[kk], *(float64x2_t *)((char *)this + kk + 3032));
  float result = memcpy(v33, __src, sizeof(v33));
  uint64_t v26 = 0;
  uint64_t v27 = (char *)this + 107376;
  do
  {
    uint64_t v28 = 0;
    double v29 = 0.0;
    do
    {
      double v29 = v29 + *(double *)&v27[v28 + 8] * *(double *)&v33[v28 + 8] + *(double *)&v27[v28] * *(double *)&v33[v28];
      v28 += 16;
    }
    while (v28 != 1008);
    *((double *)this + v26++ + 16730) = v29;
    v27 += 1008;
  }
  while (v26 != 26);
  return result;
}

void sub_1DBDC4200(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::CalculateConfidenceMeasure(apple::vision::libraries::facecore::mod::aam::AamSearch *this, int a2)
{
  if (!*((unsigned char *)this + 55079) || *((_DWORD *)this + 13773) != a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E0196B30](exception, "CalculateConfidenceMeasure() - the data in residualImage is not valid residual data");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v2 = *((unsigned int *)this + *((int *)this + 1338) + 1357);
  if (v2)
  {
    uint64_t v3 = (float *)*((void *)this + 668);
    uint64_t v4 = 4 * v2;
    double v5 = 0.0;
    do
    {
      float v6 = *v3++;
      double v5 = v5 + (float)(v6 * v6);
      v4 -= 4;
    }
    while (v4);
  }
  else
  {
    double v5 = 0.0;
  }
  double result = sqrt(v5 / (double)v2);
  *((double *)this + a2 + 18311) = result;
  return result;
}

void sub_1DBDC42E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::FinalizeTextureParameters(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  uint64_t v2 = (char *)this + 55079;
  apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp((uint64_t)this + 34656, (uint64_t)this + 8, *((void *)this + 668));
  uint64_t v3 = (char *)this + 4 * *((int *)this + 1338);
  *uint64_t v2 = 0;
  uint64_t v4 = *((unsigned int *)v3 + 1357);
  double v5 = (float *)*((void *)this + 668);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v2 + 105);
    do
    {
      v5[v6] = v5[v6] - *(float *)(v7 + 4 * (int)v6);
      ++v6;
    }
    while (v4 != v6);
  }
  uint64_t v8 = 0;
  uint64_t v9 = (char *)this + 200 * *(int *)(v2 + 13);
  do
  {
    if (v4)
    {
      uint64_t v10 = (float *)*((void *)this + 24 * v8 + 6922);
      float v11 = 0.0;
      uint64_t v12 = 4 * v4;
      uint64_t v13 = v5;
      do
      {
        float v14 = *v13++;
        float v15 = v14;
        float v16 = *v10++;
        float v11 = v11 + (float)(v15 * v16);
        v12 -= 4;
      }
      while (v12);
    }
    else
    {
      float v11 = 0.0;
    }
    *(float *)&v9[4 * v8++ + 157792] = v11;
  }
  while (v8 != 50);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::GetShape(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, char *a2@<X8>)
{
  uint64_t v4 = (char *)this + 103320;
  bzero(a2, 0x3F0uLL);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v4 + 4);
  v7.i64[0] = (int)v6;
  v7.i64[1] = SHIDWORD(v6);
  float64x2_t v8 = vcvtq_f64_s64(v7);
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(int *)v4), 0);
  do
  {
    *(float64x2_t *)&a2[v5] = vmlaq_f64(v8, v9, *(float64x2_t *)((char *)this + v5 + 8));
    v5 += 16;
  }
  while (v5 != 1008);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::GetShapeParameters@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = std::vector<double>::vector(a3, 0x1AuLL);
  uint64_t v6 = 0;
  uint64_t v7 = *v5;
  do
  {
    double result = *(double *)((char *)this + 208 * a2 + v6 + 146560);
    *(double *)(v7 + v6) = result;
    v6 += 8;
  }
  while (v6 != 208);
  return result;
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::GetShapeStd@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = std::vector<double>::vector(a2, 0x1AuLL);
  uint64_t v4 = 0;
  uint64_t v5 = *v3;
  do
  {
    double result = *(double *)((char *)this + v4 + 133584);
    *(double *)(v5 + v4) = result;
    v4 += 8;
  }
  while (v4 != 208);
  return result;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::GetTextureParameters(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, int a2@<W1>, double **a3@<X8>)
{
  uint64_t v6 = (uint64_t *)((char *)this + 64976);
  uint64_t v7 = (char *)this + 55079;
  float64x2_t v8 = (char *)this + 34728;
  int v9 = *((_DWORD *)this + 13773);
  *((_DWORD *)this + 16246) = a2;
  uint64_t v10 = a2;
  *((void *)this + 8122) = *((void *)this + a2 + 8113);
  float v11 = (char *)this + 65096;
  uint64_t v12 = 100;
  do
  {
    *((_DWORD *)v11 + 20) = a2;
    *((void *)v11 + 9) = *(void *)&v11[8 * a2];
    v11 += 192;
    --v12;
  }
  while (v12);
  if (v9 != a2)
  {
    *((_DWORD *)this + 1338) = a2;
    *((void *)this + 668) = *((void *)this + a2 + 659);
    *((_DWORD *)this + 13798) = a2;
    *((void *)this + 6898) = *((void *)this + a2 + 6889);
    bzero(__src, 0x3F0uLL);
    uint64_t v13 = 0;
    double v14 = (double)(*((_DWORD *)this + v10 + 13799) - 1);
    do
    {
      *(float64x2_t *)&__src[v13] = vmulq_n_f64(*(float64x2_t *)((char *)this + v13 + 4040), v14);
      v13 += 16;
    }
    while (v13 != 1008);
    memcpy(__dst, __src, sizeof(__dst));
    *((_DWORD *)v8 + 2) = a2;
    *(void *)float64x2_t v8 = *((void *)this + v10 + 4332);
    apple::vision::libraries::facecore::mod::aam::AffineWarp::SetWarpTarget((uint64_t)this + 34656, (uint64_t)__dst);
    apple::vision::libraries::facecore::mod::aam::AamSearch::FilterSearchImage(this);
  }
  bzero(*((void **)this + 668), 4 * *((unsigned int *)this + *((int *)this + 1338) + 1357));
  apple::vision::libraries::facecore::mod::aam::AffineWarp::Warp((uint64_t)this + 34656, (uint64_t)this + 8, *((void *)this + 668));
  *uint64_t v7 = 0;
  int v15 = *(_DWORD *)(v7 + 25);
  if (v15 == 1)
  {
    uint64_t v20 = *((void *)this + 668);
    uint64_t v21 = *((unsigned int *)this + *((int *)this + 1338) + 1357);
    if (v21)
    {
      float v22 = 0.0;
      uint64_t v23 = 4 * v21;
      uint64_t v24 = (float *)*((void *)this + 668);
      do
      {
        float v25 = *v24++;
        float v22 = v22 + v25;
        v23 -= 4;
      }
      while (v23);
      int v26 = 0;
      float v27 = v22 / (float)*((int *)this + v10 + 25754);
      uint64_t v28 = *(void *)v8;
      do
      {
        int v29 = v26;
        if (*(_DWORD *)(v28 + 4 * v26) != -1) {
          *(float *)(v20 + 4 * v26) = *(float *)(v20 + 4 * v26) - v27;
        }
        ++v26;
      }
      while (v21 != v29 + 1);
      uint64_t v30 = 0;
      double v31 = *(float **)(v7 + 105);
      float v32 = 0.0;
      do
      {
        float v32 = v32 + (float)(*(float *)(v20 + v30 * 4) * v31[v30]);
        ++v30;
      }
      while (v21 != v30);
      double v33 = v32;
    }
    else
    {
      double v31 = *(float **)(v7 + 105);
      double v33 = 0.0;
    }
    if (fabs(v33) < 0.0001) {
      double v33 = 0.0001;
    }
    uint64_t v34 = *((unsigned int *)this + *(int *)(v7 + 113) + 13817);
    if (v34)
    {
      uint64_t v35 = 4 * v34;
      float v36 = 0.0;
      do
      {
        float v37 = *v31++;
        float v36 = v36 + (float)(v37 * v37);
        v35 -= 4;
      }
      while (v35);
      double v38 = v36;
      if (!v21) {
        goto LABEL_34;
      }
    }
    else
    {
      double v38 = 0.0;
      if (!v21) {
        goto LABEL_34;
      }
    }
    int v39 = 0;
    float v40 = v38 / v33;
    do
    {
      *(float *)(v20 + 4 * v39) = *(float *)(v20 + 4 * v39) * v40;
      ++v39;
    }
    while (v21 != v39);
    goto LABEL_34;
  }
  if (!v15)
  {
    int v16 = *((_DWORD *)this + *((int *)this + 1338) + 1357);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *v6;
      uint64_t v19 = *((void *)this + 668);
      do
      {
        *(float *)(v19 + 4 * v17) = *(float *)(v19 + 4 * v17) - *(float *)(v18 + 4 * (int)v17);
        ++v17;
      }
      while (v16 != v17);
    }
  }
LABEL_34:
  std::vector<double>::vector(a3, 0x64uLL);
  uint64_t v41 = 0;
  uint64_t v42 = *a3;
  do
  {
    uint64_t v43 = *((unsigned int *)this + 48 * v41 + *((int *)this + 48 * v41 + 16294) + 16313);
    if (v43)
    {
      double v44 = (float *)*((void *)this + 24 * v41 + 8146);
      float v45 = (float *)*((void *)this + 668);
      uint64_t v46 = 4 * v43;
      float v47 = 0.0;
      do
      {
        float v48 = *v44++;
        float v49 = v48;
        float v50 = *v45++;
        float v47 = v47 + (float)(v49 * v50);
        v46 -= 4;
      }
      while (v46);
    }
    else
    {
      float v47 = 0.0;
    }
    v42[v41++] = v47;
  }
  while (v41 != 100);
  bzero(*((void **)this + 668), 4 * *((unsigned int *)this + *((int *)this + 1338) + 1357));
  if (*(_DWORD *)(v7 + 25) == 1)
  {
    uint64_t v51 = 0;
    long long v52 = *a3;
    double v53 = **a3;
    if (fabs(v53) < 0.0001) {
      double v53 = 0.0001;
    }
    float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v53, 0);
    do
    {
      *(float64x2_t *)&v52[v51] = vdivq_f64(*(float64x2_t *)&v52[v51], v54);
      v51 += 2;
    }
    while (v51 != 100);
  }
  if (*(_DWORD *)(v7 + 13) != a2)
  {
    *((_DWORD *)this + 1338) = v9;
    *((void *)this + 668) = *((void *)this + v9 + 659);
    *(_DWORD *)(v7 + 113) = v9;
    *(void *)(v7 + 105) = *((void *)this + v9 + 6889);
    memcpy(v55, (char *)this + 2024, sizeof(v55));
    *((_DWORD *)v8 + 2) = v9;
    *(void *)float64x2_t v8 = *((void *)this + v9 + 4332);
    apple::vision::libraries::facecore::mod::aam::AffineWarp::SetWarpTarget((uint64_t)this + 34656, (uint64_t)v55);
  }
}

void sub_1DBDC4940(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::GetTextureStd@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = std::vector<double>::vector(a3, 0x64uLL);
  uint64_t v6 = 0;
  uint64_t v7 = *v5;
  do
  {
    double result = *(double *)((char *)this + 400 * a2 + v6 + 99416);
    *(double *)(v7 + v6) = result;
    v6 += 8;
  }
  while (v6 != 400);
  return result;
}

double apple::vision::libraries::facecore::mod::aam::AamSearch::GetSearchTextureStd@<D0>(apple::vision::libraries::facecore::mod::aam::AamSearch *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = std::vector<double>::vector(a3, 0x64uLL);
  uint64_t v6 = 0;
  uint64_t v7 = *v5;
  do
  {
    double result = *(double *)((char *)this + 400 * a2 + v6 + 95816);
    *(double *)(v7 + v6) = result;
    v6 += 8;
  }
  while (v6 != 400);
  return result;
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::InverseTransformShape(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = (double *)(a1 + 133792);
  bzero(a3, 0x3F0uLL);
  uint64_t v6 = 0;
  double v7 = v5[2];
  double v8 = v5[3];
  double v10 = v5[4];
  double v9 = v5[5];
  double v11 = v7 * v10 + v9 * v8;
  double v12 = *v5 * *v5;
  double v13 = v8 * v10 - v9 * v7;
  do
  {
    double v14 = *(double *)(a2 + v6);
    double v15 = *(double *)(a2 + v6 + 8);
    int v16 = (double *)&a3[v6];
    double *v16 = (v8 * v15 + v7 * v14 - v11) / v12;
    v16[1] = (v7 * v15 + -v8 * v14 + v13) / v12;
    v6 += 16;
  }
  while (v6 != 1008);
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::Constrain3d(apple::vision::libraries::facecore::mod::aam::AamSearch *this)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E0196B30](exception, "AamSearch::Constrain3d should not have been called");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DBDC4B04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::mod::aam::ImagePyramid<int>::ImagePyramid(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 84;
  uint64_t v4 = (int *)(a1 + 156);
  do
  {
    *(v4 - 18) = 1 << v2;
    *(v4 - 9) = 1 << v2;
    int v5 = 1 << v2 << v2;
    *v4++ = v5;
    *(void *)(v3 + 8 * v2++ - 84) = malloc_type_malloc((4 * v5), 0x4CCF00D6uLL);
  }
  while (v2 != 9);
  return a1;
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DBDC4C98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

double apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::make_offsets(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures *this, int *a2, int32x4_t a3)
{
  *(void *)this = 0x300000002;
  *((_DWORD *)this + 2) = 4;
  *((_DWORD *)this + 3) = a2 + 5;
  *((_DWORD *)this + 4) = 2 * a2 + 6;
  *((_DWORD *)this + 5) = 3 * a2 + 6;
  *((_DWORD *)this + 6) = 4 * a2 + 6;
  *(int32x2_t *)a3.i8 = vmul_s32(vdup_n_s32(a2), (int32x2_t)0x600000005);
  *(int32x4_t *)((char *)this + 28) = vaddq_s32(vzip1q_s32(a3, vdupq_lane_s32(*(int32x2_t *)a3.i8, 1)), (int32x4_t)xmmword_1DBFF6840);
  *((_DWORD *)this + 11) = a3.i32[0] + 1;
  *((_DWORD *)this + 12) = 4 * a2;
  *((_DWORD *)this + 13) = 3 * a2;
  *((_DWORD *)this + 14) = 2 * a2;
  *((_DWORD *)this + 15) = a2 + 1;
  *((_DWORD *)this + 16) = 3 * a2 + 3;
  return *(double *)a3.i64;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::fastSqrtf(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures *this, float a2)
{
  float v2 = 0.0;
  if (a2 >= 0.00000001)
  {
    if (a2 >= 0.0)
    {
      float v3 = (float)((float)((float)((float)(a2 * -0.5) * COERCE_FLOAT(1597463007 - (SLODWORD(a2) >> 1)))
                         * COERCE_FLOAT(1597463007 - (SLODWORD(a2) >> 1)))
                 + 1.5)
         * COERCE_FLOAT(1597463007 - (SLODWORD(a2) >> 1));
      float v2 = v3 * (float)((float)((float)((float)(a2 * -0.5) * v3) * v3) + 1.5);
    }
    return v2 * a2;
  }
  return v2;
}

#error "1DBDC4DD8: too big function (funcsize=0)"

double sub_1DBDEB000@<D0>(int16x4_t *a1@<X7>, int16x4_t *a2@<X8>)
{
  *(void *)&double result = vmlal_high_s16(vmull_s16(*a1, *a2), *(int16x8_t *)a1->i8, *(int16x8_t *)a2->i8).u64[0];
  return result;
}

double sub_1DBDEB08C@<D0>(int16x4_t *a1@<X7>, int16x4_t *a2@<X8>, int32x4_t a3@<Q0>)
{
  *(void *)&double result = vmlal_high_s16(vmlal_s16(a3, *a1, *a2), *(int16x8_t *)a1->i8, *(int16x8_t *)a2->i8).u64[0];
  return result;
}

void matrixMultiply256_NEON(uint64_t a1)
{
  uint64_t v1 = *(int16x4_t **)(a1 + 16);
  float v2 = *(int16x4_t **)(a1 + 8);
  do
  {
    float v3 = v1;
    do
    {
      *(double *)v6.i64 = sub_1DBDEB000(v2, v3);
      do
        *(double *)v6.i64 = sub_1DBDEB08C(v4, v5, v6);
      while (v17 != 1);
      *double v7 = vshrn_high_n_s32(vshrn_n_s32(vpaddq_s32(vpaddq_s32(v6, v10), vpaddq_s32(v11, v12)), 0x10uLL), vpaddq_s32(vpaddq_s32(v13, v14), vpaddq_s32(v15, v16)), 0x10uLL);
      float v2 = v4 - 64;
      float v3 = v5 + 448;
    }
    while (v8 != 1);
    v2 += 64;
  }
  while (v9 != 1);
}

void apple::vision::libraries::facecore::processing::detection::PostProcessing::PostProcessing(apple::vision::libraries::facecore::processing::detection::PostProcessing *this, apple::vision::libraries::facecore::processing::detection::Detector *a2, apple::vision::libraries::facecore::FaceCoreContext *a3)
{
  int v3 = (int)a3;
  *(void *)this = a2;
  int v5 = (apple::vision::libraries::facecore::processing::detection::PostProcessing *)((char *)this + 16);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints((apple::vision::libraries::facecore::processing::detection::PostProcessing *)((char *)this + 11));
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::FaceImage(v5, 3);
  *(_WORD *)((char *)this + 9) = 0;
  *((_DWORD *)this + 44) = 1;
  apple::vision::libraries::facecore::processing::detection::IntegralImage::create((apple::vision::libraries::facecore::processing::detection::IntegralImage *)0x244, 820, v3, v6);
}

void sub_1DBDEB228(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::~FaceImage(v2);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::detection::PostProcessing::~PostProcessing(apple::vision::libraries::facecore::processing::detection::PostProcessing *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::~FaceImage((apple::vision::libraries::facecore::processing::detection::PostProcessing *)((char *)this + 16));
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::getPoints((apple::vision::libraries::facecore::processing::detection::PostProcessing *)((char *)this + 11));
}

void apple::vision::libraries::facecore::processing::detection::PostProcessing::postProcess(uint64_t a1, uint64_t *a2, const unsigned __int8 *a3, int a4, int a5, __n128 a6)
{
  unint64_t v8 = *a2;
  uint64_t v9 = (__n128 *)a2[1];
  unint64_t v10 = 126 - 2 * __clz(0x84BDA12F684BDA13 * ((uint64_t)((uint64_t)v9 - v8) >> 3));
  uint64_t v71 = apple::vision::libraries::facecore::processing::detection::sortFacesByProperties;
  if (v9 == (__n128 *)v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*,false>(v8, v9, &v71, v11, 1, a6);
  uint64_t v71 = 0;
  double v72 = 0;
  uint64_t v73 = 0;
  apple::vision::libraries::facecore::processing::detection::FaceManager::getFaces(a1 + 8, (uint64_t *)&v71, a2, *(_DWORD *)(a1 + 176));
  apple::vision::libraries::facecore::processing::detection::FaceManager::sortFacesBySize(a1 + 8, &v71);
  apple::vision::libraries::facecore::processing::detection::FaceManager::removeHitsOnBorders(a1 + 8, (uint64_t *)&v71, a4, a5);
  int32x4_t v12 = v71;
  uint64_t v13 = (uint64_t)v72;
  double v53 = (uint64_t (**)(uint64_t, uint64_t))a2;
  if ((int)(1749801491 * ((unint64_t)((char *)v72 - (char *)v71) >> 3)) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      apple::vision::libraries::facecore::processing::detection::FaceManager::getEyes(a1 + 8, (int *)((char *)v12 + v14));
      apple::vision::libraries::facecore::processing::detection::FaceManager::getMouth(a1 + 8, (uint64_t)v71 + v14);
      int32x4_t v12 = v71;
      *(void *)((char *)v71 + v14 + 192) = 0x3FE0000000000000;
      ++v15;
      uint64_t v13 = (uint64_t)v72;
      v14 += 216;
    }
    while (v15 < (int)(1749801491 * ((unint64_t)((char *)v72 - (char *)v12) >> 3)));
  }
  if (*(unsigned char *)(a1 + 9))
  {
    float64x2_t v68 = 0;
    uint64_t v69 = 0;
    long long v70 = 0;
    if ((int)(1749801491 * ((unint64_t)(v13 - (void)v12) >> 3)) >= 1)
    {
      int32x4_t v16 = 0;
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = (int *)((char *)v12 + 216 * v17);
        if (v18[37] > 12)
        {
          *((void *)v12 + 27 * v17 + 25) = 0x3FF0000000000000;
        }
        else
        {
          if (v16 >= v70)
          {
            uint64_t v19 = v16 - v68;
            if ((unint64_t)(v19 + 1) >> 61) {
              std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = ((char *)v70 - (char *)v68) >> 2;
            if (v20 <= v19 + 1) {
              unint64_t v20 = v19 + 1;
            }
            if ((unint64_t)((char *)v70 - (char *)v68) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21) {
              float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v70, v21);
            }
            else {
              float v22 = 0;
            }
            uint64_t v23 = (void **)&v22[8 * v19];
            *uint64_t v23 = v18;
            int32x4_t v16 = v23 + 1;
            float v25 = v68;
            uint64_t v24 = v69;
            if (v69 != v68)
            {
              do
              {
                int v26 = *--v24;
                *--uint64_t v23 = v26;
              }
              while (v24 != v25);
              uint64_t v24 = v68;
            }
            float64x2_t v68 = v23;
            uint64_t v69 = v16;
            long long v70 = (void **)&v22[8 * v21];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            *v16++ = v18;
          }
          uint64_t v69 = v16;
          int32x4_t v12 = v71;
          uint64_t v13 = (uint64_t)v72;
        }
        ++v17;
      }
      while (v17 < (int)(1749801491 * ((unint64_t)(v13 - (void)v12) >> 3)));
      if ((unint64_t)((char *)v16 - (char *)v68) > 0xF)
      {
        global_queue = dispatch_get_global_queue(2, 0);
        group = dispatch_group_create();
        int v29 = v68;
        uint64_t v30 = (char *)v69 - (char *)v68;
        unint64_t v31 = (unint64_t)((char *)v69 - (char *)v68) >> 3;
        if ((int)v31 >= 8) {
          int v32 = 8;
        }
        else {
          int v32 = v31;
        }
        int v33 = v32 - 1;
        if (v32 >= 2)
        {
          int v34 = 0;
          uint64_t v35 = MEMORY[0x1E4F143A8];
          do
          {
            block[0] = v35;
            block[1] = 1174405120;
            block[2] = ___ZN5apple6vision9libraries8facecore10processing9detection14PostProcessing11postProcessERNSt3__16vectorINS2_12FaceInternalENS6_9allocatorIS8_EEEEPhjj_block_invoke;
            block[3] = &__block_descriptor_tmp_3;
            block[4] = a1;
            int v63 = v34;
            uint64_t v60 = 0;
            uint64_t v61 = 0;
            int v59 = 0;
            std::vector<apple::vision::libraries::facecore::FaceInternal *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal **,apple::vision::libraries::facecore::FaceInternal **>(&v59, v68, (uint64_t)v69, v69 - v68);
            uint64_t v62 = a3;
            int v64 = v32;
            int v65 = a4;
            int v66 = a5;
            dispatch_group_async(group, global_queue, block);
            if (v59)
            {
              uint64_t v60 = v59;
              operator delete(v59);
            }
            ++v34;
          }
          while (v33 != v34);
          int v29 = v68;
          uint64_t v30 = (char *)v69 - (char *)v68;
        }
        unint64_t v36 = (v30 >> 3) * v33 / (unint64_t)v32;
        if (v36 < v30 >> 3)
        {
          float v37 = (int *)v29[v36];
          apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogram(a3, a4, a5, 1, v37[7], v37[8], *v37, &__p, v37[26], v37[1], v37[2], v37[3], v37[4], v37[5], v37[6]);
        }
        dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
      }
      else if (v16 != v68)
      {
        float v27 = (int *)*v68;
        apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogram(a3, a4, a5, 1, v27[7], v27[8], *v27, &__p, v27[26], v27[1], v27[2], v27[3], v27[4], v27[5], v27[6]);
      }
    }
    double v38 = v72;
    if ((int)(1749801491 * (((char *)v72 - (char *)v71) >> 3)) >= 1)
    {
      uint64_t v39 = 1749801491 * (((char *)v72 - (char *)v71) >> 3);
      do
      {
        float v40 = (char *)v71 + 216 * (v39 - 1);
        int v41 = *((_DWORD *)v40 + 37);
        if (v41 <= 2)
        {
          double v42 = *((double *)v71 + 27 * (v39 - 1) + 25);
          if (v42 < 0.33 || (v41 <= 1 ? (BOOL v43 = v42 < 0.5) : (BOOL v43 = 0), v43))
          {
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *,apple::vision::libraries::facecore::FaceInternal *>((uint64_t)&__p, (long long *)(v40 + 216), v38, (uint64_t)v40);
            double v38 = v44;
            for (uint64_t i = (uint64_t)v72;
                  (long long *)i != v38;
            double v72 = v38;
          }
        }
      }
      while (v39-- > 1);
    }
    if (v68)
    {
      uint64_t v69 = v68;
      operator delete(v68);
    }
  }
  if (*(unsigned char *)(a1 + 10))
  {
    float v48 = v71;
    uint64_t v47 = (uint64_t)v72;
    if ((int)(1749801491 * ((unint64_t)((char *)v72 - (char *)v71) >> 3)) >= 1)
    {
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      do
      {
        if (*(int *)((char *)v48 + v49 + 148) <= 5)
        {
          float64x2_t v68 = 0;
          uint64_t v69 = 0;
          long long v70 = 0;
          apple::vision::libraries::facecore::processing::detection::histogram::FaceImage::SetImage((apple::vision::libraries::facecore::processing::detection::histogram::FaceImage *)(a1 + 16), a3, a4, a5, 1, *(_DWORD *)((char *)v48 + v49 + 28), *(_DWORD *)((char *)v48 + v49 + 32), *(_DWORD *)((char *)v48 + v49), 50.0 / (float)*(int *)((char *)v48 + v49), *(_DWORD *)((char *)v48 + v49 + 104));
          (*(void (**)(void, void, void, void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
          int v51 = (*(uint64_t (**)(float))(**(void **)a1 + 32))(666.0);
          long long v52 = (char *)v71 + v49;
          if (v51) {
            *((void *)v52 + 26) = 0x3FF0000000000000;
          }
          else {
            *((void *)v52 + 26) = 0;
          }
          __p = &v68;
          std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          float v48 = v71;
          uint64_t v47 = (uint64_t)v72;
        }
        ++v50;
        v49 += 216;
      }
      while (v50 < (int)(1749801491 * ((unint64_t)(v47 - (void)v48) >> 3)));
    }
  }
  apple::vision::libraries::facecore::processing::detection::FaceManager::getAccuracy(a1 + 8, &v71);
  apple::vision::libraries::facecore::processing::detection::FaceManager::removeOverlappingFaces(a1 + 8, (uint64_t *)&v71);
  if (&v71 != v53) {
    std::vector<apple::vision::libraries::facecore::FaceInternal>::__assign_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>((uint64_t)v53, (uint64_t)v71, (uint64_t)v72, 0x84BDA12F684BDA13 * (((char *)v72 - (char *)v71) >> 3));
  }
  float64x2_t v68 = (void **)&v71;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v68);
}

void sub_1DBDEBA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  int v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(void *)(v30 - 144) = v32;
    operator delete(v32);
  }
  *(void *)(v30 - 152) = v30 - 128;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 152));
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::processing::detection::sortFacesByProperties(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a1 - *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    unsigned int v2 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a2 + 28);
  }
  if (!v2) {
    unsigned int v2 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a2 + 32);
  }
  if (!v2) {
    unsigned int v2 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a2 + 104);
  }
  if (!v2) {
    unsigned int v2 = *(_DWORD *)(a1 + 72) - *(_DWORD *)(a2 + 72);
  }
  if (!v2) {
    unsigned int v2 = (int)(*(double *)(a1 + 152) - *(double *)(a2 + 152));
  }
  return v2 >> 31;
}

uint64_t ___ZN5apple6vision9libraries8facecore10processing9detection14PostProcessing11postProcessERNSt3__16vectorINS2_12FaceInternalENS6_9allocatorIS8_EEEEPhjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(result + 48) - v1;
  unint64_t v3 = *(int *)(result + 76);
  unint64_t v4 = (v2 >> 3) * *(int *)(result + 72);
  if (v4 / v3 < (v4 + (v2 >> 3)) / v3)
  {
    int v5 = *(int **)(v1 + 8 * (v4 / v3));
    apple::vision::libraries::facecore::processing::detection::histogram::FaceHistogram::GetFaceHistogram(*(const unsigned __int8 **)(result + 64), *(_DWORD *)(result + 80), *(_DWORD *)(result + 84), 1, v5[7], v5[8], *v5, &__p, v5[26], v5[1], v5[2], v5[3], v5[4], v5[5], v5[6]);
  }
  return result;
}

void sub_1DBDEBC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c89_ZTSNSt3__16vectorIPN5apple6vision9libraries8facecore12FaceInternalENS_9allocatorIS6_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<apple::vision::libraries::facecore::FaceInternal *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal **,apple::vision::libraries::facecore::FaceInternal **>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_e8_40c89_ZTSNSt3__16vectorIPN5apple6vision9libraries8facecore12FaceInternalENS_9allocatorIS6_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*,false>(unint64_t a1, __n128 *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5, __n128 a6)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, int *a2, uint64_t (**a3)(int *, uint64_t))
{
  if ((int *)a1 != a2)
  {
    int v5 = (int *)(a1 + 216);
    if ((int *)(a1 + 216) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (int *)a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          apple::vision::libraries::facecore::Face::Face((uint64_t)v32, v9);
          long long v10 = *(_OWORD *)(v8 + 102);
          long long v45 = *(_OWORD *)(v8 + 98);
          long long v46 = v10;
          uint64_t v47 = *((void *)v8 + 53);
          long long v11 = *(_OWORD *)(v8 + 94);
          long long v43 = *(_OWORD *)(v8 + 90);
          long long v44 = v11;
          uint64_t v12 = v7;
          while (1)
          {
            uint64_t v13 = a1 + v12;
            long long v14 = *(_OWORD *)(a1 + v12 + 16);
            *(_OWORD *)(v13 + 216) = *(_OWORD *)(a1 + v12);
            *(_OWORD *)(v13 + 232) = v14;
            *(_OWORD *)(v13 + 248) = *(_OWORD *)(a1 + v12 + 32);
            std::vector<double>::__move_assign(a1 + v12 + 264, (__n128 *)(a1 + v12 + 48));
            *(_DWORD *)(v13 + 288) = *(_DWORD *)(v13 + 72);
            std::vector<double>::__move_assign(v13 + 296, (__n128 *)(v13 + 80));
            long long v15 = *(_OWORD *)(a1 + v12 + 120);
            *(_OWORD *)(v13 + 320) = *(_OWORD *)(v13 + 104);
            *(_OWORD *)(v13 + 336) = v15;
            *(void *)(v13 + 352) = *(void *)(v13 + 136);
            long long v16 = *(_OWORD *)(a1 + v12 + 192);
            *(_OWORD *)(v13 + 392) = *(_OWORD *)(v13 + 176);
            *(_OWORD *)(v13 + 408) = v16;
            *(void *)(v13 + 424) = *(void *)(v13 + 208);
            long long v17 = *(_OWORD *)(a1 + v12 + 160);
            *(_OWORD *)(v13 + 360) = *(_OWORD *)(v13 + 144);
            *(_OWORD *)(v13 + 376) = v17;
            if (!v12) {
              break;
            }
            v12 -= 216;
            if (((*a3)((int *)v32, v13 - 216) & 1) == 0)
            {
              uint64_t v18 = a1 + v12 + 216;
              goto LABEL_10;
            }
          }
          uint64_t v18 = a1;
LABEL_10:
          long long v19 = v32[1];
          *(_OWORD *)uint64_t v18 = v32[0];
          *(_OWORD *)(v18 + 16) = v19;
          *(_OWORD *)(v18 + 32) = v32[2];
          uint64_t v22 = *(void **)(v13 + 48);
          uint64_t v21 = v13 + 48;
          uint64_t v20 = v22;
          if (v22)
          {
            *(void *)(v18 + 56) = v20;
            operator delete(v20);
            *(void *)uint64_t v21 = 0;
            *(void *)(v21 + 8) = 0;
            *(void *)(v21 + 16) = 0;
          }
          __n128 v23 = (void *)(v21 + 32);
          uint64_t v24 = v34;
          *(void *)uint64_t v21 = v33;
          uint64_t v25 = v35;
          *(void *)(v18 + 56) = v24;
          *(void *)(v18 + 64) = v25;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          uint64_t v33 = 0;
          *(_DWORD *)(v18 + 72) = v36;
          char v26 = *(void **)(v21 + 32);
          if (v26)
          {
            *(void *)(v18 + 88) = v26;
            operator delete(v26);
            *__n128 v23 = 0;
            *(void *)(v21 + 40) = 0;
            *(void *)(v21 + 48) = 0;
          }
          uint64_t v27 = v38;
          *__n128 v23 = v37;
          uint64_t v28 = v39;
          *(void *)(v18 + 88) = v27;
          *(void *)(v18 + 96) = v28;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v37 = 0;
          long long v29 = v41;
          *(_OWORD *)(v21 + 56) = v40;
          *(_OWORD *)(v21 + 72) = v29;
          *(void *)(v21 + 88) = v42;
          long long v30 = v46;
          *(_OWORD *)(v21 + 128) = v45;
          *(_OWORD *)(v21 + 144) = v30;
          *(void *)(v21 + 160) = v47;
          long long v31 = v44;
          *(_OWORD *)(v21 + 96) = v43;
          *(_OWORD *)(v21 + 112) = v31;
          apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v32);
        }
        int v5 = v9 + 54;
        v7 += 216;
        unint64_t v8 = v9;
      }
      while (v9 + 54 != a2);
    }
  }
}

void sub_1DBDEC2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(int *a1, int *a2, uint64_t (**a3)(int *, int *))
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    int v5 = a1 + 54;
    if (a1 + 54 != a2)
    {
      uint64_t v7 = a1 - 54;
      do
      {
        unint64_t v8 = v5;
        if ((*a3)(v5, v4))
        {
          apple::vision::libraries::facecore::Face::Face((uint64_t)v23, v8);
          long long v9 = *(_OWORD *)(v4 + 102);
          long long v34 = *(_OWORD *)(v4 + 98);
          long long v35 = v9;
          uint64_t v36 = *((void *)v4 + 53);
          long long v10 = *(_OWORD *)(v4 + 94);
          long long v32 = *(_OWORD *)(v4 + 90);
          long long v33 = v10;
          long long v11 = v7;
          do
          {
            long long v12 = *(_OWORD *)(v11 + 58);
            *((_OWORD *)v11 + 27) = *(_OWORD *)(v11 + 54);
            *((_OWORD *)v11 + 28) = v12;
            *((_OWORD *)v11 + 29) = *(_OWORD *)(v11 + 62);
            std::vector<double>::__move_assign((uint64_t)(v11 + 120), (__n128 *)(v11 + 66));
            v11[126] = v11[72];
            std::vector<double>::__move_assign((uint64_t)(v11 + 128), (__n128 *)(v11 + 74));
            long long v13 = *((_OWORD *)v11 + 21);
            *(_OWORD *)(v11 + 134) = *((_OWORD *)v11 + 20);
            *(_OWORD *)(v11 + 138) = v13;
            *((void *)v11 + 71) = *((void *)v11 + 44);
            long long v14 = *(_OWORD *)(v11 + 102);
            *((_OWORD *)v11 + 38) = *(_OWORD *)(v11 + 98);
            *((_OWORD *)v11 + 39) = v14;
            *((void *)v11 + 80) = *((void *)v11 + 53);
            long long v15 = *(_OWORD *)(v11 + 94);
            *((_OWORD *)v11 + 36) = *(_OWORD *)(v11 + 90);
            *((_OWORD *)v11 + 37) = v15;
            char v16 = (*a3)((int *)v23, v11);
            v11 -= 54;
          }
          while ((v16 & 1) != 0);
          long long v17 = v23[1];
          *((_OWORD *)v11 + 27) = v23[0];
          *((_OWORD *)v11 + 28) = v17;
          *((_OWORD *)v11 + 29) = v23[2];
          uint64_t v18 = (void *)*((void *)v11 + 60);
          if (v18)
          {
            *((void *)v11 + 61) = v18;
            operator delete(v18);
            *((void *)v11 + 60) = 0;
            *((void *)v11 + 61) = 0;
            *((void *)v11 + 62) = 0;
          }
          *((_OWORD *)v11 + 30) = v24;
          *((void *)v11 + 62) = v25;
          uint64_t v25 = 0;
          long long v24 = 0uLL;
          v11[126] = v26;
          long long v19 = (void *)*((void *)v11 + 64);
          if (v19)
          {
            *((void *)v11 + 65) = v19;
            operator delete(v19);
            *((void *)v11 + 64) = 0;
            *((void *)v11 + 65) = 0;
            *((void *)v11 + 66) = 0;
          }
          *((_OWORD *)v11 + 32) = v27;
          *((void *)v11 + 66) = v28;
          uint64_t v28 = 0;
          long long v27 = 0uLL;
          long long v20 = v30;
          *(_OWORD *)(v11 + 134) = v29;
          *(_OWORD *)(v11 + 138) = v20;
          *((void *)v11 + 71) = v31;
          long long v21 = v35;
          *((_OWORD *)v11 + 38) = v34;
          *((_OWORD *)v11 + 39) = v21;
          *((void *)v11 + 80) = v36;
          long long v22 = v33;
          *((_OWORD *)v11 + 36) = v32;
          *((_OWORD *)v11 + 37) = v22;
          apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v23);
        }
        int v5 = v8 + 54;
        v7 += 54;
        unint64_t v4 = v8;
      }
      while (v8 + 54 != a2);
    }
  }
}

void sub_1DBDEC4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    __n128 v10 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a2, a3);
    if (!((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(a2, a1, v10)) {
      return 1;
    }
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    __n128 v13 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, a2);
    if (!((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(a3, a2, v13)) {
      return 1;
    }
    uint64_t v11 = a2;
    uint64_t v12 = a3;
LABEL_9:
    std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v11, v12);
    return 2;
  }
  std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, a3);
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&)>(unint64_t a1, unint64_t a2, unsigned int (**a3)(_OWORD *, unint64_t, __n128))
{
  apple::vision::libraries::facecore::Face::Face((uint64_t)v30, (int *)a1);
  long long v6 = *(_OWORD *)(a1 + 192);
  long long v41 = *(_OWORD *)(a1 + 176);
  long long v42 = v6;
  uint64_t v43 = *(void *)(a1 + 208);
  long long v7 = *(_OWORD *)(a1 + 144);
  long long v40 = *(_OWORD *)(a1 + 160);
  long long v39 = v7;
  if (((uint64_t (*)(_OWORD *, unint64_t))*a3)(v30, a2 - 216))
  {
    unint64_t v8 = a1;
    do
      v8 += 216;
    while ((((uint64_t (*)(_OWORD *, unint64_t))*a3)(v30, v8) & 1) == 0);
  }
  else
  {
    unint64_t v9 = a1 + 216;
    do
    {
      unint64_t v8 = v9;
      if (v9 >= a2) {
        break;
      }
      int v10 = ((uint64_t (*)(_OWORD *, unint64_t))*a3)(v30, v9);
      unint64_t v9 = v8 + 216;
    }
    while (!v10);
  }
  if (v8 < a2)
  {
    do
      a2 -= 216;
    while ((((uint64_t (*)(_OWORD *, unint64_t))*a3)(v30, a2) & 1) != 0);
  }
  while (v8 < a2)
  {
    __n128 v11 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v8, a2);
    do
      v8 += 216;
    while (!(*a3)(v30, v8, v11));
    do
      a2 -= 216;
    while ((((uint64_t (*)(_OWORD *, unint64_t))*a3)(v30, a2) & 1) != 0);
  }
  uint64_t v12 = (long long *)(v8 - 216);
  if (v8 - 216 != a1)
  {
    long long v13 = *v12;
    long long v14 = *(_OWORD *)(v8 - 184);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 - 200);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)a1 = v13;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v8 - 168));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v8 - 144);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v8 - 136));
    long long v15 = *(_OWORD *)(v8 - 112);
    long long v16 = *(_OWORD *)(v8 - 96);
    *(void *)(a1 + 136) = *(void *)(v8 - 80);
    *(_OWORD *)(a1 + 120) = v16;
    *(_OWORD *)(a1 + 104) = v15;
    long long v17 = *(_OWORD *)(v8 - 40);
    long long v18 = *(_OWORD *)(v8 - 24);
    long long v19 = *(_OWORD *)(v8 - 56);
    *(void *)(a1 + 208) = *(void *)(v8 - 8);
    *(_OWORD *)(a1 + 176) = v17;
    *(_OWORD *)(a1 + 192) = v18;
    *(_OWORD *)(a1 + 160) = v19;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v8 - 72);
  }
  long long v20 = v30[0];
  long long v21 = v30[2];
  *(_OWORD *)(v8 - 200) = v30[1];
  *(_OWORD *)(v8 - 184) = v21;
  *uint64_t v12 = v20;
  long long v22 = *(void **)(v8 - 168);
  if (v22)
  {
    *(void *)(v8 - 160) = v22;
    operator delete(v22);
    *(void *)(v8 - 168) = 0;
    *(void *)(v8 - 160) = 0;
    *(void *)(v8 - 152) = 0;
  }
  *(_OWORD *)(v8 - 168) = v31;
  *(void *)(v8 - 152) = v32;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  __n128 v23 = *(void **)(v8 - 136);
  *(_DWORD *)(v8 - 144) = v33;
  if (v23)
  {
    *(void *)(v8 - 128) = v23;
    operator delete(v23);
    *(void *)(v8 - 136) = 0;
    *(void *)(v8 - 128) = 0;
    *(void *)(v8 - 120) = 0;
  }
  *(_OWORD *)(v8 - 136) = v34;
  *(void *)(v8 - 120) = v35;
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  long long v24 = v36;
  long long v25 = v37;
  *(void *)(v8 - 80) = v38;
  *(_OWORD *)(v8 - 112) = v24;
  *(_OWORD *)(v8 - 96) = v25;
  long long v27 = v41;
  long long v26 = v42;
  uint64_t v28 = v43;
  *(_OWORD *)(v8 - 56) = v40;
  *(void *)(v8 - 8) = v28;
  *(_OWORD *)(v8 - 24) = v26;
  *(_OWORD *)(v8 - 40) = v27;
  *(_OWORD *)(v8 - 72) = v39;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v30);
  return v8;
}

void sub_1DBDEC86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,apple::vision::libraries::facecore::FaceInternal *,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(unint64_t, _OWORD *, __n128))
{
  apple::vision::libraries::facecore::Face::Face((uint64_t)v32, (int *)a1);
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)(a1 + 192);
  long long v43 = *(_OWORD *)(a1 + 176);
  long long v44 = v7;
  uint64_t v45 = *(void *)(a1 + 208);
  long long v8 = *(_OWORD *)(a1 + 144);
  long long v42 = *(_OWORD *)(a1 + 160);
  long long v41 = v8;
  do
  {
    char v9 = ((uint64_t (*)(uint64_t, _OWORD *))*a3)(a1 + v6 + 216, v32);
    v6 += 216;
  }
  while ((v9 & 1) != 0);
  unint64_t v10 = a1 + v6;
  if (v6 == 216)
  {
    do
    {
      if (v10 >= a2) {
        break;
      }
      a2 -= 216;
    }
    while ((((uint64_t (*)(unint64_t, _OWORD *))*a3)(a2, v32) & 1) == 0);
  }
  else
  {
    do
      a2 -= 216;
    while (!((unsigned int (*)(unint64_t, _OWORD *))*a3)(a2, v32));
  }
  unint64_t v11 = a1 + v6;
  if (v10 < a2)
  {
    unint64_t v12 = a2;
    do
    {
      __n128 v13 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v11, v12);
      do
        v11 += 216;
      while (((*a3)(v11, v32, v13) & 1) != 0);
      do
        v12 -= 216;
      while (!((unsigned int (*)(unint64_t, _OWORD *))*a3)(v12, v32));
    }
    while (v11 < v12);
  }
  long long v14 = (long long *)(v11 - 216);
  if (v11 - 216 != a1)
  {
    long long v15 = *v14;
    long long v16 = *(_OWORD *)(v11 - 184);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v11 - 200);
    *(_OWORD *)(a1 + 32) = v16;
    *(_OWORD *)a1 = v15;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v11 - 168));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v11 - 144);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v11 - 136));
    long long v17 = *(_OWORD *)(v11 - 112);
    long long v18 = *(_OWORD *)(v11 - 96);
    *(void *)(a1 + 136) = *(void *)(v11 - 80);
    *(_OWORD *)(a1 + 120) = v18;
    *(_OWORD *)(a1 + 104) = v17;
    long long v19 = *(_OWORD *)(v11 - 40);
    long long v20 = *(_OWORD *)(v11 - 24);
    long long v21 = *(_OWORD *)(v11 - 56);
    *(void *)(a1 + 208) = *(void *)(v11 - 8);
    *(_OWORD *)(a1 + 176) = v19;
    *(_OWORD *)(a1 + 192) = v20;
    *(_OWORD *)(a1 + 160) = v21;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v11 - 72);
  }
  long long v22 = v32[0];
  long long v23 = v32[2];
  *(_OWORD *)(v11 - 200) = v32[1];
  *(_OWORD *)(v11 - 184) = v23;
  *long long v14 = v22;
  long long v24 = *(void **)(v11 - 168);
  if (v24)
  {
    *(void *)(v11 - 160) = v24;
    operator delete(v24);
    *(void *)(v11 - 168) = 0;
    *(void *)(v11 - 160) = 0;
    *(void *)(v11 - 152) = 0;
  }
  *(_OWORD *)(v11 - 168) = v33;
  *(void *)(v11 - 152) = v34;
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  long long v25 = *(void **)(v11 - 136);
  *(_DWORD *)(v11 - 144) = v35;
  if (v25)
  {
    *(void *)(v11 - 128) = v25;
    operator delete(v25);
    *(void *)(v11 - 136) = 0;
    *(void *)(v11 - 128) = 0;
    *(void *)(v11 - 120) = 0;
  }
  *(_OWORD *)(v11 - 136) = v36;
  *(void *)(v11 - 120) = v37;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  long long v26 = v38;
  long long v27 = v39;
  *(void *)(v11 - 80) = v40;
  *(_OWORD *)(v11 - 112) = v26;
  *(_OWORD *)(v11 - 96) = v27;
  long long v29 = v43;
  long long v28 = v44;
  uint64_t v30 = v45;
  *(_OWORD *)(v11 - 56) = v42;
  *(void *)(v11 - 8) = v30;
  *(_OWORD *)(v11 - 24) = v28;
  *(_OWORD *)(v11 - 40) = v29;
  *(_OWORD *)(v11 - 72) = v41;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v32);
  return v11 - 216;
}

void sub_1DBDECB28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  BOOL v6 = 1;
  switch(0x84BDA12F684BDA13 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      if ((*a3)(a2 - 216, a1)) {
        std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, v4 - 216);
      }
      return v6;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a1 + 216, a2 - 216, a3);
      return v6;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a1 + 216, a1 + 432, a2 - 216, a3);
      return v6;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a1 + 216, a1 + 432, a1 + 648, a2 - 216, a3);
      return v6;
    default:
      uint64_t v7 = a1 + 432;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a1 + 216, a1 + 432, a3);
      uint64_t v8 = a1 + 648;
      if (a1 + 648 == v4) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      uint64_t v34 = v4;
      break;
  }
  while (!(*a3)(v8, v7))
  {
LABEL_18:
    uint64_t v7 = v8;
    v9 += 216;
    v8 += 216;
    if (v8 == v4) {
      return 1;
    }
  }
  int v35 = v10;
  apple::vision::libraries::facecore::Face::Face((uint64_t)v36, (int *)v8);
  long long v11 = *(_OWORD *)(v8 + 192);
  long long v49 = *(_OWORD *)(v8 + 176);
  long long v50 = v11;
  uint64_t v51 = *(void *)(v8 + 208);
  long long v12 = *(_OWORD *)(v8 + 160);
  long long v47 = *(_OWORD *)(v8 + 144);
  long long v48 = v12;
  uint64_t v13 = v9;
  while (1)
  {
    uint64_t v14 = a1 + v13;
    long long v15 = (_OWORD *)(a1 + v13 + 648);
    long long v16 = *(_OWORD *)(a1 + v13 + 448);
    *long long v15 = *(_OWORD *)(a1 + v13 + 432);
    v15[1] = v16;
    v15[2] = *(_OWORD *)(a1 + v13 + 464);
    long long v17 = (__n128 *)(a1 + v13 + 480);
    std::vector<double>::__move_assign(a1 + v13 + 696, v17);
    *(_DWORD *)(v14 + 720) = *(_DWORD *)(v14 + 504);
    long long v18 = (void **)(a1 + v13 + 512);
    std::vector<double>::__move_assign(v14 + 728, (__n128 *)(v14 + 512));
    long long v19 = *(_OWORD *)(a1 + v13 + 552);
    *(_OWORD *)(v14 + 752) = *(_OWORD *)(v14 + 536);
    *(_OWORD *)(v14 + 768) = v19;
    *(void *)(v14 + 784) = *(void *)(v14 + 568);
    long long v20 = *(_OWORD *)(a1 + v13 + 624);
    *(_OWORD *)(v14 + 824) = *(_OWORD *)(v14 + 608);
    *(_OWORD *)(v14 + 840) = v20;
    *(void *)(v14 + 856) = *(void *)(v14 + 640);
    long long v21 = *(_OWORD *)(a1 + v13 + 592);
    *(_OWORD *)(v14 + 792) = *(_OWORD *)(v14 + 576);
    *(_OWORD *)(v14 + 808) = v21;
    if (v13 == -432) {
      break;
    }
    v13 -= 216;
    if (((*a3)((uint64_t)v36, v14 + 216) & 1) == 0)
    {
      uint64_t v22 = a1 + v13 + 648;
      goto LABEL_12;
    }
  }
  uint64_t v22 = a1;
LABEL_12:
  long long v23 = v36[1];
  *(_OWORD *)uint64_t v22 = v36[0];
  *(_OWORD *)(v22 + 16) = v23;
  *(_OWORD *)(v22 + 32) = v36[2];
  long long v24 = *(void **)(v14 + 480);
  if (v24)
  {
    *(void *)(v22 + 56) = v24;
    operator delete(v24);
    v17->n128_u64[0] = 0;
    v17->n128_u64[1] = 0;
    v17[1].n128_u64[0] = 0;
  }
  uint64_t v25 = v38;
  v17->n128_u64[0] = v37;
  uint64_t v26 = v39;
  *(void *)(v22 + 56) = v25;
  *(void *)(v22 + 64) = v26;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unint64_t v37 = 0;
  *(_DWORD *)(v22 + 72) = v40;
  long long v27 = *v18;
  if (*v18)
  {
    *(void *)(v22 + 88) = v27;
    operator delete(v27);
    *long long v18 = 0;
    *(void *)(v14 + 520) = 0;
    *(void *)(v14 + 528) = 0;
  }
  uint64_t v28 = v42;
  *long long v18 = v41;
  uint64_t v29 = v43;
  *(void *)(v22 + 88) = v28;
  *(void *)(v22 + 96) = v29;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v41 = 0;
  long long v30 = v45;
  *(_OWORD *)(v14 + 536) = v44;
  *(_OWORD *)(v14 + 552) = v30;
  *(void *)(v14 + 568) = v46;
  long long v31 = v50;
  *(_OWORD *)(v14 + 608) = v49;
  *(_OWORD *)(v14 + 624) = v31;
  *(void *)(v14 + 640) = v51;
  long long v32 = v48;
  int v10 = v35 + 1;
  *(_OWORD *)(v14 + 576) = v47;
  *(_OWORD *)(v14 + 592) = v32;
  if (v35 != 7)
  {
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v36);
    uint64_t v4 = v34;
    goto LABEL_18;
  }
  BOOL v6 = v8 + 216 == v34;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v36);
  return v6;
}

void sub_1DBDECE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    __n128 v11 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a3, a4);
    if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a5)(a3, a2, v11))
    {
      __n128 v12 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a2, a3);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a5)(a2, a1, v12))
      {
        *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, a2).n128_u64[0];
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  double v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, double))*a6)(a5, a4, v12))
  {
    __n128 v14 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a4, a5);
    if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a4, a3, v14))
    {
      __n128 v15 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a3, a4);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a3, a2, v15))
      {
        __n128 v16 = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a2, a3);
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a2, a1, v16))
        {
          *(void *)&double result = std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(a1, a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*,apple::vision::libraries::facecore::FaceInternal*>(__n128 *a1, __n128 *a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = (uint64_t)a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 216;
    if ((char *)a2 - (char *)a1 >= 217)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)((char *)a1 + 216 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 216);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      uint64_t v15 = v7;
      do
      {
        if (((unsigned int (*)(uint64_t, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          std::swap[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal>(v15, (uint64_t)a1);
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)a1, a4, v10, a1);
        }
        v15 += 216;
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 >= 217)
    {
      unint64_t v16 = v9 / 0xD8uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>((uint64_t)a1, v7, a4, v16);
        v7 -= 216;
      }
      while (v16-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    uint64_t v35 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x84BDA12F684BDA13 * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v9 = (0x97B425ED097B426 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v10 = (long long *)(a1 + 216 * v9);
      uint64_t v11 = 0x97B425ED097B426 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3 && (*a2)(a1 + 216 * v9, (uint64_t)v10 + 216))
      {
        uint64_t v10 = (long long *)((char *)v10 + 216);
        uint64_t v9 = v11;
      }
      if ((((uint64_t (*)(long long *, __n128 *))*a2)(v10, v5) & 1) == 0)
      {
        apple::vision::libraries::facecore::Face::Face((uint64_t)v36, (int *)v5);
        __n128 v13 = v5[12];
        __n128 v47 = v5[11];
        __n128 v48 = v13;
        uint64_t v49 = v5[13].n128_i64[0];
        __n128 v14 = v5[10];
        long long v45 = (__int128)v5[9];
        __n128 v46 = v14;
        do
        {
          uint64_t v15 = v10;
          __n128 v16 = (__n128)*v10;
          long long v17 = v10[2];
          v5[1] = (__n128)v10[1];
          v5[2] = (__n128)v17;
          *int v5 = v16;
          long long v18 = v10 + 3;
          std::vector<double>::__move_assign((uint64_t)&v5[3], (__n128 *)v10 + 3);
          v5[4].n128_u32[2] = *((_DWORD *)v10 + 18);
          long long v19 = v10 + 5;
          std::vector<double>::__move_assign((uint64_t)&v5[5], (__n128 *)v10 + 5);
          __n128 v20 = *(__n128 *)((char *)v10 + 104);
          __n128 v21 = *(__n128 *)((char *)v10 + 120);
          v5[8].n128_u64[1] = *((void *)v10 + 17);
          *(__n128 *)((char *)v5 + 120) = v21;
          *(__n128 *)((char *)v5 + 104) = v20;
          long long v23 = v10[11];
          long long v22 = v10[12];
          long long v24 = v10[10];
          v5[13].n128_u64[0] = *((void *)v10 + 26);
          v5[11] = (__n128)v23;
          v5[12] = (__n128)v22;
          v5[10] = (__n128)v24;
          v5[9] = (__n128)v10[9];
          if (v35 < v9) {
            break;
          }
          uint64_t v25 = (2 * v9) | 1;
          uint64_t v10 = (long long *)(a1 + 216 * v25);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v25;
          }
          else if ((*a2)(a1 + 216 * v25, (uint64_t)v10 + 216))
          {
            uint64_t v10 = (long long *)((char *)v10 + 216);
          }
          else
          {
            uint64_t v9 = v25;
          }
          int v5 = (__n128 *)v15;
        }
        while (!(*a2)((uint64_t)v10, (uint64_t)v36));
        long long v26 = v36[0];
        long long v27 = v36[2];
        v15[1] = v36[1];
        v15[2] = v27;
        *uint64_t v15 = v26;
        uint64_t v28 = (void *)*((void *)v15 + 6);
        if (v28)
        {
          *((void *)v15 + 7) = v28;
          operator delete(v28);
          *long long v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
        }
        v15[3] = v37;
        *((void *)v15 + 8) = v38;
        long long v37 = 0uLL;
        uint64_t v38 = 0;
        *((_DWORD *)v15 + 18) = v39;
        uint64_t v29 = (void *)*((void *)v15 + 10);
        if (v29)
        {
          *((void *)v15 + 11) = v29;
          operator delete(v29);
          *long long v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
        }
        v15[5] = v40;
        *((void *)v15 + 12) = v41;
        long long v40 = 0uLL;
        uint64_t v41 = 0;
        uint64_t v30 = v44;
        long long v31 = v43;
        *(long long *)((char *)v15 + 104) = v42;
        *(long long *)((char *)v15 + 120) = v31;
        *((void *)v15 + 17) = v30;
        __n128 v33 = v47;
        __n128 v32 = v48;
        __n128 v34 = v46;
        *((void *)v15 + 26) = v49;
        v15[11] = (__int128)v33;
        v15[12] = (__int128)v32;
        v15[10] = (__int128)v34;
        v15[9] = v45;
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v36);
      }
    }
  }
  return result;
}

void sub_1DBDED47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    apple::vision::libraries::facecore::Face::Face((uint64_t)&v37, (int *)a1);
    long long v8 = *(_OWORD *)(a1 + 192);
    long long v50 = *(_OWORD *)(a1 + 176);
    long long v51 = v8;
    uint64_t v52 = *(void *)(a1 + 208);
    long long v9 = *(_OWORD *)(a1 + 160);
    long long v48 = *(_OWORD *)(a1 + 144);
    long long v49 = v9;
    uint64_t v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, a3, a4);
    uint64_t v11 = v10;
    unint64_t v12 = (long long *)(a2 - 216);
    __n128 v13 = (void *)(v10 + 48);
    if (v10 == a2 - 216)
    {
      long long v28 = v37;
      long long v29 = v39;
      *(_OWORD *)(v10 + 16) = v38;
      *(_OWORD *)(v10 + 32) = v29;
      *(_OWORD *)uint64_t v10 = v28;
      uint64_t v30 = *(void **)(v10 + 48);
      if (v30)
      {
        *(void *)(v11 + 56) = v30;
        operator delete(v30);
        *__n128 v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
      }
      long long v31 = *(void **)(v11 + 80);
      *(_OWORD *)(v11 + 48) = v40;
      *(void *)(v11 + 64) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(_DWORD *)(v11 + 72) = v42;
      if (v31)
      {
        *(void *)(v11 + 88) = v31;
        operator delete(v31);
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 96) = 0;
      }
      *(_OWORD *)(v11 + 80) = v43;
      *(void *)(v11 + 96) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      uint64_t v32 = v47;
      long long v33 = v46;
      *(_OWORD *)(v11 + 104) = v45;
      *(_OWORD *)(v11 + 120) = v33;
      *(void *)(v11 + 136) = v32;
      long long v35 = v50;
      long long v34 = v51;
      long long v36 = v49;
      *(void *)(v11 + 208) = v52;
      *(_OWORD *)(v11 + 176) = v35;
      *(_OWORD *)(v11 + 192) = v34;
      *(_OWORD *)(v11 + 160) = v36;
      *(_OWORD *)(v11 + 144) = v48;
    }
    else
    {
      long long v14 = *v12;
      long long v15 = *(_OWORD *)(a2 - 184);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 - 200);
      *(_OWORD *)(v10 + 32) = v15;
      *(_OWORD *)uint64_t v10 = v14;
      std::vector<double>::__move_assign(v10 + 48, (__n128 *)(a2 - 168));
      *(_DWORD *)(v11 + 72) = *(_DWORD *)(a2 - 144);
      std::vector<double>::__move_assign(v11 + 80, (__n128 *)(a2 - 136));
      long long v16 = *(_OWORD *)(a2 - 112);
      long long v17 = *(_OWORD *)(a2 - 96);
      *(void *)(v11 + 136) = *(void *)(a2 - 80);
      *(_OWORD *)(v11 + 120) = v17;
      *(_OWORD *)(v11 + 104) = v16;
      long long v18 = *(_OWORD *)(a2 - 40);
      long long v19 = *(_OWORD *)(a2 - 24);
      long long v20 = *(_OWORD *)(a2 - 56);
      *(void *)(v11 + 208) = *(void *)(a2 - 8);
      *(_OWORD *)(v11 + 176) = v18;
      *(_OWORD *)(v11 + 192) = v19;
      *(_OWORD *)(v11 + 160) = v20;
      *(_OWORD *)(v11 + 144) = *(_OWORD *)(a2 - 72);
      uint64_t v21 = v11 + 216;
      long long v22 = v38;
      *unint64_t v12 = v37;
      *(_OWORD *)(a2 - 200) = v22;
      *(_OWORD *)(a2 - 184) = v39;
      long long v23 = *(void **)(a2 - 168);
      if (v23)
      {
        *(void *)(a2 - 160) = v23;
        operator delete(v23);
        *(void *)(a2 - 168) = 0;
        *(void *)(a2 - 160) = 0;
        *(void *)(a2 - 152) = 0;
      }
      *(_OWORD *)(a2 - 168) = v40;
      *(void *)(a2 - 152) = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      *(_DWORD *)(a2 - 144) = v42;
      long long v24 = *(void **)(a2 - 136);
      if (v24)
      {
        *(void *)(a2 - 128) = v24;
        operator delete(v24);
        *(void *)(a2 - 136) = 0;
        *(void *)(a2 - 128) = 0;
        *(void *)(a2 - 120) = 0;
      }
      *(_OWORD *)(a2 - 136) = v43;
      *(void *)(a2 - 120) = v44;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      long long v25 = v46;
      *(_OWORD *)(a2 - 112) = v45;
      *(_OWORD *)(a2 - 96) = v25;
      *(void *)(a2 - 80) = v47;
      long long v26 = v51;
      *(_OWORD *)(a2 - 40) = v50;
      *(_OWORD *)(a2 - 24) = v26;
      *(void *)(a2 - 8) = v52;
      long long v27 = v49;
      *(_OWORD *)(a2 - 72) = v48;
      *(_OWORD *)(a2 - 56) = v27;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(a1, v21, (uint64_t (**)(long long *, uint64_t))a3, 0x84BDA12F684BDA13 * ((v21 - a1) >> 3));
    }
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)&v37);
  }
}

void sub_1DBDED764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 216 * v6 + 216;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 216 * v6 + 216, a1 + 216 * v6 + 432))
    {
      v9 += 216;
      uint64_t v10 = v11;
    }
    long long v12 = *(_OWORD *)v9;
    long long v13 = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)a1 = v12;
    std::vector<double>::__move_assign(a1 + 48, (__n128 *)(v9 + 48));
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(v9 + 72);
    std::vector<double>::__move_assign(a1 + 80, (__n128 *)(v9 + 80));
    long long v14 = *(_OWORD *)(v9 + 104);
    long long v15 = *(_OWORD *)(v9 + 120);
    *(void *)(a1 + 136) = *(void *)(v9 + 136);
    *(_OWORD *)(a1 + 120) = v15;
    *(_OWORD *)(a1 + 104) = v14;
    long long v17 = *(_OWORD *)(v9 + 176);
    long long v16 = *(_OWORD *)(v9 + 192);
    long long v18 = *(_OWORD *)(v9 + 160);
    *(void *)(a1 + 208) = *(void *)(v9 + 208);
    *(_OWORD *)(a1 + 176) = v17;
    *(_OWORD *)(a1 + 192) = v16;
    *(_OWORD *)(a1 + 160) = v18;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(v9 + 144);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(apple::vision::libraries::facecore::FaceInternal const&,apple::vision::libraries::facecore::FaceInternal const&),apple::vision::libraries::facecore::FaceInternal*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (long long *)(a1 + 216 * (v4 >> 1));
    uint64_t v10 = (__n128 *)(a2 - 216);
    if ((*a3)(v9, a2 - 216))
    {
      apple::vision::libraries::facecore::Face::Face((uint64_t)v30, (int *)v10);
      long long v12 = *(_OWORD *)(a2 - 56);
      long long v13 = *(_OWORD *)(a2 - 24);
      long long v41 = *(_OWORD *)(a2 - 40);
      long long v42 = v13;
      uint64_t v43 = *(void *)(a2 - 8);
      long long v39 = *(_OWORD *)(a2 - 72);
      long long v40 = v12;
      do
      {
        long long v14 = v9;
        __n128 v15 = (__n128)*v9;
        long long v16 = v9[2];
        v10[1] = (__n128)v9[1];
        v10[2] = (__n128)v16;
        *uint64_t v10 = v15;
        long long v17 = v9 + 3;
        std::vector<double>::__move_assign((uint64_t)&v10[3], (__n128 *)v9 + 3);
        v10[4].n128_u32[2] = *((_DWORD *)v9 + 18);
        long long v18 = v9 + 5;
        std::vector<double>::__move_assign((uint64_t)&v10[5], (__n128 *)v9 + 5);
        __n128 v19 = *(__n128 *)((char *)v9 + 104);
        __n128 v20 = *(__n128 *)((char *)v9 + 120);
        v10[8].n128_u64[1] = *((void *)v9 + 17);
        *(__n128 *)((char *)v10 + 120) = v20;
        *(__n128 *)((char *)v10 + 104) = v19;
        long long v22 = v9[11];
        long long v21 = v9[12];
        long long v23 = v9[10];
        v10[13].n128_u64[0] = *((void *)v9 + 26);
        v10[11] = (__n128)v22;
        v10[12] = (__n128)v21;
        v10[10] = (__n128)v23;
        v10[9] = (__n128)v9[9];
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 216 * v8);
        uint64_t v10 = (__n128 *)v14;
      }
      while (((*a3)(v9, v30) & 1) != 0);
      long long v24 = v30[1];
      *long long v14 = v30[0];
      v14[1] = v24;
      v14[2] = v30[2];
      long long v25 = (void *)*((void *)v14 + 6);
      if (v25)
      {
        *((void *)v14 + 7) = v25;
        operator delete(v25);
        void *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      v14[3] = v31;
      *((void *)v14 + 8) = v32;
      uint64_t v32 = 0;
      long long v31 = 0uLL;
      *((_DWORD *)v14 + 18) = v33;
      long long v26 = (void *)*((void *)v14 + 10);
      if (v26)
      {
        *((void *)v14 + 11) = v26;
        operator delete(v26);
        *long long v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      v14[5] = v34;
      *((void *)v14 + 12) = v35;
      uint64_t v35 = 0;
      long long v34 = 0uLL;
      long long v27 = v37;
      *(long long *)((char *)v14 + 104) = v36;
      *(long long *)((char *)v14 + 120) = v27;
      *((void *)v14 + 17) = v38;
      long long v28 = v42;
      v14[11] = v41;
      v14[12] = v28;
      *((void *)v14 + 26) = v43;
      long long v29 = v40;
      v14[9] = v39;
      v14[10] = v29;
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v30);
    }
  }
  return result;
}

void sub_1DBDEDAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<apple::vision::libraries::facecore::FaceInternal *>::__init_with_size[abi:ne180100]<apple::vision::libraries::facecore::FaceInternal **,apple::vision::libraries::facecore::FaceInternal **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBDEDB18(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

#error "1DBDEDB34: too big function (funcsize=0)"

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::estimateRigidTransformation(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8) - *(float *)(a2 + 8);
  float v3 = *(float *)(a2 + 12) - *(float *)(a1 + 12);
  if ((float)((float)(v3 * v3) + (float)(v2 * v2)) != 0.0) {
    operator new();
  }
  return 0;
}

void sub_1DBE120B0(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x1000C40E0EAB150);
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeReprojectionError(uint64_t a1, uint64_t *a2)
{
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*((int *)a2 + 6) < 1)
  {
    float v7 = 0.0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *a2;
    float v7 = 0.0;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPoint((float *)a1, (float *)(v6 + v4 + 8), (float *)&v14);
      apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPointReverse((float *)a1, (float *)(*a2 + v4 + 32), (float *)&v13);
      float v9 = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::fastSqrtf(v8, (float)((float)(*(float *)(*a2 + v4 + 36) - *((float *)&v14 + 1))* (float)(*(float *)(*a2 + v4 + 36) - *((float *)&v14 + 1)))+ (float)((float)(*(float *)(*a2 + v4 + 32) - *(float *)&v14)* (float)(*(float *)(*a2 + v4 + 32) - *(float *)&v14)));
      float v11 = v9
          + apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::fastSqrtf(v10, (float)((float)(*(float *)(*a2 + v4 + 12) - *((float *)&v13 + 1))* (float)(*(float *)(*a2 + v4 + 12) - *((float *)&v13 + 1)))+ (float)((float)(*(float *)(*a2 + v4 + 8) - *(float *)&v13)* (float)(*(float *)(*a2 + v4 + 8) - *(float *)&v13)));
      if (v11 >= 4.0)
      {
        uint64_t v6 = *a2;
        *(_DWORD *)(*a2 + v4 + 56) = 0;
      }
      else
      {
        ++*(_DWORD *)(a1 + 24);
        uint64_t v6 = *a2;
        *(_DWORD *)(*a2 + v4 + 56) = 1;
        ++*((_DWORD *)a2 + 7);
      }
      float v7 = v7 + v11;
      ++v5;
      v4 += 60;
    }
    while (v5 < *((int *)a2 + 6));
  }
  *(float *)(a1 + 28) = v7;
  return v7;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::ransac(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 8) != *(void *)result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(result + 24);
    if ((int)v3 >= 2)
    {
      uint64_t v5 = (float32x2_t *)(*(void *)result + 32);
      do
      {
        v5[-3] = vadd_f32(vcvt_f32_s32((int32x2_t)v5[-4]), (float32x2_t)0xBF000000BF000000);
        *uint64_t v5 = vadd_f32(vcvt_f32_s32((int32x2_t)v5[-1]), (float32x2_t)0xBF000000BF000000);
        uint64_t v5 = (float32x2_t *)((char *)v5 + 60);
        --v3;
      }
      while (v3);
      uint64_t v6 = 0;
      int v7 = 0;
      float v8 = 0.0;
      int v9 = 1;
      int v10 = 20000;
      do
      {
        int v11 = rand() % *(_DWORD *)(v2 + 24);
        do
          int v12 = rand() % *(_DWORD *)(v2 + 24);
        while (v12 == v11);
        uint64_t v13 = apple::vision::libraries::facecore::processing::tracking::keypointtracker::estimateRigidTransformation(*(void *)v2 + 60 * v11, *(void *)v2 + 60 * v12);
        apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeReprojectionError(v13, (uint64_t *)v2);
        int v14 = *(_DWORD *)(v13 + 24);
        float v15 = (float)v14 / (float)*(int *)(v2 + 24);
        if (v15 > v8)
        {
          float v8 = 1.0;
          if (v15 == 1.0)
          {
            int v10 = 0;
          }
          else
          {
            if (v15 == 0.0)
            {
              int v10 = 20000;
            }
            else
            {
              int v16 = (int)(float)(-6.0 / logf(1.0 - v15));
              if (v16 <= 20000) {
                int v10 = v16;
              }
              else {
                int v10 = 0;
              }
            }
            float v8 = v15;
          }
        }
        if (v7 <= v14)
        {
          if (v6) {
            MEMORY[0x1E0196D10](v6, 0x1000C40E0EAB150);
          }
          __n128 result = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KMatchingArray::operator=(a2, v2);
          int v7 = v14;
          uint64_t v6 = v13;
        }
        else
        {
          __n128 result = MEMORY[0x1E0196D10](v13, 0x1000C40E0EAB150);
        }
      }
      while (v9++ < v10);
      if (v6)
      {
        if ((float)((float)*(int *)(v6 + 24) / (float)*(int *)(v2 + 24)) >= 0.0) {
          apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeRigidTransformationWithInliers();
        }
        JUMPOUT(0x1E0196D10);
      }
    }
  }
  return result;
}

void apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeRigidTransformationWithInliers()
{
}

float32x2_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeCentroidOnInliers(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, int32x2_t a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if ((int)v6 >= 1)
  {
    int v7 = 0;
    float v8 = (float32x2_t *)(*(void *)a1 + 32);
    do
    {
      if (v8[3].i32[0])
      {
        *a2 = vadd_f32(v8[-3], *a2);
        *a3 = vadd_f32(*v8, *a3);
        *(float32x2_t *)(a4 + 8 * v7) = v8[-3];
        *(float32x2_t *)(a5 + 8 * v7++) = *v8;
      }
      float v8 = (float32x2_t *)((char *)v8 + 60);
      --v6;
    }
    while (v6);
  }
  float32x2_t v9 = (float32x2_t)vdup_lane_s32(a6, 0);
  *a2 = vdiv_f32(*a2, v9);
  float32x2_t result = vdiv_f32(*a3, v9);
  *a3 = result;
  return result;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeRhoComponant(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float *a5, float *a6, float a7)
{
  if (a7 > 0.0)
  {
    uint64_t v13 = (float32x2_t *)a1;
    int v14 = 1;
    do
    {
      *uint64_t v13 = vsub_f32(*v13, *a3);
      *a2 = vsub_f32(*a2, *a4);
      float v15 = v13->f32[0];
      float v16 = v13->f32[1];
      ++v13;
      *a5 = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::fastSqrtf(a1, (float)(v16 * v16) + (float)(v15 * v15))+ *a5;
      float v17 = a2->f32[0];
      float v18 = a2->f32[1];
      ++a2;
      *a6 = apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::fastSqrtf(v19, (float)(v18 * v18) + (float)(v17 * v17))+ *a6;
      float v20 = (float)v14++;
    }
    while (v20 < a7);
  }
  *a5 = *a5 / a7;
  float result = *a6 / a7;
  *a6 = result;
  return result;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeThetaComponant(float32x2_t *a1, uint64_t a2, float *a3, float *a4, float *a5, float a6, float a7, float a8)
{
  float v8 = 1.41421356 / a6;
  float v9 = 1.41421356 / a7;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 0.0;
  if (a8 > 0.0)
  {
    uint64_t v13 = (float *)(a2 + 4);
    int v14 = 1;
    do
    {
      *a1 = vmul_n_f32(*a1, v8);
      float v15 = *(v13 - 1) * v9;
      float v16 = *v13 * v9;
      *(v13 - 1) = v15;
      *uint64_t v13 = v16;
      float v17 = a1->f32[0];
      float v18 = a1->f32[1];
      ++a1;
      float v12 = v12 + (float)((float)(v18 * v18) + (float)(v17 * v17));
      float v11 = v11 + (float)((float)(v16 * v18) + (float)(v17 * v15));
      float v10 = v10 + (float)((float)(v16 * v17) - (float)(v18 * v15));
      float v19 = (float)v14;
      v13 += 2;
      ++v14;
    }
    while (v19 < a8);
  }
  float v20 = (float)(v8 / v9) / v12;
  float v21 = v11 * v20;
  float v22 = v10 * v20;
  float v23 = a3[1];
  float v24 = a4[1];
  float v25 = *a4 + (float)((float)((float)(v10 * v20) * v23) - (float)(v21 * *a3));
  float v26 = -(float)(v10 * v20);
  float v27 = (float)-(float)(v21 * v23) - (float)(v22 * *a3);
  *a5 = v21;
  a5[1] = v26;
  a5[2] = v22;
  a5[3] = v21;
  float result = v27 + v24;
  a5[4] = v25;
  a5[5] = v27 + v24;
  return result;
}

id FCRFaceDetectionParameters()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"FCRDetectorType";
  v3[0] = @"FCRDetectorTypeFaceDetection";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];

  return v0;
}

id FCRFastFaceDetectionParameters()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"FCRDetectorType";
  v3[0] = @"FCRDetectorTypeFastFaceDetection";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];

  return v0;
}

id FCRPreciseDetectionParameters()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"FCRDetectorType";
  v3[0] = @"FCRDetectorTypePreciseFaceDetection";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];

  return v0;
}

id FCRStandardTrackingParameters()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"FCRTrackingType";
  v3[0] = @"FCRTrackingTypeStandard";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];

  return v0;
}

id FCRKeypointTrackingParameters()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = @"FCRTrackingType";
  v3[0] = @"FCRTrackingTypeKeypoints";
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];

  return v0;
}

void sub_1DBE12B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12C48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE12FB0()
{
}

void sub_1DBE13048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DBE13230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DBE1348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DBE135A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE137C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DBE1391C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE13AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE13B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE14014(_Unwind_Exception *a1)
{
  apple::vision::libraries::facecore::Face::~Face(v2);
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void sub_1DBE14130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE14844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_1DBE14B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DBE14EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _Unwind_Resume(a1);
}

void sub_1DBE150B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE151DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1DBE1527C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE15328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE153DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DBE155AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 - 144));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    float v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      float v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    float v15 = &v14[8 * v11];
    float v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    float v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<CGPoint>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CGPoint>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1DBE157FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CGPoint>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void ***std::unique_ptr<apple::vision::libraries::facecore::FaceCoreAPI>::reset[abi:ne180100](void ****a1, void ***a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    apple::vision::libraries::facecore::FaceCoreAPI::~FaceCoreAPI(result);
    JUMPOUT(0x1E0196D10);
  }
  return result;
}

void sub_1DBE15A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v13 = va_arg(va1, __CVBuffer *);
  apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::~BaseAddressLock((CVPixelBufferRef *)va1);
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper((__CVBuffer **)va);

  _Unwind_Resume(a1);
}

void sub_1DBE15B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **apple::vision::LockedPixelImageBuffer<unsigned char const[4],1ull>::LockedPixelImageBuffer(void **a1, CVPixelBufferRef *a2)
{
  size_t Width = CVPixelBufferGetWidth(*a2);
  size_t Height = CVPixelBufferGetHeight(*a2);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*a2);
  *a1 = 0;
  a1[1] = (void *)Height;
  a1[2] = (void *)Width;
  a1[3] = (void *)BytesPerRow;
  a1[4] = 0;
  apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::BaseAddressLock(a1 + 5, *a2);
  *a1 = CVPixelBufferGetBaseAddress(*a2);
  int v7 = (__CVBuffer *)a1[4];
  if (v7)
  {
    CVPixelBufferRelease(v7);
    a1[4] = 0;
  }
  a1[4] = *a2;
  *a2 = 0;
  return a1;
}

void sub_1DBE15D4C(_Unwind_Exception *a1)
{
  apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(v1);
  _Unwind_Resume(a1);
}

void *apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::BaseAddressLock(void *a1, CVPixelBufferRef texture)
{
  *a1 = texture;
  CVPixelBufferRetain(texture);
  CVReturn v4 = CVPixelBufferLockBaseAddress(texture, 1uLL);
  if (v4)
  {
    CVReturn v6 = v4;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &unk_1F360CC20;
    exception[2] = v6;
  }
  return a1;
}

void apple::vision::CVPixelBufferWrapper::LockException::~LockException(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1E0196D10);
}

CVPixelBufferRef *apple::vision::CVPixelBufferWrapper::BaseAddressLock<1ull>::~BaseAddressLock(CVPixelBufferRef *a1)
{
  return a1;
}

void apple::vision::CVPixelBufferWrapper::~CVPixelBufferWrapper(__CVBuffer **this)
{
  unint64_t v2 = *this;
  if (v2)
  {
    CVPixelBufferRelease(v2);
    *this = 0;
  }
}

#error "1DBE15EAC: too big function (funcsize=0)"

double apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::DenseGradientFeature(apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature *this)
{
  *(void *)this = &unk_1F360CF58;
  *(void *)&double result = 0x800000012;
  *((void *)this + 1) = 0x800000012;
  *((void *)this + 2) = 0;
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::~DenseGradientFeature(apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature *this)
{
  *(void *)this = &unk_1F360CF58;
  uint64_t v1 = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)*((void *)this + 2);
  if (v1)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::~FeatureProcessing(v1);
    MEMORY[0x1E0196D10]();
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::~DenseGradientFeature(this);

  JUMPOUT(0x1E0196D10);
}

apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::setFeatureProcessing(apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature *this, apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *a2)
{
  double result = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)*((void *)this + 2);
  if (result)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::~FeatureProcessing(result);
    double result = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)MEMORY[0x1E0196D10]();
  }
  *((void *)this + 2) = a2;
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::extractFaceprintPart(apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature *this, unsigned __int8 *a2, int a3, int a4, apple::vision::libraries::facecore::FaceCoreContext *a5, float a6)
{
  if (a5)
  {
    if (a3 >= 1)
    {
      uint64_t v6 = 0;
      int v7 = (float *)((char *)this + 1176);
      do
      {
        uint64_t v8 = a4;
        uint64_t v9 = a2;
        unint64_t v10 = v7;
        if (a4 >= 1)
        {
          do
          {
            LOBYTE(a6) = *v9;
            a6 = (float)LODWORD(a6);
            *v10++ = a6;
            v9 += a3;
            --v8;
          }
          while (v8);
        }
        ++v6;
        v7 += a4;
        ++a2;
      }
      while (v6 != a3);
    }
    v11[0] = 8;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v14 = 0;
    apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::InitData((apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *)v11, (float *)this + 294, a4, a3);
  }
  apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::extractFaceprintPart();
}

void sub_1DBE39730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor::~GradientDenseDescriptor((apple::vision::libraries::facecore::mod::facerecognition::GradientDenseDescriptor *)va);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::transformF(apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *this@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int a4@<W3>, char a5@<W4>, double **a6@<X8>, unsigned int a7@<S0>)
{
  int v9 = a3;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (*((unsigned char *)this + 40))
  {
    if (a5)
    {
      if (a4 >= 1)
      {
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          if (a3 >= 1)
          {
            float v15 = (float *)(*((void *)this + 1) + 4 * v14);
            float v16 = (float *)(*((void *)this + 3) + 4 * v14);
            v14 += a3;
            uint64_t v17 = a3;
            uint64_t v18 = a2;
            do
            {
              LOBYTE(a7) = *v18;
              float v19 = *v15++;
              *(float *)&a7 = (float)a7 - v19;
              *v16++ = *(float *)&a7;
              v18 += a4;
              --v17;
            }
            while (v17);
          }
          ++v13;
          ++a2;
        }
        while (v13 != a4);
      }
    }
    else
    {
      uint64_t v36 = *((unsigned int *)this + 11);
      if ((int)v36 >= 1)
      {
        long long v37 = (float *)*((void *)this + 1);
        uint64_t v38 = (float *)*((void *)this + 3);
        do
        {
          unsigned int v39 = *a2++;
          float v40 = (float)v39;
          float v41 = *v37++;
          *v38++ = v40 - v41;
          --v36;
        }
        while (v36);
      }
    }
    MEMORY[0x1F4188790](this);
    uint64_t v43 = (float *)((char *)&v71 - ((v42 + 15) & 0x7FFFFFFF0));
    vDSP_mmul(*(const float **)this, 1, *((const float **)this + 3), 1, *((float **)this + 4), 1, *((int *)this + 12), 1uLL, *((int *)this + 11));
    vDSP_mmul(*((const float **)this + 2), 1, *((const float **)this + 4), 1, v43, 1, *((int *)this + 12), 1uLL, *((int *)this + 12));
    if (*((int *)this + 12) >= 1)
    {
      uint64_t v44 = 0;
      long long v45 = a6 + 2;
      long long v46 = a6[1];
      do
      {
        double v47 = v43[v44];
        if ((unint64_t)v46 >= *v45)
        {
          long long v49 = *a6;
          uint64_t v50 = v46 - *a6;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = *v45 - (void)v49;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            float64x2_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v53);
            long long v49 = *a6;
            long long v46 = a6[1];
          }
          else
          {
            float64x2_t v54 = 0;
          }
          long long v55 = (double *)&v54[8 * v50];
          *long long v55 = v47;
          long long v48 = v55 + 1;
          while (v46 != v49)
          {
            uint64_t v56 = *((void *)v46-- - 1);
            *((void *)v55-- - 1) = v56;
          }
          *a6 = v55;
          a6[1] = v48;
          a6[2] = (double *)&v54[8 * v53];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *long long v46 = v47;
          long long v48 = v46 + 1;
        }
        a6[1] = v48;
        ++v44;
        long long v46 = v48;
      }
      while (v44 < *((int *)this + 12));
    }
  }
  else
  {
    puts("not m_initialized!");
    if (a5)
    {
      if (a4 >= 1)
      {
        uint64_t v21 = 0;
        float v22 = a6 + 2;
        uint64_t v23 = v9;
        HIDWORD(v71) = v9;
        do
        {
          if (v9 >= 1)
          {
            uint64_t v24 = 0;
            float v25 = a6[1];
            do
            {
              LOBYTE(v20) = a2[v21 + v24 * a4];
              double v26 = (double)v20;
              if ((unint64_t)v25 >= *v22)
              {
                long long v28 = *a6;
                uint64_t v29 = v25 - *a6;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 61) {
                  std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = *v22 - (void)v28;
                if (v31 >> 2 > v30) {
                  unint64_t v30 = v31 >> 2;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v32);
                  long long v28 = *a6;
                  float v25 = a6[1];
                }
                else
                {
                  int v33 = 0;
                }
                long long v34 = (double *)&v33[8 * v29];
                *long long v34 = v26;
                float v27 = v34 + 1;
                while (v25 != v28)
                {
                  unint64_t v35 = *((void *)v25-- - 1);
                  unint64_t v20 = v35;
                  *((void *)v34-- - 1) = v35;
                }
                *a6 = v34;
                a6[1] = v27;
                a6[2] = (double *)&v33[8 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *float v25 = v26;
                float v27 = v25 + 1;
              }
              a6[1] = v27;
              ++v24;
              float v25 = v27;
            }
            while (v24 != v23);
          }
          ++v21;
          int v9 = HIDWORD(v71);
        }
        while (v21 != a4);
      }
    }
    else
    {
      uint64_t v57 = (a4 * v9);
      if ((int)v57 >= 1)
      {
        uint64_t v58 = 0;
        int v59 = a6 + 2;
        uint64_t v60 = a6[1];
        do
        {
          LOBYTE(v20) = a2[v58];
          double v61 = (double)v20;
          if ((unint64_t)v60 >= *v59)
          {
            int v63 = *a6;
            uint64_t v64 = v60 - *a6;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61) {
              std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v66 = *v59 - (void)v63;
            if (v66 >> 2 > v65) {
              unint64_t v65 = v66 >> 2;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              float64x2_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a6 + 2), v67);
              int v63 = *a6;
              uint64_t v60 = a6[1];
            }
            else
            {
              float64x2_t v68 = 0;
            }
            uint64_t v69 = (double *)&v68[8 * v64];
            *uint64_t v69 = v61;
            uint64_t v62 = v69 + 1;
            while (v60 != v63)
            {
              unint64_t v70 = *((void *)v60-- - 1);
              unint64_t v20 = v70;
              *((void *)v69-- - 1) = v70;
            }
            *a6 = v69;
            a6[1] = v62;
            a6[2] = (double *)&v68[8 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *uint64_t v60 = v61;
            uint64_t v62 = v60 + 1;
          }
          a6[1] = v62;
          ++v58;
          uint64_t v60 = v62;
        }
        while (v58 != v57);
      }
    }
  }
}

void sub_1DBE39C18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::~FeatureProcessing(apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x1E0196CF0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x1E0196CF0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    MEMORY[0x1E0196CF0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    MEMORY[0x1E0196CF0](v5, 0x1000C8052888210);
  }
}

void apple::vision::libraries::facecore::FaceCoreContext::FaceCoreContext(apple::vision::libraries::facecore::FaceCoreContext *this)
{
}

void sub_1DBE39E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 255) < 0) {
    operator delete(*v3);
  }
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 192) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(v2 + 152);
  if (v7)
  {
    *(void *)(v2 + 160) = v7;
    operator delete(v7);
  }
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v8 = *(void *)v2;
  *(void *)uint64_t v2 = 0;
  if (v8) {
    std::default_delete<apple::vision::libraries::facecore::FaceCoreContext::Impl>::operator()[abi:ne180100](v2, v8);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::FaceCoreContext::~FaceCoreContext(void **this)
{
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  uint64_t v2 = this[23];
  if (v2)
  {
    this[24] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[19];
  if (v3)
  {
    this[20] = v3;
    operator delete(v3);
  }
  uint64_t v5 = this + 16;
  std::vector<apple::vision::libraries::facecore::FaceInternal>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *this;
  *this = 0;
  if (v4) {
    std::default_delete<apple::vision::libraries::facecore::FaceCoreContext::Impl>::operator()[abi:ne180100]((uint64_t)this, (uint64_t)v4);
  }
}

void apple::vision::libraries::facecore::FaceCoreContext::setUpForProcessing(apple::vision::libraries::facecore::FaceCoreContext *this)
{
  uint64_t v2 = *((void *)this + 17);
  uint64_t v3 = *((void *)this + 16);
  while (v2 != v3)
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v2 - 216));
  *((void *)this + 17) = v3;
}

apple::vision::libraries::facecore::Face *apple::vision::libraries::facecore::FaceCoreContext::cleanUpTemporaryData(apple::vision::libraries::facecore::FaceCoreContext *this)
{
  uint64_t v3 = (_OWORD *)((char *)this + 112);
  uint64_t v2 = *((void *)this + 14);
  if (v2 && v2 != *((void *)this + 12))
  {
    MEMORY[0x1E0196D10](v2, 0x1000C4077774924);
    *uint64_t v3 = *((_OWORD *)this + 6);
  }

  return apple::vision::libraries::facecore::FaceCoreContext::cleanUpDetailsExtractionProcessedFace(this);
}

__n128 apple::vision::libraries::facecore::FaceCoreContext::cleanUpProcessedImage(apple::vision::libraries::facecore::FaceCoreContext *this)
{
  uint64_t v3 = (__n128 *)((char *)this + 112);
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    uint64_t v5 = *((void *)this + 12);
    uint64_t v4 = (__n128 *)((char *)this + 96);
    if (v2 != v5)
    {
      MEMORY[0x1E0196D10](v2, 0x1000C4077774924);
      __n128 result = *v4;
      *uint64_t v3 = *v4;
    }
  }
  return result;
}

apple::vision::libraries::facecore::Face *apple::vision::libraries::facecore::FaceCoreContext::cleanUpDetailsExtractionProcessedFace(apple::vision::libraries::facecore::FaceCoreContext *this)
{
  __n128 result = (apple::vision::libraries::facecore::Face *)*((void *)this + 27);
  if (result)
  {
    apple::vision::libraries::facecore::Face::~Face(result);
    __n128 result = (apple::vision::libraries::facecore::Face *)MEMORY[0x1E0196D10]();
    *((void *)this + 27) = 0;
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::FaceCoreContext::duplicateImageDataIfNeeded(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 112);
  if (v1)
  {
    if (v1 == *(void *)(this + 96)) {
      operator new[]();
    }
  }
  return this;
}

uint64_t apple::vision::libraries::facecore::FaceCoreContext::getPreprocessingLookupTable(uint64_t **this)
{
  uint64_t v1 = *this;
  uint64_t result = **this;
  if (result != v1[1])
  {
    apple::vision::libraries::facecore::FaceCoreContext::Impl::computeShadowLUT((apple::vision::libraries::facecore::FaceCoreContext::Impl *)v1);
    return *v1;
  }
  return result;
}

uint64_t apple::vision::libraries::facecore::FaceCoreContext::updateDetectedFaces(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = (uint64_t *)(a1 + 128);
  while (v5 != v7)
    apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v5 - 216));
  *(void *)(a1 + 136) = v7;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];

  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal const*>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal const*>,std::back_insert_iterator<std::vector<apple::vision::libraries::facecore::FaceInternal>>,0>(v8, v9, v6);
}

apple::vision::libraries::facecore::Face *apple::vision::libraries::facecore::FaceCoreContext::getConvertedDetectedFaces@<X0>(apple::vision::libraries::facecore::Face *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 16);
  if ((int)(1749801491 * ((unint64_t)(*((void *)this + 17) - v3) >> 3)) >= 1)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (const apple::vision::libraries::facecore::Face *)(v3 + v5);
      if ((unint64_t)v6 >= a2[2])
      {
        this = (apple::vision::libraries::facecore::Face *)std::vector<apple::vision::libraries::facecore::Face>::__push_back_slow_path<apple::vision::libraries::facecore::Face const&>(a2, v8);
        uint64_t v6 = this;
      }
      else
      {
        this = apple::vision::libraries::facecore::Face::Face(v6, v8);
        uint64_t v6 = (apple::vision::libraries::facecore::Face *)((char *)v6 + 144);
        a2[1] = (uint64_t)v6;
      }
      a2[1] = (uint64_t)v6;
      ++v7;
      uint64_t v3 = *(void *)(v4 + 128);
      v5 += 216;
    }
    while (v7 < (int)(1749801491 * ((unint64_t)(*(void *)(v4 + 136) - v3) >> 3)));
  }
  return this;
}

void sub_1DBE3A214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float apple::vision::libraries::facecore::FaceCoreContext::getMinFaceSize(apple::vision::libraries::facecore::FaceCoreContext *this)
{
  return *((float *)this + 3);
}

double apple::vision::libraries::facecore::FaceCoreContext::setROIsArray(apple::vision::libraries::facecore::FaceCoreContext *this, int *a2, int a3)
{
  uint64_t v5 = (void *)((char *)this + 184);
  std::vector<apple::vision::libraries::facecore::utils::RegionOfInterest>::resize((uint64_t)this + 184, a3);
  if (a3 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = *(_OWORD *)a2;
      a2 += 4;
      double result = *(double *)&v8;
      uint64_t v9 = *v5 + v7;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_OWORD *)(v9 + 16) = v8;
      v7 += 32;
    }
    while (32 * a3 != v7);
  }
  return result;
}

char *apple::vision::libraries::facecore::FaceCoreContext::setFaceVertices(uint64_t a1, uint64_t a2)
{
  double result = (char *)(a1 + 152);
  if (result != (char *)a2) {
    return std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void *apple::vision::libraries::facecore::FaceCoreContext::getFaceVertices@<X0>(apple::vision::libraries::facecore::FaceCoreContext *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a2, *((const void **)this + 19), *((void *)this + 20), (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 3);
}

void apple::vision::libraries::facecore::FaceCoreContext::Impl::computeShadowLUT(apple::vision::libraries::facecore::FaceCoreContext::Impl *this)
{
  unint64_t v2 = *((void *)this + 1) - *(void *)this;
  if (v2 > 0xFF)
  {
    if (v2 != 256) {
      *((void *)this + 1) = *(void *)this + 256;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, 256 - v2);
  }
  for (uint64_t i = 0; i != 256; ++i)
    *(unsigned char *)(*(void *)this + i) = (int)(float)((float)((float)((float)(1.0 - (float)((float)i / 255.0))
                                                                 * (float)((float)(powf((float)i / 255.0, 0.7)* 1.5)+ -0.25))+ (float)((float)((float)i / 255.0)* (float)((float)i / 255.0)))* 255.0);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    long long v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal const*>,std::__wrap_iter<apple::vision::libraries::facecore::FaceInternal const*>,std::back_insert_iterator<std::vector<apple::vision::libraries::facecore::FaceInternal>>,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<apple::vision::libraries::facecore::FaceInternal>>::operator=[abi:ne180100](&v6, v3);
    v3 += 216;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<apple::vision::libraries::facecore::FaceInternal>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    uint64_t v5 = std::vector<apple::vision::libraries::facecore::FaceInternal>::__push_back_slow_path<apple::vision::libraries::facecore::FaceInternal const&>(*a1, a2);
  }
  else
  {
    apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)(*a1)[1], a2);
    uint64_t v5 = v4 + 216;
    v3[1] = v4 + 216;
  }
  v3[1] = v5;
  return a1;
}

void sub_1DBE3A5BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::default_delete<apple::vision::libraries::facecore::FaceCoreContext::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1E0196D10);
  }
}

unsigned char *apple::vision::libraries::facecore::utils::aev::AEVConversionUtils::convertCGImageToGrayscale(CGImage *a1, void *a2)
{
  id v3 = a2;
  if (CGImageGetBitsPerComponent(a1) != 8
    || CGImageGetBitsPerPixel(a1) != 32
    || CGImageGetBitmapInfo(a1) == 4096
    || CGImageGetBitmapInfo(a1) == 12288)
  {
    goto LABEL_5;
  }
  CGBitmapInfo BitmapInfo = CGImageGetBitmapInfo(a1);
  if (CGImageGetAlphaInfo(a1) == kCGImageAlphaNoneSkipLast || CGImageGetAlphaInfo(a1) == kCGImageAlphaPremultipliedLast)
  {
    unsigned int v12 = 0;
    goto LABEL_13;
  }
  if (CGImageGetAlphaInfo(a1) == kCGImageAlphaNoneSkipFirst
    || CGImageGetAlphaInfo(a1) == kCGImageAlphaPremultipliedFirst)
  {
    unsigned int v12 = 1;
LABEL_13:
    int Width = CGImageGetWidth(a1);
    unsigned int Height = CGImageGetHeight(a1);
    int BytesPerRow = CGImageGetBytesPerRow(a1);
    DataProvider = CGImageGetDataProvider(a1);
    CFDataRef v17 = CGDataProviderCopyData(DataProvider);
    BytePtr = CFDataGetBytePtr(v17);
    unint64_t v9 = malloc_type_malloc((int)(Width * Height), 0x40F85ACAuLL);
    convertToGreyScale((uint64_t)BytePtr, v9, Width, Height, BytesPerRow, v12, (BitmapInfo >> 13) & 1, v3);
    CFRelease(v17);

    if (v9) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
LABEL_5:

LABEL_6:
  id v4 = v3;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  int v6 = CGImageGetWidth(a1);
  signed int v7 = CGImageGetHeight(a1);
  std::vector<unsigned char>::vector(data, 4 * v7 * v6);
  unint64_t v8 = CGBitmapContextCreate(data[0], v6, v7, 8uLL, 4 * v6, DeviceRGB, 5u);
  CGContextSetAllowsAntialiasing(v8, 0);
  CGContextSetInterpolationQuality(v8, kCGInterpolationNone);
  v20.size.width = (double)v6;
  v20.size.height = (double)v7;
  v20.origin.x = 0.0;
  v20.origin.y = 0.0;
  CGContextDrawImage(v8, v20, a1);
  CGContextRelease(v8);
  CGColorSpaceRelease(DeviceRGB);
  unint64_t v9 = malloc_type_malloc(v7 * v6, 0x5954991AuLL);
  convertToGreyScale((uint64_t)data[0], v9, v6, v7, 4 * v6, 0, 0, v4);
  if (data[0])
  {
    data[1] = data[0];
    operator delete(data[0]);
  }

LABEL_9:
  return v9;
}

void sub_1DBE3A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void convertToGreyScale(uint64_t a1, unsigned char *a2, int a3, unsigned int a4, int a5, unsigned int a6, int a7, void *a8)
{
  char v15 = a8;
  float v16 = v15;
  if (a7) {
    unsigned int v17 = 3 - a6;
  }
  else {
    unsigned int v17 = a6;
  }
  if (a7) {
    int v18 = -1;
  }
  else {
    int v18 = 1;
  }
  unsigned int v19 = v17 + v18;
  unsigned int v20 = v17 + v18 + v18;
  if (v15)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZL18convertToGreyScalePKhPhjjjjbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke;
    block[3] = &__block_descriptor_68_e8_v16__0Q8l;
    block[4] = a1;
    void block[5] = a2;
    int v36 = a5;
    int v37 = a3;
    unsigned int v38 = v17;
    unsigned int v39 = v17 + v18;
    int v40 = v17 + v18 + v18;
    dispatch_apply(a4, v15, block);
  }
  else if (a4)
  {
    unsigned int v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = a1 + v17;
    uint64_t v24 = a1 + v19;
    uint64_t v25 = a1 + v20;
    do
    {
      if (a3)
      {
        double v26 = (unsigned __int8 *)(v23 + v21);
        float v27 = (unsigned __int8 *)(v24 + v21);
        int v28 = a3;
        uint64_t v29 = (unsigned __int8 *)(v25 + v21);
        do
        {
          __int16 v30 = *v26;
          v26 += 4;
          __int16 v31 = 77 * v30;
          __int16 v33 = *v27;
          v27 += 4;
          __int16 v32 = v33;
          __int16 v34 = *v29;
          v29 += 4;
          *a2++ = (unsigned __int16)(v31 + 151 * v32 + 28 * v34) >> 8;
          --v28;
        }
        while (v28);
      }
      ++v22;
      v21 += a5;
    }
    while (v22 != a4);
  }
}

uint64_t ___ZL18convertToGreyScalePKhPhjjjjbPU28objcproto17OS_dispatch_queue8NSObject_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 52);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 40) + v2 * a2;
    uint64_t v5 = *(void *)(result + 32) + *(unsigned int *)(result + 48) * a2;
    do
    {
      *(unsigned char *)(v4 + v3++) = (unsigned __int16)(77 * *(unsigned __int8 *)(v5 + *(unsigned int *)(result + 56))
                                               + 151 * *(unsigned __int8 *)(v5 + *(unsigned int *)(result + 60))
                                               + 28 * *(unsigned __int8 *)(v5 + *(unsigned int *)(result + 64))) >> 8;
      v5 += 4;
    }
    while (v3 < *(unsigned int *)(result + 52));
  }
  return result;
}

#error "1DBE3AAC8: too big function (funcsize=0)"

void apple::vision::libraries::facecore::FaceCoreAPI::FaceCoreAPI(void *a1)
{
  *a1 = &unk_1F360CF20;
  operator new();
}

void sub_1DBE6088C(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x1032C401FCC2CE5);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::FaceCoreAPI::~FaceCoreAPI(void ***this)
{
  *this = (void **)&unk_1F360CF20;
  std::unique_ptr<apple::vision::libraries::facecore::FaceCoreAPI::Impl>::reset[abi:ne180100](this + 1, 0);
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::setParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(apple::vision::libraries::facecore::FaceCoreContext ***)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v5 = apple::vision::libraries::facecore::FaceCoreAPI::Impl::setParameter(v4, (uint64_t)&v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1DBE609B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::Impl::setParameter(apple::vision::libraries::facecore::FaceCoreContext **a1, uint64_t a2, const std::string *a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  int v6 = *(char *)(a2 + 23);
  std::string::size_type v7 = *(void *)(a2 + 8);
  if (v6 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  switch(v8)
  {
    case 9uLL:
      unint64_t v9 = *(const std::string::value_type **)a2;
      if (v6 >= 0) {
        size_t v10 = (const std::string::value_type *)a2;
      }
      else {
        size_t v10 = *(const std::string::value_type **)a2;
      }
      if (memcmp(v10, "nb_angles", v8)) {
        goto LABEL_38;
      }
      unint64_t v11 = *a1;
      if (v6 < 0) {
        std::string::__init_copy_ctor_external(&v93, v9, v7);
      }
      else {
        std::string v93 = *(std::string *)a2;
      }
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v92, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
      }
      else {
        std::string v92 = *a3;
      }
      *((_DWORD *)v11 + 5) = apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue((const char *)&v93, (uint64_t)&v92, 0, 11, 0, 1);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      int v36 = (void *)v93.__r_.__value_.__r.__words[0];
      goto LABEL_68;
    case 0xDuLL:
      char v15 = *(const std::string::value_type **)a2;
      if (v6 >= 0) {
        float v16 = (void *)a2;
      }
      else {
        float v16 = *(void **)a2;
      }
      if (*v16 == 0x665F6E616D6C616BLL && *(void *)((char *)v16 + 5) == 0x7265746C69665F6ELL)
      {
        unsigned int v39 = *a1;
        if (v6 < 0) {
          std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a2, v7);
        }
        else {
          std::string v103 = *(std::string *)a2;
        }
        if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v102, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
        }
        else {
          std::string v102 = *a3;
        }
        *((float *)v39 + 14) = apple::vision::libraries::facecore::utils::ParsingUtils::parseFloatValue((const char *)&v103, (uint64_t)&v102, 1, 0, 0.0, 1.0);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        int v36 = (void *)v103.__r_.__value_.__r.__words[0];
LABEL_68:
        operator delete(v36);
        return 0;
      }
      if (memcmp(v16, "tracking_post", v8)) {
        goto LABEL_38;
      }
      int v18 = *a1;
      if (v6 < 0) {
        std::string::__init_copy_ctor_external(&v95, v15, v7);
      }
      else {
        std::string v95 = *(std::string *)a2;
      }
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v94, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
      }
      else {
        std::string v94 = *a3;
      }
      *((unsigned char *)v18 + 44) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v95, (uint64_t)&v94);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      {
        int v36 = (void *)v95.__r_.__value_.__r.__words[0];
        goto LABEL_68;
      }
      return 0;
    case 0xEuLL:
      unsigned int v12 = *(const std::string::value_type **)a2;
      if (v6 >= 0) {
        uint64_t v13 = (const void *)a2;
      }
      else {
        uint64_t v13 = *(const void **)a2;
      }
      if (memcmp(v13, "tracking_skips", v8)) {
        goto LABEL_38;
      }
      int v14 = *a1;
      if (v6 < 0) {
        std::string::__init_copy_ctor_external(&v101, v12, v7);
      }
      else {
        std::string v101 = *(std::string *)a2;
      }
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v100, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
      }
      else {
        std::string v100 = *a3;
      }
      *((_DWORD *)v14 + 12) = apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue((const char *)&v101, (uint64_t)&v100, 0, 0x7FFFFFFF, 1, 1);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      int v36 = (void *)v101.__r_.__value_.__r.__words[0];
      goto LABEL_68;
    case 0x11uLL:
      unsigned int v19 = *(const std::string::value_type **)a2;
      if (v6 >= 0) {
        unsigned int v20 = (void *)a2;
      }
      else {
        unsigned int v20 = *(void **)a2;
      }
      if (memcmp(v20, "tracking_det_freq", v8))
      {
        if (*v20 == 0x676E696B63617274 && v20[1] == 0x6F6974617275645FLL && *((unsigned char *)v20 + 16) == 110)
        {
          float v41 = *a1;
          if (v6 < 0) {
            std::string::__init_copy_ctor_external(&v97, v19, v7);
          }
          else {
            std::string v97 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v96, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v96 = *a3;
          }
          *((_DWORD *)v41 + 9) = apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue((const char *)&v97, (uint64_t)&v96, 0, 0x7FFFFFFF, 1, 1);
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v97.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
LABEL_38:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "min_face_size"))
        {
          uint64_t v23 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v91 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v90, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v90 = *a3;
          }
          *((float *)v23 + 3) = apple::vision::libraries::facecore::utils::ParsingUtils::parseFloatValue((const char *)&v91, (uint64_t)&v90, 1, 1, 0.01, 0.5);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          int v36 = (void *)v91.__r_.__value_.__r.__words[0];
          goto LABEL_68;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRDetectionRegion"))
        {
          id v24 = [NSString alloc];
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            a3 = (const std::string *)a3->__r_.__value_.__r.__words[0];
          }
          uint64_t v25 = (void *)[v24 initWithUTF8String:a3];
          double v26 = [v25 componentsSeparatedByString:@","];
          unint64_t v27 = [v26 count];
          std::vector<int>::vector(&v89, [v26 count]);
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          id v28 = v26;
          uint64_t v29 = [v28 countByEnumeratingWithState:&v85 objects:v104 count:16];
          if (v29)
          {
            int v30 = 0;
            uint64_t v31 = *(void *)v86;
            do
            {
              uint64_t v32 = 0;
              uint64_t v33 = v30;
              do
              {
                if (*(void *)v86 != v31) {
                  objc_enumerationMutation(v28);
                }
                int v34 = [*(id *)(*((void *)&v85 + 1) + 8 * v32) intValue];
                int v30 = v33 + 1;
                v89.__begin_[v33] = v34;
                ++v32;
                ++v33;
              }
              while (v29 != v32);
              uint64_t v29 = [v28 countByEnumeratingWithState:&v85 objects:v104 count:16];
            }
            while (v29);
          }

          apple::vision::libraries::facecore::FaceCoreContext::setROIsArray(*a1, v89.__begin_, v27 >> 2);
          if (v89.__begin_)
          {
            v89.__end_ = v89.__begin_;
            operator delete(v89.__begin_);
          }

          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "pre"))
        {
          if (!std::string::compare(a3, "true"))
          {
            uint64_t v43 = *a1;
            unsigned int v44 = *((_DWORD *)*a1 + 16) | 1;
          }
          else
          {
            if (std::string::compare(a3, "false"))
            {
              if (std::string::compare(a3, "aggressive")) {
                return 0;
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::invalid_argument::invalid_argument[abi:ne180100](exception, "Aggressive preprocessing is not available for IOS");
              goto LABEL_59;
            }
            uint64_t v43 = *a1;
            unsigned int v44 = *((_DWORD *)*a1 + 16) & 0xFFFFFFFC;
          }
          *((_DWORD *)v43 + 16) = v44;
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "post"))
        {
          unsigned int v38 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v84 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v83, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v83 = *a3;
          }
          *((unsigned char *)v38 + 69) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v84, (uint64_t)&v83);
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v84.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "initial_angle"))
        {
          uint64_t v42 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v82 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v81, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v81 = *a3;
          }
          unsigned int v47 = (int)apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue((const char *)&v82, (uint64_t)&v81, 0x80000000, 0x7FFFFFFF, 1, 1)% 360;
          if (v47 > 0xFFFFFE97) {
            v47 += 360;
          }
          *((_DWORD *)v42 + 4) = v47;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v82.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "eye_and_mouth"))
        {
          long long v45 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v80 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v79, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v79 = *a3;
          }
          *((unsigned char *)v45 + 68) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v80, (uint64_t)&v79);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v80.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "refinement"))
        {
          long long v46 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v78 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v77, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v77 = *a3;
          }
          *((unsigned char *)v46 + 89) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v78, (uint64_t)&v77);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v78.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "histogram"))
        {
          long long v48 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v76 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v75, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v75 = *a3;
          }
          *((unsigned char *)v48 + 88) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v76, (uint64_t)&v75);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v75.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v76.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "recognition_path"))
        {
          long long v49 = *a1;
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = *a3;
          }
          std::string::operator=((std::string *)((char *)v49 + 232), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetailsExtractionProcessingChainsIfNeeded((uint64_t)a1);
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRExtractFaceprint"))
        {
          uint64_t v50 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v73 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v72, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v72 = *a3;
          }
          *((unsigned char *)v50 + 176) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v73, (uint64_t)&v72);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v73.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRExtractLandmarkPoints"))
        {
          unint64_t v51 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v71 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v70, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v70 = *a3;
          }
          *((unsigned char *)v51 + 177) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v71, (uint64_t)&v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v71.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRDetectBlink"))
        {
          uint64_t v52 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v69 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v68, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v68 = *a3;
          }
          *((unsigned char *)v52 + 179) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v69, (uint64_t)&v68);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v68.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v69.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRDetectSmile"))
        {
          unint64_t v53 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v67 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v66, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v66 = *a3;
          }
          *((unsigned char *)v53 + 178) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v67, (uint64_t)&v66);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v67.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRExtractNaturalSmileFeatures"))
        {
          float64x2_t v54 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v65 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v64, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v64 = *a3;
          }
          *((unsigned char *)v54 + 180) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v65, (uint64_t)&v64);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v65.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRDetectFaceBlur"))
        {
          long long v55 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v63 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v62, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v62 = *a3;
          }
          *((unsigned char *)v55 + 181) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v63, (uint64_t)&v62);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v63.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRTrackingModeKeypoints"))
        {
          uint64_t v56 = *a1;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v61 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v60, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string v60 = *a3;
          }
          *((unsigned char *)v56 + 60) = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v61, (uint64_t)&v60);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          {
            int v36 = (void *)v61.__r_.__value_.__r.__words[0];
            goto LABEL_68;
          }
          return 0;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, "FCRSetupParamLoadModelFiles"))
        {
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v59 = *(std::string *)a2;
          }
          if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__p, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
          }
          else {
            std::string __p = *a3;
          }
          int v57 = apple::vision::libraries::facecore::utils::ParsingUtils::parseBooleanValue((uint64_t *)&v59, (uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (v57) {
            apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetectionProcessingChainsIfNeeded((uint64_t)a1);
          }
          return 0;
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unrecognized parameter");
LABEL_59:
        __cxa_throw(exception, (struct type_info *)off_1E6C28C68, MEMORY[0x1E4FBA1E8]);
      }
      int v40 = *a1;
      if (v6 < 0) {
        std::string::__init_copy_ctor_external(&v99, v19, v7);
      }
      else {
        std::string v99 = *(std::string *)a2;
      }
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v98, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
      }
      else {
        std::string v98 = *a3;
      }
      *((_DWORD *)v40 + 10) = apple::vision::libraries::facecore::utils::ParsingUtils::parseIntValue((const char *)&v99, (uint64_t)&v98, 0, 0x7FFFFFFF, 1, 1);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      int v36 = (void *)v99.__r_.__value_.__r.__words[0];
      goto LABEL_68;
    default:
      goto LABEL_38;
  }
}

void sub_1DBE61A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::FaceCoreAPI::detectFaces(apple::vision::libraries::facecore::FaceCoreContext ***this@<X0>, image *a2@<X1>, uint64_t a3@<X8>)
{
}

void apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFaces(apple::vision::libraries::facecore::FaceCoreContext **this@<X0>, image *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (*((unsigned char *)*this + 90)) {
    apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesAllCardinalDirections(this, a2, (uint64_t *)&v5);
  }
  else {
    apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesOneDirection(this, a2, (uint64_t *)&v5);
  }
  std::vector<apple::vision::libraries::facecore::Face>::__vdeallocate((void **)a3);
  *(_OWORD *)a3 = v5;
  *(void *)(a3 + 16) = v6;
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  std::string::size_type v7 = (void **)&v5;
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100](&v7);
  *((void *)*this + 24) = *((void *)*this + 23);
}

void sub_1DBE61EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::extractFaceDetails(apple::vision::libraries::facecore::FaceCoreContext ***this, image *a2, apple::vision::libraries::facecore::Face *a3)
{
  return apple::vision::libraries::facecore::FaceCoreAPI::Impl::extractFaceDetails(this[1], a2, a3);
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::Impl::extractFaceDetails(apple::vision::libraries::facecore::FaceCoreContext **this, image *a2, apple::vision::libraries::facecore::Face *a3)
{
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetailsExtractionProcessingChainsIfNeeded((uint64_t)this);
  apple::vision::libraries::facecore::FaceCoreContext::setUpForProcessing(*this);
  uint64_t v6 = *this;
  *((image *)v6 + 6) = *a2;
  *((image *)v6 + 7) = *a2;
  *((void *)*this + 26) = a3;
  (*(void (**)(apple::vision::libraries::facecore::FaceCoreContext *, apple::vision::libraries::facecore::FaceCoreContext *))(*(void *)this[8] + 8))(this[8], *this);
  apple::vision::libraries::facecore::FaceCoreContext::cleanUpTemporaryData(*this);
  return 0;
}

void apple::vision::libraries::facecore::FaceCoreAPI::version(apple::vision::libraries::facecore::FaceCoreAPI *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetailsExtractionProcessingChainsIfNeeded(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

void sub_1DBE620A0(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0xA1C40EBDA7FF6);
  _Unwind_Resume(a1);
}

uint64_t apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetectionProcessingChainsIfNeeded(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

void sub_1DBE62134(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A1C40AB2DA546);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1DBE621B4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

apple::vision::libraries::facecore::FaceCoreAPI::Impl *apple::vision::libraries::facecore::FaceCoreAPI::Impl::updateDetectionProcessingChains(apple::vision::libraries::facecore::FaceCoreAPI::Impl *this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(*(void *)this + 32);
  switch(v2)
  {
    case 2:
      uint64_t v3 = *((void *)this + 7);
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
        *((void *)v1 + 7) = 0;
      }
      operator new();
    case 1:
      apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteKeypointTrackingProcessingChain(this);
      operator new();
    case 0:
      apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteKeypointTrackingProcessingChain(this);
      this = (apple::vision::libraries::facecore::FaceCoreAPI::Impl *)*((void *)v1 + 7);
      if (this)
      {
        this = (apple::vision::libraries::facecore::FaceCoreAPI::Impl *)(*(uint64_t (**)(apple::vision::libraries::facecore::FaceCoreAPI::Impl *))(*(void *)this + 24))(this);
        *((void *)v1 + 7) = 0;
      }
      *((void *)v1 + 4) = *((void *)v1 + 5);
      break;
  }
  return this;
}

void sub_1DBE622DC(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A1C4031612682);
  _Unwind_Resume(a1);
}

apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteKeypointTrackingProcessingChain(apple::vision::libraries::facecore::FaceCoreAPI::Impl *this)
{
  double result = (apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *)*((void *)this + 6);
  if (result)
  {
    apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager::~KeypointTrackerManager(result);
    double result = (apple::vision::libraries::facecore::processing::tracking::KeypointTrackerManager *)MEMORY[0x1E0196D10]();
    *((void *)this + 6) = 0;
  }
  return result;
}

void apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesAllCardinalDirections(apple::vision::libraries::facecore::FaceCoreContext **this@<X0>, image *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesOneDirection(this, a2, (uint64_t *)&v12);
  std::vector<apple::vision::libraries::facecore::Face>::__vdeallocate((void **)&v14);
  long long v14 = v12;
  uint64_t v15 = v13;
  float v16 = (void **)&v12;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100](&v16);
  std::vector<apple::vision::libraries::facecore::Face>::__insert_with_size[abi:ne180100]<std::__wrap_iter<apple::vision::libraries::facecore::Face*>,std::__wrap_iter<apple::vision::libraries::facecore::Face*>>(a3, a3[1], (const apple::vision::libraries::facecore::Face *)v14, *((uint64_t *)&v14 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v14 + 1) - v14) >> 4));
  uint64_t v6 = *this;
  int v7 = *((_DWORD *)*this + 4);
  uint64_t v8 = *(void *)((char *)*this + 20);
  *(void *)((char *)*this + 20) = 0x5A00000003;
  unsigned int v9 = (v7 + 180) % 360;
  if (v9 > 0xFFFFFE97) {
    v9 += 360;
  }
  *((_DWORD *)v6 + 4) = v9;
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesOneDirection(this, a2, (uint64_t *)&v12);
  std::vector<apple::vision::libraries::facecore::Face>::__vdeallocate((void **)&v14);
  long long v14 = v12;
  uint64_t v15 = v13;
  float v16 = (void **)&v12;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100](&v16);
  apple::vision::libraries::facecore::utils::OverlappingUtils::appendUniqueFaces((int **)&v14, a3, 0.300000012);
  size_t v10 = *this;
  int v11 = v7 % 360;
  if ((v7 % 360) > 0xFFFFFE97) {
    int v11 = v7 % 360 + 360;
  }
  *((_DWORD *)v10 + 4) = v11;
  *(void *)((char *)v10 + 20) = v8;
  *(void *)&long long v12 = &v14;
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1DBE62504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a9 = &a13;
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::vector<apple::vision::libraries::facecore::Face>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

apple::vision::libraries::facecore::Face *apple::vision::libraries::facecore::FaceCoreAPI::Impl::detectFacesOneDirection@<X0>(apple::vision::libraries::facecore::FaceCoreContext **this@<X0>, image *a2@<X1>, uint64_t *a3@<X8>)
{
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::initializeDetectionProcessingChainsIfNeeded((uint64_t)this);
  apple::vision::libraries::facecore::FaceCoreContext::setUpForProcessing(*this);
  if (a2->var1 >= 25 && a2->var2 >= 25)
  {
    int v7 = *this;
    *((image *)v7 + 6) = *a2;
    *((image *)v7 + 7) = *a2;
    (*(void (**)(apple::vision::libraries::facecore::FaceCoreContext *, apple::vision::libraries::facecore::FaceCoreContext *))(*(void *)this[4] + 8))(this[4], *this);
    apple::vision::libraries::facecore::FaceCoreContext::cleanUpTemporaryData(*this);
  }
  uint64_t v8 = *this;

  return apple::vision::libraries::facecore::FaceCoreContext::getConvertedDetectedFaces(v8, a3);
}

uint64_t std::vector<apple::vision::libraries::facecore::Face>::__insert_with_size[abi:ne180100]<std::__wrap_iter<apple::vision::libraries::facecore::Face*>,std::__wrap_iter<apple::vision::libraries::facecore::Face*>>(uint64_t *a1, uint64_t a2, const apple::vision::libraries::facecore::Face *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    int v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 4)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - a2) >> 4)) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 144 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 16 * ((uint64_t)(v12 - a2) >> 4);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<apple::vision::libraries::facecore::Face>::__move_range((uint64_t)a1, v5, v12, v5 + 144 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<apple::vision::libraries::facecore::Face *>,std::__wrap_iter<apple::vision::libraries::facecore::Face *>,apple::vision::libraries::facecore::Face *,0>((uint64_t)v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 4);
      if (v14 > 0x1C71C71C71C71C7) {
        std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0x8E38E38E38E38E39 * ((a2 - v13) >> 4);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xE38E38E38E38E3) {
        unint64_t v18 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>>(v9, v18);
      }
      else {
        unsigned int v19 = 0;
      }
      uint64_t v22 = (apple::vision::libraries::facecore::Face *)&v19[144 * v15];
      v27[0] = v19;
      v27[1] = v22;
      id v28 = v22;
      uint64_t v29 = &v19[144 * v18];
      uint64_t v23 = 9 * a5;
      id v24 = (apple::vision::libraries::facecore::Face *)((char *)v22 + 144 * a5);
      uint64_t v25 = 16 * v23;
      do
      {
        apple::vision::libraries::facecore::Face::Face(v22, v7);
        uint64_t v22 = (apple::vision::libraries::facecore::Face *)((char *)v22 + 144);
        int v7 = (const apple::vision::libraries::facecore::Face *)((char *)v7 + 144);
        v25 -= 144;
      }
      while (v25);
      id v28 = v24;
      uint64_t v5 = std::vector<apple::vision::libraries::facecore::Face>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<apple::vision::libraries::facecore::Face>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_1DBE627C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<apple::vision::libraries::facecore::Face>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = (int *)(a2 + v6 - a4);
    uint64_t v8 = v6;
    do
    {
      apple::vision::libraries::facecore::Face::Face(v8, v10);
      v10 += 36;
      uint64_t v8 = v11 + 144;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::Face *,apple::vision::libraries::facecore::Face *,apple::vision::libraries::facecore::Face *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::vector<apple::vision::libraries::facecore::Face>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>,std::reverse_iterator<apple::vision::libraries::facecore::Face*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      apple::vision::libraries::facecore::Face::Face((apple::vision::libraries::facecore::Face *)(a4 + v7), (const apple::vision::libraries::facecore::Face *)(a2 + v7));
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DBE62994(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 144;
    do
    {
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 + v2));
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<apple::vision::libraries::facecore::Face *,apple::vision::libraries::facecore::Face *,apple::vision::libraries::facecore::Face *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      long long v9 = *(_OWORD *)(a3 + v7 - 144);
      long long v10 = *(_OWORD *)(a3 + v7 - 112);
      *(_OWORD *)(v8 - 128) = *(_OWORD *)(a3 + v7 - 128);
      *(_OWORD *)(v8 - 112) = v10;
      *(_OWORD *)(v8 - 144) = v9;
      std::vector<double>::__move_assign(a4 + v7 - 96, (__n128 *)(a3 + v7 - 96));
      *(_DWORD *)(v8 - 72) = *(_DWORD *)(a3 + v7 - 72);
      std::vector<double>::__move_assign(a4 + v7 - 64, (__n128 *)(a3 + v7 - 64));
      long long v11 = *(_OWORD *)(a3 + v7 - 40);
      long long v12 = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v12;
      *(_OWORD *)(v8 - 40) = v11;
      v7 -= 144;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<apple::vision::libraries::facecore::Face *>,std::__wrap_iter<apple::vision::libraries::facecore::Face *>,apple::vision::libraries::facecore::Face *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      apple::vision::libraries::facecore::Face::operator=(a3, v4);
      v4 += 144;
      a3 += 144;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<apple::vision::libraries::facecore::Face>,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*,apple::vision::libraries::facecore::Face*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      apple::vision::libraries::facecore::Face::Face((apple::vision::libraries::facecore::Face *)(a4 + v7), (const apple::vision::libraries::facecore::Face *)(a2 + v7));
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1DBE62B28(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 144;
    do
    {
      apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v4 + v2));
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<apple::vision::libraries::facecore::Face>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)(v3 - 144));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void apple::vision::libraries::facecore::FaceCoreAPI::Impl::Impl()
{
}

void sub_1DBE62DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 31) < 0) {
    operator delete(*a10);
  }
  std::unique_ptr<apple::vision::libraries::facecore::FaceCoreContext>::reset[abi:ne180100]((apple::vision::libraries::facecore::FaceCoreContext **)v10, 0);
  _Unwind_Resume(a1);
}

apple::vision::libraries::facecore::FaceCoreContext *std::unique_ptr<apple::vision::libraries::facecore::FaceCoreContext>::reset[abi:ne180100](apple::vision::libraries::facecore::FaceCoreContext **a1, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    apple::vision::libraries::facecore::FaceCoreContext::~FaceCoreContext(result);
    JUMPOUT(0x1E0196D10);
  }
  return result;
}

void **std::unique_ptr<apple::vision::libraries::facecore::FaceCoreAPI::Impl>::reset[abi:ne180100](void ***a1, void **a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    apple::vision::libraries::facecore::FaceCoreAPI::Impl::~Impl(result);
    JUMPOUT(0x1E0196D10);
  }
  return result;
}

void apple::vision::libraries::facecore::FaceCoreAPI::Impl::~Impl(void **this)
{
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteFaceDetectionProcessingChain((apple::vision::libraries::facecore::FaceCoreAPI::Impl *)this);
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteKeypointTrackingProcessingChain((apple::vision::libraries::facecore::FaceCoreAPI::Impl *)this);
  uint64_t v2 = this[7];
  if (v2)
  {
    (*(void (**)(void *))(*(void *)v2 + 24))(v2);
    this[7] = 0;
  }
  apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteDetailsExtractionProcessingChain((apple::vision::libraries::facecore::FaceCoreAPI::Impl *)this);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  std::unique_ptr<apple::vision::libraries::facecore::FaceCoreContext>::reset[abi:ne180100]((apple::vision::libraries::facecore::FaceCoreContext **)this, 0);
}

apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteFaceDetectionProcessingChain(apple::vision::libraries::facecore::FaceCoreAPI::Impl *this)
{
  double result = (apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *)*((void *)this + 5);
  if (result)
  {
    apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain::~FaceDetectionProcessingChain(result);
    double result = (apple::vision::libraries::facecore::processing::processingchains::FaceDetectionProcessingChain *)MEMORY[0x1E0196D10]();
    *((void *)this + 5) = 0;
  }
  return result;
}

apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *apple::vision::libraries::facecore::FaceCoreAPI::Impl::deleteDetailsExtractionProcessingChain(apple::vision::libraries::facecore::FaceCoreAPI::Impl *this)
{
  double result = (apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *)*((void *)this + 8);
  if (result)
  {
    apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain::~DetailsExtractionProcessingChain(result);
    double result = (apple::vision::libraries::facecore::processing::processingchains::DetailsExtractionProcessingChain *)MEMORY[0x1E0196D10]();
    *((void *)this + 8) = 0;
  }
  return result;
}

#error "1DBE62FD0: too big function (funcsize=0)"

#error "1DBE89F48: too big function (funcsize=0)"

#error "1DBEAF5F0: too big function (funcsize=0)"

void apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature::LocalGradientFeature(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F360CF88;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 2, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 5, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  a1[8] = 0;
  operator new();
}

void sub_1DBED851C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  MEMORY[0x1E0196D10](v5, 0x1080C400571E1DELL);
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature::~LocalGradientFeature(apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature *this)
{
  *(void *)this = &unk_1F360CF88;
  uint64_t v2 = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)*((void *)this + 8);
  if (v2)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::~FeatureProcessing(v2);
    MEMORY[0x1E0196D10]();
  }
  uint64_t v3 = (apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor *)*((void *)this + 1);
  if (v3)
  {
    apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::~GradientLocalDescriptor(v3);
    MEMORY[0x1E0196D10]();
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

{
  uint64_t vars8;

  apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature::~LocalGradientFeature(this);

  JUMPOUT(0x1E0196D10);
}

apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature::setFeatureProcessing(apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature *this, apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *a2)
{
  double result = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)*((void *)this + 8);
  if (result)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::~FeatureProcessing(result);
    double result = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)MEMORY[0x1E0196D10]();
  }
  *((void *)this + 8) = a2;
  return result;
}

void apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature::extractFaceprintPart(apple::vision::libraries::facecore::mod::facerecognition::LocalGradientFeature *this@<X0>, unsigned __int8 *a2@<X1>, apple::vision::libraries::facecore::FaceCoreContext *a3@<X4>, int a4@<W2>, int a5@<W3>, uint64_t a6@<X8>, float a7@<S0>)
{
  unint64_t v10 = *((void *)this + 6) - *((void *)this + 5);
  unint64_t v11 = v10 >> 2;
  unint64_t v12 = *((void *)this + 3) - *((void *)this + 2);
  if (a4 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (float *)((char *)this + 4680);
    do
    {
      uint64_t v15 = a5;
      unint64_t v16 = a2;
      uint64_t v17 = v14;
      if (a5 >= 1)
      {
        do
        {
          LOBYTE(a7) = *v16;
          a7 = (float)LODWORD(a7);
          *v17++ = a7;
          v16 += a4;
          --v15;
        }
        while (v15);
      }
      ++v13;
      v14 += a5;
      ++a2;
    }
    while (v13 != a4);
  }
  unint64_t v40 = v12 >> 2;
  if ((int)(v12 >> 2) >= 1)
  {
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = (v12 >> 2);
    uint64_t v21 = v10 & 0x3FFFFFFFCLL;
    do
    {
      if ((int)v11 >= 1)
      {
        uint64_t v22 = 0;
        do
        {
          apple::vision::libraries::facecore::FaceCoreContext::getFaceVertices(a3, &__p);
          uint64_t v23 = *((void *)__p + 2 * *(int *)(*((void *)this + 5) + v22));
          unsigned int v44 = __p;
          operator delete(__p);
          apple::vision::libraries::facecore::FaceCoreContext::getFaceVertices(a3, &__p);
          uint64_t v24 = *((void *)__p + 2 * *(int *)(*((void *)this + 5) + v22) + 1);
          unsigned int v44 = __p;
          operator delete(__p);
          *((void *)this + v18 + (int)v22 + 9) = v23;
          *((void *)this + v18 + (int)v22 + 10) = v24;
          *((double *)this + v18 + (int)v22 + 11) = (double)*(int *)(*((void *)this + 2) + 4 * v19);
          *((void *)this + v18 + (int)v22 + 12) = 0;
          v22 += 4;
        }
        while (v21 != v22);
      }
      ++v19;
      v18 += 4 * v11;
    }
    while (v19 != v20);
  }
  LODWORD(__p) = -1;
  apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor::extract(*((apple::vision::libraries::facecore::mod::facerecognition::GradientLocalDescriptor **)this + 1), (const float *)this + 1170, a4, a5, (double *)this + 9, v40 * v11, (unsigned __int8 *)this + 70216, (int *)&__p);
  double v26 = (apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing *)*((void *)this + 8);
  if (v26)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureProcessing::transformF(v26, (unsigned __int8 *)this + 70216, 72, 128, 1, (double **)a6, v25);
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    *(void *)(a6 + 16) = 0;
    uint64_t v29 = (void *)(a6 + 16);
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    do
    {
      LOBYTE(v25) = *((unsigned char *)this + v28 + 70216);
      double v30 = (double)v25;
      if ((unint64_t)v27 >= *v29)
      {
        uint64_t v32 = *(double **)a6;
        uint64_t v33 = ((uint64_t)v27 - *(void *)a6) >> 3;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptor>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = *v29 - (void)v32;
        if (v35 >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a6 + 16, v36);
          uint64_t v32 = *(double **)a6;
          unint64_t v27 = *(double **)(a6 + 8);
        }
        else
        {
          int v37 = 0;
        }
        unsigned int v38 = (double *)&v37[8 * v33];
        double *v38 = v30;
        uint64_t v31 = v38 + 1;
        while (v27 != v32)
        {
          unint64_t v39 = *((void *)v27-- - 1);
          unint64_t v25 = v39;
          *((void *)v38-- - 1) = v39;
        }
        *(void *)a6 = v38;
        *(void *)(a6 + 8) = v31;
        *(void *)(a6 + 16) = &v37[8 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        double *v27 = v30;
        uint64_t v31 = v27 + 1;
      }
      *(void *)(a6 + 8) = v31;
      ++v28;
      unint64_t v27 = v31;
    }
    while (v28 != 9216);
  }
}

void sub_1DBED898C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DBED8A0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

#error "1DBED8A28: too big function (funcsize=0)"

void apple::vision::libraries::facecore::processing::tracking::KeypointTracker::~KeypointTracker(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this)
{
  for (uint64_t i = 1472; i != -640; i -= 1056)
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::~KPointDescriptorArray((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + i));
  for (uint64_t j = 352; j != 224; j -= 64)
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + j));
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + 72));
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + 8));
}

apple::vision::libraries::facecore::processing::tracking::KeypointTracker *apple::vision::libraries::facecore::processing::tracking::KeypointTracker::KeypointTracker(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0x100000001;
  *((void *)this + 28) = 0x3FF0000000000000;
  *((void *)this + 29) = 0x100000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 15) = _Q1;
  *((_OWORD *)this + 17) = _Q1;
  uint64_t v7 = 288;
  *((_OWORD *)this + 16) = _Q1;
  do
  {
    size_t v8 = (_OWORD *)((char *)this + v7);
    *size_t v8 = 0uLL;
    v8[1] = 0uLL;
    v7 += 64;
  }
  while (v7 != 416);
  for (uint64_t i = 0; i != 2112; i += 1056)
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::KPointDescriptorArray((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + i + 416));
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::KRigidTransformation((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + 2528));
  *(_DWORD *)this = 0;
  return this;
}

void sub_1DBF02620(_Unwind_Exception *a1)
{
  for (uint64_t i = 1472; i != -640; i -= 1056)
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::~KPointDescriptorArray((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)(v2 + i));
  for (uint64_t j = 352; j != 224; j -= 64)
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)(v2 + j));
  apple::vision::libraries::facecore::Face::~Face(v3);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage(v1);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTracker::init(uint64_t a1, const image *a2, int *a3)
{
  apple::vision::libraries::facecore::FaceInternal::operator=(a1 + 72, (uint64_t)a3);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::generateCropWithFace(a1 + 8, a3);

  apple::vision::libraries::facecore::processing::tracking::KeypointTracker::initializeFrameDataAtIndex((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)a1, 0, a2, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)(a1 + 8));
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTracker::initializeFrameDataAtIndex(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this, uint64_t a2, const image *a3, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a4)
{
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)v12, a3, a4);
  uint64_t v6 = (apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + 64 * a2 + 288);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::takeOwnershipToCropBuffer(v6, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)v12);
  std::string __p = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::detectKeypointInCrop((uint64_t)v6, 3, &__p);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::KPointDescriptorArray((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)v13);
  uint64_t v7 = (apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)((char *)this + 1056 * a2 + 416);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::clear(v7);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::computeDescriptor((unsigned int *)v6, (uint64_t *)&__p, 3, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)v13);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::nonMaxSuppression((apple::vision::libraries::facecore::processing::tracking::keypointtracker *)v13, v6, v7, v8);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::~KPointDescriptorArray((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)v13);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)v12);
}

void sub_1DBF027CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void apple::vision::libraries::facecore::processing::tracking::KeypointTracker::track(int32x2_t *this, const image *a2, int32x2_t *a3)
{
  this[27].i32[0] = 1;
  memset(v21, 0, 32);
  uint64_t v6 = (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&this[1];
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::generateCropFromPreviousCrop((int32x2_t *)v21, this + 1, a2, 0x28u);
  apple::vision::libraries::facecore::processing::tracking::KeypointTracker::initializeFrameDataAtIndex((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)this, 1, a2, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)v21);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::MatchingModule((apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *)v19, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)&this[52], (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)&this[184], (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&this[36], (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&this[44]);
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::matchElements((apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *)v19);
  if (v20[6]
    && (apple::vision::libraries::facecore::processing::tracking::keypointtracker::ransac((uint64_t)v20, (uint64_t)__p),
        apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::isRigid((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *)&this[316])))
  {
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::takeOwnershipToCropBuffer((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&this[36], (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&this[44]);
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray::swap((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)&this[52], (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KPointDescriptorArray *)&this[184]);
    long long v13 = 0u;
    long long v14 = 0u;
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectCrop((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *)&this[316], v6, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v13);
    long long v9 = v13;
    long long v10 = v14;
    long long v11 = v15;
    long long v12 = v16;
    if ((v14 & 0x80000000) != 0 || (DWORD1(v10) & 0x80000000) != 0 || (int)v9 + (int)v14 >= a2->var1)
    {
      apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v9);
    }
    else
    {
      int v7 = DWORD1(v9) + DWORD1(v10);
      int var2 = a2->var2;
      apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v9);
      if (v7 < var2) {
        apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::copyCoordinates(v6, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v13);
      }
    }
    apple::vision::libraries::facecore::processing::tracking::KeypointTracker::updateTrackedFaceCoordinates((apple::vision::libraries::facecore::processing::tracking::KeypointTracker *)this, (apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *)&this[316], a3);
    apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&v13);
  }
  else
  {
    this[27].i32[0] = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::~MatchingModule((apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *)v19);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)v21);
}

void sub_1DBF029D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)&a17);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule::~MatchingModule((apple::vision::libraries::facecore::processing::tracking::keypointtracker::MatchingModule *)&a29);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage::~KCropImage((apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *)(v29 - 144));
  _Unwind_Resume(a1);
}

int32x2_t apple::vision::libraries::facecore::processing::tracking::KeypointTracker::updateTrackedFaceCoordinates(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *a2, int32x2_t *a3)
{
  *((_DWORD *)this + 54) = 1;
  unsigned int v5 = (int)((double)a3->i32[0] * 0.5);
  *((_DWORD *)this + 18) = v5;
  *(int32x2_t *)((char *)this + 100) = vadd_s32(a3[2], vdup_n_s32(v5));
  float32x2_t v6 = vcvt_f32_s32(*(int32x2_t *)((char *)this + 76));
  float32x2_t v10 = vcvt_f32_s32(*(int32x2_t *)((char *)this + 84));
  uint64_t v11 = (uint64_t)v6;
  float32x2_t v9 = vcvt_f32_s32(*(int32x2_t *)((char *)this + 92));
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPoint((float *)a2, (float *)&v11, (float *)&v11);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPoint((float *)a2, (float *)&v10, (float *)&v10);
  apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPoint((float *)a2, (float *)&v9, (float *)&v9);
  v7.i64[0] = v11;
  *(float32x2_t *)&v7.u32[2] = v10;
  *(int32x4_t *)((char *)this + 76) = vcvtq_s32_f32(v7);
  int32x2_t result = vcvt_s32_f32(v9);
  *(int32x2_t *)((char *)this + 92) = result;
  return result;
}

uint64_t apple::vision::libraries::facecore::processing::tracking::KeypointTracker::getCurrentCrop(apple::vision::libraries::facecore::processing::tracking::KeypointTracker *this)
{
  return (uint64_t)this + 8;
}

#error "1DBF02AE8: too big function (funcsize=0)"

void apple::vision::libraries::facecore::mod::smileandblink::SmileDetector::detectSmile(apple::vision::libraries::facecore::mod::smileandblink::SmileDetector *this, image *a2, apple::vision::libraries::facecore::Face *a3)
{
  int var1 = a2->var1;
  int var0 = (int)a2[1].var0;
  BOOL v5 = __OFSUB__(var0, var1);
  int v6 = var0 - var1;
  float v7 = (float)v6;
  float v8 = -(float)v6;
  if (v6 < 0 == v5) {
    float v8 = (float)v6;
  }
  if (v8 > 0.0)
  {
    int v9 = HIDWORD(a2->var0) - a2->var2;
    if (v9 < 0) {
      int v9 = a2->var2 - HIDWORD(a2->var0);
    }
    atanf(v7 / (float)v9);
  }
  operator new();
}

void sub_1DBF2C0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "1DBF2C13C: too big function (funcsize=0)"

double apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::KRigidTransformation(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *this)
{
  *(void *)&double result = 1065353216;
  *(_OWORD *)this = xmmword_1DBFF6A70;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0xBF80000000000000;
  return result;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPoint(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  *a3 = a1[4] + (float)((float)(a1[1] * v3) + (float)(*a1 * *a2));
  float result = a1[5] + (float)((float)(v3 * a1[3]) + (float)(a1[2] * *a2));
  a3[1] = result;
  return result;
}

float apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectPointReverse(float *a1, float *a2, float *a3)
{
  float v3 = a1[2];
  float v4 = *a2 - a1[4];
  float v5 = sqrtf((float)(v3 * v3) + (float)(*a1 * *a1));
  float v6 = *a1 / v5;
  float v7 = v3 / v5;
  float v8 = a2[1] - a1[5];
  float v9 = (float)((float)(v7 * v8) + (float)(v6 * v4)) / v5;
  float result = (float)((float)(v6 * v8) - (float)(v7 * v4)) / v5;
  *a3 = v9;
  a3[1] = result;
  return result;
}

int32x2_t apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::projectCrop(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *this, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a2, apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KCropImage *a3)
{
  int v6 = *((_DWORD *)a2 + 4);
  int v7 = *((_DWORD *)a2 + 5);
  float v8 = (float)v6;
  float v9 = (float)(*(_DWORD *)a2 + v6);
  int v10 = *((_DWORD *)a2 + 1) + v7;
  float v11 = *((float *)this + 1);
  float v12 = v11 * (float)v7;
  float v13 = v12 + (float)(*(float *)this * v8);
  v3.i32[0] = *((_DWORD *)this + 2);
  float v14 = *((float *)this + 3);
  float v15 = v14 * (float)v7;
  v4.i32[0] = *((_DWORD *)this + 4);
  float v16 = *((float *)this + 5);
  float v17 = v12 + (float)(*(float *)this * v9);
  float v18 = v11 * (float)v10;
  float v19 = v18 + (float)(*(float *)this * v9);
  float v20 = v14 * (float)v10;
  float v21 = v18 + (float)(*(float *)this * v8);
  v22.f32[0] = v4.f32[0] + v13;
  float32_t v23 = v16 + (float)(v15 + (float)(v3.f32[0] * (float)(v4.f32[0] + v13)));
  v24.f32[0] = v4.f32[0] + v17;
  float32_t v25 = v16 + (float)(v15 + (float)(v3.f32[0] * (float)(v4.f32[0] + v17)));
  v26.f32[0] = v4.f32[0] + v19;
  float32_t v27 = v16 + (float)(v20 + (float)(v3.f32[0] * (float)(v4.f32[0] + v19)));
  v28.f32[0] = v4.f32[0] + v21;
  float32_t v29 = v16 + (float)(v20 + (float)(v3.f32[0] * (float)(v4.f32[0] + v21)));
  v30.f32[0] = v24.f32[0] - v28.f32[0];
  *(float *)v5.i32 = (float)((float)(v22.f32[0] - v26.f32[0]) * (float)(v25 - v29))
                   - (float)((float)(v23 - v27) * (float)(v24.f32[0] - v28.f32[0]));
  float v31 = (float)(v24.f32[0] * v29) - (float)(v25 * v28.f32[0]);
  v32.f32[0] = -(float)((float)(v22.f32[0] - v26.f32[0]) * v31);
  v30.f32[1] = v25 - v29;
  v32.f32[1] = -(float)((float)(v23 - v27) * v31);
  float32x2_t v33 = vdiv_f32(vmla_n_f32(v32, v30, (float)(v22.f32[0] * v27) - (float)(v23 * v26.f32[0])), (float32x2_t)vdup_lane_s32(v5, 0));
  v3.f32[0] = sqrtf((float)((float)(v23 - v27) * (float)(v23 - v27))+ (float)((float)(v22.f32[0] - v26.f32[0]) * (float)(v22.f32[0] - v26.f32[0])));
  v4.f32[0] = sqrtf((float)((float)(v25 - v29) * (float)(v25 - v29)) + (float)(v30.f32[0] * v30.f32[0]));
  v30.f32[0] = (float)(v3.f32[0] + v4.f32[0]) * 0.25;
  v3.f32[0] = v30.f32[0] / v3.f32[0];
  v4.f32[0] = v30.f32[0] / v4.f32[0];
  v26.f32[1] = v27;
  v22.f32[1] = v23;
  float32x2_t v34 = vsub_f32(v26, v22);
  float32x2_t v35 = vmls_lane_f32(v33, v34, v3, 0);
  v28.f32[1] = v29;
  v24.f32[1] = v25;
  float32x2_t v36 = vsub_f32(v28, v24);
  float32x2_t v37 = vmls_lane_f32(v33, v36, v4, 0);
  float32x2_t v38 = vmla_n_f32(v33, v34, v3.f32[0]);
  float32x2_t v39 = vmla_n_f32(v33, v36, v4.f32[0]);
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v45 = vaddq_f64(vcvtq_f64_f32(v35), _Q3);
  float64x2_t v46 = vaddq_f64(vcvtq_f64_f32(v37), _Q3);
  float64x2_t v47 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v46, v45), (int8x16_t)v45, (int8x16_t)v46);
  float64x2_t v48 = vaddq_f64(vcvtq_f64_f32(v38), _Q3);
  float64x2_t v49 = vaddq_f64(vcvtq_f64_f32(v39), _Q3);
  float64x2_t v50 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v49, v48), (int8x16_t)v48, (int8x16_t)v49);
  *(int32x2_t *)&v47.f64[0] = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v50, v47), (int8x16_t)v47, (int8x16_t)v50)));
  *((void *)a3 + 2) = *(void *)&v47.f64[0];
  float64x2_t v51 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v45, v46), (int8x16_t)v45, (int8x16_t)v46);
  float64x2_t v52 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v48, v49), (int8x16_t)v48, (int8x16_t)v49);
  v53.i64[0] = SLODWORD(v47.f64[0]);
  v53.i64[1] = SHIDWORD(v47.f64[0]);
  int32x2_t result = vmovn_s64(vcvtq_s64_f64(vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v51, v52), (int8x16_t)v51, (int8x16_t)v52), vcvtq_f64_s64(v53))));
  *(int32x2_t *)a3 = result;
  return result;
}

BOOL apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation::isRigid(apple::vision::libraries::facecore::processing::tracking::keypointtracker::datastructures::KRigidTransformation *this)
{
  BOOL result = 0;
  float v3 = *(float *)this;
  float v4 = *((float *)this + 2);
  double v5 = (float)((float)(v4 * v4) + (float)(v3 * v3));
  if (v5 < 1.1 && v5 > 0.9)
  {
    BOOL result = 0;
    float v6 = *((float *)this + 1);
    float v7 = *((float *)this + 3);
    double v8 = (float)((float)(v7 * v7) + (float)(v6 * v6));
    if (v8 < 1.1 && v8 > 0.9)
    {
      double v9 = (float)((float)(v4 * v7) + (float)(v6 * v3));
      return v9 > -0.1 && v9 < 0.1;
    }
  }
  return result;
}

void apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth::EyesAndMouth(apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth *this)
{
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(2, 0);
  *((void *)this + 2) = &apple::vision::libraries::facecore::mod::keypoints::firstEyePosPcaMean;
  queue = (uint64_t)global_queue;
  *((void *)this + 3) = &apple::vision::libraries::facecore::mod::keypoints::firstEyePosPcaModes;
  *((void *)this + 4) = &apple::vision::libraries::facecore::mod::keypoints::firstEyePosInvVar;
  *((void *)this + 5) = &apple::vision::libraries::facecore::mod::keypoints::firstEyeNegPcaMean;
  *((void *)this + 6) = &apple::vision::libraries::facecore::mod::keypoints::firstEyeNegPcaModes;
  *((void *)this + 7) = &apple::vision::libraries::facecore::mod::keypoints::firstEyeNegInvVar;
  int v3 = apple::vision::libraries::facecore::mod::keypoints::firstEyeSamplingStep;
  int v4 = apple::vision::libraries::facecore::mod::keypoints::firstEyePatchWidth;
  *((_DWORD *)this + 18) = apple::vision::libraries::facecore::mod::keypoints::firstEyePatchHeight;
  *((_DWORD *)this + 19) = v3;
  *((_DWORD *)this + 16) = apple::vision::libraries::facecore::mod::keypoints::firstEyePosPcaDim;
  *((_DWORD *)this + 17) = v4;
  *((void *)this + 10) = apple::vision::libraries::facecore::mod::keypoints::firstEyeCenter;
  *((void *)this + 11) = &apple::vision::libraries::facecore::mod::keypoints::secondEyePosPcaMean;
  *((void *)this + 12) = &apple::vision::libraries::facecore::mod::keypoints::secondEyePosPcaModes;
  *((void *)this + 13) = &apple::vision::libraries::facecore::mod::keypoints::secondEyePosInvVar;
  *((void *)this + 14) = &apple::vision::libraries::facecore::mod::keypoints::secondEyeNegPcaMean;
  *((void *)this + 15) = &apple::vision::libraries::facecore::mod::keypoints::secondEyeNegPcaModes;
  *((void *)this + 16) = &apple::vision::libraries::facecore::mod::keypoints::secondEyeNegInvVar;
  int v5 = apple::vision::libraries::facecore::mod::keypoints::secondEyeSamplingStep;
  int v6 = apple::vision::libraries::facecore::mod::keypoints::secondEyePatchWidth;
  *((_DWORD *)this + 36) = apple::vision::libraries::facecore::mod::keypoints::secondEyePatchHeight;
  *((_DWORD *)this + 37) = v5;
  *((_DWORD *)this + 34) = apple::vision::libraries::facecore::mod::keypoints::secondEyePosPcaDim;
  *((_DWORD *)this + 35) = v6;
  *((void *)this + 19) = apple::vision::libraries::facecore::mod::keypoints::secondEyeCenter;
  operator new();
}

void sub_1DBF546DC(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10B1C403158A46BLL);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth::~EyesAndMouth(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::~KeypointLocalization_U8(v2);
    MEMORY[0x1E0196D10]();
  }
  int v3 = this[1];
  if (v3)
  {
    apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8::~KeypointLocalization_U8(v3);
    MEMORY[0x1E0196D10]();
  }
}

void localizeEyes(const apple::vision::libraries::facecore::mod::Image *a1, int *a2, int *a3, int *a4, int *a5, apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *a6, apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 *a7)
{
}

void sub_1DBF549E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z12localizeEyesRKN5apple6vision9libraries8facecore3mod5ImageERiS7_S7_S7_PNS3_9keypoints23KeypointLocalization_U8ESA__block_invoke(void *a1, uint64_t a2)
{
  return (***(uint64_t (****)(void, void, void, void, uint64_t, uint64_t))(a1[6] + 8 * a2))(*(void *)(a1[6] + 8 * a2), a1[7], *(unsigned int *)(a1[8] + 4 * a2), *(unsigned int *)(a1[9] + 4 * a2), *(void *)(*(void *)(a1[4] + 8) + 24) + 4 * a2, *(void *)(*(void *)(a1[5] + 8) + 24) + 4 * a2);
}

void apple::vision::libraries::facecore::mod::keypoints::EyesAndMouth::localize(apple::vision::libraries::facecore::mod::keypoints::KeypointLocalization_U8 **this, const apple::vision::libraries::facecore::mod::Image *a2, int *a3, int *a4, int *a5, int *a6)
{
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::FaceprintExtractor(apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor *this, apple::vision::libraries::facecore::FaceCoreContext *a2)
{
  *((void *)this + 2) = a2;
  operator new();
}

void sub_1DBF54AE8(_Unwind_Exception *a1)
{
  MEMORY[0x1E0196D10](v1, 0x10A0C40835B8184);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::loadModelFile(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination **a1)
{
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::~FaceprintExtractor(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination **this)
{
  uint64_t v1 = *this;
  if (v1)
  {
    apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::~FeatureCombination(v1);
    MEMORY[0x1E0196D10]();
  }
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::ExtractFaceprint(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)(a7 + 72) = 0;
  *(void *)(a7 + 80) = 0;
  *(void *)(a7 + 88) = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  uint64_t v13 = *(void *)a1;
  apple::vision::libraries::facecore::FaceInternal::FaceInternal((apple::vision::libraries::facecore::Face *)v15, a5);
  apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::extractFaceprint(v13, a2, a3, a4, (uint64_t)v15, *(unsigned __int8 *)(a1 + 8), (unsigned char *)(a7 + 56), a6, &v16);
  float v14 = *(void **)a7;
  if (*(void *)a7)
  {
    *(void *)(a7 + 8) = v14;
    operator delete(v14);
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
  }
  *(_OWORD *)a7 = v16;
  *(void *)(a7 + 16) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)v15);
  *(void *)(a7 + 48) = 0x4018000000000000;
}

void sub_1DBF54C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  apple::vision::libraries::facecore::Face::~Face((apple::vision::libraries::facecore::Face *)va);
  apple::vision::libraries::facecore::processing::extraction::Faceprint::~Faceprint(v2);
  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::GetShapeVertices(apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination **this@<X0>, void *a2@<X8>)
{
  AamObject = (apple::vision::libraries::facecore::mod::aam::AamSearch **)apple::vision::libraries::facecore::mod::facerecognition::FeatureCombination::getAamObject(*this);
  if (AamObject)
  {
    apple::vision::libraries::facecore::mod::aam::AamFeature::GetShapeVertices(AamObject, a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t apple::vision::libraries::facecore::processing::extraction::FaceprintExtractor::setFaceprintExtraction(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

#error "1DBF54CF4: too big function (funcsize=0)"

void sub_1DBF7B814(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_1DBF7B8AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void apple::vision::libraries::facecore::processing::preprocessing::DetailsExtractionImageRotationAndCroppingPreprocessing::performProcessing()
{
  __assert_rtn("performProcessing", "DetailsExtractionImageRotationAndCroppingPreprocessing.h", 22, "context.getDetailsExtractionProcessedFace() == NULL");
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::AamSearch(uint64_t a1)
{
  for (uint64_t i = 0; i != 72; i += 8)
    free(*(void **)(a1 + i));
}

void apple::vision::libraries::facecore::mod::aam::AamSearch::DoSearch(void *a1, uint64_t a2, unsigned char *a3)
{
  int v4 = __cxa_begin_catch(a1);
  if (*a3)
  {
    int v5 = (const char *)(*(uint64_t (**)(void *))(*(void *)v4 + 16))(v4);
    printf("! (%s)", v5);
  }

  __cxa_end_catch();
}

void apple::vision::libraries::facecore::mod::facerecognition::DenseGradientFeature::extractFaceprintPart()
{
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFRelease(CFTypeRef cf)
{
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1F40DA8E8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1F40DFE40](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E438](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7D0]();
}

{
  return MEMORY[0x1F417E7E0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x1F417E930]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x1F40CA498](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int dgesv_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublereal *__b, __CLPK_integer *__ldb, __CLPK_integer *__info)
{
  return MEMORY[0x1F40D1720](__n, __nrhs, __a, __lda, __ipiv, __b, __ldb, __info);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB0](size, type_id);
}

void *__cdecl memccpy(void *__dst, const void *__src, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD0](__dst, __src, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_mmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_mtransD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vclrD(double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfixu8(const float *__A, vDSP_Stride __IA, unsigned __int8 *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfltu8(const unsigned __int8 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsbsm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdivD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmaD(const double *__A, vDSP_Stride __IA, const double *__B, const double *__C, vDSP_Stride __IC, double *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageMatrixMultiply_ARGB8888ToPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[4], int32_t divisor, const int16_t pre_bias[4], int32_t post_bias, vImage_Flags flags)
{
  return MEMORY[0x1F40D2A60](src, dest, matrix, *(void *)&divisor, pre_bias, *(void *)&post_bias, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2C78](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, float angleInRadians, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2CB8](src, dest, tempBuffer, backColor, *(void *)&flags, angleInRadians);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1F40D2D08](src, dest, tempBuffer, *(void *)&flags);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvpowf(float *a1, const float *a2, const float *a3, const int *a4)
{
}