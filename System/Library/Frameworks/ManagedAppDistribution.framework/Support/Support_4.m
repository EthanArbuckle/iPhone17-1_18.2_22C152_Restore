uint64_t sub_1003111C0()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void *);
  uint64_t v6;

  v1 = v0[14];
  v2 = sub_100320338((uint64_t)sub_1003338B0, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_1003112AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v5 = type metadata accessor for Logger();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  v3[2] = a3;
  v3[11] = type metadata accessor for SQLiteConnection();
  v3[12] = sub_100010098(&qword_100660680, (void (*)(uint64_t))type metadata accessor for SQLiteConnection);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003113D4, v7, v6);
}

uint64_t sub_1003113D4()
{
  sub_10031735C();
  *(void *)(v0 + 104) = 0;
  return _swift_task_switch(sub_100311460, 0, 0);
}

uint64_t sub_100311460()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 112) = *(void *)(v0 + 104);
  *(void *)(v0 + 120) = v1;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 128) = v2;
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 16) = v0 + 16;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003117EC, v5, v4);
}

uint64_t sub_100311508()
{
  uint64_t v20 = v0;
  static Logger.sql.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v3 = swift_slowAlloc();
    v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    *(void *)(v0 + 24) = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v4 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v4;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to initialize %{public}s database: %{public}@", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
    uint64_t v5 = (uint64_t *)(v0 + 16);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    uint64_t v5 = (uint64_t *)(v0 + 56);
  }
  uint64_t v9 = *v5;
  *(void *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = v9;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 40);
  *(void *)(v10 + 16) = v0 + 16;
  *(_OWORD *)(v10 + 24) = v11;
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1003117EC, v13, v12);
}

uint64_t sub_1003117EC()
{
  uint64_t v1 = v0[14];
  os_log_type_t v2 = sub_100320598((uint64_t)sub_1003336CC, v0[16]);
  v0[17] = v1;
  if (v1)
  {
    swift_task_dealloc();
    return _swift_task_switch(sub_1003342C4, 0, 0);
  }
  else
  {
    uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void *))v0[1];
    return v4(v3);
  }
}

uint64_t sub_1003118D8@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

uint64_t sub_100311910(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_1003129B0(a1, a2, (uint64_t (*)(uint64_t))sub_100416498);
}

uint64_t sub_100311928(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_10031364C(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_10024204C);
}

uint64_t sub_100311954(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_1003124E0(a1, a2, (uint64_t (*)(uint64_t))sub_100416498);
}

uint64_t sub_10031196C(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100312CF8(a1, a2, (uint64_t (*)(uint64_t))sub_100416498);
}

uint64_t sub_100311984(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_10031364C(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_100242240);
}

uint64_t sub_1003119B0@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (void (*)(void *, uint64_t))sub_100242394, (uint64_t (*)(void))&type metadata accessor for DDMPurchaseMethod, a3);
}

uint64_t sub_1003119F0@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (void (*)(void *, uint64_t))sub_100242640, (uint64_t (*)(void))&type metadata accessor for URL, a3);
}

uint64_t sub_100311A30(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_100242914);
}

uint64_t sub_100311A5C@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (void (*)(void *, uint64_t))sub_1002429E4, (uint64_t (*)(void))&type metadata accessor for Platform, a3);
}

uint64_t sub_100311A9C@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (void (*)(void *, uint64_t))sub_100242CB8, (uint64_t (*)(void))&type metadata accessor for ManagedAppDeclaration.InstallBehavior.LicenseEnum, a3);
}

uint64_t sub_100311ADC@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (void (*)(void *, uint64_t))sub_100243034, (uint64_t (*)(void))&type metadata accessor for UUID, a3);
}

uint64_t sub_100311B1C(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v3, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v11);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_10065BC40);
  if (v10 == 1)
  {
    uint64_t v5 = 8;
  }
  else
  {
    sub_10001733C((uint64_t)v9, (uint64_t)v8, (uint64_t *)&unk_10065C9C0);
    v7[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v7[0] = swift_allocObject();
    sub_100017238((uint64_t)v8, v7[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = sub_100242F64(v7);
    swift_release();
    sub_100014524((uint64_t)v7);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v11, &qword_10065BC40);
  return v5;
}

uint64_t sub_100311C88@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100312038(a1, a2, (void (*)(void *__return_ptr, os_unfair_lock_s *, uint64_t))sub_100313DC8, (void (*)(void *, uint64_t))sub_100243308, (uint64_t (*)(void))&type metadata accessor for ManagedAppStatus.State, a3);
}

uint64_t sub_100311CC8@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100312038(a1, a2, (void (*)(void *__return_ptr, os_unfair_lock_s *, uint64_t))sub_100313DC8, (void (*)(void *, uint64_t))sub_1002435B4, (uint64_t (*)(void))&type metadata accessor for ManagedAppStatus.UpdateState, a3);
}

uint64_t sub_100311D08(char a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313DC8(v3, a1, v11);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_10065BC40);
  uint64_t v5 = 0;
  if (v10 != 1)
  {
    sub_10001733C((uint64_t)v9, (uint64_t)v8, (uint64_t *)&unk_10065C9C0);
    v7[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v7[0] = swift_allocObject();
    sub_100017238((uint64_t)v8, v7[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = sub_100243860(v7);
    swift_release();
    sub_100014524((uint64_t)v7);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v11, &qword_10065BC40);
  return v5;
}

uint64_t sub_100311E5C(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100311E8C(a1, a2, (void (*)(void *__return_ptr, os_unfair_lock_s *, uint64_t))sub_100313DC8);
}

uint64_t sub_100311E74(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100311E8C(a1, a2, (void (*)(void *__return_ptr, os_unfair_lock_s *, uint64_t))sub_100313EF8);
}

uint64_t sub_100311E8C(uint64_t a1, os_unfair_lock_s *a2, void (*a3)(void *__return_ptr, os_unfair_lock_s *, uint64_t))
{
  uint64_t v5 = a2 + 4;
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  a3(v13, v5, a1);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v13, (uint64_t)v11, &qword_10065BC40);
  uint64_t v7 = 0;
  if (v12 != 1)
  {
    sub_10001733C((uint64_t)v11, (uint64_t)v10, (uint64_t *)&unk_10065C9C0);
    v9[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v9[0] = swift_allocObject();
    sub_100017238((uint64_t)v10, v9[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v7 = sub_100241F7C(v9);
    swift_release();
    sub_100014524((uint64_t)v9);
    sub_10001729C((uint64_t)v10, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v13, &qword_10065BC40);
  return v7;
}

uint64_t sub_100311FF8@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100312038(a1, a2, (void (*)(void *__return_ptr, os_unfair_lock_s *, uint64_t))sub_100313EF8, (void (*)(void *, uint64_t))sub_100242640, (uint64_t (*)(void))&type metadata accessor for URL, a3);
}

uint64_t sub_100312038@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, void (*a3)(void *__return_ptr, os_unfair_lock_s *, uint64_t)@<X2>, void (*a4)(void *, uint64_t)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  long long v11 = a2 + 4;
  uint64_t v12 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  a3(v21, v11, a1);
  os_unfair_lock_unlock(v12);
  sub_100017238((uint64_t)v21, (uint64_t)v19, &qword_10065BC40);
  if (v20 == 1)
  {
    uint64_t v13 = a5(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a6, 1, 1, v13);
  }
  else
  {
    sub_10001733C((uint64_t)v19, (uint64_t)v18, (uint64_t *)&unk_10065C9C0);
    v17[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v17[0] = swift_allocObject();
    sub_100017238((uint64_t)v18, v17[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v14 = JSONDecoder.init()();
    a4(v17, v14);
    swift_release();
    sub_100014524((uint64_t)v17);
    sub_10001729C((uint64_t)v18, (uint64_t *)&unk_10065C9C0);
    uint64_t v15 = a5(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a6, 0, 1, v15);
  }
  return sub_10001729C((uint64_t)v21, &qword_10065BC40);
}

uint64_t sub_100312228@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0, (void (*)(void *, uint64_t))sub_100243034, (uint64_t (*)(void))&type metadata accessor for UUID, a3);
}

uint64_t sub_100312268(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (uint64_t (*)(void *, uint64_t))sub_100243B04);
}

uint64_t sub_100312294(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (uint64_t (*)(void *, uint64_t))sub_100242914);
}

uint64_t sub_1003122C0(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v3, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v11);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_10065BC40);
  if (v10 == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    sub_10001733C((uint64_t)v9, (uint64_t)v8, (uint64_t *)&unk_10065C9C0);
    v7[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v7[0] = swift_allocObject();
    sub_100017238((uint64_t)v8, v7[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = sub_100243BE0(v7);
    swift_release();
    sub_100014524((uint64_t)v7);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v11, &qword_10065BC40);
  return v5;
}

uint64_t sub_100312458(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100312E74(a1, a2, sub_100243CBC);
}

uint64_t sub_100312470(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100312CF8(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578);
}

uint64_t sub_100312488@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (void (*)(void *, uint64_t))sub_100242640, (uint64_t (*)(void))&type metadata accessor for URL, a3);
}

uint64_t sub_1003124C8(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_1003124E0(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578);
}

uint64_t sub_1003124E0(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, a3, v13);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v13, (uint64_t)v11, &qword_10065BC40);
  if (v12 == 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    sub_10001733C((uint64_t)v11, (uint64_t)v10, (uint64_t *)&unk_10065C9C0);
    v9[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v9[0] = swift_allocObject();
    sub_100017238((uint64_t)v10, v9[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v7 = sub_10024209C(v9);
    swift_release();
    sub_100014524((uint64_t)v9);
    sub_10001729C((uint64_t)v10, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v13, &qword_10065BC40);
  return v7;
}

uint64_t sub_100312650@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (void (*)(void *, uint64_t))sub_100243CF8, (uint64_t (*)(void))&type metadata accessor for AppInstallRequestType, a3);
}

uint64_t sub_100312690(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_1003129B0(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578);
}

uint64_t sub_1003126A8(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v3, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v12);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    uint64_t v5 = 5;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v6 = JSONDecoder.init()();
    uint64_t v5 = sub_100243FA4(v8, v6);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v12, &qword_10065BC40);
  return v5;
}

uint64_t sub_100312814@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, (uint64_t (*)(uint64_t))sub_1004B3BC0, v12);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = xmmword_1005AA780;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1002440CC(v8, (_OWORD *)a3);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
  return sub_10001729C((uint64_t)v12, &qword_10065BC40);
}

uint64_t sub_100312998(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_1003129B0(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0);
}

uint64_t sub_1003129B0(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, a3, v13);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v13, (uint64_t)v11, &qword_10065BC40);
  uint64_t v7 = 0;
  if (v12 != 1)
  {
    sub_10001733C((uint64_t)v11, (uint64_t)v10, (uint64_t *)&unk_10065C9C0);
    v9[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v9[0] = swift_allocObject();
    sub_100017238((uint64_t)v10, v9[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v7 = sub_100241F7C(v9);
    swift_release();
    sub_100014524((uint64_t)v9);
    sub_10001729C((uint64_t)v10, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v13, &qword_10065BC40);
  return v7;
}

uint64_t sub_100312B1C(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v3, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v12);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    uint64_t v5 = 4;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v6 = JSONDecoder.init()();
    uint64_t v5 = sub_100244278(v8, v6);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v12, &qword_10065BC40);
  return v5;
}

uint64_t sub_100312C88(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_100243B04);
}

uint64_t sub_100312CB4(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_10031364C(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0, (uint64_t (*)(void *, uint64_t))sub_100243AB4);
}

uint64_t sub_100312CE0(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100312CF8(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0);
}

uint64_t sub_100312CF8(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, a3, v14);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v14, (uint64_t)v12, &qword_10065BC40);
  if (v13 == 1)
  {
    uint64_t v7 = 2;
  }
  else
  {
    sub_10001733C((uint64_t)v12, (uint64_t)v11, (uint64_t *)&unk_10065C9C0);
    v10[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v10[0] = swift_allocObject();
    sub_100017238((uint64_t)v11, v10[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    char v8 = sub_10024216C(v10);
    swift_release();
    sub_100014524((uint64_t)v10);
    sub_10001729C((uint64_t)v11, (uint64_t *)&unk_10065C9C0);
    uint64_t v7 = v8 & 1;
  }
  sub_10001729C((uint64_t)v14, &qword_10065BC40);
  return v7;
}

uint64_t sub_100312E5C(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100312E74(a1, a2, sub_1002444EC);
}

uint64_t sub_100312E74(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(void *, uint64_t))
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v14);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v14, (uint64_t)v12, &qword_10065BC40);
  uint64_t v7 = 0;
  if (v13 != 1)
  {
    sub_10001733C((uint64_t)v12, (uint64_t)v11, (uint64_t *)&unk_10065C9C0);
    v10[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v10[0] = swift_allocObject();
    sub_100017238((uint64_t)v11, v10[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v8 = JSONDecoder.init()();
    uint64_t v7 = a3(v10, v8);
    swift_release();
    sub_100014524((uint64_t)v10);
    sub_10001729C((uint64_t)v11, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v14, &qword_10065BC40);
  return v7;
}

uint64_t sub_100312FE4(char a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_1003140B4(v3, a1, v11);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_10065BC40);
  uint64_t v5 = 0;
  if (v10 != 1)
  {
    sub_10001733C((uint64_t)v9, (uint64_t)v8, (uint64_t *)&unk_10065C9C0);
    v7[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v7[0] = swift_allocObject();
    sub_100017238((uint64_t)v8, v7[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v5 = sub_100241F7C(v7);
    swift_release();
    sub_100014524((uint64_t)v7);
    sub_10001729C((uint64_t)v8, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v11, &qword_10065BC40);
  return v5;
}

uint64_t sub_100313148@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, (uint64_t (*)(uint64_t))sub_1004B3BC0, v18);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v18, (uint64_t)v16, &qword_10065BC40);
  if (v17 == 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 1;
  }
  else
  {
    sub_10001733C((uint64_t)v16, (uint64_t)v15, (uint64_t *)&unk_10065C9C0);
    v14[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v14[0] = swift_allocObject();
    sub_100017238((uint64_t)v15, v14[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100244614(v14, (uint64_t)v19);
    uint64_t v7 = v19[0];
    uint64_t v8 = v20;
    uint64_t v12 = v21;
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    uint64_t v11 = v24;
    swift_release();
    sub_100014524((uint64_t)v14);
    sub_10001729C((uint64_t)v15, (uint64_t *)&unk_10065C9C0);
  }
  uint64_t result = sub_10001729C((uint64_t)v18, &qword_10065BC40);
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v12;
  a3[3] = v9;
  a3[4] = v10;
  a3[5] = v11;
  return result;
}

uint64_t sub_100313310(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0, sub_100244728);
}

uint64_t sub_10031333C@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)&a2[4];
  uint64_t v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, (uint64_t (*)(uint64_t))sub_1004B3BC0, v12);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100244758(v8, a3);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
  return sub_10001729C((uint64_t)v12, &qword_10065BC40);
}

uint64_t sub_1003134B0(uint64_t a1, os_unfair_lock_s *a2)
{
  uint64_t v3 = (uint64_t *)&a2[4];
  uint64_t v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v3, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v12);
  os_unfair_lock_unlock(v4);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    uint64_t v5 = 2;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    int v6 = sub_100244910(v8);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    uint64_t v5 = v6 & 0x1010101;
  }
  sub_10001729C((uint64_t)v12, &qword_10065BC40);
  return v5;
}

uint64_t sub_100313620(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_10031364C(a1, a2, (uint64_t (*)(uint64_t))sub_1001A0578, (uint64_t (*)(void *, uint64_t))sub_100244A30);
}

uint64_t sub_10031364C(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *, uint64_t))
{
  uint64_t v7 = (uint64_t *)&a2[4];
  uint64_t v8 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v7, a1, a3, v17);
  os_unfair_lock_unlock(v8);
  sub_100017238((uint64_t)v17, (uint64_t)v15, &qword_10065BC40);
  if (v16 == 1)
  {
    uint64_t v9 = 2;
  }
  else
  {
    sub_10001733C((uint64_t)v15, (uint64_t)v14, (uint64_t *)&unk_10065C9C0);
    v13[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v13[0] = swift_allocObject();
    sub_100017238((uint64_t)v14, v13[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v10 = JSONDecoder.init()();
    char v11 = a4(v13, v10);
    swift_release();
    uint64_t v9 = v11 & 1;
    sub_100014524((uint64_t)v13);
    sub_10001729C((uint64_t)v14, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v17, &qword_10065BC40);
  return v9;
}

uint64_t sub_1003137C8@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100313808(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0, (void (*)(void *, uint64_t))sub_100242640, (uint64_t (*)(void))&type metadata accessor for URL, a3);
}

uint64_t sub_100313808@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void (*a4)(void *, uint64_t)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  char v11 = (uint64_t *)&a2[4];
  uint64_t v12 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v11, a1, a3, v21);
  os_unfair_lock_unlock(v12);
  sub_100017238((uint64_t)v21, (uint64_t)v19, &qword_10065BC40);
  if (v20 == 1)
  {
    uint64_t v13 = a5(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a6, 1, 1, v13);
  }
  else
  {
    sub_10001733C((uint64_t)v19, (uint64_t)v18, (uint64_t *)&unk_10065C9C0);
    v17[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v17[0] = swift_allocObject();
    sub_100017238((uint64_t)v18, v17[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v14 = JSONDecoder.init()();
    a4(v17, v14);
    swift_release();
    sub_100014524((uint64_t)v17);
    sub_10001729C((uint64_t)v18, (uint64_t *)&unk_10065C9C0);
    uint64_t v15 = a5(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a6, 0, 1, v15);
  }
  return sub_10001729C((uint64_t)v21, &qword_10065BC40);
}

uint64_t sub_1003139F8@<X0>(uint64_t a1@<X0>, os_unfair_lock_s *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)&a2[4];
  int v6 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v5, a1, (uint64_t (*)(uint64_t))sub_1001A0578, v12);
  os_unfair_lock_unlock(v6);
  sub_100017238((uint64_t)v12, (uint64_t)v10, &qword_10065BC40);
  if (v11 == 1)
  {
    *a3 = xmmword_1005A5CE0;
  }
  else
  {
    sub_10001733C((uint64_t)v10, (uint64_t)v9, (uint64_t *)&unk_10065C9C0);
    v8[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v8[0] = swift_allocObject();
    sub_100017238((uint64_t)v9, v8[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100244A80(v8, a3);
    swift_release();
    sub_100014524((uint64_t)v8);
    sub_10001729C((uint64_t)v9, (uint64_t *)&unk_10065C9C0);
  }
  return sub_10001729C((uint64_t)v12, &qword_10065BC40);
}

uint64_t sub_100313B6C(uint64_t a1, os_unfair_lock_s *a2)
{
  return sub_100313B98(a1, a2, (uint64_t (*)(uint64_t))sub_1004B3BC0, sub_100244C14);
}

uint64_t sub_100313B98(uint64_t a1, os_unfair_lock_s *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *, uint64_t))
{
  uint64_t v7 = (uint64_t *)&a2[4];
  uint64_t v8 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_100313D10(v7, a1, a3, v16);
  os_unfair_lock_unlock(v8);
  sub_100017238((uint64_t)v16, (uint64_t)v14, &qword_10065BC40);
  uint64_t v9 = 0;
  if (v15 != 1)
  {
    sub_10001733C((uint64_t)v14, (uint64_t)v13, (uint64_t *)&unk_10065C9C0);
    v12[3] = sub_1000172F8((uint64_t *)&unk_10065C9C0);
    v12[0] = swift_allocObject();
    sub_100017238((uint64_t)v13, v12[0] + 16, (uint64_t *)&unk_10065C9C0);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v10 = JSONDecoder.init()();
    uint64_t v9 = a4(v12, v10);
    swift_release();
    sub_100014524((uint64_t)v12);
    sub_10001729C((uint64_t)v13, (uint64_t *)&unk_10065C9C0);
  }
  sub_10001729C((uint64_t)v16, &qword_10065BC40);
  return v9;
}

uint64_t sub_100313D10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3(a2);
  uint64_t v8 = *a1;
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_100016D20(v6, v7), (v10 & 1) != 0))
  {
    sub_100017238(*(void *)(v8 + 56) + 32 * v9, (uint64_t)a4, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100313D9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100313D10(a1, a2, (uint64_t (*)(uint64_t))sub_100416498, a3);
}

uint64_t sub_100313DC8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = 0x746172616C636564;
  uint64_t v5 = 0xEE0064695F6E6F69;
  switch(a2)
  {
    case 1:
      uint64_t v5 = 0xEF79656B5F6E6F69;
      break;
    case 2:
      uint64_t v5 = 0xE500000000000000;
      uint64_t v4 = 0x6574617473;
      break;
    case 3:
      uint64_t v5 = 0xEC00000065746174;
      uint64_t v4 = 0x735F657461647075;
      break;
    case 4:
      uint64_t v5 = 0xE700000000000000;
      uint64_t v4 = 0x736E6F73616572;
      break;
    default:
      break;
  }
  uint64_t v6 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v7 = sub_100016D20(v4, v5), (v8 & 1) != 0))
  {
    sub_100017238(*(void *)(v6 + 56) + 32 * v7, (uint64_t)a3, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100313EF8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = 0xEA00000000006469;
  uint64_t v5 = 0x5F746E756F636361;
  switch(a2)
  {
    case 1:
      uint64_t v4 = 0xED00006C72755F65;
      uint64_t v5 = 0x726168735F707061;
      break;
    case 2:
      uint64_t v4 = 0xE900000000000064;
      uint64_t v5 = 0x695F656C646E7562;
      break;
    case 3:
      uint64_t v4 = 0xEE006E6F69737265;
      uint64_t v5 = 0x765F656C646E7562;
      break;
    case 4:
      uint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x6C72755F706461;
      break;
    case 5:
      uint64_t v5 = 0xD00000000000001ALL;
      uint64_t v4 = 0x80000001005B73A0;
      break;
    case 6:
      uint64_t v4 = 0x80000001005B84F0;
      uint64_t v5 = 0xD000000000000014;
      break;
    case 7:
      uint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x64695F6D657469;
      break;
    case 8:
      uint64_t v5 = 0x5F6E6F6973726576;
      break;
    default:
      break;
  }
  uint64_t v6 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v7 = sub_100016D20(v5, v4), (v8 & 1) != 0))
  {
    sub_100017238(*(void *)(v6 + 56) + 32 * v7, (uint64_t)a3, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003140B4@<X0>(uint64_t *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0x696669746E656469;
    if (a2 == 1)
    {
      uint64_t v5 = 0xEA00000000007265;
    }
    else
    {
      uint64_t v4 = 0x6E6F6973726576;
      uint64_t v5 = 0xE700000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0xE400000000000000;
    uint64_t v4 = 1701869940;
  }
  uint64_t v6 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v7 = sub_100016D20(v4, v5), (v8 & 1) != 0))
  {
    sub_100017238(*(void *)(v6 + 56) + 32 * v7, (uint64_t)a3, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100314180(void *a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  char v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = a4 + *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v12 = (char *)v10 + *(int *)(v8 + 28);
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v11, v13);
  *char v10 = a1;
  id v14 = a1;
  a2(v10);
  return sub_1003337F8((uint64_t)v10, type metadata accessor for LicenseStorageDatabaseTransaction);
}

uint64_t sub_1003142B4(void *a1, uint64_t a2, void (*a3)(void *))
{
  uint64_t v6 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = a2 + *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v11 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v10, v12);
  *uint64_t v9 = a1;
  id v13 = a1;
  a3(v9);
  return sub_1003337F8((uint64_t)v9, type metadata accessor for LicenseStorageDatabaseTransaction);
}

uint64_t sub_1003143E4()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v96 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v87 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v87 - v12;
  __chkstk_darwin(v11);
  v95 = (char *)&v87 - v14;
  uint64_t v15 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v17 = *(void *)(v16 + 16);
  v93 = v13;
  if (!v17) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_100016D20(0xD000000000000016, 0x80000001005BDCA0);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v100 = 0;
    goto LABEL_9;
  }
  uint64_t v20 = (char *)(*(void *)(v16 + 56) + 2 * v18);
  char v21 = *v20;
  uint64_t v22 = v5;
  uint64_t v23 = v3;
  char v24 = v20[1];
  swift_bridgeObjectRelease();
  LOBYTE(v100) = v21;
  HIBYTE(v100) = v24;
  uint64_t v3 = v23;
  uint64_t v5 = v22;
  uint64_t v2 = v1;
  if (v21)
  {
    uint64_t v92 = 0;
    v25 = 0;
    v96 = 0;
    v26 = 0;
    if ((v100 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  v94 = v15;
  if (v36)
  {
    uint64_t v97 = v3;
    v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v92 = v2;
    v99[0] = v38;
    *(_DWORD *)v37 = 136446210;
    uint64_t v98 = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, v99);
    uint64_t v3 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Checking if %{public}s schema needs to be updated", v37, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v10, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B02C, 0);
  if (!v2)
  {
    uint64_t v97 = v3;
    v41 = v96;
    static Logger.sql.getter();
    v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v91 = v5;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc();
      v90 = (uint8_t *)v4;
      v46 = (uint8_t *)v45;
      v99[0] = swift_slowAlloc();
      *(_DWORD *)v46 = 136446210;
      uint64_t v98 = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, v99);
      uint64_t v2 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s schema is up-to-date", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v47 = (uint64_t)v90;
      ((void (*)(char *))v39)(v96);
    }
    else
    {

      v48 = v41;
      uint64_t v47 = v4;
      v39(v48, v4);
    }
    uint64_t v15 = v94;
    LOBYTE(v100) = 1;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = &v100;
    swift_beginAccess();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_1003341A0;
    *(void *)(v50 + 24) = v49;
    uint64_t v92 = v50;
    v96 = (char *)v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v98 = *v15;
    uint64_t v52 = v98;
    uint64_t *v15 = 0x8000000000000000;
    unint64_t v54 = sub_100016D20(0xD000000000000016, 0x80000001005BDCA0);
    uint64_t v55 = *(void *)(v52 + 16);
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v53;
      if (*(void *)(v52 + 24) < v57)
      {
        sub_100523440(v57, isUniquelyReferenced_nonNull_native);
        uint64_t v52 = v98;
        unint64_t v58 = sub_100016D20(0xD000000000000016, 0x80000001005BDCA0);
        if ((v5 & 1) != (v59 & 1)) {
          goto LABEL_47;
        }
        unint64_t v54 = v58;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        uint64_t *v15 = v52;
        swift_bridgeObjectRelease();
        v60 = (void *)*v15;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v61 = sub_100332FFC();
          sub_10052AE90(v54, 0xD000000000000016, 0x80000001005BDCA0, v61 & 0x101, v60);
        }
        *(unsigned char *)(v60[7] + 2 * v54) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v26 = sub_1003341A0;
        if (v100 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          v62 = sub_100333014;
          goto LABEL_26;
        }
        v25 = sub_100333014;
        uint64_t v4 = v47;
        uint64_t v5 = v91;
        uint64_t v3 = v97;
        if ((v100 & 0x100) == 0)
        {
LABEL_5:
          v88 = v26;
          v89 = v25;
          uint64_t v97 = v3;
          v27 = v95;
          static Logger.sql.getter();
          v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = v4;
            v31 = (uint8_t *)swift_slowAlloc();
            v99[0] = swift_slowAlloc();
            *(_DWORD *)v31 = 136446210;
            v90 = v31 + 4;
            uint64_t v98 = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v31, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v4 = v30;
            swift_slowDealloc();

            v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v95, v30);
          }
          else
          {

            v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v27, v4);
          }
          __chkstk_darwin(v33);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)(&v87 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v88);
            return sub_10023C7B4((uint64_t)v89);
          }
          uint64_t v91 = v5;
          v65 = v93;
          static Logger.sql.getter();
          v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            v90 = (uint8_t *)v4;
            v69 = (uint8_t *)v68;
            uint64_t v70 = swift_slowAlloc();
            v94 = v15;
            v99[0] = v70;
            *(_DWORD *)v69 = 136446210;
            uint64_t v98 = sub_1000143F4(0xD000000000000016, 0x80000001005BDCA0, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s DB contents are prepared for first use after daemon launch", v69, 0xCu);
            swift_arrayDestroy();
            uint64_t v15 = v94;
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v71 = (uint64_t)v90;
            v72 = v65;
          }
          else
          {

            v72 = v65;
            uint64_t v71 = v4;
          }
          v32(v72, v71);
          HIBYTE(v100) = 1;
          uint64_t v73 = swift_allocObject();
          *(void *)(v73 + 16) = &v100;
          swift_beginAccess();
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = sub_1003341A4;
          *(void *)(v74 + 24) = v73;
          char v75 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v98 = *v15;
          uint64_t v76 = v98;
          v77 = v15;
          uint64_t *v15 = 0x8000000000000000;
          unint64_t v79 = sub_100016D20(0xD000000000000016, 0x80000001005BDCA0);
          uint64_t v80 = *(void *)(v76 + 16);
          BOOL v81 = (v78 & 1) == 0;
          uint64_t v82 = v80 + v81;
          if (__OFADD__(v80, v81))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v15) = v78;
            if (*(void *)(v76 + 24) < v82)
            {
              sub_100523440(v82, v75);
              uint64_t v76 = v98;
              unint64_t v83 = sub_100016D20(0xD000000000000016, 0x80000001005BDCA0);
              if ((v15 & 1) == (v84 & 1))
              {
                unint64_t v79 = v83;
LABEL_40:
                uint64_t *v77 = v76;
                swift_bridgeObjectRelease();
                v85 = (void *)*v77;
                swift_bridgeObjectRetain();
                if ((v15 & 1) == 0)
                {
                  __int16 v86 = sub_100333054();
                  sub_10052AE90(v79, 0xD000000000000016, 0x80000001005BDCA0, v86 & 0x101, v85);
                }
                *(unsigned char *)(v85[7] + 2 * v79 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v88);
                sub_10023C7B4((uint64_t)v89);
                v64 = sub_100333014;
                v63 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v75) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v76 = v98;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v26);
        v62 = v25;
LABEL_26:
        sub_10023C7B4((uint64_t)v62);
        v63 = 0;
        v64 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v63);
        return sub_10023C7B4((uint64_t)v64);
      }
    }
    sub_10052B650();
    uint64_t v52 = v98;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_100314FE0()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v88 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v88 - v13;
  __chkstk_darwin(v12);
  v94 = (char *)v88 - v15;
  uint64_t v16 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v0 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v91 = v14;
  v95 = v8;
  if (!v18) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100016D20(5063748, 0xE300000000000000);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v99 = 0;
    goto LABEL_9;
  }
  char v21 = (char *)(*(void *)(v17 + 56) + 2 * v19);
  char v22 = *v21;
  uint64_t v23 = v3;
  char v24 = v21[1];
  swift_bridgeObjectRelease();
  LOBYTE(v99) = v22;
  HIBYTE(v99) = v24;
  uint64_t v3 = v23;
  if (v22)
  {
    uint64_t v25 = 0;
    v26 = 0;
    v95 = 0;
    v27 = 0;
    if ((v99 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  os_log_type_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  v93 = v16;
  if (v37)
  {
    uint64_t v96 = v3;
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v92 = (uint64_t (*)@<X0>(unsigned char *@<X8>))v1;
    v98[0] = v39;
    *(_DWORD *)uint64_t v38 = 136446210;
    uint64_t v97 = sub_1000143F4(5063748, 0xE300000000000000, v98);
    uint64_t v3 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Checking if %{public}s schema needs to be updated", v38, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = (uint64_t)v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v40 = *(void (**)(char *, uint64_t))(v5 + 8);
  v40(v11, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B094, 0);
  if (!v2)
  {
    uint64_t v96 = v3;
    v42 = v95;
    static Logger.sql.getter();
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v92 = 0;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v90 = v4;
      v46 = (uint8_t *)v45;
      v98[0] = swift_slowAlloc();
      *(_DWORD *)v46 = 136446210;
      uint64_t v97 = sub_1000143F4(5063748, 0xE300000000000000, v98);
      uint64_t v2 = (uint64_t)v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s schema is up-to-date", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v47 = v5;
      v48 = v42;
      uint64_t v49 = v90;
    }
    else
    {

      uint64_t v47 = v5;
      v48 = v42;
      uint64_t v49 = v4;
    }
    ((void (*)(char *))v40)(v48);
    uint64_t v16 = v93;
    LOBYTE(v99) = 1;
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = &v99;
    swift_beginAccess();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_1003341A0;
    *(void *)(v25 + 24) = v50;
    v95 = (char *)v50;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = *v16;
    uint64_t v52 = v97;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v54 = sub_100016D20(5063748, 0xE300000000000000);
    uint64_t v55 = *(void *)(v52 + 16);
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v53;
      if (*(void *)(v52 + 24) < v57)
      {
        sub_100523440(v57, isUniquelyReferenced_nonNull_native);
        uint64_t v52 = v97;
        unint64_t v58 = sub_100016D20(5063748, 0xE300000000000000);
        if ((v5 & 1) != (v59 & 1)) {
          goto LABEL_47;
        }
        unint64_t v54 = v58;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v16 = v52;
        swift_bridgeObjectRelease();
        v60 = (void *)*v16;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v61 = sub_100332FFC();
          sub_10052AE90(v54, 5063748, 0xE300000000000000, v61 & 0x101, v60);
        }
        *(unsigned char *)(v60[7] + 2 * v54) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v27 = sub_1003341A0;
        if (v99 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          v62 = sub_100333014;
          goto LABEL_26;
        }
        v26 = sub_100333014;
        uint64_t v4 = v49;
        uint64_t v5 = v47;
        uint64_t v3 = v96;
        if ((v99 & 0x100) == 0)
        {
LABEL_5:
          v89 = v27;
          uint64_t v92 = v26;
          uint64_t v96 = v3;
          v28 = v94;
          static Logger.sql.getter();
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v90 = v4;
            v32 = (uint8_t *)v31;
            v98[0] = swift_slowAlloc();
            *(_DWORD *)v32 = 136446210;
            v88[2] = v32 + 4;
            uint64_t v97 = sub_1000143F4(5063748, 0xE300000000000000, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v32, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v4 = v90;
            swift_slowDealloc();

            uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v34 = v33(v94, v4);
          }
          else
          {

            uint64_t v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v34 = v33(v28, v4);
          }
          __chkstk_darwin(v34);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)&v88[-4]);
          if (v2)
          {
            sub_10023C7B4((uint64_t)v89);
            return sub_10023C7B4((uint64_t)v92);
          }
          uint64_t v96 = v5;
          v65 = v91;
          static Logger.sql.getter();
          v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          BOOL v68 = os_log_type_enabled(v66, v67);
          v88[1] = v25;
          if (v68)
          {
            uint64_t v69 = swift_slowAlloc();
            uint64_t v90 = v4;
            uint64_t v70 = (uint8_t *)v69;
            uint64_t v71 = swift_slowAlloc();
            v93 = v16;
            v98[0] = v71;
            *(_DWORD *)uint64_t v70 = 136446210;
            uint64_t v97 = sub_1000143F4(5063748, 0xE300000000000000, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s DB contents are prepared for first use after daemon launch", v70, 0xCu);
            swift_arrayDestroy();
            uint64_t v16 = v93;
            swift_slowDealloc();
            swift_slowDealloc();

            v72 = v65;
            uint64_t v73 = v90;
          }
          else
          {

            v72 = v65;
            uint64_t v73 = v4;
          }
          v33(v72, v73);
          HIBYTE(v99) = 1;
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = &v99;
          swift_beginAccess();
          uint64_t v75 = swift_allocObject();
          *(void *)(v75 + 16) = sub_1003341A4;
          *(void *)(v75 + 24) = v74;
          char v76 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v97 = *v16;
          uint64_t v77 = v97;
          char v78 = v16;
          *uint64_t v16 = 0x8000000000000000;
          unint64_t v80 = sub_100016D20(5063748, 0xE300000000000000);
          uint64_t v81 = *(void *)(v77 + 16);
          BOOL v82 = (v79 & 1) == 0;
          uint64_t v83 = v81 + v82;
          if (__OFADD__(v81, v82))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v16) = v79;
            if (*(void *)(v77 + 24) < v83)
            {
              sub_100523440(v83, v76);
              uint64_t v77 = v97;
              unint64_t v84 = sub_100016D20(5063748, 0xE300000000000000);
              if ((v16 & 1) == (v85 & 1))
              {
                unint64_t v80 = v84;
LABEL_40:
                *char v78 = v77;
                swift_bridgeObjectRelease();
                __int16 v86 = (void *)*v78;
                swift_bridgeObjectRetain();
                if ((v16 & 1) == 0)
                {
                  __int16 v87 = sub_100333054();
                  sub_10052AE90(v80, 5063748, 0xE300000000000000, v87 & 0x101, v86);
                }
                *(unsigned char *)(v86[7] + 2 * v80 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v89);
                sub_10023C7B4((uint64_t)v92);
                v64 = sub_100333014;
                v63 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v76) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v77 = v97;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v27);
        v62 = v26;
LABEL_26:
        sub_10023C7B4((uint64_t)v62);
        v63 = 0;
        v64 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v63);
        return sub_10023C7B4((uint64_t)v64);
      }
    }
    sub_10052B650();
    uint64_t v52 = v97;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_100315B60(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v95 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __int16 v99 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v90 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v90 - v13;
  __chkstk_darwin(v12);
  uint64_t v98 = (char *)&v90 - v15;
  uint64_t v16 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v1 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  v94 = v14;
  if (!v18) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100016D20(0xD000000000000014, 0x80000001005BDC00);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v103 = 0;
    goto LABEL_9;
  }
  char v21 = (char *)(*(void *)(v17 + 56) + 2 * v19);
  char v22 = *v21;
  uint64_t v96 = v6;
  uint64_t v23 = v4;
  char v24 = v21[1];
  swift_bridgeObjectRelease();
  LOBYTE(v103) = v22;
  HIBYTE(v103) = v24;
  uint64_t v4 = v23;
  uint64_t v6 = v96;
  if (v22)
  {
    uint64_t v25 = 0;
    v26 = 0;
    __int16 v99 = 0;
    v27 = 0;
    if ((v103 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v97 = v16;
  if (v38)
  {
    uint64_t v100 = v4;
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v93 = v2;
    v102[0] = v40;
    *(_DWORD *)uint64_t v39 = 136446210;
    uint64_t v101 = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, v102);
    uint64_t v4 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Checking if %{public}s schema needs to be updated", v39, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v93;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v41 = *(void (**)(char *, uint64_t))(v6 + 8);
  v41(v11, v5);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B0F0, 0);
  if (!v3)
  {
    uint64_t v100 = v4;
    os_log_type_t v43 = v99;
    static Logger.sql.getter();
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v96 = v6;
    if (v46)
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v92 = v5;
      v48 = (uint8_t *)v47;
      v102[0] = swift_slowAlloc();
      *(_DWORD *)v48 = 136446210;
      uint64_t v101 = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, v102);
      uint64_t v3 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s schema is up-to-date", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v49 = v92;
      ((void (*)(char *))v41)(v99);
    }
    else
    {

      uint64_t v50 = v43;
      uint64_t v49 = v5;
      v41(v50, v5);
    }
    uint64_t v16 = v97;
    LOBYTE(v103) = 1;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = &v103;
    swift_beginAccess();
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = sub_100332FFC;
    *(void *)(v52 + 24) = v51;
    uint64_t v93 = v52;
    __int16 v99 = (char *)v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v101 = *v16;
    uint64_t v54 = v101;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v56 = sub_100016D20(0xD000000000000014, 0x80000001005BDC00);
    uint64_t v57 = *(void *)(v54 + 16);
    BOOL v58 = (v55 & 1) == 0;
    uint64_t v59 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v6) = v55;
      if (*(void *)(v54 + 24) < v59)
      {
        sub_100523440(v59, isUniquelyReferenced_nonNull_native);
        uint64_t v54 = v101;
        unint64_t v60 = sub_100016D20(0xD000000000000014, 0x80000001005BDC00);
        if ((v6 & 1) != (v61 & 1)) {
          goto LABEL_47;
        }
        unint64_t v56 = v60;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v16 = v54;
        swift_bridgeObjectRelease();
        v62 = (void *)*v16;
        swift_bridgeObjectRetain();
        if ((v6 & 1) == 0)
        {
          __int16 v63 = sub_100332FFC();
          sub_10052AE90(v56, 0xD000000000000014, 0x80000001005BDC00, v63 & 0x101, v62);
        }
        *(unsigned char *)(v62[7] + 2 * v56) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v27 = sub_100332FFC;
        if (v103 != 1)
        {
          sub_10023C7B4((uint64_t)sub_100332FFC);
          v64 = sub_100333014;
          goto LABEL_26;
        }
        v26 = sub_100333014;
        uint64_t v5 = v49;
        uint64_t v4 = v100;
        uint64_t v25 = v93;
        if ((v103 & 0x100) == 0)
        {
LABEL_5:
          uint64_t v90 = v27;
          uint64_t v91 = v26;
          uint64_t v100 = v4;
          v28 = v98;
          static Logger.sql.getter();
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v92 = v5;
            v32 = (uint8_t *)v31;
            v102[0] = swift_slowAlloc();
            *(_DWORD *)v32 = 136446210;
            uint64_t v101 = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v32, 0xCu);
            swift_arrayDestroy();
            uint64_t v33 = v96;
            swift_slowDealloc();
            uint64_t v5 = v92;
            swift_slowDealloc();

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
            uint64_t v35 = v34(v98, v5);
          }
          else
          {

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v96 + 8);
            uint64_t v35 = v34(v28, v5);
          }
          __chkstk_darwin(v35);
          *(&v90 - 2) = (uint64_t (*)())v95;
          sub_10031B4CC((uint64_t)sub_100333018, (uint64_t)(&v90 - 4));
          if (v3)
          {
            sub_10023C7B4((uint64_t)v90);
            return sub_10023C7B4((uint64_t)v91);
          }
          os_log_type_t v67 = v94;
          static Logger.sql.getter();
          BOOL v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.default.getter();
          BOOL v70 = os_log_type_enabled(v68, v69);
          uint64_t v93 = v25;
          if (v70)
          {
            uint64_t v71 = swift_slowAlloc();
            uint64_t v92 = v5;
            v72 = (uint8_t *)v71;
            uint64_t v73 = swift_slowAlloc();
            uint64_t v97 = v16;
            v102[0] = v73;
            *(_DWORD *)v72 = 136446210;
            uint64_t v101 = sub_1000143F4(0xD000000000000014, 0x80000001005BDC00, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{public}s DB contents are prepared for first use after daemon launch", v72, 0xCu);
            swift_arrayDestroy();
            uint64_t v16 = v97;
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v74 = v67;
            uint64_t v75 = v92;
          }
          else
          {

            uint64_t v74 = v67;
            uint64_t v75 = v5;
          }
          v34(v74, v75);
          HIBYTE(v103) = 1;
          uint64_t v76 = swift_allocObject();
          *(void *)(v76 + 16) = &v103;
          swift_beginAccess();
          uint64_t v77 = swift_allocObject();
          *(void *)(v77 + 16) = sub_100333054;
          *(void *)(v77 + 24) = v76;
          char v78 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v101 = *v16;
          uint64_t v79 = v101;
          unint64_t v80 = v16;
          *uint64_t v16 = 0x8000000000000000;
          unint64_t v82 = sub_100016D20(0xD000000000000014, 0x80000001005BDC00);
          uint64_t v83 = *(void *)(v79 + 16);
          BOOL v84 = (v81 & 1) == 0;
          uint64_t v85 = v83 + v84;
          if (__OFADD__(v83, v84))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v16) = v81;
            if (*(void *)(v79 + 24) < v85)
            {
              sub_100523440(v85, v78);
              uint64_t v79 = v101;
              unint64_t v86 = sub_100016D20(0xD000000000000014, 0x80000001005BDC00);
              if ((v16 & 1) == (v87 & 1))
              {
                unint64_t v82 = v86;
LABEL_40:
                *unint64_t v80 = v79;
                swift_bridgeObjectRelease();
                v88 = (void *)*v80;
                swift_bridgeObjectRetain();
                if ((v16 & 1) == 0)
                {
                  __int16 v89 = sub_100333054();
                  sub_10052AE90(v82, 0xD000000000000014, 0x80000001005BDC00, v89 & 0x101, v88);
                }
                *(unsigned char *)(v88[7] + 2 * v82 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v90);
                sub_10023C7B4((uint64_t)v91);
                v66 = sub_100333014;
                v65 = sub_100333054;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v78) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v79 = v101;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v27);
        v64 = v26;
LABEL_26:
        sub_10023C7B4((uint64_t)v64);
        v65 = 0;
        v66 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v65);
        return sub_10023C7B4((uint64_t)v66);
      }
    }
    sub_10052B650();
    uint64_t v54 = v101;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_100316754()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v88 - v13;
  __chkstk_darwin(v12);
  v94 = (char *)&v88 - v15;
  uint64_t v16 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v0 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v91 = v14;
  uint64_t v95 = v8;
  if (!v18) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100016D20(0x74616470554D4444, 0xE900000000000065);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v99 = 0;
    goto LABEL_9;
  }
  char v21 = (char *)(*(void *)(v17 + 56) + 2 * v19);
  char v22 = *v21;
  uint64_t v23 = v3;
  char v24 = v21[1];
  swift_bridgeObjectRelease();
  LOBYTE(v99) = v22;
  HIBYTE(v99) = v24;
  uint64_t v3 = v23;
  if (v22)
  {
    uint64_t v25 = 0;
    v26 = 0;
    uint64_t v95 = 0;
    v27 = 0;
    if ((v99 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v93 = v16;
  if (v38)
  {
    uint64_t v96 = v3;
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v92 = (uint64_t (*)@<X0>(unsigned char *@<X8>))v1;
    v98[0] = v40;
    *(_DWORD *)uint64_t v39 = 136446210;
    uint64_t v97 = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, v98);
    uint64_t v3 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Checking if %{public}s schema needs to be updated", v39, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = (uint64_t)v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v41 = *(void (**)(char *, uint64_t))(v5 + 8);
  v41(v11, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B158, 0);
  if (!v2)
  {
    uint64_t v96 = v3;
    os_log_type_t v43 = v95;
    static Logger.sql.getter();
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v92 = 0;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v90 = v4;
      uint64_t v47 = (uint8_t *)v46;
      v98[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v97 = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, v98);
      uint64_t v2 = (uint64_t)v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s schema is up-to-date", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v90;
    }
    else
    {

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v4;
    }
    ((void (*)(char *))v41)(v49);
    uint64_t v16 = v93;
    LOBYTE(v99) = 1;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = &v99;
    swift_beginAccess();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_1003341A0;
    *(void *)(v25 + 24) = v51;
    uint64_t v95 = (char *)v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = *v16;
    uint64_t v53 = v97;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v55 = sub_100016D20(0x74616470554D4444, 0xE900000000000065);
    uint64_t v56 = *(void *)(v53 + 16);
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v54;
      if (*(void *)(v53 + 24) < v58)
      {
        sub_100523440(v58, isUniquelyReferenced_nonNull_native);
        uint64_t v53 = v97;
        unint64_t v59 = sub_100016D20(0x74616470554D4444, 0xE900000000000065);
        if ((v5 & 1) != (v60 & 1)) {
          goto LABEL_47;
        }
        unint64_t v55 = v59;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v16 = v53;
        swift_bridgeObjectRelease();
        char v61 = (void *)*v16;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v62 = sub_100332FFC();
          sub_10052AE90(v55, 0x74616470554D4444, 0xE900000000000065, v62 & 0x101, v61);
        }
        *(unsigned char *)(v61[7] + 2 * v55) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v27 = sub_1003341A0;
        if (v99 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          __int16 v63 = sub_100333014;
          goto LABEL_26;
        }
        v26 = sub_100333014;
        uint64_t v4 = v50;
        uint64_t v5 = v48;
        uint64_t v3 = v96;
        if ((v99 & 0x100) == 0)
        {
LABEL_5:
          __int16 v89 = v27;
          uint64_t v92 = v26;
          uint64_t v96 = v3;
          v28 = v94;
          static Logger.sql.getter();
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v90 = v4;
            v32 = (uint8_t *)v31;
            uint64_t v33 = swift_slowAlloc();
            uint64_t v88 = v25;
            v98[0] = v33;
            *(_DWORD *)v32 = 136446210;
            uint64_t v97 = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v32, 0xCu);
            swift_arrayDestroy();
            uint64_t v25 = v88;
            swift_slowDealloc();
            uint64_t v4 = v90;
            swift_slowDealloc();

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v94, v4);
          }
          else
          {

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v28, v4);
          }
          __chkstk_darwin(v35);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)(&v88 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v89);
            return sub_10023C7B4((uint64_t)v92);
          }
          uint64_t v96 = v5;
          v66 = v91;
          static Logger.sql.getter();
          os_log_type_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.default.getter();
          BOOL v69 = os_log_type_enabled(v67, v68);
          uint64_t v88 = v25;
          if (v69)
          {
            uint64_t v70 = swift_slowAlloc();
            uint64_t v90 = v4;
            uint64_t v71 = (uint8_t *)v70;
            v98[0] = swift_slowAlloc();
            uint64_t v93 = v16;
            *(_DWORD *)uint64_t v71 = 136446210;
            uint64_t v97 = sub_1000143F4(0x74616470554D4444, 0xE900000000000065, v98);
            uint64_t v16 = v93;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "%{public}s DB contents are prepared for first use after daemon launch", v71, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v72 = v66;
            uint64_t v73 = v90;
          }
          else
          {

            v72 = v66;
            uint64_t v73 = v4;
          }
          v34(v72, v73);
          HIBYTE(v99) = 1;
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = &v99;
          swift_beginAccess();
          uint64_t v75 = swift_allocObject();
          *(void *)(v75 + 16) = sub_1003341A4;
          *(void *)(v75 + 24) = v74;
          char v76 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v97 = *v16;
          uint64_t v77 = v97;
          char v78 = v16;
          *uint64_t v16 = 0x8000000000000000;
          unint64_t v80 = sub_100016D20(0x74616470554D4444, 0xE900000000000065);
          uint64_t v81 = *(void *)(v77 + 16);
          BOOL v82 = (v79 & 1) == 0;
          uint64_t v83 = v81 + v82;
          if (__OFADD__(v81, v82))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v16) = v79;
            if (*(void *)(v77 + 24) < v83)
            {
              sub_100523440(v83, v76);
              uint64_t v77 = v97;
              unint64_t v84 = sub_100016D20(0x74616470554D4444, 0xE900000000000065);
              if ((v16 & 1) == (v85 & 1))
              {
                unint64_t v80 = v84;
LABEL_40:
                *char v78 = v77;
                swift_bridgeObjectRelease();
                unint64_t v86 = (void *)*v78;
                swift_bridgeObjectRetain();
                if ((v16 & 1) == 0)
                {
                  __int16 v87 = sub_100333054();
                  sub_10052AE90(v80, 0x74616470554D4444, 0xE900000000000065, v87 & 0x101, v86);
                }
                *(unsigned char *)(v86[7] + 2 * v80 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v89);
                sub_10023C7B4((uint64_t)v92);
                v65 = sub_100333014;
                v64 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v76) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v77 = v97;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v27);
        __int16 v63 = v26;
LABEL_26:
        sub_10023C7B4((uint64_t)v63);
        v64 = 0;
        v65 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v64);
        return sub_10023C7B4((uint64_t)v65);
      }
    }
    sub_10052B650();
    uint64_t v53 = v97;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10031735C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v88 - v13;
  __chkstk_darwin(v12);
  v94 = (char *)&v88 - v15;
  uint64_t v16 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v0 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v91 = v14;
  uint64_t v95 = v8;
  if (!v18) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100016D20(0x6174736E49707041, 0xEA00000000006C6CLL);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v99 = 0;
    goto LABEL_9;
  }
  char v21 = (char *)(*(void *)(v17 + 56) + 2 * v19);
  char v22 = *v21;
  uint64_t v23 = v3;
  char v24 = v21[1];
  swift_bridgeObjectRelease();
  LOBYTE(v99) = v22;
  HIBYTE(v99) = v24;
  uint64_t v3 = v23;
  if (v22)
  {
    uint64_t v25 = 0;
    v26 = 0;
    uint64_t v95 = 0;
    v27 = 0;
    if ((v99 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v93 = v16;
  if (v38)
  {
    uint64_t v96 = v3;
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v92 = (uint64_t (*)@<X0>(unsigned char *@<X8>))v1;
    v98[0] = v40;
    *(_DWORD *)uint64_t v39 = 136446210;
    uint64_t v97 = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, v98);
    uint64_t v3 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Checking if %{public}s schema needs to be updated", v39, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = (uint64_t)v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v41 = *(void (**)(char *, uint64_t))(v5 + 8);
  v41(v11, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B1C0, 0);
  if (!v2)
  {
    uint64_t v96 = v3;
    os_log_type_t v43 = v95;
    static Logger.sql.getter();
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v92 = 0;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v90 = v4;
      uint64_t v47 = (uint8_t *)v46;
      v98[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v97 = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, v98);
      uint64_t v2 = (uint64_t)v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s schema is up-to-date", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v90;
    }
    else
    {

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v4;
    }
    ((void (*)(char *))v41)(v49);
    uint64_t v16 = v93;
    LOBYTE(v99) = 1;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = &v99;
    swift_beginAccess();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_1003341A0;
    *(void *)(v25 + 24) = v51;
    uint64_t v95 = (char *)v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = *v16;
    uint64_t v53 = v97;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v55 = sub_100016D20(0x6174736E49707041, 0xEA00000000006C6CLL);
    uint64_t v56 = *(void *)(v53 + 16);
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v54;
      if (*(void *)(v53 + 24) < v58)
      {
        sub_100523440(v58, isUniquelyReferenced_nonNull_native);
        uint64_t v53 = v97;
        unint64_t v59 = sub_100016D20(0x6174736E49707041, 0xEA00000000006C6CLL);
        if ((v5 & 1) != (v60 & 1)) {
          goto LABEL_47;
        }
        unint64_t v55 = v59;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v16 = v53;
        swift_bridgeObjectRelease();
        char v61 = (void *)*v16;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v62 = sub_100332FFC();
          sub_10052AE90(v55, 0x6174736E49707041, 0xEA00000000006C6CLL, v62 & 0x101, v61);
        }
        *(unsigned char *)(v61[7] + 2 * v55) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v27 = sub_1003341A0;
        if (v99 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          __int16 v63 = sub_100333014;
          goto LABEL_26;
        }
        v26 = sub_100333014;
        uint64_t v4 = v50;
        uint64_t v5 = v48;
        uint64_t v3 = v96;
        if ((v99 & 0x100) == 0)
        {
LABEL_5:
          __int16 v89 = v27;
          uint64_t v92 = v26;
          uint64_t v96 = v3;
          v28 = v94;
          static Logger.sql.getter();
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v90 = v4;
            v32 = (uint8_t *)v31;
            uint64_t v33 = swift_slowAlloc();
            uint64_t v88 = v25;
            v98[0] = v33;
            *(_DWORD *)v32 = 136446210;
            uint64_t v97 = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v32, 0xCu);
            swift_arrayDestroy();
            uint64_t v25 = v88;
            swift_slowDealloc();
            uint64_t v4 = v90;
            swift_slowDealloc();

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v94, v4);
          }
          else
          {

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v28, v4);
          }
          __chkstk_darwin(v35);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)(&v88 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v89);
            return sub_10023C7B4((uint64_t)v92);
          }
          uint64_t v96 = v5;
          v66 = v91;
          static Logger.sql.getter();
          os_log_type_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.default.getter();
          BOOL v69 = os_log_type_enabled(v67, v68);
          uint64_t v88 = v25;
          if (v69)
          {
            uint64_t v70 = swift_slowAlloc();
            uint64_t v90 = v4;
            uint64_t v71 = (uint8_t *)v70;
            v98[0] = swift_slowAlloc();
            uint64_t v93 = v16;
            *(_DWORD *)uint64_t v71 = 136446210;
            uint64_t v97 = sub_1000143F4(0x6174736E49707041, 0xEA00000000006C6CLL, v98);
            uint64_t v16 = v93;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "%{public}s DB contents are prepared for first use after daemon launch", v71, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v72 = v66;
            uint64_t v73 = v90;
          }
          else
          {

            v72 = v66;
            uint64_t v73 = v4;
          }
          v34(v72, v73);
          HIBYTE(v99) = 1;
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = &v99;
          swift_beginAccess();
          uint64_t v75 = swift_allocObject();
          *(void *)(v75 + 16) = sub_1003341A4;
          *(void *)(v75 + 24) = v74;
          char v76 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v97 = *v16;
          uint64_t v77 = v97;
          char v78 = v16;
          *uint64_t v16 = 0x8000000000000000;
          unint64_t v80 = sub_100016D20(0x6174736E49707041, 0xEA00000000006C6CLL);
          uint64_t v81 = *(void *)(v77 + 16);
          BOOL v82 = (v79 & 1) == 0;
          uint64_t v83 = v81 + v82;
          if (__OFADD__(v81, v82))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v16) = v79;
            if (*(void *)(v77 + 24) < v83)
            {
              sub_100523440(v83, v76);
              uint64_t v77 = v97;
              unint64_t v84 = sub_100016D20(0x6174736E49707041, 0xEA00000000006C6CLL);
              if ((v16 & 1) == (v85 & 1))
              {
                unint64_t v80 = v84;
LABEL_40:
                *char v78 = v77;
                swift_bridgeObjectRelease();
                unint64_t v86 = (void *)*v78;
                swift_bridgeObjectRetain();
                if ((v16 & 1) == 0)
                {
                  __int16 v87 = sub_100333054();
                  sub_10052AE90(v80, 0x6174736E49707041, 0xEA00000000006C6CLL, v87 & 0x101, v86);
                }
                *(unsigned char *)(v86[7] + 2 * v80 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v89);
                sub_10023C7B4((uint64_t)v92);
                v65 = sub_100333014;
                v64 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v76) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v77 = v97;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v27);
        __int16 v63 = v26;
LABEL_26:
        sub_10023C7B4((uint64_t)v63);
        v64 = 0;
        v65 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v64);
        return sub_10023C7B4((uint64_t)v65);
      }
    }
    sub_10052B650();
    uint64_t v53 = v97;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_100317F64()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v87 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v87 - v12;
  __chkstk_darwin(v11);
  uint64_t v95 = (char *)&v87 - v14;
  uint64_t v15 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v93 = v13;
  if (!v17) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_100016D20(0xD000000000000011, 0x80000001005BDC80);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v100 = 0;
    goto LABEL_9;
  }
  char v20 = (char *)(*(void *)(v16 + 56) + 2 * v18);
  char v21 = *v20;
  uint64_t v22 = v5;
  uint64_t v23 = v3;
  char v24 = v20[1];
  swift_bridgeObjectRelease();
  LOBYTE(v100) = v21;
  HIBYTE(v100) = v24;
  uint64_t v3 = v23;
  uint64_t v5 = v22;
  uint64_t v2 = v1;
  if (v21)
  {
    uint64_t v92 = 0;
    uint64_t v25 = 0;
    uint64_t v96 = 0;
    v26 = 0;
    if ((v100 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  v94 = v15;
  if (v36)
  {
    uint64_t v97 = v3;
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v92 = v2;
    v99[0] = v38;
    *(_DWORD *)os_log_type_t v37 = 136446210;
    uint64_t v98 = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, v99);
    uint64_t v3 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Checking if %{public}s schema needs to be updated", v37, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v10, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B22C, 0);
  if (!v2)
  {
    uint64_t v97 = v3;
    v41 = v96;
    static Logger.sql.getter();
    v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v91 = v5;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v90 = (uint8_t *)v4;
      uint64_t v46 = (uint8_t *)v45;
      v99[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136446210;
      uint64_t v98 = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, v99);
      uint64_t v2 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s schema is up-to-date", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v47 = (uint64_t)v90;
      ((void (*)(char *))v39)(v96);
    }
    else
    {

      uint64_t v48 = v41;
      uint64_t v47 = v4;
      v39(v48, v4);
    }
    uint64_t v15 = v94;
    LOBYTE(v100) = 1;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = &v100;
    swift_beginAccess();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_1003341A0;
    *(void *)(v50 + 24) = v49;
    uint64_t v92 = v50;
    uint64_t v96 = (char *)v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v98 = *v15;
    uint64_t v52 = v98;
    uint64_t *v15 = 0x8000000000000000;
    unint64_t v54 = sub_100016D20(0xD000000000000011, 0x80000001005BDC80);
    uint64_t v55 = *(void *)(v52 + 16);
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v53;
      if (*(void *)(v52 + 24) < v57)
      {
        sub_100523440(v57, isUniquelyReferenced_nonNull_native);
        uint64_t v52 = v98;
        unint64_t v58 = sub_100016D20(0xD000000000000011, 0x80000001005BDC80);
        if ((v5 & 1) != (v59 & 1)) {
          goto LABEL_47;
        }
        unint64_t v54 = v58;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        uint64_t *v15 = v52;
        swift_bridgeObjectRelease();
        char v60 = (void *)*v15;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v61 = sub_100332FFC();
          sub_10052AE90(v54, 0xD000000000000011, 0x80000001005BDC80, v61 & 0x101, v60);
        }
        *(unsigned char *)(v60[7] + 2 * v54) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v26 = sub_1003341A0;
        if (v100 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          __int16 v62 = sub_100333014;
          goto LABEL_26;
        }
        uint64_t v25 = sub_100333014;
        uint64_t v4 = v47;
        uint64_t v5 = v91;
        uint64_t v3 = v97;
        if ((v100 & 0x100) == 0)
        {
LABEL_5:
          uint64_t v88 = v26;
          __int16 v89 = v25;
          uint64_t v97 = v3;
          v27 = v95;
          static Logger.sql.getter();
          v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = v4;
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            v99[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136446210;
            uint64_t v90 = v31 + 4;
            uint64_t v98 = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v31, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v4 = v30;
            swift_slowDealloc();

            v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v95, v30);
          }
          else
          {

            v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v27, v4);
          }
          __chkstk_darwin(v33);
          sub_10031B4CC((uint64_t)sub_1003334EC, (uint64_t)(&v87 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v88);
            return sub_10023C7B4((uint64_t)v89);
          }
          uint64_t v91 = v5;
          v65 = v93;
          static Logger.sql.getter();
          v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v90 = (uint8_t *)v4;
            BOOL v69 = (uint8_t *)v68;
            uint64_t v70 = swift_slowAlloc();
            v94 = v15;
            v99[0] = v70;
            *(_DWORD *)BOOL v69 = 136446210;
            uint64_t v98 = sub_1000143F4(0xD000000000000011, 0x80000001005BDC80, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s DB contents are prepared for first use after daemon launch", v69, 0xCu);
            swift_arrayDestroy();
            uint64_t v15 = v94;
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v71 = (uint64_t)v90;
            v72 = v65;
          }
          else
          {

            v72 = v65;
            uint64_t v71 = v4;
          }
          v32(v72, v71);
          HIBYTE(v100) = 1;
          uint64_t v73 = swift_allocObject();
          *(void *)(v73 + 16) = &v100;
          swift_beginAccess();
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = sub_1003341A4;
          *(void *)(v74 + 24) = v73;
          char v75 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v98 = *v15;
          uint64_t v76 = v98;
          uint64_t v77 = v15;
          uint64_t *v15 = 0x8000000000000000;
          unint64_t v79 = sub_100016D20(0xD000000000000011, 0x80000001005BDC80);
          uint64_t v80 = *(void *)(v76 + 16);
          BOOL v81 = (v78 & 1) == 0;
          uint64_t v82 = v80 + v81;
          if (__OFADD__(v80, v81))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v15) = v78;
            if (*(void *)(v76 + 24) < v82)
            {
              sub_100523440(v82, v75);
              uint64_t v76 = v98;
              unint64_t v83 = sub_100016D20(0xD000000000000011, 0x80000001005BDC80);
              if ((v15 & 1) == (v84 & 1))
              {
                unint64_t v79 = v83;
LABEL_40:
                uint64_t *v77 = v76;
                swift_bridgeObjectRelease();
                char v85 = (void *)*v77;
                swift_bridgeObjectRetain();
                if ((v15 & 1) == 0)
                {
                  __int16 v86 = sub_100333054();
                  sub_10052AE90(v79, 0xD000000000000011, 0x80000001005BDC80, v86 & 0x101, v85);
                }
                *(unsigned char *)(v85[7] + 2 * v79 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v88);
                sub_10023C7B4((uint64_t)v89);
                v64 = sub_100333014;
                __int16 v63 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v75) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v76 = v98;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v26);
        __int16 v62 = v25;
LABEL_26:
        sub_10023C7B4((uint64_t)v62);
        __int16 v63 = 0;
        v64 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v63);
        return sub_10023C7B4((uint64_t)v64);
      }
    }
    sub_10052B650();
    uint64_t v52 = v98;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_100318B60(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __int16 v99 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v89 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v89 - v16;
  uint64_t v17 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v1 + 16);
  uint64_t v19 = *(void *)(v18 + 16);
  v94 = v15;
  uint64_t v95 = a1;
  if (!v19) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_100016D20(0x5365736E6563694CLL, 0xEE00656761726F74);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v102 = 0;
    goto LABEL_9;
  }
  uint64_t v22 = (char *)(*(void *)(v18 + 56) + 2 * v20);
  char v23 = *v22;
  uint64_t v24 = v4;
  char v25 = v22[1];
  swift_bridgeObjectRelease();
  LOBYTE(v102) = v23;
  HIBYTE(v102) = v25;
  uint64_t v4 = v24;
  if (v23)
  {
    uint64_t v26 = 0;
    v27 = 0;
    __int16 v99 = 0;
    v28 = 0;
    if ((v102 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v96 = v17;
  if (v39)
  {
    uint64_t v98 = v4;
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v93 = v2;
    v101[0] = v41;
    *(_DWORD *)uint64_t v40 = 136446210;
    uint64_t v100 = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, v101);
    uint64_t v4 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Checking if %{public}s schema needs to be updated", v40, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v93;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v12, v6);
  os_log_type_t v43 = v99;
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B294, 0);
  if (!v3)
  {
    uint64_t v98 = v4;
    static Logger.sql.getter();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v93 = v6;
      uint64_t v48 = (uint8_t *)v47;
      v101[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136446210;
      uint64_t v100 = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, v101);
      uint64_t v3 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s schema is up-to-date", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v49 = v7;
      uint64_t v50 = v99;
      uint64_t v51 = v93;
    }
    else
    {

      uint64_t v49 = v7;
      uint64_t v50 = v43;
      uint64_t v51 = v6;
    }
    ((void (*)(char *))v42)(v50);
    uint64_t v17 = v96;
    LOBYTE(v102) = 1;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = &v102;
    swift_beginAccess();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_1003341A0;
    *(void *)(v26 + 24) = v52;
    __int16 v99 = (char *)v52;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v100 = *v17;
    uint64_t v54 = v100;
    *uint64_t v17 = 0x8000000000000000;
    unint64_t v56 = sub_100016D20(0x5365736E6563694CLL, 0xEE00656761726F74);
    uint64_t v57 = *(void *)(v54 + 16);
    BOOL v58 = (v55 & 1) == 0;
    uint64_t v59 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v7) = v55;
      if (*(void *)(v54 + 24) < v59)
      {
        sub_100523440(v59, isUniquelyReferenced_nonNull_native);
        uint64_t v54 = v100;
        unint64_t v60 = sub_100016D20(0x5365736E6563694CLL, 0xEE00656761726F74);
        if ((v7 & 1) != (v61 & 1)) {
          goto LABEL_47;
        }
        unint64_t v56 = v60;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v17 = v54;
        swift_bridgeObjectRelease();
        __int16 v62 = (void *)*v17;
        swift_bridgeObjectRetain();
        if ((v7 & 1) == 0)
        {
          __int16 v63 = sub_100332FFC();
          sub_10052AE90(v56, 0x5365736E6563694CLL, 0xEE00656761726F74, v63 & 0x101, v62);
        }
        *(unsigned char *)(v62[7] + 2 * v56) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v28 = sub_1003341A0;
        if (v102 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          v64 = sub_100333014;
          goto LABEL_26;
        }
        v27 = sub_100333014;
        uint64_t v6 = v51;
        uint64_t v7 = v49;
        uint64_t v4 = v98;
        if ((v102 & 0x100) == 0)
        {
LABEL_5:
          uint64_t v91 = v28;
          uint64_t v92 = v27;
          uint64_t v98 = v4;
          os_log_type_t v29 = v97;
          static Logger.sql.getter();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v30, v31))
          {
            uint64_t v32 = swift_slowAlloc();
            uint64_t v93 = v6;
            uint64_t v33 = (uint8_t *)v32;
            uint64_t v34 = swift_slowAlloc();
            uint64_t v90 = v7;
            v101[0] = v34;
            *(_DWORD *)uint64_t v33 = 136446210;
            uint64_t v100 = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, v101);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v33, 0xCu);
            swift_arrayDestroy();
            uint64_t v7 = v90;
            swift_slowDealloc();
            uint64_t v6 = v93;
            swift_slowDealloc();

            os_log_type_t v35 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
            uint64_t v36 = v35(v97, v6);
          }
          else
          {

            os_log_type_t v35 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
            uint64_t v36 = v35(v29, v6);
          }
          __chkstk_darwin(v36);
          *(&v89 - 2) = v67;
          sub_10031B4CC((uint64_t)sub_100333118, (uint64_t)(&v89 - 4));
          if (v3)
          {
            sub_10023C7B4((uint64_t)v91);
            return sub_10023C7B4((uint64_t)v92);
          }
          uint64_t v98 = v26;
          uint64_t v68 = v94;
          static Logger.sql.getter();
          BOOL v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v90 = v7;
            uint64_t v71 = swift_slowAlloc();
            uint64_t v93 = v6;
            v72 = (uint8_t *)v71;
            v101[0] = swift_slowAlloc();
            uint64_t v96 = v17;
            *(_DWORD *)v72 = 136446210;
            uint64_t v100 = sub_1000143F4(0x5365736E6563694CLL, 0xEE00656761726F74, v101);
            uint64_t v17 = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "%{public}s DB contents are prepared for first use after daemon launch", v72, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v73 = v68;
            uint64_t v74 = v93;
          }
          else
          {

            uint64_t v73 = v68;
            uint64_t v74 = v6;
          }
          v35(v73, v74);
          HIBYTE(v102) = 1;
          uint64_t v75 = swift_allocObject();
          *(void *)(v75 + 16) = &v102;
          swift_beginAccess();
          uint64_t v76 = swift_allocObject();
          *(void *)(v76 + 16) = sub_1003341A4;
          *(void *)(v76 + 24) = v75;
          char v77 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v100 = *v17;
          uint64_t v78 = v100;
          unint64_t v79 = v17;
          *uint64_t v17 = 0x8000000000000000;
          unint64_t v81 = sub_100016D20(0x5365736E6563694CLL, 0xEE00656761726F74);
          uint64_t v82 = *(void *)(v78 + 16);
          BOOL v83 = (v80 & 1) == 0;
          uint64_t v84 = v82 + v83;
          if (__OFADD__(v82, v83))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v17) = v80;
            if (*(void *)(v78 + 24) < v84)
            {
              sub_100523440(v84, v77);
              uint64_t v78 = v100;
              unint64_t v85 = sub_100016D20(0x5365736E6563694CLL, 0xEE00656761726F74);
              if ((v17 & 1) == (v86 & 1))
              {
                unint64_t v81 = v85;
LABEL_40:
                *unint64_t v79 = v78;
                swift_bridgeObjectRelease();
                uint64_t v87 = (void *)*v79;
                swift_bridgeObjectRetain();
                if ((v17 & 1) == 0)
                {
                  __int16 v88 = sub_100333054();
                  sub_10052AE90(v81, 0x5365736E6563694CLL, 0xEE00656761726F74, v88 & 0x101, v87);
                }
                *(unsigned char *)(v87[7] + 2 * v81 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v91);
                sub_10023C7B4((uint64_t)v92);
                v66 = sub_100333014;
                v65 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v77) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v78 = v100;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v28);
        v64 = v27;
LABEL_26:
        sub_10023C7B4((uint64_t)v64);
        v65 = 0;
        v66 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v65);
        return sub_10023C7B4((uint64_t)v66);
      }
    }
    sub_10052B650();
    uint64_t v54 = v100;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_1003197D0()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v88 - v13;
  __chkstk_darwin(v12);
  v94 = (char *)&v88 - v15;
  uint64_t v16 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v0 + 16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v91 = v14;
  uint64_t v95 = v8;
  if (!v18) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_100016D20(0x7453657275636553, 0xED0000656761726FLL);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v99 = 0;
    goto LABEL_9;
  }
  char v21 = (char *)(*(void *)(v17 + 56) + 2 * v19);
  char v22 = *v21;
  uint64_t v23 = v3;
  char v24 = v21[1];
  swift_bridgeObjectRelease();
  LOBYTE(v99) = v22;
  HIBYTE(v99) = v24;
  uint64_t v3 = v23;
  if (v22)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v95 = 0;
    v27 = 0;
    if ((v99 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v93 = v16;
  if (v38)
  {
    uint64_t v96 = v3;
    BOOL v39 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v92 = (uint64_t (*)@<X0>(unsigned char *@<X8>))v1;
    v98[0] = v40;
    *(_DWORD *)BOOL v39 = 136446210;
    uint64_t v97 = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, v98);
    uint64_t v3 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Checking if %{public}s schema needs to be updated", v39, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = (uint64_t)v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v41 = *(void (**)(char *, uint64_t))(v5 + 8);
  v41(v11, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B2F8, 0);
  if (!v2)
  {
    uint64_t v96 = v3;
    os_log_type_t v43 = v95;
    static Logger.sql.getter();
    BOOL v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v92 = 0;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v90 = v4;
      uint64_t v47 = (uint8_t *)v46;
      v98[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v97 = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, v98);
      uint64_t v2 = (uint64_t)v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s schema is up-to-date", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v90;
    }
    else
    {

      uint64_t v48 = v5;
      uint64_t v49 = v43;
      uint64_t v50 = v4;
    }
    ((void (*)(char *))v41)(v49);
    uint64_t v16 = v93;
    LOBYTE(v99) = 1;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = &v99;
    swift_beginAccess();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = sub_1003341A0;
    *(void *)(v25 + 24) = v51;
    uint64_t v95 = (char *)v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v97 = *v16;
    uint64_t v53 = v97;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v55 = sub_100016D20(0x7453657275636553, 0xED0000656761726FLL);
    uint64_t v56 = *(void *)(v53 + 16);
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v54;
      if (*(void *)(v53 + 24) < v58)
      {
        sub_100523440(v58, isUniquelyReferenced_nonNull_native);
        uint64_t v53 = v97;
        unint64_t v59 = sub_100016D20(0x7453657275636553, 0xED0000656761726FLL);
        if ((v5 & 1) != (v60 & 1)) {
          goto LABEL_47;
        }
        unint64_t v55 = v59;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        *uint64_t v16 = v53;
        swift_bridgeObjectRelease();
        char v61 = (void *)*v16;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v62 = sub_100332FFC();
          sub_10052AE90(v55, 0x7453657275636553, 0xED0000656761726FLL, v62 & 0x101, v61);
        }
        *(unsigned char *)(v61[7] + 2 * v55) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v27 = sub_1003341A0;
        if (v99 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          __int16 v63 = sub_100333014;
          goto LABEL_26;
        }
        uint64_t v26 = sub_100333014;
        uint64_t v4 = v50;
        uint64_t v5 = v48;
        uint64_t v3 = v96;
        if ((v99 & 0x100) == 0)
        {
LABEL_5:
          uint64_t v89 = v27;
          uint64_t v92 = v26;
          uint64_t v96 = v3;
          v28 = v94;
          static Logger.sql.getter();
          os_log_type_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            uint64_t v90 = v4;
            uint64_t v32 = (uint8_t *)v31;
            uint64_t v33 = swift_slowAlloc();
            uint64_t v88 = v25;
            v98[0] = v33;
            *(_DWORD *)uint64_t v32 = 136446210;
            uint64_t v97 = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v32, 0xCu);
            swift_arrayDestroy();
            uint64_t v25 = v88;
            swift_slowDealloc();
            uint64_t v4 = v90;
            swift_slowDealloc();

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v94, v4);
          }
          else
          {

            uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v35 = v34(v28, v4);
          }
          __chkstk_darwin(v35);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)(&v88 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v89);
            return sub_10023C7B4((uint64_t)v92);
          }
          uint64_t v96 = v5;
          v66 = v91;
          static Logger.sql.getter();
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.default.getter();
          BOOL v69 = os_log_type_enabled(v67, v68);
          uint64_t v88 = v25;
          if (v69)
          {
            uint64_t v70 = swift_slowAlloc();
            uint64_t v90 = v4;
            uint64_t v71 = (uint8_t *)v70;
            v98[0] = swift_slowAlloc();
            uint64_t v93 = v16;
            *(_DWORD *)uint64_t v71 = 136446210;
            uint64_t v97 = sub_1000143F4(0x7453657275636553, 0xED0000656761726FLL, v98);
            uint64_t v16 = v93;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "%{public}s DB contents are prepared for first use after daemon launch", v71, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v72 = v66;
            uint64_t v73 = v90;
          }
          else
          {

            v72 = v66;
            uint64_t v73 = v4;
          }
          v34(v72, v73);
          HIBYTE(v99) = 1;
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = &v99;
          swift_beginAccess();
          uint64_t v75 = swift_allocObject();
          *(void *)(v75 + 16) = sub_1003341A4;
          *(void *)(v75 + 24) = v74;
          char v76 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v97 = *v16;
          uint64_t v77 = v97;
          uint64_t v78 = v16;
          *uint64_t v16 = 0x8000000000000000;
          unint64_t v80 = sub_100016D20(0x7453657275636553, 0xED0000656761726FLL);
          uint64_t v81 = *(void *)(v77 + 16);
          BOOL v82 = (v79 & 1) == 0;
          uint64_t v83 = v81 + v82;
          if (__OFADD__(v81, v82))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v16) = v79;
            if (*(void *)(v77 + 24) < v83)
            {
              sub_100523440(v83, v76);
              uint64_t v77 = v97;
              unint64_t v84 = sub_100016D20(0x7453657275636553, 0xED0000656761726FLL);
              if ((v16 & 1) == (v85 & 1))
              {
                unint64_t v80 = v84;
LABEL_40:
                *uint64_t v78 = v77;
                swift_bridgeObjectRelease();
                char v86 = (void *)*v78;
                swift_bridgeObjectRetain();
                if ((v16 & 1) == 0)
                {
                  __int16 v87 = sub_100333054();
                  sub_10052AE90(v80, 0x7453657275636553, 0xED0000656761726FLL, v87 & 0x101, v86);
                }
                *(unsigned char *)(v86[7] + 2 * v80 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v89);
                sub_10023C7B4((uint64_t)v92);
                v65 = sub_100333014;
                v64 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v76) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v77 = v97;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v27);
        __int16 v63 = v26;
LABEL_26:
        sub_10023C7B4((uint64_t)v63);
        v64 = 0;
        v65 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v64);
        return sub_10023C7B4((uint64_t)v65);
      }
    }
    sub_10052B650();
    uint64_t v53 = v97;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10031A430()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v96 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v87 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v87 - v12;
  __chkstk_darwin(v11);
  uint64_t v95 = (char *)&v87 - v14;
  uint64_t v15 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v0 + 16);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v93 = v13;
  if (!v17) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_100016D20(0xD000000000000015, 0x80000001005BDC60);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    __int16 v100 = 0;
    goto LABEL_9;
  }
  char v20 = (char *)(*(void *)(v16 + 56) + 2 * v18);
  char v21 = *v20;
  uint64_t v22 = v5;
  uint64_t v23 = v3;
  char v24 = v20[1];
  swift_bridgeObjectRelease();
  LOBYTE(v100) = v21;
  HIBYTE(v100) = v24;
  uint64_t v3 = v23;
  uint64_t v5 = v22;
  uint64_t v2 = v1;
  if (v21)
  {
    uint64_t v92 = 0;
    uint64_t v25 = 0;
    uint64_t v96 = 0;
    uint64_t v26 = 0;
    if ((v100 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_9:
  static Logger.sql.getter();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  v94 = v15;
  if (v36)
  {
    uint64_t v97 = v3;
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v92 = v2;
    v99[0] = v38;
    *(_DWORD *)os_log_type_t v37 = 136446210;
    uint64_t v98 = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, v99);
    uint64_t v3 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Checking if %{public}s schema needs to be updated", v37, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v92;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  BOOL v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v10, v4);
  uint64_t result = sub_10031B4CC((uint64_t)sub_10031B368, 0);
  if (!v2)
  {
    uint64_t v97 = v3;
    uint64_t v41 = v96;
    static Logger.sql.getter();
    v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v91 = v5;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v90 = (uint8_t *)v4;
      uint64_t v46 = (uint8_t *)v45;
      v99[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136446210;
      uint64_t v98 = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, v99);
      uint64_t v2 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s schema is up-to-date", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v47 = (uint64_t)v90;
      ((void (*)(char *))v39)(v96);
    }
    else
    {

      uint64_t v48 = v41;
      uint64_t v47 = v4;
      v39(v48, v4);
    }
    uint64_t v15 = v94;
    LOBYTE(v100) = 1;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = &v100;
    swift_beginAccess();
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_1003341A0;
    *(void *)(v50 + 24) = v49;
    uint64_t v92 = v50;
    uint64_t v96 = (char *)v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v98 = *v15;
    uint64_t v52 = v98;
    uint64_t *v15 = 0x8000000000000000;
    unint64_t v54 = sub_100016D20(0xD000000000000015, 0x80000001005BDC60);
    uint64_t v55 = *(void *)(v52 + 16);
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
    }
    else
    {
      LOBYTE(v5) = v53;
      if (*(void *)(v52 + 24) < v57)
      {
        sub_100523440(v57, isUniquelyReferenced_nonNull_native);
        uint64_t v52 = v98;
        unint64_t v58 = sub_100016D20(0xD000000000000015, 0x80000001005BDC60);
        if ((v5 & 1) != (v59 & 1)) {
          goto LABEL_47;
        }
        unint64_t v54 = v58;
        goto LABEL_20;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_20:
        uint64_t *v15 = v52;
        swift_bridgeObjectRelease();
        char v60 = (void *)*v15;
        swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          __int16 v61 = sub_100332FFC();
          sub_10052AE90(v54, 0xD000000000000015, 0x80000001005BDC60, v61 & 0x101, v60);
        }
        *(unsigned char *)(v60[7] + 2 * v54) = 1;
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v26 = sub_1003341A0;
        if (v100 != 1)
        {
          sub_10023C7B4((uint64_t)sub_1003341A0);
          __int16 v62 = sub_100333014;
          goto LABEL_26;
        }
        uint64_t v25 = sub_100333014;
        uint64_t v4 = v47;
        uint64_t v5 = v91;
        uint64_t v3 = v97;
        if ((v100 & 0x100) == 0)
        {
LABEL_5:
          uint64_t v88 = v26;
          uint64_t v89 = v25;
          uint64_t v97 = v3;
          v27 = v95;
          static Logger.sql.getter();
          v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = v4;
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            v99[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v31 = 136446210;
            uint64_t v90 = v31 + 4;
            uint64_t v98 = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "Checking if %{public}s DB contents needs to be prepared for first use after daemon launch", v31, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v4 = v30;
            swift_slowDealloc();

            uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v95, v30);
          }
          else
          {

            uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
            uint64_t v33 = v32(v27, v4);
          }
          __chkstk_darwin(v33);
          sub_10031B4CC((uint64_t)nullsub_1, (uint64_t)(&v87 - 4));
          if (v2)
          {
            sub_10023C7B4((uint64_t)v88);
            return sub_10023C7B4((uint64_t)v89);
          }
          uint64_t v91 = v5;
          v65 = v93;
          static Logger.sql.getter();
          v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            uint64_t v90 = (uint8_t *)v4;
            BOOL v69 = (uint8_t *)v68;
            uint64_t v70 = swift_slowAlloc();
            v94 = v15;
            v99[0] = v70;
            *(_DWORD *)BOOL v69 = 136446210;
            uint64_t v98 = sub_1000143F4(0xD000000000000015, 0x80000001005BDC60, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v66, v67, "%{public}s DB contents are prepared for first use after daemon launch", v69, 0xCu);
            swift_arrayDestroy();
            uint64_t v15 = v94;
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v71 = (uint64_t)v90;
            v72 = v65;
          }
          else
          {

            v72 = v65;
            uint64_t v71 = v4;
          }
          v32(v72, v71);
          HIBYTE(v100) = 1;
          uint64_t v73 = swift_allocObject();
          *(void *)(v73 + 16) = &v100;
          swift_beginAccess();
          uint64_t v74 = swift_allocObject();
          *(void *)(v74 + 16) = sub_1003341A4;
          *(void *)(v74 + 24) = v73;
          char v75 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v98 = *v15;
          uint64_t v76 = v98;
          uint64_t v77 = v15;
          uint64_t *v15 = 0x8000000000000000;
          unint64_t v79 = sub_100016D20(0xD000000000000015, 0x80000001005BDC60);
          uint64_t v80 = *(void *)(v76 + 16);
          BOOL v81 = (v78 & 1) == 0;
          uint64_t v82 = v80 + v81;
          if (__OFADD__(v80, v81))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v15) = v78;
            if (*(void *)(v76 + 24) < v82)
            {
              sub_100523440(v82, v75);
              uint64_t v76 = v98;
              unint64_t v83 = sub_100016D20(0xD000000000000015, 0x80000001005BDC60);
              if ((v15 & 1) == (v84 & 1))
              {
                unint64_t v79 = v83;
LABEL_40:
                uint64_t *v77 = v76;
                swift_bridgeObjectRelease();
                char v85 = (void *)*v77;
                swift_bridgeObjectRetain();
                if ((v15 & 1) == 0)
                {
                  __int16 v86 = sub_100333054();
                  sub_10052AE90(v79, 0xD000000000000015, 0x80000001005BDC60, v86 & 0x101, v85);
                }
                *(unsigned char *)(v85[7] + 2 * v79 + 1) = 1;
                swift_endAccess();
                swift_bridgeObjectRelease();
                sub_10023C7B4((uint64_t)v88);
                sub_10023C7B4((uint64_t)v89);
                v64 = sub_100333014;
                __int16 v63 = sub_1003341A4;
                goto LABEL_27;
              }
LABEL_47:
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            if (v75) {
              goto LABEL_40;
            }
          }
          sub_10052B650();
          uint64_t v76 = v98;
          goto LABEL_40;
        }
LABEL_24:
        sub_10023C7B4((uint64_t)v26);
        __int16 v62 = v25;
LABEL_26:
        sub_10023C7B4((uint64_t)v62);
        __int16 v63 = 0;
        v64 = 0;
LABEL_27:
        sub_10023C7B4((uint64_t)v63);
        return sub_10023C7B4((uint64_t)v64);
      }
    }
    sub_10052B650();
    uint64_t v52 = v98;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_10031B02C(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B094(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B0F0(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B158(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B1C0(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B22C(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B294(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B2F8(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B368(void *a1)
{
  return sub_1004A7F34(a1);
}

uint64_t sub_10031B3D0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (char *)v7 + *(int *)(v5 + 28);
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a2, v9);
  *uint64_t v7 = a1;
  id v10 = a1;
  sub_10043CAA0();
  return sub_1003337F8((uint64_t)v7, type metadata accessor for LicenseStorageDatabaseTransaction);
}

uint64_t sub_10031B4CC(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_10033307C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_1006411E0;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v11)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  if (v17)
  {
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_1002548E8((uint64_t)v16, v17);
  }
  return swift_release();
}

uint64_t sub_10031B718(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  char v17 = v5;
  char v18 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v17;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_10033307C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641B18;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v11)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  char v14 = (char)v17;
  if (v18)
  {
    aBlock[0] = v17;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_1002548E8((uint64_t)v17, v18);
    return swift_release();
  }
  swift_release();
  return v14 & 1;
}

uint64_t sub_10031B978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1001C3A08();
  uint64_t v7 = (void *)swift_allocError();
  *(void *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = 1;
  char v20 = v7;
  char v22 = 1;
  uint64_t v9 = *(void **)(v3 + 24);
  id v10 = (void *)swift_allocObject();
  v10[2] = &v20;
  v10[3] = a1;
  void v10[4] = a2;
  unsigned int v11 = (void *)swift_allocObject();
  v11[2] = sub_100333970;
  v11[3] = v10;
  v19[4] = sub_1003342C0;
  v19[5] = v11;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = (id)1107296256;
  v19[2] = sub_100321118;
  v19[3] = &unk_100641C80;
  id v12 = _Block_copy(v19);
  swift_retain();
  swift_release();
  v19[0] = 0;
  unsigned int v13 = [v9 performTransaction:v12 error:v19];
  _Block_release(v12);
  id v14 = v19[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v13)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v16 = v20;
  if (v22)
  {
    v19[0] = v20;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_100333CC0((uint64_t)v20, v21, v22, (uint64_t (*)(void))sub_10018AE44);
    return swift_release();
  }
  uint64_t v18 = v21;
  uint64_t result = swift_release();
  *a3 = v16;
  a3[1] = v18;
  return result;
}

void *sub_10031BBF4(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333EA4;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_1006423D8;
  id v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333EC0(v16[0], v16[1], v16[2], v16[3], v17);
  swift_release();
  return v9;
}

void *sub_10031BE6C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333244;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_100641528;
  id v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031C0E8(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003340F8;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642108;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_10031C35C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333E04;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_100642360;
  id v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_release);
  swift_release();
  return v9;
}

uint64_t sub_10031C5D8(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v18 = v5;
  char v19 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v18;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_10033307C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641758;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    char v14 = (char)v18;
    if ((v19 & 1) == 0)
    {
      swift_release();
      char v15 = v14 & 1;
      return v15 & 1;
    }
    aBlock[0] = v18;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1002548E8((uint64_t)v18, v19);
  swift_release();
  return v15 & 1;
}

void *sub_10031C83C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003336FC;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641D98;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031CAB0(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003336FC;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641A28;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_release);
  swift_release();
  return v9;
}

uint64_t sub_10031CD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = sub_1000172F8(&qword_1006607B8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (id *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  unsigned int v11 = (uint64_t *)((char *)&v22 - v10);
  sub_1001C3A08();
  uint64_t v12 = swift_allocError();
  *(void *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(unsigned char *)(v13 + 32) = 1;
  *unsigned int v11 = v12;
  swift_storeEnumTagMultiPayload();
  char v14 = *(void **)(v3 + 24);
  char v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = a1;
  v15[4] = a2;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v16[2] = sub_100333CE0;
  v16[3] = v15;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642090;
  char v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v18 = [v14 performTransaction:v17 error:aBlock];
  _Block_release(v17);
  id v19 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v18)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_1006607B8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    aBlock[0] = *v9;
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_10001729C((uint64_t)v11, &qword_1006607B8);
    return swift_release();
  }
  sub_10001733C((uint64_t)v9, v23, &qword_10065C9B0);
  sub_10001729C((uint64_t)v11, &qword_1006607B8);
  return swift_release();
}

void *sub_10031D040(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003340F4;
  v9[3] = v8;
  v15[4] = sub_100332FB8;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_1006410C8;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031D2BC(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v18 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333564;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641870;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v18 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003335AC((uint64_t)v16, v17, v18);
  swift_release();
  return v9;
}

void *sub_10031D528(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333608;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_100641988;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_10031D7A4(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v18 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333B2C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_1006421F8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v18 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003335AC((uint64_t)v16, v17, v18);
  swift_release();
  return v9;
}

void *sub_10031DA10(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003340FC;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_100642270;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031DC8C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003340F8;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_1006422E8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_10031DF00(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333418;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641640;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

uint64_t sub_10031E174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_1001C3A08();
  uint64_t v7 = (void *)swift_allocError();
  *(void *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 32) = 1;
  char v20 = v7;
  char v22 = 1;
  uint64_t v9 = *(void **)(v3 + 24);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = &v20;
  v10[3] = a1;
  void v10[4] = a2;
  unsigned int v11 = (void *)swift_allocObject();
  v11[2] = sub_100333CA4;
  v11[3] = v10;
  v19[4] = sub_1003342C0;
  v19[5] = v11;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = (id)1107296256;
  v19[2] = sub_100321118;
  v19[3] = &unk_100642018;
  id v12 = _Block_copy(v19);
  swift_retain();
  swift_release();
  v19[0] = 0;
  unsigned int v13 = [v9 performTransaction:v12 error:v19];
  _Block_release(v12);
  id v14 = v19[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v13)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v16 = v20;
  if (v22)
  {
    v19[0] = v20;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_100333CC0((uint64_t)v20, v21, v22, (uint64_t (*)(void))sub_100013510);
    return swift_release();
  }
  uint64_t v18 = v21;
  uint64_t result = swift_release();
  *a3 = v16;
  a3[1] = v18;
  return result;
}

void *sub_10031E3F0(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v18 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333B2C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641E88;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v18 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003335AC((uint64_t)v16, v17, v18);
  swift_release();
  return v9;
}

void *sub_10031E65C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003340FC;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_100641E10;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100333E60(v16[0], v16[1], v17, (uint64_t (*)(uint64_t))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031E8D8(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333D4C;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642180;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1002548E8((uint64_t)v16, v17);
  swift_release();
  return v9;
}

uint64_t sub_10031EB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = sub_1000172F8(&qword_100660868);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (id *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  unsigned int v11 = (uint64_t *)((char *)&v22 - v10);
  sub_1001C3A08();
  uint64_t v12 = swift_allocError();
  *(void *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(unsigned char *)(v13 + 32) = 1;
  *unsigned int v11 = v12;
  swift_storeEnumTagMultiPayload();
  id v14 = *(void **)(v3 + 24);
  char v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = a1;
  v15[4] = a2;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v16[2] = sub_100333F60;
  v16[3] = v15;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_1006424C8;
  char v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v18 = [v14 performTransaction:v17 error:aBlock];
  _Block_release(v17);
  id v19 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v18)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_100660868);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    aBlock[0] = *v9;
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_10001729C((uint64_t)v11, &qword_100660868);
    return swift_release();
  }
  sub_10001733C((uint64_t)v9, v23, &qword_100660870);
  sub_10001729C((uint64_t)v11, &qword_100660868);
  return swift_release();
}

uint64_t sub_10031EE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = sub_1000172F8(&qword_100660880);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (id *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  unsigned int v11 = (uint64_t *)((char *)&v22 - v10);
  sub_1001C3A08();
  uint64_t v12 = swift_allocError();
  *(void *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(unsigned char *)(v13 + 32) = 1;
  *unsigned int v11 = v12;
  swift_storeEnumTagMultiPayload();
  id v14 = *(void **)(v3 + 24);
  char v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = a1;
  v15[4] = a2;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v16[2] = sub_100333FAC;
  v16[3] = v15;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642540;
  char v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v18 = [v14 performTransaction:v17 error:aBlock];
  _Block_release(v17);
  id v19 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v18)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_100660880);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    aBlock[0] = *v9;
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_10001729C((uint64_t)v11, &qword_100660880);
    return swift_release();
  }
  sub_10001733C((uint64_t)v9, v23, &qword_100660888);
  sub_10001729C((uint64_t)v11, &qword_100660880);
  return swift_release();
}

uint64_t sub_10031F170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v6 = sub_1000172F8(&qword_100660788);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (id *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  unsigned int v11 = (uint64_t *)((char *)&v22 - v10);
  sub_1001C3A08();
  uint64_t v12 = swift_allocError();
  *(void *)uint64_t v13 = 1;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(unsigned char *)(v13 + 32) = 1;
  *unsigned int v11 = v12;
  swift_storeEnumTagMultiPayload();
  id v14 = *(void **)(v3 + 24);
  char v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = a1;
  v15[4] = a2;
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v16[2] = sub_100333B9C;
  v16[3] = v15;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641F00;
  char v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v18 = [v14 performTransaction:v17 error:aBlock];
  _Block_release(v17);
  id v19 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v18)
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_6;
  }
  sub_100017238((uint64_t)v11, (uint64_t)v9, &qword_100660788);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    aBlock[0] = *v9;
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
LABEL_6:
    sub_10001729C((uint64_t)v11, &qword_100660788);
    return swift_release();
  }
  sub_10001733C((uint64_t)v9, v23, &qword_100660790);
  sub_10001729C((uint64_t)v11, &qword_100660788);
  return swift_release();
}

void *sub_10031F48C(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100334100;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642630;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_10031F700(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100334050;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_1006426A8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_10031F974(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333868;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641B90;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_release);
  swift_release();
  return v9;
}

void *sub_10031FBE8(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  v16[0] = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333FF8;
  v9[3] = v8;
  v15[4] = sub_1003342C0;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = (id)1107296256;
  v15[2] = sub_100321118;
  v15[3] = &unk_1006425B8;
  uint64_t v10 = _Block_copy(v15);
  swift_retain();
  swift_release();
  v15[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:v15];
  _Block_release(v10);
  id v12 = v15[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = (void *)v16[0];
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    v15[0] = (id)v16[0];
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100334014(v16[0], (void *)v16[1], v17);
  swift_release();
  return v9;
}

void *sub_10031FE50(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100334100;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642450;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_1003200C4(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100334094;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100642720;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  swift_release();
  return v9;
}

void *sub_100320338(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_100333728;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641AA0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1002548E8((uint64_t)v16, v17);
  swift_release();
  return v9;
}

void *sub_100320598(uint64_t a1, uint64_t a2)
{
  sub_1001C3A08();
  uint64_t v5 = (void *)swift_allocError();
  *(void *)uint64_t v6 = 1;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 1;
  uint64_t v16 = v5;
  char v17 = 1;
  uint64_t v7 = *(void **)(v2 + 24);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = &v16;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_1003338E0;
  v9[3] = v8;
  aBlock[4] = sub_1003342C0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100321118;
  aBlock[3] = &unk_100641C08;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = [v7 performTransaction:v10 error:aBlock];
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v11)
  {
    uint64_t v9 = v16;
    if ((v17 & 1) == 0)
    {
      swift_release();
      return v9;
    }
    aBlock[0] = v16;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    swift_willThrowTypedImpl();
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_1003340DC((uint64_t)v16, v17, (uint64_t (*)(void))&_swift_release);
  swift_release();
  return v9;
}

uint64_t sub_10032080C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v7);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  sub_1002548E8(v4, v5);
  return 1;
}

uint64_t sub_100320890(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr))
{
  a3(v11);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  long long v9 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 32) = 0;
  sub_100333EC0(v4, v5, v6, v7, v8);
  return 1;
}

uint64_t sub_100320928(uint64_t a1, uint64_t *a2, void (*a3)(long long *__return_ptr), uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a3(&v13);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = *((unsigned __int8 *)a2 + 16);
  *(_OWORD *)a2 = v13;
  *((unsigned char *)a2 + 16) = 0;
  a6(v9, v10, v11, a5);
  return 1;
}

uint64_t sub_1003209CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v7);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  sub_1003340DC(v4, v5, (uint64_t (*)(void))&_swift_release);
  return 1;
}

uint64_t sub_100320A78(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr))
{
  a3(&v8);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a2 = v8;
  *(unsigned char *)(a2 + 16) = 0;
  sub_100333E60(v4, v5, v6, (uint64_t (*)(uint64_t))&_swift_release);
  return 1;
}

uint64_t sub_100320B24(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v7);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  sub_1003340DC(v4, v5, (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  return 1;
}

uint64_t sub_100320BD0(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr))
{
  a3(&v8);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a2 = v8;
  *(unsigned char *)(a2 + 16) = 0;
  sub_100333CC0(v4, v5, v6, (uint64_t (*)(void))sub_100013510);
  return 1;
}

uint64_t sub_100320C7C(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  a3(&v12);
  unsigned __int8 v7 = v13;
  uint64_t v8 = *a2;
  uint64_t v9 = *((unsigned __int8 *)a2 + 9);
  *a2 = v12;
  uint64_t v10 = *((unsigned __int8 *)a2 + 8);
  *((_WORD *)a2 + 4) = v7;
  a5(v8, v10, v9);
  return 1;
}

uint64_t sub_100320D1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = sub_1000172F8(a5);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(a1);
  swift_storeEnumTagMultiPayload();
  sub_10018AD2C((uint64_t)v11, a2, a5);
  return 1;
}

uint64_t sub_100320E1C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v6);
  uint64_t v4 = v6;
  sub_1003340DC(*(void *)a2, *(unsigned char *)(a2 + 8), (uint64_t (*)(void))&_swift_bridgeObjectRelease);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t sub_100320EC8(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v7);
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  sub_100334014(*(void *)a2, *(void **)(a2 + 8), *(unsigned char *)(a2 + 16));
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = 0;
  return 1;
}

uint64_t sub_100320F4C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, uint64_t (*a5)(void))
{
  a3(&v9);
  uint64_t v7 = v9;
  sub_1003340DC(*(void *)a2, *(unsigned char *)(a2 + 8), a5);
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t sub_100320FDC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, void (*a5)(void, void))
{
  a3(&v9);
  uint64_t v7 = v9;
  a5(*(void *)a2, *(unsigned __int8 *)(a2 + 8));
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t sub_10032106C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  a3(&v6);
  uint64_t v4 = v6;
  sub_1003340DC(*(void *)a2, *(unsigned char *)(a2 + 8), (uint64_t (*)(void))&_swift_release);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

uint64_t sub_100321118(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

void sub_10032115C()
{
  uint64_t v1 = self;
  id v2 = [v1 defaultCenter];
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 addObserver:v0 selector:"handleApplicationRegisteredNotification:" name:v3 object:0];

  id v4 = [v1 defaultCenter];
  id v5 = String._bridgeToObjectiveC()();
  [v4 addObserver:v0 selector:"handleApplicationUnregisteredNotification:" name:v5 object:0];
}

void sub_100321288()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = sub_1003217D4();
  static Logger.library.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  os_log_type_t v29 = v9;
  uint64_t v30 = v4;
  if (v15)
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v27 = v0;
    uint64_t v31 = (uint64_t)v12;
    uint64_t v32 = v17;
    uint64_t v28 = v5;
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v26 = v16 + 4;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10000DDFC((unint64_t *)&qword_10065D350, (uint64_t *)&unk_10065C5D0);
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v31 = sub_1000143F4(v18, v19, &v32);
    uint64_t v5 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received application registered notification for %{public}s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v27;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = sub_100332830(v20);
  swift_bridgeObjectRelease();
  if (*(void *)(v21 + 16))
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    uint64_t v23 = (uint64_t)v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v30, 1, 1, v22);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0;
    *(void *)(v24 + 24) = 0;
    *(unsigned char *)(v24 + 32) = 1;
    *(void *)(v24 + 40) = v21;
    *(void *)(v24 + 48) = v1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100017544(v23, (uint64_t)&unk_1006606D0, v24);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v25 = sub_10054E494(0xD000000000000012, 0x80000001005B75E0, v12);
  swift_bridgeObjectRelease();
  if (v25) {
    sub_10054F3DC(0xD000000000000012, 0x80000001005B75E0);
  }
}

void *sub_1003217D4()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v6 = 0u;
    long long v7 = 0u;
LABEL_10:
    sub_10001729C((uint64_t)&v6, (uint64_t *)&unk_10065C9C0);
    return _swiftEmptyArrayStorage;
  }
  uint64_t v1 = v0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_100451EDC((uint64_t)v5), (v3 & 1) != 0))
  {
    sub_1000144C8(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10025C22C((uint64_t)v5);
  if (!*((void *)&v7 + 1)) {
    goto LABEL_10;
  }
  sub_1000172F8((uint64_t *)&unk_10065C5D0);
  if (swift_dynamicCast()) {
    return (void *)v5[0];
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003218F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1003217D4();
  static Logger.library.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v25 = v5;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v27 = (uint64_t)v9;
    uint64_t v28 = v24;
    uint64_t v26 = v4;
    *(_DWORD *)uint64_t v13 = 136446210;
    uint64_t v23 = v13 + 4;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10000DDFC((unint64_t *)&qword_10065D350, (uint64_t *)&unk_10065C5D0);
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v27 = sub_1000143F4(v14, v15, &v28);
    id v4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received application unregistered notification for %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = sub_100332830(v16);
  swift_bridgeObjectRelease();
  if (*(void *)(v17 + 16))
  {
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(unsigned char *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = v17;
    *(void *)(v19 + 48) = v1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100017544((uint64_t)v4, (uint64_t)&unk_100660640, v19);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  void v21[4] = v9;
  v21[5] = v1;
  swift_retain();
  sub_1000163AC((uint64_t)v4, (uint64_t)&unk_100660650, (uint64_t)v21);
  swift_release();
  return sub_1003C5D1C();
}

uint64_t sub_100321D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  sub_1000172F8(&qword_10065E410);
  v5[17] = swift_task_alloc();
  v5[18] = type metadata accessor for DDMDeclarationStatusTemplate(0);
  v5[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ManagedAppStatus.State();
  v5[20] = v6;
  v5[21] = *(void *)(v6 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DMCAppsScope();
  v5[24] = v7;
  v5[25] = *(void *)(v7 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DMCAppsClient();
  v5[27] = v8;
  v5[28] = *(void *)(v8 - 8);
  v5[29] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v5[30] = swift_task_alloc();
  return _swift_task_switch(sub_100321F30, 0, 0);
}

uint64_t sub_100321F30()
{
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = v2[2];
  *(void *)(v0 + 248) = v3;
  if (v3)
  {
    *(void *)(v0 + 256) = *(void *)(v1 + 64);
    *(_DWORD *)(v0 + 488) = enum case for DMCAppsScope.user(_:);
    *(_DWORD *)(v0 + 492) = enum case for DMCAppsScope.system(_:);
    *(_DWORD *)(v0 + 496) = enum case for ManagedAppStatus.State.failed(_:);
    *(_DWORD *)(v0 + 500) = enum case for ManagedAppStatus.State.optional(_:);
    *(void *)(v0 + 296) = 0;
    uint64_t v4 = v2[4];
    *(void *)(v0 + 304) = v4;
    unint64_t v5 = v2[5];
    *(void *)(v0 + 312) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100553AB0(v4, v5);
    uint64_t v6 = (void *)sub_100551B90();
    uint64_t v7 = sub_100553778(v4, v5, 1, v6);
    swift_bridgeObjectRelease();
    sub_100551F50(v7);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 128);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v13 + 32);
    *(void *)(v0 + 320) = v14;
    uint64_t v15 = *(void *)(v14 + 168);
    uint64_t v16 = type metadata accessor for TaskPriority();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, v16);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    void v18[4] = v15;
    v18[5] = v4;
    v18[6] = v5;
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v20 = *(void *)(v0 + 240);
    if (v19 == 1)
    {
      sub_10001729C(*(void *)(v0 + 240), &qword_10065B220);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
      if (v18[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v23 = v22;
        swift_unknownObjectRelease();
        if (v23 | v21)
        {
          *(void *)(v0 + 88) = 0;
          *(void *)(v0 + 96) = 0;
          *(void *)(v0 + 104) = v21;
          *(void *)(v0 + 112) = v23;
        }
      }
    }
    uint64_t v24 = *(void *)(v0 + 128);
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v25 = *(void *)(v24 + 24);
    *(void *)(v0 + 328) = v25;
    return _swift_task_switch(sub_100322520, v25, 0);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 24);
    *(void *)(v0 + 264) = v8;
    uint64_t v9 = swift_task_alloc();
    *(void *)(v0 + 272) = v9;
    *(void *)(v9 + 16) = v2;
    uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660668 + dword_100660668);
    swift_retain();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1003223D0;
    return v26((uint64_t)v26, (uint64_t)sub_100332F40, v9, v8);
  }
}

uint64_t sub_1003223D0()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10032408C;
  }
  else {
    uint64_t v2 = sub_100323D84;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100322520()
{
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = *(void *)(v0[41] + 112);
  v0[42] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[43] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[44] = v5;
  *(void *)(v5 + 16) = sub_100332EEC;
  *(void *)(v5 + 24) = v4;
  uint64_t v8 = (char *)&dword_100660660 + dword_100660660;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[45] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10032263C;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, uint64_t *@<X8>), uint64_t, uint64_t))v8)(sub_100332F08, v5, v3);
}

uint64_t sub_10032263C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[46] = a2;
  v5[47] = v2;
  swift_task_dealloc();
  uint64_t v6 = v5[41];
  if (v2)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_100322B48;
  }
  else
  {
    v5[48] = a1;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = sub_1003227E8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1003227E8()
{
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100322850, 0, 0);
}

uint64_t sub_100322850()
{
  uint64_t v11 = *(void *)(v0 + 384);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 368);
  unsigned int v2 = *(_DWORD *)(v0 + 492);
  unsigned int v3 = *(_DWORD *)(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 192);
  swift_retain();
  char v7 = sub_10031364C(9, v1, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_10024204C);
  swift_release();
  if (v7) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = v2;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v5, v8, v6);
  DMCAppsClient.init(scope:)();
  *(void *)(v0 + 40) = sub_1000172F8((uint64_t *)&unk_1006666B0);
  *(void *)(v0 + 48) = swift_getOpaqueTypeConformance2();
  *(void *)(v0 + 56) = swift_getOpaqueTypeConformance2();
  *(void *)(v0 + 64) = swift_getOpaqueTypeConformance2();
  *(void *)(v0 + 72) = swift_getOpaqueTypeConformance2();
  *(void *)(v0 + 80) = swift_getOpaqueTypeConformance2();
  sub_10019CE94((uint64_t *)(v0 + 16));
  sub_10050B3CC(v11, v1);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100322A2C;
  return DMCAppsClient.didUninstall(_:)(v0 + 16);
}

uint64_t sub_100322A2C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unsigned int v3 = sub_1003233FC;
  }
  else
  {
    sub_100014524(v2 + 16);
    unsigned int v3 = sub_100323028;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100322B48()
{
  swift_errorRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100322BBC, 0, 0);
}

uint64_t sub_100322BBC()
{
  uint64_t v1 = v0[37] + 1;
  if (v1 == v0[31])
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = v0[15];
    uint64_t v3 = *(void *)(*(void *)(v0[16] + 48) + 24);
    v0[33] = v3;
    uint64_t v4 = swift_task_alloc();
    v0[34] = v4;
    *(void *)(v4 + 16) = v2;
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660668 + dword_100660668);
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[35] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1003223D0;
    return v25((uint64_t)v25, (uint64_t)sub_100332F40, v4, v3);
  }
  else
  {
    v0[37] = v1;
    uint64_t v7 = v0[15] + 16 * v1;
    uint64_t v8 = *(void *)(v7 + 32);
    v0[38] = v8;
    unint64_t v9 = *(void *)(v7 + 40);
    v0[39] = v9;
    swift_bridgeObjectRetain();
    sub_100553AB0(v8, v9);
    uint64_t v10 = (void *)sub_100551B90();
    uint64_t v11 = sub_100553778(v8, v9, 1, v10);
    swift_bridgeObjectRelease();
    sub_100551F50(v11);
    uint64_t v12 = v0[30];
    uint64_t v13 = v0[16];
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v13 + 32);
    v0[40] = v14;
    uint64_t v15 = *(void *)(v14 + 168);
    uint64_t v16 = type metadata accessor for TaskPriority();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, 1, 1, v16);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    void v18[4] = v15;
    v18[5] = v8;
    v18[6] = v9;
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v19 = v0[30];
    if (v8 == 1)
    {
      sub_10001729C(v0[30], &qword_10065B220);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
      if (v18[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v22 = v21;
        swift_unknownObjectRelease();
        if (v22 | v20)
        {
          v0[11] = 0;
          v0[12] = 0;
          v0[13] = v20;
          v0[14] = v22;
        }
      }
    }
    uint64_t v23 = v0[16];
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v24 = *(void *)(v23 + 24);
    v0[41] = v24;
    return _swift_task_switch(sub_100322520, v24, 0);
  }
}

uint64_t sub_100323028()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 320);
  unsigned int v3 = *(_DWORD *)(v0 + 500);
  unsigned int v4 = *(_DWORD *)(v0 + 496);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  swift_retain();
  char v8 = sub_10031364C(6, v1, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_100242240);
  swift_release();
  if ((v8 == 2) | v8 & 1) {
    uint64_t v9 = v3;
  }
  else {
    uint64_t v9 = v4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v5, v9, v6);
  uint64_t v10 = *(void *)(v2 + 152);
  *(void *)(v0 + 408) = v10;
  swift_retain();
  return _swift_task_switch(sub_10032314C, v10, 0);
}

uint64_t sub_10032314C()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[46];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  unsigned int v4 = *(void (**)(char *, uint64_t, uint64_t))(v0[21] + 16);
  v4((char *)v0[22], v0[23], v0[20]);
  uint64_t v5 = v3 + *(int *)(v2 + 28);
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56);
  v7(v5, 1, 1, updated);
  swift_retain_n();
  uint64_t v8 = sub_1003129B0(5, v1, (uint64_t (*)(uint64_t))sub_100416498);
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  if (!v10)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v25 = v7;
  uint64_t v26 = updated;
  uint64_t v27 = v4;
  uint64_t v12 = (os_unfair_lock_s *)v0[46];
  uint64_t v13 = v0[19];
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v10;
  swift_retain();
  uint64_t v14 = sub_1003129B0(4, v12, (uint64_t (*)(uint64_t))sub_100416498);
  uint64_t v16 = v15;
  uint64_t result = swift_release();
  if (!v16)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v18 = v0[21];
  uint64_t v17 = v0[22];
  uint64_t v19 = (uint64_t *)v0[19];
  uint64_t v20 = v0[20];
  uint64_t v21 = v0[18];
  *uint64_t v19 = v14;
  v19[1] = v16;
  v27((char *)v19 + *(int *)(v21 + 24), v17, v20);
  sub_10001729C(v5, &qword_10065BD00);
  v25(v5, 1, 1, v26);
  swift_release();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v0[52] = v22;
  v0[53] = (v18 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v22(v17, v20);
  *(uint64_t *)((char *)v19 + *(int *)(v21 + 32)) = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v23 = swift_task_alloc();
  v0[54] = v23;
  *(void *)(v23 + 16) = v19;
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660678 + dword_100660678);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[55] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_1003234F8;
  return v28((uint64_t)sub_1001C62C8, v23);
}

uint64_t sub_1003233FC()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  sub_100014524((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1003234F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  *(void *)(*v3 + 448) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 408);
    uint64_t v7 = sub_100323638;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 408);
    *(void *)(v5 + 456) = a2;
    swift_task_dealloc();
    uint64_t v7 = sub_1003237DC;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100323638()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_task_dealloc();
  sub_1003337F8(v1, type metadata accessor for DDMDeclarationStatusTemplate);
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_1003236E0, 0, 0);
}

uint64_t sub_1003236E0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[52];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[20];
  swift_release();
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1003237DC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_retain();
  char v3 = sub_10031364C(9, v1, (uint64_t (*)(uint64_t))sub_100416498, (uint64_t (*)(void *, uint64_t))sub_10024204C);
  swift_release();
  sub_100249CF0(v3 & 1);
  sub_1003337F8(v2, type metadata accessor for DDMDeclarationStatusTemplate);
  swift_release();
  swift_release();
  return _swift_task_switch(sub_1003238D8, 0, 0);
}

uint64_t sub_1003238D8()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[52];
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[20];
  swift_release();
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v7 = v0[37] + 1;
  if (v7 == v0[31])
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = v0[15];
    uint64_t v9 = *(void *)(*(void *)(v0[16] + 48) + 24);
    v0[33] = v9;
    uint64_t v10 = swift_task_alloc();
    v0[34] = v10;
    *(void *)(v10 + 16) = v8;
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660668 + dword_100660668);
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[35] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1003223D0;
    return v34((uint64_t)v34, (uint64_t)sub_100332F40, v10, v9);
  }
  else
  {
    uint64_t v13 = v0[56];
    v0[37] = v7;
    uint64_t v14 = v0[15] + 16 * v7;
    uint64_t v15 = *(void *)(v14 + 32);
    v0[38] = v15;
    unint64_t v16 = *(void *)(v14 + 40);
    v0[39] = v16;
    swift_bridgeObjectRetain();
    sub_100553AB0(v15, v16);
    uint64_t v17 = (void *)sub_100551B90();
    uint64_t v18 = sub_100553778(v15, v16, 1, v17);
    swift_bridgeObjectRelease();
    sub_100551F50(v18);
    if (v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = (uint64_t (*)(void))v0[1];
      return v19();
    }
    else
    {
      uint64_t v20 = v0[30];
      uint64_t v21 = v0[16];
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void *)(v21 + 32);
      v0[40] = v22;
      uint64_t v23 = *(void *)(v22 + 168);
      uint64_t v24 = type metadata accessor for TaskPriority();
      uint64_t v25 = *(void *)(v24 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v20, 1, 1, v24);
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = 0;
      v26[3] = 0;
      v26[4] = v23;
      v26[5] = v15;
      v26[6] = v16;
      int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v20, 1, v24);
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v28 = v0[30];
      if (v27 == 1)
      {
        sub_10001729C(v0[30], &qword_10065B220);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
        if (v26[2])
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v31 = v30;
          swift_unknownObjectRelease();
          if (v31 | v29)
          {
            v0[11] = 0;
            v0[12] = 0;
            v0[13] = v29;
            v0[14] = v31;
          }
        }
      }
      uint64_t v32 = v0[16];
      swift_task_create();
      swift_release();
      swift_release();
      uint64_t v33 = *(void *)(v32 + 24);
      v0[41] = v33;
      return _swift_task_switch(sub_100322520, v33, 0);
    }
  }
}

uint64_t sub_100323D84()
{
  uint64_t v1 = v0[15];
  sub_100017238(*(void *)(v0[16] + 32) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage, v0[17], &qword_10065E410);
  uint64_t v2 = swift_task_alloc();
  v0[58] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v5 = (uint64_t (*)(void))((char *)&dword_100660670 + dword_100660670);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[59] = v3;
  void *v3 = v0;
  v3[1] = sub_100323E80;
  return v5();
}

uint64_t sub_100323E80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 480) = v0;
  swift_task_dealloc();
  sub_10001729C(*(void *)(v2 + 136), &qword_10065E410);
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100324148;
  }
  else {
    uint64_t v3 = sub_100323FD8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100323FD8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10032408C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100324148()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void **sub_100324204(void **result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v20 = *result;
    type metadata accessor for MarketplaceUpdateEntity.Entity();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v18 = sub_10000DDFC((unint64_t *)&qword_10065C3D8, &qword_10065C3D0);
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40);
    do
    {
      uint64_t v21 = v2;
      uint64_t v5 = (uint64_t)*(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v24 = (void *)sub_1000172F8(&qword_10065C3D0);
      uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18;
      LOWORD(aBlock) = 2;
      *((void *)&aBlock + 1) = v5;
      uint64_t v23 = v6;
      sub_1000172F8(&qword_10065C3E0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
      sub_10018B164(&aBlock, inited + 32);
      int v27 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n();
      id v8 = v20;
      sub_10055595C(inited);
      uint64_t v9 = v27;
      int v27 = 0;
      id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:ObjCClassFromMetadata memoryEntityClass:0];
      uint64_t v11 = (void *)sub_10043DAEC(0, v9);
      [v10 setPredicate:v11];

      id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:v8 descriptor:v10];
      uint64_t v13 = (void *)swift_allocObject();
      v13[2] = &v27;
      v13[3] = sub_100332380;
      void v13[4] = 0;
      v13[5] = v8;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = sub_1001A2178;
      *(void *)(v14 + 24) = v13;
      uint64_t v25 = sub_100334198;
      uint64_t v26 = v14;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v23 = sub_100248D44;
      uint64_t v24 = &unk_100641438;
      uint64_t v15 = _Block_copy(&aBlock);
      id v16 = v8;
      swift_retain();
      swift_release();
      [v12 enumeratePersistentIDsUsingBlock:v15];

      _Block_release(v15);
      LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v15) {
        __break(1u);
      }
      uint64_t v17 = v27;

      swift_bridgeObjectRelease();
      swift_release();
      if (v17)
      {
        [v17 deleteFromDatabase];
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 2;
      uint64_t v2 = v21 - 1;
    }
    while (v21 != 1);
    return (void **)swift_bridgeObjectRelease();
  }
  return result;
}

void **sub_100324590(void **result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v21 = *result;
    type metadata accessor for LicenseStorageEntity.Entity();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    uint64_t v19 = sub_10000DDFC(&qword_100660690, &qword_100660688);
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40);
    do
    {
      uint64_t v22 = v2;
      uint64_t v6 = (uint64_t)*(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v25 = (void *)sub_1000172F8(&qword_100660688);
      uint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
      LOWORD(aBlock) = 1;
      *((void *)&aBlock + 1) = v6;
      uint64_t v24 = v7;
      sub_1000172F8(&qword_10065E5A0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
      sub_10018B164(&aBlock, inited + 32);
      uint64_t v28 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain_n();
      id v9 = v21;
      sub_10055597C(inited);
      id v10 = v28;
      uint64_t v28 = 0;
      id v11 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:ObjCClassFromMetadata memoryEntityClass:0];
      id v12 = (void *)sub_10043DAEC(0, v10);
      [v11 setPredicate:v12];

      id v13 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:v9 descriptor:v11];
      uint64_t v14 = (void *)swift_allocObject();
      v14[2] = &v28;
      v14[3] = sub_10043DDE8;
      void v14[4] = 0;
      v14[5] = v9;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = sub_1001A2178;
      *(void *)(v15 + 24) = v14;
      uint64_t v26 = sub_1001A2194;
      uint64_t v27 = v15;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v24 = sub_100248D44;
      uint64_t v25 = &unk_100641320;
      id v16 = _Block_copy(&aBlock);
      id v17 = v9;
      swift_retain();
      swift_release();
      [v13 enumeratePersistentIDsUsingBlock:v16];

      _Block_release(v16);
      LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v13) {
        __break(1u);
      }
      uint64_t v18 = v28;

      swift_bridgeObjectRelease();
      swift_release();
      if (v18)
      {
        id v5 = v18;
        sub_10043BA64(v5);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 2;
      uint64_t v2 = v22 - 1;
    }
    while (v22 != 1);
    return (void **)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100324938(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  a4(v8);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100324A30(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 104) = a5;
  *(void *)(v6 + 112) = a6;
  *(unsigned char *)(v6 + 472) = a4;
  uint64_t v7 = sub_1000172F8(&qword_10065BDA8);
  *(void *)(v6 + 120) = v7;
  *(void *)(v6 + 128) = *(void *)(v7 - 8);
  *(void *)(v6 + 136) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AppState();
  *(void *)(v6 + 144) = v8;
  *(void *)(v6 + 152) = *(void *)(v8 - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  uint64_t updated = type metadata accessor for AppStateUpdateIdentifier();
  *(void *)(v6 + 168) = updated;
  *(void *)(v6 + 176) = *(void *)(updated - 8);
  *(void *)(v6 + 184) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v6 + 192) = v10;
  *(void *)(v6 + 200) = *(void *)(v10 - 8);
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100324C48, 0, 0);
}

uint64_t sub_100324C48()
{
  uint64_t v108 = v0;
  static Logger.library.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v103 = *(void *)(v0 + 192);
    uint64_t v105 = *(void *)(v0 + 216);
    os_log_type_t type = v2;
    int v4 = *(unsigned __int8 *)(v0 + 472);
    uint64_t v5 = swift_slowAlloc();
    v107[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    if (v4) {
      uint64_t v6 = 0x6465646461;
    }
    else {
      uint64_t v6 = 0x6465766F6D6572;
    }
    if (v4) {
      unint64_t v7 = 0xE500000000000000;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
    *(void *)(v0 + 88) = sub_1000143F4(v6, v7, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 96) = sub_1000143F4(v8, v10, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, type, "Posting state changes for %s apps: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v13 = *(void (**)(void, void))(v3 + 8);
    uint64_t v12 = v3 + 8;
    id v11 = v13;
    v13(v105, v103);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 200);
    swift_bridgeObjectRelease_n();

    id v17 = *(void (**)(void, void))(v16 + 8);
    uint64_t v12 = v16 + 8;
    id v11 = v17;
    v17(v14, v15);
  }
  *(void *)(v0 + 224) = v12;
  *(void *)(v0 + 232) = v11;
  uint64_t v18 = *(void *)(v0 + 104);
  uint64_t v19 = *(void *)(v0 + 112);
  char v20 = *(unsigned char *)(v18 + 32);
  *(unsigned char *)(v0 + 473) = v20;
  uint64_t v21 = -1;
  uint64_t v22 = -1 << v20;
  if (-(-1 << v20) < 64) {
    uint64_t v21 = ~(-1 << -(char)(-1 << v20));
  }
  unint64_t v23 = v21 & *(void *)(v18 + 56);
  *(void *)(v0 + 240) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 248) = v11;
  uint64_t v24 = (void *)swift_bridgeObjectRetain();
  if (v23)
  {
    uint64_t v25 = 0;
    unint64_t v26 = __clz(__rbit64(v23));
    uint64_t v27 = (v23 - 1) & v23;
LABEL_14:
    *(void *)(v0 + 264) = v25;
    *(void *)(v0 + 272) = v27;
    uint64_t v28 = (void *)(v24[6] + 16 * v26);
    *(void *)(v0 + 280) = *v28;
    *(void *)(v0 + 288) = v28[1];
    uint64_t v29 = *(void *)(v19 + 32);
    *(void *)(v0 + 296) = v29;
    uint64_t v30 = *(void *)(v29 + 32);
    *(void *)(v0 + 304) = v30;
    swift_bridgeObjectRetain();
    swift_retain();
    return _swift_task_switch(sub_100325880, v30, 0);
  }
  unint64_t v31 = 63 - v22;
  uint64_t v32 = (uint64_t *)(v0 + 104);
  if ((unint64_t)(63 - v22) > 0x7F)
  {
    unint64_t v33 = v24[8];
    if (v33)
    {
      uint64_t v25 = 1;
LABEL_20:
      uint64_t v27 = (v33 - 1) & v33;
      unint64_t v26 = __clz(__rbit64(v33)) + (v25 << 6);
      goto LABEL_14;
    }
    if (v31 >= 0xC0)
    {
      unint64_t v33 = v24[9];
      if (v33)
      {
        uint64_t v25 = 2;
        goto LABEL_20;
      }
      if (v31 >= 0x100)
      {
        unint64_t v33 = v24[10];
        if (v33)
        {
          uint64_t v25 = 3;
          goto LABEL_20;
        }
        if (v31 >= 0x140)
        {
          unint64_t v33 = v24[11];
          if (v33)
          {
            uint64_t v25 = 4;
          }
          else
          {
            uint64_t v34 = 0;
            uint64_t v35 = v31 >> 6;
            if (v35 <= 5) {
              uint64_t v35 = 5;
            }
            uint64_t v36 = v35 - 5;
            do
            {
              if (v36 == v34) {
                goto LABEL_36;
              }
              unint64_t v33 = v24[v34++ + 12];
            }
            while (!v33);
            uint64_t v25 = v34 + 4;
          }
          goto LABEL_20;
        }
      }
    }
  }
LABEL_36:
  char v37 = *(unsigned char *)(v0 + 472);
  swift_release();
  *(void *)(v0 + 256) = *(void *)(v19 + 16);
  sub_10056C034((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  if (v37)
  {
    typea = (_OWORD *)(v0 + 16);
    uint64_t v38 = (void **)(v0 + 72);
    uint64_t v39 = *(void *)(v0 + 104);
    uint64_t v40 = -1;
    uint64_t v41 = -1 << *(unsigned char *)(v39 + 32);
    if (-v41 < 64) {
      uint64_t v40 = ~(-1 << -(char)v41);
    }
    uint64_t v42 = v40 & *(void *)(v39 + 56);
    int64_t v104 = (unint64_t)(63 - v41) >> 6;
    swift_bridgeObjectRetain();
    int64_t v43 = 0;
    BOOL v44 = (char *)_swiftEmptyArrayStorage;
    uint64_t v45 = &type metadata for NativeDistributor;
LABEL_40:
    __int16 v100 = v44;
    *(void *)(v0 + 376) = v44;
    while (1)
    {
      while (1)
      {
        if (v42)
        {
          uint64_t v106 = (v42 - 1) & v42;
        }
        else
        {
          if (__OFADD__(v43++, 1))
          {
            __break(1u);
            goto LABEL_100;
          }
          uint64_t v48 = *v32;
          if (v43 >= v104) {
            goto LABEL_91;
          }
          uint64_t v49 = v48 + 56;
          uint64_t v50 = *(void *)(v48 + 56 + 8 * v43);
          if (!v50)
          {
            int64_t v51 = v43 + 1;
            if (v43 + 1 >= v104) {
              goto LABEL_91;
            }
            uint64_t v50 = *(void *)(v49 + 8 * v51);
            if (!v50)
            {
              int64_t v51 = v43 + 2;
              if (v43 + 2 >= v104) {
                goto LABEL_91;
              }
              uint64_t v50 = *(void *)(v49 + 8 * v51);
              if (!v50)
              {
                int64_t v51 = v43 + 3;
                if (v43 + 3 >= v104)
                {
LABEL_91:
                  swift_release();
                  uint64_t v86 = *((void *)v100 + 2);
                  *(void *)(v0 + 384) = v86;
                  if (v86)
                  {
                    uint64_t v87 = *(void *)(*(void *)(v0 + 112) + 32);
                    *(void *)(v0 + 392) = v87;
                    *(void *)(v0 + 400) = 0;
                    uint64_t v88 = *(void *)(v0 + 376);
                    uint64_t v89 = *(void *)(v0 + 256);
                    uint64_t v90 = *(void *)(v88 + 40);
                    *(void *)(v0 + 408) = v90;
                    uint64_t v91 = *(void *)(v88 + 32);
                    uint64_t v92 = *(void *)(v87 + 16);
                    *(void *)(v0 + 416) = v92;
                    uint64_t v93 = *(os_unfair_lock_s **)(v89 + 16);
                    swift_bridgeObjectRetain();
                    swift_retain();
                    uint64_t v94 = swift_task_alloc();
                    *(void *)(v94 + 16) = v91;
                    *(void *)(v94 + 24) = v90;
                    *(unsigned char *)(v94 + 32) = 0;
                    v93 += 6;
                    os_unfair_lock_lock(v93);
                    sub_100333300((void *)(v0 + 80));
                    *(void *)(v0 + 424) = 0;
                    os_unfair_lock_unlock(v93);
                    uint64_t v96 = *(void *)(v0 + 80);
                    *(void *)(v0 + 432) = v96;
                    swift_task_dealloc();
                    uint64_t v97 = (void *)swift_task_alloc();
                    *(void *)(v0 + 440) = v97;
                    v97[2] = v96;
                    v97[3] = v92;
                    v97[4] = 0;
                    v97[5] = 0;
                    uint64_t v98 = (void *)swift_task_alloc();
                    *(void *)(v0 + 448) = v98;
                    *uint64_t v98 = v0;
                    v98[1] = sub_100328090;
                    return withDiscardingTaskGroup<A>(returning:isolation:body:)();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    uint64_t v95 = *(uint64_t (**)(void))(v0 + 8);
                    return v95();
                  }
                }
                uint64_t v50 = *(void *)(v49 + 8 * v51);
                if (!v50)
                {
                  while (1)
                  {
                    int64_t v43 = v51 + 1;
                    if (__OFADD__(v51, 1)) {
                      break;
                    }
                    if (v43 >= v104) {
                      goto LABEL_91;
                    }
                    uint64_t v50 = *(void *)(v49 + 8 * v43);
                    ++v51;
                    if (v50) {
                      goto LABEL_54;
                    }
                  }
LABEL_100:
                  __break(1u);
                }
              }
            }
            int64_t v43 = v51;
          }
LABEL_54:
          uint64_t v106 = (v50 - 1) & v50;
        }
        id v52 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain();
        NSString v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        *uint64_t v38 = 0;
        id v54 = [v52 initWithBundleIdentifier:v53 allowPlaceholder:0 error:v38];

        uint64_t v55 = *v38;
        if (v54) {
          break;
        }
        id v46 = v55;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v42 = v106;
      }
      BOOL v56 = v45;
      id v57 = v55;
      id v58 = [v54 iTunesMetadata];
      id v59 = [v58 distributorInfo];

      id v60 = [v59 distributorID];
      if (!v60)
      {
LABEL_71:

        *(void *)(v0 + 48) = 0;
        _OWORD *typea = 0u;
        *(_OWORD *)(v0 + 32) = 0u;

        sub_10001729C((uint64_t)typea, &qword_10065D3A0);
        goto LABEL_82;
      }
      __int16 v61 = v60;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      id v65 = [v54 bundleIdentifier];
      if (!v65) {
        break;
      }
      v66 = v65;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = v68;

      if (v62 == v67 && v64 == v69)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t *)(v0 + 104);
      }
      else
      {
        char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t *)(v0 + 104);
        if ((v71 & 1) == 0) {
          break;
        }
      }
      swift_bridgeObjectRelease();
      id v74 = [v59 domain];
      uint64_t v38 = (void **)(v0 + 72);
      if (!v74) {
        goto LABEL_71;
      }
      char v75 = v74;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v76;

      *(void *)(v0 + 40) = &type metadata for WebDistributor;
      unint64_t v73 = sub_1002BEA38();
      v72 = v56;
LABEL_67:
      *(void *)(v0 + 48) = v73;

      *(void *)(v0 + 16) = v62;
      *(void *)(v0 + 24) = v64;
      sub_1000172F8(&qword_10065C450);
      if (swift_dynamicCast())
      {
        uint64_t v77 = *(void *)(v0 + 56);
        uint64_t v78 = *(void *)(v0 + 64);
        uint64_t v38 = (void **)(v0 + 72);
        if ((v77 != 0xD000000000000012 || v78 != 0x80000001005B75E0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v77 != 0xD000000000000014 || v78 != 0x80000001005B8C80)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          unint64_t v79 = v100;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v79 = sub_1002906AC(0, *((void *)v100 + 2) + 1, 1, v100);
          }
          unint64_t v81 = *((void *)v79 + 2);
          unint64_t v80 = *((void *)v79 + 3);
          uint64_t v82 = v79;
          if (v81 >= v80 >> 1) {
            uint64_t v82 = sub_1002906AC((char *)(v80 > 1), v81 + 1, 1, v79);
          }
          BOOL v44 = v82;
          *((void *)v82 + 2) = v81 + 1;
          unint64_t v83 = &v82[16 * v81];
          *((void *)v83 + 4) = v77;
          *((void *)v83 + 5) = v78;

          uint64_t v38 = (void **)(v0 + 72);
          uint64_t v45 = v56;
          uint64_t v42 = v106;
          goto LABEL_40;
        }

        swift_bridgeObjectRelease();
LABEL_82:
        uint64_t v45 = v56;
        uint64_t v42 = v106;
      }
      else
      {
        uint64_t v45 = v72;

        uint64_t v38 = (void **)(v0 + 72);
        uint64_t v42 = v106;
      }
    }
    v72 = v56;
    *(void *)(v0 + 40) = v56;
    unint64_t v73 = sub_1002F9EF8();
    goto LABEL_67;
  }
  uint64_t v84 = *(void *)(*(void *)(*(void *)(v0 + 112) + 32) + 16);
  *(void *)(v0 + 456) = v84;
  swift_retain();
  char v85 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v85;
  void *v85 = v0;
  v85[1] = sub_100328494;
  return sub_10056D39C(v84);
}

uint64_t sub_100325880()
{
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = *(void *)(v0[38] + 112);
  v0[39] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[40] = v4;
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_task_alloc();
  v0[41] = v5;
  *(void *)(v5 + 16) = sub_1001C693C;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = dword_100660698;
  swift_retain();
  unint64_t v7 = (void *)swift_task_alloc();
  v0[42] = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_1003259C4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660698 + v6))((uint64_t)sub_1003332B8, v5, v3);
}

uint64_t sub_1003259C4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 344) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 304);
  swift_release();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = sub_100326854;
  }
  else
  {
    *(unsigned char *)(v4 + 474) = a1 & 1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = sub_100325B9C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100325B9C()
{
  swift_release();
  return _swift_task_switch(sub_100325C30, 0, 0);
}

void sub_100325C30()
{
  uint64_t v106 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (char *)(v0 + 472);
  if (*(unsigned char *)(v0 + 474))
  {
    uint64_t v100 = *(void *)(v0 + 344);
    static Logger.library.getter();
    swift_bridgeObjectRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    unint64_t v6 = *(void *)(v0 + 288);
    if (v5)
    {
      unint64_t v7 = (void *)(v0 + 232);
      uint64_t v8 = *(void *)(v1 + 280);
      uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v1 + 232);
      uint64_t v101 = *(void *)(v1 + 208);
      uint64_t v9 = *(void *)(v1 + 192);
      uint64_t v10 = swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v10 + 4) = sub_1000143F4(v8, v6, &v105);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ignoring state change for active install of %s", (uint8_t *)v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v103(v101, v9);
    }
    else
    {
      unint64_t v7 = (void *)(v0 + 248);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
      uint64_t v22 = *(void *)(v1 + 208);
      uint64_t v23 = *(void *)(v1 + 192);
      swift_bridgeObjectRelease_n();

      v21(v22, v23);
    }
    int64_t v24 = *(void *)(v1 + 264);
    unint64_t v25 = *(void *)(v1 + 272);
    *(void *)(v1 + 248) = *v7;
    if (v25)
    {
      uint64_t v26 = (v25 - 1) & v25;
      unint64_t v27 = __clz(__rbit64(v25)) | (v24 << 6);
      uint64_t v28 = *(void *)(v1 + 104);
LABEL_10:
      *(void *)(v1 + 264) = v24;
      *(void *)(v1 + 272) = v26;
      uint64_t v29 = *(void *)(v1 + 112);
      uint64_t v30 = (void *)(*(void *)(v28 + 48) + 16 * v27);
      *(void *)(v1 + 280) = *v30;
      *(void *)(v1 + 288) = v30[1];
      uint64_t v31 = *(void *)(v29 + 32);
      *(void *)(v1 + 296) = v31;
      uint64_t v32 = *(void *)(v31 + 32);
      *(void *)(v1 + 304) = v32;
      swift_bridgeObjectRetain();
      swift_retain();
      _swift_task_switch(sub_100325880, v32, 0);
      return;
    }
    int64_t v33 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      goto LABEL_93;
    }
    int64_t v34 = (unint64_t)((1 << *(unsigned char *)(v1 + 473)) + 63) >> 6;
    uint64_t v28 = *(void *)(v1 + 104);
    if (v33 < v34)
    {
      uint64_t v35 = v28 + 56;
      unint64_t v36 = *(void *)(v28 + 56 + 8 * v33);
      ++v24;
      if (v36)
      {
LABEL_16:
        uint64_t v26 = (v36 - 1) & v36;
        unint64_t v27 = __clz(__rbit64(v36)) + (v24 << 6);
        goto LABEL_10;
      }
      int64_t v24 = v33 + 1;
      if (v33 + 1 < v34)
      {
        unint64_t v36 = *(void *)(v35 + 8 * v24);
        if (v36) {
          goto LABEL_16;
        }
        int64_t v24 = v33 + 2;
        if (v33 + 2 < v34)
        {
          unint64_t v36 = *(void *)(v35 + 8 * v24);
          if (v36) {
            goto LABEL_16;
          }
          int64_t v37 = v33 + 3;
          if (v37 < v34)
          {
            unint64_t v36 = *(void *)(v35 + 8 * v37);
            if (v36)
            {
              int64_t v24 = v37;
              goto LABEL_16;
            }
            while (1)
            {
              int64_t v24 = v37 + 1;
              if (__OFADD__(v37, 1)) {
                goto LABEL_94;
              }
              if (v24 >= v34) {
                break;
              }
              unint64_t v36 = *(void *)(v35 + 8 * v24);
              ++v37;
              if (v36) {
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    uint64_t v38 = *(void *)(v1 + 240);
    uint64_t v39 = *(void *)(v1 + 112);
    char v40 = *v2;
    swift_release();
    *(void *)(v1 + 256) = *(void *)(v39 + 16);
    sub_10056C034(v38);
    swift_bridgeObjectRelease();
    if (v40)
    {
      uint64_t v41 = v1 + 16;
      uint64_t v42 = (void **)(v1 + 72);
      uint64_t v43 = *(void *)(v1 + 104);
      uint64_t v44 = -1;
      uint64_t v45 = -1 << *(unsigned char *)(v43 + 32);
      if (-v45 < 64) {
        uint64_t v44 = ~(-1 << -(char)v45);
      }
      uint64_t v46 = v44 & *(void *)(v43 + 56);
      int64_t v102 = (unint64_t)(63 - v45) >> 6;
      swift_bridgeObjectRetain();
      int64_t v47 = 0;
      uint64_t v48 = (char *)_swiftEmptyArrayStorage;
LABEL_31:
      __int16 v99 = v48;
      *(void *)(v1 + 376) = v48;
      while (1)
      {
        while (1)
        {
          if (v46)
          {
            v46 &= v46 - 1;
          }
          else
          {
            if (__OFADD__(v47++, 1))
            {
              __break(1u);
              goto LABEL_92;
            }
            uint64_t v50 = *(void *)(v1 + 104);
            if (v47 >= v102) {
              goto LABEL_82;
            }
            uint64_t v51 = v50 + 56;
            uint64_t v52 = *(void *)(v50 + 56 + 8 * v47);
            if (!v52)
            {
              int64_t v53 = v47 + 1;
              if (v47 + 1 >= v102) {
                goto LABEL_82;
              }
              uint64_t v52 = *(void *)(v51 + 8 * v53);
              if (!v52)
              {
                int64_t v53 = v47 + 2;
                if (v47 + 2 >= v102) {
                  goto LABEL_82;
                }
                uint64_t v52 = *(void *)(v51 + 8 * v53);
                if (!v52)
                {
                  int64_t v53 = v47 + 3;
                  if (v47 + 3 >= v102)
                  {
LABEL_82:
                    swift_release();
                    uint64_t v86 = *((void *)v99 + 2);
                    *(void *)(v1 + 384) = v86;
                    if (v86)
                    {
                      uint64_t v87 = *(void *)(*(void *)(v1 + 112) + 32);
                      *(void *)(v1 + 392) = v87;
                      *(void *)(v1 + 400) = 0;
                      uint64_t v88 = *(void *)(v1 + 376);
                      uint64_t v89 = *(void *)(v1 + 256);
                      uint64_t v90 = *(void *)(v88 + 40);
                      *(void *)(v1 + 408) = v90;
                      uint64_t v91 = *(void *)(v88 + 32);
                      uint64_t v92 = *(void *)(v87 + 16);
                      *(void *)(v1 + 416) = v92;
                      uint64_t v93 = *(os_unfair_lock_s **)(v89 + 16);
                      swift_bridgeObjectRetain();
                      swift_retain();
                      uint64_t v94 = swift_task_alloc();
                      *(void *)(v94 + 16) = v91;
                      *(void *)(v94 + 24) = v90;
                      *(unsigned char *)(v94 + 32) = 0;
                      os_unfair_lock_lock(v93 + 6);
                      sub_100333300((void *)(v1 + 80));
                      *(void *)(v1 + 424) = v100;
                      os_unfair_lock_unlock(v93 + 6);
                      if (!v100)
                      {
                        uint64_t v96 = *(void *)(v1 + 80);
                        *(void *)(v1 + 432) = v96;
                        swift_task_dealloc();
                        uint64_t v97 = (void *)swift_task_alloc();
                        *(void *)(v1 + 440) = v97;
                        v97[2] = v96;
                        v97[3] = v92;
                        v97[4] = 0;
                        v97[5] = 0;
                        uint64_t v98 = (void *)swift_task_alloc();
                        *(void *)(v1 + 448) = v98;
                        *uint64_t v98 = v1;
                        v98[1] = sub_100328090;
                        withDiscardingTaskGroup<A>(returning:isolation:body:)();
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_task_dealloc();
                      swift_task_dealloc();
                      swift_task_dealloc();
                      swift_task_dealloc();
                      swift_task_dealloc();
                      uint64_t v95 = *(void (**)(void))(v1 + 8);
                      v95();
                    }
                    return;
                  }
                  uint64_t v52 = *(void *)(v51 + 8 * v53);
                  if (!v52)
                  {
                    while (1)
                    {
                      int64_t v47 = v53 + 1;
                      if (__OFADD__(v53, 1)) {
                        break;
                      }
                      if (v47 >= v102) {
                        goto LABEL_82;
                      }
                      uint64_t v52 = *(void *)(v51 + 8 * v47);
                      ++v53;
                      if (v52) {
                        goto LABEL_45;
                      }
                    }
LABEL_92:
                    __break(1u);
LABEL_93:
                    __break(1u);
LABEL_94:
                    __break(1u);
                  }
                }
              }
              int64_t v47 = v53;
            }
LABEL_45:
            uint64_t v46 = (v52 - 1) & v52;
          }
          id v54 = objc_allocWithZone((Class)LSApplicationRecord);
          swift_bridgeObjectRetain();
          NSString v55 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSObject *v42 = 0;
          id v56 = [v54 initWithBundleIdentifier:v55 allowPlaceholder:0 error:v42];

          id v57 = *v42;
          if (v56) {
            break;
          }
          id v80 = v57;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v42 = (void **)(v1 + 72);
          swift_errorRelease();
          uint64_t v100 = 0;
        }
        id v58 = v57;
        id v59 = [v56 iTunesMetadata];
        id v60 = [v59 distributorInfo];

        id v61 = [v60 distributorID];
        if (!v61) {
          goto LABEL_32;
        }
        uint64_t v62 = v61;
        uint64_t v104 = v46;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v65 = v64;

        id v66 = [v56 bundleIdentifier];
        if (v66)
        {
          uint64_t v67 = v66;
          uint64_t v68 = v41;
          uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v71 = v70;

          if (v63 == v69 && v65 == v71)
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = v68;
            uint64_t v42 = (void **)(v1 + 72);
          }
          else
          {
            char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v41 = v68;
            uint64_t v42 = (void **)(v1 + 72);
            if ((v73 & 1) == 0) {
              goto LABEL_54;
            }
          }
          swift_bridgeObjectRelease();
          id v75 = [v60 domain];
          uint64_t v46 = v104;
          if (v75)
          {
            uint64_t v76 = v75;
            uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v65 = v77;

            *(void *)(v1 + 40) = &type metadata for WebDistributor;
            unint64_t v74 = sub_1002BEA38();
            goto LABEL_58;
          }
LABEL_32:

          *(void *)(v41 + 32) = 0;
          *(_OWORD *)uint64_t v41 = 0u;
          *(_OWORD *)(v41 + 16) = 0u;

          sub_10001729C(v41, &qword_10065D3A0);
        }
        else
        {
LABEL_54:
          *(void *)(v1 + 40) = &type metadata for NativeDistributor;
          unint64_t v74 = sub_1002F9EF8();
LABEL_58:
          *(void *)(v1 + 48) = v74;

          *(void *)(v1 + 16) = v63;
          *(void *)(v1 + 24) = v65;
          sub_1000172F8(&qword_10065C450);
          if (swift_dynamicCast())
          {
            uint64_t v79 = *(void *)(v1 + 56);
            uint64_t v78 = *(void *)(v1 + 64);
            if ((v79 != 0xD000000000000012 || v78 != 0x80000001005B75E0)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
              && (v79 != 0xD000000000000014 || v78 != 0x80000001005B8C80)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                __int16 v99 = sub_1002906AC(0, *((void *)v99 + 2) + 1, 1, v99);
              }
              unint64_t v82 = *((void *)v99 + 2);
              unint64_t v81 = *((void *)v99 + 3);
              if (v82 >= v81 >> 1) {
                __int16 v99 = sub_1002906AC((char *)(v81 > 1), v82 + 1, 1, v99);
              }
              uint64_t v48 = v99;
              *((void *)v99 + 2) = v82 + 1;
              unint64_t v83 = &v99[16 * v82];
              *((void *)v83 + 4) = v79;
              *((void *)v83 + 5) = v78;

              uint64_t v46 = v104;
              goto LABEL_31;
            }

            swift_bridgeObjectRelease();
            uint64_t v46 = v104;
          }
          else
          {

            uint64_t v46 = v104;
          }
        }
      }
    }
    uint64_t v84 = *(void *)(*(void *)(*(void *)(v1 + 112) + 32) + 16);
    *(void *)(v1 + 456) = v84;
    swift_retain();
    char v85 = (void *)swift_task_alloc();
    *(void *)(v1 + 464) = v85;
    void *v85 = v1;
    v85[1] = sub_100328494;
    sub_10056D39C(v84);
  }
  else
  {
    id v11 = *(void **)(v0 + 112);
    uint64_t v12 = v11[6];
    uint64_t v13 = v11[7];
    uint64_t v14 = v11[5];
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v15;
    void *v15 = v0;
    v15[1] = sub_100327468;
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 160);
    __int16 v108 = 0;
    sub_1004FFCA8(v19, v20, v18, v16, v17, v13, v12, v14);
  }
}

uint64_t sub_100326854()
{
  swift_release();
  swift_errorRelease();
  return _swift_task_switch(sub_1003268F4, 0, 0);
}

uint64_t sub_1003268F4()
{
  __int16 v99 = v0;
  uint64_t v1 = v0;
  static Logger.library.getter();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[36];
  uint64_t v95 = v0;
  if (v4)
  {
    unint64_t v7 = v0 + 29;
    unint64_t v6 = (void (*)(uint64_t, uint64_t))v0[29];
    uint64_t v8 = v1[35];
    uint64_t v9 = v1[26];
    uint64_t v10 = v1[24];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v11 + 4) = sub_1000143F4(v8, v5, &v98);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ignoring state change for active install of %s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v95;
    swift_slowDealloc();
    swift_slowDealloc();

    v6(v9, v10);
  }
  else
  {
    unint64_t v7 = v0 + 31;
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[31];
    uint64_t v13 = v0[26];
    uint64_t v14 = v0[24];
    swift_bridgeObjectRelease_n();

    v12(v13, v14);
  }
  int64_t v15 = v1[33];
  unint64_t v16 = v1[34];
  v1[31] = *v7;
  if (v16)
  {
    uint64_t v17 = (v16 - 1) & v16;
    unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
    uint64_t v19 = v1[13];
LABEL_6:
    v1[33] = v15;
    v1[34] = v17;
    uint64_t v20 = v1[14];
    uint64_t v21 = (void *)(*(void *)(v19 + 48) + 16 * v18);
    v1[35] = *v21;
    v1[36] = v21[1];
    uint64_t v22 = *(void *)(v20 + 32);
    v1[37] = v22;
    uint64_t v23 = *(void *)(v22 + 32);
    v1[38] = v23;
    swift_bridgeObjectRetain();
    swift_retain();
    return _swift_task_switch(sub_100325880, v23, 0);
  }
  int64_t v24 = v15 + 1;
  if (__OFADD__(v15, 1)) {
    goto LABEL_87;
  }
  int64_t v25 = (unint64_t)((1 << *((unsigned char *)v1 + 473)) + 63) >> 6;
  uint64_t v19 = v1[13];
  if (v24 < v25)
  {
    uint64_t v26 = v19 + 56;
    unint64_t v27 = *(void *)(v19 + 56 + 8 * v24);
    ++v15;
    if (v27)
    {
LABEL_12:
      uint64_t v17 = (v27 - 1) & v27;
      unint64_t v18 = __clz(__rbit64(v27)) + (v15 << 6);
      goto LABEL_6;
    }
    int64_t v15 = v24 + 1;
    if (v24 + 1 < v25)
    {
      unint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27) {
        goto LABEL_12;
      }
      int64_t v15 = v24 + 2;
      if (v24 + 2 < v25)
      {
        unint64_t v27 = *(void *)(v26 + 8 * v15);
        if (v27) {
          goto LABEL_12;
        }
        int64_t v28 = v24 + 3;
        if (v28 < v25)
        {
          unint64_t v27 = *(void *)(v26 + 8 * v28);
          if (v27)
          {
            int64_t v15 = v28;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v15 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_88;
            }
            if (v15 >= v25) {
              break;
            }
            unint64_t v27 = *(void *)(v26 + 8 * v15);
            ++v28;
            if (v27) {
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  uint64_t v29 = v1[30];
  uint64_t v30 = v1[14];
  char v31 = *((unsigned char *)v1 + 472);
  swift_release();
  v1[32] = *(void *)(v30 + 16);
  sub_10056C034(v29);
  swift_bridgeObjectRelease();
  if (v31)
  {
    uint64_t v92 = v1 + 10;
    uint64_t v32 = (uint64_t)(v1 + 2);
    int64_t v33 = (void **)(v1 + 9);
    uint64_t v34 = v1[13];
    uint64_t v35 = -1;
    uint64_t v36 = -1 << *(unsigned char *)(v34 + 32);
    if (-v36 < 64) {
      uint64_t v35 = ~(-1 << -(char)v36);
    }
    uint64_t v37 = v35 & *(void *)(v34 + 56);
    int64_t v96 = (unint64_t)(63 - v36) >> 6;
    swift_bridgeObjectRetain();
    int64_t v38 = 0;
    uint64_t v39 = (char *)_swiftEmptyArrayStorage;
    char v40 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
    uint64_t v94 = (void **)(v1 + 9);
LABEL_27:
    uint64_t v93 = v39;
    v1[47] = v39;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          uint64_t v97 = (v37 - 1) & v37;
        }
        else
        {
          if (__OFADD__(v38++, 1))
          {
            __break(1u);
            goto LABEL_86;
          }
          uint64_t v43 = v1[13];
          if (v38 >= v96) {
            goto LABEL_77;
          }
          uint64_t v44 = v43 + 56;
          uint64_t v45 = *(void *)(v43 + 56 + 8 * v38);
          if (!v45)
          {
            int64_t v46 = v38 + 1;
            if (v38 + 1 >= v96) {
              goto LABEL_77;
            }
            uint64_t v45 = *(void *)(v44 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v38 + 2;
              if (v38 + 2 >= v96) {
                goto LABEL_77;
              }
              uint64_t v45 = *(void *)(v44 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v38 + 3;
                if (v38 + 3 >= v96)
                {
LABEL_77:
                  swift_release();
                  uint64_t v78 = *((void *)v93 + 2);
                  v1[48] = v78;
                  if (v78)
                  {
                    uint64_t v79 = *(void *)(v1[14] + 32);
                    v1[49] = v79;
                    v1[50] = 0;
                    uint64_t v80 = v1[47];
                    uint64_t v81 = v1[32];
                    uint64_t v82 = *(void *)(v80 + 40);
                    v1[51] = v82;
                    uint64_t v83 = *(void *)(v80 + 32);
                    uint64_t v84 = *(void *)(v79 + 16);
                    v1[52] = v84;
                    char v85 = *(os_unfair_lock_s **)(v81 + 16);
                    swift_bridgeObjectRetain();
                    swift_retain();
                    uint64_t v86 = swift_task_alloc();
                    *(void *)(v86 + 16) = v83;
                    *(void *)(v86 + 24) = v82;
                    *(unsigned char *)(v86 + 32) = 0;
                    v85 += 6;
                    os_unfair_lock_lock(v85);
                    sub_100333300(v92);
                    v1[53] = 0;
                    os_unfair_lock_unlock(v85);
                    uint64_t v88 = v1[10];
                    v1[54] = v88;
                    swift_task_dealloc();
                    uint64_t v89 = (void *)swift_task_alloc();
                    v1[55] = v89;
                    v89[2] = v88;
                    v89[3] = v84;
                    v89[4] = 0;
                    v89[5] = 0;
                    uint64_t v90 = (void *)swift_task_alloc();
                    v1[56] = v90;
                    void *v90 = v1;
                    v90[1] = sub_100328090;
                    return withDiscardingTaskGroup<A>(returning:isolation:body:)();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    swift_task_dealloc();
                    uint64_t v87 = (uint64_t (*)(void))v1[1];
                    return v87();
                  }
                }
                uint64_t v45 = *(void *)(v44 + 8 * v46);
                if (!v45)
                {
                  while (1)
                  {
                    int64_t v38 = v46 + 1;
                    if (__OFADD__(v46, 1)) {
                      break;
                    }
                    if (v38 >= v96) {
                      goto LABEL_77;
                    }
                    uint64_t v45 = *(void *)(v44 + 8 * v38);
                    ++v46;
                    if (v45) {
                      goto LABEL_41;
                    }
                  }
LABEL_86:
                  __break(1u);
LABEL_87:
                  __break(1u);
LABEL_88:
                  __break(1u);
                }
              }
            }
            int64_t v38 = v46;
          }
LABEL_41:
          uint64_t v97 = (v45 - 1) & v45;
        }
        id v47 = objc_allocWithZone((Class)v40[473]);
        swift_bridgeObjectRetain();
        NSString v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        *int64_t v33 = 0;
        id v49 = objc_msgSend(v47, "initWithBundleIdentifier:allowPlaceholder:error:", v48, 0, v33, v92);

        uint64_t v50 = *v33;
        if (v49) {
          break;
        }
        id v41 = v50;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v37 = v97;
      }
      id v51 = v50;
      id v52 = [v49 iTunesMetadata];
      id v53 = [v52 distributorInfo];

      id v54 = [v53 distributorID];
      if (!v54) {
        goto LABEL_58;
      }
      NSString v55 = v54;
      id v56 = v40;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;

      id v60 = [v49 bundleIdentifier];
      if (v60)
      {
        id v61 = v60;
        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v64 = v63;

        if (v57 == v62 && v59 == v64)
        {
          swift_bridgeObjectRelease();
          uint64_t v1 = v95;
        }
        else
        {
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v1 = v95;
          if ((v66 & 1) == 0) {
            goto LABEL_50;
          }
        }
        swift_bridgeObjectRelease();
        id v68 = [v53 domain];
        int64_t v33 = v94;
        char v40 = v56;
        if (v68)
        {
          uint64_t v69 = v68;
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v59 = v70;

          v1[5] = &type metadata for WebDistributor;
          unint64_t v67 = sub_1002BEA38();
          goto LABEL_54;
        }
LABEL_58:

        *(void *)(v32 + 32) = 0;
        *(_OWORD *)uint64_t v32 = 0u;
        *(_OWORD *)(v32 + 16) = 0u;

        sub_10001729C(v32, &qword_10065D3A0);
        uint64_t v37 = v97;
      }
      else
      {
LABEL_50:
        v1[5] = &type metadata for NativeDistributor;
        unint64_t v67 = sub_1002F9EF8();
LABEL_54:
        v1[6] = v67;

        v1[2] = v57;
        v1[3] = v59;
        sub_1000172F8(&qword_10065C450);
        if (swift_dynamicCast())
        {
          uint64_t v72 = v1[7];
          uint64_t v71 = v1[8];
          char v40 = v56;
          if ((v72 != 0xD000000000000012 || v71 != 0x80000001005B75E0)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v72 != 0xD000000000000014 || v71 != 0x80000001005B8C80)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v93 = sub_1002906AC(0, *((void *)v93 + 2) + 1, 1, v93);
            }
            unint64_t v74 = *((void *)v93 + 2);
            unint64_t v73 = *((void *)v93 + 3);
            if (v74 >= v73 >> 1) {
              uint64_t v93 = sub_1002906AC((char *)(v73 > 1), v74 + 1, 1, v93);
            }
            uint64_t v39 = v93;
            *((void *)v93 + 2) = v74 + 1;
            id v75 = &v93[16 * v74];
            *((void *)v75 + 4) = v72;
            *((void *)v75 + 5) = v71;

            int64_t v33 = v94;
            char v40 = v56;
            uint64_t v37 = v97;
            goto LABEL_27;
          }

          swift_bridgeObjectRelease();
          int64_t v33 = v94;
          uint64_t v37 = v97;
        }
        else
        {

          int64_t v33 = v94;
          char v40 = v56;
          uint64_t v37 = v97;
        }
      }
    }
  }
  uint64_t v76 = *(void *)(*(void *)(v1[14] + 32) + 16);
  v1[57] = v76;
  swift_retain();
  uint64_t v77 = (void *)swift_task_alloc();
  v1[58] = v77;
  void *v77 = v1;
  v77[1] = sub_100328494;
  return sub_10056D39C(v76);
}

uint64_t sub_100327468(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 360) = a1;
  *(void *)(v4 + 368) = a2;
  *(unsigned char *)(v4 + 475) = a3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1003275B8, 0, 0);
}

void sub_1003275B8()
{
  char v1 = *(unsigned char *)(v0 + 475);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = v7 + *(int *)(v8 + 48);
  uint64_t v10 = v7 + *(int *)(v8 + 64);
  (*(void (**)(void))(*(void *)(v0 + 176) + 32))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v4, v5);
  *(void *)uint64_t v10 = v3;
  *(void *)(v10 + 8) = v2;
  *(unsigned char *)(v10 + 16) = v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v12 = *(void *)(v0 + 240);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_89:
  }
    unint64_t v12 = sub_1002907DC(0, *(void *)(v12 + 16) + 1, 1, v12);
  unint64_t v14 = *(void *)(v12 + 16);
  unint64_t v13 = *(void *)(v12 + 24);
  if (v14 >= v13 >> 1) {
    unint64_t v12 = sub_1002907DC(v13 > 1, v14 + 1, 1, v12);
  }
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 136);
  *(void *)(v12 + 16) = v14 + 1;
  sub_10001733C(v15, v12+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v14, &qword_10065BDA8);
  uint64_t v17 = *(void *)(v0 + 344);
  int64_t v18 = *(void *)(v0 + 264);
  unint64_t v19 = *(void *)(v0 + 272);
  *(void *)(v0 + 240) = v12;
  if (v19)
  {
    uint64_t v20 = (v19 - 1) & v19;
    unint64_t v21 = __clz(__rbit64(v19)) | (v18 << 6);
    uint64_t v22 = *(void *)(v0 + 104);
LABEL_6:
    *(void *)(v0 + 264) = v18;
    *(void *)(v0 + 272) = v20;
    uint64_t v23 = *(void *)(v0 + 112);
    int64_t v24 = (void *)(*(void *)(v22 + 48) + 16 * v21);
    *(void *)(v0 + 280) = *v24;
    *(void *)(v0 + 288) = v24[1];
    uint64_t v25 = *(void *)(v23 + 32);
    *(void *)(v0 + 296) = v25;
    uint64_t v26 = *(void *)(v25 + 32);
    *(void *)(v0 + 304) = v26;
    swift_bridgeObjectRetain();
    swift_retain();
    _swift_task_switch(sub_100325880, v26, 0);
    return;
  }
  int64_t v27 = v18 + 1;
  if (__OFADD__(v18, 1)) {
    goto LABEL_91;
  }
  int64_t v28 = (unint64_t)((1 << *(unsigned char *)(v0 + 473)) + 63) >> 6;
  uint64_t v22 = *(void *)(v0 + 104);
  if (v27 < v28)
  {
    uint64_t v29 = v22 + 56;
    unint64_t v30 = *(void *)(v22 + 56 + 8 * v27);
    ++v18;
    if (v30)
    {
LABEL_12:
      uint64_t v20 = (v30 - 1) & v30;
      unint64_t v21 = __clz(__rbit64(v30)) + (v18 << 6);
      goto LABEL_6;
    }
    int64_t v18 = v27 + 1;
    if (v27 + 1 < v28)
    {
      unint64_t v30 = *(void *)(v29 + 8 * v18);
      if (v30) {
        goto LABEL_12;
      }
      int64_t v18 = v27 + 2;
      if (v27 + 2 < v28)
      {
        unint64_t v30 = *(void *)(v29 + 8 * v18);
        if (v30) {
          goto LABEL_12;
        }
        int64_t v31 = v27 + 3;
        if (v31 < v28)
        {
          unint64_t v30 = *(void *)(v29 + 8 * v31);
          if (v30)
          {
            int64_t v18 = v31;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v18 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_92;
            }
            if (v18 >= v28) {
              break;
            }
            unint64_t v30 = *(void *)(v29 + 8 * v18);
            ++v31;
            if (v30) {
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  uint64_t v32 = *(void *)(v0 + 112);
  char v33 = *(unsigned char *)(v0 + 472);
  swift_release();
  *(void *)(v0 + 256) = *(void *)(v32 + 16);
  sub_10056C034(v12);
  swift_bridgeObjectRelease();
  if (v33)
  {
    uint64_t v91 = v17;
    uint64_t v34 = v0 + 16;
    uint64_t v35 = (void **)(v0 + 72);
    uint64_t v36 = *(void *)(v0 + 104);
    uint64_t v37 = -1;
    uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
    if (-v38 < 64) {
      uint64_t v37 = ~(-1 << -(char)v38);
    }
    uint64_t v39 = v37 & *(void *)(v36 + 56);
    int64_t v92 = (unint64_t)(63 - v38) >> 6;
    swift_bridgeObjectRetain();
    int64_t v40 = 0;
    id v41 = (char *)_swiftEmptyArrayStorage;
LABEL_27:
    uint64_t v90 = v41;
    *(void *)(v0 + 376) = v41;
LABEL_29:
    uint64_t v43 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
    while (1)
    {
      if (v39)
      {
        v39 &= v39 - 1;
      }
      else
      {
        if (__OFADD__(v40++, 1))
        {
          __break(1u);
          goto LABEL_89;
        }
        uint64_t v45 = *(void *)(v0 + 104);
        if (v40 >= v92) {
          goto LABEL_79;
        }
        uint64_t v46 = v45 + 56;
        uint64_t v47 = *(void *)(v45 + 56 + 8 * v40);
        if (!v47)
        {
          int64_t v48 = v40 + 1;
          if (v40 + 1 >= v92) {
            goto LABEL_79;
          }
          uint64_t v47 = *(void *)(v46 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v40 + 2;
            if (v40 + 2 >= v92) {
              goto LABEL_79;
            }
            uint64_t v47 = *(void *)(v46 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v40 + 3;
              if (v40 + 3 >= v92)
              {
LABEL_79:
                swift_release();
                uint64_t v77 = *((void *)v90 + 2);
                *(void *)(v0 + 384) = v77;
                if (v77)
                {
                  uint64_t v78 = *(void *)(*(void *)(v0 + 112) + 32);
                  *(void *)(v0 + 392) = v78;
                  *(void *)(v0 + 400) = 0;
                  uint64_t v79 = *(void *)(v0 + 376);
                  uint64_t v80 = *(void *)(v0 + 256);
                  uint64_t v81 = *(void *)(v79 + 40);
                  *(void *)(v0 + 408) = v81;
                  uint64_t v82 = *(void *)(v79 + 32);
                  uint64_t v83 = *(void *)(v78 + 16);
                  *(void *)(v0 + 416) = v83;
                  uint64_t v84 = *(os_unfair_lock_s **)(v80 + 16);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  uint64_t v85 = swift_task_alloc();
                  *(void *)(v85 + 16) = v82;
                  *(void *)(v85 + 24) = v81;
                  *(unsigned char *)(v85 + 32) = 0;
                  os_unfair_lock_lock(v84 + 6);
                  sub_100333300((void *)(v0 + 80));
                  *(void *)(v0 + 424) = v91;
                  os_unfair_lock_unlock(v84 + 6);
                  if (!v91)
                  {
                    uint64_t v87 = *(void *)(v0 + 80);
                    *(void *)(v0 + 432) = v87;
                    swift_task_dealloc();
                    uint64_t v88 = (void *)swift_task_alloc();
                    *(void *)(v0 + 440) = v88;
                    v88[2] = v87;
                    void v88[3] = v83;
                    v88[4] = 0;
                    v88[5] = 0;
                    uint64_t v89 = (void *)swift_task_alloc();
                    *(void *)(v0 + 448) = v89;
                    *uint64_t v89 = v0;
                    v89[1] = sub_100328090;
                    withDiscardingTaskGroup<A>(returning:isolation:body:)();
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  uint64_t v86 = *(void (**)(void))(v0 + 8);
                  v86();
                }
                return;
              }
              uint64_t v47 = *(void *)(v46 + 8 * v48);
              if (!v47)
              {
                while (1)
                {
                  int64_t v40 = v48 + 1;
                  if (__OFADD__(v48, 1)) {
                    break;
                  }
                  if (v40 >= v92) {
                    goto LABEL_79;
                  }
                  uint64_t v47 = *(void *)(v46 + 8 * v40);
                  ++v48;
                  if (v47) {
                    goto LABEL_43;
                  }
                }
                __break(1u);
LABEL_91:
                __break(1u);
LABEL_92:
                __break(1u);
              }
            }
          }
          int64_t v40 = v48;
        }
LABEL_43:
        uint64_t v39 = (v47 - 1) & v47;
      }
      id v49 = objc_allocWithZone((Class)v43[473]);
      swift_bridgeObjectRetain();
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *uint64_t v35 = 0;
      id v51 = [v49 initWithBundleIdentifier:v50 allowPlaceholder:0 error:v35];

      id v52 = *v35;
      if (!v51)
      {
        id v42 = v52;
        unint64_t v12 = _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        uint64_t v91 = 0;
        goto LABEL_29;
      }
      id v53 = v52;
      unint64_t v12 = (unint64_t)[v51 iTunesMetadata];
      id v54 = [(id)v12 distributorInfo];

      id v55 = [v54 distributorID];
      if (!v55) {
        goto LABEL_30;
      }
      id v56 = v55;
      int64_t v93 = v40;
      uint64_t v94 = v39;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v58;

      id v60 = [v51 bundleIdentifier];
      if (v60)
      {
        id v61 = v60;
        uint64_t v62 = v35;
        uint64_t v63 = v34;
        unint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v65 = v64;

        if (v57 == v12 && v59 == v65)
        {
          swift_bridgeObjectRelease();
          uint64_t v34 = v63;
          uint64_t v35 = v62;
          uint64_t v43 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
        }
        else
        {
          unint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v34 = v63;
          uint64_t v35 = v62;
          uint64_t v43 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
          if ((v12 & 1) == 0) {
            goto LABEL_52;
          }
        }
        swift_bridgeObjectRelease();
        id v68 = [v54 domain];
        int64_t v40 = v93;
        uint64_t v39 = v94;
        if (v68)
        {
          uint64_t v69 = v68;
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v59 = v70;

          *(void *)(v0 + 40) = &type metadata for WebDistributor;
          unint64_t v67 = sub_1002BEA38();
          unint64_t v12 = (unint64_t)&type metadata for NativeDistributor;
          goto LABEL_56;
        }
LABEL_30:

        *(void *)(v34 + 32) = 0;
        *(_OWORD *)uint64_t v34 = 0u;
        *(_OWORD *)(v34 + 16) = 0u;

        sub_10001729C(v34, &qword_10065D3A0);
      }
      else
      {
LABEL_52:
        unint64_t v12 = (unint64_t)&type metadata for NativeDistributor;
        *(void *)(v0 + 40) = &type metadata for NativeDistributor;
        unint64_t v67 = sub_1002F9EF8();
LABEL_56:
        *(void *)(v0 + 48) = v67;

        *(void *)(v0 + 16) = v57;
        *(void *)(v0 + 24) = v59;
        sub_1000172F8(&qword_10065C450);
        if (swift_dynamicCast())
        {
          uint64_t v72 = *(void *)(v0 + 56);
          uint64_t v71 = *(void *)(v0 + 64);
          uint64_t v39 = v94;
          if ((v72 != 0xD000000000000012 || v71 != 0x80000001005B75E0)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v72 != 0xD000000000000014 || v71 != 0x80000001005B8C80)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v90 = sub_1002906AC(0, *((void *)v90 + 2) + 1, 1, v90);
            }
            unint64_t v12 = *((void *)v90 + 2);
            unint64_t v73 = *((void *)v90 + 3);
            if (v12 >= v73 >> 1) {
              uint64_t v90 = sub_1002906AC((char *)(v73 > 1), v12 + 1, 1, v90);
            }
            id v41 = v90;
            *((void *)v90 + 2) = v12 + 1;
            unint64_t v74 = &v90[16 * v12];
            *((void *)v74 + 4) = v72;
            *((void *)v74 + 5) = v71;

            int64_t v40 = v93;
            uint64_t v39 = v94;
            goto LABEL_27;
          }

          swift_bridgeObjectRelease();
          int64_t v40 = v93;
        }
        else
        {

          int64_t v40 = v93;
          uint64_t v39 = v94;
        }
      }
    }
  }
  uint64_t v75 = *(void *)(*(void *)(*(void *)(v0 + 112) + 32) + 16);
  *(void *)(v0 + 456) = v75;
  swift_retain();
  uint64_t v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v76;
  *uint64_t v76 = v0;
  v76[1] = sub_100328494;
  sub_10056D39C(v75);
}

uint64_t sub_100328090()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003281F8, 0, 0);
}

void sub_1003281F8()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[48];
  swift_release();
  swift_bridgeObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (void (*)(void))v0[1];
    v3();
  }
  else
  {
    uint64_t v4 = v0[53];
    uint64_t v5 = v0[49];
    uint64_t v6 = v0[50] + 1;
    v0[50] = v6;
    uint64_t v7 = v0[32];
    uint64_t v8 = v0[47] + 16 * v6;
    uint64_t v9 = *(void *)(v8 + 40);
    v0[51] = v9;
    uint64_t v10 = *(void *)(v8 + 32);
    uint64_t v11 = *(void *)(v5 + 16);
    v0[52] = v11;
    unint64_t v12 = *(os_unfair_lock_s **)(v7 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = v9;
    *(unsigned char *)(v13 + 32) = 0;
    os_unfair_lock_lock(v12 + 6);
    sub_100333300(v0 + 10);
    v0[53] = v4;
    os_unfair_lock_unlock(v12 + 6);
    if (!v4)
    {
      uint64_t v14 = v0[10];
      v0[54] = v14;
      swift_task_dealloc();
      uint64_t v15 = (void *)swift_task_alloc();
      v0[55] = v15;
      v15[2] = v14;
      v15[3] = v11;
      v15[4] = 0;
      v15[5] = 0;
      uint64_t v16 = (void *)swift_task_alloc();
      v0[56] = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100328090;
      withDiscardingTaskGroup<A>(returning:isolation:body:)();
    }
  }
}

uint64_t sub_100328494()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10032866C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1003286BC()
{
  sub_10032866C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LaunchServicesObserver()
{
  return self;
}

uint64_t sub_100328714@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*a1);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10032875C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v28 = result;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  if (!v6) {
    goto LABEL_8;
  }
  while (2)
  {
    uint64_t v31 = (v6 - 1) & v6;
    int64_t v32 = v3;
    unint64_t v8 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_24:
    uint64_t v13 = (uint64_t *)(*(void *)(result + 48) + 32 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v16 = v13[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    if (v16)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
    {
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(a2 + 48);
    while (1)
    {
      uint64_t v23 = (void *)(v22 + 32 * v20);
      uint64_t v25 = v23[2];
      uint64_t v24 = v23[3];
      BOOL v26 = *v23 == v15 && v23[1] == v14;
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_30;
      }
      if (v24) {
        break;
      }
      if (!v16) {
        goto LABEL_44;
      }
LABEL_30:
      unint64_t v20 = (v20 + 1) & v21;
      if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_47;
      }
    }
    if (!v16) {
      goto LABEL_30;
    }
    BOOL v27 = v25 == v17 && v24 == v16;
    if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    int64_t v3 = v32;
    uint64_t v2 = a2;
    uint64_t result = v28;
    unint64_t v6 = v31;
    if (v31) {
      continue;
    }
    break;
  }
LABEL_8:
  int64_t v9 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v9 >= v30) {
    return 1;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v9);
  int64_t v11 = v3 + 1;
  if (v10) {
    goto LABEL_23;
  }
  int64_t v11 = v9 + 1;
  if (v9 + 1 >= v30) {
    return 1;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v11);
  if (v10) {
    goto LABEL_23;
  }
  int64_t v11 = v9 + 2;
  if (v9 + 2 >= v30) {
    return 1;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v11);
  if (v10) {
    goto LABEL_23;
  }
  int64_t v11 = v9 + 3;
  if (v9 + 3 >= v30) {
    return 1;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v11);
  if (v10) {
    goto LABEL_23;
  }
  int64_t v12 = v9 + 4;
  if (v12 >= v30) {
    return 1;
  }
  unint64_t v10 = *(void *)(v29 + 8 * v12);
  if (v10)
  {
    int64_t v11 = v12;
LABEL_23:
    uint64_t v31 = (v10 - 1) & v10;
    int64_t v32 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v30) {
      return 1;
    }
    unint64_t v10 = *(void *)(v29 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_23;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_100328A70(void *a1, void *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    void *v3 = 0x8000000000000000;
    id v24 = a2;
    sub_10032CC88((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    void *v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  BOOL v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_100328C9C(uint64_t a1, char *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Platform();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100010098(&qword_10065E038, (void (*)(uint64_t))&type metadata accessor for Platform);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100010098((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10032CEB8((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100328FC0(uint64_t a1, char *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100010098((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  char v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100010098((unint64_t *)&unk_100663C40, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10032D174((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1003292E4(uint64_t a1, uint64_t *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = v7;
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt64 v48 = a2[2];
  Hasher._combine(_:)(v48);
  Swift::UInt64 v47 = a2[3];
  Hasher._combine(_:)(v47);
  Swift::UInt64 v46 = a2[4];
  Hasher._combine(_:)(v46);
  char v9 = *((unsigned char *)a2 + 40);
  int v49 = v9 & 1;
  Hasher._combine(_:)(v9 & 1);
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  swift_bridgeObjectRetain();
  uint64_t v45 = v10;
  String.hash(into:)();
  uint64_t v44 = v11;
  swift_bridgeObjectRelease();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v43 = v6 + 56;
  int64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v39 = v3;
  if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v42 = ~v13;
    uint64_t v15 = *(void *)(v6 + 48);
    do
    {
      uint64_t v16 = v15 + (v14 << 6);
      uint64_t v18 = *(void *)(v16 + 16);
      uint64_t v17 = *(void *)(v16 + 24);
      uint64_t v19 = *(void *)(v16 + 32);
      int v20 = *(unsigned __int8 *)(v16 + 40);
      uint64_t v21 = *(void *)(v16 + 48);
      uint64_t v22 = *(void *)(v16 + 56);
      if (*(void *)v16 == v50 && *(void *)(v16 + 8) == v8)
      {
        BOOL v27 = v18 == v48 && v17 == v47 && v19 == v46;
        if (!v27 || (((v49 != 0) ^ v20) & 1) != 0) {
          goto LABEL_3;
        }
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_3;
        }
        BOOL v24 = v18 == v48 && v17 == v47;
        BOOL v25 = v24 && v19 == v46;
        if (!v25 || (((v49 != 0) ^ v20) & 1) != 0) {
          goto LABEL_3;
        }
      }
      BOOL v28 = v21 == v45 && v22 == v44;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_100333AA4((uint64_t)v40);
        unint64_t v29 = *(void *)(*v39 + 48) + (v14 << 6);
        uint64_t v30 = *(void *)(v29 + 8);
        uint64_t v31 = *(void *)(v29 + 32);
        char v32 = *(unsigned char *)(v29 + 40);
        uint64_t v33 = *(void *)(v29 + 48);
        uint64_t v34 = *(void *)(v29 + 56);
        *(void *)uint64_t v41 = *(void *)v29;
        *(void *)(v41 + 8) = v30;
        *(_OWORD *)(v41 + 16) = *(_OWORD *)(v29 + 16);
        *(void *)(v41 + 32) = v31;
        *(unsigned char *)(v41 + 40) = v32;
        *(void *)(v41 + 48) = v33;
        *(void *)(v41 + 56) = v34;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return 0;
      }
LABEL_3:
      unint64_t v14 = (v14 + 1) & v42;
    }
    while (((*(void *)(v43 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *v39;
  *uint64_t v39 = 0x8000000000000000;
  sub_100333A6C((uint64_t)v40);
  sub_10032D430((Swift::Int)v40, v14, isUniquelyReferenced_nonNull_native);
  *uint64_t v39 = v51;
  swift_bridgeObjectRelease();
  long long v37 = v40[1];
  *(_OWORD *)uint64_t v41 = *v40;
  *(_OWORD *)(v41 + 16) = v37;
  long long v38 = v40[3];
  *(_OWORD *)(v41 + 32) = v40[2];
  *(_OWORD *)(v41 + 48) = v38;
  return 1;
}

uint64_t sub_1003295EC(unsigned char *a1, Swift::Int a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  sub_1004B2540(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_85:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    void *v3 = 0x8000000000000000;
    sub_10032D6EC(a2, v8, isUniquelyReferenced_nonNull_native);
    void *v3 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_89;
  }
  uint64_t v9 = ~v7;
  while (2)
  {
    unint64_t v10 = 0xED0000726574656DLL;
    uint64_t v11 = 0x6F72656C65636361;
    switch(*(unsigned char *)(*(void *)(v5 + 48) + v8))
    {
      case 1:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x74696B7261;
        break;
      case 2:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x37766D7261;
        break;
      case 3:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x34366D7261;
        break;
      case 4:
        uint64_t v11 = 0x75636F466F747561;
        unint64_t v10 = 0xEF6172656D614373;
        break;
      case 5:
        uint64_t v11 = 0x746F6F7465756C62;
        unint64_t v10 = 0xEB00000000454C68;
        break;
      case 6:
        uint64_t v11 = 0x6C466172656D6163;
        unint64_t v10 = 0xEB00000000687361;
        break;
      case 7:
        uint64_t v11 = 0xD000000000000011;
        unint64_t v10 = 0x80000001005B7640;
        break;
      case 8:
        unint64_t v10 = 0xE700000000000000;
        uint64_t v11 = 0x74696B656D6167;
        break;
      case 9:
        uint64_t v11 = 7565415;
        unint64_t v10 = 0xE300000000000000;
        break;
      case 0xA:
        uint64_t v11 = 0x706F63736F727967;
        unint64_t v10 = 0xE900000000000065;
        break;
      case 0xB:
        uint64_t v11 = 0x696B68746C616568;
        unint64_t v10 = 0xE900000000000074;
        break;
      case 0xC:
        unint64_t v10 = 0x80000001005B7680;
        uint64_t v11 = 0xD000000000000010;
        break;
      case 0xD:
        uint64_t v11 = 0x6D6F74656E67616DLL;
        unint64_t v10 = 0xEC00000072657465;
        break;
      case 0xE:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x6C6174656DLL;
        break;
      case 0xF:
        uint64_t v11 = 0x6F68706F7263696DLL;
        unint64_t v10 = 0xEA0000000000656ELL;
        break;
      case 0x10:
        unint64_t v10 = 0xE300000000000000;
        uint64_t v11 = 6514286;
        break;
      case 0x11:
        uint64_t v11 = 0x73656C676E65706FLL;
        unint64_t v10 = 0xE900000000000031;
        break;
      case 0x12:
        unint64_t v10 = 0xE900000000000032;
        goto LABEL_23;
      case 0x13:
        unint64_t v10 = 0xE900000000000033;
LABEL_23:
        uint64_t v11 = 0x73656C676E65706FLL;
        break;
      case 0x14:
        uint64_t v11 = 0x65506F5472656570;
        unint64_t v10 = 0xEA00000000007265;
        break;
      case 0x15:
        unint64_t v10 = 0xE300000000000000;
        uint64_t v11 = 7564659;
        break;
      case 0x16:
        uint64_t v12 = 0x436C6C697473;
        goto LABEL_29;
      case 0x17:
        uint64_t v11 = 0x6E6F6870656C6574;
        unint64_t v10 = 0xE900000000000079;
        break;
      case 0x18:
        uint64_t v12 = 0x436F65646976;
LABEL_29:
        uint64_t v11 = v12 & 0xFFFFFFFFFFFFLL | 0x6D61000000000000;
        unint64_t v10 = 0xEB00000000617265;
        break;
      case 0x19:
        unint64_t v10 = 0xE400000000000000;
        uint64_t v11 = 1768319351;
        break;
      default:
        break;
    }
    uint64_t v13 = 0x6F72656C65636361;
    unint64_t v14 = 0xED0000726574656DLL;
    switch((char)a2)
    {
      case 1:
        unint64_t v14 = 0xE500000000000000;
        if (v11 == 0x74696B7261) {
          goto LABEL_79;
        }
        goto LABEL_80;
      case 2:
        unint64_t v14 = 0xE500000000000000;
        if (v11 != 0x37766D7261) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 3:
        unint64_t v14 = 0xE500000000000000;
        if (v11 != 0x34366D7261) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 4:
        unint64_t v14 = 0xEF6172656D614373;
        if (v11 != 0x75636F466F747561) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 5:
        uint64_t v15 = 0x746F6F7465756C62;
        uint64_t v16 = 4541544;
        goto LABEL_73;
      case 6:
        uint64_t v15 = 0x6C466172656D6163;
        uint64_t v16 = 6845281;
        goto LABEL_73;
      case 7:
        unint64_t v14 = 0x80000001005B7640;
        if (v11 != 0xD000000000000011) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 8:
        unint64_t v14 = 0xE700000000000000;
        if (v11 != 0x74696B656D6167) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 9:
        unint64_t v14 = 0xE300000000000000;
        if (v11 != 7565415) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 10:
        unint64_t v14 = 0xE900000000000065;
        if (v11 != 0x706F63736F727967) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 11:
        unint64_t v14 = 0xE900000000000074;
        if (v11 != 0x696B68746C616568) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 12:
        unint64_t v14 = 0x80000001005B7680;
        if (v11 != 0xD000000000000010) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 13:
        unint64_t v14 = 0xEC00000072657465;
        if (v11 != 0x6D6F74656E67616DLL) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 14:
        unint64_t v14 = 0xE500000000000000;
        if (v11 != 0x6C6174656DLL) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 15:
        unint64_t v14 = 0xEA0000000000656ELL;
        if (v11 != 0x6F68706F7263696DLL) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 16:
        unint64_t v14 = 0xE300000000000000;
        if (v11 != 6514286) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 17:
        unint64_t v14 = 0xE900000000000031;
        if (v11 != 0x73656C676E65706FLL) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 18:
        unint64_t v14 = 0xE900000000000032;
        goto LABEL_66;
      case 19:
        unint64_t v14 = 0xE900000000000033;
LABEL_66:
        if (v11 != 0x73656C676E65706FLL) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 20:
        unint64_t v14 = 0xEA00000000007265;
        if (v11 != 0x65506F5472656570) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 21:
        unint64_t v14 = 0xE300000000000000;
        if (v11 != 7564659) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 22:
        uint64_t v15 = 0x6D61436C6C697473;
        uint64_t v16 = 6386277;
LABEL_73:
        unint64_t v14 = v16 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (v11 != v15) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 23:
        unint64_t v14 = 0xE900000000000079;
        if (v11 != 0x6E6F6870656C6574) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 24:
        uint64_t v13 = 0x6D61436F65646976;
        unint64_t v14 = 0xEB00000000617265;
        goto LABEL_78;
      case 25:
        unint64_t v14 = 0xE400000000000000;
        if (v11 != 1768319351) {
          goto LABEL_80;
        }
        goto LABEL_79;
      default:
LABEL_78:
        if (v11 != v13) {
          goto LABEL_80;
        }
LABEL_79:
        if (v10 == v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_88;
        }
LABEL_80:
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          unint64_t v8 = (v8 + 1) & v9;
          if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            goto LABEL_85;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_88:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v3 + 48) + v8);
LABEL_89:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_100329E50(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10032DF58(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10032A000(void *a1, void *a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_10032A37C(v7, result + 1);
    BOOL v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_10032BF84();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    sub_10032CC04((uint64_t)v8, v23);
    uint64_t *v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        int v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    sub_10032E0F4((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_10032A280(uint64_t *a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10032E4A4(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_10032A37C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000172F8(&qword_100661DC0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_10032BF84();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_10032A564()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100661DE0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032A878()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Platform();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000172F8(&qword_1006607D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100010098(&qword_10065E038, (void (*)(uint64_t))&type metadata accessor for Platform);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10032AC74()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_1006606E8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_36;
        }
        unint64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v16 = v33[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_36;
            }
            unint64_t v16 = v33[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_42;
                  }
                  if (v10 >= v32) {
                    goto LABEL_36;
                  }
                  unint64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v23 = v19[2];
      uint64_t v22 = v19[3];
      Hasher.init(_seed:)();
      String.hash(into:)();
      if (v22)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
      *unint64_t v12 = v20;
      v12[1] = v21;
      v12[2] = v23;
      v12[3] = v22;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_10032AFBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_1006607D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    unint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v19 >= v9) {
          goto LABEL_23;
        }
        unint64_t v20 = v6[v19];
        ++v12;
        if (!v20)
        {
          int64_t v12 = v19 + 1;
          if (v19 + 1 >= v9) {
            goto LABEL_23;
          }
          unint64_t v20 = v6[v12];
          if (!v20)
          {
            int64_t v12 = v19 + 2;
            if (v19 + 2 >= v9) {
              goto LABEL_23;
            }
            unint64_t v20 = v6[v12];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v9)
              {
LABEL_23:
                swift_release();
                uint64_t v22 = 1 << *(unsigned char *)(v2 + 32);
                if (v22 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v22;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v20 = v6[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v12 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_29;
                  }
                  if (v12 >= v9) {
                    goto LABEL_23;
                  }
                  unint64_t v20 = v6[v12];
                  ++v21;
                  if (v20) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v12 = v21;
            }
          }
        }
LABEL_22:
        unint64_t v8 = (v20 - 1) & v20;
        unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
      }
      uint64_t v15 = *(void *)(v2 + 48) + 16 * v14;
      uint64_t v16 = *(void *)v15;
      Swift::UInt v17 = *(unsigned __int8 *)(v15 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      sub_100012B7C((uint64_t)v23, v16);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v18 = *(void *)(v4 + 48) + 16 * result;
      *(void *)uint64_t v18 = v16;
      *(unsigned char *)(v18 + 8) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032B224()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000172F8(&qword_1006606D8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100010098((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10032B620()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660768);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v37 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v35 = v1;
    int64_t v36 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    uint64_t v38 = v2;
    while (1)
    {
      if (v7)
      {
        uint64_t v39 = (v7 - 1) & v7;
        int64_t v40 = v10;
        unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v36) {
          goto LABEL_33;
        }
        unint64_t v15 = v37[v14];
        int64_t v16 = v10 + 1;
        if (!v15)
        {
          int64_t v16 = v10 + 2;
          if (v10 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v15 = v37[v16];
          if (!v15)
          {
            int64_t v16 = v10 + 3;
            if (v10 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v15 = v37[v16];
            if (!v15)
            {
              uint64_t v17 = v10 + 4;
              if (v10 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v2 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v37[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v37[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v10 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v39 = (v15 - 1) & v15;
        int64_t v40 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      unint64_t v18 = *(void *)(v2 + 48) + (v13 << 6);
      uint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      Swift::UInt64 v21 = *(void *)(v18 + 16);
      Swift::UInt64 v22 = *(void *)(v18 + 24);
      Swift::UInt64 v23 = *(void *)(v18 + 32);
      Swift::UInt8 v24 = *(unsigned char *)(v18 + 40);
      uint64_t v25 = *(void *)(v18 + 48);
      uint64_t v26 = *(void *)(v18 + 56);
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v27 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v8 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v28) & ~*(void *)(v8 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v8 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v11 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = *(void *)(v4 + 48) + (v11 << 6);
      *(void *)unint64_t v12 = v19;
      *(void *)(v12 + 8) = v20;
      *(void *)(v12 + 16) = v21;
      *(void *)(v12 + 24) = v22;
      *(void *)(v12 + 32) = v23;
      *(unsigned char *)(v12 + 40) = v24;
      unint64_t v7 = v39;
      *(void *)(v12 + 48) = v25;
      *(void *)(v12 + 56) = v26;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v38;
      int64_t v10 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032B9CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660760);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      char v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
      Hasher.init(_seed:)();
      sub_1004B2540(v19);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032BCA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_1006606C8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032BF84()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100661DC0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032C224()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DownloadRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (Swift::UInt64 *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  sub_1000172F8(&qword_100660710);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = *(void *)(v6 + 56);
    BOOL v32 = (void *)(v6 + 56);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v10;
    char v30 = v0;
    int64_t v31 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 56;
    while (1)
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v17 = v16 | (v9 << 6);
      }
      else
      {
        int64_t v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v9;
        if (!v19)
        {
          int64_t v9 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v9];
          if (!v19)
          {
            int64_t v9 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v9];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                uint64_t v29 = 1 << *(unsigned char *)(v6 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v32 = -1 << v29;
                }
                uint64_t v1 = v30;
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v9 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v9 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v9];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v9 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v13 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      uint64_t v21 = *(void *)(v3 + 72);
      sub_1001C77F8(*(void *)(v6 + 48) + v21 * v17, (uint64_t)v5);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v5);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_1001C77F8((uint64_t)v5, *(void *)(v8 + 48) + v15 * v21);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

uint64_t sub_10032C584()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660848);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032C808()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for MessageRegistration();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000172F8(&qword_1006607C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    long long v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100010098(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

unint64_t sub_10032CC04(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_10032CC88(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_10032A564();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (uint64_t)sub_10032E884();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_10032FB38();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey(0);
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10032CEB8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Platform();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10032A878();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10032F888((uint64_t (*)(void))&type metadata accessor for Platform, &qword_1006607D8);
      goto LABEL_12;
    }
    sub_10032FE18();
  }
  uint64_t v12 = *v3;
  sub_100010098(&qword_10065E038, (void (*)(uint64_t))&type metadata accessor for Platform);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    char v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100010098((unint64_t *)&qword_10065E048, (void (*)(uint64_t))&type metadata accessor for Platform);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10032D174(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10032B224();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10032F888((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1006606D8);
      goto LABEL_12;
    }
    sub_1003303FC();
  }
  uint64_t v12 = *v3;
  sub_100010098((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    char v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100010098((unint64_t *)&unk_100663C40, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10032D430(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  uint64_t v38 = (_OWORD *)result;
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_41;
  }
  if (a3)
  {
    sub_10032B620();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_10032EDB0();
      goto LABEL_41;
    }
    sub_1003307AC();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  uint64_t v9 = *(void *)v5;
  uint64_t v10 = *(void *)(v5 + 8);
  swift_bridgeObjectRetain();
  uint64_t v47 = v9;
  String.hash(into:)();
  uint64_t v46 = v10;
  swift_bridgeObjectRelease();
  Swift::UInt64 v41 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v41);
  Swift::UInt64 v40 = *(void *)(v5 + 24);
  Hasher._combine(_:)(v40);
  Swift::UInt64 v39 = *(void *)(v5 + 32);
  Hasher._combine(_:)(v39);
  char v11 = *(unsigned char *)(v5 + 40);
  int v45 = v11 & 1;
  Hasher._combine(_:)(v11 & 1);
  uint64_t v13 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 56);
  swift_bridgeObjectRetain();
  uint64_t v44 = v13;
  String.hash(into:)();
  uint64_t v43 = v12;
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v14;
  uint64_t v42 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v15 = ~v14;
    uint64_t v16 = *(void *)(v8 + 48);
    do
    {
      uint64_t v17 = v16 + (a2 << 6);
      uint64_t result = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 16);
      uint64_t v18 = *(void *)(v17 + 24);
      uint64_t v20 = *(void *)(v17 + 32);
      int v21 = *(unsigned __int8 *)(v17 + 40);
      uint64_t v22 = *(void *)(v17 + 48);
      uint64_t v23 = *(void *)(v17 + 56);
      if (*(void *)v17 == v47 && *(void *)(v17 + 8) == v46)
      {
        BOOL v28 = v19 == v41 && v18 == v40 && v20 == v39;
        if (!v28 || (((v45 != 0) ^ v21) & 1) != 0) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          goto LABEL_10;
        }
        BOOL v25 = v19 == v41 && v18 == v40;
        BOOL v26 = v25 && v20 == v39;
        if (!v26 || (((v45 != 0) ^ v21) & 1) != 0) {
          goto LABEL_10;
        }
      }
      BOOL v29 = v22 == v44 && v23 == v43;
      if (v29 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        break;
      }
LABEL_10:
      a2 = (a2 + 1) & v15;
    }
    while (((*(void *)(v42 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_41:
  uint64_t v30 = *v37;
  *(void *)(*v37 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v31 = (_OWORD *)(*(void *)(v30 + 48) + (a2 << 6));
  long long v32 = v38[1];
  _OWORD *v31 = *v38;
  v31[1] = v32;
  long long v33 = v38[3];
  v31[2] = v38[2];
  v31[3] = v33;
  uint64_t v34 = *(void *)(v30 + 16);
  BOOL v35 = __OFADD__(v34, 1);
  uint64_t v36 = v34 + 1;
  if (v35) {
    __break(1u);
  }
  else {
    *(void *)(v30 + 16) = v36;
  }
  return result;
}

Swift::Int sub_10032D6EC(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  char v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_10032B9CC();
    }
    else
    {
      if (v8 > v7)
      {
        uint64_t result = (Swift::Int)sub_10032EF8C();
        goto LABEL_92;
      }
      sub_100330B20();
    }
    uint64_t v9 = *v3;
    Hasher.init(_seed:)();
    sub_1004B2540(v6);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
    a2 = result & ~v10;
    if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      while (2)
      {
        unint64_t v12 = 0xED0000726574656DLL;
        uint64_t v13 = 0x6F72656C65636361;
        switch(*(unsigned char *)(*(void *)(v9 + 48) + a2))
        {
          case 1:
            unint64_t v12 = 0xE500000000000000;
            uint64_t v13 = 0x74696B7261;
            break;
          case 2:
            unint64_t v12 = 0xE500000000000000;
            uint64_t v13 = 0x37766D7261;
            break;
          case 3:
            unint64_t v12 = 0xE500000000000000;
            uint64_t v13 = 0x34366D7261;
            break;
          case 4:
            uint64_t v13 = 0x75636F466F747561;
            unint64_t v12 = 0xEF6172656D614373;
            break;
          case 5:
            uint64_t v13 = 0x746F6F7465756C62;
            unint64_t v12 = 0xEB00000000454C68;
            break;
          case 6:
            uint64_t v13 = 0x6C466172656D6163;
            unint64_t v12 = 0xEB00000000687361;
            break;
          case 7:
            uint64_t v13 = 0xD000000000000011;
            unint64_t v12 = 0x80000001005B7640;
            break;
          case 8:
            unint64_t v12 = 0xE700000000000000;
            uint64_t v13 = 0x74696B656D6167;
            break;
          case 9:
            uint64_t v13 = 7565415;
            unint64_t v12 = 0xE300000000000000;
            break;
          case 0xA:
            unint64_t v12 = 0xE900000000000065;
            uint64_t v13 = 0x706F63736F727967;
            break;
          case 0xB:
            unint64_t v12 = 0xE900000000000074;
            uint64_t v13 = 0x696B68746C616568;
            break;
          case 0xC:
            unint64_t v12 = 0x80000001005B7680;
            uint64_t v13 = 0xD000000000000010;
            break;
          case 0xD:
            uint64_t v13 = 0x6D6F74656E67616DLL;
            unint64_t v12 = 0xEC00000072657465;
            break;
          case 0xE:
            unint64_t v12 = 0xE500000000000000;
            uint64_t v13 = 0x6C6174656DLL;
            break;
          case 0xF:
            uint64_t v13 = 0x6F68706F7263696DLL;
            unint64_t v12 = 0xEA0000000000656ELL;
            break;
          case 0x10:
            unint64_t v12 = 0xE300000000000000;
            uint64_t v13 = 6514286;
            break;
          case 0x11:
            uint64_t v13 = 0x73656C676E65706FLL;
            unint64_t v12 = 0xE900000000000031;
            break;
          case 0x12:
            unint64_t v12 = 0xE900000000000032;
            goto LABEL_36;
          case 0x13:
            unint64_t v12 = 0xE900000000000033;
LABEL_36:
            uint64_t v13 = 0x73656C676E65706FLL;
            break;
          case 0x14:
            unint64_t v12 = 0xEA00000000007265;
            uint64_t v13 = 0x65506F5472656570;
            break;
          case 0x15:
            unint64_t v12 = 0xE300000000000000;
            uint64_t v13 = 7564659;
            break;
          case 0x16:
            uint64_t v14 = 0x436C6C697473;
            goto LABEL_34;
          case 0x17:
            unint64_t v12 = 0xE900000000000079;
            uint64_t v13 = 0x6E6F6870656C6574;
            break;
          case 0x18:
            uint64_t v14 = 0x436F65646976;
LABEL_34:
            uint64_t v13 = v14 & 0xFFFFFFFFFFFFLL | 0x6D61000000000000;
            unint64_t v12 = 0xEB00000000617265;
            break;
          case 0x19:
            unint64_t v12 = 0xE400000000000000;
            uint64_t v13 = 1768319351;
            break;
          default:
            break;
        }
        uint64_t v15 = 0x6F72656C65636361;
        unint64_t v16 = 0xED0000726574656DLL;
        switch(v6)
        {
          case 1:
            unint64_t v16 = 0xE500000000000000;
            if (v13 != 0x74696B7261) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 2:
            unint64_t v16 = 0xE500000000000000;
            if (v13 != 0x37766D7261) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 3:
            unint64_t v16 = 0xE500000000000000;
            if (v13 != 0x34366D7261) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 4:
            unint64_t v16 = 0xEF6172656D614373;
            if (v13 != 0x75636F466F747561) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 5:
            uint64_t v18 = 0x746F6F7465756C62;
            uint64_t v19 = 4541544;
            goto LABEL_82;
          case 6:
            uint64_t v18 = 0x6C466172656D6163;
            uint64_t v19 = 6845281;
            goto LABEL_82;
          case 7:
            unint64_t v16 = 0x80000001005B7640;
            if (v13 != 0xD000000000000011) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 8:
            unint64_t v16 = 0xE700000000000000;
            if (v13 != 0x74696B656D6167) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 9:
            unint64_t v16 = 0xE300000000000000;
            if (v13 != 7565415) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 10:
            unint64_t v16 = 0xE900000000000065;
            if (v13 != 0x706F63736F727967) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 11:
            unint64_t v16 = 0xE900000000000074;
            if (v13 != 0x696B68746C616568) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 12:
            unint64_t v16 = 0x80000001005B7680;
            if (v13 != 0xD000000000000010) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 13:
            unint64_t v16 = 0xEC00000072657465;
            if (v13 != 0x6D6F74656E67616DLL) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 14:
            unint64_t v16 = 0xE500000000000000;
            if (v13 != 0x6C6174656DLL) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 15:
            unint64_t v16 = 0xEA0000000000656ELL;
            if (v13 != 0x6F68706F7263696DLL) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 16:
            unint64_t v16 = 0xE300000000000000;
            if (v13 != 6514286) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 17:
            unint64_t v16 = 0xE900000000000031;
            if (v13 != 0x73656C676E65706FLL) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 18:
            unint64_t v16 = 0xE900000000000032;
            if (v13 != 0x73656C676E65706FLL) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 19:
            unint64_t v16 = 0xE900000000000033;
            uint64_t v15 = 0x73656C676E65706FLL;
            goto LABEL_85;
          case 20:
            unint64_t v16 = 0xEA00000000007265;
            if (v13 != 0x65506F5472656570) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 21:
            unint64_t v16 = 0xE300000000000000;
            if (v13 != 7564659) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 22:
            uint64_t v17 = 0x436C6C697473;
            goto LABEL_81;
          case 23:
            unint64_t v16 = 0xE900000000000079;
            if (v13 != 0x6E6F6870656C6574) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 24:
            uint64_t v17 = 0x436F65646976;
LABEL_81:
            uint64_t v18 = v17 & 0xFFFFFFFFFFFFLL | 0x6D61000000000000;
            uint64_t v19 = 6386277;
LABEL_82:
            unint64_t v16 = v19 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v13 != v18) {
              goto LABEL_87;
            }
            goto LABEL_86;
          case 25:
            unint64_t v16 = 0xE400000000000000;
            if (v13 != 1768319351) {
              goto LABEL_87;
            }
            goto LABEL_86;
          default:
LABEL_85:
            if (v13 != v15) {
              goto LABEL_87;
            }
LABEL_86:
            if (v12 == v16) {
              goto LABEL_95;
            }
LABEL_87:
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v20) {
              goto LABEL_96;
            }
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_92:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v21 + 48) + a2) = v6;
  uint64_t v22 = *(void *)(v21 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23)
  {
    __break(1u);
LABEL_95:
    swift_bridgeObjectRelease_n();
LABEL_96:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x10032DE88);
  }
  *(void *)(v21 + 16) = v24;
  return result;
}

Swift::Int sub_10032DF58(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10032BCA4();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10032F120();
      goto LABEL_22;
    }
    sub_100330DC4();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void sub_10032E0F4(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10032BF84();
  }
  else
  {
    if (v7 > v6)
    {
      sub_10032F2D4();
      goto LABEL_14;
    }
    sub_100331074();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

uint64_t sub_10032E26C(Swift::UInt64 *a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DownloadRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (void *)((char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  BOOL v28 = a1;
  if (v13 > v12 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v14 = v9;
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10032C224();
    goto LABEL_8;
  }
  if (v13 <= v12)
  {
    sub_1003312F0();
LABEL_8:
    uint64_t v15 = *v4;
    Hasher.init(_seed:)();
    Swift::UInt64 v16 = *a1;
    Hasher._combine(_:)(*a1);
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v15 + 32);
    a2 = v17 & ~v18;
    if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      v27[1] = v8;
      uint64_t v19 = ~v18;
      uint64_t v14 = v9;
      uint64_t v20 = *(void *)(v9 + 72);
      while (1)
      {
        sub_100333790(*(void *)(v15 + 48) + v20 * a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v21 = *v11;
        sub_1003337F8((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v21 == v16) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v14 = v9;
  sub_10032F480();
LABEL_14:
  uint64_t v22 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1001C77F8((uint64_t)v28, *(void *)(v22 + 48) + *(void *)(v14 + 72) * a2);
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10032E4A4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10032C584();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10032F6D0();
      goto LABEL_14;
    }
    sub_100331630();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_10032E5C8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for MessageRegistration();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10032C808();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10032F888((uint64_t (*)(void))&type metadata accessor for MessageRegistration, &qword_1006607C0);
      goto LABEL_12;
    }
    sub_100331894();
  }
  uint64_t v12 = *v3;
  sub_100010098(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    Swift::Int v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100010098(&qword_1006607F8, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_10032E884()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100661DE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    Swift::Int v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032EA30()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006606E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    Swift::Int v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v19 = v17[3];
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = *v17;
    v21[1] = v18;
    v21[2] = v20;
    v21[3] = v19;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032EBF4()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006607D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v19 = v18;
    *(unsigned char *)(v19 + 8) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032EDB0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100660768);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26)
      {
        int64_t v9 = v25 + 2;
        if (v25 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v6 + 8 * v9);
        if (!v26) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = v15 << 6;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 32);
    char v20 = *(unsigned char *)(v17 + 40);
    uint64_t v21 = *(void *)(v17 + 48);
    uint64_t v22 = *(void *)(v17 + 56);
    unint64_t v23 = *(void *)(v4 + 48) + v16;
    long long v24 = *(_OWORD *)(v17 + 16);
    *(void *)unint64_t v23 = *(void *)v17;
    *(void *)(v23 + 8) = v18;
    *(_OWORD *)(v23 + 16) = v24;
    *(void *)(v23 + 32) = v19;
    *(unsigned char *)(v23 + 40) = v20;
    *(void *)(v23 + 48) = v21;
    *(void *)(v23 + 56) = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v13) {
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032EF8C()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100660760);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032F120()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_1006606C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10032F2D4()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100661DC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032F480()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DownloadRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100660710);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    id result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  id result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_100333790(*(void *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    id result = (void *)sub_1001C77F8((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10032F6D0()
{
  uint64_t v1 = v0;
  sub_1000172F8(&qword_100660848);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10032F868()
{
  return sub_10032F888((uint64_t (*)(void))&type metadata accessor for MessageRegistration, &qword_1006607C0);
}

void *sub_10032F888(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_1000172F8(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  unint64_t v26 = v4;
  int64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10032FB38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100661DE0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  int64_t v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v18 = v17;
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032FE18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Platform();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000172F8(&qword_1006607D8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100010098(&qword_10065E038, (void (*)(uint64_t))&type metadata accessor for Platform);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1003301C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_1006607D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    unint64_t result = swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  unint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v9) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v14 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_7:
    uint64_t v15 = *(void *)(v2 + 48) + 16 * v14;
    uint64_t v16 = *(void *)v15;
    Swift::UInt v17 = *(unsigned __int8 *)(v15 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    swift_bridgeObjectRetain();
    sub_100012B7C((uint64_t)v22, v16);
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = *(void *)(v4 + 48) + 16 * result;
    *(void *)uint64_t v18 = v16;
    *(unsigned char *)(v18 + 8) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_23:
    swift_release();
    uint64_t v1 = v0;
    goto LABEL_24;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1003303FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000172F8(&qword_1006606D8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100010098((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003307AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660768);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v34 = v1;
  uint64_t v35 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v36 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  uint64_t v37 = v2;
  while (1)
  {
    if (v7)
    {
      uint64_t v39 = (v7 - 1) & v7;
      int64_t v40 = v10;
      unint64_t v13 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v36) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v35 + 8 * v14);
    int64_t v16 = v10 + 1;
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v35 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v10 + 3;
        if (v10 + 3 >= v36) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v35 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v39 = (v15 - 1) & v15;
    int64_t v40 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(v2 + 48) + (v13 << 6);
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    Swift::UInt64 v21 = *(void *)(v18 + 16);
    Swift::UInt64 v22 = *(void *)(v18 + 24);
    Swift::UInt64 v23 = *(void *)(v18 + 32);
    Swift::UInt8 v24 = *(unsigned char *)(v18 + 40);
    uint64_t v26 = *(void *)(v18 + 48);
    uint64_t v25 = *(void *)(v18 + 56);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v38 = v19;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v24);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v8 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v28) & ~*(void *)(v8 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v8 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v11 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = *(void *)(v4 + 48) + (v11 << 6);
    uint64_t v2 = v37;
    *(void *)unint64_t v12 = v38;
    *(void *)(v12 + 8) = v20;
    *(void *)(v12 + 16) = v21;
    *(void *)(v12 + 24) = v22;
    *(void *)(v12 + 32) = v23;
    *(unsigned char *)(v12 + 40) = v24;
    *(void *)(v12 + 48) = v26;
    *(void *)(v12 + 56) = v25;
    ++*(void *)(v4 + 16);
    unint64_t v7 = v39;
    int64_t v10 = v40;
  }
  uint64_t v17 = v10 + 4;
  if (v10 + 4 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v35 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v35 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100330B20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660760);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    char v19 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    Hasher.init(_seed:)();
    sub_1004B2540(v19);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(unsigned char *)(*(void *)(v4 + 48) + v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100330DC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_1006606C8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100331074()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100661DC0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003312F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DownloadRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (Swift::UInt64 *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  sub_1000172F8(&qword_100660710);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(v6 + 56);
  int64_t v29 = v0;
  uint64_t v30 = v6 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v10;
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 56;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v3 + 72);
    sub_100333790(*(void *)(v6 + 48) + v21 * v17, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v5);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_1001C77F8((uint64_t)v5, *(void *)(v8 + 48) + v15 * v21);
    ++*(void *)(v8 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100331630()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000172F8(&qword_100660848);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100331894()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MessageRegistration();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000172F8(&qword_1006607C0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100010098(&qword_1006607F0, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

__n128 sub_100331C44@<Q0>(void *a1@<X0>, void (*a2)(void *__return_ptr, id *)@<X2>, __n128 *a3@<X8>)
{
  id v9 = a1;
  id v6 = a1;
  a2(v10, &v9);

  if (!v3)
  {
    unint64_t v8 = v10[1];
    __n128 result = v11;
    a3->n128_u64[0] = v10[0];
    a3->n128_u64[1] = v8;
    a3[1] = result;
  }
  return result;
}

void sub_100331CC0(void *a1@<X0>, void (*a2)(void *__return_ptr, void **)@<X1>, void *a3@<X8>)
{
  id v9 = a1;
  id v6 = a1;
  a2(v8, &v9);

  if (!v3)
  {
    uint64_t v7 = v8[1];
    *a3 = v8[0];
    a3[1] = v7;
  }
}

void sub_100331D38(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, id *)@<X2>, void *a3@<X8>)
{
  id v7 = a1;
  id v6 = a1;
  a2(&v8, &v7);

  if (!v3) {
    *a3 = v8;
  }
}

void sub_100331DAC(void *a1@<X0>, void (*a2)(void *__return_ptr, id *)@<X2>, void *a3@<X8>)
{
  id v8 = a1;
  id v6 = a1;
  a2(v9, &v8);

  if (!v3)
  {
    uint64_t v7 = v9[1];
    *a3 = v9[0];
    a3[1] = v7;
  }
}

void sub_100331E20(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void **)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = a1;
  id v6 = a1;
  a2(&v8, &v7);

  if (!v3) {
    *a3 = v8;
  }
}

void sub_100331E98(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, id *)@<X2>, unsigned char *a3@<X8>)
{
  id v7 = a1;
  id v6 = a1;
  a2(&v8, &v7);

  if (!v3) {
    *a3 = v8;
  }
}

void sub_100331F0C(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void **)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = a1;
  id v6 = a1;
  a2(&v8, &v10);

  if (!v3)
  {
    char v7 = v9;
    *(void *)a3 = v8;
    *(unsigned char *)(a3 + 8) = v7;
  }
}

double sub_100331F8C@<D0>(void *a1@<X0>, void (*a2)(long long *__return_ptr, void **)@<X1>, _OWORD *a3@<X8>)
{
  char v9 = a1;
  id v6 = a1;
  a2(&v8, &v9);

  if (!v3)
  {
    double result = *(double *)&v8;
    *a3 = v8;
  }
  return result;
}

void sub_100332004(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void **)@<X1>, void *a3@<X8>)
{
  char v7 = a1;
  id v6 = a1;
  a2(&v8, &v7);

  if (!v3) {
    *a3 = v8;
  }
}

double sub_10033207C@<D0>(void *a1@<X0>, void (*a2)(long long *__return_ptr, void *)@<X1>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  unint64_t v12 = (void *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a3 + *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  unint64_t v14 = (char *)v12 + *(int *)(v10 + 28);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v13, v15);
  *unint64_t v12 = a1;
  id v16 = a1;
  a2(&v18, v12);
  sub_1003337F8((uint64_t)v12, type metadata accessor for LicenseStorageDatabaseTransaction);
  if (!v4)
  {
    double result = *(double *)&v18;
    *a4 = v18;
  }
  return result;
}

uint64_t sub_1003321C0@<X0>(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  unint64_t v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a3 + *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  unint64_t v14 = (char *)v12 + *(int *)(v10 + 28);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v13, v15);
  *unint64_t v12 = a1;
  id v16 = a1;
  a2(&v19, v12);
  uint64_t result = sub_1003337F8((uint64_t)v12, type metadata accessor for LicenseStorageDatabaseTransaction);
  if (!v4)
  {
    char v18 = v20;
    *(void *)a4 = v19;
    *(unsigned char *)(a4 + 8) = v18;
  }
  return result;
}

double sub_10033230C@<D0>(void *a1@<X0>, void (*a2)(long long *__return_ptr, id *)@<X2>, _OWORD *a3@<X8>)
{
  id v8 = a1;
  id v6 = a1;
  a2(&v9, &v8);

  if (!v3)
  {
    double result = *(double *)&v9;
    *a3 = v9;
  }
  return result;
}

void sub_100332380(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for MarketplaceUpdateEntity.Entity();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = a2;
  id v8 = [v6 initWithPersistentID:a1 onConnection:v7];
  LODWORD(a1) = [v8 existsInDatabase];

  if (!a1)
  {

    id v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_10033241C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1 & 1;
  uint64_t v20 = 0;
  type metadata accessor for MarketplaceUpdateEntity.Entity();
  id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  uint64_t v11 = (void *)sub_10043DAEC(v9, a2);
  [v10 setPredicate:v11];

  id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a5 descriptor:v10];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = &v20;
  v13[3] = a3;
  void v13[4] = a4;
  v13[5] = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1003340EC;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100334198;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_1006414B0;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a5;
  swift_retain();
  swift_release();
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v20;
    swift_release();
    return v18;
  }
  return result;
}

uint64_t sub_100332630@<X0>(void *a1@<X0>, void (*a2)(uint64_t *__return_ptr, void *)@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for LicenseStorageDatabaseTransaction(0);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  id v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a3 + *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v14 = (char *)v12 + *(int *)(v10 + 28);
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v13, v15);
  *id v12 = a1;
  id v16 = a1;
  a2(&v19, v12);
  uint64_t result = sub_1003337F8((uint64_t)v12, type metadata accessor for LicenseStorageDatabaseTransaction);
  if (!v4) {
    *a4 = v19;
  }
  return result;
}

uint64_t sub_100332774(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_100010098(&qword_10065B490, type metadata accessor for URLResourceKey);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      int64_t v5 = *v4++;
      sub_100328A70(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100332830(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100329E50(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1003328CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_100324A30(a1, v4, v5, v6, v8, v7);
}

uint64_t sub_100332994()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003329DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_100321D18(a1, v4, v5, v7, v6);
}

uint64_t sub_100332A9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_100010098((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    id v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = v11 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v25 = v12;
    int64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    id v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    unint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      sub_100328FC0(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

void *sub_100332D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a1;
  void v7[3] = a2;
  void v7[4] = a3;
  v7[5] = a6;
  v7[7] = a4;
  v7[8] = a7;
  v7[6] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10032115C();
  return v7;
}

uint64_t sub_100332DDC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100332E24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000B238;
  return sub_1003A0BB8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100332EEC(void *a1)
{
  return sub_1001A1770(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100332F08@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  if (!v3)
  {
    *a2 = result;
    a2[1] = v6;
  }
  return result;
}

void **sub_100332F40(void **a1)
{
  return sub_100324204(a1, *(void *)(v1 + 16));
}

void **sub_100332F5C(void **a1)
{
  return sub_100324590(a1, *(void *)(v1 + 16));
}

void sub_100332F78(void *a1@<X0>, void *a2@<X8>)
{
  sub_100331DAC(a1, *(void (**)(void *__return_ptr, id *))(v2 + 24), a2);
}

uint64_t sub_100332F98()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100332FA8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100332FB8()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100332FE4()
{
  return swift_release();
}

uint64_t sub_100332FEC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332FFC()
{
  return sub_10025B894(*(unsigned __int8 **)(v0 + 16));
}

uint64_t sub_100333004()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333018(void *a1)
{
  id v2 = a1;
  return sub_1004EBAD8(&v2);
}

uint64_t sub_100333044()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333054()
{
  return sub_10025D110(*(unsigned __int8 **)(v0 + 16));
}

uint64_t sub_10033305C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10033306C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10033307C(uint64_t a1)
{
  return sub_10032080C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_100333088()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333098()
{
  if (*(void *)(v0 + 40)) {
    sub_100014524(v0 + 16);
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003330D8(void *a1)
{
  return sub_1003142B4(a1, *(void *)(v1 + 16), *(void (**)(void *))(v1 + 24));
}

uint64_t sub_1003330F8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333108()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333118(void *a1)
{
  return sub_10031B3D0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100333134()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333144()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333154()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10033318C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10033319C(void *a1)
{
}

uint64_t sub_1003331B4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003331C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003331D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003331E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003331F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333204()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100333214(void *a1@<X0>, void *a2@<X8>)
{
  sub_100331CC0(a1, *(void (**)(void *__return_ptr, void **))(v2 + 16), a2);
}

uint64_t sub_100333234()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333244(uint64_t a1)
{
  return sub_100320A78(a1, *(void *)(v1 + 16), *(void (**)(long long *__return_ptr))(v1 + 24)) & 1;
}

uint64_t sub_100333268()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333278()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333288()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333298()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003332A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003332B8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100333300@<X0>(void *a1@<X8>)
{
  return sub_100570980(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

uint64_t sub_100333320(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_10000B238;
  return sub_10056F1D0(a1, a2, v6, v7, v9, v8);
}

void sub_1003333E8(void *a1@<X0>, void *a2@<X8>)
{
  sub_100332004(a1, *(void (**)(uint64_t *__return_ptr, void **))(v2 + 16), a2);
}

uint64_t sub_100333408()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333418(uint64_t a1)
{
  return sub_100320B24(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24)) & 1;
}

uint64_t sub_10033343C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10033344C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033345C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10033346C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033347C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10033348C(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_100331E20(a1, *(void (**)(uint64_t *__return_ptr, void **))(v2 + 16), a2);
}

uint64_t sub_1003334AC()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003334BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003334CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003334DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003334EC(void *a1)
{
  uint64_t v2 = a1;
  return sub_10025654C(&v2);
}

uint64_t sub_100333514()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333524()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100333534(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100331F0C(a1, *(void (**)(uint64_t *__return_ptr, void **))(v2 + 16), a2);
}

uint64_t sub_100333554()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333564(uint64_t a1)
{
  return sub_100320C7C(a1, *(uint64_t **)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (void (*)(uint64_t, uint64_t, uint64_t))sub_1003335AC) & 1;
}

uint64_t sub_10033359C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003335AC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1003335B8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003335C8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003335D8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003335E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003335F8()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333608(uint64_t a1)
{
  return sub_100320928(a1, *(uint64_t **)(v1 + 16), *(void (**)(long long *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (uint64_t)&_swift_bridgeObjectRelease, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100333E60) & 1;
}

uint64_t sub_100333654()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100333668(void *a1)
{
  uint64_t v2 = *(void (**)(id *))(v1 + 24);
  id v4 = a1;
  id v3 = a1;
  v2(&v4);
}

void sub_1003336CC(void *a1@<X0>, void *a2@<X8>)
{
  sub_100331D38(a1, *(void (**)(uint64_t *__return_ptr, id *))(v2 + 24), a2);
}

uint64_t sub_1003336EC()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003336FC(uint64_t a1)
{
  return sub_1003209CC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_100333708()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333718()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333728(uint64_t a1)
{
  return sub_100320FDC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (void (*)(void, void))sub_1002548E8) & 1;
}

uint64_t sub_100333760()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333770()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333780()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003337F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100333858()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333868(uint64_t a1)
{
  return sub_100320F4C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(void))&_swift_release) & 1;
}

uint64_t sub_1003338A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1003338B0(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_100331E98(a1, *(void (**)(uint64_t *__return_ptr, id *))(v2 + 24), a2);
}

uint64_t sub_1003338D0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003338E0(uint64_t a1)
{
  return sub_10032106C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_1003338EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1003338FC(void *a1)
{
  uint64_t v2 = *(void (**)(void **))(v1 + 16);
  id v4 = a1;
  id v3 = a1;
  v2(&v4);
}

uint64_t sub_100333960()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333970(uint64_t a1)
{
  return sub_100320928(a1, *(uint64_t **)(v1 + 16), *(void (**)(long long *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (uint64_t)sub_10018AE44, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100333CC0) & 1;
}

uint64_t sub_1003339BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003339CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003339DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003339EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003339FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333A0C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333A1C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333A2C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333A3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

double sub_100333A4C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10033230C(a1, *(void (**)(long long *__return_ptr, id *))(v2 + 24), a2);
}

uint64_t sub_100333A6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100333AA4(uint64_t a1)
{
  return a1;
}

double sub_100333ADC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10033207C(a1, *(void (**)(long long *__return_ptr, void *))(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t sub_100333AFC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003321C0(a1, *(void (**)(uint64_t *__return_ptr, void *))(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t sub_100333B1C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333B2C(uint64_t a1)
{
  return sub_100320C7C(a1, *(uint64_t **)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (void (*)(uint64_t, uint64_t, uint64_t))sub_1003342D0) & 1;
}

uint64_t sub_100333B64()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100333B74(void *a1)
{
}

uint64_t sub_100333B8C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333B9C(uint64_t a1)
{
  return sub_100320D1C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &qword_100660788) & 1;
}

uint64_t sub_100333BC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333BD8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333BE8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333BF8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100333C08()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333C18@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  return result;
}

double sub_100333C54@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100331F8C(a1, *(void (**)(long long *__return_ptr, void **))(v2 + 16), a2);
}

uint64_t sub_100333C74(void *a1)
{
  return sub_100314180(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100333C94()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333CA4(uint64_t a1)
{
  return sub_100320BD0(a1, *(void *)(v1 + 16), *(void (**)(long long *__return_ptr))(v1 + 24));
}

uint64_t sub_100333CB0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333CC0(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return a4();
  }
}

uint64_t sub_100333CD0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333CE0(uint64_t a1)
{
  return sub_100320D1C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &qword_1006607B8) & 1;
}

uint64_t sub_100333D0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333D1C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333D2C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333D3C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333D4C(uint64_t a1)
{
  return sub_100320FDC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (void (*)(void, void))sub_1003340F0) & 1;
}

uint64_t sub_100333D84()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333D94()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333DA4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333DB4()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333DC4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333DD4()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333DE4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333DF4()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333E04(uint64_t a1)
{
  return sub_100320928(a1, *(uint64_t **)(v1 + 16), *(void (**)(long long *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (uint64_t)&_swift_release, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100333E60) & 1;
}

uint64_t sub_100333E50()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333E60(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t))
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return a4(a2);
  }
}

double sub_100333E74@<D0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = sub_100331C44(a1, (void (*)(void *__return_ptr, id *))*(void *)(v2 + 24), a2).n128_u64[0];
  return result;
}

uint64_t sub_100333E94()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333EA4(uint64_t a1)
{
  return sub_100320890(a1, *(void *)(v1 + 16), *(void (**)(_OWORD *__return_ptr))(v1 + 24));
}

uint64_t sub_100333EB0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100333F10@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100332630(a1, *(void (**)(uint64_t *__return_ptr, void *))(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t sub_100333F30()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333F40()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333F50()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333F60(uint64_t a1)
{
  return sub_100320D1C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &qword_100660868) & 1;
}

uint64_t sub_100333F8C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333F9C()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333FAC(uint64_t a1)
{
  return sub_100320D1C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &qword_100660880) & 1;
}

uint64_t sub_100333FD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100333FE8()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100333FF8(uint64_t a1)
{
  return sub_100320EC8(a1, *(void *)(v1 + 16), *(void (**)(void *__return_ptr))(v1 + 24));
}

uint64_t sub_100334004()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100334014(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100334020()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100334030()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100334040()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100334050(uint64_t a1)
{
  return sub_100320E1C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24)) & 1;
}

uint64_t sub_100334074()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100334084()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100334094(uint64_t a1)
{
  return sub_100320F4C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24), *(void *)(v1 + 32), (uint64_t (*)(void))&_swift_bridgeObjectRelease) & 1;
}

uint64_t sub_1003340CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003340DC(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return a3();
  }
}

void sub_100334230(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_100334248(void *a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_100334260(void *a1@<X0>, void *a2@<X8>)
{
}

double sub_100334278@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100333C54(a1, a2);
}

void sub_100334290(void *a1@<X0>, uint64_t a2@<X8>)
{
}

double sub_1003342A8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100333A4C(a1, a2);
}

uint64_t sub_1003342D4()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1003344EC(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage);
  return v0;
}

uint64_t sub_100334378()
{
  sub_1003342D4();

  return swift_deallocClassInstance();
}

uint64_t sub_1003343D0()
{
  return type metadata accessor for InstallDependencies();
}

uint64_t type metadata accessor for InstallDependencies()
{
  uint64_t result = qword_1006608D8;
  if (!qword_1006608D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100334424()
{
  sub_100289CE8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1003344EC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065E410);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10033454C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v43 = a3;
  uint64_t v44 = a6;
  uint64_t v46 = a2;
  uint64_t v13 = type metadata accessor for LicenseStorageDatabaseConfig(0);
  __chkstk_darwin(v13 - 8);
  int v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DDMDeclarationStatusDatabaseConfig(0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Container();
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v41 - v25;
  id v27 = [objc_allocWithZone((Class)type metadata accessor for InstallCoordinationInstallObserver(0)) init];
  long long v28 = a1[2];
  *(_OWORD *)(v8 + 88) = a1[3];
  long long v29 = a1[5];
  *(_OWORD *)(v8 + 104) = a1[4];
  *(_OWORD *)(v8 + 120) = v29;
  *(_OWORD *)(v8 + 135) = *(_OWORD *)((char *)a1 + 95);
  long long v30 = a1[1];
  *(_OWORD *)(v8 + 40) = *a1;
  *(_OWORD *)(v8 + 56) = v30;
  *(_OWORD *)(v8 + 72) = v28;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = v27;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 160) = a7;
  sub_100334908(v46, (uint64_t)v26);
  type metadata accessor for ManagedAppDeclarationStatusStore();
  uint64_t v31 = swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  sub_100334908((uint64_t)v26, (uint64_t)v24);
  sub_1003C77F8((void *)0xD00000000000001BLL, 0x80000001005BDDF0, (uint64_t)v17);
  sub_1001A1588((uint64_t)v24);
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v33 = v42;
  v32(v20, v17, v42);
  sub_1001A1588((uint64_t)v26);
  uint64_t v34 = v31 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon32ManagedAppDeclarationStatusStore_database;
  *(void *)(v31 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon32ManagedAppDeclarationStatusStore_database) = a4;
  uint64_t v35 = sub_1000172F8(&qword_10065CF60);
  sub_10033496C((uint64_t)v20, v34 + *(int *)(v35 + 36), type metadata accessor for DDMDeclarationStatusDatabaseConfig);
  *(void *)(v8 + 152) = v31;
  uint64_t v36 = v43;
  *(void *)(v8 + 168) = v44;
  sub_100334908(v36, (uint64_t)v26);
  swift_retain();
  swift_retain();
  sub_1003C77F8((void *)0x2F65736E6563694CLL, 0xE800000000000000, (uint64_t)v17);
  sub_1001A1588((uint64_t)v26);
  uint64_t v37 = (uint64_t)v45;
  v32(v45, v17, v33);
  sub_1001A1588(v36);
  sub_1001A1588(v46);
  uint64_t v38 = v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage;
  *(void *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage) = a4;
  uint64_t v39 = sub_1000172F8(&qword_10065E410);
  sub_10033496C(v37, v38 + *(int *)(v39 + 36), type metadata accessor for LicenseStorageDatabaseConfig);
  return v8;
}

uint64_t sub_100334908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Container();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033496C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003349D4(uint64_t a1, id *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v59 = a7;
  id v52 = a2;
  id v46 = *v8;
  uint64_t v14 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v47 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  Swift::UInt64 v48 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100660A68);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1005A4B40;
  *(unsigned char *)(v17 + 32) = 0;
  *(void *)(v17 + 40) = &type metadata for IPA_PreambleTask;
  *(void *)(v17 + 48) = &off_10063D390;
  *(unsigned char *)(v17 + 56) = 1;
  *(void *)(v17 + 64) = &type metadata for IPA_DownloadTask;
  *(void *)(v17 + 72) = &off_10064B590;
  *(unsigned char *)(v17 + 80) = 2;
  *(void *)(v17 + 88) = type metadata accessor for IPA_InstallTask();
  *(void *)(v17 + 96) = &off_10063E288;
  *(unsigned char *)(v17 + 104) = 3;
  *(void *)(v17 + 112) = &type metadata for IPA_PostambleTask;
  *(void *)(v17 + 120) = &off_10064C308;
  *(unsigned char *)(v17 + 128) = 7;
  uint64_t v18 = type metadata accessor for IPA_FailTask();
  *(void *)(v17 + 136) = v18;
  *(void *)(v17 + 144) = &off_100649AE8;
  *(unsigned char *)(v17 + 152) = 4;
  *(void *)(v17 + 160) = v18;
  *(void *)(v17 + 168) = &off_100649AE8;
  type metadata accessor for AppInstallEngine(0);
  swift_allocObject();
  swift_retain();
  id v19 = a4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v20 = a1;
  uint64_t v21 = sub_100548544(a1, v17, a3, v19, a5, a6, v59);
  swift_release();

  uint64_t v53 = a6;
  swift_unknownObjectRelease();
  uint64_t v59 = a5;
  swift_bridgeObjectRelease();
  *(id *)((char *)v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) = v21;
  *(id *)((char *)v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_progressCache) = *(id *)(a3 + 224);
  type metadata accessor for AppInstallEntity.Entity();
  id v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_retain();
  uint64_t v23 = v52;
  id v24 = [v22 initWithPersistentID:v20 onConnection:v23];
  LOBYTE(v22) = [v24 existsInDatabase];

  if ((v22 & 1) == 0)
  {

    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    return (uint64_t)v8;
  }
  int v45 = v23;
  id v46 = v19;
  id v52 = v8;
  id v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v25 valueForProperty:v26];

  if (v27)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v57 = 0u;
    long long v58 = 0u;
  }
  uint64_t v28 = v50;
  sub_1001CD9F8((uint64_t)&v57, (uint64_t)&v55);
  if (v56)
  {
    sub_1001C5DD4(&v55, v54);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v29 = sub_100241F7C(v54);
    if (v28) {
      goto LABEL_22;
    }
    uint64_t v31 = v29;
    uint64_t v32 = v30;
    swift_release();
    sub_100014524((uint64_t)v54);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  sub_10001729C((uint64_t)&v57, (uint64_t *)&unk_10065C9C0);

  uint64_t v33 = (char *)v52 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_bundleID;
  *(void *)uint64_t v33 = v31;
  *((void *)v33 + 1) = v32;
  id v34 = v25;
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v34 valueForProperty:v35];

  if (v36)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v57 = 0u;
    long long v58 = 0u;
  }
  uint64_t v37 = v51;
  sub_1001CD9F8((uint64_t)&v57, (uint64_t)&v55);
  uint64_t v38 = v49;
  if (!v56)
  {
    uint64_t v39 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v47, 1, 1, v49);
    int64_t v40 = v48;
    goto LABEL_17;
  }
  sub_1001C5DD4(&v55, v54);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v39 = v47;
  sub_100243034(v54, v47);
  int64_t v40 = v48;
  if (!v28)
  {
    swift_release();
    sub_100014524((uint64_t)v54);
    uint64_t v37 = v51;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v39, 0, 1, v38);
LABEL_17:
    sub_10001729C((uint64_t)&v57, (uint64_t *)&unk_10065C9C0);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
    {
      UUID.init()();

      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001729C(v39, &qword_10065C9B0);
      uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    }
    else
    {

      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v42 = v39;
      uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
      v41(v40, v42, v38);
    }
    uint64_t v8 = v52;
    v41((char *)v52 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_installID, (uint64_t)v40, v38);
    return (uint64_t)v8;
  }
LABEL_22:
  swift_release();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_10033515C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100335248, 0, 0);
}

uint64_t sub_100335248()
{
  uint64_t v48 = v0;
  uint64_t v2 = (void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = (id *)(v0 + 24);
  static Logger.install.getter();
  sub_100338750(v1, v0 + 24);
  uint64_t v4 = *(void **)(v1 + 8);
  unint64_t v5 = *(void *)(v1 + 16);
  v2[5] = v5;
  uint64_t v6 = *(void *)(v1 + 24);
  v2[6] = v6;
  uint64_t v7 = *(void *)(v1 + 32);
  v2[7] = v7;
  uint64_t v8 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v9 = v6;
  swift_retain();
  sub_1003387B8(v3);
  id v10 = v4;
  sub_1003387E4((id)v5, v9, v7, v8);
  uint64_t v11 = v7;
  swift_retain();
  sub_1003387B8(v3);
  id v12 = v10;
  sub_1003387E4((id)v5, v9, v7, v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v42 = v14;
    log = v13;
    *(void *)&long long v44 = v7;
    uint64_t v45 = v8;
    *((void *)&v44 + 1) = v9;
    uint64_t v15 = v46[8];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412546;
    uint64_t v18 = *(void **)(*(void *)(v15 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) + 120);
    v46[5] = v18;
    id v19 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v18;
    swift_release_n();
    *(_WORD *)(v16 + 12) = 2080;
    unint64_t v20 = 0xE600000000000000;
    uint64_t v21 = 0x64656C696166;
    uint64_t v11 = v7;
    uint64_t v9 = *((void *)&v44 + 1);
    switch(v45)
    {
      case 1:
        unint64_t v20 = 0xE800000000000000;
        uint64_t v21 = 0x73736572676F7270;
        break;
      case 2:
        unint64_t v20 = 0xEB00000000726564;
        uint64_t v21 = 0x6C6F686563616C70;
        break;
      case 3:
        if (v7 | *((void *)&v44 + 1) | v5)
        {
          if (v5 == 1 && v44 == 0)
          {
            unint64_t v20 = 0xE800000000000000;
            uint64_t v21 = 0x64656C65636E6163;
          }
          else if (v5 == 2 && v44 == 0)
          {
            uint64_t v21 = 0x646573756170;
          }
          else
          {
            BOOL v25 = v44 == 0;
            BOOL v26 = v5 == 3;
            if (v26 && v25) {
              uint64_t v21 = 0x64656D75736572;
            }
            else {
              uint64_t v21 = 0x697469726F697270;
            }
            if (v26 && v25) {
              unint64_t v20 = 0xE700000000000000;
            }
            else {
              unint64_t v20 = 0xEB0000000064657ALL;
            }
          }
        }
        else
        {
          unint64_t v20 = 0xE900000000000064;
          uint64_t v21 = 0x6574656C706D6F63;
        }
        break;
      default:
        break;
    }
    uint64_t v27 = v46[10];
    uint64_t v40 = v46[9];
    uint64_t v41 = v46[11];
    v46[6] = sub_1000143F4(v21, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100338800(v3);

    uint64_t v8 = v45;
    sub_10033882C((void *)v5, *((uint64_t *)&v44 + 1), v11, v45);
    sub_100338800(v3);

    sub_10033882C((void *)v5, *((uint64_t *)&v44 + 1), v11, v45);
    _os_log_impl((void *)&_mh_execute_header, log, v42, "[%@] Handling coordinator event '%s'", (uint8_t *)v16, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v41, v40);
  }
  else
  {
    uint64_t v23 = v46[10];
    uint64_t v22 = v46[11];
    uint64_t v24 = v46[9];
    swift_release_n();
    sub_100338800(v3);

    sub_10033882C((void *)v5, v9, v11, v8);
    sub_100338800(v3);

    sub_10033882C((void *)v5, v9, v11, v8);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  switch(v8)
  {
    case 0:
      uint64_t v28 = *(void *)(v46[8] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine);
      v46[16] = v28;
      swift_errorRetain();
      uint64_t v29 = sub_100335D08;
      uint64_t v30 = v28;
      goto LABEL_27;
    case 1:
      uint64_t v30 = *(void *)(v46[8] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_progressCache);
      uint64_t v33 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_installID;
      v46[21] = v30;
      v46[22] = v33;
      uint64_t v29 = sub_100335FC0;
LABEL_27:
      uint64_t result = _swift_task_switch(v29, v30, 0);
      break;
    case 2:
      sub_1003371A4((id)v5);
      sub_10033882C((void *)v5, v9, v11, 2);
      swift_task_dealloc();
      uint64_t v31 = (uint64_t (*)(void))v46[1];
      uint64_t result = v31();
      break;
    case 3:
      uint64_t v34 = v11 | v9;
      if (v11 | v9 | v5)
      {
        if (v5 != 1 || v34)
        {
          if (v5 != 2 || v34)
          {
            if (v5 != 3 || v34)
            {
              uint64_t v39 = (void *)swift_task_alloc();
              v46[15] = v39;
              *uint64_t v39 = v46;
              v39[1] = sub_100335BC4;
              uint64_t result = sub_100537294();
            }
            else
            {
              uint64_t v38 = (void *)swift_task_alloc();
              v46[28] = v38;
              *uint64_t v38 = v46;
              v38[1] = sub_100336958;
              uint64_t result = sub_1005360F0();
            }
          }
          else
          {
            sub_100336B94();
            uint64_t v37 = (void *)swift_task_alloc();
            v46[26] = v37;
            void *v37 = v46;
            v37[1] = sub_10033660C;
            uint64_t result = sub_100534DE0();
          }
        }
        else
        {
          NSString v35 = (void *)swift_task_alloc();
          v46[24] = v35;
          *NSString v35 = v46;
          v35[1] = sub_1003361B0;
          uint64_t result = sub_100533F40();
        }
      }
      else
      {
        id v36 = (void *)swift_task_alloc();
        v46[23] = v36;
        *id v36 = v46;
        v36[1] = sub_10033606C;
        uint64_t result = sub_1005330C4(3);
      }
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_100335BC4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100335D08()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[12];
  uint64_t v3 = *(void *)(v1 + 152);
  v0[17] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[18] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = dword_1006606F0;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[19] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100335E28;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + v5))((uint64_t)v6, (uint64_t)sub_100338848, v4, v3);
}

uint64_t sub_100335E28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 128);
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_1003364DC;
  }
  else {
    uint64_t v4 = sub_1003362F4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100335FC0()
{
  sub_1002B6DF8(*(void *)(v0 + 64) + *(void *)(v0 + 176), *(double *)(v0 + 112) / 100.0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10033606C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003361B0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003362F4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003363B4;
  return sub_1005330C4(7);
}

uint64_t sub_1003363B4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100338C8C, 0, 0);
}

uint64_t sub_1003364DC()
{
  swift_errorRelease();
  return _swift_task_switch(sub_100336570, 0, 0);
}

uint64_t sub_100336570()
{
  sub_10033882C(*(void **)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), 0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10033660C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100336734, 0, 0);
}

uint64_t sub_100336734()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_installID;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v3;
  void *v3 = v0;
  v3[1] = sub_100336814;
  return sub_1002B7EB0(v1 + v2);
}

uint64_t sub_100336814()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100336958(char a1)
{
  *(unsigned char *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100336A84, 0, 0);
}

uint64_t sub_100336A84()
{
  if (*(unsigned char *)(v0 + 232))
  {
    sub_100336E9C();
  }
  else
  {
    sub_100338750(v0 + 24, v0 + 16);
    uint64_t v1 = *(void **)(v0 + 16);
    if (v1)
    {
      *(void *)(v0 + 32) = 0;
      unsigned int v2 = [v1 pauseWithError:v0 + 32];
      uint64_t v3 = *(void **)(v0 + 32);
      if (v2)
      {
        id v4 = v3;
      }
      else
      {
        id v5 = v3;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
    }
  }
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

id sub_100336B94()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)__chkstk_darwin(v8);
  id v12 = (char *)v22 - v11;
  uint64_t v13 = (uint64_t *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_bundleID);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_bundleID + 8);
  if (v14)
  {
    uint64_t v15 = *v13;
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id result = sub_1003DB240(v15, v14, 1);
    if (result)
    {
      v22[0] = result;
      id v16 = [result URL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
      unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      unint64_t v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = (char *)swift_allocObject();
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = 0;
      *((void *)v20 + 4) = v1;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v20[v18], v9, v5);
      *(void *)&v20[v19] = 20;
      uint64_t v21 = &v20[(v19 + 15) & 0xFFFFFFFFFFFFFFF8];
      *(void *)uint64_t v21 = 0x6573756170;
      *((void *)v21 + 1) = 0xE500000000000000;
      swift_retain();
      sub_1000163AC((uint64_t)v4, (uint64_t)&unk_100660A88, (uint64_t)v20);

      swift_release();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
  }
  return result;
}

id sub_100336E9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = (id)__chkstk_darwin(v8);
  id v12 = (char *)v22 - v11;
  uint64_t v13 = (uint64_t *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_bundleID);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_bundleID + 8);
  if (v14)
  {
    uint64_t v15 = *v13;
    objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    id result = sub_1003DB240(v15, v14, 1);
    if (result)
    {
      v22[0] = result;
      id v16 = [result URL];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 1, 1, v17);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
      unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      unint64_t v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = (char *)swift_allocObject();
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = 0;
      *((void *)v20 + 4) = v1;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v20[v18], v9, v5);
      *(void *)&v20[v19] = 21;
      uint64_t v21 = &v20[(v19 + 15) & 0xFFFFFFFFFFFFFFF8];
      *(void *)uint64_t v21 = 0x656D75736572;
      *((void *)v21 + 1) = 0xE600000000000000;
      swift_retain();
      sub_1000163AC((uint64_t)v4, (uint64_t)&unk_100660A90, (uint64_t)v20);

      swift_release();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
  }
  return result;
}

uint64_t sub_1003371A4(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  id v10 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v12 = (char *)&v20 - v11;
  id v13 = [a1 URL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 1, 1, v14);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v16 = (v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 3) = 0;
  *((void *)v17 + 4) = v1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v17[v15], v10, v6);
  *(void *)&v17[v16] = 5;
  unint64_t v18 = &v17[(v16 + 15) & 0xFFFFFFFFFFFFFFF8];
  *(void *)unint64_t v18 = 0xD000000000000011;
  *((void *)v18 + 1) = 0x80000001005BDE60;
  swift_retain();
  sub_1000163AC((uint64_t)v5, (uint64_t)&unk_100660A98, (uint64_t)v17);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

uint64_t sub_10033741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a7;
  v8[7] = a8;
  void v8[4] = a5;
  v8[5] = a6;
  void v8[2] = a1;
  v8[3] = a4;
  return _swift_task_switch(sub_100337444, 0, 0);
}

uint64_t sub_100337444()
{
  uint64_t v1 = *(void *)(v0 + 56);
  long long v10 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine;
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 24);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(*(void *)(v0 + 24) + v2) + 160) + 168);
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v10;
  *(void *)(v3 + 48) = v1;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  *(void *)(v6 + 16) = sub_1003389A8;
  *(void *)(v6 + 24) = v3;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660858 + dword_100660858);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100337588;
  uint64_t v8 = *(void *)(v0 + 16);
  return v11(v8, (uint64_t)sub_1003389B8, v6, v5);
}

uint64_t sub_100337588()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1003376D8(void *a1, uint64_t a2, NSObject *a3, void *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v80 = a6;
  uint64_t v75 = a5;
  id v79 = a4;
  uint64_t v78 = a3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v76 = (id *)((char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  id v13 = (char *)v70 - v12;
  uint64_t v14 = sub_1000172F8(&qword_10065CFF0);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AppInstallRequestType();
  os_log_t v77 = *(os_log_t *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_installID;
  uint64_t v21 = sub_1000172F8(&qword_10065C060);
  *((void *)&v85 + 1) = v21;
  unint64_t v86 = sub_1003389EC();
  uint64_t v22 = sub_10019CE94((uint64_t *)&v84);
  uint64_t v23 = (char *)v22 + *(int *)(v21 + 64);
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v20, v24);
  *(_WORD *)uint64_t v22 = 15;
  sub_1000172F8(&qword_10065BD58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v84, inited + 32);
  *(void *)&long long v82 = _swiftEmptyArrayStorage;
  id v26 = a1;
  sub_100554E6C(inited);
  uint64_t v27 = (void *)sub_1004730A0(0, v82, (uint64_t)sub_100473004, 0, v26);

  swift_bridgeObjectRelease();
  if (!v27) {
    return;
  }
  uint64_t v73 = v9;
  id v28 = v27;
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 valueForProperty:v29];

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v84 = 0u;
    long long v85 = 0u;
  }
  sub_1001CD9F8((uint64_t)&v84, (uint64_t)&v82);
  if (!v83)
  {
    sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);
LABEL_20:

    return;
  }
  uint64_t v71 = v8;
  sub_1001C5DD4(&v82, v81);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  id v74 = (id)sub_1002443D8(v81);
  swift_release();
  sub_100014524((uint64_t)v81);
  sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

  id v28 = v28;
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v28 valueForProperty:v31];

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v84 = 0u;
    long long v85 = 0u;
  }
  sub_1001CD9F8((uint64_t)&v84, (uint64_t)&v82);
  if (!v83)
  {
    sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

    goto LABEL_20;
  }
  sub_1001C5DD4(&v82, v81);
  swift_allocObject();
  JSONDecoder.init()();
  v70[1] = (id)sub_100241F7C(v81);
  uint64_t v72 = v33;
  swift_release();
  sub_100014524((uint64_t)v81);
  sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

  id v28 = v28;
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [v28 valueForProperty:v34];

  if (v35)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v84 = 0u;
    long long v85 = 0u;
  }
  sub_1001CD9F8((uint64_t)&v84, (uint64_t)&v82);
  if (!v83)
  {
    sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  sub_1001C5DD4(&v82, v81);
  swift_allocObject();
  JSONDecoder.init()();
  char v36 = sub_10024216C(v81);
  swift_release();
  sub_100014524((uint64_t)v81);
  sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

  if (v36)
  {
    v70[0] = [objc_allocWithZone((Class)BAAppStoreClient) init];
    id v37 = v28;
    NSString v38 = String._bridgeToObjectiveC()();
    id v39 = [v37 valueForProperty:v38];

    if (v39)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v84 = 0u;
      long long v85 = 0u;
    }
    uint64_t v40 = v73;
    sub_1001CD9F8((uint64_t)&v84, (uint64_t)&v82);
    if (v83)
    {
      sub_1001C5DD4(&v82, v81);
      swift_allocObject();
      JSONDecoder.init()();
      sub_100243CF8(v81, (uint64_t)v16);
      swift_release();
      sub_100014524((uint64_t)v81);
      os_log_t v41 = v77;
      ((void (*)(char *, void, uint64_t, uint64_t))v77[7].isa)(v16, 0, 1, v17);
    }
    else
    {
      os_log_t v41 = v77;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77[7].isa)(v16, 1, 1, v17);
    }
    id v42 = v70[0];
    sub_10001729C((uint64_t)&v84, (uint64_t *)&unk_10065C9C0);

    if (((unsigned int (*)(char *, uint64_t, uint64_t))v41[6].isa)(v16, 1, v17) == 1)
    {
      sub_10001729C((uint64_t)v16, &qword_10065CFF0);
      char v43 = 0;
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v41[4].isa)(v19, v16, v17);
      char v43 = AppInstallRequestType.isUserInitiated.getter();
      ((void (*)(char *, uint64_t))v41[1].isa)(v19, v17);
    }
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(&v87);
    id v46 = v45;
    id v47 = [self descriptorWithAppBundleIdentifier:v44 appBundleURL:v45 event:v79 client:0];

    [v47 setAutomaticInstall:(v43 & 1) == 0];
    [v47 setUserInitiated:v43 & 1];
    *(void *)&long long v84 = 0;
    if ([v42 performEventWithDescriptor:v47 error:&v84])
    {
      id v79 = v37;
      id v48 = (id)v84;
      static Logger.install.getter();
      id v49 = v74;
      unint64_t v50 = v80;
      swift_bridgeObjectRetain_n();
      id v51 = v49;
      id v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v76 = (void *)swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        *(void *)&long long v84 = v78;
        *(_DWORD *)uint64_t v54 = 138412546;
        os_log_t v77 = v52;
        *(void *)&long long v82 = v51;
        id v55 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v76 = v51;

        *(_WORD *)(v54 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)&long long v82 = sub_1000143F4(v75, v50, (uint64_t *)&v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_t v56 = v77;
        _os_log_impl((void *)&_mh_execute_header, v77, v53, "[%@] Sent %{public}s to Background Assets", (uint8_t *)v54, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v71);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v71);
      }
    }
    else
    {
      id v57 = (id)v84;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      long long v58 = v76;
      static Logger.install.getter();
      id v59 = v74;
      unint64_t v60 = v80;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v61 = v59;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      uint64_t v78 = v62;
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        id v79 = v37;
        char v66 = (void *)v65;
        os_log_t v77 = (os_log_t)swift_slowAlloc();
        *(void *)&long long v84 = v77;
        *(_DWORD *)uint64_t v64 = 138412802;
        *(void *)&long long v82 = v61;
        id v67 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v66 = v61;

        *(_WORD *)(v64 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)&long long v82 = sub_1000143F4(v75, v60, (uint64_t *)&v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v64 + 22) = 2114;
        swift_errorRetain();
        uint64_t v68 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v82 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v66[1] = v68;
        swift_errorRelease();
        swift_errorRelease();
        uint64_t v69 = v78;
        _os_log_impl((void *)&_mh_execute_header, v78, v63, "[%@] Failed to send %{public}s to Background Assets: %{public}@", (uint8_t *)v64, 0x20u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(void *, uint64_t))(v73 + 8))(v76, v71);
      }
      else
      {

        swift_errorRelease();
        swift_bridgeObjectRelease_n();

        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(void *, uint64_t))(v73 + 8))(v58, v71);
      }
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100338580()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_installID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100338654()
{
  return type metadata accessor for IPA_AppInstall();
}

uint64_t type metadata accessor for IPA_AppInstall()
{
  uint64_t result = qword_1006609C8;
  if (!qword_1006609C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003386A8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100338750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100660A78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id *sub_1003387B8(id *a1)
{
  id v2 = *a1;
  return a1;
}

id sub_1003387E4(id result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2) {
    return result;
  }
  if (!a4) {
    return (id)swift_errorRetain();
  }
  return result;
}

id *sub_100338800(id *a1)
{
  return a1;
}

void sub_10033882C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2)
  {
  }
  else if (!a4)
  {
    swift_errorRelease();
  }
}

void sub_100338848(void **a1)
{
  sub_10054223C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100338868(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  id v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *id v13 = v2;
  v13[6] = v11;
  v13[7] = v12;
  void v13[4] = v9;
  v13[5] = v8;
  v13[2] = a1;
  v13[3] = v7;
  v13[1] = sub_1000176B4;
  return _swift_task_switch(sub_100337444, 0, 0);
}

void sub_1003389A8(void *a1)
{
  sub_1003376D8(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1003389B8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t sub_1003389EC()
{
  unint64_t result = qword_10065C068;
  if (!qword_10065C068)
  {
    sub_10017B924(&qword_10065C060);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065C068);
  }
  return result;
}

uint64_t sub_100338A4C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  id v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *id v13 = v2;
  v13[6] = v11;
  v13[7] = v12;
  void v13[4] = v9;
  v13[5] = v8;
  v13[2] = a1;
  v13[3] = v7;
  v13[1] = sub_10000B238;
  return _swift_task_switch(sub_100337444, 0, 0);
}

uint64_t sub_100338B90()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100338C8C()
{
  return sub_100336570();
}

unint64_t sub_100338D00(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E655F6E656B6F74;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000020;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100338DD4(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E655F6E656B6F74;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000020;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100338EA8(char *a1, char *a2)
{
  return sub_10051BD68(*a1, *a2);
}

Swift::Int sub_100338EB4()
{
  return Hasher._finalize()();
}

uint64_t sub_100338F2C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100338F90()
{
  return Hasher._finalize()();
}

uint64_t sub_100339004@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639048, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100339064(uint64_t *a1@<X8>)
{
  uint64_t v2 = 909455955;
  if (!*v1) {
    uint64_t v2 = 0x6E69616C70;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100339098(unsigned __int8 *a1, char *a2)
{
  return sub_10051D74C(*a1, *a2);
}

Swift::Int sub_1003390A4()
{
  return sub_10040F6CC();
}

uint64_t sub_1003390AC()
{
  return sub_10044A0CC();
}

Swift::Int sub_1003390B4()
{
  return sub_10044A9C4();
}

unint64_t sub_1003390BC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10033C5C4(*a1);
  *a2 = result;
  return result;
}

void sub_1003390EC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001005B7E00;
  switch(*v1)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v2 = 0x746963696C706D69;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "refresh_token");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 3:
      *(void *)a1 = 0xD00000000000002FLL;
      *(void *)(a1 + 8) = 0x80000001005B7E30;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = v3;
      break;
  }
}

Swift::Int sub_100339198()
{
  return Hasher._finalize()();
}

uint64_t sub_1003391E4()
{
  return String.hash(into:)();
}

Swift::Int sub_1003391F4()
{
  return Hasher._finalize()();
}

uint64_t sub_10033923C@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006391C8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100339290(void *a1@<X8>)
{
  *a1 = 1701080931;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1003392A4(char *a1, char *a2)
{
  return sub_10051C404(*a1, *a2);
}

Swift::Int sub_1003392B0()
{
  return sub_10040F7C4();
}

uint64_t sub_1003392B8()
{
  return sub_100449B44();
}

Swift::Int sub_1003392C0()
{
  return sub_10044B114();
}

unint64_t sub_1003392C8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10033C610(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1003392F8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100338D00(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100339324()
{
  return sub_100338DD4(*v0);
}

unint64_t sub_10033932C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10033C610(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100339354(uint64_t a1)
{
  unint64_t v2 = sub_10033BE28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100339390(uint64_t a1)
{
  unint64_t v2 = sub_10033BE28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003393CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  long long v84 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v86 = (void (*)(char *, uint64_t, uint64_t))((char *)&v75 - v6);
  uint64_t v88 = type metadata accessor for URL();
  uint64_t v85 = *(void *)(v88 - 8);
  uint64_t v7 = __chkstk_darwin(v88);
  uint64_t v83 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - v9;
  uint64_t v11 = sub_1000172F8(&qword_100660B48);
  uint64_t v87 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OAuthServerMetadata();
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10033BE28();
  uint64_t v17 = (uint64_t)v89;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v19 = (uint64_t)v86;
  id v79 = (int *)v14;
  unint64_t v80 = v10;
  uint64_t v20 = v87;
  uint64_t v21 = v88;
  uint64_t v89 = a1;
  uint64_t v81 = v16;
  LOBYTE(v91) = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v78 = v13;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v85;
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v23(v19, 1, v21) == 1)
  {
    sub_1002BDBEC(v19);
    type metadata accessor for InternalError();
    sub_100013BDC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v78, v11);
    return sub_100014524((uint64_t)v89);
  }
  uint64_t v76 = v23;
  uint64_t v24 = v21;
  uint64_t v25 = v11;
  id v26 = v80;
  unint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v86(v80, v19, v24);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v27(v81, v26, v24);
  LOBYTE(v91) = 1;
  uint64_t v77 = v25;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v75 = v27;
  id v28 = v86;
  uint64_t v29 = (uint64_t)v84;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v88;
  if (v76(v29, 1, v88) == 1)
  {
    sub_1002BDBEC(v29);
    type metadata accessor for InternalError();
    sub_100013BDC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    unint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 8);
    ((void (*)(char *, uint64_t))v86)(v80, v30);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v78, v77);
    NSString v31 = v81;
    sub_100014524((uint64_t)v89);
    return ((uint64_t (*)(char *, uint64_t))v86)(v31, v30);
  }
  id v32 = v83;
  v28(v83, v29, v30);
  uint64_t v33 = v79;
  v75(&v81[v79[5]], v32, v30);
  uint64_t v34 = sub_1000172F8((uint64_t *)&unk_10065C5D0);
  char v90 = 2;
  uint64_t v35 = sub_10027210C((unint64_t *)&qword_10065DEA8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v36 = v30;
  *(void *)&v81[v33[6]] = v91;
  char v90 = 3;
  uint64_t v37 = v77;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  long long v84 = (char *)v35;
  unint64_t v86 = (void (*)(char *, uint64_t, uint64_t))v34;
  NSString v38 = v91;
  if (v91)
  {
    uint64_t v39 = v91[2];
    uint64_t v40 = v81;
    if (v39)
    {
      swift_bridgeObjectRetain();
      os_log_t v41 = (void **)(v38 + 5);
      id v42 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v43 = (uint64_t)*(v41 - 1);
        NSString v44 = *v41;
        swift_bridgeObjectRetain();
        v45._countAndFlagsBits = v43;
        v45._object = v44;
        unint64_t v46 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639200, v45);
        swift_bridgeObjectRelease();
        if (v46 <= 3)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v42 = sub_100290528(0, v42[2] + 1, 1, v42);
          }
          unint64_t v48 = v42[2];
          unint64_t v47 = v42[3];
          if (v48 >= v47 >> 1) {
            id v42 = sub_100290528((void *)(v47 > 1), v48 + 1, 1, v42);
          }
          v42[2] = v48 + 1;
          *((unsigned char *)v42 + v48 + 32) = v46;
          uint64_t v36 = v88;
        }
        v41 += 2;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      uint64_t v40 = v81;
      uint64_t v37 = v77;
    }
    else
    {
      id v42 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v49 = (uint64_t)v89;
  }
  else
  {
    id v42 = &off_100639280;
    uint64_t v49 = (uint64_t)v89;
    uint64_t v40 = v81;
  }
  *(void *)&v40[v79[7]] = v42;
  char v90 = 4;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v76 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v91;
  if (v91)
  {
    uint64_t v50 = *((void *)v76 + 2);
    if (v50)
    {
      id v51 = (void **)(swift_bridgeObjectRetain() + 40);
      id v52 = _swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v53 = (uint64_t)*(v51 - 1);
        uint64_t v54 = *v51;
        swift_bridgeObjectRetain();
        v55._countAndFlagsBits = v53;
        v55._object = v54;
        Swift::Int v56 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006392A8, v55);
        swift_bridgeObjectRelease();
        if (!v56) {
          break;
        }
        if (v56 == 1)
        {
          char v57 = 1;
LABEL_30:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v52 = sub_10029042C(0, v52[2] + 1, 1, v52);
          }
          unint64_t v59 = v52[2];
          unint64_t v58 = v52[3];
          if (v59 >= v58 >> 1) {
            id v52 = sub_10029042C((void *)(v58 > 1), v59 + 1, 1, v52);
          }
          v52[2] = v59 + 1;
          *((unsigned char *)v52 + v59 + 32) = v57;
          uint64_t v36 = v88;
        }
        v51 += 2;
        if (!--v50)
        {
          swift_bridgeObjectRelease();
          uint64_t v49 = (uint64_t)v89;
          uint64_t v37 = v77;
          goto LABEL_37;
        }
      }
      char v57 = 0;
      goto LABEL_30;
    }
    id v52 = _swiftEmptyArrayStorage;
LABEL_37:
    swift_bridgeObjectRelease();
    unint64_t v60 = v81;
  }
  else
  {
    id v52 = 0;
    unint64_t v60 = v40;
  }
  *(void *)&v60[v79[8]] = v52;
  char v90 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v61 = v91;
  uint64_t v62 = v91[2];
  if (v62)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v63 = (void **)(v61 + 5);
    uint64_t v64 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v65 = (uint64_t)*(v63 - 1);
      char v66 = *v63;
      swift_bridgeObjectRetain();
      v67._countAndFlagsBits = v65;
      v67._object = v66;
      Swift::Int v68 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006392F8, v67);
      swift_bridgeObjectRelease();
      if (v68)
      {
        uint64_t v49 = (uint64_t)v89;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v64 = sub_100290330(0, v64[2] + 1, 1, v64);
        }
        uint64_t v49 = (uint64_t)v89;
        unint64_t v70 = v64[2];
        unint64_t v69 = v64[3];
        unint64_t v71 = v70 + 1;
        if (v70 >= v69 >> 1) {
          uint64_t v64 = sub_100290330((void *)(v69 > 1), v70 + 1, 1, v64);
        }
        v64[2] = v71;
      }
      v63 += 2;
      --v62;
    }
    while (v62);
    swift_bridgeObjectRelease();
    uint64_t v37 = v77;
  }
  else
  {
    uint64_t v64 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v72 = *(void (**)(char *, uint64_t))(v85 + 8);
  v72(v83, v36);
  v72(v80, v36);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v78, v37);
  uint64_t v74 = (uint64_t)v81;
  uint64_t v73 = v82;
  *(void *)&v81[v79[9]] = v64;
  sub_10033BE7C(v74, v73);
  sub_100014524(v49);
  return sub_10033BEE0(v74);
}

uint64_t sub_10033A0DC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100660B58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10033BE28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  URL.absoluteString.getter();
  LOBYTE(v48) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v9 = v2;
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for OAuthServerMetadata();
  URL.absoluteString.getter();
  LOBYTE(v48) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  swift_bridgeObjectRelease();
  unint64_t v48 = *(void **)(v3 + *(int *)(v11 + 24));
  char v47 = 2;
  sub_1000172F8(&qword_10065DEB8);
  sub_10033BF3C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 28);
  uint64_t v43 = v3;
  uint64_t v14 = *(void *)(v3 + v13);
  int64_t v15 = *(void *)(v14 + 16);
  unint64_t v16 = _swiftEmptyArrayStorage;
  if (v15)
  {
    uint64_t v40 = v11;
    uint64_t v41 = 0;
    uint64_t v44 = v5;
    uint64_t v45 = v6;
    unint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v46 = v14;
    swift_bridgeObjectRetain();
    int64_t v42 = v15;
    sub_100455C1C(0, v15, 0);
    int64_t v17 = v42;
    uint64_t v18 = v46;
    uint64_t v19 = 0;
    unint64_t v16 = v48;
    unint64_t v20 = (unint64_t)"de";
    do
    {
      unint64_t v21 = 0x80000001005B7E00;
      unint64_t v22 = 0xD000000000000012;
      switch(*(unsigned char *)(v18 + v19 + 32))
      {
        case 1:
          unint64_t v21 = 0xE800000000000000;
          unint64_t v22 = 0x746963696C706D69;
          break;
        case 2:
          unint64_t v21 = 0xED00006E656B6F74;
          unint64_t v22 = 0x5F68736572666572;
          break;
        case 3:
          unint64_t v22 = 0xD00000000000002FLL;
          unint64_t v21 = v20 | 0x8000000000000000;
          break;
        default:
          break;
      }
      unint64_t v48 = v16;
      unint64_t v24 = v16[2];
      unint64_t v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        id v26 = (char *)v20;
        sub_100455C1C(v23 > 1, v24 + 1, 1);
        unint64_t v20 = (unint64_t)v26;
        int64_t v17 = v42;
        uint64_t v18 = v46;
        unint64_t v16 = v48;
      }
      ++v19;
      uint64_t v16[2] = v24 + 1;
      uint64_t v25 = &v16[2 * v24];
      v25[4] = v22;
      v25[5] = v21;
    }
    while (v17 != v19);
    swift_bridgeObjectRelease();
    uint64_t v5 = v44;
    uint64_t v6 = v45;
    uint64_t v12 = v40;
    uint64_t v9 = v41;
  }
  unint64_t v48 = v16;
  char v47 = 3;
  uint64_t v27 = sub_1000172F8((uint64_t *)&unk_10065C5D0);
  uint64_t v28 = sub_10027210C(&qword_10065DEC0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9) {
    goto LABEL_28;
  }
  uint64_t v46 = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(v43 + *(int *)(v12 + 32));
  if (v29)
  {
    int64_t v30 = *(void *)(v29 + 16);
    NSString v31 = _swiftEmptyArrayStorage;
    if (v30)
    {
      uint64_t v43 = v27;
      uint64_t v44 = v5;
      uint64_t v45 = v6;
      unint64_t v48 = _swiftEmptyArrayStorage;
      sub_100455C1C(0, v30, 0);
      NSString v31 = v48;
      id v32 = (unsigned char *)(v29 + 32);
      unint64_t v33 = v48[2];
      uint64_t v34 = 2 * v33;
      do
      {
        if (*v32) {
          uint64_t v35 = 909455955;
        }
        else {
          uint64_t v35 = 0x6E69616C70;
        }
        if (*v32) {
          unint64_t v36 = 0xE400000000000000;
        }
        else {
          unint64_t v36 = 0xE500000000000000;
        }
        unint64_t v48 = v31;
        unint64_t v37 = v31[3];
        unint64_t v38 = v33 + 1;
        if (v33 >= v37 >> 1)
        {
          sub_100455C1C(v37 > 1, v33 + 1, 1);
          NSString v31 = v48;
        }
        v31[2] = v38;
        uint64_t v39 = &v31[v34];
        v39[4] = v35;
        v39[5] = v36;
        v34 += 2;
        ++v32;
        unint64_t v33 = v38;
        --v30;
      }
      while (v30);
      uint64_t v5 = v44;
      uint64_t v6 = v45;
    }
    unint64_t v48 = v31;
    char v47 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_28:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10033A668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[6] = a2;
  v5[7] = a3;
  void v5[5] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  return _swift_task_switch(sub_10033A7F8, 0, 0);
}

uint64_t sub_10033A7F8()
{
  if (os_variant_has_internal_content())
  {
    *(unsigned char *)(v0 + 184) = 0;
    uint64_t v1 = (__CFString *)String._bridgeToObjectiveC()();
    uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
    CFPreferencesGetAppBooleanValue(v1, v2, (Boolean *)(v0 + 184));
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  sub_1004CFE38(v7, v6, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    sub_1002BDBEC(*(void *)(v0 + 104));
    type metadata accessor for InternalError();
    sub_100013BDC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 136), *(void *)(v0 + 104), *(void *)(v0 + 112));
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10033AB04;
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 72);
    return sub_10044D2A4(v11, 0, 0, 1, v12);
  }
}

uint64_t sub_10033AB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[19] = a1;
  v5[20] = a2;
  v5[21] = a3;
  v5[22] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_10033B1F8;
  }
  else {
    uint64_t v6 = sub_10033AC48;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10033AC48()
{
  uint64_t v47 = v0;
  if ([*(id *)(v0 + 168) statusCode] != (id)200)
  {
    unint64_t v10 = *(void *)(v0 + 160);
    uint64_t v9 = *(void **)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 152);
    id v12 = [v9 statusCode];
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 8) = 0;
    swift_willThrow();

    uint64_t v7 = v11;
    unint64_t v8 = v10;
    goto LABEL_5;
  }
  uint64_t v1 = *(void *)(v0 + 176);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v2 = type metadata accessor for OAuthServerMetadata();
  sub_100013BDC(&qword_10065FD40, (void (*)(uint64_t))type metadata accessor for OAuthServerMetadata);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v3 = v1;
  unint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void **)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 152);
  if (v3)
  {
    swift_release();

    uint64_t v7 = v6;
    unint64_t v8 = v4;
LABEL_5:
    sub_100013510(v7, v8);
    uint64_t v15 = *(void *)(v0 + 128);
    uint64_t v14 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void **)(v0 + 72);
    static Logger.general.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v14, v16);
    id v19 = v18;
    swift_errorRetain();
    id v20 = v19;
    swift_errorRetain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v25 = *(void *)(v0 + 120);
    uint64_t v24 = *(void *)(v0 + 128);
    uint64_t v45 = *(void *)(v0 + 112);
    uint64_t v26 = *(void *)(v0 + 88);
    uint64_t v27 = *(void *)(v0 + 96);
    uint64_t v28 = *(void **)(v0 + 72);
    uint64_t v29 = *(void *)(v0 + 80);
    if (v23)
    {
      uint64_t v44 = *(void *)(v0 + 96);
      uint64_t v30 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412802;
      log = v21;
      *(void *)(v0 + 16) = v28;
      os_log_type_t type = v22;
      id v31 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v28;

      *(_WORD *)(v30 + 12) = 2082;
      uint64_t v32 = URL.absoluteString.getter();
      *(void *)(v0 + 24) = sub_1000143F4(v32, v33, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v34(v24, v45);
      *(_WORD *)(v30 + 22) = 2114;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 32) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v41[1] = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Error trying to load OAuth endpoints from: %{public}s: %{public}@", (uint8_t *)v30, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v44, v29);
    }
    else
    {

      uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v34(v24, v45);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v29);
    }
    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 112);
    swift_willThrow();
    v34(v36, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  uint64_t v40 = *(void *)(v0 + 40);
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 112));
  swift_release();

  sub_100013510(v6, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v40, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
  return v38();
}

uint64_t sub_10033B1F8()
{
  uint64_t v39 = v0;
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = (void *)v0[9];
  static Logger.general.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  id v6 = v5;
  swift_errorRetain();
  id v7 = v6;
  swift_errorRetain();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  os_log_t log = v8;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v28 = v0[16];
    uint64_t v30 = v0[15];
    uint64_t v31 = v0[14];
    uint64_t v34 = v0[11];
    unint64_t v10 = (void *)v0[9];
    uint64_t v35 = v0[10];
    uint64_t v36 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    v0[2] = v10;
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v11 = 138412802;
    os_log_type_t type = v9;
    id v12 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v10;

    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v13 = URL.absoluteString.getter();
    v0[3] = sub_1000143F4(v13, v14, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v15(v28, v31);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, type, "[%@] Error trying to load OAuth endpoints from: %{public}s: %{public}@", (uint8_t *)v11, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  }
  else
  {
    uint64_t v18 = v0[15];
    uint64_t v17 = v0[16];
    uint64_t v19 = v0[14];
    uint64_t v21 = v0[11];
    uint64_t v20 = v0[12];
    BOOL v23 = (void *)v0[9];
    uint64_t v22 = v0[10];

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v15(v17, v19);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  uint64_t v24 = v0[17];
  uint64_t v25 = v0[14];
  swift_willThrow();
  v15(v24, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t sub_10033B5E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003393CC(a1, a2);
}

uint64_t sub_10033B5FC(void *a1)
{
  return sub_10033A0DC(a1);
}

uint64_t type metadata accessor for OAuthServerMetadata()
{
  uint64_t result = qword_100660B00;
  if (!qword_100660B00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10033B660(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10033B78C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10033B850(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10033B92C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10033BA34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_10033BAF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10033BBDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033BBF0);
}

uint64_t sub_10033BBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10033BCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033BCC4);
}

uint64_t sub_10033BCC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10033BD80()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10033BE28()
{
  unint64_t result = qword_100660B50;
  if (!qword_100660B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B50);
  }
  return result;
}

uint64_t sub_10033BE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OAuthServerMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033BEE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OAuthServerMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10033BF3C()
{
  unint64_t result = qword_100660B60;
  if (!qword_100660B60)
  {
    sub_10017B924(&qword_10065DEB8);
    sub_10027210C(&qword_10065DEC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B60);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OAuthResponseType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10033C070);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthResponseType()
{
  return &type metadata for OAuthResponseType;
}

unsigned char *storeEnumTagSinglePayload for OAuthCodeChallengeMethod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033C174);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthCodeChallengeMethod()
{
  return &type metadata for OAuthCodeChallengeMethod;
}

unsigned char *storeEnumTagSinglePayload for OAuthGrantType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033C278);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthGrantType()
{
  return &type metadata for OAuthGrantType;
}

unsigned char *storeEnumTagSinglePayload for OAuthServerMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033C37CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OAuthServerMetadata.CodingKeys()
{
  return &type metadata for OAuthServerMetadata.CodingKeys;
}

unint64_t sub_10033C3B8()
{
  unint64_t result = qword_100660B68;
  if (!qword_100660B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B68);
  }
  return result;
}

unint64_t sub_10033C410()
{
  unint64_t result = qword_100660B70;
  if (!qword_100660B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B70);
  }
  return result;
}

unint64_t sub_10033C468()
{
  unint64_t result = qword_100660B78;
  if (!qword_100660B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B78);
  }
  return result;
}

unint64_t sub_10033C4C0()
{
  unint64_t result = qword_100660B80;
  if (!qword_100660B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B80);
  }
  return result;
}

unint64_t sub_10033C518()
{
  unint64_t result = qword_100660B88;
  if (!qword_100660B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B88);
  }
  return result;
}

unint64_t sub_10033C570()
{
  unint64_t result = qword_100660B90;
  if (!qword_100660B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660B90);
  }
  return result;
}

unint64_t sub_10033C5C4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639098, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_10033C610(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639118, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void *sub_10033C65C(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v35 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)v4 + v11;
    unint64_t v14 = (char *)a2 + v11;
    *uint64_t v13 = *v14;
    *((void *)v13 + 1) = *((void *)v14 + 1);
    *((_WORD *)v13 + 8) = *((_WORD *)v14 + 8);
    uint64_t v15 = *((void *)v14 + 4);
    *((void *)v13 + 3) = *((void *)v14 + 3);
    *((void *)v13 + 4) = v15;
    uint64_t v16 = *((void *)v14 + 6);
    *((void *)v13 + 5) = *((void *)v14 + 5);
    *((void *)v13 + 6) = v16;
    v13[56] = v14[56];
    uint64_t v17 = (char *)v4 + v12;
    uint64_t v18 = (char *)a2 + v12;
    long long v19 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)v4 + v12 + 24) = v19;
    uint64_t v20 = v19;
    uint64_t v21 = **(void (***)(char *, char *, uint64_t))(v19 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v17, v18, v20);
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)v4 + v22) = v24;
    *((unsigned char *)v4 + v23) = *((unsigned char *)a2 + v23);
    uint64_t v25 = a3[10];
    uint64_t v26 = a3[11];
    uint64_t v27 = (char *)v4 + v25;
    uint64_t v28 = (char *)a2 + v25;
    *(void *)uint64_t v27 = *(void *)v28;
    v27[8] = v28[8];
    *((unsigned char *)v4 + v26) = *((unsigned char *)a2 + v26);
    uint64_t v29 = a3[12];
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = *(void *)((char *)a2 + v29 + 16);
    id v33 = v24;
    if (v32 == 1)
    {
      long long v34 = *((_OWORD *)v31 + 1);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v34;
      *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
    }
    else
    {
      *uint64_t v30 = *v31;
      *((void *)v30 + 1) = *((void *)v31 + 1);
      *((void *)v30 + 2) = v32;
      *((void *)v30 + 3) = *((void *)v31 + 3);
      v30[32] = v31[32];
      *((void *)v30 + 5) = *((void *)v31 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v36 = a3[13];
    uint64_t v37 = (void *)((char *)v4 + v36);
    uint64_t v38 = (void *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    uint64_t v41 = v38[2];
    unint64_t v42 = v38[3];
    uint64_t v43 = v38[4];
    uint64_t v44 = v38[5];
    uint64_t v64 = v38[7];
    uint64_t v65 = v38[6];
    uint64_t v66 = v38[8];
    uint64_t v67 = v38[9];
    unint64_t v68 = v38[10];
    unint64_t v69 = v38[11];
    uint64_t v70 = v38[12];
    uint64_t v71 = v38[13];
    sub_100254D34(*v38, v40, v41, v42, v43, v44, v65, v64, v66, v67, v68, v69);
    uint64_t *v37 = v39;
    v37[1] = v40;
    v37[2] = v41;
    v37[3] = v42;
    v37[4] = v43;
    v37[5] = v44;
    v37[6] = v65;
    v37[7] = v64;
    v37[8] = v66;
    v37[9] = v67;
    v37[10] = v68;
    v37[11] = v69;
    v37[12] = v70;
    v37[13] = v71;
    uint64_t v45 = a3[14];
    uint64_t v46 = (char *)v4 + v45;
    uint64_t v47 = (char *)a2 + v45;
    uint64_t v48 = *(void *)((char *)a2 + v45 + 32);
    if (v48)
    {
      char *v46 = *v47;
      uint64_t v49 = *((void *)v47 + 5);
      *((void *)v46 + 4) = v48;
      *((void *)v46 + 5) = v49;
      (**(void (***)(uint64_t, uint64_t))(v48 - 8))((uint64_t)(v46 + 8), (uint64_t)(v47 + 8));
      *((_OWORD *)v46 + 3) = *((_OWORD *)v47 + 3);
    }
    else
    {
      long long v50 = *((_OWORD *)v47 + 1);
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v50;
      long long v51 = *((_OWORD *)v47 + 3);
      *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
      *((_OWORD *)v46 + 3) = v51;
    }
    uint64_t v52 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    uint64_t v53 = (char *)v4 + v52;
    uint64_t v54 = (char *)a2 + v52;
    uint64_t v55 = *(void *)((char *)a2 + v52 + 24);
    if (v55)
    {
      uint64_t v56 = *((void *)v54 + 4);
      *((void *)v53 + 3) = v55;
      *((void *)v53 + 4) = v56;
      (**(void (***)(void))(v55 - 8))();
    }
    else
    {
      long long v57 = *((_OWORD *)v54 + 1);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v57;
      *((void *)v53 + 4) = *((void *)v54 + 4);
    }
    uint64_t v58 = a3[17];
    uint64_t v59 = a3[18];
    unint64_t v60 = (void *)((char *)v4 + v58);
    id v61 = (void *)((char *)a2 + v58);
    uint64_t v62 = v61[1];
    void *v60 = *v61;
    v60[1] = v62;
    *((unsigned char *)v4 + v59) = *((unsigned char *)a2 + v59);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10033CA34(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014524(a1 + a2[7]);

  if (*(void *)(a1 + a2[12] + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = a1 + a2[13];
  sub_10033CB6C(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void *)(v6 + 40), *(void *)(v6 + 48), *(void *)(v6 + 56), *(void *)(v6 + 64), *(void *)(v6 + 72), *(void *)(v6 + 80), *(void *)(v6 + 88));
  uint64_t v7 = a1 + a2[14];
  if (*(void *)(v7 + 32)) {
    sub_100014524(v7 + 8);
  }
  uint64_t v8 = a1 + a2[16];
  if (*(void *)(v8 + 24)) {
    sub_100014524(v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10033CB6C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12)
{
  if (a12 >> 62 == 1)
  {
    sub_100013510(a3, a4);
    swift_bridgeObjectRelease();
    sub_100013510(a10, a11);
  }
  else
  {
    if (a12 >> 62) {
      return result;
    }
    sub_100013510(result, a2);
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *sub_10033CC0C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  *uint64_t v12 = *v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((_WORD *)v12 + 8) = *((_WORD *)v13 + 8);
  uint64_t v14 = *((void *)v13 + 4);
  *((void *)v12 + 3) = *((void *)v13 + 3);
  *((void *)v12 + 4) = v14;
  uint64_t v15 = *((void *)v13 + 6);
  *((void *)v12 + 5) = *((void *)v13 + 5);
  *((void *)v12 + 6) = v15;
  v12[56] = v13[56];
  uint64_t v16 = (char *)a1 + v11;
  uint64_t v17 = (char *)a2 + v11;
  long long v18 = *(_OWORD *)((char *)a2 + v11 + 24);
  *(_OWORD *)((char *)a1 + v11 + 24) = v18;
  uint64_t v19 = v18;
  uint64_t v20 = **(void (***)(char *, char *, uint64_t))(v18 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v16, v17, v19);
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void **)((char *)a2 + v21);
  *(void *)((char *)a1 + v21) = v23;
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  uint64_t v24 = a3[10];
  uint64_t v25 = a3[11];
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = (char *)a2 + v24;
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
  uint64_t v28 = a3[12];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = *(void *)((char *)a2 + v28 + 16);
  id v32 = v23;
  if (v31 == 1)
  {
    long long v33 = *((_OWORD *)v30 + 1);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v33;
    *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
  }
  else
  {
    *uint64_t v29 = *v30;
    *((void *)v29 + 1) = *((void *)v30 + 1);
    *((void *)v29 + 2) = v31;
    *((void *)v29 + 3) = *((void *)v30 + 3);
    v29[32] = v30[32];
    *((void *)v29 + 5) = *((void *)v30 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v34 = a3[13];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  uint64_t v37 = *v36;
  unint64_t v38 = v36[1];
  uint64_t v39 = v36[2];
  unint64_t v40 = v36[3];
  uint64_t v41 = v36[5];
  uint64_t v71 = a3;
  uint64_t v42 = v36[7];
  uint64_t v64 = v36[8];
  uint64_t v65 = v36[9];
  unint64_t v66 = v36[10];
  unint64_t v67 = v36[11];
  uint64_t v68 = v36[12];
  uint64_t v69 = v36[13];
  uint64_t v43 = v36[4];
  uint64_t v70 = a2;
  uint64_t v44 = v36[6];
  sub_100254D34(*v36, v38, v39, v40, v43, v41, v44, v42, v64, v65, v66, v67);
  *uint64_t v35 = v37;
  v35[1] = v38;
  v35[2] = v39;
  v35[3] = v40;
  v35[4] = v43;
  v35[5] = v41;
  v35[6] = v44;
  v35[7] = v42;
  v35[8] = v64;
  v35[9] = v65;
  v35[10] = v66;
  v35[11] = v67;
  v35[12] = v68;
  v35[13] = v69;
  uint64_t v45 = v71[14];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)v70 + v45;
  uint64_t v48 = *(void *)((char *)v70 + v45 + 32);
  if (v48)
  {
    char *v46 = *v47;
    uint64_t v49 = *((void *)v47 + 5);
    *((void *)v46 + 4) = v48;
    *((void *)v46 + 5) = v49;
    (**(void (***)(uint64_t, uint64_t))(v48 - 8))((uint64_t)(v46 + 8), (uint64_t)(v47 + 8));
    *((_OWORD *)v46 + 3) = *((_OWORD *)v47 + 3);
  }
  else
  {
    long long v50 = *((_OWORD *)v47 + 1);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v50;
    long long v51 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v51;
  }
  uint64_t v52 = v71[16];
  *((unsigned char *)a1 + v71[15]) = *((unsigned char *)v70 + v71[15]);
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)v70 + v52;
  uint64_t v55 = *(void *)((char *)v70 + v52 + 24);
  if (v55)
  {
    uint64_t v56 = *((void *)v54 + 4);
    *((void *)v53 + 3) = v55;
    *((void *)v53 + 4) = v56;
    (**(void (***)(void))(v55 - 8))();
  }
  else
  {
    long long v57 = *((_OWORD *)v54 + 1);
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    *((_OWORD *)v53 + 1) = v57;
    *((void *)v53 + 4) = *((void *)v54 + 4);
  }
  uint64_t v58 = v71[17];
  uint64_t v59 = v71[18];
  unint64_t v60 = (void *)((char *)a1 + v58);
  id v61 = (void *)((char *)v70 + v58);
  uint64_t v62 = v61[1];
  void *v60 = *v61;
  v60[1] = v62;
  *((unsigned char *)a1 + v59) = *((unsigned char *)v70 + v59);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10033CF94(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *((unsigned char *)a2 + v10);
  *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
  v11[16] = *((unsigned char *)a2 + v10 + 16);
  v11[17] = *((unsigned char *)a2 + v10 + 17);
  *((void *)v11 + 3) = *(void *)((char *)a2 + v10 + 24);
  *((void *)v11 + 4) = *(void *)((char *)a2 + v10 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v11 + 5) = *((void *)v12 + 5);
  *((void *)v11 + 6) = *((void *)v12 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[56] = v12[56];
  sub_1002553AC((void *)((char *)a1 + a3[7]), (void *)((char *)a2 + a3[7]));
  uint64_t v13 = a3[8];
  uint64_t v14 = *(void **)((char *)a2 + v13);
  uint64_t v15 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = v14;
  id v16 = v14;

  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v17 = a3[10];
  long long v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  char v20 = v19[8];
  *(void *)long long v18 = *(void *)v19;
  v18[8] = v20;
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v21 = a3[12];
  uint64_t v22 = (uint64_t)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)((char *)a1 + v21 + 16);
  uint64_t v25 = *(void *)((char *)a2 + v21 + 16);
  if (v24 == 1)
  {
    if (v25 == 1)
    {
      long long v26 = *(_OWORD *)v23;
      long long v27 = *((_OWORD *)v23 + 2);
      *(_OWORD *)(v22 + 16) = *((_OWORD *)v23 + 1);
      *(_OWORD *)(v22 + 32) = v27;
      *(_OWORD *)uint64_t v22 = v26;
    }
    else
    {
      *(unsigned char *)uint64_t v22 = *v23;
      *(void *)(v22 + 8) = *((void *)v23 + 1);
      *(void *)(v22 + 16) = *((void *)v23 + 2);
      uint64_t v30 = *((void *)v23 + 3);
      *(unsigned char *)(v22 + 32) = v23[32];
      *(void *)(v22 + 24) = v30;
      *(void *)(v22 + 40) = *((void *)v23 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v25 == 1)
  {
    sub_100285DF4(v22);
    long long v29 = *((_OWORD *)v23 + 1);
    long long v28 = *((_OWORD *)v23 + 2);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v29;
    *(_OWORD *)(v22 + 32) = v28;
  }
  else
  {
    *(unsigned char *)uint64_t v22 = *v23;
    *(void *)(v22 + 8) = *((void *)v23 + 1);
    *(void *)(v22 + 16) = *((void *)v23 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v31 = *((void *)v23 + 3);
    *(unsigned char *)(v22 + 32) = v23[32];
    *(void *)(v22 + 24) = v31;
    *(void *)(v22 + 40) = *((void *)v23 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v32 = a3[13];
  long long v33 = (char *)a1 + v32;
  uint64_t v34 = (void *)((char *)a2 + v32);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  uint64_t v81 = a3;
  uint64_t v82 = a2;
  uint64_t v37 = v34[2];
  unint64_t v38 = v34[3];
  uint64_t v39 = v34[4];
  uint64_t v40 = v34[5];
  uint64_t v42 = v34[6];
  uint64_t v41 = v34[7];
  uint64_t v83 = a1;
  uint64_t v43 = v34[8];
  uint64_t v76 = v34[9];
  unint64_t v77 = v34[10];
  unint64_t v78 = v34[11];
  uint64_t v79 = v34[12];
  uint64_t v80 = v34[13];
  sub_100254D34(*v34, v36, v37, v38, v39, v40, v42, v41, v43, v76, v77, v78);
  uint64_t v44 = *(void *)v33;
  unint64_t v45 = *((void *)v33 + 1);
  uint64_t v46 = *((void *)v33 + 2);
  unint64_t v47 = *((void *)v33 + 3);
  uint64_t v48 = *((void *)v33 + 4);
  uint64_t v49 = *((void *)v33 + 5);
  uint64_t v50 = *((void *)v33 + 6);
  uint64_t v51 = *((void *)v33 + 7);
  long long v52 = *((_OWORD *)v33 + 4);
  long long v53 = *((_OWORD *)v33 + 5);
  *(void *)long long v33 = v35;
  *((void *)v33 + 1) = v36;
  *((void *)v33 + 2) = v37;
  *((void *)v33 + 3) = v38;
  *((void *)v33 + 4) = v39;
  *((void *)v33 + 5) = v40;
  *((void *)v33 + 6) = v42;
  *((void *)v33 + 7) = v41;
  *((void *)v33 + 8) = v43;
  *((void *)v33 + 9) = v76;
  *((void *)v33 + 10) = v77;
  *((void *)v33 + 11) = v78;
  *((void *)v33 + 12) = v79;
  *((void *)v33 + 13) = v80;
  sub_10033CB6C(v44, v45, v46, v47, v48, v49, v50, v51, v52, *((uint64_t *)&v52 + 1), v53, *((unint64_t *)&v53 + 1));
  uint64_t v54 = v81[14];
  uint64_t v55 = (uint64_t)v83 + v54;
  uint64_t v56 = (void *)((char *)v82 + v54);
  uint64_t v57 = *(void *)((char *)v83 + v54 + 32);
  uint64_t v58 = *(void *)((char *)v82 + v54 + 32);
  if (v57)
  {
    if (v58)
    {
      *(unsigned char *)uint64_t v55 = *(unsigned char *)v56;
      sub_1002553AC((uint64_t *)(v55 + 8), v56 + 1);
LABEL_13:
      *(void *)(v55 + 48) = v56[6];
      *(void *)(v55 + 56) = v56[7];
      goto LABEL_16;
    }
    sub_10024A8CC(v55);
    long long v60 = *((_OWORD *)v56 + 3);
    long long v62 = *(_OWORD *)v56;
    long long v61 = *((_OWORD *)v56 + 1);
    *(_OWORD *)(v55 + 32) = *((_OWORD *)v56 + 2);
    *(_OWORD *)(v55 + 48) = v60;
    *(_OWORD *)uint64_t v55 = v62;
    *(_OWORD *)(v55 + 16) = v61;
  }
  else
  {
    if (v58)
    {
      *(unsigned char *)uint64_t v55 = *(unsigned char *)v56;
      uint64_t v59 = v56[4];
      *(void *)(v55 + 32) = v59;
      *(void *)(v55 + 40) = v56[5];
      (**(void (***)(uint64_t, uint64_t))(v59 - 8))(v55 + 8, (uint64_t)(v56 + 1));
      goto LABEL_13;
    }
    long long v63 = *(_OWORD *)v56;
    long long v64 = *((_OWORD *)v56 + 1);
    long long v65 = *((_OWORD *)v56 + 3);
    *(_OWORD *)(v55 + 32) = *((_OWORD *)v56 + 2);
    *(_OWORD *)(v55 + 48) = v65;
    *(_OWORD *)uint64_t v55 = v63;
    *(_OWORD *)(v55 + 16) = v64;
  }
LABEL_16:
  *((unsigned char *)v83 + v81[15]) = *((unsigned char *)v82 + v81[15]);
  uint64_t v66 = v81[16];
  uint64_t v67 = (uint64_t)v83 + v66;
  uint64_t v68 = (char *)v82 + v66;
  uint64_t v69 = *(void *)((char *)v82 + v66 + 24);
  if (!*(void *)((char *)v83 + v66 + 24))
  {
    if (v69)
    {
      *(void *)(v67 + 24) = v69;
      *(void *)(v67 + 32) = *((void *)v68 + 4);
      (**(void (***)(uint64_t, char *))(v69 - 8))(v67, v68);
      goto LABEL_23;
    }
LABEL_22:
    long long v70 = *(_OWORD *)v68;
    long long v71 = *((_OWORD *)v68 + 1);
    *(void *)(v67 + 32) = *((void *)v68 + 4);
    *(_OWORD *)uint64_t v67 = v70;
    *(_OWORD *)(v67 + 16) = v71;
    goto LABEL_23;
  }
  if (!v69)
  {
    sub_100014524(v67);
    goto LABEL_22;
  }
  sub_1002553AC((uint64_t *)v67, (uint64_t *)v68);
LABEL_23:
  uint64_t v72 = v81[17];
  uint64_t v73 = (void *)((char *)v83 + v72);
  uint64_t v74 = (void *)((char *)v82 + v72);
  *uint64_t v73 = *v74;
  v73[1] = v74[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v83 + v81[18]) = *((unsigned char *)v82 + v81[18]);
  return v83;
}

void *sub_10033D450(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)((char *)a1 + v10);
  uint64_t v13 = (_OWORD *)((char *)a2 + v10);
  long long v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  v12[2] = v13[2];
  *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)v13 + 41);
  uint64_t v15 = (char *)a1 + v11;
  id v16 = (char *)a2 + v11;
  long long v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((void *)v15 + 4) = *((void *)v16 + 4);
  uint64_t v18 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  uint64_t v23 = a3[12];
  uint64_t v24 = a3[13];
  uint64_t v25 = (_OWORD *)((char *)a1 + v23);
  long long v26 = (_OWORD *)((char *)a2 + v23);
  long long v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  v25[2] = v26[2];
  long long v28 = (_OWORD *)((char *)a1 + v24);
  long long v29 = (_OWORD *)((char *)a2 + v24);
  long long v30 = v29[5];
  v28[4] = v29[4];
  v28[5] = v30;
  v28[6] = v29[6];
  long long v31 = v29[1];
  _OWORD *v28 = *v29;
  v28[1] = v31;
  long long v32 = v29[3];
  v28[2] = v29[2];
  v28[3] = v32;
  uint64_t v33 = a3[14];
  uint64_t v34 = a3[15];
  uint64_t v35 = (_OWORD *)((char *)a1 + v33);
  unint64_t v36 = (long long *)((char *)a2 + v33);
  long long v37 = *v36;
  long long v38 = v36[1];
  long long v39 = v36[3];
  v35[2] = v36[2];
  v35[3] = v39;
  *uint64_t v35 = v37;
  v35[1] = v38;
  *((unsigned char *)a1 + v34) = *((unsigned char *)a2 + v34);
  uint64_t v40 = a3[16];
  uint64_t v41 = a3[17];
  uint64_t v42 = (char *)a1 + v40;
  uint64_t v43 = (char *)a2 + v40;
  long long v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((void *)v42 + 4) = *((void *)v43 + 4);
  *(_OWORD *)((char *)a1 + v41) = *(_OWORD *)((char *)a2 + v41);
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  return a1;
}

void *sub_10033D5E8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *((unsigned char *)a2 + v10);
  *((void *)v11 + 1) = *(void *)((char *)a2 + v10 + 8);
  v11[16] = *((unsigned char *)a2 + v10 + 16);
  v11[17] = *((unsigned char *)a2 + v10 + 17);
  uint64_t v13 = *(void *)((char *)a2 + v10 + 32);
  *((void *)v11 + 3) = *(void *)((char *)a2 + v10 + 24);
  *((void *)v11 + 4) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v12 + 6);
  *((void *)v11 + 5) = *((void *)v12 + 5);
  *((void *)v11 + 6) = v14;
  swift_bridgeObjectRelease();
  v11[56] = v12[56];
  uint64_t v15 = a3[7];
  id v16 = (char *)a1 + v15;
  long long v17 = (char *)a2 + v15;
  sub_100014524((uint64_t)a1 + v15);
  long long v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)id v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v16 + 4) = *((void *)v17 + 4);
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void **)((char *)a1 + v19);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);

  uint64_t v21 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v25 = (char *)a1 + v24;
  long long v26 = (char *)a2 + v24;
  if (*(void *)((char *)a1 + v24 + 16) == 1) {
    goto LABEL_4;
  }
  uint64_t v27 = *((void *)v26 + 2);
  if (v27 == 1)
  {
    sub_100285DF4((uint64_t)a1 + v24);
LABEL_4:
    long long v28 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v28;
    *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
    goto LABEL_6;
  }
  *uint64_t v25 = *v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  *((void *)v25 + 2) = v27;
  swift_bridgeObjectRelease();
  *((void *)v25 + 3) = *((void *)v26 + 3);
  v25[32] = v26[32];
  *((void *)v25 + 5) = *((void *)v26 + 5);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v29 = a3[13];
  long long v30 = (char *)a1 + v29;
  long long v31 = (_OWORD *)((char *)a2 + v29);
  uint64_t v32 = *(void *)v30;
  unint64_t v33 = *((void *)v30 + 1);
  uint64_t v34 = *((void *)v30 + 2);
  unint64_t v35 = *((void *)v30 + 3);
  uint64_t v36 = *((void *)v30 + 4);
  uint64_t v37 = *((void *)v30 + 5);
  uint64_t v38 = *((void *)v30 + 6);
  uint64_t v39 = *((void *)v30 + 7);
  long long v40 = *((_OWORD *)v30 + 4);
  long long v41 = *((_OWORD *)v30 + 5);
  long long v42 = v31[1];
  *(_OWORD *)long long v30 = *v31;
  *((_OWORD *)v30 + 1) = v42;
  long long v43 = v31[3];
  *((_OWORD *)v30 + 2) = v31[2];
  *((_OWORD *)v30 + 3) = v43;
  long long v44 = v31[5];
  *((_OWORD *)v30 + 4) = v31[4];
  *((_OWORD *)v30 + 5) = v44;
  *((_OWORD *)v30 + 6) = v31[6];
  sub_10033CB6C(v32, v33, v34, v35, v36, v37, v38, v39, v40, *((uint64_t *)&v40 + 1), v41, *((unint64_t *)&v41 + 1));
  uint64_t v45 = a3[14];
  uint64_t v46 = (uint64_t)a1 + v45;
  unint64_t v47 = (char *)a2 + v45;
  if (*(void *)((char *)a1 + v45 + 32))
  {
    if (*((void *)v47 + 4))
    {
      *(unsigned char *)uint64_t v46 = *v47;
      sub_100014524(v46 + 8);
      *(_OWORD *)(v46 + 8) = *(_OWORD *)(v47 + 8);
      *(_OWORD *)(v46 + 24) = *(_OWORD *)(v47 + 24);
      *(void *)(v46 + 40) = *((void *)v47 + 5);
      *(_OWORD *)(v46 + 48) = *((_OWORD *)v47 + 3);
      goto LABEL_11;
    }
    sub_10024A8CC(v46);
  }
  long long v48 = *((_OWORD *)v47 + 1);
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  long long v49 = *((_OWORD *)v47 + 3);
  *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
  *(_OWORD *)(v46 + 48) = v49;
LABEL_11:
  uint64_t v50 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  uint64_t v51 = (char *)a1 + v50;
  if (*(void *)((char *)a1 + v50 + 24)) {
    sub_100014524((uint64_t)a1 + v50);
  }
  long long v52 = *(_OWORD *)((char *)a2 + v50 + 16);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)((char *)a2 + v50);
  *((_OWORD *)v51 + 1) = v52;
  *((void *)v51 + 4) = *(void *)((char *)a2 + v50 + 32);
  uint64_t v53 = a3[17];
  uint64_t v54 = (void *)((char *)a1 + v53);
  uint64_t v55 = (void *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  return a1;
}

uint64_t sub_10033D8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033D8D0);
}

uint64_t sub_10033D8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 32);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_10033D998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033D9AC);
}

uint64_t sub_10033D9AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 32) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for DownloadRequest()
{
  uint64_t result = qword_100660BF0;
  if (!qword_100660BF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10033DABC()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10033DBD4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for NWEndpoint();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NWPath();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  type metadata accessor for NetworkPath();
  v1[12] = swift_task_alloc();
  return _swift_task_switch(sub_10033DD78, 0, 0);
}

uint64_t sub_10033DD78()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v8 = type metadata accessor for DownloadRequest();
  v0[13] = v8;
  uint64_t v9 = v7 + *(int *)(v8 + 20);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v10(v1, v9, v3);
  v10(v4, v1, v3);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NWEndpoint.url(_:), v6);
  type metadata accessor for NWParameters();
  static NWParameters.udp.getter();
  type metadata accessor for NWConnection();
  swift_allocObject();
  uint64_t v11 = NWConnection.init(to:using:)();
  v0[14] = v11;
  uint64_t v12 = swift_allocObject();
  v0[15] = v12;
  *(unsigned char *)(v12 + 16) = 0;
  uint64_t v13 = swift_task_alloc();
  v0[16] = v13;
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[17] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10033DF54;
  uint64_t v15 = v0[8];
  uint64_t v16 = v0[6];
  return withCheckedContinuation<A>(isolation:function:_:)(v15, 0, 0, 0xD000000000000025, 0x80000001005BDEB0, sub_10033E8A0, v13, v16);
}

uint64_t sub_10033DF54()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10033E06C, 0, 0);
}

uint64_t sub_10033E06C()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v12 = v0[13];
  uint64_t v11 = v0[2];
  NWConnection.forceCancel()();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v5, v6);
  BOOL v8 = sub_1001746CC(v1, *(void *)(v11 + *(int *)(v12 + 24) + 8));
  sub_100176940(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(BOOL))v0[1];
  return v9(v8);
}

BOOL sub_10033E198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = *(unsigned __int8 *)(a1 + v3);
  unsigned int v5 = *(unsigned __int8 *)(a2 + v3);
  BOOL result = 1;
  switch(v4)
  {
    case 1:
      BOOL result = v5 != 0;
      break;
    case 2:
      BOOL result = v5 > 1;
      break;
    case 3:
      BOOL result = v5 > 2;
      break;
    case 4:
      BOOL result = v5 == 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10033E20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = *(unsigned __int8 *)(a2 + v3);
  unsigned int v5 = *(unsigned __int8 *)(a1 + v3);
  BOOL v6 = 1;
  switch(v4)
  {
    case 1:
      return v5 == 0;
    case 2:
      BOOL v8 = v5 > 1;
      goto LABEL_5;
    case 3:
      BOOL v8 = v5 > 2;
LABEL_5:
      int v9 = v8;
      return v9 ^ 1u;
    case 4:
      BOOL v6 = v5 == 4;
      return !v6;
    default:
      return !v6;
  }
}

uint64_t sub_10033E288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = *(unsigned __int8 *)(a1 + v3);
  unsigned int v5 = *(unsigned __int8 *)(a2 + v3);
  BOOL v6 = 1;
  switch(v4)
  {
    case 1:
      return v5 == 0;
    case 2:
      BOOL v8 = v5 > 1;
      goto LABEL_5;
    case 3:
      BOOL v8 = v5 > 2;
LABEL_5:
      int v9 = v8;
      return v9 ^ 1u;
    case 4:
      BOOL v6 = v5 == 4;
      return !v6;
    default:
      return !v6;
  }
}

BOOL sub_10033E304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = *(unsigned __int8 *)(a2 + v3);
  unsigned int v5 = *(unsigned __int8 *)(a1 + v3);
  BOOL result = 1;
  switch(v4)
  {
    case 1:
      BOOL result = v5 != 0;
      break;
    case 2:
      BOOL result = v5 > 1;
      break;
    case 3:
      BOOL result = v5 > 2;
      break;
    case 4:
      BOOL result = v5 == 4;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_10033E378()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void sub_10033E3BC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10033E3E8()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

BOOL sub_10033E428(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *a2;
  BOOL result = 1;
  switch(v2)
  {
    case 1:
      BOOL result = v3 != 0;
      break;
    case 2:
      BOOL result = v3 > 1;
      break;
    case 3:
      BOOL result = v3 > 2;
      break;
    case 4:
      BOOL result = v3 == 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10033E498(unsigned __int8 *a1, unsigned char *a2)
{
  unsigned int v2 = *a1;
  BOOL v3 = 1;
  switch(*a2)
  {
    case 1:
      return v2 == 0;
    case 2:
      BOOL v5 = v2 > 1;
      goto LABEL_5;
    case 3:
      BOOL v5 = v2 > 2;
LABEL_5:
      int v6 = v5;
      return v6 ^ 1u;
    case 4:
      BOOL v3 = v2 == 4;
      return !v3;
    default:
      return !v3;
  }
}

uint64_t sub_10033E510(unsigned char *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  BOOL v3 = 1;
  switch(*a1)
  {
    case 1:
      return v2 == 0;
    case 2:
      BOOL v5 = v2 > 1;
      goto LABEL_5;
    case 3:
      BOOL v5 = v2 > 2;
LABEL_5:
      int v6 = v5;
      return v6 ^ 1u;
    case 4:
      BOOL v3 = v2 == 4;
      return !v3;
    default:
      return !v3;
  }
}

BOOL sub_10033E588(unsigned __int8 *a1, unsigned char *a2)
{
  unsigned int v2 = *a1;
  BOOL result = 1;
  switch(*a2)
  {
    case 1:
      BOOL result = v2 != 0;
      break;
    case 2:
      BOOL result = v2 > 1;
      break;
    case 3:
      BOOL result = v2 > 2;
      break;
    case 4:
      BOOL result = v2 == 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10033E5F8()
{
  sub_1001C75E0(v0, (uint64_t)&v6);
  switch(v12)
  {
    case 1:
      sub_1001C7DE4((uint64_t)&v6);
      uint64_t v1 = 1802658128;
      return v1 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
    case 2:
      swift_errorRelease();
      sub_10033E7C8((uint64_t)&v7);
      uint64_t v1 = 1818845510;
      return v1 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
    case 3:
      v2.i64[0] = v6;
      v2.i64[1] = v11;
      int8x16_t v3 = vorrq_s8(v10, v8);
      int8x16_t v4 = vorrq_s8(v2, vorrq_s8(vextq_s8(v9, v9, 8uLL), vextq_s8(v3, v3, 8uLL)));
      if (*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v7) {
        return 0x656C6C65636E6143;
      }
      else {
        return 0x64656873696E6946;
      }
    default:
      sub_1001C7DE4((uint64_t)&v6);
      uint64_t v1 = 1937072464;
      return v1 & 0xFFFF0000FFFFFFFFLL | 0x646500000000;
  }
}

unint64_t sub_10033E72C()
{
  unint64_t result = qword_100660C60;
  if (!qword_100660C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660C60);
  }
  return result;
}

uint64_t sub_10033E780()
{
  return sub_10033EC80(&qword_100660C68, (void (*)(uint64_t))type metadata accessor for DownloadRequest);
}

uint64_t sub_10033E7C8(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_1006666D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10033E828()
{
  uint64_t v1 = sub_1000172F8(&qword_100660C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + 16, v1);

  return _swift_deallocObject(v0, 17, 7);
}

void sub_10033E8A0(uint64_t a1)
{
  sub_1004D165C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10033E8A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int8x16_t v8 = (char *)v23 - v7;
  uint64_t v9 = type metadata accessor for URLError();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v23 - v14;
  v23[1] = a1;
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast())
  {
    v23[0] = v10;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
    sub_10033EC80(&qword_100660C80, (void (*)(uint64_t))&type metadata accessor for URLError);
    _BridgedStoredNSError.code.getter();
    static URLError.Code.networkConnectionLost.getter();
    sub_10033EC80(&qword_100660C88, (void (*)(uint64_t))&type metadata accessor for URLError.Code);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    long long v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    if (v16)
    {
      swift_errorRelease();
      v17(v8, v2);
      uint64_t v18 = 1;
      uint64_t v19 = v23[0];
    }
    else
    {
      static URLError.Code.notConnectedToInternet.getter();
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17(v6, v2);
      if (v20)
      {
        swift_errorRelease();
        v17(v8, v2);
        uint64_t v18 = 2;
        uint64_t v19 = v23[0];
      }
      else
      {
        static URLError.Code.timedOut.getter();
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17(v6, v2);
        v17(v8, v2);
        uint64_t v19 = v23[0];
        if (v21)
        {
          swift_errorRelease();
          uint64_t v18 = 3;
        }
        else
        {
          uint64_t v18 = URLError._nsError.getter();
          swift_errorRelease();
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v9);
  }
  else
  {
    uint64_t v18 = a1;
  }
  swift_errorRelease();
  return v18;
}

uint64_t sub_10033EC80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DownloadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100254C14(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for DownloadError(uint64_t a1)
{
  return sub_100254C28(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for DownloadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100254C14(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100254C28(v5, v6);
  return a1;
}

uint64_t assignWithTake for DownloadError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100254C28(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10033EE40(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10033EE58(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DownloadError()
{
  return &type metadata for DownloadError;
}

unsigned char *storeEnumTagSinglePayload for DownloadPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10033EF4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DownloadPriority()
{
  return &type metadata for DownloadPriority;
}

uint64_t destroy for DownloadResult(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 72);
  if (v2 >= 3) {
    unsigned int v2 = *(_DWORD *)result + 3;
  }
  if (v2 == 2)
  {
    uint64_t result = swift_errorRelease();
    if (!*(void *)(v1 + 40)) {
      return result;
    }
    uint64_t v3 = v1 + 16;
  }
  else
  {
    if (v2 > 1 || *(void *)(result + 32) < 0xFFFFFFFFuLL) {
      return result;
    }
    uint64_t v3 = result + 8;
  }

  return sub_100014524(v3);
}

uint64_t initializeWithCopy for DownloadResult(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 72);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a2 + 3;
  }
  if (v4 == 2)
  {
    uint64_t v7 = *a2;
    swift_errorRetain();
    *(void *)a1 = v7;
    uint64_t v8 = a2[5];
    if (v8)
    {
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v9 = a2[6];
      *(void *)(a1 + 40) = v8;
      *(void *)(a1 + 48) = v9;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, (uint64_t)(a2 + 2));
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    }
    else
    {
      long long v19 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = v19;
      long long v20 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v20;
    }
    char v18 = 2;
    goto LABEL_18;
  }
  if (v4 == 1)
  {
    unint64_t v10 = a2[4];
    if (v10 < 0xFFFFFFFF)
    {
      long long v16 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v16;
      long long v17 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v17;
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v11 = a2[5];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v11;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 8, (uint64_t)(a2 + 1));
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    }
    char v18 = 1;
LABEL_18:
    *(unsigned char *)(a1 + 72) = v18;
    return a1;
  }
  if (v4)
  {
    long long v12 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    long long v13 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
  }
  else
  {
    unint64_t v5 = a2[4];
    if (v5 < 0xFFFFFFFF)
    {
      long long v14 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      long long v15 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v15;
      *(unsigned char *)(a1 + 72) = 0;
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = a2[5];
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v6;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 8, (uint64_t)(a2 + 1));
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(unsigned char *)(a1 + 72) = 0;
    }
  }
  return a1;
}

uint64_t assignWithCopy for DownloadResult(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a1 + 3;
  }
  if (v4 == 2)
  {
    swift_errorRelease();
    if (!*(void *)(a1 + 40)) {
      goto LABEL_11;
    }
    uint64_t v5 = a1 + 16;
    goto LABEL_10;
  }
  if (v4 <= 1 && *(void *)(a1 + 32) >= 0xFFFFFFFFuLL)
  {
    uint64_t v5 = a1 + 8;
LABEL_10:
    sub_100014524(v5);
  }
LABEL_11:
  unsigned int v6 = *((unsigned __int8 *)a2 + 72);
  if (v6 >= 3) {
    unsigned int v6 = *(_DWORD *)a2 + 3;
  }
  if (v6 == 2)
  {
    uint64_t v8 = *a2;
    swift_errorRetain();
    *(void *)a1 = v8;
    if (a2[5])
    {
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v9 = a2[5];
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = a2[6];
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, (uint64_t)(a2 + 2));
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = a2[8];
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 + 1);
      long long v22 = *(_OWORD *)(a2 + 3);
      long long v23 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v23;
      *(_OWORD *)(a1 + 8) = v21;
      *(_OWORD *)(a1 + 24) = v22;
    }
    char v20 = 2;
    goto LABEL_29;
  }
  if (v6 == 1)
  {
    if ((unint64_t)a2[4] < 0xFFFFFFFF)
    {
      long long v17 = *(_OWORD *)a2;
      long long v18 = *((_OWORD *)a2 + 1);
      long long v19 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v19;
      *(_OWORD *)a1 = v17;
      *(_OWORD *)(a1 + 16) = v18;
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = a2[4];
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = a2[5];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 8, (uint64_t)(a2 + 1));
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = a2[7];
    }
    char v20 = 1;
LABEL_29:
    *(unsigned char *)(a1 + 72) = v20;
    return a1;
  }
  if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v11 = *((_OWORD *)a2 + 1);
    long long v12 = *((_OWORD *)a2 + 2);
    long long v13 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 16) = v11;
  }
  else
  {
    if ((unint64_t)a2[4] < 0xFFFFFFFF)
    {
      long long v14 = *(_OWORD *)a2;
      long long v15 = *((_OWORD *)a2 + 1);
      long long v16 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v16;
      *(_OWORD *)a1 = v14;
      *(_OWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v7 = a2[4];
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = a2[5];
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = a2[7];
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  return a1;
}

__n128 initializeWithTake for DownloadResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DownloadResult(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a1 + 3;
  }
  if (v4 != 2)
  {
    if (v4 > 1 || *(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
      goto LABEL_11;
    }
    uint64_t v5 = a1 + 8;
    goto LABEL_10;
  }
  swift_errorRelease();
  if (*(void *)(a1 + 40))
  {
    uint64_t v5 = a1 + 16;
LABEL_10:
    sub_100014524(v5);
  }
LABEL_11:
  unsigned int v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 >= 3) {
    unsigned int v6 = *(_DWORD *)a2 + 3;
  }
  if (v6 == 2)
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(unsigned char *)(a1 + 72) = 2;
  }
  else if (v6 == 1)
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 72) = 1;
  }
  else if (v6)
  {
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(unsigned char *)(a1 + 72) = 0;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DownloadResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10033F640(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_10033F65C(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DownloadResult()
{
  return &type metadata for DownloadResult;
}

uint64_t sub_10033F69C()
{
  uint64_t v1 = *v0;
  uint64_t result = 0x64656C696166;
  switch(*((unsigned char *)v0 + 24))
  {
    case 1:
      uint64_t result = 0x73736572676F7270;
      break;
    case 2:
      uint64_t result = 0x6C6F686563616C70;
      break;
    case 3:
      if (v0[1] | v0[2] | v1)
      {
        if (v1 == 1 && *(_OWORD *)(v0 + 1) == 0)
        {
          uint64_t result = 0x64656C65636E6163;
        }
        else if (v1 == 2 && *(_OWORD *)(v0 + 1) == 0)
        {
          uint64_t result = 0x646573756170;
        }
        else if (v1 == 3 && *(_OWORD *)(v0 + 1) == 0)
        {
          uint64_t result = 0x64656D75736572;
        }
        else
        {
          uint64_t result = 0x697469726F697270;
        }
      }
      else
      {
        uint64_t result = 0x6574656C706D6F63;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_10033F7D8()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v35 = sub_1000172F8(&qword_100660E80);
  uint64_t v2 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  unsigned int v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_100660E68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_1000172F8(&qword_100660E58);
  uint64_t v9 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  long long v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = v1;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1003B9BC0((unint64_t)_swiftEmptyArrayStorage);
    long long v13 = v25;
  }
  else
  {
    long long v13 = &_swiftEmptySetSingleton;
  }
  uint64_t v14 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers;
  sub_1000172F8(&qword_100660E88);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = v13;
  *(void *)&v12[v14] = v15;
  uint64_t v16 = v35;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v35);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v16);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_stream], v11, v34);
  long long v17 = &v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_continuation];
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_continuation], v8, v5);
  long long v18 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v18(v8, v17, v5);
  long long v19 = (objc_class *)type metadata accessor for InstallCoordinationInstallObserver.Delegate(0);
  char v20 = (char *)objc_allocWithZone(v19);
  v18(&v20[OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Delegate_continuation], v8, v5);
  v38.receiver = v20;
  v38.super_class = v19;
  id v21 = objc_msgSendSuper2(&v38, "init");
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)&v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_delegate] = v21;
  sub_1000172F8((uint64_t *)&unk_100660E90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A55B0;
  id v23 = v21;
  *(NSNumber *)(inited + 32) = UInt._bridgeToObjectiveC()();
  unint64_t v37 = inited;
  specialized Array._endMutation()();
  unint64_t v24 = v37;
  if (!(v37 >> 62))
  {
    if (!*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v26) {
LABEL_5:
  }
    sub_1003B9F18(v24);
LABEL_9:
  swift_bridgeObjectRelease();
  id v27 = objc_allocWithZone((Class)IXAppInstallObserver);
  id v28 = v23;
  NSString v29 = String._bridgeToObjectiveC()();
  sub_10024A4F8();
  sub_10034174C((unint64_t *)&unk_100660EA0, (void (*)(uint64_t))sub_10024A4F8);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = [v27 initWithMachServiceName:v29 forClients:isa delegate:v28];

  if (v31)
  {
    *(void *)&v12[OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_installObserver] = v31;

    v36.receiver = v12;
    v36.super_class = ObjectType;
    objc_msgSendSuper2(&v36, "init");
  }
  else
  {
    __break(1u);
  }
}

void sub_10033FD14(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100660E68);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v7(v6, v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_continuation, v3);
  long long v8 = (objc_class *)type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  *(void *)&v9[OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Observer_coordinator] = a1;
  v7(&v9[OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Observer_continuation], (uint64_t)v6, v3);
  v16.receiver = v9;
  v16.super_class = v8;
  id v10 = a1;
  id v11 = objc_msgSendSuper2(&v16, "init");
  [v10 setObserver:v11];
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  long long v12 = *(os_unfair_lock_s **)(v1
                             + OBJC_IVAR____TtC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserver_observers);
  id v15 = v11;
  long long v13 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_100341794();
  os_unfair_lock_unlock(v13);
}

void sub_10033FECC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v6[2] = a2;
  swift_bridgeObjectRetain();
  sub_100341A20((uint64_t (*)(id *))sub_1003417E4, (uint64_t)v6, v2);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v5 = (void *)sub_100570E30(v4);
  }
}

uint64_t sub_10033FF58(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*(id *)(*a1+ OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Observer_coordinator) uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t sub_100340160()
{
  return type metadata accessor for InstallCoordinationInstallObserver(0);
}

uint64_t type metadata accessor for InstallCoordinationInstallObserver(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100660CE0);
}

void sub_100340188()
{
  sub_1003402AC(319, &qword_100660CF0, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream);
  if (v0 <= 0x3F)
  {
    sub_1003402AC(319, &qword_100660CF8, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1003402AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for InstallCoordinationInstallObserver.Event);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1003402FC()
{
  id v1 = *v0;
  sub_1000172F8(&qword_100660E58);
  AsyncStream.makeAsyncIterator()();
}

uint64_t sub_10034063C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  long long v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v17 - v9;
  sub_1001CD9F8(a1, (uint64_t)v19);
  if (!v20)
  {
    sub_100016E7C((uint64_t)v19);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v14 = 0;
    return v14 & 1;
  }
  id v11 = v18;
  id v12 = [*(id *)&v18[OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Observer_coordinator] uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = [*(id *)(v2+ OBJC_IVAR____TtCC28ManagedAppDistributionDaemon34InstallCoordinationInstallObserverP33_B8C0BD49E46B9356C2E4FA5F73F7501B8Observer_coordinator) uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v14 = static UUID.== infix(_:_:)();
  id v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return v14 & 1;
}

uint64_t sub_100340AC4()
{
  return type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
}

uint64_t type metadata accessor for InstallCoordinationInstallObserver.Observer(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100660D98);
}

void sub_100340AEC()
{
  sub_1003402AC(319, &qword_100660CF8, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

BOOL sub_100340D04(void *a1)
{
  id v2 = [a1 domain];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if ([a1 code] == (id)3) {
    return 1;
  }
LABEL_10:
  id v10 = [a1 domain];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == 0xD000000000000020 && v13 == 0x80000001005BE0F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  return [a1 code] == (id)1;
}

void sub_100340F10(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = sub_1000172F8(&qword_100660E60);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = a3;
  id v12 = a1;
  id v13 = [v11 identity];
  v15[0] = a3;
  v15[1] = v13;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = a4;
  char v16 = 3;
  id v14 = v11;
  sub_1000172F8(&qword_100660E68);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10034122C()
{
  return type metadata accessor for InstallCoordinationInstallObserver.Delegate(0);
}

uint64_t type metadata accessor for InstallCoordinationInstallObserver.Delegate(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100660E38);
}

void sub_100341254()
{
  sub_1003402AC(319, &qword_100660CF8, (uint64_t (*)(void, ValueMetadata *))&type metadata accessor for AsyncStream.Continuation);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void destroy for InstallCoordinationInstallObserver.Event(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);

  sub_10033882C(v2, v3, v4, v5);
}

uint64_t initializeWithCopy for InstallCoordinationInstallObserver.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  char v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  id v9 = v3;
  id v10 = v4;
  sub_1003387E4(v5, v6, v7, v8);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for InstallCoordinationInstallObserver.Event(uint64_t a1, void **a2)
{
  id v2 = a2;
  uint64_t v4 = *(void **)a1;
  char v5 = *a2;
  *(void *)a1 = *a2;
  id v6 = v5;

  uint64_t v7 = v2[1];
  char v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = v2[2];
  uint64_t v11 = (uint64_t)v2[3];
  uint64_t v12 = (uint64_t)v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  sub_1003387E4(v10, v11, v12, (char)v2);
  id v13 = *(void **)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v12;
  char v16 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  sub_10033882C(v13, v14, v15, v16);
  return a1;
}

__n128 initializeWithTake for InstallCoordinationInstallObserver.Event(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for InstallCoordinationInstallObserver.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v5;
  char v10 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v6;
  sub_10033882C(v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallCoordinationInstallObserver.Event(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallCoordinationInstallObserver.Event(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallCoordinationInstallObserver.Event()
{
  return &type metadata for InstallCoordinationInstallObserver.Event;
}

unint64_t sub_10034157C()
{
  unint64_t result = qword_100660E48;
  if (!qword_100660E48)
  {
    sub_10017B924(&qword_100660E50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100660E48);
  }
  return result;
}

uint64_t sub_1003415D8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100660E60);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)_convertErrorToNSError(_:)();
  BOOL v9 = sub_100340D04(v8);

  id v10 = [a1 identity];
  uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  v15[0] = a1;
  v15[1] = v10;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v9)
  {
    uint64_t v16 = 1;
    char v19 = 3;
    id v12 = a1;
  }
  else
  {
    uint64_t v16 = a2;
    char v19 = 0;
    id v13 = a1;
    swift_errorRetain();
  }
  sub_1000172F8(&qword_100660E68);
  AsyncStream.Continuation.yield(_:)();
  return (*v11)(v7, v4);
}

uint64_t sub_10034174C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100341794()
{
  sub_10032A000(&v1, *(id *)(v0 + 16));
}

uint64_t sub_1003417E4(void *a1)
{
  return sub_10033FF58(a1) & 1;
}

void destroy for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1)
{
}

uint64_t initializeWithCopy for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1003387E4(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1003387E4(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10033882C(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10033882C(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallCoordinationInstallObserver.Event.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallCoordinationInstallObserver.Event.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003419DC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1003419F4(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InstallCoordinationInstallObserver.Event.Kind()
{
  return &type metadata for InstallCoordinationInstallObserver.Event.Kind;
}

void sub_100341A20(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
    sub_100013C24(&qword_100661118, (void (*)(uint64_t))type metadata accessor for InstallCoordinationInstallObserver.Observer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for InstallCoordinationInstallObserver.Observer(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v14 = v29;
  swift_unknownObjectRelease();
  int64_t v15 = v8;
  uint64_t v16 = v9;
  if (!v14) {
    goto LABEL_36;
  }
  while (1)
  {
    id v29 = v14;
    char v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if (v20) {
      goto LABEL_36;
    }

    int64_t v8 = v15;
    unint64_t v9 = v16;
    if (v5 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v9) {
      break;
    }
    uint64_t v16 = (v9 - 1) & v9;
    unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v15 = v8;
LABEL_24:
    id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (!v14) {
      goto LABEL_36;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    uint64_t v16 = (v18 - 1) & v18;
    unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  int64_t v19 = v8 + 2;
  if (v8 + 2 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 3;
  if (v8 + 3 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 4;
  if (v8 + 4 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    int64_t v15 = v19;
    goto LABEL_23;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v21 = v8 + 6;
  while (v22 != v21)
  {
    unint64_t v18 = *(void *)(v23 + 8 * v21++);
    if (v18)
    {
      int64_t v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  sub_10024A370();
}

uint64_t sub_100341D50(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  return sub_100341D68(a1, a2, a3);
}

uint64_t sub_100341D68(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v9;
        char v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if (v12)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100341EA4(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_1000172F8(&qword_10065B828);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (a2) {
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    sub_1000172F8(&qword_10065B828);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100341F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a1, (uint64_t)v7, &qword_10065B220);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001729C((uint64_t)v7, &qword_10065B220);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sub_10034213C()
{
  v1[149] = v0;
  type metadata accessor for MediaAPIMetadata();
  v1[150] = swift_task_alloc();
  sub_1000172F8(&qword_100661018);
  v1[151] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for ADPPreflightResultingMetadata(0);
  v1[152] = v2;
  v1[153] = *(void *)(v2 - 8);
  v1[154] = swift_task_alloc();
  v1[155] = type metadata accessor for ADPPreflightTask(0);
  v1[156] = swift_task_alloc();
  sub_1000172F8(&qword_100661010);
  v1[157] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[158] = v3;
  v1[159] = *(void *)(v3 - 8);
  v1[160] = swift_task_alloc();
  v1[161] = swift_task_alloc();
  v1[162] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v1[163] = v4;
  v1[164] = *(void *)(v4 - 8);
  v1[165] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ADP();
  v1[166] = v5;
  v1[167] = *(void *)(v5 - 8);
  v1[168] = swift_task_alloc();
  v1[169] = swift_task_alloc();
  v1[170] = swift_task_alloc();
  v1[171] = swift_task_alloc();
  v1[172] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v1[173] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v1[174] = v6;
  v1[175] = *(void *)(v6 - 8);
  v1[176] = swift_task_alloc();
  v1[177] = swift_task_alloc();
  v1[178] = swift_task_alloc();
  v1[179] = swift_task_alloc();
  v1[180] = swift_task_alloc();
  v1[181] = swift_task_alloc();
  v1[182] = swift_task_alloc();
  return _swift_task_switch(sub_1003424F4, v0, 0);
}

uint64_t sub_1003424F4()
{
  uint64_t v1 = *(void *)(v0[149] + 112);
  v0[183] = v1;
  v0[184] = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_featureEligibility);
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_1006638A0 + dword_1006638A0);
  uint64_t v3 = *v2;
  v0[185] = *v2;
  v0[186] = v2[1];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[187] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003425F8;
  return v6(v3);
}

uint64_t sub_1003425F8(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1192);
  *(unsigned char *)(*(void *)v1 + 401) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return _swift_task_switch(sub_10034276C, v2, 0);
}

id sub_10034276C()
{
  uint64_t v81 = v0;
  if (*(unsigned char *)(v0 + 401) != 1)
  {
    type metadata accessor for InternalError();
    sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return (id)v6();
  }
  sub_10001733C(*(void *)(v0 + 1192) + 120, v0 + 404, &qword_10065C310);
  if ((sub_1001D1590(v0 + 404) & 1) == 0)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v12 = *(void **)(*(void *)(v0 + 1464)
                     + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
      *(void *)(v0 + 1112) = v12;
      id v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Failing early due to no feature eligibility", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v14 = *(void *)(v0 + 1192);
    (*(void (**)(void, void))(*(void *)(v0 + 1400) + 8))(*(void *)(v0 + 1408), *(void *)(v0 + 1392));
    *(unsigned char *)(v14 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
    int64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 1920) = v15;
    void *v15 = v0;
    v15[1] = sub_1003465D0;
    return (id)sub_10034B380();
  }
  uint64_t v1 = *(void *)(v0 + 1464);
  uint64_t v2 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  *(void *)(v0 + 1504) = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v3 = *(void *)(v1 + v2);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1002BDC4C(v4, v0 + 880);
  os_unfair_lock_unlock(v5);
  uint64_t v16 = v0 + 401;
  sub_1000172F8(&qword_10065C450);
  char v17 = swift_dynamicCast();
  if (v17)
  {
    uint64_t v78 = v0;
    swift_bridgeObjectRelease();
    id result = [self sharedConnection];
    if (result)
    {
      unint64_t v18 = result;
      unsigned __int8 v19 = [result isWebDistributionAppInstallationAllowed];

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = v0;
        int64_t v21 = (_OWORD *)(v0 + 656);
        uint64_t v77 = v78 + 728;
        static Logger.install.getter();
        swift_retain_n();
        int64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v75 = v16;
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          uint64_t v25 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 138412290;
          if ((swift_task_isCurrentExecutor() & 1) == 0) {
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v26 = *(void **)(*(void *)(v78 + 1464)
                         + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
          *(void *)(v78 + 1184) = v26;
          id v27 = v26;
          uint64_t v20 = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v25 = v26;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%@] Failing early due to web distribution being restricted", v24, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v16 = v75;
        }
        else
        {
          swift_release_n();
        }

        uint64_t v45 = *(void *)(v20 + 1464);
        uint64_t v46 = *(void *)(v20 + 1192);
        (*(void (**)(void, void))(*(void *)(v20 + 1400) + 8))(*(void *)(v20 + 1456), *(void *)(v20 + 1392));
        *(unsigned char *)(v46 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
        *(void *)(v20 + 1512) = *(void *)(v45
                                            + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
        int v47 = *(unsigned __int8 *)(v45
                                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_device
                                 + 108);
        *(unsigned char *)(v16 + 1) = v47;
        BOOL v48 = v47 == 0;
        uint64_t v49 = 42;
        if (!v48) {
          uint64_t v49 = 43;
        }
        *(void *)(v20 + 584) = v49;
        *(void *)(v20 + 640) = 0;
        *(_OWORD *)(v20 + 608) = 0u;
        *(_OWORD *)(v20 + 624) = 0u;
        *(_OWORD *)(v20 + 592) = 0u;
        *(unsigned char *)(v20 + 648) = 26;
        *(void *)(v20 + 728) = 41;
        *(void *)(v20 + 784) = 0;
        *(_OWORD *)(v20 + 752) = 0u;
        *(_OWORD *)(v20 + 768) = 0u;
        *(_OWORD *)(v20 + 736) = 0u;
        *(unsigned char *)(v20 + 792) = 26;
        *int64_t v21 = 0u;
        v21[1] = 0u;
        void v21[2] = 0u;
        v21[3] = 0u;
        *(unsigned char *)(v20 + 720) = 26;
        swift_retain();
        uint64_t v50 = (void *)swift_task_alloc();
        *(void *)(v20 + 1520) = v50;
        *uint64_t v50 = v20;
        uint64_t v51 = sub_100343900;
LABEL_40:
        v50[1] = v51;
        return (id)sub_100560FFC(v77);
      }
      goto LABEL_25;
    }
    __break(1u);
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v28 = *(void *)(v1 + v2);
  uint64_t v29 = v28 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v28 + 16);
  long long v30 = (os_unfair_lock_s *)(v28 + ((*(unsigned int *)(*(void *)v28 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v30);
  sub_1002BDC4C(v29, v0 + 840);
  os_unfair_lock_unlock(v30);
  uint64_t v78 = v0;
  if (swift_dynamicCast())
  {
    uint64_t v76 = v0 + 401;
    uint64_t v31 = *(void *)(v0 + 1464) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_device;
    id v74 = self;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = [v74 sharedConnection];
    if (result)
    {
      uint64_t v32 = result;
      NSString v33 = String._bridgeToObjectiveC()();
      unsigned __int8 v34 = [v32 isMarketplaceAllowed:v33];

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v76;
      if ((v34 & 1) == 0)
      {
        uint64_t v52 = v78;
        uint64_t v77 = v78 + 512;
        static Logger.install.getter();
        swift_retain_n();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc();
          uint64_t v56 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = 138412290;
          if ((swift_task_isCurrentExecutor() & 1) == 0) {
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v57 = *(void **)(*(void *)(v78 + 1464)
                         + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
          *(void *)(v78 + 1176) = v57;
          id v58 = v57;
          uint64_t v52 = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v56 = v57;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "[%@] Failing early due to marketplace distribution being restricted", v55, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v35 = v76;
        }
        else
        {
          swift_release_n();
        }

        uint64_t v59 = *(void *)(v52 + 1464);
        uint64_t v60 = *(void *)(v52 + 1192);
        (*(void (**)(void, void))(*(void *)(v52 + 1400) + 8))(*(void *)(v52 + 1448), *(void *)(v52 + 1392));
        *(unsigned char *)(v60 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
        *(void *)(v52 + 1600) = *(void *)(v59
                                            + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
        int v61 = *(unsigned __int8 *)(v31 + 108);
        *(unsigned char *)(v35 + 2) = v61;
        BOOL v48 = v61 == 0;
        uint64_t v62 = 47;
        if (!v48) {
          uint64_t v62 = 48;
        }
        *(void *)(v52 + 336) = v62;
        *(void *)(v52 + 392) = 0;
        *(_OWORD *)(v52 + 360) = 0u;
        *(_OWORD *)(v52 + 376) = 0u;
        *(_OWORD *)(v52 + 344) = 0u;
        *(unsigned char *)(v52 + 400) = 26;
        *(void *)(v52 + 512) = 44;
        *(void *)(v52 + 568) = 0;
        *(_OWORD *)(v52 + 536) = 0u;
        *(_OWORD *)(v52 + 552) = 0u;
        *(_OWORD *)(v52 + 520) = 0u;
        *(unsigned char *)(v52 + 576) = 26;
        *(_OWORD *)(v78 + 472) = 0u;
        *(_OWORD *)(v78 + 488) = 0u;
        *(_OWORD *)(v78 + 440) = 0u;
        *(_OWORD *)(v78 + 456) = 0u;
        *(unsigned char *)(v52 + 504) = 26;
        swift_retain();
        uint64_t v50 = (void *)swift_task_alloc();
        *(void *)(v52 + 1608) = v50;
        *uint64_t v50 = v52;
        uint64_t v51 = sub_10034406C;
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_25:
  sub_10034CF5C();
  uint64_t v37 = *(void *)(v78 + 1464)
      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_itemIDFromButtonConfiguration;
  if ((*(unsigned char *)(v37 + 8) & 1) == 0) {
    sub_1002BE140(*(id *)v37);
  }
  uint64_t v38 = *(void *)(v1 + v2);
  uint64_t v39 = v38 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v38 + 16);
  long long v40 = (os_unfair_lock_s *)(v38 + ((*(unsigned int *)(*(void *)v38 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v40);
  sub_1002BDC4C(v39, v78 + 920);
  os_unfair_lock_unlock(v40);
  if ((swift_dynamicCast() & 1) == 0
    || (swift_bridgeObjectRelease(),
        uint64_t v41 = *(void *)(v1 + v2),
        uint64_t v42 = v41 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v41 + 16),
        long long v43 = (os_unfair_lock_s *)(v41 + ((*(unsigned int *)(*(void *)v41 + 48) + 3) & 0x1FFFFFFFCLL)),
        os_unfair_lock_lock(v43),
        sub_1002BDC98(v42, &v79),
        os_unfair_lock_unlock(v43),
        (v79 & 1) != 0))
  {
    long long v44 = (void *)swift_task_alloc();
    *(void *)(v78 + 1704) = v44;
    *long long v44 = v78;
    v44[1] = sub_10034499C;
    return (id)sub_10034F95C();
  }
  os_unfair_lock_lock(v43);
  sub_1002BDEEC(v42, &v79);
  os_unfair_lock_unlock(v43);
  if (v80)
  {
    unint64_t v63 = HIBYTE(v80) & 0xF;
    if ((v80 & 0x2000000000000000) == 0) {
      unint64_t v63 = v79 & 0xFFFFFFFFFFFFLL;
    }
    if (v63)
    {
      sub_1004AE348(v79, v80, (uint64_t *)(v78 + 224));
      long long v64 = (void *)swift_task_alloc();
      *(void *)(v78 + 1688) = v64;
      *long long v64 = v78;
      v64[1] = sub_1003447D8;
      return (id)sub_10034D800(v78 + 224);
    }
    swift_bridgeObjectRelease();
  }
  long long v65 = (void *)v78;
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    long long v65 = (void *)v78;
    long long v70 = *(void **)(*(void *)(v78 + 1464)
                   + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
    *(void *)(v78 + 1168) = v70;
    id v71 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v69 = v70;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "[%@] Missing required install verification token", v68, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(void, void))(v65[175] + 8))(v65[180], v65[174]);
  type metadata accessor for InternalError();
  sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  uint64_t v72 = swift_allocError();
  *uint64_t v73 = 0xD00000000000002BLL;
  v73[1] = 0x80000001005B8AF0;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  *(void *)(v78 + 1928) = v72;
  swift_errorRetain();
  objc_super v36 = (void *)swift_task_alloc();
  *(void *)(v78 + 1936) = v36;
  *objc_super v36 = v78;
  v36[1] = sub_1003468E8;
  return (id)sub_100347F04(v72);
}

uint64_t sub_100343900(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[191] = a1;
  v3[192] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[193] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_100343A58;
  return sub_100560FFC((uint64_t)(v3 + 73));
}

uint64_t sub_100343A58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[194] = a1;
  v3[195] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[196] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_100343BB0;
  return sub_100560FFC((uint64_t)(v3 + 82));
}

uint64_t sub_100343BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1576) = a1;
  *(void *)(v3 + 1584) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100343CB4, 0, 0);
}

uint64_t sub_100343CB4()
{
  uint64_t v1 = *(void *)(v0 + 1584);
  uint64_t v2 = *(void *)(v0 + 1576);
  long long v7 = *(_OWORD *)(v0 + 1528);
  long long v8 = *(_OWORD *)(v0 + 1552);
  uint64_t v3 = *(void *)(v0 + 1192);
  if (*(unsigned char *)(v0 + 402)) {
    uint64_t v4 = 43;
  }
  else {
    uint64_t v4 = 42;
  }
  sub_10019C9FC(v4, 0, 0, 0, 0, 0, 0, 0, 26);
  type metadata accessor for SystemAlert();
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 1592) = v5;
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v8;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v1;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(_WORD *)(v5 + 80) = 0;
  swift_release();
  return _swift_task_switch(sub_100343DB4, v3, 0);
}

uint64_t sub_100343DB4()
{
  uint64_t v1 = v0[199];
  uint64_t v2 = v0[173];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v1;
  swift_retain();
  sub_100532EB0(v2, (uint64_t)&unk_1006610B0, (uint64_t)v4);
  swift_release();
  sub_10001729C(v2, &qword_10065B220);
  type metadata accessor for InternalError();
  sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10034406C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[202] = a1;
  v3[203] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[204] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_1003441C4;
  return sub_100560FFC((uint64_t)(v3 + 42));
}

uint64_t sub_1003441C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[205] = a1;
  v3[206] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[207] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_10034431C;
  return sub_100560FFC((uint64_t)(v3 + 55));
}

uint64_t sub_10034431C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1664) = a1;
  *(void *)(v3 + 1672) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100344420, 0, 0);
}

uint64_t sub_100344420()
{
  uint64_t v1 = *(void *)(v0 + 1672);
  uint64_t v2 = *(void *)(v0 + 1664);
  long long v7 = *(_OWORD *)(v0 + 1616);
  long long v8 = *(_OWORD *)(v0 + 1640);
  uint64_t v3 = *(void *)(v0 + 1192);
  if (*(unsigned char *)(v0 + 403)) {
    uint64_t v4 = 48;
  }
  else {
    uint64_t v4 = 47;
  }
  sub_10019C9FC(v4, 0, 0, 0, 0, 0, 0, 0, 26);
  type metadata accessor for SystemAlert();
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 1680) = v5;
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v8;
  *(void *)(v5 + 48) = v2;
  *(void *)(v5 + 56) = v1;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(_WORD *)(v5 + 80) = 0;
  swift_release();
  return _swift_task_switch(sub_100344520, v3, 0);
}

uint64_t sub_100344520()
{
  uint64_t v1 = v0[210];
  uint64_t v2 = v0[173];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v1;
  swift_retain();
  sub_100532EB0(v2, (uint64_t)&unk_1006610A8, (uint64_t)v4);
  swift_release();
  sub_10001729C(v2, &qword_10065B220);
  type metadata accessor for InternalError();
  sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1003447D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1696) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1192);
  if (v0) {
    uint64_t v4 = sub_100346BAC;
  }
  else {
    uint64_t v4 = sub_100344904;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100344904()
{
  sub_10018B2BC(v0 + 224);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1704) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10034499C;
  return sub_10034F95C();
}

uint64_t sub_10034499C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)v1;
  *(void *)(*(void *)v1 + 1712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v2[241] = v0;
    swift_errorRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v2[242] = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_1003468E8;
    return sub_100347F04(v0);
  }
  else
  {
    uint64_t v6 = v2[149];
    return _swift_task_switch(sub_100344B2C, v6, 0);
  }
}

void sub_100344B2C()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0[214];
  uint64_t v2 = v0[188];
  uint64_t v3 = v0[183];
  sub_1002BE38C();
  uint64_t v4 = *(void *)(v3 + v2);
  uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1002BDC78(v5, &v25);
  os_unfair_lock_unlock(v6);
  if (!v1)
  {
    uint64_t v7 = v25;
    v0[215] = v25;
    if (v7)
    {
      (*(void (**)(void, uint64_t, void))(v0[164] + 16))(v0[165], v0[183] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url, v0[163]);
      os_unfair_lock_lock(v6);
      sub_1002BDC4C(v5, (uint64_t)(v0 + 100));
      os_unfair_lock_unlock(v6);
      uint64_t v8 = v0[183];
      uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID);
      uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID + 8);
      v0[216] = v10;
      uint64_t v11 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey;
      v0[217] = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey;
      uint64_t v12 = *(void **)(v8 + v11);
      v0[218] = v12;
      swift_bridgeObjectRetain();
      id v13 = v12;
      uint64_t v14 = (void *)swift_task_alloc();
      v0[219] = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100344FB4;
      uint64_t v15 = v0[172];
      uint64_t v16 = v0[165];
      sub_10026CD4C(v15, v16, v7, (uint64_t)(v0 + 100), v9, v10, (uint64_t)v13);
    }
    else
    {
      static Logger.install.getter();
      swift_retain_n();
      char v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unsigned __int8 v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = (void *)swift_slowAlloc();
        *(_DWORD *)unsigned __int8 v19 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        int64_t v21 = *(void **)(v0[149] + 160);
        v0[138] = v21;
        id v22 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v20 = v21;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%@] No agent available, failing", v19, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(void, void))(v0[175] + 8))(v0[177], v0[174]);
      type metadata accessor for InternalError();
      sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      uint64_t v23 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v0[241] = v23;
      swift_errorRetain();
      uint64_t v24 = (void *)swift_task_alloc();
      v0[242] = v24;
      *uint64_t v24 = v0;
      v24[1] = sub_1003468E8;
      sub_100347F04(v23);
    }
  }
}

uint64_t sub_100344FB4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)v1 + 800;
  *(void *)(*(void *)v1 + 1760) = v0;
  swift_task_dealloc();
  uint64_t v4 = (void *)v2[218];
  uint64_t v5 = v2[165];
  uint64_t v6 = v2[164];
  uint64_t v7 = v2[163];
  uint64_t v8 = v2[149];

  swift_bridgeObjectRelease();
  sub_100014524(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0) {
    uint64_t v9 = sub_100346C58;
  }
  else {
    uint64_t v9 = sub_100345188;
  }
  return _swift_task_switch(v9, v8, 0);
}

void sub_100345188()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void *)(v0 + 1376);
  uint64_t v56 = *(void *)(v0 + 1368);
  os_log_t loga = *(os_log_t *)(v0 + 1360);
  uint64_t v59 = *(void *)(v0 + 1352);
  uint64_t v2 = *(void *)(v0 + 1328);
  uint64_t v3 = *(void *)(v0 + 1192);
  sub_1000172F8(&qword_10065D360);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1005A6B00;
  id v5 = *(id *)(v3 + 160);
  uint64_t v6 = LogKey.description.getter();
  uint64_t v8 = v7;

  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = *(int *)(v2 + 24);
  *(_DWORD *)(v0 + 508) = v9;
  uint64_t v10 = *(void *)(v1 + v9 + 32);
  *(void *)(v4 + 48) = *(void *)(v1 + v9 + 24);
  *(void *)(v4 + 56) = v10;
  uint64_t v55 = (void *)(v1 + v9);
  *(void *)(v0 + 1096) = *(void *)(v1 + v9 + 16);
  swift_bridgeObjectRetain();
  *(void *)(v4 + 64) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v4 + 72) = v11;
  id v12 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v13 = LogKey.init(strings:)();
  uint64_t v14 = *(void **)(v3 + 160);
  *(void *)(v3 + 160) = v13;

  static Logger.install.getter();
  sub_10035B4E4(v1, v56, (uint64_t (*)(void))type metadata accessor for ADP);
  sub_10035B4E4(v1, (uint64_t)loga, (uint64_t (*)(void))type metadata accessor for ADP);
  sub_10035B4E4(v1, v59, (uint64_t (*)(void))type metadata accessor for ADP);
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_t log = v15;
    uint64_t v60 = v2;
    uint64_t v17 = swift_slowAlloc();
    os_log_type_t v18 = (void *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 138413058;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v54 = *(void *)(v0 + 1432);
    uint64_t v52 = *(void *)(v0 + 1400);
    uint64_t v53 = *(void *)(v0 + 1392);
    uint64_t v19 = *(void *)(v0 + 1368);
    uint64_t v50 = *(void *)(v0 + 1360);
    uint64_t v51 = *(void *)(v0 + 1352);
    uint64_t v20 = *(void **)(v3 + 160);
    *(void *)(v0 + 1136) = v20;
    id v21 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v18 = v20;
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v22 = v19 + *(int *)(v2 + 24);
    uint64_t v23 = *(void *)(v22 + 24);
    unint64_t v24 = *(void *)(v22 + 32);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1144) = sub_1000143F4(v23, v24, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10035B95C(v19, (uint64_t (*)(void))type metadata accessor for ADP);
    *(_WORD *)(v17 + 22) = 2050;
    uint64_t v25 = *(void *)(v50 + *(int *)(v60 + 24) + 16);
    sub_10035B95C(v50, (uint64_t (*)(void))type metadata accessor for ADP);
    *(void *)(v0 + 1152) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 32) = 2050;
    uint64_t v26 = *(void *)(v51 + *(int *)(v60 + 24) + 8);
    sub_10035B95C(v51, (uint64_t (*)(void))type metadata accessor for ADP);
    *(void *)(v0 + 1160) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v16, "[%@] Bundle ID: %{public}s Item ID: %{public}llu Version ID: %{public}llu", (uint8_t *)v17, 0x2Au);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v27(v54, v53);
  }
  else
  {
    uint64_t v28 = *(void *)(v0 + 1432);
    uint64_t v29 = *(void *)(v0 + 1400);
    uint64_t v30 = *(void *)(v0 + 1392);
    uint64_t v31 = *(void *)(v0 + 1368);
    uint64_t v32 = *(void *)(v0 + 1360);
    sub_10035B95C(*(void *)(v0 + 1352), (uint64_t (*)(void))type metadata accessor for ADP);
    sub_10035B95C(v32, (uint64_t (*)(void))type metadata accessor for ADP);
    swift_release_n();
    sub_10035B95C(v31, (uint64_t (*)(void))type metadata accessor for ADP);

    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v27(v28, v30);
  }
  *(void *)(v0 + 1768) = v27;
  uint64_t v33 = *(void *)(v0 + 1760);
  uint64_t v34 = *(void *)(v0 + 1464);
  uint64_t v35 = *(void *)(v34 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache);
  uint64_t v36 = *(void *)(v0 + 1504);
  *(void *)(v0 + 1776) = v35;
  *(void *)(v0 + 1784) = v55[3];
  *(void *)(v0 + 1792) = v55[4];
  *(void *)(v0 + 1800) = v55[2];
  uint64_t v37 = *(void *)(v34 + v36);
  uint64_t v38 = v37 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v37 + 16);
  uint64_t v39 = (os_unfair_lock_s *)(v37 + ((*(unsigned int *)(*(void *)v37 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v39);
  sub_1002BDC4C(v38, v0 + 960);
  os_unfair_lock_unlock(v39);
  if (!v33)
  {
    uint64_t v40 = *(void *)(v0 + 1464);
    uint64_t v41 = *(void *)(v0 + 1296);
    uint64_t v42 = *(void *)(v0 + 1272);
    uint64_t v43 = *(void *)(v0 + 1264);
    uint64_t v44 = *(void *)(v0 + 984);
    sub_10018AC60((void *)(v0 + 960), v44);
    *(void *)(v0 + 1808) = sub_10047F490(v44);
    *(void *)(v0 + 1816) = v45;
    *(unsigned char *)(v0 + 437) = v46;
    *(void *)(v0 + 1824) = v55[1];
    uint64_t v47 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
    *(void *)(v0 + 1832) = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
    uint64_t v48 = v40 + v47;
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
    *(void *)(v0 + 1840) = v49;
    *(void *)(v0 + 1848) = (v42 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v49(v41, v48, v43);
    _swift_task_switch(sub_1003457DC, v35, 0);
  }
}

uint64_t sub_1003457DC()
{
  uint64_t v1 = *(void *)(v0 + 1296);
  uint64_t v2 = *(void *)(v0 + 1272);
  uint64_t v3 = *(void *)(v0 + 1264);
  uint64_t v4 = *(void *)(v0 + 1192);
  sub_1002B676C(*(void *)(v0 + 1784), *(void *)(v0 + 1792), *(void *)(v0 + 1800), 0, *(void *)(v0 + 1808), *(char **)(v0 + 1816), *(unsigned char *)(v0 + 437) & 1, *(void *)(v0 + 1824), 0, v1, 0);
  swift_bridgeObjectRelease();
  sub_10018ACBC();
  swift_release();
  id v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 1856) = v5;
  *(void *)(v0 + 1864) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  sub_100014524(v0 + 960);
  return _swift_task_switch(sub_100345908, v4, 0);
}

uint64_t sub_100345908()
{
  uint64_t v1 = *(void *)(v0 + 1832);
  uint64_t v2 = *(void *)(v0 + 1464);
  uint64_t v3 = (_OWORD *)(*(void *)(v0 + 1376) + *(int *)(v0 + 508));
  *(_OWORD *)(v0 + 16) = *v3;
  long long v4 = v3[1];
  long long v5 = v3[2];
  long long v6 = v3[4];
  *(_OWORD *)(v0 + 64) = v3[3];
  *(_OWORD *)(v0 + 80) = v6;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  long long v7 = v3[5];
  long long v8 = v3[6];
  long long v9 = v3[8];
  *(_OWORD *)(v0 + 128) = v3[7];
  *(_OWORD *)(v0 + 144) = v9;
  *(_OWORD *)(v0 + 96) = v7;
  *(_OWORD *)(v0 + 112) = v8;
  long long v10 = v3[9];
  long long v11 = v3[10];
  long long v12 = v3[12];
  *(_OWORD *)(v0 + 192) = v3[11];
  *(_OWORD *)(v0 + 208) = v12;
  *(_OWORD *)(v0 + 160) = v10;
  *(_OWORD *)(v0 + 176) = v11;
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 48);
  *(void *)(v0 + 1872) = v14;
  sub_10035B39C(v0 + 16);
  sub_10026EB68((void *)(v0 + 16));
  sub_10035B440(v0 + 16);
  char v15 = *(unsigned char *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_allowAccountPrompt);
  *(void *)(v0 + 1880) = *(void *)(v2
                                     + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler);
  swift_retain();
  swift_bridgeObjectRetain();
  os_log_type_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 1888) = v16;
  *os_log_type_t v16 = v0;
  v16[1] = sub_100345A78;
  uint64_t v17 = *(void *)(v0 + 1288);
  return sub_10045C3C8(v17, v13, v14, 0, 2, v2 + v1, v15);
}

uint64_t sub_100345A78()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1896) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1192);
  swift_bridgeObjectRelease();
  if (v0) {
    long long v4 = sub_100346D04;
  }
  else {
    long long v4 = sub_100345BC0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100345BC0()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1840);
  uint64_t v2 = *(void *)(v0 + 1288);
  uint64_t v3 = *(void *)(v0 + 1280);
  uint64_t v4 = *(void *)(v0 + 1264);
  static Logger.install.getter();
  v1(v3, v2, v4);
  swift_retain_n();
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v39 = (void *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412546;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1856);
    uint64_t v36 = *(void *)(v0 + 1424);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 1768);
    uint64_t v35 = *(void *)(v0 + 1392);
    uint64_t v8 = *(void *)(v0 + 1280);
    uint64_t v9 = *(void *)(v0 + 1264);
    long long v10 = *(void **)(*(void *)(v0 + 1192) + 160);
    *(void *)(v0 + 1120) = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v39 = v10;
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2082;
    sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 1128) = sub_1000143F4(v12, v13, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Assigning installation identifier: %{public}s", (uint8_t *)v7, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v35);
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 1856);
    char v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1768);
    uint64_t v16 = *(void *)(v0 + 1424);
    uint64_t v17 = *(void *)(v0 + 1392);
    uint64_t v18 = *(void *)(v0 + 1280);
    uint64_t v19 = *(void *)(v0 + 1264);
    swift_release_n();
    v14(v18, v19);

    v15(v16, v17);
  }
  uint64_t v40 = *(void *)(v0 + 1736);
  uint64_t v38 = *(void *)(v0 + 1464);
  uint64_t v20 = *(void *)(v0 + 1376);
  uint64_t v21 = *(void *)(v0 + 1336);
  uint64_t v22 = *(void *)(v0 + 1328);
  uint64_t v23 = *(void *)(v0 + 1256);
  unint64_t v24 = *(void **)(v0 + 1248);
  uint64_t v25 = *(int **)(v0 + 1240);
  uint64_t v26 = *(void *)(v0 + 1192);
  sub_10035B4E4(v20, v23, (uint64_t (*)(void))type metadata accessor for ADP);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v22);
  uint64_t v27 = v26 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
  swift_beginAccess();
  sub_10018AD2C(v23, v27, &qword_100661010);
  swift_endAccess();
  sub_10035B4E4(v20, (uint64_t)v24 + v25[5], (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v28 = v25[8];
  *(_DWORD *)(v0 + 580) = v28;
  *((unsigned char *)v24 + v28) = 0;
  *unint64_t v24 = v38;
  sub_10001733C(v0 + 404, (uint64_t)v24 + v25[6], &qword_10065C310);
  uint64_t v29 = *(void **)(v38 + v40);
  *(void *)((char *)v24 + v25[7]) = v29;
  swift_retain();
  id v30 = v29;
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 1904) = v31;
  void *v31 = v0;
  v31[1] = sub_10034605C;
  uint64_t v32 = *(void *)(v0 + 1232);
  return sub_10018E434(v32);
}

uint64_t sub_10034605C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1912) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 1192);
  if (v0) {
    uint64_t v4 = sub_100346DDC;
  }
  else {
    uint64_t v4 = sub_100346188;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_100346188()
{
  uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[232];
  uint64_t v1 = v0[183];
  uint64_t v2 = v0[172];
  uint64_t v20 = v0[168];
  uint64_t v21 = v2;
  uint64_t v23 = v0[158];
  uint64_t v24 = v0[161];
  uint64_t v22 = v0[156];
  uint64_t v3 = v0[154];
  uint64_t v4 = v0[153];
  uint64_t v5 = v0[152];
  uint64_t v6 = v0[151];
  uint64_t v7 = v0[150];
  uint64_t v8 = v0[149];
  sub_10035B4E4(v3, v6, type metadata accessor for ADPPreflightResultingMetadata);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6, 0, 1, v5);
  uint64_t v9 = v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_preflightMetadata;
  swift_beginAccess();
  sub_10018AD2C(v6, v9, &qword_100661018);
  swift_endAccess();
  sub_10035B4E4(v2, v20, (uint64_t (*)(void))type metadata accessor for ADP);
  sub_10035B4E4(v3, v7, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  uint64_t v10 = *(void *)(v1
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData);
  unint64_t v11 = *(void *)(v1
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData
                  + 8);
  uint64_t v12 = *(void **)(v8 + 160);
  objc_allocWithZone((Class)type metadata accessor for InstallConfirmationTask());
  swift_retain();
  sub_10018B2A8(v10, v11);
  id v13 = v12;
  id v14 = sub_1004B1934(v20, v1, v7, v10, v11, v13);

  sub_10018AE44(v10, v11);
  swift_release();
  swift_release();
  swift_release();
  sub_10035B95C(v3, type metadata accessor for ADPPreflightResultingMetadata);
  sub_10035B95C(v22, type metadata accessor for ADPPreflightTask);
  v25(v24, v23);
  sub_10035B95C(v21, (uint64_t (*)(void))type metadata accessor for ADP);
  char v15 = *(void **)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask);
  *(void *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask) = v14;

  if ((*(unsigned char *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldCacheInstallAsPending) & 1) == 0) {
    goto LABEL_5;
  }
  if (qword_10065B0E8 != -1) {
    swift_once();
  }
  uint64_t v16 = v0[239];
  uint64_t v17 = (void *)(qword_100660EB0 + 16);
  uint64_t v18 = (os_unfair_lock_s *)(qword_100660EB0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB0 + 24));
  sub_10035B54C(v17);
  os_unfair_lock_unlock(v18);
  if (!v16)
  {
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (void (*)(void))v0[1];
    v19();
  }
}

uint64_t sub_1003465D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1192);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003466E0, v1, 0);
}

uint64_t sub_1003466E0()
{
  type metadata accessor for InternalError();
  sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003468E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1192);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003469F8, v1, 0);
}

uint64_t sub_1003469F8()
{
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100346BAC()
{
  sub_10018B2BC((uint64_t)(v0 + 28));
  uint64_t v1 = v0[212];
  v0[241] = v1;
  swift_errorRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[242] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003468E8;
  return sub_100347F04(v1);
}

uint64_t sub_100346C58()
{
  swift_release();
  uint64_t v1 = v0[220];
  v0[241] = v1;
  swift_errorRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[242] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003468E8;
  return sub_100347F04(v1);
}

uint64_t sub_100346D04()
{
  uint64_t v1 = v0[172];
  swift_release();
  swift_release();
  sub_10035B95C(v1, (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v2 = v0[237];
  v0[241] = v2;
  swift_errorRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[242] = v3;
  void *v3 = v0;
  v3[1] = sub_1003468E8;
  return sub_100347F04(v2);
}

uint64_t sub_100346DDC()
{
  uint64_t v1 = *(void *)(v0 + 1248);
  if (*(unsigned char *)(v1 + *(int *)(v0 + 580)) == 1)
  {
    *(unsigned char *)(*(void *)(v0 + 1192)
             + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
    uint64_t v1 = *(void *)(v0 + 1248);
  }
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1856);
  uint64_t v3 = *(void *)(v0 + 1376);
  uint64_t v4 = *(void *)(v0 + 1288);
  uint64_t v5 = *(void *)(v0 + 1264);
  swift_willThrow();
  swift_release();
  swift_release();
  sub_10035B95C(v1, type metadata accessor for ADPPreflightTask);
  v2(v4, v5);
  sub_10035B95C(v3, (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v6 = *(void *)(v0 + 1912);
  *(void *)(v0 + 1928) = v6;
  swift_errorRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 1936) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003468E8;
  return sub_100347F04(v6);
}

uint64_t sub_100346F40(uint64_t a1)
{
  return sub_100346F58(a1, &qword_100660EB0);
}

uint64_t sub_100346F4C(uint64_t a1)
{
  return sub_100346F58(a1, &qword_100660EB8);
}

uint64_t sub_100346F58(uint64_t a1, uint64_t *a2)
{
  sub_1000172F8(&qword_100661038);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = _swiftEmptyArrayStorage;
  *a2 = result;
  return result;
}

uint64_t sub_100346FA4(uint64_t a1, uint64_t a2)
{
  swift_defaultActor_initialize();
  uint64_t v5 = v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
  uint64_t v6 = type metadata accessor for ADP();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_preflightMetadata;
  uint64_t v8 = type metadata accessor for ADPPreflightResultingMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldCacheInstallAsPending) = 1;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 1;
  *(void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask) = 0;
  uint64_t v9 = (void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_developerID);
  *uint64_t v9 = 0;
  v9[1] = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_hasConditionalDeveloperApproval) = 0;
  *(void *)(v2 + 112) = a1;
  uint64_t v10 = a1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  uint64_t v11 = v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v10, v12);
  sub_10001733C(a2, v2 + 120, &qword_10065C310);
  id v13 = *(void **)(a1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
  *(void *)(v2 + 160) = v13;
  id v14 = v13;
  return v2;
}

uint64_t sub_100347148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[4] = v6;
  void v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_100347208, 0, 0);
}

uint64_t sub_100347208()
{
  uint64_t v28 = v0;
  if (qword_10065B0E8 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = (os_unfair_lock_s *)qword_100660EB0;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v1;
  v3 += 6;
  os_unfair_lock_lock(v3);
  sub_1003580A0(&v27);
  os_unfair_lock_unlock(v3);
  unint64_t v5 = v27;
  *(void *)(v0 + 56) = v27;
  swift_task_dealloc();
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    *(void *)(v0 + 64) = v6;
    if (v6) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v14 = *(void *)(v0 + 16);
    uint64_t v13 = *(void *)(v0 + 24);
    swift_bridgeObjectRelease();
    char v15 = (os_unfair_lock_s *)qword_100660EB0;
    uint64_t v16 = swift_task_alloc();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    uint64_t v17 = (uint64_t *)&v15[4];
    v15 += 6;
    os_unfair_lock_lock(v15);
    sub_1003580D8(v17);
    os_unfair_lock_unlock(v15);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 64) = v26;
  if (!v26) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v0 + 56);
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v9 = *(void *)(v8 + 8 * v7 + 32);
      swift_retain();
    }
    *(void *)(v0 + 72) = v9;
    *(void *)(v0 + 80) = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 112)
                    + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
    uint64_t v11 = v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16);
    uint64_t v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_retain();
    os_unfair_lock_lock(v12);
    sub_1002BDC98(v11, (unsigned char *)(v0 + 144));
    *(void *)(v0 + 88) = 0;
    os_unfair_lock_unlock(v12);
    LOBYTE(v11) = *(unsigned char *)(v0 + 144);
    swift_release();
    if ((v11 & 1) == 0) {
      break;
    }
    swift_release();
    uint64_t v7 = *(void *)(v0 + 80);
    if (v7 == *(void *)(v0 + 64)) {
      goto LABEL_11;
    }
  }
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 138412290;
    uint64_t v24 = *(void **)(*(void *)(v9 + 112)
                   + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
    *(void *)(v22 + 4) = v24;
    *uint64_t v23 = v24;
    id v25 = v24;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] Cleaning up pending install after client disconnect", (uint8_t *)v22, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  return _swift_task_switch(sub_100347630, v9, 0);
}

uint64_t sub_100347630()
{
  uint64_t v1 = *(void *)(v0[9] + 112);
  v0[12] = v1;
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler);
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
  v0[13] = v2;
  v0[14] = v3;
  swift_retain();
  return _swift_task_switch(sub_1003476C4, v2, 0);
}

uint64_t sub_1003476C4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_10045DD84(v1 + *(void *)(v0 + 112));
  swift_release();
  return _swift_task_switch(sub_10034773C, v1, 0);
}

uint64_t sub_10034773C()
{
  uint64_t v1 = v0[12];
  v0[15] = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache);
  uint64_t v2 = v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  void *v3 = v0;
  v3[1] = sub_100347808;
  return sub_1002B7380(v2);
}

uint64_t sub_100347808()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100347934, v1, 0);
}

void sub_100347934()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = (uint64_t *)(qword_100660EB0 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(qword_100660EB0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB0 + 24));
  sub_1003580BC(v2);
  *(void *)(v0 + 136) = v1;
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    sub_1003C5D1C();
    _swift_task_switch(sub_1003479F8, 0, 0);
  }
}

void sub_1003479F8()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 80);
  if (v2 == *(void *)(v0 + 64))
  {
LABEL_2:
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 24);
    swift_bridgeObjectRelease();
    uint64_t v5 = qword_100660EB0;
    uint64_t v6 = swift_task_alloc();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    sub_1003580D8((uint64_t *)(v5 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    if (!v1)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(void (**)(void))(v0 + 8);
      v12();
    }
    return;
  }
  uint64_t v7 = *(void *)(v0 + 56);
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = (uint64_t (*)())specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v11 = v8;
  }
  else
  {
    uint64_t v11 = *(uint64_t (**)())(v7 + 8 * v2 + 32);
    uint64_t v8 = (uint64_t (*)())swift_retain();
  }
  *(void *)(v0 + 72) = v11;
  *(void *)(v0 + 80) = v2 + 1;
  if (__OFADD__(v2, 1)) {
    goto LABEL_31;
  }
  uint64_t v13 = (unsigned char *)(v0 + 144);
  uint64_t v14 = *(void *)(*((void *)v11 + 14)
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v15 = v14 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v16);
  sub_1002BDC98(v15, (unsigned char *)(v0 + 144));
  *(void *)(v0 + 88) = v1;
  if (!v1)
  {
    os_unfair_lock_unlock(v16);
    int v17 = *v13;
    swift_release();
    if (v17 != 1)
    {
LABEL_25:
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v26 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 138412290;
        unint64_t v27 = *(void **)(*((void *)v11 + 14)
                       + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
        *(void *)(v25 + 4) = v27;
        *uint64_t v26 = v27;
        id v28 = v27;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Cleaning up pending install after client disconnect", (uint8_t *)v25, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
      uint64_t v8 = sub_100347630;
      uint64_t v9 = v11;
      uint64_t v10 = 0;
      goto _swift_task_switch;
    }
    swift_release();
    uint64_t v18 = *(void *)(v0 + 80);
    if (v18 == *(void *)(v0 + 64))
    {
      uint64_t v1 = 0;
      goto LABEL_2;
    }
    while (1)
    {
      uint64_t v19 = *(void *)(v0 + 56);
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = (uint64_t (*)())specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v8;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)())(v19 + 8 * v18 + 32);
        uint64_t v8 = (uint64_t (*)())swift_retain();
      }
      *(void *)(v0 + 72) = v11;
      *(void *)(v0 + 80) = v18 + 1;
      if (__OFADD__(v18, 1)) {
        break;
      }
      uint64_t v20 = *(void *)(*((void *)v11 + 14)
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
      uint64_t v21 = v20 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v20 + 16);
      uint64_t v22 = (os_unfair_lock_s *)(v20 + ((*(unsigned int *)(*(void *)v20 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_retain();
      os_unfair_lock_lock(v22);
      sub_1002BDC98(v21, (unsigned char *)(v0 + 144));
      *(void *)(v0 + 88) = 0;
      os_unfair_lock_unlock(v22);
      LOBYTE(v21) = *v13;
      swift_release();
      if ((v21 & 1) == 0) {
        goto LABEL_25;
      }
      swift_release();
      uint64_t v1 = 0;
      uint64_t v18 = *(void *)(v0 + 80);
      if (v18 == *(void *)(v0 + 64)) {
        goto LABEL_2;
      }
    }
LABEL_31:
    __break(1u);
_swift_task_switch:
    _swift_task_switch(v8, v9, v10);
    return;
  }
  os_unfair_lock_unlock(v16);
}

uint64_t sub_100347E8C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10035AA0C(v6, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t sub_100347F04(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for InternalError();
  v2[18] = v3;
  v2[19] = *(void *)(v3 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MarketplaceKitError();
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  v2[24] = swift_task_alloc();
  sub_1000172F8(&qword_10065BE00);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  return _swift_task_switch(sub_100348070, v1, 0);
}

uint64_t sub_100348070()
{
  uint64_t v1 = v0[16];
  if (v1)
  {
    uint64_t v2 = v0[19];
    v0[15] = v1;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    int v3 = swift_dynamicCast();
    uint64_t v4 = *(void (**)(void, uint64_t, uint64_t, void))(v2 + 56);
    uint64_t v5 = v0[26];
    if (v3)
    {
      v4(v0[26], 0, 1, v0[18]);
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v6 = (uint64_t (*)(void))v0[1];
        return v6();
      }
      sub_10035B95C(v0[26], (uint64_t (*)(void))type metadata accessor for InternalError);
    }
    else
    {
      v4(v0[26], 1, 1, v0[18]);
      sub_10001729C(v5, &qword_10065BE00);
    }
  }
  uint64_t v8 = *(void *)(v0[17] + 112);
  v0[27] = v8;
  uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler);
  uint64_t v10 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
  v0[28] = v9;
  v0[29] = v10;
  swift_retain();
  return _swift_task_switch(sub_100348248, v9, 0);
}

uint64_t sub_100348248()
{
  uint64_t v1 = *(void *)(v0 + 136);
  sub_10045DD84(v1 + *(void *)(v0 + 232));
  swift_release();
  return _swift_task_switch(sub_1003482C0, v1, 0);
}

uint64_t sub_1003482C0()
{
  if (!*(void *)(v0 + 128))
  {
LABEL_4:
    *(void *)(v0 + 288) = 0;
    uint64_t v5 = *(void *)(v0 + 216);
    *(void *)(v0 + 296) = *(void *)(v5
                                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache);
    uint64_t v6 = v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_10034892C;
    return sub_1002B7380(v6);
  }
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_itemIDFromButtonConfiguration);
  if (*(unsigned char *)(v1
                + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_itemIDFromButtonConfiguration
                + 8) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 136) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
    swift_beginAccess();
    uint64_t v4 = type metadata accessor for ADP();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4)) {
      goto LABEL_4;
    }
    uint64_t v2 = (uint64_t *)(v3 + *(int *)(v4 + 24) + 16);
    uint64_t v1 = *(void *)(v0 + 216);
  }
  uint64_t v9 = *v2;
  *(void *)(v0 + 240) = *(void *)(v1
                                    + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientRegistry);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v11 = v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16);
  uint64_t v12 = (os_unfair_lock_s *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_errorRetain();
  swift_retain();
  os_unfair_lock_lock(v12);
  sub_1002BDC4C(v11, v0 + 16);
  *(void *)(v0 + 248) = 0;
  os_unfair_lock_unlock(v12);
  uint64_t v26 = v9;
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 192);
  uint64_t v15 = *(void *)(v0 + 40);
  sub_10018AC60((void *)(v0 + 16), v15);
  uint64_t v16 = sub_10047F490(v15);
  uint64_t v18 = v17;
  *(void *)(v0 + 256) = v16;
  *(void *)(v0 + 264) = v17;
  *(unsigned char *)(v0 + 312) = v19;
  char v25 = v19 & 1;
  uint64_t v20 = *(void *)(v13 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_installDatabase);
  *(void *)(v0 + 272) = v20;
  swift_getErrorValue();
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v22 = *(void *)(v0 + 96);
  swift_retain();
  sub_1003ED3A0(v21, v22, v14);
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100348644;
  uint64_t v24 = *(void *)(v0 + 192);
  return sub_10056DDE8(v16, v18, v25, v20, v26, 0, 0, v24);
}

uint64_t sub_100348644()
{
  uint64_t v6 = *(void *)v0 + 16;
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 184);
  uint64_t v3 = *(void *)(*(void *)v0 + 176);
  uint64_t v4 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  sub_10018ACBC();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100014524(v6);
  return _swift_task_switch(sub_100348850, v4, 0);
}

uint64_t sub_100348850()
{
  swift_errorRelease();
  v0[36] = v0[31];
  uint64_t v1 = v0[27];
  v0[37] = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_progressCache);
  uint64_t v2 = v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_id;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[38] = v3;
  void *v3 = v0;
  v3[1] = sub_10034892C;
  return sub_1002B7380(v2);
}

uint64_t sub_10034892C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100348A58, v1, 0);
}

void sub_100348A58()
{
  if (qword_10065B0E8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[36];
  uint64_t v2 = (uint64_t *)(qword_100660EB0 + 16);
  uint64_t v3 = (os_unfair_lock_s *)(qword_100660EB0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB0 + 24));
  sub_1003580BC(v2);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[25];
    uint64_t v6 = v0[18];
    uint64_t v7 = v0[19];
    if (v4)
    {
      v0[13] = v4;
      swift_errorRetain();
      sub_1000172F8(&qword_10065B260);
      int v8 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v5, v8 ^ 1u, 1, v6);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
      {
        uint64_t v9 = v0[20];
        uint64_t v10 = v0[21];
        sub_10035B9BC(v0[25], v10, (uint64_t (*)(void))type metadata accessor for InternalError);
        sub_10035B9BC(v10, v9, (uint64_t (*)(void))type metadata accessor for InternalError);
        LODWORD(v10) = swift_getEnumCaseMultiPayload();
        sub_10035B95C(v9, (uint64_t (*)(void))type metadata accessor for InternalError);
        if (v10 == 5)
        {
          *(unsigned char *)(v0[17]
                   + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
LABEL_11:
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v11 = (void (*)(void))v0[1];
          v11();
          return;
        }
LABEL_10:
        sub_1003C5D1C();
        goto LABEL_11;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v7 + 56))(v0[25], 1, 1, v0[18]);
    }
    sub_10001729C(v0[25], &qword_10065BE00);
    goto LABEL_10;
  }
}

uint64_t sub_100348CAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10035ABC0(a1, a2, a3);
  uint64_t result = swift_bridgeObjectRelease();
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8 >= v6) {
      return sub_10055418C(v6, v8);
    }
  }
  else
  {
    uint64_t v8 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8 >= v6) {
      return sub_10055418C(v6, v8);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100348D6C()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  type metadata accessor for AppInstallTemplate();
  v1[21] = swift_task_alloc();
  v1[22] = type metadata accessor for ADPPrepareInstallTask();
  v1[23] = swift_task_alloc();
  sub_1000172F8(&qword_100661018);
  v1[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ADPPreflightResultingMetadata(0);
  v1[25] = v3;
  v1[26] = *(void *)(v3 - 8);
  v1[27] = swift_task_alloc();
  sub_1000172F8(&qword_100661010);
  v1[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ADP();
  v1[29] = v4;
  v1[30] = *(void *)(v4 - 8);
  v1[31] = swift_task_alloc();
  return _swift_task_switch(sub_100348FD4, v0, 0);
}

uint64_t sub_100348FD4()
{
  uint64_t v54 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[13];
  uint64_t v5 = *(void *)(v4 + 112);
  v0[32] = *(void *)(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_scheduler);
  uint64_t v6 = v4 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
  swift_beginAccess();
  sub_100017238(v6, v3, &qword_100661010);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v7 = v0[28];
    swift_retain();
    sub_10001729C(v7, &qword_100661010);
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v12 = *(void **)(v0[13] + 160);
      v0[8] = v12;
      id v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] No ADP available, failing", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    type metadata accessor for InternalError();
    sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    uint64_t v26 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v14 = v0[25];
  uint64_t v15 = v0[26];
  uint64_t v16 = v0[24];
  uint64_t v17 = v0[13];
  sub_10035B9BC(v0[28], v0[31], (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v18 = v17 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_preflightMetadata;
  swift_beginAccess();
  sub_100017238(v18, v16, &qword_100661018);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14) == 1)
  {
    uint64_t v19 = v0[24];
    swift_retain();
    sub_10001729C(v19, &qword_100661018);
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v24 = *(void **)(v0[13] + 160);
      v0[9] = v24;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v24;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] No preflight metadata available, failing", v22, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v30 = v0[31];
    (*(void (**)(void, void))(v0[15] + 8))(v0[17], v0[14]);
    type metadata accessor for InternalError();
    sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    uint64_t v26 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_16:
    sub_10035B95C(v30, (uint64_t (*)(void))type metadata accessor for ADP);
LABEL_17:
    v0[39] = v26;
    swift_errorRetain();
    uint64_t v31 = (void *)swift_task_alloc();
    v0[40] = v31;
    void *v31 = v0;
    v31[1] = sub_10034A124;
    return sub_100347F04(v26);
  }
  sub_10035B9BC(v0[24], v0[27], type metadata accessor for ADPPreflightResultingMetadata);
  uint64_t v27 = *(void *)(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v28 = v27 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v27 + 16);
  uint64_t v29 = (os_unfair_lock_s *)(v27 + ((*(unsigned int *)(*(void *)v27 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v29);
  sub_1002BDC78(v28, &v53);
  os_unfair_lock_unlock(v29);
  uint64_t v33 = v53;
  swift_release();
  if (!v33)
  {
    static Logger.install.getter();
    swift_retain_n();
    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v49 = *(void **)(v0[13] + 160);
      v0[10] = v49;
      id v50 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v49;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] No agent available, failing", v48, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v30 = v0[31];
    uint64_t v51 = v0[27];
    (*(void (**)(void, void))(v0[15] + 8))(v0[18], v0[14]);
    type metadata accessor for InternalError();
    sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    uint64_t v26 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_10035B95C(v51, type metadata accessor for ADPPreflightResultingMetadata);
    goto LABEL_16;
  }
  uint64_t v34 = v0[27];
  uint64_t v36 = (int *)v0[22];
  uint64_t v35 = (void *)v0[23];
  uint64_t v37 = v0[13];
  sub_10035B4E4(v0[31], (uint64_t)v35 + v36[5], (uint64_t (*)(void))type metadata accessor for ADP);
  sub_10035B4E4(v34, (uint64_t)v35 + v36[6], type metadata accessor for ADPPreflightResultingMetadata);
  char v38 = *(unsigned char *)(v37 + 152);
  long long v39 = *(_OWORD *)(v37 + 120);
  long long v40 = *(_OWORD *)(v37 + 136);
  *uint64_t v35 = v5;
  uint64_t v41 = *(void **)(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
  *(void *)((char *)v35 + v36[7]) = v41;
  uint64_t v42 = (char *)v35 + v36[8];
  *(_OWORD *)uint64_t v42 = v39;
  *((_OWORD *)v42 + 1) = v40;
  v42[32] = v38;
  swift_retain();
  id v43 = v41;
  uint64_t v44 = (void *)swift_task_alloc();
  v0[33] = v44;
  *uint64_t v44 = v0;
  v44[1] = sub_1003499B0;
  uint64_t v45 = v0[21];
  return sub_10017D218(v45);
}

uint64_t sub_1003499B0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_10034A35C;
  }
  else {
    uint64_t v4 = sub_100349ADC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100349ADC()
{
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v4 = *(void **)(v0[13] + 160);
    v0[12] = v4;
    id v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v4;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Enqueuing install", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v6 = v0[20];
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[15];
  os_log_type_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[35] = v9;
  v0[36] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v6, v7);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[37] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100349D14;
  uint64_t v11 = v0[21];
  return sub_10045E0BC(v11);
}

uint64_t sub_100349D14()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_10034A45C;
  }
  else {
    uint64_t v4 = sub_100349E40;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100349E40()
{
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_t log = v1;
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    id v5 = *(void **)(v0[13] + 160);
    v0[11] = v5;
    id v6 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_release_n();
    os_log_type_t v7 = v2;
    uint64_t v8 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v7, "[%@] Successfully enqueued install", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    uint64_t v8 = v1;
  }
  os_log_type_t v9 = (void (*)(uint64_t, uint64_t))v0[35];
  uint64_t v10 = v0[31];
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[23];
  uint64_t v13 = v0[21];
  uint64_t v14 = v0[19];
  uint64_t v15 = v0[14];
  swift_release();

  v9(v14, v15);
  sub_10035B95C(v13, (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  sub_10035B95C(v12, (uint64_t (*)(void))type metadata accessor for ADPPrepareInstallTask);
  sub_10035B95C(v11, type metadata accessor for ADPPreflightResultingMetadata);
  sub_10035B95C(v10, (uint64_t (*)(void))type metadata accessor for ADP);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_10034A124()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10034A250, v1, 0);
}

uint64_t sub_10034A250()
{
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034A35C()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[27];
  sub_10035B95C(v0[23], (uint64_t (*)(void))type metadata accessor for ADPPrepareInstallTask);
  sub_10035B95C(v2, type metadata accessor for ADPPreflightResultingMetadata);
  sub_10035B95C(v1, (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v3 = v0[34];
  v0[39] = v3;
  swift_errorRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[40] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10034A124;
  return sub_100347F04(v3);
}

uint64_t sub_10034A45C()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[23];
  sub_10035B95C(v0[21], (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  sub_10035B95C(v3, (uint64_t (*)(void))type metadata accessor for ADPPrepareInstallTask);
  sub_10035B95C(v2, type metadata accessor for ADPPreflightResultingMetadata);
  sub_10035B95C(v1, (uint64_t (*)(void))type metadata accessor for ADP);
  uint64_t v4 = v0[38];
  v0[39] = v4;
  swift_errorRetain();
  id v5 = (void *)swift_task_alloc();
  v0[40] = (uint64_t)v5;
  *id v5 = v0;
  v5[1] = sub_10034A124;
  return sub_100347F04(v4);
}

uint64_t sub_10034A584(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  sub_1000172F8(&qword_10065B220);
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  sub_1000172F8(&qword_10065BE00);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  sub_1000172F8(&qword_10065B628);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_10034A6E4, v1, 0);
}

uint64_t sub_10034A6E4()
{
  v0[2] = v0[6];
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  uint64_t v1 = type metadata accessor for MarketplaceKitError();
  int v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56);
  uint64_t v4 = v0[14];
  if (v2)
  {
    uint64_t v5 = *(void *)(v1 - 8);
    v3(v0[14], 0, 1, v1);
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v4, v1);
    int v7 = enum case for MarketplaceKitError.cancelled(_:);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
    if (v6 == v7)
    {
      sub_1003534EC(2);
LABEL_4:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v8 = (uint64_t (*)(void))v0[1];
      return v8();
    }
  }
  else
  {
    v3(v0[14], 1, 1, v1);
    sub_10001729C(v4, &qword_10065B628);
  }
  v0[3] = v0[6];
  swift_errorRetain();
  uint64_t v10 = type metadata accessor for InternalError();
  int v11 = swift_dynamicCast();
  uint64_t v12 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  uint64_t v13 = v0[13];
  if (v11)
  {
    v12(v0[13], 0, 1, v10);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_10035B95C(v13, (uint64_t (*)(void))type metadata accessor for InternalError);
    if (EnumCaseMultiPayload == 13)
    {
      uint64_t v15 = (void *)swift_task_alloc();
      v0[15] = v15;
      void *v15 = v0;
      v15[1] = sub_10034AE80;
      return sub_1003539E4();
    }
  }
  else
  {
    v12(v0[13], 1, 1, v10);
    sub_10001729C(v13, &qword_10065BE00);
  }
  v0[4] = v0[6];
  swift_errorRetain();
  int v16 = swift_dynamicCast();
  uint64_t v17 = v0[12];
  if (v16)
  {
    v12(v0[12], 0, 1, v10);
    int v18 = swift_getEnumCaseMultiPayload();
    uint64_t v19 = (uint64_t *)v0[12];
    if (v18 == 11)
    {
      uint64_t v21 = *v19;
      uint64_t v20 = (void *)v19[1];
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v38 = v21;
        long long v39 = v20;
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        id v25 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v26 = *(void **)(v0[7] + 160);
        v0[5] = v26;
        id v27 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v25 = v26;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%@] Pausing install pending developer approval", v24, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v21 = v38;
        uint64_t v20 = v39;
      }
      else
      {
        swift_release_n();
      }

      uint64_t v29 = v0[7];
      (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
      uint64_t v30 = (uint64_t *)(v29 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_developerID);
      *uint64_t v30 = v21;
      v30[1] = (uint64_t)v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_10065B0F0 != -1) {
        swift_once();
      }
      uint64_t v31 = (uint64_t *)(qword_100660EB8 + 16);
      uint64_t v32 = (os_unfair_lock_s *)(qword_100660EB8 + 24);
      os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB8 + 24));
      sub_10035B2C8(v31);
      os_unfair_lock_unlock(v32);
      uint64_t v33 = v0[8];
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = v21;
      v34._object = v20;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      type metadata accessor for Transaction();
      swift_allocObject();
      uint64_t v35 = sub_1005160BC(0xD00000000000001BLL, 0x80000001005BE2F0);
      uint64_t v36 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v33, 1, 1, v36);
      uint64_t v37 = (void *)swift_allocObject();
      v37[2] = 0;
      v37[3] = 0;
      v37[4] = v35;
      swift_retain();
      sub_100341F6C(v33, (uint64_t)&unk_100661070, (uint64_t)v37);
      swift_release();
      swift_release();
      sub_10001729C(v33, &qword_10065B220);
      goto LABEL_4;
    }
    sub_10035B95C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InternalError);
  }
  else
  {
    v12(v0[12], 1, 1, v10);
    sub_10001729C(v17, &qword_10065BE00);
  }
  uint64_t v28 = (void *)swift_task_alloc();
  v0[16] = v28;
  void *v28 = v0;
  v28[1] = sub_10034B02C;
  return sub_100354EE0();
}

uint64_t sub_10034AE80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10034AF90, v1, 0);
}

uint64_t sub_10034AF90()
{
  sub_1003534EC(1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034B02C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_10034B13C, v1, 0);
}

uint64_t sub_10034B13C()
{
  v0[17] = *(void *)(*(void *)(v0[7] + 112)
                     + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_certificateStore);
  uint64_t v3 = (uint64_t (*)(void))((char *)&dword_100660740 + dword_100660740);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10034B224;
  return v3();
}

uint64_t sub_10034B224()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_10035BD20;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10034AF90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10034B380()
{
  v1[82] = v0;
  sub_1000172F8(&qword_10065B220);
  v1[83] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[84] = v2;
  v1[85] = *(void *)(v2 - 8);
  v1[86] = swift_task_alloc();
  v1[87] = swift_task_alloc();
  v1[88] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v1[89] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AppInstallRequestType();
  v1[90] = v3;
  v1[91] = *(void *)(v3 - 8);
  v1[92] = swift_task_alloc();
  v1[93] = swift_task_alloc();
  return _swift_task_switch(sub_10034B528, v0, 0);
}

uint64_t sub_10034B528()
{
  uint64_t v92 = v0;
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(*(void *)(v0 + 656) + 112);
  *(void *)(v0 + 752) = v2;
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1002BDDD0(v5, v1);
  os_unfair_lock_unlock(v6);
  uint64_t v7 = v0 + 656;
  uint64_t v8 = *(void *)(v0 + 744);
  uint64_t v9 = *(void *)(v0 + 728);
  uint64_t v10 = *(void *)(v0 + 720);
  LOBYTE(v6) = AppInstallRequestType.isUserInitiated.getter();
  int v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v11(v8, v10);
  if ((v6 & 1) == 0)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v79 = v21;
      os_log_t log = v20;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v85 = (void *)swift_slowAlloc();
      v91[0] = swift_slowAlloc();
      uint64_t v87 = (uint8_t *)v22;
      *(_DWORD *)uint64_t v22 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      os_log_type_t v23 = *(void **)(*(void *)v7 + 160);
      *(void *)(v0 + 632) = v23;
      id v24 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v85 = v23;
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v25 = *(void *)(v0 + 736);
      uint64_t v26 = *(void *)(v2 + v3);
      uint64_t v27 = v26 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v26 + 16);
      uint64_t v28 = (os_unfair_lock_s *)(v26 + ((*(unsigned int *)(*(void *)v26 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v28);
      sub_1002BDDD0(v27, v25);
      uint64_t v38 = *(void *)(v0 + 736);
      uint64_t v39 = *(void *)(v0 + 720);
      uint64_t v89 = *(void *)(v0 + 688);
      uint64_t v80 = *(void *)(v0 + 680);
      uint64_t v84 = *(void *)(v0 + 672);
      os_unfair_lock_unlock(v28);
      uint64_t v40 = AppInstallRequestType.rawValue.getter();
      unint64_t v42 = v41;
      v11(v38, v39);
      *(void *)(v0 + 624) = sub_1000143F4(v40, v42, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, log, v79, "[%@] Ineligible alert not required for install of type %{public}s.", v87, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v89, v84);
      goto LABEL_23;
    }
    uint64_t v29 = *(void *)(v0 + 688);
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(v2 + v3);
  uint64_t v13 = v12 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v12 + 16);
  uint64_t v14 = (os_unfair_lock_s *)(v12 + ((*(unsigned int *)(*(void *)v12 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  sub_1002BDC4C(v13, v0 + 456);
  os_unfair_lock_unlock(v14);
  sub_1000172F8(&qword_10065C450);
  if (!swift_dynamicCast())
  {
    uint64_t v32 = *(void *)(v2 + v3);
    uint64_t v33 = v32 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v32 + 16);
    Swift::String v34 = (os_unfair_lock_s *)(v32 + ((*(unsigned int *)(*(void *)v32 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v34);
    sub_1002BDC4C(v33, v0 + 496);
    os_unfair_lock_unlock(v34);
    if (swift_dynamicCast())
    {
      uint64_t v35 = *(void *)(v0 + 600);
      uint64_t v36 = *(void *)(v0 + 608);
      *(void *)(v0 + 784) = *(void *)(v2
                                        + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
      objc_allocWithZone((Class)LSApplicationRecord);
      swift_retain();
      swift_bridgeObjectRetain();
      id v37 = sub_1003DB240(v35, v36, 0);
      id v71 = v37;
      if (v37)
      {
        id v72 = [v37 localizedName];

        id v71 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v74 = v73;

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v74 = 0xE000000000000000;
      }
      *(void *)(v0 + 792) = v74;
      *(void *)(v0 + 16) = v71;
      *(void *)(v0 + 24) = v74;
      *(_OWORD *)(v0 + 32) = 0u;
      *(_OWORD *)(v0 + 48) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
      *(unsigned char *)(v0 + 80) = 7;
      uint64_t v75 = (void *)swift_task_alloc();
      *(void *)(v0 + 800) = v75;
      *uint64_t v75 = v0;
      v75[1] = sub_10034C5E4;
      uint64_t v47 = v0 + 16;
      goto LABEL_38;
    }
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v55))
    {
      os_log_type_t v81 = v55;
      os_log_t loga = v20;
      unint64_t v86 = (void *)(v0 + 416);
      uint64_t v56 = swift_slowAlloc();
      uint64_t v88 = (void *)swift_slowAlloc();
      v91[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v57 = *(void **)(*(void *)(v0 + 656) + 160);
      *(void *)(v0 + 616) = v57;
      id v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v88 = v57;
      swift_release_n();
      *(_WORD *)(v56 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v59 = *(void *)(v2 + v3);
      uint64_t v60 = v59 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v59 + 16);
      uint64_t v61 = (os_unfair_lock_s *)(v59 + ((*(unsigned int *)(*(void *)v59 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v61);
      sub_1002BDC4C(v60, (uint64_t)v86);
      os_unfair_lock_unlock(v61);
      uint64_t v62 = *(void *)(v0 + 440);
      uint64_t v63 = *(void *)(v0 + 448);
      sub_10018AC60(v86, v62);
      uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 56))(v62, v63);
      if (v65)
      {
        uint64_t v66 = v64;
        unint64_t v67 = v65;
      }
      else
      {
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        os_unfair_lock_lock(v61);
        sub_1002BDC4C(v60, v0 + 376);
        os_unfair_lock_unlock(v61);
        uint64_t v76 = *(void *)(v0 + 400);
        uint64_t v77 = *(void *)(v0 + 408);
        sub_10018AC60((void *)(v0 + 376), v76);
        uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 40))(v76, v77);
        unint64_t v67 = v78;
        sub_100014524(v0 + 376);
      }
      uint64_t v68 = *(void *)(v0 + 696);
      uint64_t v69 = *(void *)(v0 + 680);
      uint64_t v70 = *(void *)(v0 + 672);
      sub_100014524((uint64_t)v86);
      *(void *)(v0 + 640) = sub_1000143F4(v66, v67, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, loga, v81, "[%@] Ineligible alert not shown for distributor %{public}s", (uint8_t *)v56, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
      goto LABEL_23;
    }
    uint64_t v29 = *(void *)(v0 + 696);
LABEL_12:
    uint64_t v30 = *(void *)(v0 + 680);
    uint64_t v31 = *(void *)(v0 + 672);
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
LABEL_23:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  uint64_t v15 = *(void *)(v0 + 712);
  swift_bridgeObjectRelease();
  sub_100017238(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, v15, &qword_10065C3C0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  uint64_t v19 = *(void *)(v0 + 712);
  if (v18 == 1)
  {
    sub_10001729C(*(void *)(v0 + 712), &qword_10065C3C0);
LABEL_17:
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      id v50 = (uint8_t *)swift_slowAlloc();
      char v90 = (void *)swift_slowAlloc();
      *(_DWORD *)id v50 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v51 = *(void **)(*(void *)v7 + 160);
      *(void *)(v0 + 648) = v51;
      id v52 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v90 = v51;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%@] Ineligible alert not shown as there is no domain and/or no referrer.", v50, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 680) + 8))(*(void *)(v0 + 704), *(void *)(v0 + 672));
    goto LABEL_23;
  }
  uint64_t v43 = sub_1004CF23C();
  uint64_t v45 = v44;
  *(void *)(v0 + 760) = v44;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
  if (!v45) {
    goto LABEL_17;
  }
  *(void *)(v0 + 768) = *(void *)(v2
                                    + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
  *(void *)(v0 + 88) = v43;
  *(void *)(v0 + 96) = v45;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(unsigned char *)(v0 + 152) = 7;
  swift_retain();
  char v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 776) = v46;
  void *v46 = v0;
  v46[1] = sub_10034C390;
  uint64_t v47 = v0 + 88;
LABEL_38:
  return sub_100560FFC(v47);
}

uint64_t sub_10034C390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[67] = v2;
  v4[68] = a1;
  v4[69] = a2;
  uint64_t v5 = v3[82];
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_task_switch(sub_10034C4EC, v5, 0);
}

uint64_t sub_10034C4EC()
{
  uint64_t v1 = *(void *)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 752);
  *(void *)(v0 + 808) = *(void *)(v0 + 552);
  *(void *)(v0 + 816) = v1;
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer;
  *(void *)(v0 + 824) = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer;
  *(void *)(v0 + 832) = *(void *)(v2 + v3);
  *(void *)(v0 + 160) = 41;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 26;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 840) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10034C838;
  return sub_100560FFC(v0 + 160);
}

uint64_t sub_10034C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[70] = v2;
  v4[71] = a1;
  v4[72] = a2;
  uint64_t v5 = v3[82];
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10034C740, v5, 0);
}

uint64_t sub_10034C740()
{
  uint64_t v1 = *(void *)(v0 + 568);
  uint64_t v2 = *(void *)(v0 + 752);
  *(void *)(v0 + 808) = *(void *)(v0 + 576);
  *(void *)(v0 + 816) = v1;
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer;
  *(void *)(v0 + 824) = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer;
  *(void *)(v0 + 832) = *(void *)(v2 + v3);
  *(void *)(v0 + 160) = 41;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 26;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 840) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10034C838;
  return sub_100560FFC(v0 + 160);
}

uint64_t sub_10034C838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 656);
  *(void *)(v3 + 848) = a1;
  *(void *)(v3 + 856) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10034C970, v4, 0);
}

uint64_t sub_10034C970()
{
  *(void *)(v0 + 864) = *(void *)(*(void *)(v0 + 752) + *(void *)(v0 + 824));
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(unsigned char *)(v0 + 296) = 26;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 872) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10034CA40;
  return sub_100560FFC(v0 + 232);
}

uint64_t sub_10034CA40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 656);
  *(void *)(v3 + 880) = a1;
  *(void *)(v3 + 888) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10034CB78, v4, 0);
}

uint64_t sub_10034CB78()
{
  *(void *)(v0 + 896) = *(void *)(*(void *)(v0 + 752) + *(void *)(v0 + 824));
  *(void *)(v0 + 304) = 2;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 344) = 0u;
  *(void *)(v0 + 360) = 0;
  *(unsigned char *)(v0 + 368) = 26;
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 904) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10034CC58;
  return sub_100560FFC(v0 + 304);
}

uint64_t sub_10034CC58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 656);
  *(void *)(v3 + 912) = a1;
  *(void *)(v3 + 920) = a2;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10034CD90, v4, 0);
}

uint64_t sub_10034CD90()
{
  uint64_t v1 = *(void *)(v0 + 920);
  uint64_t v2 = *(void *)(v0 + 912);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 880);
  long long v14 = *(_OWORD *)(v0 + 848);
  uint64_t v5 = *(void *)(v0 + 816);
  uint64_t v6 = *(void *)(v0 + 808);
  uint64_t v7 = *(void *)(v0 + 664);
  uint64_t v8 = *(void *)(v0 + 656);
  type metadata accessor for SystemAlert();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v14;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v6;
  *(void *)(v9 + 48) = v4;
  *(void *)(v9 + 56) = v3;
  *(void *)(v9 + 64) = v2;
  *(void *)(v9 + 72) = v1;
  *(_WORD *)(v9 + 80) = 0;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  int v11 = (void *)swift_allocObject();
  v11[2] = 0;
  _OWORD v11[3] = 0;
  void v11[4] = v9;
  v11[5] = v8;
  swift_retain();
  swift_retain();
  sub_100532E84(v7, (uint64_t)&unk_1006610E8, (uint64_t)v11);
  swift_release();
  swift_release();
  sub_10001729C(v7, &qword_10065B220);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10034CF5C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v64 = &v50[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v63 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v8 = &v50[-v7];
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v50[-v14];
  uint64_t v16 = *(void *)(v0 + 112);
  uint64_t result = sub_1002BDF9C();
  if (result)
  {
    uint64_t v56 = v16 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer;
    sub_100017238(v16 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, (uint64_t)v8, &qword_10065C3C0);
    uint64_t v57 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v58 = v10 + 48;
    int v18 = v57(v8, 1, v9);
    uint64_t v60 = v10;
    uint64_t v62 = v9;
    uint64_t v55 = v16;
    if (v18 == 1)
    {
      sub_10001729C((uint64_t)v8, &qword_10065C3C0);
      type metadata accessor for InternalError();
      sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      uint64_t v19 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_16;
    }
    uint64_t v59 = v1;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, v16 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url, v9);
    uint64_t v20 = *(void *)(v16 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t v21 = sub_10044BF78((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v22 = *(void *)(v20 + 16);
    uint64_t v61 = v2;
    if (v22 && (unint64_t v23 = sub_100016D20(0xD000000000000022, 0x80000001005BA7D0), (v24 & 1) != 0)) {
      sub_1000144C8(*(void *)(v20 + 56) + 32 * v23, (uint64_t)v66);
    }
    else {
      memset(v66, 0, 32);
    }
    sub_1000172F8((uint64_t *)&unk_10065C9C0);
    sub_1000172F8(&qword_10065E738);
    if ((swift_dynamicCast() & 1) != 0 && (unint64_t v25 = v67) != 0)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = v25;
    }
    else
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v2 = v61;
    BOOL v26 = sub_1004FB31C((uint64_t)v15, (uint64_t)v13, v21);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
    uint64_t v28 = v62;
    v27(v13, v62);
    if (!v26)
    {
      type metadata accessor for InternalError();
      sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      uint64_t v19 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v27(v15, v28);
      uint64_t v1 = v59;
LABEL_16:
      uint64_t v29 = v64;
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v30 = Logger.logObject.getter();
      int v31 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v30, (os_log_type_t)v31))
      {

        swift_release_n();
        (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v29, v1);
        return swift_willThrow();
      }
      os_log_t v54 = v30;
      uint64_t v61 = v2;
      uint64_t v59 = v1;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(void *)&v66[0] = v52;
      *(_DWORD *)uint64_t v32 = 138412802;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v65 = v19;
      Swift::String v34 = *(void **)(v55 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
      uint64_t v67 = (uint64_t)v34;
      id v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v53 = v33;
      *uint64_t v33 = v34;
      swift_release_n();
      *(_WORD *)(v32 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      int v51 = v31;
      uint64_t v36 = sub_1004D0588();
      if (v37)
      {
        unint64_t v38 = v37;
      }
      else
      {
        uint64_t v36 = 7104878;
        unint64_t v38 = 0xE300000000000000;
      }
      uint64_t v67 = sub_1000143F4(v36, v38, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v39 = v63;
      sub_100017238(v56, (uint64_t)v63, &qword_10065C3C0);
      uint64_t v40 = v62;
      int v41 = v57(v39, 1, v62);
      uint64_t v42 = v59;
      uint64_t v43 = v61;
      if (v41 == 1)
      {
        sub_10001729C((uint64_t)v39, &qword_10065C3C0);
      }
      else
      {
        uint64_t v44 = sub_1004D0588();
        unint64_t v46 = v45;
        (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v39, v40);
        if (v46)
        {
          uint64_t v47 = v44;
          os_log_type_t v48 = v51;
LABEL_32:
          uint64_t v67 = sub_1000143F4(v47, v46, (uint64_t *)v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_t v49 = v54;
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v64, v42);
          return swift_willThrow();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v46 = 0xE300000000000000;
      os_log_type_t v48 = v51;
      uint64_t v47 = 7104878;
      goto LABEL_32;
    }
    return ((uint64_t (*)(unsigned char *, uint64_t))v27)(v15, v28);
  }
  return result;
}

uint64_t sub_10034D800(uint64_t a1)
{
  v2[91] = v1;
  v2[90] = a1;
  sub_1000172F8(&qword_10065B220);
  v2[92] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AppInstallRequestType();
  v2[93] = v3;
  v2[94] = *(void *)(v3 - 8);
  v2[95] = swift_task_alloc();
  v2[96] = swift_task_alloc();
  sub_1000172F8(&qword_10065B810);
  v2[97] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MediaAPIMetadata();
  v2[98] = v4;
  v2[99] = *(void *)(v4 - 8);
  v2[100] = swift_task_alloc();
  v2[101] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[102] = v5;
  v2[103] = *(void *)(v5 - 8);
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  return _swift_task_switch(sub_10034DA0C, v1, 0);
}

uint64_t sub_10034DA0C()
{
  uint64_t v35 = v0;
  uint64_t v1 = *(_OWORD **)(v0 + 720);
  long long v2 = v1[5];
  long long v4 = v1[2];
  long long v3 = v1[3];
  *(_OWORD *)(v0 + 464) = v1[4];
  *(_OWORD *)(v0 + 480) = v2;
  *(_OWORD *)(v0 + 432) = v4;
  *(_OWORD *)(v0 + 448) = v3;
  uint64_t v5 = sub_1004AD570();
  *(void *)(v0 + 848) = v5;
  if (v6 & 1) != 0 || (uint64_t v7 = v5, v8 = sub_1004AD884(), *(void *)(v0 + 856) = v8, (v9))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  else
  {
    uint64_t v10 = v8;
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v27 = v12;
      uint64_t v13 = swift_slowAlloc();
      int v31 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v28 = *(void *)(v0 + 824);
      uint64_t v29 = *(void *)(v0 + 816);
      uint64_t v30 = *(void *)(v0 + 840);
      uint64_t v14 = *(void **)(*(void *)(v0 + 728) + 160);
      *(void *)(v0 + 688) = v14;
      id v15 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v14;
      swift_release_n();
      *(_WORD *)(v13 + 12) = 2082;
      *(void *)(v0 + 696) = v7;
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v34 = v16;
      v17._countAndFlagsBits = 58;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      *(void *)(v0 + 704) = v10;
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 712) = sub_1000143F4(v33, v34, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v27, "[%@] Install verification token contains version metadata (%{public}s, taking fast path", (uint8_t *)v13, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v19(v30, v29);
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 840);
      uint64_t v23 = *(void *)(v0 + 824);
      uint64_t v24 = *(void *)(v0 + 816);
      swift_release_n();

      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v19(v22, v24);
    }
    *(void *)(v0 + 864) = v19;
    uint64_t v25 = *(void *)(*(void *)(v0 + 728) + 112);
    *(void *)(v0 + 872) = v25;
    BOOL v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 880) = v26;
    *BOOL v26 = v0;
    v26[1] = sub_10034DE5C;
    return sub_1001938C8(v0 + 576, v25, v7, v10);
  }
}

uint64_t sub_10034DE5C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 888) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 728);
  if (v1)
  {
    char v6 = sub_10034F75C;
  }
  else
  {
    *(unsigned char *)(v4 + 538) = a1;
    char v6 = sub_10034DF98;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_10034DF98()
{
  uint64_t v38 = v0;
  if (*(unsigned char *)(v0 + 538))
  {
    uint64_t v1 = *(void *)(v0 + 432);
    uint64_t v2 = *(void *)(v0 + 440);
    char v3 = *(unsigned char *)(*(void *)(v0 + 728)
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_hasConditionalDeveloperApproval);
    *(void *)(v0 + 496) = *(void *)(v0 + 872);
    *(void *)(v0 + 504) = v1;
    *(void *)(v0 + 512) = v2;
    *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 848);
    *(unsigned char *)(v0 + 536) = 0;
    *(unsigned char *)(v0 + 537) = v3;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10034E4C8;
    uint64_t v5 = *(void *)(v0 + 808);
    sub_1002E38E4(v5);
    return;
  }
  static Logger.install.getter();
  swift_retain_n();
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v35 = v7;
    uint64_t v8 = swift_slowAlloc();
    char v9 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v10 = *(void **)(*(void *)(v0 + 872)
                   + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
    *(void *)(v0 + 672) = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v9 = v10;
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2082;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v12 = *(void *)(v0 + 888);
    uint64_t v13 = *(void *)(v0 + 760);
    uint64_t v14 = *(void *)(*(void *)(v0 + 872)
                    + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
    uint64_t v15 = v14 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v14 + 16);
    unint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v16);
    sub_1002BDDD0(v15, v13);
    if (v12)
    {
      swift_release();
      os_unfair_lock_unlock(v16);
      return;
    }
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
    uint64_t v33 = *(void *)(v0 + 816);
    uint64_t v34 = *(void *)(v0 + 832);
    uint64_t v20 = *(void *)(v0 + 760);
    uint64_t v21 = *(void *)(v0 + 752);
    uint64_t v22 = *(void *)(v0 + 744);
    os_unfair_lock_unlock(v16);
    uint64_t v23 = AppInstallRequestType.rawValue.getter();
    unint64_t v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    *(void *)(v0 + 680) = sub_1000143F4(v23, v25, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v32(v34, v33);
  }
  else
  {
    Swift::String v17 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
    uint64_t v18 = *(void *)(v0 + 832);
    uint64_t v19 = *(void *)(v0 + 816);
    swift_release_n();

    v17(v18, v19);
  }
  uint64_t v26 = *(void *)(v0 + 432);
  uint64_t v27 = *(void *)(v0 + 440);
  uint64_t v36 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006624E8
                                                                                  + dword_1006624E8);
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 944) = v28;
  void *v28 = v0;
  v28[1] = sub_10034F278;
  uint64_t v29 = *(void *)(v0 + 872);
  uint64_t v30 = *(void *)(v0 + 856);
  uint64_t v31 = *(void *)(v0 + 848);
  v36(v0 + 576, v26, v27, v29, v31, v30);
}

uint64_t sub_10034E4C8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 904) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 728);
  if (v0) {
    uint64_t v4 = sub_10034F82C;
  }
  else {
    uint64_t v4 = sub_10034E5F4;
  }
  return _swift_task_switch(v4, v3, 0);
}

void sub_10034E5F4()
{
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = *(void *)(v0 + 784);
  uint64_t v5 = *(void *)(v0 + 776);
  sub_10035B4E4(*(void *)(v0 + 808), v5, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v4);
  uint64_t v6 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  *(void *)(swift_task_alloc() + 16) = v5;
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16);
  char v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_10035B720(v8);
  os_unfair_lock_unlock(v9);
  if (!v1)
  {
    uint64_t v43 = v2;
    int v10 = *(unsigned __int8 *)(v0 + 538);
    uint64_t v50 = v0 + 16;
    uint64_t v52 = *(void *)(v0 + 872);
    uint64_t v47 = v0 + 540;
    os_log_t v49 = *(objc_super **)(v0 + 808);
    uint64_t v11 = *(void *)(v0 + 784);
    uint64_t v12 = *(void *)(v0 + 776);
    uint64_t v13 = *(void *)(v0 + 768);
    uint64_t v14 = *(void *)(v0 + 752);
    uint64_t v15 = *(void *)(v0 + 744);
    uint64_t v45 = *(void *)(v0 + 728);
    swift_task_dealloc();
    sub_10001729C(v12, &qword_10065B810);
    unint64_t v16 = (unsigned int *)&enum case for AppInstallRequestType.install(_:);
    if (v10 != 1) {
      unint64_t v16 = (unsigned int *)&enum case for AppInstallRequestType.update(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v13, *v16, v15);
    sub_10001733C(v45 + 120, v47, &qword_10065C310);
    uint64_t v46 = v11;
    int v17 = *((unsigned __int8 *)&v49->receiver + *(int *)(v11 + 32));
    sub_10035B73C((_OWORD *)(v0 + 224));
    sub_10001733C(v0 + 224, v50, &qword_10065B798);
    char v18 = sub_10019A6B8(v13, v52, v47, v17, v50);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    if (v18)
    {
      uint64_t v19 = *(void *)(v43 + v6);
      uint64_t v20 = v19 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v19 + 16);
      uint64_t v21 = (os_unfair_lock_s *)(v19 + ((*(unsigned int *)(*(void *)v19 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v21);
      sub_1002BDC4C(v20, v0 + 616);
      uint64_t v26 = *(void *)(v0 + 872);
      uint64_t v48 = *(void *)(v0 + 856);
      uint64_t v44 = *(void *)(v0 + 848);
      uint64_t v27 = *(void *)(v0 + 808);
      uint64_t v28 = *(void *)(v0 + 800);
      uint64_t v51 = *(void *)(v0 + 728);
      os_unfair_lock_unlock(v21);
      sub_10035B4E4(v27, v28, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      uint64_t v29 = *(void **)(v26 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_logKey);
      uint64_t v30 = v26 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag;
      uint64_t v31 = *(void *)(v26 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
      uint64_t v32 = *(void *)(v26
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_approvedDeveloperStore);
      unint64_t v33 = *(void *)(v26
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData
                      + 8);
      uint64_t v41 = *(void *)(v26
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_authenticationContextData);
      uint64_t v42 = (objc_class *)type metadata accessor for InstallConfirmationTask();
      long long v53 = *(_OWORD *)(v30 + 8);
      uint64_t v34 = objc_allocWithZone(v42);
      sub_10019B17C(v0 + 616, (uint64_t)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_distributor]);
      os_log_type_t v35 = (uint64_t *)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_authenticationContextData];
      *os_log_type_t v35 = v41;
      v35[1] = v33;
      *(void *)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_approvedDeveloperStore] = v32;
      uint64_t v36 = &v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_bag];
      *(void *)uint64_t v36 = v31;
      *(_OWORD *)(v36 + 8) = v53;
      sub_10035B4E4(v28, (uint64_t)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_metadata], (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      *(void *)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_logKey] = v29;
      *(void *)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_itemID] = v44;
      *(void *)&v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_versionID] = v48;
      v34[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_isMarketplace] = *(unsigned char *)(v28 + *(int *)(v46 + 32));
      id v37 = v29;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      sub_10018B2A8(v41, v33);
      *(void *)(v0 + 656) = v34;
      *(void *)(v0 + 664) = v42;
      id v38 = objc_msgSendSuper2((objc_super *)(v0 + 656), "init");
      sub_10035B95C(v28, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      sub_100014524(v0 + 616);
      uint64_t v39 = *(void **)(v51 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask);
      *(void *)(v51 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask) = v38;

      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 912) = v40;
      *uint64_t v40 = v0;
      v40[1] = sub_10034EBD8;
      sub_1003580F4();
    }
    else
    {
      uint64_t v22 = *(uint64_t **)(v0 + 808);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      *(void *)(v0 + 928) = v23;
      swift_bridgeObjectRetain();
      unint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 936) = v25;
      *unint64_t v25 = v0;
      v25[1] = sub_10034EF64;
      sub_1003569BC(v24, v23);
    }
  }
}

uint64_t sub_10034EBD8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 920) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 728);
  if (v0) {
    uint64_t v4 = sub_10034EE18;
  }
  else {
    uint64_t v4 = sub_10034ED04;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10034ED04()
{
  sub_10035B95C(*(void *)(v0 + 808), (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + 576, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034EE18()
{
  sub_10035B95C(*(void *)(v0 + 808), (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  uint64_t v1 = *(void *)(v0 + 728);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) == 1) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = (*(unsigned char *)(v0 + 536) & 1) == 0;
  }
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + 576, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10034EF64()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 728);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10034F090, v1, 0);
}

uint64_t sub_10034F090()
{
  uint64_t v1 = *(void *)(v0 + 808);
  uint64_t v2 = type metadata accessor for MarketplaceKitError();
  sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104))(v3, enum case for MarketplaceKitError.featureUnavailable(_:), v2);
  swift_willThrow();
  sub_10035B95C(v1, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  uint64_t v4 = *(void *)(v0 + 728);
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) == 1) {
    *(unsigned char *)(v4 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = (*(unsigned char *)(v0 + 536) & 1) == 0;
  }
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + 576, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10034F278(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(*v2 + 952) = a1;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v3 + 728);
  if (v1)
  {
    swift_errorRelease();
    uint64_t v5 = sub_10034F5D8;
  }
  else
  {
    uint64_t v5 = sub_10034F3B8;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_10034F3B8()
{
  uint64_t v1 = v0[119];
  if (v1)
  {
    uint64_t v2 = v0[92];
    *(unsigned char *)(v0[91] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
    uint64_t v3 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = 0;
    v4[3] = 0;
    v4[4] = v1;
    sub_1003E0498(v2, (uint64_t)&unk_1006610C8, (uint64_t)v4);
    swift_release();
  }
  uint64_t v5 = type metadata accessor for MarketplaceKitError();
  sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for MarketplaceKitError.mismatchedInstallType(_:), v5);
  swift_willThrow();
  sub_10001729C((uint64_t)(v0 + 72), &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10034F5D8()
{
  uint64_t v1 = type metadata accessor for MarketplaceKitError();
  sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104))(v2, enum case for MarketplaceKitError.mismatchedInstallType(_:), v1);
  swift_willThrow();
  sub_10001729C(v0 + 576, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10034F75C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10034F82C()
{
  uint64_t v1 = *(void *)(v0 + 728);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) == 1) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = (*(unsigned char *)(v0 + 536) & 1) == 0;
  }
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001729C(v0 + 576, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10034F95C()
{
  v1[24] = v0;
  type metadata accessor for OAuthClient();
  v1[25] = swift_task_alloc();
  sub_1000172F8(&qword_10065F858);
  v1[26] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OAuthCredential();
  v1[27] = v2;
  v1[28] = *(void *)(v2 - 8);
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[31] = v3;
  v1[32] = *(void *)(v3 - 8);
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[37] = v4;
  v1[38] = *(void *)(v4 - 8);
  v1[39] = swift_task_alloc();
  return _swift_task_switch(sub_10034FB68, v0, 0);
}

uint64_t sub_10034FB68()
{
  uint64_t v84 = v0;
  uint64_t v1 = *(void *)(v0[24] + 112);
  uint64_t v2 = v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_oAuthToken;
  v0[40] = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_oAuthToken);
  uint64_t v3 = *(void *)(v2 + 8);
  v0[41] = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
    uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
    uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v6);
    sub_1002BDC4C(v5, (uint64_t)(v0 + 13));
    os_unfair_lock_unlock(v6);
    sub_1000172F8(&qword_10065C450);
    if (swift_dynamicCast())
    {
      uint64_t v7 = v0[28];
      uint64_t v80 = v0[27];
      uint64_t v8 = v0[26];
      uint64_t v9 = v0[24];
      uint64_t v10 = v0[18];
      uint64_t v11 = v0[19];
      v0[42] = v10;
      v0[43] = v11;
      uint64_t v12 = v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID;
      uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_accountID);
      v0[44] = v13;
      unint64_t v14 = *(void *)(v12 + 8);
      v0[45] = v14;
      swift_bridgeObjectRetain();
      static Logger.oauth.getter();
      uint64_t v82 = v9;
      uint64_t v15 = *(id *)(v9 + 160);
      unint64_t v78 = v11;
      uint64_t v79 = v10;
      sub_1003C2ABC(v13, v14, v10, v11, v15, v8);

      int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v80);
      uint64_t v17 = v0[36];
      uint64_t v18 = v0[31];
      uint64_t v19 = v0[32];
      if (v16 == 1)
      {
        uint64_t v20 = v0[34];
        sub_10001729C(v0[26], &qword_10065F858);
        UUID.init()();
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
        unint64_t v81 = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v21(v20, v17, v18);
        swift_retain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          os_log_type_t v74 = v23;
          os_log_t log = v22;
          uint64_t v77 = v21;
          uint64_t v24 = swift_slowAlloc();
          id v72 = (void *)swift_slowAlloc();
          v83[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 138412546;
          if ((swift_task_isCurrentExecutor() & 1) == 0) {
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v25 = v0[32];
          uint64_t v68 = v0[31];
          uint64_t v69 = v0[34];
          uint64_t v26 = *(void **)(v82 + 160);
          v0[20] = v26;
          id v27 = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v72 = v26;
          swift_release_n();
          *(_WORD *)(v24 + 12) = 2082;
          sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
          v0[21] = sub_1000143F4(v28, v29, v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v30 = v82;
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
          v31(v69, v68);
          _os_log_impl((void *)&_mh_execute_header, log, v74, "[%@] Generating new client identifier: %{public}s", (uint8_t *)v24, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_16:
          uint64_t v48 = (uint64_t)v78;
          uint64_t v47 = v79;
          uint64_t v21 = v77;
LABEL_20:
          v0[46] = v31;
          v0[47] = v21;
          uint64_t v56 = v0[36];
          uint64_t v57 = v0[33];
          uint64_t v58 = v0[31];
          v0[48] = v81;
          v21(v57, v56, v58);
          uint64_t v59 = *(void **)(v30 + 160);
          uint64_t v60 = self;
          swift_bridgeObjectRetain();
          id v61 = v59;
          id v62 = [v60 ephemeralSessionConfiguration];
          [v62 setHTTPShouldSetCookies:0];
          [v62 setHTTPCookieAcceptPolicy:1];
          [v62 setRequestCachePolicy:1];
          sub_100373694(1);
          id v63 = [self sessionWithConfiguration:v62];

          type metadata accessor for PlainHTTP();
          uint64_t v64 = swift_allocObject();
          *(unsigned char *)(v64 + 24) = 0;
          *(void *)(v64 + 16) = v63;
          uint64_t v65 = (void *)swift_task_alloc();
          v0[49] = v65;
          void *v65 = v0;
          v65[1] = sub_10035055C;
          uint64_t v66 = v0[33];
          uint64_t v67 = v0[25];
          return sub_10051F150(v67, v66, v47, v48, v64, (uint64_t)v61);
        }
        uint64_t v49 = v0[34];
        uint64_t v50 = v0[31];
        uint64_t v51 = v0[32];

        swift_release_n();
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
        v31(v49, v50);
      }
      else
      {
        uint64_t v34 = v0[35];
        uint64_t v35 = v0[30];
        sub_10035B9BC(v0[26], v35, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
        unint64_t v81 = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v36 = v35;
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
        v21(v17, v36, v18);
        v21(v34, v17, v18);
        swift_retain_n();
        id v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_type_t v75 = v38;
          uint64_t v77 = v21;
          uint64_t v39 = swift_slowAlloc();
          unint64_t v73 = (void *)swift_slowAlloc();
          v83[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 138412546;
          if ((swift_task_isCurrentExecutor() & 1) == 0) {
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v40 = v0[35];
          uint64_t v41 = v0[32];
          uint64_t v70 = v0[31];
          uint64_t v71 = v0[30];
          uint64_t v42 = *(void **)(v82 + 160);
          v0[22] = v42;
          id v43 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v73 = v42;
          swift_release_n();
          *(_WORD *)(v39 + 12) = 2082;
          sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
          v0[23] = sub_1000143F4(v44, v45, v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
          uint64_t v46 = v40;
          uint64_t v30 = v82;
          v31(v46, v70);
          _os_log_impl((void *)&_mh_execute_header, v37, v75, "[%@] Using existing client identifier: %{public}s", (uint8_t *)v39, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_10035B95C(v71, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
          goto LABEL_16;
        }
        uint64_t v52 = v0[35];
        uint64_t v53 = v0[31];
        uint64_t v54 = v0[32];
        uint64_t v55 = v0[30];
        swift_release_n();
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v31(v52, v53);

        sub_10035B95C(v55, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
      }
      uint64_t v48 = (uint64_t)v78;
      uint64_t v47 = v79;
      uint64_t v30 = v82;
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_10035055C()
{
  uint64_t v2 = (void *)*v1;
  v2[50] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[24];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100350A38, v3, 0);
  }
  else
  {
    uint64_t v4 = v2[41];
    uint64_t v5 = (void *)swift_task_alloc();
    v2[51] = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_1003506F8;
    uint64_t v6 = v2[40];
    return sub_100520608((uint64_t)(v2 + 2), v6, v4);
  }
}

uint64_t sub_1003506F8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 416) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 192);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100350B6C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 192);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10035084C;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_10035084C()
{
  unint64_t v1 = *(void *)(v0 + 360);
  unint64_t v2 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 312);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v7 = *(void **)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v19 = *(void *)(v0 + 200);
  (*(void (**)(void *, uint64_t, uint64_t))(v0 + 376))(v7, v5, v6);
  uint64_t v10 = (char *)v7 + *(int *)(v8 + 20);
  long long v11 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v0 + 16);
  *((_OWORD *)v10 + 1) = v11;
  long long v12 = *(_OWORD *)(v0 + 48);
  long long v13 = *(_OWORD *)(v0 + 64);
  long long v14 = *(_OWORD *)(v0 + 80);
  *((void *)v10 + 10) = *(void *)(v0 + 96);
  *((_OWORD *)v10 + 3) = v13;
  *((_OWORD *)v10 + 4) = v14;
  *((_OWORD *)v10 + 2) = v12;
  id v15 = *(id *)(v9 + 160);
  sub_1003C4AD4(v7, v18, v1, v3, v2, v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10035B95C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
  sub_10035B95C(v19, (uint64_t (*)(void))type metadata accessor for OAuthClient);
  v22(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v21, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100350A38()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 288), *(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100350B6C()
{
  sub_10035B95C(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for OAuthClient);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 288), *(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100350CA8(void *a1)
{
  if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_100350D24(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 120) = a5;
  *(void *)(v6 + 128) = v5;
  *(void *)(v6 + 104) = a3;
  *(void *)(v6 + 112) = a4;
  *(void *)(v6 + 96) = a2;
  *(unsigned char *)(v6 + 280) = a1;
  type metadata accessor for MediaAPIMetadata();
  *(void *)(v6 + 136) = swift_task_alloc();
  sub_1000172F8(&qword_100661018);
  *(void *)(v6 + 144) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ADPPreflightResultingMetadata(0);
  *(void *)(v6 + 152) = v7;
  *(void *)(v6 + 160) = *(void *)(v7 - 8);
  *(void *)(v6 + 168) = swift_task_alloc();
  sub_1000172F8(&qword_100661010);
  *(void *)(v6 + 176) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ADP();
  *(void *)(v6 + 184) = v8;
  *(void *)(v6 + 192) = *(void *)(v8 - 8);
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 216) = v9;
  *(void *)(v6 + 224) = *(void *)(v9 - 8);
  *(void *)(v6 + 232) = swift_task_alloc();
  *(void *)(v6 + 240) = swift_task_alloc();
  return _swift_task_switch(sub_100350F54, v5, 0);
}

uint64_t sub_100350F54()
{
  uint64_t v70 = v0;
  if (*(unsigned char *)(v0 + 280) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 104);
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 96);
      uint64_t v3 = *(void *)(*(void *)(v0 + 128) + 112);
      uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
      uint64_t v5 = swift_task_alloc();
      *(void *)(v5 + 16) = v2;
      *(void *)(v5 + 24) = v1;
      uint64_t v6 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
      uint64_t v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
      swift_bridgeObjectRetain();
      os_unfair_lock_lock(v7);
      sub_10035BB68(v6);
      os_unfair_lock_unlock(v7);
      uint64_t v67 = v3;
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v68 = (void *)swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 138412546;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v32 = *(void **)(*(void *)(v0 + 128) + 160);
        *(void *)(v0 + 80) = v32;
        id v33 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v68 = v32;
        swift_release_n();
        *(_WORD *)(v31 + 12) = 2082;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v34 = *(void *)(v0 + 224);
        uint64_t v63 = *(void *)(v0 + 216);
        uint64_t v64 = *(void *)(v0 + 240);
        type metadata accessor for UUID();
        sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 88) = sub_1000143F4(v35, v36, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Asked to continue install with identifier: %{public}s", (uint8_t *)v31, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v64, v63);
      }
      else
      {
        uint64_t v37 = *(void *)(v0 + 240);
        uint64_t v39 = *(void *)(v0 + 216);
        uint64_t v38 = *(void *)(v0 + 224);
        swift_release_n();

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      uint64_t v41 = *(void *)(v0 + 184);
      uint64_t v40 = *(void *)(v0 + 192);
      uint64_t v42 = *(void *)(v0 + 176);
      uint64_t v43 = *(void *)(v0 + 128) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
      swift_beginAccess();
      sub_100017238(v43, v42, &qword_100661010);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v41) == 1)
      {
        sub_10001729C(*(void *)(v0 + 176), &qword_100661010);
      }
      else
      {
        uint64_t v45 = *(void *)(v0 + 152);
        uint64_t v44 = *(void *)(v0 + 160);
        uint64_t v46 = *(void *)(v0 + 144);
        uint64_t v47 = *(void *)(v0 + 128);
        sub_10035B9BC(*(void *)(v0 + 176), *(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for ADP);
        uint64_t v48 = v47 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_preflightMetadata;
        swift_beginAccess();
        sub_100017238(v48, v46, &qword_100661018);
        int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v46, 1, v45);
        uint64_t v50 = *(void *)(v0 + 208);
        if (v49 == 1)
        {
          uint64_t v51 = *(void *)(v0 + 144);
          sub_10035B95C(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for ADP);
          sub_10001729C(v51, &qword_100661018);
        }
        else
        {
          uint64_t v52 = *(void *)(v0 + 200);
          uint64_t v53 = *(void *)(v0 + 168);
          uint64_t v54 = *(void *)(v0 + 136);
          unint64_t v56 = *(void *)(v0 + 120);
          uint64_t v55 = *(void *)(v0 + 128);
          uint64_t v57 = *(void *)(v0 + 112);
          sub_10035B9BC(*(void *)(v0 + 144), v53, type metadata accessor for ADPPreflightResultingMetadata);
          sub_10035B4E4(v50, v52, (uint64_t (*)(void))type metadata accessor for ADP);
          sub_10035B4E4(v53, v54, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
          uint64_t v58 = *(void **)(v55 + 160);
          objc_allocWithZone((Class)type metadata accessor for InstallConfirmationTask());
          swift_retain();
          sub_10018B2A8(v57, v56);
          id v59 = v58;
          id v60 = sub_1004B1934(v52, v67, v54, v57, v56, v59);

          sub_10018AE44(v57, v56);
          swift_release();
          sub_10035B95C(v53, type metadata accessor for ADPPreflightResultingMetadata);
          sub_10035B95C(v50, (uint64_t (*)(void))type metadata accessor for ADP);
          id v61 = *(void **)(v55 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask);
          *(void *)(v55 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask) = v60;
        }
      }
      id v62 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v62;
      void *v62 = v0;
      v62[1] = sub_100351B04;
      return sub_1003580F4();
    }
    else
    {
      uint64_t v25 = type metadata accessor for MarketplaceKitError();
      sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v26, enum case for MarketplaceKitError.missingInstallVerificationToken(_:), v25);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v27 = *(uint64_t (**)(void))(v0 + 8);
      return v27();
    }
  }
  else
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      long long v12 = *(void **)(*(void *)(v0 + 128) + 160);
      *(void *)(v0 + 64) = v12;
      id v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v12;
      swift_release_n();
      *(_WORD *)(v10 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v14 = *(void *)(v0 + 224);
      uint64_t v65 = *(void *)(v0 + 216);
      uint64_t v66 = *(void *)(v0 + 232);
      type metadata accessor for UUID();
      sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 72) = sub_1000143F4(v15, v16, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Asked to cancel install with identifier: %{public}s", (uint8_t *)v10, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v66, v65);
    }
    else
    {
      uint64_t v18 = *(void *)(v0 + 224);
      uint64_t v17 = *(void *)(v0 + 232);
      uint64_t v19 = *(void *)(v0 + 216);
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    }
    uint64_t v20 = type metadata accessor for MarketplaceKitError();
    sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
    uint64_t v21 = swift_allocError();
    *(void *)(v0 + 264) = v21;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, enum case for MarketplaceKitError.cancelled(_:), v20);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100351EC8;
    return sub_100347F04(v21);
  }
}

uint64_t sub_100351B04()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 256) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100351CD4;
    return sub_100348D6C();
  }
}

uint64_t sub_100351CD4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100351EC8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003520D4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  v7[2] = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100341D68((uint64_t (*)(uint64_t *))sub_10035BB84, (uint64_t)v7, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v5;
  return result;
}

uint64_t sub_10035214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100661010);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 112)
                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16);
  os_log_type_t v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_1002BDC98(v8, v14);
  os_unfair_lock_unlock(v9);
  if (v14[0] == 1)
  {
    sub_100017238(a2, (uint64_t)v6, &qword_100661010);
    uint64_t v10 = type metadata accessor for ADP();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v6, 1, v10) != 1)
    {
      uint64_t v11 = *(void *)&v6[*(int *)(v10 + 24) + 24];
      swift_bridgeObjectRetain();
      sub_10035B95C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ADP);
      return v11;
    }
    sub_10001729C((uint64_t)v6, &qword_100661010);
    return 0;
  }
  os_unfair_lock_lock(v9);
  sub_1002BDC4C(v8, (uint64_t)v14);
  os_unfair_lock_unlock(v9);
  sub_1000172F8(&qword_10065C450);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  return v13;
}

uint64_t sub_100352364(void *a1, uint64_t a2)
{
  v6[2] = a2;
  uint64_t result = sub_100470E34((uint64_t (*)(uint64_t *))sub_10035BCE0, (uint64_t)v6);
  uint64_t v4 = result;
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 >= v4) {
      return sub_10055418C(v4, v5);
    }
  }
  else
  {
    uint64_t v5 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5 >= result) {
      return sub_10055418C(v4, v5);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100352424@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100352444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v6[8] = v8;
  v6[9] = *(void *)(v8 - 8);
  v6[10] = swift_task_alloc();
  return _swift_task_switch(sub_10035250C, a4, 0);
}

uint64_t sub_10035250C()
{
  uint64_t v1 = (void *)(v0[5] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_developerID);
  v0[11] = *v1;
  v0[12] = v1[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100352594, 0, 0);
}

uint64_t sub_100352594()
{
  uint64_t v1 = v0[12];
  if (!v1)
  {
LABEL_7:
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  if (v0[11] == v0[6] && v1 == v0[7])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v6 = v0[5];
  return _swift_task_switch(sub_100352670, v6, 0);
}

uint64_t sub_100352670()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 40) + 160);
  *(void *)(v0 + 104) = v1;
  id v2 = v1;
  return _swift_task_switch(sub_1003526E4, 0, 0);
}

uint64_t sub_1003526E4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100516980(*(id *)(v0 + 104));
  return _swift_task_switch(sub_100352754, v1, 0);
}

uint64_t sub_100352754()
{
  *(unsigned char *)(*(void *)(v0 + 40)
           + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_hasConditionalDeveloperApproval) = 1;
  return _swift_task_switch(sub_100352784, 0, 0);
}

uint64_t sub_100352784()
{
  uint64_t v21 = v0;
  if (qword_10065B0F0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(qword_100660EB8 + 16);
  id v2 = (os_unfair_lock_s *)(qword_100660EB8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB8 + 24));
  sub_10035BD04(v1, v20);
  os_unfair_lock_unlock(v2);
  if (v20[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v20[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(qword_100660EB8 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(qword_100660EB8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB8 + 24));
  sub_1003580BC(v4);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = (void *)(qword_100660EB8 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(qword_100660EB8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB8 + 24));
  sub_10035BD04(v6, v20);
  os_unfair_lock_unlock(v7);
  if (v20[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v20[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v8 = (void *)v0[13];
  swift_bridgeObjectRelease();
  static Logger.install.getter();
  id v9 = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = (void *)v0[13];
  if (v12)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412802;
    v0[2] = v13;
    id v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v13;

    *(_WORD *)(v14 + 12) = 2050;
    v0[3] = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2050;
    v0[4] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] Started with %{public}ld pending install tasks, ended with %{public}ld", (uint8_t *)v14, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v17 = v0[5];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  return _swift_task_switch(sub_100352B10, v17, 0);
}

uint64_t sub_100352B10()
{
  *(unsigned char *)(*(void *)(v0 + 40)
           + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldCacheInstallAsPending) = 0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100352BB0;
  return sub_10034213C();
}

uint64_t sub_100352BB0()
{
  id v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[17] = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    v2[18] = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_100353100;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[15] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100352D60;
    return sub_1003580F4();
  }
}

uint64_t sub_100352D60()
{
  id v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[17] = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    v2[18] = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_100353100;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[16] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100352F10;
    return sub_100348D6C();
  }
}

uint64_t sub_100352F10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 136) = v0;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 144) = v4;
    *uint64_t v4 = v3;
    v4[1] = sub_100353100;
    return sub_10034A584(v0);
  }
  else
  {
    return _swift_task_switch(sub_100353094, 0, 0);
  }
}

uint64_t sub_100353094()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100353100()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100353210, v1, 0);
}

uint64_t sub_100353210()
{
  swift_willThrow();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003532B8;
  uint64_t v2 = *(void *)(v0 + 136);
  return sub_10034A584(v2);
}

uint64_t sub_1003532B8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003533B4, 0, 0);
}

uint64_t sub_1003533B4()
{
  uint64_t v1 = *(void **)(v0 + 104);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100353434(uint64_t *a1, uint64_t a2)
{
  swift_retain();
  int64_t v4 = sub_10035AF54(a1, a2);
  uint64_t result = swift_release();
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6 >= v4) {
      return sub_10055418C(v4, v6);
    }
  }
  else
  {
    uint64_t v6 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6 >= v4) {
      return sub_10055418C(v4, v6);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003534EC(int a1)
{
  uint64_t v2 = v1;
  int v42 = a1;
  uint64_t v3 = sub_1000172F8(&qword_10065B810);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MediaAPIMetadata();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100661010);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ADP();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 112);
  uint64_t v15 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v16 = *(void *)(v14 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v17 = v16 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v16 + 16);
  uint64_t v18 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(void *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v18);
  sub_1002BDC4C(v17, (uint64_t)v46);
  os_unfair_lock_unlock(v18);
  uint64_t v19 = v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
  swift_beginAccess();
  sub_100017238(v19, (uint64_t)v9, &qword_100661010);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t v20 = (uint64_t)v38;
    sub_10001729C((uint64_t)v9, &qword_100661010);
    uint64_t v21 = *(void *)(v14 + v15);
    uint64_t v22 = v21 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v21 + 16);
    uint64_t v23 = (os_unfair_lock_s *)(v21 + ((*(unsigned int *)(*(void *)v21 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v23);
    uint64_t v24 = v41;
    sub_1002BDD30(v22, v41);
    os_unfair_lock_unlock(v23);
    uint64_t v25 = v40;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v24, 1, v40) == 1)
    {
      sub_10001729C(v24, &qword_10065B810);
      char v26 = 0;
    }
    else
    {
      sub_10035B9BC(v24, v20, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
      char v26 = *(unsigned char *)(v20 + *(int *)(v25 + 32));
      sub_10035B95C(v20, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
    }
    unsigned __int8 v30 = v42;
  }
  else
  {
    sub_10035B9BC((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ADP);
    id v27 = &v13[*(int *)(v10 + 24)];
    uint64_t v28 = *((void *)v27 + 21);
    if (v28)
    {
      BOOL v29 = *((void *)v27 + 20) == 0x6C7074656B72616DLL && v28 == 0xEB00000000656361;
      unsigned __int8 v30 = v42;
      if (v29) {
        char v26 = 1;
      }
      else {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
    else
    {
      BOOL v29 = v27[184] == 1;
      char v31 = *((void *)v27 + 22) & 1;
      if (v29) {
        char v26 = 0;
      }
      else {
        char v26 = v31;
      }
      unsigned __int8 v30 = v42;
    }
    sub_10035B95C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ADP);
  }
  sub_10019B17C((uint64_t)v46, (uint64_t)v43);
  uint64_t v32 = v44;
  uint64_t v33 = v45;
  sub_10018AC60(v43, v44);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
  uint64_t v36 = v35;
  sub_100014524((uint64_t)v43);
  sub_10047F370(v30, v34, v36, v26 & 1);
  swift_bridgeObjectRelease();
  return sub_100014524((uint64_t)v46);
}

uint64_t sub_1003539E4()
{
  v1[33] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[34] = v2;
  v1[35] = *(void *)(v2 - 8);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AppInstallRequestType();
  v1[39] = v3;
  v1[40] = *(void *)(v3 - 8);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  return _swift_task_switch(sub_100353B2C, v0, 0);
}

uint64_t sub_100353B2C()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(*(void *)(v0 + 264) + 112);
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1002BDDD0(v5, v1);
  os_unfair_lock_unlock(v6);
  uint64_t v7 = v0 + 264;
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v9 = *(void *)(v0 + 320);
  char v11 = AppInstallRequestType.isUserInitiated.getter();
  uint64_t v12 = v8;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v12, v10);
  if (v11)
  {
    if (*(unsigned char *)(*(void *)v7
                  + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) == 1)
    {
      uint64_t v14 = v0 + 16;
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t v52 = v16;
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v18 = *(void **)(*(void *)(v0 + 264) + 160);
        *(void *)(v0 + 256) = v18;
        id v19 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v50 = v18;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v52, "[%@] Showing content restricted alert.", v17, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v14 = v0 + 16;
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 272));
      *(void *)(v0 + 344) = *(void *)(v2
                                        + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_localizer);
      *(void *)(v0 + 16) = 60;
      *(_OWORD *)(v0 + 24) = 0u;
      *(_OWORD *)(v0 + 40) = 0u;
      *(_OWORD *)(v0 + 56) = 0u;
      *(void *)(v0 + 72) = 0;
      *(unsigned char *)(v0 + 80) = 26;
      *(void *)(v0 + 88) = 61;
      *(_OWORD *)(v0 + 96) = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
      *(_OWORD *)(v0 + 128) = 0u;
      *(void *)(v0 + 144) = 0;
      *(unsigned char *)(v0 + 152) = 26;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(unsigned char *)(v0 + 224) = 26;
      swift_retain();
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_100354424;
      return sub_100560FFC(v14);
    }
    static Logger.install.getter();
    swift_retain_n();
    unsigned __int8 v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v34 = *(void **)(*(void *)v7 + 160);
      *(void *)(v0 + 248) = v34;
      id v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v34;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%@] Install failure alert not required to be shown at this point.", v32, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 296), *(void *)(v0 + 272));
  }
  else
  {
    uint64_t v54 = v13;
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v48 = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v23 = *(void **)(*(void *)v7 + 160);
      *(void *)(v0 + 232) = v23;
      id v24 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v23;
      uint64_t v25 = (uint8_t *)v22;
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v26 = *(void *)(v0 + 328);
      uint64_t v27 = *(void *)(v2 + v3);
      uint64_t v28 = v27 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v27 + 16);
      BOOL v29 = (os_unfair_lock_s *)(v27 + ((*(unsigned int *)(*(void *)v27 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v29);
      sub_1002BDDD0(v28, v26);
      uint64_t v41 = *(void *)(v0 + 328);
      uint64_t v42 = *(void *)(v0 + 312);
      uint64_t v53 = *(void *)(v0 + 288);
      uint64_t v47 = *(void *)(v0 + 280);
      uint64_t v49 = *(void *)(v0 + 272);
      os_unfair_lock_unlock(v29);
      uint64_t v43 = AppInstallRequestType.rawValue.getter();
      unint64_t v45 = v44;
      v54(v41, v42);
      *(void *)(v0 + 240) = sub_1000143F4(v43, v45, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v48, "[%@] Install failure alert not required for install of type %{public}s.", v25, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v53, v49);
    }
    else
    {
      uint64_t v37 = *(void *)(v0 + 280);
      uint64_t v36 = *(void *)(v0 + 288);
      uint64_t v38 = *(void *)(v0 + 272);
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_100354424(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[45] = a1;
  v3[46] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[47] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_100354578;
  return sub_100560FFC((uint64_t)(v3 + 11));
}

uint64_t sub_100354578(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[48] = a1;
  v3[49] = a2;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[50] = v4;
  *uint64_t v4 = v6;
  v4[1] = sub_1003546CC;
  return sub_100560FFC((uint64_t)(v3 + 20));
}

uint64_t sub_1003546CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 408) = a1;
  *(void *)(v3 + 416) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003547CC, 0, 0);
}

uint64_t sub_1003547CC()
{
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v1 = *(void *)(v0 + 416);
  long long v6 = *(_OWORD *)(v0 + 360);
  long long v7 = *(_OWORD *)(v0 + 384);
  type metadata accessor for SystemAlert();
  uint64_t v3 = swift_allocObject();
  *(void *)(v0 + 424) = v3;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 80) = 0;
  swift_release();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003548C0;
  return sub_10042D9F4();
}

uint64_t sub_1003548C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264);
  swift_task_dealloc();
  return _swift_task_switch(sub_1003549D0, v1, 0);
}

uint64_t sub_1003549D0()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100354A68(uint64_t *a1, uint64_t a2)
{
  swift_retain();
  unint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_100357BF4(v4, a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  swift_release();
  if (v7)
  {
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_10:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
LABEL_14:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_10;
  }
  uint64_t v8 = *a1;
  swift_retain();
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v8;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    uint64_t v8 = sub_10055ACEC(v8);
    *a1 = v8;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = a2;
  swift_release();
  return specialized Array._endMutation()();
}

uint64_t sub_100354B88()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_100354C44, 0, 0);
}

uint64_t sub_100354C44()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006650B0 + dword_1006650B0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100354D0C;
  return v3(0xC4ABBEBEA0100000, 22, 0, 0, 1);
}

uint64_t sub_100354D0C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    unint64_t v5 = sub_100276EB8;
  }
  else {
    unint64_t v5 = sub_100354E7C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100354E7C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100354EE0()
{
  v1[7] = v0;
  sub_1000172F8(&qword_10065B570);
  v1[8] = swift_task_alloc();
  type metadata accessor for String.LocalizationValue.StringInterpolation();
  v1[9] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for String.LocalizationValue();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  v1[22] = v4;
  v1[23] = *(void *)(v4 - 8);
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100355138, v0, 0);
}

uint64_t sub_100355138()
{
  uint64_t v87 = v0;
  uint64_t v1 = v0 + 7;
  uint64_t v2 = v0[25];
  uint64_t v3 = *(void *)(v0[7] + 112);
  uint64_t v4 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1002BDDD0(v6, v2);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = v0[25];
  uint64_t v10 = v0[22];
  uint64_t v9 = v0[23];
  char v11 = AppInstallRequestType.isUserInitiated.getter();
  uint64_t v12 = v8;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v12, v10);
  if ((v11 & 1) == 0)
  {
    uint64_t v80 = v13;
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v76 = v23;
      os_log_t log = v22;
      uint64_t v84 = v0;
      id v24 = v0 + 2;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v79 = (void *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      uint64_t v82 = (uint8_t *)v25;
      *(_DWORD *)uint64_t v25 = 138412546;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v26 = *(void **)(*v1 + 160);
      *id v24 = v26;
      id v27 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v79 = v26;
      swift_release_n();
      *(_WORD *)(v25 + 12) = 2082;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v28 = v84[24];
      uint64_t v29 = *(void *)(v3 + v4);
      uint64_t v30 = v29 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v29 + 16);
      os_log_type_t v31 = (os_unfair_lock_s *)(v29 + ((*(unsigned int *)(*(void *)v29 + 48) + 3) & 0x1FFFFFFFCLL));
      os_unfair_lock_lock(v31);
      sub_1002BDDD0(v30, v28);
      uint64_t v56 = v84[24];
      uint64_t v57 = v84[22];
      uint64_t v58 = v84[16];
      uint64_t v78 = v84[17];
      uint64_t v75 = v84[15];
      os_unfair_lock_unlock(v31);
      uint64_t v59 = AppInstallRequestType.rawValue.getter();
      unint64_t v61 = v60;
      v80(v56, v57);
      v84[3] = sub_1000143F4(v59, v61, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, log, v76, "[%@] Install failure alert not required for install of type %{public}s.", v82, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v78, v75);
      uint64_t v0 = v84;
    }
    else
    {
      uint64_t v39 = v0[16];
      uint64_t v38 = v0[17];
      uint64_t v40 = v0[15];
      swift_release_n();

      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    }
    goto LABEL_30;
  }
  uint64_t v14 = v0 + 5;
  if (*(unsigned char *)(*v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) != 1)
  {
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v85 = v0;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      id v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v36 = *(void **)(*v1 + 160);
      *(v1 - 3) = v36;
      id v37 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v35 = v36;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%@] Install failure alert not required to be shown at this point.", v34, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v0 = v85;
    }
    else
    {
      swift_release_n();
    }

    uint64_t v55 = v0[18];
    goto LABEL_29;
  }
  uint64_t v15 = v0 + 6;
  uint64_t v16 = v0[21];
  sub_100017238(v3 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_referrer, v16, &qword_10065C3C0);
  uint64_t v17 = v0;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
  uint64_t v83 = v17;
  uint64_t v21 = v17[21];
  if (v20 == 1)
  {
    sub_10001729C(v17[21], &qword_10065C3C0);
LABEL_21:
    uint64_t v0 = v83;
    static Logger.install.getter();
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138412290;
      if ((swift_task_isCurrentExecutor() & 1) == 0) {
        swift_task_reportUnexpectedExecutor();
      }
      uint64_t v53 = *(void **)(*v1 + 160);
      *uint64_t v14 = v53;
      id v54 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v52 = v53;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Install failure alert not shown as there is no domain and/or no referrer.", v51, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v0 = v83;
    }
    else
    {
      swift_release_n();
    }

    uint64_t v55 = v0[19];
LABEL_29:
    (*(void (**)(uint64_t, void))(v0[16] + 8))(v55, v0[15]);
LABEL_30:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v62 = (uint64_t (*)(void))v0[1];
    return v62();
  }
  uint64_t v41 = sub_1004CF23C();
  uint64_t v43 = v42;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
  if (!v43) {
    goto LABEL_21;
  }
  static Logger.install.getter();
  swift_retain_n();
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    unint64_t v81 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 138412290;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v47 = *(void **)(*v1 + 160);
    void *v15 = v47;
    id v48 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v81 = v47;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%@] Showing install failure alert.", v46, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v65 = v83[13];
  uint64_t v64 = v83[14];
  uint64_t v66 = v83[11];
  uint64_t v67 = v83[12];
  uint64_t v68 = v83[10];
  uint64_t v69 = v83[8];
  (*(void (**)(void, void))(v83[16] + 8))(v83[20], v83[15]);
  String.LocalizationValue.init(stringLiteral:)();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v70._countAndFlagsBits = 0xD00000000000001ELL;
  v70._object = (void *)0x80000001005BE330;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v70);
  v71._countAndFlagsBits = v41;
  v71._object = v43;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v71);
  swift_bridgeObjectRelease();
  v72._countAndFlagsBits = 0;
  v72._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v72);
  String.LocalizationValue.init(stringInterpolation:)();
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v69, 1, 1, v68);
  v83[26] = sub_100431100(v64, v65, v67, v69, 0, 0);
  sub_10001729C(v69, &qword_10065B570);
  unint64_t v73 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v73(v67, v68);
  v73(v65, v68);
  v73(v64, v68);
  os_log_type_t v74 = (void *)swift_task_alloc();
  v83[27] = v74;
  *os_log_type_t v74 = v83;
  v74[1] = sub_100355D6C;
  return sub_10042D9F4();
}

uint64_t sub_100355D6C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_100355E7C, v1, 0);
}

uint64_t sub_100355E7C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100355F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 112)
                 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1002BDC4C(v4, (uint64_t)v10);
  os_unfair_lock_unlock(v5);
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    sub_10018AC60(v10, v11);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
    sub_1003B7E98(v8, v9);
    swift_bridgeObjectRelease();
    sub_100014524((uint64_t)v10);
  }
}

uint64_t sub_10035609C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[25] = a5;
  uint64_t v6 = sub_1000172F8(&qword_10065B828);
  v5[26] = v6;
  v5[27] = *(void *)(v6 - 8);
  v5[28] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[31] = v7;
  v5[32] = *(void *)(v7 - 8);
  v5[33] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[34] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10035622C;
  return sub_10042D9F4();
}

uint64_t sub_10035622C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10035632C, 0, 0);
}

uint64_t sub_10035632C()
{
  if (*(unsigned char *)(v0 + 304) == 1)
  {
    uint64_t v1 = (_OWORD *)(v0 + 144);
    uint64_t v2 = *(void *)(*(void *)(v0 + 200) + 112)
       + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag;
    uint64_t v3 = *(void *)v2;
    if (*(void *)(*(void *)v2 + 16))
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v4 = sub_100016D20(0xD000000000000026, 0x80000001005B8D20);
      if (v5)
      {
        sub_1000144C8(*(void *)(v3 + 56) + 32 * v4, v0 + 144);
      }
      else
      {
        *uint64_t v1 = 0u;
        *(_OWORD *)(v0 + 160) = 0u;
      }
    }
    else
    {
      *uint64_t v1 = 0u;
      *(_OWORD *)(v0 + 160) = 0u;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_1000172F8((uint64_t *)&unk_10065C9C0);
    swift_dynamicCast();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v8 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 240);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v11(v10, 1, v8) == 1)
    {
      uint64_t v12 = *(void *)(v0 + 248);
      uint64_t v13 = *(void *)(v0 + 232);
      URL.init(string:)();
      id v14 = (id)v11(v13, 1, v12);
      if (v14 == 1) {
        goto LABEL_19;
      }
      uint64_t v15 = *(void *)(v0 + 240);
      (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 232), *(void *)(v0 + 248));
      sub_10001729C(v15, &qword_10065C3C0);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
    }
    id v14 = [self defaultWorkspace];
    *(void *)(v0 + 280) = v14;
    if (v14)
    {
      uint64_t v16 = v14;
      uint64_t v17 = *(void *)(v0 + 216);
      uint64_t v18 = *(void *)(v0 + 224);
      uint64_t v19 = *(void *)(v0 + 208);
      URL._bridgeToObjectiveC()((NSURL *)(v0 + 80));
      uint64_t v21 = v20;
      *(void *)(v0 + 288) = v20;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 192;
      *(void *)(v0 + 24) = sub_10019A19C;
      swift_continuation_init();
      *(void *)(v0 + 136) = v19;
      uint64_t v22 = sub_10019CE94((uint64_t *)(v0 + 112));
      sub_1000172F8(&qword_10065B830);
      sub_1000172F8(&qword_10065B260);
      CheckedContinuation.init(continuation:function:)();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 32))(v22, v18, v19);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 1107296256;
      *(void *)(v0 + 96) = sub_100341EA4;
      *(void *)(v0 + 104) = &unk_100642E80;
      objc_msgSend(v16, "openURL:configuration:completionHandler:", v21, 0);
      id v14 = (id)(v0 + 16);
      return _swift_continuation_await(v14);
    }
    __break(1u);
LABEL_19:
    __break(1u);
    return _swift_continuation_await(v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100356760(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v4[2] = a1;
  v4[3] = a4;
  v4[4] = *a4;
  return _swift_task_switch(sub_1003567A8, 0, 0);
}

uint64_t sub_1003567A8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_1003568A4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0x28746E6573657270, 0xE900000000000029, sub_10035BD1C, v3, &type metadata for SystemAlert.Response);
}

uint64_t sub_1003568A4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10035BCDC, 0, 0);
}

uint64_t sub_1003569BC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_1000172F8(&qword_10065B220);
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AppInstallRequestType();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100356AB0, v2, 0);
}

uint64_t sub_100356AB0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v0[4] + 112);
  v0[9] = v2;
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16);
  char v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1002BDDD0(v4, v1);
  os_unfair_lock_unlock(v5);
  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[6];
  LOBYTE(v5) = AppInstallRequestType.isUserInitiated.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  if (v5)
  {
    id v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006624F0 + dword_1006624F0);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[10] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100356C88;
    uint64_t v10 = v0[2];
    uint64_t v11 = v0[3];
    return v14(v2, v10, v11);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

uint64_t sub_100356C88(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 88) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100356DA0, v2, 0);
}

uint64_t sub_100356DA0()
{
  uint64_t v1 = v0[11];
  if (v1)
  {
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[5];
    *(unsigned char *)(v0[4] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
    uint64_t v4 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
    char v5 = (void *)swift_allocObject();
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = v1;
    void v5[5] = v2;
    swift_retain();
    swift_retain();
    sub_100532E84(v3, (uint64_t)&unk_1006610D8, (uint64_t)v5);
    swift_release();
    swift_release();
    sub_10001729C(v3, &qword_10065B220);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100356EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[25] = a5;
  uint64_t v6 = sub_1000172F8(&qword_10065B828);
  v5[26] = v6;
  v5[27] = *(void *)(v6 - 8);
  v5[28] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[31] = v7;
  v5[32] = *(void *)(v7 - 8);
  v5[33] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[34] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_10035706C;
  return sub_10042D9F4();
}

uint64_t sub_10035706C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10035716C, 0, 0);
}

uint64_t sub_10035716C()
{
  if (*(unsigned char *)(v0 + 304) == 1)
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 200) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
    if (*(void *)(v1 + 16) && (unint64_t v2 = sub_100016D20(0xD000000000000026, 0x80000001005B8D20), (v3 & 1) != 0))
    {
      sub_1000144C8(*(void *)(v1 + 56) + 32 * v2, v0 + 144);
    }
    else
    {
      *(_OWORD *)(v0 + 144) = 0u;
      *(_OWORD *)(v0 + 160) = 0u;
    }
    sub_1000172F8((uint64_t *)&unk_10065C9C0);
    swift_dynamicCast();
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    if (v9(v8, 1, v6) == 1)
    {
      uint64_t v10 = *(void *)(v0 + 248);
      uint64_t v11 = *(void *)(v0 + 232);
      URL.init(string:)();
      id v12 = (id)v9(v11, 1, v10);
      if (v12 == 1) {
        goto LABEL_18;
      }
      uint64_t v13 = *(void *)(v0 + 240);
      (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 232), *(void *)(v0 + 248));
      sub_10001729C(v13, &qword_10065C3C0);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 264), *(void *)(v0 + 240), *(void *)(v0 + 248));
    }
    id v12 = [self defaultWorkspace];
    *(void *)(v0 + 280) = v12;
    if (v12)
    {
      id v14 = v12;
      uint64_t v15 = *(void *)(v0 + 216);
      uint64_t v16 = *(void *)(v0 + 224);
      uint64_t v17 = *(void *)(v0 + 208);
      URL._bridgeToObjectiveC()((NSURL *)(v0 + 80));
      uint64_t v19 = v18;
      *(void *)(v0 + 288) = v18;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 192;
      *(void *)(v0 + 24) = sub_100357548;
      swift_continuation_init();
      *(void *)(v0 + 136) = v17;
      uint64_t v20 = sub_10019CE94((uint64_t *)(v0 + 112));
      sub_1000172F8(&qword_10065B830);
      sub_1000172F8(&qword_10065B260);
      CheckedContinuation.init(continuation:function:)();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 32))(v20, v16, v17);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 1107296256;
      *(void *)(v0 + 96) = sub_100341EA4;
      *(void *)(v0 + 104) = &unk_100642E30;
      objc_msgSend(v14, "openURL:configuration:completionHandler:", v19, 0);
      id v12 = (id)(v0 + 16);
      return _swift_continuation_await(v12);
    }
    __break(1u);
LABEL_18:
    __break(1u);
    return _swift_continuation_await(v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100357548()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 296) = v1;
  if (v1) {
    unint64_t v2 = sub_10035BCD8;
  }
  else {
    unint64_t v2 = sub_10035BCFC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100357658()
{
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10001729C(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp, &qword_100661010);
  sub_10001729C(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_preflightMetadata, &qword_100661018);

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100357738()
{
  return type metadata accessor for ADPInstallTask();
}

uint64_t type metadata accessor for ADPInstallTask()
{
  uint64_t result = qword_100660F20;
  if (!qword_100660F20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10035778C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100357918(319, &qword_100660F30, (void (*)(uint64_t))type metadata accessor for ADP);
    if (v1 <= 0x3F)
    {
      sub_100357918(319, (unint64_t *)&unk_100660F38, (void (*)(uint64_t))type metadata accessor for ADPPreflightResultingMetadata);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100357918(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10035796C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      for (uint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
        }
        uint64_t v9 = (void *)(*(void *)(v8 + 112)
                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientID);
        uint64_t v10 = v9[1];
        if (v10)
        {
          if (*v9 == a2 && v10 == a3)
          {
            swift_release();
            return i;
          }
          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          if (v12) {
            return i;
          }
          uint64_t v13 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        else
        {
          swift_release();
          uint64_t v13 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_21;
          }
        }
        if (v13 == v6) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100357AD8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  a2 += OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    char v6 = static UUID.== infix(_:_:)();
    swift_release();
    if (v6) {
      return v5;
    }
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v7 == v4) {
      return 0;
    }
  }
}

uint64_t sub_100357BF4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  a2 = *(void *)(a2 + 112) + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_url;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    char v6 = static URL.== infix(_:_:)();
    swift_release();
    if (v6) {
      return v5;
    }
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v7 == v4) {
      return 0;
    }
  }
}

uint64_t sub_100357D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  void v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_bridgeObjectRetain();
  if (a1 == 1)
  {
    sub_10001729C((uint64_t)v6, &qword_10065B220);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_100661028;
  *(void *)(v13 + 24) = v9;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    void v15[2] = v10;
    v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100357F68()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100357FA8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_100347148(a1, v4, v5, v7, v6);
}

uint64_t sub_100358068()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003580A0@<X0>(void *a1@<X8>)
{
  return sub_100347E8C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1003580BC(uint64_t *a1)
{
  return sub_100353434(a1, v1);
}

uint64_t sub_1003580D8(uint64_t *a1)
{
  return sub_100348CAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1003580F4()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AppInstallRequestType();
  v1[14] = v3;
  v1[15] = *(void *)(v3 - 8);
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_100358238, v0, 0);
}

uint64_t sub_100358238()
{
  uint64_t v43 = v0;
  uint64_t v1 = v0 + 7;
  uint64_t v2 = *(void *)(v0[7] + 112);
  uint64_t v3 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage;
  v0[17] = v2;
  v0[18] = v3;
  uint64_t v4 = *(void *)(v2 + v3);
  uint64_t v5 = v4 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1002BDCA4(v5, v42);
  os_unfair_lock_unlock(v6);
  uint64_t v7 = v0[16];
  if (v42[0])
  {
    os_unfair_lock_lock(v6);
    sub_1002BDDD0(v5, v7);
    v0[19] = 0;
    os_unfair_lock_unlock(v6);
    uint64_t v9 = v0[15];
    uint64_t v8 = v0[16];
    uint64_t v10 = v0[14];
    char v11 = AppInstallRequestType.isUserInitiated.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    if (v11)
    {
      uint64_t v12 = *(void **)(v0[7] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_installConfirmationTask);
      v0[20] = v12;
      if (v12)
      {
        v12;
        static Logger.install.getter();
        swift_retain_n();
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 138412290;
          if ((swift_task_isCurrentExecutor() & 1) == 0) {
            swift_task_reportUnexpectedExecutor();
          }
          uint64_t v16 = *(void **)(*v1 + 160);
          v0[6] = v16;
          id v17 = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v40 = v16;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@] Install sheet required, requesting confirmation", v15, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        uint64_t v34 = v0[13];
        uint64_t v35 = v0[8];
        uint64_t v36 = v0[9];
        id v37 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v0[21] = v37;
        v0[22] = (v36 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v37(v34, v35);
        uint64_t v38 = (void *)swift_task_alloc();
        v0[23] = v38;
        *uint64_t v38 = v0;
        v38[1] = sub_100358A78;
        return sub_1004AF98C();
      }
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v31 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        uint64_t v32 = *(void **)(v0[7] + 160);
        v0[3] = v32;
        id v33 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v41 = v32;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%@] No confirmation task available, failing", v31, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(void, void))(v0[9] + 8))(v0[11], v0[8]);
      type metadata accessor for InternalError();
      sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      uint64_t v27 = swift_allocError();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      static Logger.install.getter();
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        if ((swift_task_isCurrentExecutor() & 1) == 0) {
          swift_task_reportUnexpectedExecutor();
        }
        id v24 = *(void **)(*v1 + 160);
        v0[2] = v24;
        id v25 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v23 = v24;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] Install sheet required, but this is an automatic install. Failing.", v22, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
      uint64_t v26 = type metadata accessor for MarketplaceKitError();
      sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
      uint64_t v27 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for MarketplaceKitError.cancelled(_:), v26);
    }
    swift_willThrow();
    v0[24] = v27;
    swift_errorRetain();
    uint64_t v39 = (void *)swift_task_alloc();
    v0[25] = v39;
    *uint64_t v39 = v0;
    v39[1] = sub_10035906C;
    return sub_100347F04(v27);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_100358A78(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(unsigned char *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100358B90, v2, 0);
}

void sub_100358B90()
{
  uint64_t v29 = v0;
  static Logger.install.getter();
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    id v24 = (void *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    char v4 = *(unsigned char *)(v0 + 208);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v25 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 96);
    uint64_t v5 = *(void **)(*(void *)(v0 + 56) + 160);
    *(void *)(v0 + 32) = v5;
    id v6 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v24 = v5;
    swift_release_n();
    *(_WORD *)(v3 + 12) = 2082;
    if (v4) {
      uint64_t v7 = 0x6C6C6174736E49;
    }
    else {
      uint64_t v7 = 0x6C65636E6143;
    }
    if (v4) {
      unint64_t v8 = 0xE700000000000000;
    }
    else {
      unint64_t v8 = 0xE600000000000000;
    }
    *(void *)(v0 + 40) = sub_1000143F4(v7, v8, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Install confirmation task finished with result: %{public}s", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v27(v26, v25);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 64);
    swift_release_n();

    v9(v10, v11);
  }
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(*(void *)(v0 + 136) + *(void *)(v0 + 144));
  *(unsigned char *)(swift_task_alloc() + 16) = 0;
  uint64_t v14 = v13 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v13 + 16);
  uint64_t v15 = (os_unfair_lock_s *)(v13 + ((*(unsigned int *)(*(void *)v13 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v15);
  sub_10035B290(v14);
  os_unfair_lock_unlock(v15);
  if (!v12)
  {
    char v16 = *(unsigned char *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 56);
    swift_task_dealloc();
    *(unsigned char *)(v17 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldShowAlertOnInstallFailure) = 0;
    uint64_t v18 = *(void **)(v0 + 160);
    if (v16)
    {

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v23 = *(void (**)(void))(v0 + 8);
      v23();
    }
    else
    {
      uint64_t v19 = type metadata accessor for MarketplaceKitError();
      sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
      uint64_t v20 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for MarketplaceKitError.cancelled(_:), v19);
      swift_willThrow();

      *(void *)(v0 + 192) = v20;
      swift_errorRetain();
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_10035906C;
      sub_100347F04(v20);
    }
  }
}

uint64_t sub_10035906C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_100359198, v1, 0);
}

uint64_t sub_100359198()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100359248(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  sub_1000172F8(&qword_10065B220);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_1003592DC, 0, 0);
}

void sub_1003592DC()
{
  uint64_t v23 = v0;
  if (qword_10065B0F0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(qword_100660EB8 + 16);
  os_log_type_t v2 = (os_unfair_lock_s *)(qword_100660EB8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_100660EB8 + 24));
  sub_100352424(v1, &v22);
  os_unfair_lock_unlock(v2);
  unint64_t v3 = v22;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v18 = (void (*)(void))v0[1];
    v18();
    return;
  }
  uint64_t v4 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    goto LABEL_20;
  }
LABEL_5:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v19 = v3 & 0xC000000000000001;
    uint64_t v20 = v4;
    unint64_t v21 = v3;
    while (1)
    {
      if (v19)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(v3 + 8 * v5 + 32);
        swift_retain();
      }
      uint64_t v8 = v0[7];
      uint64_t v7 = v0[8];
      uint64_t v9 = v0[6];
      uint64_t v10 = type metadata accessor for TaskPriority();
      uint64_t v11 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
      uint64_t v12 = (void *)swift_allocObject();
      v12[2] = 0;
      uint64_t v13 = v12 + 2;
      v12[3] = 0;
      void v12[4] = v6;
      v12[5] = v9;
      v12[6] = v8;
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v14 = v0[8];
      if (v9 == 1)
      {
        sub_10001729C(v0[8], &qword_10065B220);
        if (!*v13) {
          goto LABEL_16;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
        if (!*v13)
        {
LABEL_16:
          uint64_t v15 = 0;
          uint64_t v17 = 0;
          goto LABEL_17;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v16;
      swift_unknownObjectRelease();
LABEL_17:
      unint64_t v3 = v21;
      if (v17 | v15)
      {
        v0[2] = 0;
        v0[3] = 0;
        v0[4] = v15;
        v0[5] = v17;
      }
      ++v5;
      swift_task_create();
      swift_release();
      swift_release();
      if (v20 == v5) {
        goto LABEL_20;
      }
    }
  }
  __break(1u);
}

uint64_t sub_100359658(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a8;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  *(unsigned char *)(v8 + 264) = a4;
  *(void *)(v8 + 72) = a2;
  *(void *)(v8 + 80) = a3;
  *(void *)(v8 + 64) = a1;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = *(void *)(v9 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 152) = v10;
  *(void *)(v8 + 160) = *(void *)(v10 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = swift_task_alloc();
  *(void *)(v8 + 184) = swift_task_alloc();
  sub_1000172F8(&qword_100661010);
  *(void *)(v8 + 192) = swift_task_alloc();
  return _swift_task_switch(sub_1003597E0, 0, 0);
}

uint64_t sub_1003597E0()
{
  uint64_t v34 = v0;
  if (v0[10])
  {
    if (qword_10065B0E8 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[8];
    os_log_type_t v2 = (os_unfair_lock_s *)qword_100660EB0;
    *(void *)(swift_task_alloc() + 16) = v1;
    p_os_unfair_lock_opaque = (unint64_t *)&v2[4]._os_unfair_lock_opaque;
    v2 += 6;
    os_unfair_lock_lock(v2);
    sub_10035BB30(p_os_unfair_lock_opaque, v33);
    os_unfair_lock_unlock(v2);
    uint64_t v21 = v33[0];
    v0[25] = v33[0];
    swift_task_dealloc();
    if (v21)
    {
      return _swift_task_switch(sub_100359D24, v21, 0);
    }
    uint64_t v22 = v0[18];
    uint64_t v24 = v0[15];
    uint64_t v23 = v0[16];
    uint64_t v25 = v0[8];
    static Logger.install.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v25, v24);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[22];
    uint64_t v13 = v0[19];
    uint64_t v11 = v0[20];
    uint64_t v14 = v0[18];
    uint64_t v16 = v0[15];
    uint64_t v15 = v0[16];
    if (v26)
    {
      uint64_t v32 = v0[19];
      uint64_t v31 = v0[22];
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v33[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446210;
      sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_1000143F4(v27, v28, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      uint64_t v20 = "No pending install with ID: %{public}s found";
      goto LABEL_7;
    }
LABEL_14:
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    goto LABEL_15;
  }
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[8];
  static Logger.install.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v7, v6);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[20];
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[19];
  uint64_t v15 = v0[16];
  uint64_t v14 = v0[17];
  uint64_t v16 = v0[15];
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v32 = v0[19];
  uint64_t v31 = v0[21];
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  v33[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v17 = 136446210;
  sub_100013C24((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
  v0[5] = sub_1000143F4(v18, v19, v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  uint64_t v20 = "No calling bundle ID found when confirming %{public}s";
LABEL_7:
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v20, v17, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v31, v32);
LABEL_15:
  type metadata accessor for InternalError();
  sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_100359D24()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 200) + 160);
  *(void *)(v0 + 208) = v1;
  id v2 = v1;
  return _swift_task_switch(sub_100359D98, 0, 0);
}

uint64_t sub_100359D98()
{
  sub_100516980(*(id *)(v0 + 208));
  *(void *)(v0 + 216) = OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_adp;
  uint64_t v1 = *(void *)(v0 + 200);
  return _swift_task_switch(sub_100359E10, v1, 0);
}

uint64_t sub_100359E10()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25] + v0[27];
  swift_beginAccess();
  sub_100017238(v2, v1, &qword_100661010);
  return _swift_task_switch(sub_100359EA4, 0, 0);
}

uint64_t sub_100359EA4()
{
  uint64_t v1 = sub_10035214C(*(void *)(v0 + 200), *(void *)(v0 + 192));
  if (!v2)
  {
LABEL_7:
    uint64_t v5 = *(void **)(v0 + 208);
    static Logger.install.getter();
    id v6 = v5;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    BOOL v10 = *(void **)(v0 + 208);
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      *(void *)(v0 + 56) = v10;
      id v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v10;

      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Blocking attempt to confirm install started by another distributor.", v11, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v14 = *(NSObject **)(v0 + 208);
    }
    else
    {

      uint64_t v14 = *(NSObject **)(v0 + 208);
      uint64_t v7 = v14;
    }
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 152);
    uint64_t v25 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    type metadata accessor for InternalError();
    sub_100013C24((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    sub_10001729C(v22, &qword_100661010);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  if (v1 == *(void *)(v0 + 72) && v2 == *(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v15;
  void *v15 = v0;
  v15[1] = sub_10035A1F8;
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 88);
  uint64_t v19 = *(void *)(v0 + 96);
  char v20 = *(unsigned char *)(v0 + 264);
  return sub_100350D24(v20, v18, v19, v16, v17);
}

uint64_t sub_10035A1F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 256) = v4;
    *char v4 = v3;
    v4[1] = sub_10035A838;
    return sub_10034A584(v0);
  }
  else
  {
    return _swift_task_switch(sub_10035A37C, 0, 0);
  }
}

void sub_10035A37C()
{
  if (*(unsigned char *)(v0 + 264))
  {
    uint64_t v1 = *(void *)(v0 + 232);
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v3 = (os_unfair_lock_s *)qword_100660EB0;
    *(void *)(swift_task_alloc() + 16) = v2;
    char v4 = v3 + 4;
    v3 += 6;
    os_unfair_lock_lock(v3);
    sub_10035BB4C(v4);
    os_unfair_lock_unlock(v3);
    if (!v1)
    {
      uint64_t v9 = *(void *)(v0 + 192);

      swift_release();
      swift_task_dealloc();
      sub_10001729C(v9, &qword_100661010);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      BOOL v10 = *(void (**)(void))(v0 + 8);
      v10();
    }
  }
  else
  {
    uint64_t v5 = type metadata accessor for MarketplaceKitError();
    sub_100013C24((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
    uint64_t v6 = swift_allocError();
    *(void *)(v0 + 240) = v6;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, enum case for MarketplaceKitError.cancelled(_:), v5);
    os_log_type_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v8;
    *os_log_type_t v8 = v0;
    v8[1] = sub_10035A5DC;
    sub_10034A584(v6);
  }
}

uint64_t sub_10035A5DC()
{
  swift_task_dealloc();
  swift_errorRelease();
  return _swift_task_switch(sub_10035A6F4, 0, 0);
}

void sub_10035A6F4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = (os_unfair_lock_s *)qword_100660EB0;
  *(void *)(swift_task_alloc() + 16) = v2;
  char v4 = v3 + 4;
  v3 += 6;
  os_unfair_lock_lock(v3);
  sub_10035BB4C(v4);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    uint64_t v5 = *(void *)(v0 + 192);

    swift_release();
    swift_task_dealloc();
    sub_10001729C(v5, &qword_100661010);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(void (**)(void))(v0 + 8);
    v6();
  }
}

uint64_t sub_10035A838()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10035A934, 0, 0);
}

uint64_t sub_10035A934()
{
  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = v0[24];
  swift_willThrow();
  swift_release();

  sub_10001729C(v2, &qword_100661010);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void *sub_10035AA0C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (a1 >> 62)
  {
LABEL_21:
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      unint64_t v16 = v5;
      unint64_t v7 = 0;
      unint64_t v8 = v5 & 0xC000000000000001;
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v5 & 0xC000000000000001;
      while (1)
      {
        if (v8)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_18:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v7 + 32);
          swift_retain();
          unint64_t v11 = v7 + 1;
          if (__OFADD__(v7, 1)) {
            goto LABEL_18;
          }
        }
        uint64_t v12 = (void *)(*(void *)(v10 + 112)
                       + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientID);
        uint64_t v13 = v12[1];
        if (v13
          && (*v12 == a2 ? (BOOL v14 = v13 == a3) : (BOOL v14 = 0), v14
                                                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v5 = v16;
          unint64_t v8 = v17;
        }
        else
        {
          swift_release();
        }
        ++v7;
        if (v11 == v6) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10035ABC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = sub_10035796C(v7, a2, a3);
  char v10 = v9;
  uint64_t v11 = v3;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_64;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_65:
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v12 != v31) {
        goto LABEL_6;
      }
    }
    else if (v12 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v12 = v8 + 5;
      uint64_t v33 = v11;
      while (1)
      {
        unint64_t v13 = v12 - 4;
        uint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_55;
          }
          uint64_t v15 = *(void *)(v14 + 8 * v12);
          swift_retain();
        }
        unint64_t v16 = (void *)(*(void *)(v15 + 112)
                       + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_clientID);
        uint64_t v17 = v16[1];
        if (!v17) {
          break;
        }
        if (*v16 != a2 || v17 != a3)
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          if ((v19 & 1) == 0)
          {
            if (v13 == v8) {
              goto LABEL_38;
            }
LABEL_20:
            uint64_t v20 = *a1;
            if ((*a1 & 0xC000000000000001) != 0)
            {
              uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v20 = *a1;
              if ((*a1 & 0xC000000000000001) == 0) {
                goto LABEL_24;
              }
            }
            else
            {
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_58;
              }
              if (v8 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_59;
              }
              uint64_t v21 = *(void *)(v20 + 8 * v8 + 32);
              swift_retain();
              if ((v20 & 0xC000000000000001) == 0)
              {
LABEL_24:
                if ((v13 & 0x8000000000000000) != 0) {
                  goto LABEL_60;
                }
                if (v13 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_61;
                }
                uint64_t v22 = *(void *)(v20 + 8 * v12);
                swift_retain();
                goto LABEL_27;
              }
            }
            uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v20 = *a1;
LABEL_27:
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *a1 = v20;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
            {
              uint64_t v20 = sub_10055ACEC(v20);
              *a1 = v20;
            }
            *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v22;
            swift_release();
            specialized Array._endMutation()();
            uint64_t v24 = *a1;
            int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *a1 = v24;
            if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
            {
              uint64_t v24 = sub_10055ACEC(v24);
              *a1 = v24;
            }
            uint64_t v11 = v33;
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_62;
            }
            if (v13 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_63;
            }
            *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v21;
            swift_release();
            specialized Array._endMutation()();
            goto LABEL_38;
          }
LABEL_39:
          unint64_t v27 = v12 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_56;
          }
          goto LABEL_43;
        }
        swift_release();
        unint64_t v27 = v12 - 3;
        if (__OFADD__(v13, 1)) {
          goto LABEL_56;
        }
LABEL_43:
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v28 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v12;
        if (v27 == v28) {
          return v8;
        }
      }
      swift_release();
      if (v13 != v8) {
        goto LABEL_20;
      }
LABEL_38:
      if (__OFADD__(v8++, 1)) {
        goto LABEL_57;
      }
      goto LABEL_39;
    }
    return v8;
  }
  unint64_t v29 = *a1;
  if (!(v29 >> 62)) {
    return *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v32;
}

unint64_t sub_10035AF54(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_100357AD8(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v8)
    {
      unint64_t v18 = *a1;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        return *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      uint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_54;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 != v20) {
          goto LABEL_6;
        }
      }
      else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        a2 += OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_id;
        for (unint64_t i = v6 + 5; ; ++i)
        {
          unint64_t v11 = i - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v11 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_45;
            }
            swift_retain();
          }
          uint64_t v9 = static UUID.== infix(_:_:)();
          swift_release();
          if ((v9 & 1) == 0) {
            break;
          }
LABEL_32:
          uint64_t v9 = i - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_46;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v17 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v9 == v17) {
            return v6;
          }
        }
        if (v11 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1)) {
            goto LABEL_47;
          }
          goto LABEL_32;
        }
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_50;
            }
            if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_51;
            }
            uint64_t v13 = *(void *)(v9 + 8 * i);
            swift_retain();
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          uint64_t v12 = *(void *)(v9 + 8 * v6 + 32);
          swift_retain();
          if ((v9 & 0xC000000000000001) == 0) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = *a1;
LABEL_20:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = sub_10055ACEC(v9);
          *a1 = v9;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v13;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v9 = *a1;
        int v15 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v15 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = sub_10055ACEC(v9);
          *a1 = v9;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_53;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v12;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_31;
      }
    }
  }
  return v6;
}

uint64_t sub_10035B290(uint64_t a1)
{
  return sub_1002BDCEC(a1, *(unsigned char *)(v1 + 16));
}

void sub_10035B2AC(uint64_t a1)
{
  sub_100355F7C(a1, v1);
}

uint64_t sub_10035B2C8(uint64_t *a1)
{
  return sub_100354A68(a1, v1);
}

uint64_t sub_10035B2E8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10000B238;
  return sub_100354B88();
}

uint64_t sub_10035B39C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10035B440(uint64_t a1)
{
  return a1;
}

uint64_t sub_10035B4E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10035B54C(void *a1)
{
  return sub_100350CA8(a1);
}

uint64_t sub_10035B56C(uint64_t a1)
{
  char v4 = *(void **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_1000176B4;
  v5[4] = *v4;
  return _swift_task_switch(sub_10019A484, 0, 0);
}

uint64_t sub_10035B648(uint64_t a1)
{
  char v4 = *(void **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_10000B238;
  v5[4] = *v4;
  return _swift_task_switch(sub_10019A484, 0, 0);
}

uint64_t sub_10035B720(uint64_t a1)
{
  return sub_1002BDD84(a1, *(void *)(v1 + 16));
}

double sub_10035B73C(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_10035B764()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10035B7A4(uint64_t a1)
{
  char v4 = *(void **)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_1000176B4;
  v5[4] = *v4;
  return _swift_task_switch(sub_1003567A8, 0, 0);
}

uint64_t sub_10035B880(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_100356EDC(a1, v4, v5, v7, v6);
}

uint64_t sub_10035B940(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t sub_10035B95C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10035B9BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10035BA28()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10035BA70(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = sub_1000176B4;
  return sub_10035609C(a1, v4, v5, v7, v6);
}

uint64_t sub_10035BB30@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003520D4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10035BB4C(void *a1)
{
  return sub_100352364(a1, *(void *)(v1 + 16));
}

uint64_t sub_10035BB68(uint64_t a1)
{
  return sub_1002BDF3C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10035BB84()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_10035BBC4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10035BC0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_100352444(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10035BCE0()
{
  return sub_10035BB84() & 1;
}

uint64_t sub_10035BD04@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100352424(a1, a2);
}

ValueMetadata *type metadata accessor for CleanupOnMigrationTask()
{
  return &type metadata for CleanupOnMigrationTask;
}

uint64_t sub_10035BD34()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100661128 + dword_100661128);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000176B4;
  return v6(v2, v3);
}

uint64_t sub_10035BDE4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  sub_1000172F8(&qword_10065B220);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_10035BE78, 0, 0);
}

uint64_t sub_10035BE78()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(void *)(v0[2] + 168);
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F0 + dword_1006606F0);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10035BF58;
  return v6((uint64_t)v6, (uint64_t)sub_10023DF14, v3, v2);
}

uint64_t sub_10035BF58()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10035C18C;
  }
  else {
    uint64_t v2 = sub_10035C088;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10035C088()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void *)(v0[2] + 256);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v2;
  void v5[5] = v3;
  id v6 = v2;
  swift_retain();
  sub_100017544(v1, (uint64_t)&unk_10065CC28, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10035C18C()
{
  swift_errorRelease();
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = *(void *)(v0[2] + 256);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v2;
  void v5[5] = v3;
  id v6 = v2;
  swift_retain();
  sub_100017544(v1, (uint64_t)&unk_10065CC28, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10035C298()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10035C2E0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_10065B570);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v28 - v16;
  __chkstk_darwin(v15);
  char v19 = (char *)&v28 - v18;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v20._countAndFlagsBits = 0xD000000000000022;
  v20._object = (void *)0x80000001005BE370;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
  if (a3 >= 1)
  {
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
    v23._countAndFlagsBits = (uint64_t)sub_100448184(a3);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v23);
    swift_bridgeObjectRelease();
  }
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
  String.LocalizationValue.init(stringInterpolation:)();
  String.LocalizationValue.init(stringLiteral:)();
  String.LocalizationValue.init(stringLiteral:)();
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  uint64_t v25 = sub_100431100((uint64_t)v17, (uint64_t)v19, (uint64_t)v14, (uint64_t)v8, 0, 0);
  sub_10017D154((uint64_t)v8);
  BOOL v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v14, v10);
  v26(v17, v10);
  v26(v19, v10);
  return v25;
}

uint64_t sub_10035C61C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_10065B570);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v28 - v16;
  __chkstk_darwin(v15);
  char v19 = (char *)&v28 - v18;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v20._object = (void *)0x80000001005BE420;
  v20._countAndFlagsBits = 0xD000000000000024;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v21);
  if (a3 >= 1)
  {
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
    v23._countAndFlagsBits = (uint64_t)sub_100448184(a3);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v23);
    swift_bridgeObjectRelease();
  }
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
  String.LocalizationValue.init(stringInterpolation:)();
  String.LocalizationValue.init(stringLiteral:)();
  String.LocalizationValue.init(stringLiteral:)();
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  uint64_t v25 = sub_100431100((uint64_t)v17, (uint64_t)v19, (uint64_t)v14, (uint64_t)v8, 0, 0);
  sub_10017D154((uint64_t)v8);
  BOOL v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v14, v10);
  v26(v17, v10);
  v26(v19, v10);
  return v25;
}

uint64_t sub_10035C948(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(sub_10035C9E0, v3, v5);
}

uint64_t sub_10035C9E0()
{
  *(void *)(v0 + 24) = **(void **)(v0 + 16);
  return _swift_task_switch(sub_10035CA08, 0, 0);
}

uint64_t sub_10035CA08()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
    return v1(2);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[4] = v3;
    void *v3 = v0;
    v3[1] = sub_10035CB1C;
    uint64_t v4 = v0[3];
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E010, v4, &type metadata for Bool);
  }
}

uint64_t sub_10035CB1C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10035CC18, 0, 0);
}

uint64_t sub_10035CC18()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_10035CC34(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(sub_10035CCCC, v3, v5);
}

uint64_t sub_10035CCCC()
{
  *(void *)(v0 + 24) = **(void **)(v0 + 16);
  return _swift_task_switch(sub_10035CCF4, 0, 0);
}

uint64_t sub_10035CCF4()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
    return v1(2);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[4] = v3;
    void *v3 = v0;
    v3[1] = sub_10035CE08;
    uint64_t v4 = v0[3];
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E03C, v4, &type metadata for Bool);
  }
}

uint64_t sub_10035CE08()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10035E1B4, 0, 0);
}

uint64_t sub_10035CF04(uint64_t a1)
{
  *(void *)(v2 + 16) = v1;
  if (a1)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(sub_10035CF9C, v3, v5);
}

uint64_t sub_10035CF9C()
{
  *(void *)(v0 + 24) = **(void **)(v0 + 16);
  return _swift_task_switch(sub_10035CFC4, 0, 0);
}

uint64_t sub_10035CFC4()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
    return v1(2);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v0[4] = v3;
    void *v3 = v0;
    v3[1] = sub_10035CE08;
    uint64_t v4 = v0[3];
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E034, v4, &type metadata for Bool);
  }
}

unsigned char *sub_10035D0D8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10035D0E4()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int out_token = -1;
  uint64_t v4 = (const char *)kMobileKeyBagLockStatusNotifyToken;
  sub_100176BD4();
  (*(void (**)(unsigned char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  uint64_t v5 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10035E07C;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004D2B58;
  aBlock[3] = &unk_100642FC0;
  uint64_t v7 = _Block_copy(aBlock);
  swift_release();
  LODWORD(v4) = notify_register_dispatch(v4, &out_token, v5, v7);
  _Block_release(v7);

  if (!v4)
  {
    __chkstk_darwin(v8);
    *(_DWORD *)&v13[-16] = v9;
    uint64_t v11 = (uint64_t)&v10[4];
    uint64_t v12 = v10 + 8;
    os_unfair_lock_lock(v10 + 8);
    sub_10035E08C(v11);
    os_unfair_lock_unlock(v12);
    sub_10035D4FC();
  }
}

void sub_10035D344()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_10035D7F4(v2, &token);
  os_unfair_lock_unlock(v3);
  if (token != -1)
  {
    notify_cancel(token);
    os_unfair_lock_lock(v3);
    sub_10035D800(v2);
    os_unfair_lock_unlock(v3);
  }
}

uint64_t sub_10035D3EC()
{
  sub_10035D344();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DeviceStateObserver()
{
  return self;
}

unint64_t sub_10035D450()
{
  unint64_t result = qword_1006611D0[0];
  if (!qword_1006611D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1006611D0);
  }
  return result;
}

uint64_t sub_10035D4A4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10035D4FC();
    return swift_release();
  }
  return result;
}

void sub_10035D4FC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 8;
  os_unfair_lock_lock(v5 + 8);
  sub_10035E1D0((uint64_t)v6, &v18);
  os_unfair_lock_unlock(v7);
  if (v18 != -1)
  {
    os_unfair_lock_lock(v7);
    sub_10035D80C((uint64_t)v6, &v18);
    os_unfair_lock_unlock(v7);
    uint64_t v16 = v2;
    uint64_t v17 = v1;
    if ((v18 & 1) == 0)
    {
      uint64_t v8 = MKBDeviceUnlockedSinceBoot();
      __chkstk_darwin(v8);
      *((unsigned char *)&v16 - 16) = v9;
      os_unfair_lock_lock(v7);
      sub_10035E098((uint64_t)v6);
      os_unfair_lock_unlock(v7);
    }
    uint64_t v10 = MKBGetDeviceLockState();
    if (v10) {
      BOOL v11 = v10 == 3;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = v11;
    __chkstk_darwin(v10);
    *((unsigned char *)&v16 - 16) = v12;
    os_unfair_lock_lock(v7);
    sub_10035E0A4(v6);
    os_unfair_lock_unlock(v7);
    static Logger.general.getter();
    swift_retain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 67109376;
      int v18 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 8) = 1024;
      os_unfair_lock_lock(v7);
      sub_10035E1B8((uint64_t)v6, &v18);
      os_unfair_lock_unlock(v7);
      int v18 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Device state: unlocked = %{BOOL}d, since boot = %{BOOL}d", (uint8_t *)v15, 0xEu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v17);
    sub_10035D818(v12);
  }
}

uint64_t sub_10035D7F4@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 4);
  return result;
}

uint64_t sub_10035D800(uint64_t result)
{
  *(_DWORD *)(result + 4) = -1;
  return result;
}

uint64_t sub_10035D80C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

uint64_t sub_10035D818(char a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065E560);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v8 = (uint64_t)&v7[4];
  char v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  sub_10035DB40(v8, &v20);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = *(void *)(v20 + 16);
  if (v10)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v11 = v4 + 16;
    int v12 = v13;
    unint64_t v14 = (*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64);
    v19[1] = v20;
    uint64_t v15 = v20 + v14;
    uint64_t v16 = *(void *)(v11 + 56);
    char v17 = a1 & 1;
    do
    {
      v12(v6, v15, v3);
      LOBYTE(v20) = v17;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v11 - 8))(v6, v3);
      v15 += v16;
      --v10;
    }
    while (v10);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10035D9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065E560);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  unint64_t v8 = *(void *)(a1 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = sub_1002907F0(0, *(void *)(v8 + 16) + 1, 1, v8);
  }
  unint64_t v10 = *(void *)(v8 + 16);
  unint64_t v9 = *(void *)(v8 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v8 = sub_1002907F0(v9 > 1, v10 + 1, 1, v8);
  }
  *(void *)(v8 + 16) = v10 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, v7, v4);
  *(void *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_10035DB40@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  *(void *)(result + 8) = &_swiftEmptyArrayStorage;
  return result;
}

void sub_10035DB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 16);
  uint64_t v3 = (uint64_t)&v2[4];
  uint64_t v4 = v2 + 8;
  os_unfair_lock_lock(v2 + 8);
  sub_10035E018(v3);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_10035DBB4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = *v1;
  return _swift_task_switch(sub_10035DBDC, 0, 0);
}

uint64_t sub_10035DBDC()
{
  if (static Task<>.isCancelled.getter())
  {
    **(unsigned char **)(v0 + 16) = 2;
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    void *v3 = v0;
    v3[1] = sub_10035DCF8;
    uint64_t v4 = *(void *)(v0 + 24);
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 40, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E010, v4, &type metadata for Bool);
  }
}

uint64_t sub_10035DCF8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10035DDF4, 0, 0);
}

uint64_t sub_10035DDF4()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a1;
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006611E8 + dword_1006611E8);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10035DEE0;
  return v8(a2, a3, v3 + 16);
}

uint64_t sub_10035DEE0(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(unsigned char **)(v4 + 24) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

void *sub_10035E004()
{
  return &protocol witness table for Never;
}

void sub_10035E010(uint64_t a1)
{
  sub_10035DB58(a1, v1);
}

uint64_t sub_10035E018(uint64_t a1)
{
  return sub_10035D9C4(a1, *(void *)(v1 + 16));
}

void sub_10035E034(uint64_t a1)
{
  sub_1003CB3A4(a1, v1);
}

void sub_10035E03C(uint64_t a1)
{
  sub_1004D41BC(a1, v1);
}

uint64_t sub_10035E044()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10035E07C()
{
  return sub_10035D4A4();
}

uint64_t sub_10035E084()
{
  return swift_release();
}

uint64_t sub_10035E08C(uint64_t result)
{
  *(_DWORD *)(result + 4) = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t sub_10035E098(uint64_t result)
{
  *(unsigned char *)(result + 1) = *(unsigned char *)(v1 + 16);
  return result;
}

unsigned char *sub_10035E0A4(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_10035E0B4(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DeviceStateObserver.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DeviceStateObserver.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DeviceStateObserver.State()
{
  return &type metadata for DeviceStateObserver.State;
}

ValueMetadata *type metadata accessor for DeviceStateObserver.AsyncIterator()
{
  return &type metadata for DeviceStateObserver.AsyncIterator;
}

uint64_t sub_10035E1B8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_10035D80C(a1, a2);
}

uint64_t sub_10035E1D0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_10035D7F4(a1, a2);
}

uint64_t sub_10035E1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[53] = a6;
  v7[54] = v6;
  v7[51] = a4;
  v7[52] = a5;
  v7[49] = a2;
  v7[50] = a3;
  v7[48] = a1;
  uint64_t v8 = type metadata accessor for Logger();
  v7[55] = v8;
  v7[56] = *(void *)(v8 - 8);
  v7[57] = swift_task_alloc();
  v7[58] = swift_task_alloc();
  v7[59] = swift_task_alloc();
  v7[60] = swift_task_alloc();
  v7[61] = swift_task_alloc();
  v7[62] = swift_task_alloc();
  v7[63] = swift_task_alloc();
  v7[64] = swift_task_alloc();
  v7[65] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v7[66] = v9;
  v7[67] = *(void *)(v9 - 8);
  v7[68] = swift_task_alloc();
  return _swift_task_switch(sub_10035E374, 0, 0);
}

void sub_10035E374()
{
  uint64_t v169 = v0;
  *(_OWORD *)(v0 + 16) = 0u;
  v165 = (id *)(v0 + 328);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  if (AppInstallRequest.isMarketplaceInstall.getter())
  {
    uint64_t v1 = *(void *)(v0 + 544);
    uint64_t v2 = *(void *)(v0 + 536);
    uint64_t v3 = *(void *)(v0 + 528);
    AppInstallRequest.adp.getter();
    uint64_t v4 = sub_1004CF23C();
    uint64_t v6 = v5;
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if (v6)
    {
      uint64_t v7 = v0 + 56;
      *(void *)(v0 + 80) = &type metadata for WebDistributor;
      *(void *)(v0 + 88) = sub_1002BEA38();
      *(void *)(v0 + 56) = v4;
      uint64_t v8 = 64;
LABEL_7:
      *(void *)(v0 + v8) = v6;
      sub_10001729C(v0 + 16, &qword_10065D3A0);
      sub_10001733C(v7, v0 + 16, &qword_10065D3A0);
      sub_10019B114(v0 + 16, v0 + 176);
      if (*(void *)(v0 + 200))
      {
        sub_10018B164((long long *)(v0 + 176), v0 + 136);
        uint64_t v14 = *(void *)(v0 + 160);
        uint64_t v15 = *(void *)(v0 + 168);
        sub_10018AC60((void *)(v0 + 136), v14);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
        *(void *)(v0 + 552) = v16;
        uint64_t v18 = v17 & 1;
        v166 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10065D5F0
                                                                                         + dword_10065D5F0);
        char v19 = (void *)swift_task_alloc();
        *(void *)(v0 + 560) = v19;
        *char v19 = v0;
        v19[1] = sub_10035F9A4;
        uint64_t v20 = *(void *)(v0 + 408);
        uint64_t v21 = *(void *)(v0 + 416);
        uint64_t v22 = *(void *)(v0 + 392);
        uint64_t v23 = *(void *)(v0 + 400);
        v166(v16, v18, v22, v23, v20, v21);
        return;
      }
      Swift::String v24 = *(void **)(v0 + 424);
      sub_10001729C(v0 + 176, &qword_10065D3A0);
      static Logger.install.getter();
      id v25 = v24;
      BOOL v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      unint64_t v29 = *(void **)(v0 + 424);
      if (v28)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        v159 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 138412290;
        *(void *)(v0 + 320) = v29;
        id v31 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v159 = v29;

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%@] No distributor found", v30, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        BOOL v26 = *(NSObject **)(v0 + 424);
      }
      uint64_t v55 = *(void *)(v0 + 448);
      uint64_t v54 = *(void *)(v0 + 456);
      uint64_t v56 = *(void *)(v0 + 440);

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      goto LABEL_28;
    }
    uint64_t v32 = *(void **)(v0 + 424);
    static Logger.install.getter();
    id v33 = v32;
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, (os_log_type_t)v35);
    id v37 = *(void **)(v0 + 424);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v160 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      *(void *)(v0 + 368) = v37;
      id v39 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v160 = v37;

      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v35, "[%@] No available distribution domain for install", v38, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v57 = *(void *)(v0 + 520);
LABEL_27:
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 448) + 8))(v57, *(void *)(v0 + 440));
LABEL_28:
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_29:
    sub_10001729C(v0 + 16, &qword_10065D3A0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v58 = *(void (**)(void))(v0 + 8);
    goto LABEL_30;
  }
  uint64_t v9 = audit_token_t.signingIdentifier.getter(*(void *)(v0 + 392), *(void *)(v0 + 400), *(void *)(v0 + 408), *(void *)(v0 + 416));
  if (!v10)
  {
    uint64_t v40 = *(void **)(v0 + 424);
    static Logger.install.getter();
    id v41 = v40;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    os_log_type_t v45 = *(void **)(v0 + 424);
    if (v44)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      v161 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412290;
      *(void *)(v0 + 304) = v45;
      id v47 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v161 = v45;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%@] No signing identifier available", v46, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v57 = *(void *)(v0 + 472);
    goto LABEL_27;
  }
  uint64_t v11 = v9;
  uint64_t v6 = v10;
  id v12 = objc_allocWithZone((Class)LSApplicationExtensionRecord);
  swift_bridgeObjectRetain();
  id v13 = sub_10035FF34();
  id v48 = v13;
  if (!v13)
  {
    uint64_t v7 = v0 + 96;
    *(void *)(v0 + 120) = &type metadata for NativeDistributor;
    *(void *)(v0 + 128) = sub_1002F9EF8();
    *(void *)(v0 + 96) = v11;
    uint64_t v8 = 104;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  id v49 = [v48 extensionPointRecord];
  id v50 = [v49 identifier];

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if (v51 == 0xD00000000000001FLL && v53 == 0x80000001005BE4C0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
      uint64_t v95 = *(void **)(v0 + 424);
      static Logger.install.getter();
      id v96 = v95;
      id v97 = v48;
      id v98 = v96;
      id v99 = v97;
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.error.getter();
      BOOL v102 = os_log_type_enabled(v100, v101);
      uint64_t v103 = *(void **)(v0 + 480);
      uint64_t v105 = *(void *)(v0 + 440);
      uint64_t v104 = *(void *)(v0 + 448);
      uint64_t v106 = *(void **)(v0 + 424);
      if (v102)
      {
        uint64_t v167 = *(void *)(v0 + 440);
        uint64_t v107 = swift_slowAlloc();
        v146 = (void *)swift_slowAlloc();
        v168[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v107 = 138412546;
        os_log_type_t v147 = v101;
        id v157 = v103;
        *(void *)(v0 + 280) = v106;
        id v108 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v146 = v106;

        *(_WORD *)(v107 + 12) = 2082;
        id v109 = [v99 extensionPointRecord];
        id v110 = [v109 identifier];

        uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v113 = v112;

        *(void *)(v0 + 288) = sub_1000143F4(v111, v113, v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v100, v147, "[%@] Ineligible extension point: %{public}s", (uint8_t *)v107, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(id, uint64_t))(v104 + 8))(v157, v167);
      }
      else
      {

        (*(void (**)(void *, uint64_t))(v104 + 8))(v103, v105);
      }
      type metadata accessor for InternalError();
      sub_10019FE50();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      goto LABEL_29;
    }
  }
  id v60 = [v48 containingBundleRecord];
  if (!v60)
  {
LABEL_68:
    v114 = *(void **)(v0 + 424);
    static Logger.install.getter();
    id v115 = v114;
    v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    BOOL v118 = os_log_type_enabled(v116, v117);
    v119 = *(void **)(v0 + 424);
    if (v118)
    {
      v120 = (uint8_t *)swift_slowAlloc();
      typeb = (void *)swift_slowAlloc();
      *(_DWORD *)v120 = 138412290;
      *(void *)(v0 + 296) = v119;
      id v121 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typeb = v119;

      _os_log_impl((void *)&_mh_execute_header, v116, v117, "[%@] Containing bundle record not found", v120, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void, void))(*(void *)(v0 + 448) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 440));
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_29;
  }
  unint64_t v61 = v60;
  self;
  id v62 = (void *)swift_dynamicCastObjCClass();
  if (!v62)
  {

    goto LABEL_68;
  }
  uint64_t v63 = v62;
  id v64 = [v62 bundleIdentifier];
  if (!v64)
  {
    v133 = *(void **)(v0 + 424);
    static Logger.install.getter();
    id v134 = v133;
    v135 = Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.error.getter();
    BOOL v137 = os_log_type_enabled(v135, v136);
    v138 = *(void **)(v0 + 424);
    if (v137)
    {
      v139 = (uint8_t *)swift_slowAlloc();
      v164 = (void *)swift_slowAlloc();
      *(_DWORD *)v139 = 138412290;
      *(void *)(v0 + 376) = v138;
      id v140 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v164 = v138;

      _os_log_impl((void *)&_mh_execute_header, v135, v136, "[%@] No bundle ID available", v139, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void, void))(*(void *)(v0 + 448) + 8))(*(void *)(v0 + 496), *(void *)(v0 + 440));
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_29;
  }
  uint64_t v65 = v64;
  v145 = v61;
  v143 = v48;
  uint64_t type = v0 + 248;
  id v155 = v63;
  uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v67 = v66;

  unint64_t v144 = v67;
  swift_bridgeObjectRetain();
  Swift::Int v68 = sub_100010C5C((uint64_t)&off_100637C30);
  swift_arrayDestroy();
  uint64_t v69 = 0;
  Swift::Int v148 = v68 + 56;
  uint64_t v70 = -1;
  uint64_t v71 = -1 << *(unsigned char *)(v68 + 32);
  if (-v71 < 64) {
    uint64_t v70 = ~(-1 << -(char)v71);
  }
  uint64_t v72 = v70 & *(void *)(v68 + 56);
  os_log_t log = (os_log_t)((unint64_t)(63 - v71) >> 6);
  while (1)
  {
    while (1)
    {
      if (v72)
      {
        v72 &= v72 - 1;
      }
      else
      {
        uint64_t v73 = v69 + 1;
        if (__OFADD__(v69, 1))
        {
          __break(1u);
LABEL_85:
          __break(1u);
          return;
        }
        if (v73 >= (uint64_t)log) {
          goto LABEL_72;
        }
        uint64_t v74 = *(void *)(v148 + 8 * v73);
        ++v69;
        if (!v74)
        {
          uint64_t v69 = v73 + 1;
          if (v73 + 1 >= (uint64_t)log) {
            goto LABEL_72;
          }
          uint64_t v74 = *(void *)(v148 + 8 * v69);
          if (!v74)
          {
            uint64_t v69 = v73 + 2;
            if (v73 + 2 >= (uint64_t)log) {
              goto LABEL_72;
            }
            uint64_t v74 = *(void *)(v148 + 8 * v69);
            if (!v74)
            {
              uint64_t v75 = v73 + 3;
              if (v75 >= (uint64_t)log)
              {
LABEL_72:
                v122 = *(void **)(v0 + 424);
                swift_bridgeObjectRelease();
                swift_release();
                static Logger.install.getter();
                id v123 = v122;
                swift_bridgeObjectRetain();
                v124 = Logger.logObject.getter();
                os_log_type_t v125 = static os_log_type_t.error.getter();
                BOOL v126 = os_log_type_enabled(v124, v125);
                uint64_t v127 = *(void *)(v0 + 512);
                uint64_t v128 = *(void *)(v0 + 440);
                uint64_t v129 = *(void *)(v0 + 448);
                v130 = *(void **)(v0 + 424);
                if (v126)
                {
                  os_log_type_t typec = v125;
                  uint64_t v131 = swift_slowAlloc();
                  v149 = (void *)swift_slowAlloc();
                  id v158 = (id)swift_slowAlloc();
                  *(_DWORD *)uint64_t v131 = 138412546;
                  v168[0] = (uint64_t)v158;
                  *(void *)(v0 + 352) = v130;
                  uint64_t v163 = v128;
                  id v132 = v130;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  void *v149 = v130;

                  *(_WORD *)(v131 + 12) = 2082;
                  swift_bridgeObjectRetain();
                  *(void *)(v0 + 360) = sub_1000143F4(v142, v144, v168);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl((void *)&_mh_execute_header, v124, typec, "[%@] Containing app %{public}s not authorized", (uint8_t *)v131, 0x16u);
                  sub_1000172F8(&qword_10065DB10);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v127, v163);
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v127, v128);
                }
                type metadata accessor for InternalError();
                sub_10019FE50();
                swift_allocError();
                swift_storeEnumTagMultiPayload();
                swift_willThrow();

                goto LABEL_29;
              }
              uint64_t v74 = *(void *)(v148 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  uint64_t v69 = v75 + 1;
                  if (__OFADD__(v75, 1)) {
                    goto LABEL_85;
                  }
                  if (v69 >= (uint64_t)log) {
                    goto LABEL_72;
                  }
                  uint64_t v74 = *(void *)(v148 + 8 * v69);
                  ++v75;
                  if (v74) {
                    goto LABEL_56;
                  }
                }
              }
              uint64_t v69 = v75;
            }
          }
        }
LABEL_56:
        uint64_t v72 = (v74 - 1) & v74;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v76 = [v155 entitlements];
      NSString v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10024A4F8();
      id v78 = [v76 objectForKey:v77 ofClass:swift_getObjCClassFromMetadata()];

      if (v78)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        *(_OWORD *)(v0 + 216) = 0u;
        *(_OWORD *)(v0 + 232) = 0u;
      }
      sub_10001733C(v0 + 216, type, (uint64_t *)&unk_10065C9C0);
      if (*(void *)(v0 + 272)) {
        break;
      }
      sub_10001729C(type, (uint64_t *)&unk_10065C9C0);
    }
    if (swift_dynamicCast())
    {
      id v79 = *v165;
      unsigned __int8 v80 = [*v165 BOOLValue];

      if (v80) {
        break;
      }
    }
  }
  unint64_t v81 = *(void **)(v0 + 424);
  swift_release();
  static Logger.install.getter();
  id v82 = v81;
  unint64_t v83 = v144;
  swift_bridgeObjectRetain();
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.default.getter();
  BOOL v86 = os_log_type_enabled(v84, v85);
  uint64_t v87 = *(void *)(v0 + 504);
  uint64_t v88 = *(void *)(v0 + 440);
  uint64_t v89 = *(void *)(v0 + 448);
  char v90 = *(void **)(v0 + 424);
  if (v86)
  {
    os_log_type_t typea = v85;
    uint64_t v91 = swift_slowAlloc();
    uint64_t v92 = (void *)swift_slowAlloc();
    id v156 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v91 = 138412546;
    v168[0] = (uint64_t)v156;
    *(void *)(v0 + 336) = v90;
    uint64_t v162 = v88;
    id v93 = v90;
    unint64_t v83 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v92 = v90;

    *(_WORD *)(v91 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v94 = v142;
    *(void *)(v0 + 344) = sub_1000143F4(v142, v144, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v84, typea, "[%@] Attributing extension request to containing app %{public}s", (uint8_t *)v91, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v162);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
    uint64_t v94 = v142;
  }
  v141 = *(uint64_t **)(v0 + 384);
  v141[3] = (uint64_t)&type metadata for NativeDistributor;
  v141[4] = sub_1002F9EF8();

  uint64_t *v141 = v94;
  v141[1] = v83;
  sub_10001729C(v0 + 16, &qword_10065D3A0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v58 = *(void (**)(void))(v0 + 8);
LABEL_30:
  v58();
}

uint64_t sub_10035F9A4(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 568) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10035FE30;
  }
  else
  {
    *(unsigned char *)(v4 + 576) = a1 & 1;
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10035FAF0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10035FAF0()
{
  uint64_t v1 = v0 + 16;
  if (*(unsigned char *)(v0 + 576) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 384);
    sub_10001729C(v0 + 16, &qword_10065D3A0);
    sub_10018B164((long long *)(v0 + 136), v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 424);
    static Logger.install.getter();
    id v5 = v4;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void **)(v0 + 424);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      *(void *)(v0 + 312) = v9;
      id v11 = v9;
      uint64_t v1 = v0 + 16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v9;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Not entitled to perform this action", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v6 = *(NSObject **)(v0 + 424);
    }
    uint64_t v12 = *(void *)(v0 + 464);
    uint64_t v13 = *(void *)(v0 + 440);
    uint64_t v14 = *(void *)(v0 + 448);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    type metadata accessor for InternalError();
    sub_10019FE50();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_10001729C(v1, &qword_10065D3A0);
    sub_100014524(v0 + 136);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v3();
}

uint64_t sub_10035FE30()
{
  sub_10001729C(v0 + 16, &qword_10065D3A0);
  sub_100014524(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10035FF34()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithBundleIdentifier:v1 error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

void *sub_100360000(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1004560B8(0, v1, 0);
  uint64_t result = (void *)sub_100458280(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v24 = v2 + 80;
  int64_t v25 = v1;
  int v26 = v4;
  uint64_t v27 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v28 = v6;
    id v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v13 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v5);
    uint64_t v14 = v13[1];
    uint64_t v29 = *v11;
    uint64_t v30 = *v13;
    uint64_t v15 = v2;
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v17 >= v16 >> 1) {
      uint64_t result = (void *)sub_1004560B8(v16 > 1, v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    uint64_t v18 = &_swiftEmptyArrayStorage[4 * v17];
    void v18[4] = v29;
    v18[5] = v12;
    v18[6] = v30;
    v18[7] = v14;
    int64_t v8 = 1 << *(unsigned char *)(v15 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v27;
    uint64_t v19 = *(void *)(v27 + 8 * v10);
    if ((v19 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    uint64_t v2 = v15;
    int v4 = v26;
    if (*(_DWORD *)(v15 + 36) != v26) {
      goto LABEL_27;
    }
    unint64_t v20 = v19 & (-2 << (v5 & 0x3F));
    if (v20)
    {
      int64_t v8 = __clz(__rbit64(v20)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v25;
    }
    else
    {
      unint64_t v21 = v10 + 1;
      unint64_t v22 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v25;
      if (v10 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v27 + 8 * v21);
        if (v23)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v10)
          {
            unint64_t v23 = *(void *)(v24 + 8 * v10++);
            if (v23)
            {
              unint64_t v21 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v28 + 1;
    uint64_t v5 = v8;
    if (v28 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100360238(uint64_t a1)
{
  uint64_t v16 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v27 = _swiftEmptyArrayStorage;
  if (v4) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v9 = v6 + 1;
    if (!__OFADD__(v6, 1))
    {
      if (v9 < v17)
      {
        unint64_t v10 = *(void *)(v16 + 8 * v9);
        ++v6;
        if (v10) {
          goto LABEL_23;
        }
        int64_t v6 = v9 + 1;
        if (v9 + 1 >= v17) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v16 + 8 * v6);
        if (v10) {
          goto LABEL_23;
        }
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v17) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v16 + 8 * v6);
        if (v10) {
          goto LABEL_23;
        }
        int64_t v6 = v9 + 3;
        if (v9 + 3 >= v17) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v16 + 8 * v6);
        if (v10)
        {
LABEL_23:
          unint64_t v4 = (v10 - 1) & v10;
          for (unint64_t i = __clz(__rbit64(v10)) + (v6 << 6); ; unint64_t i = v7 | (v6 << 6))
          {
            sub_10036DF28(*(void *)(a1 + 48) + 40 * i, (uint64_t)v24);
            sub_1000144C8(*(void *)(a1 + 56) + 32 * i, (uint64_t)v25 + 8);
            v22[0] = v25[0];
            v22[1] = v25[1];
            uint64_t v23 = v26;
            v21[0] = v24[0];
            v21[1] = v24[1];
            sub_10036DF28((uint64_t)v21, (uint64_t)v20);
            if (!swift_dynamicCast()) {
              goto LABEL_6;
            }
            sub_1000144C8((uint64_t)v22 + 8, (uint64_t)v20);
            if ((swift_dynamicCast() & 1) == 0) {
              break;
            }
            sub_10001729C((uint64_t)v21, &qword_100661240);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_100290804(0, v27[2] + 1, 1, v27);
              uint64_t v27 = (void *)result;
            }
            unint64_t v13 = v27[2];
            unint64_t v12 = v27[3];
            if (v13 >= v12 >> 1)
            {
              uint64_t result = (uint64_t)sub_100290804((void *)(v12 > 1), v13 + 1, 1, v27);
              uint64_t v27 = (void *)result;
            }
            uint64_t v14 = v27;
            void v27[2] = v13 + 1;
            uint64_t v15 = &v14[4 * v13];
            void v15[4] = v18;
            void v15[5] = v19;
            id v15[6] = v18;
            v15[7] = v19;
            if (!v4) {
              goto LABEL_8;
            }
LABEL_7:
            unint64_t v7 = __clz(__rbit64(v4));
            v4 &= v4 - 1;
          }
          swift_bridgeObjectRelease();
LABEL_6:
          uint64_t result = sub_10001729C((uint64_t)v21, &qword_100661240);
          if (!v4) {
            continue;
          }
          goto LABEL_7;
        }
        int64_t v11 = v9 + 4;
        if (v11 < v17)
        {
          unint64_t v10 = *(void *)(v16 + 8 * v11);
          if (v10)
          {
            int64_t v6 = v11;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v6 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              goto LABEL_34;
            }
            if (v6 >= v17) {
              break;
            }
            unint64_t v10 = *(void *)(v16 + 8 * v6);
            ++v11;
            if (v10) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_32:
      swift_release();
      return (uint64_t)v27;
    }
    break;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_100360574()
{
  if (*v0) {
    return 0x6E6F6973726576;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_1003605A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100365C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003605D0(uint64_t a1)
{
  unint64_t v2 = sub_1003724E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036060C(uint64_t a1)
{
  unint64_t v2 = sub_1003724E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100360648@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100362B34(a1, &qword_100661508, (void (*)(void))sub_1003724E4, a2);
}

uint64_t sub_100360684(void *a1)
{
  return sub_10036253C(a1, *v1, v1[1], v1[2], v1[3], &qword_100661518, (void (*)(void))sub_1003724E4, (uint64_t)&type metadata for HTTPArchive.Log.Creator.CodingKeys, (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_1003606E4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100661338);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_10036FF38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_10001733C(v3 + 16, (uint64_t)v12, &qword_100661340);
    sub_10001733C((uint64_t)v12, (uint64_t)v11, &qword_100661340);
    v10[15] = 1;
    sub_1000172F8(&qword_1006612C8);
    sub_100370130(&qword_100661310, &qword_1006612C8, (void (*)(void))sub_10036FE90);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003608E8()
{
  uint64_t v1 = 0x736D61726170;
  if (*v0 != 1) {
    uint64_t v1 = 1954047348;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65707954656D696DLL;
  }
}

uint64_t sub_100360938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003661FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100360960(uint64_t a1)
{
  unint64_t v2 = sub_10036FF38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036099C(uint64_t a1)
{
  unint64_t v2 = sub_10036FF38();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003609D8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036633C(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100360A20(void *a1)
{
  return sub_1003606E4(a1);
}

uint64_t sub_100360A5C(uint64_t a1)
{
  unint64_t v2 = sub_10036F9F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100360A98(uint64_t a1)
{
  unint64_t v2 = sub_10036F9F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100360AD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10036662C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100360B04(void *a1)
{
  return sub_10036253C(a1, *v1, v1[1], v1[2], v1[3], &qword_100661280, (void (*)(void))sub_10036F9F0, (uint64_t)&type metadata for HTTPArchive.Log.Entry.Request.QueryParameter.CodingKeys, (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_100360B64(char a1)
{
  uint64_t result = 0x646F6874656DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 7107189;
      break;
    case 2:
      uint64_t result = 0x7372655670747468;
      break;
    case 3:
      uint64_t result = 0x7365696B6F6F63;
      break;
    case 4:
      uint64_t result = 0x73726564616568;
      break;
    case 5:
      uint64_t result = 0x7274537972657571;
      break;
    case 6:
      uint64_t result = 0x6174614474736F70;
      break;
    case 7:
      uint64_t result = 0x6953726564616568;
      break;
    case 8:
      uint64_t result = 0x657A695379646F62;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100360C8C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_1006612E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036FA44();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = v3[6];
    char v12 = 3;
    sub_1000172F8(&qword_100661298);
    sub_100370130(&qword_1006612F0, &qword_100661298, (void (*)(void))sub_10036FDE8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = v3[7];
    char v12 = 4;
    sub_1000172F8(&qword_1006612B0);
    sub_100370130(&qword_100661300, &qword_1006612B0, (void (*)(void))sub_10036FE3C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = v3[8];
    char v12 = 5;
    sub_1000172F8(&qword_1006612C8);
    sub_100370130(&qword_100661310, &qword_1006612C8, (void (*)(void))sub_10036FE90);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001733C((uint64_t)(v3 + 9), (uint64_t)v13, &qword_100661248);
    sub_10001733C((uint64_t)v13, (uint64_t)v11, &qword_100661248);
    char v12 = 6;
    sub_10036FEE4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100361050()
{
  return sub_100360B64(*v0);
}

uint64_t sub_100361058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100367068(a1, a2);
  *a3 = result;
  return result;
}

void sub_100361080(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10036108C(uint64_t a1)
{
  unint64_t v2 = sub_10036FA44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003610C8(uint64_t a1)
{
  unint64_t v2 = sub_10036FA44();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100361104@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10036743C(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_100361158(void *a1)
{
  return sub_100360C8C(a1);
}

uint64_t sub_1003611A4(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100661618);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_10037342C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100361354()
{
  uint64_t result = 1702521203;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65707954656D696DLL;
      break;
    case 2:
      uint64_t result = 1954047348;
      break;
    case 3:
      uint64_t result = 0x676E69646F636E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003613D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100367D1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003613F8(uint64_t a1)
{
  unint64_t v2 = sub_10037342C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100361434(uint64_t a1)
{
  unint64_t v2 = sub_10037342C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100361470@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100367EB8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1003614C0(void *a1)
{
  return sub_1003611A4(a1);
}

uint64_t sub_1003614D8(char a1)
{
  uint64_t result = 0x737574617473;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6554737574617473;
      break;
    case 2:
      uint64_t result = 0x7372655670747468;
      break;
    case 3:
      uint64_t result = 0x7365696B6F6F63;
      break;
    case 4:
      uint64_t result = 0x73726564616568;
      break;
    case 5:
      uint64_t result = 0x746E65746E6F63;
      break;
    case 6:
      uint64_t result = 0x7463657269646572;
      break;
    case 7:
      uint64_t result = 0x5373726564616568;
      break;
    case 8:
      uint64_t result = 0x657A695379646F62;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100361610(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100661560);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100372538();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&v11[0] = *(void *)(v3 + 40);
    char v13 = 3;
    sub_1000172F8(&qword_100661298);
    sub_100370130(&qword_1006612F0, &qword_100661298, (void (*)(void))sub_10036FDE8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&v11[0] = *(void *)(v3 + 48);
    char v13 = 4;
    sub_1000172F8(&qword_1006612B0);
    sub_100370130(&qword_100661300, &qword_1006612B0, (void (*)(void))sub_10036FE3C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 72);
    v11[0] = *(_OWORD *)(v3 + 56);
    v11[1] = v9;
    v11[2] = *(_OWORD *)(v3 + 88);
    uint64_t v12 = *(void *)(v3 + 104);
    char v13 = 5;
    sub_1003726DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036196C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100661418);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_100370A38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100361B1C()
{
  return sub_1003614D8(*v0);
}

uint64_t sub_100361B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100368178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100361B4C(uint64_t a1)
{
  unint64_t v2 = sub_100372538();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100361B88(uint64_t a1)
{
  unint64_t v2 = sub_100372538();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100361BC4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100368574(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100361C20(void *a1)
{
  return sub_100361610(a1);
}

uint64_t sub_100361C38()
{
  uint64_t result = 0x73657269707865;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656363417473616CLL;
      break;
    case 2:
      uint64_t result = 1734431845;
      break;
    case 3:
      uint64_t result = 0x746E756F43746968;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100361CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100368DE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100361CEC(uint64_t a1)
{
  unint64_t v2 = sub_100370A38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100361D28(uint64_t a1)
{
  unint64_t v2 = sub_100370A38();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100361D64@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100368F9C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100361DB4(void *a1)
{
  return sub_10036196C(a1);
}

uint64_t sub_100361DCC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100661570);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10018AC60(a1, a1[3]);
  sub_1003725E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10001733C(v3, (uint64_t)v13, &qword_100661578);
  sub_10001733C((uint64_t)v13, (uint64_t)v11, &qword_100661578);
  HIBYTE(v10) = 0;
  sub_100372730();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    sub_10001733C(v3 + 56, (uint64_t)v12, &qword_100661578);
    sub_10001733C((uint64_t)v12, (uint64_t)v11, &qword_100661578);
    HIBYTE(v10) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100361F9C()
{
  if (*v0) {
    return 0x7165527265746661;
  }
  else {
    return 0x655265726F666562;
  }
}

uint64_t sub_100361FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003692AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100362014(uint64_t a1)
{
  unint64_t v2 = sub_1003725E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100362050(uint64_t a1)
{
  unint64_t v2 = sub_1003725E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10036208C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003693DC(a1, v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1003620E0(void *a1)
{
  return sub_100361DCC(a1);
}

uint64_t sub_10036212C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100661588);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_100372688();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    _OWORD v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100362364(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100661500);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_100372490();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10036253C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(void), uint64_t a8, void (*a9)(uint64_t, uint64_t, unsigned char *, uint64_t))
{
  uint64_t v19 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v11 = sub_1000172F8(a6);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  a7();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21[1] = 0;
  uint64_t v15 = v20;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v15)
  {
    v21[0] = 1;
    a9(v17, v18, v21, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1003626B8()
{
  uint64_t result = 0x64656B636F6C62;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7564900;
      break;
    case 2:
      uint64_t result = 0x7463656E6E6F63;
      break;
    case 3:
      uint64_t result = 1684956531;
      break;
    case 4:
      uint64_t result = 1953063287;
      break;
    case 5:
      uint64_t result = 0x65766965636572;
      break;
    case 6:
      uint64_t result = 7107443;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100362774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036AA8C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10036279C(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1003627A8(uint64_t a1)
{
  unint64_t v2 = sub_100372688();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003627E4(uint64_t a1)
{
  unint64_t v2 = sub_100372688();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100362820@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036AD34(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(unsigned char *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10036287C(void *a1)
{
  return sub_10036212C(a1);
}

uint64_t sub_100362894()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65756C6176;
      break;
    case 2:
      uint64_t result = 1752457584;
      break;
    case 3:
      uint64_t result = 0x6E69616D6F64;
      break;
    case 4:
      uint64_t result = 0x73657269707865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100362924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036B000(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036294C(uint64_t a1)
{
  unint64_t v2 = sub_100372490();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100362988(uint64_t a1)
{
  unint64_t v2 = sub_100372490();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1003629C4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036B1F0(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100362A10(void *a1)
{
  return sub_100362364(a1);
}

uint64_t sub_100362A28()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_100362A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036B5D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100362A80(uint64_t a1)
{
  unint64_t v2 = sub_10036FF8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100362ABC(uint64_t a1)
{
  unint64_t v2 = sub_10036FF8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100362AF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100362B34(a1, &qword_100661348, (void (*)(void))sub_10036FF8C, a2);
}

uint64_t sub_100362B34@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10036B6B4(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_100362B70(void *a1)
{
  return sub_10036253C(a1, *v1, v1[1], v1[2], v1[3], &qword_100661358, (void (*)(void))sub_10036FF8C, (uint64_t)&type metadata for HTTPArchive.Log.Entry.Header.CodingKeys, (void (*)(uint64_t, uint64_t, unsigned char *, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_100362BD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = sub_1000172F8(&qword_100661250);
  __chkstk_darwin(v1 - 8);
  uint64_t v29 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TimeZone();
  uint64_t v3 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  int64_t v25 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  __chkstk_darwin(v16);
  (*(void (**)(char *, void))(v18 + 104))((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  uint64_t v19 = v12;
  uint64_t v20 = v28;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v19);
  unint64_t v21 = v7;
  unint64_t v22 = v29;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v8);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v21, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v27);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v22, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v25, v22, v20);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

uint64_t sub_100362FD0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_1006613E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1003701F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v24) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v24) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v9 = *(_OWORD *)(v3 + 104);
    long long v28 = *(_OWORD *)(v3 + 88);
    long long v29 = v9;
    long long v10 = *(_OWORD *)(v3 + 136);
    long long v30 = *(_OWORD *)(v3 + 120);
    long long v31 = v10;
    long long v11 = *(_OWORD *)(v3 + 40);
    long long v24 = *(_OWORD *)(v3 + 24);
    long long v25 = v11;
    long long v12 = *(_OWORD *)(v3 + 72);
    long long v26 = *(_OWORD *)(v3 + 56);
    long long v27 = v12;
    char v33 = 2;
    sub_1003708E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 232);
    long long v14 = *(_OWORD *)(v3 + 264);
    long long v15 = *(_OWORD *)(v3 + 280);
    long long v30 = *(_OWORD *)(v3 + 248);
    long long v31 = v14;
    long long v32 = v15;
    long long v16 = *(_OWORD *)(v3 + 168);
    long long v17 = *(_OWORD *)(v3 + 200);
    long long v26 = *(_OWORD *)(v3 + 184);
    long long v27 = v17;
    long long v28 = *(_OWORD *)(v3 + 216);
    long long v29 = v13;
    long long v24 = *(_OWORD *)(v3 + 152);
    long long v25 = v16;
    char v33 = 3;
    sub_10037093C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v18 = *(_OWORD *)(v3 + 376);
    long long v28 = *(_OWORD *)(v3 + 360);
    long long v29 = v18;
    long long v30 = *(_OWORD *)(v3 + 392);
    long long v19 = *(_OWORD *)(v3 + 312);
    long long v24 = *(_OWORD *)(v3 + 296);
    long long v25 = v19;
    long long v20 = *(_OWORD *)(v3 + 344);
    long long v26 = *(_OWORD *)(v3 + 328);
    long long v27 = v20;
    char v33 = 4;
    sub_100370990();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v21 = *(_OWORD *)(v3 + 456);
    long long v26 = *(_OWORD *)(v3 + 440);
    long long v27 = v21;
    long long v28 = *(_OWORD *)(v3 + 472);
    LOBYTE(v29) = *(unsigned char *)(v3 + 488);
    long long v22 = *(_OWORD *)(v3 + 424);
    long long v24 = *(_OWORD *)(v3 + 408);
    long long v25 = v22;
    char v33 = 5;
    sub_1003709E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v24) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v24) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100363314()
{
  uint64_t result = 0x4464657472617473;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701669236;
      break;
    case 2:
      uint64_t result = 0x74736575716572;
      break;
    case 3:
      uint64_t result = 0x65736E6F70736572;
      break;
    case 4:
      uint64_t result = 0x6568636163;
      break;
    case 5:
      uint64_t result = 0x73676E696D6974;
      break;
    case 6:
      uint64_t result = 0x5049726576726573;
      break;
    case 7:
      uint64_t result = 0x697463656E6E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100363424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036BFF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036344C(uint64_t a1)
{
  unint64_t v2 = sub_1003701F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100363488(uint64_t a1)
{
  unint64_t v2 = sub_1003701F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1003634C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10036C37C(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x210uLL);
  }
  return result;
}

uint64_t sub_100363518(void *a1)
{
  return sub_100362FD0(a1);
}

uint64_t sub_100363530(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100661390);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036FFE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 32);
    long long v13 = *(_OWORD *)(v3 + 16);
    long long v14 = v9;
    char v12 = 1;
    sub_1003700DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v13 = *(void *)(v3 + 48);
    char v12 = 2;
    sub_1000172F8(&qword_100661378);
    sub_100370130(&qword_1006613A0, &qword_100661378, (void (*)(void))sub_10037019C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036372C()
{
  return *(void *)&aVersion_1[8 * *v0];
}

uint64_t sub_100363744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10036D0C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036376C(uint64_t a1)
{
  unint64_t v2 = sub_10036FFE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003637A8(uint64_t a1)
{
  unint64_t v2 = sub_10036FFE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003637E4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036D220(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100363834(void *a1)
{
  return sub_100363530(a1);
}

uint64_t sub_10036384C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  unint64_t v38 = a4;
  id v39 = a5;
  BOOL v36 = a2;
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  long long v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLRequest();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  long long v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = os_variant_has_internal_content();
  if (result)
  {
    uint64_t v33 = v10;
    uint64_t v34 = v7;
    uint64_t v35 = v6;
    if (qword_10065B0F8 != -1) {
      swift_once();
    }
    uint64_t v32 = qword_100661208;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
    unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v22 + v18, v16, v13);
    long long v24 = v36;
    uint64_t v23 = v37;
    *(void *)(v22 + v19) = v36;
    long long v25 = (uint64_t *)(v22 + v20);
    unint64_t v27 = v38;
    long long v26 = v39;
    *long long v25 = v23;
    v25[1] = v27;
    *(void *)(v22 + v21) = v26;
    aBlock[4] = sub_100364D78;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002557B0;
    aBlock[3] = &unk_1006430C0;
    long long v28 = _Block_copy(aBlock);
    id v29 = v24;
    sub_100012670(v23, v27);
    id v30 = v26;
    static DispatchQoS.unspecified.getter();
    id v41 = _swiftEmptyArrayStorage;
    sub_10036E024(&qword_10065D3E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000172F8(&qword_10065D3E8);
    sub_10036E06C((unint64_t *)&qword_10065D3F0, &qword_10065D3E8);
    uint64_t v31 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v31);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v33);
    return swift_release();
  }
  return result;
}

uint64_t sub_100363C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  __chkstk_darwin(v10 - 8);
  char v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  sub_1003647FC("HTTPArchive", 11, 2, 0, 1, 1, (uint64_t)v12, (void (*)(void))sub_100364E28, (uint64_t)&_mh_execute_header, (uint64_t)v15, (void *)&_mh_execute_header);
  return sub_10001729C((uint64_t)v12, (uint64_t *)&unk_100661AB0);
}

uint64_t sub_100363D9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v67 = a4;
  *(void *)&long long v65 = a5;
  uint64_t v66 = a3;
  *(void *)&long long v62 = a2;
  *(void *)&long long v60 = a1;
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLRequest();
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  char v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v61 = (char *)&v54 - v10;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v76 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  sub_100364504((uint64_t)v20);
  long long v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v17, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1) {
    return sub_10001729C((uint64_t)v20, &qword_10065C3C0);
  }
  uint64_t v56 = v6;
  uint64_t v54 = v22;
  long long v26 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v55 = v21;
  v26(v76, v20, v21);
  static Date.now.getter();
  static Date.- infix(_:_:)();
  v24(v15, v11);
  sub_10036D578(v17);
  v24(v17, v11);
  uint64_t v28 = v63;
  uint64_t v27 = v64;
  id v29 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  id v30 = v61;
  v29(v61, (char *)v60, v64);
  uint64_t v31 = (uint64_t)v59;
  v29(v59, v30, v27);
  id v32 = (id)v62;
  uint64_t v34 = v66;
  unint64_t v33 = v67;
  sub_100012670(v66, v67);
  uint64_t v35 = (void *)v65;
  id v36 = (id)v65;
  sub_10036CF2C(v31, v32, v34, v33, v35, v73);
  long long v65 = v73[0];
  long long v62 = v73[1];
  uint64_t v37 = v74;
  long long v60 = v75;

  sub_100013510(v34, v33);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v69 = v65;
  long long v70 = v62;
  uint64_t v71 = v37;
  long long v72 = v60;
  sub_10036DE80();
  uint64_t v38 = v68;
  uint64_t v39 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v38)
  {
    swift_release();
    sub_10036DED4((uint64_t)v73);
    id v41 = v56;
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      id v48 = (void *)swift_slowAlloc();
      *(_DWORD *)id v47 = 138412290;
      swift_errorRetain();
      uint64_t v49 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v69 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v48 = v49;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to persist HTTP archive: %@", v47, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      id v41 = v56;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v50 = v58;
    uint64_t v51 = v57;
    uint64_t v52 = v55;
    uint64_t v53 = v54;
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v76, v52);
  }
  else
  {
    uint64_t v42 = v39;
    unint64_t v43 = v40;
    swift_release();
    sub_10036DED4((uint64_t)v73);
    BOOL v44 = v76;
    Data.write(to:options:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v55);
    return sub_100013510(v42, v43);
  }
}

uint64_t sub_100364504@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10065B100 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000E6AC(v6, (uint64_t)qword_100661210);
  sub_100017238(v9, (uint64_t)v8, &qword_10065C3C0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_10001729C((uint64_t)v8, &qword_10065C3C0);
    uint64_t v12 = 1;
  }
  else
  {
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v13._object = (void *)0x80000001005BE5E0;
    v13._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v13);
    Date.timeIntervalSinceReferenceDate.getter();
    Double.write<A>(to:)();
    v14._countAndFlagsBits = 1918986286;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
    sub_100017B14();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    uint64_t v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, v12, 1, v10);
}

void sub_1003647FC(NSObject *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, void (*a8)(void)@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  uint64_t v34 = a9;
  uint64_t v37 = a8;
  int v33 = a6;
  uint64_t v17 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a7, (uint64_t)v19, (uint64_t *)&unk_100661AB0);
  id v20 = a4;
  uint64_t v21 = sub_100011088(a1, a2, a3, a4, a5, v33, (uint64_t)v19, a11);
  uint64_t v23 = v22;
  long long v25 = v24;
  uint64_t v27 = v26;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  v36[0] = v21;
  v36[1] = (void *)v23;
  v36[2] = v25;
  v36[3] = v27;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  if (a4)
  {
    uint64_t v28 = v20;
    id v29 = v37;
    goto LABEL_8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v23 + 24));
  uint64_t v30 = v35;
  sub_100006238((void **)(v23 + 16), v36);
  if (!v30)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 24));
    uint64_t v28 = v36[0];
    if (!v36[0])
    {
      id v29 = v37;
      goto LABEL_9;
    }
    id v29 = v37;
LABEL_8:
    id v31 = v20;
    sub_10000E2EC();

LABEL_9:
    v29();
    swift_task_localValuePop();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    swift_release_n();
    return;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 24));
  __break(1u);
}

uint64_t sub_100364A54()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_10018B1DC(0, (unint64_t *)&qword_100662110);
  static DispatchQoS.utility.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_10036E024((unint64_t *)&qword_10065DAD0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_1000172F8(&qword_100662120);
  sub_10036E06C((unint64_t *)&qword_10065DAD8, &qword_100662120);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100661208 = result;
  return result;
}

uint64_t sub_100364CA8()
{
  uint64_t v1 = type metadata accessor for URLRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  sub_100013510(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));

  return _swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_100364D78()
{
  uint64_t v1 = *(void *)(type metadata accessor for URLRequest() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);

  return sub_100363C58(v0 + v2, v5, v7, v8, v6);
}

uint64_t sub_100364E20()
{
  return swift_release();
}

uint64_t sub_100364E28()
{
  return sub_100363D9C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100364E4C()
{
  uint64_t v0 = sub_1000172F8(&qword_10065C3C0);
  sub_1002983A4(v0, qword_100661210);
  uint64_t v1 = sub_10000E6AC(v0, (uint64_t)qword_100661210);
  return sub_100364E9C(v1);
}

uint64_t sub_100364E9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v32 = (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v30 - v12;
  id v30 = self;
  id v14 = [v30 defaultManager];
  id v15 = [v14 URLsForDirectory:5 inDomains:1];

  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v16 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, v16 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v2);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v17(v13, 0, 1, v2);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v17(v13, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v18(v13, 1, v2) == 1)
  {
    sub_10001729C((uint64_t)v13, &qword_10065C3C0);
    uint64_t v19 = 1;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
    sub_100017B14();
    URL.appending<A>(components:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v2);
    uint64_t v19 = 0;
  }
  v17((char *)a1, v19, 1, v2);
  uint64_t v20 = v32;
  sub_100017238(a1, v32, &qword_10065C3C0);
  if (v18((char *)v20, 1, v2) == 1) {
    return sub_10001729C(v20, &qword_10065C3C0);
  }
  uint64_t v22 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v20, v2);
  id v23 = [v30 defaultManager];
  URL._bridgeToObjectiveC()(v24);
  long long v26 = v25;
  id v33 = 0;
  unsigned int v27 = [v23 createDirectoryAtURL:v25 withIntermediateDirectories:1 attributes:0 error:&v33];

  if (v27)
  {
    id v28 = v33;
  }
  else
  {
    id v29 = v33;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v22, v2);
}

uint64_t sub_100365340(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000172F8(&qword_100661258);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036F948();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v8 = *(_OWORD *)(v2 + 16);
  v10[0] = *(_OWORD *)v2;
  v10[1] = v8;
  void v10[2] = *(_OWORD *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 48);
  sub_10036F99C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100365498()
{
  return 6778732;
}

uint64_t sub_1003654A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 6778732 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100365530(uint64_t a1)
{
  unint64_t v2 = sub_10036F948();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036556C(uint64_t a1)
{
  unint64_t v2 = sub_10036F948();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003655A8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100370A8C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1003655F8(void *a1)
{
  return sub_100365340(a1);
}

uint64_t sub_100365610(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_100365AB4(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    Swift::String v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  Swift::String v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v13 = sub_10028EEAC(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    Swift::String v13 = sub_10028EEAC((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  id v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v13 = sub_10028EEAC(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      Swift::String v13 = sub_10028EEAC((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    unint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100365AB4(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_10028EEAC(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_10028EEAC((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    void v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100365C10(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_100365C68(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100365D4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v58 = type metadata accessor for URLQueryItem();
  uint64_t v10 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLComponents();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v16 - 8);
  if (a2 >> 60 == 15)
  {
    uint64_t result = swift_bridgeObjectRelease();
    a3 = 0;
    a4 = 0;
LABEL_10:
    uint64_t v22 = 0;
LABEL_11:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    goto LABEL_12;
  }
  if (!a4)
  {
    uint64_t result = sub_10018AE44(a1, a2);
    a3 = 0;
    goto LABEL_10;
  }
  uint64_t v51 = v14;
  if (a3 == 0xD000000000000010 && a4 == 0x80000001005BE4E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    static String.Encoding.utf8.getter();
    uint64_t countAndFlagsBits = String.init(data:encoding:)();
  }
  else
  {
    if (a3 == 0xD000000000000021 && a4 == 0x80000001005BE500
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v23 = v10;
      uint64_t v24 = v55;
      URLComponents.init()();
      static String.Encoding.utf8.getter();
      String.init(data:encoding:)();
      URLComponents.percentEncodedQuery.setter();
      uint64_t v25 = URLComponents.queryItems.getter();
      if (v25)
      {
        uint64_t v50 = a1;
        int64_t v26 = *(void *)(v25 + 16);
        uint64_t v27 = v25;
        if (v26)
        {
          uint64_t v45 = v13;
          unint64_t v46 = a2;
          uint64_t v47 = a3;
          uint64_t v48 = a4;
          uint64_t v49 = a5;
          char v59 = _swiftEmptyArrayStorage;
          sub_100456098(0, v26, 0);
          uint64_t v28 = v23 + 16;
          uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
          uint64_t v30 = *(unsigned __int8 *)(v23 + 80);
          uint64_t v44 = v27;
          uint64_t v31 = v27 + ((v30 + 32) & ~v30);
          uint64_t v53 = *(void *)(v23 + 72);
          uint64_t v54 = v29;
          uint64_t v52 = (void (**)(char *, uint64_t))(v23 + 8);
          do
          {
            uint64_t v32 = v58;
            uint64_t v33 = v28;
            v54(v12, v31, v58);
            uint64_t v34 = URLQueryItem.name.getter();
            uint64_t v56 = v35;
            uint64_t v57 = v34;
            uint64_t v36 = URLQueryItem.value.getter();
            uint64_t v38 = v37;
            (*v52)(v12, v32);
            uint64_t v22 = v59;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100456098(0, v22[2] + 1, 1);
              uint64_t v22 = v59;
            }
            unint64_t v40 = v22[2];
            unint64_t v39 = v22[3];
            uint64_t v28 = v33;
            if (v40 >= v39 >> 1)
            {
              sub_100456098(v39 > 1, v40 + 1, 1);
              uint64_t v28 = v33;
              uint64_t v22 = v59;
            }
            _OWORD v22[2] = v40 + 1;
            id v41 = &v22[4 * v40];
            uint64_t v42 = v56;
            v41[4] = v57;
            v41[5] = v42;
            v41[6] = v36;
            v41[7] = v38;
            v31 += v53;
            --v26;
          }
          while (v26);
          sub_10018AE44(v50, v46);
          swift_bridgeObjectRelease();
          a4 = v48;
          a5 = v49;
          a3 = v47;
          uint64_t v13 = v45;
          uint64_t v24 = v55;
        }
        else
        {
          sub_10018AE44(v50, a2);
          swift_bridgeObjectRelease();
          uint64_t v22 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        sub_10018AE44(a1, a2);
        uint64_t v22 = 0;
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v24, v13);
      goto LABEL_11;
    }
    Swift::String v43 = Data.base64EncodedString(options:)(0);
    object = v43._object;
    uint64_t countAndFlagsBits = v43._countAndFlagsBits;
  }
  uint64_t v20 = countAndFlagsBits;
  uint64_t v21 = object;
  uint64_t result = sub_10018AE44(a1, a2);
  uint64_t v22 = 0;
LABEL_12:
  *a5 = a3;
  a5[1] = a4;
  a5[2] = v22;
  a5[3] = v20;
  a5[4] = v21;
  return result;
}

uint64_t sub_1003661FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65707954656D696DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D61726170 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10036633C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661328);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036FF38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v21 = a2;
  sub_1000172F8(&qword_1006612C8);
  char v24 = 1;
  sub_100370130(&qword_1006612D0, &qword_1006612C8, (void (*)(void))sub_10036FB90);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  char v23 = 2;
  uint64_t v20 = v22;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v18 = v21;
  *uint64_t v21 = v9;
  v18[1] = v11;
  v18[2] = v16;
  v18[3] = v15;
  void v18[4] = v14;
  return result;
}

uint64_t sub_10036662C(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100661270);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_10036F9F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

double sub_100366834@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = type metadata accessor for URLQueryItem();
  uint64_t v82 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  unsigned __int8 v80 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_10065B650);
  __chkstk_darwin(v5 - 8);
  id v79 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for URLComponents();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v73 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v17 = URLRequest.httpMethod.getter();
  uint64_t v19 = 5522759;
  if (v18) {
    uint64_t v19 = v17;
  }
  unint64_t v20 = 0xE300000000000000;
  if (v18) {
    unint64_t v20 = v18;
  }
  *(void *)&long long v83 = v19;
  *((void *)&v83 + 1) = v20;
  URLRequest.url.getter();
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v22 = v21(v16, 1, v8);
  uint64_t v75 = v9;
  if (v22 == 1)
  {
    uint64_t v23 = v8;
    sub_10001729C((uint64_t)v16, &qword_10065C3C0);
    uint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
  }
  else
  {
    uint64_t v24 = URL.absoluteString.getter();
    unint64_t v25 = v26;
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v23 = v8;
    v27(v16, v8);
  }
  *(void *)&long long v84 = v24;
  *((void *)&v84 + 1) = v25;
  uint64_t v85 = 0x312E312F50545448;
  *(void *)&long long v86 = 0xE800000000000000;
  uint64_t v28 = _swiftEmptyArrayStorage;
  *((void *)&v86 + 1) = _swiftEmptyArrayStorage;
  uint64_t v29 = URLRequest.allHTTPHeaderFields.getter();
  if (v29)
  {
    uint64_t v28 = sub_100360000(v29);
    swift_bridgeObjectRelease();
  }
  uint64_t v87 = v28;
  *((void *)&v90 + 1) = -1;
  uint64_t v91 = -1;
  uint64_t v30 = a1;
  uint64_t v31 = URLRequest.httpBody.getter();
  if (v32 >> 60 != 15)
  {
    uint64_t v36 = v31;
    unint64_t v37 = v32;
    sub_100012670(v31, v32);
    v38._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
    v38._object = (void *)0xEC00000065707954;
    Swift::String_optional v39 = URLRequest.value(forHTTPHeaderField:)(v38);
    sub_100365D4C(v36, v37, v39.value._countAndFlagsBits, (uint64_t)v39.value._object, &v92);
    sub_10018AE44(v36, v37);
    sub_10001733C((uint64_t)&v92, (uint64_t)&v88, &qword_100661248);
    uint64_t v40 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v30, v40);
LABEL_17:
    uint64_t v47 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  *(void *)&long long v90 = 0;
  long long v89 = 0u;
  long long v88 = 0u;
  URLRequest.url.getter();
  uint64_t v33 = v23;
  uint64_t v34 = a1;
  if (v21(v14, 1, v23) == 1)
  {
    uint64_t v35 = &qword_10065C3C0;
LABEL_16:
    sub_10001729C((uint64_t)v14, v35);
    uint64_t v46 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(v34, v46);
    goto LABEL_17;
  }
  uint64_t v41 = v75;
  uint64_t v42 = v74;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v14, v33);
  uint64_t v14 = v79;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  uint64_t v43 = v33;
  uint64_t v44 = v76;
  uint64_t v45 = v77;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v14, 1, v77) == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    uint64_t v35 = &qword_10065B650;
    goto LABEL_16;
  }
  uint64_t v71 = v43;
  uint64_t v53 = v73;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v73, v14, v45);
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v72 = URLComponents.queryItems.getter();
  if (v72)
  {
    int64_t v54 = *(void *)(v72 + 16);
    if (v54)
    {
      uint64_t v69 = v34;
      uint64_t v70 = a2;
      uint64_t v92 = _swiftEmptyArrayStorage;
      sub_100456098(0, v54, 0);
      id v79 = *(char **)(v82 + 16);
      unint64_t v55 = v72 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
      uint64_t v78 = *(void *)(v82 + 72);
      v82 += 16;
      uint64_t v56 = (void (**)(char *, uint64_t))(v82 - 8);
      do
      {
        uint64_t v57 = v80;
        uint64_t v58 = v81;
        ((void (*)(char *, unint64_t, uint64_t))v79)(v80, v55, v81);
        uint64_t v59 = URLQueryItem.name.getter();
        uint64_t v61 = v60;
        uint64_t v62 = URLQueryItem.value.getter();
        uint64_t v64 = v63;
        (*v56)(v57, v58);
        uint64_t v47 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100456098(0, v47[2] + 1, 1);
          uint64_t v47 = v92;
        }
        unint64_t v66 = v47[2];
        unint64_t v65 = v47[3];
        if (v66 >= v65 >> 1)
        {
          sub_100456098(v65 > 1, v66 + 1, 1);
          uint64_t v47 = v92;
        }
        v47[2] = v66 + 1;
        unint64_t v67 = &v47[4 * v66];
        v67[4] = v59;
        v67[5] = v61;
        v67[6] = v62;
        v67[7] = v64;
        v55 += v78;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
      a2 = v70;
      uint64_t v34 = v69;
      uint64_t v45 = v77;
      uint64_t v44 = v76;
      uint64_t v41 = v75;
      uint64_t v53 = v73;
      uint64_t v42 = v74;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v68 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v34, v68);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v53, v45);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v71);
LABEL_18:
  long long v48 = v84;
  uint64_t v49 = v85;
  uint64_t v50 = v87;
  uint64_t v51 = v91;
  *(_OWORD *)a2 = v83;
  *(_OWORD *)(a2 + 16) = v48;
  *(void *)(a2 + 32) = v49;
  *(_OWORD *)(a2 + 40) = v86;
  *(void *)(a2 + 56) = v50;
  *(void *)(a2 + 64) = v47;
  *(_OWORD *)(a2 + 72) = v88;
  *(_OWORD *)(a2 + 88) = v89;
  double result = *(double *)&v90;
  *(_OWORD *)(a2 + 104) = v90;
  *(void *)(a2 + 120) = v51;
  return result;
}

uint64_t sub_100367068(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646F6874656DLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7372655670747468 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365696B6F6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73726564616568 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7274537972657571 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6174614474736F70 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6953726564616568 && a2 == 0xEA0000000000657ALL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x657A695379646F62 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_10036743C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v55 = sub_1000172F8(&qword_100661288);
  uint64_t v5 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036FA44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v8 = v5;
  uint64_t v53 = a2;
  LOBYTE(v64) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v52 = v9;
  LOBYTE(v64) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = (uint64_t)a1;
  uint64_t v51 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v64) = 2;
  uint64_t v14 = v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v54 = v14;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  sub_1000172F8(&qword_100661298);
  LOBYTE(v56) = 3;
  sub_100370130(&qword_1006612A0, &qword_100661298, (void (*)(void))sub_10036FAE8);
  uint64_t v50 = v18;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v48 = v16;
  uint64_t v19 = v50;
  uint64_t v20 = v64;
  sub_1000172F8(&qword_1006612B0);
  LOBYTE(v56) = 4;
  sub_100370130(&qword_1006612B8, &qword_1006612B0, (void (*)(void))sub_10036FB3C);
  uint64_t v49 = v20;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v64;
  sub_1000172F8(&qword_1006612C8);
  LOBYTE(v56) = 5;
  sub_100370130(&qword_1006612D0, &qword_1006612C8, (void (*)(void))sub_10036FB90);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v41 = v21;
  uint64_t v22 = v64;
  LOBYTE(v56) = 6;
  sub_10036FBE4();
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v42 = v22;
  uint64_t v23 = v64;
  LOBYTE(v64) = 7;
  uint64_t v46 = v23;
  uint64_t v47 = v65;
  uint64_t v44 = v67;
  uint64_t v45 = v66;
  uint64_t v43 = v68;
  sub_10036FC38(v23, v65);
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  char v80 = 8;
  uint64_t v38 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v55);
  *(void *)&long long v56 = v52;
  *((void *)&v56 + 1) = v11;
  *(void *)&long long v57 = v51;
  *((void *)&v57 + 1) = v54;
  uint64_t v24 = v47;
  *(void *)&long long v58 = v48;
  *((void *)&v58 + 1) = v19;
  *(void *)&long long v59 = v49;
  *((void *)&v59 + 1) = v41;
  uint64_t v25 = v46;
  *(void *)&long long v60 = v42;
  *((void *)&v60 + 1) = v46;
  *(void *)&long long v61 = v47;
  *((void *)&v61 + 1) = v45;
  *(void *)&long long v62 = v44;
  *((void *)&v62 + 1) = v43;
  *(void *)&long long v63 = v39;
  *((void *)&v63 + 1) = v38;
  sub_10036FC88((uint64_t)&v56);
  sub_10036FA98(v25, v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = v54;
  swift_bridgeObjectRelease();
  uint64_t v27 = v50;
  swift_bridgeObjectRelease();
  uint64_t v28 = v49;
  swift_bridgeObjectRelease();
  uint64_t v29 = v41;
  swift_bridgeObjectRelease();
  uint64_t v30 = v42;
  swift_bridgeObjectRelease();
  sub_100014524(v12);
  uint64_t v64 = v52;
  uint64_t v65 = v11;
  uint64_t v66 = v51;
  uint64_t v67 = v26;
  uint64_t v68 = v48;
  uint64_t v69 = v27;
  uint64_t v70 = v28;
  uint64_t v71 = v29;
  uint64_t v72 = v30;
  uint64_t v73 = v46;
  uint64_t v74 = v47;
  uint64_t v75 = v45;
  uint64_t v76 = v44;
  uint64_t v77 = v43;
  uint64_t v78 = v39;
  uint64_t v79 = v38;
  uint64_t result = sub_10036FD38((uint64_t)&v64);
  long long v32 = v61;
  uint64_t v33 = v53;
  v53[4] = v60;
  v33[5] = v32;
  long long v34 = v63;
  v33[6] = v62;
  v33[7] = v34;
  long long v35 = v57;
  *uint64_t v33 = v56;
  v33[1] = v35;
  long long v36 = v59;
  uint64_t v33[2] = v58;
  v33[3] = v36;
  return result;
}

uint64_t sub_100367D1C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702521203 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65707954656D696DLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x676E69646F636E65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100367EB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661608);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10037342C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v30 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v29 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v26 = v10;
  char v28 = 2;
  swift_bridgeObjectRetain();
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = v13;
  char v27 = 3;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v14;
  v17(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v25;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v26;
  *a2 = v9;
  a2[1] = v20;
  uint64_t v21 = v24;
  a2[2] = v12;
  a2[3] = v21;
  uint64_t v22 = v23;
  a2[4] = v18;
  a2[5] = v22;
  a2[6] = v16;
  return result;
}

uint64_t sub_100368178(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6554737574617473 && a2 == 0xEA00000000007478 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7372655670747468 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7365696B6F6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73726564616568 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7463657269646572 && a2 == 0xEB000000004C5255 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5373726564616568 && a2 == 0xEB00000000657A69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x657A695379646F62 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_100368574@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661520);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v55 = a1;
  sub_10018AC60(a1, v9);
  sub_100372538();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)v55);
  }
  uint64_t v10 = v6;
  LOBYTE(v65) = 0;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v65) = 1;
  uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v49 = v11;
  LOBYTE(v65) = 2;
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v54 = v13;
  uint64_t v47 = v14;
  uint64_t v16 = v15;
  sub_1000172F8(&qword_100661298);
  LOBYTE(v56) = 3;
  sub_100370130(&qword_1006612A0, &qword_100661298, (void (*)(void))sub_10036FAE8);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v53 = v16;
  uint64_t v17 = v65;
  sub_1000172F8(&qword_1006612B0);
  LOBYTE(v56) = 4;
  sub_100370130(&qword_1006612B8, &qword_1006612B0, (void (*)(void))sub_10036FB3C);
  uint64_t v46 = v17;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v55;
  uint64_t v19 = v65;
  LOBYTE(v56) = 5;
  sub_10037258C();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v52 = v19;
  uint64_t v20 = v67;
  uint64_t v43 = v66;
  uint64_t v44 = v65;
  uint64_t v21 = v69;
  uint64_t v22 = v71;
  uint64_t v41 = v70;
  uint64_t v42 = v68;
  LOBYTE(v65) = 6;
  swift_bridgeObjectRetain();
  uint64_t v51 = v20;
  swift_bridgeObjectRetain();
  uint64_t v45 = v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v50 = v22;
  uint64_t v40 = v23;
  LOBYTE(v65) = 7;
  uint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  char v83 = 8;
  uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  *(void *)&long long v56 = v49;
  *((void *)&v56 + 1) = v48;
  *(void *)&long long v57 = v54;
  *((void *)&v57 + 1) = v47;
  *(void *)&long long v58 = v53;
  *((void *)&v58 + 1) = v46;
  *(void *)&long long v59 = v52;
  *((void *)&v59 + 1) = v44;
  uint64_t v27 = v50;
  *(void *)&long long v60 = v43;
  *((void *)&v60 + 1) = v51;
  *(void *)&long long v61 = v42;
  *((void *)&v61 + 1) = v45;
  *(void *)&long long v62 = v41;
  *((void *)&v62 + 1) = v50;
  *(void *)&long long v63 = v40;
  *((void *)&v63 + 1) = v25;
  uint64_t v37 = v25;
  uint64_t v38 = v26;
  *(void *)&long long v64 = v39;
  *((void *)&v64 + 1) = v26;
  sub_1003703D0((uint64_t)&v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = v52;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v45;
  swift_bridgeObjectRelease();
  uint64_t v30 = v51;
  swift_bridgeObjectRelease();
  uint64_t v31 = v37;
  swift_bridgeObjectRelease();
  sub_100014524(v18);
  uint64_t v65 = v49;
  uint64_t v66 = v48;
  uint64_t v67 = v54;
  uint64_t v68 = v47;
  uint64_t v69 = v53;
  uint64_t v70 = v46;
  uint64_t v71 = v28;
  uint64_t v72 = v44;
  uint64_t v73 = v43;
  uint64_t v74 = v30;
  uint64_t v75 = v42;
  uint64_t v76 = v29;
  uint64_t v77 = v41;
  uint64_t v78 = v27;
  uint64_t v79 = v40;
  uint64_t v80 = v31;
  uint64_t v81 = v39;
  uint64_t v82 = v38;
  uint64_t result = sub_100370294((uint64_t)&v65);
  long long v33 = v63;
  a2[6] = v62;
  a2[7] = v33;
  a2[8] = v64;
  long long v34 = v59;
  a2[2] = v58;
  a2[3] = v34;
  long long v35 = v61;
  a2[4] = v60;
  a2[5] = v35;
  long long v36 = v57;
  *a2 = v56;
  a2[1] = v36;
  return result;
}

uint64_t sub_100368DE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73657269707865 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656363417473616CLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1734431845 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E756F43746968 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100368F9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661408);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100370A38();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v28 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v23 = v9;
  char v27 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v24 = v13;
  uint64_t v22 = v12;
  char v26 = 2;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v14;
  char v25 = 3;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100014524((uint64_t)a1);
  uint64_t v16 = v21;
  swift_bridgeObjectRelease();
  uint64_t v17 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v23;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v17;
  a2[4] = v20;
  a2[5] = v16;
  a2[6] = v15;
  return result;
}

uint64_t sub_1003692AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x655265726F666562 && a2 == 0xED00007473657571;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7165527265746661 && a2 == 0xEC00000074736575)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1003693DC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661538);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1003725E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v47 = 0;
  sub_100372634();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v9 = v42;
  char v47 = 1;
  uint64_t v38 = v40;
  uint64_t v39 = v41;
  uint64_t v36 = v44;
  uint64_t v37 = v43;
  uint64_t v34 = v46;
  uint64_t v35 = v45;
  sub_1003704B8(v40, v41, v42, v43);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v40;
  uint64_t v10 = v41;
  uint64_t v29 = v41;
  uint64_t v30 = v40;
  uint64_t v12 = v42;
  uint64_t v27 = v44;
  uint64_t v28 = v42;
  uint64_t v32 = v45;
  uint64_t v33 = v43;
  uint64_t v31 = v46;
  sub_1003704B8(v38, v39, v9, v37);
  sub_1003704B8(v11, v10, v12, v33);
  uint64_t v13 = v38;
  uint64_t v14 = v37;
  sub_100370244(v38, v39, v9, v37);
  sub_100014524((uint64_t)a1);
  sub_100370244(v13, v39, v9, v14);
  uint64_t v15 = v29;
  uint64_t v16 = v30;
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  uint64_t v20 = v32;
  uint64_t v19 = v33;
  uint64_t result = sub_100370244(v30, v29, v28, v33);
  uint64_t v22 = v39;
  *a2 = v38;
  a2[1] = v22;
  uint64_t v23 = v37;
  a2[2] = v9;
  a2[3] = v23;
  uint64_t v24 = v35;
  a2[4] = v36;
  a2[5] = v24;
  a2[6] = v34;
  a2[7] = v16;
  a2[8] = v15;
  a2[9] = v18;
  a2[10] = v19;
  a2[11] = v17;
  uint64_t v25 = v31;
  a2[12] = v20;
  a2[13] = v25;
  return result;
}

void sub_100369720(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v186 = *(void *)(v4 - 8);
  uint64_t v187 = v4;
  __chkstk_darwin(v4);
  v185 = (char *)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_10065B8F0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  v180 = (char *)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v168 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  v191 = (char *)&v168 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v197 = (char *)&v168 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v181 = (char *)&v168 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v182 = (uint64_t)&v168 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v190 = (char *)&v168 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v198 = (char *)&v168 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v183 = (char *)&v168 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v184 = (uint64_t)&v168 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v188 = (char *)&v168 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v199 = (uint64_t *)((char *)&v168 - v31);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v168 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v168 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  uint64_t v40 = (char *)&v168 - v39;
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v168 - v41;
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v44 = __chkstk_darwin(v43);
  uint64_t v45 = __chkstk_darwin(v44);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v47 = __chkstk_darwin(v46);
  uint64_t v48 = __chkstk_darwin(v47);
  uint64_t v49 = __chkstk_darwin(v48);
  __chkstk_darwin(v49);
  uint64_t v51 = __chkstk_darwin((char *)&v168 - v50);
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v168 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v65 = (char *)&v168 - v64;
  if (!a1)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    char v202 = 1;
    char v201 = 1;
    char v200 = 1;
    long long v79 = 0uLL;
LABEL_71:
    char v165 = v202;
    char v166 = v201;
    char v167 = v200;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = v165;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = v166;
    *(void *)(a2 + 32) = v76;
    *(unsigned char *)(a2 + 40) = v167;
    *(void *)(a2 + 48) = v77;
    *(void *)(a2 + 56) = v78;
    *(_OWORD *)(a2 + 64) = v79;
    *(unsigned char *)(a2 + 80) = a1 == 0;
    return;
  }
  uint64_t v172 = v60;
  uint64_t v177 = v59;
  uint64_t v171 = v58;
  uint64_t v174 = v57;
  uint64_t v175 = v56;
  uint64_t v176 = v55;
  uint64_t v170 = v63;
  uint64_t v179 = v62;
  v173 = v11;
  v195 = a1;
  uint64_t v196 = v61;
  id v189 = a1;
  id v66 = [v189 transactionMetrics];
  sub_10018B1DC(0, &qword_100661238);
  unint64_t v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v67 >> 62))
  {
    if (*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_68:
    swift_bridgeObjectRelease();
    char v202 = 1;
    char v201 = 1;
    goto LABEL_69;
  }
  swift_bridgeObjectRetain();
  uint64_t v160 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v160) {
    goto LABEL_68;
  }
LABEL_4:
  if ((v67 & 0xC000000000000001) != 0)
  {
    id v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    id v68 = *(id *)(v67 + 32);
  }
  uint64_t v69 = v68;
  swift_bridgeObjectRelease();
  char v202 = 1;
  char v201 = 1;
  if (!v69)
  {
LABEL_69:
    v161 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v196 + 56);
    v161(v42, 1, 1, v43);
    sub_10001729C((uint64_t)v42, &qword_10065B8F0);
    char v200 = 0;
    uint64_t v162 = (void (*)(void, void, void))v199;
    v161((char *)v199, 1, 1, v43);
    sub_10001729C((uint64_t)v162, &qword_10065B8F0);
    uint64_t v163 = (uint64_t)v198;
    v161(v198, 1, 1, v43);
    sub_10001729C(v163, &qword_10065B8F0);
    uint64_t v142 = (uint64_t)v197;
    v161(v197, 1, 1, v43);
    uint64_t v78 = -1;
    uint64_t v76 = -1;
    uint64_t v77 = -1;
    a1 = v195;
    goto LABEL_70;
  }
  id v178 = v69;
  id v70 = [v69 connectStartDate];
  uint64_t v71 = v196;
  if (v70)
  {
    uint64_t v72 = v70;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
    uint64_t v74 = v40;
    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v196 + 56);
    uint64_t v74 = v40;
    uint64_t v75 = 1;
  }
  v194 = v73;
  v73(v74, v75, 1, v43);
  sub_10001733C((uint64_t)v40, (uint64_t)v42, &qword_10065B8F0);
  v192 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
  uint64_t v193 = v71 + 48;
  if (v192(v42, 1, v43) == 1)
  {
    sub_10001729C((uint64_t)v42, &qword_10065B8F0);
    uint64_t v169 = -1;
    a1 = v195;
LABEL_19:
    uint64_t v85 = (uint64_t)v190;
    uint64_t v86 = (uint64_t)v191;
    id v87 = v178;
    uint64_t v88 = (uint64_t)v188;
    goto LABEL_24;
  }
  uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
  v80(v65, v42, v43);
  id v81 = [v178 connectEndDate];
  if (v81)
  {
    uint64_t v82 = v81;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v83 = 0;
  }
  else
  {
    uint64_t v83 = 1;
  }
  uint64_t v84 = v196;
  v194(v34, v83, 1, v43);
  sub_10001733C((uint64_t)v34, (uint64_t)v37, &qword_10065B8F0);
  if (v192(v37, 1, v43) == 1)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v43);
    sub_10001729C((uint64_t)v37, &qword_10065B8F0);
    uint64_t v169 = -1;
    a1 = v195;
    uint64_t v71 = v84;
    goto LABEL_19;
  }
  v80(v54, v37, v43);
  long long v89 = *(void (**)(uint64_t, char *, uint64_t))(v84 + 16);
  v89(v175, v65, v43);
  v89(v176, v54, v43);
  long long v90 = v185;
  DateInterval.init(start:end:)();
  DateInterval.duration.getter();
  double v92 = v91;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v90, v187);
  id v93 = *(void (**)(char *, uint64_t))(v84 + 8);
  v93(v54, v43);
  v93(v65, v43);
  if ((~*(void *)&v92 & 0x7FF0000000000000) == 0) {
    goto LABEL_74;
  }
  uint64_t v71 = v84;
  uint64_t v88 = (uint64_t)v188;
  if (v92 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  a1 = v195;
  uint64_t v85 = (uint64_t)v190;
  uint64_t v86 = (uint64_t)v191;
  id v87 = v178;
  if (v92 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v169 = (uint64_t)v92;
LABEL_24:
  char v200 = 0;
  id v94 = [v87 requestStartDate];
  if (v94)
  {
    uint64_t v95 = v94;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v96 = 0;
  }
  else
  {
    uint64_t v96 = 1;
  }
  id v97 = (char *)(v71 + 56);
  v194((char *)v88, v96, 1, v43);
  id v98 = (char *)v199;
  sub_10001733C(v88, (uint64_t)v199, &qword_10065B8F0);
  if (v192(v98, 1, v43) == 1)
  {
    sub_10001729C((uint64_t)v98, &qword_10065B8F0);
    uint64_t v77 = -1;
    goto LABEL_38;
  }
  v199 = *(void **)(v71 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v199)(v177, v98, v43);
  id v99 = [v87 requestEndDate];
  if (v99)
  {
    uint64_t v100 = v99;
    uint64_t v101 = v85;
    uint64_t v102 = v71;
    uint64_t v103 = v86;
    uint64_t v104 = v183;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v105 = v104;
    uint64_t v86 = v103;
    uint64_t v71 = v102;
    uint64_t v85 = v101;
    uint64_t v106 = 0;
  }
  else
  {
    uint64_t v106 = 1;
    uint64_t v105 = v183;
  }
  v194(v105, v106, 1, v43);
  uint64_t v107 = (uint64_t)v105;
  uint64_t v108 = v184;
  sub_10001733C(v107, v184, &qword_10065B8F0);
  if (v192((char *)v108, 1, v43) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v177, v43);
    sub_10001729C(v108, &qword_10065B8F0);
    uint64_t v77 = -1;
    id v87 = v178;
    goto LABEL_38;
  }
  v188 = v97;
  uint64_t v109 = v172;
  ((void (*)(uint64_t, uint64_t, uint64_t))v199)(v172, v108, v43);
  id v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
  uint64_t v111 = v177;
  v110(v175, v177, v43);
  v110(v176, v109, v43);
  unint64_t v112 = v185;
  DateInterval.init(start:end:)();
  DateInterval.duration.getter();
  double v114 = v113;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v112, v187);
  id v115 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  v115(v109, v43);
  v115(v111, v43);
  if ((~*(void *)&v114 & 0x7FF0000000000000) == 0) {
    goto LABEL_77;
  }
  if (v114 <= -9.22337204e18)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  id v87 = v178;
  id v97 = v188;
  uint64_t v85 = (uint64_t)v190;
  uint64_t v86 = (uint64_t)v191;
  if (v114 >= 9.22337204e18)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v77 = (uint64_t)v114;
LABEL_38:
  id v116 = [v87 responseStartDate];
  if (v116)
  {
    os_log_type_t v117 = v116;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v118 = 0;
  }
  else
  {
    uint64_t v118 = 1;
  }
  v194((char *)v85, v118, 1, v43);
  uint64_t v119 = (uint64_t)v198;
  sub_10001733C(v85, (uint64_t)v198, &qword_10065B8F0);
  if (v192((char *)v119, 1, v43) != 1)
  {
    v199 = (void *)v77;
    v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
    v120(v174, v119, v43);
    id v121 = [v87 requestEndDate];
    if (v121)
    {
      v122 = v121;
      uint64_t v123 = v71;
      uint64_t v124 = v86;
      os_log_type_t v125 = v97;
      BOOL v126 = v181;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v127 = v126;
      id v97 = v125;
      uint64_t v86 = v124;
      uint64_t v71 = v123;
      uint64_t v128 = 0;
    }
    else
    {
      uint64_t v128 = 1;
      uint64_t v127 = v181;
    }
    v194(v127, v128, 1, v43);
    uint64_t v129 = (uint64_t)v127;
    uint64_t v130 = v182;
    sub_10001733C(v129, v182, &qword_10065B8F0);
    if (v192((char *)v130, 1, v43) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v174, v43);
      sub_10001729C(v130, &qword_10065B8F0);
      uint64_t v78 = -1;
      a1 = v195;
      uint64_t v131 = &selRef_initWithOptions_;
      uint64_t v77 = (uint64_t)v199;
      goto LABEL_53;
    }
    v188 = v97;
    uint64_t v132 = v171;
    v120(v171, v130, v43);
    v133 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    v133(v175, v132, v43);
    uint64_t v134 = v174;
    v133(v176, v174, v43);
    v135 = v185;
    DateInterval.init(start:end:)();
    DateInterval.duration.getter();
    double v137 = v136;
    (*(void (**)(char *, uint64_t))(v186 + 8))(v135, v187);
    v138 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v138(v132, v43);
    v138(v134, v43);
    uint64_t v77 = (uint64_t)v199;
    if ((~*(void *)&v137 & 0x7FF0000000000000) != 0)
    {
      if (v137 > -9.22337204e18)
      {
        a1 = v195;
        id v87 = v178;
        uint64_t v86 = (uint64_t)v191;
        if (v137 < 9.22337204e18)
        {
          uint64_t v78 = (uint64_t)v137;
          goto LABEL_52;
        }
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  sub_10001729C(v119, &qword_10065B8F0);
  uint64_t v78 = -1;
LABEL_52:
  uint64_t v131 = &selRef_initWithOptions_;
LABEL_53:
  id v139 = [v87 v131[115]];
  if (v139)
  {
    id v140 = v139;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v141 = 0;
  }
  else
  {
    uint64_t v141 = 1;
  }
  v194((char *)v86, v141, 1, v43);
  uint64_t v142 = (uint64_t)v197;
  sub_10001733C(v86, (uint64_t)v197, &qword_10065B8F0);
  if (v192((char *)v142, 1, v43) == 1)
  {

    uint64_t v76 = v169;
LABEL_70:
    id v164 = v189;

    sub_10001729C(v142, &qword_10065B8F0);
    *(void *)&long long v79 = -1;
    *((void *)&v79 + 1) = -1;
    goto LABEL_71;
  }
  v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
  v143(v179, v142, v43);
  id v144 = [v87 responseEndDate];
  if (v144)
  {
    v145 = v144;
    v146 = v180;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v147 = v146;
    uint64_t v148 = 0;
  }
  else
  {
    uint64_t v148 = 1;
    os_log_type_t v147 = v180;
  }
  v194(v147, v148, 1, v43);
  uint64_t v149 = (uint64_t)v147;
  uint64_t v150 = (uint64_t)v173;
  sub_10001733C(v149, (uint64_t)v173, &qword_10065B8F0);
  if (v192((char *)v150, 1, v43) == 1)
  {

    id v151 = v189;
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v179, v43);
    sub_10001729C(v150, &qword_10065B8F0);
    *(void *)&long long v79 = -1;
    *((void *)&v79 + 1) = -1;
    a1 = v195;
    uint64_t v76 = v169;
    goto LABEL_71;
  }
  uint64_t v152 = v170;
  v143(v170, v150, v43);
  uint64_t v153 = v196;
  v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16);
  v154(v175, v179, v43);
  v154(v176, v152, v43);
  id v155 = v185;
  DateInterval.init(start:end:)();
  DateInterval.duration.getter();
  double v157 = v156;

  id v158 = v189;
  (*(void (**)(char *, uint64_t))(v186 + 8))(v155, v187);
  v159 = *(void (**)(uint64_t, uint64_t))(v153 + 8);
  v159(v152, v43);
  v159(v179, v43);
  if ((~*(void *)&v157 & 0x7FF0000000000000) == 0) {
    goto LABEL_83;
  }
  if (v157 <= -9.22337204e18)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  a1 = v195;
  uint64_t v76 = v169;
  if (v157 < 9.22337204e18)
  {
    *((void *)&v79 + 1) = -1;
    *(void *)&long long v79 = (uint64_t)v157;
    goto LABEL_71;
  }
LABEL_85:
  __break(1u);
}

uint64_t sub_10036AA8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64656B636F6C62 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7564900 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7463656E6E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684956531 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953063287 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65766965636572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 7107443 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10036AD34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661550);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100372688();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v36 = 0;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v11 = v10;
  char v35 = 1;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v28 = v13;
  uint64_t v29 = v12;
  char v34 = 2;
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v26 = v15;
  uint64_t v27 = v14;
  char v33 = 3;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 4;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  char v31 = 5;
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 6;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v8;
  char v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  uint64_t result = sub_100014524((uint64_t)a1);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  *(void *)(a2 + 16) = v29;
  *(unsigned char *)(a2 + 24) = v28 & 1;
  *(void *)(a2 + 32) = v27;
  *(unsigned char *)(a2 + 40) = v26 & 1;
  uint64_t v21 = v24;
  *(void *)(a2 + 48) = v25;
  *(void *)(a2 + 56) = v21;
  *(void *)(a2 + 64) = v23;
  *(void *)(a2 + 72) = v16;
  *(unsigned char *)(a2 + 80) = v19 & 1;
  return result;
}

uint64_t sub_10036B000(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73657269707865 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10036B1F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_1006614F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100372490();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v38 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v32 = v9;
  char v37 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v13;
  uint64_t v29 = v12;
  char v36 = 2;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v35 = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v15;
  uint64_t v27 = v16;
  char v34 = 4;
  uint64_t v18 = v17;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v19;
  v22(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v30;
  swift_bridgeObjectRelease();
  uint64_t v24 = v33;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v32;
  a2[1] = v11;
  a2[2] = v29;
  a2[3] = v24;
  a2[4] = v28;
  a2[5] = v23;
  a2[6] = v27;
  a2[7] = v18;
  a2[8] = v31;
  a2[9] = v21;
  return result;
}

uint64_t sub_10036B5D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10036B6B4(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_1000172F8(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  sub_10018AC60(a1, v9);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = v13;
    char v15 = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v6);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

double sub_10036B8CC@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a3;
  unint64_t v78 = a4;
  id v80 = a2;
  uint64_t v83 = a1;
  uint64_t v8 = type metadata accessor for URLRequest();
  uint64_t v81 = *(void *)(v8 - 8);
  uint64_t v82 = v8;
  __chkstk_darwin(v8);
  uint64_t v76 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v10 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  char v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DateInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v79 = a5;
  if (a5)
  {
    id v20 = [a5 taskInterval];
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.start.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    static Date.now.getter();
  }
  sub_100362BD0((uint64_t)v12);
  uint64_t v21 = Date.ISO8601Format(_:)();
  uint64_t v72 = v22;
  uint64_t v73 = v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v75);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v74);
  uint64_t v23 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v76, v83, v82);
  sub_100366834(v23, (uint64_t)v92);
  self;
  uint64_t v24 = v80;
  uint64_t v25 = (void *)swift_dynamicCastObjCClassUnconditional();
  unint64_t v26 = v78;
  id v27 = v24;
  uint64_t v28 = v77;
  sub_100012670(v77, v26);
  id v80 = [v25 statusCode];
  id v29 = objc_msgSend(self, "localizedStringForStatusCode:", objc_msgSend(v25, "statusCode"));
  uint64_t v76 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  id v32 = [v25 allHeaderFields];
  uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v75 = sub_100360238(v33);
  swift_bridgeObjectRelease();
  uint64_t v34 = 0;
  char v35 = (void *)v79;
  switch(v26 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v28), v28))
      {
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10036BFE4);
      }
      uint64_t v34 = HIDWORD(v28) - (int)v28;
LABEL_9:
      sub_100012670(v28, v26);
LABEL_10:
      uint64_t v71 = v34;
      uint64_t v74 = v31;
      id v38 = v27;
      id v39 = v25;
      NSString v40 = String._bridgeToObjectiveC()();
      id v41 = [v39 valueForHTTPHeaderField:v40];

      if (v41)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v43;
        uint64_t v70 = v42;
      }
      else
      {
        unint64_t v69 = 0xE000000000000000;
        uint64_t v70 = 0;
      }
      Swift::String v44 = Data.base64EncodedString(options:)(0);
      object = v44._object;
      uint64_t countAndFlagsBits = v44._countAndFlagsBits;
      sub_100013510(v28, v26);

      sub_100013510(v28, v26);
      sub_100369720(v35, (uint64_t)&v93);
      uint64_t v45 = v93;
      char v46 = v94;
      char v47 = v96;
      uint64_t v65 = v97;
      char v48 = v98;
      long long v79 = v99;
      uint64_t v77 = v101;
      unint64_t v78 = v100;
      char v49 = v102;
      uint64_t v63 = v95;
      uint64_t v64 = (_DWORD *)(a6 + 449);
      id v68 = (_DWORD *)(a6 + 489);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v82);
      long long v50 = v92[5];
      *(_OWORD *)(a6 + 88) = v92[4];
      *(_OWORD *)(a6 + 104) = v50;
      long long v51 = v92[7];
      *(_OWORD *)(a6 + 120) = v92[6];
      *(_OWORD *)(a6 + 136) = v51;
      long long v52 = v92[1];
      *(_OWORD *)(a6 + 24) = v92[0];
      *(_OWORD *)(a6 + 40) = v52;
      long long v53 = v92[3];
      *(_OWORD *)(a6 + 56) = v92[2];
      *(_OWORD *)(a6 + 72) = v53;
      char v91 = v46;
      char v89 = v47;
      char v87 = v48;
      char v85 = v49;
      uint64_t v54 = v74;
      uint64_t v55 = v72;
      *(void *)a6 = v73;
      *(void *)(a6 + 8) = v55;
      *(void *)(a6 + 16) = -1;
      uint64_t v56 = v76;
      *(void *)(a6 + 152) = v80;
      *(void *)(a6 + 160) = v56;
      *(void *)(a6 + 168) = v54;
      *(void *)(a6 + 176) = 0x312E312F50545448;
      *(void *)(a6 + 184) = 0xE800000000000000;
      *(void *)(a6 + 192) = _swiftEmptyArrayStorage;
      uint64_t v57 = v71;
      *(void *)(a6 + 200) = v75;
      *(void *)(a6 + 208) = v57;
      unint64_t v58 = v69;
      *(void *)(a6 + 216) = v70;
      *(void *)(a6 + 224) = v58;
      uint64_t v59 = object;
      *(void *)(a6 + 232) = countAndFlagsBits;
      *(void *)(a6 + 240) = v59;
      *(_OWORD *)(a6 + 248) = xmmword_1005AB280;
      *(void *)(a6 + 264) = 0;
      *(void *)(a6 + 272) = 0xE000000000000000;
      *(void *)(a6 + 280) = -1;
      *(void *)(a6 + 288) = -1;
      double result = 0.0;
      *(_OWORD *)(a6 + 296) = 0u;
      *(_OWORD *)(a6 + 312) = 0u;
      *(_OWORD *)(a6 + 328) = 0u;
      *(_OWORD *)(a6 + 344) = 0u;
      *(_OWORD *)(a6 + 360) = 0u;
      *(_OWORD *)(a6 + 376) = 0u;
      *(_OWORD *)(a6 + 392) = 0u;
      *(void *)(a6 + 408) = v45;
      *(unsigned char *)(a6 + 416) = v91;
      *(_DWORD *)(a6 + 417) = *(_DWORD *)v90;
      *(_DWORD *)(a6 + 420) = *(_DWORD *)&v90[3];
      uint64_t v61 = v64;
      *(void *)(a6 + 424) = v63;
      *(unsigned char *)(a6 + 432) = v89;
      *(_DWORD *)(a6 + 436) = *(_DWORD *)&v88[3];
      *(_DWORD *)(a6 + 433) = *(_DWORD *)v88;
      *(void *)(a6 + 440) = v65;
      *(unsigned char *)(a6 + 448) = v87;
      *(_DWORD *)(a6 + 452) = *(_DWORD *)&v86[3];
      *uint64_t v61 = *(_DWORD *)v86;
      *(_OWORD *)(a6 + 456) = v79;
      uint64_t v62 = v77;
      *(void *)(a6 + 472) = v78;
      *(void *)(a6 + 480) = v62;
      *(unsigned char *)(a6 + 488) = v85;
      LODWORD(v62) = *(_DWORD *)v84;
      *(_DWORD *)(a6 + 492) = *(_DWORD *)&v84[3];
      *id v68 = v62;
      *(_OWORD *)(a6 + 496) = 0u;
      *(_OWORD *)(a6 + 512) = 0u;
      return result;
    case 2uLL:
      uint64_t v37 = *(void *)(v28 + 16);
      uint64_t v36 = *(void *)(v28 + 24);
      uint64_t v34 = v36 - v37;
      if (!__OFSUB__(v36, v37)) {
        goto LABEL_9;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v34 = BYTE6(v26);
      goto LABEL_10;
  }
}

uint64_t sub_10036BFF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4464657472617473 && a2 == 0xEF656D6954657461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701669236 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74736575716572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6568636163 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73676E696D6974 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x5049726576726573 && a2 == 0xEF73736572646441 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x697463656E6E6F63 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

void *sub_10036C37C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_1006613B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v172 = a1;
  sub_10018AC60(a1, v9);
  sub_1003701F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)sub_100014524((uint64_t)v172);
  }
  uint64_t v10 = v6;
  uint64_t v59 = a2;
  LOBYTE(v61) = 0;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  LOBYTE(v61) = 1;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  char v138 = 2;
  sub_100370328();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v134 = v143;
  long long v135 = v144;
  long long v136 = v145;
  long long v137 = v146;
  long long v130 = v139;
  long long v131 = v140;
  long long v132 = v141;
  long long v133 = v142;
  long long v164 = v139;
  long long v165 = v140;
  long long v166 = v141;
  long long v167 = v142;
  long long v170 = v145;
  long long v171 = v146;
  long long v168 = v143;
  long long v169 = v144;
  char v120 = 3;
  sub_10036FC88((uint64_t)&v130);
  sub_10037037C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v117 = v127;
  long long v118 = v128;
  long long v119 = v129;
  long long v113 = v123;
  long long v114 = v124;
  long long v116 = v126;
  long long v115 = v125;
  long long v112 = v122;
  long long v111 = v121;
  long long v161 = v127;
  long long v162 = v128;
  long long v163 = v129;
  long long v157 = v123;
  long long v158 = v124;
  long long v160 = v126;
  long long v159 = v125;
  long long v156 = v122;
  long long v155 = v121;
  LOBYTE(v60[0]) = 4;
  sub_1003703D0((uint64_t)&v111);
  sub_100370464();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v45 = v14;
  uint64_t v57 = *((void *)&v65 + 1);
  uint64_t v58 = v65;
  uint64_t v56 = v66;
  uint64_t v50 = *((void *)&v67 + 1);
  uint64_t v15 = v67;
  uint64_t v51 = *((void *)&v66 + 1);
  uint64_t v16 = v68;
  LOBYTE(v60[0]) = 5;
  uint64_t v52 = v61;
  long long v53 = v62;
  long long v54 = v63;
  long long v55 = v64;
  sub_1003704B8(v61, v62, *((uint64_t *)&v62 + 1), v63);
  uint64_t v48 = v15;
  uint64_t v49 = v16;
  sub_1003704B8(v58, v57, v56, v51);
  sub_100370508();
  uint64_t v47 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v38 = v61;
  uint64_t v39 = *((void *)&v62 + 1);
  uint64_t v40 = *((void *)&v63 + 1);
  uint64_t v44 = *((void *)&v64 + 1);
  uint64_t v42 = *((void *)&v65 + 1);
  uint64_t v43 = v65;
  uint64_t v41 = v66;
  LODWORD(v15) = BYTE8(v66);
  int v36 = v63;
  int v37 = v62;
  char v154 = v62;
  char v152 = v63;
  int v35 = v64;
  char v150 = v64;
  char v148 = BYTE8(v66);
  LOBYTE(v61) = 6;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v33 = v15;
  uint64_t v34 = v17;
  char v110 = 7;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v46 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v47 = v20;
  uint64_t v32 = v22;
  v21(v8, v5);
  LOBYTE(v60[26]) = v37;
  LOBYTE(v60[27]) = v36;
  LOBYTE(v60[28]) = v35;
  BYTE8(v60[30]) = v33;
  *(_OWORD *)((char *)&v60[16] + 8) = v118;
  *(_OWORD *)((char *)&v60[17] + 8) = v119;
  *(_OWORD *)((char *)&v60[8] + 8) = v137;
  *(_OWORD *)((char *)&v60[14] + 8) = v116;
  *(_OWORD *)((char *)&v60[15] + 8) = v117;
  *(_OWORD *)((char *)&v60[10] + 8) = v112;
  *(_OWORD *)((char *)&v60[11] + 8) = v113;
  *(_OWORD *)((char *)&v60[12] + 8) = v114;
  *(_OWORD *)((char *)&v60[13] + 8) = v115;
  *(_OWORD *)((char *)&v60[9] + 8) = v111;
  *(_OWORD *)((char *)&v60[5] + 8) = v134;
  *(_OWORD *)((char *)&v60[6] + 8) = v135;
  *(_OWORD *)((char *)&v60[7] + 8) = v136;
  *(_OWORD *)((char *)&v60[1] + 8) = v130;
  *(_OWORD *)((char *)&v60[2] + 8) = v131;
  *(_OWORD *)((char *)&v60[3] + 8) = v132;
  *(void *)&v60[0] = v11;
  *((void *)&v60[0] + 1) = v13;
  *(void *)&v60[1] = v45;
  *(_OWORD *)((char *)&v60[4] + 8) = v133;
  *((void *)&v60[18] + 1) = v52;
  v60[19] = v53;
  v60[20] = v54;
  v60[21] = v55;
  uint64_t v23 = v56;
  uint64_t v24 = v57;
  *(void *)&v60[22] = v58;
  *((void *)&v60[22] + 1) = v57;
  *(void *)&v60[23] = v56;
  *((void *)&v60[23] + 1) = v51;
  uint64_t v25 = v48;
  *(void *)&v60[24] = v48;
  *((void *)&v60[24] + 1) = v50;
  uint64_t v26 = v19;
  uint64_t v27 = v49;
  *(void *)&v60[25] = v49;
  *((void *)&v60[25] + 1) = v38;
  *((void *)&v60[26] + 1) = v39;
  *((void *)&v60[27] + 1) = v40;
  *((void *)&v60[28] + 1) = v44;
  *(void *)&v60[29] = v43;
  *((void *)&v60[29] + 1) = v42;
  *(void *)&v60[30] = v41;
  *(void *)&v60[31] = v34;
  *((void *)&v60[31] + 1) = v26;
  *(void *)&v60[32] = v47;
  *((void *)&v60[32] + 1) = v32;
  sub_10037055C(v60);
  swift_bridgeObjectRelease();
  sub_100370244(v52, v53, *((uint64_t *)&v53 + 1), v54);
  uint64_t v28 = v24;
  uint64_t v29 = v50;
  uint64_t v30 = v51;
  sub_100370244(v58, v28, v23, v51);
  sub_100370294((uint64_t)&v111);
  sub_10036FD38((uint64_t)&v130);
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)v172);
  long long v78 = v162;
  long long v79 = v163;
  long long v67 = v168;
  long long v68 = v169;
  long long v69 = v170;
  long long v70 = v171;
  long long v63 = v164;
  long long v64 = v165;
  long long v65 = v166;
  long long v66 = v167;
  long long v76 = v160;
  long long v77 = v161;
  long long v72 = v156;
  long long v73 = v157;
  long long v74 = v158;
  long long v75 = v159;
  uint64_t v61 = v11;
  *(void *)&long long v62 = v13;
  long long v71 = v155;
  *((void *)&v62 + 1) = v45;
  uint64_t v80 = v52;
  long long v81 = v53;
  long long v82 = v54;
  long long v83 = v55;
  uint64_t v84 = v58;
  uint64_t v85 = v57;
  uint64_t v86 = v23;
  uint64_t v87 = v30;
  uint64_t v88 = v25;
  uint64_t v89 = v29;
  uint64_t v90 = v27;
  uint64_t v91 = v38;
  char v92 = v154;
  *(_DWORD *)uint64_t v93 = *(_DWORD *)v153;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v153[3];
  uint64_t v94 = v39;
  char v95 = v152;
  *(_DWORD *)char v96 = *(_DWORD *)v151;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v151[3];
  uint64_t v97 = v40;
  char v98 = v150;
  *(_DWORD *)long long v99 = *(_DWORD *)v149;
  *(_DWORD *)&uint64_t v99[3] = *(_DWORD *)&v149[3];
  uint64_t v100 = v44;
  uint64_t v101 = v43;
  uint64_t v102 = v42;
  uint64_t v103 = v41;
  char v104 = v148;
  *(_DWORD *)uint64_t v105 = *(_DWORD *)v147;
  *(_DWORD *)&v105[3] = *(_DWORD *)&v147[3];
  uint64_t v106 = v34;
  uint64_t v107 = v46;
  uint64_t v108 = v47;
  uint64_t v109 = v32;
  sub_100370720(&v61);
  return memcpy(v59, v60, 0x210uLL);
}

uint64_t sub_10036CF2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  uint64_t v18 = a3;
  unint64_t v19 = a4;
  uint64_t v10 = type metadata accessor for URLRequest();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100661230);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1005A3EC0;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  id v15 = a5;
  sub_10036B8CC((uint64_t)v13, a2, v18, v19, a5, (uint64_t)v20);
  memcpy((void *)(v14 + 32), v20, 0x210uLL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  *a6 = 3288625;
  a6[1] = 0xE300000000000000;
  a6[2] = 0xD000000000000016;
  a6[3] = 0x80000001005B95A0;
  a6[4] = 3157553;
  a6[5] = 0xE300000000000000;
  a6[6] = v14;
  return result;
}

uint64_t sub_10036D0C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F7461657263 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10036D220@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661360);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036FFE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  LOBYTE(v24) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v23 = v9;
  char v28 = 1;
  sub_100370034();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v25;
  uint64_t v13 = v27;
  uint64_t v18 = v26;
  uint64_t v19 = v24;
  uint64_t v20 = sub_1000172F8(&qword_100661378);
  char v28 = 2;
  sub_100370130(&qword_100661380, &qword_100661378, (void (*)(void))sub_100370088);
  uint64_t v22 = v12;
  swift_bridgeObjectRetain();
  uint64_t v21 = v13;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v15 = v21;
  swift_bridgeObjectRelease();
  uint64_t v16 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v23;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v15;
  a2[6] = v14;
  return result;
}

uint64_t sub_10036D578(char *a1)
{
  long long v70 = a1;
  uint64_t v64 = type metadata accessor for URL.DirectoryHint();
  long long v62 = *(void (***)(char *, uint64_t))(v64 - 8);
  __chkstk_darwin(v64);
  long long v63 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for NSScanner.NumberRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v51 - v17;
  if (qword_10065B100 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10000E6AC(v9, (uint64_t)qword_100661210);
  sub_100017238(v19, (uint64_t)v11, &qword_10065C3C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_10001729C((uint64_t)v11, &qword_10065C3C0);
  }
  uint64_t v56 = v16;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  id v55 = self;
  uint64_t v21 = v18;
  uint64_t v22 = v13;
  id v23 = [v55 defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v23 enumeratorAtPath:v24];

  if (!v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v21, v12);
  }
  uint64_t v57 = v22;
  Date.timeIntervalSinceReferenceDate.getter();
  double v27 = v26;
  id v54 = v25;
  NSEnumerator.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v76)
  {
    unint64_t v69 = (unint64_t)"w-form-urlencoded";
    unint64_t v28 = 22;
    if ((0x80000001005BE530 & 0x2000000000000000) != 0) {
      unint64_t v28 = (0x80000001005BE530 >> 56) & 0xF;
    }
    unint64_t v68 = v28;
    unsigned int v61 = enum case for NSScanner.NumberRepresentation.decimal(_:);
    uint64_t v60 = (void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v59 = (void (**)(char *, uint64_t))(v3 + 8);
    unsigned int v53 = enum case for URL.DirectoryHint.inferFromPath(_:);
    uint64_t v52 = (void (**)(char *, void, uint64_t))(v62 + 13);
    ++v62;
    uint64_t v51 = (void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v58 = v8;
    uint64_t v67 = v12;
    long long v70 = (char *)&type metadata for Any + 8;
    long long v71 = v21;
    do
    {
      sub_1001C5DD4(&v75, v74);
      uint64_t v29 = swift_dynamicCast();
      if (v29)
      {
        uint64_t v31 = v72;
        unint64_t v30 = v73;
        *(void *)&v74[0] = 95;
        *((void *)&v74[0] + 1) = 0xE100000000000000;
        __chkstk_darwin(v29);
        uint64_t v50 = v74;
        swift_bridgeObjectRetain();
        uint64_t v32 = (void *)sub_100365610(0x7FFFFFFFFFFFFFFFLL, 1, sub_10036DF84, (uint64_t)(&v51 - 4), v31, v30);
        if (v32[2] == 2)
        {
          if (v32[6] == 0xD000000000000016
            && (v32[7] == (v69 | 0x8000000000000000) ? (BOOL v33 = v32[4] >> 16 == 0) : (BOOL v33 = 0),
                v33 ? (BOOL v34 = v32[5] >> 16 == v68) : (BOOL v34 = 0),
                v34)
            || (LOBYTE(v50) = 0, (_stringCompareInternal(_:_:_:_:expecting:)() & 1) != 0))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            static String._fromSubstring(_:)();
            swift_bridgeObjectRelease();
            id v35 = objc_allocWithZone((Class)NSScanner);
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v37 = [v35 initWithString:v36];

            (*v60)(v5, v61, v2);
            double v38 = COERCE_DOUBLE(NSScanner.scanDouble(representation:)());
            LOBYTE(v35) = v39;
            (*v59)(v5, v2);
            if ((v35 & 1) != 0 || v27 < v38)
            {
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
            id v40 = [v55 defaultManager];
            *(void *)&v74[0] = v31;
            *((void *)&v74[0] + 1) = v30;
            uint64_t v41 = v63;
            uint64_t v42 = v64;
            (*v52)(v63, v53, v64);
            sub_100017B14();
            uint64_t v43 = v56;
            URL.appending<A>(component:directoryHint:)();
            (*v62)(v41, v42);
            swift_bridgeObjectRelease();
            URL._bridgeToObjectiveC()(v44);
            uint64_t v46 = v45;
            (*v51)(v43, v67);
            *(void *)&v74[0] = 0;
            unsigned int v47 = [v40 removeItemAtURL:v46 error:v74];

            id v48 = *(id *)&v74[0];
            if (v47)
            {
LABEL_26:
            }
            else
            {
              uint64_t v49 = v48;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
            }
            uint64_t v8 = v58;
            uint64_t v12 = v67;
            uint64_t v21 = v71;
            goto LABEL_11;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v71;
      }
LABEL_11:
      NSFastEnumerationIterator.next()();
    }
    while (v76);
  }

  (*(void (**)(char *, uint64_t))(v65 + 8))(v8, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v21, v12);
}

unint64_t sub_10036DE80()
{
  unint64_t result = qword_100661228;
  if (!qword_100661228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661228);
  }
  return result;
}

uint64_t sub_10036DED4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10036DF28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10036DF84(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10036DFDC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036E014()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036E024(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10036E06C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request.QueryParameter()
{
  return &type metadata for HTTPArchive.Log.Entry.Request.QueryParameter;
}

uint64_t destroy for HTTPArchive.Log.Entry.Request(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HTTPArchive.Log.Entry.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v8;
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Request(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 9;
  uint64_t v5 = a2 + 9;
  uint64_t v6 = a2[10];
  if (a1[10])
  {
    if (v6)
    {
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[12] = a2[12];
      a1[13] = a2[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10036E410((uint64_t)(a1 + 9));
      uint64_t v7 = a2[13];
      long long v8 = *(_OWORD *)(a2 + 11);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 11) = v8;
      a1[13] = v7;
    }
  }
  else if (v6)
  {
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 11);
    a1[13] = a2[13];
    *uint64_t v4 = v9;
    *(_OWORD *)(a1 + 11) = v10;
  }
  a1[14] = a2[14];
  a1[15] = a2[15];
  return a1;
}

uint64_t sub_10036E410(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for HTTPArchive.Log.Entry.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 80)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v7)
  {
    sub_10036E410(a1 + 72);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v9;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_6;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request()
{
  return &type metadata for HTTPArchive.Log.Entry.Request;
}

uint64_t destroy for HTTPArchive.Log.Entry.Request.PostData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for HTTPArchive.Log.Entry.Request.PostData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Request.PostData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HTTPArchive.Log.Entry.Request.PostData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Request.PostData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Request.PostData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request.PostData()
{
  return &type metadata for HTTPArchive.Log.Entry.Request.PostData;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Header()
{
  return &type metadata for HTTPArchive.Log.Entry.Header;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log()
{
  return &type metadata for HTTPArchive.Log;
}

uint64_t destroy for HTTPArchive.Log.Entry(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[13])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[40])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[47])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPArchive.Log.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = v9;
    uint64_t v10 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = v10;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v12 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v12;
  uint64_t v13 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v13;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  uint64_t v14 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v14;
  uint64_t v15 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v15;
  uint64_t v16 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v16;
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v17;
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  uint64_t v18 = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v18)
  {
    long long v24 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v24;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    uint64_t v21 = *(void *)(a2 + 376);
    if (v21) {
      goto LABEL_6;
    }
LABEL_8:
    long long v25 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v25;
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    goto LABEL_9;
  }
  uint64_t v19 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v19;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v18;
  uint64_t v20 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v20;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = *(void *)(a2 + 376);
  if (!v21) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v22 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v22;
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v21;
  uint64_t v23 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v23;
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_9:
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  long long v26 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 456) = v26;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  long long v27 = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = v27;
  uint64_t v28 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v28;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HTTPArchive.Log.Entry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 96);
  uint64_t v5 = (_OWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v6)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10036E410(a1 + 96);
      uint64_t v7 = *(void *)(a2 + 128);
      long long v8 = *(_OWORD *)(a2 + 112);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 112) = v8;
      *(void *)(a1 + 128) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *uint64_t v4 = v9;
    *(_OWORD *)(a1 + 112) = v10;
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  long long v11 = (_OWORD *)(a1 + 296);
  uint64_t v12 = (long long *)(a2 + 296);
  uint64_t v13 = *(void *)(a2 + 320);
  if (*(void *)(a1 + 320))
  {
    if (v13)
    {
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
    }
    else
    {
      sub_10036F118(a1 + 296);
      long long v15 = *(_OWORD *)(a2 + 312);
      long long v14 = *(_OWORD *)(a2 + 328);
      long long v16 = *v12;
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(_OWORD *)(a1 + 312) = v15;
      *(_OWORD *)(a1 + 328) = v14;
      *long long v11 = v16;
    }
  }
  else if (v13)
  {
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *v12;
    long long v18 = *(_OWORD *)(a2 + 312);
    long long v19 = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(_OWORD *)(a1 + 312) = v18;
    *(_OWORD *)(a1 + 328) = v19;
    *long long v11 = v17;
  }
  uint64_t v20 = (_OWORD *)(a1 + 352);
  uint64_t v21 = (long long *)(a2 + 352);
  uint64_t v22 = *(void *)(a2 + 376);
  if (*(void *)(a1 + 376))
  {
    if (v22)
    {
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
    }
    else
    {
      sub_10036F118(a1 + 352);
      long long v24 = *(_OWORD *)(a2 + 368);
      long long v23 = *(_OWORD *)(a2 + 384);
      long long v25 = *v21;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      *(_OWORD *)(a1 + 368) = v24;
      *(_OWORD *)(a1 + 384) = v23;
      *uint64_t v20 = v25;
    }
  }
  else if (v22)
  {
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *v21;
    long long v27 = *(_OWORD *)(a2 + 368);
    long long v28 = *(_OWORD *)(a2 + 384);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(_OWORD *)(a1 + 368) = v27;
    *(_OWORD *)(a1 + 384) = v28;
    *uint64_t v20 = v26;
  }
  uint64_t v29 = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 408) = v29;
  uint64_t v30 = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 424) = v30;
  uint64_t v31 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v31;
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  uint64_t v32 = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 480) = v32;
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10036F118(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for HTTPArchive.Log.Entry(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x210uLL);
}

uint64_t assignWithTake for HTTPArchive.Log.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104))
  {
    uint64_t v7 = *(void *)(a2 + 104);
    if (v7)
    {
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v7;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10036E410(a1 + 96);
  }
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
LABEL_6:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v14;
  if (*(void *)(a1 + 320))
  {
    if (*(void *)(a2 + 320))
    {
      uint64_t v15 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 336);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = v17;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      goto LABEL_11;
    }
    sub_10036F118(a1 + 296);
  }
  long long v18 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v18;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
LABEL_11:
  if (!*(void *)(a1 + 376))
  {
LABEL_15:
    long long v22 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v22;
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    goto LABEL_16;
  }
  if (!*(void *)(a2 + 376))
  {
    sub_10036F118(a1 + 352);
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 360) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 376);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a2 + 392);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(void *)(a1 + 392) = v21;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
LABEL_16:
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(unsigned char *)(a1 + 416) = *(unsigned char *)(a2 + 416);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  uint64_t v23 = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 480) = v23;
  uint64_t v24 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v24;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 528)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 520) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 528) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 528) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry()
{
  return &type metadata for HTTPArchive.Log.Entry;
}

void *initializeWithCopy for HTTPArchive.Log.Entry.Cache.CacheEntry(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Cache.CacheEntry(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

void *assignWithTake for HTTPArchive.Log.Entry.Cache.CacheEntry(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Cache.CacheEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Cache.CacheEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cache.CacheEntry()
{
  return &type metadata for HTTPArchive.Log.Entry.Cache.CacheEntry;
}

uint64_t _s28ManagedAppDistributionDaemon11HTTPArchiveVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s28ManagedAppDistributionDaemon11HTTPArchiveVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s28ManagedAppDistributionDaemon11HTTPArchiveVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s28ManagedAppDistributionDaemon11HTTPArchiveVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HTTPArchive()
{
  return &type metadata for HTTPArchive;
}

unint64_t sub_10036F948()
{
  unint64_t result = qword_100661260;
  if (!qword_100661260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661260);
  }
  return result;
}

unint64_t sub_10036F99C()
{
  unint64_t result = qword_100661268;
  if (!qword_100661268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661268);
  }
  return result;
}

unint64_t sub_10036F9F0()
{
  unint64_t result = qword_100661278;
  if (!qword_100661278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661278);
  }
  return result;
}

unint64_t sub_10036FA44()
{
  unint64_t result = qword_100661290;
  if (!qword_100661290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661290);
  }
  return result;
}

uint64_t sub_10036FA98(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10036FAE8()
{
  unint64_t result = qword_1006612A8;
  if (!qword_1006612A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006612A8);
  }
  return result;
}

unint64_t sub_10036FB3C()
{
  unint64_t result = qword_1006612C0;
  if (!qword_1006612C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006612C0);
  }
  return result;
}

unint64_t sub_10036FB90()
{
  unint64_t result = qword_1006612D8;
  if (!qword_1006612D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006612D8);
  }
  return result;
}

unint64_t sub_10036FBE4()
{
  unint64_t result = qword_1006612E0;
  if (!qword_1006612E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006612E0);
  }
  return result;
}

uint64_t sub_10036FC38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10036FC88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10036FC38(v2, v3);
  return a1;
}

uint64_t sub_10036FD38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10036FA98(v2, v3);
  return a1;
}

unint64_t sub_10036FDE8()
{
  unint64_t result = qword_1006612F8;
  if (!qword_1006612F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006612F8);
  }
  return result;
}

unint64_t sub_10036FE3C()
{
  unint64_t result = qword_100661308;
  if (!qword_100661308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661308);
  }
  return result;
}

unint64_t sub_10036FE90()
{
  unint64_t result = qword_100661318;
  if (!qword_100661318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661318);
  }
  return result;
}

unint64_t sub_10036FEE4()
{
  unint64_t result = qword_100661320;
  if (!qword_100661320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661320);
  }
  return result;
}

unint64_t sub_10036FF38()
{
  unint64_t result = qword_100661330;
  if (!qword_100661330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661330);
  }
  return result;
}

unint64_t sub_10036FF8C()
{
  unint64_t result = qword_100661350;
  if (!qword_100661350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661350);
  }
  return result;
}

unint64_t sub_10036FFE0()
{
  unint64_t result = qword_100661368;
  if (!qword_100661368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661368);
  }
  return result;
}

unint64_t sub_100370034()
{
  unint64_t result = qword_100661370;
  if (!qword_100661370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661370);
  }
  return result;
}

unint64_t sub_100370088()
{
  unint64_t result = qword_100661388;
  if (!qword_100661388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661388);
  }
  return result;
}

unint64_t sub_1003700DC()
{
  unint64_t result = qword_100661398;
  if (!qword_100661398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661398);
  }
  return result;
}

uint64_t sub_100370130(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10037019C()
{
  unint64_t result = qword_1006613A8;
  if (!qword_1006613A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613A8);
  }
  return result;
}

unint64_t sub_1003701F0()
{
  unint64_t result = qword_1006613B8;
  if (!qword_1006613B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613B8);
  }
  return result;
}

uint64_t sub_100370244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100370294(uint64_t a1)
{
  return a1;
}

unint64_t sub_100370328()
{
  unint64_t result = qword_1006613C0;
  if (!qword_1006613C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613C0);
  }
  return result;
}

unint64_t sub_10037037C()
{
  unint64_t result = qword_1006613C8;
  if (!qword_1006613C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613C8);
  }
  return result;
}

uint64_t sub_1003703D0(uint64_t a1)
{
  return a1;
}

unint64_t sub_100370464()
{
  unint64_t result = qword_1006613D0;
  if (!qword_1006613D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613D0);
  }
  return result;
}

uint64_t sub_1003704B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100370508()
{
  unint64_t result = qword_1006613D8;
  if (!qword_1006613D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613D8);
  }
  return result;
}

void *sub_10037055C(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v4 = a1[12];
  uint64_t v7 = a1[38];
  uint64_t v8 = a1[37];
  uint64_t v5 = a1[40];
  uint64_t v6 = a1[39];
  uint64_t v11 = a1[45];
  uint64_t v12 = a1[44];
  uint64_t v9 = a1[47];
  uint64_t v10 = a1[46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10036FC38(v4, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1003704B8(v8, v7, v6, v5);
  sub_1003704B8(v12, v11, v10, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100370720(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v4 = a1[12];
  uint64_t v7 = a1[38];
  uint64_t v8 = a1[37];
  uint64_t v5 = a1[40];
  uint64_t v6 = a1[39];
  uint64_t v11 = a1[45];
  uint64_t v12 = a1[44];
  uint64_t v9 = a1[47];
  uint64_t v10 = a1[46];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10036FA98(v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100370244(v8, v7, v6, v5);
  sub_100370244(v12, v11, v10, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1003708E8()
{
  unint64_t result = qword_1006613E8;
  if (!qword_1006613E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613E8);
  }
  return result;
}

unint64_t sub_10037093C()
{
  unint64_t result = qword_1006613F0;
  if (!qword_1006613F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613F0);
  }
  return result;
}

unint64_t sub_100370990()
{
  unint64_t result = qword_1006613F8;
  if (!qword_1006613F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006613F8);
  }
  return result;
}

unint64_t sub_1003709E4()
{
  unint64_t result = qword_100661400;
  if (!qword_100661400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661400);
  }
  return result;
}

unint64_t sub_100370A38()
{
  unint64_t result = qword_100661410;
  if (!qword_100661410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661410);
  }
  return result;
}

uint64_t sub_100370A8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100661420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10036F948();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  sub_100370C2C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v13 = v16;
  long long v14 = v15;
  uint64_t v9 = v17;
  long long v12 = v18;
  uint64_t result = sub_100014524((uint64_t)a1);
  long long v11 = v13;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v11;
  *(void *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 40) = v12;
  return result;
}

unint64_t sub_100370C2C()
{
  unint64_t result = qword_100661428;
  if (!qword_100661428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661428);
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cache.CacheEntry.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Cache.CacheEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Timings(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Timings(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 81) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Timings()
{
  return &type metadata for HTTPArchive.Log.Entry.Timings;
}

uint64_t destroy for HTTPArchive.Log.Entry.Cache(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HTTPArchive.Log.Entry.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 80);
    if (v7) {
      goto LABEL_3;
    }
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    return a1;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = *(void *)(a2 + 80);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Cache(void *a1, void *a2)
{
  uint64_t v4 = a2[3];
  if (a1[3])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[6] = a2[6];
    }
    else
    {
      sub_10036F118((uint64_t)a1);
      long long v6 = *((_OWORD *)a2 + 1);
      long long v5 = *((_OWORD *)a2 + 2);
      long long v7 = *(_OWORD *)a2;
      a1[6] = a2[6];
      *((_OWORD *)a1 + 1) = v6;
      *((_OWORD *)a1 + 2) = v5;
      *(_OWORD *)a1 = v7;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    a1[6] = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    long long v9 = *((_OWORD *)a2 + 1);
    long long v10 = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    *((_OWORD *)a1 + 1) = v9;
    *((_OWORD *)a1 + 2) = v10;
    *(_OWORD *)a1 = v8;
  }
  long long v11 = a1 + 7;
  long long v12 = (long long *)(a2 + 7);
  uint64_t v13 = a2[10];
  if (a1[10])
  {
    if (v13)
    {
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[13] = a2[13];
    }
    else
    {
      sub_10036F118((uint64_t)(a1 + 7));
      long long v15 = *(_OWORD *)(a2 + 9);
      long long v14 = *(_OWORD *)(a2 + 11);
      long long v16 = *v12;
      a1[13] = a2[13];
      *(_OWORD *)(a1 + 9) = v15;
      *(_OWORD *)(a1 + 11) = v14;
      *long long v11 = v16;
    }
  }
  else if (v13)
  {
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *v12;
    long long v18 = *(_OWORD *)(a2 + 9);
    long long v19 = *(_OWORD *)(a2 + 11);
    a1[13] = a2[13];
    *(_OWORD *)(a1 + 9) = v18;
    *(_OWORD *)(a1 + 11) = v19;
    *long long v11 = v17;
  }
  return a1;
}

__n128 initializeWithTake for HTTPArchive.Log.Entry.Cache(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for HTTPArchive.Log.Entry.Cache(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10036F118(a1);
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 80))
  {
LABEL_10:
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    return a1;
  }
  uint64_t v8 = *(void *)(a2 + 80);
  if (!v8)
  {
    sub_10036F118(a1 + 56);
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Cache(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Cache(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cache()
{
  return &type metadata for HTTPArchive.Log.Entry.Cache;
}

uint64_t destroy for HTTPArchive.Log.Entry.Response()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPArchive.Log.Entry.Response(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Response(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  return a1;
}

__n128 initializeWithTake for HTTPArchive.Log.Entry.Response(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for HTTPArchive.Log.Entry.Response(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Response(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Response()
{
  return &type metadata for HTTPArchive.Log.Entry.Response;
}

unsigned char *storeEnumTagSinglePayload for HTTPArchive.Log.Entry.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003717B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.CodingKeys;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Creator()
{
  return &type metadata for HTTPArchive.Log.Creator;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.CodingKeys;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Header.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Header.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon11HTTPArchiveV3LogV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003718F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request.PostData.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Request.PostData.CodingKeys;
}

uint64_t destroy for HTTPArchive.Log.Entry.Cookie()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for HTTPArchive.Log.Entry.Cookie(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Cookie(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for HTTPArchive.Log.Entry.Cookie(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cookie()
{
  return &type metadata for HTTPArchive.Log.Entry.Cookie;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Request.CodingKeys;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Request.QueryParameter.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Request.QueryParameter.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for HTTPArchive.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100371C18);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.CodingKeys()
{
  return &type metadata for HTTPArchive.CodingKeys;
}

unint64_t sub_100371C54()
{
  unint64_t result = qword_100661430;
  if (!qword_100661430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661430);
  }
  return result;
}

unint64_t sub_100371CAC()
{
  unint64_t result = qword_100661438;
  if (!qword_100661438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661438);
  }
  return result;
}

unint64_t sub_100371D04()
{
  unint64_t result = qword_100661440;
  if (!qword_100661440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661440);
  }
  return result;
}

unint64_t sub_100371D5C()
{
  unint64_t result = qword_100661448;
  if (!qword_100661448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661448);
  }
  return result;
}

unint64_t sub_100371DB4()
{
  unint64_t result = qword_100661450;
  if (!qword_100661450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661450);
  }
  return result;
}

unint64_t sub_100371E0C()
{
  unint64_t result = qword_100661458;
  if (!qword_100661458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661458);
  }
  return result;
}

unint64_t sub_100371E64()
{
  unint64_t result = qword_100661460;
  if (!qword_100661460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661460);
  }
  return result;
}

unint64_t sub_100371EBC()
{
  unint64_t result = qword_100661468;
  if (!qword_100661468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661468);
  }
  return result;
}

unint64_t sub_100371F14()
{
  unint64_t result = qword_100661470;
  if (!qword_100661470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661470);
  }
  return result;
}

unint64_t sub_100371F6C()
{
  unint64_t result = qword_100661478;
  if (!qword_100661478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661478);
  }
  return result;
}

unint64_t sub_100371FC4()
{
  unint64_t result = qword_100661480;
  if (!qword_100661480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661480);
  }
  return result;
}

unint64_t sub_10037201C()
{
  unint64_t result = qword_100661488;
  if (!qword_100661488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661488);
  }
  return result;
}

unint64_t sub_100372074()
{
  unint64_t result = qword_100661490;
  if (!qword_100661490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661490);
  }
  return result;
}

unint64_t sub_1003720CC()
{
  unint64_t result = qword_100661498;
  if (!qword_100661498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661498);
  }
  return result;
}

unint64_t sub_100372124()
{
  unint64_t result = qword_1006614A0;
  if (!qword_1006614A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614A0);
  }
  return result;
}

unint64_t sub_10037217C()
{
  unint64_t result = qword_1006614A8;
  if (!qword_1006614A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614A8);
  }
  return result;
}

unint64_t sub_1003721D4()
{
  unint64_t result = qword_1006614B0;
  if (!qword_1006614B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614B0);
  }
  return result;
}

unint64_t sub_10037222C()
{
  unint64_t result = qword_1006614B8;
  if (!qword_1006614B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614B8);
  }
  return result;
}

unint64_t sub_100372284()
{
  unint64_t result = qword_1006614C0;
  if (!qword_1006614C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614C0);
  }
  return result;
}

unint64_t sub_1003722DC()
{
  unint64_t result = qword_1006614C8;
  if (!qword_1006614C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614C8);
  }
  return result;
}

unint64_t sub_100372334()
{
  unint64_t result = qword_1006614D0;
  if (!qword_1006614D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614D0);
  }
  return result;
}

unint64_t sub_10037238C()
{
  unint64_t result = qword_1006614D8;
  if (!qword_1006614D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614D8);
  }
  return result;
}

unint64_t sub_1003723E4()
{
  unint64_t result = qword_1006614E0;
  if (!qword_1006614E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614E0);
  }
  return result;
}

unint64_t sub_10037243C()
{
  unint64_t result = qword_1006614E8;
  if (!qword_1006614E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614E8);
  }
  return result;
}

unint64_t sub_100372490()
{
  unint64_t result = qword_1006614F8;
  if (!qword_1006614F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006614F8);
  }
  return result;
}

unint64_t sub_1003724E4()
{
  unint64_t result = qword_100661510;
  if (!qword_100661510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661510);
  }
  return result;
}

unint64_t sub_100372538()
{
  unint64_t result = qword_100661528;
  if (!qword_100661528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661528);
  }
  return result;
}

unint64_t sub_10037258C()
{
  unint64_t result = qword_100661530;
  if (!qword_100661530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661530);
  }
  return result;
}

unint64_t sub_1003725E0()
{
  unint64_t result = qword_100661540;
  if (!qword_100661540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661540);
  }
  return result;
}

unint64_t sub_100372634()
{
  unint64_t result = qword_100661548;
  if (!qword_100661548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661548);
  }
  return result;
}

unint64_t sub_100372688()
{
  unint64_t result = qword_100661558;
  if (!qword_100661558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661558);
  }
  return result;
}

unint64_t sub_1003726DC()
{
  unint64_t result = qword_100661568;
  if (!qword_100661568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661568);
  }
  return result;
}

unint64_t sub_100372730()
{
  unint64_t result = qword_100661580;
  if (!qword_100661580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661580);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Timings.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Timings.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003728E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Timings.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Timings.CodingKeys;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cache.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Cache.CodingKeys;
}

uint64_t destroy for HTTPArchive.Log.Entry.Response.Content()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HTTPArchive.Log.Entry.Response.Content(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for HTTPArchive.Log.Entry.Response.Content(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HTTPArchive.Log.Entry.Response.Content(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPArchive.Log.Entry.Response.Content(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Response.Content(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Response.Content()
{
  return &type metadata for HTTPArchive.Log.Entry.Response.Content;
}

uint64_t getEnumTagSinglePayload for MarketplaceUpdateEntity.Property(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s28ManagedAppDistributionDaemon11HTTPArchiveV3LogV5EntryV7RequestV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100372CC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Response.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Response.CodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon11HTTPArchiveV3LogV5EntryV6HeaderV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100372DC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Creator.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Creator.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for HTTPArchive.Log.Entry.Cookie.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100372ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Cookie.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Cookie.CodingKeys;
}

unint64_t sub_100372F08()
{
  unint64_t result = qword_100661590;
  if (!qword_100661590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661590);
  }
  return result;
}

unint64_t sub_100372F60()
{
  unint64_t result = qword_100661598;
  if (!qword_100661598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661598);
  }
  return result;
}

unint64_t sub_100372FB8()
{
  unint64_t result = qword_1006615A0;
  if (!qword_1006615A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615A0);
  }
  return result;
}

unint64_t sub_100373010()
{
  unint64_t result = qword_1006615A8;
  if (!qword_1006615A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615A8);
  }
  return result;
}

unint64_t sub_100373068()
{
  unint64_t result = qword_1006615B0;
  if (!qword_1006615B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615B0);
  }
  return result;
}

unint64_t sub_1003730C0()
{
  unint64_t result = qword_1006615B8;
  if (!qword_1006615B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615B8);
  }
  return result;
}

unint64_t sub_100373118()
{
  unint64_t result = qword_1006615C0;
  if (!qword_1006615C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615C0);
  }
  return result;
}

unint64_t sub_100373170()
{
  unint64_t result = qword_1006615C8;
  if (!qword_1006615C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615C8);
  }
  return result;
}

unint64_t sub_1003731C8()
{
  unint64_t result = qword_1006615D0;
  if (!qword_1006615D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615D0);
  }
  return result;
}

unint64_t sub_100373220()
{
  unint64_t result = qword_1006615D8;
  if (!qword_1006615D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615D8);
  }
  return result;
}

unint64_t sub_100373278()
{
  unint64_t result = qword_1006615E0;
  if (!qword_1006615E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615E0);
  }
  return result;
}

unint64_t sub_1003732D0()
{
  unint64_t result = qword_1006615E8;
  if (!qword_1006615E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615E8);
  }
  return result;
}

unint64_t sub_100373328()
{
  unint64_t result = qword_1006615F0;
  if (!qword_1006615F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615F0);
  }
  return result;
}

unint64_t sub_100373380()
{
  unint64_t result = qword_1006615F8;
  if (!qword_1006615F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006615F8);
  }
  return result;
}

unint64_t sub_1003733D8()
{
  unint64_t result = qword_100661600;
  if (!qword_100661600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661600);
  }
  return result;
}

unint64_t sub_10037342C()
{
  unint64_t result = qword_100661610;
  if (!qword_100661610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661610);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon11HTTPArchiveV3LogV5EntryV5CacheV10CacheEntryV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10037354CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPArchive.Log.Entry.Response.Content.CodingKeys()
{
  return &type metadata for HTTPArchive.Log.Entry.Response.Content.CodingKeys;
}

unint64_t sub_100373588()
{
  unint64_t result = qword_100661620;
  if (!qword_100661620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661620);
  }
  return result;
}

unint64_t sub_1003735E0()
{
  unint64_t result = qword_100661628;
  if (!qword_100661628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661628);
  }
  return result;
}

unint64_t sub_100373638()
{
  unint64_t result = qword_100661630;
  if (!qword_100661630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661630);
  }
  return result;
}

void sub_100373694(char a1)
{
  int v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  if ((a1 & 1) == 0
    || os_variant_has_internal_content()
    && (keyExistsAndHasValidFormat[0] = 0,
        uint64_t v5 = (__CFString *)String._bridgeToObjectiveC()(),
        unsigned int v6 = (__CFString *)String._bridgeToObjectiveC()(),
        int AppBooleanValue = CFPreferencesGetAppBooleanValue(v5, v6, keyExistsAndHasValidFormat),
        v5,
        v6,
        keyExistsAndHasValidFormat[0])
    && AppBooleanValue)
  {
    objc_msgSend(v2, "set_atsContext:", 0);
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    keyExistsAndHasValidFormat[0] = 0;
    sub_100373A18();
    uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v10 = v9;
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100013510(v8, v10);
    objc_msgSend(v2, "set_atsContext:", isa);
  }
}

unint64_t sub_100373A18()
{
  unint64_t result = qword_100661638;
  if (!qword_100661638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661638);
  }
  return result;
}

Swift::Int sub_100373A6C()
{
  return Hasher._finalize()();
}

uint64_t sub_100373AC4()
{
  return String.hash(into:)();
}

Swift::Int sub_100373AE0()
{
  return Hasher._finalize()();
}

uint64_t sub_100373B34@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006393C0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100373B88(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000001005B7F90;
}

unint64_t sub_100373BA8()
{
  return 0xD000000000000016;
}

uint64_t sub_100373BC4@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1006393F8, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100373C1C(uint64_t a1)
{
  unint64_t v2 = sub_100373F6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100373C58(uint64_t a1)
{
  unint64_t v2 = sub_100373F6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100373C94(void *a1)
{
  uint64_t v2 = sub_1000172F8(&qword_100661640);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100373F6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t _s10ATSContextVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10ATSContextVwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100373F34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10ATSContextVMa()
{
  return &_s10ATSContextVN;
}

unint64_t sub_100373F6C()
{
  unint64_t result = qword_100661648;
  if (!qword_100661648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661648);
  }
  return result;
}

unsigned char *_s10ATSContextV10CodingKeysOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10037405CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s10ATSContextV10CodingKeysOMa()
{
  return &_s10ATSContextV10CodingKeysON;
}

unint64_t sub_100374098()
{
  unint64_t result = qword_100661650;
  if (!qword_100661650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661650);
  }
  return result;
}

unint64_t sub_1003740F0()
{
  unint64_t result = qword_100661658;
  if (!qword_100661658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100661658);
  }
  return result;
}

unint64_t sub_100374148()
{
  unint64_t result = qword_100661660;
  if (!qword_100661660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100661660);
  }
  return result;
}

uint64_t sub_10037419C()
{
  v1[102] = v0;
  uint64_t v2 = type metadata accessor for Platform();
  v1[103] = v2;
  v1[104] = *(void *)(v2 - 8);
  v1[105] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v1[106] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[107] = v3;
  v1[108] = *(void *)(v3 - 8);
  v1[109] = swift_task_alloc();
  v1[110] = type metadata accessor for ManifestValidationTask();
  v1[111] = swift_task_alloc();
  v1[112] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[113] = v4;
  v1[114] = *(void *)(v4 - 8);
  v1[115] = swift_task_alloc();
  v1[116] = swift_task_alloc();
  v1[117] = swift_task_alloc();
  return _swift_task_switch(sub_1003743A0, 0, 0);
}

uint64_t sub_1003743A0()
{
  uint64_t v136 = v0;
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(v0 + 816);
  static Logger.general.getter();
  sub_100376268(v2, v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  os_log_t log = (os_log_t)(v0 + 816);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v121 = *(void *)(v0 + 912);
    uint64_t v124 = *(void *)(v0 + 904);
    uint64_t v126 = *(void *)(v0 + 936);
    uint64_t v5 = *(void *)(v0 + 896);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v130._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    uint64_t v7 = URL.absoluteString.getter();
    *(void *)(v0 + 808) = sub_1000143F4(v7, v8, &v130._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003762CC(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Validating manifest from %{public}s...", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v121 + 8);
    v9(v126, v124);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 936);
    uint64_t v11 = *(void *)(v0 + 912);
    uint64_t v12 = *(void *)(v0 + 904);
    sub_1003762CC(*(void *)(v0 + 896));

    unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v9(v10, v12);
  }
  *(void *)(v0 + 944) = v9;
  uint64_t v13 = *(void *)(v0 + 888);
  uint64_t v14 = *(void *)(v0 + 816);
  uint64_t v15 = v14 + *(int *)(*(void *)(v0 + 880) + 24);
  char v16 = URL.isFileURL.getter();
  sub_100376268(v14, v13);
  uint64_t v17 = *(void *)(v0 + 888);
  if (v16)
  {
    sub_1003762CC(*(void *)(v0 + 888));
  }
  else
  {
    URL.scheme.getter();
    uint64_t v19 = v18;
    sub_1003762CC(v17);
    swift_bridgeObjectRelease();
    if (v19)
    {
      id v20 = [self ephemeralSessionConfiguration];
      *(void *)(v0 + 952) = [self sessionWithConfiguration:v20];

      uint64_t v21 = (void *)swift_task_alloc();
      *(void *)(v0 + 960) = v21;
      *uint64_t v21 = v0;
      v21[1] = sub_100375218;
      uint64_t v22 = v15;
      uint64_t v23 = 0;
      return NSURLSession.data(from:delegate:)(v22, v23);
    }
  }
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    uint64_t v24 = *(void *)(v0 + 864);
    uint64_t v25 = *(void *)(v0 + 856);
    uint64_t v26 = *(void *)(v0 + 848);
    v130._uint64_t countAndFlagsBits = 0x2F2F3A656C6966;
    v130._object = (void *)0xE700000000000000;
    Swift::String v27 = URL.path(percentEncoded:)(0);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25);
    if (v22 != 1)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 864) + 32))(*(void *)(v0 + 872), *(void *)(v0 + 848), *(void *)(v0 + 856));
      goto LABEL_14;
    }
    __break(1u);
    return NSURLSession.data(from:delegate:)(v22, v23);
  }
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 864) + 16))(*(void *)(v0 + 872), v15, *(void *)(v0 + 856));
LABEL_14:
  uint64_t v28 = Data.init(contentsOf:options:)();
  unint64_t v30 = v29;
  (*(void (**)(void, void))(*(void *)(v0 + 864) + 8))(*(void *)(v0 + 872), *(void *)(v0 + 856));
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10026F494();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v125 = v28;
  unint64_t v127 = v30;
  swift_release();
  long long v32 = *(_OWORD *)(v0 + 400);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 384);
  *(_OWORD *)(v0 + 192) = v32;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 416);
  long long v33 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 128) = v33;
  long long v34 = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 160) = v34;
  long long v35 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 64) = v35;
  long long v36 = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 96) = v36;
  long long v37 = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 32) = v37;
  static Logger.general.getter();
  sub_10035B39C(v0 + 16);
  double v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
  uint64_t v42 = *(void *)(v0 + 928);
  uint64_t v43 = *(void *)(v0 + 904);
  if (v40)
  {
    uint64_t v122 = *(void *)(v0 + 928);
    long long v119 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v130._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136446210;
    uint64_t v46 = *(void *)(v0 + 40);
    unint64_t v45 = *(void *)(v0 + 48);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 800) = sub_1000143F4(v46, v45, &v130._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10035B440(v0 + 16);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v119(v122, v43);
  }
  else
  {
    sub_10035B440(v0 + 16);

    v41(v42, v43);
  }
  uint64_t v47 = *(void *)(v0 + 840);
  uint64_t v48 = *(void *)(v0 + 832);
  uint64_t v49 = *(void *)(v0 + 824);
  swift_getObjectType();
  v130._uint64_t countAndFlagsBits = 0x4920656C646E7542;
  v130._object = (void *)0xEB00000000203A44;
  uint64_t v50 = *(void *)(v0 + 40);
  uint64_t v51 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  v52._uint64_t countAndFlagsBits = v50;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  XPCClientProtocol.logMessage(_:)(v130);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void *)(v0 + 160);
  static Platform.iOS.getter();
  Platform.description.getter();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  Swift::String v54 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (*(void *)(v53 + 16))
  {
    unint64_t v55 = sub_100016D20(v54._countAndFlagsBits, (uint64_t)v54._object);
    if (v56)
    {
      Class isa = log->isa;
      uint64_t v58 = (uint64_t *)(*(void *)(v53 + 56) + 40 * v55);
      uint64_t v59 = *v58;
      uint64_t v60 = v58[1];
      uint64_t v61 = v58[2];
      uint64_t v123 = v58[3];
      long long v62 = (void *)v58[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v63 = isa[8];
      uint64_t v64 = isa[9];
      uint64_t v65 = isa[10];
      BOOL v66 = v63 < v59;
      if (v63 == v59 && (BOOL v66 = v64 < v60, v64 == v60))
      {
        if (v65 >= v61)
        {
LABEL_26:
          uint64_t v67 = *(void *)(v0 + 816);
          swift_bridgeObjectRelease();
          uint64_t v68 = *(void *)(v67 + 48);
          uint64_t v69 = *(void *)(v67 + 56);
          uint64_t v70 = *(void *)(v67 + 88);
          uint64_t v71 = *(void *)(v67 + 96);
          int v72 = *(_DWORD *)(v67 + 112);
          char v73 = *(unsigned char *)(v67 + 116);
          char v74 = *(unsigned char *)(v67 + 117);
          char v75 = *(unsigned char *)(v67 + 118);
          uint64_t v76 = *(void *)(v67 + 104);
          long long v78 = *(_OWORD *)(v67 + 16);
          long long v77 = *(_OWORD *)(v67 + 32);
          *(void *)(v0 + 432) = isa[1];
          *(_OWORD *)(v0 + 440) = v78;
          *(_OWORD *)(v0 + 456) = v77;
          *(void *)(v0 + 472) = v68;
          *(void *)(v0 + 480) = v69;
          *(void *)(v0 + 488) = v63;
          *(void *)(v0 + 496) = v64;
          *(void *)(v0 + 504) = v65;
          *(void *)(v0 + 512) = v70;
          *(void *)(v0 + 520) = v71;
          *(void *)(v0 + 528) = v76;
          *(_DWORD *)(v0 + 536) = v72;
          *(unsigned char *)(v0 + 540) = v73;
          *(unsigned char *)(v0 + 541) = v74;
          *(unsigned char *)(v0 + 542) = v75;
          sub_10026C95C(v0 + 432, v0 + 672);
          sub_100376328(v0 + 672, v0 + 608);
          if (*(void *)(v0 + 616))
          {
            long long v79 = *(_OWORD *)(v0 + 624);
            *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 608);
            *(_OWORD *)(v0 + 560) = v79;
            long long v80 = *(_OWORD *)(v0 + 656);
            *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 640);
            *(_OWORD *)(v0 + 592) = v80;
            sub_100375FC8(v0 + 16, v0 + 544);
            sub_10035B440(v0 + 16);
            uint64_t v81 = *(void *)(v0 + 560);
            swift_bridgeObjectRetain();
            sub_10018A1C0(&v130, v0 + 432, v81);
            uint64_t v82 = swift_bridgeObjectRelease();
            object = v130._object;
            if (v130._object)
            {
              uint64_t v91 = v134;
              uint64_t v90 = v135;
              uint64_t v93 = v132;
              uint64_t v92 = v133;
              uint64_t v94 = v131;
              uint64_t countAndFlagsBits = v130._countAndFlagsBits;
              *(void *)(v0 + 736) = v130._countAndFlagsBits;
              *(void *)(v0 + 744) = object;
              *(void *)(v0 + 752) = v94;
              *(void *)(v0 + 760) = v93;
              *(void *)(v0 + 768) = v92;
              *(void *)(v0 + 776) = v91;
              *(void *)(v0 + 784) = v90;
              os_log_t loga = (os_log_t)sub_10018A9D8(v82, v83, v84, v85, v86, v87, v88);
              char v120 = v96;
              sub_10018B054(countAndFlagsBits, (uint64_t)object);
              swift_getObjectType();
              v130._uint64_t countAndFlagsBits = 0;
              v130._object = (void *)0xE000000000000000;
              _StringGuts.grow(_:)(25);
              swift_bridgeObjectRelease();
              v130._uint64_t countAndFlagsBits = 0xD000000000000012;
              v130._object = (void *)0x80000001005BE6B0;
              v97._uint64_t countAndFlagsBits = (uint64_t)loga;
              v97._object = v120;
              String.append(_:)(v97);
              swift_bridgeObjectRelease();
              v98._uint64_t countAndFlagsBits = 10272;
              v98._object = (void *)0xE200000000000000;
              String.append(_:)(v98);
              uint64_t v99 = *(void *)(v0 + 544);
              uint64_t v100 = *(void *)(v0 + 552);
              swift_bridgeObjectRetain();
              uint64_t v101 = v99;
              uint64_t v102 = v100;
            }
            else
            {
              swift_getObjectType();
              v130._uint64_t countAndFlagsBits = 0;
              v130._object = (void *)0xE000000000000000;
              _StringGuts.grow(_:)(79);
              v116._uint64_t countAndFlagsBits = 0xD00000000000004CLL;
              v116._object = (void *)0x80000001005BE660;
              String.append(_:)(v116);
              uint64_t v117 = *(void *)(v0 + 544);
              uint64_t v118 = *(void *)(v0 + 552);
              swift_bridgeObjectRetain();
              uint64_t v101 = v117;
              uint64_t v102 = v118;
            }
            String.append(_:)(*(Swift::String *)&v101);
            sub_10019C8B0((uint64_t *)(v0 + 672));
            swift_bridgeObjectRelease();
            v103._uint64_t countAndFlagsBits = 41;
            v103._object = (void *)0xE100000000000000;
            String.append(_:)(v103);
            XPCClientProtocol.logMessage(_:)(v130);
            sub_100013510(v125, v127);
            swift_bridgeObjectRelease();
            goto LABEL_33;
          }
          sub_10035B440(v0 + 16);
          swift_getObjectType();
          unint64_t v104 = 0xD000000000000019;
          uint64_t v105 = "No eligible variant found";
          goto LABEL_31;
        }
      }
      else if (!v66)
      {
        goto LABEL_26;
      }
      Class v108 = log->isa;
      sub_10035B440(v0 + 16);
      swift_getObjectType();
      v130._uint64_t countAndFlagsBits = 0;
      v130._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v109._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
      v109._object = (void *)0x80000001005BE6D0;
      String.append(_:)(v109);
      v110._uint64_t countAndFlagsBits = v123;
      v110._object = v62;
      String.append(_:)(v110);
      swift_bridgeObjectRelease();
      v111._uint64_t countAndFlagsBits = 0x6C6175746341202CLL;
      v111._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v111);
      uint64_t v112 = *((void *)v108 + 11);
      long long v113 = (void *)*((void *)v108 + 12);
      swift_bridgeObjectRetain();
      v114._uint64_t countAndFlagsBits = v112;
      v114._object = v113;
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      v115._uint64_t countAndFlagsBits = 41;
      v115._object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      XPCClientProtocol.logMessage(_:)(v130);
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  sub_10035B440(v0 + 16);
  swift_getObjectType();
  unint64_t v104 = 0xD000000000000030;
  uint64_t v105 = "No minimum OS specified for the current platform";
LABEL_31:
  unint64_t v106 = (unint64_t)(v105 - 32) | 0x8000000000000000;
  XPCClientProtocol.logMessage(_:)(*(Swift::String *)&v104);
LABEL_32:
  sub_100013510(v125, v127);
LABEL_33:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v107 = *(uint64_t (**)(void))(v0 + 8);
  return v107();
}

uint64_t sub_100375218(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 968) = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v9 = sub_100375D78;
  }
  else
  {

    *(void *)(v8 + 976) = a2;
    *(void *)(v8 + 984) = a1;
    unint64_t v9 = sub_100375358;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100375358()
{
  uint64_t v110 = v0;

  uint64_t v1 = *(void *)(v0 + 984);
  unint64_t v2 = *(void *)(v0 + 976);
  uint64_t v3 = *(void *)(v0 + 968);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10026F494();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    sub_100013510(v1, v2);
    swift_release();
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138543362;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 792) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching valid manifest: %{public}@", v6, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v24 = v4;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
    uint64_t v26 = *(void *)(v0 + 920);
    uint64_t v27 = *(void *)(v0 + 904);

    v25(v26, v27);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_21;
  }
  uint64_t v102 = v1;
  os_log_t log = (os_log_t)v2;
  swift_release();
  long long v9 = *(_OWORD *)(v0 + 400);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 384);
  *(_OWORD *)(v0 + 192) = v9;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 416);
  long long v10 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 128) = v10;
  long long v11 = *(_OWORD *)(v0 + 368);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 352);
  *(_OWORD *)(v0 + 160) = v11;
  long long v12 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 64) = v12;
  long long v13 = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v0 + 96) = v13;
  long long v14 = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 32) = v14;
  static Logger.general.getter();
  sub_10035B39C(v0 + 16);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
  uint64_t v19 = *(void *)(v0 + 928);
  uint64_t v20 = *(void *)(v0 + 904);
  if (v17)
  {
    uint64_t v99 = *(void *)(v0 + 928);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v104._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446210;
    uint64_t v23 = *(void *)(v0 + 40);
    unint64_t v22 = *(void *)(v0 + 48);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 800) = sub_1000143F4(v23, v22, &v104._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10035B440(v0 + 16);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v18(v99, v20);
  }
  else
  {
    sub_10035B440(v0 + 16);

    v18(v19, v20);
  }
  uint64_t v29 = *(void *)(v0 + 840);
  uint64_t v30 = *(void *)(v0 + 832);
  uint64_t v31 = *(void *)(v0 + 824);
  swift_getObjectType();
  v104._uint64_t countAndFlagsBits = 0x4920656C646E7542;
  v104._object = (void *)0xEB00000000203A44;
  uint64_t v32 = *(void *)(v0 + 40);
  long long v33 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  XPCClientProtocol.logMessage(_:)(v104);
  swift_bridgeObjectRelease();
  uint64_t v35 = *(void *)(v0 + 160);
  static Platform.iOS.getter();
  Platform.description.getter();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  Swift::String v36 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (*(void *)(v35 + 16))
  {
    unint64_t v37 = sub_100016D20(v36._countAndFlagsBits, (uint64_t)v36._object);
    if (v38)
    {
      os_log_type_t v39 = *(void **)(v0 + 816);
      BOOL v40 = (uint64_t *)(*(void *)(v35 + 56) + 40 * v37);
      uint64_t v41 = *v40;
      uint64_t v42 = v40[1];
      uint64_t v43 = v40[2];
      uint64_t v100 = v40[3];
      uint64_t v44 = (void *)v40[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v45 = v39[8];
      uint64_t v46 = v39[9];
      uint64_t v47 = v39[10];
      BOOL v48 = v45 < v41;
      if (v45 == v41 && (BOOL v48 = v46 < v42, v46 == v42))
      {
        if (v47 >= v43)
        {
LABEL_14:
          uint64_t v49 = *(void *)(v0 + 816);
          swift_bridgeObjectRelease();
          uint64_t v50 = *(void *)(v49 + 48);
          uint64_t v51 = *(void *)(v49 + 56);
          uint64_t v52 = *(void *)(v49 + 88);
          uint64_t v53 = *(void *)(v49 + 96);
          int v54 = *(_DWORD *)(v49 + 112);
          char v55 = *(unsigned char *)(v49 + 116);
          char v56 = *(unsigned char *)(v49 + 117);
          char v57 = *(unsigned char *)(v49 + 118);
          uint64_t v58 = *(void *)(v49 + 104);
          long long v60 = *(_OWORD *)(v49 + 16);
          long long v59 = *(_OWORD *)(v49 + 32);
          *(void *)(v0 + 432) = v39[1];
          *(_OWORD *)(v0 + 440) = v60;
          *(_OWORD *)(v0 + 456) = v59;
          *(void *)(v0 + 472) = v50;
          *(void *)(v0 + 480) = v51;
          *(void *)(v0 + 488) = v45;
          *(void *)(v0 + 496) = v46;
          *(void *)(v0 + 504) = v47;
          *(void *)(v0 + 512) = v52;
          *(void *)(v0 + 520) = v53;
          *(void *)(v0 + 528) = v58;
          *(_DWORD *)(v0 + 536) = v54;
          *(unsigned char *)(v0 + 540) = v55;
          *(unsigned char *)(v0 + 541) = v56;
          *(unsigned char *)(v0 + 542) = v57;
          sub_10026C95C(v0 + 432, v0 + 672);
          sub_100376328(v0 + 672, v0 + 608);
          if (*(void *)(v0 + 616))
          {
            long long v61 = *(_OWORD *)(v0 + 624);
            *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 608);
            *(_OWORD *)(v0 + 560) = v61;
            long long v62 = *(_OWORD *)(v0 + 656);
            *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 640);
            *(_OWORD *)(v0 + 592) = v62;
            sub_100375FC8(v0 + 16, v0 + 544);
            sub_10035B440(v0 + 16);
            uint64_t v63 = *(void *)(v0 + 560);
            swift_bridgeObjectRetain();
            sub_10018A1C0(&v104, v0 + 432, v63);
            uint64_t v64 = swift_bridgeObjectRelease();
            object = v104._object;
            if (v104._object)
            {
              uint64_t v73 = v108;
              uint64_t v72 = v109;
              uint64_t v75 = v106;
              uint64_t v74 = v107;
              uint64_t v76 = v105;
              uint64_t countAndFlagsBits = v104._countAndFlagsBits;
              *(void *)(v0 + 736) = v104._countAndFlagsBits;
              *(void *)(v0 + 744) = object;
              *(void *)(v0 + 752) = v76;
              *(void *)(v0 + 760) = v75;
              *(void *)(v0 + 768) = v74;
              *(void *)(v0 + 776) = v73;
              *(void *)(v0 + 784) = v72;
              uint64_t v101 = sub_10018A9D8(v64, v65, v66, v67, v68, v69, v70);
              Swift::String v98 = v78;
              sub_10018B054(countAndFlagsBits, (uint64_t)object);
              swift_getObjectType();
              v104._uint64_t countAndFlagsBits = 0;
              v104._object = (void *)0xE000000000000000;
              _StringGuts.grow(_:)(25);
              swift_bridgeObjectRelease();
              v104._uint64_t countAndFlagsBits = 0xD000000000000012;
              v104._object = (void *)0x80000001005BE6B0;
              v79._uint64_t countAndFlagsBits = v101;
              v79._object = v98;
              String.append(_:)(v79);
              swift_bridgeObjectRelease();
              unint64_t v80 = 10272;
              unint64_t v81 = 0xE200000000000000;
            }
            else
            {
              swift_getObjectType();
              v104._uint64_t countAndFlagsBits = 0;
              v104._object = (void *)0xE000000000000000;
              _StringGuts.grow(_:)(79);
              unint64_t v80 = 0xD00000000000004CLL;
              unint64_t v81 = 0x80000001005BE660;
            }
            String.append(_:)(*(Swift::String *)&v80);
            uint64_t v94 = *(void *)(v0 + 544);
            char v95 = *(void **)(v0 + 552);
            swift_bridgeObjectRetain();
            v96._uint64_t countAndFlagsBits = v94;
            v96._object = v95;
            String.append(_:)(v96);
            sub_10019C8B0((uint64_t *)(v0 + 672));
            swift_bridgeObjectRelease();
            v97._uint64_t countAndFlagsBits = 41;
            v97._object = (void *)0xE100000000000000;
            String.append(_:)(v97);
            XPCClientProtocol.logMessage(_:)(v104);
            sub_100013510(v102, (unint64_t)log);
            swift_bridgeObjectRelease();
            goto LABEL_20;
          }
          sub_10035B440(v0 + 16);
          swift_getObjectType();
          unint64_t v82 = 0xD000000000000019;
          uint64_t v83 = "No eligible variant found";
          goto LABEL_18;
        }
      }
      else if (!v48)
      {
        goto LABEL_14;
      }
      uint64_t v86 = *(void *)(v0 + 816);
      sub_10035B440(v0 + 16);
      swift_getObjectType();
      v104._uint64_t countAndFlagsBits = 0;
      v104._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v87._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
      v87._object = (void *)0x80000001005BE6D0;
      String.append(_:)(v87);
      v88._uint64_t countAndFlagsBits = v100;
      v88._object = v44;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._uint64_t countAndFlagsBits = 0x6C6175746341202CLL;
      v89._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v89);
      uint64_t v90 = *(void *)(v86 + 88);
      uint64_t v91 = *(void **)(v86 + 96);
      swift_bridgeObjectRetain();
      v92._uint64_t countAndFlagsBits = v90;
      v92._object = v91;
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._uint64_t countAndFlagsBits = 41;
      v93._object = (void *)0xE100000000000000;
      String.append(_:)(v93);
      XPCClientProtocol.logMessage(_:)(v104);
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  sub_10035B440(v0 + 16);
  swift_getObjectType();
  unint64_t v82 = 0xD000000000000030;
  uint64_t v83 = "No minimum OS specified for the current platform";
LABEL_18:
  unint64_t v84 = (unint64_t)(v83 - 32) | 0x8000000000000000;
  XPCClientProtocol.logMessage(_:)(*(Swift::String *)&v82);
LABEL_19:
  sub_100013510(v102, (unint64_t)log);
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
  return v28();
}

uint64_t sub_100375D78()
{
  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 792) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error fetching valid manifest: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v1;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 944);
  uint64_t v8 = *(void *)(v0 + 920);
  uint64_t v9 = *(void *)(v0 + 904);

  v7(v8, v9);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void sub_100375FC8(uint64_t a1, uint64_t a2)
{
  if (sub_100431C0C())
  {
    swift_getObjectType();
    v4._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v4._object = (void *)0x80000001005BE750;
    XPCClientProtocol.logMessage(_:)(v4);
  }
  else if (sub_100431CDC(*(void *)(a1 + 152))[2])
  {
    swift_getObjectType();
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 0xD000000000000019;
    v6._object = (void *)0x80000001005BE700;
    XPCClientProtocol.logMessage(_:)(v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v7 = sub_100431EC0();
    if ((v7 & 0x8000000000000000) != 0 || v7 < *(void *)(a2 + 40))
    {
      swift_getObjectType();
      _StringGuts.grow(_:)(52);
      v8._uint64_t countAndFlagsBits = 0xD000000000000023;
      v8._object = (void *)0x80000001005BE720;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 0x616C69617661202CLL;
      v10._object = (void *)0xED0000203A656C62;
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      XPCClientProtocol.logMessage(_:)(v12);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t type metadata accessor for ManifestValidationTask()
{
  uint64_t result = qword_1006616C8;
  if (!qword_1006616C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100376268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ManifestValidationTask();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003762CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ManifestValidationTask();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100376328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065B7C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100376390(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = a2[7];
    long long v9 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v9;
    uint64_t v10 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v10;
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(unsigned char *)(a1 + 116) = *((unsigned char *)a2 + 116);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v15 = a1 + v11;
    uint64_t v16 = (uint64_t)a2 + v11;
    *(_WORD *)(a1 + 117) = *(_WORD *)((char *)a2 + 117);
    uint64_t v12 = type metadata accessor for URL();
    long long v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v15, v16, v12);
  }
  return v5;
}

uint64_t sub_1003764F4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100376594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v10;
  uint64_t v15 = a2 + v10;
  *(_WORD *)(a1 + 117) = *(_WORD *)(a2 + 117);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, v15, v11);
  return a1;
}

uint64_t sub_1003766A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100376818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 103) = *(_OWORD *)(a2 + 103);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1003768CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  char v10 = *(unsigned char *)(a2 + 118);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(a1 + 118) = v10;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1003769D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003769EC);
}

uint64_t sub_1003769EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    long long v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100376A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100376AB0);
}

void *sub_100376AB0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100376B58()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100376BF8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1004560D8(0, v1, 0);
  uint64_t result = (void *)sub_100458280(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v24 = v1;
  int v25 = v4;
  uint64_t v26 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v27 = v6;
    uint64_t v11 = *(void *)(a1 + 56) + 104 * v5;
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v35 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 24);
    uint64_t v14 = *(void *)(v11 + 40);
    uint64_t v33 = *(void *)(v11 + 32);
    uint64_t v34 = *(void *)(v11 + 16);
    uint64_t v32 = *(void *)(v11 + 48);
    char v31 = *(unsigned char *)(v11 + 56);
    uint64_t v15 = *(void *)(v11 + 72);
    uint64_t v29 = *(void *)(v11 + 80);
    uint64_t v30 = *(void *)(v11 + 64);
    char v28 = *(unsigned char *)(v11 + 96);
    uint64_t v36 = *(void *)(v11 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = v15;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1) {
      uint64_t result = (void *)sub_1004560D8(v16 > 1, v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    uint64_t v18 = &_swiftEmptyArrayStorage[13 * v17];
    void v18[4] = v35;
    v18[5] = v12;
    v18[6] = v34;
    v18[7] = v13;
    v18[8] = v33;
    v18[9] = v14;
    v18[10] = v32;
    *((unsigned char *)v18 + 88) = v31;
    v18[12] = v30;
    v18[13] = v37;
    v18[14] = v29;
    v18[15] = v36;
    *((unsigned char *)v18 + 128) = v28;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v19 = *(void *)(v26 + 8 * v10);
    if ((v19 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v25;
    if (*(_DWORD *)(a1 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v20 = v19 & (-2 << (v5 & 0x3F));
    if (v20)
    {
      int64_t v8 = __clz(__rbit64(v20)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v24;
    }
    else
    {
      unint64_t v21 = v10 + 1;
      unint64_t v22 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v24;
      if (v10 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v26 + 8 * v21);
        if (v23)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v10)
          {
            unint64_t v23 = *(void *)(a1 + 80 + 8 * v10++);
            if (v23)
            {
              unint64_t v21 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v27 + 1;
    uint64_t v5 = v8;
    if (v27 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100376EB8(uint64_t a1)
{
  unint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_100290934(0, *(void *)(v3 + 16) + 1, 1, v3);
  }
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  if (v5 >= v4 >> 1) {
    unint64_t v3 = sub_100290934(v4 > 1, v5 + 1, 1, v3);
  }
  *(void *)(v3 + 16) = v5 + 1;
  uint64_t v6 = *(void *)(type metadata accessor for Restore() - 8);
  uint64_t result = sub_1003A4FE4(a1, v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5);
  *int64_t v1 = v3;
  return result;
}

uint64_t sub_100376FB4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v67 = a7;
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  LODWORD(v13) = a4;
  uint64_t v62 = a3;
  uint64_t v65 = a2;
  uint64_t v60 = a10;
  unsigned __int8 v15 = a9;
  uint64_t v16 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v22 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v66 = (char *)v50 - v23;
  uint64_t v24 = type metadata accessor for LogKey.Prefix();
  __chkstk_darwin(v24);
  (*(void (**)(char *, void))(v26 + 104))((char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for LogKey.Prefix.bootstrap(_:));
  id v27 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  char v28 = (void *)LogKey.init(prefix:)();
  long long v61 = v28;
  if (a8)
  {
    LODWORD(v56) = a9;
    swift_bridgeObjectRetain();
    static Logger.restore.getter();
    id v29 = v28;
    swift_bridgeObjectRetain();
    id v30 = v29;
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      LODWORD(v53) = v33;
      uint64_t v35 = v34;
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v68 = (uint64_t)v30;
      v69[0] = v54;
      *(_DWORD *)uint64_t v35 = 138412546;
      unint64_t v55 = a8;
      os_log_t v52 = v31;
      v50[1] = v69;
      id v36 = v30;
      int v57 = (int)v13;
      id v13 = v36;
      a8 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v30;

      *(_WORD *)(v35 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_1000143F4(v67, a8, v69);
      LOBYTE(v13) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      char v31 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v53, "[%@] Begin restoring candidates matching accountID: %{public}s", (uint8_t *)v35, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v59);
    unsigned __int8 v15 = v56;
  }
  else
  {
    int v57 = (int)v13;
    uint64_t v66 = v18;
    static Logger.restore.getter();
    uint64_t v37 = v28;
    char v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v56 = v11;
      uint64_t v40 = swift_slowAlloc();
      unint64_t v55 = 0;
      uint64_t v41 = (uint8_t *)v40;
      uint64_t v42 = (void *)swift_slowAlloc();
      uint64_t v53 = v41;
      uint64_t v54 = a1;
      *(_DWORD *)uint64_t v41 = 138412290;
      v69[0] = (uint64_t)v37;
      uint64_t v43 = v37;
      a1 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v42 = v37;

      uint64_t v11 = v56;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%@] Begin restoring", v53, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      a8 = v55;
      swift_slowDealloc();
    }
    else
    {

      char v38 = v37;
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v59);
    uint64_t v18 = v66;
    LOBYTE(v13) = v57;
  }
  uint64_t v44 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v18, 1, 1, v44);
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = 0;
  *(void *)(v45 + 24) = 0;
  uint64_t v46 = v61;
  *(void *)(v45 + 32) = v11;
  *(void *)(v45 + 40) = v46;
  *(void *)(v45 + 48) = v67;
  *(void *)(v45 + 56) = a8;
  uint64_t v47 = v65;
  *(void *)(v45 + 64) = a1;
  *(void *)(v45 + 72) = v47;
  *(void *)(v45 + 80) = v62;
  *(unsigned char *)(v45 + 88) = (_BYTE)v13;
  uint64_t v48 = v64;
  *(void *)(v45 + 96) = v63;
  *(void *)(v45 + 104) = v48;
  *(unsigned char *)(v45 + 112) = v15;
  sub_10001733C(v60, v45 + 116, &qword_10065C310);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_100017544((uint64_t)v18, (uint64_t)&unk_100661838, v45);
  return swift_release();
}

unint64_t sub_10037762C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 > 1u)
  {
    switch(a1)
    {
      case 1:
        sub_1000172F8(&qword_10065C3A0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v10;
        *(void *)(inited + 72) = &type metadata for String;
        unint64_t v8 = 0xD000000000000012;
        int64_t v9 = "Has active install";
        break;
      case 2:
        sub_1000172F8(&qword_10065C3A0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v11;
        *(void *)(inited + 72) = &type metadata for String;
        unint64_t v8 = 0xD000000000000012;
        int64_t v9 = "Has active restore";
        break;
      case 3:
        sub_1000172F8(&qword_10065C3A0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v12;
        *(void *)(inited + 72) = &type metadata for String;
        unint64_t v8 = 0xD000000000000013;
        int64_t v9 = "Device not eligible";
        break;
      default:
        sub_1000172F8(&qword_10065C3A0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v7;
        *(void *)(inited + 72) = &type metadata for String;
        unint64_t v8 = 0xD000000000000019;
        int64_t v9 = "Distributor not available";
        break;
    }
    *(void *)(inited + 48) = v8;
    *(void *)(inited + 56) = (unint64_t)(v9 - 32) | 0x8000000000000000;
  }
  else
  {
    sub_1000172F8(&qword_10065C3A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a1;
    *(void *)(inited + 56) = a2;
    swift_bridgeObjectRetain();
  }
  return sub_10044B428(inited);
}

unint64_t sub_100377884(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unint64_t v3 = a1;
  if (a3 >= 2u)
  {
    unint64_t v3 = 0xD000000000000013;
    switch(a1)
    {
      case 1:
      case 2:
        unint64_t v3 = 0xD000000000000012;
        break;
      case 3:
        break;
      default:
        unint64_t v3 = 0xD000000000000019;
        break;
    }
  }
  sub_1003AF0A0(a1, a2, a3);
  return v3;
}

uint64_t sub_10037794C(uint64_t a1)
{
  unint64_t v2 = sub_1003AF29C();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100377988(uint64_t a1)
{
  unint64_t v2 = sub_1003AF29C();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1003779C4()
{
  if (!*(unsigned char *)(v0 + 16)) {
    return 700;
  }
  if (*(unsigned char *)(v0 + 16) == 1) {
    return 799;
  }
  return qword_1005AC980[*(void *)v0];
}

unint64_t sub_1003779F8()
{
  return sub_10037762C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

unint64_t sub_100377A04()
{
  return sub_100377884(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100377A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = sub_1000172F8(&qword_100661948);
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v3[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[16] = v6;
  v3[17] = *(void *)(v6 - 8);
  v3[18] = swift_task_alloc();
  sub_1000172F8(&qword_100661820);
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100377C1C, 0, 0);
}

uint64_t sub_100377C1C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + 152);
  *(void *)(v0 + 160) = v1;
  return _swift_task_switch(sub_100377CB0, v1, 0);
}

uint64_t sub_100377CB0()
{
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v4 = v0[16];
  sub_100017238(v0[20] + *(void *)(*(void *)v0[20] + 104), v1, &qword_100661820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v4);
  id v5 = [self defaultManager];
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = v7;
  type metadata accessor for URLResourceKey(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[2] = 0;
  id v10 = [v5 contentsOfDirectoryAtURL:v8 includingPropertiesForKeys:isa options:0 error:v0 + 2];

  uint64_t v11 = (void *)v0[2];
  uint64_t v13 = v0[17];
  uint64_t v12 = v0[18];
  uint64_t v14 = v0[16];
  if (v10)
  {
    v0[21] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v11;

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v16 = sub_100377EB4;
  }
  else
  {
    id v17 = v11;
    v0[25] = _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v16 = sub_1003783D8;
  }
  return _swift_task_switch(v16, 0, 0);
}

uint64_t sub_100377EB4()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[15];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v1;
  sub_100378E80(v2, (uint64_t)&unk_100661958, (uint64_t)v4, (uint64_t)&unk_100644368, &qword_100661850, (uint64_t)&unk_100661988);
  sub_10001729C(v2, &qword_10065B220);
  sub_1000172F8(&qword_100661850);
  TaskGroup.makeAsyncIterator()();
  v0[22] = 0;
  v0[23] = &_swiftEmptyDictionarySingleton;
  id v5 = (void *)swift_task_alloc();
  v0[24] = v5;
  *id v5 = v0;
  v5[1] = sub_100378080;
  uint64_t v6 = v0[12];
  return TaskGroup.Iterator.next(isolation:)(v0 + 4, 0, 0, v6);
}

uint64_t sub_100378080()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003781A8, 0, 0);
}

uint64_t sub_1003781A8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    **(void **)(v0 + 48) = *(void *)(v0 + 184);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 176);
      uint64_t v3 = *(void *)(v0 + 184);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 40) = v3;
      sub_1003A5390(v1, (uint64_t)sub_1003A5750, 0, isUniquelyReferenced_nonNull_native, (uint64_t *)(v0 + 40));
      if (v2)
      {
        return swift_bridgeObjectRelease();
      }
      uint64_t v7 = *(void *)(v0 + 40);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 176) = 0;
      *(void *)(v0 + 184) = v7;
    }
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100378080;
    uint64_t v9 = *(void *)(v0 + 96);
    return TaskGroup.Iterator.next(isolation:)(v0 + 32, 0, 0, v9);
  }
}

uint64_t sub_1003783D8()
{
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to lookup active restores: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  unint64_t v9 = sub_10044C74C((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease();
  **(void **)(v0 + 48) = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10037862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  uint64_t v5 = type metadata accessor for Restore();
  v4[5] = v5;
  v4[6] = *(void *)(v5 - 8);
  v4[7] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[8] = v6;
  v4[9] = *(void *)(v6 - 8);
  v4[10] = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_100378794, 0, 0);
}

uint64_t sub_100378794()
{
  uint64_t v1 = *(void *)(v0[4] + 16);
  v0[16] = &_swiftEmptyDictionarySingleton;
  v0[17] = 0;
  v0[14] = v1;
  v0[15] = 0;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100378814, 0, 0);
}

uint64_t sub_100378814(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3[17];
  unint64_t v5 = v3[14];
  if ((uint64_t)v4 >= (uint64_t)v5)
  {
    id v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3[6] + 56);
    v15(v3[13], 1, 1, v3[5]);
    unint64_t v28 = v3[17];
    uint64_t v27 = v3[15];
  }
  else
  {
    if (v4 >= v5)
    {
      __break(1u);
      return _swift_task_switch(a1, a2, a3);
    }
    uint64_t v6 = *(unsigned __int8 *)(v3[9] + 80);
    uint64_t v7 = v3[4] + ((v6 + 32) & ~v6);
    uint64_t v8 = v3[15];
    do
    {
      (*(void (**)(void, unint64_t, void))(v3[9] + 16))(v3[10], v7 + *(void *)(v3[9] + 72) * v4, v3[8]);
      uint64_t v17 = Data.init(contentsOf:options:)();
      if (v8)
      {
        uint64_t v9 = v3[12];
        uint64_t v10 = v3[9];
        uint64_t v11 = v3[10];
        uint64_t v12 = v3[8];
        uint64_t v13 = v3[5];
        uint64_t v14 = v3[6];
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
        id v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
        v15(v9, 1, 1, v13);
      }
      else
      {
        uint64_t v19 = v17;
        unint64_t v20 = v18;
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        sub_1003ADD04(&qword_100661828, (void (*)(uint64_t))type metadata accessor for Restore);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v21 = v3[12];
        uint64_t v22 = v3[9];
        uint64_t v30 = v3[8];
        uint64_t v31 = v3[10];
        uint64_t v24 = v3[5];
        uint64_t v23 = v3[6];
        sub_100013510(v19, v20);
        swift_release();
        id v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v15(v21, 0, 1, v24);
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v31, v30);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v24) != 1)
        {
          uint64_t v25 = v3[13];
          uint64_t v26 = v3[5];
          sub_1003A4FE4(v3[12], v25);
          v15(v25, 0, 1, v26);
          uint64_t v27 = 0;
          unint64_t v28 = v4 + 1;
          goto LABEL_11;
        }
      }
      uint64_t v16 = v3[14];
      sub_10001729C(v3[12], &qword_100661818);
      uint64_t v8 = 0;
      ++v4;
    }
    while (v4 != v16);
    v15(v3[13], 1, 1, v3[5]);
    uint64_t v27 = 0;
    unint64_t v28 = v3[14];
  }
LABEL_11:
  v3[19] = v15;
  v3[20] = v28;
  v3[18] = v27;
  a1 = sub_100378B28;
  a2 = 0;
  a3 = 0;
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100378B28()
{
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[5];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[6] + 48))(v2, 1, v3);
  uint64_t v5 = v0[16];
  if (v4 == 1)
  {
    uint64_t v6 = (void *)v0[3];
    swift_bridgeObjectRelease();
    *uint64_t v6 = v5;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  sub_1003AEFD4(v2, v0[7], (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v9 = (uint64_t *)(v2 + *(int *)(v3 + 36));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  sub_1003AF03C(v2, (uint64_t (*)(void))type metadata accessor for Restore);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v0[2] = v5;
  unint64_t v13 = sub_100016D20(v11, v10);
  uint64_t v15 = *(void *)(v5 + 16);
  BOOL v16 = (v14 & 1) == 0;
  BOOL v17 = __OFADD__(v15, v16);
  uint64_t v18 = v15 + v16;
  if (v17)
  {
    __break(1u);
    goto LABEL_15;
  }
  LOBYTE(v2) = v14;
  uint64_t v1 = v0 + 2;
  if (*(void *)(v0[16] + 24) >= v18)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_12:
      unint64_t v20 = (void *)*v1;
      if (v2)
      {
LABEL_13:
        uint64_t v21 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[19];
        uint64_t v22 = v0[11];
        uint64_t v23 = v0[7];
        uint64_t v24 = v0[5];
        unint64_t v25 = *(void *)(v0[6] + 72) * v13;
        sub_1003A4FE4(v20[7] + v25, v22);
        sub_1003A4FE4(v23, v20[7] + v25);
        v21(v22, 0, 1, v24);
        goto LABEL_18;
      }
LABEL_16:
      uint64_t v28 = v0[6];
      uint64_t v27 = v0[7];
      v20[(v13 >> 6) + 8] |= 1 << v13;
      id v29 = (uint64_t *)(v20[6] + 16 * v13);
      *id v29 = v11;
      v29[1] = v10;
      uint64_t v30 = (uint64_t (*)())sub_1003A4FE4(v27, v20[7] + *(void *)(v28 + 72) * v13);
      uint64_t v33 = v20[2];
      BOOL v17 = __OFADD__(v33, 1);
      uint64_t v34 = v33 + 1;
      if (v17)
      {
        __break(1u);
        return _swift_task_switch(v30, v31, v32);
      }
      uint64_t v35 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[19];
      uint64_t v36 = v0[11];
      uint64_t v37 = v0[5];
      void v20[2] = v34;
      v35(v36, 1, 1, v37);
      swift_bridgeObjectRetain();
LABEL_18:
      uint64_t v38 = v0[11];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001729C(v38, &qword_100661818);
      uint64_t v39 = v0[20];
      uint64_t v40 = v0[18];
      v0[16] = v20;
      v0[17] = v39;
      v0[15] = v40;
      uint64_t v30 = sub_100378814;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      return _swift_task_switch(v30, v31, v32);
    }
LABEL_15:
    unint64_t v26 = v13;
    sub_10052D3D8();
    unint64_t v13 = v26;
    unint64_t v20 = (void *)*v1;
    if (v2) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  sub_10052676C(v18, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = sub_100016D20(v11, v10);
  if ((v2 & 1) == (v19 & 1)) {
    goto LABEL_12;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_100378E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017238(a1, (uint64_t)v14, &qword_10065B220);
  uint64_t v15 = type metadata accessor for TaskPriority();
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  unint64_t v26 = v6;
  uint64_t v27 = a6;
  if (v17 == 1)
  {
    sub_10001729C((uint64_t)v14, &qword_10065B220);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v20 = v19;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v18 = 0;
  uint64_t v20 = 0;
LABEL_6:
  uint64_t v21 = *v26;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  sub_1000172F8(a5);
  uint64_t v23 = (void *)(v20 | v18);
  if (v20 | v18)
  {
    v31[0] = 0;
    v31[1] = 0;
    uint64_t v23 = v31;
    v31[2] = v18;
    v31[3] = v20;
  }
  uint64_t v28 = 1;
  id v29 = v23;
  uint64_t v30 = v21;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100379094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v15;
  *(unsigned char *)(v8 + 129) = v14;
  *(unsigned char *)(v8 + 128) = v12;
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 80) = v13;
  *(void *)(v8 + 48) = a7;
  *(void *)(v8 + 56) = a8;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  *(void *)(v8 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_100379158, 0, 0);
}

void sub_100379158()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  char v3 = *(unsigned char *)(v0 + 129);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  char v6 = *(unsigned char *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v10 = type metadata accessor for Logger();
  long long v13 = *(_OWORD *)(v0 + 24);
  long long v14 = *(_OWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v1, 1, 1, v10);
  uint64_t v11 = swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *(_OWORD *)(v11 + 16) = v13;
  *(void *)(v11 + 32) = v9;
  *(void *)(v11 + 40) = v8;
  *(_OWORD *)(v11 + 48) = v14;
  *(void *)(v11 + 64) = v7;
  *(unsigned char *)(v11 + 72) = v6;
  *(void *)(v11 + 80) = v5;
  *(void *)(v11 + 88) = v4;
  *(unsigned char *)(v11 + 96) = v3;
  *(void *)(v11 + 104) = v2;
  uint64_t v15 = (char *)&dword_10065C340 + dword_10065C340;
  char v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *char v12 = v0;
  v12[1] = sub_100379300;
  __asm { BR              X8; sub_100008B8C }
}

uint64_t sub_100379300()
{
  uint64_t v1 = *(void *)(*v0 + 104);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001729C(v1, (uint64_t *)&unk_100661AB0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10037943C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v14;
  *(unsigned char *)(v8 + 153) = v13;
  *(_OWORD *)(v8 + 80) = v12;
  *(unsigned char *)(v8 + 152) = v11;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 24) = a2;
  sub_1000172F8(&qword_10065B220);
  *(void *)(v8 + 104) = swift_task_alloc();
  return _swift_task_switch(sub_100379500, 0, 0);
}

uint64_t sub_100379500()
{
  uint64_t v1 = sub_1000172F8(&qword_100661850);
  uint64_t v2 = sub_1000172F8(&qword_100661868);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v3;
  void *v3 = v0;
  v3[1] = sub_1003795F8;
  uint64_t v4 = *(void *)(v0 + 24);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v2, 0, 0, &unk_100661860, v4, v1);
}

uint64_t sub_1003795F8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003796F4, 0, 0);
}

uint64_t sub_1003796F4()
{
  uint64_t v1 = v0[2].i64[1];
  uint64_t v2 = v0[3].i64[0];
  char v3 = (void *)v0[2].i64[0];
  int8x16_t v9 = v0[1];
  v0[7].i64[1] = v9.i64[0];
  uint64_t v4 = sub_1003A6018(v3, v1, v2);
  v0[8].i64[0] = v4;
  uint64_t v5 = sub_1000172F8(&qword_100661870);
  uint64_t v6 = swift_task_alloc();
  v0[8].i64[1] = v6;
  *(void *)(v6 + 16) = v4;
  *(int8x16_t *)(v6 + 24) = vextq_s8(v9, v9, 8uLL);
  *(void *)(v6 + 40) = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9].i64[0] = (uint64_t)v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100379828;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v7, v5, (char *)&type metadata for () + 8, 0, 0, &unk_100661880, v6, v5);
}

uint64_t sub_100379828()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100379980, 0, 0);
}

uint64_t sub_100379980()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  char v14 = *(unsigned char *)(v0 + 153);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  char v5 = *(unsigned char *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void **)(v0 + 32);
  uint64_t v9 = type metadata accessor for TaskPriority();
  long long v15 = *(_OWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v1, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v8;
  *(void *)(v10 + 48) = v6;
  *(_OWORD *)(v10 + 56) = v15;
  *(unsigned char *)(v10 + 72) = v5;
  *(void *)(v10 + 80) = v4;
  *(void *)(v10 + 88) = v3;
  sub_10001733C(v2, v10 + 96, &qword_10065C310);
  *(unsigned char *)(v10 + 129) = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  id v11 = v8;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1000163AC(v1, (uint64_t)&unk_100661890, v10);
  swift_release();
  swift_task_dealloc();
  long long v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100379B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[15] = a5;
  v6[16] = a6;
  v6[13] = a3;
  v6[14] = a4;
  v6[12] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[17] = v7;
  v6[18] = *(void *)(v7 - 8);
  v6[19] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  uint64_t v8 = *(void *)(type metadata accessor for Restore() - 8);
  v6[22] = v8;
  v6[23] = *(void *)(v8 + 64);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  uint64_t v9 = sub_1000172F8(&qword_100661918);
  v6[26] = v9;
  v6[27] = *(void *)(v9 - 8);
  v6[28] = swift_task_alloc();
  return _swift_task_switch(sub_100379CDC, 0, 0);
}

uint64_t sub_100379CDC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 176);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + ((v4 + 32) & ~v4);
    uint64_t v29 = (v4 + 40) & ~v4;
    uint64_t v30 = *(void *)(v3 + 72);
    unint64_t v28 = (*(void *)(v0 + 184) + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v31 = v5;
      uint64_t v32 = v2;
      uint64_t v8 = *(void *)(v0 + 192);
      uint64_t v9 = *(void *)(v0 + 200);
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 120);
      uint64_t v33 = *(void **)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 112);
      sub_1003AEFD4(v5, v9, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v14 = type metadata accessor for TaskPriority();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
      sub_1003AEFD4(v9, v8, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v16 = (void *)swift_allocObject();
      void v16[2] = 0;
      v16[3] = 0;
      uint64_t v16[4] = v12;
      sub_1003A4FE4(v8, (uint64_t)v16 + v29);
      *(void *)((char *)v16 + v28) = v33;
      *(void *)((char *)v16 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8)) = v13;
      sub_100017238(v11, v10, &qword_10065B220);
      LODWORD(v10) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14);
      swift_bridgeObjectRetain();
      id v17 = v33;
      swift_retain();
      uint64_t v18 = *(void *)(v0 + 160);
      if (v10 == 1)
      {
        sub_10001729C(*(void *)(v0 + 160), &qword_10065B220);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
      }
      if (v16[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v21 = v20;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v21 = 0;
      }
      uint64_t v22 = **(void **)(v0 + 96);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = &unk_100661930;
      *(void *)(v23 + 24) = v16;
      sub_1000172F8(&qword_100661870);
      uint64_t v24 = v21 | v19;
      if (v21 | v19)
      {
        uint64_t v24 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v19;
        *(void *)(v0 + 40) = v21;
      }
      uint64_t v6 = *(void *)(v0 + 200);
      uint64_t v7 = *(void *)(v0 + 168);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v24;
      *(void *)(v0 + 64) = v22;
      swift_task_create();
      swift_release();
      sub_10001729C(v7, &qword_10065B220);
      sub_1003AF03C(v6, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v5 = v31 + v30;
      uint64_t v2 = v32 - 1;
    }
    while (v32 != 1);
    swift_bridgeObjectRelease();
  }
  sub_1000172F8(&qword_100661870);
  TaskGroup.makeAsyncIterator()();
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_10037A0F4;
  uint64_t v26 = *(void *)(v0 + 208);
  return TaskGroup.Iterator.next(isolation:)(v0 + 72, 0, 0, v26);
}

uint64_t sub_10037A0F4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10037A1F0, 0, 0);
}

uint64_t sub_10037A1F0()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void *)(v0 + 72);
  int v2 = *(unsigned __int8 *)(v0 + 88);
  if (v2 == 255)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 80);
    if (v2)
    {
      sub_1003ADFB0(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
    }
    else
    {
      uint64_t v4 = *(void **)(v0 + 128);
      sub_1003ADFD8(*(void *)(v0 + 72), *(void *)(v0 + 80), 0);
      static Logger.restore.getter();
      id v5 = v4;
      sub_1003ADFE8(v1, v3, v2);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      os_log_t log = v6;
      BOOL v8 = os_log_type_enabled(v6, v7);
      uint64_t v10 = *(void *)(v0 + 144);
      uint64_t v9 = *(void *)(v0 + 152);
      uint64_t v11 = *(void **)(v0 + 128);
      uint64_t v12 = *(void *)(v0 + 136);
      if (v8)
      {
        uint64_t v20 = *(void *)(v0 + 136);
        uint64_t v13 = swift_slowAlloc();
        uint64_t v19 = v9;
        uint64_t v14 = (void *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 138412546;
        *(void *)(v13 + 4) = v11;
        *uint64_t v14 = v11;

        *(_WORD *)(v13 + 12) = 2082;
        sub_1003ADFD8(v1, v3, 0);
        *(void *)(v13 + 14) = sub_1000143F4(v1, v3, &v22);
        sub_1003ADFB0(v1, v3, v2);
        sub_1003ADFB0(v1, v3, v2);
        sub_1003ADFC8(v1, v3, 0);
        _os_log_impl((void *)&_mh_execute_header, log, v7, "[%@][%{public}s] Saved new restore", (uint8_t *)v13, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1003ADFB0(v1, v3, v2);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v19, v20);
      }
      else
      {
        sub_1003ADFB0(v1, v3, v2);

        sub_1003ADFB0(v1, v3, v2);
        sub_1003ADFB0(v1, v3, v2);

        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
      }
    }
    id v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v17;
    *id v17 = v0;
    v17[1] = sub_10037A0F4;
    uint64_t v18 = *(void *)(v0 + 208);
    return TaskGroup.Iterator.next(isolation:)(v0 + 72, 0, 0, v18);
  }
}

uint64_t sub_10037A59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[13] = a1;
  uint64_t v8 = type metadata accessor for UUID();
  v7[18] = v8;
  v7[19] = *(void *)(v8 - 8);
  v7[20] = swift_task_alloc();
  sub_1000172F8(&qword_100660790);
  v7[21] = swift_task_alloc();
  uint64_t v9 = sub_1000172F8(&qword_100661940);
  v7[22] = v9;
  v7[23] = *(void *)(v9 - 8);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  v7[32] = v10;
  v7[33] = *(void *)(v10 - 8);
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v7[36] = v11;
  v7[37] = *(void *)(v11 - 8);
  v7[38] = swift_task_alloc();
  v7[39] = swift_task_alloc();
  v7[40] = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  v7[41] = swift_task_alloc();
  return _swift_task_switch(sub_10037A860, 0, 0);
}

uint64_t sub_10037A860()
{
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(int *)(*(void *)(v0 + 256) + 36);
  *(_DWORD *)(v0 + 384) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  if (!*(void *)(v2 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 264) + 56))(*(void *)(v0 + 328), 1, 1);
LABEL_7:
    uint64_t v13 = *(void *)(v0 + 136);
    sub_10001729C(*(void *)(v0 + 328), &qword_100661818);
    uint64_t v14 = *v4;
    uint64_t v15 = v4[1];
    uint64_t v16 = *(void *)(v13 + 160);
    *(void *)(v0 + 336) = v16;
    uint64_t v17 = swift_task_alloc();
    *(void *)(v0 + 344) = v17;
    *(void *)(v17 + 16) = v14;
    *(void *)(v17 + 24) = v15;
    uint64_t v18 = swift_task_alloc();
    *(void *)(v0 + 352) = v18;
    *(void *)(v18 + 16) = sub_1003AE000;
    *(void *)(v18 + 24) = v17;
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660780 + dword_100660780);
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10037ADB4;
    uint64_t v20 = *(void *)(v0 + 168);
    return v42(v20, (uint64_t)sub_1003AE008, v18, v16);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100016D20(v6, v5);
  if (v8)
  {
    sub_1003AEFD4(*(void *)(*(void *)(v0 + 112) + 56) + *(void *)(*(void *)(v0 + 264) + 72) * v7, *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 1;
  }
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v9, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    goto LABEL_7;
  }
  uint64_t v22 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void **)(v0 + 128);
  sub_10001729C(*(void *)(v0 + 328), &qword_100661818);
  static Logger.restore.getter();
  sub_1003AEFD4(v23, v22, (uint64_t (*)(void))type metadata accessor for Restore);
  id v25 = v24;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = *(void *)(v0 + 280);
  if (v28)
  {
    uint64_t v41 = *(void *)(v0 + 256);
    uint64_t v30 = *(void **)(v0 + 128);
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 138412546;
    *(void *)(v0 + 88) = v30;
    id v33 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v32 = v30;

    *(_WORD *)(v31 + 12) = 2112;
    uint64_t v34 = *(void **)(v29 + *(int *)(v41 + 20));
    *(void *)(v0 + 96) = v34;
    id v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32[1] = v34;
    sub_1003AF03C(v29, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%@][%@)] Skipping active bootstrapping restore", (uint8_t *)v31, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v36 = *(void **)(v0 + 128);

    sub_1003AF03C(v29, (uint64_t (*)(void))type metadata accessor for Restore);
  }

  uint64_t v37 = *(void *)(v0 + 104);
  (*(void (**)(void, void))(*(void *)(v0 + 296) + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
  sub_1003ADA60();
  uint64_t v38 = swift_allocError();
  *(_OWORD *)uint64_t v39 = xmmword_1005AC7F0;
  *(unsigned char *)(v39 + 16) = 2;
  *(void *)uint64_t v37 = v38;
  *(void *)(v37 + 8) = 0;
  *(unsigned char *)(v37 + 16) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_10037ADB4()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = sub_10037AF4C;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = sub_10037AFCC;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10037AF4C()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[21], 1, 1, v0[22]);
  return _swift_task_switch(sub_10037AFCC, 0, 0);
}

uint64_t sub_10037AFCC()
{
  long long v77 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = (uint64_t *)v0[21];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[23] + 48))(v2, 1, v1) == 1)
  {
    sub_10001729C((uint64_t)v2, &qword_100660790);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[46] = v3;
    void *v3 = v0;
    v3[1] = sub_10037B7E0;
    uint64_t v4 = v0[15];
    return sub_10037BDC4(v4);
  }
  else
  {
    uint64_t v64 = v0[34];
    unint64_t v7 = (void *)v0[30];
    uint64_t v6 = (char *)v0[31];
    char v8 = (void *)v0[27];
    uint64_t v71 = v0[29];
    uint64_t v72 = v0[28];
    uint64_t v67 = v0[26];
    uint64_t v69 = v0[25];
    uint64_t v9 = v0[19];
    uint64_t v74 = (void *)v0[16];
    uint64_t v60 = v0[18];
    uint64_t v62 = v0[15];
    uint64_t v10 = *(int *)(v1 + 48);
    uint64_t v11 = &v6[v10];
    uint64_t v12 = (char *)v2 + v10;
    uint64_t v14 = *v2;
    uint64_t v13 = v2[1];
    *(void *)uint64_t v6 = v14;
    *((void *)v6 + 1) = v13;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v59(&v6[v10], v12, v60);
    swift_bridgeObjectRetain();
    static Logger.restore.getter();
    sub_1003AEFD4(v62, v64, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v15 = (char *)v7 + *(int *)(v1 + 48);
    *unint64_t v7 = v14;
    v7[1] = v13;
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v15, v11, v60);
    sub_100017238((uint64_t)v7, v71, &qword_100661940);
    sub_10001733C((uint64_t)v7, v72, &qword_100661940);
    uint64_t v73 = v1;
    uint64_t v17 = (char *)v8 + *(int *)(v1 + 48);
    *char v8 = v14;
    v8[1] = v13;
    uint64_t v65 = v16;
    v16(v17, v11, v60);
    sub_100017238((uint64_t)v8, v67, &qword_100661940);
    sub_10001733C((uint64_t)v8, v69, &qword_100661940);
    id v18 = v74;
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v0[39];
    uint64_t v23 = v0[37];
    uint64_t v75 = v0[36];
    uint64_t v24 = v0[34];
    if (v21)
    {
      uint64_t v51 = v0[32];
      uint64_t v68 = (uint64_t *)v0[29];
      uint64_t v53 = v0[28];
      uint64_t v54 = v0[26];
      uint64_t v58 = v0[25];
      uint64_t v66 = (uint64_t *)v0[24];
      unint64_t v55 = (char *)v0[20];
      uint64_t v70 = v0[19];
      uint64_t v52 = v0[18];
      id v25 = (void *)v0[16];
      os_log_t log = v19;
      uint64_t v26 = swift_slowAlloc();
      os_log_type_t v27 = (void *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138413058;
      uint64_t v61 = v23;
      uint64_t v63 = v22;
      v0[7] = v25;
      os_log_type_t type = v20;
      id v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v25;

      *(_WORD *)(v26 + 12) = 2112;
      uint64_t v29 = *(void **)(v24 + *(int *)(v51 + 20));
      v0[8] = v29;
      id v30 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v27[1] = v29;
      sub_1003AF03C(v24, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v26 + 22) = 2082;
      uint64_t v31 = *(int *)(v73 + 48);
      uint64_t v32 = (char *)v66 + v31;
      uint64_t v33 = *v68;
      unint64_t v34 = v68[1];
      uint64_t *v66 = *v68;
      v66[1] = v34;
      v65((char *)v66 + v31, (char *)v68 + v31, v52);
      id v35 = *(void (**)(char *, uint64_t))(v70 + 8);
      swift_bridgeObjectRetain();
      v35(v32, v52);
      v0[9] = sub_1000143F4(v33, v34, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001729C(v53, &qword_100661940);
      sub_10001729C((uint64_t)v68, &qword_100661940);
      *(_WORD *)(v26 + 32) = 2082;
      uint64_t v36 = *(int *)(v73 + 48);
      uint64_t v37 = (char *)v66 + v36;
      v65((char *)v66 + v36, (char *)(v54 + v36), v52);
      v59(v55, v37, v52);
      sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v40 = v39;
      v35(v55, v52);
      v0[10] = sub_1000143F4(v38, v40, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001729C(v58, &qword_100661940);
      sub_10001729C(v54, &qword_100661940);
      _os_log_impl((void *)&_mh_execute_header, log, type, "[%@][%@] Skipping active install: %{public}s installID: %{public}s", (uint8_t *)v26, 0x2Au);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v75);
    }
    else
    {
      uint64_t v41 = v0[28];
      uint64_t v42 = v0[29];
      uint64_t v44 = v0[25];
      uint64_t v43 = v0[26];
      uint64_t v45 = (void *)v0[16];

      sub_1003AF03C(v24, (uint64_t (*)(void))type metadata accessor for Restore);
      sub_10001729C(v41, &qword_100661940);
      sub_10001729C(v42, &qword_100661940);
      sub_10001729C(v44, &qword_100661940);
      sub_10001729C(v43, &qword_100661940);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v75);
    }
    uint64_t v46 = v0[31];
    uint64_t v47 = v0[13];
    sub_1003ADA60();
    uint64_t v48 = swift_allocError();
    *(_OWORD *)uint64_t v49 = xmmword_1005AC800;
    *(unsigned char *)(v49 + 16) = 2;
    sub_10001729C(v46, &qword_100661940);
    *(void *)uint64_t v47 = v48;
    *(void *)(v47 + 8) = 0;
    *(unsigned char *)(v47 + 16) = 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = (uint64_t (*)(void))v0[1];
    return v50();
  }
}

uint64_t sub_10037B7E0()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10037BA48;
  }
  else {
    uint64_t v2 = sub_10037B8F4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10037B8F4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = (void *)(*(void *)(v0 + 120) + *(int *)(v0 + 384));
  uint64_t v3 = v2[1];
  *(void *)uint64_t v1 = *v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = 0;
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10037BA48()
{
  id v18 = v0;
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = v0[37];
    uint64_t v15 = v0[36];
    uint64_t v16 = v0[38];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = *(void *)(v0[3] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v4 + 16))();
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
    swift_task_dealloc();
    v0[6] = sub_1000143F4(v5, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create a restore: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v9 = v0[37];
    uint64_t v8 = v0[38];
    uint64_t v10 = v0[36];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = v0[13];
  *(void *)uint64_t v11 = v0[47];
  *(void *)(v11 + 8) = 0;
  *(unsigned char *)(v11 + 16) = 1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10037BDC4(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[13] = v5;
  v2[14] = *(void *)(v5 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v2[16] = v6;
  v2[17] = *(void *)(v6 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10037BF98, 0, 0);
}

uint64_t sub_10037BF98()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 152);
  *(void *)(v0 + 152) = v1;
  return _swift_task_switch(sub_10037BFBC, v1, 0);
}

uint64_t sub_10037BFBC()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v6 = v0[10];
  uint64_t v5 = v0[11];
  (*(void (**)(uint64_t))(v1 + 16))(v2);
  v0[2] = UUID.uuidString.getter();
  v0[3] = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v6);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Restore();
  sub_1003ADD04(&qword_100661910, (void (*)(uint64_t))type metadata accessor for Restore);
  uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  swift_release();
  Data.write(to:options:)();
  uint64_t v12 = v0[17];
  uint64_t v11 = v0[18];
  uint64_t v13 = v0[16];
  sub_100013510(v8, v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10037C28C()
{
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to save checkpoint: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v8 = v0[7];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10037C498()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = 0;
  void v7[3] = 0;
  void v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_10001729C((uint64_t)v4, &qword_10065B220);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_100661A68;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10037C6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v4[4] = swift_task_alloc();
  return _swift_task_switch(sub_10037C770, 0, 0);
}

void sub_10037C770()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v5 = (char *)&dword_10065C340 + dword_10065C340;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  void *v3 = v0;
  v3[1] = sub_10037C8A0;
  __asm { BR              X8 }
}

uint64_t sub_10037C8A0()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  sub_10001729C(v1, (uint64_t *)&unk_100661AB0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10037C9C0(uint64_t a1, uint64_t a2)
{
  v2[3] = a2;
  v2[4] = *(void *)(type metadata accessor for Restore() - 8);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_10037CA8C, 0, 0);
}

uint64_t sub_10037CA8C()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  v0[7] = LogKey.init(string:)();
  uint64_t v2 = sub_1000172F8(&qword_100661850);
  uint64_t v3 = sub_1000172F8(&qword_100661868);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10037CBB4;
  uint64_t v5 = v0[3];
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, v2, v3, 0, 0, &unk_100661A80, v5, v2);
}

uint64_t sub_10037CBB4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10037CCB0, 0, 0);
}

uint64_t sub_10037CCB0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  *(void *)(v0 + 72) = v2;
  char v3 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v0 + 104) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    uint64_t v9 = (v6 - 1) & v6;
LABEL_5:
    *(void *)(v0 + 80) = v9;
    *(void *)(v0 + 88) = v7;
    uint64_t v10 = *(void *)(v0 + 40);
    uint64_t v11 = *(void *)(v0 + 48);
    sub_1003AEFD4(*(void *)(v2 + 56) + *(void *)(v1 + 72) * v8, v11, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_1003A4FE4(v11, v10);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10037CF00;
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 40);
    return sub_10037D240(v14, v13);
  }
  unint64_t v16 = 63 - v5;
  if ((unint64_t)(63 - v5) > 0x7F)
  {
    unint64_t v17 = *(void *)(v2 + 72);
    if (v17)
    {
      uint64_t v7 = 1;
LABEL_11:
      uint64_t v9 = (v17 - 1) & v17;
      unint64_t v8 = __clz(__rbit64(v17)) + (v7 << 6);
      goto LABEL_5;
    }
    if (v16 >= 0xC0)
    {
      unint64_t v17 = *(void *)(v2 + 80);
      if (v17)
      {
        uint64_t v7 = 2;
        goto LABEL_11;
      }
      if (v16 >= 0x100)
      {
        unint64_t v17 = *(void *)(v2 + 88);
        if (v17)
        {
          uint64_t v7 = 3;
          goto LABEL_11;
        }
        if (v16 >= 0x140)
        {
          unint64_t v17 = *(void *)(v2 + 96);
          if (v17)
          {
            uint64_t v7 = 4;
            goto LABEL_11;
          }
          if (v16 >= 0x180)
          {
            unint64_t v17 = *(void *)(v2 + 104);
            if (v17)
            {
              uint64_t v7 = 5;
              goto LABEL_11;
            }
            uint64_t v18 = 0;
            uint64_t v19 = v16 >> 6;
            if (v16 >> 6 <= 6) {
              uint64_t v19 = 6;
            }
            uint64_t v20 = v19 - 6;
            while (v20 != v18)
            {
              unint64_t v17 = *(void *)(v2 + 112 + 8 * v18++);
              if (v17)
              {
                uint64_t v7 = v18 + 5;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
  }
  BOOL v21 = *(void **)(v0 + 56);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10037CF00()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10037CFFC, 0, 0);
}

uint64_t sub_10037CFFC()
{
  uint64_t result = sub_1003AF03C(*(void *)(v0 + 40), (uint64_t (*)(void))type metadata accessor for Restore);
  unint64_t v3 = *(void *)(v0 + 80);
  int64_t v2 = *(void *)(v0 + 88);
  if (v3)
  {
    uint64_t v4 = (v3 - 1) & v3;
    unint64_t v5 = __clz(__rbit64(v3)) | (v2 << 6);
    uint64_t result = *(void *)(v0 + 72);
LABEL_3:
    *(void *)(v0 + 80) = v4;
    *(void *)(v0 + 88) = v2;
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    sub_1003AEFD4(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 32) + 72) * v5, v7, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_1003A4FE4(v7, v6);
    unint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_10037CF00;
    uint64_t v9 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 40);
    return sub_10037D240(v10, v9);
  }
  int64_t v11 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v12 = (unint64_t)((1 << *(unsigned char *)(v0 + 104)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 72);
  if (v11 < v12)
  {
    uint64_t v13 = result + 64;
    unint64_t v14 = *(void *)(result + 64 + 8 * v11);
    ++v2;
    if (v14)
    {
LABEL_9:
      uint64_t v4 = (v14 - 1) & v14;
      unint64_t v5 = __clz(__rbit64(v14)) + (v2 << 6);
      goto LABEL_3;
    }
    int64_t v2 = v11 + 1;
    if (v11 + 1 < v12)
    {
      unint64_t v14 = *(void *)(v13 + 8 * v2);
      if (v14) {
        goto LABEL_9;
      }
      int64_t v2 = v11 + 2;
      if (v11 + 2 < v12)
      {
        unint64_t v14 = *(void *)(v13 + 8 * v2);
        if (v14) {
          goto LABEL_9;
        }
        int64_t v2 = v11 + 3;
        if (v11 + 3 < v12)
        {
          unint64_t v14 = *(void *)(v13 + 8 * v2);
          if (v14) {
            goto LABEL_9;
          }
          int64_t v15 = v11 + 4;
          if (v15 < v12)
          {
            unint64_t v14 = *(void *)(v13 + 8 * v15);
            if (v14)
            {
              int64_t v2 = v15;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v2 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                break;
              }
              if (v2 >= v12) {
                goto LABEL_22;
              }
              unint64_t v14 = *(void *)(v13 + 8 * v2);
              ++v15;
              if (v14) {
                goto LABEL_9;
              }
            }
LABEL_26:
            __break(1u);
            return result;
          }
        }
      }
    }
  }
LABEL_22:
  unint64_t v16 = *(void **)(v0 + 56);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_10037D240(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = type metadata accessor for Restore();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_10037D354, 0, 0);
}

uint64_t sub_10037D354()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 152);
  *(void *)(v0 + 136) = v1;
  return _swift_task_switch(sub_10037D378, v1, 0);
}

uint64_t sub_10037D378()
{
  sub_1003A4C68(*(void *)(v0 + 56));
  *(void *)(v0 + 144) = 0;
  return _swift_task_switch(sub_10037D420, 0, 0);
}

uint64_t sub_10037D420()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[12];
  unint64_t v3 = (void *)v0[8];
  static Logger.restore.getter();
  sub_1003AEFD4(v1, v2, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v3;
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[12];
    uint64_t v20 = v5;
    uint64_t v7 = (void *)v0[8];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    v0[5] = v7;
    *(_DWORD *)uint64_t v8 = 138412546;
    os_log_type_t type = v6;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    *(_WORD *)(v8 + 12) = 2112;
    int64_t v11 = *(void **)(v19 + *(int *)(v18 + 20));
    v0[6] = v11;
    id v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v9[1] = v11;
    unint64_t v5 = v20;
    sub_1003AF03C(v19, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v20, type, "[%@][%@] Remove restore bootstrap metadata", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v13 = v0[12];
    unint64_t v14 = (void *)v0[8];

    sub_1003AF03C(v13, (uint64_t (*)(void))type metadata accessor for Restore);
  }

  (*(void (**)(void, void))(v0[14] + 8))(v0[16], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10037D6B0()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[7];
  unint64_t v3 = (void *)v0[8];
  static Logger.restore.getter();
  sub_1003AEFD4(v2, v1, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v3;
  swift_errorRetain();
  id v5 = v4;
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v19 = v0[10];
    uint64_t v20 = v0[11];
    os_log_t log = v6;
    uint64_t v8 = (void *)v0[8];
    uint64_t v9 = swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    v0[2] = v8;
    *(_DWORD *)uint64_t v9 = 138412802;
    os_log_type_t type = v7;
    id v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v8;

    *(_WORD *)(v9 + 12) = 2112;
    id v12 = *(void **)(v20 + *(int *)(v19 + 20));
    v0[3] = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v10[1] = v12;
    sub_1003AF03C(v20, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v9 + 22) = 2112;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void v10[2] = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@][%@] Failed to remove due to error: %@", (uint8_t *)v9, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = v0[11];
    unint64_t v16 = (void *)v0[8];
    swift_errorRelease();

    sub_1003AF03C(v15, (uint64_t (*)(void))type metadata accessor for Restore);
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_10037D9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v35 = a5;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for LogKey.Prefix();
  __chkstk_darwin(v18);
  (*(void (**)(char *, void))(v20 + 104))((char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for LogKey.Prefix.promotionDiscovery(_:));
  id v21 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v22 = (void *)LogKey.init(prefix:)();
  sub_10000E2EC();
  if (*(void *)(a1 + 16))
  {
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v17, 1, 1, v23);
    uint64_t v24 = (void *)swift_allocObject();
    _OWORD v24[2] = 0;
    v24[3] = 0;
    v24[4] = v6;
    v24[5] = a1;
    v24[6] = v22;
    v24[7] = a2;
    v24[8] = a3;
    v24[9] = a4;
    sub_10001733C(v35, (uint64_t)(v24 + 10), &qword_10065C310);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_100017544((uint64_t)v17, (uint64_t)&unk_1006619D8, (uint64_t)v24);
    return swift_release();
  }
  else
  {
    uint64_t v35 = v12;
    static Logger.restore.getter();
    uint64_t v26 = v22;
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v34 = v11;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      id v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412290;
      uint64_t v36 = v26;
      uint64_t v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v30 = v26;

      uint64_t v11 = v34;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%@] No apps to promote", v29, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v27 = v26;
    }
    uint64_t v32 = v35;

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v11);
  }
}

uint64_t sub_10037DDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = v11;
  _OWORD v8[9] = v12;
  v8[6] = a7;
  v8[7] = a8;
  void v8[4] = a5;
  v8[5] = a6;
  void v8[2] = a1;
  v8[3] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v8[10] = swift_task_alloc();
  return _swift_task_switch(sub_10037DE64, 0, 0);
}

void sub_10037DE64()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = type metadata accessor for Logger();
  long long v7 = *(_OWORD *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 24);
  long long v6 = *(_OWORD *)(v0 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *(_OWORD *)(v4 + 16) = v8;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = v6;
  *(void *)(v4 + 64) = v1;
  uint64_t v9 = (char *)&dword_10065C340 + dword_10065C340;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10037DFD8;
  __asm { BR              X8; sub_100008B8C }
}

uint64_t sub_10037DFD8()
{
  uint64_t v1 = *(void *)(*v0 + 80);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10001729C(v1, (uint64_t *)&unk_100661AB0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t sub_10037E114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a3;
  v8[6] = a4;
  void v8[4] = a2;
  uint64_t v9 = type metadata accessor for Logger();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v8[14] = swift_task_alloc();
  return _swift_task_switch(sub_10037E210, 0, 0);
}

uint64_t sub_10037E210()
{
  sub_1003A6A60(*(void *)(v0 + 40), *(void **)(v0 + 48));
  *(void *)(v0 + 120) = v1;
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = sub_1000172F8(&qword_100661850);
    uint64_t v3 = sub_1000172F8(&qword_100661868);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10037E4C0;
    uint64_t v5 = *(void *)(v0 + 32);
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 24, v2, v3, 0, 0, &unk_1006619F0, v5, v2);
  }
  else
  {
    long long v6 = *(void **)(v0 + 48);
    swift_bridgeObjectRelease();
    static Logger.restore.getter();
    id v7 = v6;
    long long v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void **)(v0 + 48);
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)(v0 + 16) = v11;
      id v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v11;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] No new promotions discovered", v12, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_10037E4C0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10037E5BC, 0, 0);
}

uint64_t sub_10037E5BC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 48);
  int8x16_t v7 = *(int8x16_t *)(v0 + 24);
  *(void *)(v0 + 136) = v7.i64[0];
  uint64_t v3 = sub_1000172F8(&qword_1006619F8);
  uint64_t v4 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  v4[1].i64[0] = v1;
  v4[1].i64[1] = v2;
  v4[2] = vextq_s8(v7, v7, 8uLL);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10037E6DC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v5, v3, (char *)&type metadata for () + 8, 0, 0, &unk_100661A08, v4, v3);
}

uint64_t sub_10037E6DC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_10037E834, 0, 0);
}

uint64_t sub_10037E834()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1[2])
  {
    uint64_t v3 = v1[4];
    uint64_t v2 = v1[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 80);
  int8x16_t v7 = *(void **)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v9 = type metadata accessor for TaskPriority();
  long long v14 = *(_OWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v6;
  *(_OWORD *)(v10 + 56) = v14;
  *(unsigned char *)(v10 + 72) = 1;
  *(void *)(v10 + 80) = v3;
  *(void *)(v10 + 88) = v2;
  sub_10001733C(v5, v10 + 96, &qword_10065C310);
  *(unsigned char *)(v10 + 129) = 2;
  swift_bridgeObjectRetain();
  swift_retain();
  id v11 = v7;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_1000163AC(v4, (uint64_t)&unk_100661A10, v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10037E9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  void v6[4] = a4;
  _OWORD v6[2] = a2;
  uint64_t v7 = type metadata accessor for Logger();
  v6[7] = v7;
  v6[8] = *(void *)(v7 - 8);
  v6[9] = swift_task_alloc();
  uint64_t v8 = sub_1000172F8(&qword_1006619F8);
  v6[10] = v8;
  v6[11] = *(void *)(v8 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Restore();
  v6[13] = v9;
  v6[14] = *(void *)(v9 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  sub_1000172F8(&qword_100661A18);
  v6[17] = swift_task_alloc();
  uint64_t v10 = sub_1000172F8(&qword_100661A20);
  v6[18] = v10;
  v6[19] = *(void *)(v10 - 8);
  v6[20] = swift_task_alloc();
  return _swift_task_switch(sub_10037EC08, 0, 0);
}

uint64_t sub_10037EC08()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_10037F198(v4, *(void **)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 40), *(void *)(v0 + 48));
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  TaskGroup.makeAsyncIterator()();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10037ED24;
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 144);
  return TaskGroup.Iterator.next(isolation:)(v7, 0, 0, v8);
}

uint64_t sub_10037ED24()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10037EE20, 0, 0);
}

uint64_t sub_10037EE20()
{
  uint64_t v1 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[11] + 48))(v1, 1, v0[10]) == 1)
  {
    (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    sub_10001733C(v1, v0[12], &qword_1006619F8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_10001729C(v0[12], &qword_1006619F8);
    }
    else
    {
      uint64_t v4 = v0[15];
      uint64_t v5 = v0[16];
      uint64_t v6 = (void *)v0[4];
      sub_1003A4FE4(v0[12], v5);
      static Logger.restore.getter();
      sub_1003AEFD4(v5, v4, (uint64_t (*)(void))type metadata accessor for Restore);
      id v7 = v6;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = v0[15];
      if (v10)
      {
        uint64_t v12 = v0[13];
        uint64_t v13 = (void *)v0[4];
        uint64_t v14 = swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 138412546;
        *(void *)(v14 + 4) = v13;
        void *v15 = v13;

        *(_WORD *)(v14 + 12) = 2112;
        uint64_t v16 = *(void **)(v11 + *(int *)(v12 + 20));
        *(void *)(v14 + 14) = v16;
        v15[1] = v16;
        id v17 = v16;
        sub_1003AF03C(v11, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@][%@] Saved new promoting restore", (uint8_t *)v14, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v18 = (void *)v0[4];

        sub_1003AF03C(v11, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v8 = v0[4];
      }
      uint64_t v19 = v0[16];
      uint64_t v21 = v0[8];
      uint64_t v20 = v0[9];
      uint64_t v22 = v0[7];

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      sub_1003AF03C(v19, (uint64_t (*)(void))type metadata accessor for Restore);
    }
    uint64_t v23 = (void *)swift_task_alloc();
    v0[21] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10037ED24;
    uint64_t v24 = v0[17];
    uint64_t v25 = v0[18];
    return TaskGroup.Iterator.next(isolation:)(v24, 0, 0, v25);
  }
}

uint64_t sub_10037F198(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = a3;
  uint64_t v47 = a5;
  uint64_t v8 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v8 - 8);
  BOOL v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Restore();
  uint64_t v45 = *(void *)(v42 - 8);
  uint64_t v11 = *(void *)(v45 + 64);
  uint64_t v12 = __chkstk_darwin(v42);
  uint64_t v46 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.restore.getter();
  sub_1003AEFD4(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Restore);
  id v18 = a2;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  int v41 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    os_log_t v43 = v19;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v38 = a1;
    uint64_t v24 = (void *)v23;
    *(_DWORD *)uint64_t v22 = 138412546;
    uint64_t v36 = v15;
    uint64_t v37 = v11;
    uint64_t v39 = a4;
    id v49 = v18;
    id v25 = v18;
    unint64_t v40 = v10;
    id v26 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v18;

    *(_WORD *)(v22 + 12) = 2112;
    os_log_type_t v27 = *(void **)&v14[*(int *)(v42 + 20)];
    id v49 = v27;
    id v28 = v27;
    uint64_t v15 = v36;
    uint64_t v11 = v37;
    BOOL v10 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24[1] = v27;
    a4 = v39;
    sub_1003AF03C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v41, "[%@][%@] Begin promotion", (uint8_t *)v22, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    a1 = v38;
    swift_slowDealloc();
    uint64_t v19 = v43;
    swift_slowDealloc();
  }
  else
  {

    sub_1003AF03C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Restore);
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v15);
  uint64_t v29 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v10, 1, 1, v29);
  uint64_t v30 = v46;
  sub_1003AEFD4(a1, v46, (uint64_t (*)(void))type metadata accessor for Restore);
  unint64_t v31 = (*(unsigned __int8 *)(v45 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  unint64_t v32 = (v11 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = (void *)swift_allocObject();
  uint64_t v33[2] = 0;
  v33[3] = 0;
  v33[4] = v47;
  sub_1003A4FE4(v30, (uint64_t)v33 + v31);
  *(void *)((char *)v33 + v32) = v18;
  *(void *)((char *)v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8)) = a4;
  id v34 = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100378E80((uint64_t)v10, (uint64_t)&unk_100661A30, (uint64_t)v33, (uint64_t)&unk_100644458, &qword_1006619F8, (uint64_t)&unk_100661A40);
  return sub_10001729C((uint64_t)v10, &qword_10065B220);
}

uint64_t sub_10037F660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[13] = a1;
  uint64_t v8 = type metadata accessor for UUID();
  v7[18] = v8;
  v7[19] = *(void *)(v8 - 8);
  v7[20] = swift_task_alloc();
  sub_1000172F8(&qword_100660790);
  v7[21] = swift_task_alloc();
  uint64_t v9 = sub_1000172F8(&qword_100661940);
  v7[22] = v9;
  v7[23] = *(void *)(v9 - 8);
  v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  v7[32] = v10;
  v7[33] = *(void *)(v10 - 8);
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  v7[36] = v11;
  v7[37] = *(void *)(v11 - 8);
  v7[38] = swift_task_alloc();
  v7[39] = swift_task_alloc();
  v7[40] = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  v7[41] = swift_task_alloc();
  return _swift_task_switch(sub_10037F924, 0, 0);
}

uint64_t sub_10037F924()
{
  uint64_t v1 = (uint64_t *)(v0[15] + *(int *)(v0[32] + 36));
  if (!*(void *)(v0[14] + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t))(v0[33] + 56))(v0[41], 1, 1);
LABEL_7:
    uint64_t v10 = v0[17];
    sub_10001729C(v0[41], &qword_100661818);
    uint64_t v11 = *v1;
    uint64_t v12 = v1[1];
    uint64_t v13 = *(void *)(v10 + 160);
    v0[42] = v13;
    uint64_t v14 = swift_task_alloc();
    v0[43] = v14;
    *(void *)(v14 + 16) = v11;
    *(void *)(v14 + 24) = v12;
    uint64_t v15 = swift_task_alloc();
    v0[44] = v15;
    *(void *)(v15 + 16) = sub_1003AF320;
    *(void *)(v15 + 24) = v14;
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660780 + dword_100660780);
    swift_retain();
    uint64_t v16 = (void *)swift_task_alloc();
    v0[45] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10037FE88;
    uint64_t v17 = v0[21];
    return v39(v17, (uint64_t)sub_1003AF308, v15, v13);
  }
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100016D20(v3, v2);
  if (v5)
  {
    sub_1003AEFD4(*(void *)(v0[14] + 56) + *(void *)(v0[33] + 72) * v4, v0[41], (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = v0[41];
  uint64_t v8 = v0[32];
  uint64_t v9 = v0[33];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v6, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  uint64_t v19 = v0[35];
  uint64_t v20 = v0[15];
  uint64_t v21 = (void *)v0[16];
  sub_10001729C(v0[41], &qword_100661818);
  static Logger.restore.getter();
  sub_1003AEFD4(v20, v19, (uint64_t (*)(void))type metadata accessor for Restore);
  id v22 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v26 = v0[35];
  if (v25)
  {
    uint64_t v38 = v0[32];
    os_log_type_t v27 = (void *)v0[16];
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 138412546;
    v0[11] = v27;
    id v30 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v27;

    *(_WORD *)(v28 + 12) = 2112;
    unint64_t v31 = *(void **)(v26 + *(int *)(v38 + 20));
    v0[12] = v31;
    id v32 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v31;
    sub_1003AF03C(v26, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@][%@] Skipping active promoting restore", (uint8_t *)v28, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = (void *)v0[16];

    sub_1003AF03C(v26, (uint64_t (*)(void))type metadata accessor for Restore);
  }

  id v34 = (uint64_t *)v0[13];
  (*(void (**)(void, void))(v0[37] + 8))(v0[40], v0[36]);
  sub_1003ADA60();
  uint64_t v35 = swift_allocError();
  *(_OWORD *)uint64_t v36 = xmmword_1005AC7F0;
  *(unsigned char *)(v36 + 16) = 2;
  uint64_t *v34 = v35;
  sub_1000172F8(&qword_1006619F8);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t sub_10037FE88()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = sub_100380020;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = sub_1003800A0;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100380020()
{
  (*(void (**)(void, uint64_t, uint64_t, void))(v0[23] + 56))(v0[21], 1, 1, v0[22]);
  return _swift_task_switch(sub_1003800A0, 0, 0);
}

uint64_t sub_1003800A0()
{
  long long v77 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = (uint64_t *)v0[21];
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v0[23] + 48))(v2, 1, v1) == 1)
  {
    sub_10001729C((uint64_t)v2, &qword_100660790);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[46] = v3;
    void *v3 = v0;
    v3[1] = sub_1003808C8;
    uint64_t v4 = v0[15];
    return sub_10037BDC4(v4);
  }
  else
  {
    uint64_t v64 = v0[34];
    uint64_t v7 = (void *)v0[30];
    uint64_t v6 = (char *)v0[31];
    uint64_t v8 = (void *)v0[27];
    uint64_t v71 = v0[29];
    uint64_t v72 = v0[28];
    uint64_t v67 = v0[26];
    uint64_t v69 = v0[25];
    uint64_t v9 = v0[19];
    uint64_t v74 = (void *)v0[16];
    uint64_t v60 = v0[18];
    uint64_t v62 = v0[15];
    uint64_t v10 = *(int *)(v1 + 48);
    uint64_t v11 = &v6[v10];
    uint64_t v12 = (char *)v2 + v10;
    uint64_t v14 = *v2;
    uint64_t v13 = v2[1];
    *(void *)uint64_t v6 = v14;
    *((void *)v6 + 1) = v13;
    uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v59(&v6[v10], v12, v60);
    swift_bridgeObjectRetain();
    static Logger.restore.getter();
    sub_1003AEFD4(v62, v64, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v15 = (char *)v7 + *(int *)(v1 + 48);
    *uint64_t v7 = v14;
    v7[1] = v13;
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v15, v11, v60);
    sub_100017238((uint64_t)v7, v71, &qword_100661940);
    sub_10001733C((uint64_t)v7, v72, &qword_100661940);
    uint64_t v73 = v1;
    uint64_t v17 = (char *)v8 + *(int *)(v1 + 48);
    *uint64_t v8 = v14;
    v8[1] = v13;
    uint64_t v65 = v16;
    v16(v17, v11, v60);
    sub_100017238((uint64_t)v8, v67, &qword_100661940);
    sub_10001733C((uint64_t)v8, v69, &qword_100661940);
    id v18 = v74;
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = v0[39];
    uint64_t v23 = v0[37];
    uint64_t v75 = v0[36];
    uint64_t v24 = v0[34];
    if (v21)
    {
      uint64_t v51 = v0[32];
      uint64_t v68 = (uint64_t *)v0[29];
      uint64_t v53 = v0[28];
      uint64_t v54 = v0[26];
      uint64_t v58 = v0[25];
      uint64_t v66 = (uint64_t *)v0[24];
      unint64_t v55 = (char *)v0[20];
      uint64_t v70 = v0[19];
      uint64_t v52 = v0[18];
      BOOL v25 = (void *)v0[16];
      os_log_t log = v19;
      uint64_t v26 = swift_slowAlloc();
      os_log_type_t v27 = (void *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138413058;
      uint64_t v61 = v23;
      uint64_t v63 = v22;
      v0[7] = v25;
      os_log_type_t type = v20;
      id v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v25;

      *(_WORD *)(v26 + 12) = 2112;
      uint64_t v29 = *(void **)(v24 + *(int *)(v51 + 20));
      v0[8] = v29;
      id v30 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v27[1] = v29;
      sub_1003AF03C(v24, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v26 + 22) = 2082;
      uint64_t v31 = *(int *)(v73 + 48);
      id v32 = (char *)v66 + v31;
      uint64_t v33 = *v68;
      unint64_t v34 = v68[1];
      uint64_t *v66 = *v68;
      v66[1] = v34;
      v65((char *)v66 + v31, (char *)v68 + v31, v52);
      uint64_t v35 = *(void (**)(char *, uint64_t))(v70 + 8);
      swift_bridgeObjectRetain();
      v35(v32, v52);
      v0[9] = sub_1000143F4(v33, v34, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001729C(v53, &qword_100661940);
      sub_10001729C((uint64_t)v68, &qword_100661940);
      *(_WORD *)(v26 + 32) = 2082;
      uint64_t v36 = *(int *)(v73 + 48);
      uint64_t v37 = (char *)v66 + v36;
      v65((char *)v66 + v36, (char *)(v54 + v36), v52);
      v59(v55, v37, v52);
      sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v40 = v39;
      v35(v55, v52);
      v0[10] = sub_1000143F4(v38, v40, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001729C(v58, &qword_100661940);
      sub_10001729C(v54, &qword_100661940);
      _os_log_impl((void *)&_mh_execute_header, log, type, "[%@][%@] Skipping active install: %{public}s installID: %{public}s", (uint8_t *)v26, 0x2Au);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v75);
    }
    else
    {
      uint64_t v41 = v0[28];
      uint64_t v42 = v0[29];
      uint64_t v44 = v0[25];
      uint64_t v43 = v0[26];
      uint64_t v45 = (void *)v0[16];

      sub_1003AF03C(v24, (uint64_t (*)(void))type metadata accessor for Restore);
      sub_10001729C(v41, &qword_100661940);
      sub_10001729C(v42, &qword_100661940);
      sub_10001729C(v44, &qword_100661940);
      sub_10001729C(v43, &qword_100661940);

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v75);
    }
    uint64_t v46 = v0[31];
    uint64_t v47 = (uint64_t *)v0[13];
    sub_1003ADA60();
    uint64_t v48 = swift_allocError();
    *(_OWORD *)uint64_t v49 = xmmword_1005AC800;
    *(unsigned char *)(v49 + 16) = 2;
    sub_10001729C(v46, &qword_100661940);
    *uint64_t v47 = v48;
    sub_1000172F8(&qword_1006619F8);
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v50 = (uint64_t (*)(void))v0[1];
    return v50();
  }
}

uint64_t sub_1003808C8()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100380B48;
  }
  else {
    uint64_t v2 = sub_1003809DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003809DC()
{
  sub_1003AEFD4(v0[15], v0[13], (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1000172F8(&qword_1006619F8);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100380B48()
{
  uint64_t v17 = v0;
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = *(void *)(*(void *)(v0 + 24) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v4 + 16))();
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
    swift_task_dealloc();
    *(void *)(v0 + 48) = sub_1000143F4(v5, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to create a promoting restore: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 288);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  **(void **)(v0 + 104) = *(void *)(v0 + 376);
  sub_1000172F8(&qword_1006619F8);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100380ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 282) = v17;
  *(void *)(v8 + 536) = v16;
  *(_OWORD *)(v8 + 520) = v15;
  *(unsigned char *)(v8 + 281) = v14;
  *(void *)(v8 + 504) = a7;
  *(void *)(v8 + 512) = a8;
  *(void *)(v8 + 488) = a5;
  *(void *)(v8 + 496) = a6;
  *(void *)(v8 + 480) = a4;
  sub_1000172F8(&qword_10065B220);
  *(void *)(v8 + 544) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 552) = v9;
  *(void *)(v8 + 560) = *(void *)(v9 - 8);
  *(void *)(v8 + 568) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  *(void *)(v8 + 576) = v10;
  *(void *)(v8 + 584) = *(void *)(v10 - 8);
  *(void *)(v8 + 592) = swift_task_alloc();
  *(void *)(v8 + 600) = swift_task_alloc();
  *(void *)(v8 + 608) = swift_task_alloc();
  *(void *)(v8 + 616) = swift_task_alloc();
  *(void *)(v8 + 624) = swift_task_alloc();
  *(void *)(v8 + 632) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 640) = v11;
  *(void *)(v8 + 648) = *(void *)(v11 - 8);
  *(void *)(v8 + 656) = swift_task_alloc();
  *(void *)(v8 + 664) = swift_task_alloc();
  *(void *)(v8 + 672) = swift_task_alloc();
  *(void *)(v8 + 680) = swift_task_alloc();
  *(void *)(v8 + 688) = swift_task_alloc();
  *(void *)(v8 + 696) = swift_task_alloc();
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  *(void *)(v8 + 720) = swift_task_alloc();
  *(void *)(v8 + 728) = swift_task_alloc();
  *(void *)(v8 + 736) = swift_task_alloc();
  *(void *)(v8 + 744) = swift_task_alloc();
  return _swift_task_switch(sub_1003811A4, 0, 0);
}

uint64_t sub_1003811A4()
{
  uint64_t v1 = sub_1000172F8(&qword_100661850);
  uint64_t v2 = sub_1000172F8(&qword_100661868);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v3;
  void *v3 = v0;
  v3[1] = sub_1003812C4;
  uint64_t v4 = *(void *)(v0 + 480);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 344, v1, v2, 0, 0, &unk_100661898, v4, v1);
}

uint64_t sub_1003812C4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003813EC, 0, 0);
}

uint64_t sub_1003813EC()
{
  v357 = v0;
  uint64_t v1 = v0[43];
  v0[95] = v1;
  uint64_t v2 = (void *)v0[61];
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    static Logger.restore.getter();
    id v19 = v2;
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = (void *)v0[61];
    if (v22)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      BOOL v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      v0[51] = v23;
      id v26 = v23;
      uint64_t v0 = v321;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v25 = v23;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] No active restores found", v24, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v20 = v0[61];
    }
    uint64_t v184 = v0[83];
    uint64_t v185 = v0[81];
    uint64_t v186 = v0[80];

    (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v184, v186);
    goto LABEL_129;
  }
  int64_t v312 = (int64_t)(v0 + 2);
  v340 = (v0 + 28);
  v318 = v0 + 38;
  static Logger.restore.getter();
  id v3 = v2;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (_WORD *)v0[93];
  uint64_t v9 = v0[81];
  uint64_t v10 = v0[80];
  uint64_t v11 = &byte_1005A2F6C[148];
  uint64_t v12 = (void *)v0[61];
  if (v7)
  {
    uint64_t v332 = v0[81];
    uint64_t v352 = v0[80];
    uint64_t v13 = swift_slowAlloc();
    logb = v5;
    char v14 = (void *)swift_slowAlloc();
    uint64_t v345 = swift_slowAlloc();
    v356 = (char *)v345;
    *(_DWORD *)uint64_t v13 = 138412546;
    v349 = (void (*)(uint64_t, _WORD *))v8;
    v0[53] = v12;
    os_log_type_t typea = v6;
    id v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v14 = v12;

    *(_WORD *)(v13 + 12) = 2082;
    uint64_t v16 = sub_1004E8964(*(void *)(v1 + 16), 115, (void *)0xE100000000000000, 0x65726F74736572, (void *)0xE700000000000000);
    v0[52] = sub_1000143F4(v16, v17, (uint64_t *)&v356);
    uint64_t v11 = byte_1005A2F6C + 148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, logb, typea, "[%@] Bootstrapping %{public}s", (uint8_t *)v13, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = (_WORD *)v345;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v18 = v332 + 8;
    (*(void (**)(void, uint64_t))(v332 + 8))(v349, v352);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    os_log_type_t v27 = *(void (**)(_WORD *, uint64_t))(v9 + 8);
    uint64_t v18 = v9 + 8;
    v27(v8, v10);
  }
  int64_t v28 = 0;
  v310 = v0 + 35;
  v333 = v0 + 37;
  v0[97] = v12;
  v0[96] = v18;
  char v29 = *(unsigned char *)(v1 + 32);
  *((unsigned char *)v0 + 283) = v29;
  uint64_t v30 = 1 << v29;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & *(void *)(v1 + 64);
  v0[99] = 0;
  v0[98] = &_swiftEmptyDictionarySingleton;
  v0[100] = &_swiftEmptyDictionarySingleton;
  v0[102] = _swiftEmptyArrayStorage;
  v0[101] = 0;
  uint64_t log = *((void *)v11 + 61);
  uint64_t v33 = v0;
  while (1)
  {
    if (v32)
    {
      unint64_t v36 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      unint64_t v37 = v36 | (v28 << 6);
      uint64_t v38 = v33[95];
      goto LABEL_33;
    }
    int64_t v39 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_178;
    }
    int64_t v40 = (unint64_t)((1 << *((unsigned char *)v33 + 283)) + 63) >> 6;
    uint64_t v38 = v33[95];
    if (v39 >= v40) {
      break;
    }
    uint64_t v41 = v38 + 64;
    unint64_t v42 = *(void *)(v38 + 64 + 8 * v39);
    ++v28;
    if (!v42)
    {
      int64_t v28 = v39 + 1;
      if (v39 + 1 >= v40) {
        break;
      }
      unint64_t v42 = *(void *)(v41 + 8 * v28);
      if (!v42)
      {
        int64_t v28 = v39 + 2;
        if (v39 + 2 >= v40) {
          break;
        }
        unint64_t v42 = *(void *)(v41 + 8 * v28);
        if (!v42)
        {
          int64_t v28 = v39 + 3;
          if (v39 + 3 >= v40) {
            break;
          }
          unint64_t v42 = *(void *)(v41 + 8 * v28);
          if (!v42)
          {
            int64_t v43 = v39 + 4;
            if (v43 >= v40) {
              break;
            }
            unint64_t v42 = *(void *)(v41 + 8 * v43);
            if (!v42)
            {
              while (1)
              {
                int64_t v28 = v43 + 1;
                if (__OFADD__(v43, 1)) {
                  break;
                }
                if (v28 >= v40) {
                  goto LABEL_54;
                }
                unint64_t v42 = *(void *)(v41 + 8 * v28);
                ++v43;
                if (v42) {
                  goto LABEL_32;
                }
              }
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
            }
            int64_t v28 = v43;
          }
        }
      }
    }
LABEL_32:
    unint64_t v32 = (v42 - 1) & v42;
    unint64_t v37 = __clz(__rbit64(v42)) + (v28 << 6);
LABEL_33:
    v33[104] = v28;
    v33[103] = v32;
    uint64_t v44 = v33[79];
    uint64_t v45 = v33[72];
    uint64_t v46 = *(void *)(v38 + 56);
    uint64_t v47 = *(void *)(v33[73] + 72);
    v33[105] = v47;
    sub_1003AEFD4(v46 + v47 * v37, v44, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v48 = swift_allocBox();
    uint64_t v50 = v49;
    v33[106] = v48;
    v33[107] = v49;
    sub_1003A4FE4(v44, v49);
    swift_beginAccess();
    uint64_t v352 = v50;
    if ((*(unsigned __int8 *)(v50 + *(int *)(v45 + 44)) | 2) == 2)
    {
      uint64_t v51 = (void *)v33[61];
      static Logger.restore.getter();
      swift_retain_n();
      id v52 = v51;
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = v33[97];
        uint64_t v56 = v33[72];
        uint64_t v57 = v33[61];
        uint64_t v58 = swift_slowAlloc();
        uint64_t v59 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = log;
        *(void *)(v58 + 4) = v57;
        *uint64_t v59 = v55;
        *(_WORD *)(v58 + 12) = 2112;
        uint64_t v60 = *(void **)(v352 + *(int *)(v56 + 20));
        *(void *)(v58 + 14) = v60;
        v59[1] = v60;
        id v61 = v60;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "[%@][%@] Moved to bootstrapping", (uint8_t *)v58, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        uint64_t v33 = v321;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        uint64_t v53 = v33[61];
      }
      uint64_t v74 = v33[96];
      uint64_t v75 = v33[92];
      uint64_t v76 = v33;
      uint64_t v77 = v33[81];
      uint64_t v78 = (_WORD *)v76[80];
      uint64_t v79 = v76[72];

      unint64_t v80 = *(void (**)(uint64_t, _WORD *))(v77 + 8);
      v76[108] = v80;
      v76[109] = v74 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v349 = v80;
      v80(v75, v78);
      unint64_t v81 = (void *)(v352 + *(int *)(v79 + 48));
      v76[110] = *v81;
      uint64_t v82 = v81[1];
      v76[111] = v82;
      if (!v82)
      {
        uint64_t v99 = (void *)v76[61];
        static Logger.restore.getter();
        id v100 = v99;
        swift_retain();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.default.getter();
        uint64_t v33 = v76;
        if (os_log_type_enabled(v34, v101))
        {
          uint64_t v102 = v76[97];
          uint64_t v103 = v33[72];
          uint64_t v104 = v33[61];
          uint64_t v105 = swift_slowAlloc();
          uint64_t v106 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v105 = log;
          *(void *)(v105 + 4) = v104;
          *uint64_t v106 = v102;
          *(_WORD *)(v105 + 12) = 2112;
          uint64_t v107 = *(void **)(v352 + *(int *)(v103 + 20));
          *(void *)(v105 + 14) = v107;
          v106[1] = v107;
          id v108 = v107;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v34, v101, "[%@][%@] Could not find distributorDomain for app", (uint8_t *)v105, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          uint64_t v33 = v321;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          unint64_t v34 = v76[61];
        }
        uint64_t v35 = v33[91];
        goto LABEL_13;
      }
      uint64_t v83 = (int *)v76[72];
      unint64_t v84 = (void *)(v352 + v83[14]);
      uint64_t v85 = v84[1];
      v76[112] = v85;
      if (!v85)
      {
        long long v113 = (void *)v76[61];
        static Logger.restore.getter();
        id v114 = v113;
        swift_retain();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.default.getter();
        uint64_t v33 = v76;
        if (os_log_type_enabled(v34, v115))
        {
          uint64_t v116 = v76[97];
          uint64_t v117 = v33[72];
          uint64_t v118 = v33[61];
          uint64_t v119 = swift_slowAlloc();
          char v120 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v119 = log;
          *(void *)(v119 + 4) = v118;
          void *v120 = v116;
          *(_WORD *)(v119 + 12) = 2112;
          uint64_t v121 = *(void **)(v352 + *(int *)(v117 + 20));
          *(void *)(v119 + 14) = v121;
          v120[1] = v121;
          id v122 = v121;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v34, v115, "[%@][%@] Could not find accountID for app", (uint8_t *)v119, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          uint64_t v33 = v321;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          unint64_t v34 = v76[61];
        }
        uint64_t v35 = v33[90];
        goto LABEL_13;
      }
      v76[113] = *v84;
      uint64_t v86 = (uint64_t *)(v352 + v83[13]);
      uint64_t v87 = *v86;
      v76[114] = *v86;
      uint64_t v88 = v86[1];
      v76[115] = v88;
      if (!v88)
      {
        Swift::String v89 = (void *)v76[61];
        static Logger.restore.getter();
        id v90 = v89;
        swift_retain();
        unint64_t v34 = Logger.logObject.getter();
        os_log_type_t v91 = static os_log_type_t.default.getter();
        uint64_t v33 = v76;
        if (os_log_type_enabled(v34, v91))
        {
          uint64_t v92 = v76[97];
          uint64_t v93 = v76[72];
          uint64_t v94 = v76[61];
          uint64_t v95 = swift_slowAlloc();
          Swift::String v96 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v95 = log;
          *(void *)(v95 + 4) = v94;
          void *v96 = v92;
          *(_WORD *)(v95 + 12) = 2112;
          Swift::String v97 = *(void **)(v352 + *(int *)(v93 + 20));
          v321[36] = v97;
          id v98 = v97;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v96[1] = v97;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v34, v91, "[%@][%@] Could not find distributorID for app", (uint8_t *)v95, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          uint64_t v33 = v321;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          unint64_t v34 = v76[61];
        }
        uint64_t v35 = v33[89];
LABEL_13:
        uint64_t v8 = (_WORD *)v33[80];

        v349(v35, v8);
        goto LABEL_14;
      }
      swift_beginAccess();
      v188 = (void *)(v352 + v83[9]);
      if (v87 == *v188 && v88 == v188[1])
      {
        swift_endAccess();
LABEL_136:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v190 = 1;
        v191 = v321;
        v192 = v310;
        goto LABEL_137;
      }
      char v189 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_endAccess();
      if (v189) {
        goto LABEL_136;
      }
      id v204 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NSString v205 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      void *v333 = 0;
      id v206 = [v204 initWithBundleIdentifier:v205 allowPlaceholder:0 error:v333];

      uint64_t v8 = (_WORD *)*v333;
      if (v206)
      {
        v207 = v8;
        if ([v206 isPlaceholder])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          v208 = (char *)v321;
          goto LABEL_170;
        }
        v191 = v321;
        v231 = (void *)v321[61];
        static Logger.restore.getter();
        swift_retain_n();
        id v232 = v231;
        v233 = Logger.logObject.getter();
        os_log_type_t v234 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v233, v234))
        {
          uint64_t v235 = v321[97];
          uint64_t v236 = v321[72];
          v237 = (void *)v321[61];
          uint64_t v238 = swift_slowAlloc();
          os_log_type_t v342 = v234;
          v239 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v238 = log;
          v321[57] = v237;
          id v240 = v237;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v239 = v235;

          *(_WORD *)(v238 + 12) = 2112;
          v241 = *(void **)(v352 + *(int *)(v236 + 20));
          v321[58] = v241;
          id v242 = v241;
          v191 = v321;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v239[1] = v241;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v233, v342, "[%@][%@] Found marketplace app", (uint8_t *)v238, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          v278 = (void *)v321[61];
          swift_release_n();
        }
        v192 = v310;

        v349(v191[87], (_WORD *)v191[80]);
        char v190 = 0;
LABEL_137:
        *((unsigned char *)v192 + 4) = v190;
        uint64_t v193 = v191[77];
        *(unsigned char *)(v352 + *(int *)(v191[72] + 44)) = 1;
        sub_1003AEFD4(v352, v193, (uint64_t (*)(void))type metadata accessor for Restore);
        v194 = (void *)swift_task_alloc();
        v191[119] = v194;
        void *v194 = v191;
        v194[1] = sub_100385D64;
        uint64_t v195 = v191[77];
        goto LABEL_138;
      }
LABEL_154:
      long long v140 = (char *)v321;
      v220 = (void *)v321[61];
      v221 = v8;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      static Logger.restore.getter();
      swift_retain_n();
      id v222 = v220;
      char v148 = Logger.logObject.getter();
      os_log_type_t v223 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v148, v223)) {
        goto LABEL_159;
      }
      uint64_t v224 = v321[97];
      uint64_t v334 = v321[72];
      v225 = (void *)v321[61];
      os_log_type_t v341 = v223;
      uint64_t v226 = swift_slowAlloc();
      v227 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v226 = log;
      v321[45] = v225;
      id v228 = v225;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v227 = v224;

      *(_WORD *)(v226 + 12) = 2112;
      v229 = *(void **)(v352 + *(int *)(v334 + 20));
      v321[46] = v229;
      id v230 = v229;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v227[1] = v229;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v148, v341, "[%@][%@] Could not find marketplace app", (uint8_t *)v226, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_160;
    }
    uint64_t v62 = (void *)v33[61];
    static Logger.restore.getter();
    id v63 = v62;
    swift_retain_n();
    id v64 = v63;
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = v33[97];
      uint64_t v68 = v33[72];
      uint64_t v69 = (void *)v33[61];
      uint64_t v70 = swift_slowAlloc();
      uint64_t v71 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = log;
      *(void *)(v70 + 4) = v69;
      *uint64_t v71 = v67;

      *(_WORD *)(v70 + 12) = 2112;
      uint64_t v72 = *(void **)(v352 + *(int *)(v68 + 20));
      *(void *)(v70 + 14) = v72;
      v71[1] = v72;
      id v73 = v72;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "[%@][%@] Already bootstrapping", (uint8_t *)v70, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v33 = v321;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v109 = (void *)v33[61];

      swift_release_n();
      uint64_t v65 = v33[61];
    }
    uint64_t v110 = v33[84];
    uint64_t v111 = v321[81];
    uint64_t v8 = (_WORD *)v321[80];

    uint64_t v112 = *(void (**)(uint64_t, _WORD *))(v111 + 8);
    uint64_t v33 = v321;
    v112(v110, v8);
LABEL_14:
    swift_release();
  }
LABEL_54:
  uint64_t v123 = v33[98];
  swift_release();
  uint64_t v311 = v123 + 64;
  uint64_t v124 = -1 << *(unsigned char *)(v123 + 32);
  if (-v124 < 64) {
    uint64_t v125 = ~(-1 << -(char)v124);
  }
  else {
    uint64_t v125 = -1;
  }
  unint64_t v126 = v125 & *(void *)(v123 + 64);
  int64_t v312 = (unint64_t)(63 - v124) >> 6;
  uint64_t v313 = v123;
  swift_bridgeObjectRetain();
  v318 = 0;
  int64_t v127 = 0;
  long long v128 = _swiftEmptyArrayStorage;
  while (2)
  {
    v33[122] = v128;
    v33[121] = v318;
    if (v126)
    {
      unint64_t v129 = __clz(__rbit64(v126));
      uint64_t v130 = (v126 - 1) & v126;
      int64_t v315 = v127;
      unint64_t v131 = v129 | (v127 << 6);
      goto LABEL_75;
    }
    int64_t v132 = v127 + 1;
    if (__OFADD__(v127, 1))
    {
      __break(1u);
      goto LABEL_189;
    }
    if (v132 >= v312) {
      goto LABEL_141;
    }
    unint64_t v133 = *(void *)(v311 + 8 * v132);
    int64_t v134 = v127 + 1;
    if (!v133)
    {
      int64_t v134 = v127 + 2;
      if (v127 + 2 >= v312) {
        goto LABEL_141;
      }
      unint64_t v133 = *(void *)(v311 + 8 * v134);
      if (!v133)
      {
        int64_t v134 = v127 + 3;
        if (v127 + 3 >= v312) {
          goto LABEL_141;
        }
        unint64_t v133 = *(void *)(v311 + 8 * v134);
        if (!v133)
        {
          uint64_t v135 = v127 + 4;
          if (v127 + 4 < v312)
          {
            unint64_t v133 = *(void *)(v311 + 8 * v135);
            if (!v133)
            {
              while (1)
              {
                int64_t v134 = v135 + 1;
                if (__OFADD__(v135, 1)) {
                  goto LABEL_190;
                }
                if (v134 >= v312) {
                  goto LABEL_141;
                }
                unint64_t v133 = *(void *)(v311 + 8 * v134);
                ++v135;
                if (v133) {
                  goto LABEL_74;
                }
              }
            }
            int64_t v134 = v127 + 4;
            goto LABEL_74;
          }
LABEL_141:
          swift_release();
          if (v128[2])
          {
            swift_bridgeObjectRetain();
            uint64_t v196 = (void *)swift_task_alloc();
            v33[123] = v196;
            *uint64_t v196 = v33;
            v196[1] = sub_100388A98;
            uint64_t v197 = v33[66];
            uint64_t v198 = v33[65];
            uint64_t v199 = v33[63];
            uint64_t v200 = v33[64];
            uint64_t v202 = v33[61];
            uint64_t v201 = v33[62];
            char v203 = *((unsigned char *)v33 + 281);
            uint64_t v359 = v33[67];
            return sub_100389420((uint64_t)v128, v201, v199, v200, v203, v198, v197, v202);
          }
          uint64_t v209 = v33[100];
          if (*(void *)(v209 + 16) && ((uint64_t v210 = v33[66]) != 0 || (*((unsigned char *)v33 + 282) & 1) != 0))
          {
            uint64_t v347 = v33[99];
            uint64_t v350 = v33[121];
            uint64_t v279 = v33[68];
            uint64_t v343 = v33[67];
            uint64_t logc = v33[65];
            v280 = (void *)v33[61];
            uint64_t v281 = v33[62];
            uint64_t v282 = v33[60];
            uint64_t v283 = swift_bridgeObjectRetain();
            long long v354 = *((_OWORD *)v310 + 14);
            v284 = sub_100376BF8(v283);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v285 = type metadata accessor for TaskPriority();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v285 - 8) + 56))(v279, 1, 1, v285);
            uint64_t v286 = swift_allocObject();
            *(void *)(v286 + 16) = 0;
            *(void *)(v286 + 24) = 0;
            *(void *)(v286 + 32) = v284;
            *(void *)(v286 + 40) = logc;
            *(void *)(v286 + 48) = v210;
            *(void *)(v286 + 56) = v282;
            *(void *)(v286 + 64) = v280;
            *(void *)(v286 + 72) = v281;
            *(_OWORD *)(v286 + 80) = v354;
            sub_10001733C(v343, v286 + 96, &qword_10065C310);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            id v287 = v280;
            swift_bridgeObjectRetain();
            sub_100017544(v279, (uint64_t)&unk_1006618D0, v286);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            sub_10023C7B4(v347);
            sub_10023C7B4(v350);
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v211 = *(void *)(v209 + 16);
            uint64_t v159 = v33[121];
            long long v140 = (char *)v33[99];
            if (!v211) {
              goto LABEL_175;
            }
            uint64_t v212 = v33[68];
            uint64_t v213 = v33[67];
            uint64_t v214 = v321[62];
            v215 = (void *)v321[61];
            uint64_t v216 = v321[60];
            uint64_t v217 = type metadata accessor for TaskPriority();
            long long v353 = *((_OWORD *)v310 + 14);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v217 - 8) + 56))(v212, 1, 1, v217);
            uint64_t v218 = swift_allocObject();
            *(void *)(v218 + 16) = 0;
            *(void *)(v218 + 24) = 0;
            *(void *)(v218 + 32) = v216;
            *(void *)(v218 + 40) = v215;
            *(void *)(v218 + 48) = v214;
            *(_OWORD *)(v218 + 56) = v353;
            sub_10001733C(v213, v218 + 72, &qword_10065C310);
            id v219 = v215;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            sub_100017544(v212, (uint64_t)&unk_1006618C0, v218);
            swift_bridgeObjectRelease();
            swift_release();
LABEL_176:
            sub_10023C7B4((uint64_t)v140);
            sub_10023C7B4(v159);
          }
LABEL_129:
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v187 = (uint64_t (*)(void))v321[1];
          return v187();
        }
      }
    }
LABEL_74:
    uint64_t v130 = (v133 - 1) & v133;
    int64_t v315 = v134;
    unint64_t v131 = __clz(__rbit64(v133)) + (v134 << 6);
LABEL_75:
    unint64_t v314 = v130;
    uint64_t v136 = *(void *)(v313 + 48) + 104 * v131;
    v333 = *(void **)v136;
    uint64_t v329 = *(void *)(v136 + 16);
    uint64_t v328 = *(void *)(v136 + 32);
    uint64_t v327 = *(void *)(v136 + 48);
    char v326 = *(unsigned char *)(v136 + 56);
    uint64_t v325 = *(void *)(v136 + 64);
    char type = *(unsigned char *)(v136 + 96);
    uint64_t v137 = *(void *)(*(void *)(v313 + 56) + 8 * v131);
    uint64_t v138 = *(void *)(v137 + 16);
    long long v324 = *(_OWORD *)(v136 + 72);
    v340 = *(NSObject **)(v136 + 24);
    uint64_t v346 = *(void *)(v136 + 8);
    v349 = *(void (**)(uint64_t, _WORD *))(v136 + 40);
    uint64_t log = *(void *)(v136 + 72);
    uint64_t v352 = *(void *)(v136 + 88);
    if (v138)
    {
      uint64_t v139 = v33[73];
      unint64_t v316 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
      uint64_t v8 = (_WORD *)(v137 + v316);
      uint64_t v319 = *(void *)(v139 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v140 = (char *)&_swiftEmptyDictionarySingleton;
      v317 = v128;
      do
      {
        uint64_t v142 = v33[75];
        uint64_t v143 = v33[72];
        sub_1003AEFD4((uint64_t)v8, v142, (uint64_t (*)(void))type metadata accessor for Restore);
        long long v144 = (uint64_t *)(v142 + *(int *)(v143 + 56));
        uint64_t v145 = v144[1];
        if (v145)
        {
          uint64_t v146 = *v144;
          sub_1003AEFD4(v33[75], v33[74], (uint64_t (*)(void))type metadata accessor for Restore);
          swift_bridgeObjectRetain();
          sub_10023C7B4((uint64_t)v318);
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v356 = v140;
          char v148 = v140;
          unint64_t v150 = sub_100016D20(v146, v145);
          uint64_t v151 = *((void *)v140 + 2);
          BOOL v152 = (v149 & 1) == 0;
          uint64_t v153 = v151 + v152;
          if (__OFADD__(v151, v152))
          {
            __break(1u);
LABEL_159:

            swift_release_n();
            char v148 = *((void *)v140 + 61);
LABEL_160:
            v208 = v140;
            uint64_t v243 = *((void *)v140 + 88);
            v244 = (_WORD *)*((void *)v140 + 80);
            uint64_t v245 = *((void *)v140 + 72);

            v349(v243, v244);
            v246 = (uint64_t *)(v352 + *(int *)(v245 + 52));
            uint64_t v247 = v246[1];
            if (v247)
            {
              v248 = (int *)*((void *)v140 + 72);
              v249 = (uint64_t *)(v352 + v248[20]);
              uint64_t v250 = v249[1];
              if (v250)
              {
                uint64_t v251 = v352 + v248[21];
                if ((*(unsigned char *)(v251 + 8) & 1) == 0)
                {
                  uint64_t v252 = *v246;
                  uint64_t v253 = *v249;
                  uint64_t v254 = *(void *)v251;
                  uint64_t v255 = *((void *)v140 + 100);
                  uint64_t v256 = *(void *)(v255 + 16);
                  swift_bridgeObjectRetain();
                  if (v256)
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    sub_100016D20(v252, v247);
                    char v258 = v257;
                    swift_bridgeObjectRelease();
                    if (v258)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v208 = (char *)v321;
                      goto LABEL_166;
                    }
                    uint64_t loga = v252;
                    uint64_t v348 = v253;
                    uint64_t v351 = v254;
                    v208 = (char *)v321;
                    uint64_t v255 = v321[100];
                    v248 = (int *)v321[72];
                  }
                  else
                  {
                    uint64_t loga = v252;
                    uint64_t v348 = v253;
                    uint64_t v351 = v254;
                    swift_bridgeObjectRetain();
                    v208 = (char *)v321;
                  }
                  uint64_t v298 = *((void *)v208 + 71);
                  uint64_t v299 = *((void *)v208 + 70);
                  uint64_t v331 = *((void *)v208 + 69);
                  v300 = (uint64_t *)(v352 + v248[19]);
                  uint64_t v301 = v300[1];
                  uint64_t v344 = *v300;
                  v302 = (uint64_t *)(v352 + v248[14]);
                  uint64_t v303 = v302[1];
                  uint64_t v335 = *v302;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  UUID.init()();
                  uint64_t v304 = UUID.uuidString.getter();
                  uint64_t v306 = v305;
                  (*(void (**)(uint64_t, uint64_t))(v299 + 8))(v298, v331);
                  *((void *)v208 + 2) = v304;
                  *((void *)v208 + 3) = v306;
                  *((void *)v208 + 4) = v348;
                  *((void *)v208 + 5) = v250;
                  *((void *)v208 + 6) = loga;
                  *((void *)v208 + 7) = v247;
                  *((void *)v208 + 8) = v351;
                  v208[72] = 0;
                  *((void *)v208 + 10) = v344;
                  *((void *)v208 + 11) = v301;
                  *((void *)v208 + 12) = v335;
                  *((void *)v208 + 13) = v303;
                  v208[112] = 1;
                  char v307 = swift_isUniquelyReferenced_nonNull_native();
                  v356 = (char *)v255;
                  sub_10052A5BC(v312, loga, v247, v307);
                  uint64_t v277 = (uint64_t)v356;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_187;
                }
              }
            }
LABEL_166:
            v259 = (void *)*((void *)v208 + 61);
            static Logger.restore.getter();
            swift_retain_n();
            id v260 = v259;
            v261 = Logger.logObject.getter();
            os_log_type_t v262 = static os_log_type_t.error.getter();
            BOOL v263 = os_log_type_enabled(v261, v262);
            v264 = (void *)*((void *)v208 + 61);
            if (v263)
            {
              LOBYTE(v333) = v262;
              v340 = v261;
              uint64_t v265 = *((void *)v208 + 97);
              uint64_t v266 = *((void *)v208 + 72);
              uint64_t v8 = (_WORD *)swift_slowAlloc();
              v267 = (void *)swift_slowAlloc();
              uint64_t v268 = swift_slowAlloc();
              *(_DWORD *)uint64_t v8 = 138413314;
              *((void *)v208 + 38) = v268;
              *((void *)v208 + 39) = v264;
              id v269 = v264;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v267 = v265;

              v8[6] = 2112;
              v270 = *(void **)(v352 + *(int *)(v266 + 20));
              *((void *)v208 + 40) = v270;
              id v271 = v270;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v267[1] = v270;
              swift_release();
              v8[11] = 2080;
              v272 = (uint64_t *)(v352 + *(int *)(v266 + 52));
              if (!v272[1]) {
                goto LABEL_179;
              }
              uint64_t v273 = *v272;
              unint64_t v274 = v272[1];
              goto LABEL_180;
            }
            uint64_t v275 = *((void *)v208 + 82);
            v276 = (_WORD *)*((void *)v208 + 80);

            swift_release_n();
            v349(v275, v276);
LABEL_170:
            uint64_t v277 = *((void *)v208 + 100);
            goto LABEL_187;
          }
          char v154 = v149;
          if (*((void *)v140 + 3) >= v153)
          {
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_10052DDF0();
              long long v140 = v356;
            }
          }
          else
          {
            sub_100527700(v153, isUniquelyReferenced_nonNull_native);
            long long v140 = v356;
            unint64_t v155 = sub_100016D20(v146, v145);
            if ((v154 & 1) != (v156 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v150 = v155;
          }
          swift_bridgeObjectRelease();
          if ((v154 & 1) == 0)
          {
            *(void *)&v140[8 * (v150 >> 6) + 64] |= 1 << v150;
            long long v157 = (uint64_t *)(*((void *)v140 + 6) + 16 * v150);
            *long long v157 = v146;
            v157[1] = v145;
            *(void *)(*((void *)v140 + 7) + 8 * v150) = _swiftEmptyArrayStorage;
            uint64_t v158 = *((void *)v140 + 2);
            uint64_t v159 = v158 + 1;
            BOOL v160 = __OFADD__(v158, 1);
            swift_bridgeObjectRetain();
            if (v160)
            {
              __break(1u);
LABEL_175:
              swift_bridgeObjectRelease();
              goto LABEL_176;
            }
            *((void *)v140 + 2) = v159;
          }
          swift_bridgeObjectRetain();
          uint64_t v161 = *((void *)v140 + 7);
          swift_bridgeObjectRelease();
          unint64_t v162 = *(void *)(v161 + 8 * v150);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v162 = sub_100290934(0, *(void *)(v162 + 16) + 1, 1, v162);
          }
          unint64_t v164 = *(void *)(v162 + 16);
          unint64_t v163 = *(void *)(v162 + 24);
          if (v164 >= v163 >> 1) {
            unint64_t v162 = sub_100290934(v163 > 1, v164 + 1, 1, v162);
          }
          uint64_t v33 = v321;
          uint64_t v165 = v321[74];
          *(void *)(v162 + 16) = v164 + 1;
          uint64_t v141 = v319;
          sub_1003A4FE4(v165, v162 + v316 + v164 * v319);
          *(void *)(v161 + 8 * v150) = v162;
          swift_bridgeObjectRelease();
          v318 = (uint64_t *)sub_1002E1CB8;
          long long v128 = v317;
        }
        else
        {
          uint64_t v141 = v319;
        }
        sub_1003AF03C(v33[75], (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v8 = (_WORD *)((char *)v8 + v141);
        --v138;
      }
      while (v138);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v140 = (char *)&_swiftEmptyDictionarySingleton;
    }
    int64_t v166 = 0;
    long long v167 = v140 + 64;
    uint64_t v168 = -1 << v140[32];
    if (-v168 < 64) {
      uint64_t v169 = ~(-1 << -(char)v168);
    }
    else {
      uint64_t v169 = -1;
    }
    unint64_t v170 = v169 & *((void *)v140 + 8);
    int64_t v320 = (unint64_t)(63 - v168) >> 6;
    if (v170)
    {
LABEL_103:
      unint64_t v171 = __clz(__rbit64(v170));
      v170 &= v170 - 1;
      unint64_t v172 = v171 | (v166 << 6);
      goto LABEL_118;
    }
    while (2)
    {
      int64_t v173 = v166 + 1;
      if (__OFADD__(v166, 1))
      {
        __break(1u);
        goto LABEL_154;
      }
      if (v173 >= v320) {
        goto LABEL_58;
      }
      unint64_t v174 = *(void *)&v167[8 * v173];
      ++v166;
      if (v174) {
        goto LABEL_117;
      }
      int64_t v166 = v173 + 1;
      if (v173 + 1 >= v320) {
        goto LABEL_58;
      }
      unint64_t v174 = *(void *)&v167[8 * v166];
      if (v174) {
        goto LABEL_117;
      }
      int64_t v166 = v173 + 2;
      if (v173 + 2 >= v320) {
        goto LABEL_58;
      }
      unint64_t v174 = *(void *)&v167[8 * v166];
      if (v174)
      {
LABEL_117:
        unint64_t v170 = (v174 - 1) & v174;
        unint64_t v172 = __clz(__rbit64(v174)) + (v166 << 6);
LABEL_118:
        uint64_t v176 = (uint64_t *)(*((void *)v140 + 6) + 16 * v172);
        uint64_t v177 = *v176;
        uint64_t v8 = (_WORD *)v176[1];
        uint64_t v178 = *(void *)(*((void *)v140 + 7) + 8 * v172);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v128 = sub_100290AC8(0, v128[2] + 1, 1, v128);
        }
        unint64_t v180 = v128[2];
        unint64_t v179 = v128[3];
        if (v180 >= v179 >> 1) {
          long long v128 = sub_100290AC8((void *)(v179 > 1), v180 + 1, 1, v128);
        }
        v128[2] = v180 + 1;
        v181 = &v128[16 * v180];
        v181[4] = v177;
        v181[5] = v8;
        v181[6] = v333;
        v181[7] = v346;
        v181[8] = v329;
        v181[9] = v340;
        v181[10] = v328;
        v181[11] = v349;
        v181[12] = v327;
        *((unsigned char *)v181 + 104) = v326;
        *((_DWORD *)v181 + 27) = *(_DWORD *)&v355[3];
        *(_DWORD *)((char *)v181 + 105) = *(_DWORD *)v355;
        v181[14] = v325;
        *(_OWORD *)(v181 + 15) = v324;
        v181[17] = v352;
        *((unsigned char *)v181 + 144) = type;
        int v182 = (int)v356;
        *((_DWORD *)v181 + 37) = *(_DWORD *)((char *)&v356 + 3);
        *(_DWORD *)((char *)v181 + 145) = v182;
        v181[19] = v178;
        if (v170) {
          goto LABEL_103;
        }
        continue;
      }
      break;
    }
    int64_t v175 = v173 + 3;
    if (v175 >= v320)
    {
LABEL_58:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v33 = v321;
      unint64_t v126 = v314;
      int64_t v127 = v315;
      continue;
    }
    break;
  }
  unint64_t v174 = *(void *)&v167[8 * v175];
  if (v174)
  {
    int64_t v166 = v175;
    goto LABEL_117;
  }
  while (1)
  {
    int64_t v166 = v175 + 1;
    if (__OFADD__(v175, 1)) {
      break;
    }
    if (v166 >= v320) {
      goto LABEL_58;
    }
    unint64_t v174 = *(void *)&v167[8 * v166];
    ++v175;
    if (v174) {
      goto LABEL_117;
    }
  }
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  unint64_t v274 = 0xE200000000000000;
  uint64_t v273 = 16718;
LABEL_180:
  uint64_t v288 = v321[72];
  swift_bridgeObjectRetain();
  v321[41] = sub_1000143F4(v273, v274, v318);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unsigned char v8[16] = 2080;
  v289 = (uint64_t *)(v352 + *(int *)(v288 + 80));
  if (v289[1])
  {
    uint64_t v290 = *v289;
    unint64_t v291 = v289[1];
  }
  else
  {
    unint64_t v291 = 0xE200000000000000;
    uint64_t v290 = 16718;
  }
  uint64_t v292 = v321[82];
  v330 = (_WORD *)v321[80];
  uint64_t v293 = v321[72];
  swift_bridgeObjectRetain();
  v321[42] = sub_1000143F4(v290, v291, v318);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v8[21] = 2080;
  uint64_t v294 = v352 + *(int *)(v293 + 84);
  uint64_t v295 = *(void *)v294;
  LOBYTE(v294) = *(unsigned char *)(v294 + 8);
  v321[34] = v295;
  *(unsigned char *)v310 = v294;
  sub_1000172F8(&qword_1006618A8);
  uint64_t v296 = String.init<A>(describing:)();
  v321[44] = sub_1000143F4(v296, v297, v318);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v340, (os_log_type_t)v333, "[%@][%@] Unable to find distributor details distributorDomain: %s marketplaceDomain: %s marketplaceItemID: %s", (uint8_t *)v8, 0x34u);
  sub_1000172F8(&qword_10065DB10);
  swift_arrayDestroy();
  v208 = (char *)v321;
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  v349(v292, v330);
  uint64_t v277 = v321[100];
LABEL_187:
  *((void *)v208 + 116) = v277;
  uint64_t v308 = *((void *)v208 + 78);
  *(unsigned char *)(v352 + *(int *)(*((void *)v208 + 72) + 44)) = 2;
  sub_1003AEFD4(v352, v308, (uint64_t (*)(void))type metadata accessor for Restore);
  v309 = (void *)swift_task_alloc();
  *((void *)v208 + 117) = v309;
  void *v309 = v208;
  v309[1] = sub_1003839E8;
  uint64_t v195 = *((void *)v208 + 78);
LABEL_138:
  return sub_10037BDC4(v195);
}

uint64_t sub_1003839E8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 944) = v0;
  swift_task_dealloc();
  sub_1003AF03C(*(void *)(v2 + 624), (uint64_t (*)(void))type metadata accessor for Restore);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v3 = sub_100389048;
  }
  else
  {
    id v3 = sub_100383B80;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100383B80()
{
  id v4 = v2;
  uint64_t v281 = v2 + 35;
  int64_t v283 = (int64_t)(v2 + 2);
  os_log_type_t v309 = (_BYTE)v2 - 32;
  os_log_t log = (os_log_t)(v2 + 37);
  uint64_t v295 = v2 + 38;
  swift_release();
  uint64_t v5 = v2[118];
  int64_t v6 = v2[104];
  unint64_t v7 = v2[103];
  uint64_t v8 = (void *)v2[102];
  v2[100] = v2[116];
  v2[101] = v5;
  LODWORD(v307) = 138412546;
  unint64_t v316 = v2;
  uint64_t v288 = v8;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v6 << 6);
      uint64_t v16 = v4[95];
      goto LABEL_23;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_165;
    }
    int64_t v18 = (unint64_t)((1 << *((unsigned char *)v4 + 283)) + 63) >> 6;
    uint64_t v16 = v4[95];
    if (v17 >= v18) {
      break;
    }
    uint64_t v19 = v16 + 64;
    unint64_t v20 = *(void *)(v16 + 64 + 8 * v17);
    ++v6;
    if (!v20)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v18) {
        break;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v6);
      if (!v20)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v18) {
          break;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v6);
        if (!v20)
        {
          int64_t v6 = v17 + 3;
          if (v17 + 3 >= v18) {
            break;
          }
          unint64_t v20 = *(void *)(v19 + 8 * v6);
          if (!v20)
          {
            int64_t v21 = v17 + 4;
            if (v21 >= v18) {
              break;
            }
            unint64_t v20 = *(void *)(v19 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                int64_t v6 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  break;
                }
                if (v6 >= v18) {
                  goto LABEL_45;
                }
                unint64_t v20 = *(void *)(v19 + 8 * v6);
                ++v21;
                if (v20) {
                  goto LABEL_22;
                }
              }
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
            }
            int64_t v6 = v21;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v6 << 6);
LABEL_23:
    v4[104] = v6;
    v4[103] = v7;
    uint64_t v22 = v4[79];
    uint64_t v23 = v4[72];
    uint64_t v24 = *(void *)(v16 + 56);
    uint64_t v25 = *(void *)(v4[73] + 72);
    v4[105] = v25;
    sub_1003AEFD4(v24 + v25 * v15, v22, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v26 = swift_allocBox();
    id v3 = (char *)v27;
    v4[106] = v26;
    v4[107] = v27;
    sub_1003A4FE4(v22, v27);
    swift_beginAccess();
    if ((v3[*(int *)(v23 + 44)] | 2) == 2)
    {
      int64_t v28 = (void *)v4[61];
      static Logger.restore.getter();
      swift_retain_n();
      id v29 = v28;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      unint64_t v324 = v7;
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = v4[97];
        uint64_t v33 = v4[72];
        uint64_t v34 = v4[61];
        uint64_t v35 = swift_slowAlloc();
        unint64_t v36 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 138412546;
        *(void *)(v35 + 4) = v34;
        *unint64_t v36 = v32;
        *(_WORD *)(v35 + 12) = 2112;
        unint64_t v37 = *(void **)&v3[*(int *)(v33 + 20)];
        *(void *)(v35 + 14) = v37;
        v36[1] = v37;
        id v38 = v37;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%@][%@] Moved to bootstrapping", (uint8_t *)v35, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v4 = v316;
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        uint64_t v30 = v4[61];
      }
      unint64_t v51 = v4[96];
      uint64_t v52 = v4[92];
      uint64_t v53 = v4[81];
      uint64_t v54 = v316[80];
      uint64_t v55 = v316[72];

      uint64_t v0 = *(char **)(v53 + 8);
      v316[108] = v0;
      v316[109] = v51 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v56 = v54;
      id v4 = v316;
      int64_t v312 = (char *)v51;
      ((void (*)(uint64_t, uint64_t))v0)(v52, v56);
      uint64_t v57 = &v3[*(int *)(v55 + 48)];
      v316[110] = *(void *)v57;
      uint64_t v58 = *((void *)v57 + 1);
      v316[111] = v58;
      if (v58)
      {
        uint64_t v59 = (int *)v316[72];
        uint64_t v60 = &v3[v59[14]];
        uint64_t v61 = *((void *)v60 + 1);
        v316[112] = v61;
        if (v61)
        {
          v316[113] = *(void *)v60;
          uint64_t v62 = (uint64_t *)&v3[v59[13]];
          uint64_t v63 = *v62;
          v316[114] = *v62;
          uint64_t v64 = v62[1];
          v316[115] = v64;
          if (!v64)
          {
            uint64_t v65 = (void *)v316[61];
            static Logger.restore.getter();
            id v66 = v65;
            swift_retain();
            uint64_t v67 = Logger.logObject.getter();
            os_log_type_t v68 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v67, v68))
            {
              uint64_t v304 = v0;
              uint64_t v69 = v316[97];
              uint64_t v70 = v316[72];
              uint64_t v71 = v316[61];
              uint64_t v72 = swift_slowAlloc();
              id v73 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v72 = 138412546;
              *(void *)(v72 + 4) = v71;
              *id v73 = v69;
              *(_WORD *)(v72 + 12) = 2112;
              uint64_t v74 = *(void **)&v3[*(int *)(v70 + 20)];
              id v3 = (char *)(v72 + 22);
              v316[36] = v74;
              id v75 = v74;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v73[1] = v74;
              uint64_t v0 = v304;
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v67, v68, "[%@][%@] Could not find distributorID for app", (uint8_t *)v72, 0x16u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
              uint64_t v67 = v316[61];
            }
            uint64_t v8 = v288;
            unint64_t v7 = v324;
            uint64_t v100 = v316[89];
            unint64_t v1 = v316[80];

            ((void (*)(uint64_t, unint64_t))v0)(v100, v1);
            goto LABEL_4;
          }
          swift_beginAccess();
          char v156 = &v3[v59[9]];
          if (v63 == *(void *)v156 && v64 == *((void *)v156 + 1))
          {
            swift_endAccess();
LABEL_122:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v158 = 1;
            uint64_t v159 = v316;
LABEL_123:
            *((unsigned char *)v281 + 4) = v158;
            uint64_t v160 = v159[77];
            v3[*(int *)(v159[72] + 44)] = 1;
            sub_1003AEFD4((uint64_t)v3, v160, (uint64_t (*)(void))type metadata accessor for Restore);
            uint64_t v161 = (void *)swift_task_alloc();
            v159[119] = v161;
            void *v161 = v159;
            v161[1] = sub_100385D64;
            uint64_t v162 = v159[77];
LABEL_124:
            return sub_10037BDC4(v162);
          }
          char v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_endAccess();
          if (v157) {
            goto LABEL_122;
          }
          id v171 = objc_allocWithZone((Class)LSApplicationRecord);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          NSString v172 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          log->Class isa = 0;
          id v173 = [v171 initWithBundleIdentifier:v172 allowPlaceholder:0 error:log];

          Class isa = log->isa;
          if (v173)
          {
            unint64_t v174 = isa;
            if (([v173 isPlaceholder] & 1) == 0)
            {
              uint64_t v159 = v316;
              uint64_t v200 = (void *)v316[61];
              static Logger.restore.getter();
              swift_retain_n();
              id v201 = v200;
              uint64_t v202 = Logger.logObject.getter();
              os_log_type_t v203 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v202, v203))
              {
                uint64_t v305 = v0;
                uint64_t v204 = v316[97];
                os_log_t logb = (os_log_t)v316[72];
                NSString v205 = (void *)v316[61];
                uint64_t v206 = swift_slowAlloc();
                v207 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v206 = 138412546;
                v316[57] = v205;
                id v208 = v205;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v207 = v204;

                *(_WORD *)(v206 + 12) = 2112;
                uint64_t v209 = *(void **)&v3[SHIDWORD(logb[2].isa)];
                v316[58] = v209;
                id v210 = v209;
                uint64_t v159 = v316;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v207[1] = v209;
                uint64_t v0 = v305;
                swift_release_n();
                _os_log_impl((void *)&_mh_execute_header, v202, v203, "[%@][%@] Found marketplace app", (uint8_t *)v206, 0x16u);
                sub_1000172F8(&qword_10065DB10);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                v246 = (void *)v316[61];
                swift_release_n();
              }
              ((void (*)(void, void))v0)(v159[87], v159[80]);
              char v158 = 0;
              goto LABEL_123;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            int64_t v175 = v316;
            goto LABEL_172;
          }
LABEL_140:
          uint64_t v304 = v0;
          int64_t v6 = (int64_t)v316;
          char v189 = (void *)v316[61];
          char v190 = isa;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          static Logger.restore.getter();
          swift_retain_n();
          id v191 = v189;
          uint64_t v124 = Logger.logObject.getter();
          os_log_type_t v192 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v124, v192))
          {
            uint64_t v193 = v316[97];
            os_log_t loga = (os_log_t)v316[72];
            v194 = (void *)v316[61];
            os_log_type_t v328 = v192;
            uint64_t v195 = swift_slowAlloc();
            uint64_t v196 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v195 = v307;
            v316[45] = v194;
            id v197 = v194;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v196 = v193;

            *(_WORD *)(v195 + 12) = 2112;
            uint64_t v198 = *(void **)&v3[SHIDWORD(loga[2].isa)];
            v316[46] = v198;
            id v199 = v198;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v196[1] = v198;
            swift_release_n();
            _os_log_impl((void *)&_mh_execute_header, v124, v328, "[%@][%@] Could not find marketplace app", (uint8_t *)v195, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
LABEL_145:

            swift_release_n();
            uint64_t v124 = *(NSObject **)(v6 + 488);
          }
          uint64_t v211 = *(void *)(v6 + 704);
          uint64_t v212 = *(void *)(v6 + 640);
          uint64_t v213 = *(void *)(v6 + 576);

          ((void (*)(uint64_t, uint64_t))v304)(v211, v212);
          uint64_t v214 = (uint64_t *)&v3[*(int *)(v213 + 52)];
          uint64_t v215 = v214[1];
          uint64_t v216 = (void *)v6;
          if (!v215) {
            goto LABEL_152;
          }
          uint64_t v217 = *(int **)(v6 + 576);
          uint64_t v218 = (uint64_t *)&v3[v217[20]];
          uint64_t v219 = v218[1];
          if (!v219) {
            goto LABEL_152;
          }
          v220 = &v3[v217[21]];
          if (v220[8]) {
            goto LABEL_152;
          }
          uint64_t v221 = *v214;
          uint64_t v329 = *v218;
          uint64_t v222 = *(void *)v220;
          uint64_t v223 = v216[100];
          uint64_t v224 = *(void *)(v223 + 16);
          swift_bridgeObjectRetain();
          if (v224)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100016D20(v221, v215);
            char v226 = v225;
            swift_bridgeObjectRelease();
            if (v226)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v216 = v316;
LABEL_152:
              v227 = (void *)v216[61];
              static Logger.restore.getter();
              swift_retain_n();
              id v228 = v227;
              v229 = Logger.logObject.getter();
              os_log_type_t v230 = static os_log_type_t.error.getter();
              BOOL v231 = os_log_type_enabled(v229, v230);
              int64_t v6 = v216[61];
              int64_t v175 = v216;
              if (v231)
              {
                os_log_t log = v229;
                os_log_type_t v309 = v230;
                uint64_t v232 = v216[97];
                uint64_t v233 = v175[72];
                unint64_t v1 = swift_slowAlloc();
                os_log_type_t v234 = (void *)swift_slowAlloc();
                uint64_t v235 = swift_slowAlloc();
                *(_DWORD *)unint64_t v1 = 138413314;
                v175[38] = v235;
                v175[39] = v6;
                id v236 = (id)v6;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *os_log_type_t v234 = v232;

                *(_WORD *)(v1 + 12) = 2112;
                v237 = *(void **)&v3[*(int *)(v233 + 20)];
                v175[40] = v237;
                id v238 = v237;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v234[1] = v237;
                swift_release();
                LOWORD(v6) = 2080;
                *(_WORD *)(v1 + 22) = 2080;
                v239 = (uint64_t *)&v3[*(int *)(v233 + 52)];
                if (!v239[1]) {
                  goto LABEL_166;
                }
                uint64_t v240 = *v239;
                unint64_t v241 = v239[1];
                goto LABEL_167;
              }
              uint64_t v242 = v216[82];
              uint64_t v243 = v216[80];

              swift_release_n();
              uint64_t v244 = v242;
              uint64_t v245 = v243;
LABEL_171:
              ((void (*)(uint64_t, uint64_t))v304)(v244, v245);
LABEL_172:
              uint64_t v268 = v175[100];
LABEL_173:
              v175[116] = v268;
              uint64_t v269 = v175[78];
              v3[*(int *)(v175[72] + 44)] = 2;
              sub_1003AEFD4((uint64_t)v3, v269, (uint64_t (*)(void))type metadata accessor for Restore);
              v270 = (void *)swift_task_alloc();
              v175[117] = v270;
              void *v270 = v175;
              v270[1] = sub_1003839E8;
              uint64_t v162 = v175[78];
              goto LABEL_124;
            }
            uint64_t v315 = v222;
            uint64_t v323 = v221;
            id v271 = v316;
            uint64_t v223 = v316[100];
            uint64_t v217 = (int *)v316[72];
          }
          else
          {
            uint64_t v315 = v222;
            uint64_t v323 = v221;
            swift_bridgeObjectRetain();
            id v271 = v316;
          }
          uint64_t v272 = v271[71];
          uint64_t v273 = v271[70];
          uint64_t v308 = v271[69];
          unint64_t v274 = (uint64_t *)&v3[v217[19]];
          uint64_t v317 = *v274;
          uint64_t v306 = v274[1];
          uint64_t v275 = (uint64_t *)&v3[v217[14]];
          uint64_t v276 = v275[1];
          uint64_t v311 = *v275;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          UUID.init()();
          uint64_t v277 = UUID.uuidString.getter();
          uint64_t v279 = v278;
          (*(void (**)(uint64_t, uint64_t))(v273 + 8))(v272, v308);
          v271[2] = v277;
          v271[3] = v279;
          v271[4] = v329;
          v271[5] = v219;
          v271[6] = v323;
          v271[7] = v215;
          v271[8] = v315;
          *((unsigned char *)v271 + 72) = 0;
          v271[10] = v317;
          v271[11] = v306;
          v271[12] = v311;
          v271[13] = v276;
          *((unsigned char *)v271 + 112) = 1;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          sub_10052A5BC(v283, v323, v215, isUniquelyReferenced_nonNull_native);
          uint64_t v268 = v223;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v175 = v271;
          goto LABEL_173;
        }
        uint64_t v88 = (void *)v316[61];
        static Logger.restore.getter();
        id v89 = v88;
        swift_retain();
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v78, v90))
        {
          os_log_type_t v91 = v0;
          uint64_t v92 = v316[97];
          int64_t v320 = v6;
          uint64_t v93 = v316[72];
          uint64_t v304 = v3;
          uint64_t v94 = v316[61];
          uint64_t v95 = swift_slowAlloc();
          Swift::String v96 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v95 = 138412546;
          *(void *)(v95 + 4) = v94;
          void *v96 = v92;
          uint64_t v0 = v91;
          *(_WORD *)(v95 + 12) = 2112;
          uint64_t v97 = *(int *)(v93 + 20);
          int64_t v6 = v320;
          id v98 = *(void **)&v3[v97];
          id v3 = v312;
          *(void *)(v95 + 14) = v98;
          v96[1] = v98;
          id v99 = v98;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v78, v90, "[%@][%@] Could not find accountID for app", (uint8_t *)v95, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          id v4 = v316;
          swift_slowDealloc();
          swift_slowDealloc();
          unint64_t v7 = v324;
        }
        else
        {

          swift_release();
          uint64_t v78 = v316[61];
          unint64_t v7 = v324;
          id v3 = v312;
        }
        uint64_t v101 = v4[90];
      }
      else
      {
        uint64_t v76 = (void *)v316[61];
        static Logger.restore.getter();
        id v77 = v76;
        swift_retain();
        uint64_t v78 = Logger.logObject.getter();
        os_log_type_t v79 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v78, v79))
        {
          int64_t v319 = v6;
          unint64_t v80 = v0;
          uint64_t v81 = v316[97];
          uint64_t v82 = v316[72];
          uint64_t v304 = v3;
          uint64_t v83 = v316[61];
          uint64_t v84 = swift_slowAlloc();
          uint64_t v85 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v84 = 138412546;
          *(void *)(v84 + 4) = v83;
          void *v85 = v81;
          uint64_t v0 = v80;
          int64_t v6 = v319;
          *(_WORD *)(v84 + 12) = 2112;
          uint64_t v86 = *(void **)&v3[*(int *)(v82 + 20)];
          id v3 = v312;
          *(void *)(v84 + 14) = v86;
          v85[1] = v86;
          id v87 = v86;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v78, v79, "[%@][%@] Could not find distributorDomain for app", (uint8_t *)v84, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          id v4 = v316;
          swift_slowDealloc();
          swift_slowDealloc();
          unint64_t v7 = v324;
        }
        else
        {

          swift_release();
          uint64_t v78 = v316[61];
          unint64_t v7 = v324;
          id v3 = v312;
        }
        uint64_t v101 = v4[91];
      }
      unint64_t v1 = v4[80];

      ((void (*)(uint64_t, unint64_t))v0)(v101, v1);
      goto LABEL_4;
    }
    int64_t v39 = (void *)v4[61];
    static Logger.restore.getter();
    id v40 = v39;
    swift_retain_n();
    id v41 = v40;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v42))
    {
      uint64_t v43 = v4[97];
      int64_t v318 = v6;
      unint64_t v325 = v7;
      uint64_t v44 = v4[72];
      uint64_t v45 = v3;
      id v3 = (char *)v26;
      uint64_t v46 = (void *)v4[61];
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138412546;
      *(void *)(v47 + 4) = v46;
      void *v48 = v43;

      *(_WORD *)(v47 + 12) = 2112;
      uint64_t v49 = *(void **)&v45[*(int *)(v44 + 20)];
      int64_t v6 = v318;
      unint64_t v7 = v325;
      *(void *)(v47 + 14) = v49;
      v48[1] = v49;
      id v50 = v49;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v42, "[%@][%@] Already bootstrapping", (uint8_t *)v47, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      id v4 = v316;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v9 = (void *)v4[61];

      swift_release_n();
      uint64_t v10 = v4[61];
    }
    uint64_t v0 = (char *)v4[96];
    uint64_t v11 = v4[84];
    uint64_t v12 = v316[81];
    unint64_t v1 = v316[80];

    uint64_t v13 = *(void (**)(uint64_t, unint64_t))(v12 + 8);
    id v4 = v316;
    v13(v11, v1);
LABEL_4:
    swift_release();
  }
LABEL_45:
  uint64_t v102 = v4[98];
  swift_release();
  uint64_t v282 = v102 + 64;
  uint64_t v103 = -1 << *(unsigned char *)(v102 + 32);
  if (-v103 < 64) {
    uint64_t v104 = ~(-1 << -(char)v103);
  }
  else {
    uint64_t v104 = -1;
  }
  unint64_t v105 = v104 & *(void *)(v102 + 64);
  int64_t v283 = (unint64_t)(63 - v103) >> 6;
  uint64_t v284 = v102;
  swift_bridgeObjectRetain();
  uint64_t v290 = 0;
  int64_t v106 = 0;
LABEL_50:
  v4[122] = v8;
  v4[121] = v290;
  if (v105)
  {
    uint64_t v285 = (v105 - 1) & v105;
    int64_t v286 = v106;
    unint64_t v107 = __clz(__rbit64(v105)) | (v106 << 6);
    goto LABEL_66;
  }
  int64_t v108 = v106 + 1;
  if (__OFADD__(v106, 1))
  {
    __break(1u);
    goto LABEL_178;
  }
  if (v108 >= v283) {
    goto LABEL_127;
  }
  unint64_t v109 = *(void *)(v282 + 8 * v108);
  int64_t v110 = v106 + 1;
  if (v109) {
    goto LABEL_65;
  }
  int64_t v110 = v106 + 2;
  if (v106 + 2 >= v283) {
    goto LABEL_127;
  }
  unint64_t v109 = *(void *)(v282 + 8 * v110);
  if (v109) {
    goto LABEL_65;
  }
  int64_t v110 = v106 + 3;
  if (v106 + 3 >= v283) {
    goto LABEL_127;
  }
  unint64_t v109 = *(void *)(v282 + 8 * v110);
  if (v109)
  {
LABEL_65:
    uint64_t v285 = (v109 - 1) & v109;
    int64_t v286 = v110;
    unint64_t v107 = __clz(__rbit64(v109)) + (v110 << 6);
LABEL_66:
    uint64_t v112 = *(void *)(v284 + 48) + 104 * v107;
    Class isa = *(Class *)(v112 + 8);
    uint64_t v304 = *(char **)v112;
    os_log_t log = *(os_log_t *)(v112 + 16);
    uint64_t v299 = *(void *)(v112 + 32);
    uint64_t v297 = *(void *)(v112 + 48);
    char v296 = *(unsigned char *)(v112 + 56);
    uint64_t v295 = *(uint64_t **)(v112 + 64);
    char v293 = *(unsigned char *)(v112 + 96);
    uint64_t v114 = *(void *)(*(void *)(v284 + 56) + 8 * v107);
    int64_t v6 = *(void *)(v114 + 16);
    long long v294 = *(_OWORD *)(v112 + 72);
    unint64_t v1 = *(void *)(v112 + 72);
    char v307 = isa;
    os_log_type_t v309 = v1;
    uint64_t v313 = *(void *)(v112 + 24);
    uint64_t v321 = *(void *)(v112 + 40);
    uint64_t v326 = *(void *)(v112 + 88);
    if (v6)
    {
      uint64_t v115 = v4[73];
      unint64_t v287 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
      uint64_t v0 = (char *)(v114 + v287);
      uint64_t v291 = *(void *)(v115 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v3 = (char *)&_swiftEmptyDictionarySingleton;
      v289 = v8;
      while (1)
      {
        uint64_t v117 = v4[75];
        uint64_t v118 = v4[72];
        sub_1003AEFD4((uint64_t)v0, v117, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v119 = (uint64_t *)(v117 + *(int *)(v118 + 56));
        uint64_t v120 = v119[1];
        if (v120)
        {
          uint64_t v121 = v4;
          uint64_t v122 = *v119;
          sub_1003AEFD4(v121[75], v121[74], (uint64_t (*)(void))type metadata accessor for Restore);
          swift_bridgeObjectRetain();
          sub_10023C7B4((uint64_t)v290);
          int v123 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v332 = &_swiftEmptyDictionarySingleton;
          uint64_t v124 = &_swiftEmptyDictionarySingleton;
          unint64_t v1 = sub_100016D20(v122, v120);
          uint64_t v126 = *((void *)&_swiftEmptyDictionarySingleton + 2);
          BOOL v127 = (v125 & 1) == 0;
          uint64_t v128 = v126 + v127;
          if (__OFADD__(v126, v127))
          {
            __break(1u);
            goto LABEL_145;
          }
          char v129 = v125;
          if (*((void *)&_swiftEmptyDictionarySingleton + 3) >= v128)
          {
            if (!v123) {
              sub_10052DDF0();
            }
          }
          else
          {
            sub_100527700(v128, v123);
            unint64_t v130 = sub_100016D20(v122, v120);
            if ((v129 & 1) != (v131 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v1 = v130;
          }
          swift_bridgeObjectRelease();
          if ((v129 & 1) == 0)
          {
            *((void *)&_swiftEmptyDictionarySingleton + (v1 >> 6) + 8) |= 1 << v1;
            int64_t v132 = (uint64_t *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 16 * v1);
            *int64_t v132 = v122;
            v132[1] = v120;
            *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + 8 * v1) = _swiftEmptyArrayStorage;
            uint64_t v133 = *((void *)&_swiftEmptyDictionarySingleton + 2);
            uint64_t v134 = v133 + 1;
            BOOL v135 = __OFADD__(v133, 1);
            swift_bridgeObjectRetain();
            if (v135)
            {
              __break(1u);
              goto LABEL_164;
            }
            *((void *)&_swiftEmptyDictionarySingleton + 2) = v134;
          }
          swift_bridgeObjectRetain();
          uint64_t v136 = *((void *)&_swiftEmptyDictionarySingleton + 7);
          swift_bridgeObjectRelease();
          unint64_t v137 = *(void *)(v136 + 8 * v1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v137 = sub_100290934(0, *(void *)(v137 + 16) + 1, 1, v137);
          }
          unint64_t v139 = *(void *)(v137 + 16);
          unint64_t v138 = *(void *)(v137 + 24);
          if (v139 >= v138 >> 1) {
            unint64_t v137 = sub_100290934(v138 > 1, v139 + 1, 1, v137);
          }
          id v4 = v316;
          uint64_t v140 = v316[74];
          *(void *)(v137 + 16) = v139 + 1;
          uint64_t v116 = v291;
          sub_1003A4FE4(v140, v137 + v287 + v139 * v291);
          *(void *)(v136 + 8 * v1) = v137;
          swift_bridgeObjectRelease();
          uint64_t v290 = sub_1002E1CB8;
          uint64_t v8 = v289;
        }
        else
        {
          uint64_t v116 = v291;
        }
        sub_1003AF03C(v4[75], (uint64_t (*)(void))type metadata accessor for Restore);
        v0 += v116;
        if (!--v6)
        {
          swift_bridgeObjectRelease();
          Class isa = v307;
          goto LABEL_90;
        }
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v3 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_90:
    int64_t v6 = 0;
    uint64_t v141 = (char *)&_swiftEmptyDictionarySingleton + 64;
    uint64_t v142 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
    if (-v142 < 64) {
      uint64_t v143 = ~(-1 << -(char)v142);
    }
    else {
      uint64_t v143 = -1;
    }
    unint64_t v144 = v143 & *((void *)&_swiftEmptyDictionarySingleton + 8);
    int64_t v292 = (unint64_t)(63 - v142) >> 6;
    if (v144)
    {
LABEL_94:
      unint64_t v145 = __clz(__rbit64(v144));
      v144 &= v144 - 1;
      unint64_t v146 = v145 | (v6 << 6);
      goto LABEL_109;
    }
    while (1)
    {
      int64_t v147 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if (v147 >= v292) {
        goto LABEL_49;
      }
      unint64_t v148 = *(void *)&v141[8 * v147];
      ++v6;
      if (!v148)
      {
        int64_t v6 = v147 + 1;
        if (v147 + 1 >= v292) {
          goto LABEL_49;
        }
        unint64_t v148 = *(void *)&v141[8 * v6];
        if (!v148)
        {
          int64_t v6 = v147 + 2;
          if (v147 + 2 >= v292) {
            goto LABEL_49;
          }
          unint64_t v148 = *(void *)&v141[8 * v6];
          if (!v148)
          {
            int64_t v149 = v147 + 3;
            if (v149 >= v292)
            {
LABEL_49:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              id v4 = v316;
              unint64_t v105 = v285;
              int64_t v106 = v286;
              goto LABEL_50;
            }
            unint64_t v148 = *(void *)&v141[8 * v149];
            if (!v148)
            {
              while (1)
              {
                int64_t v6 = v149 + 1;
                if (__OFADD__(v149, 1)) {
                  break;
                }
                if (v6 >= v292) {
                  goto LABEL_49;
                }
                unint64_t v148 = *(void *)&v141[8 * v6];
                ++v149;
                if (v148) {
                  goto LABEL_108;
                }
              }
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              unint64_t v241 = 0xE200000000000000;
              uint64_t v240 = 16718;
LABEL_167:
              uint64_t v259 = v316[72];
              swift_bridgeObjectRetain();
              v316[41] = sub_1000143F4(v240, v241, v295);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              *(_WORD *)(v1 + 32) = v6;
              id v260 = (uint64_t *)&v3[*(int *)(v259 + 80)];
              if (v260[1])
              {
                uint64_t v261 = *v260;
                unint64_t v262 = v260[1];
              }
              else
              {
                unint64_t v262 = 0xE200000000000000;
                uint64_t v261 = 16718;
              }
              uint64_t v298 = v316[80];
              uint64_t v300 = v316[82];
              uint64_t v263 = v316[72];
              swift_bridgeObjectRetain();
              v316[42] = sub_1000143F4(v261, v262, v295);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              *(_WORD *)(v1 + 42) = 2080;
              v264 = &v3[*(int *)(v263 + 84)];
              uint64_t v265 = *(void *)v264;
              LOBYTE(v264) = v264[8];
              v316[34] = v265;
              *(unsigned char *)uint64_t v281 = (_BYTE)v264;
              sub_1000172F8(&qword_1006618A8);
              uint64_t v266 = String.init<A>(describing:)();
              v316[44] = sub_1000143F4(v266, v267, v295);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              int64_t v175 = v316;
              swift_bridgeObjectRelease();
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, log, v309, "[%@][%@] Unable to find distributor details distributorDomain: %s marketplaceDomain: %s marketplaceItemID: %s", (uint8_t *)v1, 0x34u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v245 = v298;
              uint64_t v244 = v300;
              goto LABEL_171;
            }
            int64_t v6 = v149;
          }
        }
      }
LABEL_108:
      unint64_t v144 = (v148 - 1) & v148;
      unint64_t v146 = __clz(__rbit64(v148)) + (v6 << 6);
LABEL_109:
      unint64_t v150 = (uint64_t *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 16 * v146);
      uint64_t v151 = *v150;
      unint64_t v1 = v150[1];
      uint64_t v0 = *(char **)(*((void *)&_swiftEmptyDictionarySingleton + 7) + 8 * v146);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100290AC8(0, v8[2] + 1, 1, v8);
      }
      unint64_t v153 = v8[2];
      unint64_t v152 = v8[3];
      if (v153 >= v152 >> 1) {
        uint64_t v8 = sub_100290AC8((void *)(v152 > 1), v153 + 1, 1, v8);
      }
      void v8[2] = v153 + 1;
      char v154 = &v8[16 * v153];
      v154[4] = v151;
      v154[5] = v1;
      Class isa = v307;
      v154[6] = v304;
      v154[7] = v307;
      v154[8] = log;
      v154[9] = v313;
      v154[10] = v299;
      v154[11] = v321;
      v154[12] = v297;
      *((unsigned char *)v154 + 104) = v296;
      *((_DWORD *)v154 + 27) = *(_DWORD *)&v331[3];
      *(_DWORD *)((char *)v154 + 105) = *(_DWORD *)v331;
      v154[14] = v295;
      *(_OWORD *)(v154 + 15) = v294;
      v154[17] = v326;
      *((unsigned char *)v154 + 144) = v293;
      *((_DWORD *)v154 + 37) = *(_DWORD *)((char *)&v332 + 3);
      *(_DWORD *)((char *)v154 + 145) = v332;
      v154[19] = v0;
      if (v144) {
        goto LABEL_94;
      }
    }
    __break(1u);
    goto LABEL_140;
  }
  uint64_t v111 = v106 + 4;
  if (v106 + 4 < v283)
  {
    unint64_t v109 = *(void *)(v282 + 8 * v111);
    if (!v109)
    {
      while (1)
      {
        int64_t v110 = v111 + 1;
        if (__OFADD__(v111, 1)) {
          goto LABEL_179;
        }
        if (v110 >= v283) {
          goto LABEL_127;
        }
        unint64_t v109 = *(void *)(v282 + 8 * v110);
        ++v111;
        if (v109) {
          goto LABEL_65;
        }
      }
    }
    int64_t v110 = v106 + 4;
    goto LABEL_65;
  }
LABEL_127:
  swift_release();
  if (v8[2])
  {
    swift_bridgeObjectRetain();
    unint64_t v163 = (void *)swift_task_alloc();
    v4[123] = v163;
    *unint64_t v163 = v4;
    v163[1] = sub_100388A98;
    uint64_t v164 = v4[66];
    uint64_t v165 = v4[65];
    uint64_t v166 = v4[63];
    uint64_t v167 = v4[64];
    uint64_t v169 = v4[61];
    uint64_t v168 = v4[62];
    char v170 = *((unsigned char *)v4 + 281);
    return sub_100389420((uint64_t)v8, v168, v166, v167, v170, v165, v164, v169);
  }
  uint64_t v176 = v4[100];
  if (*(void *)(v176 + 16) && ((uint64_t v177 = v4[66]) != 0 || (*((unsigned char *)v4 + 282) & 1) != 0))
  {
    uint64_t v178 = v4[121];
    uint64_t v247 = v4;
    uint64_t v322 = v4[99];
    uint64_t v248 = v4[68];
    uint64_t v310 = v4[65];
    uint64_t v314 = v4[67];
    uint64_t v251 = v4 + 61;
    v249 = (void *)v4[61];
    uint64_t v250 = v251[1];
    uint64_t v252 = v247[60];
    uint64_t v253 = swift_bridgeObjectRetain();
    long long v330 = *((_OWORD *)v281 + 14);
    uint64_t v254 = sub_100376BF8(v253);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v255 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v255 - 8) + 56))(v248, 1, 1, v255);
    uint64_t v256 = swift_allocObject();
    *(void *)(v256 + 16) = 0;
    *(void *)(v256 + 24) = 0;
    *(void *)(v256 + 32) = v254;
    *(void *)(v256 + 40) = v310;
    *(void *)(v256 + 48) = v177;
    *(void *)(v256 + 56) = v252;
    *(void *)(v256 + 64) = v249;
    *(void *)(v256 + 72) = v250;
    *(_OWORD *)(v256 + 80) = v330;
    sub_10001733C(v314, v256 + 96, &qword_10065C310);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v257 = v249;
    uint64_t v180 = v322;
    swift_bridgeObjectRetain();
    sub_100017544(v248, (uint64_t)&unk_1006618D0, v256);
    swift_bridgeObjectRelease();
LABEL_159:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v178 = v4[121];
    unint64_t v179 = v4;
    uint64_t v180 = v4[99];
    if (*(void *)(v176 + 16))
    {
      uint64_t v181 = v179[68];
      uint64_t v182 = v179[67];
      uint64_t v184 = (void *)v179[61];
      uint64_t v183 = v179[62];
      uint64_t v185 = v179[60];
      uint64_t v186 = type metadata accessor for TaskPriority();
      long long v327 = *((_OWORD *)v281 + 14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v186 - 8) + 56))(v181, 1, 1, v186);
      uint64_t v187 = swift_allocObject();
      *(void *)(v187 + 16) = 0;
      *(void *)(v187 + 24) = 0;
      *(void *)(v187 + 32) = v185;
      *(void *)(v187 + 40) = v184;
      *(void *)(v187 + 48) = v183;
      *(_OWORD *)(v187 + 56) = v327;
      sub_10001733C(v182, v187 + 72, &qword_10065C310);
      id v188 = v184;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      sub_100017544(v181, (uint64_t)&unk_1006618C0, v187);
      goto LABEL_159;
    }
  }
  swift_bridgeObjectRelease();
  sub_10023C7B4(v180);
  sub_10023C7B4(v178);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v258 = (uint64_t (*)(void))v316[1];
  return v258();
}

uint64_t sub_100385D64()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 616);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003AF03C(v3, (uint64_t (*)(void))type metadata accessor for Restore);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v4 = sub_100389234;
  }
  else
  {
    sub_1003AF03C(*(void *)(v2 + 616), (uint64_t (*)(void))type metadata accessor for Restore);
    id v4 = sub_100385F28;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100385F28()
{
  unint64_t v404 = v0;
  unint64_t v345 = v0 + 280;
  char v1 = *(unsigned char *)(v0 + 284);
  uint64_t v2 = *(void *)(v0 + 920);
  uint64_t v395 = *(void *)(v0 + 912);
  uint64_t v3 = *(void *)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 880);
  uint64_t v5 = *(void *)(v0 + 568);
  uint64_t v6 = *(void *)(v0 + 560);
  uint64_t v7 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v389 = v8;
  *(void *)(v0 + 120) = v8;
  uint64_t v11 = v0 + 120;
  v369 = (void (**)(NSObject *, uint64_t))(v0 + 376);
  uint64_t v399 = v10;
  *(void *)(v0 + 128) = v10;
  *(void *)(v0 + 136) = v4;
  *(void *)(v0 + 144) = v3;
  *(void *)(v0 + 152) = v395;
  *(void *)(v0 + 160) = v2;
  *(void *)(v0 + 168) = 0;
  *(unsigned char *)(v0 + 176) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(unsigned char *)(v0 + 216) = v1;
  unint64_t v394 = v0;
  if (v1)
  {
    LOBYTE(v12) = v1;
    int64_t v13 = v0 + 113;
    uint64_t v14 = *(void *)(v0 + 856);
    uint64_t v15 = *(void *)(v0 + 584);
    swift_bridgeObjectRelease();
    sub_1000172F8(&qword_10065E680);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1005A3EC0;
    sub_1003AEFD4(v14, v17 + v16, (uint64_t (*)(void))type metadata accessor for Restore);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *(void **)(v0 + 816);
    uint64_t v384 = v17;
    if (isUniquelyReferenced_nonNull_native)
    {
      long long v353 = *(void **)(v0 + 816);
      goto LABEL_4;
    }
    goto LABEL_200;
  }
  uint64_t v42 = *(void *)(v0 + 856);
  uint64_t v43 = *(void *)(v0 + 792);
  uint64_t v44 = *(void *)(v0 + 784);
  uint64_t v45 = *(void *)(v0 + 608);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1003AEFD4(v42, v45, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_10023C7B4(v43);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 376) = v44;
  unint64_t v48 = sub_100452AD8((uint64_t *)(v0 + 120));
  uint64_t v49 = *(void *)(v44 + 16);
  BOOL v50 = (v47 & 1) == 0;
  uint64_t v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
    __break(1u);
    goto LABEL_202;
  }
  char v52 = v47;
  uint64_t v53 = *(void (**)(NSObject *, uint64_t))(v0 + 784);
  if (*((void *)v53 + 3) >= v51)
  {
    if ((v46 & 1) == 0)
    {
      sub_10052DFAC();
      uint64_t v53 = *v369;
    }
  }
  else
  {
    sub_100527A20(v51, v46);
    uint64_t v53 = *v369;
    unint64_t v54 = sub_100452AD8((uint64_t *)(v0 + 120));
    if ((v52 & 1) != (v55 & 1))
    {
LABEL_137:
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v48 = v54;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v52 & 1) == 0)
  {
    sub_10052B1B4(v48, v11, (uint64_t)_swiftEmptyArrayStorage, v53);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v62 = *(void *)(v0 + 608);
  uint64_t v63 = *(void **)(v0 + 488);
  v396 = v53;
  swift_bridgeObjectRelease();
  sub_100376EB8(v62);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Logger.restore.getter();
  id v64 = v63;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v12 = v0;
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.default.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  unint64_t v68 = *(void *)(v0 + 920);
  if (v67)
  {
    uint64_t v366 = *(void *)(v0 + 912);
    uint64_t v399 = *(void *)(v0 + 872);
    v389 = *(NSObject **)(v0 + 864);
    uint64_t v357 = *(void *)(v0 + 856);
    unint64_t v362 = *(void *)(v0 + 848);
    uint64_t v69 = *(void *)(v0 + 776);
    uint64_t v386 = *(void *)(v0 + 680);
    uint64_t v381 = *(void *)(v0 + 640);
    uint64_t v351 = *(void *)(v0 + 576);
    typeb = v65;
    uint64_t v70 = *(void **)(v0 + 488);
    os_log_type_t v372 = v66;
    uint64_t v71 = swift_slowAlloc();
    uint64_t v72 = (void *)swift_slowAlloc();
    v403[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v71 = 138412802;
    *(void *)(v0 + 384) = v70;
    id v73 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v72 = v69;

    *(_WORD *)(v71 + 12) = 2112;
    uint64_t v74 = *(void **)(v357 + *(int *)(v351 + 20));
    *(void *)(v0 + 392) = v74;
    id v75 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v72[1] = v74;
    unint64_t v41 = v362;
    swift_release();
    *(_WORD *)(v71 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 400) = sub_1000143F4(v366, v68, v403);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, typeb, v372, "[%@][%@] Added candidate with distributorID: %s", (uint8_t *)v71, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(uint64_t, uint64_t))v389)(v386, v381);
  }
  else
  {
    uint64_t v76 = *(void (**)(unint64_t, uint64_t))(v0 + 864);
    unint64_t v41 = *(void *)(v0 + 680);
    uint64_t v77 = *(void *)(v0 + 640);
    uint64_t v78 = *(void **)(v0 + 488);

    swift_release();
    swift_bridgeObjectRelease_n();
    v76(v41, v77);
  }
  swift_release();
  uint64_t v59 = *(void *)(v0 + 960);
  int64_t v13 = *(void *)(v0 + 832);
  uint64_t v60 = *(void *)(v0 + 824);
  uint64_t v61 = *(void **)(v0 + 816);
  *(void *)(v0 + 792) = sub_1002E1CB8;
  *(void *)(v0 + 784) = v396;
LABEL_23:
  uint64_t v346 = v11 - 104;
  uint64_t v384 = v11 + 104;
  char type = (void **)(v11 + 176);
  v363 = (uint64_t *)(v11 + 184);
  *(void *)(v12 + 816) = v61;
  *(void *)(v12 + 808) = v59;
  LODWORD(v382) = 138412546;
  long long v354 = v61;
  while (1)
  {
    if (v60)
    {
      unint64_t v81 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      unint64_t v82 = v81 | (v13 << 6);
      uint64_t v83 = *(void *)(v12 + 760);
      goto LABEL_46;
    }
    int64_t v84 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_187;
    }
    int64_t v85 = (unint64_t)((1 << *(unsigned char *)(v12 + 283)) + 63) >> 6;
    uint64_t v83 = *(void *)(v12 + 760);
    if (v84 >= v85) {
      break;
    }
    uint64_t v86 = v83 + 64;
    unint64_t v87 = *(void *)(v83 + 64 + 8 * v84);
    ++v13;
    if (!v87)
    {
      int64_t v13 = v84 + 1;
      if (v84 + 1 >= v85) {
        break;
      }
      unint64_t v87 = *(void *)(v86 + 8 * v13);
      if (!v87)
      {
        int64_t v13 = v84 + 2;
        if (v84 + 2 >= v85) {
          break;
        }
        unint64_t v87 = *(void *)(v86 + 8 * v13);
        if (!v87)
        {
          int64_t v13 = v84 + 3;
          if (v84 + 3 >= v85) {
            break;
          }
          unint64_t v87 = *(void *)(v86 + 8 * v13);
          if (!v87)
          {
            int64_t v88 = v84 + 4;
            if (v88 >= v85) {
              break;
            }
            unint64_t v87 = *(void *)(v86 + 8 * v88);
            if (!v87)
            {
              while (1)
              {
                int64_t v13 = v88 + 1;
                if (__OFADD__(v88, 1)) {
                  break;
                }
                if (v13 >= v85) {
                  goto LABEL_67;
                }
                unint64_t v87 = *(void *)(v86 + 8 * v13);
                ++v88;
                if (v87) {
                  goto LABEL_45;
                }
              }
LABEL_199:
              __break(1u);
LABEL_200:
              long long v353 = sub_100290AC8(0, v19[2] + 1, 1, v19);
LABEL_4:
              unint64_t v21 = v353[2];
              unint64_t v20 = v353[3];
              v396 = (void (*)(NSObject *, uint64_t))v13;
              if (v21 >= v20 >> 1) {
                long long v353 = sub_100290AC8((void *)(v20 > 1), v21 + 1, 1, v353);
              }
              uint64_t v22 = *(void *)(v394 + 920);
              uint64_t v23 = *(void *)(v394 + 912);
              uint64_t v24 = *(void *)(v394 + 904);
              uint64_t v25 = *(void *)(v394 + 896);
              uint64_t v26 = *(void *)(v394 + 888);
              uint64_t v27 = *(void *)(v394 + 880);
              int64_t v28 = *(void **)(v394 + 488);
              *(unsigned char *)(v11 + 872) = 1;
              v353[2] = v21 + 1;
              id v29 = &v353[16 * v21];
              v29[4] = v24;
              v29[5] = v25;
              v29[6] = v389;
              v29[7] = v399;
              v29[8] = v27;
              v29[9] = v26;
              v29[10] = v23;
              v29[11] = v22;
              v29[12] = 0;
              *((unsigned char *)v29 + 104) = *(unsigned char *)(v394 + 992);
              LODWORD(v22) = *(_DWORD *)(v11 + 97);
              *((_DWORD *)v29 + 27) = *(_DWORD *)(v11 + 100);
              *(_DWORD *)((char *)v29 + 105) = v22;
              *((_OWORD *)v29 + 7) = 0u;
              *((_OWORD *)v29 + 8) = 0u;
              *((unsigned char *)v29 + 144) = v12;
              LODWORD(v22) = *(_DWORD *)v13;
              *((_DWORD *)v29 + 37) = *(_DWORD *)(v13 + 3);
              *(_DWORD *)((char *)v29 + 145) = v22;
              v29[19] = v384;
              static Logger.restore.getter();
              id v30 = v28;
              swift_retain();
              swift_bridgeObjectRetain();
              os_log_type_t v31 = Logger.logObject.getter();
              os_log_type_t v32 = static os_log_type_t.default.getter();
              BOOL v33 = os_log_type_enabled(v31, v32);
              unint64_t v34 = *(void *)(v394 + 888);
              if (v33)
              {
                uint64_t v378 = *(void *)(v394 + 880);
                v396 = *(void (**)(NSObject *, uint64_t))(v394 + 864);
                uint64_t v399 = *(void *)(v394 + 872);
                uint64_t v364 = *(void *)(v394 + 856);
                *(void *)v371 = *(void *)(v394 + 848);
                uint64_t v356 = *(void *)(v394 + 776);
                uint64_t v385 = *(void *)(v394 + 640);
                v389 = *(NSObject **)(v394 + 688);
                uint64_t v359 = *(void *)(v394 + 576);
                uint64_t v35 = *(void **)(v394 + 488);
                uint64_t v36 = swift_slowAlloc();
                unint64_t v37 = (void *)swift_slowAlloc();
                v403[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v36 = 138412802;
                *(void *)(v394 + 432) = v35;
                id v38 = v35;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v37 = v356;

                *(_WORD *)(v36 + 12) = 2112;
                int64_t v39 = *(void **)(v364 + *(int *)(v359 + 20));
                *(void *)(v394 + 440) = v39;
                id v40 = v39;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v37[1] = v39;
                unint64_t v41 = *(void *)v371;
                swift_release();
                *(_WORD *)(v36 + 22) = 2080;
                swift_bridgeObjectRetain();
                *(void *)(v394 + 448) = sub_1000143F4(v378, v34, v403);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@][%@] Added candidate with distributorDomain: %s", (uint8_t *)v36, 0x20u);
                sub_1000172F8(&qword_10065DB10);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                v396(v389, v385);
              }
              else
              {
                uint64_t v56 = *(void (**)(unint64_t, uint64_t))(v394 + 864);
                unint64_t v41 = *(void *)(v394 + 688);
                uint64_t v57 = *(void *)(v394 + 640);
                uint64_t v58 = *(void **)(v394 + 488);

                swift_release();
                swift_bridgeObjectRelease_n();
                v56(v41, v57);
              }
              swift_release();
              uint64_t v59 = *(void *)(v394 + 960);
              int64_t v13 = *(void *)(v394 + 832);
              uint64_t v60 = *(void *)(v394 + 824);
              unint64_t v12 = v394;
              uint64_t v61 = v353;
              goto LABEL_23;
            }
            int64_t v13 = v88;
          }
        }
      }
    }
LABEL_45:
    uint64_t v60 = (v87 - 1) & v87;
    unint64_t v82 = __clz(__rbit64(v87)) + (v13 << 6);
LABEL_46:
    *(void *)(v12 + 832) = v13;
    *(void *)(v12 + 824) = v60;
    uint64_t v89 = *(void *)(v12 + 632);
    uint64_t v90 = *(void *)(v12 + 576);
    uint64_t v91 = *(void *)(v83 + 56);
    uint64_t v92 = *(void *)(*(void *)(v12 + 584) + 72);
    *(void *)(v12 + 840) = v92;
    sub_1003AEFD4(v91 + v92 * v82, v89, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v93 = swift_allocBox();
    uint64_t v95 = v94;
    *(void *)(v12 + 848) = v93;
    *(void *)(v12 + 856) = v94;
    sub_1003A4FE4(v89, v94);
    swift_beginAccess();
    uint64_t v399 = v95;
    if ((*(unsigned __int8 *)(v95 + *(int *)(v90 + 44)) | 2) == 2)
    {
      Swift::String v96 = *(void **)(v12 + 488);
      static Logger.restore.getter();
      swift_retain_n();
      id v97 = v96;
      id v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.default.getter();
      v389 = v13;
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = *(void *)(v12 + 776);
        uint64_t v101 = *(void *)(v12 + 576);
        uint64_t v102 = *(void *)(v394 + 488);
        uint64_t v103 = swift_slowAlloc();
        uint64_t v104 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 138412546;
        *(void *)(v103 + 4) = v102;
        unint64_t v12 = v394;
        *uint64_t v104 = v100;
        *(_WORD *)(v103 + 12) = 2112;
        unint64_t v105 = *(void **)(v399 + *(int *)(v101 + 20));
        *(void *)(v103 + 14) = v105;
        v104[1] = v105;
        id v106 = v105;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "[%@][%@] Moved to bootstrapping", (uint8_t *)v103, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        id v98 = *(NSObject **)(v12 + 488);
      }
      uint64_t v121 = *(void *)(v12 + 768);
      uint64_t v122 = *(void *)(v12 + 736);
      uint64_t v123 = *(void *)(v12 + 648);
      uint64_t v124 = *(void *)(v12 + 640);
      uint64_t v125 = *(void *)(v394 + 576);

      uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
      *(void *)(v394 + 864) = v126;
      *(void *)(v394 + 872) = v121 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v126(v122, v124);
      uint64_t v127 = *(int *)(v125 + 48);
      unint64_t v12 = v394;
      uint64_t v128 = (void *)(v399 + v127);
      *(void *)(v394 + 880) = *v128;
      uint64_t v129 = v128[1];
      *(void *)(v394 + 888) = v129;
      v396 = (void (*)(NSObject *, uint64_t))v126;
      if (!v129)
      {
        unint64_t v146 = *(void **)(v394 + 488);
        static Logger.restore.getter();
        id v147 = v146;
        swift_retain();
        os_log_type_t v79 = Logger.logObject.getter();
        os_log_type_t v148 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v148))
        {
          uint64_t v11 = v121;
          uint64_t v149 = *(void *)(v394 + 776);
          uint64_t v150 = *(void *)(v394 + 576);
          uint64_t v151 = *(void *)(v394 + 488);
          uint64_t v152 = swift_slowAlloc();
          unint64_t v153 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v152 = 138412546;
          *(void *)(v152 + 4) = v151;
          *unint64_t v153 = v149;
          *(_WORD *)(v152 + 12) = 2112;
          uint64_t v154 = *(int *)(v150 + 20);
          unint64_t v12 = v394;
          unint64_t v155 = *(void **)(v399 + v154);
          *(void *)(v152 + 14) = v155;
          v153[1] = v155;
          id v156 = v155;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v79, v148, "[%@][%@] Could not find distributorDomain for app", (uint8_t *)v152, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          os_log_type_t v79 = *(NSObject **)(v394 + 488);
        }
        uint64_t v61 = v354;
        int64_t v13 = (int64_t)v389;
        unint64_t v80 = *(NSObject **)(v12 + 728);
        goto LABEL_26;
      }
      unint64_t v130 = *(int **)(v394 + 576);
      char v131 = (void *)(v399 + v130[14]);
      uint64_t v132 = v131[1];
      *(void *)(v394 + 896) = v132;
      if (!v132)
      {
        uint64_t v160 = *(void **)(v394 + 488);
        static Logger.restore.getter();
        id v161 = v160;
        swift_retain();
        os_log_type_t v79 = Logger.logObject.getter();
        os_log_type_t v162 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v162))
        {
          uint64_t v163 = *(void *)(v394 + 776);
          uint64_t v164 = *(void *)(v394 + 576);
          uint64_t v165 = *(void *)(v394 + 488);
          uint64_t v166 = swift_slowAlloc();
          uint64_t v167 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v166 = 138412546;
          *(void *)(v166 + 4) = v165;
          *uint64_t v167 = v163;
          *(_WORD *)(v166 + 12) = 2112;
          uint64_t v168 = *(int *)(v164 + 20);
          unint64_t v12 = v394;
          uint64_t v169 = *(void **)(v399 + v168);
          *(void *)(v166 + 14) = v169;
          v167[1] = v169;
          id v170 = v169;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v79, v162, "[%@][%@] Could not find accountID for app", (uint8_t *)v166, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          os_log_type_t v79 = *(NSObject **)(v394 + 488);
        }
        uint64_t v61 = v354;
        int64_t v13 = (int64_t)v389;
        unint64_t v80 = *(NSObject **)(v12 + 720);
        goto LABEL_26;
      }
      *(void *)(v394 + 904) = *v131;
      uint64_t v133 = (uint64_t *)(v399 + v130[13]);
      uint64_t v134 = *v133;
      *(void *)(v394 + 912) = *v133;
      uint64_t v135 = v133[1];
      *(void *)(v394 + 920) = v135;
      if (!v135)
      {
        uint64_t v136 = *(void **)(v394 + 488);
        static Logger.restore.getter();
        id v137 = v136;
        swift_retain();
        os_log_type_t v79 = Logger.logObject.getter();
        os_log_type_t v138 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v138))
        {
          uint64_t v139 = *(void *)(v394 + 776);
          uint64_t v140 = *(void *)(v394 + 576);
          uint64_t v141 = *(void *)(v394 + 488);
          uint64_t v142 = swift_slowAlloc();
          uint64_t v143 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v142 = 138412546;
          *(void *)(v142 + 4) = v141;
          void *v143 = v139;
          unint64_t v12 = v394;
          *(_WORD *)(v142 + 12) = 2112;
          unint64_t v144 = *(void **)(v399 + *(int *)(v140 + 20));
          uint64_t v11 = v142 + 22;
          *(void *)(v394 + 288) = v144;
          id v145 = v144;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v143[1] = v144;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v79, v138, "[%@][%@] Could not find distributorID for app", (uint8_t *)v142, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release();
          os_log_type_t v79 = *(NSObject **)(v394 + 488);
        }
        uint64_t v61 = v354;
        int64_t v13 = (int64_t)v389;
        unint64_t v80 = *(NSObject **)(v12 + 712);
LABEL_26:
        unint64_t v41 = *(void *)(v12 + 640);

        v396(v80, v41);
        goto LABEL_27;
      }
      swift_beginAccess();
      uint64_t v221 = (void *)(v399 + v130[9]);
      if (v134 == *v221 && v135 == v221[1])
      {
        swift_endAccess();
LABEL_144:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v223 = 1;
        unint64_t v224 = v345;
LABEL_145:
        *(unsigned char *)(v224 + 4) = v223;
        uint64_t v225 = *(void *)(v12 + 616);
        *(unsigned char *)(v399 + *(int *)(*(void *)(v12 + 576) + 44)) = 1;
        sub_1003AEFD4(v399, v225, (uint64_t (*)(void))type metadata accessor for Restore);
        char v226 = (void *)swift_task_alloc();
        *(void *)(v12 + 952) = v226;
        *char v226 = v12;
        v226[1] = sub_100385D64;
        uint64_t v227 = *(void *)(v12 + 616);
        goto LABEL_146;
      }
      char v222 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_endAccess();
      if (v222) {
        goto LABEL_144;
      }
      id v236 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NSString v237 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *char type = 0;
      id v238 = [v236 initWithBundleIdentifier:v237 allowPlaceholder:0 error:type];

      uint64_t v182 = *type;
      if (v238)
      {
        id v239 = v182;
        if ([v238 isPlaceholder])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          goto LABEL_193;
        }
        uint64_t v265 = *(void **)(v394 + 488);
        static Logger.restore.getter();
        swift_retain_n();
        id v266 = v265;
        unint64_t v267 = Logger.logObject.getter();
        os_log_type_t v268 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v267, v268))
        {
          v391 = v267;
          uint64_t v269 = *(void *)(v394 + 776);
          uint64_t v270 = *(void *)(v394 + 576);
          id v271 = *(void **)(v394 + 488);
          uint64_t v272 = swift_slowAlloc();
          uint64_t v273 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v272 = 138412546;
          *(void *)(v394 + 456) = v271;
          id v274 = v271;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v273 = v269;

          *(_WORD *)(v272 + 12) = 2112;
          uint64_t v275 = *(int *)(v270 + 20);
          unint64_t v12 = v394;
          uint64_t v276 = *(void **)(v399 + v275);
          *(void *)(v394 + 464) = v276;
          id v277 = v276;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v273[1] = v276;
          unint64_t v267 = v391;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v391, v268, "[%@][%@] Found marketplace app", (uint8_t *)v272, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v310 = *(void **)(v394 + 488);
          swift_release_n();
        }
        unint64_t v224 = v345;

        v396(*(NSObject **)(v12 + 696), *(void *)(v12 + 640));
        char v223 = 0;
        goto LABEL_145;
      }
LABEL_162:
      uint64_t v254 = *(void **)(v12 + 488);
      id v255 = v182;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      static Logger.restore.getter();
      swift_retain_n();
      id v256 = v254;
      uint64_t v186 = (void *)Logger.logObject.getter();
      os_log_type_t v257 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled((os_log_t)v186, v257)) {
        goto LABEL_167;
      }
      uint64_t v258 = *(void *)(v12 + 776);
      uint64_t v390 = *(void *)(v12 + 576);
      uint64_t v259 = *(void **)(v12 + 488);
      uint64_t v260 = swift_slowAlloc();
      uint64_t v261 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v260 = v382;
      *(void *)(v12 + 360) = v259;
      id v262 = v259;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v261 = v258;

      *(_WORD *)(v260 + 12) = 2112;
      uint64_t v263 = *(void **)(v399 + *(int *)(v390 + 20));
      *(void *)(v12 + 368) = v263;
      id v264 = v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v261[1] = v263;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v186, v257, "[%@][%@] Could not find marketplace app", (uint8_t *)v260, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_168;
    }
    unint64_t v107 = *(void **)(v12 + 488);
    static Logger.restore.getter();
    id v108 = v107;
    swift_retain_n();
    id v109 = v108;
    int64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = *(void *)(v12 + 776);
      uint64_t v113 = *(void *)(v394 + 576);
      uint64_t v114 = *(void **)(v394 + 488);
      uint64_t v115 = swift_slowAlloc();
      int64_t v116 = v13;
      uint64_t v117 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v115 = 138412546;
      *(void *)(v115 + 4) = v114;
      *uint64_t v117 = v112;

      uint64_t v61 = v354;
      *(_WORD *)(v115 + 12) = 2112;
      uint64_t v118 = *(int *)(v113 + 20);
      unint64_t v12 = v394;
      uint64_t v119 = *(void **)(v399 + v118);
      *(void *)(v115 + 14) = v119;
      v117[1] = v119;
      id v120 = v119;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "[%@][%@] Already bootstrapping", (uint8_t *)v115, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      int64_t v13 = v116;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      char v157 = *(void **)(v12 + 488);

      swift_release_n();
      int64_t v110 = *(NSObject **)(v12 + 488);
    }
    uint64_t v11 = *(void *)(v12 + 768);
    uint64_t v158 = *(void *)(v12 + 672);
    uint64_t v159 = *(void *)(v12 + 648);
    unint64_t v41 = *(void *)(v12 + 640);

    (*(void (**)(uint64_t, unint64_t))(v159 + 8))(v158, v41);
LABEL_27:
    swift_release();
  }
LABEL_67:
  uint64_t v171 = *(void *)(v12 + 784);
  swift_release();
  uint64_t v346 = v171 + 64;
  uint64_t v172 = -1 << *(unsigned char *)(v171 + 32);
  if (-v172 < 64) {
    uint64_t v173 = ~(-1 << -(char)v172);
  }
  else {
    uint64_t v173 = -1;
  }
  unint64_t v174 = v173 & *(void *)(v171 + 64);
  int64_t v347 = (unint64_t)(63 - v172) >> 6;
  uint64_t v348 = v171;
  swift_bridgeObjectRetain();
  uint64_t v358 = 0;
  int64_t v175 = 0;
LABEL_72:
  *(void *)(v12 + 976) = v61;
  *(void *)(v12 + 968) = v358;
  if (v174)
  {
    uint64_t v349 = (v174 - 1) & v174;
    int64_t v350 = v175;
    unint64_t v176 = __clz(__rbit64(v174)) | (v175 << 6);
    goto LABEL_88;
  }
  int64_t v177 = v175 + 1;
  if (__OFADD__(v175, 1))
  {
    __break(1u);
    goto LABEL_199;
  }
  if (v177 >= v347) {
    goto LABEL_149;
  }
  unint64_t v178 = *(void *)(v346 + 8 * v177);
  int64_t v179 = v175 + 1;
  if (!v178)
  {
    int64_t v179 = v175 + 2;
    if (v175 + 2 >= v347) {
      goto LABEL_149;
    }
    unint64_t v178 = *(void *)(v346 + 8 * v179);
    if (!v178)
    {
      int64_t v179 = v175 + 3;
      if (v175 + 3 >= v347) {
        goto LABEL_149;
      }
      unint64_t v178 = *(void *)(v346 + 8 * v179);
      if (!v178)
      {
        uint64_t v180 = v175 + 4;
        if (v175 + 4 < v347)
        {
          unint64_t v178 = *(void *)(v346 + 8 * v180);
          if (v178)
          {
            int64_t v179 = v175 + 4;
            goto LABEL_87;
          }
          while (1)
          {
            int64_t v179 = v180 + 1;
            if (__OFADD__(v180, 1)) {
              break;
            }
            if (v179 >= v347) {
              goto LABEL_149;
            }
            unint64_t v178 = *(void *)(v346 + 8 * v179);
            ++v180;
            if (v178) {
              goto LABEL_87;
            }
          }
LABEL_202:
          __break(1u);
        }
LABEL_149:
        swift_release();
        if (v61[2])
        {
          swift_bridgeObjectRetain();
          id v228 = (void *)swift_task_alloc();
          *(void *)(v12 + 984) = v228;
          *id v228 = v12;
          v228[1] = sub_100388A98;
          uint64_t v229 = *(void *)(v12 + 528);
          uint64_t v230 = *(void *)(v12 + 520);
          uint64_t v231 = *(void *)(v12 + 504);
          uint64_t v232 = *(void *)(v12 + 512);
          uint64_t v234 = *(void *)(v12 + 488);
          uint64_t v233 = *(void *)(v12 + 496);
          char v235 = *(unsigned char *)(v12 + 281);
          uint64_t v406 = *(void *)(v12 + 536);
          return sub_100389420((uint64_t)v61, v233, v231, v232, v235, v230, v229, v234);
        }
        uint64_t v240 = *(void *)(v12 + 800);
        if (*(void *)(v240 + 16) && ((uint64_t v241 = *(void *)(v12 + 528)) != 0 || (*(unsigned char *)(v12 + 282) & 1) != 0))
        {
          uint64_t v311 = *(void *)(v12 + 968);
          uint64_t v243 = *(void *)(v12 + 792);
          uint64_t v312 = *(void *)(v12 + 544);
          uint64_t v397 = *(void *)(v12 + 536);
          uint64_t v313 = *(void *)(v12 + 496);
          uint64_t v387 = *(void *)(v12 + 520);
          v393 = *(void **)(v12 + 488);
          uint64_t v314 = *(void *)(v12 + 480);
          uint64_t v315 = swift_bridgeObjectRetain();
          long long v401 = *(_OWORD *)(v345 + 224);
          unint64_t v316 = sub_100376BF8(v315);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v317 = type metadata accessor for TaskPriority();
          uint64_t v318 = v312;
          uint64_t v242 = v311;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v317 - 8) + 56))(v318, 1, 1, v317);
          uint64_t v319 = swift_allocObject();
          *(void *)(v319 + 16) = 0;
          *(void *)(v319 + 24) = 0;
          *(void *)(v319 + 32) = v316;
          *(void *)(v319 + 40) = v387;
          *(void *)(v319 + 48) = v241;
          *(void *)(v319 + 56) = v314;
          *(void *)(v319 + 64) = v393;
          *(void *)(v319 + 72) = v313;
          *(_OWORD *)(v319 + 80) = v401;
          sub_10001733C(v397, v319 + 96, &qword_10065C310);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          id v320 = v393;
          swift_bridgeObjectRetain();
          sub_100017544(v318, (uint64_t)&unk_1006618D0, v319);
          swift_bridgeObjectRelease();
LABEL_181:
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v242 = *(void *)(v12 + 968);
          uint64_t v243 = *(void *)(v12 + 792);
          if (*(void *)(v240 + 16))
          {
            uint64_t v244 = *(void *)(v12 + 544);
            uint64_t v245 = *(void *)(v12 + 536);
            unint64_t v246 = v12;
            unint64_t v249 = v12 + 488;
            uint64_t v248 = *(void **)(v12 + 488);
            uint64_t v247 = *(void *)(v249 + 8);
            uint64_t v250 = *(void *)(v246 + 480);
            uint64_t v251 = type metadata accessor for TaskPriority();
            long long v400 = *(_OWORD *)(v345 + 224);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v251 - 8) + 56))(v244, 1, 1, v251);
            uint64_t v252 = swift_allocObject();
            *(void *)(v252 + 16) = 0;
            *(void *)(v252 + 24) = 0;
            *(void *)(v252 + 32) = v250;
            *(void *)(v252 + 40) = v248;
            *(void *)(v252 + 48) = v247;
            *(_OWORD *)(v252 + 56) = v400;
            sub_10001733C(v245, v252 + 72, &qword_10065C310);
            id v253 = v248;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            sub_100017544(v244, (uint64_t)&unk_1006618C0, v252);
            goto LABEL_181;
          }
        }
        swift_bridgeObjectRelease();
        sub_10023C7B4(v243);
        sub_10023C7B4(v242);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v321 = *(uint64_t (**)(void))(v394 + 8);
        return v321();
      }
    }
  }
LABEL_87:
  uint64_t v349 = (v178 - 1) & v178;
  int64_t v350 = v179;
  unint64_t v176 = __clz(__rbit64(v178)) + (v179 << 6);
LABEL_88:
  uint64_t v181 = *(void *)(v348 + 48) + 104 * v176;
  uint64_t v182 = *(void **)(v181 + 8);
  uint64_t v379 = *(void *)v181;
  int64_t v13 = *(void *)(v181 + 24);
  *(void *)os_log_type_t typea = *(void *)(v181 + 16);
  *(void *)v373 = *(void *)(v181 + 32);
  uint64_t v370 = *(void *)(v181 + 48);
  char v368 = *(unsigned char *)(v181 + 56);
  uint64_t v367 = *(void *)(v181 + 64);
  LODWORD(v363) = *(unsigned __int8 *)(v181 + 96);
  uint64_t v11 = *(void *)(*(void *)(v348 + 56) + 8 * v176);
  uint64_t v183 = *(void *)(v11 + 16);
  long long v365 = *(_OWORD *)(v181 + 72);
  unint64_t v41 = *(void *)(v181 + 72);
  v382 = v182;
  uint64_t v384 = v41;
  v389 = v13;
  v396 = *(void (**)(NSObject *, uint64_t))(v181 + 88);
  uint64_t v399 = *(void *)(v181 + 40);
  if (!v183)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v186 = &_swiftEmptyDictionarySingleton;
LABEL_112:
    int64_t v206 = 0;
    uint64_t v60 = (uint64_t)v186 + 64;
    uint64_t v207 = -1 << *((unsigned char *)v186 + 32);
    if (-v207 < 64) {
      uint64_t v208 = ~(-1 << -(char)v207);
    }
    else {
      uint64_t v208 = -1;
    }
    unint64_t v12 = v208 & *((void *)v186 + 8);
    int64_t v361 = (unint64_t)(63 - v207) >> 6;
    if (v12)
    {
LABEL_116:
      unint64_t v209 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v210 = v209 | (v206 << 6);
      goto LABEL_131;
    }
    while (1)
    {
      int64_t v211 = v206 + 1;
      if (__OFADD__(v206, 1)) {
        break;
      }
      unint64_t v12 = v394;
      if (v211 >= v361) {
        goto LABEL_71;
      }
      unint64_t v212 = *(void *)(v60 + 8 * v211);
      ++v206;
      if (!v212)
      {
        int64_t v206 = v211 + 1;
        if (v211 + 1 >= v361) {
          goto LABEL_71;
        }
        unint64_t v212 = *(void *)(v60 + 8 * v206);
        if (!v212)
        {
          int64_t v206 = v211 + 2;
          if (v211 + 2 >= v361) {
            goto LABEL_71;
          }
          unint64_t v212 = *(void *)(v60 + 8 * v206);
          if (!v212)
          {
            int64_t v213 = v211 + 3;
            if (v213 >= v361)
            {
LABEL_71:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              unint64_t v174 = v349;
              int64_t v175 = v350;
              goto LABEL_72;
            }
            unint64_t v212 = *(void *)(v60 + 8 * v213);
            if (!v212)
            {
              while (1)
              {
                int64_t v206 = v213 + 1;
                if (__OFADD__(v213, 1)) {
                  break;
                }
                if (v206 >= v361) {
                  goto LABEL_71;
                }
                unint64_t v212 = *(void *)(v60 + 8 * v206);
                ++v213;
                if (v212) {
                  goto LABEL_130;
                }
              }
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              unint64_t v307 = 0xE200000000000000;
              uint64_t v306 = 16718;
LABEL_189:
              uint64_t v322 = *(void *)(v12 + 576);
              swift_bridgeObjectRetain();
              *(void *)(v12 + 328) = sub_1000143F4(v306, v307, v363);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              *(_WORD *)(v41 + 32) = v60;
              uint64_t v323 = (uint64_t *)(v399 + *(int *)(v322 + 80));
              if (v323[1])
              {
                uint64_t v324 = *v323;
                unint64_t v325 = v323[1];
              }
              else
              {
                unint64_t v325 = 0xE200000000000000;
                uint64_t v324 = 16718;
              }
              uint64_t v326 = *(NSObject **)(v12 + 656);
              *(void *)v374 = *(void *)(v12 + 640);
              uint64_t v327 = *(void *)(v12 + 576);
              swift_bridgeObjectRetain();
              *(void *)(v12 + 336) = sub_1000143F4(v324, v325, v363);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              *(_WORD *)(v41 + 42) = 2080;
              uint64_t v328 = v399 + *(int *)(v327 + 84);
              uint64_t v329 = *(void *)v328;
              LOBYTE(v328) = *(unsigned char *)(v328 + 8);
              *(void *)(v12 + 272) = v329;
              *(unsigned char *)unint64_t v345 = v328;
              sub_1000172F8(&qword_1006618A8);
              uint64_t v330 = String.init<A>(describing:)();
              *(void *)(v12 + 352) = sub_1000143F4(v330, v331, v363);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v389, (os_log_type_t)v382, "[%@][%@] Unable to find distributor details distributorDomain: %s marketplaceDomain: %s marketplaceItemID: %s", (uint8_t *)v41, 0x34u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              v396(v326, *(void *)v374);
              goto LABEL_193;
            }
            int64_t v206 = v213;
          }
        }
      }
LABEL_130:
      unint64_t v12 = (v212 - 1) & v212;
      unint64_t v210 = __clz(__rbit64(v212)) + (v206 << 6);
LABEL_131:
      uint64_t v214 = (uint64_t *)(*((void *)v186 + 6) + 16 * v210);
      uint64_t v11 = *v214;
      uint64_t v215 = v214[1];
      unint64_t v41 = *(void *)(*((void *)v186 + 7) + 8 * v210);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v61 = sub_100290AC8(0, v61[2] + 1, 1, v61);
      }
      unint64_t v217 = v61[2];
      unint64_t v216 = v61[3];
      if (v217 >= v216 >> 1) {
        uint64_t v61 = sub_100290AC8((void *)(v216 > 1), v217 + 1, 1, v61);
      }
      v61[2] = v217 + 1;
      uint64_t v218 = &v61[16 * v217];
      v218[4] = v11;
      v218[5] = v215;
      uint64_t v182 = v382;
      v218[6] = v379;
      v218[7] = v382;
      int64_t v13 = (int64_t)v389;
      v218[8] = *(void *)typea;
      v218[9] = v389;
      v218[10] = *(void *)v373;
      v218[11] = v399;
      v218[12] = v370;
      *((unsigned char *)v218 + 104) = v368;
      *((_DWORD *)v218 + 27) = *(_DWORD *)&v402[3];
      *(_DWORD *)((char *)v218 + 105) = *(_DWORD *)v402;
      v218[14] = v367;
      *(_OWORD *)(v218 + 15) = v365;
      v218[17] = v396;
      *((unsigned char *)v218 + 144) = (_BYTE)v363;
      int v219 = v403[0];
      *((_DWORD *)v218 + 37) = *(_DWORD *)((char *)v403 + 3);
      *(_DWORD *)((char *)v218 + 145) = v219;
      v218[19] = v41;
      if (v12) {
        goto LABEL_116;
      }
    }
    __break(1u);
    goto LABEL_162;
  }
  uint64_t v184 = *(void *)(v12 + 584);
  unint64_t v352 = (*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
  uint64_t v185 = v11 + v352;
  uint64_t v360 = *(void *)(v184 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v186 = &_swiftEmptyDictionarySingleton;
  v355 = v61;
  while (2)
  {
    uint64_t v188 = *(void *)(v12 + 600);
    unint64_t v41 = *(void *)(v12 + 576);
    sub_1003AEFD4(v185, v188, (uint64_t (*)(void))type metadata accessor for Restore);
    char v189 = (uint64_t *)(v188 + *(int *)(v41 + 56));
    uint64_t v60 = v189[1];
    if (!v60)
    {
      uint64_t v187 = v360;
      goto LABEL_91;
    }
    uint64_t v190 = *v189;
    sub_1003AEFD4(*(void *)(v12 + 600), *(void *)(v12 + 592), (uint64_t (*)(void))type metadata accessor for Restore);
    swift_bridgeObjectRetain();
    sub_10023C7B4((uint64_t)v358);
    int v191 = swift_isUniquelyReferenced_nonNull_native();
    v403[0] = (uint64_t)v186;
    unint64_t v193 = sub_100016D20(v190, v60);
    uint64_t v194 = *((void *)v186 + 2);
    BOOL v195 = (v192 & 1) == 0;
    uint64_t v196 = v194 + v195;
    if (!__OFADD__(v194, v195))
    {
      char v197 = v192;
      if (*((void *)v186 + 3) >= v196)
      {
        if (!v191)
        {
          sub_10052DDF0();
          uint64_t v186 = (void *)v403[0];
        }
      }
      else
      {
        sub_100527700(v196, v191);
        uint64_t v186 = (void *)v403[0];
        unint64_t v198 = sub_100016D20(v190, v60);
        if ((v197 & 1) != (v199 & 1)) {
          goto LABEL_137;
        }
        unint64_t v193 = v198;
      }
      swift_bridgeObjectRelease();
      if ((v197 & 1) == 0)
      {
        *((void *)v186 + (v193 >> 6) + 8) |= 1 << v193;
        uint64_t v200 = (uint64_t *)(*((void *)v186 + 6) + 16 * v193);
        *uint64_t v200 = v190;
        v200[1] = v60;
        *(void *)(*((void *)v186 + 7) + 8 * v193) = _swiftEmptyArrayStorage;
        uint64_t v201 = *((void *)v186 + 2);
        uint64_t v202 = v201 + 1;
        unint64_t v41 = __OFADD__(v201, 1);
        swift_bridgeObjectRetain();
        if (v41)
        {
          __break(1u);
          goto LABEL_186;
        }
        *((void *)v186 + 2) = v202;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = *((void *)v186 + 7);
      swift_bridgeObjectRelease();
      unint64_t v41 = *(void *)(v11 + 8 * v193);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = sub_100290934(0, *(void *)(v41 + 16) + 1, 1, v41);
      }
      unint64_t v204 = *(void *)(v41 + 16);
      unint64_t v203 = *(void *)(v41 + 24);
      if (v204 >= v203 >> 1) {
        unint64_t v41 = sub_100290934(v203 > 1, v204 + 1, 1, v41);
      }
      unint64_t v12 = v394;
      uint64_t v205 = *(void *)(v394 + 592);
      *(void *)(v41 + 16) = v204 + 1;
      uint64_t v187 = v360;
      sub_1003A4FE4(v205, v41 + v352 + v204 * v360);
      *(void *)(v11 + 8 * v193) = v41;
      swift_bridgeObjectRelease();
      uint64_t v358 = sub_1002E1CB8;
      uint64_t v61 = v355;
      int64_t v13 = (int64_t)v389;
LABEL_91:
      sub_1003AF03C(*(void *)(v12 + 600), (uint64_t (*)(void))type metadata accessor for Restore);
      v185 += v187;
      if (!--v183)
      {
        swift_bridgeObjectRelease();
        uint64_t v182 = v382;
        goto LABEL_112;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_167:

  swift_release_n();
  uint64_t v186 = *(void **)(v12 + 488);
LABEL_168:
  uint64_t v278 = *(NSObject **)(v12 + 704);
  uint64_t v279 = *(void *)(v12 + 640);
  uint64_t v280 = *(void *)(v12 + 576);

  v396(v278, v279);
  uint64_t v281 = (uint64_t *)(v399 + *(int *)(v280 + 52));
  uint64_t v282 = v281[1];
  if (v282
    && (int64_t v283 = *(int **)(v12 + 576), v284 = (uint64_t *)(v399 + v283[20]), (v285 = v284[1]) != 0)
    && (uint64_t v286 = v399 + v283[21], (*(unsigned char *)(v286 + 8) & 1) == 0))
  {
    uint64_t v287 = *v281;
    uint64_t v392 = *v284;
    uint64_t v288 = *(void *)v286;
    uint64_t v289 = *(void *)(v12 + 800);
    uint64_t v290 = *(void *)(v289 + 16);
    swift_bridgeObjectRetain();
    if (v290)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100016D20(v287, v282);
      char v292 = v291;
      swift_bridgeObjectRelease();
      if (v292)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_174;
      }
      uint64_t v380 = v288;
      uint64_t v289 = *(void *)(v12 + 800);
      int64_t v283 = *(int **)(v12 + 576);
    }
    else
    {
      uint64_t v380 = v288;
      swift_bridgeObjectRetain();
    }
    uint64_t v335 = *(void *)(v12 + 568);
    uint64_t v336 = *(void *)(v12 + 560);
    uint64_t v383 = *(void *)(v12 + 552);
    v337 = (uint64_t *)(v399 + v283[19]);
    uint64_t v338 = v337[1];
    uint64_t v398 = *v337;
    v339 = (uint64_t *)(v399 + v283[14]);
    uint64_t v340 = v339[1];
    uint64_t v388 = *v339;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UUID.init()();
    uint64_t v341 = UUID.uuidString.getter();
    uint64_t v343 = v342;
    (*(void (**)(uint64_t, uint64_t))(v336 + 8))(v335, v383);
    *(void *)(v394 + 16) = v341;
    *(void *)(v394 + 24) = v343;
    *(void *)(v394 + 32) = v392;
    *(void *)(v394 + 40) = v285;
    *(void *)(v394 + 48) = v287;
    *(void *)(v394 + 56) = v282;
    *(void *)(v394 + 64) = v380;
    *(unsigned char *)(v394 + 72) = 0;
    *(void *)(v394 + 80) = v398;
    *(void *)(v394 + 88) = v338;
    *(void *)(v394 + 96) = v388;
    *(void *)(v394 + 104) = v340;
    unint64_t v12 = v394;
    *(unsigned char *)(v394 + 112) = 1;
    char v344 = swift_isUniquelyReferenced_nonNull_native();
    v403[0] = v289;
    sub_10052A5BC(v346, v287, v282, v344);
    uint64_t v332 = v403[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_174:
    char v293 = *(void **)(v12 + 488);
    static Logger.restore.getter();
    swift_retain_n();
    id v294 = v293;
    uint64_t v295 = Logger.logObject.getter();
    os_log_type_t v296 = static os_log_type_t.error.getter();
    BOOL v297 = os_log_type_enabled(v295, v296);
    uint64_t v298 = *(void **)(v12 + 488);
    if (v297)
    {
      LOBYTE(v382) = v296;
      v389 = v295;
      uint64_t v299 = *(void *)(v12 + 776);
      uint64_t v300 = *(void *)(v12 + 576);
      unint64_t v41 = swift_slowAlloc();
      uint64_t v301 = (void *)swift_slowAlloc();
      uint64_t v302 = swift_slowAlloc();
      *(_DWORD *)unint64_t v41 = 138413314;
      *(void *)(v12 + 304) = v302;
      *(void *)(v12 + 312) = v298;
      id v303 = v298;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v301 = v299;

      *(_WORD *)(v41 + 12) = 2112;
      uint64_t v60 = *(void *)(v399 + *(int *)(v300 + 20));
      *(void *)(v12 + 320) = v60;
      id v304 = (id)v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v301[1] = v60;
      swift_release();
      LOWORD(v60) = 2080;
      *(_WORD *)(v41 + 22) = 2080;
      uint64_t v305 = (uint64_t *)(v399 + *(int *)(v300 + 52));
      if (!v305[1]) {
        goto LABEL_188;
      }
      uint64_t v306 = *v305;
      unint64_t v307 = v305[1];
      goto LABEL_189;
    }
    uint64_t v308 = *(NSObject **)(v12 + 656);
    uint64_t v309 = *(void *)(v12 + 640);

    swift_release_n();
    v396(v308, v309);
LABEL_193:
    uint64_t v332 = *(void *)(v12 + 800);
  }
  *(void *)(v12 + 928) = v332;
  uint64_t v333 = *(void *)(v12 + 624);
  *(unsigned char *)(v399 + *(int *)(*(void *)(v12 + 576) + 44)) = 2;
  sub_1003AEFD4(v399, v333, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v334 = (void *)swift_task_alloc();
  *(void *)(v12 + 936) = v334;
  *uint64_t v334 = v12;
  v334[1] = sub_1003839E8;
  uint64_t v227 = *(void *)(v12 + 624);
LABEL_146:
  return sub_10037BDC4(v227);
}

uint64_t sub_100388A98()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100388BDC, 0, 0);
}

uint64_t sub_100388BDC()
{
  uint64_t v1 = *(void *)(v0 + 800);
  if (!*(void *)(v1 + 16)
    || ((uint64_t v2 = *(void *)(v0 + 528)) == 0 ? (v3 = (*(unsigned char *)(v0 + 282) & 1) == 0) : (v3 = 0), v3))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 968);
    uint64_t v11 = *(void *)(v0 + 792);
    if (!*(void *)(v1 + 16)) {
      goto LABEL_10;
    }
    uint64_t v29 = *(void *)(v0 + 792);
    uint64_t v12 = *(void *)(v0 + 544);
    uint64_t v13 = *(void *)(v0 + 536);
    uint64_t v15 = *(void **)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v16 = *(void *)(v0 + 480);
    uint64_t v17 = type metadata accessor for TaskPriority();
    long long v28 = *(_OWORD *)(v0 + 504);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v12, 1, 1, v17);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = v16;
    *(void *)(v18 + 40) = v15;
    *(void *)(v18 + 48) = v14;
    *(_OWORD *)(v18 + 56) = v28;
    sub_10001733C(v13, v18 + 72, &qword_10065C310);
    id v19 = v15;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_100017544(v12, (uint64_t)&unk_1006618C0, v18);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 968);
    uint64_t v29 = *(void *)(v0 + 792);
    uint64_t v24 = *(void *)(v0 + 520);
    uint64_t v25 = *(void *)(v0 + 496);
    uint64_t v26 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 480);
    uint64_t v22 = *(void *)(v0 + 544);
    uint64_t v23 = *(void **)(v0 + 488);
    uint64_t v6 = swift_bridgeObjectRetain();
    long long v27 = *(_OWORD *)(v0 + 504);
    uint64_t v7 = sub_100376BF8(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v22, 1, 1, v8);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = v7;
    *(void *)(v9 + 40) = v24;
    *(void *)(v9 + 48) = v2;
    *(void *)(v9 + 56) = v5;
    *(void *)(v9 + 64) = v23;
    *(void *)(v9 + 72) = v25;
    *(_OWORD *)(v9 + 80) = v27;
    sub_10001733C(v26, v9 + 96, &qword_10065C310);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    id v10 = v23;
    swift_bridgeObjectRetain();
    sub_100017544(v22, (uint64_t)&unk_1006618D0, v9);
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v11 = v29;
LABEL_10:
  swift_bridgeObjectRelease();
  sub_10023C7B4(v11);
  sub_10023C7B4(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100389048()
{
  uint64_t v1 = *(void *)(v0 + 792);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10023C7B4(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100389234()
{
  uint64_t v1 = *(void *)(v0 + 792);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10023C7B4(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100389420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 448) = v17;
  *(void *)(v9 + 456) = v8;
  *(void *)(v9 + 432) = a7;
  *(void *)(v9 + 440) = a8;
  *(void *)(v9 + 416) = a4;
  *(void *)(v9 + 424) = a6;
  *(unsigned char *)(v9 + 127) = a5;
  *(void *)(v9 + 400) = a2;
  *(void *)(v9 + 408) = a3;
  *(void *)(v9 + 392) = a1;
  sub_1000172F8(&qword_10065BE00);
  *(void *)(v9 + 464) = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  *(void *)(v9 + 472) = swift_task_alloc();
  *(void *)(v9 + 480) = swift_task_alloc();
  sub_1000172F8(&qword_10065B628);
  *(void *)(v9 + 488) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AppInstallRequestType();
  *(void *)(v9 + 496) = v10;
  *(void *)(v9 + 504) = *(void *)(v10 - 8);
  *(void *)(v9 + 512) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v9 + 520) = v11;
  *(void *)(v9 + 528) = *(void *)(v11 - 8);
  *(void *)(v9 + 536) = swift_task_alloc();
  *(void *)(v9 + 544) = swift_task_alloc();
  *(void *)(v9 + 552) = swift_task_alloc();
  *(void *)(v9 + 560) = swift_task_alloc();
  *(void *)(v9 + 568) = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  *(void *)(v9 + 576) = swift_task_alloc();
  *(void *)(v9 + 584) = swift_task_alloc();
  *(void *)(v9 + 592) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URL();
  *(void *)(v9 + 600) = v12;
  *(void *)(v9 + 608) = *(void *)(v12 - 8);
  *(void *)(v9 + 616) = swift_task_alloc();
  *(void *)(v9 + 624) = swift_task_alloc();
  *(void *)(v9 + 632) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Restore();
  *(void *)(v9 + 640) = v13;
  *(void *)(v9 + 648) = *(void *)(v13 - 8);
  *(void *)(v9 + 656) = swift_task_alloc();
  *(void *)(v9 + 664) = swift_task_alloc();
  *(void *)(v9 + 672) = swift_task_alloc();
  *(void *)(v9 + 680) = swift_task_alloc();
  *(void *)(v9 + 688) = swift_task_alloc();
  *(void *)(v9 + 696) = swift_task_alloc();
  *(void *)(v9 + 704) = swift_task_alloc();
  *(void *)(v9 + 712) = swift_task_alloc();
  *(void *)(v9 + 720) = swift_task_alloc();
  *(void *)(v9 + 728) = swift_task_alloc();
  *(void *)(v9 + 736) = swift_task_alloc();
  *(void *)(v9 + 744) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v9 + 752) = v14;
  *(void *)(v9 + 760) = *(void *)(v14 - 8);
  *(void *)(v9 + 768) = swift_task_alloc();
  *(void *)(v9 + 776) = swift_task_alloc();
  *(void *)(v9 + 784) = swift_task_alloc();
  *(void *)(v9 + 792) = swift_task_alloc();
  *(void *)(v9 + 800) = swift_task_alloc();
  *(void *)(v9 + 808) = swift_task_alloc();
  *(void *)(v9 + 816) = swift_task_alloc();
  *(void *)(v9 + 824) = swift_task_alloc();
  *(void *)(v9 + 832) = swift_task_alloc();
  *(void *)(v9 + 840) = swift_task_alloc();
  *(void *)(v9 + 848) = swift_task_alloc();
  *(void *)(v9 + 856) = swift_task_alloc();
  return _swift_task_switch(sub_1003898E4, 0, 0);
}

uint64_t sub_1003898E4()
{
  if (*(void *)(*(void *)(v0 + 392) + 16))
  {
    uint64_t v1 = *(_OWORD **)(v0 + 456);
    char v2 = *(unsigned char *)(v0 + 127);
    long long v4 = v1[2];
    long long v3 = v1[3];
    *(_OWORD *)(v0 + 16) = v1[1];
    *(_OWORD *)(v0 + 32) = v4;
    *(_OWORD *)(v0 + 48) = v3;
    long long v6 = v1[5];
    long long v5 = v1[6];
    long long v7 = v1[4];
    *(_OWORD *)(v0 + 111) = *(_OWORD *)((char *)v1 + 111);
    *(_OWORD *)(v0 + 80) = v6;
    *(_OWORD *)(v0 + 96) = v5;
    *(_OWORD *)(v0 + 64) = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 864) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100389C8C;
    uint64_t v9 = *(void *)(v0 + 432);
    uint64_t v10 = *(void *)(v0 + 440);
    uint64_t v11 = *(void *)(v0 + 424);
    uint64_t v12 = *(void *)(v0 + 392);
    return sub_100391F98(v12, v0 + 16, v2 & 1, v11, v9, v10);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100389C8C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 872) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100389DB8, 0, 0);
}

uint64_t sub_100389DB8()
{
  uint64_t v200 = v0;
  uint64_t v1 = *(void **)(v0 + 440);
  static Logger.restore.getter();
  id v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v196 = *(void *)(v0 + 872);
    long long v5 = *(void **)(v0 + 440);
    uint64_t v6 = swift_slowAlloc();
    long long v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    *(void *)(v0 + 376) = v5;
    id v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v7 = v5;

    *(_WORD *)(v6 + 12) = 2050;
    *(void *)(v0 + 384) = *(void *)(v196 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Ready to install ADP(s) for %{public}ld", (uint8_t *)v6, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v3 = *(NSObject **)(v0 + 440);
  }
  uint64_t v9 = *(void *)(v0 + 872);
  uint64_t v10 = *(void *)(v0 + 856);
  uint64_t v11 = *(void *)(v0 + 760);
  uint64_t v12 = *(void *)(v0 + 752);

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(void *)(v0 + 880) = v13;
  *(void *)(v0 + 888) = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v10, v12);
  uint64_t v14 = *(void *)(v9 + 16);
  *(void *)(v0 + 896) = v14;
  if (!v14)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v105 = *(uint64_t (**)(void))(v0 + 8);
    return v105();
  }
  uint64_t v15 = 0;
  BOOL v195 = (_OWORD *)(v0 + 16);
  uint64_t v16 = *(void *)(v0 + 648);
  *(_DWORD *)(v0 + 1016) = *(_DWORD *)(v16 + 80);
  *(void *)(v0 + 904) = *(void *)(v16 + 72);
  *(_DWORD *)(v0 + 1020) = enum case for MarketplaceKitError.noSupportedVariant(_:);
  *(_DWORD *)(v0 + 1024) = enum case for MarketplaceKitError.featureUnavailable(_:);
  while (1)
  {
    *(void *)(v0 + 912) = v15;
    uint64_t v23 = *(void *)(v0 + 744);
    uint64_t v24 = *(void *)(v0 + 640);
    uint64_t v25 = *(void *)(v0 + 608);
    uint64_t v26 = *(void *)(v0 + 600);
    uint64_t v27 = *(void *)(v0 + 592);
    sub_1003AEFD4(*(void *)(v0 + 872)+ ((*(unsigned __int8 *)(v0 + 1016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1016))+ *(void *)(v0 + 904) * v15, v23, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_100017238(v23 + *(int *)(v24 + 68), v27, &qword_10065C3C0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
    {
      uint64_t v28 = *(void *)(v0 + 744);
      uint64_t v29 = *(void *)(v0 + 696);
      uint64_t v30 = *(void **)(v0 + 440);
      sub_10001729C(*(void *)(v0 + 592), &qword_10065C3C0);
      static Logger.restore.getter();
      sub_1003AEFD4(v28, v29, (uint64_t (*)(void))type metadata accessor for Restore);
      id v31 = v30;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      BOOL v33 = os_log_type_enabled(v18, v32);
      uint64_t v34 = *(void *)(v0 + 696);
      if (v33)
      {
        uint64_t v35 = *(void *)(v0 + 640);
        uint64_t v36 = *(void **)(v0 + 440);
        uint64_t v37 = swift_slowAlloc();
        id v38 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 138412546;
        *(void *)(v37 + 4) = v36;
        *id v38 = v36;

        *(_WORD *)(v37 + 12) = 2112;
        int64_t v39 = *(void **)(v34 + *(int *)(v35 + 20));
        *(void *)(v37 + 14) = v39;
        v38[1] = v39;
        id v40 = v39;
        sub_1003AF03C(v34, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v18, v32, "[%@][%@] Did not get an adp URL app", (uint8_t *)v37, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v17 = *(void **)(v0 + 440);

        sub_1003AF03C(v34, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v18 = *(NSObject **)(v0 + 440);
      }
      id v19 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v20 = *(void *)(v0 + 808);
      uint64_t v21 = *(void *)(v0 + 752);
      uint64_t v22 = *(void *)(v0 + 744);

      v19(v20, v21);
      goto LABEL_8;
    }
    uint64_t v41 = *(void *)(v0 + 744);
    uint64_t v42 = *(void *)(v0 + 640);
    (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 592), *(void *)(v0 + 600));
    uint64_t v43 = (uint64_t *)(v41 + *(int *)(v42 + 48));
    uint64_t v44 = v43[1];
    if (!v44)
    {
      uint64_t v64 = *(void *)(v0 + 744);
      uint64_t v65 = *(void *)(v0 + 704);
      os_log_type_t v66 = *(void **)(v0 + 440);
      static Logger.restore.getter();
      sub_1003AEFD4(v64, v65, (uint64_t (*)(void))type metadata accessor for Restore);
      id v67 = v66;
      unint64_t v68 = Logger.logObject.getter();
      uint64_t v69 = static os_log_type_t.default.getter();
      BOOL v70 = os_log_type_enabled(v68, (os_log_type_t)v69);
      uint64_t v71 = *(void *)(v0 + 704);
      if (v70)
      {
        uint64_t v72 = *(void *)(v0 + 640);
        id v73 = *(void **)(v0 + 440);
        uint64_t v74 = swift_slowAlloc();
        id v75 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 138412546;
        *(void *)(v74 + 4) = v73;
        *id v75 = v73;

        *(_WORD *)(v74 + 12) = 2112;
        uint64_t v76 = *(void **)(v71 + *(int *)(v72 + 20));
        *(void *)(v74 + 14) = v76;
        v75[1] = v76;
        id v77 = v76;
        sub_1003AF03C(v71, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v74, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v97 = *(void **)(v0 + 440);

        sub_1003AF03C(v71, (uint64_t (*)(void))type metadata accessor for Restore);
        unint64_t v68 = *(NSObject **)(v0 + 440);
      }
      id v98 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v99 = *(void *)(v0 + 816);
      goto LABEL_27;
    }
    uint64_t v45 = *(void *)(v0 + 744);
    uint64_t v46 = *(void *)(v0 + 640);
    char v47 = (uint64_t *)(v45 + *(int *)(v46 + 52));
    uint64_t v48 = v47[1];
    if (v48) {
      break;
    }
    uint64_t v78 = *(void *)(v0 + 712);
    os_log_type_t v79 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v45, v78, (uint64_t (*)(void))type metadata accessor for Restore);
    id v80 = v79;
    unint64_t v68 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    BOOL v82 = os_log_type_enabled(v68, v81);
    uint64_t v83 = *(void *)(v0 + 712);
    if (v82)
    {
      uint64_t v84 = *(void *)(v0 + 640);
      int64_t v85 = *(void **)(v0 + 440);
      uint64_t v86 = swift_slowAlloc();
      unint64_t v87 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 138412546;
      *(void *)(v86 + 4) = v85;
      *unint64_t v87 = v85;

      *(_WORD *)(v86 + 12) = 2112;
      int64_t v88 = *(void **)(v83 + *(int *)(v84 + 20));
      *(void *)(v86 + 14) = v88;
      v87[1] = v88;
      id v89 = v88;
      sub_1003AF03C(v83, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v68, v81, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v86, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v100 = *(void **)(v0 + 440);

      sub_1003AF03C(v83, (uint64_t (*)(void))type metadata accessor for Restore);
      unint64_t v68 = *(NSObject **)(v0 + 440);
    }
    id v98 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v99 = *(void *)(v0 + 824);
LABEL_27:
    uint64_t v101 = *(void *)(v0 + 752);
    uint64_t v22 = *(void *)(v0 + 744);
    uint64_t v102 = *(void *)(v0 + 632);
    uint64_t v103 = *(void *)(v0 + 608);
    uint64_t v104 = *(void *)(v0 + 600);

    v98(v99, v101);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
LABEL_8:
    sub_1003AF03C(v22, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v15 = *(void *)(v0 + 912) + 1;
    if (v15 == *(void *)(v0 + 896)) {
      goto LABEL_29;
    }
  }
  uint64_t v49 = (uint64_t *)(v45 + *(int *)(v46 + 56));
  uint64_t v50 = v49[1];
  if (!v50)
  {
    uint64_t v51 = *(void *)(v0 + 720);
    char v52 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v45, v51, (uint64_t (*)(void))type metadata accessor for Restore);
    id v53 = v52;
    unint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = *(void *)(v0 + 720);
    if (v56)
    {
      uint64_t v58 = *(void *)(v0 + 640);
      uint64_t v59 = *(void **)(v0 + 440);
      uint64_t v60 = swift_slowAlloc();
      uint64_t v61 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 138412546;
      *(void *)(v60 + 4) = v59;
      *uint64_t v61 = v59;

      *(_WORD *)(v60 + 12) = 2112;
      uint64_t v62 = *(void **)(v57 + *(int *)(v58 + 20));
      *(void *)(v60 + 14) = v62;
      v61[1] = v62;
      id v63 = v62;
      sub_1003AF03C(v57, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%@][%@] Failed to find an accountID", (uint8_t *)v60, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v90 = *(void **)(v0 + 440);

      sub_1003AF03C(v57, (uint64_t (*)(void))type metadata accessor for Restore);
      unint64_t v54 = *(NSObject **)(v0 + 440);
    }
    uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v92 = *(void *)(v0 + 832);
    uint64_t v93 = *(void *)(v0 + 752);
    uint64_t v22 = *(void *)(v0 + 744);
    uint64_t v94 = *(void *)(v0 + 632);
    uint64_t v95 = *(void *)(v0 + 608);
    uint64_t v96 = *(void *)(v0 + 600);

    v91(v92, v93);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    goto LABEL_8;
  }
  uint64_t v173 = *v43;
  uint64_t v174 = *v47;
  uint64_t v184 = *v49;
  uint64_t v107 = *(void *)(v0 + 736);
  uint64_t v188 = *(void *)(v0 + 624);
  uint64_t v190 = *(void *)(v0 + 632);
  uint64_t v108 = *(void *)(v0 + 608);
  uint64_t v109 = *(void *)(v0 + 600);
  char v197 = *(void **)(v0 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Logger.restore.getter();
  sub_1003AEFD4(v45, v107, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v110 = v188;
  char v189 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16);
  v189(v110, v190, v109);
  id v111 = v197;
  uint64_t v112 = Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.default.getter();
  BOOL v114 = os_log_type_enabled(v112, v113);
  uint64_t v185 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
  uint64_t v180 = *(void *)(v0 + 752);
  uint64_t v182 = *(void *)(v0 + 848);
  uint64_t v179 = *(void *)(v0 + 736);
  if (v114)
  {
    uint64_t v165 = *(void *)(v0 + 624);
    uint64_t v167 = *(void *)(v0 + 608);
    uint64_t v158 = *(void *)(v0 + 640);
    uint64_t v160 = *(void *)(v0 + 600);
    os_log_type_t v170 = v113;
    uint64_t v115 = *(void **)(v0 + 440);
    uint64_t v116 = swift_slowAlloc();
    unint64_t v176 = (void *)swift_slowAlloc();
    v199[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v116 = 138412803;
    *(void *)(v0 + 352) = v115;
    os_log_t log = v112;
    id v117 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v176 = v115;

    *(_WORD *)(v116 + 12) = 2112;
    uint64_t v118 = *(void **)(v179 + *(int *)(v158 + 20));
    *(void *)(v0 + 360) = v118;
    id v119 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v176[1] = v118;
    sub_1003AF03C(v179, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v116 + 22) = 2081;
    sub_1003ADD04(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 368) = sub_1000143F4(v120, v121, v199);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v165, v160);
    _os_log_impl((void *)&_mh_execute_header, log, v170, "[%@][%@] Ready to install adp %{private}s", (uint8_t *)v116, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v122 = *(void *)(v0 + 624);
    uint64_t v123 = *(void *)(v0 + 608);
    uint64_t v124 = *(void *)(v0 + 600);
    uint64_t v125 = *(void **)(v0 + 440);

    sub_1003AF03C(v179, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v122, v124);
  }
  v185(v182, v180);
  uint64_t v126 = v47[1];
  if (v126
    && ((uint64_t v127 = (void *)(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 36)), *v47 == *v127)
     && v126 == v127[1]
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for WebDistributor;
    unint64_t v128 = sub_1002BEA38();
    uint64_t v129 = v173;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for NativeDistributor;
    unint64_t v128 = sub_1002F9EF8();
    uint64_t v129 = v174;
    uint64_t v44 = v48;
  }
  uint64_t v130 = *(void *)(v0 + 744);
  char v131 = *(int **)(v0 + 640);
  uint64_t v186 = *(void *)(v0 + 632);
  uint64_t v132 = *(void *)(v0 + 616);
  uint64_t v172 = v132;
  uint64_t v133 = *(void *)(v0 + 608);
  uint64_t v168 = *(void *)(v0 + 600);
  uint64_t v198 = *(void *)(v0 + 584);
  uint64_t v193 = *(void *)(v0 + 576);
  uint64_t v135 = *(void *)(v0 + 504);
  uint64_t v134 = *(void *)(v0 + 512);
  uint64_t v177 = *(void *)(v0 + 496);
  uint64_t v136 = *(void **)(v0 + 456);
  unsigned __int8 v175 = *(unsigned char *)(v0 + 127);
  uint64_t v181 = *(void *)(v0 + 416);
  uint64_t v183 = *(void *)(v0 + 568);
  uint64_t v171 = *(void *)(v0 + 400);
  *(void *)(v0 + 160) = v128;
  *(void *)(v0 + 128) = v129;
  *(void *)(v0 + 136) = v44;
  UUID.init()();
  os_log_t loga = *(os_log_t *)(v130 + v131[6]);
  uint64_t v192 = v136[16];
  sub_10019B17C(v0 + 128, v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v134, v130 + v131[7], v177);
  id v137 = (uint64_t *)(v130 + v131[18]);
  uint64_t v178 = *v137;
  uint64_t v156 = v137[1];
  v189(v132, v186, v168);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v198, 1, 1, v168);
  uint64_t v191 = v136[22];
  uint64_t v155 = v136[24];
  uint64_t v157 = v136[25];
  uint64_t v187 = v136[27];
  uint64_t v194 = v136[26];
  uint64_t v138 = v136[18];
  uint64_t v159 = v136[17];
  uint64_t v139 = v130 + v131[16];
  uint64_t v169 = *(void *)v139;
  unsigned __int8 v166 = *(unsigned char *)(v139 + 8);
  uint64_t v140 = v130 + v131[23];
  uint64_t v141 = v136[20];
  uint64_t v152 = v136[21];
  sub_100017238(v140, v193, &qword_10065C3C0);
  type metadata accessor for ADPInstallConfiguration(0);
  uint64_t v142 = swift_allocObject();
  uint64_t v143 = *(void *)(v0 + 192);
  uint64_t v153 = *(void *)(v0 + 200);
  uint64_t v154 = v142;
  uint64_t v144 = sub_100239C90(v0 + 168, v143);
  uint64_t v145 = v143;
  uint64_t v151 = v143;
  uint64_t v146 = *(void *)(v143 - 8);
  uint64_t v161 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 16))(v161, v144, v145);
  swift_bridgeObjectRetain();
  swift_retain();
  os_log_t logb = loga;
  swift_retain();
  sub_10018AB28((uint64_t)v195);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v147 = swift_unknownObjectRetain();
  *(void *)(v0 + 920) = sub_1002BEB78(v183, logb, v192, v161, v134, 0, 0, v178, v156, v184, v50, 0, 0, v172, v198, v138, v195, v187, v152,
                            v191,
                            v155,
                            v157,
                            v194,
                            v171,
                            v147,
                            v181,
                            0,
                            0xF000000000000000,
                            v175,
                            v175 & 1,
                            v159,
                            v169,
                            v166,
                            0,
                            1u,
                            v141,
                            v193,
                            v154,
                            v151,
                            v153);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_100014524(v0 + 168);
  swift_task_dealloc();
  os_log_type_t v148 = (void *)swift_task_alloc();
  *(void *)(v0 + 928) = v148;
  *os_log_type_t v148 = v0;
  v148[1] = sub_10038B2FC;
  uint64_t v149 = *(void *)(v0 + 744);
  uint64_t v150 = *(void *)(v0 + 440);
  return sub_10037D240(v149, v150);
}

uint64_t sub_10038B2FC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10038B424, 0, 0);
}

uint64_t sub_10038B424()
{
  uint64_t v1 = *(void *)(v0 + 448);
  type metadata accessor for ADPInstallTask();
  swift_allocObject();
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_100346FA4(v2, v1);
  *(void *)(v0 + 936) = v3;
  return _swift_task_switch(sub_10038B4F0, v3, 0);
}

uint64_t sub_10038B4F0()
{
  *(unsigned char *)(*(void *)(v0 + 936)
           + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14ADPInstallTask_shouldCacheInstallAsPending) = 0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 944) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10038B5BC;
  return sub_10034213C();
}

uint64_t sub_10038B5BC()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[121] = v0;
    os_log_type_t v4 = (void *)swift_task_alloc();
    v2[122] = v4;
    *os_log_type_t v4 = v3;
    v4[1] = sub_10038D210;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[119] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10038B7B0;
    return sub_1003580F4();
  }
}

uint64_t sub_10038B7B0()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[121] = v0;
    os_log_type_t v4 = (void *)swift_task_alloc();
    v2[122] = v4;
    *os_log_type_t v4 = v3;
    v4[1] = sub_10038D210;
    return sub_10034A584(v0);
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v2[120] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10038B9A4;
    return sub_100348D6C();
  }
}

uint64_t sub_10038B9A4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(void *)(v2 + 968) = v0;
    os_log_type_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 976) = v4;
    *os_log_type_t v4 = v3;
    v4[1] = sub_10038D210;
    return sub_10034A584(v0);
  }
  else
  {
    return _swift_task_switch(sub_10038BB6C, 0, 0);
  }
}

uint64_t sub_10038BB6C()
{
  uint64_t v214 = v0;
  uint64_t v208 = v0 + 128;
  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void **)(v0 + 440);
  static Logger.restore.getter();
  sub_1003AEFD4(v1, v2, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v203 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v194 = *(void *)(v0 + 752);
    uint64_t v210 = *(void *)(v0 + 744);
    uint64_t v183 = *(void *)(v0 + 728);
    uint64_t v179 = *(void *)(v0 + 640);
    uint64_t v202 = *(void *)(v0 + 632);
    uint64_t v189 = *(void *)(v0 + 608);
    uint64_t v196 = *(void *)(v0 + 840);
    uint64_t v199 = *(void *)(v0 + 600);
    uint64_t v7 = *(void **)(v0 + 440);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    v213[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    *(void *)(v0 + 336) = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = (uint64_t *)(v183 + *(int *)(v179 + 36));
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 344) = sub_1000143F4(v12, v13, v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003AF03C(v183, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@][%{public}s] Bootstrap complete", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_release();
    v203(v196, v194);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v202, v199);
  }
  else
  {
    unint64_t v204 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v14 = *(void *)(v0 + 840);
    uint64_t v15 = *(void *)(v0 + 752);
    uint64_t v210 = *(void *)(v0 + 744);
    uint64_t v16 = *(void *)(v0 + 728);
    uint64_t v17 = *(void *)(v0 + 632);
    uint64_t v18 = *(void *)(v0 + 608);
    uint64_t v19 = *(void *)(v0 + 600);
    uint64_t v20 = *(void **)(v0 + 440);
    swift_release();

    sub_1003AF03C(v16, (uint64_t (*)(void))type metadata accessor for Restore);
    swift_release();
    v204(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  sub_1003AF03C(v210, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_100014524(v208);
  uint64_t v21 = *(void *)(v0 + 912) + 1;
  if (v21 == *(void *)(v0 + 896))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  int64_t v206 = (_OWORD *)(v0 + 16);
  while (1)
  {
    *(void *)(v0 + 912) = v21;
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 640);
    uint64_t v32 = *(void *)(v0 + 608);
    uint64_t v33 = *(void *)(v0 + 600);
    uint64_t v34 = *(void *)(v0 + 592);
    sub_1003AEFD4(*(void *)(v0 + 872)+ ((*(unsigned __int8 *)(v0 + 1016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1016))+ *(void *)(v0 + 904) * v21, v30, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_100017238(v30 + *(int *)(v31 + 68), v34, &qword_10065C3C0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
    {
      uint64_t v35 = *(void *)(v0 + 744);
      uint64_t v36 = *(void *)(v0 + 696);
      uint64_t v37 = *(void **)(v0 + 440);
      sub_10001729C(*(void *)(v0 + 592), &qword_10065C3C0);
      static Logger.restore.getter();
      sub_1003AEFD4(v35, v36, (uint64_t (*)(void))type metadata accessor for Restore);
      id v38 = v37;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      BOOL v40 = os_log_type_enabled(v25, v39);
      uint64_t v41 = *(void *)(v0 + 696);
      if (v40)
      {
        uint64_t v42 = *(void *)(v0 + 640);
        uint64_t v43 = *(void **)(v0 + 440);
        uint64_t v44 = swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 138412546;
        *(void *)(v44 + 4) = v43;
        *uint64_t v45 = v43;

        *(_WORD *)(v44 + 12) = 2112;
        uint64_t v46 = *(void **)(v41 + *(int *)(v42 + 20));
        *(void *)(v44 + 14) = v46;
        v45[1] = v46;
        id v47 = v46;
        sub_1003AF03C(v41, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v25, v39, "[%@][%@] Did not get an adp URL app", (uint8_t *)v44, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v24 = *(void **)(v0 + 440);

        sub_1003AF03C(v41, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v25 = *(NSObject **)(v0 + 440);
      }
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v27 = *(void *)(v0 + 808);
      uint64_t v28 = *(void *)(v0 + 752);
      uint64_t v29 = *(void *)(v0 + 744);

      v26(v27, v28);
      goto LABEL_11;
    }
    uint64_t v48 = *(void *)(v0 + 744);
    uint64_t v49 = *(void *)(v0 + 640);
    (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 592), *(void *)(v0 + 600));
    uint64_t v50 = (uint64_t *)(v48 + *(int *)(v49 + 48));
    uint64_t v51 = v50[1];
    if (!v51)
    {
      uint64_t v71 = *(void *)(v0 + 744);
      uint64_t v72 = *(void *)(v0 + 704);
      id v73 = *(void **)(v0 + 440);
      static Logger.restore.getter();
      sub_1003AEFD4(v71, v72, (uint64_t (*)(void))type metadata accessor for Restore);
      id v74 = v73;
      id v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      BOOL v77 = os_log_type_enabled(v75, v76);
      uint64_t v78 = *(void *)(v0 + 704);
      if (v77)
      {
        uint64_t v79 = *(void *)(v0 + 640);
        id v80 = *(void **)(v0 + 440);
        uint64_t v81 = swift_slowAlloc();
        BOOL v82 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 138412546;
        *(void *)(v81 + 4) = v80;
        *BOOL v82 = v80;

        *(_WORD *)(v81 + 12) = 2112;
        uint64_t v83 = *(void **)(v78 + *(int *)(v79 + 20));
        *(void *)(v81 + 14) = v83;
        v82[1] = v83;
        id v84 = v83;
        sub_1003AF03C(v78, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v81, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v104 = *(void **)(v0 + 440);

        sub_1003AF03C(v78, (uint64_t (*)(void))type metadata accessor for Restore);
        id v75 = *(NSObject **)(v0 + 440);
      }
      unint64_t v105 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v106 = *(void *)(v0 + 816);
      goto LABEL_30;
    }
    uint64_t v52 = *(void *)(v0 + 744);
    uint64_t v53 = *(void *)(v0 + 640);
    unint64_t v54 = (uint64_t *)(v52 + *(int *)(v53 + 52));
    uint64_t v55 = v54[1];
    if (v55) {
      break;
    }
    uint64_t v85 = *(void *)(v0 + 712);
    uint64_t v86 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v52, v85, (uint64_t (*)(void))type metadata accessor for Restore);
    id v87 = v86;
    id v75 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.default.getter();
    BOOL v89 = os_log_type_enabled(v75, v88);
    uint64_t v90 = *(void *)(v0 + 712);
    if (v89)
    {
      uint64_t v91 = *(void *)(v0 + 640);
      uint64_t v92 = *(void **)(v0 + 440);
      uint64_t v93 = swift_slowAlloc();
      uint64_t v94 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v93 = 138412546;
      *(void *)(v93 + 4) = v92;
      void *v94 = v92;

      *(_WORD *)(v93 + 12) = 2112;
      uint64_t v95 = *(void **)(v90 + *(int *)(v91 + 20));
      *(void *)(v93 + 14) = v95;
      v94[1] = v95;
      id v96 = v95;
      sub_1003AF03C(v90, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v75, v88, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v93, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v107 = *(void **)(v0 + 440);

      sub_1003AF03C(v90, (uint64_t (*)(void))type metadata accessor for Restore);
      id v75 = *(NSObject **)(v0 + 440);
    }
    unint64_t v105 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v106 = *(void *)(v0 + 824);
LABEL_30:
    uint64_t v108 = *(void *)(v0 + 752);
    uint64_t v29 = *(void *)(v0 + 744);
    uint64_t v109 = *(void *)(v0 + 632);
    uint64_t v110 = *(void *)(v0 + 608);
    uint64_t v111 = *(void *)(v0 + 600);

    v105(v106, v108);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
LABEL_11:
    sub_1003AF03C(v29, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v21 = *(void *)(v0 + 912) + 1;
    if (v21 == *(void *)(v0 + 896)) {
      goto LABEL_5;
    }
  }
  BOOL v56 = (uint64_t *)(v52 + *(int *)(v53 + 56));
  uint64_t v57 = v56[1];
  if (!v57)
  {
    uint64_t v58 = *(void *)(v0 + 720);
    uint64_t v59 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v52, v58, (uint64_t (*)(void))type metadata accessor for Restore);
    id v60 = v59;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v64 = *(void *)(v0 + 720);
    if (v63)
    {
      uint64_t v65 = *(void *)(v0 + 640);
      os_log_type_t v66 = *(void **)(v0 + 440);
      uint64_t v67 = swift_slowAlloc();
      unint64_t v68 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 138412546;
      *(void *)(v67 + 4) = v66;
      *unint64_t v68 = v66;

      *(_WORD *)(v67 + 12) = 2112;
      uint64_t v69 = *(void **)(v64 + *(int *)(v65 + 20));
      *(void *)(v67 + 14) = v69;
      v68[1] = v69;
      id v70 = v69;
      sub_1003AF03C(v64, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "[%@][%@] Failed to find an accountID", (uint8_t *)v67, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v97 = *(void **)(v0 + 440);

      sub_1003AF03C(v64, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v61 = *(NSObject **)(v0 + 440);
    }
    id v98 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v99 = *(void *)(v0 + 832);
    uint64_t v100 = *(void *)(v0 + 752);
    uint64_t v29 = *(void *)(v0 + 744);
    uint64_t v101 = *(void *)(v0 + 632);
    uint64_t v102 = *(void *)(v0 + 608);
    uint64_t v103 = *(void *)(v0 + 600);

    v98(v99, v100);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
    goto LABEL_11;
  }
  uint64_t v177 = *v50;
  uint64_t v180 = *v54;
  uint64_t v190 = *v56;
  uint64_t v112 = *(void *)(v0 + 736);
  uint64_t v113 = *(void *)(v0 + 624);
  uint64_t v114 = *(void *)(v0 + 608);
  char v197 = *(NSObject **)(v0 + 600);
  uint64_t v200 = *(void *)(v0 + 632);
  int64_t v211 = *(void **)(v0 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Logger.restore.getter();
  sub_1003AEFD4(v52, v112, (uint64_t (*)(void))type metadata accessor for Restore);
  BOOL v195 = *(void (**)(uint64_t, uint64_t, os_log_t))(v114 + 16);
  v195(v113, v200, v197);
  id v115 = v211;
  uint64_t v116 = Logger.logObject.getter();
  os_log_type_t v117 = static os_log_type_t.default.getter();
  BOOL v118 = os_log_type_enabled(v116, v117);
  uint64_t v201 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
  uint64_t v191 = *(void *)(v0 + 848);
  uint64_t v185 = *(void *)(v0 + 736);
  uint64_t v187 = *(void *)(v0 + 752);
  if (v118)
  {
    uint64_t v162 = *(void *)(v0 + 640);
    uint64_t v166 = *(void *)(v0 + 624);
    uint64_t v173 = *(void *)(v0 + 608);
    uint64_t v164 = *(void *)(v0 + 600);
    os_log_type_t v175 = v117;
    id v119 = *(void **)(v0 + 440);
    os_log_t log = v116;
    uint64_t v120 = swift_slowAlloc();
    uint64_t v184 = (void *)swift_slowAlloc();
    v213[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v120 = 138412803;
    *(void *)(v0 + 352) = v119;
    id v121 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v184 = v119;

    *(_WORD *)(v120 + 12) = 2112;
    uint64_t v122 = *(void **)(v185 + *(int *)(v162 + 20));
    *(void *)(v0 + 360) = v122;
    id v123 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v184[1] = v122;
    sub_1003AF03C(v185, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v120 + 22) = 2081;
    sub_1003ADD04(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 368) = sub_1000143F4(v124, v125, v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v166, v164);
    _os_log_impl((void *)&_mh_execute_header, log, v175, "[%@][%@] Ready to install adp %{private}s", (uint8_t *)v120, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v126 = *(void *)(v0 + 624);
    uint64_t v127 = *(void *)(v0 + 608);
    uint64_t v128 = *(void *)(v0 + 600);
    uint64_t v129 = *(void **)(v0 + 440);

    sub_1003AF03C(v185, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v128);
  }
  v201(v191, v187);
  uint64_t v130 = v54[1];
  if (v130
    && ((char v131 = (void *)(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 36)), *v54 == *v131)
     && v130 == v131[1]
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for WebDistributor;
    unint64_t v132 = sub_1002BEA38();
    uint64_t v133 = v177;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for NativeDistributor;
    unint64_t v132 = sub_1002F9EF8();
    uint64_t v133 = v180;
    uint64_t v51 = v55;
  }
  uint64_t v134 = *(void *)(v0 + 744);
  uint64_t v135 = *(int **)(v0 + 640);
  uint64_t v192 = *(void *)(v0 + 632);
  uint64_t v136 = *(void *)(v0 + 616);
  uint64_t v176 = v136;
  uint64_t v137 = *(void *)(v0 + 608);
  os_log_t loga = *(os_log_t *)(v0 + 600);
  uint64_t v212 = *(void *)(v0 + 584);
  uint64_t v207 = *(void *)(v0 + 576);
  uint64_t v139 = *(void *)(v0 + 504);
  uint64_t v138 = *(void *)(v0 + 512);
  uint64_t v181 = *(void *)(v0 + 496);
  uint64_t v140 = *(void **)(v0 + 456);
  unsigned __int8 v178 = *(unsigned char *)(v0 + 127);
  uint64_t v186 = *(void *)(v0 + 416);
  uint64_t v188 = *(void *)(v0 + 568);
  uint64_t v174 = *(void *)(v0 + 400);
  *(void *)(v0 + 160) = v132;
  *(void *)(v0 + 128) = v133;
  *(void *)(v0 + 136) = v51;
  UUID.init()();
  uint64_t v167 = *(void **)(v134 + v135[6]);
  uint64_t v205 = v140[16];
  sub_10019B17C(v208, v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 16))(v138, v134 + v135[7], v181);
  uint64_t v141 = (uint64_t *)(v134 + v135[18]);
  uint64_t v182 = *v141;
  uint64_t v160 = v141[1];
  v195(v136, v192, loga);
  (*(void (**)(uint64_t, uint64_t, uint64_t, os_log_t))(v137 + 56))(v212, 1, 1, loga);
  uint64_t v198 = v140[22];
  uint64_t v159 = v140[24];
  uint64_t v161 = v140[25];
  uint64_t v193 = v140[27];
  uint64_t v209 = v140[26];
  uint64_t v142 = v140[18];
  uint64_t v163 = v140[17];
  uint64_t v143 = v134 + v135[16];
  os_log_t logb = *(os_log_t *)v143;
  unsigned __int8 v169 = *(unsigned char *)(v143 + 8);
  uint64_t v144 = v134 + v135[23];
  uint64_t v145 = v140[20];
  uint64_t v156 = v140[21];
  sub_100017238(v144, v207, &qword_10065C3C0);
  type metadata accessor for ADPInstallConfiguration(0);
  uint64_t v146 = swift_allocObject();
  uint64_t v147 = *(void *)(v0 + 192);
  uint64_t v157 = *(void *)(v0 + 200);
  uint64_t v158 = v146;
  uint64_t v148 = sub_100239C90(v0 + 168, v147);
  uint64_t v149 = v147;
  uint64_t v155 = v147;
  uint64_t v150 = *(void *)(v147 - 8);
  uint64_t v165 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v165, v148, v149);
  swift_bridgeObjectRetain();
  swift_retain();
  id v168 = v167;
  swift_retain();
  sub_10018AB28((uint64_t)v206);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v151 = swift_unknownObjectRetain();
  *(void *)(v0 + 920) = sub_1002BEB78(v188, v168, v205, v165, v138, 0, 0, v182, v160, v190, v57, 0, 0, v176, v212, v142, v206, v193, v156,
                            v198,
                            v159,
                            v161,
                            v209,
                            v174,
                            v151,
                            v186,
                            0,
                            0xF000000000000000,
                            v178,
                            v178 & 1,
                            v163,
                            (uint64_t)logb,
                            v169,
                            0,
                            1u,
                            v145,
                            v207,
                            v158,
                            v155,
                            v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_100014524(v0 + 168);
  swift_task_dealloc();
  uint64_t v152 = (void *)swift_task_alloc();
  *(void *)(v0 + 928) = v152;
  *uint64_t v152 = v0;
  v152[1] = sub_10038B2FC;
  uint64_t v153 = *(void *)(v0 + 744);
  uint64_t v154 = *(void *)(v0 + 440);
  return sub_10037D240(v153, v154);
}

uint64_t sub_10038D210()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 936);
  swift_task_dealloc();
  return _swift_task_switch(sub_10038D34C, v1, 0);
}

uint64_t sub_10038D34C()
{
  swift_willThrow();
  return _swift_task_switch(sub_10038D3E8, 0, 0);
}

uint64_t sub_10038D3E8()
{
  uint64_t v403 = v0;
  *(void *)(v0 + 208) = *(void *)(v0 + 968);
  uint64_t v1 = v0 + 208;
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  uint64_t v2 = type metadata accessor for MarketplaceKitError();
  char v3 = swift_dynamicCast();
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  if ((v3 & 1) == 0)
  {
    uint64_t v26 = *(void *)(v0 + 488);
    v5(v26, 1, 1, v2);
    sub_10001729C(v26, &qword_10065B628);
    goto LABEL_7;
  }
  int v6 = *(_DWORD *)(v0 + 1020);
  uint64_t v7 = *(void *)(v0 + 488);
  v5(v7, 0, 1, v2);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v7, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v2);
  if (v8 != v6)
  {
LABEL_7:
    *(void *)(v0 + 216) = *(void *)(v0 + 968);
    swift_errorRetain();
    uint64_t v27 = type metadata accessor for InternalError();
    int v28 = swift_dynamicCast();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    if (!v28)
    {
      uint64_t v397 = *(void *)(v0 + 744);
      uint64_t v49 = *(void *)(v0 + 632);
      uint64_t v50 = *(void *)(v0 + 608);
      uint64_t v51 = *(void *)(v0 + 600);
      uint64_t v52 = *(void *)(v0 + 464);
      v29(v52, 1, 1, v27);
      swift_release();
      swift_errorRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      uint64_t v1 = v0 + 208;
      sub_1003AF03C(v397, (uint64_t (*)(void))type metadata accessor for Restore);
      sub_10001729C(v52, &qword_10065BE00);
LABEL_40:
      uint64_t v395 = v1 - 80;
      sub_100014524(v1 - 80);
      uint64_t v184 = *(void *)(v0 + 912) + 1;
      if (v184 == *(void *)(v0 + 896))
      {
LABEL_41:
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v185 = *(uint64_t (**)(void))(v0 + 8);
        return v185();
      }
      uint64_t v392 = (_OWORD *)(v1 - 192);
      while (1)
      {
        *(void *)(v0 + 912) = v184;
        uint64_t v192 = *(void *)(v0 + 744);
        uint64_t v193 = *(void *)(v0 + 640);
        uint64_t v194 = *(void *)(v0 + 608);
        uint64_t v195 = *(void *)(v0 + 600);
        uint64_t v196 = *(void *)(v0 + 592);
        sub_1003AEFD4(*(void *)(v0 + 872)+ ((*(unsigned __int8 *)(v0 + 1016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1016))+ *(void *)(v0 + 904) * v184, v192, (uint64_t (*)(void))type metadata accessor for Restore);
        sub_100017238(v192 + *(int *)(v193 + 68), v196, &qword_10065C3C0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v196, 1, v195) == 1)
        {
          uint64_t v197 = *(void *)(v0 + 744);
          uint64_t v198 = *(void *)(v0 + 696);
          uint64_t v199 = *(void **)(v0 + 440);
          sub_10001729C(*(void *)(v0 + 592), &qword_10065C3C0);
          static Logger.restore.getter();
          sub_1003AEFD4(v197, v198, (uint64_t (*)(void))type metadata accessor for Restore);
          id v200 = v199;
          uint64_t v187 = Logger.logObject.getter();
          os_log_type_t v201 = static os_log_type_t.default.getter();
          BOOL v202 = os_log_type_enabled(v187, v201);
          uint64_t v203 = *(void *)(v0 + 696);
          if (v202)
          {
            uint64_t v204 = *(void *)(v0 + 640);
            uint64_t v205 = *(void **)(v0 + 440);
            uint64_t v206 = swift_slowAlloc();
            uint64_t v207 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v206 = 138412546;
            *(void *)(v206 + 4) = v205;
            void *v207 = v205;

            *(_WORD *)(v206 + 12) = 2112;
            uint64_t v208 = *(void **)(v203 + *(int *)(v204 + 20));
            *(void *)(v206 + 14) = v208;
            v207[1] = v208;
            id v209 = v208;
            sub_1003AF03C(v203, (uint64_t (*)(void))type metadata accessor for Restore);
            _os_log_impl((void *)&_mh_execute_header, v187, v201, "[%@][%@] Did not get an adp URL app", (uint8_t *)v206, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v186 = *(void **)(v0 + 440);

            sub_1003AF03C(v203, (uint64_t (*)(void))type metadata accessor for Restore);
            uint64_t v187 = *(NSObject **)(v0 + 440);
          }
          uint64_t v188 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
          uint64_t v189 = *(void *)(v0 + 808);
          uint64_t v190 = *(void *)(v0 + 752);
          uint64_t v191 = *(void *)(v0 + 744);

          v188(v189, v190);
          goto LABEL_47;
        }
        uint64_t v210 = *(void *)(v0 + 744);
        uint64_t v211 = *(void *)(v0 + 640);
        (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 592), *(void *)(v0 + 600));
        uint64_t v212 = (NSObject **)(v210 + *(int *)(v211 + 48));
        int64_t v213 = v212[1];
        if (!v213) {
          break;
        }
        uint64_t v214 = *(void *)(v0 + 744);
        uint64_t v215 = *(void *)(v0 + 640);
        unint64_t v216 = (NSObject **)(v214 + *(int *)(v215 + 52));
        unint64_t v217 = v216[1];
        if (!v217)
        {
          uint64_t v247 = *(void *)(v0 + 712);
          uint64_t v248 = *(void **)(v0 + 440);
          static Logger.restore.getter();
          sub_1003AEFD4(v214, v247, (uint64_t (*)(void))type metadata accessor for Restore);
          id v249 = v248;
          NSString v237 = Logger.logObject.getter();
          os_log_type_t v250 = static os_log_type_t.default.getter();
          BOOL v251 = os_log_type_enabled(v237, v250);
          uint64_t v252 = *(void *)(v0 + 712);
          if (v251)
          {
            uint64_t v253 = *(void *)(v0 + 640);
            uint64_t v254 = *(void **)(v0 + 440);
            uint64_t v255 = swift_slowAlloc();
            id v256 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v255 = 138412546;
            *(void *)(v255 + 4) = v254;
            *id v256 = v254;

            *(_WORD *)(v255 + 12) = 2112;
            os_log_type_t v257 = *(void **)(v252 + *(int *)(v253 + 20));
            *(void *)(v255 + 14) = v257;
            v256[1] = v257;
            id v258 = v257;
            sub_1003AF03C(v252, (uint64_t (*)(void))type metadata accessor for Restore);
            _os_log_impl((void *)&_mh_execute_header, v237, v250, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v255, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v269 = *(void **)(v0 + 440);

            sub_1003AF03C(v252, (uint64_t (*)(void))type metadata accessor for Restore);
            NSString v237 = *(NSObject **)(v0 + 440);
          }
          unint64_t v267 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
          uint64_t v268 = *(void *)(v0 + 824);
LABEL_66:
          uint64_t v270 = *(void *)(v0 + 752);
          uint64_t v191 = *(void *)(v0 + 744);
          uint64_t v271 = *(void *)(v0 + 632);
          uint64_t v272 = *(void *)(v0 + 608);
          uint64_t v273 = *(void *)(v0 + 600);

          v267(v268, v270);
          (*(void (**)(uint64_t, uint64_t))(v272 + 8))(v271, v273);
          goto LABEL_47;
        }
        uint64_t v218 = (uint64_t *)(v214 + *(int *)(v215 + 56));
        uint64_t v219 = v218[1];
        if (v219)
        {
          char v344 = *v212;
          uint64_t v346 = *v216;
          uint64_t v360 = *v218;
          uint64_t v274 = *(void *)(v0 + 736);
          uint64_t v275 = *(void *)(v0 + 624);
          uint64_t v276 = *(void *)(v0 + 608);
          uint64_t v370 = *(NSObject **)(v0 + 600);
          uint64_t v374 = *(void *)(v0 + 632);
          long long v400 = *(void **)(v0 + 440);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          static Logger.restore.getter();
          sub_1003AEFD4(v214, v274, (uint64_t (*)(void))type metadata accessor for Restore);
          uint64_t v367 = *(void (**)(uint64_t, uint64_t, os_log_t))(v276 + 16);
          v367(v275, v374, v370);
          id v277 = v400;
          uint64_t v278 = Logger.logObject.getter();
          os_log_type_t v279 = static os_log_type_t.default.getter();
          BOOL v280 = os_log_type_enabled(v278, v279);
          v375 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
          uint64_t v363 = *(void *)(v0 + 848);
          uint64_t v353 = *(void *)(v0 + 736);
          uint64_t v356 = *(void *)(v0 + 752);
          if (v280)
          {
            uint64_t v336 = *(void *)(v0 + 608);
            uint64_t v322 = *(void *)(v0 + 640);
            uint64_t v324 = *(void *)(v0 + 600);
            uint64_t v327 = *(void *)(v0 + 624);
            os_log_type_t typea = v279;
            uint64_t v281 = *(void **)(v0 + 440);
            os_log_t loga = v278;
            uint64_t v282 = swift_slowAlloc();
            int64_t v350 = (void *)swift_slowAlloc();
            v402[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v282 = 138412803;
            *(void *)(v0 + 352) = v281;
            id v283 = v281;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *int64_t v350 = v281;

            *(_WORD *)(v282 + 12) = 2112;
            uint64_t v284 = *(void **)(v353 + *(int *)(v322 + 20));
            *(void *)(v0 + 360) = v284;
            id v285 = v284;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v350[1] = v284;
            sub_1003AF03C(v353, (uint64_t (*)(void))type metadata accessor for Restore);
            *(_WORD *)(v282 + 22) = 2081;
            sub_1003ADD04(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v286 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 368) = sub_1000143F4(v286, v287, v402);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v336 + 8))(v327, v324);
            _os_log_impl((void *)&_mh_execute_header, loga, typea, "[%@][%@] Ready to install adp %{private}s", (uint8_t *)v282, 0x20u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v288 = *(void *)(v0 + 624);
            uint64_t v289 = *(void *)(v0 + 608);
            uint64_t v290 = *(void *)(v0 + 600);
            char v291 = *(void **)(v0 + 440);

            sub_1003AF03C(v353, (uint64_t (*)(void))type metadata accessor for Restore);
            (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v288, v290);
          }
          v375(v363, v356);
          char v292 = v216[1];
          if (v292
            && ((char v293 = (NSObject **)(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 36)), *v216 == *v293)
             && v292 == v293[1]
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            swift_bridgeObjectRelease();
            *(void *)(v0 + 152) = &type metadata for WebDistributor;
            unint64_t v294 = sub_1002BEA38();
            uint64_t v295 = v344;
          }
          else
          {
            swift_bridgeObjectRelease();
            *(void *)(v0 + 152) = &type metadata for NativeDistributor;
            unint64_t v294 = sub_1002F9EF8();
            uint64_t v295 = v346;
            int64_t v213 = v217;
          }
          uint64_t v296 = *(void *)(v0 + 744);
          BOOL v297 = *(int **)(v0 + 640);
          uint64_t v364 = *(void *)(v0 + 632);
          uint64_t v298 = *(void *)(v0 + 616);
          uint64_t typeb = v298;
          uint64_t v299 = *(void *)(v0 + 608);
          os_log_t logb = *(os_log_t *)(v0 + 600);
          uint64_t v401 = *(void *)(v0 + 584);
          uint64_t v385 = *(void *)(v0 + 576);
          uint64_t v300 = *(void *)(v0 + 504);
          uint64_t v301 = *(void *)(v0 + 512);
          uint64_t v347 = *(void *)(v0 + 496);
          uint64_t v302 = *(void **)(v0 + 456);
          unsigned __int8 v345 = *(unsigned char *)(v0 + 127);
          uint64_t v354 = *(void *)(v0 + 416);
          uint64_t v357 = *(void *)(v0 + 568);
          uint64_t v337 = *(void *)(v0 + 400);
          *(void *)(v0 + 160) = v294;
          *(void *)(v0 + 128) = v295;
          *(void *)(v0 + 136) = v213;
          UUID.init()();
          uint64_t v328 = *(void **)(v296 + v297[6]);
          uint64_t v380 = v302[16];
          sub_10019B17C(v395, v0 + 168);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 16))(v301, v296 + v297[7], v347);
          id v303 = (uint64_t *)(v296 + v297[18]);
          uint64_t v348 = *v303;
          uint64_t v321 = v303[1];
          v367(v298, v364, logb);
          (*(void (**)(uint64_t, uint64_t, uint64_t, os_log_t))(v299 + 56))(v401, 1, 1, logb);
          uint64_t v368 = v302[22];
          uint64_t v320 = v302[24];
          uint64_t v323 = v302[25];
          uint64_t v365 = v302[27];
          uint64_t v371 = v302[26];
          uint64_t v318 = v302[18];
          uint64_t v396 = v302[17];
          uint64_t v304 = v296 + v297[16];
          os_log_t logc = *(os_log_t *)v304;
          unsigned __int8 v330 = *(unsigned char *)(v304 + 8);
          uint64_t v305 = v296 + v297[23];
          uint64_t v307 = v302[20];
          uint64_t v306 = v302[21];
          sub_100017238(v305, v385, &qword_10065C3C0);
          type metadata accessor for ADPInstallConfiguration(0);
          uint64_t v319 = swift_allocObject();
          uint64_t v308 = *(void *)(v0 + 192);
          uint64_t v317 = *(void *)(v0 + 200);
          uint64_t v309 = sub_100239C90(v0 + 168, v308);
          uint64_t v310 = v308;
          uint64_t v316 = v308;
          uint64_t v311 = *(void *)(v308 - 8);
          uint64_t v325 = swift_task_alloc();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v311 + 16))(v325, v309, v310);
          swift_bridgeObjectRetain();
          swift_retain();
          id v329 = v328;
          swift_retain();
          sub_10018AB28((uint64_t)v392);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v312 = swift_unknownObjectRetain();
          *(void *)(v0 + 920) = sub_1002BEB78(v357, v329, v380, v325, v301, 0, 0, v348, v321, v360, v219, 0, 0, typeb, v401, v318, v392, v365, v306,
                                    v368,
                                    v320,
                                    v323,
                                    v371,
                                    v337,
                                    v312,
                                    v354,
                                    0,
                                    0xF000000000000000,
                                    v345,
                                    v345 & 1,
                                    v396,
                                    (uint64_t)logc,
                                    v330,
                                    0,
                                    1u,
                                    v307,
                                    v385,
                                    v319,
                                    v316,
                                    v317);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          sub_100014524(v0 + 168);
          swift_task_dealloc();
          uint64_t v313 = (void *)swift_task_alloc();
          *(void *)(v0 + 928) = v313;
          *uint64_t v313 = v0;
          v313[1] = sub_10038B2FC;
          uint64_t v314 = *(void *)(v0 + 744);
          uint64_t v315 = *(void *)(v0 + 440);
          return sub_10037D240(v314, v315);
        }
        uint64_t v220 = *(void *)(v0 + 720);
        uint64_t v221 = *(void **)(v0 + 440);
        static Logger.restore.getter();
        sub_1003AEFD4(v214, v220, (uint64_t (*)(void))type metadata accessor for Restore);
        id v222 = v221;
        char v223 = Logger.logObject.getter();
        os_log_type_t v224 = static os_log_type_t.default.getter();
        BOOL v225 = os_log_type_enabled(v223, v224);
        uint64_t v226 = *(void *)(v0 + 720);
        if (v225)
        {
          uint64_t v227 = *(void *)(v0 + 640);
          id v228 = *(void **)(v0 + 440);
          uint64_t v229 = swift_slowAlloc();
          uint64_t v230 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v229 = 138412546;
          *(void *)(v229 + 4) = v228;
          *uint64_t v230 = v228;

          *(_WORD *)(v229 + 12) = 2112;
          uint64_t v231 = *(void **)(v226 + *(int *)(v227 + 20));
          *(void *)(v229 + 14) = v231;
          v230[1] = v231;
          id v232 = v231;
          sub_1003AF03C(v226, (uint64_t (*)(void))type metadata accessor for Restore);
          _os_log_impl((void *)&_mh_execute_header, v223, v224, "[%@][%@] Failed to find an accountID", (uint8_t *)v229, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v259 = *(void **)(v0 + 440);

          sub_1003AF03C(v226, (uint64_t (*)(void))type metadata accessor for Restore);
          char v223 = *(NSObject **)(v0 + 440);
        }
        uint64_t v260 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
        uint64_t v261 = *(void *)(v0 + 832);
        uint64_t v262 = *(void *)(v0 + 752);
        uint64_t v191 = *(void *)(v0 + 744);
        uint64_t v263 = *(void *)(v0 + 632);
        uint64_t v264 = *(void *)(v0 + 608);
        uint64_t v265 = *(void *)(v0 + 600);

        v260(v261, v262);
        (*(void (**)(uint64_t, uint64_t))(v264 + 8))(v263, v265);
LABEL_47:
        sub_1003AF03C(v191, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v184 = *(void *)(v0 + 912) + 1;
        if (v184 == *(void *)(v0 + 896)) {
          goto LABEL_41;
        }
      }
      uint64_t v233 = *(void *)(v0 + 744);
      uint64_t v234 = *(void *)(v0 + 704);
      char v235 = *(void **)(v0 + 440);
      static Logger.restore.getter();
      sub_1003AEFD4(v233, v234, (uint64_t (*)(void))type metadata accessor for Restore);
      id v236 = v235;
      NSString v237 = Logger.logObject.getter();
      os_log_type_t v238 = static os_log_type_t.default.getter();
      BOOL v239 = os_log_type_enabled(v237, v238);
      uint64_t v240 = *(void *)(v0 + 704);
      if (v239)
      {
        uint64_t v241 = *(void *)(v0 + 640);
        uint64_t v242 = *(void **)(v0 + 440);
        uint64_t v243 = swift_slowAlloc();
        uint64_t v244 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v243 = 138412546;
        *(void *)(v243 + 4) = v242;
        void *v244 = v242;

        *(_WORD *)(v243 + 12) = 2112;
        uint64_t v245 = *(void **)(v240 + *(int *)(v241 + 20));
        *(void *)(v243 + 14) = v245;
        v244[1] = v245;
        id v246 = v245;
        sub_1003AF03C(v240, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v237, v238, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v243, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v266 = *(void **)(v0 + 440);

        sub_1003AF03C(v240, (uint64_t (*)(void))type metadata accessor for Restore);
        NSString v237 = *(NSObject **)(v0 + 440);
      }
      unint64_t v267 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v268 = *(void *)(v0 + 816);
      goto LABEL_66;
    }
    v29(*(void *)(v0 + 464), 0, 1, v27);
    if (swift_getEnumCaseMultiPayload() == 21)
    {
      uint64_t v30 = *(void *)(v0 + 744);
      uint64_t v31 = *(void *)(v0 + 640);
      uint64_t v32 = *(void *)(v0 + 528);
      uint64_t v33 = *(void *)(v0 + 520);
      uint64_t v34 = *(void *)(v0 + 472);
      sub_1003AF03C(*(void *)(v0 + 464), (uint64_t (*)(void))type metadata accessor for InternalError);
      sub_100017238(v30 + *(int *)(v31 + 40), v34, &qword_10065C9B0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
      {
        uint64_t v35 = *(void *)(v0 + 744);
        uint64_t v36 = *(void *)(v0 + 664);
        uint64_t v37 = *(void **)(v0 + 440);
        sub_10001729C(*(void *)(v0 + 472), &qword_10065C9B0);
        static Logger.restore.getter();
        sub_1003AEFD4(v35, v36, (uint64_t (*)(void))type metadata accessor for Restore);
        id v38 = v37;
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        BOOL v41 = os_log_type_enabled(v39, v40);
        uint64_t v42 = *(void *)(v0 + 664);
        if (v41)
        {
          uint64_t v382 = *(void *)(v0 + 640);
          os_log_type_t v386 = v40;
          uint64_t v43 = *(void **)(v0 + 440);
          uint64_t v44 = swift_slowAlloc();
          uint64_t v45 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 138412546;
          *(void *)(v0 + 224) = v43;
          id v46 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v45 = v43;

          *(_WORD *)(v44 + 12) = 2112;
          id v47 = *(void **)(v42 + *(int *)(v382 + 20));
          *(void *)(v0 + 232) = v47;
          id v48 = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v45[1] = v47;
          sub_1003AF03C(v42, (uint64_t (*)(void))type metadata accessor for Restore);
          _os_log_impl((void *)&_mh_execute_header, v39, v386, "[%@][%@] Unable to cancel existing coordinator. Restore did not have an associated coordinatorID", (uint8_t *)v44, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
        }
        else
        {
          uint64_t v106 = *(NSObject **)(v0 + 440);
          swift_release();

          sub_1003AF03C(v42, (uint64_t (*)(void))type metadata accessor for Restore);
          os_log_type_t v39 = v106;
        }

        uint64_t v107 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
        uint64_t v108 = *(void *)(v0 + 776);
        uint64_t v109 = *(void *)(v0 + 752);
        uint64_t v110 = *(void *)(v0 + 744);
        uint64_t v111 = *(void *)(v0 + 632);
        uint64_t v112 = *(void *)(v0 + 608);
        uint64_t v113 = *(void *)(v0 + 600);
        swift_errorRelease();
        swift_release();
        v107(v108, v109);
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
        uint64_t v114 = v110;
      }
      else
      {
        uint64_t v85 = *(void **)(v0 + 536);
        (*(void (**)(void *, void, void))(*(void *)(v0 + 528) + 32))(v85, *(void *)(v0 + 472), *(void *)(v0 + 520));
        uint64_t v86 = sub_1004E6034(v85);
        if (v86)
        {
          id v87 = v86;
          uint64_t v88 = *(unsigned int *)(v0 + 1024);
          sub_1003ADD04((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
          swift_allocError();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v89, v88, v2);
          uint64_t v90 = (void *)_convertErrorToNSError(_:)();
          swift_errorRelease();
          *(void *)(v0 + 240) = 0;
          unsigned __int8 v91 = [v87 cancelForReason:v90 client:28 error:v0 + 240];

          id v92 = *(id *)(v0 + 240);
          if (v91)
          {
            uint64_t v393 = *(void *)(v0 + 744);
            uint64_t v93 = *(void *)(v0 + 632);
            uint64_t v94 = *(void *)(v0 + 608);
            uint64_t v95 = *(void *)(v0 + 600);
            uint64_t v96 = *(void *)(v0 + 536);
            uint64_t v97 = *(void *)(v0 + 528);
            uint64_t v98 = *(void *)(v0 + 520);
            swift_release();

            swift_errorRelease();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v98);
            (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
          }
          else
          {
            uint64_t v154 = v92;
            uint64_t v155 = *(void *)(v0 + 744);
            uint64_t v156 = *(void *)(v0 + 656);
            uint64_t v157 = *(void **)(v0 + 440);
            _convertNSErrorToError(_:)();

            swift_willThrow();
            static Logger.restore.getter();
            sub_1003AEFD4(v155, v156, (uint64_t (*)(void))type metadata accessor for Restore);
            id v158 = v157;
            uint64_t v159 = Logger.logObject.getter();
            os_log_type_t v160 = static os_log_type_t.error.getter();
            uint64_t v390 = v159;
            BOOL v161 = os_log_type_enabled(v159, v160);
            uint64_t v162 = *(void *)(v0 + 656);
            if (v161)
            {
              uint64_t v373 = *(void *)(v0 + 656);
              uint64_t v378 = *(void *)(v0 + 640);
              uint64_t v163 = *(void **)(v0 + 440);
              uint64_t v164 = swift_slowAlloc();
              uint64_t v165 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v164 = 138412546;
              *(void *)(v0 + 248) = v163;
              id v166 = v163;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v165 = v163;

              *(_WORD *)(v164 + 12) = 2112;
              uint64_t v167 = *(void **)(v373 + *(int *)(v378 + 20));
              *(void *)(v0 + 256) = v167;
              id v168 = v167;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v165[1] = v167;
              sub_1003AF03C(v373, (uint64_t (*)(void))type metadata accessor for Restore);
              _os_log_impl((void *)&_mh_execute_header, v390, v160, "[%@][%@] Unable to cancel existing coordinator.", (uint8_t *)v164, 0x16u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();

              swift_errorRelease();
              unsigned __int8 v169 = v390;
            }
            else
            {
              uint64_t v176 = *(void **)(v0 + 440);
              swift_release();

              swift_errorRelease();
              sub_1003AF03C(v162, (uint64_t (*)(void))type metadata accessor for Restore);

              unsigned __int8 v169 = *(NSObject **)(v0 + 440);
            }
            uint64_t v177 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
            uint64_t v178 = *(void *)(v0 + 768);
            uint64_t v179 = *(void *)(v0 + 752);
            uint64_t v391 = *(void *)(v0 + 632);
            uint64_t v393 = *(void *)(v0 + 744);
            uint64_t v180 = *(void *)(v0 + 608);
            uint64_t v384 = *(void *)(v0 + 600);
            uint64_t v181 = *(void *)(v0 + 536);
            uint64_t v182 = *(void *)(v0 + 528);
            uint64_t v183 = *(void *)(v0 + 520);

            swift_errorRelease();
            swift_release();
            v177(v178, v179);
            (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v181, v183);
            (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v391, v384);
          }
          uint64_t v114 = v393;
        }
        else
        {
          uint64_t v147 = *(void *)(v0 + 744);
          uint64_t v148 = *(void *)(v0 + 632);
          uint64_t v149 = *(void *)(v0 + 608);
          uint64_t v150 = *(void *)(v0 + 600);
          uint64_t v151 = *(void *)(v0 + 536);
          uint64_t v152 = *(void *)(v0 + 528);
          uint64_t v153 = *(void *)(v0 + 520);
          swift_release();
          swift_errorRelease();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v151, v153);
          (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v148, v150);
          uint64_t v114 = v147;
        }
      }
      sub_1003AF03C(v114, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v1 = v0 + 208;
      goto LABEL_40;
    }
    uint64_t v53 = *(void *)(v0 + 744);
    uint64_t v54 = *(void *)(v0 + 632);
    uint64_t v55 = *(void *)(v0 + 608);
    uint64_t v56 = *(void *)(v0 + 600);
    uint64_t v57 = *(void *)(v0 + 464);
    swift_release();
    swift_errorRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
    uint64_t v1 = v0 + 208;
    sub_1003AF03C(v53, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v58 = type metadata accessor for InternalError;
    uint64_t v59 = v57;
LABEL_22:
    sub_1003AF03C(v59, (uint64_t (*)(void))v58);
    goto LABEL_40;
  }
  uint64_t v9 = *(void *)(v0 + 528);
  uint64_t v10 = *(void *)(v0 + 520);
  uint64_t v11 = *(void *)(v0 + 480);
  sub_100017238(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 40), v11, &qword_10065C9B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) == 1)
  {
    uint64_t v12 = *(void *)(v0 + 744);
    uint64_t v13 = *(void *)(v0 + 672);
    uint64_t v14 = *(void **)(v0 + 440);
    sub_10001729C(*(void *)(v0 + 480), &qword_10065C9B0);
    static Logger.restore.getter();
    sub_1003AEFD4(v12, v13, (uint64_t (*)(void))type metadata accessor for Restore);
    id v15 = v14;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 672);
    if (v18)
    {
      uint64_t v381 = *(void *)(v0 + 640);
      uint64_t v20 = *(void **)(v0 + 440);
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v0 + 264) = v20;
      id v23 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v20;

      *(_WORD *)(v21 + 12) = 2112;
      uint64_t v24 = *(void **)(v19 + *(int *)(v381 + 20));
      *(void *)(v0 + 272) = v24;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v22[1] = v24;
      sub_1003AF03C(v19, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%@][%@] Hard fail failed. Restore did not have an associated coordinatorID", (uint8_t *)v21, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      uint64_t v99 = *(NSObject **)(v0 + 440);
      swift_release();

      sub_1003AF03C(v19, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v16 = v99;
    }

    uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v101 = *(void *)(v0 + 784);
    uint64_t v102 = *(void *)(v0 + 752);
    uint64_t v398 = *(void *)(v0 + 744);
    uint64_t v103 = *(void *)(v0 + 632);
    uint64_t v104 = *(void *)(v0 + 608);
    uint64_t v105 = *(void *)(v0 + 600);
    swift_errorRelease();
    swift_release();
    v100(v101, v102);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
    uint64_t v58 = type metadata accessor for Restore;
    uint64_t v59 = v398;
    goto LABEL_22;
  }
  id v60 = *(void **)(v0 + 560);
  (*(void (**)(void *, void, void))(*(void *)(v0 + 528) + 32))(v60, *(void *)(v0 + 480), *(void *)(v0 + 520));
  uint64_t v61 = sub_1004E6034(v60);
  *(void *)(v0 + 984) = v61;
  if (!v61)
  {
    uint64_t v115 = *(void *)(v0 + 744);
    uint64_t v116 = *(void *)(v0 + 680);
    uint64_t v117 = *(void *)(v0 + 560);
    uint64_t v118 = *(void *)(v0 + 544);
    uint64_t v119 = *(void *)(v0 + 528);
    uint64_t v120 = *(void *)(v0 + 520);
    id v121 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v115, v116, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v118, v117, v120);
    id v122 = v121;
    id v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    BOOL v125 = os_log_type_enabled(v123, v124);
    uint64_t v379 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v372 = *(void *)(v0 + 752);
    uint64_t v377 = *(void *)(v0 + 792);
    uint64_t v389 = *(void *)(v0 + 744);
    uint64_t v126 = *(void *)(v0 + 680);
    if (v125)
    {
      uint64_t v326 = *(void *)(v0 + 640);
      uint64_t v359 = *(void *)(v0 + 600);
      uint64_t v361 = *(void *)(v0 + 632);
      uint64_t v352 = *(void *)(v0 + 560);
      uint64_t v355 = *(void *)(v0 + 608);
      uint64_t v335 = *(void *)(v0 + 544);
      uint64_t v341 = *(void *)(v0 + 528);
      os_log_t log = *(os_log_t *)(v0 + 520);
      uint64_t v343 = v123;
      uint64_t v127 = *(void **)(v0 + 440);
      uint64_t v128 = swift_slowAlloc();
      uint64_t v129 = (void *)swift_slowAlloc();
      v402[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = 138412802;
      *(void *)(v0 + 280) = v127;
      os_log_type_t type = v124;
      id v130 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v129 = v127;

      *(_WORD *)(v128 + 12) = 2112;
      char v131 = *(void **)(v126 + *(int *)(v326 + 20));
      *(void *)(v0 + 288) = v131;
      id v132 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v129[1] = v131;
      sub_1003AF03C(v126, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v128 + 22) = 2080;
      sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 296) = sub_1000143F4(v133, v134, v402);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v135 = *(void (**)(uint64_t, os_log_t))(v341 + 8);
      v135(v335, log);
      _os_log_impl((void *)&_mh_execute_header, v343, type, "[%@][%@] Hard fail failed. Unable to locate coordinator with coordinatorID: %s", (uint8_t *)v128, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_errorRelease();
      swift_release();
      v379(v377, v372);
      v135(v352, log);
      (*(void (**)(uint64_t, uint64_t))(v355 + 8))(v361, v359);
    }
    else
    {
      uint64_t v170 = *(void *)(v0 + 608);
      uint64_t v394 = *(void *)(v0 + 600);
      uint64_t v399 = *(void *)(v0 + 632);
      uint64_t v362 = *(void *)(v0 + 560);
      uint64_t v171 = *(void *)(v0 + 544);
      uint64_t v172 = *(void *)(v0 + 528);
      uint64_t v173 = *(void *)(v0 + 520);
      uint64_t v174 = *(void **)(v0 + 440);
      swift_release();

      os_log_type_t v175 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
      v175(v171, v173);
      sub_1003AF03C(v126, (uint64_t (*)(void))type metadata accessor for Restore);

      swift_errorRelease();
      swift_release();
      v379(v377, v372);
      v175(v362, v173);
      (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v399, v394);
    }
    uint64_t v59 = v389;
    uint64_t v58 = type metadata accessor for Restore;
    goto LABEL_22;
  }
  uint64_t v62 = *(void *)(v0 + 744);
  uint64_t v63 = *(void *)(v0 + 688);
  uint64_t v64 = *(void *)(v0 + 560);
  uint64_t v65 = *(void *)(v0 + 552);
  uint64_t v66 = *(void *)(v0 + 528);
  uint64_t v67 = *(void *)(v0 + 520);
  uint64_t v387 = *(void **)(v0 + 440);
  static Logger.restore.getter();
  sub_1003AEFD4(v62, v63, (uint64_t (*)(void))type metadata accessor for Restore);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v64, v67);
  id v68 = v387;
  swift_errorRetain();
  id v69 = v68;
  swift_errorRetain();
  id v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  BOOL v72 = os_log_type_enabled(v70, v71);
  id v73 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
  uint64_t v383 = *(void *)(v0 + 752);
  uint64_t v388 = *(void *)(v0 + 800);
  uint64_t v74 = *(void *)(v0 + 688);
  if (v72)
  {
    uint64_t v342 = *(NSObject **)(v0 + 640);
    uint64_t v351 = *(void *)(v0 + 552);
    uint64_t v349 = *(void *)(v0 + 520);
    uint64_t v358 = *(void *)(v0 + 528);
    os_log_type_t v369 = v71;
    id v75 = *(void **)(v0 + 440);
    uint64_t v76 = swift_slowAlloc();
    uint64_t v366 = v70;
    BOOL v77 = (void *)swift_slowAlloc();
    v402[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 138413058;
    *(void *)(v0 + 304) = v75;
    v376 = v73;
    id v78 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v77 = v75;

    *(_WORD *)(v76 + 12) = 2112;
    uint64_t v79 = *(void **)(v74 + SHIDWORD(v342[2].isa));
    *(void *)(v0 + 312) = v79;
    id v80 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v77[1] = v79;
    sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v76 + 22) = 2080;
    sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 320) = sub_1000143F4(v81, v82, v402);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v358 + 8);
    v83(v351, v349);
    *(_WORD *)(v76 + 32) = 2112;
    swift_errorRetain();
    uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 328) = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v77[2] = v84;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v366, v369, "[%@][%@] Hard failing coordinatorID: %s due to error: %@", (uint8_t *)v76, 0x2Au);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v376(v388, v383);
  }
  else
  {
    uint64_t v136 = *(void *)(v0 + 552);
    uint64_t v137 = *(void *)(v0 + 528);
    uint64_t v138 = *(void *)(v0 + 520);
    uint64_t v139 = *(void **)(v0 + 440);

    sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
    v83(v136, v138);
    swift_errorRelease();
    swift_errorRelease();

    v73(v388, v383);
  }
  *(void *)(v0 + 992) = v83;
  char v140 = *(unsigned char *)(v0 + 127);
  uint64_t v141 = *(void **)(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 20));
  *(void *)(v0 + 1000) = v141;
  id v142 = v141;
  uint64_t v143 = (void *)swift_task_alloc();
  *(void *)(v0 + 1008) = v143;
  void *v143 = v0;
  v143[1] = sub_10038FDD4;
  uint64_t v144 = *(void *)(v0 + 968);
  uint64_t v145 = *(void *)(v0 + 440);
  return sub_1004A2008(v144, v140 & 1, 1, v145, (uint64_t)v142);
}

uint64_t sub_10038FDD4()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 1000);
  swift_task_dealloc();

  return _swift_task_switch(sub_10038FF14, 0, 0);
}

uint64_t sub_10038FF14()
{
  uint64_t v191 = v0;
  uint64_t v1 = *(void **)(v0 + 984);
  uint64_t v185 = *(void (**)(uint64_t, uint64_t))(v0 + 992);
  uint64_t v187 = *(void *)(v0 + 744);
  uint64_t v183 = *(void *)(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void *)(v0 + 520);
  swift_release();

  swift_errorRelease();
  swift_release();
  v185(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v183, v3);
  sub_1003AF03C(v187, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_100014524(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 912) + 1;
  if (v6 == *(void *)(v0 + 896))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  uint64_t v184 = (_OWORD *)(v0 + 16);
  while (1)
  {
    *(void *)(v0 + 912) = v6;
    uint64_t v15 = *(void *)(v0 + 744);
    uint64_t v16 = *(void *)(v0 + 640);
    uint64_t v17 = *(void *)(v0 + 608);
    uint64_t v18 = *(void *)(v0 + 600);
    uint64_t v19 = *(void *)(v0 + 592);
    sub_1003AEFD4(*(void *)(v0 + 872)+ ((*(unsigned __int8 *)(v0 + 1016) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1016))+ *(void *)(v0 + 904) * v6, v15, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_100017238(v15 + *(int *)(v16 + 68), v19, &qword_10065C3C0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18) == 1)
    {
      uint64_t v20 = *(void *)(v0 + 744);
      uint64_t v21 = *(void *)(v0 + 696);
      uint64_t v22 = *(void **)(v0 + 440);
      sub_10001729C(*(void *)(v0 + 592), &qword_10065C3C0);
      static Logger.restore.getter();
      sub_1003AEFD4(v20, v21, (uint64_t (*)(void))type metadata accessor for Restore);
      id v23 = v22;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      BOOL v25 = os_log_type_enabled(v10, v24);
      uint64_t v26 = *(void *)(v0 + 696);
      if (v25)
      {
        uint64_t v27 = *(void *)(v0 + 640);
        int v28 = *(void **)(v0 + 440);
        uint64_t v29 = swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138412546;
        *(void *)(v29 + 4) = v28;
        *uint64_t v30 = v28;

        *(_WORD *)(v29 + 12) = 2112;
        uint64_t v31 = *(void **)(v26 + *(int *)(v27 + 20));
        *(void *)(v29 + 14) = v31;
        v30[1] = v31;
        id v32 = v31;
        sub_1003AF03C(v26, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v10, v24, "[%@][%@] Did not get an adp URL app", (uint8_t *)v29, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v9 = *(void **)(v0 + 440);

        sub_1003AF03C(v26, (uint64_t (*)(void))type metadata accessor for Restore);
        uint64_t v10 = *(NSObject **)(v0 + 440);
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v12 = *(void *)(v0 + 808);
      uint64_t v13 = *(void *)(v0 + 752);
      uint64_t v14 = *(void *)(v0 + 744);

      v11(v12, v13);
      goto LABEL_8;
    }
    uint64_t v33 = *(void *)(v0 + 744);
    uint64_t v34 = *(void *)(v0 + 640);
    (*(void (**)(void, void, void))(*(void *)(v0 + 608) + 32))(*(void *)(v0 + 632), *(void *)(v0 + 592), *(void *)(v0 + 600));
    uint64_t v35 = (uint64_t *)(v33 + *(int *)(v34 + 48));
    uint64_t v36 = v35[1];
    if (!v36)
    {
      uint64_t v56 = *(void *)(v0 + 744);
      uint64_t v57 = *(void *)(v0 + 704);
      uint64_t v58 = *(void **)(v0 + 440);
      static Logger.restore.getter();
      sub_1003AEFD4(v56, v57, (uint64_t (*)(void))type metadata accessor for Restore);
      id v59 = v58;
      id v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      BOOL v62 = os_log_type_enabled(v60, v61);
      uint64_t v63 = *(void *)(v0 + 704);
      if (v62)
      {
        uint64_t v64 = *(void *)(v0 + 640);
        uint64_t v65 = *(void **)(v0 + 440);
        uint64_t v66 = swift_slowAlloc();
        uint64_t v67 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 138412546;
        *(void *)(v66 + 4) = v65;
        *uint64_t v67 = v65;

        *(_WORD *)(v66 + 12) = 2112;
        id v68 = *(void **)(v63 + *(int *)(v64 + 20));
        *(void *)(v66 + 14) = v68;
        v67[1] = v68;
        id v69 = v68;
        sub_1003AF03C(v63, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v66, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v89 = *(void **)(v0 + 440);

        sub_1003AF03C(v63, (uint64_t (*)(void))type metadata accessor for Restore);
        id v60 = *(NSObject **)(v0 + 440);
      }
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
      uint64_t v91 = *(void *)(v0 + 816);
      goto LABEL_27;
    }
    uint64_t v37 = *(void *)(v0 + 744);
    uint64_t v38 = *(void *)(v0 + 640);
    os_log_type_t v39 = (uint64_t *)(v37 + *(int *)(v38 + 52));
    uint64_t v40 = v39[1];
    if (v40) {
      break;
    }
    uint64_t v70 = *(void *)(v0 + 712);
    os_log_type_t v71 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v37, v70, (uint64_t (*)(void))type metadata accessor for Restore);
    id v72 = v71;
    id v60 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    BOOL v74 = os_log_type_enabled(v60, v73);
    uint64_t v75 = *(void *)(v0 + 712);
    if (v74)
    {
      uint64_t v76 = *(void *)(v0 + 640);
      BOOL v77 = *(void **)(v0 + 440);
      uint64_t v78 = swift_slowAlloc();
      uint64_t v79 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 138412546;
      *(void *)(v78 + 4) = v77;
      *uint64_t v79 = v77;

      *(_WORD *)(v78 + 12) = 2112;
      id v80 = *(void **)(v75 + *(int *)(v76 + 20));
      *(void *)(v78 + 14) = v80;
      v79[1] = v80;
      id v81 = v80;
      sub_1003AF03C(v75, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v60, v73, "[%@][%@] Failed to find a distributor domain", (uint8_t *)v78, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v92 = *(void **)(v0 + 440);

      sub_1003AF03C(v75, (uint64_t (*)(void))type metadata accessor for Restore);
      id v60 = *(NSObject **)(v0 + 440);
    }
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v91 = *(void *)(v0 + 824);
LABEL_27:
    uint64_t v93 = *(void *)(v0 + 752);
    uint64_t v14 = *(void *)(v0 + 744);
    uint64_t v94 = *(void *)(v0 + 632);
    uint64_t v95 = *(void *)(v0 + 608);
    uint64_t v96 = *(void *)(v0 + 600);

    v90(v91, v93);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
LABEL_8:
    sub_1003AF03C(v14, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v6 = *(void *)(v0 + 912) + 1;
    if (v6 == *(void *)(v0 + 896)) {
      goto LABEL_2;
    }
  }
  BOOL v41 = (uint64_t *)(v37 + *(int *)(v38 + 56));
  uint64_t v42 = v41[1];
  if (!v42)
  {
    uint64_t v43 = *(void *)(v0 + 720);
    uint64_t v44 = *(void **)(v0 + 440);
    static Logger.restore.getter();
    sub_1003AEFD4(v37, v43, (uint64_t (*)(void))type metadata accessor for Restore);
    id v45 = v44;
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = *(void *)(v0 + 720);
    if (v48)
    {
      uint64_t v50 = *(void *)(v0 + 640);
      uint64_t v51 = *(void **)(v0 + 440);
      uint64_t v52 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 138412546;
      *(void *)(v52 + 4) = v51;
      *uint64_t v53 = v51;

      *(_WORD *)(v52 + 12) = 2112;
      uint64_t v54 = *(void **)(v49 + *(int *)(v50 + 20));
      *(void *)(v52 + 14) = v54;
      v53[1] = v54;
      id v55 = v54;
      sub_1003AF03C(v49, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@][%@] Failed to find an accountID", (uint8_t *)v52, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v82 = *(void **)(v0 + 440);

      sub_1003AF03C(v49, (uint64_t (*)(void))type metadata accessor for Restore);
      id v46 = *(NSObject **)(v0 + 440);
    }
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
    uint64_t v84 = *(void *)(v0 + 832);
    uint64_t v85 = *(void *)(v0 + 752);
    uint64_t v14 = *(void *)(v0 + 744);
    uint64_t v86 = *(void *)(v0 + 632);
    uint64_t v87 = *(void *)(v0 + 608);
    uint64_t v88 = *(void *)(v0 + 600);

    v83(v84, v85);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
    goto LABEL_8;
  }
  uint64_t v162 = *v35;
  uint64_t v164 = *v39;
  uint64_t v172 = *v41;
  uint64_t v97 = *(void *)(v0 + 736);
  uint64_t v98 = *(void *)(v0 + 624);
  uint64_t v99 = *(void *)(v0 + 608);
  uint64_t v177 = *(void *)(v0 + 600);
  uint64_t v179 = *(void *)(v0 + 632);
  uint64_t v188 = *(void **)(v0 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Logger.restore.getter();
  sub_1003AEFD4(v37, v97, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16);
  v176(v98, v179, v177);
  id v100 = v188;
  uint64_t v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.default.getter();
  BOOL v103 = os_log_type_enabled(v101, v102);
  uint64_t v180 = *(void (**)(uint64_t, uint64_t))(v0 + 880);
  uint64_t v173 = *(void *)(v0 + 848);
  uint64_t v168 = *(void *)(v0 + 736);
  uint64_t v170 = *(void *)(v0 + 752);
  if (v103)
  {
    uint64_t v147 = *(void *)(v0 + 640);
    uint64_t v151 = *(void *)(v0 + 624);
    uint64_t v158 = *(void *)(v0 + 608);
    uint64_t v149 = *(void *)(v0 + 600);
    os_log_type_t v160 = v102;
    uint64_t v104 = *(void **)(v0 + 440);
    os_log_t log = v101;
    uint64_t v105 = swift_slowAlloc();
    uint64_t v167 = (void *)swift_slowAlloc();
    v190[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v105 = 138412803;
    *(void *)(v0 + 352) = v104;
    id v106 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v167 = v104;

    *(_WORD *)(v105 + 12) = 2112;
    uint64_t v107 = *(void **)(v168 + *(int *)(v147 + 20));
    *(void *)(v0 + 360) = v107;
    id v108 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v167[1] = v107;
    sub_1003AF03C(v168, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v105 + 22) = 2081;
    sub_1003ADD04(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 368) = sub_1000143F4(v109, v110, v190);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v151, v149);
    _os_log_impl((void *)&_mh_execute_header, log, v160, "[%@][%@] Ready to install adp %{private}s", (uint8_t *)v105, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v111 = *(void *)(v0 + 624);
    uint64_t v112 = *(void *)(v0 + 608);
    uint64_t v113 = *(void *)(v0 + 600);
    uint64_t v114 = *(void **)(v0 + 440);

    sub_1003AF03C(v168, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
  }
  v180(v173, v170);
  uint64_t v115 = v39[1];
  if (v115
    && ((uint64_t v116 = (void *)(*(void *)(v0 + 744) + *(int *)(*(void *)(v0 + 640) + 36)), *v39 == *v116)
     && v115 == v116[1]
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for WebDistributor;
    unint64_t v117 = sub_1002BEA38();
    uint64_t v118 = v162;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 152) = &type metadata for NativeDistributor;
    unint64_t v117 = sub_1002F9EF8();
    uint64_t v118 = v164;
    uint64_t v36 = v40;
  }
  uint64_t v119 = *(void *)(v0 + 744);
  uint64_t v120 = *(int **)(v0 + 640);
  uint64_t v174 = *(void *)(v0 + 632);
  uint64_t v121 = *(void *)(v0 + 616);
  uint64_t v161 = v121;
  uint64_t v122 = *(void *)(v0 + 608);
  os_log_t loga = *(os_log_t *)(v0 + 600);
  uint64_t v189 = *(void *)(v0 + 584);
  uint64_t v182 = *(void *)(v0 + 576);
  uint64_t v124 = *(void *)(v0 + 504);
  uint64_t v123 = *(void *)(v0 + 512);
  uint64_t v165 = *(void *)(v0 + 496);
  BOOL v125 = *(void **)(v0 + 456);
  unsigned __int8 v163 = *(unsigned char *)(v0 + 127);
  uint64_t v169 = *(void *)(v0 + 416);
  uint64_t v171 = *(void *)(v0 + 568);
  uint64_t v159 = *(void *)(v0 + 400);
  *(void *)(v0 + 160) = v117;
  *(void *)(v0 + 128) = v118;
  *(void *)(v0 + 136) = v36;
  UUID.init()();
  uint64_t v152 = *(void **)(v119 + v120[6]);
  uint64_t v181 = v125[16];
  sub_10019B17C(v0 + 128, v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v123, v119 + v120[7], v165);
  uint64_t v126 = (uint64_t *)(v119 + v120[18]);
  uint64_t v166 = *v126;
  uint64_t v145 = v126[1];
  v176(v121, v174, (uint64_t)loga);
  (*(void (**)(uint64_t, uint64_t, uint64_t, os_log_t))(v122 + 56))(v189, 1, 1, loga);
  uint64_t v178 = v125[22];
  uint64_t v144 = v125[24];
  uint64_t v146 = v125[25];
  uint64_t v175 = v125[27];
  uint64_t v186 = v125[26];
  uint64_t v127 = v125[18];
  uint64_t v148 = v125[17];
  uint64_t v128 = v119 + v120[16];
  os_log_t logb = *(os_log_t *)v128;
  unsigned __int8 v154 = *(unsigned char *)(v128 + 8);
  uint64_t v129 = v119 + v120[23];
  uint64_t v130 = v125[20];
  uint64_t v141 = v125[21];
  sub_100017238(v129, v182, &qword_10065C3C0);
  type metadata accessor for ADPInstallConfiguration(0);
  uint64_t v131 = swift_allocObject();
  uint64_t v132 = *(void *)(v0 + 192);
  uint64_t v142 = *(void *)(v0 + 200);
  uint64_t v143 = v131;
  uint64_t v133 = sub_100239C90(v0 + 168, v132);
  uint64_t v134 = v132;
  uint64_t v140 = v132;
  uint64_t v135 = *(void *)(v132 - 8);
  uint64_t v150 = swift_task_alloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v150, v133, v134);
  swift_bridgeObjectRetain();
  swift_retain();
  id v153 = v152;
  swift_retain();
  sub_10018AB28((uint64_t)v184);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v136 = swift_unknownObjectRetain();
  *(void *)(v0 + 920) = sub_1002BEB78(v171, v153, v181, v150, v123, 0, 0, v166, v145, v172, v42, 0, 0, v161, v189, v127, v184, v175, v141,
                            v178,
                            v144,
                            v146,
                            v186,
                            v159,
                            v136,
                            v169,
                            0,
                            0xF000000000000000,
                            v163,
                            v163 & 1,
                            v148,
                            (uint64_t)logb,
                            v154,
                            0,
                            1u,
                            v130,
                            v182,
                            v143,
                            v140,
                            v142);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_100014524(v0 + 168);
  swift_task_dealloc();
  uint64_t v137 = (void *)swift_task_alloc();
  *(void *)(v0 + 928) = v137;
  *uint64_t v137 = v0;
  v137[1] = sub_10038B2FC;
  uint64_t v138 = *(void *)(v0 + 744);
  uint64_t v139 = *(void *)(v0 + 440);
  return sub_10037D240(v138, v139);
}

uint64_t sub_100391338(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v94 = a4;
  unint64_t v100 = a3;
  uint64_t v96 = a2;
  Class ObjectType = (Class)swift_getObjectType();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v104 = *(void *)(v7 - 8);
  uint64_t v105 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  BOOL v103 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v93 = (char *)&v91 - v11;
  __chkstk_darwin(v10);
  id v92 = (char *)&v91 - v12;
  os_log_t v98 = (os_log_t)type metadata accessor for AppInstallRequestType();
  Class isa = v98[-1].isa;
  __chkstk_darwin(v98);
  uint64_t v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for Restore();
  uint64_t v95 = *(void *)(v97 - 8);
  uint64_t v16 = __chkstk_darwin(v97);
  os_log_type_t v102 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v91 = (uint64_t)&v91 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v101 = (char *)&v91 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_type_t v24 = (char *)&v91 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v91 - v25;
  uint64_t v27 = type metadata accessor for LogKey.Prefix();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v91 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  if ((sub_1004E588C() & 1) == 0)
  {
    id v32 = v103;
    static Logger.restore.getter();
    id v33 = a1;
    id v34 = a5;
    id v35 = v33;
    id v36 = v34;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      os_log_type_t v102 = (char *)swift_slowAlloc();
      v106[0] = (uint64_t)v102;
      *(_DWORD *)uint64_t v39 = 138412546;
      uint64_t v107 = (uint64_t)v36;
      id v41 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v36;

      *(_WORD *)(v39 + 12) = 2082;
      id v42 = [v35 identity];
      id v43 = [v42 bundleID];

      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      uint64_t v107 = sub_1000143F4(v44, v46, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "[%@][%{public}s] Skipping", (uint8_t *)v39, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v105);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v104 + 8))(v32, v105);
    }
    return 1;
  }
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v30, enum case for LogKey.Prefix.restore(_:), v27);
  id v47 = objc_allocWithZone(ObjectType);
  BOOL v48 = (void *)LogKey.init(prefix:)();
  (*((void (**)(char *, void, os_log_t))isa + 13))(v15, enum case for AppInstallRequestType.restore(_:), v98);
  id v49 = v31;
  uint64_t v50 = v48;
  sub_1004D4EEC(v49, (uint64_t)v15, v50, (uint64_t)v26);
  sub_1003AEFD4((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v51 = (uint64_t)v26;
  unint64_t v52 = v100;
  uint64_t v53 = (uint64_t)v101;
  uint64_t v54 = (uint64_t)v102;
  if (!v100) {
    goto LABEL_8;
  }
  id v55 = &v24[*(int *)(v97 + 56)];
  uint64_t v56 = *((void *)v55 + 1);
  if (!v56)
  {
    sub_1003AF03C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Restore);
    goto LABEL_22;
  }
  if (*(void *)v55 != v96 || v56 != v100)
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1003AF03C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Restore);
    if (v87) {
      goto LABEL_9;
    }
LABEL_22:
    sub_1003AF03C(v51, (uint64_t (*)(void))type metadata accessor for Restore);

    return 1;
  }
LABEL_8:
  sub_1003AF03C((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Restore);
LABEL_9:
  uint64_t v57 = (unint64_t *)(v94 + 16);
  sub_1003AEFD4(v51, v53, (uint64_t (*)(void))type metadata accessor for Restore);
  swift_beginAccess();
  unint64_t v58 = *v57;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v57 = v58;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v58 = sub_100290934(0, *(void *)(v58 + 16) + 1, 1, v58);
    *uint64_t v57 = v58;
  }
  unint64_t v61 = *(void *)(v58 + 16);
  unint64_t v60 = *(void *)(v58 + 24);
  if (v61 >= v60 >> 1)
  {
    unint64_t v58 = sub_100290934(v60 > 1, v61 + 1, 1, v58);
    *uint64_t v57 = v58;
  }
  *(void *)(v58 + 16) = v61 + 1;
  sub_1003A4FE4(v53, v58+ ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))+ *(void *)(v95 + 72) * v61);
  swift_endAccess();
  if (v52)
  {
    swift_bridgeObjectRetain();
    BOOL v62 = v93;
    static Logger.restore.getter();
    sub_1003AEFD4(v51, v54, (uint64_t (*)(void))type metadata accessor for Restore);
    id v63 = a5;
    swift_bridgeObjectRetain();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      os_log_t v98 = v64;
      id v68 = (void *)v67;
      Class ObjectType = (Class)swift_slowAlloc();
      v106[0] = (uint64_t)ObjectType;
      *(_DWORD *)uint64_t v66 = 138412802;
      BOOL v103 = v50;
      uint64_t v107 = (uint64_t)v63;
      id v69 = v63;
      uint64_t v101 = (char *)v51;
      id v70 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v68 = v63;

      *(_WORD *)(v66 + 12) = 2112;
      os_log_type_t v71 = *(void **)(v54 + *(int *)(v97 + 20));
      uint64_t v107 = (uint64_t)v71;
      id v72 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v68[1] = v71;
      sub_1003AF03C(v54, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v66 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v107 = sub_1000143F4(v96, v52, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v73 = v98;
      _os_log_impl((void *)&_mh_execute_header, v98, v65, "[%@][%@] Attempting to to restore matching accountID: %s", (uint8_t *)v66, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v104 + 8))(v93, v105);
      uint64_t v74 = (uint64_t)v101;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_1003AF03C(v54, (uint64_t (*)(void))type metadata accessor for Restore);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v62, v105);
      uint64_t v74 = v51;
    }
  }
  else
  {
    uint64_t v75 = v92;
    static Logger.restore.getter();
    uint64_t v76 = v91;
    sub_1003AEFD4(v51, v91, (uint64_t (*)(void))type metadata accessor for Restore);
    BOOL v77 = a5;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      id v81 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 138412546;
      v106[0] = (uint64_t)v77;
      BOOL v103 = v50;
      unint64_t v82 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v81 = v77;

      *(_WORD *)(v80 + 12) = 2112;
      uint64_t v83 = v91;
      uint64_t v84 = *(void **)(v91 + *(int *)(v97 + 20));
      v106[0] = (uint64_t)v84;
      id v85 = v84;
      id v86 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v81[1] = v84;
      sub_1003AF03C(v83, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "[%@][%@] Attempting to to restore", (uint8_t *)v80, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v75 = v92;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003AF03C(v76, (uint64_t (*)(void))type metadata accessor for Restore);
      id v86 = v77;
      uint64_t v78 = v77;
    }
    uint64_t v89 = v104;
    uint64_t v88 = v105;

    (*(void (**)(char *, uint64_t))(v89 + 8))(v75, v88);
    uint64_t v74 = v51;
  }
  sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
  return 1;
}

uint64_t sub_100391F98(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 1008) = v6;
  *(void *)(v7 + 1000) = a6;
  *(void *)(v7 + 992) = a5;
  *(void *)(v7 + 984) = a4;
  *(unsigned char *)(v7 + 865) = a3;
  *(void *)(v7 + 976) = a2;
  *(void *)(v7 + 968) = a1;
  *(void *)(v7 + 1016) = *(void *)a2;
  *(_OWORD *)(v7 + 1024) = *(_OWORD *)(a2 + 8);
  *(void *)(v7 + 1040) = *(void *)(a2 + 24);
  *(_OWORD *)(v7 + 1048) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 + 1064) = *(void *)(a2 + 48);
  *(_OWORD *)(v7 + 1072) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v7 + 1088) = *(_OWORD *)(a2 + 72);
  *(void *)(v7 + 1104) = *(void *)(a2 + 88);
  int v8 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(v7 + 868) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v7 + 1656) = v8;
  *(_DWORD *)(v7 + 1660) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(v7 + 866) = *(_WORD *)(a2 + 108);
  *(unsigned char *)(v7 + 1676) = *(unsigned char *)(a2 + 110);
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  *(void *)(v7 + 1112) = v9;
  *(void *)(v7 + 1120) = *(void *)(v9 - 8);
  *(void *)(v7 + 1128) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v7 + 1136) = v10;
  *(void *)(v7 + 1144) = *(void *)(v10 - 8);
  *(void *)(v7 + 1152) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  *(void *)(v7 + 1160) = v11;
  *(void *)(v7 + 1168) = *(void *)(v11 - 8);
  *(void *)(v7 + 1176) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for AvailableRestore();
  *(void *)(v7 + 1184) = v12;
  *(void *)(v7 + 1192) = *(void *)(v12 - 8);
  *(void *)(v7 + 1200) = swift_task_alloc();
  *(void *)(v7 + 1208) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Restore();
  *(void *)(v7 + 1216) = v13;
  *(void *)(v7 + 1224) = *(void *)(v13 - 8);
  *(void *)(v7 + 1232) = swift_task_alloc();
  *(void *)(v7 + 1240) = swift_task_alloc();
  *(void *)(v7 + 1248) = swift_task_alloc();
  *(void *)(v7 + 1256) = swift_task_alloc();
  *(void *)(v7 + 1264) = swift_task_alloc();
  *(void *)(v7 + 1272) = swift_task_alloc();
  *(void *)(v7 + 1280) = swift_task_alloc();
  *(void *)(v7 + 1288) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v7 + 1296) = v14;
  *(void *)(v7 + 1304) = *(void *)(v14 - 8);
  *(void *)(v7 + 1312) = swift_task_alloc();
  *(void *)(v7 + 1320) = swift_task_alloc();
  *(void *)(v7 + 1328) = swift_task_alloc();
  *(void *)(v7 + 1336) = swift_task_alloc();
  *(void *)(v7 + 1344) = swift_task_alloc();
  *(void *)(v7 + 1352) = swift_task_alloc();
  *(void *)(v7 + 1360) = swift_task_alloc();
  return _swift_task_switch(sub_100392358, 0, 0);
}

uint64_t sub_100392358()
{
  uint64_t v102 = v0;
  uint64_t v1 = *(void *)(v0 + 968);
  *(void *)(v0 + 928) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1368) = v2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 1000);
    uint64_t v4 = (_OWORD *)swift_bridgeObjectRetain();
    *(_DWORD *)(v0 + 1664) = enum case for URL.DirectoryHint.inferFromPath(_:);
    *(void *)(v0 + 1424) = 0;
    *(_OWORD *)(v0 + 1408) = 0u;
    *(_OWORD *)(v0 + 1392) = 0u;
    *(_OWORD *)(v0 + 1376) = 0u;
    long long v5 = v4[7];
    long long v7 = v4[8];
    long long v6 = v4[9];
    *(_OWORD *)(v0 + 704) = v4[6];
    *(_OWORD *)(v0 + 720) = v5;
    *(_OWORD *)(v0 + 736) = v7;
    *(_OWORD *)(v0 + 752) = v6;
    long long v8 = v4[2];
    long long v9 = v4[3];
    long long v10 = v4[5];
    *(_OWORD *)(v0 + 672) = v4[4];
    *(_OWORD *)(v0 + 688) = v10;
    *(_OWORD *)(v0 + 640) = v8;
    *(_OWORD *)(v0 + 656) = v9;
    long long v11 = v4[9];
    long long v13 = v4[6];
    long long v12 = v4[7];
    *(_OWORD *)(v0 + 608) = v4[8];
    *(_OWORD *)(v0 + 624) = v11;
    *(_OWORD *)(v0 + 576) = v13;
    *(_OWORD *)(v0 + 592) = v12;
    long long v14 = v4[2];
    long long v15 = v4[3];
    long long v16 = v4[5];
    *(_OWORD *)(v0 + 544) = v4[4];
    *(_OWORD *)(v0 + 560) = v16;
    *(_OWORD *)(v0 + 512) = v14;
    *(_OWORD *)(v0 + 528) = v15;
    sub_1003ADAB4(v0 + 640);
    static Logger.restore.getter();
    sub_1003ADAB4(v0 + 640);
    id v17 = v3;
    sub_1003ADAB4(v0 + 640);
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 1360);
    uint64_t v23 = *(void *)(v0 + 1304);
    uint64_t v24 = *(void *)(v0 + 1296);
    uint64_t v25 = *(void **)(v0 + 1000);
    if (v21)
    {
      uint64_t v97 = *(void *)(v0 + 1296);
      uint64_t v26 = swift_slowAlloc();
      id v92 = (void *)swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412546;
      *(void *)(v0 + 952) = v25;
      uint64_t v95 = v23;
      id v27 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v92 = v25;

      *(_WORD *)(v26 + 12) = 2082;
      uint64_t v28 = sub_10017B40C();
      *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v28, v29, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v26, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
      v30(v22, v97);
    }
    else
    {

      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);

      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v30(v22, v24);
    }
    *(void *)(v0 + 1432) = v30;
    int v51 = *(_DWORD *)(v0 + 1660);
    int v52 = *(_DWORD *)(v0 + 1656);
    int v53 = *(_DWORD *)(v0 + 868);
    uint64_t v54 = *(void *)(v0 + 1104);
    uint64_t v55 = *(void *)(v0 + 1064);
    uint64_t v56 = *(void *)(v0 + 1056);
    long long v57 = *(_OWORD *)(v0 + 1040);
    uint64_t v58 = *(void *)(v0 + 1016);
    id v59 = *(void **)(v0 + 1000);
    char v60 = *(unsigned char *)(v0 + 865);
    uint64_t v61 = *(void *)(v0 + 976);
    char v62 = *(unsigned char *)(v0 + 866) & 1;
    char v63 = *(unsigned char *)(v0 + 867) & 1;
    char v64 = *(unsigned char *)(v0 + 1676) & 1;
    *(void *)(v0 + 1440) = *(void *)(v0 + 760);
    long long v65 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 344) = v65;
    long long v66 = *(_OWORD *)(v0 + 624);
    *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 376) = v66;
    long long v67 = *(_OWORD *)(v0 + 528);
    *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 280) = v67;
    long long v68 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 312) = v68;
    *(void *)(v0 + 392) = v58;
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
    *(_OWORD *)(v0 + 416) = v57;
    *(void *)(v0 + 432) = v56;
    *(void *)(v0 + 440) = v55;
    long long v69 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 464) = v69;
    *(void *)(v0 + 480) = v54;
    *(_DWORD *)(v0 + 488) = v53;
    *(_DWORD *)(v0 + 492) = v52;
    *(_DWORD *)(v0 + 496) = v51;
    *(unsigned char *)(v0 + 500) = v62;
    *(unsigned char *)(v0 + 501) = v63;
    *(unsigned char *)(v0 + 502) = v64;
    *(unsigned char *)(v0 + 503) = v60;
    *(void *)(v0 + 504) = v59;
    *(void *)(v0 + 256) = v59;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 488);
    long long v70 = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v0 + 192) = v70;
    long long v71 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 64) = v71;
    long long v72 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 264);
    *(_OWORD *)(v0 + 32) = v72;
    long long v73 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 128) = v73;
    long long v74 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 96) = v74;
    long long v75 = *(_OWORD *)(v0 + 472);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 456);
    *(_OWORD *)(v0 + 224) = v75;
    long long v76 = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 160) = v76;
    sub_1003ADAB4(v0 + 640);
    id v77 = v59;
    sub_10018AB28(v61);
    uint64_t v78 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v78;
    *uint64_t v78 = v0;
    v78[1] = sub_100392D40;
    return sub_10041F514();
  }
  else
  {
    uint64_t v31 = *(void **)(v0 + 1000);
    if (_swiftEmptyArrayStorage[2])
    {
      static Logger.restore.getter();
      id v32 = v31;
      swift_bridgeObjectRetain_n();
      id v33 = v32;
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      BOOL v36 = os_log_type_enabled(v34, v35);
      uint64_t v37 = *(void *)(v0 + 1328);
      uint64_t v38 = *(void *)(v0 + 1304);
      uint64_t v39 = *(void *)(v0 + 1296);
      uint64_t v40 = *(void **)(v0 + 1000);
      if (v36)
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v93 = v34;
        id v42 = (void *)swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 138412546;
        uint64_t v99 = v94;
        *(void *)(v0 + 880) = v40;
        uint64_t v96 = v39;
        id v43 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v42 = v40;

        *(_WORD *)(v41 + 12) = 2082;
        uint64_t v44 = _swiftEmptyArrayStorage[2];
        *(void *)(v0 + 888) = v44;
        uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v101 = v45;
        v46._uint64_t countAndFlagsBits = 32;
        v46._object = (void *)0xE100000000000000;
        String.append(_:)(v46);
        v47._uint64_t countAndFlagsBits = 0x65726F7473657220;
        v47._object = (void *)0xE900000000000073;
        String.append(_:)(v47);
        if (v44 == 1) {
          uint64_t v48 = 0;
        }
        else {
          uint64_t v48 = 115;
        }
        if (v44 == 1) {
          unint64_t v49 = 0xE000000000000000;
        }
        else {
          unint64_t v49 = 0xE100000000000000;
        }
        unint64_t v50 = v49;
        String.append(_:)(*(Swift::String *)&v48);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 896) = sub_1000143F4(v100, v101, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v93, v35, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v41, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v96);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
    }
    else
    {
      static Logger.restore.getter();
      id v80 = v31;
      id v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.default.getter();
      BOOL v83 = os_log_type_enabled(v81, v82);
      uint64_t v84 = *(void **)(v0 + 1000);
      if (v83)
      {
        id v85 = (uint8_t *)swift_slowAlloc();
        id v86 = (void *)swift_slowAlloc();
        *(_DWORD *)id v85 = 138412290;
        *(void *)(v0 + 904) = v84;
        id v87 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v86 = v84;

        _os_log_impl((void *)&_mh_execute_header, v81, v82, "[%@] No restores discovered", v85, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v81 = *(NSObject **)(v0 + 1000);
      }
      uint64_t v88 = *(void *)(v0 + 1320);
      uint64_t v89 = *(void *)(v0 + 1304);
      uint64_t v90 = *(void *)(v0 + 1296);

      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v88, v90);
    }
    swift_beginAccess();
    uint64_t v98 = *(void *)(v0 + 928);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v91 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v91(v98);
  }
}

uint64_t sub_100392D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[182] = a1;
  v4[183] = a2;
  v4[184] = v2;
  swift_task_dealloc();
  if (v2) {
    long long v5 = sub_100398928;
  }
  else {
    long long v5 = sub_100392E5C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100392E5C()
{
  uint64_t v212 = v0;
  uint64_t v1 = *(void *)(v0 + 1440);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 1224);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    long long v6 = &_swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v7 = *(void *)(v0 + 1288);
      uint64_t v8 = *(void *)(v0 + 1216);
      sub_1003AEFD4(v4, v7, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v9 = v7 + *(int *)(v8 + 60);
      if ((*(unsigned char *)(v9 + 8) & 1) == 0)
      {
        Swift::UInt64 v10 = *(void *)v9;
        sub_1003AEFD4(*(void *)(v0 + 1288), *(void *)(v0 + 1280), (uint64_t (*)(void))type metadata accessor for Restore);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v0 + 944) = v6;
        unint64_t v14 = sub_100452A6C(v10);
        uint64_t v15 = v6[2];
        BOOL v16 = (v12 & 1) == 0;
        uint64_t v17 = v15 + v16;
        if (__OFADD__(v15, v16))
        {
          __break(1u);
LABEL_71:
          __break(1u);
          return _swift_task_switch(v17, v12, v13);
        }
        char v18 = v12;
        if (v6[3] >= v17)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10052D92C();
          }
        }
        else
        {
          sub_100526F90(v17, isUniquelyReferenced_nonNull_native);
          unint64_t v19 = sub_100452A6C(v10);
          if ((v18 & 1) != (v20 & 1))
          {
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          unint64_t v14 = v19;
        }
        long long v6 = *(void **)(v0 + 944);
        uint64_t v21 = *(void *)(v0 + 1280);
        if (v18)
        {
          sub_1003ADD4C(v21, v6[7] + v14 * v5);
        }
        else
        {
          v6[(v14 >> 6) + 8] |= 1 << v14;
          *(void *)(v6[6] + 8 * v14) = v10;
          uint64_t v17 = sub_1003A4FE4(v21, v6[7] + v14 * v5);
          uint64_t v22 = v6[2];
          BOOL v23 = __OFADD__(v22, 1);
          uint64_t v24 = v22 + 1;
          if (v23) {
            goto LABEL_71;
          }
          _OWORD v6[2] = v24;
        }
        swift_bridgeObjectRelease();
      }
      sub_1003AF03C(*(void *)(v0 + 1288), (uint64_t (*)(void))type metadata accessor for Restore);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
  }
  long long v6 = &_swiftEmptyDictionarySingleton;
LABEL_18:
  *(void *)(v0 + 1480) = v6;
  uint64_t v25 = *(void *)(*(void *)(v0 + 1456) + 16);
  *(void *)(v0 + 1488) = v25;
  if (v25)
  {
    uint64_t v26 = *(void *)(v0 + 1192);
    *(_DWORD *)(v0 + 1668) = *(_DWORD *)(v26 + 80);
    *(void *)(v0 + 1496) = *(void *)(v26 + 72);
    uint64_t v27 = *(void *)(v0 + 1472);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    while (1)
    {
      *(void *)(v0 + 1528) = v29;
      *(void *)(v0 + 1520) = v28;
      *(void *)(v0 + 1512) = v28;
      *(void *)(v0 + 1504) = v27;
      os_log_type_t v35 = *(uint64_t **)(v0 + 1208);
      sub_1003AEFD4(*(void *)(v0 + 1456)+ ((*(unsigned __int8 *)(v0 + 1668) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1668))+ *(void *)(v0 + 1496) * v29, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      swift_bridgeObjectRetain();
      Swift::UInt64 v38 = sub_1004BD574(v36, v37);
      if ((v39 & 1) == 0)
      {
        if (*(void *)(*(void *)(v0 + 1480) + 16))
        {
          unint64_t v40 = sub_100452A6C(v38);
          if (v41) {
            break;
          }
        }
      }
      uint64_t v42 = *(void *)(v0 + 1208);
      uint64_t v43 = *(void *)(v0 + 1200);
      uint64_t v44 = *(void **)(v0 + 1000);
      static Logger.restore.getter();
      sub_1003AEFD4(v42, v43, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      id v45 = v44;
      Swift::String v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v196 = *(void *)(v0 + 1296);
        uint64_t v199 = *(void *)(v0 + 1336);
        uint64_t v202 = *(void *)(v0 + 1208);
        uint64_t typeb = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
        uint64_t v48 = *(uint64_t **)(v0 + 1200);
        unint64_t v49 = *(void **)(v0 + 1000);
        uint64_t v50 = swift_slowAlloc();
        int v51 = (void *)swift_slowAlloc();
        uint64_t v210 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 138412546;
        *(void *)(v50 + 4) = v49;
        *int v51 = v49;

        *(_WORD *)(v50 + 12) = 2082;
        uint64_t v52 = *v48;
        unint64_t v53 = v48[1];
        swift_bridgeObjectRetain();
        *(void *)(v50 + 14) = sub_1000143F4(v52, v53, &v210);
        swift_bridgeObjectRelease();
        sub_1003AF03C((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] Unable to find matching restore for itemID: %{public}s", (uint8_t *)v50, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        typeb(v199, v196);
        sub_1003AF03C(v202, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      }
      else
      {
        uint64_t v30 = *(void *)(v0 + 1336);
        uint64_t v31 = *(void *)(v0 + 1296);
        uint64_t v32 = *(void *)(v0 + 1208);
        uint64_t v33 = *(void *)(v0 + 1200);
        id v34 = *(void **)(v0 + 1000);

        sub_1003AF03C(v33, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        v28(v30, v31);
        sub_1003AF03C(v32, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      }
      uint64_t v29 = *(void *)(v0 + 1528) + 1;
      if (v29 == *(void *)(v0 + 1488))
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_29;
      }
    }
    uint64_t v99 = *(void *)(v0 + 1272);
    uint64_t v100 = *(void *)(v0 + 1264);
    uint64_t v101 = *(void *)(v0 + 1256);
    uint64_t typec = *(void *)(v0 + 1248);
    uint64_t v102 = *(int **)(v0 + 1216);
    uint64_t v103 = *(void *)(v0 + 1208);
    uint64_t v104 = *(int **)(v0 + 1184);
    uint64_t v105 = *(void *)(v0 + 1168);
    uint64_t v193 = *(void *)(v0 + 1160);
    uint64_t v203 = *(void **)(v0 + 1000);
    uint64_t v106 = *(void *)(*(void *)(v0 + 1480) + 56);
    uint64_t v107 = *(void *)(*(void *)(v0 + 1224) + 72);
    *(void *)(v0 + 1536) = v107;
    sub_1003AEFD4(v106 + v107 * v40, v100, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v197 = v99;
    sub_1003A4FE4(v100, v99);
    sub_1003AEFD4(v99, v101, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v108 = v103 + v104[6];
    uint64_t v109 = v101 + v102[17];
    sub_10001729C(v109, &qword_10065C3C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v109, v108, v193);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v105 + 56))(v109, 0, 1, v193);
    unint64_t v110 = (uint64_t *)(v103 + v104[8]);
    uint64_t v111 = *v110;
    uint64_t v112 = v110[1];
    uint64_t v113 = (void *)(v101 + v102[18]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v113 = v111;
    v113[1] = v112;
    sub_10018ACC4(v103 + v104[7], v101 + v102[23]);
    *(unsigned char *)(v101 + v102[11]) = 4;
    static Logger.restore.getter();
    sub_1003AEFD4(v197, typec, (uint64_t (*)(void))type metadata accessor for Restore);
    id v114 = v203;
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.default.getter();
    BOOL v117 = os_log_type_enabled(v115, v116);
    uint64_t v118 = *(void *)(v0 + 1248);
    if (v117)
    {
      uint64_t v119 = *(void *)(v0 + 1216);
      uint64_t v120 = *(void *)(v0 + 1000);
      uint64_t v121 = swift_slowAlloc();
      uint64_t v122 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v121 = 138412546;
      *(void *)(v121 + 4) = v120;
      void *v122 = v120;
      *(_WORD *)(v121 + 12) = 2112;
      uint64_t v123 = *(void **)(v118 + *(int *)(v119 + 20));
      *(void *)(v121 + 14) = v123;
      v122[1] = v123;
      id v124 = v123;
      sub_1003AF03C(v118, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "[%@][%@] Updated restore ADP", (uint8_t *)v121, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003AF03C(v118, (uint64_t (*)(void))type metadata accessor for Restore);
    }
    uint64_t v155 = *(void *)(v0 + 1352);
    uint64_t v156 = *(void *)(v0 + 1304);
    uint64_t v157 = *(void *)(v0 + 1296);
    uint64_t v158 = *(void *)(v0 + 1008);

    *(void *)(v0 + 1544) = (v156 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v28(v155, v157);
    uint64_t v12 = *(void *)(v158 + 152);
    *(void *)(v0 + 1552) = v12;
    uint64_t v17 = (uint64_t)sub_1003941F8;
    uint64_t v13 = 0;
    return _swift_task_switch(v17, v12, v13);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_29:
    if (*(void *)(*(void *)(v0 + 1464) + 16))
    {
      uint64_t v54 = (void *)swift_task_alloc();
      *(void *)(v0 + 1576) = v54;
      *uint64_t v54 = v0;
      v54[1] = sub_100396888;
      uint64_t v55 = *(void *)(v0 + 1464);
      uint64_t v56 = *(void *)(v0 + 1440);
      uint64_t v57 = *(void *)(v0 + 1000);
      char v58 = *(unsigned char *)(v0 + 865);
      return sub_1003A8038(v55, v56, v58, v57);
    }
    else
    {
      char v60 = (_OWORD *)(v0 + 264);
      sub_1003ADBCC(v0 + 264);
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void *)(v0 + 1424);
      uint64_t v62 = *(void *)(v0 + 1416);
      uint64_t v63 = *(void *)(v0 + 1408);
      uint64_t v64 = *(void *)(v0 + 1400);
      uint64_t v65 = *(void *)(v0 + 1392);
      uint64_t v66 = *(void *)(v0 + 1384);
      *(void *)(v0 + 1600) = v66;
      *(void *)(v0 + 1592) = v64;
      *(void *)(v0 + 1584) = v62;
      uint64_t v67 = *(void *)(v0 + 1376) + 1;
      if (v67 == *(void *)(v0 + 1368))
      {
        swift_bridgeObjectRelease();
        if (v62)
        {
          uint64_t v68 = *(void *)(v0 + 1008);
          *(void *)(v0 + 768) = v61;
          *(void *)(v0 + 776) = v62;
          *(void *)(v0 + 784) = v63;
          *(void *)(v0 + 792) = v64;
          *(void *)(v0 + 800) = v65;
          *(void *)(v0 + 808) = v66;
          uint64_t v69 = *(void *)(v68 + 216);
          os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
          long long v70 = (void *)swift_task_alloc();
          *(void *)(v0 + 1608) = v70;
          *long long v70 = v0;
          v70[1] = sub_10039746C;
          uint64_t v71 = *(void *)(v0 + 1000);
          return type(v0 + 768, v69, v71);
        }
        else
        {
          uint64_t v159 = *(void *)(v0 + 928);
          os_log_type_t v160 = *(void **)(v0 + 1000);
          if (*(void *)(v159 + 16))
          {
            static Logger.restore.getter();
            id v161 = v160;
            swift_bridgeObjectRetain_n();
            id v162 = v161;
            unsigned __int8 v163 = Logger.logObject.getter();
            os_log_type_t v164 = static os_log_type_t.default.getter();
            BOOL v165 = os_log_type_enabled(v163, v164);
            uint64_t v166 = *(void *)(v0 + 1328);
            uint64_t v167 = *(void *)(v0 + 1304);
            uint64_t v168 = *(void *)(v0 + 1296);
            uint64_t v169 = *(void **)(v0 + 1000);
            if (v165)
            {
              uint64_t v194 = *(void *)(v0 + 1304);
              uint64_t v170 = swift_slowAlloc();
              uint64_t v171 = (void *)swift_slowAlloc();
              uint64_t v209 = swift_slowAlloc();
              *(_DWORD *)uint64_t v170 = 138412546;
              uint64_t v201 = v166;
              *(void *)(v0 + 880) = v169;
              uint64_t v198 = v168;
              id v172 = v169;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v171 = v169;

              *(_WORD *)(v170 + 12) = 2082;
              uint64_t v173 = *(void *)(v159 + 16);
              *(void *)(v0 + 888) = v173;
              uint64_t v210 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v211 = v174;
              v175._uint64_t countAndFlagsBits = 32;
              v175._object = (void *)0xE100000000000000;
              String.append(_:)(v175);
              v176._uint64_t countAndFlagsBits = 0x65726F7473657220;
              v176._object = (void *)0xE900000000000073;
              String.append(_:)(v176);
              if (v173 == 1) {
                uint64_t v177 = 0;
              }
              else {
                uint64_t v177 = 115;
              }
              if (v173 == 1) {
                unint64_t v178 = 0xE000000000000000;
              }
              else {
                unint64_t v178 = 0xE100000000000000;
              }
              unint64_t v179 = v178;
              String.append(_:)(*(Swift::String *)&v177);
              swift_bridgeObjectRelease();
              *(void *)(v0 + 896) = sub_1000143F4(v210, v211, &v209);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v163, v164, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v170, 0x16u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v201, v198);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v166, v168);
            }
          }
          else
          {
            static Logger.restore.getter();
            id v180 = v160;
            uint64_t v181 = Logger.logObject.getter();
            os_log_type_t v182 = static os_log_type_t.default.getter();
            BOOL v183 = os_log_type_enabled(v181, v182);
            uint64_t v184 = *(void **)(v0 + 1000);
            if (v183)
            {
              uint64_t v185 = (uint8_t *)swift_slowAlloc();
              uint64_t v186 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v185 = 138412290;
              *(void *)(v0 + 904) = v184;
              id v187 = v184;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v186 = v184;

              _os_log_impl((void *)&_mh_execute_header, v181, v182, "[%@] No restores discovered", v185, 0xCu);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v181 = *(NSObject **)(v0 + 1000);
            }
            uint64_t v188 = *(void *)(v0 + 1320);
            uint64_t v189 = *(void *)(v0 + 1304);
            uint64_t v190 = *(void *)(v0 + 1296);

            (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v188, v190);
          }
          swift_beginAccess();
          uint64_t v204 = *(void *)(v0 + 928);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v191 = *(uint64_t (**)(uint64_t))(v0 + 8);
          return v191(v204);
        }
      }
      else
      {
        *(void *)(v0 + 1376) = v67;
        long long v72 = *(void **)(v0 + 1000);
        long long v73 = (_OWORD *)(*(void *)(v0 + 968) + (v67 << 7));
        long long v74 = v73[5];
        long long v76 = v73[2];
        long long v75 = v73[3];
        *(_OWORD *)(v0 + 672) = v73[4];
        *(_OWORD *)(v0 + 688) = v74;
        *(_OWORD *)(v0 + 640) = v76;
        *(_OWORD *)(v0 + 656) = v75;
        long long v77 = v73[9];
        long long v79 = v73[6];
        long long v78 = v73[7];
        *(_OWORD *)(v0 + 736) = v73[8];
        *(_OWORD *)(v0 + 752) = v77;
        *(_OWORD *)(v0 + 704) = v79;
        *(_OWORD *)(v0 + 720) = v78;
        long long v80 = v73[5];
        long long v82 = v73[2];
        long long v81 = v73[3];
        *(_OWORD *)(v0 + 544) = v73[4];
        *(_OWORD *)(v0 + 560) = v80;
        *(_OWORD *)(v0 + 512) = v82;
        *(_OWORD *)(v0 + 528) = v81;
        long long v83 = v73[9];
        long long v85 = v73[6];
        long long v84 = v73[7];
        *(_OWORD *)(v0 + 608) = v73[8];
        *(_OWORD *)(v0 + 624) = v83;
        *(_OWORD *)(v0 + 576) = v85;
        *(_OWORD *)(v0 + 592) = v84;
        sub_1003ADAB4(v0 + 640);
        static Logger.restore.getter();
        sub_1003ADAB4(v0 + 640);
        id v86 = v72;
        sub_1003ADAB4(v0 + 640);
        id v87 = v86;
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t typea = static os_log_type_t.default.getter();
        BOOL v89 = os_log_type_enabled(v88, typea);
        uint64_t v90 = *(void *)(v0 + 1360);
        uint64_t v91 = *(void *)(v0 + 1304);
        uint64_t v92 = *(void *)(v0 + 1296);
        uint64_t v93 = *(void **)(v0 + 1000);
        if (v89)
        {
          uint64_t v200 = *(void *)(v0 + 1360);
          uint64_t v94 = swift_slowAlloc();
          uint64_t v192 = (void *)swift_slowAlloc();
          uint64_t v210 = swift_slowAlloc();
          *(_DWORD *)uint64_t v94 = 138412546;
          *(void *)(v0 + 952) = v93;
          uint64_t v195 = v92;
          id v95 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v192 = v93;

          *(_WORD *)(v94 + 12) = 2082;
          uint64_t v96 = sub_10017B40C();
          *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v96, v97, &v210);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1003ADB40(v0 + 640);
          sub_1003ADB40(v0 + 640);
          _os_log_impl((void *)&_mh_execute_header, v88, typea, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v94, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
          v98(v200, v195);
        }
        else
        {

          sub_1003ADB40(v0 + 640);
          sub_1003ADB40(v0 + 640);

          uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
          v98(v90, v92);
        }
        *(void *)(v0 + 1432) = v98;
        int v125 = *(_DWORD *)(v0 + 1660);
        int v126 = *(_DWORD *)(v0 + 1656);
        int v127 = *(_DWORD *)(v0 + 868);
        uint64_t v128 = *(void *)(v0 + 1104);
        uint64_t v129 = *(void *)(v0 + 1064);
        uint64_t v130 = *(void *)(v0 + 1056);
        long long v131 = *(_OWORD *)(v0 + 1040);
        uint64_t v132 = *(void *)(v0 + 1016);
        uint64_t v133 = *(void **)(v0 + 1000);
        char v134 = *(unsigned char *)(v0 + 865);
        uint64_t v135 = *(void *)(v0 + 976);
        char v136 = *(unsigned char *)(v0 + 866) & 1;
        char v137 = *(unsigned char *)(v0 + 867) & 1;
        char v138 = *(unsigned char *)(v0 + 1676) & 1;
        *(void *)(v0 + 1440) = *(void *)(v0 + 760);
        long long v139 = *(_OWORD *)(v0 + 592);
        *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
        *(_OWORD *)(v0 + 344) = v139;
        long long v140 = *(_OWORD *)(v0 + 624);
        *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
        *(_OWORD *)(v0 + 376) = v140;
        long long v141 = *(_OWORD *)(v0 + 528);
        _OWORD *v60 = *(_OWORD *)(v0 + 512);
        *(_OWORD *)(v0 + 280) = v141;
        long long v142 = *(_OWORD *)(v0 + 560);
        *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
        *(_OWORD *)(v0 + 312) = v142;
        *(void *)(v0 + 392) = v132;
        *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
        *(_OWORD *)(v0 + 416) = v131;
        *(void *)(v0 + 432) = v130;
        *(void *)(v0 + 440) = v129;
        long long v143 = *(_OWORD *)(v0 + 1088);
        *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
        *(_OWORD *)(v0 + 464) = v143;
        *(void *)(v0 + 480) = v128;
        *(_DWORD *)(v0 + 488) = v127;
        *(_DWORD *)(v0 + 492) = v126;
        *(_DWORD *)(v0 + 496) = v125;
        *(unsigned char *)(v0 + 500) = v136;
        *(unsigned char *)(v0 + 501) = v137;
        *(unsigned char *)(v0 + 502) = v138;
        *(unsigned char *)(v0 + 503) = v134;
        *(void *)(v0 + 504) = v133;
        long long v144 = *(_OWORD *)(v0 + 408);
        *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
        *(_OWORD *)(v0 + 160) = v144;
        long long v145 = *(_OWORD *)(v0 + 312);
        *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
        *(_OWORD *)(v0 + 64) = v145;
        long long v146 = *(_OWORD *)(v0 + 280);
        *(_OWORD *)(v0 + 16) = *v60;
        *(_OWORD *)(v0 + 32) = v146;
        long long v147 = *(_OWORD *)(v0 + 376);
        *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
        *(_OWORD *)(v0 + 128) = v147;
        long long v148 = *(_OWORD *)(v0 + 344);
        *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
        *(_OWORD *)(v0 + 96) = v148;
        long long v149 = *(_OWORD *)(v0 + 440);
        *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
        *(_OWORD *)(v0 + 192) = v149;
        long long v150 = *(_OWORD *)(v0 + 456);
        long long v151 = *(_OWORD *)(v0 + 472);
        long long v152 = *(_OWORD *)(v0 + 488);
        *(void *)(v0 + 256) = *(void *)(v0 + 504);
        *(_OWORD *)(v0 + 224) = v151;
        *(_OWORD *)(v0 + 240) = v152;
        *(_OWORD *)(v0 + 208) = v150;
        sub_1003ADAB4(v0 + 640);
        id v153 = v133;
        sub_10018AB28(v135);
        unsigned __int8 v154 = (void *)swift_task_alloc();
        *(void *)(v0 + 1448) = v154;
        *unsigned __int8 v154 = v0;
        v154[1] = sub_100392D40;
        return sub_10041F514();
      }
    }
  }
}

uint64_t sub_1003941F8()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1664);
  uint64_t v18 = *(void *)(v0 + 1504);
  uint64_t v2 = *(void *)(v0 + 1152);
  uint64_t v3 = *(void *)(v0 + 1144);
  uint64_t v4 = *(void *)(v0 + 1136);
  uint64_t v5 = *(void *)(v0 + 1128);
  uint64_t v6 = *(void *)(v0 + 1120);
  uint64_t v7 = *(void *)(v0 + 1112);
  (*(void (**)(uint64_t))(v3 + 16))(v2);
  *(void *)(v0 + 840) = UUID.uuidString.getter();
  *(void *)(v0 + 848) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v5, v1, v7);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1003ADD04(&qword_100661910, (void (*)(uint64_t))type metadata accessor for Restore);
  uint64_t v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v18)
  {
    swift_release();
    *(void *)(v0 + 1568) = v18;
    (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1176), *(void *)(v0 + 1160));
    uint64_t v13 = sub_100395804;
  }
  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    swift_release();
    Data.write(to:options:)();
    *(void *)(v0 + 1560) = 0;
    uint64_t v14 = *(void *)(v0 + 1176);
    uint64_t v15 = *(void *)(v0 + 1168);
    uint64_t v16 = *(void *)(v0 + 1160);
    sub_100013510(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    uint64_t v13 = sub_100394484;
  }
  return _swift_task_switch(v13, 0, 0);
}

uint64_t sub_100394484()
{
  uint64_t v208 = v0;
  sub_1003AEFD4(*(void *)(v0 + 1256), *(void *)(v0 + 1240), (uint64_t (*)(void))type metadata accessor for Restore);
  unint64_t v1 = *(void *)(v0 + 928);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v1 = sub_100290934(0, *(void *)(v1 + 16) + 1, 1, v1);
  }
  unint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if (v3 >= v2 >> 1) {
    unint64_t v1 = sub_100290934(v2 > 1, v3 + 1, 1, v1);
  }
  uint64_t v4 = *(void *)(v0 + 1536);
  uint64_t v5 = *(void *)(v0 + 1272);
  uint64_t v6 = *(void *)(v0 + 1256);
  uint64_t v7 = *(void *)(v0 + 1240);
  uint64_t v8 = *(void *)(v0 + 1224);
  uint64_t v9 = *(void *)(v0 + 1208);
  *(void *)(v1 + 16) = v3 + 1;
  sub_1003A4FE4(v7, v1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v4 * v3);
  *(void *)(v0 + 928) = v1;
  sub_1003AF03C(v6, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1003AF03C(v5, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1003AF03C(v9, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
  uint64_t v10 = *(void *)(v0 + 1528) + 1;
  if (v10 == *(void *)(v0 + 1488))
  {
LABEL_6:
    swift_bridgeObjectRelease_n();
    if (*(void *)(*(void *)(v0 + 1464) + 16))
    {
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 1576) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_100396888;
      uint64_t v12 = *(void *)(v0 + 1464);
      uint64_t v13 = *(void *)(v0 + 1440);
      uint64_t v14 = *(void *)(v0 + 1000);
      char v15 = *(unsigned char *)(v0 + 865);
      return sub_1003A8038(v12, v13, v15, v14);
    }
    else
    {
      long long v81 = (_OWORD *)(v0 + 264);
      sub_1003ADBCC(v0 + 264);
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      swift_bridgeObjectRelease();
      uint64_t v82 = *(void *)(v0 + 1424);
      uint64_t v83 = *(void *)(v0 + 1416);
      uint64_t v84 = *(void *)(v0 + 1408);
      uint64_t v85 = *(void *)(v0 + 1400);
      uint64_t v86 = *(void *)(v0 + 1392);
      uint64_t v87 = *(void *)(v0 + 1384);
      *(void *)(v0 + 1600) = v87;
      *(void *)(v0 + 1592) = v85;
      *(void *)(v0 + 1584) = v83;
      uint64_t v88 = *(void *)(v0 + 1376) + 1;
      if (v88 == *(void *)(v0 + 1368))
      {
        swift_bridgeObjectRelease();
        if (v83)
        {
          uint64_t v89 = *(void *)(v0 + 1008);
          *(void *)(v0 + 768) = v82;
          *(void *)(v0 + 776) = v83;
          *(void *)(v0 + 784) = v84;
          *(void *)(v0 + 792) = v85;
          *(void *)(v0 + 800) = v86;
          *(void *)(v0 + 808) = v87;
          uint64_t v90 = *(void *)(v89 + 216);
          os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
          uint64_t v91 = (void *)swift_task_alloc();
          *(void *)(v0 + 1608) = v91;
          *uint64_t v91 = v0;
          v91[1] = sub_10039746C;
          uint64_t v92 = *(void *)(v0 + 1000);
          return type(v0 + 768, v90, v92);
        }
        else
        {
          uint64_t v150 = *(void *)(v0 + 928);
          long long v151 = *(void **)(v0 + 1000);
          if (*(void *)(v150 + 16))
          {
            static Logger.restore.getter();
            id v152 = v151;
            swift_bridgeObjectRetain_n();
            id v153 = v152;
            unsigned __int8 v154 = Logger.logObject.getter();
            os_log_type_t v155 = static os_log_type_t.default.getter();
            BOOL v156 = os_log_type_enabled(v154, v155);
            uint64_t v157 = *(void *)(v0 + 1328);
            uint64_t v158 = *(void *)(v0 + 1304);
            uint64_t v159 = *(void *)(v0 + 1296);
            os_log_type_t v160 = *(void **)(v0 + 1000);
            if (v156)
            {
              uint64_t v198 = *(void *)(v0 + 1296);
              uint64_t v189 = *(void *)(v0 + 1304);
              uint64_t v161 = swift_slowAlloc();
              id v162 = (void *)swift_slowAlloc();
              uint64_t v205 = swift_slowAlloc();
              *(_DWORD *)uint64_t v161 = 138412546;
              uint64_t v195 = v157;
              *(void *)(v0 + 880) = v160;
              id v163 = v160;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *id v162 = v160;

              *(_WORD *)(v161 + 12) = 2082;
              uint64_t v164 = *(void *)(v150 + 16);
              *(void *)(v0 + 888) = v164;
              uint64_t v206 = dispatch thunk of CustomStringConvertible.description.getter();
              unint64_t v207 = v165;
              v166._uint64_t countAndFlagsBits = 32;
              v166._object = (void *)0xE100000000000000;
              String.append(_:)(v166);
              v167._uint64_t countAndFlagsBits = 0x65726F7473657220;
              v167._object = (void *)0xE900000000000073;
              String.append(_:)(v167);
              if (v164 == 1) {
                uint64_t v168 = 0;
              }
              else {
                uint64_t v168 = 115;
              }
              if (v164 == 1) {
                unint64_t v169 = 0xE000000000000000;
              }
              else {
                unint64_t v169 = 0xE100000000000000;
              }
              unint64_t v170 = v169;
              String.append(_:)(*(Swift::String *)&v168);
              swift_bridgeObjectRelease();
              *(void *)(v0 + 896) = sub_1000143F4(v206, v207, &v205);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v154, v155, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v161, 0x16u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v195, v198);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v157, v159);
            }
          }
          else
          {
            static Logger.restore.getter();
            id v176 = v151;
            uint64_t v177 = Logger.logObject.getter();
            os_log_type_t v178 = static os_log_type_t.default.getter();
            BOOL v179 = os_log_type_enabled(v177, v178);
            id v180 = *(void **)(v0 + 1000);
            if (v179)
            {
              uint64_t v181 = (uint8_t *)swift_slowAlloc();
              uint64_t v199 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v181 = 138412290;
              *(void *)(v0 + 904) = v180;
              id v182 = v180;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v199 = v180;

              _os_log_impl((void *)&_mh_execute_header, v177, v178, "[%@] No restores discovered", v181, 0xCu);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v177 = *(NSObject **)(v0 + 1000);
            }
            uint64_t v183 = *(void *)(v0 + 1320);
            uint64_t v184 = *(void *)(v0 + 1304);
            uint64_t v185 = *(void *)(v0 + 1296);

            (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v183, v185);
          }
          swift_beginAccess();
          *(void *)uint64_t typeb = *(void *)(v0 + 928);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v186 = *(uint64_t (**)(void))(v0 + 8);
          return v186(*(void *)typeb);
        }
      }
      else
      {
        *(void *)(v0 + 1376) = v88;
        uint64_t v93 = *(void **)(v0 + 1000);
        uint64_t v94 = (_OWORD *)(*(void *)(v0 + 968) + (v88 << 7));
        long long v95 = v94[5];
        long long v97 = v94[2];
        long long v96 = v94[3];
        *(_OWORD *)(v0 + 672) = v94[4];
        *(_OWORD *)(v0 + 688) = v95;
        *(_OWORD *)(v0 + 640) = v97;
        *(_OWORD *)(v0 + 656) = v96;
        long long v98 = v94[9];
        long long v100 = v94[6];
        long long v99 = v94[7];
        *(_OWORD *)(v0 + 736) = v94[8];
        *(_OWORD *)(v0 + 752) = v98;
        *(_OWORD *)(v0 + 704) = v100;
        *(_OWORD *)(v0 + 720) = v99;
        long long v101 = v94[5];
        long long v103 = v94[2];
        long long v102 = v94[3];
        *(_OWORD *)(v0 + 544) = v94[4];
        *(_OWORD *)(v0 + 560) = v101;
        *(_OWORD *)(v0 + 512) = v103;
        *(_OWORD *)(v0 + 528) = v102;
        long long v104 = v94[9];
        long long v106 = v94[6];
        long long v105 = v94[7];
        *(_OWORD *)(v0 + 608) = v94[8];
        *(_OWORD *)(v0 + 624) = v104;
        *(_OWORD *)(v0 + 576) = v106;
        *(_OWORD *)(v0 + 592) = v105;
        sub_1003ADAB4(v0 + 640);
        static Logger.restore.getter();
        sub_1003ADAB4(v0 + 640);
        id v107 = v93;
        sub_1003ADAB4(v0 + 640);
        id v108 = v107;
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t typea = static os_log_type_t.default.getter();
        BOOL v110 = os_log_type_enabled(v109, typea);
        uint64_t v111 = *(void *)(v0 + 1360);
        uint64_t v112 = *(void *)(v0 + 1304);
        uint64_t v113 = *(NSObject **)(v0 + 1296);
        id v114 = *(void **)(v0 + 1000);
        if (v110)
        {
          uint64_t v194 = *(void *)(v0 + 1360);
          uint64_t v115 = swift_slowAlloc();
          id v187 = (void *)swift_slowAlloc();
          uint64_t v206 = swift_slowAlloc();
          *(_DWORD *)uint64_t v115 = 138412546;
          *(void *)(v0 + 952) = v114;
          os_log_t v190 = v113;
          id v116 = v114;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v187 = v114;

          *(_WORD *)(v115 + 12) = 2082;
          BOOL v117 = sub_10017B40C();
          *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v117, v118, &v206);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1003ADB40(v0 + 640);
          sub_1003ADB40(v0 + 640);
          _os_log_impl((void *)&_mh_execute_header, v109, typea, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v115, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v119 = *(void (**)(uint64_t, os_log_t))(v112 + 8);
          v119(v194, v190);
        }
        else
        {

          sub_1003ADB40(v0 + 640);
          sub_1003ADB40(v0 + 640);

          uint64_t v119 = *(void (**)(uint64_t, os_log_t))(v112 + 8);
          v119(v111, v113);
        }
        *(void *)(v0 + 1432) = v119;
        int v120 = *(_DWORD *)(v0 + 1660);
        int v121 = *(_DWORD *)(v0 + 1656);
        int v122 = *(_DWORD *)(v0 + 868);
        uint64_t v123 = *(void *)(v0 + 1104);
        uint64_t v124 = *(void *)(v0 + 1064);
        uint64_t v125 = *(void *)(v0 + 1056);
        long long v126 = *(_OWORD *)(v0 + 1040);
        uint64_t v127 = *(void *)(v0 + 1016);
        uint64_t v128 = *(void **)(v0 + 1000);
        char v129 = *(unsigned char *)(v0 + 865);
        uint64_t v130 = *(void *)(v0 + 976);
        char v131 = *(unsigned char *)(v0 + 866) & 1;
        char v132 = *(unsigned char *)(v0 + 867) & 1;
        char v133 = *(unsigned char *)(v0 + 1676) & 1;
        *(void *)(v0 + 1440) = *(void *)(v0 + 760);
        long long v134 = *(_OWORD *)(v0 + 592);
        *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
        *(_OWORD *)(v0 + 344) = v134;
        long long v135 = *(_OWORD *)(v0 + 624);
        *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
        *(_OWORD *)(v0 + 376) = v135;
        long long v136 = *(_OWORD *)(v0 + 528);
        *long long v81 = *(_OWORD *)(v0 + 512);
        *(_OWORD *)(v0 + 280) = v136;
        long long v137 = *(_OWORD *)(v0 + 560);
        *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
        *(_OWORD *)(v0 + 312) = v137;
        *(void *)(v0 + 392) = v127;
        *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
        *(_OWORD *)(v0 + 416) = v126;
        *(void *)(v0 + 432) = v125;
        *(void *)(v0 + 440) = v124;
        long long v138 = *(_OWORD *)(v0 + 1088);
        *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
        *(_OWORD *)(v0 + 464) = v138;
        *(void *)(v0 + 480) = v123;
        *(_DWORD *)(v0 + 488) = v122;
        *(_DWORD *)(v0 + 492) = v121;
        *(_DWORD *)(v0 + 496) = v120;
        *(unsigned char *)(v0 + 500) = v131;
        *(unsigned char *)(v0 + 501) = v132;
        *(unsigned char *)(v0 + 502) = v133;
        *(unsigned char *)(v0 + 503) = v129;
        *(void *)(v0 + 504) = v128;
        long long v139 = *(_OWORD *)(v0 + 408);
        *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
        *(_OWORD *)(v0 + 160) = v139;
        long long v140 = *(_OWORD *)(v0 + 312);
        *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
        *(_OWORD *)(v0 + 64) = v140;
        long long v141 = *(_OWORD *)(v0 + 280);
        *(_OWORD *)(v0 + 16) = *v81;
        *(_OWORD *)(v0 + 32) = v141;
        long long v142 = *(_OWORD *)(v0 + 376);
        *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
        *(_OWORD *)(v0 + 128) = v142;
        long long v143 = *(_OWORD *)(v0 + 344);
        *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
        *(_OWORD *)(v0 + 96) = v143;
        long long v144 = *(_OWORD *)(v0 + 440);
        *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
        *(_OWORD *)(v0 + 192) = v144;
        long long v145 = *(_OWORD *)(v0 + 456);
        long long v146 = *(_OWORD *)(v0 + 472);
        long long v147 = *(_OWORD *)(v0 + 488);
        *(void *)(v0 + 256) = *(void *)(v0 + 504);
        *(_OWORD *)(v0 + 224) = v146;
        *(_OWORD *)(v0 + 240) = v147;
        *(_OWORD *)(v0 + 208) = v145;
        sub_1003ADAB4(v0 + 640);
        id v148 = v128;
        sub_10018AB28(v130);
        long long v149 = (void *)swift_task_alloc();
        *(void *)(v0 + 1448) = v149;
        void *v149 = v0;
        v149[1] = sub_100392D40;
        return sub_10041F514();
      }
    }
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 1560);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1512);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
    while (1)
    {
      *(void *)(v0 + 1528) = v10;
      *(void *)(v0 + 1520) = v19;
      *(void *)(v0 + 1512) = v18;
      *(void *)(v0 + 1504) = v17;
      char v20 = *(uint64_t **)(v0 + 1208);
      sub_1003AEFD4(*(void *)(v0 + 1456)+ ((*(unsigned __int8 *)(v0 + 1668) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1668))+ *(void *)(v0 + 1496) * v10, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      swift_bridgeObjectRetain();
      Swift::UInt64 v23 = sub_1004BD574(v21, v22);
      if ((v24 & 1) == 0)
      {
        if (*(void *)(*(void *)(v0 + 1480) + 16))
        {
          unint64_t v25 = sub_100452A6C(v23);
          if (v26) {
            break;
          }
        }
      }
      uint64_t v27 = *(void *)(v0 + 1208);
      uint64_t v28 = *(void *)(v0 + 1200);
      uint64_t v29 = *(void **)(v0 + 1000);
      static Logger.restore.getter();
      sub_1003AEFD4(v27, v28, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      id v30 = v29;
      uint64_t v31 = Logger.logObject.getter();
      for (os_log_type_t i = static os_log_type_t.error.getter();
            !os_log_type_enabled(v31, i);
            os_log_type_t i = static os_log_type_t.error.getter())
      {
        uint64_t v43 = *(void *)(v0 + 1336);
        uint64_t v44 = *(void *)(v0 + 1296);
        uint64_t v45 = *(void *)(v0 + 1208);
        uint64_t v46 = *(void *)(v0 + 1200);
        os_log_type_t v47 = *(void **)(v0 + 1000);

        sub_1003AF03C(v46, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        v18(v43, v44);
        sub_1003AF03C(v45, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        uint64_t v48 = *(void *)(v0 + 1528) + 1;
        if (v48 == *(void *)(v0 + 1488)) {
          goto LABEL_6;
        }
        *(void *)(v0 + 1528) = v48;
        *(void *)(v0 + 1520) = v18;
        *(void *)(v0 + 1512) = v18;
        *(void *)(v0 + 1504) = v17;
        unint64_t v49 = *(uint64_t **)(v0 + 1208);
        sub_1003AEFD4(*(void *)(v0 + 1456)+ ((*(unsigned __int8 *)(v0 + 1668) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1668))+ *(void *)(v0 + 1496) * v48, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        uint64_t v50 = *v49;
        uint64_t v51 = v49[1];
        swift_bridgeObjectRetain();
        Swift::UInt64 v52 = sub_1004BD574(v50, v51);
        if ((v53 & 1) == 0)
        {
          if (*(void *)(*(void *)(v0 + 1480) + 16))
          {
            unint64_t v25 = sub_100452A6C(v52);
            if (v54) {
              goto LABEL_22;
            }
          }
        }
        uint64_t v39 = *(void *)(v0 + 1208);
        uint64_t v40 = *(void *)(v0 + 1200);
        char v41 = *(void **)(v0 + 1000);
        static Logger.restore.getter();
        sub_1003AEFD4(v39, v40, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
        id v42 = v41;
        uint64_t v31 = Logger.logObject.getter();
      }
      uint64_t v191 = *(void *)(v0 + 1296);
      uint64_t v193 = *(void *)(v0 + 1336);
      uint64_t v196 = *(void *)(v0 + 1208);
      uint64_t typec = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v33 = *(uint64_t **)(v0 + 1200);
      id v34 = *(void **)(v0 + 1000);
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v206 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138412546;
      *(void *)(v35 + 4) = v34;
      *uint64_t v36 = v34;

      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v37 = *v33;
      unint64_t v38 = v33[1];
      swift_bridgeObjectRetain();
      *(void *)(v35 + 14) = sub_1000143F4(v37, v38, &v206);
      swift_bridgeObjectRelease();
      sub_1003AF03C((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      _os_log_impl((void *)&_mh_execute_header, v31, i, "[%@] Unable to find matching restore for itemID: %{public}s", (uint8_t *)v35, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      typec(v193, v191);
      sub_1003AF03C(v196, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
      uint64_t v10 = *(void *)(v0 + 1528) + 1;
      uint64_t v18 = v19;
      if (v10 == *(void *)(v0 + 1488)) {
        goto LABEL_6;
      }
    }
    uint64_t v18 = v19;
LABEL_22:
    uint64_t v55 = *(void *)(v0 + 1272);
    uint64_t v56 = *(void *)(v0 + 1264);
    uint64_t v57 = *(void *)(v0 + 1256);
    uint64_t typed = *(void *)(v0 + 1248);
    char v58 = *(int **)(v0 + 1216);
    uint64_t v59 = *(void *)(v0 + 1208);
    char v60 = *(int **)(v0 + 1184);
    uint64_t v61 = *(void *)(v0 + 1168);
    uint64_t v188 = *(void *)(v0 + 1160);
    uint64_t v197 = *(void **)(v0 + 1000);
    uint64_t v62 = *(void *)(*(void *)(v0 + 1480) + 56);
    uint64_t v63 = *(void *)(*(void *)(v0 + 1224) + 72);
    *(void *)(v0 + 1536) = v63;
    sub_1003AEFD4(v62 + v63 * v25, v56, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v192 = v55;
    sub_1003A4FE4(v56, v55);
    sub_1003AEFD4(v55, v57, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v64 = v59 + v60[6];
    uint64_t v65 = v57 + v58[17];
    sub_10001729C(v65, &qword_10065C3C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v65, v64, v188);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v65, 0, 1, v188);
    uint64_t v66 = (uint64_t *)(v59 + v60[8]);
    uint64_t v67 = *v66;
    uint64_t v68 = v66[1];
    uint64_t v69 = (void *)(v57 + v58[18]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void *v69 = v67;
    v69[1] = v68;
    sub_10018ACC4(v59 + v60[7], v57 + v58[23]);
    *(unsigned char *)(v57 + v58[11]) = 4;
    static Logger.restore.getter();
    sub_1003AEFD4(v192, typed, (uint64_t (*)(void))type metadata accessor for Restore);
    id v70 = v197;
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    BOOL v73 = os_log_type_enabled(v71, v72);
    uint64_t v74 = *(void *)(v0 + 1248);
    if (v73)
    {
      uint64_t v75 = *(void *)(v0 + 1216);
      uint64_t v76 = *(void *)(v0 + 1000);
      uint64_t v77 = swift_slowAlloc();
      long long v78 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 138412546;
      *(void *)(v77 + 4) = v76;
      *long long v78 = v76;
      *(_WORD *)(v77 + 12) = 2112;
      long long v79 = *(void **)(v74 + *(int *)(v75 + 20));
      *(void *)(v77 + 14) = v79;
      v78[1] = v79;
      id v80 = v79;
      sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "[%@][%@] Updated restore ADP", (uint8_t *)v77, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
    }
    uint64_t v171 = *(void *)(v0 + 1352);
    uint64_t v172 = *(void *)(v0 + 1304);
    uint64_t v173 = *(void *)(v0 + 1296);
    uint64_t v174 = *(void *)(v0 + 1008);

    *(void *)(v0 + 1544) = (v172 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v18(v171, v173);
    uint64_t v175 = *(void *)(v174 + 152);
    *(void *)(v0 + 1552) = v175;
    return _swift_task_switch(sub_1003941F8, v175, 0);
  }
}

uint64_t sub_100395804()
{
  uint64_t v158 = v0;
  id v153 = (_OWORD *)(v0 + 264);
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 936) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to save checkpoint: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v1;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 1520);
  uint64_t v8 = *(void *)(v0 + 1344);
  uint64_t v9 = *(void *)(v0 + 1296);
  uint64_t v10 = *(void *)(v0 + 1272);
  uint64_t v11 = *(void *)(v0 + 1256);
  uint64_t v148 = *(void *)(v0 + 1208);

  v7(v8, v9);
  swift_willThrow();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_1003ADBCC((uint64_t)v153);
  sub_1003AF03C(v11, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1003AF03C(v10, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1003AF03C(v148, (uint64_t (*)(void))type metadata accessor for AvailableRestore);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void, void))(v0 + 1520);
  *(void *)(v0 + 1616) = *(void *)(v0 + 1568);
  uint64_t v13 = *(void **)(v0 + 1000);
  static Logger.restore.getter();
  id v14 = v13;
  swift_errorRetain();
  id v15 = v14;
  swift_errorRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void **)(v0 + 1000);
  if (v18)
  {
    uint64_t v20 = swift_slowAlloc();
    os_log_t log = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412546;
    *(void *)(v0 + 912) = v19;
    long long v149 = v16;
    uint64_t v21 = v12;
    id v22 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    log->Class isa = (Class)v19;

    uint64_t v12 = v21;
    uint64_t v16 = v149;
    *(_WORD *)(v20 + 12) = 2114;
    swift_errorRetain();
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 920) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    log[1].Class isa = (Class)v23;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v149, v17, "[%@] Error fetching restores: %{public}@", (uint8_t *)v20, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v24 = *(void *)(v0 + 1440);
  uint64_t v25 = *(void *)(v0 + 1312);
  uint64_t v26 = *(void *)(v0 + 1296);

  v12(v25, v26);
  uint64_t v27 = *(void *)(v24 + 16);
  *(void *)(v0 + 1624) = v27;
  if (v27)
  {
    uint64_t v28 = *(void *)(v0 + 1440);
    uint64_t v29 = *(void *)(v0 + 1224);
    int v30 = *(_DWORD *)(v29 + 80);
    *(_DWORD *)(v0 + 1672) = v30;
    *(void *)(v0 + 1632) = *(void *)(v29 + 72);
    *(void *)(v0 + 1640) = 0;
    uint64_t v31 = *(void *)(v0 + 1232);
    uint64_t v32 = v28 + ((v30 + 32) & ~(unint64_t)v30);
    swift_bridgeObjectRetain();
    sub_1003AEFD4(v32, v31, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 1648) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_100397B50;
    uint64_t v34 = *(void *)(v0 + 1232);
    uint64_t v35 = *(void *)(v0 + 1000);
    return sub_10037D240(v34, v35);
  }
  *(void *)(v0 + 872) = *(void *)(v0 + 1616);
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 864) == 1 && (uint64_t v37 = *(void *)(v0 + 992)) != 0)
  {
    uint64_t v38 = *(void *)(v0 + 984);
    swift_bridgeObjectRetain();
    char v39 = sub_10017B664(v38, v37);
    swift_errorRelease();
    if (v39)
    {
      uint64_t v40 = (uint64_t *)(v0 + 992);
      char v41 = (uint64_t *)(v0 + 984);
      sub_1003ADCB4(*(void *)(v0 + 1424), *(void *)(v0 + 1416));
      uint64_t v42 = *(void *)(v0 + 688);
      uint64_t v43 = *(void *)(v0 + 696);
      uint64_t v44 = *(void *)(v0 + 640);
      uint64_t v45 = *(void *)(v0 + 648);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1003ADB40(v0 + 640);
      goto LABEL_18;
    }
    sub_1003ADB40(v0 + 640);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_errorRelease();
    sub_1003ADB40(v0 + 640);
  }
  char v41 = (uint64_t *)(v0 + 1424);
  uint64_t v40 = (uint64_t *)(v0 + 1416);
  uint64_t v42 = *(void *)(v0 + 1408);
  uint64_t v43 = *(void *)(v0 + 1400);
  uint64_t v44 = *(void *)(v0 + 1392);
  uint64_t v45 = *(void *)(v0 + 1384);
LABEL_18:
  uint64_t v46 = *v40;
  uint64_t v47 = *v41;
  *(void *)(v0 + 1600) = v45;
  *(void *)(v0 + 1592) = v43;
  *(void *)(v0 + 1584) = v46;
  uint64_t v48 = *(void *)(v0 + 1376) + 1;
  if (v48 == *(void *)(v0 + 1368))
  {
    swift_bridgeObjectRelease();
    if (v46)
    {
      uint64_t v49 = *(void *)(v0 + 1008);
      *(void *)(v0 + 768) = v47;
      *(void *)(v0 + 776) = v46;
      *(void *)(v0 + 784) = v42;
      *(void *)(v0 + 792) = v43;
      *(void *)(v0 + 800) = v44;
      *(void *)(v0 + 808) = v45;
      uint64_t v50 = *(void *)(v49 + 216);
      unsigned __int8 v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
      uint64_t v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 1608) = v51;
      *uint64_t v51 = v0;
      v51[1] = sub_10039746C;
      uint64_t v52 = *(void *)(v0 + 1000);
      return v154(v0 + 768, v50, v52);
    }
    else
    {
      uint64_t v111 = *(void *)(v0 + 928);
      uint64_t v112 = *(void **)(v0 + 1000);
      if (*(void *)(v111 + 16))
      {
        static Logger.restore.getter();
        id v113 = v112;
        swift_bridgeObjectRetain_n();
        id v114 = v113;
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.default.getter();
        BOOL v117 = os_log_type_enabled(v115, v116);
        uint64_t v118 = *(void *)(v0 + 1328);
        uint64_t v119 = *(void *)(v0 + 1304);
        uint64_t v120 = *(void *)(v0 + 1296);
        int v121 = *(void **)(v0 + 1000);
        if (v117)
        {
          *(void *)os_log_type_t type = *(void *)(v0 + 1328);
          uint64_t v122 = swift_slowAlloc();
          uint64_t v123 = (void *)swift_slowAlloc();
          uint64_t v155 = swift_slowAlloc();
          *(_DWORD *)uint64_t v122 = 138412546;
          *(void *)(v0 + 880) = v121;
          uint64_t v146 = v119;
          id v124 = v121;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v123 = v121;

          *(_WORD *)(v122 + 12) = 2082;
          uint64_t v125 = *(void *)(v111 + 16);
          *(void *)(v0 + 888) = v125;
          uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v157 = v126;
          v127._uint64_t countAndFlagsBits = 32;
          v127._object = (void *)0xE100000000000000;
          String.append(_:)(v127);
          v128._uint64_t countAndFlagsBits = 0x65726F7473657220;
          v128._object = (void *)0xE900000000000073;
          String.append(_:)(v128);
          if (v125 == 1) {
            uint64_t v129 = 0;
          }
          else {
            uint64_t v129 = 115;
          }
          if (v125 == 1) {
            unint64_t v130 = 0xE000000000000000;
          }
          else {
            unint64_t v130 = 0xE100000000000000;
          }
          unint64_t v131 = v130;
          String.append(_:)(*(Swift::String *)&v129);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 896) = sub_1000143F4(v156, v157, &v155);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v122, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(os_log_type_t *, uint64_t))(v146 + 8))(*(os_log_type_t **)type, v120);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
        }
      }
      else
      {
        static Logger.restore.getter();
        id v132 = v112;
        char v133 = Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.default.getter();
        BOOL v135 = os_log_type_enabled(v133, v134);
        long long v136 = *(void **)(v0 + 1000);
        if (v135)
        {
          long long v137 = (uint8_t *)swift_slowAlloc();
          long long v138 = (void *)swift_slowAlloc();
          *(_DWORD *)long long v137 = 138412290;
          *(void *)(v0 + 904) = v136;
          id v139 = v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v138 = v136;

          _os_log_impl((void *)&_mh_execute_header, v133, v134, "[%@] No restores discovered", v137, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          char v133 = *(NSObject **)(v0 + 1000);
        }
        uint64_t v140 = *(void *)(v0 + 1320);
        uint64_t v141 = *(void *)(v0 + 1304);
        uint64_t v142 = *(void *)(v0 + 1296);

        (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v140, v142);
      }
      swift_beginAccess();
      *(void *)os_log_type_t typea = *(void *)(v0 + 928);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v143 = *(uint64_t (**)(void))(v0 + 8);
      return v143(*(void *)typea);
    }
  }
  else
  {
    *(void *)(v0 + 1424) = v47;
    *(void *)(v0 + 1416) = v46;
    *(void *)(v0 + 1408) = v42;
    *(void *)(v0 + 1400) = v43;
    *(void *)(v0 + 1392) = v44;
    *(void *)(v0 + 1384) = v45;
    *(void *)(v0 + 1376) = v48;
    char v53 = *(void **)(v0 + 1000);
    char v54 = (_OWORD *)(*(void *)(v0 + 968) + (v48 << 7));
    long long v55 = v54[5];
    long long v57 = v54[2];
    long long v56 = v54[3];
    *(_OWORD *)(v0 + 672) = v54[4];
    *(_OWORD *)(v0 + 688) = v55;
    *(_OWORD *)(v0 + 640) = v57;
    *(_OWORD *)(v0 + 656) = v56;
    long long v58 = v54[9];
    long long v60 = v54[6];
    long long v59 = v54[7];
    *(_OWORD *)(v0 + 736) = v54[8];
    *(_OWORD *)(v0 + 752) = v58;
    *(_OWORD *)(v0 + 704) = v60;
    *(_OWORD *)(v0 + 720) = v59;
    long long v62 = v54[4];
    long long v61 = v54[5];
    long long v63 = v54[3];
    *(_OWORD *)(v0 + 512) = v54[2];
    *(_OWORD *)(v0 + 528) = v63;
    *(_OWORD *)(v0 + 544) = v62;
    *(_OWORD *)(v0 + 560) = v61;
    long long v64 = v54[9];
    long long v65 = v54[6];
    long long v66 = v54[7];
    *(_OWORD *)(v0 + 608) = v54[8];
    *(_OWORD *)(v0 + 624) = v64;
    *(_OWORD *)(v0 + 576) = v65;
    *(_OWORD *)(v0 + 592) = v66;
    sub_1003ADAB4(v0 + 640);
    static Logger.restore.getter();
    sub_1003ADAB4(v0 + 640);
    id v67 = v53;
    sub_1003ADAB4(v0 + 640);
    id v68 = v67;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    uint64_t v72 = *(void *)(v0 + 1360);
    uint64_t v73 = *(void *)(v0 + 1304);
    uint64_t v74 = *(void *)(v0 + 1296);
    uint64_t v75 = *(void **)(v0 + 1000);
    if (v71)
    {
      uint64_t v150 = *(void *)(v0 + 1296);
      uint64_t v76 = swift_slowAlloc();
      long long v144 = (void *)swift_slowAlloc();
      uint64_t v156 = swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 138412546;
      *(void *)(v0 + 952) = v75;
      os_log_type_t v145 = v70;
      id v77 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v144 = v75;

      *(_WORD *)(v76 + 12) = 2082;
      long long v78 = sub_10017B40C();
      *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v78, v79, &v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);
      _os_log_impl((void *)&_mh_execute_header, v69, v145, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v76, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v80 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v80(v72, v150);
    }
    else
    {

      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);

      id v80 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v80(v72, v74);
    }
    *(void *)(v0 + 1432) = v80;
    int v81 = *(_DWORD *)(v0 + 1660);
    int v82 = *(_DWORD *)(v0 + 1656);
    int v83 = *(_DWORD *)(v0 + 868);
    uint64_t v84 = *(void *)(v0 + 1104);
    uint64_t v85 = *(void *)(v0 + 1064);
    uint64_t v86 = *(void *)(v0 + 1056);
    long long v87 = *(_OWORD *)(v0 + 1040);
    uint64_t v88 = *(void *)(v0 + 1016);
    uint64_t v89 = *(void **)(v0 + 1000);
    char v90 = *(unsigned char *)(v0 + 865);
    uint64_t v91 = *(void *)(v0 + 976);
    char v92 = *(unsigned char *)(v0 + 866) & 1;
    char v93 = *(unsigned char *)(v0 + 867) & 1;
    char v94 = *(unsigned char *)(v0 + 1676) & 1;
    *(void *)(v0 + 1440) = *(void *)(v0 + 760);
    long long v95 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 344) = v95;
    long long v96 = *(_OWORD *)(v0 + 624);
    *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 376) = v96;
    long long v97 = *(_OWORD *)(v0 + 528);
    *id v153 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 280) = v97;
    long long v98 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 312) = v98;
    *(void *)(v0 + 392) = v88;
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
    *(_OWORD *)(v0 + 416) = v87;
    *(void *)(v0 + 432) = v86;
    *(void *)(v0 + 440) = v85;
    long long v99 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 464) = v99;
    *(void *)(v0 + 480) = v84;
    *(_DWORD *)(v0 + 488) = v83;
    *(_DWORD *)(v0 + 492) = v82;
    *(_DWORD *)(v0 + 496) = v81;
    *(unsigned char *)(v0 + 500) = v92;
    *(unsigned char *)(v0 + 501) = v93;
    *(unsigned char *)(v0 + 502) = v94;
    *(unsigned char *)(v0 + 503) = v90;
    *(void *)(v0 + 504) = v89;
    long long v100 = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 160) = v100;
    long long v101 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 64) = v101;
    long long v102 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 16) = *v153;
    *(_OWORD *)(v0 + 32) = v102;
    long long v103 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 128) = v103;
    long long v104 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 96) = v104;
    long long v105 = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v0 + 192) = v105;
    long long v106 = *(_OWORD *)(v0 + 456);
    long long v107 = *(_OWORD *)(v0 + 472);
    long long v108 = *(_OWORD *)(v0 + 488);
    *(void *)(v0 + 256) = *(void *)(v0 + 504);
    *(_OWORD *)(v0 + 224) = v107;
    *(_OWORD *)(v0 + 240) = v108;
    *(_OWORD *)(v0 + 208) = v106;
    sub_1003ADAB4(v0 + 640);
    id v109 = v89;
    sub_10018AB28(v91);
    BOOL v110 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v110;
    *BOOL v110 = v0;
    v110[1] = sub_100392D40;
    return sub_10041F514();
  }
}

uint64_t sub_100396888()
{
  uint64_t v1 = *v0 + 640;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_1003ADB40(v1);
  return _swift_task_switch(sub_1003969AC, 0, 0);
}

uint64_t sub_1003969AC()
{
  uint64_t v116 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 264);
  sub_1003ADBCC(v0 + 264);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 1424);
  uint64_t v3 = *(void *)(v0 + 1416);
  uint64_t v4 = *(void *)(v0 + 1408);
  uint64_t v5 = *(void *)(v0 + 1400);
  uint64_t v6 = *(void *)(v0 + 1392);
  uint64_t v7 = *(void *)(v0 + 1384);
  *(void *)(v0 + 1600) = v7;
  *(void *)(v0 + 1592) = v5;
  *(void *)(v0 + 1584) = v3;
  uint64_t v8 = *(void *)(v0 + 1376) + 1;
  if (v8 == *(void *)(v0 + 1368))
  {
    swift_bridgeObjectRelease();
    if (v3)
    {
      uint64_t v9 = *(void *)(v0 + 1008);
      *(void *)(v0 + 768) = v2;
      *(void *)(v0 + 776) = v3;
      *(void *)(v0 + 784) = v4;
      *(void *)(v0 + 792) = v5;
      *(void *)(v0 + 800) = v6;
      *(void *)(v0 + 808) = v7;
      uint64_t v10 = *(void *)(v9 + 216);
      os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 1608) = v11;
      *uint64_t v11 = v0;
      v11[1] = sub_10039746C;
      uint64_t v12 = *(void *)(v0 + 1000);
      return type(v0 + 768, v10, v12);
    }
    else
    {
      uint64_t v71 = *(void *)(v0 + 928);
      uint64_t v72 = *(void **)(v0 + 1000);
      if (*(void *)(v71 + 16))
      {
        static Logger.restore.getter();
        id v73 = v72;
        swift_bridgeObjectRetain_n();
        id v74 = v73;
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.default.getter();
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = *(void *)(v0 + 1328);
        uint64_t v79 = *(void *)(v0 + 1304);
        uint64_t v80 = *(void *)(v0 + 1296);
        int v81 = *(void **)(v0 + 1000);
        if (v77)
        {
          uint64_t v105 = *(void *)(v0 + 1304);
          uint64_t v82 = swift_slowAlloc();
          int v83 = (void *)swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v82 = 138412546;
          uint64_t v109 = v78;
          *(void *)(v0 + 880) = v81;
          uint64_t v107 = v80;
          id v84 = v81;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *int v83 = v81;

          *(_WORD *)(v82 + 12) = 2082;
          uint64_t v85 = *(void *)(v71 + 16);
          *(void *)(v0 + 888) = v85;
          uint64_t v114 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v115 = v86;
          v87._uint64_t countAndFlagsBits = 32;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          v88._uint64_t countAndFlagsBits = 0x65726F7473657220;
          v88._object = (void *)0xE900000000000073;
          String.append(_:)(v88);
          if (v85 == 1) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = 115;
          }
          if (v85 == 1) {
            unint64_t v90 = 0xE000000000000000;
          }
          else {
            unint64_t v90 = 0xE100000000000000;
          }
          unint64_t v91 = v90;
          String.append(_:)(*(Swift::String *)&v89);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 896) = sub_1000143F4(v114, v115, &v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v82, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v109, v107);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
        }
      }
      else
      {
        static Logger.restore.getter();
        id v92 = v72;
        char v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.default.getter();
        BOOL v95 = os_log_type_enabled(v93, v94);
        long long v96 = *(void **)(v0 + 1000);
        if (v95)
        {
          long long v97 = (uint8_t *)swift_slowAlloc();
          long long v98 = (void *)swift_slowAlloc();
          *(_DWORD *)long long v97 = 138412290;
          *(void *)(v0 + 904) = v96;
          id v99 = v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *long long v98 = v96;

          _os_log_impl((void *)&_mh_execute_header, v93, v94, "[%@] No restores discovered", v97, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          char v93 = *(NSObject **)(v0 + 1000);
        }
        uint64_t v100 = *(void *)(v0 + 1320);
        uint64_t v101 = *(void *)(v0 + 1304);
        uint64_t v102 = *(void *)(v0 + 1296);

        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
      }
      swift_beginAccess();
      uint64_t v110 = *(void *)(v0 + 928);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v103 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v103(v110);
    }
  }
  else
  {
    *(void *)(v0 + 1376) = v8;
    id v14 = *(void **)(v0 + 1000);
    id v15 = (_OWORD *)(*(void *)(v0 + 968) + (v8 << 7));
    long long v16 = v15[5];
    long long v18 = v15[2];
    long long v17 = v15[3];
    *(_OWORD *)(v0 + 672) = v15[4];
    *(_OWORD *)(v0 + 688) = v16;
    *(_OWORD *)(v0 + 640) = v18;
    *(_OWORD *)(v0 + 656) = v17;
    long long v19 = v15[9];
    long long v21 = v15[6];
    long long v20 = v15[7];
    *(_OWORD *)(v0 + 736) = v15[8];
    *(_OWORD *)(v0 + 752) = v19;
    *(_OWORD *)(v0 + 704) = v21;
    *(_OWORD *)(v0 + 720) = v20;
    long long v22 = v15[5];
    long long v24 = v15[2];
    long long v23 = v15[3];
    *(_OWORD *)(v0 + 544) = v15[4];
    *(_OWORD *)(v0 + 560) = v22;
    *(_OWORD *)(v0 + 512) = v24;
    *(_OWORD *)(v0 + 528) = v23;
    long long v25 = v15[9];
    long long v27 = v15[6];
    long long v26 = v15[7];
    *(_OWORD *)(v0 + 608) = v15[8];
    *(_OWORD *)(v0 + 624) = v25;
    *(_OWORD *)(v0 + 576) = v27;
    *(_OWORD *)(v0 + 592) = v26;
    sub_1003ADAB4(v0 + 640);
    static Logger.restore.getter();
    sub_1003ADAB4(v0 + 640);
    id v28 = v14;
    sub_1003ADAB4(v0 + 640);
    id v29 = v28;
    int v30 = Logger.logObject.getter();
    os_log_type_t typea = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v30, typea);
    uint64_t v32 = *(void *)(v0 + 1360);
    uint64_t v33 = *(void *)(v0 + 1304);
    uint64_t v34 = *(void *)(v0 + 1296);
    uint64_t v35 = *(void **)(v0 + 1000);
    if (v31)
    {
      uint64_t v108 = *(void *)(v0 + 1360);
      uint64_t v36 = swift_slowAlloc();
      long long v104 = (void *)swift_slowAlloc();
      uint64_t v114 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138412546;
      *(void *)(v0 + 952) = v35;
      uint64_t v106 = v34;
      id v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v104 = v35;

      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v38 = sub_10017B40C();
      *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v38, v39, &v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);
      _os_log_impl((void *)&_mh_execute_header, v30, typea, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v36, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v40(v108, v106);
    }
    else
    {

      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);

      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v40(v32, v34);
    }
    *(void *)(v0 + 1432) = v40;
    int v41 = *(_DWORD *)(v0 + 1660);
    int v42 = *(_DWORD *)(v0 + 1656);
    int v43 = *(_DWORD *)(v0 + 868);
    uint64_t v44 = *(void *)(v0 + 1104);
    uint64_t v45 = *(void *)(v0 + 1064);
    uint64_t v46 = *(void *)(v0 + 1056);
    long long v47 = *(_OWORD *)(v0 + 1040);
    uint64_t v48 = *(void *)(v0 + 1016);
    uint64_t v49 = *(void **)(v0 + 1000);
    char v50 = *(unsigned char *)(v0 + 865);
    uint64_t v51 = *(void *)(v0 + 976);
    char v52 = *(unsigned char *)(v0 + 866) & 1;
    char v53 = *(unsigned char *)(v0 + 867) & 1;
    char v54 = *(unsigned char *)(v0 + 1676) & 1;
    *(void *)(v0 + 1440) = *(void *)(v0 + 760);
    long long v55 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 344) = v55;
    long long v56 = *(_OWORD *)(v0 + 624);
    *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 376) = v56;
    long long v57 = *(_OWORD *)(v0 + 528);
    *uint64_t v1 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 280) = v57;
    long long v58 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 312) = v58;
    *(void *)(v0 + 392) = v48;
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
    *(_OWORD *)(v0 + 416) = v47;
    *(void *)(v0 + 432) = v46;
    *(void *)(v0 + 440) = v45;
    long long v59 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 464) = v59;
    *(void *)(v0 + 480) = v44;
    *(_DWORD *)(v0 + 488) = v43;
    *(_DWORD *)(v0 + 492) = v42;
    *(_DWORD *)(v0 + 496) = v41;
    *(unsigned char *)(v0 + 500) = v52;
    *(unsigned char *)(v0 + 501) = v53;
    *(unsigned char *)(v0 + 502) = v54;
    *(unsigned char *)(v0 + 503) = v50;
    *(void *)(v0 + 504) = v49;
    long long v60 = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 160) = v60;
    long long v61 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 64) = v61;
    long long v62 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 16) = *v1;
    *(_OWORD *)(v0 + 32) = v62;
    long long v63 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 128) = v63;
    long long v64 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 96) = v64;
    long long v65 = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v0 + 192) = v65;
    long long v66 = *(_OWORD *)(v0 + 456);
    long long v67 = *(_OWORD *)(v0 + 472);
    long long v68 = *(_OWORD *)(v0 + 488);
    *(void *)(v0 + 256) = *(void *)(v0 + 504);
    *(_OWORD *)(v0 + 224) = v67;
    *(_OWORD *)(v0 + 240) = v68;
    *(_OWORD *)(v0 + 208) = v66;
    sub_1003ADAB4(v0 + 640);
    id v69 = v49;
    sub_10018AB28(v51);
    os_log_type_t v70 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v70;
    *os_log_type_t v70 = v0;
    v70[1] = sub_100392D40;
    return sub_10041F514();
  }
}

uint64_t sub_10039746C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1003975C4, 0, 0);
}

uint64_t sub_1003975C4()
{
  int v42 = v0;
  uint64_t v1 = v0[116];
  uint64_t v2 = (void *)v0[125];
  if (*(void *)(v1 + 16))
  {
    static Logger.restore.getter();
    id v3 = v2;
    swift_bridgeObjectRetain_n();
    id v4 = v3;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[166];
    uint64_t v9 = v0[163];
    uint64_t v10 = v0[162];
    uint64_t v11 = (void *)v0[125];
    if (v7)
    {
      uint64_t v35 = v0[163];
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412546;
      uint64_t v37 = v8;
      v0[110] = v11;
      uint64_t v36 = v10;
      id v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v11;

      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v15 = *(void *)(v1 + 16);
      v0[111] = v15;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v41 = v16;
      v17._uint64_t countAndFlagsBits = 32;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = 0x65726F7473657220;
      v18._object = (void *)0xE900000000000073;
      String.append(_:)(v18);
      if (v15 == 1) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = 115;
      }
      if (v15 == 1) {
        unint64_t v20 = 0xE000000000000000;
      }
      else {
        unint64_t v20 = 0xE100000000000000;
      }
      unint64_t v21 = v20;
      String.append(_:)(*(Swift::String *)&v19);
      swift_bridgeObjectRelease();
      v0[112] = sub_1000143F4(v40, v41, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v12, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  else
  {
    static Logger.restore.getter();
    id v22 = v2;
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    long long v26 = (void *)v0[125];
    if (v25)
    {
      long long v27 = (uint8_t *)swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v27 = 138412290;
      v0[113] = v26;
      id v29 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v26;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] No restores discovered", v27, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      long long v23 = v0[125];
    }
    uint64_t v30 = v0[165];
    uint64_t v31 = v0[163];
    uint64_t v32 = v0[162];

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  }
  swift_beginAccess();
  uint64_t v38 = v0[116];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = (uint64_t (*)(uint64_t))v0[1];
  return v33(v38);
}

uint64_t sub_100397B50()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100397C4C, 0, 0);
}

uint64_t sub_100397C4C()
{
  uint64_t v129 = v0;
  uint64_t v1 = *(void *)(v0 + 1624);
  uint64_t v2 = *(void *)(v0 + 1640) + 1;
  sub_1003AF03C(*(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for Restore);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 872) = *(void *)(v0 + 1616);
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if (swift_dynamicCast() && *(unsigned char *)(v0 + 864) == 1 && (uint64_t v3 = *(void *)(v0 + 992)) != 0)
    {
      uint64_t v4 = *(void *)(v0 + 984);
      swift_bridgeObjectRetain();
      char v5 = sub_10017B664(v4, v3);
      swift_errorRelease();
      if (v5)
      {
        os_log_type_t v6 = (uint64_t *)(v0 + 992);
        BOOL v7 = (uint64_t *)(v0 + 984);
        sub_1003ADCB4(*(void *)(v0 + 1424), *(void *)(v0 + 1416));
        uint64_t v8 = *(void *)(v0 + 688);
        uint64_t v9 = *(void *)(v0 + 696);
        uint64_t v10 = *(void *)(v0 + 640);
        uint64_t v11 = *(void *)(v0 + 648);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1003ADB40(v0 + 640);
        uint64_t v12 = v8;
        goto LABEL_12;
      }
      sub_1003ADB40(v0 + 640);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1003ADB40(v0 + 640);
    }
    BOOL v7 = (uint64_t *)(v0 + 1424);
    os_log_type_t v6 = (uint64_t *)(v0 + 1416);
    uint64_t v12 = *(void *)(v0 + 1408);
    uint64_t v9 = *(void *)(v0 + 1400);
    uint64_t v10 = *(void *)(v0 + 1392);
    uint64_t v11 = *(void *)(v0 + 1384);
LABEL_12:
    uint64_t v18 = *v6;
    uint64_t v19 = *v7;
    *(void *)(v0 + 1600) = v11;
    *(void *)(v0 + 1592) = v9;
    *(void *)(v0 + 1584) = v18;
    uint64_t v20 = *(void *)(v0 + 1376) + 1;
    if (v20 == *(void *)(v0 + 1368))
    {
      uint64_t v21 = v12;
      swift_bridgeObjectRelease();
      if (v18)
      {
        uint64_t v22 = *(void *)(v0 + 1008);
        *(void *)(v0 + 768) = v19;
        *(void *)(v0 + 776) = v18;
        *(void *)(v0 + 784) = v21;
        *(void *)(v0 + 792) = v9;
        *(void *)(v0 + 800) = v10;
        *(void *)(v0 + 808) = v11;
        uint64_t v23 = *(void *)(v22 + 216);
        os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
        os_log_type_t v24 = (void *)swift_task_alloc();
        *(void *)(v0 + 1608) = v24;
        *os_log_type_t v24 = v0;
        v24[1] = sub_10039746C;
        uint64_t v25 = *(void *)(v0 + 1000);
        return type(v0 + 768, v23, v25);
      }
      else
      {
        uint64_t v84 = *(void *)(v0 + 928);
        uint64_t v85 = *(void **)(v0 + 1000);
        if (*(void *)(v84 + 16))
        {
          static Logger.restore.getter();
          id v86 = v85;
          swift_bridgeObjectRetain_n();
          id v87 = v86;
          Swift::String v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          BOOL v90 = os_log_type_enabled(v88, v89);
          uint64_t v91 = *(void *)(v0 + 1328);
          uint64_t v92 = *(void *)(v0 + 1304);
          uint64_t v93 = *(void *)(v0 + 1296);
          os_log_type_t v94 = *(void **)(v0 + 1000);
          if (v90)
          {
            uint64_t v118 = *(void *)(v0 + 1304);
            uint64_t v95 = swift_slowAlloc();
            long long v96 = (void *)swift_slowAlloc();
            uint64_t v126 = swift_slowAlloc();
            *(_DWORD *)uint64_t v95 = 138412546;
            uint64_t v122 = v91;
            *(void *)(v0 + 880) = v94;
            uint64_t v120 = v93;
            id v97 = v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v96 = v94;

            *(_WORD *)(v95 + 12) = 2082;
            uint64_t v98 = *(void *)(v84 + 16);
            *(void *)(v0 + 888) = v98;
            uint64_t v127 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v128 = v99;
            v100._uint64_t countAndFlagsBits = 32;
            v100._object = (void *)0xE100000000000000;
            String.append(_:)(v100);
            v101._uint64_t countAndFlagsBits = 0x65726F7473657220;
            v101._object = (void *)0xE900000000000073;
            String.append(_:)(v101);
            if (v98 == 1) {
              uint64_t v102 = 0;
            }
            else {
              uint64_t v102 = 115;
            }
            if (v98 == 1) {
              unint64_t v103 = 0xE000000000000000;
            }
            else {
              unint64_t v103 = 0xE100000000000000;
            }
            unint64_t v104 = v103;
            String.append(_:)(*(Swift::String *)&v102);
            swift_bridgeObjectRelease();
            *(void *)(v0 + 896) = sub_1000143F4(v127, v128, &v126);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v88, v89, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v95, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v122, v120);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
          }
        }
        else
        {
          static Logger.restore.getter();
          id v105 = v85;
          uint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.default.getter();
          BOOL v108 = os_log_type_enabled(v106, v107);
          uint64_t v109 = *(void **)(v0 + 1000);
          if (v108)
          {
            uint64_t v110 = (uint8_t *)swift_slowAlloc();
            uint64_t v111 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v110 = 138412290;
            *(void *)(v0 + 904) = v109;
            id v112 = v109;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v111 = v109;

            _os_log_impl((void *)&_mh_execute_header, v106, v107, "[%@] No restores discovered", v110, 0xCu);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v106 = *(NSObject **)(v0 + 1000);
          }
          uint64_t v113 = *(void *)(v0 + 1320);
          uint64_t v114 = *(void *)(v0 + 1304);
          uint64_t v115 = *(void *)(v0 + 1296);

          (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v113, v115);
        }
        swift_beginAccess();
        uint64_t v123 = *(void *)(v0 + 928);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v116 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v116(v123);
      }
    }
    else
    {
      long long v26 = (_OWORD *)(v0 + 264);
      *(void *)(v0 + 1424) = v19;
      *(void *)(v0 + 1416) = v18;
      *(void *)(v0 + 1408) = v12;
      *(void *)(v0 + 1400) = v9;
      *(void *)(v0 + 1392) = v10;
      *(void *)(v0 + 1384) = v11;
      *(void *)(v0 + 1376) = v20;
      long long v27 = *(void **)(v0 + 1000);
      id v28 = (_OWORD *)(*(void *)(v0 + 968) + (v20 << 7));
      long long v29 = v28[5];
      long long v31 = v28[2];
      long long v30 = v28[3];
      *(_OWORD *)(v0 + 672) = v28[4];
      *(_OWORD *)(v0 + 688) = v29;
      *(_OWORD *)(v0 + 640) = v31;
      *(_OWORD *)(v0 + 656) = v30;
      long long v32 = v28[9];
      long long v34 = v28[6];
      long long v33 = v28[7];
      *(_OWORD *)(v0 + 736) = v28[8];
      *(_OWORD *)(v0 + 752) = v32;
      *(_OWORD *)(v0 + 704) = v34;
      *(_OWORD *)(v0 + 720) = v33;
      long long v36 = v28[4];
      long long v35 = v28[5];
      long long v37 = v28[3];
      *(_OWORD *)(v0 + 512) = v28[2];
      *(_OWORD *)(v0 + 528) = v37;
      *(_OWORD *)(v0 + 544) = v36;
      *(_OWORD *)(v0 + 560) = v35;
      long long v38 = v28[9];
      long long v39 = v28[6];
      long long v40 = v28[7];
      *(_OWORD *)(v0 + 608) = v28[8];
      *(_OWORD *)(v0 + 624) = v38;
      *(_OWORD *)(v0 + 576) = v39;
      *(_OWORD *)(v0 + 592) = v40;
      sub_1003ADAB4(v0 + 640);
      static Logger.restore.getter();
      sub_1003ADAB4(v0 + 640);
      id v41 = v27;
      sub_1003ADAB4(v0 + 640);
      id v42 = v41;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t typea = static os_log_type_t.default.getter();
      BOOL v44 = os_log_type_enabled(v43, typea);
      uint64_t v45 = *(void *)(v0 + 1360);
      uint64_t v46 = *(void *)(v0 + 1304);
      uint64_t v47 = *(void *)(v0 + 1296);
      uint64_t v48 = *(void **)(v0 + 1000);
      if (v44)
      {
        uint64_t v121 = *(void *)(v0 + 1360);
        uint64_t v49 = swift_slowAlloc();
        uint64_t v117 = (void *)swift_slowAlloc();
        uint64_t v127 = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 138412546;
        *(void *)(v0 + 952) = v48;
        uint64_t v119 = v46;
        id v50 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v117 = v48;

        *(_WORD *)(v49 + 12) = 2082;
        uint64_t v51 = sub_10017B40C();
        *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v51, v52, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003ADB40(v0 + 640);
        sub_1003ADB40(v0 + 640);
        _os_log_impl((void *)&_mh_execute_header, v43, typea, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v49, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        char v53 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        v53(v121, v47);
      }
      else
      {

        sub_1003ADB40(v0 + 640);
        sub_1003ADB40(v0 + 640);

        char v53 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
        v53(v45, v47);
      }
      *(void *)(v0 + 1432) = v53;
      int v54 = *(_DWORD *)(v0 + 1660);
      int v55 = *(_DWORD *)(v0 + 1656);
      int v56 = *(_DWORD *)(v0 + 868);
      uint64_t v57 = *(void *)(v0 + 1104);
      uint64_t v58 = *(void *)(v0 + 1064);
      uint64_t v59 = *(void *)(v0 + 1056);
      long long v60 = *(_OWORD *)(v0 + 1040);
      uint64_t v61 = *(void *)(v0 + 1016);
      long long v62 = *(void **)(v0 + 1000);
      char v63 = *(unsigned char *)(v0 + 865);
      uint64_t v64 = *(void *)(v0 + 976);
      char v65 = *(unsigned char *)(v0 + 866) & 1;
      char v66 = *(unsigned char *)(v0 + 867) & 1;
      char v67 = *(unsigned char *)(v0 + 1676) & 1;
      *(void *)(v0 + 1440) = *(void *)(v0 + 760);
      long long v68 = *(_OWORD *)(v0 + 592);
      *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
      *(_OWORD *)(v0 + 344) = v68;
      long long v69 = *(_OWORD *)(v0 + 624);
      *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
      *(_OWORD *)(v0 + 376) = v69;
      long long v70 = *(_OWORD *)(v0 + 528);
      *long long v26 = *(_OWORD *)(v0 + 512);
      *(_OWORD *)(v0 + 280) = v70;
      long long v71 = *(_OWORD *)(v0 + 560);
      *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
      *(_OWORD *)(v0 + 312) = v71;
      *(void *)(v0 + 392) = v61;
      *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
      *(_OWORD *)(v0 + 416) = v60;
      *(void *)(v0 + 432) = v59;
      *(void *)(v0 + 440) = v58;
      long long v72 = *(_OWORD *)(v0 + 1088);
      *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
      *(_OWORD *)(v0 + 464) = v72;
      *(void *)(v0 + 480) = v57;
      *(_DWORD *)(v0 + 488) = v56;
      *(_DWORD *)(v0 + 492) = v55;
      *(_DWORD *)(v0 + 496) = v54;
      *(unsigned char *)(v0 + 500) = v65;
      *(unsigned char *)(v0 + 501) = v66;
      *(unsigned char *)(v0 + 502) = v67;
      *(unsigned char *)(v0 + 503) = v63;
      *(void *)(v0 + 504) = v62;
      long long v73 = *(_OWORD *)(v0 + 408);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
      *(_OWORD *)(v0 + 160) = v73;
      long long v74 = *(_OWORD *)(v0 + 312);
      *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
      *(_OWORD *)(v0 + 64) = v74;
      long long v75 = *(_OWORD *)(v0 + 280);
      *(_OWORD *)(v0 + 16) = *v26;
      *(_OWORD *)(v0 + 32) = v75;
      long long v76 = *(_OWORD *)(v0 + 376);
      *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
      *(_OWORD *)(v0 + 128) = v76;
      long long v77 = *(_OWORD *)(v0 + 344);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
      *(_OWORD *)(v0 + 96) = v77;
      long long v78 = *(_OWORD *)(v0 + 440);
      *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
      *(_OWORD *)(v0 + 192) = v78;
      long long v79 = *(_OWORD *)(v0 + 456);
      long long v80 = *(_OWORD *)(v0 + 472);
      long long v81 = *(_OWORD *)(v0 + 488);
      *(void *)(v0 + 256) = *(void *)(v0 + 504);
      *(_OWORD *)(v0 + 224) = v80;
      *(_OWORD *)(v0 + 240) = v81;
      *(_OWORD *)(v0 + 208) = v79;
      sub_1003ADAB4(v0 + 640);
      id v82 = v62;
      sub_10018AB28(v64);
      int v83 = (void *)swift_task_alloc();
      *(void *)(v0 + 1448) = v83;
      *int v83 = v0;
      v83[1] = sub_100392D40;
      return sub_10041F514();
    }
  }
  uint64_t v13 = *(void *)(v0 + 1640) + 1;
  *(void *)(v0 + 1640) = v13;
  sub_1003AEFD4(*(void *)(v0 + 1440)+ ((*(unsigned __int8 *)(v0 + 1672) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1672))+ *(void *)(v0 + 1632) * v13, *(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for Restore);
  id v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1648) = v14;
  *id v14 = v0;
  v14[1] = sub_100397B50;
  uint64_t v15 = *(void *)(v0 + 1232);
  uint64_t v16 = *(void *)(v0 + 1000);
  return sub_10037D240(v15, v16);
}

uint64_t sub_100398928()
{
  uint64_t v146 = v0;
  uint64_t v141 = (_OWORD *)(v0 + 264);
  sub_1003ADBCC(v0 + 264);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1432);
  *(void *)(v0 + 1616) = *(void *)(v0 + 1472);
  uint64_t v2 = *(void **)(v0 + 1000);
  static Logger.restore.getter();
  id v3 = v2;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    BOOL v7 = *(void **)(v0 + 1000);
    uint64_t v8 = swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    *(void *)(v0 + 912) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    loga->Class isa = (Class)v7;

    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 920) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    loga[1].Class isa = (Class)v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, type, "[%@] Error fetching restores: %{public}@", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 1000);

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(void *)(v0 + 1440);
  uint64_t v13 = *(void *)(v0 + 1312);
  uint64_t v14 = *(void *)(v0 + 1296);

  v1(v13, v14);
  uint64_t v15 = *(void *)(v12 + 16);
  *(void *)(v0 + 1624) = v15;
  if (v15)
  {
    uint64_t v16 = *(void *)(v0 + 1440);
    uint64_t v17 = *(void *)(v0 + 1224);
    int v18 = *(_DWORD *)(v17 + 80);
    *(_DWORD *)(v0 + 1672) = v18;
    *(void *)(v0 + 1632) = *(void *)(v17 + 72);
    *(void *)(v0 + 1640) = 0;
    uint64_t v19 = *(void *)(v0 + 1232);
    uint64_t v20 = v16 + ((v18 + 32) & ~(unint64_t)v18);
    swift_bridgeObjectRetain();
    sub_1003AEFD4(v20, v19, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 1648) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100397B50;
    uint64_t v22 = *(void *)(v0 + 1232);
    uint64_t v23 = *(void *)(v0 + 1000);
    return sub_10037D240(v22, v23);
  }
  *(void *)(v0 + 872) = *(void *)(v0 + 1616);
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 864) == 1 && (uint64_t v25 = *(void *)(v0 + 992)) != 0)
  {
    uint64_t v26 = *(void *)(v0 + 984);
    swift_bridgeObjectRetain();
    char v27 = sub_10017B664(v26, v25);
    swift_errorRelease();
    if (v27)
    {
      id v28 = (uint64_t *)(v0 + 992);
      long long v29 = (uint64_t *)(v0 + 984);
      sub_1003ADCB4(*(void *)(v0 + 1424), *(void *)(v0 + 1416));
      uint64_t v30 = *(void *)(v0 + 688);
      uint64_t v31 = *(void *)(v0 + 696);
      uint64_t v32 = *(void *)(v0 + 640);
      uint64_t v33 = *(void *)(v0 + 648);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1003ADB40(v0 + 640);
      goto LABEL_15;
    }
    sub_1003ADB40(v0 + 640);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_errorRelease();
    sub_1003ADB40(v0 + 640);
  }
  long long v29 = (uint64_t *)(v0 + 1424);
  id v28 = (uint64_t *)(v0 + 1416);
  uint64_t v30 = *(void *)(v0 + 1408);
  uint64_t v31 = *(void *)(v0 + 1400);
  uint64_t v32 = *(void *)(v0 + 1392);
  uint64_t v33 = *(void *)(v0 + 1384);
LABEL_15:
  uint64_t v34 = *v28;
  uint64_t v35 = *v29;
  *(void *)(v0 + 1600) = v33;
  *(void *)(v0 + 1592) = v31;
  *(void *)(v0 + 1584) = v34;
  uint64_t v36 = *(void *)(v0 + 1376) + 1;
  if (v36 == *(void *)(v0 + 1368))
  {
    swift_bridgeObjectRelease();
    if (v34)
    {
      uint64_t v37 = *(void *)(v0 + 1008);
      *(void *)(v0 + 768) = v35;
      *(void *)(v0 + 776) = v34;
      *(void *)(v0 + 784) = v30;
      *(void *)(v0 + 792) = v31;
      *(void *)(v0 + 800) = v32;
      *(void *)(v0 + 808) = v33;
      uint64_t v38 = *(void *)(v37 + 216);
      uint64_t v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663458 + dword_100663458);
      long long v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 1608) = v39;
      *long long v39 = v0;
      v39[1] = sub_10039746C;
      uint64_t v40 = *(void *)(v0 + 1000);
      return v142(v0 + 768, v38, v40);
    }
    else
    {
      uint64_t v99 = *(void *)(v0 + 928);
      Swift::String v100 = *(void **)(v0 + 1000);
      if (*(void *)(v99 + 16))
      {
        static Logger.restore.getter();
        id v101 = v100;
        swift_bridgeObjectRetain_n();
        id v102 = v101;
        unint64_t v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.default.getter();
        BOOL v105 = os_log_type_enabled(v103, v104);
        uint64_t v106 = *(void *)(v0 + 1328);
        uint64_t v107 = *(void *)(v0 + 1304);
        uint64_t v108 = *(void *)(v0 + 1296);
        uint64_t v109 = *(void **)(v0 + 1000);
        if (v105)
        {
          uint64_t v139 = *(void *)(v0 + 1328);
          os_log_type_t v134 = v104;
          uint64_t v110 = swift_slowAlloc();
          os_log_t log = (os_log_t)v107;
          uint64_t v111 = (void *)swift_slowAlloc();
          uint64_t v143 = swift_slowAlloc();
          *(_DWORD *)uint64_t v110 = 138412546;
          *(void *)(v0 + 880) = v109;
          id v112 = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v111 = v109;

          *(_WORD *)(v110 + 12) = 2082;
          uint64_t v113 = *(void *)(v99 + 16);
          *(void *)(v0 + 888) = v113;
          uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v145 = v114;
          v115._uint64_t countAndFlagsBits = 32;
          v115._object = (void *)0xE100000000000000;
          String.append(_:)(v115);
          v116._uint64_t countAndFlagsBits = 0x65726F7473657220;
          v116._object = (void *)0xE900000000000073;
          String.append(_:)(v116);
          if (v113 == 1) {
            uint64_t v117 = 0;
          }
          else {
            uint64_t v117 = 115;
          }
          if (v113 == 1) {
            unint64_t v118 = 0xE000000000000000;
          }
          else {
            unint64_t v118 = 0xE100000000000000;
          }
          unint64_t v119 = v118;
          String.append(_:)(*(Swift::String *)&v117);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 896) = sub_1000143F4(v144, v145, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v103, v134, "[%@] Discovered ADPs for %{public}s", (uint8_t *)v110, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(uint64_t, uint64_t))log[1].isa)(v139, v108);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
        }
      }
      else
      {
        static Logger.restore.getter();
        id v120 = v100;
        uint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.default.getter();
        BOOL v123 = os_log_type_enabled(v121, v122);
        id v124 = *(void **)(v0 + 1000);
        if (v123)
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          uint64_t v126 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v125 = 138412290;
          *(void *)(v0 + 904) = v124;
          id v127 = v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v126 = v124;

          _os_log_impl((void *)&_mh_execute_header, v121, v122, "[%@] No restores discovered", v125, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v121 = *(NSObject **)(v0 + 1000);
        }
        uint64_t v128 = *(void *)(v0 + 1320);
        uint64_t v129 = *(void *)(v0 + 1304);
        uint64_t v130 = *(void *)(v0 + 1296);

        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
      }
      swift_beginAccess();
      uint64_t v140 = *(void *)(v0 + 928);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v131 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v131(v140);
    }
  }
  else
  {
    *(void *)(v0 + 1424) = v35;
    *(void *)(v0 + 1416) = v34;
    *(void *)(v0 + 1408) = v30;
    *(void *)(v0 + 1400) = v31;
    *(void *)(v0 + 1392) = v32;
    *(void *)(v0 + 1384) = v33;
    *(void *)(v0 + 1376) = v36;
    id v41 = *(void **)(v0 + 1000);
    id v42 = (_OWORD *)(*(void *)(v0 + 968) + (v36 << 7));
    long long v43 = v42[5];
    long long v45 = v42[2];
    long long v44 = v42[3];
    *(_OWORD *)(v0 + 672) = v42[4];
    *(_OWORD *)(v0 + 688) = v43;
    *(_OWORD *)(v0 + 640) = v45;
    *(_OWORD *)(v0 + 656) = v44;
    long long v46 = v42[9];
    long long v48 = v42[6];
    long long v47 = v42[7];
    *(_OWORD *)(v0 + 736) = v42[8];
    *(_OWORD *)(v0 + 752) = v46;
    *(_OWORD *)(v0 + 704) = v48;
    *(_OWORD *)(v0 + 720) = v47;
    long long v50 = v42[4];
    long long v49 = v42[5];
    long long v51 = v42[3];
    *(_OWORD *)(v0 + 512) = v42[2];
    *(_OWORD *)(v0 + 528) = v51;
    *(_OWORD *)(v0 + 544) = v50;
    *(_OWORD *)(v0 + 560) = v49;
    long long v52 = v42[9];
    long long v53 = v42[6];
    long long v54 = v42[7];
    *(_OWORD *)(v0 + 608) = v42[8];
    *(_OWORD *)(v0 + 624) = v52;
    *(_OWORD *)(v0 + 576) = v53;
    *(_OWORD *)(v0 + 592) = v54;
    sub_1003ADAB4(v0 + 640);
    static Logger.restore.getter();
    sub_1003ADAB4(v0 + 640);
    id v55 = v41;
    sub_1003ADAB4(v0 + 640);
    id v56 = v55;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = *(void *)(v0 + 1360);
    uint64_t v61 = *(void *)(v0 + 1304);
    uint64_t v62 = *(void *)(v0 + 1296);
    char v63 = *(void **)(v0 + 1000);
    if (v59)
    {
      *(void *)os_log_type_t typea = *(void *)(v0 + 1296);
      uint64_t v64 = swift_slowAlloc();
      id v132 = (void *)swift_slowAlloc();
      uint64_t v144 = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 138412546;
      *(void *)(v0 + 952) = v63;
      os_log_type_t v133 = v58;
      id v65 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v132 = v63;

      *(_WORD *)(v64 + 12) = 2082;
      char v66 = sub_10017B40C();
      *(void *)(v0 + 960) = sub_1000143F4((uint64_t)v66, v67, &v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);
      _os_log_impl((void *)&_mh_execute_header, v57, v133, "[%@] Attempting to to get ADPs for batch: %{public}s", (uint8_t *)v64, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      long long v68 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v68(v60, *(void *)typea);
    }
    else
    {

      sub_1003ADB40(v0 + 640);
      sub_1003ADB40(v0 + 640);

      long long v68 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v68(v60, v62);
    }
    *(void *)(v0 + 1432) = v68;
    int v69 = *(_DWORD *)(v0 + 1660);
    int v70 = *(_DWORD *)(v0 + 1656);
    int v71 = *(_DWORD *)(v0 + 868);
    uint64_t v72 = *(void *)(v0 + 1104);
    uint64_t v73 = *(void *)(v0 + 1064);
    uint64_t v74 = *(void *)(v0 + 1056);
    long long v75 = *(_OWORD *)(v0 + 1040);
    uint64_t v76 = *(void *)(v0 + 1016);
    long long v77 = *(void **)(v0 + 1000);
    char v78 = *(unsigned char *)(v0 + 865);
    uint64_t v79 = *(void *)(v0 + 976);
    char v80 = *(unsigned char *)(v0 + 866) & 1;
    char v81 = *(unsigned char *)(v0 + 867) & 1;
    char v82 = *(unsigned char *)(v0 + 1676) & 1;
    *(void *)(v0 + 1440) = *(void *)(v0 + 760);
    long long v83 = *(_OWORD *)(v0 + 592);
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 576);
    *(_OWORD *)(v0 + 344) = v83;
    long long v84 = *(_OWORD *)(v0 + 624);
    *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 608);
    *(_OWORD *)(v0 + 376) = v84;
    long long v85 = *(_OWORD *)(v0 + 528);
    _OWORD *v141 = *(_OWORD *)(v0 + 512);
    *(_OWORD *)(v0 + 280) = v85;
    long long v86 = *(_OWORD *)(v0 + 560);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 544);
    *(_OWORD *)(v0 + 312) = v86;
    *(void *)(v0 + 392) = v76;
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 1024);
    *(_OWORD *)(v0 + 416) = v75;
    *(void *)(v0 + 432) = v74;
    *(void *)(v0 + 440) = v73;
    long long v87 = *(_OWORD *)(v0 + 1088);
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 1072);
    *(_OWORD *)(v0 + 464) = v87;
    *(void *)(v0 + 480) = v72;
    *(_DWORD *)(v0 + 488) = v71;
    *(_DWORD *)(v0 + 492) = v70;
    *(_DWORD *)(v0 + 496) = v69;
    *(unsigned char *)(v0 + 500) = v80;
    *(unsigned char *)(v0 + 501) = v81;
    *(unsigned char *)(v0 + 502) = v82;
    *(unsigned char *)(v0 + 503) = v78;
    *(void *)(v0 + 504) = v77;
    long long v88 = *(_OWORD *)(v0 + 408);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 160) = v88;
    long long v89 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 296);
    *(_OWORD *)(v0 + 64) = v89;
    long long v90 = *(_OWORD *)(v0 + 280);
    *(_OWORD *)(v0 + 16) = *v141;
    *(_OWORD *)(v0 + 32) = v90;
    long long v91 = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 128) = v91;
    long long v92 = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 96) = v92;
    long long v93 = *(_OWORD *)(v0 + 440);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 424);
    *(_OWORD *)(v0 + 192) = v93;
    long long v94 = *(_OWORD *)(v0 + 456);
    long long v95 = *(_OWORD *)(v0 + 472);
    long long v96 = *(_OWORD *)(v0 + 488);
    *(void *)(v0 + 256) = *(void *)(v0 + 504);
    *(_OWORD *)(v0 + 224) = v95;
    *(_OWORD *)(v0 + 240) = v96;
    *(_OWORD *)(v0 + 208) = v94;
    sub_1003ADAB4(v0 + 640);
    id v97 = v77;
    sub_10018AB28(v79);
    uint64_t v98 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v98;
    *uint64_t v98 = v0;
    v98[1] = sub_100392D40;
    return sub_10041F514();
  }
}

uint64_t sub_1003997B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_1000172F8(&qword_10065CFF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = a1;
  uint64_t v22 = sub_100399E3C(a2, a3);
  uint64_t v23 = (void *)sub_1004730A0(0, v22, (uint64_t)sub_100473004, 0, v21);

  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_10;
  }
  id v24 = v23;
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v24 valueForProperty:v25];

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  sub_100017238((uint64_t)&v45, (uint64_t)&v43, (uint64_t *)&unk_10065C9C0);
  if (v44)
  {
    sub_1001C5DD4(&v43, v42);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100243034(v42, (uint64_t)v16);
    swift_release();
    sub_100014524((uint64_t)v42);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  sub_10001729C((uint64_t)&v45, (uint64_t *)&unk_10065C9C0);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {

    sub_10001729C((uint64_t)v16, &qword_10065C9B0);
LABEL_10:
    uint64_t v27 = sub_1000172F8(&qword_100661940);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a4, 1, 1, v27);
  }
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v40(v20, v16, v17);
  id v29 = v24;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v29 valueForProperty:v30];

  if (v31)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  sub_100017238((uint64_t)&v45, (uint64_t)&v43, (uint64_t *)&unk_10065C9C0);
  id v41 = a4;
  if (v44)
  {
    sub_1001C5DD4(&v43, v42);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100243CF8(v42, (uint64_t)v13);
    swift_release();
    sub_100014524((uint64_t)v42);
    uint64_t v32 = type metadata accessor for AppInstallRequestType();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 0, 1, v32);
  }
  else
  {
    uint64_t v32 = type metadata accessor for AppInstallRequestType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 1, 1, v32);
  }
  sub_10001729C((uint64_t)&v45, (uint64_t *)&unk_10065C9C0);

  sub_100017238((uint64_t)v13, (uint64_t)v11, &qword_10065CFF0);
  type metadata accessor for AppInstallRequestType();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v11, 1, v32) == 1)
  {
    sub_10001729C((uint64_t)v11, &qword_10065CFF0);
    unint64_t v34 = 0xE200000000000000;
    uint64_t v35 = 16718;
  }
  else
  {
    uint64_t v35 = AppInstallRequestType.rawValue.getter();
    unint64_t v34 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v32);
  }

  sub_10001729C((uint64_t)v13, &qword_10065CFF0);
  uint64_t v37 = v41;
  uint64_t *v41 = v35;
  v37[1] = v34;
  uint64_t v38 = sub_1000172F8(&qword_100661940);
  v40((char *)v37 + *(int *)(v38 + 48), v20, v17);
  return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 0, 1, v38);
}

uint64_t sub_100399E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = sub_1000172F8(&qword_10065BD50);
  uint64_t v12 = sub_10000DDFC((unint64_t *)&unk_10065C9D0, &qword_10065BD50);
  LOWORD(v9) = 6;
  *((void *)&v9 + 1) = a1;
  uint64_t v10 = a2;
  sub_1000172F8(&qword_10065BD58);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v9, v4 + 32);
  uint64_t v11 = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v5 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v9) = 281;
  uint64_t v12 = v5;
  *((void *)&v9 + 1) = &off_100639430;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v9, v6 + 32);
  *(void *)&long long v9 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100554E6C(v4);
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100554E6C(v7);
  sub_1000172F8(&qword_10065C9F0);
  swift_arrayDestroy();
  return v9;
}

uint64_t sub_100399FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 536) = v18;
  *(void *)(v8 + 528) = v17;
  *(_OWORD *)(v8 + 512) = v16;
  *(void *)(v8 + 496) = a7;
  *(void *)(v8 + 504) = a8;
  *(void *)(v8 + 480) = a5;
  *(void *)(v8 + 488) = a6;
  *(void *)(v8 + 472) = a4;
  uint64_t v9 = type metadata accessor for AppInstallRequestType();
  *(void *)(v8 + 544) = v9;
  *(void *)(v8 + 552) = *(void *)(v9 - 8);
  *(void *)(v8 + 560) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  *(void *)(v8 + 568) = v10;
  *(void *)(v8 + 576) = *(void *)(v10 - 8);
  *(void *)(v8 + 584) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v8 + 592) = v11;
  *(void *)(v8 + 600) = *(void *)(v11 - 8);
  *(void *)(v8 + 608) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for LogKey.Prefix();
  *(void *)(v8 + 616) = v12;
  *(void *)(v8 + 624) = *(void *)(v12 - 8);
  *(void *)(v8 + 632) = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  *(void *)(v8 + 640) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v8 + 648) = v13;
  *(void *)(v8 + 656) = *(void *)(v13 - 8);
  *(void *)(v8 + 664) = swift_task_alloc();
  *(void *)(v8 + 672) = swift_task_alloc();
  *(void *)(v8 + 680) = swift_task_alloc();
  *(void *)(v8 + 688) = swift_task_alloc();
  *(void *)(v8 + 696) = swift_task_alloc();
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  *(void *)(v8 + 720) = swift_task_alloc();
  *(void *)(v8 + 728) = swift_task_alloc();
  *(void *)(v8 + 736) = swift_task_alloc();
  return _swift_task_switch(sub_10039A2F4, 0, 0);
}

uint64_t sub_10039A2F4()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 744) = v2;
  if (v2)
  {
    *(_DWORD *)(v0 + 340) = enum case for LogKey.Prefix.restore(_:);
    *(_DWORD *)(v0 + 356) = enum case for AppInstallRequestType.restore(_:);
    uint64_t v4 = *(void *)(v0 + 488);
    uint64_t v3 = *(void *)(v0 + 496);
    *(void *)(v0 + 760) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 752) = 0;
    long long v5 = *(_OWORD *)(v1 + 80);
    long long v6 = *(_OWORD *)(v1 + 96);
    long long v7 = *(_OWORD *)(v1 + 112);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v1 + 128);
    *(_OWORD *)(v0 + 80) = v6;
    *(_OWORD *)(v0 + 96) = v7;
    *(_OWORD *)(v0 + 64) = v5;
    long long v8 = *(_OWORD *)(v1 + 32);
    long long v9 = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v0 + 48) = v9;
    *(_OWORD *)(v0 + 16) = v8;
    *(void *)(v0 + 768) = *(void *)(v1 + 32);
    *(void *)(v0 + 776) = *(void *)(v1 + 40);
    *(void *)(v0 + 784) = *(void *)(v1 + 48);
    *(void *)(v0 + 792) = *(void *)(v1 + 56);
    *(void *)(v0 + 800) = *(void *)(v1 + 64);
    *(void *)(v0 + 808) = *(void *)(v1 + 72);
    *(void *)(v0 + 816) = *(void *)(v1 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v1 + 88);
    *(void *)(v0 + 824) = *(void *)(v1 + 96);
    *(void *)(v0 + 832) = *(void *)(v1 + 104);
    *(void *)(v0 + 840) = *(void *)(v1 + 112);
    *(void *)(v0 + 848) = *(void *)(v1 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v1 + 128);
    uint64_t v10 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v10;
    uint64_t v11 = *(void *)(v3 + 216);
    swift_bridgeObjectRetain();
    sub_1003AD988(v0 + 16);
    if (v4)
    {
      uint64_t v12 = *(void *)(v0 + 488);
      uint64_t v13 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_10039A79C;
      uint64_t v15 = *(void *)(v0 + 504);
      uint64_t v16 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v13))(v16, v12, v11, v15);
    }
    else
    {
      uint64_t v25 = dword_100663448;
      swift_bridgeObjectRetain();
      id v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v26;
      *id v26 = v0;
      v26[1] = sub_10039B32C;
      uint64_t v27 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v25))(v0 + 16, v11, v27);
    }
  }
  else
  {
    *(void *)(v0 + 880) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10039F0D0;
      uint64_t v19 = *(void *)(v0 + 528);
      uint64_t v20 = *(void *)(v0 + 520);
      uint64_t v22 = *(void *)(v0 + 504);
      uint64_t v21 = *(void *)(v0 + 512);
      uint64_t v23 = *(void *)(v0 + 488);
      uint64_t v24 = *(void *)(v0 + 480);
      return sub_100389420((uint64_t)_swiftEmptyArrayStorage, v21, v20, v19, 1, v24, v23, v22);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v28 = *(uint64_t (**)(void))(v0 + 8);
      return v28();
    }
  }
}

uint64_t sub_10039A79C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 353) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10039A8C8, 0, 0);
}

uint64_t sub_10039A8C8()
{
  uint64_t v77 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 16);
  if ((*(unsigned char *)(v0 + 353) & 1) == 0)
  {
    uint64_t v16 = *(void **)(v0 + 504);
    sub_1003AD9F4(v0 + 16);
    static Logger.restore.getter();
    id v17 = v16;
    swift_bridgeObjectRetain_n();
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v22 = *(void *)(v0 + 736);
    uint64_t v23 = *(void *)(v0 + 648);
    uint64_t v24 = *(void **)(v0 + 504);
    unint64_t v25 = *(void *)(v0 + 488);
    id v26 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 656) + 8);
    if (v21)
    {
      uint64_t v27 = *(void *)(v0 + 480);
      uint64_t v75 = *(void *)(v0 + 736);
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412546;
      *(void *)(v28 + 4) = v24;
      *uint64_t v29 = v24;

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v28 + 14) = sub_1000143F4(v27, v25, &v76);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%@] User opted to not install distributor for bundleID: %s", (uint8_t *)v28, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v26)(v75, v23);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*v26)(v22, v23);
    }
    uint64_t v34 = dword_1006618D8;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_10039BEC4;
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v37 = *(void *)(v0 + 488);
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006618D8 + v34);
    uint64_t v39 = *(void *)(v0 + 480);
    return v38(v39, v37, v36);
  }
  sub_10001733C(v0 + 64, v0 + 344, &qword_1006618A8);
  sub_10001733C(v0 + 344, v0 + 328, &qword_1006618A8);
  if (*(unsigned char *)(v0 + 336) == 1)
  {
    uint64_t v2 = *(void **)(v0 + 504);
    static Logger.restore.getter();
    sub_1003AD988(v0 + 16);
    swift_bridgeObjectRetain();
    id v3 = v2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    unint64_t v7 = *(void *)(v0 + 864);
    if (v6)
    {
      uint64_t v71 = *(void *)(v0 + 856);
      uint64_t v72 = *(void *)(v0 + 656);
      uint64_t v73 = *(void *)(v0 + 648);
      uint64_t v74 = *(void *)(v0 + 720);
      uint64_t v8 = *(void *)(v0 + 504);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412802;
      *(void *)(v9 + 4) = v8;
      *uint64_t v10 = v8;
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v9 + 14) = sub_1000143F4(v71, v7, &v76);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 22) = 2080;
      long long v11 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 200) = v11;
      *(unsigned char *)(v0 + 216) = *(unsigned char *)(v0 + 112);
      long long v12 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 120) = *v1;
      *(_OWORD *)(v0 + 136) = v12;
      long long v13 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 168) = v13;
      sub_1003AD988(v0 + 16);
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v9 + 24) = sub_1000143F4(v14, v15, &v76);
      swift_bridgeObjectRelease();
      sub_1003AD9F4(v0 + 16);
      sub_1003AD9F4(v0 + 16);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@][%s] Failed to discover marketplace details to restore distributor: %s", (uint8_t *)v9, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 720);
      uint64_t v41 = *(void *)(v0 + 656);
      uint64_t v42 = *(void *)(v0 + 648);

      swift_bridgeObjectRelease_n();
      sub_1003AD9F4(v0 + 16);
      sub_1003AD9F4(v0 + 16);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    }
    uint64_t v43 = *(void *)(v0 + 752) + 1;
    if (v43 == *(void *)(v0 + 744))
    {
      uint64_t v44 = *(void *)(v0 + 760);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 880) = v44;
      if (*(void *)(v44 + 16))
      {
        long long v45 = (void *)swift_task_alloc();
        *(void *)(v0 + 1032) = v45;
        *long long v45 = v0;
        v45[1] = sub_10039F0D0;
        uint64_t v46 = *(void *)(v0 + 528);
        uint64_t v47 = *(void *)(v0 + 520);
        uint64_t v49 = *(void *)(v0 + 504);
        uint64_t v48 = *(void *)(v0 + 512);
        uint64_t v50 = *(void *)(v0 + 488);
        uint64_t v51 = *(void *)(v0 + 480);
        uint64_t v79 = *(void *)(v0 + 536);
        return sub_100389420(v44, v48, v47, v46, 1, v51, v50, v49);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
        return v67();
      }
    }
    *(void *)(v0 + 752) = v43;
    uint64_t v53 = *(void *)(v0 + 488);
    uint64_t v52 = *(void *)(v0 + 496);
    uint64_t v54 = *(void *)(v0 + 472) + 104 * v43;
    long long v56 = *(_OWORD *)(v54 + 48);
    long long v55 = *(_OWORD *)(v54 + 64);
    *uint64_t v1 = *(_OWORD *)(v54 + 32);
    *(_OWORD *)(v0 + 32) = v56;
    *(_OWORD *)(v0 + 48) = v55;
    long long v58 = *(_OWORD *)(v54 + 96);
    long long v57 = *(_OWORD *)(v54 + 112);
    long long v59 = *(_OWORD *)(v54 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v54 + 128);
    *(_OWORD *)(v0 + 80) = v58;
    *(_OWORD *)(v0 + 96) = v57;
    *(_OWORD *)(v0 + 64) = v59;
    *(void *)(v0 + 768) = *(void *)(v54 + 32);
    *(void *)(v0 + 776) = *(void *)(v54 + 40);
    *(void *)(v0 + 784) = *(void *)(v54 + 48);
    *(void *)(v0 + 792) = *(void *)(v54 + 56);
    *(void *)(v0 + 800) = *(void *)(v54 + 64);
    *(void *)(v0 + 808) = *(void *)(v54 + 72);
    *(void *)(v0 + 816) = *(void *)(v54 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v54 + 88);
    *(void *)(v0 + 824) = *(void *)(v54 + 96);
    *(void *)(v0 + 832) = *(void *)(v54 + 104);
    *(void *)(v0 + 840) = *(void *)(v54 + 112);
    *(void *)(v0 + 848) = *(void *)(v54 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v54 + 128);
    uint64_t v60 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v60;
    uint64_t v61 = *(void *)(v52 + 216);
    sub_1003AD988(v0 + 16);
    if (v53)
    {
      uint64_t v62 = *(void *)(v0 + 488);
      uint64_t v63 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v64 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v64;
      *uint64_t v64 = v0;
      v64[1] = sub_10039A79C;
      uint64_t v65 = *(void *)(v0 + 504);
      uint64_t v66 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v63))(v66, v62, v61, v65);
    }
    uint64_t v68 = dword_100663448;
    swift_bridgeObjectRetain();
    int v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 888) = v69;
    void *v69 = v0;
    v69[1] = sub_10039B32C;
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v68);
    uint64_t v39 = v0 + 16;
    uint64_t v37 = v61;
    return v38(v39, v37, v36);
  }
  *(void *)(v0 + 912) = *(void *)(v0 + 328);
  uint64_t v30 = sub_1000172F8(&qword_100661850);
  uint64_t v31 = sub_1000172F8(&qword_100661868);
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 920) = v32;
  void *v32 = v0;
  v32[1] = sub_10039C5D0;
  uint64_t v33 = *(void *)(v0 + 496);
  uint64_t v79 = v31;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 448, v30, v31, 0, 0, &unk_1006618E0, v33, v30);
}

uint64_t sub_10039B32C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 354) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10039B458, 0, 0);
}

uint64_t sub_10039B458()
{
  uint64_t v78 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 16);
  if ((*(unsigned char *)(v0 + 354) & 1) == 0)
  {
    uint64_t v16 = *(void **)(v0 + 504);
    sub_1003AD9F4(v0 + 16);
    static Logger.restore.getter();
    swift_bridgeObjectRetain_n();
    id v17 = v16;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    unint64_t v21 = *(void *)(v0 + 864);
    if (v20)
    {
      uint64_t v22 = *(void *)(v0 + 856);
      uint64_t v23 = *(void *)(v0 + 656);
      uint64_t v74 = *(void *)(v0 + 648);
      uint64_t v76 = *(void *)(v0 + 728);
      uint64_t v24 = *(void *)(v0 + 504);
      uint64_t v25 = swift_slowAlloc();
      id v26 = (void *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      *(void *)(v25 + 4) = v24;
      *id v26 = v24;
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v25 + 14) = sub_1000143F4(v22, v21, &v77);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%@] User opted to not install distributor: %s", (uint8_t *)v25, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v76, v74);
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 728);
      uint64_t v32 = *(void *)(v0 + 656);
      uint64_t v33 = *(void *)(v0 + 648);

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    }
    uint64_t v34 = dword_1006618D8;
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 904) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_10039C48C;
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006618D8 + v34);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    return v37(v38, v39, v36);
  }
  sub_10001733C(v0 + 64, v0 + 344, &qword_1006618A8);
  sub_10001733C(v0 + 344, v0 + 328, &qword_1006618A8);
  if (*(unsigned char *)(v0 + 336) == 1)
  {
    uint64_t v2 = *(void **)(v0 + 504);
    static Logger.restore.getter();
    sub_1003AD988(v0 + 16);
    swift_bridgeObjectRetain();
    id v3 = v2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    unint64_t v7 = *(void *)(v0 + 864);
    if (v6)
    {
      uint64_t v71 = *(void *)(v0 + 856);
      uint64_t v72 = *(void *)(v0 + 656);
      uint64_t v73 = *(void *)(v0 + 648);
      uint64_t v75 = *(void *)(v0 + 720);
      uint64_t v8 = *(void *)(v0 + 504);
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412802;
      *(void *)(v9 + 4) = v8;
      *uint64_t v10 = v8;
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v9 + 14) = sub_1000143F4(v71, v7, &v77);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 22) = 2080;
      long long v11 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 200) = v11;
      *(unsigned char *)(v0 + 216) = *(unsigned char *)(v0 + 112);
      long long v12 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 120) = *v1;
      *(_OWORD *)(v0 + 136) = v12;
      long long v13 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 168) = v13;
      sub_1003AD988(v0 + 16);
      uint64_t v14 = String.init<A>(describing:)();
      *(void *)(v9 + 24) = sub_1000143F4(v14, v15, &v77);
      swift_bridgeObjectRelease();
      sub_1003AD9F4(v0 + 16);
      sub_1003AD9F4(v0 + 16);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@][%s] Failed to discover marketplace details to restore distributor: %s", (uint8_t *)v9, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v75, v73);
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 720);
      uint64_t v41 = *(void *)(v0 + 656);
      uint64_t v42 = *(void *)(v0 + 648);

      swift_bridgeObjectRelease_n();
      sub_1003AD9F4(v0 + 16);
      sub_1003AD9F4(v0 + 16);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    }
    uint64_t v43 = *(void *)(v0 + 752) + 1;
    if (v43 == *(void *)(v0 + 744))
    {
      uint64_t v44 = *(void *)(v0 + 760);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 880) = v44;
      if (*(void *)(v44 + 16))
      {
        long long v45 = (void *)swift_task_alloc();
        *(void *)(v0 + 1032) = v45;
        *long long v45 = v0;
        v45[1] = sub_10039F0D0;
        uint64_t v46 = *(void *)(v0 + 528);
        uint64_t v47 = *(void *)(v0 + 520);
        uint64_t v49 = *(void *)(v0 + 504);
        uint64_t v48 = *(void *)(v0 + 512);
        uint64_t v50 = *(void *)(v0 + 488);
        uint64_t v51 = *(void *)(v0 + 480);
        uint64_t v80 = *(void *)(v0 + 536);
        return sub_100389420(v44, v48, v47, v46, 1, v51, v50, v49);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
        return v67();
      }
    }
    *(void *)(v0 + 752) = v43;
    uint64_t v53 = *(void *)(v0 + 488);
    uint64_t v52 = *(void *)(v0 + 496);
    uint64_t v54 = *(void *)(v0 + 472) + 104 * v43;
    long long v56 = *(_OWORD *)(v54 + 48);
    long long v55 = *(_OWORD *)(v54 + 64);
    *uint64_t v1 = *(_OWORD *)(v54 + 32);
    *(_OWORD *)(v0 + 32) = v56;
    *(_OWORD *)(v0 + 48) = v55;
    long long v58 = *(_OWORD *)(v54 + 96);
    long long v57 = *(_OWORD *)(v54 + 112);
    long long v59 = *(_OWORD *)(v54 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v54 + 128);
    *(_OWORD *)(v0 + 80) = v58;
    *(_OWORD *)(v0 + 96) = v57;
    *(_OWORD *)(v0 + 64) = v59;
    *(void *)(v0 + 768) = *(void *)(v54 + 32);
    *(void *)(v0 + 776) = *(void *)(v54 + 40);
    *(void *)(v0 + 784) = *(void *)(v54 + 48);
    *(void *)(v0 + 792) = *(void *)(v54 + 56);
    *(void *)(v0 + 800) = *(void *)(v54 + 64);
    *(void *)(v0 + 808) = *(void *)(v54 + 72);
    *(void *)(v0 + 816) = *(void *)(v54 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v54 + 88);
    *(void *)(v0 + 824) = *(void *)(v54 + 96);
    *(void *)(v0 + 832) = *(void *)(v54 + 104);
    *(void *)(v0 + 840) = *(void *)(v54 + 112);
    *(void *)(v0 + 848) = *(void *)(v54 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v54 + 128);
    uint64_t v60 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v60;
    uint64_t v61 = *(void *)(v52 + 216);
    sub_1003AD988(v0 + 16);
    if (v53)
    {
      uint64_t v62 = *(void *)(v0 + 488);
      uint64_t v63 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v64 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v64;
      *uint64_t v64 = v0;
      v64[1] = sub_10039A79C;
      uint64_t v65 = *(void *)(v0 + 504);
      uint64_t v66 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v63))(v66, v62, v61, v65);
    }
    uint64_t v68 = dword_100663448;
    swift_bridgeObjectRetain();
    int v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 888) = v69;
    void *v69 = v0;
    v69[1] = sub_10039B32C;
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v68);
    uint64_t v38 = v0 + 16;
    uint64_t v39 = v61;
    return v37(v38, v39, v36);
  }
  *(void *)(v0 + 912) = *(void *)(v0 + 328);
  uint64_t v27 = sub_1000172F8(&qword_100661850);
  uint64_t v28 = sub_1000172F8(&qword_100661868);
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 920) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_10039C5D0;
  uint64_t v30 = *(void *)(v0 + 496);
  uint64_t v80 = v28;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 448, v27, v28, 0, 0, &unk_1006618E0, v30, v27);
}

uint64_t sub_10039BEC4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10039C008, 0, 0);
}

uint64_t sub_10039C008()
{
  uint64_t v1 = *(void *)(v0 + 752) + 1;
  if (v1 == *(void *)(v0 + 744))
  {
    uint64_t v2 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v2;
    if (*(void *)(v2 + 16))
    {
      id v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v3;
      void *v3 = v0;
      v3[1] = sub_10039F0D0;
      uint64_t v4 = *(void *)(v0 + 528);
      uint64_t v5 = *(void *)(v0 + 520);
      uint64_t v7 = *(void *)(v0 + 504);
      uint64_t v6 = *(void *)(v0 + 512);
      uint64_t v8 = *(void *)(v0 + 488);
      uint64_t v9 = *(void *)(v0 + 480);
      return sub_100389420(v2, v6, v5, v4, 1, v9, v8, v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v26 = *(uint64_t (**)(void))(v0 + 8);
      return v26();
    }
  }
  else
  {
    *(void *)(v0 + 752) = v1;
    uint64_t v12 = *(void *)(v0 + 488);
    uint64_t v11 = *(void *)(v0 + 496);
    uint64_t v13 = *(void *)(v0 + 472) + 104 * v1;
    long long v15 = *(_OWORD *)(v13 + 48);
    long long v14 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v0 + 32) = v15;
    *(_OWORD *)(v0 + 48) = v14;
    long long v17 = *(_OWORD *)(v13 + 96);
    long long v16 = *(_OWORD *)(v13 + 112);
    long long v18 = *(_OWORD *)(v13 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v13 + 128);
    *(_OWORD *)(v0 + 80) = v17;
    *(_OWORD *)(v0 + 96) = v16;
    *(_OWORD *)(v0 + 64) = v18;
    *(void *)(v0 + 768) = *(void *)(v13 + 32);
    *(void *)(v0 + 776) = *(void *)(v13 + 40);
    *(void *)(v0 + 784) = *(void *)(v13 + 48);
    *(void *)(v0 + 792) = *(void *)(v13 + 56);
    *(void *)(v0 + 800) = *(void *)(v13 + 64);
    *(void *)(v0 + 808) = *(void *)(v13 + 72);
    *(void *)(v0 + 816) = *(void *)(v13 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v13 + 88);
    *(void *)(v0 + 824) = *(void *)(v13 + 96);
    *(void *)(v0 + 832) = *(void *)(v13 + 104);
    *(void *)(v0 + 840) = *(void *)(v13 + 112);
    *(void *)(v0 + 848) = *(void *)(v13 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v13 + 128);
    uint64_t v19 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v19;
    uint64_t v20 = *(void *)(v11 + 216);
    sub_1003AD988(v0 + 16);
    if (v12)
    {
      uint64_t v21 = *(void *)(v0 + 488);
      uint64_t v22 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_10039A79C;
      uint64_t v24 = *(void *)(v0 + 504);
      uint64_t v25 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v22))(v25, v21, v20, v24);
    }
    else
    {
      uint64_t v27 = dword_100663448;
      swift_bridgeObjectRetain();
      uint64_t v28 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v28;
      void *v28 = v0;
      v28[1] = sub_10039B32C;
      uint64_t v29 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v27))(v0 + 16, v20, v29);
    }
  }
}

uint64_t sub_10039C48C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1003AF324, 0, 0);
}

uint64_t sub_10039C5D0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10039C6F8, 0, 0);
}

uint64_t sub_10039C6F8()
{
  uint64_t v170 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(void *)(v0 + 864);
    uint64_t v3 = *(void *)(v0 + 856);
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_100016D20(v3, v2);
    uint64_t v5 = *(void *)(v0 + 640);
    uint64_t v6 = *(void *)(v0 + 576);
    uint64_t v7 = *(void *)(v0 + 568);
    if (v8)
    {
      sub_1003AEFD4(*(void *)(v1 + 56) + *(void *)(v6 + 72) * v4, *(void *)(v0 + 640), (uint64_t (*)(void))type metadata accessor for Restore);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v5, 0, 1, v7);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v6 + 56))(*(void *)(v0 + 640), 1, 1, v7);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 576) + 56))(*(void *)(v0 + 640), 1, 1, *(void *)(v0 + 568));
  }
  uint64_t v9 = v0 + 337;
  uint64_t v10 = v0 + 16;
  uint64_t v11 = *(void *)(v0 + 640);
  uint64_t v12 = *(void *)(v0 + 576);
  uint64_t v13 = *(void *)(v0 + 568);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v11, 1, v13) == 1)
  {
    Swift::String v167 = (unsigned char *)(v0 + 337);
    long long v14 = *(void **)(v0 + 504);
    (*(void (**)(void, void, void))(*(void *)(v0 + 624) + 104))(*(void *)(v0 + 632), *(unsigned int *)(v0 + 340), *(void *)(v0 + 616));
    id v15 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    long long v16 = (void *)LogKey.init(prefix:)();
    *(void *)(v0 + 928) = v16;
    static Logger.restore.getter();
    id v17 = v16;
    id v18 = v14;
    id v19 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = *(void *)(v0 + 504);
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412546;
      *(void *)(v23 + 4) = v22;
      *(_WORD *)(v23 + 12) = 2112;
      *(void *)(v23 + 14) = v19;
      *uint64_t v24 = v22;
      v24[1] = v19;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@][%@] Installing distributor app", (uint8_t *)v23, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v20 = *(NSObject **)(v0 + 504);
    }
    uint64_t v37 = *(void *)(v0 + 712);
    uint64_t v38 = *(void *)(v0 + 656);
    uint64_t v39 = *(void *)(v0 + 648);

    uint64_t v40 = *(void *)(v0 + 40);
    uint64_t v161 = *(void *)(v0 + 32);
    id v163 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    *(void *)(v0 + 936) = v161;
    *(void *)(v0 + 944) = v40;
    *(void *)(v0 + 952) = v163;
    *(void *)(v0 + 960) = (v38 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v163(v37, v39);
    *(unsigned char *)(v0 + 337) = 0;
    id v41 = objc_allocWithZone((Class)IXApplicationIdentity);
    swift_bridgeObjectRetain();
    uint64_t v165 = v40;
    swift_bridgeObjectRetain();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v43 = [v41 initWithBundleID:v42];

    uint64_t v44 = self;
    *(void *)(v0 + 360) = 0;
    id v45 = [v44 coordinatorForAppWithIdentity:v43 withClientID:28 createIfNotExisting:1 created:v167 error:v0 + 360];
    *(void *)(v0 + 968) = v45;
    uint64_t v46 = *(void **)(v0 + 360);
    if (v45)
    {
      uint64_t v47 = v45;
      uint64_t v166 = (uint64_t)v19;
      id v48 = v46;

      uint64_t v49 = *(void **)(v0 + 504);
      if (*v167)
      {
        static Logger.restore.getter();
        swift_bridgeObjectRetain_n();
        id v50 = v49;
        id v51 = v47;
        id v52 = v50;
        id v168 = v51;
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.default.getter();
        BOOL v55 = os_log_type_enabled(v53, v54);
        unint64_t v56 = *(void *)(v0 + 864);
        if (v55)
        {
          uint64_t v146 = *(void *)(v0 + 856);
          uint64_t v159 = *(void *)(v0 + 648);
          uint64_t v160 = *(void *)(v0 + 704);
          os_log_t v153 = *(os_log_t *)(v0 + 600);
          uint64_t v147 = *(void *)(v0 + 608);
          uint64_t v149 = *(void *)(v0 + 592);
          long long v57 = *(void **)(v0 + 504);
          uint64_t v58 = swift_slowAlloc();
          uint64_t v155 = (void *)swift_slowAlloc();
          v169[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 138412802;
          *(void *)(v0 + 384) = v57;
          os_log_type_t type = v54;
          id v59 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v155 = v57;

          *(_WORD *)(v58 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 376) = sub_1000143F4(v146, v56, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v58 + 22) = 2080;
          id v60 = [v168 uniqueIdentifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v63 = v62;
          ((void (*)(uint64_t, uint64_t))v153[1].isa)(v147, v149);
          *(void *)(v0 + 432) = sub_1000143F4(v61, v63, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          uint64_t v64 = v53;
          _os_log_impl((void *)&_mh_execute_header, v53, type, "[%@] Created marketplace coordinator for distributor: %s coordinatorID: %s", (uint8_t *)v58, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
LABEL_23:
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v93 = v159;
          uint64_t v92 = v160;
          goto LABEL_44;
        }
        uint64_t v126 = *(void *)(v0 + 704);
      }
      else
      {
        static Logger.restore.getter();
        swift_bridgeObjectRetain_n();
        id v79 = v49;
        id v80 = v47;
        id v81 = v79;
        id v168 = v80;
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.default.getter();
        BOOL v83 = os_log_type_enabled(v53, v82);
        unint64_t v84 = *(void *)(v0 + 864);
        if (v83)
        {
          uint64_t v159 = *(void *)(v0 + 648);
          uint64_t v160 = *(void *)(v0 + 696);
          uint64_t v148 = *(void *)(v0 + 856);
          uint64_t v150 = *(void *)(v0 + 608);
          uint64_t v156 = *(void *)(v0 + 600);
          *(void *)os_log_type_t typea = *(void *)(v0 + 592);
          long long v85 = *(void **)(v0 + 504);
          uint64_t v86 = swift_slowAlloc();
          os_log_t log = (os_log_t)swift_slowAlloc();
          v169[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 138412802;
          os_log_type_t v158 = v82;
          *(void *)(v0 + 456) = v85;
          unsigned __int8 v154 = v53;
          id v87 = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          log->Class isa = (Class)v85;

          *(_WORD *)(v86 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 464) = sub_1000143F4(v148, v84, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v86 + 22) = 2080;
          id v88 = [v168 uniqueIdentifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v91 = v90;
          (*(void (**)(uint64_t, os_log_type_t *))(v156 + 8))(v150, *(os_log_type_t **)typea);
          *(void *)(v0 + 392) = sub_1000143F4(v89, v91, v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          uint64_t v64 = v154;
          _os_log_impl((void *)&_mh_execute_header, v154, v158, "[%@] Using existing marketplace coordinator for distributor: %s coordinatorID: %s", (uint8_t *)v86, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          goto LABEL_23;
        }
        uint64_t v126 = *(void *)(v0 + 696);
      }
      uint64_t v127 = *(void *)(v0 + 648);
      uint64_t v128 = *(void **)(v0 + 504);

      swift_bridgeObjectRelease_n();
      uint64_t v92 = v126;
      uint64_t v93 = v127;
LABEL_44:
      v163(v92, v93);
      uint64_t v129 = *(void *)(v0 + 912);
      uint64_t v131 = *(void *)(v0 + 80);
      uint64_t v130 = *(void *)(v0 + 88);
      id v132 = [objc_allocWithZone((Class)MIStoreMetadata) init];
      *(void *)(v0 + 976) = v132;
      NSString v133 = String._bridgeToObjectiveC()();
      [v132 setSoftwareVersionBundleID:v133];

      id v134 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v129];
      [v132 setItemID:v134];

      if (v130)
      {
        swift_bridgeObjectRetain();
        id v135 = [v132 distributorInfo];
        if (!v135)
        {
          swift_bridgeObjectRelease();
          if ((*(unsigned char *)(v0 + 112) & 1) == 0) {
            goto LABEL_48;
          }
          goto LABEL_50;
        }
        long long v136 = v135;
        sub_1000172F8(&qword_10065B658);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
        *(void *)(inited + 32) = 0;
        *(void *)(inited + 40) = 0xE000000000000000;
        *(void *)(inited + 48) = v131;
        *(void *)(inited + 56) = v130;
        sub_10044B560(inited);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v136 setLocalizedDistributorName:isa];
      }
      if ((*(unsigned char *)(v0 + 112) & 1) == 0)
      {
LABEL_48:
        unint64_t v139 = sub_1002F9EF8();
        uint64_t v165 = *(void *)(v0 + 864);
        uint64_t v140 = *(void *)(v0 + 856);
        uint64_t v141 = &type metadata for NativeDistributor;
        uint64_t v142 = v166;
LABEL_51:
        *(void *)(v0 + 312) = v141;
        *(void *)(v0 + 320) = v139;
        *(void *)(v0 + 288) = v140;
        *(void *)(v0 + 296) = v165;
        swift_bridgeObjectRetain();
        uint64_t v143 = (void *)swift_task_alloc();
        *(void *)(v0 + 984) = v143;
        void *v143 = v0;
        v143[1] = sub_10039DAA0;
        uint64_t v144 = *(void *)(v0 + 864);
        uint64_t v145 = *(void *)(v0 + 856);
        return sub_1004A4EC0(v145, v144, (uint64_t)v132, v0 + 288, v142);
      }
LABEL_50:
      uint64_t v141 = &type metadata for WebDistributor;
      unint64_t v139 = sub_1002BEA38();
      uint64_t v142 = v166;
      uint64_t v140 = v161;
      goto LABEL_51;
    }
    id v68 = v46;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v0 + 16;
    sub_1003AD9F4(v0 + 16);
    int v69 = *(void **)(v0 + 928);
    static Logger.restore.getter();
    id v70 = v69;
    swift_errorRetain();
    id v71 = v70;
    swift_errorRetain();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    uint64_t v75 = *(void **)(v0 + 928);
    if (v74)
    {
      uint64_t v76 = swift_slowAlloc();
      uint64_t v77 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 138412546;
      *(void *)(v76 + 4) = v75;
      void *v77 = v75;

      *(_WORD *)(v76 + 12) = 2112;
      swift_errorRetain();
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v76 + 14) = v78;
      v77[1] = v78;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "[%@] Failed to install distributor due to error: %@", (uint8_t *)v76, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v72 = *(NSObject **)(v0 + 928);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    long long v94 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    uint64_t v95 = *(void *)(v0 + 664);
    uint64_t v96 = *(void *)(v0 + 648);
    uint64_t v36 = *(void *)(v0 + 640);
    swift_errorRelease();

    v94(v95, v96);
    uint64_t v9 = v0 + 337;
  }
  else
  {
    uint64_t v25 = *(void **)(v0 + 504);
    sub_1003AD9F4(v0 + 16);
    static Logger.restore.getter();
    swift_bridgeObjectRetain();
    id v26 = v25;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    unint64_t v30 = *(void *)(v0 + 864);
    if (v29)
    {
      uint64_t v31 = *(void *)(v0 + 856);
      uint64_t v164 = *(void *)(v0 + 672);
      uint64_t v32 = *(void *)(v0 + 656);
      uint64_t v162 = *(void *)(v0 + 648);
      uint64_t v33 = *(void *)(v0 + 504);
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      v169[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412546;
      *(void *)(v34 + 4) = v33;
      *uint64_t v35 = v33;
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v34 + 14) = sub_1000143F4(v31, v30, v169);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%@] There is an active installation of distributor: %s", (uint8_t *)v34, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v9 = v0 + 337;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v164, v162);
    }
    else
    {
      uint64_t v65 = *(void *)(v0 + 672);
      uint64_t v66 = *(void *)(v0 + 656);
      uint64_t v67 = *(void *)(v0 + 648);

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
    }
    uint64_t v36 = *(void *)(v0 + 640);
  }
  sub_10001729C(v36, &qword_100661818);
  uint64_t v97 = *(void *)(v0 + 752) + 1;
  if (v97 == *(void *)(v0 + 744))
  {
    uint64_t v98 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v98;
    if (*(void *)(v98 + 16))
    {
      uint64_t v99 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v99;
      *uint64_t v99 = v0;
      v99[1] = sub_10039F0D0;
      uint64_t v100 = *(void *)(v0 + 528);
      uint64_t v101 = *(void *)(v0 + 520);
      uint64_t v103 = *(void *)(v0 + 504);
      uint64_t v102 = *(void *)(v0 + 512);
      uint64_t v104 = *(void *)(v0 + 488);
      uint64_t v105 = *(void *)(v0 + 480);
      uint64_t v172 = *(void *)(v0 + 536);
      return sub_100389420(v98, v102, v101, v100, 1, v105, v104, v103);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      os_log_type_t v122 = *(uint64_t (**)(void))(v0 + 8);
      return v122();
    }
  }
  else
  {
    *(void *)(v0 + 752) = v97;
    uint64_t v108 = *(void *)(v0 + 488);
    uint64_t v107 = *(void *)(v0 + 496);
    uint64_t v109 = *(void *)(v0 + 472) + 104 * v97;
    long long v111 = *(_OWORD *)(v109 + 48);
    long long v110 = *(_OWORD *)(v109 + 64);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)(v109 + 32);
    *(_OWORD *)(v10 + 16) = v111;
    *(_OWORD *)(v10 + 32) = v110;
    long long v113 = *(_OWORD *)(v109 + 96);
    long long v112 = *(_OWORD *)(v109 + 112);
    long long v114 = *(_OWORD *)(v109 + 80);
    *(unsigned char *)(v10 + 96) = *(unsigned char *)(v109 + 128);
    *(_OWORD *)(v10 + 64) = v113;
    *(_OWORD *)(v10 + 80) = v112;
    *(_OWORD *)(v10 + 48) = v114;
    *(void *)(v0 + 768) = *(void *)(v109 + 32);
    *(void *)(v0 + 776) = *(void *)(v109 + 40);
    *(void *)(v0 + 784) = *(void *)(v109 + 48);
    *(void *)(v0 + 792) = *(void *)(v109 + 56);
    *(void *)(v0 + 800) = *(void *)(v109 + 64);
    *(void *)(v0 + 808) = *(void *)(v109 + 72);
    *(void *)(v0 + 816) = *(void *)(v109 + 80);
    *(unsigned char *)(v9 + 1) = *(unsigned char *)(v109 + 88);
    *(void *)(v0 + 824) = *(void *)(v109 + 96);
    *(void *)(v0 + 832) = *(void *)(v109 + 104);
    *(void *)(v0 + 840) = *(void *)(v109 + 112);
    *(void *)(v0 + 848) = *(void *)(v109 + 120);
    *(unsigned char *)(v9 + 2) = *(unsigned char *)(v109 + 128);
    uint64_t v115 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v115;
    uint64_t v116 = *(void *)(v107 + 216);
    sub_1003AD988(v10);
    if (v108)
    {
      uint64_t v117 = *(void *)(v0 + 488);
      uint64_t v118 = dword_100663440;
      swift_bridgeObjectRetain();
      unint64_t v119 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v119;
      void *v119 = v0;
      v119[1] = sub_10039A79C;
      uint64_t v120 = *(void *)(v0 + 504);
      uint64_t v121 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v118))(v121, v117, v116, v120);
    }
    else
    {
      uint64_t v123 = dword_100663448;
      swift_bridgeObjectRetain();
      id v124 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v124;
      void *v124 = v0;
      v124[1] = sub_10039B32C;
      uint64_t v125 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v123))(v10, v116, v125);
    }
  }
}

uint64_t sub_10039DAA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 288;
  *(void *)(*v1 + 992) = v0;
  swift_task_dealloc();
  sub_100014524(v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1003AD9F4(v2 + 16);
    unint64_t v4 = sub_10039F3EC;
  }
  else
  {
    unint64_t v4 = sub_10039DC28;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10039DC28()
{
  id v1 = objc_allocWithZone((Class)IXPromisedOutOfBandTransfer);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithName:v2 client:28 diskSpaceNeeded:0];

  if (!v3)
  {
LABEL_6:
    uint64_t v10 = *(void **)(v0 + 968);
    uint64_t v11 = *(void **)(v0 + 928);
    uint64_t v12 = *(void *)(v0 + 584);
    uint64_t v13 = *(void *)(v0 + 560);
    long long v14 = *(void **)(v0 + 504);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 552) + 104))(v13, *(unsigned int *)(v0 + 356), *(void *)(v0 + 544));
    id v15 = v11;
    sub_1004D4EEC(v10, v13, v15, v12);
    static Logger.restore.getter();
    id v16 = v14;
    id v17 = v15;
    id v18 = v16;
    id v19 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void **)(v0 + 928);
    uint64_t v24 = *(void **)(v0 + 504);
    if (v22)
    {
      uint64_t v25 = swift_slowAlloc();
      id v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      *(void *)(v0 + 424) = v24;
      id v27 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v26 = v24;

      *(_WORD *)(v25 + 12) = 2112;
      *(void *)(v0 + 368) = v23;
      id v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v26[1] = v23;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@][%@] Created restore", (uint8_t *)v25, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v20 = *(NSObject **)(v0 + 504);
    }
    BOOL v29 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    uint64_t v30 = *(void *)(v0 + 936);
    uint64_t v92 = *(void *)(v0 + 864);
    uint64_t v93 = *(void *)(v0 + 912);
    uint64_t v90 = *(void *)(v0 + 944);
    uint64_t v91 = *(void *)(v0 + 856);
    uint64_t v31 = *(void *)(v0 + 688);
    uint64_t v32 = *(void *)(v0 + 648);
    uint64_t v33 = *(void *)(v0 + 584);
    uint64_t v34 = *(int **)(v0 + 568);

    uint64_t v36 = *(void *)(v0 + 96);
    uint64_t v35 = *(void *)(v0 + 104);
    *(void *)(v0 + 1000) = v36;
    *(void *)(v0 + 1008) = v35;
    v29(v31, v32);
    uint64_t v37 = (void *)(v33 + v34[12]);
    swift_bridgeObjectRelease();
    void *v37 = v30;
    v37[1] = v90;
    uint64_t v38 = (void *)(v33 + v34[13]);
    swift_bridgeObjectRelease();
    *uint64_t v38 = v91;
    v38[1] = v92;
    uint64_t v39 = v33 + v34[15];
    *(void *)uint64_t v39 = v93;
    *(unsigned char *)(v39 + 8) = 0;
    uint64_t v40 = (void *)(v33 + v34[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v40 = v36;
    v40[1] = v35;
    id v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v41;
    void *v41 = v0;
    v41[1] = sub_10039E678;
    uint64_t v42 = *(void *)(v0 + 584);
    return sub_10037BDC4(v42);
  }
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {
LABEL_5:

    goto LABEL_6;
  }
  uint64_t v5 = (void *)v4;
  id v6 = *(id *)(v0 + 968);
  [v3 setPercentComplete:1.0];
  [v3 setComplete:1];
  *(void *)(v0 + 440) = 0;
  unsigned int v7 = [v5 setUserDataPromise:v3 error:v0 + 440];
  char v8 = *(void **)(v0 + 440);
  if (v7)
  {
    id v9 = v8;

    id v3 = *(id *)(v0 + 968);
    goto LABEL_5;
  }
  uint64_t v44 = (_OWORD *)(v0 + 16);
  id v45 = *(void **)(v0 + 976);
  uint64_t v46 = *(void **)(v0 + 968);
  id v47 = v8;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1003AD9F4(v0 + 16);

  id v48 = *(void **)(v0 + 928);
  static Logger.restore.getter();
  id v49 = v48;
  swift_errorRetain();
  id v50 = v49;
  swift_errorRetain();
  id v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  os_log_type_t v54 = *(void **)(v0 + 928);
  if (v53)
  {
    uint64_t v55 = swift_slowAlloc();
    unint64_t v56 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 138412546;
    *(void *)(v55 + 4) = v54;
    *unint64_t v56 = v54;

    *(_WORD *)(v55 + 12) = 2112;
    swift_errorRetain();
    uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v55 + 14) = v57;
    v56[1] = v57;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "[%@] Failed to install distributor due to error: %@", (uint8_t *)v55, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v51 = *(NSObject **)(v0 + 928);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  uint64_t v59 = *(void *)(v0 + 664);
  uint64_t v60 = *(void *)(v0 + 648);
  uint64_t v61 = *(void *)(v0 + 640);
  swift_errorRelease();

  v58(v59, v60);
  sub_10001729C(v61, &qword_100661818);
  uint64_t v62 = *(void *)(v0 + 752) + 1;
  if (v62 == *(void *)(v0 + 744))
  {
    uint64_t v63 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v63;
    if (*(void *)(v63 + 16))
    {
      uint64_t v64 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v64;
      *uint64_t v64 = v0;
      v64[1] = sub_10039F0D0;
      uint64_t v65 = *(void *)(v0 + 528);
      uint64_t v66 = *(void *)(v0 + 520);
      uint64_t v68 = *(void *)(v0 + 504);
      uint64_t v67 = *(void *)(v0 + 512);
      uint64_t v69 = *(void *)(v0 + 488);
      uint64_t v70 = *(void *)(v0 + 480);
      return sub_100389420(v63, v67, v66, v65, 1, v70, v69, v68);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v86 = *(uint64_t (**)(void))(v0 + 8);
      return v86();
    }
  }
  else
  {
    *(void *)(v0 + 752) = v62;
    uint64_t v72 = *(void *)(v0 + 488);
    uint64_t v71 = *(void *)(v0 + 496);
    uint64_t v73 = *(void *)(v0 + 472) + 104 * v62;
    long long v75 = *(_OWORD *)(v73 + 48);
    long long v74 = *(_OWORD *)(v73 + 64);
    *uint64_t v44 = *(_OWORD *)(v73 + 32);
    *(_OWORD *)(v0 + 32) = v75;
    *(_OWORD *)(v0 + 48) = v74;
    long long v77 = *(_OWORD *)(v73 + 96);
    long long v76 = *(_OWORD *)(v73 + 112);
    long long v78 = *(_OWORD *)(v73 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v73 + 128);
    *(_OWORD *)(v0 + 80) = v77;
    *(_OWORD *)(v0 + 96) = v76;
    *(_OWORD *)(v0 + 64) = v78;
    *(void *)(v0 + 768) = *(void *)(v73 + 32);
    *(void *)(v0 + 776) = *(void *)(v73 + 40);
    *(void *)(v0 + 784) = *(void *)(v73 + 48);
    *(void *)(v0 + 792) = *(void *)(v73 + 56);
    *(void *)(v0 + 800) = *(void *)(v73 + 64);
    *(void *)(v0 + 808) = *(void *)(v73 + 72);
    *(void *)(v0 + 816) = *(void *)(v73 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v73 + 88);
    *(void *)(v0 + 824) = *(void *)(v73 + 96);
    *(void *)(v0 + 832) = *(void *)(v73 + 104);
    *(void *)(v0 + 840) = *(void *)(v73 + 112);
    *(void *)(v0 + 848) = *(void *)(v73 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v73 + 128);
    uint64_t v79 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v79;
    uint64_t v80 = *(void *)(v71 + 216);
    sub_1003AD988(v0 + 16);
    if (v72)
    {
      uint64_t v81 = *(void *)(v0 + 488);
      uint64_t v82 = dword_100663440;
      swift_bridgeObjectRetain();
      BOOL v83 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v83;
      *BOOL v83 = v0;
      v83[1] = sub_10039A79C;
      uint64_t v84 = *(void *)(v0 + 504);
      uint64_t v85 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v82))(v85, v81, v80, v84);
    }
    else
    {
      uint64_t v87 = dword_100663448;
      swift_bridgeObjectRetain();
      id v88 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v88;
      void *v88 = v0;
      v88[1] = sub_10039B32C;
      uint64_t v89 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v87))((uint64_t)v44, v80, v89);
    }
  }
}

uint64_t sub_10039E678()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1024) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_1003AD9F4(v2 + 16);
    id v3 = sub_10039FA00;
  }
  else
  {
    id v3 = sub_10039E7C8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10039E7C8()
{
  uint64_t v87 = v0;
  uint64_t v84 = (unsigned char *)(v0 + 338);
  uint64_t v1 = *(void *)(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 584);
  uint64_t v3 = *(void *)(v0 + 576);
  if (v1) {
    uint64_t v4 = *(void *)(v0 + 1000);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = 0xE000000000000000;
  if (v1) {
    unint64_t v5 = *(void *)(v0 + 1008);
  }
  unint64_t v79 = v5;
  uint64_t v81 = v4;
  sub_1000172F8(&qword_10065E680);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1005A3EC0;
  sub_1003AEFD4(v2, v7 + v6, (uint64_t (*)(void))type metadata accessor for Restore);
  sub_1003AD988(v0 + 16);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v9 = *(void **)(v0 + 760);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    id v9 = sub_100290AC8(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  uint64_t v85 = v0 + 16;
  if (v11 >= v10 >> 1) {
    id v9 = sub_100290AC8((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  uint64_t v12 = *(void **)(v0 + 928);
  char v13 = *(unsigned char *)(v0 + 339);
  uint64_t v14 = *(void *)(v0 + 816);
  long long v16 = *(_OWORD *)(v0 + 784);
  long long v15 = *(_OWORD *)(v0 + 800);
  long long v17 = *(_OWORD *)(v0 + 768);
  id v18 = *(void **)(v0 + 504);
  *(unsigned char *)(v0 + 1040) = *v84;
  id v19 = &v9[16 * v11];
  long long v20 = *(_OWORD *)(v0 + 824);
  long long v21 = *(_OWORD *)(v0 + 840);
  uint64_t v83 = (uint64_t)v9;
  _OWORD v9[2] = v11 + 1;
  v19[4] = v81;
  v19[5] = v79;
  *((_OWORD *)v19 + 3) = v17;
  *((_OWORD *)v19 + 4) = v16;
  *((_OWORD *)v19 + 5) = v15;
  v19[12] = v14;
  *((unsigned char *)v19 + 104) = *(unsigned char *)(v0 + 1040);
  int v22 = *(_DWORD *)(v0 + 217);
  *((_DWORD *)v19 + 27) = *(_DWORD *)(v0 + 220);
  *(_DWORD *)((char *)v19 + 105) = v22;
  *((_OWORD *)v19 + 7) = v20;
  *((_OWORD *)v19 + 8) = v21;
  *((unsigned char *)v19 + 144) = v13;
  int v23 = *(_DWORD *)(v0 + 113);
  *((_DWORD *)v19 + 37) = *(_DWORD *)(v0 + 116);
  *(_DWORD *)((char *)v19 + 145) = v23;
  v19[19] = v7;
  static Logger.restore.getter();
  id v24 = v18;
  id v25 = v12;
  uint64_t v26 = v0 + 16;
  sub_1003AD988(v85);
  id v27 = v24;
  id v28 = v25;
  BOOL v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void **)(v0 + 976);
  uint64_t v82 = *(void **)(v0 + 968);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  if (v31)
  {
    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    os_log_t log = v29;
    unint64_t v34 = *(void *)(v0 + 944);
    uint64_t v35 = *(void **)(v0 + 928);
    uint64_t v77 = *(void *)(v0 + 648);
    uint64_t v78 = *(void *)(v0 + 680);
    uint64_t v74 = *(void *)(v0 + 936);
    uint64_t v36 = *(void **)(v0 + 504);
    uint64_t v37 = swift_slowAlloc();
    long long v76 = v32;
    uint64_t v38 = (void *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138412802;
    *(void *)(v0 + 400) = v36;
    id v39 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v38 = v36;

    *(_WORD *)(v37 + 12) = 2112;
    *(void *)(v0 + 408) = v35;
    id v40 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v38[1] = v35;
    uint64_t v26 = v0 + 16;

    *(_WORD *)(v37 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 416) = sub_1000143F4(v74, v34, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003AD9F4(v85);
    sub_1003AD9F4(v85);
    _os_log_impl((void *)&_mh_execute_header, log, v30, "[%@][%@] Added restore distributor with distributorDomain: %s", (uint8_t *)v37, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v80(v78, v77);
  }
  else
  {
    id v41 = *(void **)(v0 + 928);
    uint64_t v42 = *(void *)(v0 + 680);
    uint64_t v43 = *(void *)(v0 + 648);
    uint64_t v44 = *(void **)(v0 + 504);

    sub_1003AD9F4(v85);
    sub_1003AD9F4(v85);

    v33(v42, v43);
  }
  uint64_t v45 = *(void *)(v0 + 584);
  sub_10001729C(*(void *)(v0 + 640), &qword_100661818);
  sub_1003AF03C(v45, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v46 = *(void *)(v0 + 752) + 1;
  if (v46 == *(void *)(v0 + 744))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v83;
    if (*(void *)(v83 + 16))
    {
      id v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v47;
      *id v47 = v0;
      v47[1] = sub_10039F0D0;
      uint64_t v48 = *(void *)(v0 + 528);
      uint64_t v49 = *(void *)(v0 + 520);
      uint64_t v51 = *(void *)(v0 + 504);
      uint64_t v50 = *(void *)(v0 + 512);
      uint64_t v52 = *(void *)(v0 + 488);
      uint64_t v53 = *(void *)(v0 + 480);
      uint64_t v89 = *(void *)(v0 + 536);
      return sub_100389420(v83, v50, v49, v48, 1, v53, v52, v51);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v70 = *(uint64_t (**)(void))(v0 + 8);
      return v70();
    }
  }
  else
  {
    *(void *)(v0 + 760) = v83;
    *(void *)(v0 + 752) = v46;
    uint64_t v56 = *(void *)(v0 + 488);
    uint64_t v55 = *(void *)(v0 + 496);
    uint64_t v57 = *(void *)(v0 + 472) + 104 * v46;
    long long v59 = *(_OWORD *)(v57 + 48);
    long long v58 = *(_OWORD *)(v57 + 64);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)(v57 + 32);
    *(_OWORD *)(v26 + 16) = v59;
    *(_OWORD *)(v26 + 32) = v58;
    long long v61 = *(_OWORD *)(v57 + 96);
    long long v60 = *(_OWORD *)(v57 + 112);
    long long v62 = *(_OWORD *)(v57 + 80);
    *(unsigned char *)(v26 + 96) = *(unsigned char *)(v57 + 128);
    *(_OWORD *)(v26 + 64) = v61;
    *(_OWORD *)(v26 + 80) = v60;
    *(_OWORD *)(v26 + 48) = v62;
    *(void *)(v0 + 768) = *(void *)(v57 + 32);
    *(void *)(v0 + 776) = *(void *)(v57 + 40);
    *(void *)(v0 + 784) = *(void *)(v57 + 48);
    *(void *)(v0 + 792) = *(void *)(v57 + 56);
    *(void *)(v0 + 800) = *(void *)(v57 + 64);
    *(void *)(v0 + 808) = *(void *)(v57 + 72);
    *(void *)(v0 + 816) = *(void *)(v57 + 80);
    *uint64_t v84 = *(unsigned char *)(v57 + 88);
    *(void *)(v0 + 824) = *(void *)(v57 + 96);
    *(void *)(v0 + 832) = *(void *)(v57 + 104);
    *(void *)(v0 + 840) = *(void *)(v57 + 112);
    *(void *)(v0 + 848) = *(void *)(v57 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v57 + 128);
    uint64_t v63 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v63;
    uint64_t v64 = *(void *)(v55 + 216);
    sub_1003AD988(v26);
    if (v56)
    {
      uint64_t v65 = *(void *)(v0 + 488);
      uint64_t v66 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v67 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v67;
      *uint64_t v67 = v0;
      v67[1] = sub_10039A79C;
      uint64_t v68 = *(void *)(v0 + 504);
      uint64_t v69 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v66))(v69, v65, v64, v68);
    }
    else
    {
      uint64_t v71 = dword_100663448;
      swift_bridgeObjectRetain();
      uint64_t v72 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v72;
      void *v72 = v0;
      v72[1] = sub_10039B32C;
      uint64_t v73 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v71))(v26, v64, v73);
    }
  }
}

uint64_t sub_10039F0D0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10039F3EC()
{
  uint64_t v1 = *(void **)(v0 + 968);

  uint64_t v2 = *(void **)(v0 + 928);
  static Logger.restore.getter();
  id v3 = v2;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  char v8 = *(void **)(v0 + 928);
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    unint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    *(void *)(v9 + 4) = v8;
    *unint64_t v10 = v8;

    *(_WORD *)(v9 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v9 + 14) = v11;
    v10[1] = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Failed to install distributor due to error: %@", (uint8_t *)v9, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v5 = *(NSObject **)(v0 + 928);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  uint64_t v13 = *(void *)(v0 + 664);
  uint64_t v14 = *(void *)(v0 + 648);
  uint64_t v15 = *(void *)(v0 + 640);
  swift_errorRelease();

  v12(v13, v14);
  sub_10001729C(v15, &qword_100661818);
  uint64_t v16 = *(void *)(v0 + 752) + 1;
  if (v16 == *(void *)(v0 + 744))
  {
    uint64_t v17 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v17;
    if (*(void *)(v17 + 16))
    {
      id v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v18;
      *id v18 = v0;
      v18[1] = sub_10039F0D0;
      uint64_t v19 = *(void *)(v0 + 528);
      uint64_t v20 = *(void *)(v0 + 520);
      uint64_t v22 = *(void *)(v0 + 504);
      uint64_t v21 = *(void *)(v0 + 512);
      uint64_t v23 = *(void *)(v0 + 488);
      uint64_t v24 = *(void *)(v0 + 480);
      return sub_100389420(v17, v21, v20, v19, 1, v24, v23, v22);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v41 = *(uint64_t (**)(void))(v0 + 8);
      return v41();
    }
  }
  else
  {
    *(void *)(v0 + 752) = v16;
    uint64_t v27 = *(void *)(v0 + 488);
    uint64_t v26 = *(void *)(v0 + 496);
    uint64_t v28 = *(void *)(v0 + 472) + 104 * v16;
    long long v30 = *(_OWORD *)(v28 + 48);
    long long v29 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(v0 + 32) = v30;
    *(_OWORD *)(v0 + 48) = v29;
    long long v32 = *(_OWORD *)(v28 + 96);
    long long v31 = *(_OWORD *)(v28 + 112);
    long long v33 = *(_OWORD *)(v28 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v28 + 128);
    *(_OWORD *)(v0 + 80) = v32;
    *(_OWORD *)(v0 + 96) = v31;
    *(_OWORD *)(v0 + 64) = v33;
    *(void *)(v0 + 768) = *(void *)(v28 + 32);
    *(void *)(v0 + 776) = *(void *)(v28 + 40);
    *(void *)(v0 + 784) = *(void *)(v28 + 48);
    *(void *)(v0 + 792) = *(void *)(v28 + 56);
    *(void *)(v0 + 800) = *(void *)(v28 + 64);
    *(void *)(v0 + 808) = *(void *)(v28 + 72);
    *(void *)(v0 + 816) = *(void *)(v28 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v28 + 88);
    *(void *)(v0 + 824) = *(void *)(v28 + 96);
    *(void *)(v0 + 832) = *(void *)(v28 + 104);
    *(void *)(v0 + 840) = *(void *)(v28 + 112);
    *(void *)(v0 + 848) = *(void *)(v28 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v28 + 128);
    uint64_t v34 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v34;
    uint64_t v35 = *(void *)(v26 + 216);
    sub_1003AD988(v0 + 16);
    if (v27)
    {
      uint64_t v36 = *(void *)(v0 + 488);
      uint64_t v37 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_10039A79C;
      uint64_t v39 = *(void *)(v0 + 504);
      uint64_t v40 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v37))(v40, v36, v35, v39);
    }
    else
    {
      uint64_t v42 = dword_100663448;
      swift_bridgeObjectRetain();
      uint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v43;
      *uint64_t v43 = v0;
      v43[1] = sub_10039B32C;
      uint64_t v44 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v42))(v0 + 16, v35, v44);
    }
  }
}

uint64_t sub_10039FA00()
{
  uint64_t v1 = *(void **)(v0 + 968);
  uint64_t v2 = *(void *)(v0 + 584);

  sub_1003AF03C(v2, (uint64_t (*)(void))type metadata accessor for Restore);
  id v3 = *(void **)(v0 + 928);
  static Logger.restore.getter();
  id v4 = v3;
  swift_errorRetain();
  id v5 = v4;
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void **)(v0 + 928);
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412546;
    *(void *)(v10 + 4) = v9;
    *uint64_t v11 = v9;

    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v10 + 14) = v12;
    v11[1] = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Failed to install distributor due to error: %@", (uint8_t *)v10, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v6 = *(NSObject **)(v0 + 928);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
  uint64_t v14 = *(void *)(v0 + 664);
  uint64_t v15 = *(void *)(v0 + 648);
  uint64_t v16 = *(void *)(v0 + 640);
  swift_errorRelease();

  v13(v14, v15);
  sub_10001729C(v16, &qword_100661818);
  uint64_t v17 = *(void *)(v0 + 752) + 1;
  if (v17 == *(void *)(v0 + 744))
  {
    uint64_t v18 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 880) = v18;
    if (*(void *)(v18 + 16))
    {
      uint64_t v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 1032) = v19;
      *uint64_t v19 = v0;
      v19[1] = sub_10039F0D0;
      uint64_t v20 = *(void *)(v0 + 528);
      uint64_t v21 = *(void *)(v0 + 520);
      uint64_t v23 = *(void *)(v0 + 504);
      uint64_t v22 = *(void *)(v0 + 512);
      uint64_t v24 = *(void *)(v0 + 488);
      uint64_t v25 = *(void *)(v0 + 480);
      return sub_100389420(v18, v22, v21, v20, 1, v25, v24, v23);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
      return v42();
    }
  }
  else
  {
    *(void *)(v0 + 752) = v17;
    uint64_t v28 = *(void *)(v0 + 488);
    uint64_t v27 = *(void *)(v0 + 496);
    uint64_t v29 = *(void *)(v0 + 472) + 104 * v17;
    long long v31 = *(_OWORD *)(v29 + 48);
    long long v30 = *(_OWORD *)(v29 + 64);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v0 + 32) = v31;
    *(_OWORD *)(v0 + 48) = v30;
    long long v33 = *(_OWORD *)(v29 + 96);
    long long v32 = *(_OWORD *)(v29 + 112);
    long long v34 = *(_OWORD *)(v29 + 80);
    *(unsigned char *)(v0 + 112) = *(unsigned char *)(v29 + 128);
    *(_OWORD *)(v0 + 80) = v33;
    *(_OWORD *)(v0 + 96) = v32;
    *(_OWORD *)(v0 + 64) = v34;
    *(void *)(v0 + 768) = *(void *)(v29 + 32);
    *(void *)(v0 + 776) = *(void *)(v29 + 40);
    *(void *)(v0 + 784) = *(void *)(v29 + 48);
    *(void *)(v0 + 792) = *(void *)(v29 + 56);
    *(void *)(v0 + 800) = *(void *)(v29 + 64);
    *(void *)(v0 + 808) = *(void *)(v29 + 72);
    *(void *)(v0 + 816) = *(void *)(v29 + 80);
    *(unsigned char *)(v0 + 338) = *(unsigned char *)(v29 + 88);
    *(void *)(v0 + 824) = *(void *)(v29 + 96);
    *(void *)(v0 + 832) = *(void *)(v29 + 104);
    *(void *)(v0 + 840) = *(void *)(v29 + 112);
    *(void *)(v0 + 848) = *(void *)(v29 + 120);
    *(unsigned char *)(v0 + 339) = *(unsigned char *)(v29 + 128);
    uint64_t v35 = *(void *)(v0 + 56);
    *(void *)(v0 + 856) = *(void *)(v0 + 48);
    *(void *)(v0 + 864) = v35;
    uint64_t v36 = *(void *)(v27 + 216);
    sub_1003AD988(v0 + 16);
    if (v28)
    {
      uint64_t v37 = *(void *)(v0 + 488);
      uint64_t v38 = dword_100663440;
      swift_bridgeObjectRetain();
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_10039A79C;
      uint64_t v40 = *(void *)(v0 + 504);
      uint64_t v41 = *(void *)(v0 + 480);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100663440 + v38))(v41, v37, v36, v40);
    }
    else
    {
      uint64_t v43 = dword_100663448;
      swift_bridgeObjectRetain();
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 888) = v44;
      *uint64_t v44 = v0;
      v44[1] = sub_10039B32C;
      uint64_t v45 = *(void *)(v0 + 504);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663448 + v43))(v0 + 16, v36, v45);
    }
  }
}

uint64_t sub_1003A0034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  _OWORD v8[9] = v12;
  v8[6] = a6;
  v8[7] = a7;
  void v8[4] = a4;
  v8[5] = a5;
  uint64_t v9 = type metadata accessor for Logger();
  v8[10] = v9;
  v8[11] = *(void *)(v9 - 8);
  v8[12] = swift_task_alloc();
  v8[13] = swift_task_alloc();
  return _swift_task_switch(sub_1003A0114, 0, 0);
}

uint64_t sub_1003A0114()
{
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  *(void *)(v0 + 112) = v2[28];
  uint64_t v3 = v2[5];
  unint64_t v4 = v2[6];
  if (sub_1004D4588(v3, v4, v1))
  {
    sub_1004D491C(v3, v4, *(void **)(v0 + 40));
    id v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v5;
    *id v5 = v0;
    v5[1] = sub_1003A021C;
    return sub_1004D2BAC();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1003A021C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A0318, 0, 0);
}

uint64_t sub_1003A0318()
{
  uint64_t v1 = (void *)v0[5];
  static Logger.restore.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (void *)v0[5];
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138412290;
    v0[3] = v5;
    id v7 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Setup assistant observer started", v6, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = (void *)v0[5];
  }
  uint64_t v9 = v0[13];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[16] = v12;
  v0[17] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  swift_retain();
  return _swift_task_switch(sub_1003A04EC, 0, 0);
}

uint64_t sub_1003A04EC()
{
  if (static Task<>.isCancelled.getter())
  {
    return _swift_task_switch(sub_1003A09E8, 0, 0);
  }
  else
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1003A0600;
    uint64_t v2 = *(void *)(v0 + 112);
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 152, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E03C, v2, &type metadata for Bool);
  }
}

uint64_t sub_1003A0600()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A06FC, 0, 0);
}

uint64_t sub_1003A06FC()
{
  *(unsigned char *)(v0 + 153) = *(unsigned char *)(v0 + 152);
  return _swift_task_switch(sub_1003A0720, 0, 0);
}

uint64_t sub_1003A0720()
{
  if (*(unsigned char *)(v0 + 153) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 56);
    sub_1000172F8(&qword_10065E578);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1005A3EC0;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD00000000000003ALL;
    *(void *)(v5 + 40) = 0x80000001005BE800;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    sub_100376FB4(v4, v3, v1, 2, 0, 0, 0, 0, 1u, v2);
    swift_release();
    os_log_type_t v6 = *(void **)(v0 + 40);
    static Logger.restore.getter();
    id v7 = v6;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void **)(v0 + 40);
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)(v0 + 16) = v11;
      id v14 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v11;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Setup assistant observer complete", v12, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v8 = *(NSObject **)(v0 + 40);
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 80);

    v15(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    return _swift_task_switch(sub_1003AF2F4, 0, 0);
  }
}

uint64_t sub_1003A09E8()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 40);
  static Logger.restore.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 40);
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138412290;
    *(void *)(v0 + 16) = v5;
    id v7 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Setup assistant observer complete", v6, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v3 = *(NSObject **)(v0 + 40);
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 80);

  v8(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1003A0BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[16] = v9;
  v6[17] = *(void *)(v9 - 8);
  v6[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  v6[19] = v10;
  v6[20] = *(void *)(v10 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  v6[26] = v11;
  v6[27] = *(void *)(v11 - 8);
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  v6[30] = swift_task_alloc();
  sub_1000172F8(&qword_100661820);
  v6[31] = swift_task_alloc();
  return _swift_task_switch(sub_1003A0ED0, 0, 0);
}

uint64_t sub_1003A0ED0()
{
  uint64_t v1 = v0[6];
  objc_allocWithZone((Class)type metadata accessor for LogKey());
  v0[32] = LogKey.init(string:)();
  uint64_t v2 = *(void *)(v1 + 152);
  v0[33] = v2;
  return _swift_task_switch(sub_1003A0F98, v2, 0);
}

uint64_t sub_1003A0F98()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v6 = *(void *)(*(void *)v1 + 104);
  v0[34] = v6;
  sub_100017238(v1 + v6, v3, &qword_100661820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  uint64_t v7 = self;
  v0[35] = v7;
  id v8 = [v7 defaultManager];
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  type metadata accessor for URLResourceKey(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[4] = 0;
  id v13 = [v8 contentsOfDirectoryAtURL:v11 includingPropertiesForKeys:isa options:0 error:v0 + 4];

  uint64_t v14 = (void *)v0[4];
  uint64_t v15 = v0[30];
  uint64_t v16 = v0[26];
  uint64_t v17 = v0[27];
  if (v13)
  {
    v0[36] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = v14;

    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v0[37] = v19;
    v0[38] = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v19(v15, v16);
    uint64_t v20 = sub_1003A11B0;
  }
  else
  {
    id v21 = v14;
    v0[40] = _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    uint64_t v20 = sub_1003A125C;
  }
  return _swift_task_switch(v20, 0, 0);
}

uint64_t sub_1003A11B0()
{
  *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 288) + 16);
  *(_DWORD *)(v0 + 368) = enum case for URL.DirectoryHint.inferFromPath(_:);
  *(void *)(v0 + 328) = 0;
  *(void *)(v0 + 336) = 0;
  return _swift_task_switch(sub_1003A13A0, 0, 0);
}

uint64_t sub_1003A125C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1003A13A0()
{
  unint64_t v1 = v0[42];
  if ((int64_t)v1 >= v0[39])
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[20] + 56))(v0[25], 1, 1, v0[19]);
    uint64_t v23 = v0[41];
    unint64_t v24 = v0[42];
  }
  else
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[27] + 80);
    uint64_t v27 = v0[36] + ((v2 + 32) & ~v2);
    uint64_t v3 = v0[41];
    do
    {
      if (v1 >= *(void *)(v0[36] + 16)) {
        __break(1u);
      }
      (*(void (**)(void, unint64_t, void))(v0[27] + 16))(v0[29], v27 + *(void *)(v0[27] + 72) * v1, v0[26]);
      uint64_t v12 = Data.init(contentsOf:options:)();
      if (v3)
      {
        uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[37];
        uint64_t v5 = v0[29];
        uint64_t v6 = v0[26];
        uint64_t v7 = v0[24];
        uint64_t v8 = v0[19];
        uint64_t v9 = v0[20];
        swift_errorRelease();
        v4(v5, v6);
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v10(v7, 1, 1, v8);
      }
      else
      {
        uint64_t v14 = v12;
        unint64_t v15 = v13;
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        sub_1003ADD04(&qword_100661828, (void (*)(uint64_t))type metadata accessor for Restore);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v26 = (void (*)(uint64_t, uint64_t))v0[37];
        uint64_t v16 = v0[29];
        uint64_t v17 = v0[26];
        uint64_t v18 = v0[24];
        uint64_t v20 = v0[19];
        uint64_t v19 = v0[20];
        sub_100013510(v14, v15);
        swift_release();
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
        v10(v18, 0, 1, v20);
        v26(v16, v17);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v20) != 1)
        {
          uint64_t v21 = v0[25];
          uint64_t v22 = v0[19];
          sub_1003A4FE4(v0[24], v21);
          v10(v21, 0, 1, v22);
          uint64_t v23 = 0;
          unint64_t v24 = v1 + 1;
          goto LABEL_11;
        }
      }
      uint64_t v11 = v0[39];
      sub_10001729C(v0[24], &qword_100661818);
      uint64_t v3 = 0;
      ++v1;
    }
    while (v1 != v11);
    v10(v0[25], 1, 1, v0[19]);
    uint64_t v23 = 0;
    unint64_t v24 = v0[39];
  }
LABEL_11:
  v0[43] = v23;
  v0[44] = v24;
  return _swift_task_switch(sub_1003A16E4, 0, 0);
}

uint64_t sub_1003A16E4()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[20] + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = (void *)v0[32];
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[23];
    uint64_t v8 = v0[7];
    uint64_t v7 = v0[8];
    sub_1003A4FE4(v1, v6);
    uint64_t v9 = (void *)(v6 + *(int *)(v2 + 36));
    BOOL v10 = *v9 == v8 && v9[1] == v7;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v11 = v0[33];
      uint64_t v12 = sub_1003A1950;
    }
    else
    {
      uint64_t v13 = v0[43];
      sub_1003AF03C(v0[23], (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v14 = v0[44];
      v0[41] = v13;
      v0[42] = v14;
      uint64_t v12 = sub_1003A13A0;
      uint64_t v11 = 0;
    }
    return _swift_task_switch(v12, v11, 0);
  }
}

uint64_t sub_1003A1950()
{
  uint64_t v1 = *(unsigned int *)(v0 + 368);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  (*(void (**)(void, void, void))(*(void *)(v0 + 136) + 16))(*(void *)(v0 + 144), *(void *)(v0 + 184), *(void *)(v0 + 128));
  *(void *)(v0 + 16) = UUID.uuidString.getter();
  *(void *)(v0 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(v3, v1, v4);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease();
  id v7 = [v2 defaultManager];
  URL._bridgeToObjectiveC()(v8);
  BOOL v10 = v9;
  *(void *)(v0 + 40) = 0;
  LODWORD(v4) = [v7 removeItemAtURL:v9 error:v0 + 40];

  uint64_t v11 = *(void **)(v0 + 40);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 208);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 128);
  uint64_t v17 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 136) + 8);
  if (v4)
  {
    id v18 = v11;
    v12(v13, v14);
    (*v17)(v15, v16);
    uint64_t v19 = sub_1003A1B98;
  }
  else
  {
    id v20 = v11;
    *(void *)(v0 + 360) = _convertNSErrorToError(_:)();

    swift_willThrow();
    v12(v13, v14);
    (*v17)(v15, v16);
    uint64_t v19 = sub_1003A1DE8;
  }
  return _swift_task_switch(v19, 0, 0);
}

uint64_t sub_1003A1B98()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  static Logger.restore.getter();
  sub_1003AEFD4(v3, v2, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[32];
  uint64_t v9 = v0[22];
  if (v7)
  {
    uint64_t v10 = v0[19];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v11 + 4) = v8;
    *uint64_t v12 = v8;

    *(_WORD *)(v11 + 12) = 2112;
    uint64_t v13 = *(void **)(v9 + *(int *)(v10 + 20));
    *(void *)(v11 + 14) = v13;
    v12[1] = v13;
    id v14 = v13;
    sub_1003AF03C(v9, (uint64_t (*)(void))type metadata accessor for Restore);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@][%@] Removed", (uint8_t *)v11, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_1003AF03C(v9, (uint64_t (*)(void))type metadata accessor for Restore);
    uint64_t v5 = v0[32];
  }

  uint64_t v15 = v0[43];
  (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  sub_1003AF03C(v0[23], (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v16 = v0[44];
  v0[41] = v15;
  v0[42] = v16;
  return _swift_task_switch(sub_1003A13A0, 0, 0);
}

uint64_t sub_1003A1DE8()
{
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[21];
  static Logger.restore.getter();
  sub_1003AEFD4(v2, v3, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v1;
  swift_errorRetain();
  id v5 = v4;
  swift_errorRetain();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (void *)v0[32];
  uint64_t v10 = v0[21];
  if (v8)
  {
    uint64_t v11 = v0[19];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412802;
    *(void *)(v12 + 4) = v9;
    *uint64_t v13 = v9;

    *(_WORD *)(v12 + 12) = 2112;
    id v14 = *(void **)(v10 + *(int *)(v11 + 20));
    *(void *)(v12 + 14) = v14;
    v13[1] = v14;
    id v15 = v14;
    sub_1003AF03C(v10, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v12 + 22) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v12 + 24) = v16;
    v13[2] = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@][%@] Failed to remove due to error: %@", (uint8_t *)v12, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_1003AF03C(v10, (uint64_t (*)(void))type metadata accessor for Restore);

    os_log_type_t v6 = v0[32];
  }

  swift_errorRelease();
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  sub_1003AF03C(v0[23], (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v17 = v0[44];
  v0[41] = 0;
  v0[42] = v17;
  return _swift_task_switch(sub_1003A13A0, 0, 0);
}

uint64_t sub_1003A20A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_1003A2174, 0, 0);
}

uint64_t sub_1003A2174()
{
  uint64_t v1 = (void *)v0[3].i64[0];
  static Logger.restore.getter();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (void *)v0[3].i64[0];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    v0[2].i64[1] = (uint64_t)v5;
    id v7 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v5;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Reset", v6, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v8 = (void *)v0[3].i64[0];
  }
  uint64_t v9 = v0[4].i64[0];
  uint64_t v10 = v0[4].i64[1];
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v12 = v0[5].i64[1];
  v0[6].i64[0] = (uint64_t)v11;
  v0[6].i64[1] = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  int8x16_t v19 = v0[3];
  v11(v12, v9);
  uint64_t v13 = sub_1000172F8(&qword_10065DEB8);
  id v14 = (int8x16_t *)swift_task_alloc();
  v0[7].i64[0] = (uint64_t)v14;
  v14[1] = vextq_s8(v19, v19, 8uLL);
  uint64_t v15 = sub_1000172F8((uint64_t *)&unk_10065C5D0);
  v0[7].i64[1] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[8].i64[0] = (uint64_t)v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003A23F0;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(&v0[1], v13, v15, 0, 0, &unk_1006619A0, v14, v13);
}

uint64_t sub_1003A23F0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A2508, 0, 0);
}

uint64_t sub_1003A2508()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[2];
  static Logger.restore.getter();
  swift_bridgeObjectRetain();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v13 = v0[8];
    uint64_t v14 = v0[10];
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    uint64_t v16 = v5;
    v0[3] = v1;
    sub_10000DDFC((unint64_t *)&qword_10065D350, (uint64_t *)&unk_10065C5D0);
    uint64_t v6 = BidirectionalCollection<>.joined(separator:)();
    v0[4] = sub_1000143F4(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Removed restores: [%s]", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v15(v14, v13);
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[12];
    uint64_t v9 = v0[10];
    uint64_t v10 = v0[8];
    swift_bridgeObjectRelease_n();

    v8(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1003A2738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v6 = sub_1000172F8(&qword_1006619A8);
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v4[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[17] = v7;
  v4[18] = *(void *)(v7 - 8);
  v4[19] = swift_task_alloc();
  sub_1000172F8(&qword_100661820);
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_1003A2944, 0, 0);
}

uint64_t sub_1003A2944()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 64) + 152);
  *(void *)(v0 + 168) = v1;
  return _swift_task_switch(sub_1003A29D8, v1, 0);
}

uint64_t sub_1003A29D8()
{
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  sub_100017238(v0[21] + *(void *)(*(void *)v0[21] + 104), v1, &qword_100661820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v4);
  id v5 = [self defaultManager];
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = v7;
  type metadata accessor for URLResourceKey(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[2] = 0;
  id v10 = [v5 contentsOfDirectoryAtURL:v8 includingPropertiesForKeys:isa options:0 error:v0 + 2];

  uint64_t v11 = (void *)v0[2];
  uint64_t v13 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v14 = v0[17];
  if (v10)
  {
    v0[22] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v11;

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v16 = sub_1003A2BDC;
  }
  else
  {
    id v17 = v11;
    v0[24] = _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    uint64_t v16 = sub_1003A3094;
  }
  return _swift_task_switch(v16, 0, 0);
}

uint64_t sub_1003A2BDC()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[8];
  uint64_t v4 = (void *)v0[9];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  v6[3] = 0;
  void v6[4] = v1;
  _OWORD v6[5] = v3;
  v6[6] = v4;
  swift_retain();
  id v7 = v4;
  sub_100378E80(v2, (uint64_t)&unk_1006619B8, (uint64_t)v6, (uint64_t)&unk_1006443B8, &qword_10065DEB8, (uint64_t)&unk_1006619C8);
  sub_10001729C(v2, &qword_10065B220);
  v0[4] = _swiftEmptyArrayStorage;
  sub_1000172F8(&qword_10065DEB8);
  TaskGroup.makeAsyncIterator()();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[23] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1003A2DC8;
  uint64_t v9 = v0[13];
  return TaskGroup.Iterator.next(isolation:)(v0 + 5, 0, 0, v9);
}

uint64_t sub_1003A2DC8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A2EF0, 0, 0);
}

uint64_t sub_1003A2EF0()
{
  uint64_t v1 = v0[5];
  if (v1 == 1)
  {
    uint64_t v4 = (void *)v0[6];
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    *uint64_t v4 = v0[4];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    if (v1) {
      sub_100555B18(v1);
    }
    uint64_t v2 = (void *)swift_task_alloc();
    v0[23] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003A2DC8;
    uint64_t v3 = v0[13];
    return TaskGroup.Iterator.next(isolation:)(v0 + 5, 0, 0, v3);
  }
}

uint64_t sub_1003A3094()
{
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to reset active restores: %{public}@", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[11];
  uint64_t v6 = v0[12];
  uint64_t v8 = v0[10];
  uint64_t v9 = (void *)v0[6];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_errorRelease();
  *uint64_t v9 = _swiftEmptyArrayStorage;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1003A32E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  _OWORD v6[5] = a1;
  v6[6] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v6[15] = v9;
  v6[16] = *(void *)(v9 - 8);
  v6[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Restore();
  v6[18] = v10;
  v6[19] = *(void *)(v10 - 8);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for URL();
  v6[22] = v11;
  v6[23] = *(void *)(v11 - 8);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  sub_1000172F8(&qword_100661818);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  return _swift_task_switch(sub_1003A35A0, 0, 0);
}

uint64_t sub_1003A35A0()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 48) + 16);
  *(_DWORD *)(v0 + 288) = enum case for URL.DirectoryHint.inferFromPath(_:);
  *(void *)(v0 + 240) = 0;
  *(void *)(v0 + 248) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 232) = 0;
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003A3660, 0, 0);
}

uint64_t sub_1003A3660()
{
  unint64_t v1 = v0[30];
  unint64_t v2 = v0[28];
  if ((uint64_t)v1 >= (uint64_t)v2)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[19] + 56))(v0[27], 1, 1, v0[18]);
    uint64_t v24 = v0[29];
    unint64_t v25 = v0[30];
  }
  else
  {
    if (v1 >= v2) {
      __break(1u);
    }
    uint64_t v3 = *(unsigned __int8 *)(v0[23] + 80);
    uint64_t v4 = v0[6] + ((v3 + 32) & ~v3);
    uint64_t v5 = v0[29];
    do
    {
      (*(void (**)(void, unint64_t, void))(v0[23] + 16))(v0[25], v4 + *(void *)(v0[23] + 72) * v1, v0[22]);
      uint64_t v14 = Data.init(contentsOf:options:)();
      if (v5)
      {
        uint64_t v7 = v0[25];
        uint64_t v6 = v0[26];
        uint64_t v9 = v0[22];
        uint64_t v8 = v0[23];
        uint64_t v10 = v0[18];
        uint64_t v11 = v0[19];
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v12(v6, 1, 1, v10);
      }
      else
      {
        uint64_t v16 = v14;
        unint64_t v17 = v15;
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        sub_1003ADD04(&qword_100661828, (void (*)(uint64_t))type metadata accessor for Restore);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v18 = v0[26];
        uint64_t v19 = v0[23];
        uint64_t v27 = v0[22];
        uint64_t v28 = v0[25];
        uint64_t v21 = v0[18];
        uint64_t v20 = v0[19];
        sub_100013510(v16, v17);
        swift_release();
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
        v12(v18, 0, 1, v21);
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v28, v27);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v21) != 1)
        {
          uint64_t v22 = v0[27];
          uint64_t v23 = v0[18];
          sub_1003A4FE4(v0[26], v22);
          v12(v22, 0, 1, v23);
          uint64_t v24 = 0;
          unint64_t v25 = v1 + 1;
          goto LABEL_11;
        }
      }
      uint64_t v13 = v0[28];
      sub_10001729C(v0[26], &qword_100661818);
      uint64_t v5 = 0;
      ++v1;
    }
    while (v1 != v13);
    v12(v0[27], 1, 1, v0[18]);
    uint64_t v24 = 0;
    unint64_t v25 = v0[28];
  }
LABEL_11:
  v0[32] = v24;
  v0[33] = v25;
  return _swift_task_switch(sub_1003A3990, 0, 0);
}

uint64_t sub_1003A3990()
{
  uint64_t v1 = v0[27];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[19] + 48))(v1, 1, v0[18]) == 1)
  {
    uint64_t v2 = v0[31];
    uint64_t v3 = (void *)v0[5];
    swift_bridgeObjectRelease();
    void *v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v0[7];
    sub_1003A4FE4(v1, v0[21]);
    uint64_t v7 = *(void *)(v6 + 152);
    v0[34] = v7;
    return _swift_task_switch(sub_1003A3B44, v7, 0);
  }
}

uint64_t sub_1003A3B44()
{
  uint64_t v1 = *(unsigned int *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), *(void *)(v0 + 168), *(void *)(v0 + 120));
  *(void *)(v0 + 16) = UUID.uuidString.getter();
  *(void *)(v0 + 24) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, v1, v3);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  id v6 = [self defaultManager];
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  *(void *)(v0 + 32) = 0;
  unsigned int v10 = [v6 removeItemAtURL:v8 error:v0 + 32];

  uint64_t v11 = *(void **)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v16 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8);
  unint64_t v17 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 184) + 8);
  if (v10)
  {
    uint64_t v18 = *v17;
    id v19 = v11;
    v18(v12, v13);
    (*v16)(v14, v15);
    uint64_t v20 = sub_1003A3DBC;
  }
  else
  {
    id v21 = v11;
    *(void *)(v0 + 280) = _convertNSErrorToError(_:)();

    swift_willThrow();
    (*v17)(v12, v13);
    (*v16)(v14, v15);
    uint64_t v20 = sub_1003A3F0C;
  }
  return _swift_task_switch(v20, 0, 0);
}

uint64_t sub_1003A3DBC()
{
  uint64_t v1 = (uint64_t *)(v0[21] + *(int *)(v0[18] + 36));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = (void *)v0[31];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v5 = sub_10028ED9C(0, v5[2] + 1, 1, (void *)v0[31]);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = sub_10028ED9C((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  uint64_t v8 = v0[21];
  v5[2] = v7 + 1;
  uint64_t v9 = &v5[2 * v7];
  void v9[4] = v3;
  v9[5] = v2;
  sub_1003AF03C(v8, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v10 = v0[32];
  v0[30] = v0[33];
  v0[31] = v5;
  v0[29] = v10;
  return _swift_task_switch(sub_1003A3660, 0, 0);
}

uint64_t sub_1003A3F0C()
{
  uint64_t v2 = v0[20];
  uint64_t v1 = v0[21];
  uint64_t v3 = (void *)v0[8];
  static Logger.restore.getter();
  sub_1003AEFD4(v1, v2, (uint64_t (*)(void))type metadata accessor for Restore);
  id v4 = v3;
  swift_errorRetain();
  id v5 = v4;
  swift_errorRetain();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[20];
  if (v8)
  {
    uint64_t v10 = v0[18];
    uint64_t v11 = (void *)v0[8];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412802;
    *(void *)(v12 + 4) = v11;
    *uint64_t v13 = v11;

    *(_WORD *)(v12 + 12) = 2112;
    uint64_t v14 = *(void **)(v9 + *(int *)(v10 + 20));
    *(void *)(v12 + 14) = v14;
    v13[1] = v14;
    id v15 = v14;
    sub_1003AF03C(v9, (uint64_t (*)(void))type metadata accessor for Restore);
    *(_WORD *)(v12 + 22) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v12 + 24) = v16;
    v13[2] = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@][%@] Failed to remove due to error: %@", (uint8_t *)v12, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v17 = (void *)v0[8];

    swift_errorRelease();
    swift_errorRelease();
    sub_1003AF03C(v9, (uint64_t (*)(void))type metadata accessor for Restore);

    unint64_t v6 = v0[8];
  }
  uint64_t v18 = v0[21];
  uint64_t v20 = v0[10];
  uint64_t v19 = v0[11];
  uint64_t v21 = v0[9];

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  sub_1003AF03C(v18, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v22 = v0[33];
  v0[29] = 0;
  v0[30] = v22;
  return _swift_task_switch(sub_1003A3660, 0, 0);
}

uint64_t sub_1003A41D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1003A42A0()
{
  sub_1003A41D4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RestoreManager()
{
  return self;
}

uint64_t sub_1003A42F8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v16 = (unint64_t)(v1[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v1[1];
      unint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_9:
        uint64_t v7 = (v18 - 1) & v18;
        unint64_t v8 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v6 = v15;
        goto LABEL_3;
      }
      int64_t v19 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v16)
      {
        unint64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v15 = v19;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v16)
        {
          unint64_t v18 = *(void *)(v17 + 8 * (v5 + 3));
          if (v18)
          {
            int64_t v15 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v19 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v16)
          {
            unint64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_12;
            }
            int64_t v15 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v16)
            {
              unint64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_9;
              }
              int64_t v6 = v16 - 1;
              int64_t v20 = v5 + 6;
              while (v16 != v20)
              {
                unint64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    return result;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v8);
  v1[3] = v6;
  v1[4] = v7;
  uint64_t v13 = (void (*)(void *))v1[5];
  v21[0] = v10;
  v21[1] = v11;
  unsigned char v21[2] = v12;
  swift_bridgeObjectRetain();
  v13(v21);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A4498@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = sub_1000172F8(&qword_100661960);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100661978);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char **)((char *)&v40 - v10);
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  uint64_t v40 = v5;
  if (v17)
  {
    uint64_t v43 = v9;
    int64_t v44 = v14;
    uint64_t v41 = v15;
    uint64_t v42 = v12;
    uint64_t v18 = v2;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v20);
    uint64_t v23 = v13;
    uint64_t v25 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v26 = v21 + *(void *)(*(void *)(type metadata accessor for Restore() - 8) + 72) * v20;
    uint64_t v2 = v18;
    sub_1003AEFD4(v26, (uint64_t)v11 + *(int *)(v18 + 48), (uint64_t (*)(void))type metadata accessor for Restore);
    *uint64_t v11 = v25;
    v11[1] = v24;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v18);
    uint64_t v13 = v23;
    swift_bridgeObjectRetain();
    uint64_t v12 = v42;
    uint64_t v9 = v43;
    uint64_t v15 = v41;
    goto LABEL_25;
  }
  int64_t v27 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }
  int64_t v28 = (unint64_t)(v15 + 64) >> 6;
  if (v27 < v28)
  {
    unint64_t v29 = *(void *)(v12 + 8 * v27);
    if (v29)
    {
LABEL_7:
      uint64_t v41 = v15;
      uint64_t v42 = v12;
      uint64_t v43 = v9;
      int64_t v44 = v27;
      uint64_t v18 = v2;
      uint64_t v19 = (v29 - 1) & v29;
      unint64_t v20 = __clz(__rbit64(v29)) + (v27 << 6);
      goto LABEL_3;
    }
    int64_t v30 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v28)
    {
      unint64_t v29 = *(void *)(v12 + 8 * v30);
      if (v29)
      {
LABEL_10:
        int64_t v27 = v30;
        goto LABEL_7;
      }
      int64_t v16 = v14 + 2;
      if (v14 + 3 < v28)
      {
        unint64_t v29 = *(void *)(v12 + 8 * (v14 + 3));
        if (v29)
        {
          int64_t v27 = v14 + 3;
          goto LABEL_7;
        }
        int64_t v30 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v28)
        {
          unint64_t v29 = *(void *)(v12 + 8 * v30);
          if (v29) {
            goto LABEL_10;
          }
          int64_t v27 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v28)
          {
            unint64_t v29 = *(void *)(v12 + 8 * v27);
            if (v29) {
              goto LABEL_7;
            }
            int64_t v10 = v28 - 1;
            uint64_t v31 = v14 + 6;
            while (v28 != v31)
            {
              unint64_t v29 = *(void *)(v12 + 8 * v31++);
              if (v29)
              {
                int64_t v27 = v31 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v44 = v16;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  uint64_t v19 = 0;
LABEL_25:
  *uint64_t v1 = v13;
  v1[1] = v12;
  int64_t v32 = v44;
  v1[2] = v15;
  v1[3] = v32;
  v1[4] = v19;
  long long v33 = (void (*)(uint64_t))v1[5];
  sub_10001733C((uint64_t)v11, (uint64_t)v9, &qword_100661978);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v34 = sub_1000172F8(&qword_100661968);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
  }
  else
  {
    uint64_t v36 = (uint64_t)v9;
    uint64_t v37 = (uint64_t)v40;
    sub_10001733C(v36, (uint64_t)v40, &qword_100661960);
    uint64_t v38 = v45;
    v33(v37);
    sub_10001729C(v37, &qword_100661960);
    uint64_t v39 = sub_1000172F8(&qword_100661968);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
}

uint64_t sub_1003A48A0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
    sub_10019B17C(*(void *)(v3 + 56) + 40 * v10, (uint64_t)v22 + 8);
    *(void *)&v22[0] = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10001733C((uint64_t)v22, (uint64_t)v20, &qword_100661A50);
  if ((void)v21)
  {
    v19[0] = v20[0];
    v19[1] = v20[1];
    v19[2] = v21;
    v17(v19);
    return sub_10001729C((uint64_t)v19, &qword_100661A58);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1003A4A7C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_1000144C8(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10001733C((uint64_t)&v23, (uint64_t)v22, &qword_100661A98);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    unsigned char v21[2] = v22[2];
    v19(v21);
    return sub_10001729C((uint64_t)v21, &qword_1006600D8);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_1003A4C68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v18 = v13;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
  sub_100017B14();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  sub_1003A4EFC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

id sub_1003A4EFC()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v7 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v7];

  if (v4) {
    return v7;
  }
  id v6 = v7;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_1003A4FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Restore();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A5048()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 149, 7);
}

uint64_t sub_1003A50B0(uint64_t a1)
{
  uint64_t v13 = v1[2];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[5];
  uint64_t v4 = v1[8];
  uint64_t v7 = v1[7];
  int64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *int64_t v5 = v2;
  v5[1] = sub_1000176B4;
  return sub_100379094(a1, v13, v11, v10, v9, v8, v7, v4);
}

uint64_t sub_1003A51D0(uint64_t a1)
{
  uint64_t v13 = v1[2];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v4 = v1[6];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_10037943C(a1, v13, v11, v10, v9, v4, v5, v6);
}

uint64_t sub_1003A52E4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1000176B4;
  return sub_100377A10(a1, a2, v2);
}

uint64_t sub_1003A5390(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for Restore();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v44 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)v43 - v13;
  uint64_t v15 = sub_1000172F8(&qword_100661970);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (void *)((char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = ~v18;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = -v18;
  uint64_t v45 = a1;
  uint64_t v46 = a1 + 64;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  uint64_t v47 = v19;
  uint64_t v48 = 0;
  uint64_t v49 = v22 & v20;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  v43[2] = a1;
  swift_bridgeObjectRetain();
  v43[1] = a3;
  swift_retain();
  sub_1003A4498((uint64_t)v17);
  uint64_t v23 = sub_1000172F8(&qword_100661968);
  for (int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23);
        ;
        int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_10024A370();
      return swift_release();
    }
    uint64_t v27 = *v17;
    uint64_t v26 = v17[1];
    sub_1003A4FE4((uint64_t)v17 + *(int *)(v23 + 48), (uint64_t)v14);
    uint64_t v28 = *a5;
    unint64_t v30 = sub_100016D20(v27, v26);
    uint64_t v31 = *(void *)(v28 + 16);
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (*(void *)(v28 + 24) >= v33)
    {
      if (a4)
      {
        if (v29) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_10052D3D8();
        if (v34) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      sub_10052676C(v33, a4 & 1);
      unint64_t v35 = sub_100016D20(v27, v26);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_22;
      }
      unint64_t v30 = v35;
      if (v34)
      {
LABEL_5:
        uint64_t v25 = v44;
        sub_1003AEFD4((uint64_t)v14, v44, (uint64_t (*)(void))type metadata accessor for Restore);
        sub_1003AF03C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Restore);
        swift_bridgeObjectRelease();
        sub_1003ADD4C(v25, *(void *)(*a5 + 56) + *(void *)(v52 + 72) * v30);
        goto LABEL_6;
      }
    }
    uint64_t v37 = (void *)*a5;
    *(void *)(*a5 + 8 * (v30 >> 6) + 64) |= 1 << v30;
    uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
    *uint64_t v38 = v27;
    v38[1] = v26;
    sub_1003A4FE4((uint64_t)v14, v37[7] + *(void *)(v52 + 72) * v30);
    uint64_t v39 = v37[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_21;
    }
    v37[2] = v41;
LABEL_6:
    sub_1003A4498((uint64_t)v17);
    uint64_t v23 = sub_1000172F8(&qword_100661968);
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1003A5750@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(sub_1000172F8(&qword_100661960) + 48);
  uint64_t v5 = sub_1000172F8(&qword_100661968);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  sub_1003AEFD4(v4, (uint64_t)a2 + *(int *)(v5 + 48), (uint64_t (*)(void))type metadata accessor for Restore);
  *a2 = v7;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1003A57DC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_1003A58BC;
  return v5(v2 + 16);
}

uint64_t sub_1003A58BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1003A59EC(uint64_t a1, int *a2)
{
  *(void *)(v2 + 40) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  void *v3 = v2;
  v3[1] = sub_1003A5ACC;
  return v5(v2 + 16);
}

uint64_t sub_1003A5ACC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  char v3 = *(unsigned char *)(v1 + 32);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v1 + 16);
  *(unsigned char *)(v2 + 16) = v3;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_1003A5BE8(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v3;
  void *v3 = v2;
  v3[1] = sub_1003AF2F0;
  return v5(v2 + 16);
}

uint64_t sub_1003A5CC8(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v46 = a7;
  uint64_t v47 = a8;
  uint64_t v40 = a5;
  uint64_t v38 = a3;
  uint64_t v44 = a11;
  uint64_t v45 = a6;
  long long v42 = a9;
  long long v43 = a10;
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_1000172F8(&qword_100661820);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Container();
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v38 - v26;
  uint64_t v28 = v38;
  *(void *)(v12 + 128) = a2;
  *(void *)(v12 + 136) = v28;
  *(void *)(v12 + 144) = a4;
  long long v29 = a1[5];
  *(_OWORD *)(v12 + 80) = a1[4];
  *(_OWORD *)(v12 + 96) = v29;
  *(_OWORD *)(v12 + 111) = *(_OWORD *)((char *)a1 + 95);
  long long v30 = a1[1];
  *(_OWORD *)(v12 + 16) = *a1;
  *(_OWORD *)(v12 + 32) = v30;
  long long v31 = a1[3];
  *(_OWORD *)(v12 + 48) = a1[2];
  *(_OWORD *)(v12 + 64) = v31;
  sub_1003AEFD4(a5, (uint64_t)&v38 - v26, (uint64_t (*)(void))type metadata accessor for Container);
  sub_1000172F8(&qword_100661A88);
  uint64_t v32 = swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  sub_1003AEFD4((uint64_t)v27, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Container);
  sub_1003C77F8((void *)0x2F6C6C6174736E49, 0xE800000000000000, (uint64_t)v18);
  sub_1003AF03C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for Container);
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v21, v18, v41);
  sub_1003AF03C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Container);
  sub_10001733C((uint64_t)v21, v32 + *(void *)(*(void *)v32 + 104), &qword_100661820);
  uint64_t v33 = v45;
  *(void *)(v12 + 152) = v32;
  *(void *)(v12 + 160) = v33;
  uint64_t v34 = v47;
  *(void *)(v12 + 168) = v46;
  *(void *)(v12 + 176) = v34;
  *(_OWORD *)(v12 + 184) = v42;
  *(_OWORD *)(v12 + 200) = v43;
  *(void *)(v12 + 216) = v44;
  type metadata accessor for RestoreStateObserver();
  uint64_t v35 = swift_allocObject();
  sub_1000172F8(&qword_100661A90);
  uint64_t v36 = swift_allocObject();
  *(_DWORD *)(v36 + 28) = 0;
  *(void *)(v36 + 16) = _swiftEmptyArrayStorage;
  *(_WORD *)(v36 + 24) = 0;
  *(void *)(v35 + 16) = v36;
  sub_1003AF03C(v40, (uint64_t (*)(void))type metadata accessor for Container);
  *(void *)(v12 + 224) = v35;
  return v12;
}

uint64_t sub_1003A6018(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  sub_1003AE074();
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  void v12[4] = v10;
  v12[5] = a1;
  aBlock[4] = sub_1003AE0FC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1004E598C;
  aBlock[3] = &unk_100644308;
  uint64_t v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v14 = a1;
  swift_release();
  aBlock[0] = 0;
  LODWORD(a3) = [ObjCClassFromMetadata enumerateCoordinatorsWithError:aBlock usingBlock:v13];
  _Block_release(v13);
  id v15 = aBlock[0];
  if (!a3)
  {
    uint64_t v16 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.restore.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v30 = v6;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      aBlock[0] = v28;
      uint64_t v29 = v7;
      *(_DWORD *)uint64_t v19 = 136315138;
      v27[1] = v19 + 4;
      uint64_t ErrorValue = swift_getErrorValue();
      v27[0] = v27;
      __chkstk_darwin(ErrorValue);
      (*(void (**)(char *))(v22 + 16))((char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v31 = sub_1000143F4(v23, v24, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to enumerate restoring coordinators: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  swift_beginAccess();
  uint64_t v25 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v25;
}

uint64_t sub_1003A648C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_1000176B4;
  return sub_100379B04(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1003A6558(uint64_t a1)
{
  uint64_t v13 = v1[2];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v4 = v1[6];
  uint64_t v9 = v1[5];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_100380ED8(a1, v13, v11, v10, v9, v4, v5, v6);
}

uint64_t sub_1003A666C()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 105, 7);
}

uint64_t sub_1003A66C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10000B238;
  return sub_1003A0034(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1003A67B4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 129, 7);
}

uint64_t sub_1003A681C(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000176B4;
  return sub_100399FD8(a1, v12, v4, v5, v6, v7, v8, v9);
}

id sub_1003A6924()
{
  id result = [self sharedConnection];
  if (result)
  {
    uint64_t v1 = result;
    if ([result isAutomaticAppUpdatesAllowed]
      && ([v1 isAppInstallationAllowed] & 1) != 0
      && ([v1 isAutomaticAppDownloadsAllowed] & 1) != 0)
    {
      Boolean keyExistsAndHasValidFormat = 0;
      uint64_t v2 = (__CFString *)String._bridgeToObjectiveC()();
      uint64_t v3 = (__CFString *)String._bridgeToObjectiveC()();
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(v2, v3, &keyExistsAndHasValidFormat);

      if (keyExistsAndHasValidFormat) {
        BOOL v5 = AppBooleanValue == 0;
      }
      else {
        BOOL v5 = 0;
      }
      return (id)!v5;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

void sub_1003A6A60(uint64_t a1, void *a2)
{
  id v158 = a2;
  Class ObjectType = (Class)swift_getObjectType();
  uint64_t v144 = type metadata accessor for AppInstallRequestType();
  uint64_t v3 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v143 = (char *)v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for Restore();
  uint64_t v142 = *(void *)(v131 - 8);
  uint64_t v5 = __chkstk_darwin(v131);
  uint64_t v151 = (uint64_t)v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v129 - v8;
  __chkstk_darwin(v7);
  uint64_t v156 = (uint64_t)v129 - v10;
  uint64_t v141 = type metadata accessor for LogKey.Prefix();
  uint64_t v11 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v140 = (char *)v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v169 - 8);
  uint64_t v14 = __chkstk_darwin(v169);
  id v134 = (char *)v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v147 = (char *)v129 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v150 = (char *)v129 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v129 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v155 = (char *)v129 - v24;
  __chkstk_darwin(v23);
  unsigned __int8 v154 = (char *)v129 - v25;
  uint64_t v26 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v164 = (uint64_t)v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)v129 - v30;
  __chkstk_darwin(v29);
  uint64_t v167 = (uint64_t)v129 - v32;
  uint64_t v33 = *(void *)(a1 + 16);
  if (!v33)
  {
    unint64_t v157 = _swiftEmptyArrayStorage;
    return;
  }
  uint64_t v130 = v22;
  unint64_t v139 = v9;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v34 = v13 + 56;
  uint64_t v160 = v35;
  uint64_t v159 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 - 8);
  os_log_t v153 = (void (**)(char *, uint64_t, uint64_t))(v34 - 24);
  id v152 = (void (**)(char *, char *, uint64_t))(v34 - 40);
  uint64_t v162 = (void (**)(char *, uint64_t))(v34 - 48);
  NSString v133 = &v172;
  unsigned int v138 = enum case for LogKey.Prefix.promotion(_:);
  long long v137 = (void (**)(char *, void, uint64_t))(v11 + 104);
  unsigned int v136 = enum case for AppInstallRequestType.promotion(_:);
  id v135 = (void (**)(char *, void, uint64_t))(v3 + 104);
  v129[3] = &v174;
  swift_bridgeObjectRetain();
  v129[1] = a1;
  uint64_t v36 = (unint64_t *)(a1 + 40);
  uint64_t v37 = 0;
  unint64_t v157 = _swiftEmptyArrayStorage;
  *(void *)&long long v38 = 138412546;
  long long v146 = v38;
  v129[2] = (char *)&type metadata for Any + 8;
  uint64_t v161 = v34;
  id v163 = v31;
  while (1)
  {
    uint64_t v40 = *(v36 - 1);
    unint64_t v41 = *v36;
    uint64_t v42 = v167;
    v160(v167, 1, 1, v169);
    sub_100017238(v42, (uint64_t)v31, (uint64_t *)&unk_100661AB0);
    type metadata accessor for LogActivity();
    swift_allocObject();
    swift_bridgeObjectRetain();
    long long v43 = sub_100011560("LSApplicationRecord", 19, 2, (void *)&_mh_execute_header);
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v44 = v174;
    uint64_t v166 = v33;
    if (v174)
    {
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      sub_1000172F8(&qword_100661A48);
      uint64_t v44 = swift_allocObject();
      *(_DWORD *)(v44 + 24) = 0;
      *(void *)(v44 + 16) = 0;
    }
    type metadata accessor for Transaction();
    swift_allocObject();
    id v168 = (os_activity_scope_state_s *)sub_1000118F4();
    uint64_t v45 = v164;
    sub_100017238((uint64_t)v31, v164, (uint64_t *)&unk_100661AB0);
    uint64_t v46 = 0;
    if ((*v159)(v45, 1, v169) != 1)
    {
      uint64_t v47 = *v153;
      uint64_t v48 = v154;
      uint64_t v165 = v43;
      unint64_t v49 = v41;
      uint64_t v50 = v40;
      uint64_t v51 = v36;
      uint64_t v52 = v37;
      uint64_t v53 = v169;
      v47(v154, v164, v169);
      uint64_t v54 = (uint64_t)v155;
      (*v152)(v155, v48, v53);
      type metadata accessor for SignpostInterval();
      swift_allocObject();
      uint64_t v46 = sub_1004B1C68("LSApplicationRecord", 19, 2, v54);
      uint64_t v55 = v48;
      uint64_t v31 = v163;
      uint64_t v56 = v53;
      uint64_t v37 = v52;
      uint64_t v36 = v51;
      uint64_t v40 = v50;
      unint64_t v41 = v49;
      long long v43 = v165;
      (*v162)(v55, v56);
    }
    sub_10001729C((uint64_t)v31, (uint64_t *)&unk_100661AB0);
    uint64_t v173 = v43;
    uint64_t v174 = v44;
    v175[0] = v168;
    v175[1] = v46;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000172F8(&qword_10065F9C0);
    swift_task_localValuePush();
    os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
    sub_100006238((void **)(v44 + 16), (void **)&v173);
    uint64_t v57 = (os_unfair_lock_s *)(v44 + 24);
    if (v37) {
      break;
    }
    os_unfair_lock_unlock(v57);
    long long v58 = v173;
    if (v173)
    {
      sub_10000E2EC();
    }
    id v59 = objc_allocWithZone((Class)LSApplicationIdentity);
    swift_bridgeObjectRetain();
    uint64_t v165 = (os_activity_scope_state_s *)v40;
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v61 = [v59 initWithBundleIdentifier:v60 URL:0 personaUniqueString:0 personaType:4];

    uint64_t v173 = 0;
    long long v62 = (os_activity_scope_state_s *)[v61 findApplicationRecordFetchingPlaceholder:3 error:&v173];
    uint64_t v63 = v173;
    if (v62)
    {

      uint64_t v64 = v62;
    }
    else
    {
      uint64_t v65 = v63;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v31 = v163;
      swift_errorRelease();
      uint64_t v64 = 0;
      uint64_t v37 = 0;
    }
    swift_task_localValuePop();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001729C(v167, (uint64_t *)&unk_100661AB0);
    if (v64)
    {
      if ([(os_activity_scope_state_s *)v64 installType] != (id)8
        && [(os_activity_scope_state_s *)v64 installType] != (id)7
        && [(os_activity_scope_state_s *)v64 installType] != (id)10)
      {
        id v168 = v62;
        uint64_t v120 = v130;
        static Logger.restore.getter();
        id v121 = v158;
        swift_bridgeObjectRetain();
        id v122 = v121;
        uint64_t v123 = Logger.logObject.getter();
        os_log_type_t v124 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = swift_slowAlloc();
          uint64_t v126 = (void *)swift_slowAlloc();
          uint64_t v148 = (os_activity_scope_state_s *)swift_slowAlloc();
          uint64_t v173 = v148;
          *(_DWORD *)uint64_t v125 = v146;
          uint64_t v171 = (uint64_t)v122;
          id v127 = v122;
          uint64_t v149 = v36;
          uint64_t v31 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v126 = v158;

          *(_WORD *)(v125 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v171 = sub_1000143F4((uint64_t)v165, v41, (uint64_t *)&v173);
          uint64_t v36 = v149;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "[%@][%{public}s] App is not a valid promotable type", (uint8_t *)v125, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v100 = *v162;
          uint64_t v101 = &v161;
LABEL_40:
          uint64_t v128 = (char *)*(v101 - 32);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v100 = *v162;
          uint64_t v128 = v120;
        }
        v100(v128, v169);
        goto LABEL_4;
      }
      char v170 = 0;
      id v66 = objc_allocWithZone((Class)IXApplicationIdentity);
      swift_bridgeObjectRetain();
      NSString v67 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v68 = [v66 initWithBundleIdentifier:v67];

      if (v68)
      {
        swift_bridgeObjectRelease();
        uint64_t v69 = self;
        uint64_t v173 = 0;
        id v70 = v68;
        id v71 = [v69 coordinatorForAppWithIdentity:v70 withClientID:28 createIfNotExisting:1 created:&v170 error:&v173];
        if (v71)
        {
          uint64_t v72 = v71;
          uint64_t v165 = 0;
          uint64_t v73 = v173;

          sub_1004E59E4();
          (*v137)(v140, v138, v141);
          id v74 = objc_allocWithZone(ObjectType);
          long long v75 = (void *)LogKey.init(prefix:)();
          uint64_t v76 = (uint64_t)v143;
          (*v135)(v143, v136, v144);
          id v77 = v72;
          uint64_t v78 = v75;
          uint64_t v79 = v156;
          uint64_t v148 = v78;
          sub_1004D4EEC(v77, v76, v78, v156);
          static Logger.restore.getter();
          uint64_t v80 = v79;
          uint64_t v81 = (uint64_t)v139;
          sub_1003AEFD4(v80, (uint64_t)v139, (uint64_t (*)(void))type metadata accessor for Restore);
          uint64_t v82 = (os_activity_scope_state_s *)v158;
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.default.getter();
          BOOL v85 = os_log_type_enabled(v83, v84);
          uint64_t v149 = (unint64_t *)v77;
          if (v85)
          {
            uint64_t v86 = swift_slowAlloc();
            uint64_t v87 = swift_slowAlloc();
            id v132 = v70;
            uint64_t v88 = (void *)v87;
            *(_DWORD *)uint64_t v86 = v146;
            uint64_t v173 = v82;
            uint64_t v89 = v82;
            id v168 = v62;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v88 = v158;

            *(_WORD *)(v86 + 12) = 2112;
            uint64_t v90 = *(os_activity_scope_state_s **)(v81 + *(int *)(v131 + 20));
            uint64_t v173 = v90;
            uint64_t v91 = v90;
            long long v62 = v168;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v88[1] = v90;
            uint64_t v31 = v163;
            sub_1003AF03C(v81, (uint64_t (*)(void))type metadata accessor for Restore);
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "[%@][%@] Attempting to to promote", (uint8_t *)v86, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            id v70 = v132;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_1003AF03C(v81, (uint64_t (*)(void))type metadata accessor for Restore);
          }
          uint64_t v39 = v166;

          (*v162)(v150, v169);
          sub_1003AEFD4(v156, v151, (uint64_t (*)(void))type metadata accessor for Restore);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v37 = (uint64_t)v165;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v157 = (void *)sub_100290934(0, v157[2] + 1, 1, (unint64_t)v157);
          }
          unint64_t v118 = v157[2];
          unint64_t v117 = v157[3];
          if (v118 >= v117 >> 1) {
            unint64_t v157 = (void *)sub_100290934(v117 > 1, v118 + 1, 1, (unint64_t)v157);
          }
          unint64_t v119 = v157;
          v157[2] = v118 + 1;
          sub_1003A4FE4(v151, (uint64_t)v119+ ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))+ *(void *)(v142 + 72) * v118);

          sub_1003AF03C(v156, (uint64_t (*)(void))type metadata accessor for Restore);
        }
        else
        {
          uint64_t v102 = v173;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v165 = 0;

          uint64_t v103 = v134;
          static Logger.restore.getter();
          id v104 = v158;
          swift_errorRetain();
          id v105 = v104;
          swift_errorRetain();
          uint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            uint64_t v109 = (void *)swift_slowAlloc();
            id v168 = (os_activity_scope_state_s *)swift_slowAlloc();
            uint64_t v173 = v168;
            *(_DWORD *)uint64_t v108 = v146;
            uint64_t v171 = (uint64_t)v105;
            id v110 = v105;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v109 = v158;

            *(_WORD *)(v108 + 12) = 2080;
            uint64_t v149 = (unint64_t *)(v108 + 14);
            uint64_t ErrorValue = swift_getErrorValue();
            __chkstk_darwin(ErrorValue);
            (*(void (**)(char *))(v113 + 16))((char *)v129 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0));
            uint64_t v114 = String.init<A>(describing:)();
            uint64_t v171 = sub_1000143F4(v114, v115, (uint64_t *)&v173);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v106, v107, "[%@ Failed to enumerate coordinators: %s", (uint8_t *)v108, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            uint64_t v31 = v163;
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            (*v162)(v134, v169);
          }
          else
          {
            swift_errorRelease();

            swift_errorRelease();
            swift_errorRelease();

            (*v162)(v103, v169);
          }
          uint64_t v37 = (uint64_t)v165;
          uint64_t v39 = v166;
        }
        goto LABEL_5;
      }
      id v168 = v62;
      uint64_t v92 = v147;
      static Logger.restore.getter();
      id v93 = v158;
      swift_bridgeObjectRetain();
      id v94 = v93;
      uint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc();
        uint64_t v98 = (void *)swift_slowAlloc();
        uint64_t v148 = (os_activity_scope_state_s *)swift_slowAlloc();
        uint64_t v173 = v148;
        *(_DWORD *)uint64_t v97 = v146;
        uint64_t v171 = (uint64_t)v94;
        id v99 = v94;
        uint64_t v149 = v36;
        uint64_t v31 = v163;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v98 = v158;

        *(_WORD *)(v97 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v171 = sub_1000143F4((uint64_t)v165, v41, (uint64_t *)&v173);
        uint64_t v36 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "[%@][%{public}s] Failed to create app identity", (uint8_t *)v97, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v100 = *v162;
        uint64_t v101 = v175;
        goto LABEL_40;
      }

      swift_bridgeObjectRelease_n();
      (*v162)(v92, v169);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_4:
    uint64_t v39 = v166;
LABEL_5:
    v36 += 2;
    uint64_t v33 = v39 - 1;
    if (!v33)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  os_unfair_lock_unlock(v57);
  __break(1u);
}

uint64_t sub_1003A8038(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v5 + 136) = a4;
  *(void *)(v5 + 144) = v4;
  *(unsigned char *)(v5 + 408) = a3;
  *(void *)(v5 + 120) = a1;
  *(void *)(v5 + 128) = a2;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 152) = v6;
  *(void *)(v5 + 160) = *(void *)(v6 - 8);
  *(void *)(v5 + 168) = swift_task_alloc();
  *(void *)(v5 + 176) = swift_task_alloc();
  *(void *)(v5 + 184) = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  *(void *)(v5 + 192) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v5 + 200) = v7;
  *(void *)(v5 + 208) = *(void *)(v7 - 8);
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Restore();
  *(void *)(v5 + 232) = v8;
  *(void *)(v5 + 240) = *(void *)(v8 - 8);
  *(void *)(v5 + 248) = swift_task_alloc();
  *(void *)(v5 + 256) = swift_task_alloc();
  *(void *)(v5 + 264) = swift_task_alloc();
  *(void *)(v5 + 272) = swift_task_alloc();
  *(void *)(v5 + 280) = swift_task_alloc();
  *(void *)(v5 + 288) = swift_task_alloc();
  return _swift_task_switch(sub_1003A8254, 0, 0);
}

uint64_t sub_1003A8254()
{
  uint64_t v153 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 120) + 16);
  *(void *)(v0 + 296) = v1;
  if (!v1)
  {
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v92 = *(uint64_t (**)(void))(v0 + 8);
    return v92();
  }
  *(void *)(v0 + 304) = *(void *)(*(void *)(v0 + 128) + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  while (1)
  {
    *(void *)(v0 + 312) = v2;
    uint64_t v3 = *(void *)(v0 + 304);
    uint64_t v4 = (void *)(*(void *)(v0 + 120) + 56 * v2);
    uint64_t v5 = v4[4];
    unint64_t v6 = v4[5];
    uint64_t v7 = v4[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v147 = v5;
    uint64_t v8 = sub_1004BD574(v5, v6);
    if (!v3)
    {
LABEL_15:
      long long v43 = *(void **)(v0 + 136);
      static Logger.restore.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v44 = v43;
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      BOOL v47 = os_log_type_enabled(v45, v46);
      uint64_t v48 = *(void *)(v0 + 160);
      uint64_t v49 = *(void *)(v0 + 168);
      uint64_t v50 = *(void *)(v0 + 152);
      uint64_t v51 = *(void **)(v0 + 136);
      if (v47)
      {
        uint64_t v52 = swift_slowAlloc();
        uint64_t v145 = v50;
        uint64_t v53 = (void *)swift_slowAlloc();
        v152[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 138412546;
        *(void *)(v52 + 4) = v51;
        *uint64_t v53 = v51;
        *(_WORD *)(v52 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v52 + 14) = sub_1000143F4(v147, v6, v152);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%@][%{public}s] Failed to find corresponding restore", (uint8_t *)v52, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v145);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
      }
      goto LABEL_4;
    }
    uint64_t v10 = v8;
    char v11 = v9;
    uint64_t v144 = v7;
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 128)
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(v12 + 72);
    while (1)
    {
      uint64_t v17 = *(void *)(v0 + 264);
      uint64_t v18 = *(void *)(v0 + 232);
      sub_1003AEFD4(v13, v17, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v19 = v17 + *(int *)(v18 + 60);
      if ((*(unsigned char *)(v19 + 8) & 1) == 0 && (v11 & 1) == 0 && *(void *)v19 == v10) {
        break;
      }
      ++v14;
      uint64_t v16 = *(void *)(v0 + 304);
      sub_1003AF03C(*(void *)(v0 + 264), (uint64_t (*)(void))type metadata accessor for Restore);
      v13 += v15;
      if (v14 == v16)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 288);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 208);
    uint64_t v27 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease();
    sub_1003A4FE4(v23, v22);
    sub_1003A4FE4(v22, v20);
    sub_1003A4FE4(v20, v21);
    sub_100017238(v21 + *(int *)(v24 + 40), v27, &qword_10065C9B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) != 1) {
      break;
    }
    uint64_t v28 = *(void *)(v0 + 288);
    uint64_t v29 = *(void *)(v0 + 248);
    uint64_t v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void **)(v0 + 136);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v30, &qword_10065C9B0);
    static Logger.restore.getter();
    sub_1003AEFD4(v28, v29, (uint64_t (*)(void))type metadata accessor for Restore);
    id v32 = v31;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = *(void *)(v0 + 248);
    if (v35)
    {
      uint64_t v37 = *(void *)(v0 + 232);
      long long v38 = *(void **)(v0 + 136);
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 138412546;
      *(void *)(v39 + 4) = v38;
      *uint64_t v40 = v38;

      *(_WORD *)(v39 + 12) = 2112;
      unint64_t v41 = *(void **)(v36 + *(int *)(v37 + 20));
      *(void *)(v39 + 14) = v41;
      v40[1] = v41;
      id v42 = v41;
      sub_1003AF03C(v36, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%@][%@] Failed to find corresponding coordinatorID", (uint8_t *)v39, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v79 = *(void **)(v0 + 136);

      sub_1003AF03C(v36, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v33 = *(NSObject **)(v0 + 136);
    }
    uint64_t v80 = *(void *)(v0 + 288);
    uint64_t v81 = *(void *)(v0 + 176);
    uint64_t v82 = *(void *)(v0 + 152);
    uint64_t v83 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v81, v82);
    uint64_t v78 = v80;
LABEL_24:
    sub_1003AF03C(v78, (uint64_t (*)(void))type metadata accessor for Restore);
LABEL_4:
    uint64_t v2 = *(void *)(v0 + 312) + 1;
    if (v2 == *(void *)(v0 + 296))
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  uint64_t v54 = *(void **)(v0 + 224);
  (*(void (**)(void *, void, void))(*(void *)(v0 + 208) + 32))(v54, *(void *)(v0 + 192), *(void *)(v0 + 200));
  uint64_t v55 = sub_1004E6034(v54);
  *(void *)(v0 + 320) = v55;
  if (!v55)
  {
    uint64_t v56 = *(void *)(v0 + 288);
    uint64_t v57 = *(void *)(v0 + 256);
    uint64_t v59 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 224);
    uint64_t v60 = *(void *)(v0 + 200);
    uint64_t v61 = *(void *)(v0 + 208);
    long long v62 = *(void **)(v0 + 136);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.restore.getter();
    sub_1003AEFD4(v56, v57, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v59, v58, v60);
    id v63 = v62;
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    uint64_t v150 = *(void *)(v0 + 288);
    uint64_t v67 = *(void *)(v0 + 256);
    if (v66)
    {
      uint64_t v68 = *(void *)(v0 + 232);
      uint64_t v148 = *(void *)(v0 + 224);
      uint64_t v140 = *(void *)(v0 + 216);
      uint64_t v141 = *(void *)(v0 + 208);
      uint64_t v138 = *(void *)(v0 + 200);
      uint64_t v146 = *(void *)(v0 + 184);
      uint64_t v142 = *(void *)(v0 + 160);
      uint64_t v143 = *(void *)(v0 + 152);
      uint64_t v69 = *(void **)(v0 + 136);
      uint64_t v70 = swift_slowAlloc();
      id v71 = (void *)swift_slowAlloc();
      v152[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 138412802;
      *(void *)(v0 + 80) = v69;
      os_log_t log = v64;
      id v72 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v71 = v69;

      *(_WORD *)(v70 + 12) = 2112;
      uint64_t v73 = *(void **)(v67 + *(int *)(v68 + 20));
      *(void *)(v0 + 104) = v73;
      id v74 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v71[1] = v73;
      sub_1003AF03C(v67, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v70 + 22) = 2080;
      sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 96) = sub_1000143F4(v75, v76, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v77 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
      v77(v140, v138);
      _os_log_impl((void *)&_mh_execute_header, log, v65, "[%@][%@] Failed to find corresponding coordinator for coordinatorID: %s", (uint8_t *)v70, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v146, v143);
      v77(v148, v138);
    }
    else
    {
      uint64_t v84 = *(void *)(v0 + 216);
      uint64_t v149 = *(void *)(v0 + 224);
      uint64_t v85 = *(void *)(v0 + 200);
      uint64_t v86 = *(void *)(v0 + 208);
      uint64_t v87 = *(void *)(v0 + 184);
      uint64_t v88 = *(void *)(v0 + 152);
      uint64_t v89 = *(void *)(v0 + 160);
      uint64_t v90 = *(void **)(v0 + 136);

      uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v91(v84, v85);
      sub_1003AF03C(v67, (uint64_t (*)(void))type metadata accessor for Restore);

      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
      v91(v149, v85);
    }
    uint64_t v78 = v150;
    goto LABEL_24;
  }
  uint64_t v94 = *(void *)(v0 + 288);
  uint64_t v95 = *(void *)(v0 + 232);
  if (v144 == 404)
  {
    *(void *)(v0 + 32) = 0;
    *(void *)(v0 + 40) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    uint64_t v96 = *(void *)(v0 + 40);
    *(void *)(v0 + 48) = *(void *)(v0 + 32);
    *(void *)(v0 + 56) = v96;
    v97._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v97._object = (void *)0x80000001005BE870;
    String.append(_:)(v97);
    uint64_t v98 = (uint64_t *)(v94 + *(int *)(v95 + 52));
    if (v98[1])
    {
      uint64_t v99 = *v98;
      uint64_t v100 = (void *)v98[1];
    }
    else
    {
      uint64_t v99 = 0x6E776F6E6B6E55;
      uint64_t v100 = (void *)0xE700000000000000;
    }
    int v106 = *(unsigned __int8 *)(v0 + 408);
    swift_bridgeObjectRetain();
    v107._uint64_t countAndFlagsBits = v99;
    v107._object = v100;
    String.append(_:)(v107);
    swift_bridgeObjectRelease();
    v108._uint64_t countAndFlagsBits = 0x203A65646F6320;
    v108._object = (void *)0xE700000000000000;
    String.append(_:)(v108);
    *(void *)(v0 + 112) = 404;
    v109._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v109);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v110 = *(void *)(v0 + 48);
    uint64_t v111 = *(void *)(v0 + 56);
    *(void *)(v0 + 328) = v110;
    *(void *)(v0 + 336) = v111;
    if (v106 == 1)
    {
      uint64_t v112 = *(void *)(*(void *)(v0 + 144) + 216);
      uint64_t v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663450 + dword_100663450);
      uint64_t v113 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v113;
      *uint64_t v113 = v0;
      v113[1] = sub_1003A9138;
      uint64_t v114 = *(void *)(v0 + 288);
      uint64_t v115 = *(void *)(v0 + 136);
      return v151(v114, v112, v115);
    }
    uint64_t v116 = *(void *)(v0 + 288);
    uint64_t v117 = *(void *)(v0 + 232);
    sub_1003ADA60();
    uint64_t v118 = swift_allocError();
    *(void *)(v0 + 352) = v118;
    *(void *)uint64_t v119 = v110;
    *(void *)(v119 + 8) = v111;
    *(unsigned char *)(v119 + 16) = 0;
    uint64_t v120 = *(void **)(v116 + *(int *)(v117 + 20));
    *(void *)(v0 + 360) = v120;
    id v121 = v120;
    id v122 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v122;
    void *v122 = v0;
    v122[1] = sub_1003A9338;
    uint64_t v123 = *(void *)(v0 + 136);
    uint64_t v124 = v118;
    uint64_t v125 = (uint64_t)v121;
  }
  else
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    uint64_t v101 = *(void *)(v0 + 24);
    *(void *)(v0 + 64) = *(void *)(v0 + 16);
    *(void *)(v0 + 72) = v101;
    v102._object = (void *)0x80000001005BE840;
    v102._uint64_t countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v102);
    uint64_t v103 = (uint64_t *)(v94 + *(int *)(v95 + 52));
    if (v103[1])
    {
      uint64_t v104 = *v103;
      id v105 = (void *)v103[1];
    }
    else
    {
      uint64_t v104 = 0x6E776F6E6B6E55;
      id v105 = (void *)0xE700000000000000;
    }
    uint64_t v126 = *(void *)(v0 + 288);
    uint64_t v127 = *(void *)(v0 + 232);
    swift_bridgeObjectRetain();
    v128._uint64_t countAndFlagsBits = v104;
    v128._object = v105;
    String.append(_:)(v128);
    swift_bridgeObjectRelease();
    v129._uint64_t countAndFlagsBits = 0x203A65646F6320;
    v129._object = (void *)0xE700000000000000;
    String.append(_:)(v129);
    *(void *)(v0 + 88) = v144;
    v130._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v131 = *(void *)(v0 + 64);
    uint64_t v132 = *(void *)(v0 + 72);
    sub_1003ADA60();
    uint64_t v133 = swift_allocError();
    *(void *)(v0 + 376) = v133;
    *(void *)uint64_t v134 = v131;
    *(void *)(v134 + 8) = v132;
    *(unsigned char *)(v134 + 16) = 1;
    id v135 = *(void **)(v126 + *(int *)(v127 + 20));
    *(void *)(v0 + 384) = v135;
    id v136 = v135;
    long long v137 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v137;
    *long long v137 = v0;
    v137[1] = sub_1003A94E0;
    uint64_t v123 = *(void *)(v0 + 136);
    uint64_t v124 = v133;
    uint64_t v125 = (uint64_t)v136;
  }
  return sub_1004A2008(v124, 0, 1, v123, v125);
}

uint64_t sub_1003A9138()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A9234, 0, 0);
}

uint64_t sub_1003A9234()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[29];
  sub_1003ADA60();
  uint64_t v5 = swift_allocError();
  v0[44] = v5;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = v1;
  *(unsigned char *)(v6 + 16) = 0;
  uint64_t v7 = *(void **)(v3 + *(int *)(v4 + 20));
  v0[45] = v7;
  id v8 = v7;
  char v9 = (void *)swift_task_alloc();
  v0[46] = v9;
  *char v9 = v0;
  v9[1] = sub_1003A9338;
  uint64_t v10 = v0[17];
  return sub_1004A2008(v5, 0, 1, v10, (uint64_t)v8);
}

uint64_t sub_1003A9338()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void **)(*v0 + 360);
  uint64_t v3 = *v0;
  swift_task_dealloc();

  swift_errorRelease();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[50] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1003A9688;
  uint64_t v5 = v1[17];
  uint64_t v6 = v1[36];
  return sub_10037D240(v6, v5);
}

uint64_t sub_1003A94E0()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void **)(*v0 + 384);
  uint64_t v3 = *v0;
  swift_task_dealloc();

  swift_errorRelease();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[50] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1003A9688;
  uint64_t v5 = v1[17];
  uint64_t v6 = v1[36];
  return sub_10037D240(v6, v5);
}

uint64_t sub_1003A9688()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003A9784, 0, 0);
}

uint64_t sub_1003A9784()
{
  uint64_t v156 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1003AF03C(v1, (uint64_t (*)(void))type metadata accessor for Restore);
  uint64_t v5 = *(void *)(v0 + 312) + 1;
  if (v5 == *(void *)(v0 + 296))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  while (1)
  {
    *(void *)(v0 + 312) = v5;
    uint64_t v8 = *(void *)(v0 + 304);
    char v9 = (void *)(*(void *)(v0 + 120) + 56 * v5);
    uint64_t v10 = v9[4];
    unint64_t v11 = v9[5];
    uint64_t v12 = v9[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v150 = v10;
    uint64_t v13 = sub_1004BD574(v10, v11);
    if (!v8)
    {
LABEL_18:
      uint64_t v48 = *(void **)(v0 + 136);
      static Logger.restore.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v49 = v48;
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = *(void *)(v0 + 160);
      uint64_t v54 = *(void *)(v0 + 168);
      uint64_t v55 = *(void *)(v0 + 152);
      uint64_t v56 = *(void **)(v0 + 136);
      if (v52)
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v148 = v55;
        uint64_t v58 = (void *)swift_slowAlloc();
        v155[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 138412546;
        *(void *)(v57 + 4) = v56;
        *uint64_t v58 = v56;
        *(_WORD *)(v57 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v57 + 14) = sub_1000143F4(v150, v11, v155);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "[%@][%{public}s] Failed to find corresponding restore", (uint8_t *)v57, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v148);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
      }
      goto LABEL_7;
    }
    uint64_t v15 = v13;
    char v16 = v14;
    uint64_t v147 = v12;
    uint64_t v17 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 128)
        + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(v17 + 72);
    while (1)
    {
      uint64_t v22 = *(void *)(v0 + 264);
      uint64_t v23 = *(void *)(v0 + 232);
      sub_1003AEFD4(v18, v22, (uint64_t (*)(void))type metadata accessor for Restore);
      uint64_t v24 = v22 + *(int *)(v23 + 60);
      if ((*(unsigned char *)(v24 + 8) & 1) == 0 && (v16 & 1) == 0 && *(void *)v24 == v15) {
        break;
      }
      ++v19;
      uint64_t v21 = *(void *)(v0 + 304);
      sub_1003AF03C(*(void *)(v0 + 264), (uint64_t (*)(void))type metadata accessor for Restore);
      v18 += v20;
      if (v19 == v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    uint64_t v25 = *(void *)(v0 + 280);
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v28 = *(void *)(v0 + 264);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 232);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 208);
    uint64_t v32 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease();
    sub_1003A4FE4(v28, v27);
    sub_1003A4FE4(v27, v25);
    sub_1003A4FE4(v25, v26);
    sub_100017238(v26 + *(int *)(v29 + 40), v32, &qword_10065C9B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) != 1) {
      break;
    }
    uint64_t v33 = *(void *)(v0 + 288);
    uint64_t v34 = *(void *)(v0 + 248);
    uint64_t v35 = *(void *)(v0 + 192);
    uint64_t v36 = *(void **)(v0 + 136);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v35, &qword_10065C9B0);
    static Logger.restore.getter();
    sub_1003AEFD4(v33, v34, (uint64_t (*)(void))type metadata accessor for Restore);
    id v37 = v36;
    long long v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(void *)(v0 + 248);
    if (v40)
    {
      uint64_t v42 = *(void *)(v0 + 232);
      long long v43 = *(void **)(v0 + 136);
      uint64_t v44 = swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 138412546;
      *(void *)(v44 + 4) = v43;
      *uint64_t v45 = v43;

      *(_WORD *)(v44 + 12) = 2112;
      os_log_type_t v46 = *(void **)(v41 + *(int *)(v42 + 20));
      *(void *)(v44 + 14) = v46;
      v45[1] = v46;
      id v47 = v46;
      sub_1003AF03C(v41, (uint64_t (*)(void))type metadata accessor for Restore);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%@][%@] Failed to find corresponding coordinatorID", (uint8_t *)v44, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v84 = *(void **)(v0 + 136);

      sub_1003AF03C(v41, (uint64_t (*)(void))type metadata accessor for Restore);
      long long v38 = *(NSObject **)(v0 + 136);
    }
    uint64_t v85 = *(void *)(v0 + 288);
    uint64_t v86 = *(void *)(v0 + 176);
    uint64_t v87 = *(void *)(v0 + 152);
    uint64_t v88 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
    uint64_t v83 = v85;
LABEL_27:
    sub_1003AF03C(v83, (uint64_t (*)(void))type metadata accessor for Restore);
LABEL_7:
    uint64_t v5 = *(void *)(v0 + 312) + 1;
    if (v5 == *(void *)(v0 + 296)) {
      goto LABEL_2;
    }
  }
  uint64_t v59 = *(void **)(v0 + 224);
  (*(void (**)(void *, void, void))(*(void *)(v0 + 208) + 32))(v59, *(void *)(v0 + 192), *(void *)(v0 + 200));
  uint64_t v60 = sub_1004E6034(v59);
  *(void *)(v0 + 320) = v60;
  if (!v60)
  {
    uint64_t v61 = *(void *)(v0 + 288);
    uint64_t v62 = *(void *)(v0 + 256);
    uint64_t v64 = *(void *)(v0 + 216);
    uint64_t v63 = *(void *)(v0 + 224);
    uint64_t v65 = *(void *)(v0 + 200);
    uint64_t v66 = *(void *)(v0 + 208);
    uint64_t v67 = *(void **)(v0 + 136);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.restore.getter();
    sub_1003AEFD4(v61, v62, (uint64_t (*)(void))type metadata accessor for Restore);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v64, v63, v65);
    id v68 = v67;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    uint64_t v153 = *(void *)(v0 + 288);
    uint64_t v72 = *(void *)(v0 + 256);
    if (v71)
    {
      uint64_t v73 = *(void *)(v0 + 232);
      uint64_t v151 = *(void *)(v0 + 224);
      uint64_t v143 = *(void *)(v0 + 216);
      uint64_t v144 = *(void *)(v0 + 208);
      uint64_t v141 = *(void *)(v0 + 200);
      uint64_t v149 = *(void *)(v0 + 184);
      uint64_t v145 = *(void *)(v0 + 160);
      uint64_t v146 = *(void *)(v0 + 152);
      id v74 = *(void **)(v0 + 136);
      uint64_t v75 = swift_slowAlloc();
      unint64_t v76 = (void *)swift_slowAlloc();
      v155[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = 138412802;
      *(void *)(v0 + 80) = v74;
      os_log_t log = v69;
      id v77 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v76 = v74;

      *(_WORD *)(v75 + 12) = 2112;
      uint64_t v78 = *(void **)(v72 + *(int *)(v73 + 20));
      *(void *)(v0 + 104) = v78;
      id v79 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v76[1] = v78;
      sub_1003AF03C(v72, (uint64_t (*)(void))type metadata accessor for Restore);
      *(_WORD *)(v75 + 22) = 2080;
      sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 96) = sub_1000143F4(v80, v81, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v82 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
      v82(v143, v141);
      _os_log_impl((void *)&_mh_execute_header, log, v70, "[%@][%@] Failed to find corresponding coordinator for coordinatorID: %s", (uint8_t *)v75, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v149, v146);
      v82(v151, v141);
    }
    else
    {
      uint64_t v89 = *(void *)(v0 + 216);
      uint64_t v152 = *(void *)(v0 + 224);
      uint64_t v90 = *(void *)(v0 + 200);
      uint64_t v91 = *(void *)(v0 + 208);
      uint64_t v92 = *(void *)(v0 + 184);
      uint64_t v93 = *(void *)(v0 + 152);
      uint64_t v94 = *(void *)(v0 + 160);
      uint64_t v95 = *(void **)(v0 + 136);

      uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v96(v89, v90);
      sub_1003AF03C(v72, (uint64_t (*)(void))type metadata accessor for Restore);

      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v92, v93);
      v96(v152, v90);
    }
    uint64_t v83 = v153;
    goto LABEL_27;
  }
  uint64_t v97 = *(void *)(v0 + 288);
  uint64_t v98 = *(void *)(v0 + 232);
  if (v147 == 404)
  {
    *(void *)(v0 + 32) = 0;
    *(void *)(v0 + 40) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    uint64_t v99 = *(void *)(v0 + 40);
    *(void *)(v0 + 48) = *(void *)(v0 + 32);
    *(void *)(v0 + 56) = v99;
    v100._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    v100._object = (void *)0x80000001005BE870;
    String.append(_:)(v100);
    uint64_t v101 = (uint64_t *)(v97 + *(int *)(v98 + 52));
    if (v101[1])
    {
      uint64_t v102 = *v101;
      uint64_t v103 = (void *)v101[1];
    }
    else
    {
      uint64_t v102 = 0x6E776F6E6B6E55;
      uint64_t v103 = (void *)0xE700000000000000;
    }
    int v109 = *(unsigned __int8 *)(v0 + 408);
    swift_bridgeObjectRetain();
    v110._uint64_t countAndFlagsBits = v102;
    v110._object = v103;
    String.append(_:)(v110);
    swift_bridgeObjectRelease();
    v111._uint64_t countAndFlagsBits = 0x203A65646F6320;
    v111._object = (void *)0xE700000000000000;
    String.append(_:)(v111);
    *(void *)(v0 + 112) = 404;
    v112._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v113 = *(void *)(v0 + 48);
    uint64_t v114 = *(void *)(v0 + 56);
    *(void *)(v0 + 328) = v113;
    *(void *)(v0 + 336) = v114;
    if (v109 == 1)
    {
      uint64_t v115 = *(void *)(*(void *)(v0 + 144) + 216);
      uint64_t v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100663450 + dword_100663450);
      uint64_t v116 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v116;
      void *v116 = v0;
      v116[1] = sub_1003A9138;
      uint64_t v117 = *(void *)(v0 + 288);
      uint64_t v118 = *(void *)(v0 + 136);
      return v154(v117, v115, v118);
    }
    uint64_t v119 = *(void *)(v0 + 288);
    uint64_t v120 = *(void *)(v0 + 232);
    sub_1003ADA60();
    uint64_t v121 = swift_allocError();
    *(void *)(v0 + 352) = v121;
    *(void *)uint64_t v122 = v113;
    *(void *)(v122 + 8) = v114;
    *(unsigned char *)(v122 + 16) = 0;
    uint64_t v123 = *(void **)(v119 + *(int *)(v120 + 20));
    *(void *)(v0 + 360) = v123;
    id v124 = v123;
    uint64_t v125 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v125;
    *uint64_t v125 = v0;
    v125[1] = sub_1003A9338;
    uint64_t v126 = *(void *)(v0 + 136);
    uint64_t v127 = v121;
    uint64_t v128 = (uint64_t)v124;
  }
  else
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    uint64_t v104 = *(void *)(v0 + 24);
    *(void *)(v0 + 64) = *(void *)(v0 + 16);
    *(void *)(v0 + 72) = v104;
    v105._object = (void *)0x80000001005BE840;
    v105._uint64_t countAndFlagsBits = 0xD000000000000029;
    String.append(_:)(v105);
    int v106 = (uint64_t *)(v97 + *(int *)(v98 + 52));
    if (v106[1])
    {
      uint64_t v107 = *v106;
      Swift::String v108 = (void *)v106[1];
    }
    else
    {
      uint64_t v107 = 0x6E776F6E6B6E55;
      Swift::String v108 = (void *)0xE700000000000000;
    }
    uint64_t v129 = *(void *)(v0 + 288);
    uint64_t v130 = *(void *)(v0 + 232);
    swift_bridgeObjectRetain();
    v131._uint64_t countAndFlagsBits = v107;
    v131._object = v108;
    String.append(_:)(v131);
    swift_bridgeObjectRelease();
    v132._uint64_t countAndFlagsBits = 0x203A65646F6320;
    v132._object = (void *)0xE700000000000000;
    String.append(_:)(v132);
    *(void *)(v0 + 88) = v147;
    v133._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v134 = *(void *)(v0 + 64);
    uint64_t v135 = *(void *)(v0 + 72);
    sub_1003ADA60();
    uint64_t v136 = swift_allocError();
    *(void *)(v0 + 376) = v136;
    *(void *)uint64_t v137 = v134;
    *(void *)(v137 + 8) = v135;
    *(unsigned char *)(v137 + 16) = 1;
    uint64_t v138 = *(void **)(v129 + *(int *)(v130 + 20));
    *(void *)(v0 + 384) = v138;
    id v139 = v138;
    uint64_t v140 = (void *)swift_task_alloc();
    *(void *)(v0 + 392) = v140;
    *uint64_t v140 = v0;
    v140[1] = sub_1003A94E0;
    uint64_t v126 = *(void *)(v0 + 136);
    uint64_t v127 = v136;
    uint64_t v128 = (uint64_t)v139;
  }
  return sub_1004A2008(v127, 0, 1, v126, v128);
}

uint64_t sub_1003AA6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[26] = v6;
  v4[27] = *(void *)(v6 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Restore();
  v4[31] = v7;
  v4[32] = *(void *)(v7 - 8);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_1003AA920, 0, 0);
}

uint64_t sub_1003AA920()
{
  uint64_t v1 = sub_1000172F8(&qword_100661850);
  uint64_t v2 = sub_1000172F8(&qword_100661868);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v3;
  void *v3 = v0;
  v3[1] = sub_1003AAA40;
  uint64_t v4 = *(void *)(v0 + 120);
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v2, 0, 0, &unk_1006618E8, v4, v1);
}

uint64_t sub_1003AAA40()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003AAB68, 0, 0);
}

uint64_t sub_1003AAB68()
{
  uint64_t v219 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 320) = v1;
  if (!*(void *)(v1 + 16))
  {
    uint64_t v118 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease();
    static Logger.restore.getter();
    id v119 = v118;
    uint64_t v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.default.getter();
    BOOL v122 = os_log_type_enabled(v120, v121);
    uint64_t v123 = *(void **)(v0 + 112);
    if (v122)
    {
      id v124 = (uint8_t *)swift_slowAlloc();
      uint64_t v125 = (void *)swift_slowAlloc();
      *(_DWORD *)id v124 = 138412290;
      *(void *)(v0 + 88) = v123;
      id v126 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v125 = v123;

      _os_log_impl((void *)&_mh_execute_header, v120, v121, "[%@] No active restores found", v124, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v120 = *(NSObject **)(v0 + 112);
    }
    uint64_t v127 = *(void *)(v0 + 152);
    uint64_t v128 = *(void *)(v0 + 128);
    uint64_t v129 = *(void *)(v0 + 136);

    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v127, v128);
    goto LABEL_63;
  }
  id v187 = (id *)(v0 + 24);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 384) = v2;
  uint64_t v3 = 1 << v2;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v6 << 6);
    uint64_t v9 = *(void *)(v0 + 320);
LABEL_25:
    *(void *)(v0 + 328) = v5;
    *(void *)(v0 + 336) = v6;
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 248);
    sub_1003AEFD4(*(void *)(v9 + 56) + *(void *)(*(void *)(v0 + 256) + 72) * v8, v15, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_1003A4FE4(v15, v16);
    if (*(unsigned char *)(v16 + *(int *)(v17 + 44)) == 2)
    {
      uint64_t v18 = *(void *)(v0 + 104);
      uint64_t v19 = *(void *)(v0 + 296);
      uint64_t v20 = *(int **)(v0 + 248);
      if (!v18
        || ((uint64_t v21 = (void *)(v19 + v20[9]), *v21 == *(void *)(v0 + 96)) ? (v22 = v18 == v21[1]) : (v22 = 0), v22))
      {
LABEL_33:
        if (!*(void *)(v19 + v20[13] + 8))
        {
          int64_t v214 = v6;
          uint64_t v42 = *(void *)(v0 + 272);
          long long v43 = *(void **)(v0 + 112);
          static Logger.restore.getter();
          sub_1003AEFD4(v19, v42, (uint64_t (*)(void))type metadata accessor for Restore);
          id v44 = v43;
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.default.getter();
          BOOL v47 = os_log_type_enabled(v45, v46);
          uint64_t v209 = *(void *)(v0 + 296);
          uint64_t v48 = *(void *)(v0 + 272);
          if (v47)
          {
            uint64_t v49 = *(void *)(v0 + 248);
            uint64_t v196 = *(void *)(v0 + 136);
            os_log_t logb = *(os_log_t *)(v0 + 128);
            uint64_t v204 = *(void *)(v0 + 168);
            uint64_t v50 = *(void **)(v0 + 112);
            uint64_t v51 = swift_slowAlloc();
            BOOL v52 = (void *)swift_slowAlloc();
            uint64_t v217 = swift_slowAlloc();
            *(_DWORD *)uint64_t v51 = 138412546;
            *(void *)(v51 + 4) = v50;
            *BOOL v52 = v50;

            *(_WORD *)(v51 + 12) = 2080;
            uint64_t v53 = (uint64_t *)(v48 + *(int *)(v49 + 36));
            uint64_t v54 = *v53;
            unint64_t v55 = v53[1];
            swift_bridgeObjectRetain();
            *(void *)(v51 + 14) = sub_1000143F4(v54, v55, &v217);
            swift_bridgeObjectRelease();
            sub_1003AF03C(v48, (uint64_t (*)(void))type metadata accessor for Restore);
            _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%@] Could not find distributorID for bundleID: %s", (uint8_t *)v51, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, os_log_t))(v196 + 8))(v204, logb);
          }
          else
          {
            uint64_t v81 = *(void *)(v0 + 168);
            uint64_t v83 = *(void *)(v0 + 128);
            uint64_t v82 = *(void *)(v0 + 136);
            uint64_t v84 = *(void **)(v0 + 112);

            sub_1003AF03C(v48, (uint64_t (*)(void))type metadata accessor for Restore);
            (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
          }
          uint64_t v56 = v209;
          goto LABEL_44;
        }
        uint64_t v24 = *(void *)(v0 + 208);
        uint64_t v25 = *(void *)(v0 + 216);
        uint64_t v26 = *(void *)(v0 + 200);
        sub_100017238(v19 + v20[10], v26, &qword_10065C9B0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
        {
          uint64_t v27 = *(void *)(v0 + 296);
          uint64_t v28 = *(void *)(v0 + 280);
          uint64_t v29 = *(void **)(v0 + 112);
          sub_10001729C(*(void *)(v0 + 200), &qword_10065C9B0);
          static Logger.restore.getter();
          sub_1003AEFD4(v27, v28, (uint64_t (*)(void))type metadata accessor for Restore);
          id v30 = v29;
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v32 = static os_log_type_t.error.getter();
          BOOL v33 = os_log_type_enabled(v31, v32);
          uint64_t v34 = *(void *)(v0 + 280);
          if (v33)
          {
            uint64_t v35 = *(void *)(v0 + 248);
            int64_t v36 = v6;
            id v37 = *(void **)(v0 + 112);
            uint64_t v38 = swift_slowAlloc();
            os_log_type_t v39 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v38 = 138412546;
            *(void *)(v38 + 4) = v37;
            *os_log_type_t v39 = v37;

            int64_t v6 = v36;
            *(_WORD *)(v38 + 12) = 2112;
            BOOL v40 = *(void **)(v34 + *(int *)(v35 + 20));
            *(void *)(v38 + 14) = v40;
            v39[1] = v40;
            id v41 = v40;
            sub_1003AF03C(v34, (uint64_t (*)(void))type metadata accessor for Restore);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@][%@] Failed to find corresponding coordinatorID", (uint8_t *)v38, 0x16u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v85 = *(void **)(v0 + 112);

            sub_1003AF03C(v34, (uint64_t (*)(void))type metadata accessor for Restore);
            uint64_t v31 = *(NSObject **)(v0 + 112);
          }
          uint64_t v86 = *(void *)(v0 + 296);
          uint64_t v87 = *(void *)(v0 + 176);
          uint64_t v88 = *(void *)(v0 + 128);
          uint64_t v89 = *(void *)(v0 + 136);

          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
          sub_1003AF03C(v86, (uint64_t (*)(void))type metadata accessor for Restore);
        }
        else
        {
          uint64_t v57 = *(void **)(v0 + 240);
          (*(void (**)(void *, void, void))(*(void *)(v0 + 216) + 32))(v57, *(void *)(v0 + 200), *(void *)(v0 + 208));
          uint64_t v58 = sub_1004E6034(v57);
          *(void *)(v0 + 344) = v58;
          if (v58)
          {
            Swift::String v132 = v58;
            Swift::String v133 = *(void **)(v0 + 112);
            static Logger.restore.getter();
            id v134 = v133;
            uint64_t v135 = Logger.logObject.getter();
            os_log_type_t v136 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v135, v136))
            {
              uint64_t v137 = *(void *)(v0 + 112);
              uint64_t v138 = swift_slowAlloc();
              id v139 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v138 = 138412290;
              *(void *)(v138 + 4) = v137;
              void *v139 = v137;
              _os_log_impl((void *)&_mh_execute_header, v135, v136, "[%@] Soft failing", (uint8_t *)v138, 0xCu);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v135 = *(NSObject **)(v0 + 112);
            }
            uint64_t v140 = *(void *)(v0 + 192);
            uint64_t v141 = *(void *)(v0 + 128);
            uint64_t v142 = *(void *)(v0 + 136);

            uint64_t v143 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
            v143(v140, v141);
            self;
            uint64_t v144 = (void *)swift_dynamicCastObjCClass();
            sub_1003ADA60();
            uint64_t v145 = swift_allocError();
            *(void *)(v0 + 352) = v145;
            *(void *)uint64_t v146 = 0;
            *(void *)(v146 + 8) = 0;
            *(unsigned char *)(v146 + 16) = 2;
            if (v144)
            {
              uint64_t v147 = v132;
              uint64_t v148 = (void *)_convertErrorToNSError(_:)();
              swift_errorRelease();
              *id v187 = 0;
              unsigned int v149 = [v144 cancelForReason:v148 client:28 error:v187];

              id v150 = *v187;
              if (v149)
              {
              }
              else
              {
                uint64_t v155 = v150;
                os_log_t loga = v147;
                unint64_t v207 = v143;
                uint64_t v156 = *(void *)(v0 + 296);
                uint64_t v157 = *(void *)(v0 + 264);
                uint64_t v158 = *(void *)(v0 + 216);
                uint64_t v159 = *(void *)(v0 + 224);
                uint64_t v160 = *(void *)(v0 + 208);
                uint64_t v212 = *(void *)(v0 + 240);
                uint64_t v215 = *(void **)(v0 + 112);
                _convertNSErrorToError(_:)();

                swift_willThrow();
                static Logger.restore.getter();
                sub_1003AEFD4(v156, v157, (uint64_t (*)(void))type metadata accessor for Restore);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 16))(v159, v212, v160);
                id v161 = v215;
                swift_errorRetain();
                id v162 = v161;
                swift_errorRetain();
                id v163 = Logger.logObject.getter();
                os_log_type_t v164 = static os_log_type_t.error.getter();
                BOOL v165 = os_log_type_enabled(v163, v164);
                uint64_t v166 = *(void *)(v0 + 264);
                uint64_t v167 = *(void *)(v0 + 216);
                if (v165)
                {
                  uint64_t v192 = *(void *)(v0 + 224);
                  uint64_t v188 = *(void *)(v0 + 248);
                  uint64_t v190 = *(void *)(v0 + 208);
                  uint64_t v213 = *(void *)(v0 + 144);
                  uint64_t v198 = *(void *)(v0 + 128);
                  id v168 = *(void **)(v0 + 112);
                  uint64_t v169 = swift_slowAlloc();
                  char v170 = (void *)swift_slowAlloc();
                  uint64_t v217 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v169 = 138413058;
                  os_log_type_t type = v164;
                  *(void *)(v0 + 32) = v168;
                  uint64_t v193 = v163;
                  id v171 = v168;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *char v170 = v168;

                  *(_WORD *)(v169 + 12) = 2112;
                  char v172 = *(void **)(v166 + *(int *)(v188 + 20));
                  *(void *)(v0 + 40) = v172;
                  id v173 = v172;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  v170[1] = v172;
                  sub_1003AF03C(v166, (uint64_t (*)(void))type metadata accessor for Restore);
                  *(_WORD *)(v169 + 22) = 2080;
                  sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v174 = dispatch thunk of CustomStringConvertible.description.getter();
                  *(void *)(v0 + 48) = sub_1000143F4(v174, v175, &v217);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v192, v190);
                  *(_WORD *)(v169 + 32) = 2112;
                  swift_errorRetain();
                  uint64_t v176 = _swift_stdlib_bridgeErrorToNSError();
                  *(void *)(v0 + 56) = v176;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  v170[2] = v176;
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v193, type, "[%@][%@] Failed to cancel coordinator coordinatorID: %s due to error: %@", (uint8_t *)v169, 0x2Au);
                  sub_1000172F8(&qword_10065DB10);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  swift_errorRelease();
                  uint64_t v177 = v213;
                  uint64_t v178 = v198;
                }
                else
                {
                  uint64_t v179 = *(void *)(v0 + 224);
                  uint64_t v180 = *(void *)(v0 + 208);
                  uint64_t v181 = *(void *)(v0 + 144);
                  uint64_t v182 = *(void *)(v0 + 128);
                  uint64_t v183 = *(void **)(v0 + 112);

                  swift_errorRelease();
                  sub_1003AF03C(v166, (uint64_t (*)(void))type metadata accessor for Restore);
                  (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v179, v180);
                  swift_errorRelease();
                  swift_errorRelease();

                  uint64_t v177 = v181;
                  uint64_t v178 = v182;
                }
                v207(v177, v178);
              }
              uint64_t v184 = (void *)swift_task_alloc();
              *(void *)(v0 + 376) = v184;
              *uint64_t v184 = v0;
              v184[1] = sub_1003AC3A4;
              uint64_t v185 = *(void *)(v0 + 296);
              uint64_t v186 = *(void *)(v0 + 112);
              return sub_10037D240(v185, v186);
            }
            else
            {
              uint64_t v151 = *(void **)(*(void *)(v0 + 296) + *(int *)(*(void *)(v0 + 248) + 20));
              *(void *)(v0 + 360) = v151;
              id v152 = v151;
              uint64_t v153 = (void *)swift_task_alloc();
              *(void *)(v0 + 368) = v153;
              *uint64_t v153 = v0;
              v153[1] = sub_1003AC1D0;
              uint64_t v154 = *(void *)(v0 + 112);
              return sub_1004A2008(v145, 0, 0, v154, (uint64_t)v152);
            }
          }
          int64_t v214 = v6;
          uint64_t v59 = *(void *)(v0 + 288);
          uint64_t v60 = *(void *)(v0 + 296);
          uint64_t v62 = *(void *)(v0 + 232);
          uint64_t v61 = *(void *)(v0 + 240);
          uint64_t v63 = *(void *)(v0 + 208);
          uint64_t v64 = *(void *)(v0 + 216);
          uint64_t v65 = *(void **)(v0 + 112);
          static Logger.restore.getter();
          sub_1003AEFD4(v60, v59, (uint64_t (*)(void))type metadata accessor for Restore);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v62, v61, v63);
          id v66 = v65;
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.error.getter();
          BOOL v69 = os_log_type_enabled(v67, v68);
          uint64_t v70 = *(void *)(v0 + 288);
          uint64_t v210 = *(void *)(v0 + 296);
          if (v69)
          {
            uint64_t v71 = *(void *)(v0 + 248);
            uint64_t v72 = *(void *)(v0 + 232);
            uint64_t v189 = *(void *)(v0 + 208);
            uint64_t v191 = *(void *)(v0 + 216);
            os_log_t logc = *(os_log_t *)(v0 + 184);
            uint64_t v205 = *(void *)(v0 + 240);
            uint64_t v195 = *(void *)(v0 + 136);
            uint64_t v197 = *(void *)(v0 + 128);
            uint64_t v73 = *(void **)(v0 + 112);
            uint64_t v74 = swift_slowAlloc();
            uint64_t v75 = (void *)swift_slowAlloc();
            uint64_t v217 = swift_slowAlloc();
            *(_DWORD *)uint64_t v74 = 138412802;
            *(void *)(v74 + 4) = v73;
            *uint64_t v75 = v73;

            *(_WORD *)(v74 + 12) = 2112;
            unint64_t v76 = *(void **)(v70 + *(int *)(v71 + 20));
            *(void *)(v74 + 14) = v76;
            v75[1] = v76;
            id v77 = v76;
            sub_1003AF03C(v70, (uint64_t (*)(void))type metadata accessor for Restore);
            *(_WORD *)(v74 + 22) = 2080;
            sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v74 + 24) = sub_1000143F4(v78, v79, &v217);
            swift_bridgeObjectRelease();
            uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
            v80(v72, v189);
            _os_log_impl((void *)&_mh_execute_header, v67, v68, "[%@][%@] Failed to find corresponding coordinator for coordinatorID: %s", (uint8_t *)v74, 0x20u);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(os_log_t, uint64_t))(v195 + 8))(logc, v197);
            v80(v205, v189);
          }
          else
          {
            uint64_t v90 = *(void *)(v0 + 232);
            uint64_t v91 = *(void *)(v0 + 208);
            uint64_t v92 = *(void *)(v0 + 216);
            os_log_t logd = *(os_log_t *)(v0 + 184);
            uint64_t v206 = *(void *)(v0 + 240);
            uint64_t v94 = *(void *)(v0 + 128);
            uint64_t v93 = *(void *)(v0 + 136);
            uint64_t v95 = *(void **)(v0 + 112);

            uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
            v96(v90, v91);
            sub_1003AF03C(v70, (uint64_t (*)(void))type metadata accessor for Restore);

            (*(void (**)(os_log_t, uint64_t))(v93 + 8))(logd, v94);
            v96(v206, v91);
          }
          uint64_t v56 = v210;
LABEL_44:
          sub_1003AF03C(v56, (uint64_t (*)(void))type metadata accessor for Restore);
          int64_t v6 = v214;
        }
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v19 = *(void *)(v0 + 296);
        if (v23)
        {
          uint64_t v20 = *(int **)(v0 + 248);
          goto LABEL_33;
        }
        sub_1003AF03C(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for Restore);
      }
    }
    else
    {
      sub_1003AF03C(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for Restore);
      unint64_t v5 = *(void *)(v0 + 328);
      int64_t v6 = *(void *)(v0 + 336);
    }
  }
  int64_t v10 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_83;
  }
  int64_t v11 = (unint64_t)((1 << *(unsigned char *)(v0 + 384)) + 63) >> 6;
  uint64_t v9 = *(void *)(v0 + 320);
  if (v10 >= v11) {
    goto LABEL_50;
  }
  uint64_t v12 = v9 + 64;
  unint64_t v13 = *(void *)(v9 + 64 + 8 * v10);
  ++v6;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v6 = v10 + 1;
  if (v10 + 1 >= v11) {
    goto LABEL_50;
  }
  unint64_t v13 = *(void *)(v12 + 8 * v6);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v6 = v10 + 2;
  if (v10 + 2 >= v11) {
    goto LABEL_50;
  }
  unint64_t v13 = *(void *)(v12 + 8 * v6);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v6 = v10 + 3;
  if (v10 + 3 >= v11) {
    goto LABEL_50;
  }
  unint64_t v13 = *(void *)(v12 + 8 * v6);
  if (v13)
  {
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v8 = __clz(__rbit64(v13)) + (v6 << 6);
    goto LABEL_25;
  }
  int64_t v14 = v10 + 4;
  if (v14 < v11)
  {
    unint64_t v13 = *(void *)(v12 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v6 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        if (v6 >= v11) {
          goto LABEL_50;
        }
        unint64_t v13 = *(void *)(v12 + 8 * v6);
        ++v14;
        if (v13) {
          goto LABEL_24;
        }
      }
LABEL_83:
      __break(1u);
    }
    int64_t v6 = v14;
    goto LABEL_24;
  }
LABEL_50:
  uint64_t v97 = *(void **)(v0 + 112);
  swift_release();
  static Logger.restore.getter();
  id v98 = v97;
  swift_bridgeObjectRetain();
  id v99 = v98;
  Swift::String v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.default.getter();
  BOOL v102 = os_log_type_enabled(v100, v101);
  uint64_t v103 = *(void *)(v0 + 320);
  uint64_t v104 = *(void *)(v0 + 160);
  uint64_t v105 = *(void *)(v0 + 128);
  uint64_t v106 = *(void *)(v0 + 136);
  uint64_t v107 = *(void **)(v0 + 112);
  if (v102)
  {
    uint64_t v108 = swift_slowAlloc();
    os_log_t log = v100;
    int v109 = (void *)swift_slowAlloc();
    uint64_t v216 = swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = 138412546;
    uint64_t v211 = v105;
    *(void *)(v0 + 64) = v107;
    os_log_type_t v208 = v101;
    id v110 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v109 = v107;

    *(_WORD *)(v108 + 12) = 2082;
    uint64_t v111 = *(void *)(v103 + 16);
    *(void *)(v0 + 72) = v111;
    uint64_t v217 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v218 = v112;
    v113._uint64_t countAndFlagsBits = 32;
    v113._object = (void *)0xE100000000000000;
    String.append(_:)(v113);
    v114._uint64_t countAndFlagsBits = 0x65726F74736572;
    v114._object = (void *)0xE700000000000000;
    String.append(_:)(v114);
    if (v111 == 1) {
      uint64_t v115 = 0;
    }
    else {
      uint64_t v115 = 115;
    }
    if (v111 == 1) {
      unint64_t v116 = 0xE000000000000000;
    }
    else {
      unint64_t v116 = 0xE100000000000000;
    }
    unint64_t v117 = v116;
    String.append(_:)(*(Swift::String *)&v115);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = sub_1000143F4(v217, v218, &v216);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v208, "[%@] Failing %{public}s", (uint8_t *)v108, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v211);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v105);
  }
LABEL_63:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v130 = *(uint64_t (**)(void))(v0 + 8);
  return v130();
}

uint64_t sub_1003AC1D0()
{
  uint64_t v1 = (void *)*v0;
  char v2 = *(void **)(*v0 + 360);
  uint64_t v3 = *v0;
  swift_task_dealloc();

  swift_errorRelease();
  uint64_t v4 = (void *)swift_task_alloc();
  v1[47] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1003AC3A4;
  uint64_t v5 = v1[14];
  uint64_t v6 = v1[37];
  return sub_10037D240(v6, v5);
}

uint64_t sub_1003AC3A4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003AC4CC, 0, 0);
}

uint64_t sub_1003AC4CC()
{
  uint64_t v209 = v0;
  uint64_t v177 = (id *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 216);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
LABEL_2:
  sub_1003AF03C(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for Restore);
  unint64_t v4 = *(void *)(v0 + 328);
  int64_t v5 = *(void *)(v0 + 336);
  while (1)
  {
    if (v4)
    {
      unint64_t v10 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v11 = v10 | (v5 << 6);
      uint64_t v12 = *(void *)(v0 + 320);
      goto LABEL_23;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_75;
    }
    int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 384)) + 63) >> 6;
    uint64_t v12 = *(void *)(v0 + 320);
    if (v13 >= v14) {
      goto LABEL_46;
    }
    uint64_t v15 = v12 + 64;
    unint64_t v16 = *(void *)(v12 + 64 + 8 * v13);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v14) {
        goto LABEL_46;
      }
      unint64_t v16 = *(void *)(v15 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v14) {
          goto LABEL_46;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v5);
        if (!v16)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v14) {
            goto LABEL_46;
          }
          unint64_t v16 = *(void *)(v15 + 8 * v5);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_23:
    *(void *)(v0 + 328) = v4;
    *(void *)(v0 + 336) = v5;
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 248);
    sub_1003AEFD4(*(void *)(v12 + 56) + *(void *)(*(void *)(v0 + 256) + 72) * v11, v18, (uint64_t (*)(void))type metadata accessor for Restore);
    sub_1003A4FE4(v18, v19);
    if (*(unsigned char *)(v19 + *(int *)(v20 + 44)) != 2) {
      goto LABEL_2;
    }
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 296);
    char v23 = *(int **)(v0 + 248);
    if (v21)
    {
      uint64_t v24 = (void *)(v22 + v23[9]);
      if (*v24 != *(void *)(v0 + 96) || v21 != v24[1])
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v22 = *(void *)(v0 + 296);
        if ((v26 & 1) == 0)
        {
          uint64_t v85 = *(void *)(v0 + 296);
          goto LABEL_43;
        }
        char v23 = *(int **)(v0 + 248);
      }
    }
    if (*(void *)(v22 + v23[13] + 8))
    {
      uint64_t v27 = *(void *)(v0 + 208);
      uint64_t v28 = *(void *)(v0 + 216);
      uint64_t v29 = *(void *)(v0 + 200);
      sub_100017238(v22 + v23[10], v29, &qword_10065C9B0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
      {
        uint64_t v30 = *(void *)(v0 + 296);
        uint64_t v31 = *(void *)(v0 + 280);
        os_log_type_t v32 = *(void **)(v0 + 112);
        sub_10001729C(*(void *)(v0 + 200), &qword_10065C9B0);
        static Logger.restore.getter();
        sub_1003AEFD4(v30, v31, (uint64_t (*)(void))type metadata accessor for Restore);
        id v33 = v32;
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        BOOL v36 = os_log_type_enabled(v34, v35);
        uint64_t v37 = *(void *)(v0 + 280);
        if (v36)
        {
          unint64_t v38 = v4;
          uint64_t v39 = *(void *)(v0 + 248);
          BOOL v40 = *(void **)(v0 + 112);
          uint64_t v41 = swift_slowAlloc();
          uint64_t v42 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 138412546;
          *(void *)(v41 + 4) = v40;
          void *v42 = v40;

          *(_WORD *)(v41 + 12) = 2112;
          uint64_t v43 = *(int *)(v39 + 20);
          unint64_t v4 = v38;
          id v44 = *(void **)(v37 + v43);
          *(void *)(v41 + 14) = v44;
          v42[1] = v44;
          id v45 = v44;
          sub_1003AF03C(v37, (uint64_t (*)(void))type metadata accessor for Restore);
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%@][%@] Failed to find corresponding coordinatorID", (uint8_t *)v41, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v86 = *(void **)(v0 + 112);

          sub_1003AF03C(v37, (uint64_t (*)(void))type metadata accessor for Restore);
          uint64_t v34 = *(NSObject **)(v0 + 112);
        }
        uint64_t v87 = *(void *)(v0 + 296);
        uint64_t v88 = *(void *)(v0 + 176);
        uint64_t v89 = *(void *)(v0 + 128);
        uint64_t v90 = *(void *)(v0 + 136);

        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v88, v89);
        uint64_t v85 = v87;
LABEL_43:
        sub_1003AF03C(v85, (uint64_t (*)(void))type metadata accessor for Restore);
      }
      else
      {
        uint64_t v61 = *(void **)(v0 + 240);
        (*(void (**)(void *, void, void))(*(void *)(v0 + 216) + 32))(v61, *(void *)(v0 + 200), *(void *)(v0 + 208));
        uint64_t v62 = sub_1004E6034(v61);
        *(void *)(v0 + 344) = v62;
        if (v62)
        {
          BOOL v122 = v62;
          uint64_t v123 = *(void **)(v0 + 112);
          static Logger.restore.getter();
          id v124 = v123;
          uint64_t v125 = Logger.logObject.getter();
          os_log_type_t v126 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v125, v126))
          {
            uint64_t v127 = *(void *)(v0 + 112);
            uint64_t v128 = swift_slowAlloc();
            uint64_t v129 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v128 = 138412290;
            *(void *)(v128 + 4) = v127;
            *uint64_t v129 = v127;
            _os_log_impl((void *)&_mh_execute_header, v125, v126, "[%@] Soft failing", (uint8_t *)v128, 0xCu);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v125 = *(NSObject **)(v0 + 112);
          }
          uint64_t v130 = *(void *)(v0 + 192);
          uint64_t v131 = *(void *)(v0 + 128);
          uint64_t v132 = *(void *)(v0 + 136);

          Swift::String v133 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
          v133(v130, v131);
          self;
          id v134 = (void *)swift_dynamicCastObjCClass();
          sub_1003ADA60();
          uint64_t v135 = swift_allocError();
          *(void *)(v0 + 352) = v135;
          *(void *)uint64_t v136 = 0;
          *(void *)(v136 + 8) = 0;
          *(unsigned char *)(v136 + 16) = 2;
          if (v134)
          {
            id v137 = v122;
            uint64_t v138 = (void *)_convertErrorToNSError(_:)();
            swift_errorRelease();
            *uint64_t v177 = 0;
            unsigned int v139 = [v134 cancelForReason:v138 client:28 error:v177];

            id v140 = *v177;
            if (v139)
            {
            }
            else
            {
              uint64_t v145 = v140;
              uint64_t v199 = v137;
              uint64_t v202 = v133;
              uint64_t v146 = *(void *)(v0 + 296);
              uint64_t v147 = *(void *)(v0 + 264);
              uint64_t v148 = *(void *)(v0 + 216);
              uint64_t v149 = *(void *)(v0 + 224);
              uint64_t v150 = *(void *)(v0 + 208);
              *(void *)uint64_t typed = *(void *)(v0 + 240);
              os_log_t log = *(void **)(v0 + 112);
              _convertNSErrorToError(_:)();

              swift_willThrow();
              static Logger.restore.getter();
              sub_1003AEFD4(v146, v147, (uint64_t (*)(void))type metadata accessor for Restore);
              (*(void (**)(uint64_t, os_log_type_t *, uint64_t))(v148 + 16))(v149, *(os_log_type_t **)typed, v150);
              id v151 = log;
              swift_errorRetain();
              id v152 = v151;
              swift_errorRetain();
              uint64_t v153 = Logger.logObject.getter();
              os_log_type_t v154 = static os_log_type_t.error.getter();
              BOOL v155 = os_log_type_enabled(v153, v154);
              uint64_t v156 = *(void *)(v0 + 264);
              uint64_t v157 = *(void *)(v0 + 216);
              if (v155)
              {
                uint64_t v182 = *(void *)(v0 + 224);
                uint64_t v178 = *(void *)(v0 + 248);
                uint64_t v180 = *(void *)(v0 + 208);
                uint64_t v189 = *(void *)(v0 + 128);
                *(void *)typee = *(void *)(v0 + 144);
                uint64_t v158 = *(void **)(v0 + 112);
                uint64_t v159 = swift_slowAlloc();
                uint64_t v160 = (void *)swift_slowAlloc();
                uint64_t v207 = swift_slowAlloc();
                *(_DWORD *)uint64_t v159 = 138413058;
                os_log_type_t v185 = v154;
                *(void *)(v0 + 32) = v158;
                uint64_t v183 = v153;
                id v161 = v158;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v160 = v158;

                *(_WORD *)(v159 + 12) = 2112;
                id v162 = *(void **)(v156 + *(int *)(v178 + 20));
                *(void *)(v0 + 40) = v162;
                id v163 = v162;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v160[1] = v162;
                sub_1003AF03C(v156, (uint64_t (*)(void))type metadata accessor for Restore);
                *(_WORD *)(v159 + 22) = 2080;
                sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
                uint64_t v164 = dispatch thunk of CustomStringConvertible.description.getter();
                *(void *)(v0 + 48) = sub_1000143F4(v164, v165, &v207);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v182, v180);
                *(_WORD *)(v159 + 32) = 2112;
                swift_errorRetain();
                uint64_t v166 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)(v0 + 56) = v166;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v160[2] = v166;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v183, v185, "[%@][%@] Failed to cancel coordinator coordinatorID: %s due to error: %@", (uint8_t *)v159, 0x2Au);
                sub_1000172F8(&qword_10065DB10);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_errorRelease();
                uint64_t v168 = v189;
                uint64_t v167 = *(void *)typee;
              }
              else
              {
                uint64_t v169 = *(void *)(v0 + 224);
                uint64_t v170 = *(void *)(v0 + 208);
                uint64_t v171 = *(void *)(v0 + 144);
                uint64_t v172 = *(void *)(v0 + 128);
                id v173 = *(void **)(v0 + 112);

                swift_errorRelease();
                sub_1003AF03C(v156, (uint64_t (*)(void))type metadata accessor for Restore);
                (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v169, v170);
                swift_errorRelease();
                swift_errorRelease();

                uint64_t v167 = v171;
                uint64_t v168 = v172;
              }
              v202(v167, v168);
            }
            uint64_t v174 = (void *)swift_task_alloc();
            *(void *)(v0 + 376) = v174;
            *uint64_t v174 = v0;
            v174[1] = sub_1003AC3A4;
            uint64_t v175 = *(void *)(v0 + 296);
            uint64_t v176 = *(void *)(v0 + 112);
            return sub_10037D240(v175, v176);
          }
          else
          {
            uint64_t v141 = *(void **)(*(void *)(v0 + 296) + *(int *)(*(void *)(v0 + 248) + 20));
            *(void *)(v0 + 360) = v141;
            id v142 = v141;
            uint64_t v143 = (void *)swift_task_alloc();
            *(void *)(v0 + 368) = v143;
            void *v143 = v0;
            v143[1] = sub_1003AC1D0;
            uint64_t v144 = *(void *)(v0 + 112);
            return sub_1004A2008(v135, 0, 0, v144, (uint64_t)v142);
          }
        }
        int64_t v201 = v5;
        unint64_t v204 = v4;
        uint64_t v63 = *(void *)(v0 + 288);
        uint64_t v64 = *(void *)(v0 + 296);
        uint64_t v66 = *(void *)(v0 + 232);
        uint64_t v65 = *(void *)(v0 + 240);
        uint64_t v67 = *(void *)(v0 + 208);
        uint64_t v68 = *(void *)(v0 + 216);
        BOOL v69 = *(void **)(v0 + 112);
        static Logger.restore.getter();
        sub_1003AEFD4(v64, v63, (uint64_t (*)(void))type metadata accessor for Restore);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v66, v65, v67);
        id v70 = v69;
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        BOOL v73 = os_log_type_enabled(v71, v72);
        uint64_t v74 = *(void *)(v0 + 288);
        uint64_t v198 = *(void *)(v0 + 296);
        if (v73)
        {
          uint64_t v75 = *(void *)(v0 + 248);
          uint64_t v76 = *(void *)(v0 + 216);
          uint64_t v179 = *(void *)(v0 + 208);
          uint64_t v181 = *(void *)(v0 + 232);
          uint64_t v188 = *(void *)(v0 + 184);
          *(void *)uint64_t typeb = *(void *)(v0 + 240);
          *(void *)uint64_t v184 = *(void *)(v0 + 136);
          uint64_t v186 = *(void *)(v0 + 128);
          id v77 = *(void **)(v0 + 112);
          uint64_t v78 = swift_slowAlloc();
          unint64_t v79 = (void *)swift_slowAlloc();
          uint64_t v207 = swift_slowAlloc();
          *(_DWORD *)uint64_t v78 = 138412802;
          *(void *)(v78 + 4) = v77;
          *unint64_t v79 = v77;

          *(_WORD *)(v78 + 12) = 2112;
          uint64_t v80 = *(void **)(v74 + *(int *)(v75 + 20));
          *(void *)(v78 + 14) = v80;
          v79[1] = v80;
          id v81 = v80;
          sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);
          *(_WORD *)(v78 + 22) = 2080;
          sub_1003ADD04((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v78 + 24) = sub_1000143F4(v82, v83, &v207);
          swift_bridgeObjectRelease();
          uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
          v84(v181, v179);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "[%@][%@] Failed to find corresponding coordinator for coordinatorID: %s", (uint8_t *)v78, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(*(void *)v184 + 8))(v188, v186);
          v84(*(void *)typeb, v179);
        }
        else
        {
          uint64_t v91 = *(void *)(v0 + 232);
          *(void *)uint64_t typec = *(void *)(v0 + 240);
          uint64_t v92 = *(void *)(v0 + 208);
          uint64_t v93 = *(void *)(v0 + 216);
          uint64_t v94 = *(void *)(v0 + 184);
          uint64_t v95 = *(void *)(v0 + 128);
          uint64_t v96 = *(void *)(v0 + 136);
          uint64_t v97 = *(void **)(v0 + 112);

          id v98 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
          v98(v91, v92);
          sub_1003AF03C(v74, (uint64_t (*)(void))type metadata accessor for Restore);

          (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v94, v95);
          v98(*(void *)typec, v92);
        }
        sub_1003AF03C(v198, (uint64_t (*)(void))type metadata accessor for Restore);
        int64_t v5 = v201;
        unint64_t v4 = v204;
      }
    }
    else
    {
      unint64_t v203 = v4;
      uint64_t v46 = *(void *)(v0 + 272);
      BOOL v47 = *(void **)(v0 + 112);
      static Logger.restore.getter();
      sub_1003AEFD4(v22, v46, (uint64_t (*)(void))type metadata accessor for Restore);
      id v48 = v47;
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v197 = *(void *)(v0 + 296);
      uint64_t v52 = *(void *)(v0 + 272);
      if (v51)
      {
        uint64_t v53 = *(void *)(v0 + 248);
        uint64_t v54 = *(void *)(v0 + 136);
        uint64_t v187 = *(void *)(v0 + 128);
        *(void *)os_log_type_t typea = *(void *)(v0 + 168);
        unint64_t v55 = *(void **)(v0 + 112);
        uint64_t v56 = swift_slowAlloc();
        int64_t v200 = v5;
        uint64_t v57 = (void *)swift_slowAlloc();
        uint64_t v207 = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 138412546;
        *(void *)(v56 + 4) = v55;
        *uint64_t v57 = v55;

        *(_WORD *)(v56 + 12) = 2080;
        uint64_t v58 = (uint64_t *)(v52 + *(int *)(v53 + 36));
        uint64_t v59 = *v58;
        unint64_t v60 = v58[1];
        swift_bridgeObjectRetain();
        *(void *)(v56 + 14) = sub_1000143F4(v59, v60, &v207);
        swift_bridgeObjectRelease();
        sub_1003AF03C(v52, (uint64_t (*)(void))type metadata accessor for Restore);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Could not find distributorID for bundleID: %s", (uint8_t *)v56, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        int64_t v5 = v200;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(os_log_type_t *, uint64_t))(v54 + 8))(*(os_log_type_t **)typea, v187);
      }
      else
      {
        uint64_t v6 = *(void *)(v0 + 168);
        uint64_t v8 = *(void *)(v0 + 128);
        uint64_t v7 = *(void *)(v0 + 136);
        uint64_t v9 = *(void **)(v0 + 112);

        sub_1003AF03C(v52, (uint64_t (*)(void))type metadata accessor for Restore);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      }
      sub_1003AF03C(v197, (uint64_t (*)(void))type metadata accessor for Restore);
      unint64_t v4 = v203;
    }
  }
  int64_t v17 = v13 + 4;
  if (v17 < v14)
  {
    unint64_t v16 = *(void *)(v15 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v5 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          break;
        }
        if (v5 >= v14) {
          goto LABEL_46;
        }
        unint64_t v16 = *(void *)(v15 + 8 * v5);
        ++v17;
        if (v16) {
          goto LABEL_22;
        }
      }
LABEL_75:
      __break(1u);
    }
    int64_t v5 = v17;
    goto LABEL_22;
  }
LABEL_46:
  id v99 = *(void **)(v0 + 112);
  swift_release();
  static Logger.restore.getter();
  id v100 = v99;
  swift_bridgeObjectRetain();
  id v101 = v100;
  BOOL v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  BOOL v104 = os_log_type_enabled(v102, v103);
  uint64_t v105 = *(void *)(v0 + 320);
  uint64_t v106 = *(void *)(v0 + 160);
  uint64_t v107 = *(void *)(v0 + 128);
  uint64_t v108 = *(void *)(v0 + 136);
  int v109 = *(void **)(v0 + 112);
  if (v104)
  {
    uint64_t v110 = swift_slowAlloc();
    uint64_t v111 = (void *)swift_slowAlloc();
    uint64_t v206 = swift_slowAlloc();
    *(_DWORD *)uint64_t v110 = 138412546;
    uint64_t v205 = v107;
    *(void *)(v0 + 64) = v109;
    os_log_type_t type = v103;
    id v112 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v111 = v109;

    *(_WORD *)(v110 + 12) = 2082;
    uint64_t v113 = *(void *)(v105 + 16);
    *(void *)(v0 + 72) = v113;
    uint64_t v207 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v208 = v114;
    v115._uint64_t countAndFlagsBits = 32;
    v115._object = (void *)0xE100000000000000;
    String.append(_:)(v115);
    v116._uint64_t countAndFlagsBits = 0x65726F74736572;
    v116._object = (void *)0xE700000000000000;
    String.append(_:)(v116);
    if (v113 == 1) {
      uint64_t v117 = 0;
    }
    else {
      uint64_t v117 = 115;
    }
    if (v113 == 1) {
      unint64_t v118 = 0xE000000000000000;
    }
    else {
      unint64_t v118 = 0xE100000000000000;
    }
    unint64_t v119 = v118;
    String.append(_:)(*(Swift::String *)&v117);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 80) = sub_1000143F4(v207, v208, &v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v102, type, "[%@] Failing %{public}s", (uint8_t *)v110, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v205);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v120 = *(uint64_t (**)(void))(v0 + 8);
  return v120();
}

uint64_t sub_1003AD988(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003AD9F4(uint64_t a1)
{
  return a1;
}

unint64_t sub_1003ADA60()
{
  unint64_t result = qword_1006618F0;
  if (!qword_1006618F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1006618F0);
  }
  return result;
}

uint64_t sub_1003ADAB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003ADB40(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003ADBCC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003ADCB4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003ADD04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003ADD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Restore();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003ADDB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Restore() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  int64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *int64_t v13 = v2;
  v13[1] = sub_1000176B4;
  return sub_10037A59C(a1, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1003ADEF8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_1000176B4;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100661928 + dword_100661928);
  return v6(a1, v4);
}

uint64_t sub_1003ADFB0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1003ADFC8(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_1003ADFC8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1003ADFD8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1003ADFE8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1003ADFD8(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_1003AE000@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003997B0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1003AE008(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1003AE03C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1003AE074()
{
  unint64_t result = qword_100661B30;
  if (!qword_100661B30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100661B30);
  }
  return result;
}

uint64_t sub_1003AE0B4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003AE0FC(void *a1)
{
  return sub_100391338(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1003AE108()
{
  return swift_release();
}

uint64_t sub_1003AE110()
{
  return sub_1003AEE34((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003AE128(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_10037862C(a1, v4, v5, v6);
}

uint64_t sub_1003AE1DC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100661980 + dword_100661980);
  return v6(a1, v4);
}

uint64_t sub_1003AE294(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000176B4;
  return sub_1003A2738(a1, a2, v7, v6);
}

uint64_t sub_1003AE348()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003AE398(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_1003A32E0(a1, v4, v5, v6, v7, v8);
}