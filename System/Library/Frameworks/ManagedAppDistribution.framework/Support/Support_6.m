unint64_t sub_10044CBA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  v2 = sub_1000172F8(&qword_100663E00);
  v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000172F8(&qword_100663E08);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (void *)v6;
  v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100017238(v12, (uint64_t)v5, &qword_100663E00);
    result = sub_10000F800((uint64_t)v5);
    if (v15) {
      break;
    }
    v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10044CD98(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_100663DF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000172F8(&qword_100663DF8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100017238(v12, (uint64_t)v5, &qword_100663DF0);
    unint64_t result = sub_10000F800((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    void *v19 = *(void *)v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10044CF94(uint64_t a1)
{
  uint64_t v33 = type metadata accessor for URLQueryItem();
  uint64_t v3 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v7;
  }
  v31 = v5;
  uint64_t v25 = v1;
  v35 = _swiftEmptyArrayStorage;
  sub_100455C5C(0, v6, 0);
  v7 = v35;
  uint64_t result = sub_10045828C(a1);
  uint64_t v10 = result;
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 64;
  uint64_t v29 = a1 + 64;
  uint64_t v30 = v3 + 32;
  uint64_t v26 = a1 + 80;
  int64_t v27 = v6;
  uint64_t v32 = v3;
  uint64_t v28 = v9;
  uint64_t v13 = v31;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v10 >> 6;
    if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_24;
    }
    uint64_t v34 = v11;
    uint64_t v17 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v7;
    unint64_t v19 = v7[2];
    unint64_t v18 = v7[3];
    if (v19 >= v18 >> 1)
    {
      sub_100455C5C(v18 > 1, v19 + 1, 1);
      v7 = v35;
    }
    v7[2] = v19 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v32 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v19, v13, v33);
    int64_t v14 = 1 << *(unsigned char *)(v17 + 32);
    if (v10 >= v14) {
      goto LABEL_25;
    }
    uint64_t v12 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v16);
    if ((v20 & (1 << v10)) == 0) {
      goto LABEL_26;
    }
    a1 = v17;
    LODWORD(v9) = v28;
    if (*(_DWORD *)(v17 + 36) != v28) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v10 & 0x3F));
    if (v21)
    {
      int64_t v14 = __clz(__rbit64(v21)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v27;
    }
    else
    {
      unint64_t v22 = v16 + 1;
      unint64_t v23 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v27;
      if (v16 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v14 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v16)
          {
            unint64_t v24 = *(void *)(v26 + 8 * v16++);
            if (v24)
            {
              unint64_t v22 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v11 = v34 + 1;
    uint64_t v10 = v14;
    if (v34 + 1 == v15) {
      return (uint64_t)v7;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10044D2A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 160) = a4;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for URL();
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = *(void *)(v7 - 8);
  *(void *)(v6 + 72) = swift_task_alloc();
  *(void *)(v6 + 80) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLRequest();
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 96) = *(void *)(v8 - 8);
  *(void *)(v6 + 104) = swift_task_alloc();
  *(void *)(v6 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_10044D3EC, 0, 0);
}

uint64_t sub_10044D3EC()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  char v16 = *(unsigned char *)(v0 + 160);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(v4, *(void *)(v0 + 16), v6);
  v8(v5, v4, v6);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  URLRequest.httpBody.setter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v15, v1, v2);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v9;
  void *v9 = v0;
  v9[1] = sub_10044D56C;
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v13 = *(void *)(v0 + 32);
  return sub_100450B34(v10, v12, v13, v16 & 1, v11);
}

uint64_t sub_10044D56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 128) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_10044D754;
  }
  else
  {
    v8[17] = a3;
    v8[18] = a2;
    v8[19] = a1;
    uint64_t v9 = sub_10044D6A8;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_10044D6A8()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v4 = v0[17];
  return v1(v2, v3, v4);
}

uint64_t sub_10044D754()
{
  (*(void (**)(void, void))(v0[12] + 8))(v0[14], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10044D7F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URLComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002C66D0(v1, (uint64_t)v18);
  if (v19)
  {
    uint64_t v16 = v3;
    uint64_t v10 = *(void *)&v18[0];
    URLComponents.init()();
    sub_10044CF94(v10);
    swift_bridgeObjectRelease();
    URLComponents.queryItems.setter();
    URLComponents.percentEncodedQuery.getter();
    if (v11
      && (static String.Encoding.utf8.getter(),
          uint64_t v10 = String.data(using:allowLossyConversion:)(),
          unint64_t v13 = v12,
          swift_bridgeObjectRelease(),
          (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v2),
          v13 >> 60 != 15))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      sub_10029D4AC();
      swift_allocError();
      *(void *)uint64_t v14 = 1;
      *(unsigned char *)(v14 + 8) = 2;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else
  {
    sub_10018B164(v18, (uint64_t)v17);
    sub_10018AC60(v17, v17[3]);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v10 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
    sub_100014524((uint64_t)v17);
  }
  return v10;
}

unint64_t sub_10044DADC(char a1)
{
  id v2 = (id)MobileGestalt_get_current_device();
  if (v2)
  {
    char v35 = a1;
    id v3 = (id)MobileGestalt_copy_marketingProductName_obj();
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = 0xE700000000000000;
      uint64_t v5 = 0x4E574F4E4B4E55;
    }
    id v13 = (id)MobileGestalt_copy_productVersion_obj();
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE700000000000000;
      uint64_t v10 = 0x4E574F4E4B4E55;
    }
    uint64_t v11 = (void *)v16;
    id v17 = (id)MobileGestalt_copy_productType_obj();
    if (v17)
    {
      unint64_t v18 = v17;
      unint64_t v12 = (void *)v7;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
    }
    else
    {
      unint64_t v12 = (void *)v7;
      unint64_t v21 = 0xE700000000000000;
      uint64_t v19 = 0x4E574F4E4B4E55;
    }
    id v22 = (id)MobileGestalt_copy_buildVersion_obj();
    uint64_t v36 = v19;
    if (v22)
    {
      unint64_t v23 = v22;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v24;
    }
    else
    {
      uint64_t v8 = (void *)0xE700000000000000;
      uint64_t v37 = 0x4E574F4E4B4E55;
    }
    uint64_t v9 = (void *)v21;
    a1 = v35;
  }
  else
  {
    uint64_t v8 = (void *)0xE700000000000000;
    uint64_t v36 = 0x4E574F4E4B4E55;
    uint64_t v37 = 0x4E574F4E4B4E55;
    uint64_t v9 = (void *)0xE700000000000000;
    uint64_t v10 = 0x4E574F4E4B4E55;
    uint64_t v11 = (void *)0xE700000000000000;
    uint64_t v5 = 0x4E574F4E4B4E55;
    unint64_t v12 = (void *)0xE700000000000000;
  }
  if (a1) {
    unint64_t v25 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v25 = 0xD000000000000012;
  }
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v5;
  v27._object = v12;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 47;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v10;
  v29._object = v11;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x2F6C65646F6D20;
  v30._object = (void *)0xE700000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v36;
  v31._object = v9;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0x2F646C69756220;
  v32._object = (void *)0xE700000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v37;
  v33._object = v8;
  String.append(_:)(v33);

  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10044DDBC(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  sub_1000172F8(&qword_10065C3C0);
  v3[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v3[20] = v5;
  v3[21] = *(void *)(v5 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[24] = v6;
  v3[25] = *(void *)(v6 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LogKey.Prefix();
  v3[28] = v7;
  v3[29] = *(void *)(v7 - 8);
  v3[30] = swift_task_alloc();
  return _swift_task_switch(sub_10044DFE4, 0, 0);
}

uint64_t sub_10044DFE4()
{
  v58 = v0;
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  v54 = (void *)v0[14];
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for LogKey.Prefix.none(_:), v0[28]);
  id v6 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v7 = (void *)LogKey.init(prefix:)();
  v0[31] = v7;
  static Logger.general.getter();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v2, v1, v4);
  v8(v3, v1, v4);
  id v9 = v54;
  id v10 = v7;
  id v11 = v9;
  id v12 = v10;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v51 = v14;
    log = v13;
    uint64_t v55 = v0[21];
    uint64_t v46 = v0[23];
    uint64_t v48 = v0[20];
    unint64_t v15 = (void *)v0[14];
    uint64_t v16 = swift_slowAlloc();
    v53 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v0[9] = v15;
    v57[0] = v17;
    *(_DWORD *)uint64_t v16 = 138413058;
    id v18 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v53 = v15;

    *(_WORD *)(v16 + 12) = 2112;
    v0[10] = v12;
    id v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v53[1] = v12;

    *(_WORD *)(v16 + 22) = 2082;
    uint64_t v20 = v46;
    uint64_t v21 = URLRequest.debugDescription.getter();
    v0[11] = sub_1000143F4(v21, v22, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v47 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v47(v20, v48);
    *(_WORD *)(v16 + 32) = 2080;
    if (!URLRequest.allHTTPHeaderFields.getter()) {
      sub_10044B560((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v23 = v0[25];
    uint64_t v49 = v0[24];
    uint64_t v50 = v0[27];
    uint64_t v24 = v0[22];
    uint64_t v25 = v0[20];
    uint64_t v26 = Dictionary.description.getter();
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    v0[12] = sub_1000143F4(v26, v28, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v47(v24, v25);
    _os_log_impl((void *)&_mh_execute_header, log, v51, "[%@][%@] Sending request: %{public}s headers: %s", (uint8_t *)v16, 0x2Au);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v29(v50, v49);
  }
  else
  {
    uint64_t v56 = v0[27];
    uint64_t v30 = v0[24];
    uint64_t v31 = v0[25];
    uint64_t v33 = v0[22];
    uint64_t v32 = v0[23];
    uint64_t v34 = v0[20];
    uint64_t v35 = v0[21];
    uint64_t v36 = (void *)v0[14];

    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v37(v32, v34);
    v37(v33, v34);

    Swift::String v29 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v29(v56, v30);
  }
  v0[32] = v29;
  uint64_t v38 = v0[17];
  uint64_t v39 = v0[18];
  uint64_t v40 = v0[16];
  URLRequest.url.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v38) == 1)
  {
    sub_10001729C(v0[16], &qword_10065C3C0);
    v41 = (void *)v0[31];
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v42 = 2;
    *(unsigned char *)(v42 + 8) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v43 = (uint64_t (*)(void))v0[1];
    return v43();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[18] + 32))(v0[19], v0[16], v0[17]);
    v45 = (void *)swift_task_alloc();
    v0[33] = v45;
    void *v45 = v0;
    v45[1] = sub_10044E5D0;
    return sub_1004D0BDC();
  }
}

uint64_t sub_10044E5D0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10044E6D0, 0, 0);
}

uint64_t sub_10044E6D0()
{
  if (*(unsigned char *)(v0 + 320))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    uint64_t v1 = *(void **)(v0 + 248);
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v2 = 2;
    *(unsigned char *)(v2 + 8) = 2;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void **)(v0 + 112);
    id v6 = (objc_class *)type metadata accessor for SecureTaskDelegate();
    uint64_t v7 = (char *)objc_allocWithZone(v6);
    uint64_t v8 = OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate__metrics;
    sub_1000172F8((uint64_t *)&unk_100663AC8);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 24) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)&v7[v8] = v9;
    *(void *)&v7[OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate_logKey] = v5;
    *(void *)(v0 + 16) = v7;
    *(void *)(v0 + 24) = v6;
    id v10 = v5;
    id v11 = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
    *(void *)(v0 + 272) = v11;
    id v12 = v11;
    id v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v13;
    *id v13 = v0;
    v13[1] = sub_10044E8EC;
    uint64_t v14 = *(void *)(v0 + 104);
    return NSURLSession.data(for:delegate:)(v14, v11);
  }
}

uint64_t sub_10044E8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  id v6 = (void *)*v4;
  v6[36] = a1;
  v6[37] = a2;
  v6[38] = a3;
  v6[39] = v3;
  swift_task_dealloc();

  if (v3) {
    uint64_t v7 = sub_10044F13C;
  }
  else {
    uint64_t v7 = sub_10044EA2C;
  }
  return _swift_task_switch(v7, 0, 0);
}

void sub_10044EA2C()
{
  uint64_t v79 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 304);
  uint64_t v4 = *(void *)(v1 + 288);
  unint64_t v3 = *(void *)(v1 + 296);
  uint64_t v5 = *(void **)(v1 + 248);
  id v6 = *(void **)(v1 + 112);
  static Logger.general.getter();
  id v7 = v2;
  id v8 = v6;
  id v9 = v5;
  id v10 = v7;
  sub_100012670(v4, v3);
  id v11 = v8;
  id v12 = v9;
  id v13 = v10;
  sub_100012670(v4, v3);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v72 = v15;
    unint64_t v74 = v3 >> 62;
    uint64_t v16 = *(void **)(v1 + 248);
    uint64_t v17 = *(void **)(v1 + 112);
    uint64_t v18 = swift_slowAlloc();
    id v19 = (void *)swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    *(void *)(v1 + 32) = v17;
    v78[0] = v20;
    *(_DWORD *)uint64_t v18 = 138413314;
    id v21 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v19 = v17;

    *(_WORD *)(v18 + 12) = 2112;
    *(void *)(v1 + 40) = v16;
    id v22 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v19[1] = v16;

    *(_WORD *)(v18 + 22) = 2050;
    self;
    uint64_t v23 = (void *)swift_dynamicCastObjCClass();
    if (v23) {
      uint64_t v24 = (uint64_t)[v23 statusCode];
    }
    else {
      uint64_t v24 = -1;
    }
    uint64_t v32 = *(void **)(v1 + 304);

    *(void *)(v1 + 48) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v18 + 32) = 2048;
    switch((int)v74)
    {
      case 1:
        uint64_t v35 = *(void *)(v1 + 288);
        sub_100013510(v35, *(void *)(v1 + 296));
        LODWORD(v34) = HIDWORD(v35) - v35;
        if (__OFSUB__(HIDWORD(v35), v35))
        {
          __break(1u);
          JUMPOUT(0x10044F12CLL);
        }
        uint64_t v34 = (int)v34;
        break;
      case 2:
        uint64_t v36 = *(void *)(v1 + 288);
        uint64_t v38 = *(void *)(v36 + 16);
        uint64_t v37 = *(void *)(v36 + 24);
        sub_100013510(v36, *(void *)(v1 + 296));
        uint64_t v34 = v37 - v38;
        if (__OFSUB__(v37, v38))
        {
          __break(1u);
          goto LABEL_13;
        }
        break;
      case 3:
LABEL_13:
        sub_100013510(*(void *)(v1 + 288), *(void *)(v1 + 296));
        uint64_t v34 = 0;
        break;
      default:
        unint64_t v33 = *(void *)(v1 + 296);
        sub_100013510(*(void *)(v1 + 288), v33);
        uint64_t v34 = BYTE6(v33);
        break;
    }
    unint64_t v39 = *(void *)(v1 + 296);
    uint64_t v40 = *(void **)(v1 + 304);
    uint64_t v41 = *(void *)(v1 + 288);
    uint64_t v73 = *(void *)(v1 + 208);
    v75 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    uint64_t v42 = *(void *)(v1 + 192);
    *(void *)(v1 + 56) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100013510(v41, v39);
    *(_WORD *)(v18 + 42) = 2080;
    id v43 = [v40 debugDescription];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;

    *(void *)(v1 + 64) = sub_1000143F4(v44, v46, (uint64_t *)v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v14, v72, "[%@][%@] Status code: %{public}ld Received %ld bytes: %s", (uint8_t *)v18, 0x34u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v75(v73, v42);
  }
  else
  {
    unint64_t v25 = *(void *)(v1 + 296);
    uint64_t v26 = *(void **)(v1 + 304);
    uint64_t v27 = *(void *)(v1 + 288);
    unint64_t v28 = *(void **)(v1 + 248);
    v76 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    uint64_t v29 = *(void *)(v1 + 208);
    uint64_t v30 = *(void *)(v1 + 192);
    uint64_t v31 = *(void **)(v1 + 112);
    sub_100013510(v27, v25);

    sub_100013510(v27, v25);
    v76(v29, v30);
  }
  uint64_t v47 = *(void *)(v1 + 312);
  uint64_t v48 = *(os_unfair_lock_s **)(*(void *)(v1 + 272)
                             + OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate__metrics);
  uint64_t v49 = (void **)&v48[4];
  uint64_t v50 = v48 + 6;
  os_unfair_lock_lock(v48 + 6);
  sub_100006250(v49, v78);
  os_unfair_lock_unlock(v50);
  if (!v47)
  {
    os_log_type_t v51 = v78[0];
    sub_10036384C(*(void *)(v1 + 104), *(void **)(v1 + 304), *(void *)(v1 + 288), *(void *)(v1 + 296), v78[0]);

    self;
    uint64_t v52 = swift_dynamicCastObjCClass();
    v53 = *(void **)(v1 + 304);
    if (v52)
    {
      uint64_t v54 = v52;
      uint64_t v55 = *(void **)(v1 + 272);
      uint64_t v56 = *(void **)(v1 + 248);
      uint64_t v57 = *(void *)(v1 + 152);
      uint64_t v58 = *(void *)(v1 + 136);
      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 144) + 8);
      id v60 = v53;
      v59(v57, v58);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 8);
      uint64_t v62 = *(void *)(v1 + 288);
      uint64_t v63 = *(void *)(v1 + 296);
      v61(v62, v63, v54);
    }
    else
    {
      uint64_t v64 = *(void *)(v1 + 288);
      unint64_t v65 = *(void *)(v1 + 296);
      v66 = *(void **)(v1 + 272);
      v67 = *(void **)(v1 + 248);
      uint64_t v68 = *(void *)(v1 + 144);
      uint64_t v77 = *(void *)(v1 + 152);
      uint64_t v69 = *(void *)(v1 + 136);
      sub_10029D4AC();
      swift_allocError();
      *(void *)uint64_t v70 = 0;
      *(unsigned char *)(v70 + 8) = 2;
      swift_willThrow();
      sub_100013510(v64, v65);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v77, v69);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v71 = *(void (**)(void))(v1 + 8);
      v71();
    }
  }
}

uint64_t sub_10044F13C()
{
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10044F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[11] = a4;
  v5[12] = v4;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  uint64_t v6 = type metadata accessor for URL();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URLRequest();
  v5[17] = v7;
  v5[18] = *(void *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return _swift_task_switch(sub_10044F378, 0, 0);
}

uint64_t sub_10044F378()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 112) + 16);
  v1(*(void *)(v0 + 128), *(void *)(v0 + 64), *(void *)(v0 + 104));
  uint64_t v2 = sub_10044D7F8();
  unint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v24 = *(void *)(v0 + 136);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v22 = *(void *)(v0 + 112);
  uint64_t v23 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v26 = *(void *)(v0 + 96);
  uint64_t v27 = *(void *)(v0 + 152);
  uint64_t v28 = *(void *)(v0 + 80);
  sub_1002C66D0(*(void *)(v0 + 72), v0 + 16);
  int v21 = *(unsigned __int8 *)(v0 + 56);
  sub_1002C672C(v0 + 16);
  v1(v7, v6, v8);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  sub_100012670(v2, v4);
  URLRequest.httpBody.setter();
  if (v21) {
    unint64_t v9 = 0xD000000000000021;
  }
  else {
    unint64_t v9 = 0xD000000000000010;
  }
  if (v21) {
    unint64_t v10 = 0x80000001005BE500;
  }
  else {
    unint64_t v10 = 0x80000001005BE4E0;
  }
  unint64_t v11 = v10;
  v12._countAndFlagsBits = 0x2D746E65746E6F43;
  v12._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v9, v12);
  swift_bridgeObjectRelease();
  sub_100013510(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v25, v5, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v27, v25, v24);
  v13.value._countAndFlagsBits = sub_10044DADC(*(unsigned char *)(v26 + 24));
  v14._countAndFlagsBits = 0x6567412D72657355;
  v14._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v13, v14);
  swift_bridgeObjectRelease();
  if (v28)
  {
    uint64_t v15 = *(void *)(v0 + 152);
    *(void *)(swift_task_alloc() + 16) = v15;
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_100458680(v16, (void (*)(uint64_t, uint64_t, uint64_t))sub_100458284);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  URLRequest.timeoutInterval.setter();
  URLRequest.cachePolicy.setter();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10044F708;
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v19 = *(void *)(v0 + 88);
  return sub_10044DDBC(v18, v19);
}

uint64_t sub_10044F708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 184) = v3;
  swift_task_dealloc();
  if (v3)
  {
    unint64_t v9 = sub_10044F924;
  }
  else
  {
    v8[24] = a3;
    v8[25] = a2;
    v8[26] = a1;
    unint64_t v9 = sub_10044F844;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_10044F844()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
  v3(v0[19], v2);
  v3(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];
  uint64_t v7 = v0[24];
  return v4(v5, v6, v7);
}

uint64_t sub_10044F924()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[17];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[18] + 8);
  v3(v0[19], v2);
  v3(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10044FAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[11] = a5;
  v6[12] = v5;
  v6[9] = a1;
  v6[10] = a4;
  uint64_t v7 = type metadata accessor for URLRequest();
  v6[13] = v7;
  v6[14] = *(void *)(v7 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v6[19] = v8;
  v6[20] = *(void *)(v8 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_10044FC04, 0, 0);
}

uint64_t sub_10044FC04()
{
  uint64_t v99 = v0;
  if (os_variant_has_internal_content())
  {
    id v1 = [*(id *)(v0 + 80) _allHTTPHeaderFieldsAsArrays];
    if (v1)
    {
      uint64_t v2 = v1;
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v3 + 16))
      {
        unint64_t v4 = sub_100016D20(0xD00000000000001ELL, 0x80000001005BA0E0);
        if (v5)
        {
          uint64_t v6 = *(void **)(*(void *)(v3 + 56) + 8 * v4);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (v6[2])
          {
            uint64_t v8 = *(void *)(v0 + 136);
            uint64_t v7 = *(void *)(v0 + 144);
            uint64_t v9 = *(void *)(v0 + 104);
            uint64_t v10 = *(void *)(v0 + 112);
            uint64_t v11 = *(void *)(v0 + 88);
            Swift::String v12 = *(void **)(v0 + 96);
            os_log_t v94 = (os_log_t)v6[4];
            unint64_t v13 = v6[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            static Logger.general.getter();
            Swift::String v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
            v14(v7, v11, v9);
            v97 = v14;
            v14(v8, v11, v9);
            id v15 = v12;
            swift_bridgeObjectRetain();
            id v16 = v15;
            uint64_t v17 = Logger.logObject.getter();
            os_log_type_t v18 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v17, v18))
            {
              os_log_type_t v91 = v18;
              log = v17;
              uint64_t v83 = *(void *)(v0 + 144);
              uint64_t v19 = *(void *)(v0 + 112);
              uint64_t v86 = *(void *)(v0 + 104);
              uint64_t v20 = *(char **)(v0 + 96);
              uint64_t v21 = swift_slowAlloc();
              uint64_t v22 = (void *)swift_slowAlloc();
              uint64_t v98 = swift_slowAlloc();
              *(_DWORD *)uint64_t v21 = 138413058;
              uint64_t v23 = *(void **)&v20[OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate_logKey];
              *(void *)(v0 + 40) = v23;
              id v24 = v23;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v22 = v23;

              *(_WORD *)(v21 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v0 + 48) = sub_1000143F4((uint64_t)v94, v13, &v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v21 + 22) = 2080;
              uint64_t v25 = URLRequest.debugDescription.getter();
              *(void *)(v0 + 56) = sub_1000143F4(v25, v26, &v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
              v27(v83, v86);
              *(_WORD *)(v21 + 32) = 2080;
              if (!URLRequest.allHTTPHeaderFields.getter()) {
                sub_10044B560((uint64_t)_swiftEmptyArrayStorage);
              }
              uint64_t v28 = *(void *)(v0 + 160);
              uint64_t v87 = *(void *)(v0 + 152);
              uint64_t v89 = *(void *)(v0 + 176);
              uint64_t v29 = *(void *)(v0 + 136);
              uint64_t v30 = *(void *)(v0 + 104);
              uint64_t v31 = Dictionary.description.getter();
              unint64_t v33 = v32;
              swift_bridgeObjectRelease();
              *(void *)(v0 + 64) = sub_1000143F4(v31, v33, &v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v27(v29, v30);
              _os_log_impl((void *)&_mh_execute_header, log, v91, "[%@] Following redirect correlation-id: %s description: %s headers: %s", (uint8_t *)v21, 0x2Au);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v89, v87);
              goto LABEL_17;
            }
            uint64_t v96 = *(void *)(v0 + 176);
            uint64_t v61 = *(void *)(v0 + 152);
            uint64_t v76 = *(void *)(v0 + 160);
            uint64_t v78 = *(void *)(v0 + 136);
            uint64_t v77 = *(void *)(v0 + 144);
            uint64_t v79 = *(void *)(v0 + 104);
            uint64_t v80 = *(void *)(v0 + 112);
            v81 = *(void **)(v0 + 96);

            swift_bridgeObjectRelease_n();
            v82 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
            v82(v77, v79);
            v82(v78, v79);

            uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
            uint64_t v70 = v96;
LABEL_16:
            v69(v70, v61);
            goto LABEL_17;
          }
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v35 = *(void *)(v0 + 120);
  uint64_t v34 = *(void *)(v0 + 128);
  uint64_t v36 = *(void *)(v0 + 104);
  uint64_t v37 = *(void *)(v0 + 112);
  uint64_t v38 = *(void *)(v0 + 88);
  unint64_t v39 = *(void **)(v0 + 96);
  static Logger.general.getter();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v40(v34, v38, v36);
  v97 = v40;
  v40(v35, v38, v36);
  id v41 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v42, v43))
  {
    uint64_t v60 = *(void *)(v0 + 160);
    uint64_t v59 = *(void *)(v0 + 168);
    uint64_t v61 = *(void *)(v0 + 152);
    uint64_t v63 = *(void *)(v0 + 120);
    uint64_t v62 = *(void *)(v0 + 128);
    uint64_t v64 = v42;
    uint64_t v65 = *(void *)(v0 + 104);
    uint64_t v66 = *(void *)(v0 + 112);
    v67 = *(void **)(v0 + 96);

    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
    v68(v62, v65);
    v68(v63, v65);

    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    uint64_t v70 = v59;
    goto LABEL_16;
  }
  os_log_type_t loga = v43;
  uint64_t v44 = *(void *)(v0 + 112);
  uint64_t v84 = *(void *)(v0 + 128);
  unint64_t v45 = *(char **)(v0 + 96);
  uint64_t v90 = *(void *)(v0 + 104);
  uint64_t v46 = swift_slowAlloc();
  uint64_t v47 = (void *)swift_slowAlloc();
  uint64_t v98 = swift_slowAlloc();
  *(_DWORD *)uint64_t v46 = 138412802;
  uint64_t v48 = *(void **)&v45[OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate_logKey];
  *(void *)(v0 + 16) = v48;
  id v49 = v48;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v47 = v48;

  *(_WORD *)(v46 + 12) = 2080;
  uint64_t v50 = URLRequest.debugDescription.getter();
  *(void *)(v0 + 24) = sub_1000143F4(v50, v51, &v98);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v52(v84, v90);
  *(_WORD *)(v46 + 22) = 2080;
  v95 = v42;
  if (!URLRequest.allHTTPHeaderFields.getter()) {
    sub_10044B560((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v53 = *(void *)(v0 + 160);
  uint64_t v85 = *(void *)(v0 + 152);
  uint64_t v88 = *(void *)(v0 + 168);
  uint64_t v54 = *(void *)(v0 + 120);
  uint64_t v55 = *(void *)(v0 + 104);
  uint64_t v56 = Dictionary.description.getter();
  unint64_t v58 = v57;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = sub_1000143F4(v56, v58, &v98);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v52(v54, v55);
  _os_log_impl((void *)&_mh_execute_header, v95, loga, "[%@] Following redirect: %s headers: %s", (uint8_t *)v46, 0x20u);
  sub_1000172F8(&qword_10065DB10);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v88, v85);
LABEL_17:
  uint64_t v71 = *(void *)(v0 + 104);
  uint64_t v72 = *(void *)(v0 + 112);
  uint64_t v73 = *(void *)(v0 + 72);
  v97(v73, *(void *)(v0 + 88), v71);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v73, 0, 1, v71);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
  return v74();
}

uint64_t sub_100450654(void *a1, void *a2, void *a3, uint64_t a4, const void *a5, void *a6)
{
  v6[4] = a3;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v12 = type metadata accessor for URLRequest();
  v6[6] = v12;
  v6[7] = *(void *)(v12 - 8);
  uint64_t v13 = swift_task_alloc();
  v6[8] = v13;
  sub_1000172F8(&qword_10065D390);
  v6[9] = swift_task_alloc();
  uint64_t v14 = swift_task_alloc();
  v6[10] = v14;
  v6[11] = _Block_copy(a5);
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;
  a6;
  os_log_type_t v18 = (void *)swift_task_alloc();
  v6[12] = v18;
  *os_log_type_t v18 = v6;
  v18[1] = sub_10024D538;
  return sub_10044FAAC(v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, v13);
}

uint64_t type metadata accessor for SecureTaskDelegate()
{
  return self;
}

unint64_t sub_100450968(uint64_t a1, char a2)
{
  if (!a2)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000015;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000010;
LABEL_5:
    v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    return v5;
  }
  unint64_t v4 = 0xD000000000000012;
  if (a1 != 1) {
    unint64_t v4 = 0x2064696C61766E49;
  }
  if (a1) {
    return v4;
  }
  else {
    return 0xD000000000000010;
  }
}

unint64_t sub_100450AB4()
{
  return sub_100450968(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_100450AC0()
{
  id v1 = *(void **)(v0 + 16);
  [v1 invalidateAndCancel];

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlainHTTP()
{
  return self;
}

uint64_t sub_100450B34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = v5;
  *(unsigned char *)(v6 + 120) = a4;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for URLRequest();
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = *(void *)(v7 - 8);
  *(void *)(v6 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_100450C00, 0, 0);
}

uint64_t sub_100450C00()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  (*(void (**)(void, void, void))(v0[8] + 16))(v0[9], v0[2], v0[7]);
  v3.value._countAndFlagsBits = sub_10044DADC(*(unsigned char *)(v1 + 24));
  v4._countAndFlagsBits = 0x6567412D72657355;
  v4._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v3, v4);
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v5 = v0[3];
    uint64_t v28 = v5 + 64;
    uint64_t v6 = -1;
    uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
    if (-v7 < 64) {
      uint64_t v6 = ~(-1 << -(char)v7);
    }
    unint64_t v8 = v6 & *(void *)(v5 + 64);
    int64_t v9 = (unint64_t)(63 - v7) >> 6;
    swift_bridgeObjectRetain();
    int64_t v10 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v10 << 6);
      }
      else
      {
        int64_t v17 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          goto LABEL_31;
        }
        if (v17 >= v9) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v28 + 8 * v17);
        ++v10;
        if (!v18)
        {
          int64_t v10 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v28 + 8 * v10);
          if (!v18)
          {
            int64_t v10 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_26;
            }
            unint64_t v18 = *(void *)(v28 + 8 * v10);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_26:
                swift_release();
                break;
              }
              unint64_t v18 = *(void *)(v28 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v10 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    break;
                  }
                  if (v10 >= v9) {
                    goto LABEL_26;
                  }
                  unint64_t v18 = *(void *)(v28 + 8 * v10);
                  ++v19;
                  if (v18) {
                    goto LABEL_22;
                  }
                }
LABEL_31:
                __break(1u);
                JUMPOUT(0x100450F24);
              }
              int64_t v10 = v19;
            }
          }
        }
LABEL_22:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v16);
      uint64_t v23 = *v21;
      uint64_t v22 = (void *)v21[1];
      uint64_t v11 = (void *)0xEA0000000000746ELL;
      uint64_t v12 = 0x6567412D72657355;
      switch(v20)
      {
        case 1:
          uint64_t v11 = (void *)0xEC00000065707954;
          uint64_t v12 = 0x2D746E65746E6F43;
          break;
        case 2:
          break;
        case 3:
          uint64_t v11 = (void *)0xE500000000000000;
          uint64_t v12 = 0x65676E6152;
          break;
        default:
          uint64_t v11 = (void *)0xED00006E6F697461;
          uint64_t v12 = 0x7A69726F68747541;
          break;
      }
      swift_bridgeObjectRetain();
      v13.value._countAndFlagsBits = v23;
      v13.value._object = v22;
      v14._countAndFlagsBits = v12;
      v14._object = v11;
      URLRequest.setValue(_:forHTTPHeaderField:)(v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  URLRequest.timeoutInterval.setter();
  URLRequest.cachePolicy.setter();
  URLRequest.httpShouldHandleCookies.setter();
  id v24 = (void *)swift_task_alloc();
  v0[10] = v24;
  *id v24 = v0;
  v24[1] = sub_100450F34;
  uint64_t v25 = v0[9];
  uint64_t v26 = v0[5];
  return sub_10044DDBC(v25, v26);
}

uint64_t sub_100450F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 88) = v3;
  swift_task_dealloc();
  if (v3)
  {
    int64_t v9 = sub_1004510F8;
  }
  else
  {
    v8[12] = a3;
    v8[13] = a2;
    v8[14] = a1;
    int64_t v9 = sub_100451070;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100451070()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[12];
  return v1(v2, v3, v4);
}

uint64_t sub_1004510F8()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100451178(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1004512B8, 0, 0);
}

uint64_t sub_1004512B8()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v15 = v0[4];
  uint64_t v16 = v0[9];
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v8(v4, v0[2], v7);
  v8(v5, v4, v7);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  URLRequest.httpBody.setter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v16);
  v9.value._countAndFlagsBits = sub_10044DADC(*(unsigned char *)(v15 + 24));
  v10._countAndFlagsBits = 0x6567412D72657355;
  v10._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v9, v10);
  swift_bridgeObjectRelease();
  URLRequest.timeoutInterval.setter();
  URLRequest.cachePolicy.setter();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[13] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10045147C;
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[3];
  return sub_10044DDBC(v12, v13);
}

uint64_t sub_10045147C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 112) = v3;
  swift_task_dealloc();
  if (v3)
  {
    Swift::String_optional v9 = sub_100451664;
  }
  else
  {
    *(void *)(v8 + 120) = a3;
    sub_100013510(a1, a2);
    Swift::String_optional v9 = sub_1004515BC;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1004515BC()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[15];
  return v1(v2);
}

uint64_t sub_100451664()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100451708(char a1, Swift::String_optional _)
{
  object = _.value._object;
  unint64_t v3 = 0xED00006E6F697461;
  _.value._object = (void *)0x7A69726F68747541;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xEC00000065707954;
      _.value._object = (void *)0x2D746E65746E6F43;
      break;
    case 2:
      unint64_t v3 = 0xEA0000000000746ELL;
      _.value._object = (void *)0x6567412D72657355;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      _.value._object = (void *)0x65676E6152;
      break;
    default:
      break;
  }
  uint64_t countAndFlagsBits = _.value._countAndFlagsBits;
  _.value._uint64_t countAndFlagsBits = (uint64_t)object;
  unint64_t v5 = v3;
  URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)((char *)&_ - 8), *(Swift::String *)&_.value._object);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004517F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  char v10 = a4 & 1;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1004518B8;
  return sub_10044D2A4(a1, a2, a3, v10, a5);
}

uint64_t sub_1004518B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *v4;
  uint64_t v8 = swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 8);
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
  }
  return v11(v8, v9, v10);
}

uint64_t sub_1004519D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000176B4;
  return v6();
}

uint64_t sub_100451A9C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1000176B4;
  return v7();
}

uint64_t sub_100451B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10001729C(a1, &qword_10065B220);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

unint64_t sub_100451D14(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_10000FA74(&qword_100663B00, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100452BE8(a1, v2);
}

unint64_t sub_100451DC8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100452D44(a1, v2);
}

unint64_t sub_100451EDC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100452F74(a1, v4);
}

uint64_t sub_100451F20(uint64_t a1)
{
  return sub_100452678(a1, (void (*)(uint64_t))sub_1001A0578, (uint64_t (*)(uint64_t, Swift::Int))sub_10045303C);
}

unint64_t sub_100451F4C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100453754(a1, v2);
}

unint64_t sub_100452010(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1004538F0(a1, v2);
}

unint64_t sub_10045212C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100454150(a1, v2);
}

unint64_t sub_100452208(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  sub_1004498E4();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10045431C(a1, v2);
}

unint64_t sub_100452274(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1004546A4(a1, v2);
}

unint64_t sub_1004523A0(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100454904(a1, v2);
}

unint64_t sub_1004524C0(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100454B64(a1, v2);
}

unint64_t sub_10045257C(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_100455608(a1, v2);
}

unint64_t sub_1004525B8(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100454CF0(a1, v2);
}

uint64_t sub_10045264C(uint64_t a1)
{
  return sub_100452678(a1, (void (*)(uint64_t))sub_1002A9C74, (uint64_t (*)(uint64_t, Swift::Int))sub_100454E68);
}

uint64_t sub_100452678(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, v5);
}

unint64_t sub_100452714(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a3 & 1;
  Hasher.init(_seed:)();
  StoreAppIdentifier.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();

  return sub_100455488(a1, a2, v5, v6);
}

unint64_t sub_1004527A0(__n128 *a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1[1].n128_u8[0]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1004556A4(a1, v2);
}

unint64_t sub_100452868(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10000FA74((unint64_t *)&unk_100660E70, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  type metadata accessor for URL();
  sub_10000FA74(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(a1 + *(int *)(v2 + 24)));
  Swift::Int v3 = Hasher._finalize()();

  return sub_1004557E0(a1, v3);
}

unint64_t sub_100452998(uint64_t a1)
{
  type metadata accessor for URL();
  sub_10000FA74(&qword_10065FA78, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10000F8D4(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, (unint64_t *)&unk_100663D20, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_100452A6C(Swift::UInt64 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100455608(a1, v2);
}

unint64_t sub_100452AD8(uint64_t *a1)
{
  Hasher.init(_seed:)();
  sub_10023E540();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100455950(a1, v2);
}

unint64_t sub_100452B44(Swift::UInt64 a1, char a2)
{
  Hasher.init(_seed:)();
  if (!a2)
  {
    Swift::UInt v4 = 0;
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    Swift::UInt v4 = 1;
LABEL_5:
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(a1);
    goto LABEL_7;
  }
  Hasher._combine(_:)(2uLL);
LABEL_7:
  Swift::Int v5 = Hasher._finalize()();

  return sub_100455B6C(a1, a2, v5);
}

unint64_t sub_100452BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    Swift::Int v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_10000FA74(&qword_100663B00, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100452D44(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xED00006E6F697461;
      uint64_t v8 = 0x7A69726F68747541;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0x2D746E65746E6F43;
          unint64_t v7 = 0xEC00000065707954;
          break;
        case 2:
          uint64_t v8 = 0x6567412D72657355;
          unint64_t v7 = 0xEA0000000000746ELL;
          break;
        case 3:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x65676E6152;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x7A69726F68747541;
      unint64_t v10 = 0xED00006E6F697461;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xEC00000065707954;
          if (v8 == 0x2D746E65746E6F43) {
            goto LABEL_14;
          }
          goto LABEL_15;
        case 2:
          uint64_t v9 = 0x6567412D72657355;
          unint64_t v10 = 0xEA0000000000746ELL;
          goto LABEL_11;
        case 3:
          unint64_t v10 = 0xE500000000000000;
          if (v8 == 0x65676E6152) {
            goto LABEL_14;
          }
          goto LABEL_15;
        default:
LABEL_11:
          if (v8 != v9) {
            goto LABEL_15;
          }
LABEL_14:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_15:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100452F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10036DF28(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10025C22C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10045303C(char a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = sub_1001A0578(*(unsigned char *)(*(void *)(v2 + 48) + v5));
    uint64_t v9 = v8;
    if (v7 == sub_1001A0578(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v4;
      unint64_t v5 = (v5 + 1) & v13;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v14 = sub_1001A0578(*(unsigned char *)(*(void *)(v2 + 48) + v5));
          uint64_t v16 = v15;
          if (v14 == sub_1001A0578(a1) && v16 == v17) {
            break;
          }
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v13;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1004531B4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEC00000074657366;
      unint64_t v8 = 0x666F5F7365747962;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x645F726568706963;
          unsigned int v9 = 1936025449;
          goto LABEL_18;
        case 2:
          unint64_t v8 = 0x73736572706D6F63;
          unint64_t v7 = 0xEF657A69735F6465;
          break;
        case 3:
          unint64_t v8 = 0x6F72705F61746164;
          unint64_t v7 = 0xEF64695F6573696DLL;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x747365676964;
          break;
        case 5:
          unint64_t v8 = 0x636F6C5F6B736964;
          unint64_t v7 = 0xED00006E6F697461;
          break;
        case 6:
          unint64_t v7 = 0xEA00000000006E6FLL;
          unint64_t v8 = 0x6974707972636E65;
          break;
        case 7:
          unint64_t v8 = 0x6B636F6C625F7369;
          unint64_t v7 = 0xEA00000000006465;
          break;
        case 8:
          unint64_t v8 = 0xD000000000000012;
          unint64_t v7 = 0x80000001005B8380;
          break;
        case 9:
          unint64_t v8 = 0x695F746E65726170;
          unint64_t v7 = 0xE900000000000064;
          break;
        case 0xA:
          unint64_t v8 = 0x5F74736575716572;
          unsigned int v9 = 1853189987;
LABEL_18:
          unint64_t v7 = v9 | 0xED00007400000000;
          break;
        case 0xB:
          unint64_t v8 = 0x7265696669726576;
          unint64_t v7 = 0xEE0065746174735FLL;
          break;
        case 0xC:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701869940;
          break;
        case 0xD:
          unint64_t v7 = 0x80000001005B83C0;
          unint64_t v8 = 0xD000000000000011;
          break;
        case 0xE:
          unint64_t v7 = 0xE300000000000000;
          unint64_t v8 = 7107189;
          break;
        case 0xF:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x746E6169726176;
          break;
        default:
          break;
      }
      unint64_t v10 = 0xEC00000074657366;
      switch(v6)
      {
        case 1:
          uint64_t v12 = 0x645F726568706963;
          uint64_t v13 = 0x7473656769;
          goto LABEL_46;
        case 2:
          unint64_t v10 = 0xEF657A69735F6465;
          if (v8 != 0x73736572706D6F63) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          unint64_t v10 = 0xEF64695F6573696DLL;
          if (v8 != 0x6F72705F61746164) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 4:
          unint64_t v10 = 0xE600000000000000;
          if (v8 != 0x747365676964) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 5:
          uint64_t v12 = 0x636F6C5F6B736964;
          uint64_t v13 = 0x6E6F697461;
LABEL_46:
          unint64_t v10 = v13 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          if (v8 != v12) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 6:
          unint64_t v10 = 0xEA00000000006E6FLL;
          if (v8 != 0x6974707972636E65) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 7:
          unint64_t v10 = 0xEA00000000006465;
          if (v8 != 0x6B636F6C625F7369) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 8:
          unint64_t v10 = 0x80000001005B8380;
          if (v8 != 0xD000000000000012) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 9:
          unint64_t v10 = 0xE900000000000064;
          if (v8 != 0x695F746E65726170) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 10:
          unint64_t v10 = 0xED0000746E756F63;
          if (v8 != 0x5F74736575716572) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 11:
          unint64_t v10 = 0xEE0065746174735FLL;
          if (v8 != 0x7265696669726576) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 12:
          unint64_t v10 = 0xE400000000000000;
          if (v8 != 1701869940) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 13:
          unint64_t v10 = 0x80000001005B83C0;
          if (v8 != 0xD000000000000011) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 14:
          unint64_t v10 = 0xE300000000000000;
          if (v8 != 7107189) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 15:
          unint64_t v10 = 0xE700000000000000;
          if (v8 != 0x746E6169726176) {
            goto LABEL_23;
          }
          goto LABEL_22;
        default:
          if (v8 != 0x666F5F7365747962) {
            goto LABEL_23;
          }
LABEL_22:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_23:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100453754(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x696669746E656469;
          unint64_t v8 = 0xEA00000000007265;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0xE700000000000000;
          uint64_t v7 = 0x6E6F6973726576;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE400000000000000;
            if (v7 != 1701869940) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v8 = 0xE400000000000000;
        uint64_t v7 = 1701869940;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x696669746E656469;
      }
      else {
        uint64_t v10 = 0x6E6F6973726576;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xEA00000000007265;
      }
      else {
        unint64_t v11 = 0xE700000000000000;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_1004538F0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xD000000000000019;
      unint64_t v8 = 0x80000001005B8020;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xD000000000000012;
          unint64_t v8 = 0x80000001005B8040;
          break;
        case 2:
          unint64_t v7 = 0xD000000000000016;
          unint64_t v8 = 0x80000001005B8060;
          break;
        case 3:
          unint64_t v7 = 0xD000000000000013;
          unint64_t v8 = 0x80000001005B8080;
          break;
        case 4:
          unint64_t v8 = 0x80000001005B80A0;
          unint64_t v7 = 0xD000000000000010;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xD000000000000019;
      unint64_t v10 = 0x80000001005B8020;
      switch(v6)
      {
        case 1:
          unint64_t v11 = 0xD000000000000012;
          char v12 = "distributor_priority_list";
          goto LABEL_11;
        case 2:
          unint64_t v11 = 0xD000000000000016;
          char v12 = "single_instance_id";
LABEL_11:
          unint64_t v10 = (unint64_t)v12 | 0x8000000000000000;
          if (v7 != v11) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 3:
          unint64_t v9 = 0xD000000000000013;
          unint64_t v10 = 0x80000001005B8080;
          goto LABEL_14;
        case 4:
          unint64_t v10 = 0x80000001005B80A0;
          if (v7 != 0xD000000000000010) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
LABEL_14:
          if (v7 != v9) {
            goto LABEL_16;
          }
LABEL_15:
          if (v8 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100453B38(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xED000064695F6D65;
      unint64_t v8 = 0x74695F656C707061;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x7475626972747461;
          unint64_t v7 = 0xEA00000000007365;
          break;
        case 2:
          unint64_t v8 = 0x615F70756B636162;
          unint64_t v7 = 0xEF617461645F7070;
          break;
        case 3:
          unint64_t v8 = 0x695F656C646E7562;
          unint64_t v7 = 0xE900000000000064;
          break;
        case 4:
          unint64_t v8 = 0x746172616C636564;
          unint64_t v7 = 0xEE0064695F6E6F69;
          break;
        case 5:
          unint64_t v8 = 0x746172616C636564;
          unint64_t v7 = 0xEF79656B5F6E6F69;
          break;
        case 6:
          unint64_t v8 = 0x5F6C6C6174736E69;
          unint64_t v7 = 0xEE00676E696D6974;
          break;
        case 7:
          unint64_t v8 = 0xD000000000000019;
          unint64_t v7 = 0x80000001005B80F0;
          break;
        case 8:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x65736E6563696CLL;
          break;
        case 9:
          unint64_t v7 = 0x80000001005B8120;
          unint64_t v8 = 0xD000000000000010;
          break;
        case 0xA:
          unint64_t v8 = 0x74736566696E616DLL;
          unint64_t v7 = 0xEC0000006C72755FLL;
          break;
        case 0xB:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701667182;
          break;
        case 0xC:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x616E6F73726570;
          break;
        case 0xD:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x6D726F6674616C70;
          break;
        case 0xE:
          unint64_t v8 = 0x6573616863727570;
          unint64_t v7 = 0xEF646F6874656D5FLL;
          break;
        case 0xF:
          unint64_t v8 = 0xD000000000000016;
          unint64_t v7 = 0x80000001005B8150;
          break;
        case 0x10:
          unint64_t v8 = 0x6E5F726F646E6576;
          unint64_t v7 = 0xEB00000000656D61;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xED000064695F6D65;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xEA00000000007365;
          if (v8 == 0x7475626972747461) {
            goto LABEL_22;
          }
          goto LABEL_23;
        case 2:
          unint64_t v9 = 0xEF617461645F7070;
          if (v8 != 0x615F70756B636162) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 3:
          unint64_t v9 = 0xE900000000000064;
          if (v8 != 0x695F656C646E7562) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 4:
          uint64_t v11 = 0x746172616C636564;
          uint64_t v12 = 0x64695F6E6F69;
          goto LABEL_36;
        case 5:
          unint64_t v9 = 0xEF79656B5F6E6F69;
          if (v8 != 0x746172616C636564) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 6:
          uint64_t v11 = 0x5F6C6C6174736E69;
          uint64_t v12 = 0x676E696D6974;
LABEL_36:
          unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v8 != v11) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 7:
          unint64_t v9 = 0x80000001005B80F0;
          if (v8 != 0xD000000000000019) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 8:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x65736E6563696CLL) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 9:
          unint64_t v9 = 0x80000001005B8120;
          if (v8 != 0xD000000000000010) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 10:
          unint64_t v9 = 0xEC0000006C72755FLL;
          if (v8 != 0x74736566696E616DLL) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 11:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1701667182) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 12:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x616E6F73726570) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 13:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x6D726F6674616C70) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 14:
          unint64_t v9 = 0xEF646F6874656D5FLL;
          if (v8 != 0x6573616863727570) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 15:
          unint64_t v9 = 0x80000001005B8150;
          if (v8 != 0xD000000000000016) {
            goto LABEL_23;
          }
          goto LABEL_22;
        case 16:
          unint64_t v9 = 0xEB00000000656D61;
          if (v8 != 0x6E5F726F646E6576) {
            goto LABEL_23;
          }
          goto LABEL_22;
        default:
          if (v8 != 0x74695F656C707061) {
            goto LABEL_23;
          }
LABEL_22:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_23:
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v10) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100454150(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x695F656C646E7562;
          unint64_t v8 = 0xE900000000000064;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v7 = 0x5F65736E6563696CLL;
          unint64_t v8 = 0xEA00000000006469;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xEF64695F63696C62;
            if (v7 != 0x75705F7465737361) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        uint64_t v7 = 0x75705F7465737361;
        unint64_t v8 = 0xEF64695F63696C62;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x695F656C646E7562;
      }
      else {
        uint64_t v10 = 0x5F65736E6563696CLL;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xE900000000000064;
      }
      else {
        unint64_t v11 = 0xEA00000000006469;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_10045431C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEA00000000006469;
      unint64_t v8 = 0x5F746E756F636361;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x726168735F707061;
          unint64_t v7 = 0xED00006C72755F65;
          break;
        case 2:
          unint64_t v8 = 0x695F656C646E7562;
          unint64_t v7 = 0xE900000000000064;
          break;
        case 3:
          unint64_t v8 = 0x765F656C646E7562;
          unint64_t v7 = 0xEE006E6F69737265;
          break;
        case 4:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x6C72755F706461;
          break;
        case 5:
          unint64_t v8 = 0xD00000000000001ALL;
          unint64_t v7 = 0x80000001005B73A0;
          break;
        case 6:
          unint64_t v7 = 0x80000001005B84F0;
          unint64_t v8 = 0xD000000000000014;
          break;
        case 7:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x64695F6D657469;
          break;
        case 8:
          unint64_t v8 = 0x5F6E6F6973726576;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x5F746E756F636361;
      unint64_t v10 = 0xEA00000000006469;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xED00006C72755F65;
          if (v8 == 0x726168735F707061) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 2:
          unint64_t v10 = 0xE900000000000064;
          if (v8 != 0x695F656C646E7562) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 3:
          unint64_t v10 = 0xEE006E6F69737265;
          if (v8 != 0x765F656C646E7562) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 4:
          unint64_t v10 = 0xE700000000000000;
          if (v8 != 0x6C72755F706461) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 5:
          unint64_t v10 = 0x80000001005B73A0;
          if (v8 != 0xD00000000000001ALL) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 6:
          unint64_t v10 = 0x80000001005B84F0;
          if (v8 != 0xD000000000000014) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 7:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v9 = 0x64695F6D657469;
          goto LABEL_26;
        case 8:
          if (v8 != 0x5F6E6F6973726576) {
            goto LABEL_28;
          }
          goto LABEL_27;
        default:
LABEL_26:
          if (v8 != v9) {
            goto LABEL_28;
          }
LABEL_27:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_28:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1004546A4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEE0064695F6E6F69;
      uint64_t v8 = 0x746172616C636564;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xEF79656B5F6E6F69;
          break;
        case 2:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x6574617473;
          break;
        case 3:
          uint64_t v8 = 0x735F657461647075;
          unint64_t v7 = 0xEC00000065746174;
          break;
        case 4:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x736E6F73616572;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x746172616C636564;
      unint64_t v10 = 0xEE0064695F6E6F69;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xEF79656B5F6E6F69;
          if (v8 == 0x746172616C636564) {
            goto LABEL_15;
          }
          goto LABEL_16;
        case 2:
          unint64_t v10 = 0xE500000000000000;
          if (v8 != 0x6574617473) {
            goto LABEL_16;
          }
          goto LABEL_15;
        case 3:
          uint64_t v9 = 0x735F657461647075;
          unint64_t v10 = 0xEC00000065746174;
          goto LABEL_14;
        case 4:
          unint64_t v10 = 0xE700000000000000;
          if (v8 != 0x736E6F73616572) {
            goto LABEL_16;
          }
          goto LABEL_15;
        default:
LABEL_14:
          if (v8 != v9) {
            goto LABEL_16;
          }
LABEL_15:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_16:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100454904(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEE0064695F726F74;
      unint64_t v8 = 0x7562697274736964;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x80000001005B8480;
          break;
        case 2:
          unint64_t v7 = 0x80000001005B84A0;
          goto LABEL_7;
        case 3:
          unint64_t v7 = 0x80000001005B84C0;
LABEL_7:
          unint64_t v8 = 0xD000000000000010;
          break;
        case 4:
          unint64_t v7 = 0xE300000000000000;
          unint64_t v8 = 7107189;
          break;
        default:
          break;
      }
      unint64_t v9 = 0x7562697274736964;
      unint64_t v10 = 0xEE0064695F726F74;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0x80000001005B8480;
          if (v8 == 0xD000000000000011) {
            goto LABEL_16;
          }
          goto LABEL_17;
        case 2:
          unint64_t v10 = 0x80000001005B84A0;
          if (v8 != 0xD000000000000010) {
            goto LABEL_17;
          }
          goto LABEL_16;
        case 3:
          unint64_t v10 = 0x80000001005B84C0;
          unint64_t v9 = 0xD000000000000010;
          goto LABEL_15;
        case 4:
          unint64_t v10 = 0xE300000000000000;
          if (v8 != 7107189) {
            goto LABEL_17;
          }
          goto LABEL_16;
        default:
LABEL_15:
          if (v8 != v9) {
            goto LABEL_17;
          }
LABEL_16:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_17:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100454B64(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0xE300000000000000;
          uint64_t v8 = 7565161;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = 0x6F7674656C707061;
          unint64_t v7 = 0xE900000000000073;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE300000000000000;
            if (v8 != 7893871) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v7 = 0xE300000000000000;
        uint64_t v8 = 7893871;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 7565161;
      }
      else {
        uint64_t v10 = 0x6F7674656C707061;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xE300000000000000;
      }
      else {
        unint64_t v11 = 0xE900000000000073;
      }
      if (v8 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_100454CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100454E68(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE300000000000000;
      uint64_t v8 = 6513005;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0x5F6F725064617069;
          unint64_t v7 = 0xEC00000038313032;
          break;
        case 2:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x6F725064617069;
          break;
        case 3:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x31315F64617069;
          break;
        case 4:
          uint64_t v8 = 0x5F30315F64617069;
          unint64_t v7 = 0xE900000000000035;
          break;
        case 5:
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 1684107369;
          break;
        case 6:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x656E6F687069;
          break;
        case 7:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x35656E6F687069;
          break;
        case 8:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x36656E6F687069;
          break;
        case 9:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x2B36656E6F687069;
          break;
        case 0xA:
          unint64_t v7 = 0xEA0000000000385FLL;
          uint64_t v8 = 0x355F656E6F687069;
          break;
        case 0xB:
          unint64_t v7 = 0xEA0000000000355FLL;
          uint64_t v8 = 0x365F656E6F687069;
          break;
        case 0xC:
          uint64_t v8 = 0x645F656E6F687069;
          unint64_t v7 = 0xEA00000000003337;
          break;
        case 0xD:
          unint64_t v7 = 0xEA00000000003437;
          uint64_t v8 = 0x645F656E6F687069;
          break;
        case 0xE:
          uint64_t v8 = 0x746157656C707061;
          unint64_t v7 = 0xEA00000000006863;
          break;
        case 0xF:
          uint64_t v8 = 0x746157656C707061;
          unint64_t v7 = 0xEF383130325F6863;
          break;
        case 0x10:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x5654656C707061;
          break;
        case 0x11:
          uint64_t v8 = 0x746157656C707061;
          unint64_t v7 = 0xEF313230325F6863;
          break;
        case 0x12:
          uint64_t v8 = 0x746157656C707061;
          unint64_t v7 = 0xEF323230325F6863;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE300000000000000;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xEC00000038313032;
          if (v8 == 0x5F6F725064617069) {
            goto LABEL_24;
          }
          goto LABEL_25;
        case 2:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x6F725064617069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 3:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x31315F64617069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 4:
          unint64_t v9 = 0xE900000000000035;
          if (v8 != 0x5F30315F64617069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 5:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1684107369) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 6:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 7:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x35656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 8:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x36656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 9:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x2B36656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 10:
          unint64_t v9 = 0xEA0000000000385FLL;
          if (v8 != 0x355F656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 11:
          unint64_t v9 = 0xEA0000000000355FLL;
          if (v8 != 0x365F656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 12:
          uint64_t v11 = 0x645F656E6F687069;
          uint64_t v12 = 13111;
          goto LABEL_54;
        case 13:
          unint64_t v9 = 0xEA00000000003437;
          if (v8 != 0x645F656E6F687069) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 14:
          uint64_t v11 = 0x746157656C707061;
          uint64_t v12 = 26723;
LABEL_54:
          unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
          if (v8 != v11) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 15:
          unint64_t v9 = 0xEF383130325F6863;
          if (v8 != 0x746157656C707061) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 16:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x5654656C707061) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 17:
          unint64_t v9 = 0xEF313230325F6863;
          if (v8 != 0x746157656C707061) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 18:
          unint64_t v9 = 0xEF323230325F6863;
          if (v8 != 0x746157656C707061) {
            goto LABEL_25;
          }
          goto LABEL_24;
        default:
          if (v8 != 6513005) {
            goto LABEL_25;
          }
LABEL_24:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_25:
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v10) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100455488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t i = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v8 = *(void *)(v4 + 48) + 24 * i;
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 16);
    sub_1001C3ED0(*(void *)v8, v10, v11);
    char v12 = static StoreAppIdentifier.== infix(_:_:)();
    sub_1001C3EC0(v9, v10, v11);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = ~v6;
      for (unint64_t i = (i + 1) & v13; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
      {
        uint64_t v14 = *(void *)(v4 + 48) + 24 * i;
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)(v14 + 8);
        char v17 = *(unsigned char *)(v14 + 16);
        sub_1001C3ED0(*(void *)v14, v16, v17);
        char v18 = static StoreAppIdentifier.== infix(_:_:)();
        sub_1001C3EC0(v15, v16, v17);
        if (v18) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100455608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1004556A4(__n128 *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    sub_1002F9F4C(a1, &v19);
    do
    {
      uint64_t v9 = (uint64_t *)(v8 + 40 * v5);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v12 = v9[3];
      uint64_t v13 = v9[4];
      if (v9[2])
      {
        sub_1002F9F4C(&v19, &v20);
        if ((v21 & 1) == 0) {
          goto LABEL_3;
        }
        unint64_t v15 = v20.n128_u64[1];
        unint64_t v14 = v20.n128_u64[0];
      }
      else
      {
        sub_1002F9F4C(&v19, &v22);
        if (v23) {
          goto LABEL_3;
        }
        unint64_t v15 = v22.n128_u64[1];
        unint64_t v14 = v22.n128_u64[0];
      }
      BOOL v16 = v10 == v14 && v11 == v15;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v17 = v12 == a1[1].n128_u64[1] && v13 == a1[2].n128_u64[0];
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return v5;
        }
      }
LABEL_3:
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1004557E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_100458EB8(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if ((static UUID.== infix(_:_:)() & 1) != 0
        && (static URL.== infix(_:_:)() & 1) != 0
        && *(void *)&v8[*(int *)(v5 + 24)] == *(void *)(a1 + *(int *)(v5 + 24)))
      {
        break;
      }
      sub_100458F1C((uint64_t)v8);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_100458F1C((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_100455950(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v27 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v24 = ~v3;
    uint64_t v25 = *(void *)(v2 + 48);
    uint64_t v30 = a1[1];
    uint64_t v31 = *a1;
    do
    {
      uint64_t v6 = v25 + 104 * v4;
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v9 = *(void *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 40);
      uint64_t v11 = *(void *)(v6 + 48);
      char v12 = *(unsigned char *)(v6 + 56);
      uint64_t v14 = *(void *)(v6 + 64);
      uint64_t v13 = *(void *)(v6 + 72);
      uint64_t v28 = *(void *)(v6 + 80);
      uint64_t v29 = *(void *)(v6 + 88);
      int v26 = *(unsigned __int8 *)(v6 + 96);
      BOOL v15 = *(void *)v6 == v31 && *(void *)(v6 + 8) == v30;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_4;
      }
      BOOL v16 = v8 == a1[2] && v7 == a1[3];
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_4;
      }
      BOOL v17 = v9 == a1[4] && v10 == a1[5];
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_4;
      }
      char v18 = *((unsigned char *)a1 + 56);
      if (v12)
      {
        if (!*((unsigned char *)a1 + 56)) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v11 != a1[6]) {
          char v18 = 1;
        }
        if (v18) {
          goto LABEL_4;
        }
      }
      uint64_t v19 = a1[9];
      if (v13)
      {
        if (!v19) {
          goto LABEL_4;
        }
        BOOL v20 = v14 == a1[8] && v13 == v19;
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_4;
        }
      }
      else if (v19)
      {
        goto LABEL_4;
      }
      uint64_t v21 = a1[11];
      if (v29)
      {
        if (v21)
        {
          BOOL v22 = v28 == a1[10] && v29 == v21;
          if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_3:
            if (v26 == (a1[12] & 1)) {
              return v4;
            }
          }
        }
      }
      else if (!v21)
      {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v24;
    }
    while (((*(void *)(v27 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100455B6C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    BOOL v9 = a2 == 2 && a1 == 0;
    while (1)
    {
      uint64_t v10 = *(void *)(v3 + 48) + 16 * result;
      uint64_t v11 = *(void *)v10;
      int v12 = *(unsigned __int8 *)(v10 + 8);
      if (!v12) {
        break;
      }
      if (v12 != 1)
      {
        if (v9) {
          return result;
        }
        goto LABEL_9;
      }
      if (a2 == 1) {
        goto LABEL_15;
      }
LABEL_9:
      unint64_t result = (result + 1) & v7;
      if (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    if (a2) {
      goto LABEL_9;
    }
LABEL_15:
    if (v11 == a1) {
      return result;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100455C1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456170(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455C3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004562DC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455C5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100458038(a1, a2, a3, (void *)*v3, &qword_100663AB0, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455C98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456448(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455CB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004565D0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455CD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456740(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455CF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456DC4(a1, a2, a3, *v3, &qword_100663C00);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455D20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, &qword_100663C08);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455D48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10045709C(a1, a2, a3, *v3, &qword_100663DB0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455D78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100458038(a1, a2, a3, (void *)*v3, &qword_100663D58, (uint64_t (*)(void))&type metadata accessor for ManagedApp.Artwork);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455DB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100458038(a1, a2, a3, (void *)*v3, &qword_100663D68, (uint64_t (*)(void))&type metadata accessor for Locale.Language);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455DF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, &qword_100663C28);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455E18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004568CC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455E38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456A90(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455E58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456C38(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455E78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456DC4(a1, a2, a3, *v3, &qword_10065E620);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455EA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100456F20(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455EC0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, (uint64_t *)&unk_100663CF0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455EE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10045709C(a1, a2, a3, *v3, &qword_100663DC8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455F18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, (uint64_t *)&unk_100663BF0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455F40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, &qword_100663C60);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455F68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10045720C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455F88(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457398(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100455FA8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, &qword_100663C78);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455FD0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457540(a1, a2, a3, *v3, &qword_100663E38);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100455FF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004579A0(a1, a2, a3, (void *)*v3, qword_10065EA68, &qword_100663D90);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100456028(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10045768C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100456048(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457818(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100456068(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004579A0(a1, a2, a3, (void *)*v3, &qword_10065E6C8, (uint64_t *)&unk_100663D80);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100456098(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457BE0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1004560B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457D4C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1004560D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100457EB8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1004560F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100458038(a1, a2, a3, (void *)*v3, &qword_100663DC0, type metadata accessor for MediaAPIUpdates.App);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100456134(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100458038(a1, a2, a3, (void *)*v3, &qword_100663C10, (uint64_t (*)(void))type metadata accessor for RegisteredXPCClient);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100456170(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_10065D360);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004562DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8((uint64_t *)&unk_100663B20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456448(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663CA0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[104 * v8] || v12 >= &v13[104 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004565D0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_10065E578);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456740(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663CC8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1000172F8(&qword_10065C4D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004568CC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8((uint64_t *)&unk_100663BE0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1000172F8(&qword_10065C038);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456A70(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100458038(a1, a2, a3, a4, &qword_100663CC0, (uint64_t (*)(void))&type metadata accessor for ApprovedDeveloper);
}

uint64_t sub_100456A90(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663B98);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_1000172F8(&qword_100663BA0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456C38(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663D48);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_1000172F8(&qword_100663D50);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456DC4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000172F8(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  BOOL v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100456F20(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663D10);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10045709C(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000172F8(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v14 = v11 + 32;
  BOOL v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10045720C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663BC0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_1000172F8(&qword_100663BC8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457398(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663BD0);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 88 * v8) {
      memmove(v10 + 4, a4 + 4, 88 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 88 * v8 || v12 >= v13 + 88 * v8)
  {
    sub_1000172F8(&qword_100663BD8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457540(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  int64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = v8;
  }
  if (v10)
  {
    sub_1000172F8(a5);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10045768C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8((uint64_t *)&unk_100663E50);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457818(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8((uint64_t *)&unk_100663D70);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for AMSMediaTaskPlatform(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004579A0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    BOOL v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000172F8(a5);
  uint64_t v13 = *(void *)(sub_1000172F8(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  BOOL v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_1000172F8(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  BOOL v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457BE0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663AE8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457D4C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663AE0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100457EB8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000172F8(&qword_100663D18);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 104 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100458038(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    BOOL v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000172F8(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  BOOL v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  BOOL v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100458284(char a1, Swift::String_optional _)
{
  return sub_100451708(a1, _);
}

uint64_t sub_10045828C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100458314(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_100458340()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();

  return sub_100458314(v0);
}

unint64_t sub_1004583AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000172F8(&qword_100663DE0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 48)
    {
      sub_100017238(i, (uint64_t)&v11, &qword_100663DE8);
      uint64_t v5 = v11;
      unint64_t result = sub_10045257C(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = sub_10018B164(&v12, v3[7] + 40 * result);
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1004584BC(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_100663E10);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_1000172F8(&qword_100663E18);
    char v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_100017238(v9, (uint64_t)v5, &qword_100663E10);
      uint64_t v11 = *v5;
      unint64_t result = sub_10045257C(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for AppInstallScheduler.ParkReason();
      unint64_t result = sub_100458F78(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100458680(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v4 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v4 + 8 * v10);
        if (!v18)
        {
          int64_t v10 = v17 + 3;
          if (v17 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v4 + 8 * v10);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    char v13 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(unsigned __int8 *)(*(void *)(a1 + 48) + v12);
    swift_bridgeObjectRetain();
    a2(v16, v14, v15);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v8) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100458810(id *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);

  *a1 = v3;
  return v3;
}

uint64_t sub_100458854()
{
  _Block_release(*(const void **)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004588B4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = v0[5];
  unint64_t v7 = (const void *)v0[6];
  uint64_t v6 = (void *)v0[7];
  int64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *int64_t v8 = v1;
  v8[1] = sub_10000B238;
  uint64_t v9 = (uint64_t (*)(void *, void *, void *, uint64_t, const void *, void *))((char *)&dword_100663B40
                                                                                     + dword_100663B40);
  return v9(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_100458990()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004589C8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000B238;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100663B70 + dword_100663B70);
  return v6(a1, v4);
}

void sub_100458A80(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (csr_check() || ![self ignoreServerTrustEvaluation])
  {
    int64_t v19 = *(void (**)(uint64_t, uint64_t, void))(a4 + 16);
    v19(a4, 1, 0);
  }
  else
  {
    id v44 = [a2 protectionSpace];
    id v12 = [v44 authenticationMethod];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0) {
        goto LABEL_16;
      }
    }
    id v20 = [v44 serverTrust];
    if (!v20)
    {
LABEL_16:
      (*(void (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 1, 0);
      id v38 = v44;

      return;
    }
    uint64_t v21 = v20;
    static Logger.general.getter();
    id v22 = a3;
    id v23 = a1;
    uint64_t v24 = v22;
    id v25 = v23;
    int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      int v42 = v28;
      uint64_t v30 = v29;
      uint64_t v31 = swift_slowAlloc();
      id v41 = v26;
      unint64_t v32 = (void *)v31;
      *(_DWORD *)uint64_t v30 = 138412546;
      os_log_type_t v43 = v21;
      unint64_t v33 = *(Class *)((char *)&v24->isa
                     + OBJC_IVAR____TtC28ManagedAppDistributionDaemonP33_7C6A6A5846008938E730A14DB607337C18SecureTaskDelegate_logKey);
      v40[0] = v30 + 12;
      v40[1] = v30 + 4;
      id v45 = v33;
      v40[2] = &v46;
      id v34 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v32 = v33;

      *(_WORD *)(v30 + 12) = 2114;
      id v45 = v25;
      id v35 = v25;
      uint64_t v21 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v36 = v32;
      uint64_t v37 = v41;
      v36[1] = v25;

      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v42, "[%@] Ignoring server trust for task: %{public}@", (uint8_t *)v30, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v37 = v24;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v39 = [objc_allocWithZone((Class)NSURLCredential) initWithTrust:v21];
    (*(void (**)(uint64_t, void, id))(a4 + 16))(a4, 0, v39);
  }
}

uint64_t sub_100458EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100458F1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100458F78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for HTTPError()
{
  return &type metadata for HTTPError;
}

uint64_t destroy for PlainHTTP.Body(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return swift_bridgeObjectRelease();
  }
  else {
    return sub_100014524(a1);
  }
}

uint64_t initializeWithCopy for PlainHTTP.Body(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(void *)a1 = *(void *)a2;
    swift_bridgeObjectRetain();
    char v4 = 1;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for PlainHTTP.Body(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      sub_100014524(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for PlainHTTP.Body(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_bridgeObjectRelease();
    }
    else {
      sub_100014524(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainHTTP.Body(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PlainHTTP.Body(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1004592AC(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_1004592C8(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlainHTTP.Body()
{
  return &type metadata for PlainHTTP.Body;
}

uint64_t sub_100459304(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      uint64_t v12 = v8;
      char v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v10 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_100459428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v7 = sub_1000172F8(&qword_100664048);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v36 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  uint64_t v38 = a3;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v12, v24 + *(void *)(*(void *)(v25 - 8) + 72) * i, v25);
    int v26 = (uint64_t *)(*(void *)(a1 + 56) + 16 * i);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = &v12[*(int *)(v7 + 48)];
    *(void *)uint64_t v29 = v27;
    *((void *)v29 + 1) = v28;
    sub_10001733C((uint64_t)v12, (uint64_t)v10, &qword_100664048);
    uint64_t v30 = &v10[*(int *)(v7 + 48)];
    BOOL v31 = *(void *)v30 == a2 && *((void *)v30 + 1) == v38;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v32 = v35;
      sub_10001733C((uint64_t)v10, v35, &qword_100664048);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v7);
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t result = sub_10001729C((uint64_t)v10, &qword_100664048);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v21 >= v37) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v37) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v36 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v37) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v36 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v37) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v36 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v37)
    {
LABEL_28:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v35, 1, 1, v7);
      return swift_bridgeObjectRelease();
    }
    unint64_t v22 = *(void *)(v36 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_31;
      }
      if (j >= v37) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v36 + 8 * j);
    }
LABEL_19:
    unint64_t v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100459784(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_1004597B8(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_100459904, v1, 0);
}

uint64_t sub_100459904()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v0[9] + 112);
  v0[17] = v2;
  uint64_t v3 = swift_task_alloc();
  v0[18] = v3;
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_task_alloc();
  v0[19] = v4;
  *(void *)(v4 + 16) = sub_100475700;
  *(void *)(v4 + 24) = v3;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660808 + dword_100660808);
  swift_retain();
  unsigned int v5 = (void *)swift_task_alloc();
  v0[20] = v5;
  void *v5 = v0;
  v5[1] = sub_100459A18;
  return v7((uint64_t)sub_100475708, v4, v2);
}

uint64_t sub_100459A18(uint64_t a1, char a2)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3;
  *(void *)(*v3 + 168) = a1;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v6 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = *(void *)(v5 + 72);
    *(unsigned char *)(v5 + 176) = a2;
    swift_task_dealloc();
    swift_task_dealloc();
    return _swift_task_switch(sub_100459BF8, v9, 0);
  }
}

uint64_t sub_100459BF8()
{
  uint64_t v26 = v0;
  if (*(unsigned char *)(v0 + 176))
  {
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    static Logger.install.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 80);
    uint64_t v17 = *(void *)(v0 + 88);
    if (v12)
    {
      uint64_t v24 = *(void *)(v0 + 104);
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136315138;
      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1000143F4(v20, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cancellation failed, install \"%s\" not found", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v24);
    }
    else
    {
      (*(void (**)(void, void))(v17 + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v16);
    }
  }
  else
  {
    sub_10046041C(*(void *)(v0 + 168), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 128);
      uint64_t v3 = *sub_10018AC60((void *)(v0 + 16), v1);
      uint64_t v4 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
      uint64_t v5 = (void *)swift_allocObject();
      v5[2] = 0;
      v5[3] = 0;
      v5[4] = v3;
      swift_retain();
      sub_100017544(v2, (uint64_t)&unk_100664078, (uint64_t)v5);
      swift_release();
      sub_100014524(v0 + 16);
    }
    else
    {
      sub_10001729C(v0 + 16, &qword_10065F220);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100459F58(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v7[3] = a6;
  v7[4] = v6;
  v7[2] = a5;
  type metadata accessor for AppInstallTemplate();
  v7[5] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v7[6] = v12;
  v7[7] = *(void *)(v12 - 8);
  uint64_t v13 = swift_task_alloc();
  v7[8] = v13;
  uint64_t v16 = (void *)swift_task_alloc();
  v7[9] = v16;
  *uint64_t v16 = v7;
  v16[1] = sub_10045A0B0;
  return sub_10045C3C8(v13, a1, a2, v14, v15, a3, a4);
}

uint64_t sub_10045A0B0()
{
  uint64_t v2 = (void *)*v1;
  v2[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10045A5A0, 0, 0);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(v2[2] + *(int *)v2[2]);
    uint64_t v3 = (void *)swift_task_alloc();
    v2[11] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10045A26C;
    uint64_t v4 = v2[8];
    uint64_t v5 = v2[5];
    return v7(v5, v4);
  }
}

uint64_t sub_10045A26C()
{
  uint64_t v2 = (void *)*v1;
  v2[12] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10045A724, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[13] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_10045A3DC;
    uint64_t v4 = v2[5];
    return sub_10045E0BC(v4);
  }
}

uint64_t sub_10045A3DC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10045A748;
  }
  else {
    uint64_t v2 = sub_10045A4F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045A4F0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  sub_1004758D4(v0[5], (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045A5A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10045A610()
{
  sub_10045DD84(*(void *)(v0 + 64));
  return _swift_task_switch(sub_10045A67C, 0, 0);
}

uint64_t sub_10045A67C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10045A724()
{
  v0[15] = v0[12];
  return _swift_task_switch(sub_10045A610, v0[4], 0);
}

uint64_t sub_10045A748()
{
  sub_1004758D4(v0[5], (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  v0[15] = v0[14];
  uint64_t v1 = v0[4];
  return _swift_task_switch(sub_10045A610, v1, 0);
}

uint64_t sub_10045A7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v8 = type metadata accessor for Logger();
  v4[11] = v8;
  v4[12] = *(void *)(v8 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[14] = v9;
  void *v9 = v4;
  v9[1] = sub_10045A910;
  return sub_10045FC08(a1, a2, a3);
}

uint64_t sub_10045A910(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  if (v1) {
    uint64_t v6 = sub_10045AE30;
  }
  else {
    uint64_t v6 = sub_10045AA70;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10045AA70()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1
    && (*(void *)(v0 + 48) = 0,
        unsigned int v2 = [v1 pauseWithError:v0 + 48],
        v1,
        id v3 = *(id *)(v0 + 48),
        !v2))
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.install.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);
    unint64_t v12 = *(void *)(v0 + 72);
    if (v8)
    {
      uint64_t v19 = *(void *)(v0 + 64);
      uint64_t v22 = *(void *)(v0 + 104);
      uint64_t v13 = *(void *)(v0 + 56);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      uint64_t v21 = v11;
      *(void *)(v0 + 16) = v13;
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1000143F4(v15, v16, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_1000143F4(v19, v12, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 22) = 2114;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error pausing coordinator for %s from %{public}s: %{public}@", (uint8_t *)v14, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v21);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_10045AE30()
{
  uint64_t v20 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[13];
    unint64_t v3 = v0[9];
    uint64_t v14 = v0[8];
    uint64_t v4 = v0[7];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    v0[2] = v4;
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1000143F4(v6, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[4] = sub_1000143F4(v14, v3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 22) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error pausing coordinator for %s from %{public}s: %{public}@", (uint8_t *)v5, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  else
  {
    uint64_t v10 = v0[12];
    uint64_t v9 = v0[13];
    uint64_t v11 = v0[11];
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_willThrow();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10045B178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v8 = type metadata accessor for Logger();
  v4[11] = v8;
  v4[12] = *(void *)(v8 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v4[14] = v9;
  void *v9 = v4;
  v9[1] = sub_10045B2BC;
  return sub_10045FC08(a1, a2, a3);
}

uint64_t sub_10045B2BC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  if (v1) {
    uint64_t v6 = sub_10045B7DC;
  }
  else {
    uint64_t v6 = sub_10045B41C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10045B41C()
{
  uint64_t v24 = v0;
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1
    && (*(void *)(v0 + 48) = 0,
        unsigned int v2 = [v1 resumeWithError:v0 + 48],
        v1,
        id v3 = *(id *)(v0 + 48),
        !v2))
  {
    uint64_t v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.install.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);
    unint64_t v12 = *(void *)(v0 + 72);
    if (v8)
    {
      uint64_t v19 = *(void *)(v0 + 64);
      uint64_t v22 = *(void *)(v0 + 104);
      uint64_t v13 = *(void *)(v0 + 56);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      uint64_t v21 = v11;
      *(void *)(v0 + 16) = v13;
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 24) = sub_1000143F4(v15, v16, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_1000143F4(v19, v12, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 22) = 2114;
      swift_errorRetain();
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error resuming coordinator for %s from %{public}s: %{public}@", (uint8_t *)v14, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v21);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_10045B7DC()
{
  uint64_t v20 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[13];
    unint64_t v3 = v0[9];
    uint64_t v14 = v0[8];
    uint64_t v4 = v0[7];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    v0[2] = v4;
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1000143F4(v6, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[4] = sub_1000143F4(v14, v3, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 22) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[5] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error resuming coordinator for %s from %{public}s: %{public}@", (uint8_t *)v5, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  }
  else
  {
    uint64_t v10 = v0[12];
    uint64_t v9 = v0[13];
    uint64_t v11 = v0[11];
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_willThrow();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10045BB24(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100664030);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DownloadRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6 - 8);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *v1;
  uint64_t v12 = *(void *)(*v1 + 16);
  if (v12)
  {
    unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    do
    {
      if (*(void *)(v11 + v13) == *a1) {
        return result;
      }
      v13 += *(void *)(v7 + 72);
      --v12;
    }
    while (v12);
    __chkstk_darwin(result);
    *(void *)&v23[-16] = a1;
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_10045BEA8((uint64_t (*)(uint64_t))sub_100475614, (uint64_t)&v23[-32], v11);
    char v16 = v15;
    uint64_t result = swift_bridgeObjectRelease();
    if (v16)
    {
      sub_100473CD0((uint64_t)a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v19 = 0;
      int64_t v20 = 0;
      return sub_100553150(v19, v20, (uint64_t)v5);
    }
    BOOL v17 = __OFADD__(v14, 1);
    uint64_t v18 = v14 + 1;
    if (v17)
    {
      __break(1u);
    }
    else if (*(void *)(*v1 + 16) >= v18)
    {
      if ((v18 & 0x8000000000000000) == 0)
      {
        sub_100473CD0((uint64_t)a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v19 = v18;
        int64_t v20 = v18;
        return sub_100553150(v19, v20, (uint64_t)v5);
      }
      goto LABEL_20;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  sub_100473CD0((uint64_t)a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_100290DB0(0, 1, 1, v11);
  }
  unint64_t v22 = *(void *)(v11 + 16);
  unint64_t v21 = *(void *)(v11 + 24);
  if (v22 >= v21 >> 1) {
    uint64_t v11 = sub_100290DB0(v21 > 1, v22 + 1, 1, v11);
  }
  *(void *)(v11 + 16) = v22 + 1;
  uint64_t result = sub_100474DE4((uint64_t)v10, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v22, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  *uint64_t v1 = v11;
  return result;
}

BOOL sub_10045BDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for DownloadRequest() + 44);
  uint64_t v5 = *(unsigned __int8 *)(a2 + v4);
  unsigned int v6 = *(unsigned __int8 *)(a1 + v4);
  BOOL result = 1;
  switch(v5)
  {
    case 1:
      BOOL result = v6 != 0;
      break;
    case 2:
      BOOL result = v6 > 1;
      break;
    case 3:
      BOOL result = v6 > 2;
      break;
    case 4:
      BOOL result = v6 == 4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10045BEA8(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(type metadata accessor for DownloadRequest() - 8);
    uint64_t v8 = *(void *)(v7 + 72);
    --v4;
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v8 * v4;
    uint64_t v10 = -v8;
    while (1)
    {
      char v11 = a1(v9);
      if (v3 || (v11 & 1) != 0) {
        break;
      }
      --v4;
      v9 += v10;
      if (v4 == -1) {
        return 0;
      }
    }
  }
  return v4;
}

void *sub_10045BFA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DownloadRequest();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100663F90);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v12(a2, 1, 1, v5);
  unint64_t v13 = *(void *)(*(void *)v2 + 16);
  if (!v13) {
    return (void *)sub_10045BB24(a1);
  }
  unint64_t v14 = 0;
  BOOL result = (void *)(*(void *)v2
                    + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
  while (*result != *a1)
  {
    ++v14;
    BOOL result = (void *)((char *)result + *(void *)(v6 + 72));
    if (v13 == v14) {
      return (void *)sub_10045BB24(a1);
    }
  }
  if (v14 < v13)
  {
    sub_100473CD0((uint64_t)result, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    sub_10001729C(a2, &qword_100663F90);
    v12((uint64_t)v11, 0, 1, v5);
    sub_10001733C((uint64_t)v11, a2, &qword_100663F90);
    sub_10054ED7C(v14, (uint64_t)v8);
    sub_1004758D4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    return (void *)sub_10045BB24(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10045C1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1004764D8((unint64_t *)&unk_100660E70, 255, (void (*)(uint64_t))&type metadata accessor for UUID), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    unint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1004764D8((unint64_t *)&unk_100663C40, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10045C3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v8 + 168) = a6;
  *(void *)(v8 + 176) = v7;
  *(unsigned char *)(v8 + 384) = a7;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  *(void *)(v8 + 144) = a1;
  sub_1000172F8(&qword_10065C9B0);
  *(void *)(v8 + 184) = swift_task_alloc();
  *(void *)(v8 + 192) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 200) = v9;
  *(void *)(v8 + 208) = *(void *)(v9 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  sub_1000172F8(&qword_100664040);
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 248) = sub_1000172F8(&qword_100663DF0);
  *(void *)(v8 + 256) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 264) = v10;
  *(void *)(v8 + 272) = *(void *)(v10 - 8);
  *(void *)(v8 + 280) = swift_task_alloc();
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_10045C630, v7, 0);
}

uint64_t sub_10045C630()
{
  uint64_t v53 = v0;
  unint64_t v1 = v0[20];
  if (v1)
  {
    uint64_t v2 = v0[30];
    uint64_t v3 = v0[19];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_100459428(v4, v3, v1, v2);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000172F8(&qword_100664048);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v2, 1, v5) == 1)
    {
      uint64_t v6 = v0[22];
      uint64_t v7 = v0[19];
      sub_10001729C(v0[30], &qword_100664040);
      uint64_t v8 = *(void *)(v6 + 112);
      v0[42] = v8;
      uint64_t v9 = swift_task_alloc();
      v0[43] = v9;
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = v1;
      uint64_t v10 = swift_task_alloc();
      v0[44] = v10;
      *(void *)(v10 + 16) = sub_100475698;
      *(void *)(v10 + 24) = v9;
      uint64_t v11 = dword_100660748;
      swift_retain();
      uint64_t v12 = (void *)swift_task_alloc();
      v0[45] = v12;
      *uint64_t v12 = v0;
      v12[1] = sub_10045CE64;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660748 + v11))((uint64_t)sub_1004756A0, v10, v8);
    }
    uint64_t v48 = v0[41];
    uint64_t v50 = v0[40];
    uint64_t v21 = v0[33];
    uint64_t v22 = v0[34];
    uint64_t v23 = v0[32];
    uint64_t v24 = (uint64_t *)(v0[30] + *(int *)(v5 + 48));
    uint64_t v25 = *v24;
    uint64_t v45 = v24[1];
    uint64_t v26 = (void *)(v23 + *(int *)(v0[31] + 48));
    uint64_t v27 = *(void (**)(uint64_t))(v22 + 32);
    v27(v23);
    *uint64_t v26 = v25;
    v26[1] = v45;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v48, v23, v21);
    static Logger.install.getter();
    uint64_t v28 = v50;
    unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    v51(v28, v48, v21);
    swift_bridgeObjectRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    log = v29;
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v46 = v0[40];
    uint64_t v32 = v0[33];
    uint64_t v33 = v0[34];
    uint64_t v34 = v0[29];
    uint64_t v35 = v0[26];
    uint64_t v49 = v0[25];
    if (v31)
    {
      uint64_t v44 = v0[29];
      uint64_t v36 = v0[19];
      uint64_t v37 = swift_slowAlloc();
      v52[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136446466;
      swift_bridgeObjectRetain();
      v0[16] = sub_1000143F4(v36, v1, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v37 + 12) = 2082;
      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[17] = sub_1000143F4(v38, v39, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v40(v46, v32);
      _os_log_impl((void *)&_mh_execute_header, log, v30, "Found existing requested installation for \"%{public}s\": %{public}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v44, v49);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v40(v46, v32);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v49);
    }
    uint64_t v41 = v0[41];
    uint64_t v42 = v0[33];
    type metadata accessor for InternalError();
    sub_1004764D8((unint64_t *)&qword_10065D340, 255, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    v51(v43, v41, v42);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    v40(v41, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v20 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v15 = v0[34];
    uint64_t v14 = v0[35];
    uint64_t v16 = v0[33];
    uint64_t v17 = v0[22];
    uint64_t v18 = *(void (**)(uint64_t, void, uint64_t))(v15 + 16);
    v18(v14, v0[21], v16);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = *(void *)(v17 + 160);
    *(void *)(v17 + 160) = 0x8000000000000000;
    sub_100529CC0(0xD000000000000016, 0x80000001005BF3C0, v14, isUniquelyReferenced_nonNull_native);
    *(void *)(v17 + 160) = v52[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_endAccess();
    v18(v0[18], v0[21], v0[33]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int64_t v20 = (uint64_t (*)(void))v0[1];
  }
  return v20();
}

uint64_t sub_10045CE64(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 368) = a1;
  *(void *)(v4 + 376) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 176);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1) {
    uint64_t v6 = sub_10045DC30;
  }
  else {
    uint64_t v6 = sub_10045D020;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10045D020()
{
  uint64_t v77 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 192);
  if (!v1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v3 + 56))(*(void *)(v0 + 192), 1, 1, *(void *)(v0 + 264));
    goto LABEL_6;
  }
  swift_retain();
  sub_100311ADC(15, v1, v4);
  swift_release();
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v5(v4, 1, v2) == 1)
  {
LABEL_6:
    sub_10001729C(*(void *)(v0 + 192), &qword_10065C9B0);
    goto LABEL_7;
  }
  uint64_t v6 = *(void (**)(void, void, uint64_t))(*(void *)(v0 + 272) + 32);
  v6(*(void *)(v0 + 312), *(void *)(v0 + 192), *(void *)(v0 + 264));
  swift_retain();
  char v7 = sub_100311B1C(25, v1);
  swift_release();
  uint64_t v8 = *(void *)(v0 + 312);
  if (v7 == 8)
  {
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 272) + 8))(v8, *(void *)(v0 + 264));
LABEL_7:
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v9 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 160);
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t))(v10 + 16);
    v15(v9, *(void *)(v0 + 168), v11);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = *(void *)(v12 + 160);
    *(void *)(v12 + 160) = 0x8000000000000000;
    sub_100529CC0(v14, v13, v9, isUniquelyReferenced_nonNull_native);
    *(void *)(v12 + 160) = v76[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_endAccess();
    swift_release();
    v15(*(void *)(v0 + 144), *(void *)(v0 + 168), *(void *)(v0 + 264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_8;
  }
  uint64_t v68 = v5;
  char v69 = v7;
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 272);
  static Logger.install.getter();
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v75(v19, v8, v21);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 272);
  uint64_t v70 = *(void *)(v0 + 264);
  uint64_t v71 = *(void *)(v0 + 304);
  uint64_t v26 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 208);
  uint64_t v73 = *(void *)(v0 + 200);
  unint64_t v28 = *(void *)(v0 + 160);
  if (v24)
  {
    os_log_type_t type = v23;
    uint64_t v29 = *(void *)(v0 + 152);
    uint64_t v65 = *(void *)(v0 + 224);
    uint64_t v30 = swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 112) = sub_1000143F4(v29, v28, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2082;
    sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 120) = sub_1000143F4(v31, v32, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v33(v71, v70);
    _os_log_impl((void *)&_mh_execute_header, v22, type, "Found existing enqueued installation for \"%{public}s\": %{public}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v34(v65, v73);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v33(v71, v70);

    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v34(v26, v73);
  }
  if (*(unsigned char *)(v0 + 384) == 1)
  {
    uint64_t v35 = v0 + 88;
    switch(v69)
    {
      case 5:
        swift_bridgeObjectRelease();
        break;
      default:
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0) {
          goto LABEL_20;
        }
        break;
    }
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v38 = *(void *)(v0 + 184);
    swift_retain();
    sub_100311ADC(10, v1, v38);
    swift_release();
    if (v68(v38, 1, v37) == 1)
    {
      uint64_t v39 = *(void *)(v0 + 184);
      swift_bridgeObjectRelease();
      sub_10001729C(v39, &qword_10065C9B0);
    }
    else
    {
      uint64_t v43 = *(void *)(v0 + 312);
      uint64_t v44 = *(void *)(v0 + 288);
      uint64_t v45 = *(void *)(v0 + 264);
      v6(*(void *)(v0 + 296), *(void *)(v0 + 184), v45);
      static Logger.install.getter();
      v75(v44, v43, v45);
      swift_bridgeObjectRetain();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      BOOL v47 = os_log_type_enabled(v46, v67);
      uint64_t v72 = *(void *)(v0 + 264);
      uint64_t v74 = *(void *)(v0 + 288);
      uint64_t v48 = *(void *)(v0 + 216);
      uint64_t v49 = *(void *)(v0 + 200);
      unint64_t v50 = *(void *)(v0 + 160);
      if (v47)
      {
        uint64_t v66 = *(void *)(v0 + 216);
        uint64_t v51 = *(void *)(v0 + 152);
        uint64_t v52 = swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 96) = sub_1000143F4(v51, v50, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v52 + 12) = 2082;
        sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 104) = sub_1000143F4(v53, v54, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v33(v74, v72);
        _os_log_impl((void *)&_mh_execute_header, v46, v67, "Resuming paused duplicate installation for \"%{public}s\": %{public}s", (uint8_t *)v52, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v35 = v0 + 88;
        swift_slowDealloc();

        uint64_t v55 = v66;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v33(v74, v72);

        uint64_t v55 = v48;
      }
      v34(v55, v49);
      uint64_t v56 = sub_1004E6034(*(void **)(v0 + 296));
      if (v56)
      {
        unint64_t v57 = v56;
        *(void *)(v0 + 88) = 0;
        unsigned int v58 = [v56 resumeWithError:v35];

        uint64_t v59 = *(void **)(v0 + 88);
        uint64_t v60 = *(void *)(v0 + 296);
        uint64_t v61 = *(void *)(v0 + 264);
        if (v58)
        {
          id v62 = v59;
        }
        else
        {
          id v63 = v59;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
        }
        v33(v60, v61);
      }
      else
      {
        v33(*(void *)(v0 + 296), *(void *)(v0 + 264));
      }
    }
  }
  else
  {
LABEL_20:
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = *(void *)(v0 + 312);
  uint64_t v41 = *(void *)(v0 + 264);
  type metadata accessor for InternalError();
  sub_1004764D8((unint64_t *)&qword_10065D340, 255, (void (*)(uint64_t))type metadata accessor for InternalError);
  swift_allocError();
  v75(v42, v40, v41);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  v33(v40, v41);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_8:
  return v17();
}

uint64_t sub_10045DC30()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10045DD84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_10042EBBC(a1);
  uint64_t v11 = v10;
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    static Logger.install.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v21 = v6;
      uint64_t v16 = (uint8_t *)v15;
      uint64_t v20 = swift_slowAlloc();
      v23[0] = v20;
      *(_DWORD *)uint64_t v16 = 136446210;
      v19[1] = v16 + 4;
      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v22 = sub_1000143F4(v17, v18, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Reservation for identifier \"%{public}s\" was not found", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t sub_10045E0BC(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_10045E218, v1, 0);
}

uint64_t sub_10045E218()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[18];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
  v2(v1, v0[9], v0[15]);
  swift_beginAccess();
  sub_10042EBBC(v1);
  uint64_t v4 = v3;
  swift_endAccess();
  if (v4)
  {
    uint64_t v5 = v0[10];
    swift_bridgeObjectRelease();
    uint64_t result = *(void *)(v5 + 128);
    v0[19] = result;
    if (result)
    {
      uint64_t v7 = *(void *)(v0[10] + 120);
      swift_retain();
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[20] = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_10045E644;
      return sub_100238024(v7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[18];
    uint64_t v11 = v0[15];
    static Logger.install.getter();
    v2(v9, v10, v11);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = v0[16];
    uint64_t v15 = v0[17];
    uint64_t v17 = v0[15];
    uint64_t v19 = v0[12];
    uint64_t v18 = v0[13];
    uint64_t v20 = v0[11];
    if (v14)
    {
      uint64_t v28 = v0[11];
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[8] = sub_1000143F4(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reservation for identifier  \"%{public}s\" was not found", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v28);
    }
    else
    {
      (*(void (**)(void, void))(v16 + 8))(v0[17], v0[15]);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    }
    type metadata accessor for InternalError();
    sub_1004764D8((unint64_t *)&qword_10065D340, 255, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    uint64_t v25 = v24;
    *BOOL v24 = UUID.uuidString.getter();
    v25[1] = v26;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  return result;
}

uint64_t sub_10045E644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = (void *)*v4;
  v7[21] = a1;
  v7[22] = a2;
  v7[23] = v3;
  swift_task_dealloc();
  uint64_t v8 = v6[10];
  if (v3)
  {
    uint64_t v9 = sub_10045EA14;
  }
  else
  {
    v7[24] = a3;
    uint64_t v9 = sub_10045E78C;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10045E78C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(*(void *)(v0 + 80) + 112);
  *(void *)(v0 + 200) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 208) = v5;
  long long v6 = *(_OWORD *)(v0 + 168);
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 48) = v1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006606F8 + dword_1006606F8);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v7;
  void *v7 = v0;
  v7[1] = sub_10045E898;
  return v9((uint64_t)sub_100473B2C, v5, v4);
}

uint64_t sub_10045E898(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[28] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[10];
  swift_release();
  if (v1)
  {
    swift_task_dealloc();
    long long v6 = sub_10045ECB0;
  }
  else
  {
    v4[29] = a1;
    swift_task_dealloc();
    long long v6 = sub_10045EAC8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10045EA14()
{
  swift_release();
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10045EAC8()
{
  uint64_t v12 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[14];
  uint64_t v10 = v0[15];
  uint64_t v5 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) + 112);
  v11[3] = type metadata accessor for IPA_AppInstall();
  v11[4] = &off_100642748;
  v11[0] = v1;
  swift_beginAccess();
  swift_retain();
  sub_1002B5D44((uint64_t)v11, v5);
  swift_endAccess();
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  swift_retain();
  sub_100017544(v4, (uint64_t)&unk_100663F68, (uint64_t)v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10045ECB0()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(void, void))(v0[16] + 8))(v0[18], v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10045ED78(uint64_t a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 128) = a1;
  swift_release();
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  uint64_t v9 = sub_1004764D8(&qword_100663FA0, v8, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v1;
  v10[3] = v9;
  v10[4] = v1;
  swift_retain_n();
  swift_retain();
  sub_1000163AC((uint64_t)v5, (uint64_t)&unk_1006640A8, (uint64_t)v10);
  swift_release();
  v7(v5, 1, 1, v6);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v1;
  v11[3] = v9;
  v11[4] = v1;
  swift_retain_n();
  sub_100017544((uint64_t)v5, (uint64_t)&unk_1006640B8, (uint64_t)v11);
  swift_release();
  v7(v5, 1, 1, v6);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v1;
  v12[3] = v9;
  v12[4] = v1;
  swift_retain_n();
  sub_1000163AC((uint64_t)v5, (uint64_t)&unk_1006640C8, (uint64_t)v12);
  swift_release();
  v7(v5, 1, 1, v6);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v1;
  v13[3] = v9;
  v13[4] = v1;
  swift_retain_n();
  sub_100017544((uint64_t)v5, (uint64_t)&unk_1006640D8, (uint64_t)v13);
  swift_release();
  v7(v5, 1, 1, v6);
  BOOL v14 = (void *)swift_allocObject();
  v14[2] = v1;
  v14[3] = v9;
  v14[4] = v1;
  swift_retain_n();
  sub_100017544((uint64_t)v5, (uint64_t)&unk_1006640E8, (uint64_t)v14);
  swift_release();
  v7(v5, 1, 1, v6);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v1;
  v15[3] = v9;
  v15[4] = v1;
  swift_retain_n();
  sub_100017544((uint64_t)v5, (uint64_t)&unk_1006640F8, (uint64_t)v15);
  return swift_release();
}

void *sub_10045F0F8(uint64_t a1, uint64_t a2)
{
  swift_defaultActor_initialize();
  v2[16] = 0;
  v2[17] = sub_1004583AC((uint64_t)_swiftEmptyArrayStorage);
  v2[18] = sub_1004584BC((uint64_t)_swiftEmptyArrayStorage);
  v2[19] = sub_10044CBA4((uint64_t)_swiftEmptyArrayStorage);
  v2[20] = sub_10044CD98((uint64_t)_swiftEmptyArrayStorage);
  v2[21] = 4;
  v2[22] = &_swiftEmptySetSingleton;
  v2[23] = _swiftEmptyArrayStorage;
  v2[14] = a1;
  v2[15] = a2;
  return v2;
}

uint64_t sub_10045F180(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = sub_10045F224(a2, a3);
  uint64_t v7 = (void *)sub_1004730A0(0, v6, (uint64_t)sub_100473004, 0, v5);

  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  uint64_t v8 = sub_1002477FC((uint64_t)&off_100639D90, v7);

  return v8;
}

uint64_t sub_10045F224(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = sub_1000172F8(&qword_10065BD50);
  uint64_t v12 = sub_10000DDFC((unint64_t *)&unk_10065C9D0, &qword_10065BD50);
  LOWORD(v9) = 6;
  *((void *)&v9 + 1) = a1;
  uint64_t v10 = a2;
  sub_1000172F8(&qword_10065BD58);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v9, v4 + 32);
  uint64_t v11 = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v5 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v9) = 281;
  uint64_t v12 = v5;
  *((void *)&v9 + 1) = &off_100639D68;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v9, v6 + 32);
  *(void *)&long long v9 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100554E6C(v4);
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_100554E6C(v7);
  sub_1000172F8(&qword_10065C9F0);
  swift_arrayDestroy();
  return v9;
}

void sub_10045F3C0(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v51 = a4;
  uint64_t v52 = a6;
  uint64_t v63 = a5;
  uint64_t v50 = a3;
  uint64_t v49 = a7;
  uint64_t v10 = type metadata accessor for LogKey.Prefix();
  uint64_t v53 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AppPackageTemplate();
  uint64_t v54 = *(void *)(v13 - 8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AppInstallTemplate();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100473CD0(a2, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  id v19 = sub_1004EA574((uint64_t)v18, *a1);
  if (!v7)
  {
    uint64_t v20 = v19;
    uint64_t v47 = v10;
    uint64_t v48 = v12;
    uint64_t v55 = a1;
    uint64_t v21 = *(void *)(a2 + *(int *)(v16 + 72));
    uint64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v23 = v21 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
      uint64_t v24 = *(void *)(v54 + 72);
      uint64_t v54 = v21;
      swift_bridgeObjectRetain();
      do
      {
        sub_100473CD0(v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
        id v25 = sub_1004EA848((uint64_t)v15, *v55);
        id v26 = [v20 persistentID];
        uint64_t v59 = &protocol witness table for Int64;
        uint64_t v60 = &protocol witness table for Int64;
        *((void *)&v58 + 1) = &type metadata for Int64;
        *(void *)&long long v57 = v26;
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        id v27 = v25;
        JSONEncoder.init()();
        SQLiteEncodeValue(_:using:)(&v57, (uint64_t *)&v61);
        swift_release();
        sub_100014524((uint64_t)&v57);
        sub_10018AC60(&v61, v62);
        uint64_t v28 = _bridgeAnythingToObjectiveC<A>(_:)();
        sub_100014524((uint64_t)&v61);
        NSString v29 = String._bridgeToObjectiveC()();
        [v27 setValue:v28 forProperty:v29];

        swift_unknownObjectRelease();
        v23 += v24;
        --v22;
        uint64_t v30 = v63;
      }
      while (v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = v63;
    }
    id v31 = v20;
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v31 valueForProperty:v32];

    uint64_t v35 = v51;
    uint64_t v34 = v52;
    if (v33)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    char v36 = v48;
    uint64_t v37 = v47;
    uint64_t v38 = v53;
    sub_1001CD9F8((uint64_t)&v57, (uint64_t)&v61);
    if (v62)
    {
      sub_1001C5DD4(&v61, v56);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      uint64_t v39 = (void *)sub_1002443D8(v56);
      swift_release();
      sub_100014524((uint64_t)v56);
      sub_10001729C((uint64_t)&v57, (uint64_t *)&unk_10065C9C0);
    }
    else
    {
      sub_10001729C((uint64_t)&v57, (uint64_t *)&unk_10065C9C0);

      (*(void (**)(char *, void, uint64_t))(v38 + 104))(v36, enum case for LogKey.Prefix.undefined(_:), v37);
      id v40 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t v39 = (void *)LogKey.init(prefix:)();
    }
    id v41 = [v31 persistentID];
    id v42 = *v55;
    type metadata accessor for IPA_AppInstall();
    swift_allocObject();
    uint64_t v43 = (id *)v42;
    uint64_t v44 = v50;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v45 = sub_1003349D4((uint64_t)v41, v43, v44, v39, v35, v30, v34);

    *uint64_t v49 = v45;
  }
}

BOOL sub_10045F9B0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = sub_10045FA34(a2, a3);
  LOBYTE(a2) = sub_100473594(0, v6, (uint64_t)sub_1004CC3C8, 0, v5);

  swift_bridgeObjectRelease();
  return (a2 & 1) == 0;
}

uint64_t sub_10045FA34(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = sub_1000172F8(&qword_10065BD50);
  uint64_t v14 = sub_10000DDFC((unint64_t *)&unk_10065C9D0, &qword_10065BD50);
  LOWORD(v11) = 6;
  *((void *)&v11 + 1) = a1;
  uint64_t v12 = a2;
  sub_1000172F8(&qword_10065BD58);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v11, v4 + 32);
  uint64_t v5 = qword_10065B140;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_10068DAB0;
  uint64_t v13 = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v7 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v11) = 281;
  uint64_t v14 = v7;
  *((void *)&v11 + 1) = v6;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v11, v8 + 32);
  *(void *)&long long v11 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100554E6C(v4);
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_100554E6C(v9);
  sub_1000172F8(&qword_10065C9F0);
  swift_arrayDestroy();
  return v11;
}

uint64_t sub_10045FC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_10045FD58, v3, 0);
}

uint64_t sub_10045FD58()
{
  uint64_t v1 = *(void *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = *(void *)(*(void *)(v0 + 48) + 112);
  *(void *)(v0 + 112) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 120) = v3;
  *(_OWORD *)(v3 + 16) = v8;
  *(void *)(v3 + 32) = v1;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 128) = v4;
  *(void *)(v4 + 16) = sub_1004756F4;
  *(void *)(v4 + 24) = v3;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1006607B0 + dword_1006607B0);
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  void *v5 = v0;
  v5[1] = sub_10045FE84;
  uint64_t v6 = *(void *)(v0 + 80);
  return v9(v6, (uint64_t)sub_1003AE008, v4, v2);
}

uint64_t sub_10045FE84()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_1004601F0;
  }
  else {
    uint64_t v4 = sub_10046000C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046000C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001729C(v3, &qword_10065C9B0);
    static Logger.install.getter();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = v0[3];
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134217984;
      v0[2] = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Installation not found for %llu", v7, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    long long v8 = 0;
  }
  else
  {
    uint64_t v9 = (void *)v0[13];
    (*(void (**)(void *, uint64_t, uint64_t))(v2 + 32))(v9, v3, v1);
    long long v8 = sub_1004E6034(v9);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v9, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void *))v0[1];
  return v10(v8);
}

uint64_t sub_1004601F0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_100460268(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065C060);
  uint64_t v14 = v4;
  uint64_t v15 = sub_10000DDFC((unint64_t *)&qword_10065C068, &qword_10065C060);
  os_log_type_t v5 = sub_10019CE94((uint64_t *)&v13);
  uint64_t v6 = (char *)v5 + *(int *)(v4 + 64);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a2, v7);
  *(_WORD *)os_log_type_t v5 = 15;
  sub_1000172F8(&qword_10065BD58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v13, inited + 32);
  id v9 = a1;
  sub_100554E6C(inited);
  uint64_t v10 = (void *)sub_1004730A0(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_100473004, 0, v9);

  swift_bridgeObjectRelease();
  if (!v10) {
    return 0;
  }
  id v11 = [v10 persistentID];

  return v11;
}

double sub_10046041C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 136);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_10045257C(a1), (v11 & 1) != 0))
  {
    sub_10019B17C(*(void *)(v9 + 56) + 40 * v10, (uint64_t)v16);
    sub_10018B164(v16, a2);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    static Logger.install.getter();
    long long v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 134349056;
      *(void *)&v16[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Installation \"%{public}lld\" could not be found", v15, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void sub_100460604(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, id a5@<X8>)
{
  uint64_t v6 = qword_10065B140;
  id v7 = a1;
  if (v6 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v8 = qword_10068DAB0;
  *((void *)&v35 + 1) = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v9 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v34) = 281;
  uint64_t v36 = v9;
  *((void *)&v34 + 1) = v8;
  sub_1000172F8(&qword_10065BD58);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v34, inited + 32);
  *(void *)&long long v32 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_100554E6C(inited);
  *((void *)&v35 + 1) = sub_1000172F8(&qword_10065C050);
  uint64_t v11 = sub_10000DDFC(&qword_10065C058, &qword_10065C050);
  LOBYTE(v34) = 0;
  uint64_t v36 = v11;
  *((void *)&v34 + 1) = _swiftEmptyArrayStorage;
  id v12 = sub_10043A980((uint64_t)&v34, v7);
  uint64_t v14 = v13;
  if (*((void *)&v35 + 1)) {
    sub_100014524((uint64_t)&v34);
  }

  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v27 = (uint64_t)a5;
    type metadata accessor for AppInstallEntity.Entity();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    id v17 = v12;
    swift_bridgeObjectRetain();
    unint64_t v18 = 0;
    id v7 = 0;
    while (1)
    {
      if (v18 >= *(void *)(v14 + 16))
      {
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v19 = *(void *)(v14 + 8 * v18 + 32);
      id v20 = objc_allocWithZone(ObjCClassFromMetadata);
      a5 = v17;
      id v12 = [v20 initWithPersistentID:v19 onConnection:a5];
      LODWORD(v20) = [v12 existsInDatabase];

      if (!v20)
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_13;
      }
      *(void *)&long long v34 = v12;
      if (sub_100460AB4((id *)&v34, a2, a3, a4)) {
        break;
      }

      if (v15 == ++v18)
      {
        swift_bridgeObjectRelease_n();

        id v12 = a5;
LABEL_13:
        a5 = (id)v27;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();

    id v22 = v12;
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v22 valueForProperty:v23];

    if (v24)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }
    sub_1001CD9F8((uint64_t)&v34, (uint64_t)&v32);
    if (v33)
    {
      sub_1001C5DD4(&v32, v31);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_100243034(v31, v27);
      swift_release();
      sub_100014524((uint64_t)v31);
      uint64_t v25 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v27, 0, 1, v25);
    }
    else
    {
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v27, 1, 1, v26);
    }
    sub_10001729C((uint64_t)&v34, (uint64_t *)&unk_10065C9C0);

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_14:

    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a5, 1, 1, v21);
  }
}

uint64_t sub_100460AB4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = *a1;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 valueForProperty:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_1001CD9F8((uint64_t)&v32, (uint64_t)&v29);
  if (!v30) {
    goto LABEL_13;
  }
  sub_1001C5DD4(&v29, v35);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v11 = sub_100242914(v35);
  if (!v4)
  {
    uint64_t v12 = v11;
    swift_release();
    sub_100014524((uint64_t)v35);
    sub_10001729C((uint64_t)&v32, (uint64_t *)&unk_10065C9C0);

    if (v12 != a2) {
      return 0;
    }
    id v8 = v8;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v8 valueForProperty:v13];

    if (v14)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
    }
    sub_1001CD9F8((uint64_t)&v32, (uint64_t)&v29);
    if (v30)
    {
      sub_1001C5DD4(&v29, v35);
      swift_allocObject();
      JSONDecoder.init()();
      uint64_t v15 = sub_100243BE0(v35);
      uint64_t v17 = v16;
      char v19 = v18;
      swift_release();
      sub_100014524((uint64_t)v35);
      sub_10001729C((uint64_t)&v32, (uint64_t *)&unk_10065C9C0);

      if (v19)
      {
        id v20 = &type metadata for WebDistributor;
        unint64_t v21 = sub_1002BEA38();
      }
      else
      {
        id v20 = &type metadata for NativeDistributor;
        unint64_t v21 = sub_1002F9EF8();
      }
      uint64_t v30 = v20;
      unint64_t v31 = v21;
      *(void *)&long long v29 = v15;
      *((void *)&v29 + 1) = v17;
      sub_10018B164(&v29, (uint64_t)&v32);
      uint64_t v23 = *((void *)&v33 + 1);
      uint64_t v24 = v34;
      sub_10018AC60(&v32, *((uint64_t *)&v33 + 1));
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 40))(v23, v24);
      uint64_t v27 = v26;
      sub_100014524((uint64_t)&v32);
      if (v25 == a3 && v27 == a4)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return (v28 & 1) != 0;
    }
LABEL_13:
    sub_10001729C((uint64_t)&v32, (uint64_t *)&unk_10065C9C0);

    return 0;
  }
  swift_release();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_100460E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return _swift_task_switch(sub_100460E3C, a4, 0);
}

uint64_t sub_100460E3C()
{
  uint64_t v1 = *(void *)(v0[8] + 112);
  v0[9] = v1;
  uint64_t v4 = (char *)&dword_100660898 + dword_100660898;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100460F14;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void **@<X0>, uint64_t *@<X8>), void, uint64_t))v4)(sub_100461B24, 0, v1);
}

uint64_t sub_100460F14(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 64);
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    id v7 = sub_1004611A4;
  }
  else
  {
    swift_release();
    *(void *)(v5 + 88) = a1;
    id v7 = sub_10046107C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10046107C()
{
  uint64_t v1 = sub_100332A9C(v0[11]);
  swift_bridgeObjectRelease();
  uint64_t v2 = self;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  v0[6] = sub_1004764D0;
  v0[7] = v3;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100462008;
  v0[5] = &unk_100647C38;
  uint64_t v4 = _Block_copy(v0 + 2);
  swift_release();
  [v2 enumerateCoordinatorsUsingBlock:v4];
  _Block_release(v4);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004611A4()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &_swiftEmptySetSingleton;
  v0[6] = sub_1004764D0;
  v0[7] = v2;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100462008;
  v0[5] = &unk_100647C38;
  uint64_t v3 = _Block_copy(v0 + 2);
  swift_release();
  [v1 enumerateCoordinatorsUsingBlock:v3];
  _Block_release(v3);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004612B4(void *a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065C9B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v48 - v6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v48 - v13;
  uint64_t v14 = qword_10065B140;
  id v15 = a1;
  if (v14 != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v16 = qword_10068DAB0;
  *((void *)&v71 + 1) = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v17 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v70) = 281;
  uint64_t v72 = v17;
  *((void *)&v70 + 1) = v16;
  swift_bridgeObjectRetain();
  id v18 = sub_10043A980((uint64_t)&v70, v15);
  uint64_t v20 = v19;

  if (*((void *)&v71 + 1)) {
    sub_100014524((uint64_t)&v70);
  }
  uint64_t v58 = *(void *)(v20 + 16);
  if (!v58)
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_32:

    return (uint64_t)v37;
  }
  type metadata accessor for AppInstallEntity.Entity();
  Class ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata();
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  long long v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v60 = (id *)(v9 + 32);
  id v56 = v18;
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v54 = 0;
  uint64_t v62 = _swiftEmptyArrayStorage;
  uint64_t v53 = (char *)&type metadata for Any + 8;
  uint64_t v51 = v12;
  uint64_t v50 = v20;
  uint64_t v49 = v9;
  while (1)
  {
    if (v21 >= *(void *)(v20 + 16))
    {
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v22 = *(void *)(v20 + 8 * v21 + 32);
    id v23 = objc_allocWithZone(ObjCClassFromMetadata);
    id v24 = v56;
    id v18 = [v23 initWithPersistentID:v22 onConnection:v24];
    LODWORD(v23) = [v18 existsInDatabase];

    id v55 = v24;
    if (!v23)
    {
      swift_bridgeObjectRelease_n();
      id v38 = v55;

LABEL_31:
      uint64_t v37 = v62;
      goto LABEL_32;
    }
    id v25 = v18;
    NSString v26 = String._bridgeToObjectiveC()();
    id v15 = [v25 valueForProperty:v26];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v70 = 0u;
      long long v71 = 0u;
    }
    sub_1001CD9F8((uint64_t)&v70, (uint64_t)&v68);
    if (v69) {
      break;
    }
    (*v59)(v7, 1, 1, v8);
LABEL_22:
    sub_10001729C((uint64_t)&v70, (uint64_t *)&unk_10065C9C0);

    if ((*v61)(v7, 1, v8) == 1)
    {
      sub_10001729C((uint64_t)v7, &qword_10065C9B0);
    }
    else
    {
      id v15 = *v60;
      long long v33 = v52;
      ((void (*)(char *, char *, uint64_t))*v60)(v52, v7, v8);
      ((void (*)(char *, char *, uint64_t))v15)(v12, v33, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v62 = (void *)sub_100290D7C(0, v62[2] + 1, 1, (unint64_t)v62);
      }
      unint64_t v35 = v62[2];
      unint64_t v34 = v62[3];
      if (v35 >= v34 >> 1) {
        uint64_t v62 = (void *)sub_100290D7C(v34 > 1, v35 + 1, 1, (unint64_t)v62);
      }
      uint64_t v36 = v62;
      v62[2] = v35 + 1;
      ((void (*)(char *, char *, uint64_t))v15)((char *)v36+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v35, v12, v8);
    }
    if (v58 == ++v21)
    {
      swift_bridgeObjectRelease_n();
      id v18 = v55;

      goto LABEL_31;
    }
  }
  sub_1001C5DD4(&v68, &v66);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  id v15 = (id)JSONDecoder.init()();
  sub_1000144C8((uint64_t)&v66, (uint64_t)v65);
  if (swift_dynamicCast())
  {
    uint64_t v27 = v5;
    uint64_t v28 = v63;
    unint64_t v29 = v64;
    sub_1004764D8((unint64_t *)&unk_10065C920, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = v54;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v54 = v30;
    if (v30)
    {
      sub_100013510(v28, v29);
      goto LABEL_38;
    }
    sub_100013510(v28, v29);
    swift_release();
    uint64_t v5 = v27;
    uint64_t v9 = v49;
    uint64_t v12 = v51;
    uint64_t v20 = v50;
    goto LABEL_21;
  }
  sub_1000144C8((uint64_t)&v66, (uint64_t)v65);
  char v31 = swift_dynamicCast();
  long long v32 = *v59;
  if (v31)
  {
    v32(v5, 0, 1, v8);
    if ((*v61)(v5, 1, v8) == 1) {
      goto LABEL_37;
    }
    ((void (*)(char *, char *, uint64_t))*v60)(v7, v5, v8);
    swift_release();
LABEL_21:
    sub_100014524((uint64_t)&v66);
    (*v59)(v7, 0, 1, v8);
    goto LABEL_22;
  }
  v32(v5, 1, 1, v8);
LABEL_37:
  sub_10001729C((uint64_t)v5, &qword_10065C9B0);
  v65[0] = v8;
  sub_1000172F8(&qword_10065CF78);
  uint64_t v40 = String.init<A>(describing:)();
  uint64_t v42 = v41;
  sub_10018AC60(&v66, v67);
  v65[0] = swift_getDynamicType();
  sub_1000172F8(&qword_10065BC70);
  uint64_t v43 = String.init<A>(describing:)();
  uint64_t v45 = v44;
  sub_1001C3A08();
  uint64_t v46 = swift_allocError();
  *(void *)uint64_t v47 = v40;
  *(void *)(v47 + 8) = v42;
  *(void *)(v47 + 16) = v43;
  *(void *)(v47 + 24) = v45;
  *(unsigned char *)(v47 + 32) = 0;
  uint64_t v54 = v46;
  swift_willThrow();
LABEL_38:
  swift_release();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_100461B24@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004612B4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100461B58(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  if (a2)
  {
    swift_errorRetain();
    static Logger.install.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      long long v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138543362;
      swift_errorRetain();
      uint64_t v20 = v11;
      uint64_t v21 = v10;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      long long v33 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v32 = v22;
      uint64_t v10 = v21;
      uint64_t v11 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Enumerating coordinators failed with error: %{public}@", v19, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else if (a1)
  {
    id v23 = a1;
    id v24 = [v23 uniqueIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v24) = sub_10045C1AC((uint64_t)v9, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if ((v24 & 1) == 0 && [v23 creatorIdentifier] == (id)28)
    {
      static Logger.install.getter();
      id v23 = v23;
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        char v31 = v27;
        long long v32 = (void *)v10;
        *(_DWORD *)uint64_t v27 = 138543362;
        long long v33 = v23;
        uint64_t v28 = v23;
        uint64_t v10 = (uint64_t)v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v30 = a1;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Cancelling untracked owned coordinator: %{public}@", v31, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v25 = v23;
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      sub_1004E5384(1, 0, 0);
    }
  }
  return 1;
}

uint64_t sub_100462008(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v6 = a2;
  id v7 = a3;
  LOBYTE(a3) = v5(a2, a3);
  swift_release();

  return a3 & 1;
}

uint64_t sub_100462084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_1004620A4, a4, 0);
}

uint64_t sub_1004620A4()
{
  uint64_t v1 = v0[5];
  uint64_t result = *(void *)(v1 + 128);
  v0[6] = result;
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 120);
    swift_retain();
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10046215C;
    return sub_100238024(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046215C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)*v4;
  id v7 = (void *)*v4;
  v7[8] = a1;
  v7[9] = a2;
  v7[10] = v3;
  swift_task_dealloc();
  uint64_t v8 = v6[5];
  if (v3)
  {
    uint64_t v9 = sub_100462520;
  }
  else
  {
    v7[11] = a3;
    uint64_t v9 = sub_1004622A4;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_1004622A4()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(*(void *)(v0 + 40) + 112);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  long long v5 = *(_OWORD *)(v0 + 64);
  *(void *)(v4 + 16) = v2;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 40) = v1;
  uint64_t v8 = (uint64_t (*)(void (*)(void **@<X0>, __objc2_prot_list **@<X8>), uint64_t, uint64_t))((char *)&dword_1006608A0 + dword_1006608A0);
  swift_retain();
  id v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v6;
  *id v6 = v0;
  v6[1] = sub_1004623A8;
  return v8(sub_100476520, v4, v3);
}

uint64_t sub_1004623A8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[15] = v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v5 = v4[5];
  if (v1)
  {
    swift_task_dealloc();
    id v6 = sub_1004626C4;
  }
  else
  {
    v4[16] = a1;
    swift_task_dealloc();
    id v6 = sub_100462584;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100462520()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100462584()
{
  uint64_t v8 = v0;
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = (uint64_t *)(v0[5] + 136);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100470BDC(v2, (uint64_t)sub_100471CB8, 0, isUniquelyReferenced_nonNull_native, &v7);
  if (v1)
  {
    *uint64_t v3 = v7;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *uint64_t v3 = v7;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    id v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1004626C4()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100462738(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __objc2_prot_list **p_base_prots@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v73 = a4;
  uint64_t v74 = a5;
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v10 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v10 - 8);
  unint64_t v64 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v62 = *(void *)(v63 - 8);
  uint64_t v12 = __chkstk_darwin(v63);
  uint64_t v60 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v13;
  __chkstk_darwin(v12);
  uint64_t v59 = (char *)&v54 - v14;
  uint64_t v58 = type metadata accessor for LogKey.Prefix();
  uint64_t v15 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  long long v57 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v82 = sub_1004583AC((uint64_t)_swiftEmptyArrayStorage);
  long long v70 = a1;
  uint64_t v17 = *a1;
  uint64_t v18 = qword_10065B138;
  id v19 = v17;
  if (v18 != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v20 = qword_10068DAA8;
  *((void *)&v80 + 1) = sub_1000172F8((uint64_t *)&unk_10065C9E0);
  uint64_t v21 = sub_10000DDFC(&qword_10065BD60, (uint64_t *)&unk_10065C9E0);
  LOWORD(v79) = 281;
  v81 = (_UNKNOWN **)v21;
  *((void *)&v79 + 1) = v20;
  swift_bridgeObjectRetain();
  id v22 = sub_10043A980((uint64_t)&v79, v19);
  uint64_t v24 = v23;

  if (*((void *)&v80 + 1)) {
    sub_100014524((uint64_t)&v79);
  }
  uint64_t v69 = *(void *)(v24 + 16);
  if (v69)
  {
    uint64_t v54 = p_base_prots;
    type metadata accessor for AppInstallEntity.Entity();
    Class ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata();
    unsigned int v56 = enum case for LogKey.Prefix.undefined(_:);
    id v55 = (void (**)(char *, void, uint64_t))(v15 + 104);
    swift_bridgeObjectRetain();
    id v67 = v22;
    unint64_t v25 = 0;
    p_base_prots = (__objc2_prot_list **)(&XPCClientRegistry + 40);
    uint64_t v65 = v24;
    while (1)
    {
      if (v25 >= *(void *)(v24 + 16))
      {
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v26 = *(void *)(v24 + 8 * v25 + 32);
      id v27 = objc_allocWithZone(ObjCClassFromMetadata);
      id v28 = v67;
      id v22 = [v27 initWithPersistentID:v26 onConnection:v28];
      LOBYTE(v26) = [v22 existsInDatabase];

      id v66 = v28;
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        id v53 = v66;

LABEL_22:
        p_base_prots = v54;
        goto LABEL_23;
      }
      id v29 = v22;
      NSString v30 = String._bridgeToObjectiveC()();
      id v31 = [v29 valueForProperty:v30];

      if (v31)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v79 = 0u;
        long long v80 = 0u;
      }
      sub_1001CD9F8((uint64_t)&v79, (uint64_t)&v77);
      if (v78)
      {
        sub_1001C5DD4(&v77, v76);
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        uint64_t v32 = sub_1002443D8(v76);
        if (v7)
        {
          swift_release();
          swift_unexpectedError();
          __break(1u);
          return;
        }
        long long v33 = (void *)v32;
        uint64_t v75 = 0;
        swift_release();
        sub_100014524((uint64_t)v76);
        sub_10001729C((uint64_t)&v79, (uint64_t *)&unk_10065C9C0);
      }
      else
      {
        uint64_t v75 = v7;
        sub_10001729C((uint64_t)&v79, (uint64_t *)&unk_10065C9C0);

        (*v55)(v57, v56, v58);
        id v34 = objc_allocWithZone((Class)type metadata accessor for LogKey());
        long long v33 = (void *)LogKey.init(prefix:)();
      }
      id v19 = objc_msgSend(v29, (SEL)p_base_prots[163]);
      unint64_t v35 = *v70;
      uint64_t v36 = type metadata accessor for IPA_AppInstall();
      uint64_t v15 = swift_allocObject();
      uint64_t v37 = v35;
      uint64_t v38 = v71;
      swift_retain();
      id v39 = v33;
      uint64_t v40 = v72;
      swift_bridgeObjectRetain();
      uint64_t v41 = v73;
      swift_unknownObjectRetain();
      uint64_t v42 = v41;
      uint64_t v43 = v75;
      uint64_t v44 = sub_1003349D4((uint64_t)v19, v37, v38, v39, v40, v42, v74);
      if (v43)
      {
        swift_errorRelease();
        sub_1001A0E84(v29);

        uint64_t v7 = 0;
      }
      else
      {
        id v19 = (id)v44;
        swift_retain();
        id v45 = [v29 persistentID];
        *((void *)&v80 + 1) = v36;
        v81 = &off_100642748;
        *(void *)&long long v79 = v19;
        swift_retain();
        sub_1002B5D44((uint64_t)&v79, (uint64_t)v45);
        uint64_t v75 = 0;
        uint64_t v46 = (uint64_t)v59;
        swift_storeEnumTagMultiPayload();
        uint64_t v47 = type metadata accessor for TaskPriority();
        uint64_t v48 = (uint64_t)v64;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v64, 1, 1, v47);
        uint64_t v49 = v60;
        sub_100473CD0(v46, v60, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        unint64_t v50 = (*(unsigned __int8 *)(v62 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
        uint64_t v51 = (void *)swift_allocObject();
        v51[2] = 0;
        v51[3] = 0;
        v51[4] = v19;
        sub_100474DE4(v49, (uint64_t)v51 + v50, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        swift_retain();
        uint64_t v15 = sub_1000163AC(v48, (uint64_t)&unk_100664198, (uint64_t)v51);

        swift_release();
        swift_release();
        uint64_t v52 = v46;
        uint64_t v7 = v75;
        sub_1004758D4(v52, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        swift_release();
      }
      ++v25;
      uint64_t v24 = v65;
      p_base_prots = &XPCClientRegistry.base_prots;
      if (v69 == v25)
      {
        swift_bridgeObjectRelease_n();
        id v22 = v66;

        goto LABEL_22;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_23:

  *p_base_prots = (__objc2_prot_list *)v82;
}

void sub_100462F20(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  uint64_t v67 = v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v62 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v62 - v14;
  uint64_t v16 = *(void **)(a1 + 8);
  id v17 = [v16 bundleID];
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  uint64_t v20 = *(void **)a1;
  if (*(void *)a1)
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      if (*(unsigned char *)(a1 + 40) == 3
        && (unint64_t)(*(void *)(a1 + 16) - 3) <= 1
        && *(_OWORD *)(a1 + 24) == 0)
      {
        id v21 = v20;
        static Logger.install.getter();
        swift_bridgeObjectRetain_n();
        id v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          id v63 = v21;
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v25 = v65;
          uint64_t v71 = sub_1000143F4(v65, v19, &v74);
          id v21 = v63;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] Prioritize restore", v24, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v67 + 8))(v15, v66);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v15, v66);
          uint64_t v25 = v65;
        }
        uint64_t v49 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v4, 1, 1, v49);
        uint64_t v51 = sub_1004764D8(&qword_100663FA0, v50, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
        uint64_t v52 = (void *)swift_allocObject();
        uint64_t v53 = v64;
        uint64_t v52[2] = v64;
        v52[3] = v51;
        v52[4] = v53;
        v52[5] = v25;
        v52[6] = v19;
        swift_retain_n();
        sub_100017544((uint64_t)v4, (uint64_t)&unk_100664190, (uint64_t)v52);
        swift_release();
      }
      else
      {
        id v32 = v20;
        static Logger.install.getter();
        swift_bridgeObjectRetain();
        long long v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v33, v34))
        {
          unint64_t v35 = (uint8_t *)swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          *(_DWORD *)unint64_t v35 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v71 = sub_1000143F4(v65, v19, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] Not prioritizing restore", v35, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v67 + 8))(v13, v66);
      }
    }
    else
    {
      sub_1004760EC(a1 + 16, (uint64_t)&v71);
      sub_1004760EC((uint64_t)&v71, (uint64_t)&v74);
      if (v76 == 3 && v74 == 4 && v75 == 0)
      {
        id v43 = v20;
        id v44 = [v16 bundleID];
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v47 = v46;

        id v48 = objc_allocWithZone((Class)LSApplicationRecord);
        uint64_t v54 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v4, 1, 1, v54);
        uint64_t v56 = sub_1004764D8(&qword_100663FA0, v55, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
        long long v57 = (void *)swift_allocObject();
        uint64_t v58 = v64;
        uint64_t v59 = v65;
        uint64_t v57[2] = v64;
        v57[3] = v56;
        v57[4] = v59;
        v57[5] = v19;
        v57[6] = v58;
        swift_retain_n();
        sub_100017544((uint64_t)v4, (uint64_t)&unk_100664180, (uint64_t)v57);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    sub_1004760EC(a1 + 16, (uint64_t)v70);
    sub_1004760EC((uint64_t)v70, (uint64_t)&v74);
    if (v76 == 3 && v74 == 4 && v75 == 0)
    {
      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v4, 1, 1, v26);
      uint64_t v28 = sub_1004764D8(&qword_100663FA0, v27, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
      id v29 = (void *)swift_allocObject();
      uint64_t v30 = v64;
      uint64_t v31 = v65;
      v29[2] = v64;
      v29[3] = v28;
      v29[4] = v31;
      v29[5] = v19;
      v29[6] = v30;
      swift_retain_n();
      sub_100017544((uint64_t)v4, (uint64_t)&unk_100664170, (uint64_t)v29);
      swift_release();
    }
    else
    {
      static Logger.install.getter();
      id v36 = v16;
      sub_100476148((uint64_t)v70);
      swift_bridgeObjectRetain();
      id v37 = v36;
      sub_100476148((uint64_t)v70);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v71 = sub_1000143F4(v65, v19, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v40 + 12) = 2080;
        sub_1004760EC((uint64_t)v70, (uint64_t)&v71);
        unint64_t v41 = 0xE600000000000000;
        uint64_t v42 = 0x64656C696166;
        switch(v73)
        {
          case 1:
            unint64_t v41 = 0xE800000000000000;
            uint64_t v42 = 0x73736572676F7270;
            break;
          case 2:
            unint64_t v41 = 0xEB00000000726564;
            uint64_t v42 = 0x6C6F686563616C70;
            break;
          case 3:
            if ((unint64_t)v72 | *((void *)&v72 + 1) | v71)
            {
              if (v71 == 1 && v72 == 0)
              {
                unint64_t v41 = 0xE800000000000000;
                uint64_t v42 = 0x64656C65636E6163;
              }
              else if (v71 == 2 && v72 == 0)
              {
                uint64_t v42 = 0x646573756170;
              }
              else
              {
                BOOL v60 = v72 == 0;
                BOOL v61 = v71 == 3;
                if (v61 && v60) {
                  uint64_t v42 = 0x64656D75736572;
                }
                else {
                  uint64_t v42 = 0x697469726F697270;
                }
                if (v61 && v60) {
                  unint64_t v41 = 0xE700000000000000;
                }
                else {
                  unint64_t v41 = 0xEB0000000064657ALL;
                }
              }
            }
            else
            {
              unint64_t v41 = 0xE900000000000064;
              uint64_t v42 = 0x6574656C706D6F63;
            }
            break;
          default:
            break;
        }
        uint64_t v68 = sub_1000143F4(v42, v41, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        sub_1004761BC((uint64_t)v70);

        sub_1004761BC((uint64_t)v70);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%{public}s] handleRestoreOrPromotionEvent event kind: %s", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        sub_1004761BC((uint64_t)v70);

        sub_1004761BC((uint64_t)v70);
      }

      (*(void (**)(char *, uint64_t))(v67 + 8))(v10, v66);
    }
  }
}

uint64_t sub_100463B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v6[14] = v8;
  v6[15] = *(void *)(v8 - 8);
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_100463C30, a6, 0);
}

uint64_t sub_100463C30()
{
  id v17 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[15];
    uint64_t v14 = v0[14];
    uint64_t v15 = v0[17];
    unint64_t v3 = v0[12];
    uint64_t v4 = v0[11];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[10] = sub_1000143F4(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[[%{public}s]] Cold Promotion", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v6(v15, v14);
  }
  else
  {
    uint64_t v7 = v0[17];
    uint64_t v8 = v0[14];
    uint64_t v9 = v0[15];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[18] = v6;
  uint64_t v10 = *(void *)(v0[13] + 120);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[19] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100463E7C;
  return sub_100238024(v10);
}

uint64_t sub_100463E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[20] = a1;
  v6[21] = a2;
  v6[22] = a3;
  v6[23] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[13];
  if (v3) {
    uint64_t v8 = sub_1004640E8;
  }
  else {
    uint64_t v8 = sub_100463FB4;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_100463FB4()
{
  if (*(void *)(*(void *)(v0 + 104) + 128))
  {
    uint64_t v1 = *(void *)(v0 + 168);
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v4 = *(void *)(v0 + 96);
    sub_1000172F8(&qword_10065D360);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1005A3EC0;
    *(void *)(v6 + 32) = v5;
    *(void *)(v6 + 40) = v4;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    *(unsigned char *)(v0 + 48) = 1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10037D9D4(v6, v3, v1, v2, v0 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(void (**)(void))(v0 + 8);
    v7();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1004640E8()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain_n();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v15 = v0[16];
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[18];
    uint64_t v14 = v0[14];
    uint64_t v4 = v0[11];
    unint64_t v5 = v0[12];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446722;
    swift_bridgeObjectRetain();
    v0[7] = sub_1000143F4(v4, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[8] = sub_1000143F4(v4, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 22) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[9] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] Error fetching bag to prioritize bundleID: %s error: %@", (uint8_t *)v6, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v16(v15, v14);
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[18];
    uint64_t v9 = v0[16];
    uint64_t v10 = v1[14];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    v8(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v1[1];
  return v11();
}

uint64_t sub_100464424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v6[12] = v8;
  v6[13] = *(void *)(v8 - 8);
  v6[14] = swift_task_alloc();
  return _swift_task_switch(sub_1004644EC, a4, 0);
}

uint64_t sub_1004644EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 120);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100464590;
  return sub_100238024(v1);
}

uint64_t sub_100464590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[16] = a1;
  v6[17] = a2;
  v6[18] = a3;
  v6[19] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[9];
  if (v3) {
    uint64_t v8 = sub_1004647D0;
  }
  else {
    uint64_t v8 = sub_1004646C8;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1004646C8()
{
  if (*(void *)(*(void *)(v0 + 72) + 128))
  {
    uint64_t v1 = *(void *)(v0 + 136);
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    *(unsigned char *)(v0 + 48) = 1;
    swift_retain();
    sub_100376FB4(v3, v1, v2, 1, v5, v4, 0, 0, 2u, v0 + 16);
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004647D0()
{
  uint64_t v17 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[13];
    unint64_t v3 = v0[11];
    uint64_t v14 = v0[12];
    uint64_t v15 = v0[14];
    uint64_t v4 = v0[10];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_bridgeObjectRetain();
    v0[7] = sub_1000143F4(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] Fetching bag to prioritize coordinator resulted in error: %@", (uint8_t *)v5, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
  }
  else
  {
    uint64_t v9 = v0[13];
    uint64_t v8 = v0[14];
    uint64_t v10 = v0[12];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100464A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  uint64_t v8 = type metadata accessor for Logger();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  return _swift_task_switch(sub_100464B6C, a6, 0);
}

uint64_t sub_100464B6C()
{
  uint64_t v17 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[14];
    uint64_t v14 = v0[13];
    uint64_t v15 = v0[16];
    unint64_t v3 = v0[11];
    uint64_t v4 = v0[10];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_bridgeObjectRetain();
    v0[9] = sub_1000143F4(v4, v3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] Cold Promotion of a placeholder", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v6(v15, v14);
  }
  else
  {
    uint64_t v7 = v0[16];
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[14];
    swift_bridgeObjectRelease_n();

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v6(v7, v8);
  }
  v0[17] = v6;
  uint64_t v10 = *(void *)(v0[12] + 120);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[18] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100464DB8;
  return sub_100238024(v10);
}

uint64_t sub_100464DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  uint64_t v6 = (void *)*v4;
  v6[19] = a1;
  v6[20] = a2;
  v6[21] = a3;
  v6[22] = v3;
  swift_task_dealloc();
  uint64_t v7 = v5[12];
  if (v3) {
    uint64_t v8 = sub_100465024;
  }
  else {
    uint64_t v8 = sub_100464EF0;
  }
  return _swift_task_switch(v8, v7, 0);
}

void sub_100464EF0()
{
  if (*(void *)(*(void *)(v0 + 96) + 128))
  {
    uint64_t v1 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 168);
    uint64_t v3 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 88);
    sub_1000172F8(&qword_10065D360);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1005A3EC0;
    *(void *)(v6 + 32) = v5;
    *(void *)(v6 + 40) = v4;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
    *(unsigned char *)(v0 + 48) = 1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10037D9D4(v6, v3, v1, v2, v0 + 16);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(void (**)(void))(v0 + 8);
    v7();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100465024()
{
  uint64_t v17 = v0;
  static Logger.install.getter();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v14 = v0[15];
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[17];
    uint64_t v13 = v0[13];
    uint64_t v3 = v0[10];
    unint64_t v4 = v0[11];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    swift_bridgeObjectRetain();
    v0[7] = sub_1000143F4(v3, v4, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%{public}s] Fetching bag to prioritize a placeholder resulted in error: %@", (uint8_t *)v5, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v15(v14, v13);
  }
  else
  {
    uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[17];
    uint64_t v9 = v0[15];
    uint64_t v10 = v0[13];
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    v8(v9, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1004652FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[76] = a4;
  sub_1000172F8(&qword_10065B220);
  v4[77] = swift_task_alloc();
  v4[78] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[79] = v6;
  v4[80] = *(void *)(v6 - 8);
  v4[81] = swift_task_alloc();
  v4[82] = swift_task_alloc();
  v4[83] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  v4[84] = v7;
  v4[85] = *(void *)(v7 - 8);
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[88] = swift_task_alloc();
  v4[89] = swift_task_alloc();
  v4[90] = swift_task_alloc();
  uint64_t v8 = sub_1000172F8(&qword_100660E50);
  v4[91] = v8;
  v4[92] = *(void *)(v8 - 8);
  v4[93] = swift_task_alloc();
  return _swift_task_switch(sub_10046550C, a4, 0);
}

uint64_t sub_10046550C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[76];
  v4[55] = 0;
  v4[56] = 0;
  v4[54] = 0;
  uint64_t v6 = *(void *)(v5 + 128);
  if (v6)
  {
    id v7 = *(id *)(*(void *)(v6 + 192) + 24);
    sub_1000172F8(&qword_100660E58);
    AsyncStream.makeAsyncIterator()();

    uint64_t v9 = sub_1004764D8(&qword_100663FA0, v8, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
    v4[94] = v9;
    uint64_t v10 = v4[76];
    uint64_t v11 = (void *)swift_task_alloc();
    v4[95] = v11;
    *uint64_t v11 = v4;
    v11[1] = sub_100465650;
    a4 = v4[91];
    a1 = v4 + 8;
    a2 = v10;
    a3 = v9;
  }
  else
  {
    __break(1u);
  }
  return AsyncStream.Iterator.next(isolation:)(a1, a2, a3, a4);
}

uint64_t sub_100465650()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 608);
  swift_task_dealloc();
  return _swift_task_switch(sub_100465760, v1, 0);
}

uint64_t sub_100465760()
{
  uint64_t v1 = *(void **)(v0 + 64);
  *(void *)(v0 + 768) = v1;
  os_log_type_t v2 = *(void **)(v0 + 72);
  unint64_t v3 = *(void *)(v0 + 80);
  *(void *)(v0 + 776) = v2;
  *(void *)(v0 + 784) = v3;
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  *(void *)(v0 + 792) = v5;
  *(void *)(v0 + 800) = v4;
  uint64_t v6 = *(unsigned __int8 *)(v0 + 104);
  *(unsigned char *)(v0 + 57) = v6;
  if (v2)
  {
    *(void *)(v0 + 16) = v1;
    *(void *)(v0 + 24) = v2;
    *(void *)(v0 + 32) = v3;
    *(void *)(v0 + 40) = v5;
    *(void *)(v0 + 48) = v4;
    *(unsigned char *)(v0 + 56) = v6;
    v106 = (_OWORD *)(v0 + 16);
    if (!v1)
    {
      static Logger.install.getter();
      id v25 = v2;
      sub_1003387E4((id)v3, v5, v4, v6);
      id v26 = v25;
      sub_1003387E4((id)v3, v5, v4, v6);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        os_log_type_t v104 = v28;
        v108 = v26;
        uint64_t v29 = v4;
        uint64_t v30 = v5;
        uint64_t v31 = swift_slowAlloc();
        *(void *)(v0 + 592) = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        unint64_t v32 = 0xE600000000000000;
        uint64_t v33 = 0x64656C696166;
        switch(v6)
        {
          case 1:
            unint64_t v32 = 0xE800000000000000;
            uint64_t v33 = 0x73736572676F7270;
            break;
          case 2:
            uint64_t v33 = 0x6C6F686563616C70;
            unint64_t v32 = 0xEB00000000726564;
            break;
          case 3:
            uint64_t v48 = v29 | v30;
            if (v29 | v30 | v3)
            {
              if (v3 != 1 || v48)
              {
                if (v3 != 2 || v48)
                {
                  BOOL v82 = v48 == 0;
                  BOOL v83 = v3 == 3;
                  if (v83 && v82) {
                    uint64_t v33 = 0x64656D75736572;
                  }
                  else {
                    uint64_t v33 = 0x697469726F697270;
                  }
                  if (v83 && v82) {
                    unint64_t v32 = 0xE700000000000000;
                  }
                  else {
                    unint64_t v32 = 0xEB0000000064657ALL;
                  }
                }
                else
                {
                  uint64_t v33 = 0x646573756170;
                }
              }
              else
              {
                uint64_t v33 = 0x64656C65636E6163;
                unint64_t v32 = 0xE800000000000000;
              }
            }
            else
            {
              uint64_t v33 = 0x6574656C706D6F63;
              unint64_t v32 = 0xE900000000000064;
            }
            break;
          default:
            break;
        }
        os_log_t logb = *(os_log_t *)(v0 + 680);
        uint64_t v98 = *(void *)(v0 + 672);
        uint64_t v100 = *(void *)(v0 + 720);
        *(void *)(v31 + 4) = sub_1000143F4(v33, v32, (uint64_t *)(v0 + 592));
        swift_bridgeObjectRelease();

        uint64_t v44 = v30;
        uint64_t v84 = v30;
        uint64_t v45 = v29;
        uint64_t v46 = v108;
        sub_10033882C((void *)v3, v84, v45, v6);

        sub_10033882C((void *)v3, v44, v45, v6);
        _os_log_impl((void *)&_mh_execute_header, v27, v104, "Received event: %s", (uint8_t *)v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(uint64_t, uint64_t))logb[1].isa)(v100, v98);
      }
      else
      {
        uint64_t v109 = *(void *)(v0 + 720);
        id v37 = v27;
        uint64_t v38 = v26;
        uint64_t v39 = v4;
        uint64_t v40 = *(void *)(v0 + 680);
        uint64_t v41 = v5;
        uint64_t v42 = *(void *)(v0 + 672);

        sub_10033882C((void *)v3, v41, v39, v6);
        sub_10033882C((void *)v3, v41, v39, v6);

        uint64_t v43 = v42;
        uint64_t v44 = v41;
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v109, v43);
        uint64_t v45 = v39;
        uint64_t v46 = v38;
      }
      sub_100462F20((uint64_t)v106);

      sub_10033882C((void *)v3, v44, v45, v6);
      goto LABEL_68;
    }
    id v7 = v1;
    static Logger.install.getter();
    id v8 = v7;
    id v9 = v2;
    sub_1003387E4((id)v3, v5, v4, v6);
    id v107 = v8;
    id v10 = v9;
    sub_1003387E4((id)v3, v5, v4, v6);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    uint64_t v102 = v4;
    v103 = (void *)v3;
    uint64_t v99 = v10;
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v91 = v12;
      log = v11;
      uint64_t v95 = v5;
      uint64_t v13 = *(void *)(v0 + 664);
      uint64_t v14 = *(void *)(v0 + 640);
      uint64_t v15 = *(void *)(v0 + 632);
      uint64_t v16 = swift_slowAlloc();
      *(void *)(v0 + 600) = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      id v17 = [v107 uniqueIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      *(void *)(v16 + 4) = sub_1000143F4(v18, v20, (uint64_t *)(v0 + 600));
      swift_bridgeObjectRelease();

      *(_WORD *)(v16 + 12) = 2080;
      unint64_t v21 = 0xE600000000000000;
      uint64_t v5 = v95;
      uint64_t v22 = 0x64656C696166;
      switch(v6)
      {
        case 1:
          unint64_t v21 = 0xE800000000000000;
          uint64_t v22 = 0x73736572676F7270;
          break;
        case 2:
          uint64_t v22 = 0x6C6F686563616C70;
          unint64_t v21 = 0xEB00000000726564;
          break;
        case 3:
          uint64_t v47 = v102 | v95;
          if (v102 | v95 | v3)
          {
            if (v3 != 1 || v47)
            {
              if (v3 != 2 || v47)
              {
                BOOL v49 = v47 == 0;
                BOOL v50 = v3 == 3;
                if (v50 && v49) {
                  uint64_t v22 = 0x64656D75736572;
                }
                else {
                  uint64_t v22 = 0x697469726F697270;
                }
                if (v50 && v49) {
                  unint64_t v21 = 0xE700000000000000;
                }
                else {
                  unint64_t v21 = 0xEB0000000064657ALL;
                }
              }
              else
              {
                uint64_t v22 = 0x646573756170;
              }
            }
            else
            {
              uint64_t v22 = 0x64656C65636E6163;
              unint64_t v21 = 0xE800000000000000;
            }
          }
          else
          {
            uint64_t v22 = 0x6574656C706D6F63;
            unint64_t v21 = 0xE900000000000064;
          }
          break;
        default:
          break;
      }
      uint64_t v51 = *(void *)(v0 + 680);
      uint64_t v89 = *(void *)(v0 + 672);
      uint64_t v90 = *(void *)(v0 + 712);
      *(void *)(v16 + 14) = sub_1000143F4(v22, v21, (uint64_t *)(v0 + 600));
      swift_bridgeObjectRelease();
      id v36 = v107;

      sub_10033882C(v103, v95, v102, v6);
      sub_10033882C(v103, v95, v102, v6);
      _os_log_impl((void *)&_mh_execute_header, log, v91, "Received coordinator event: %s, %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v35(v90, v89);
    }
    else
    {
      uint64_t v101 = *(void *)(v0 + 712);
      uint64_t v34 = *(void *)(v0 + 680);
      uint64_t v96 = *(void *)(v0 + 672);

      sub_10033882C((void *)v3, v5, v4, v6);
      sub_10033882C((void *)v3, v5, v4, v6);

      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v35(v101, v96);
      id v36 = v107;
    }
    *(void *)(v0 + 808) = v35;
    uint64_t v52 = *(void *)(v0 + 608);
    id v53 = objc_msgSend(v36, "uniqueIdentifier", v89, v90);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    uint64_t v54 = *(void *)(v52 + 152);
    if (*(void *)(v54 + 16) && (unint64_t v55 = sub_10000F800(*(void *)(v0 + 656)), (v56 & 1) != 0))
    {
      uint64_t v57 = *(void *)(v0 + 608);
      uint64_t v58 = *(void *)(*(void *)(v54 + 56) + 8 * v55);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v59 = *(void *)(v57 + 136);
      if (*(void *)(v59 + 16) && (unint64_t v60 = sub_10045257C(v58), (v61 & 1) != 0))
      {
        sub_10019B17C(*(void *)(v59 + 56) + 40 * v60, v0 + 232);
      }
      else
      {
        *(void *)(v0 + 264) = 0;
        *(_OWORD *)(v0 + 232) = 0u;
        *(_OWORD *)(v0 + 248) = 0u;
      }
      swift_endAccess();
      if (*(void *)(v0 + 256))
      {
        sub_1000172F8(&qword_100664138);
        type metadata accessor for IPA_AppInstall();
        if (swift_dynamicCast())
        {
          uint64_t v67 = *(void *)(v0 + 624);
          char v68 = v6;
          uint64_t v69 = *(void *)(v0 + 584);
          uint64_t v70 = type metadata accessor for TaskPriority();
          uint64_t v71 = *(void *)(v70 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v67, 1, 1, v70);
          uint64_t v72 = swift_allocObject();
          *(void *)(v72 + 16) = 0;
          *(void *)(v72 + 24) = 0;
          *(void *)(v72 + 32) = v69;
          long long v73 = *(_OWORD *)(v0 + 32);
          *(_OWORD *)(v72 + 40) = *v106;
          *(_OWORD *)(v72 + 56) = v73;
          *(_OWORD *)(v72 + 65) = *(_OWORD *)(v0 + 41);
          os_log_t loga = (os_log_t)v71;
          LODWORD(v71) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v67, 1, v70);
          id v111 = v107;
          os_log_t v105 = v99;
          uint64_t v97 = v5;
          sub_1003387E4(v103, v5, v102, v68);
          swift_retain();
          uint64_t v74 = *(void *)(v0 + 624);
          if (v71 == 1)
          {
            sub_10001729C(*(void *)(v0 + 624), &qword_10065B220);
            uint64_t v75 = 0;
            uint64_t v76 = 0;
          }
          else
          {
            TaskPriority.rawValue.getter();
            ((void (*)(uint64_t, uint64_t))loga[1].isa)(v74, v70);
            if (*(void *)(v72 + 16))
            {
              swift_getObjectType();
              swift_unknownObjectRetain();
              uint64_t v75 = dispatch thunk of Actor.unownedExecutor.getter();
              uint64_t v76 = v77;
              swift_unknownObjectRelease();
            }
            else
            {
              uint64_t v75 = 0;
              uint64_t v76 = 0;
            }
          }
          uint64_t v78 = swift_allocObject();
          *(void *)(v78 + 16) = &unk_100664158;
          *(void *)(v78 + 24) = v72;
          if (v76 | v75)
          {
            *(void *)(v0 + 304) = 0;
            *(void *)(v0 + 312) = 0;
            *(void *)(v0 + 320) = v75;
            *(void *)(v0 + 328) = v76;
          }
          uint64_t v79 = *(void *)(v0 + 656);
          uint64_t v80 = *(void *)(v0 + 640);
          uint64_t v81 = *(void *)(v0 + 632);
          swift_task_create();

          swift_release();
          swift_release();
          sub_10033882C(v103, v97, v102, v68);
          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
LABEL_68:
          uint64_t v85 = *(void *)(v0 + 752);
          uint64_t v86 = *(void *)(v0 + 608);
          uint64_t v87 = (void *)swift_task_alloc();
          *(void *)(v0 + 760) = v87;
          *uint64_t v87 = v0;
          v87[1] = sub_100465650;
          uint64_t v88 = *(void *)(v0 + 728);
          return AsyncStream.Iterator.next(isolation:)(v0 + 64, v86, v85, v88);
        }
      }
      else
      {
        sub_10001729C(v0 + 232, &qword_10065F220);
      }
    }
    else
    {
      swift_endAccess();
    }
    uint64_t v62 = *(void *)(v0 + 656);
    uint64_t v63 = *(void *)(*(void *)(v0 + 608) + 112);
    *(void *)(v0 + 816) = v63;
    uint64_t v64 = swift_task_alloc();
    *(void *)(v0 + 824) = v64;
    *(void *)(v64 + 16) = v62;
    uint64_t v65 = swift_task_alloc();
    *(void *)(v0 + 832) = v65;
    *(void *)(v65 + 16) = sub_100475DB0;
    *(void *)(v65 + 24) = v64;
    v110 = (char *)&dword_100660890 + dword_100660890;
    swift_retain();
    uint64_t v66 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v66;
    void *v66 = v0;
    v66[1] = sub_1004665F4;
    return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, uint64_t *@<X8>), uint64_t, uint64_t))v110)(sub_100475DB8, v65, v63);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 736) + 8))(*(void *)(v0 + 744), *(void *)(v0 + 728));
    sub_100475D70(*(void *)(v0 + 432));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_1004665F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *v3;
  *(void *)(v5 + 848) = a1;
  *(void *)(v5 + 856) = a2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 608);
  if (v2)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    id v7 = sub_10046897C;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    id v7 = sub_1004667AC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004667AC()
{
  uint64_t v1 = *(void **)(v0 + 856);
  if (!v1)
  {
    uint64_t v12 = *(void *)(v0 + 792);
    uint64_t v13 = *(void **)(v0 + 784);
    v178 = *(void **)(v0 + 776);
    os_log_t logc = *(os_log_t *)(v0 + 800);
    uint64_t v14 = *(void **)(v0 + 768);
    uint64_t v15 = *(void *)(v0 + 656);
    uint64_t v16 = *(void *)(v0 + 648);
    uint64_t v17 = *(void *)(v0 + 640);
    uint64_t v18 = *(void *)(v0 + 632);
    char v19 = *(unsigned char *)(v0 + 57);
    static Logger.install.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
    id v20 = v14;
    id v21 = v178;
    sub_1003387E4(v13, v12, (uint64_t)logc, v19);
    id v22 = v20;
    id v23 = v21;
    sub_1003387E4(v13, v12, (uint64_t)logc, v19);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    log = v24;
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v179 = v25;
      uint64_t v26 = *(unsigned __int8 *)(v0 + 57);
      uint64_t v27 = swift_slowAlloc();
      *(void *)(v0 + 576) = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446466;
      unint64_t v28 = 0xE600000000000000;
      uint64_t v29 = 0x64656C696166;
      switch(v26)
      {
        case 1:
          unint64_t v28 = 0xE800000000000000;
          uint64_t v29 = 0x73736572676F7270;
          break;
        case 2:
          uint64_t v29 = 0x6C6F686563616C70;
          unint64_t v28 = 0xEB00000000726564;
          break;
        case 3:
          uint64_t v106 = *(void *)(v0 + 784);
          if (*(void *)(v0 + 792) | *(void *)(v0 + 800) | v106)
          {
            if (v106 == 1 && *(_OWORD *)(v0 + 792) == 0)
            {
              uint64_t v29 = 0x64656C65636E6163;
              unint64_t v28 = 0xE800000000000000;
            }
            else if (v106 == 2 && *(_OWORD *)(v0 + 792) == 0)
            {
              uint64_t v29 = 0x646573756170;
            }
            else
            {
              BOOL v118 = *(_OWORD *)(v0 + 792) == 0;
              BOOL v119 = v106 == 3;
              if (v119 && v118) {
                uint64_t v29 = 0x64656D75736572;
              }
              else {
                uint64_t v29 = 0x697469726F697270;
              }
              if (v119 && v118) {
                unint64_t v28 = 0xE700000000000000;
              }
              else {
                unint64_t v28 = 0xEB0000000064657ALL;
              }
            }
          }
          else
          {
            uint64_t v29 = 0x6574656C706D6F63;
            unint64_t v28 = 0xE900000000000064;
          }
          break;
        default:
          break;
      }
      uint64_t v120 = *(void *)(v0 + 792);
      v121 = *(void **)(v0 + 784);
      v122 = *(void **)(v0 + 776);
      v123 = *(void **)(v0 + 768);
      uint64_t v166 = *(void *)(v0 + 704);
      v169 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
      uint64_t v159 = *(void *)(v0 + 648);
      uint64_t v161 = *(void *)(v0 + 640);
      uint64_t v156 = *(void *)(v0 + 800);
      uint64_t v157 = *(void *)(v0 + 632);
      uint64_t v163 = *(void *)(v0 + 672);
      char v124 = *(unsigned char *)(v0 + 57);
      *(void *)(v0 + 568) = sub_1000143F4(v29, v28, (uint64_t *)(v0 + 576));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      sub_10033882C(v121, v120, v156, v124);
      sub_10033882C(v121, v120, v156, v124);
      *(_WORD *)(v27 + 12) = 2082;
      sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 536) = sub_1000143F4(v125, v126, (uint64_t *)(v0 + 576));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v195 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
      v195(v159, v157);
      _os_log_impl((void *)&_mh_execute_header, log, v179, "Installation not found for \"%{public}s\" for \"%{public}s\"", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v169(v166, v163);
    }
    else
    {
      uint64_t v64 = *(void *)(v0 + 800);
      uint64_t v65 = *(void *)(v0 + 792);
      uint64_t v66 = *(void **)(v0 + 784);
      uint64_t v67 = *(void **)(v0 + 776);
      char v68 = *(void **)(v0 + 768);
      uint64_t v177 = *(void *)(v0 + 704);
      v181 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
      uint64_t v174 = *(void *)(v0 + 672);
      uint64_t v194 = *(void *)(v0 + 648);
      uint64_t v69 = *(void *)(v0 + 640);
      uint64_t v70 = *(void *)(v0 + 632);
      char v71 = *(unsigned char *)(v0 + 57);

      sub_10033882C(v66, v65, v64, v71);
      sub_10033882C(v66, v65, v64, v71);
      uint64_t v72 = v194;
      v195 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
      v195(v72, v70);

      v181(v177, v174);
    }
    os_log_t loge = *(os_log_t *)(v0 + 800);
    uint64_t v127 = *(void *)(v0 + 792);
    v128 = *(void **)(v0 + 784);
    v129 = *(void **)(v0 + 776);
    v130 = *(void **)(v0 + 768);
    uint64_t v131 = *(void *)(v0 + 656);
    uint64_t v132 = *(void *)(v0 + 632);
    char v133 = *(unsigned char *)(v0 + 57);
    sub_100462F20(v0 + 16);

    sub_10033882C(v128, v127, (uint64_t)loge, v133);
    v195(v131, v132);
    goto LABEL_78;
  }
  uint64_t v2 = *(void *)(v0 + 608);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 136);
  if (*(void *)(v3 + 16) && (unint64_t v4 = sub_10045257C(*(void *)(v0 + 848)), (v5 & 1) != 0))
  {
    sub_10019B17C(*(void *)(v3 + 56) + 40 * v4, v0 + 192);
  }
  else
  {
    *(void *)(v0 + 224) = 0;
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 208) = 0u;
  }
  swift_endAccess();
  uint64_t v6 = *(void *)(v0 + 216);
  id v7 = v1;
  sub_10001729C(v0 + 192, &qword_10065F220);
  uint64_t v8 = *(void *)(v0 + 608);
  if (v6)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 136);
    if (*(void *)(v9 + 16) && (unint64_t v10 = sub_10045257C(*(void *)(v0 + 848)), (v11 & 1) != 0))
    {
      sub_10019B17C(*(void *)(v9 + 56) + 40 * v10, v0 + 112);
    }
    else
    {
      *(void *)(v0 + 144) = 0;
      *(_OWORD *)(v0 + 112) = 0u;
      *(_OWORD *)(v0 + 128) = 0u;
    }
    swift_endAccess();
    if (*(void *)(v0 + 136))
    {
      sub_1000172F8(&qword_100664138);
      type metadata accessor for IPA_AppInstall();
      if (swift_dynamicCast())
      {
        uint64_t v30 = *(void *)(v0 + 848);
        uint64_t v190 = *(void *)(v0 + 800);
        v176 = *(void **)(v0 + 784);
        uint64_t v180 = *(void *)(v0 + 792);
        v171 = *(void **)(v0 + 768);
        v173 = *(void **)(v0 + 776);
        uint64_t v31 = *(void *)(v0 + 664);
        uint64_t v32 = *(void *)(v0 + 640);
        uint64_t v33 = *(void *)(v0 + 632);
        uint64_t v165 = *(void *)(v0 + 616);
        uint64_t v34 = *(void *)(v0 + 608);
        uint64_t v35 = *(void *)(v0 + 520);
        char v168 = *(unsigned char *)(v0 + 57);
        (*(void (**)(uint64_t, void, uint64_t))(v32 + 16))(v31, *(void *)(v0 + 656), v33);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v198 = *(void *)(v34 + 152);
        *(void *)(v34 + 152) = 0x8000000000000000;
        sub_10052A9E8(v30, v31, isUniquelyReferenced_nonNull_native);
        *(void *)(v34 + 152) = v198;
        swift_bridgeObjectRelease();
        os_log_t loga = *(os_log_t *)(v32 + 8);
        ((void (*)(uint64_t, uint64_t))loga)(v31, v33);
        swift_endAccess();
        uint64_t v37 = type metadata accessor for TaskPriority();
        uint64_t v38 = *(void *)(v37 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v165, 1, 1, v37);
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = 0;
        *(void *)(v39 + 24) = 0;
        *(void *)(v39 + 32) = v35;
        long long v40 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v39 + 40) = *(_OWORD *)(v0 + 16);
        *(_OWORD *)(v39 + 56) = v40;
        *(_OWORD *)(v39 + 65) = *(_OWORD *)(v0 + 41);
        LODWORD(v33) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v165, 1, v37);
        id v41 = v171;
        id v42 = v173;
        sub_1003387E4(v176, v180, v190, v168);
        swift_retain();
        uint64_t v43 = *(void *)(v0 + 616);
        if (v33 == 1)
        {
          sub_10001729C(*(void *)(v0 + 616), &qword_10065B220);
          uint64_t v44 = 0;
          uint64_t v45 = 0;
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v37);
          if (*(void *)(v39 + 16))
          {
            swift_getObjectType();
            swift_unknownObjectRetain();
            uint64_t v44 = dispatch thunk of Actor.unownedExecutor.getter();
            uint64_t v45 = v105;
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v44 = 0;
            uint64_t v45 = 0;
          }
        }
        uint64_t v109 = swift_allocObject();
        *(void *)(v109 + 16) = &unk_100664148;
        *(void *)(v109 + 24) = v39;
        if (v45 | v44)
        {
          *(void *)(v0 + 272) = 0;
          *(void *)(v0 + 280) = 0;
          *(void *)(v0 + 288) = v44;
          *(void *)(v0 + 296) = v45;
        }
        v110 = *(void **)(v0 + 856);
        uint64_t v183 = *(void *)(v0 + 800);
        uint64_t v111 = *(void *)(v0 + 792);
        uint64_t v112 = *(void **)(v0 + 784);
        v113 = *(void **)(v0 + 776);
        v114 = *(void **)(v0 + 768);
        uint64_t v115 = *(void *)(v0 + 656);
        uint64_t v116 = *(void *)(v0 + 632);
        char v117 = *(unsigned char *)(v0 + 57);
        swift_task_create();

        swift_release();
        swift_release();
        sub_10033882C(v112, v111, v183, v117);
        ((void (*)(uint64_t, uint64_t))loga)(v115, v116);
LABEL_78:
        uint64_t v141 = *(void *)(v0 + 752);
        uint64_t v142 = *(void *)(v0 + 608);
        v143 = (void *)swift_task_alloc();
        *(void *)(v0 + 760) = v143;
        void *v143 = v0;
        v143[1] = sub_100465650;
        uint64_t v144 = *(void *)(v0 + 728);
        return AsyncStream.Iterator.next(isolation:)(v0 + 64, v142, v141, v144);
      }
    }
    else
    {
      sub_10001729C(v0 + 112, &qword_10065F220);
    }
    uint64_t v73 = *(void *)(v0 + 800);
    uint64_t v74 = *(void *)(v0 + 792);
    uint64_t v75 = *(void **)(v0 + 784);
    uint64_t v76 = *(void **)(v0 + 776);
    uint64_t v77 = *(void **)(v0 + 768);
    char v78 = *(unsigned char *)(v0 + 57);
    static Logger.install.getter();
    id v79 = v77;
    id v80 = v76;
    sub_1003387E4(v75, v74, v73, v78);
    id v81 = v79;
    id v82 = v80;
    sub_1003387E4(v75, v74, v73, v78);
    BOOL v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.fault.getter();
    v196 = v83;
    if (os_log_type_enabled(v83, v84))
    {
      os_log_type_t v182 = v84;
      uint64_t v85 = *(unsigned __int8 *)(v0 + 57);
      uint64_t v86 = swift_slowAlloc();
      *(void *)(v0 + 528) = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136315394;
      unint64_t v87 = 0xE600000000000000;
      uint64_t v88 = 0x64656C696166;
      switch(v85)
      {
        case 1:
          unint64_t v87 = 0xE800000000000000;
          uint64_t v88 = 0x73736572676F7270;
          break;
        case 2:
          uint64_t v88 = 0x6C6F686563616C70;
          unint64_t v87 = 0xEB00000000726564;
          break;
        case 3:
          uint64_t v107 = *(void *)(v0 + 784);
          if (*(void *)(v0 + 792) | *(void *)(v0 + 800) | v107)
          {
            if (v107 == 1 && *(_OWORD *)(v0 + 792) == 0)
            {
              uint64_t v88 = 0x64656C65636E6163;
              unint64_t v87 = 0xE800000000000000;
            }
            else if (v107 == 2 && *(_OWORD *)(v0 + 792) == 0)
            {
              uint64_t v88 = 0x646573756170;
            }
            else
            {
              BOOL v134 = *(_OWORD *)(v0 + 792) == 0;
              BOOL v135 = v107 == 3;
              if (v135 && v134) {
                uint64_t v88 = 0x64656D75736572;
              }
              else {
                uint64_t v88 = 0x697469726F697270;
              }
              if (v135 && v134) {
                unint64_t v87 = 0xE700000000000000;
              }
              else {
                unint64_t v87 = 0xEB0000000064657ALL;
              }
            }
          }
          else
          {
            uint64_t v88 = 0x6574656C706D6F63;
            unint64_t v87 = 0xE900000000000064;
          }
          break;
        default:
          break;
      }
      uint64_t v158 = *(void *)(v0 + 848);
      v160 = *(void **)(v0 + 856);
      v167 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
      uint64_t v193 = *(void *)(v0 + 800);
      uint64_t v136 = *(void *)(v0 + 792);
      v137 = *(void **)(v0 + 784);
      v138 = *(void **)(v0 + 776);
      v139 = *(void **)(v0 + 768);
      uint64_t v162 = *(void *)(v0 + 672);
      uint64_t v164 = *(void *)(v0 + 688);
      char v140 = *(unsigned char *)(v0 + 57);
      *(void *)(v0 + 504) = sub_1000143F4(v88, v87, (uint64_t *)(v0 + 528));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100475DFC(v139, v138, v137, v136, v193, v140);

      sub_10033882C(v137, v136, v193, v140);
      *(_WORD *)(v86 + 12) = 2050;
      *(void *)(v0 + 512) = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v83, v182, "Received unexpected coordinator event %s for '%{public}lld'", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10033882C(v137, v136, v193, v140);
      v167(v164, v162);
    }
    else
    {
      uint64_t v89 = *(void **)(v0 + 856);
      v192 = *(void (**)(os_log_t, uint64_t))(v0 + 808);
      uint64_t v90 = *(void *)(v0 + 800);
      uint64_t v91 = *(void *)(v0 + 792);
      v92 = *(void **)(v0 + 784);
      v93 = *(void **)(v0 + 776);
      os_log_t v94 = *(void **)(v0 + 768);
      os_log_t logd = *(os_log_t *)(v0 + 688);
      uint64_t v95 = *(void *)(v0 + 672);
      char v96 = *(unsigned char *)(v0 + 57);

      sub_10033882C(v92, v91, v90, v96);
      sub_100475DFC(v94, v93, v92, v91, v90, v96);

      sub_10033882C(v92, v91, v90, v96);
      v192(logd, v95);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 640) + 8))(*(void *)(v0 + 656), *(void *)(v0 + 632));
    goto LABEL_78;
  }
  uint64_t v46 = *(void *)(v8 + 128);
  *(void *)(v0 + 864) = v46;
  if (!v46)
  {
    __break(1u);
    JUMPOUT(0x100467B4CLL);
  }
  uint64_t v47 = *(void *)(v0 + 800);
  uint64_t v48 = *(void *)(v0 + 792);
  BOOL v49 = *(void **)(v0 + 784);
  BOOL v50 = *(void **)(v0 + 776);
  uint64_t v51 = *(void **)(v0 + 768);
  char v52 = *(unsigned char *)(v0 + 57);
  swift_retain();
  static Logger.install.getter();
  id v53 = v51;
  id v54 = v50;
  sub_1003387E4(v49, v48, v47, v52);
  id v55 = v53;
  id v56 = v54;
  sub_1003387E4(v49, v48, v47, v52);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  v191 = v57;
  if (os_log_type_enabled(v57, v58))
  {
    os_log_type_t logb = v58;
    uint64_t v59 = *(void *)(v0 + 848);
    uint64_t v60 = *(unsigned __int8 *)(v0 + 57);
    uint64_t v61 = swift_slowAlloc();
    *(void *)(v0 + 544) = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 134349314;
    *(void *)(v0 + 552) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 12) = 2082;
    unint64_t v62 = 0xE600000000000000;
    uint64_t v63 = 0x64656C696166;
    switch(v60)
    {
      case 1:
        unint64_t v62 = 0xE800000000000000;
        uint64_t v63 = 0x73736572676F7270;
        break;
      case 2:
        uint64_t v63 = 0x6C6F686563616C70;
        unint64_t v62 = 0xEB00000000726564;
        break;
      case 3:
        uint64_t v108 = *(void *)(v0 + 784);
        if (*(void *)(v0 + 792) | *(void *)(v0 + 800) | v108)
        {
          if (v108 == 1 && *(_OWORD *)(v0 + 792) == 0)
          {
            uint64_t v63 = 0x64656C65636E6163;
            unint64_t v62 = 0xE800000000000000;
          }
          else if (v108 == 2 && *(_OWORD *)(v0 + 792) == 0)
          {
            uint64_t v63 = 0x646573756170;
          }
          else
          {
            BOOL v145 = *(_OWORD *)(v0 + 792) == 0;
            BOOL v146 = v108 == 3;
            if (v146 && v145) {
              uint64_t v63 = 0x64656D75736572;
            }
            else {
              uint64_t v63 = 0x697469726F697270;
            }
            if (v146 && v145) {
              unint64_t v62 = 0xE700000000000000;
            }
            else {
              unint64_t v62 = 0xEB0000000064657ALL;
            }
          }
        }
        else
        {
          uint64_t v63 = 0x6574656C706D6F63;
          unint64_t v62 = 0xE900000000000064;
        }
        break;
      default:
        break;
    }
    uint64_t v147 = *(void *)(v0 + 800);
    uint64_t v148 = *(void *)(v0 + 792);
    v149 = *(void **)(v0 + 784);
    v150 = *(void **)(v0 + 776);
    v151 = *(void **)(v0 + 768);
    uint64_t v172 = *(void *)(v0 + 696);
    v175 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v170 = *(void *)(v0 + 672);
    char v152 = *(unsigned char *)(v0 + 57);
    *(void *)(v0 + 560) = sub_1000143F4(v63, v62, (uint64_t *)(v0 + 544));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100475DFC(v151, v150, v149, v148, v147, v152);

    sub_10033882C(v149, v148, v147, v152);
    _os_log_impl((void *)&_mh_execute_header, v191, logb, "Creating installation \"%{public}lld\" to handle event: %{public}s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v175(v172, v170);
  }
  else
  {
    v197 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v97 = *(void *)(v0 + 800);
    uint64_t v98 = *(void *)(v0 + 792);
    uint64_t v99 = *(void **)(v0 + 784);
    uint64_t v100 = *(void **)(v0 + 776);
    uint64_t v101 = *(void **)(v0 + 768);
    uint64_t v102 = *(void *)(v0 + 696);
    uint64_t v103 = *(void *)(v0 + 672);
    char v104 = *(unsigned char *)(v0 + 57);
    sub_100475DFC(v101, v100, v99, v98, v97, v104);

    sub_10033882C(v99, v98, v97, v104);
    v197(v102, v103);
  }
  v153 = (void *)swift_task_alloc();
  *(void *)(v0 + 872) = v153;
  void *v153 = v0;
  v153[1] = sub_100467B7C;
  uint64_t v154 = *(void *)(v0 + 608);
  v153[8] = v0 + 432;
  v153[9] = v154;
  return _swift_task_switch(sub_100469334, 0, 0);
}

uint64_t sub_100467B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)*v4;
  id v7 = (void *)*v4;
  v7[110] = a1;
  v7[111] = a2;
  v7[112] = v3;
  swift_task_dealloc();
  uint64_t v8 = v6[76];
  if (v3)
  {
    uint64_t v9 = sub_100468FA8;
  }
  else
  {
    v7[113] = a3;
    uint64_t v9 = sub_100467CC8;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_100467CC8()
{
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 864);
  uint64_t v3 = *(void *)(v0 + 856);
  uint64_t v4 = *(void *)(v0 + 848);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 912) = v5;
  long long v6 = *(_OWORD *)(v0 + 880);
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v2;
  *(void *)(v5 + 32) = v3;
  *(_OWORD *)(v5 + 40) = v6;
  *(void *)(v5 + 56) = v1;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 920) = v7;
  *(void *)(v7 + 16) = sub_100475E6C;
  *(void *)(v7 + 24) = v5;
  uint64_t v11 = (char *)&dword_100660718 + dword_100660718;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 928) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100467E00;
  uint64_t v9 = *(void *)(v0 + 816);
  return ((uint64_t (*)(uint64_t (*)@<X0>(void *@<X0>, uint64_t *@<X8>), uint64_t, uint64_t))v11)(sub_1004785AC, v7, v9);
}

uint64_t sub_100467E00(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 936) = a1;
  *(void *)(v4 + 944) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 608);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1) {
    long long v6 = sub_10046914C;
  }
  else {
    long long v6 = sub_100467F94;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100467F94()
{
  uint64_t v1 = *(void *)(v0 + 936);
  if (v1)
  {
    *(void *)(v0 + 176) = type metadata accessor for IPA_AppInstall();
    *(void *)(v0 + 184) = &off_100642748;
    *(void *)(v0 + 152) = v1;
  }
  else
  {
    *(void *)(v0 + 184) = 0;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
  }
  uint64_t v2 = *(void *)(v0 + 848);
  swift_beginAccess();
  sub_1002B5D44(v0 + 152, v2);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v3 = *(void *)(v0 + 608);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 136);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_10045257C(*(void *)(v0 + 848)), (v6 & 1) != 0))
  {
    sub_10019B17C(*(void *)(v4 + 56) + 40 * v5, v0 + 112);
  }
  else
  {
    *(void *)(v0 + 144) = 0;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
  }
  swift_endAccess();
  if (*(void *)(v0 + 136))
  {
    sub_1000172F8(&qword_100664138);
    type metadata accessor for IPA_AppInstall();
    if (swift_dynamicCast())
    {
      uint64_t v7 = *(void *)(v0 + 848);
      os_log_t loga = *(os_log_t *)(v0 + 800);
      id v79 = *(void **)(v0 + 784);
      uint64_t v80 = *(void *)(v0 + 792);
      uint64_t v77 = *(void **)(v0 + 768);
      char v78 = *(void **)(v0 + 776);
      uint64_t v8 = *(void *)(v0 + 664);
      uint64_t v9 = *(void *)(v0 + 640);
      uint64_t v10 = *(void *)(v0 + 632);
      uint64_t v73 = *(void *)(v0 + 616);
      uint64_t v11 = *(void *)(v0 + 608);
      uint64_t v12 = *(void *)(v0 + 520);
      char v75 = *(unsigned char *)(v0 + 57);
      (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v8, *(void *)(v0 + 656), v10);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v89 = *(void *)(v11 + 152);
      *(void *)(v11 + 152) = 0x8000000000000000;
      sub_10052A9E8(v7, v8, isUniquelyReferenced_nonNull_native);
      *(void *)(v11 + 152) = v89;
      swift_bridgeObjectRelease();
      BOOL v83 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
      v83(v8, v10);
      swift_endAccess();
      uint64_t v14 = type metadata accessor for TaskPriority();
      uint64_t v15 = *(void *)(v14 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v73, 1, 1, v14);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = v12;
      long long v17 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v16 + 56) = v17;
      *(_OWORD *)(v16 + 65) = *(_OWORD *)(v0 + 41);
      LODWORD(v10) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v73, 1, v14);
      id v18 = v77;
      id v19 = v78;
      sub_1003387E4(v79, v80, (uint64_t)loga, v75);
      swift_retain();
      uint64_t v20 = *(void *)(v0 + 616);
      if (v10 == 1)
      {
        sub_10001729C(*(void *)(v0 + 616), &qword_10065B220);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v14);
        if (*(void *)(v16 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v22 = v47;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
        }
      }
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = &unk_100664148;
      *(void *)(v49 + 24) = v16;
      if (v22 | v21)
      {
        *(void *)(v0 + 272) = 0;
        *(void *)(v0 + 280) = 0;
        *(void *)(v0 + 288) = v21;
        *(void *)(v0 + 296) = v22;
      }
      BOOL v50 = *(void **)(v0 + 856);
      uint64_t v82 = *(void *)(v0 + 800);
      uint64_t v51 = *(void *)(v0 + 792);
      char v52 = *(void **)(v0 + 784);
      id v53 = *(void **)(v0 + 776);
      id v54 = *(void **)(v0 + 768);
      uint64_t v55 = *(void *)(v0 + 656);
      uint64_t v56 = *(void *)(v0 + 632);
      char v57 = *(unsigned char *)(v0 + 57);
      swift_task_create();

      swift_release();
      swift_release();
      sub_10033882C(v52, v51, v82, v57);
      v83(v55, v56);
      goto LABEL_40;
    }
  }
  else
  {
    sub_10001729C(v0 + 112, &qword_10065F220);
  }
  uint64_t v23 = *(void *)(v0 + 800);
  uint64_t v24 = *(void *)(v0 + 792);
  os_log_type_t v25 = *(void **)(v0 + 784);
  uint64_t v26 = *(void **)(v0 + 776);
  uint64_t v27 = *(void **)(v0 + 768);
  char v28 = *(unsigned char *)(v0 + 57);
  static Logger.install.getter();
  id v29 = v27;
  id v30 = v26;
  sub_1003387E4(v25, v24, v23, v28);
  id v31 = v29;
  id v32 = v30;
  sub_1003387E4(v25, v24, v23, v28);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.fault.getter();
  log = v33;
  if (os_log_type_enabled(v33, v34))
  {
    os_log_type_t v81 = v34;
    uint64_t v35 = *(unsigned __int8 *)(v0 + 57);
    uint64_t v36 = swift_slowAlloc();
    *(void *)(v0 + 528) = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315394;
    unint64_t v37 = 0xE600000000000000;
    uint64_t v38 = 0x64656C696166;
    switch(v35)
    {
      case 1:
        unint64_t v37 = 0xE800000000000000;
        uint64_t v38 = 0x73736572676F7270;
        break;
      case 2:
        unint64_t v37 = 0xEB00000000726564;
        uint64_t v38 = 0x6C6F686563616C70;
        break;
      case 3:
        uint64_t v48 = *(void *)(v0 + 784);
        if (*(void *)(v0 + 792) | *(void *)(v0 + 800) | v48)
        {
          if (v48 == 1 && *(_OWORD *)(v0 + 792) == 0)
          {
            unint64_t v37 = 0xE800000000000000;
            uint64_t v38 = 0x64656C65636E6163;
          }
          else if (v48 == 2 && *(_OWORD *)(v0 + 792) == 0)
          {
            uint64_t v38 = 0x646573756170;
          }
          else
          {
            BOOL v58 = *(_OWORD *)(v0 + 792) == 0;
            BOOL v59 = v48 == 3;
            if (v59 && v58) {
              uint64_t v38 = 0x64656D75736572;
            }
            else {
              uint64_t v38 = 0x697469726F697270;
            }
            if (v59 && v58) {
              unint64_t v37 = 0xE700000000000000;
            }
            else {
              unint64_t v37 = 0xEB0000000064657ALL;
            }
          }
        }
        else
        {
          unint64_t v37 = 0xE900000000000064;
          uint64_t v38 = 0x6574656C706D6F63;
        }
        break;
      default:
        break;
    }
    uint64_t v70 = *(void *)(v0 + 848);
    char v71 = *(void **)(v0 + 856);
    uint64_t v85 = *(void *)(v0 + 800);
    uint64_t v60 = *(void *)(v0 + 792);
    uint64_t v61 = *(void **)(v0 + 784);
    unint64_t v62 = *(void **)(v0 + 776);
    uint64_t v63 = *(void **)(v0 + 768);
    uint64_t v74 = *(void *)(v0 + 688);
    uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v72 = *(void *)(v0 + 672);
    char v64 = *(unsigned char *)(v0 + 57);
    *(void *)(v0 + 504) = sub_1000143F4(v38, v37, (uint64_t *)(v0 + 528));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100475DFC(v63, v62, v61, v60, v85, v64);

    sub_10033882C(v61, v60, v85, v64);
    *(_WORD *)(v36 + 12) = 2050;
    *(void *)(v0 + 512) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, v81, "Received unexpected coordinator event %s for '%{public}lld'", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10033882C(v61, v60, v85, v64);
    v76(v74, v72);
  }
  else
  {
    uint64_t v39 = *(void **)(v0 + 856);
    uint64_t v88 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v40 = *(void *)(v0 + 800);
    uint64_t v41 = *(void *)(v0 + 792);
    id v42 = *(void **)(v0 + 784);
    uint64_t v43 = *(void **)(v0 + 776);
    uint64_t v44 = *(void **)(v0 + 768);
    uint64_t v84 = *(void *)(v0 + 688);
    uint64_t v45 = *(void *)(v0 + 672);
    char v46 = *(unsigned char *)(v0 + 57);

    sub_10033882C(v42, v41, v40, v46);
    sub_100475DFC(v44, v43, v42, v41, v40, v46);

    sub_10033882C(v42, v41, v40, v46);
    v88(v84, v45);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 640) + 8))(*(void *)(v0 + 656), *(void *)(v0 + 632));
LABEL_40:
  uint64_t v65 = *(void *)(v0 + 752);
  uint64_t v66 = *(void *)(v0 + 608);
  uint64_t v67 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v67;
  void *v67 = v0;
  v67[1] = sub_100465650;
  uint64_t v68 = *(void *)(v0 + 728);
  return AsyncStream.Iterator.next(isolation:)(v0 + 64, v66, v65, v68);
}

uint64_t sub_10046897C()
{
  uint64_t v1 = *(void *)(v0 + 792);
  uint64_t v2 = *(void **)(v0 + 784);
  uint64_t v61 = *(void **)(v0 + 776);
  uint64_t v65 = *(void *)(v0 + 800);
  uint64_t v3 = *(void **)(v0 + 768);
  uint64_t v4 = *(void *)(v0 + 656);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 640);
  uint64_t v7 = *(void *)(v0 + 632);
  char v8 = *(unsigned char *)(v0 + 57);
  static Logger.install.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v4, v7);
  id v9 = v3;
  id v10 = v61;
  sub_1003387E4(v2, v1, v65, v8);
  id v11 = v9;
  id v12 = v10;
  sub_1003387E4(v2, v1, v65, v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v66 = v13;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = *(unsigned __int8 *)(v0 + 57);
    uint64_t v16 = swift_slowAlloc();
    *(void *)(v0 + 576) = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    unint64_t v17 = 0xE600000000000000;
    uint64_t v18 = 0x64656C696166;
    os_log_type_t v62 = v14;
    switch(v15)
    {
      case 1:
        unint64_t v17 = 0xE800000000000000;
        uint64_t v18 = 0x73736572676F7270;
        break;
      case 2:
        unint64_t v17 = 0xEB00000000726564;
        uint64_t v18 = 0x6C6F686563616C70;
        break;
      case 3:
        uint64_t v28 = *(void *)(v0 + 784);
        if (*(void *)(v0 + 792) | *(void *)(v0 + 800) | v28)
        {
          if (v28 == 1 && *(_OWORD *)(v0 + 792) == 0)
          {
            unint64_t v17 = 0xE800000000000000;
            uint64_t v18 = 0x64656C65636E6163;
          }
          else if (v28 == 2 && *(_OWORD *)(v0 + 792) == 0)
          {
            uint64_t v18 = 0x646573756170;
          }
          else
          {
            BOOL v29 = *(_OWORD *)(v0 + 792) == 0;
            BOOL v30 = v28 == 3;
            if (v30 && v29) {
              uint64_t v18 = 0x64656D75736572;
            }
            else {
              uint64_t v18 = 0x697469726F697270;
            }
            if (v30 && v29) {
              unint64_t v17 = 0xE700000000000000;
            }
            else {
              unint64_t v17 = 0xEB0000000064657ALL;
            }
          }
        }
        else
        {
          unint64_t v17 = 0xE900000000000064;
          uint64_t v18 = 0x6574656C706D6F63;
        }
        break;
      default:
        break;
    }
    uint64_t v31 = *(void *)(v0 + 792);
    id v32 = *(void **)(v0 + 784);
    uint64_t v33 = *(void **)(v0 + 776);
    os_log_type_t v34 = *(void **)(v0 + 768);
    uint64_t v55 = *(void *)(v0 + 704);
    char v57 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v52 = *(void *)(v0 + 648);
    uint64_t v53 = *(void *)(v0 + 640);
    uint64_t v50 = *(void *)(v0 + 800);
    uint64_t v51 = *(void *)(v0 + 632);
    uint64_t v54 = *(void *)(v0 + 672);
    char v35 = *(unsigned char *)(v0 + 57);
    *(void *)(v0 + 568) = sub_1000143F4(v18, v17, (uint64_t *)(v0 + 576));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    sub_10033882C(v32, v31, v50, v35);
    sub_10033882C(v32, v31, v50, v35);
    *(_WORD *)(v16 + 12) = 2082;
    sub_1004764D8((unint64_t *)&qword_100665D30, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 536) = sub_1000143F4(v36, v37, (uint64_t *)(v0 + 576));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v60(v52, v51);
    _os_log_impl((void *)&_mh_execute_header, v66, v62, "Installation not found for \"%{public}s\" for \"%{public}s\"", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v57(v55, v54);
  }
  else
  {
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 808);
    uint64_t v19 = *(void *)(v0 + 800);
    uint64_t v20 = *(void *)(v0 + 792);
    uint64_t v21 = *(void **)(v0 + 784);
    uint64_t v22 = *(void **)(v0 + 776);
    uint64_t v23 = *(void **)(v0 + 768);
    uint64_t v56 = *(void *)(v0 + 672);
    uint64_t v58 = *(void *)(v0 + 704);
    uint64_t v59 = *(void *)(v0 + 648);
    uint64_t v24 = *(void *)(v0 + 640);
    uint64_t v25 = *(void *)(v0 + 632);
    char v26 = *(unsigned char *)(v0 + 57);

    sub_10033882C(v21, v20, v19, v26);
    sub_10033882C(v21, v20, v19, v26);
    uint64_t v27 = v59;
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v60(v27, v25);

    v63(v58, v56);
  }
  uint64_t v64 = *(void *)(v0 + 800);
  uint64_t v38 = *(void *)(v0 + 792);
  uint64_t v39 = *(void **)(v0 + 784);
  uint64_t v40 = *(void **)(v0 + 776);
  uint64_t v41 = *(void **)(v0 + 768);
  uint64_t v42 = *(void *)(v0 + 656);
  uint64_t v43 = *(void *)(v0 + 632);
  char v44 = *(unsigned char *)(v0 + 57);
  sub_100462F20(v0 + 16);

  sub_10033882C(v39, v38, v64, v44);
  v60(v42, v43);
  uint64_t v45 = *(void *)(v0 + 752);
  uint64_t v46 = *(void *)(v0 + 608);
  uint64_t v47 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v47;
  *uint64_t v47 = v0;
  v47[1] = sub_100465650;
  uint64_t v48 = *(void *)(v0 + 728);
  return AsyncStream.Iterator.next(isolation:)(v0 + 64, v46, v45, v48);
}

uint64_t sub_100468FA8()
{
  uint64_t v1 = *(void **)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = *(void **)(v0 + 784);
  uint64_t v5 = *(void **)(v0 + 776);
  uint64_t v6 = *(void **)(v0 + 768);
  uint64_t v7 = *(void *)(v0 + 736);
  uint64_t v12 = *(void *)(v0 + 728);
  uint64_t v13 = *(void *)(v0 + 744);
  uint64_t v8 = *(void *)(v0 + 640);
  uint64_t v14 = *(void *)(v0 + 632);
  uint64_t v15 = *(void *)(v0 + 656);
  char v9 = *(unsigned char *)(v0 + 57);
  swift_release();

  sub_10033882C(v4, v3, v2, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v12);
  sub_100475D70(*(void *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10046914C()
{
  uint64_t v1 = *(void **)(v0 + 856);
  uint64_t v2 = *(void *)(v0 + 800);
  uint64_t v3 = *(void *)(v0 + 792);
  uint64_t v4 = *(void **)(v0 + 784);
  uint64_t v5 = *(void **)(v0 + 776);
  uint64_t v6 = *(void **)(v0 + 768);
  uint64_t v7 = *(void *)(v0 + 736);
  uint64_t v12 = *(void *)(v0 + 728);
  uint64_t v13 = *(void *)(v0 + 744);
  uint64_t v15 = *(void *)(v0 + 656);
  uint64_t v8 = *(void *)(v0 + 640);
  uint64_t v14 = *(void *)(v0 + 632);
  char v9 = *(unsigned char *)(v0 + 57);

  sub_10033882C(v4, v3, v2, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v12);
  sub_100475D70(*(void *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v15, v14);
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100469314(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return _swift_task_switch(sub_100469334, 0, 0);
}

uint64_t sub_100469334()
{
  uint64_t v1 = (uint64_t *)v0[8];
  swift_beginAccess();
  uint64_t v2 = *v1;
  v0[10] = *v1;
  uint64_t v3 = v1[1];
  v0[11] = v3;
  uint64_t v4 = v1[2];
  v0[12] = v4;
  if (v2)
  {
    sub_10047617C(v2);
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v5(v2, v3, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(v0[9] + 120);
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[13] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100469468;
    return sub_100238024(v7);
  }
}

uint64_t sub_100469468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  uint64_t v9 = (void *)*v4;
  swift_task_dealloc();
  if (v3)
  {
    id v10 = (uint64_t (*)(void))v9[1];
    return v10();
  }
  else
  {
    v8[14] = a3;
    v8[15] = a2;
    v8[16] = a1;
    return _swift_task_switch(sub_1004695CC, 0, 0);
  }
}

uint64_t sub_1004695CC()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = (uint64_t *)v0[8];
  swift_beginAccess();
  uint64_t v5 = *v4;
  *uint64_t v4 = v2;
  v4[1] = v1;
  v4[2] = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  sub_100475D70(v5);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[14];
  sub_10047617C(v0[10]);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v9(v7, v6, v8);
}

uint64_t sub_1004696B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = sub_1000176B4;
  return sub_10033515C(a5);
}

id sub_10046974C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogKey.Prefix();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = a1;
  uint64_t v9 = sub_1001CA054(a2, 0, 0);
  id v10 = (void *)sub_1004730A0(0, v9, (uint64_t)sub_100473004, 0, v8);

  swift_bridgeObjectRelease();
  if (!v10) {
    return 0;
  }
  id v11 = [v10 persistentID];
  id v12 = v10;
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 valueForProperty:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_1001CD9F8((uint64_t)v21, (uint64_t)&v19);
  if (v20)
  {
    sub_1001C5DD4(&v19, v18);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1002443D8(v18);
    swift_release();
    sub_100014524((uint64_t)v18);
    sub_10001729C((uint64_t)v21, (uint64_t *)&unk_10065C9C0);
  }
  else
  {
    sub_10001729C((uint64_t)v21, (uint64_t *)&unk_10065C9C0);

    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for LogKey.Prefix.undefined(_:), v4);
    id v15 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    LogKey.init(prefix:)();
  }

  return v11;
}

uint64_t sub_1004699F8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for IPA_AppInstall();
  swift_allocObject();
  id v14 = a1;
  swift_retain();
  id v15 = a4;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return sub_1003349D4(a2, v14, a3, v15, a5, a6, a7);
}

uint64_t sub_100469AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_100469AE8, a4, 0);
}

uint64_t sub_100469AE8(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 40) + 128);
  if (v4)
  {
    *(void *)(v3 + 48) = *(void *)(v4 + 144);
    sub_1004764D8(&qword_100663FA0, a2, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
    swift_retain();
    a1 = sub_100469BA0;
    a2 = 0;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100469BA0()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = v0[5];
    return _swift_task_switch(sub_100469F0C, v1, 0);
  }
  else
  {
    swift_beginAccess();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100469CCC;
    uint64_t v3 = v0[6];
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 11, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E010, v3, &type metadata for Bool);
  }
}

uint64_t sub_100469CCC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100469DC8, 0, 0);
}

uint64_t sub_100469DC8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(unsigned char *)(v0 + 89) = *(unsigned char *)(v0 + 88);
  return _swift_task_switch(sub_100469DEC, v1, 0);
}

uint64_t sub_100469DEC()
{
  if (*(unsigned char *)(v0 + 89) == 1)
  {
    *(void *)(v0 + 64) = *(void *)(*(void *)(v0 + 40) + 112);
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_1006606F0 + dword_1006606F0);
    swift_retain();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100469F6C;
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10046A180, 0, 0);
  }
}

uint64_t sub_100469F0C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100469F6C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    uint64_t v4 = sub_10046A294;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_10046A0C8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046A0C8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100471CE8(v2);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100473D50((uint64_t)v3, v1);
  swift_release();
  swift_release();
  return _swift_task_switch(sub_10046A180, 0, 0);
}

uint64_t sub_10046A180()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = v0[5];
    return _swift_task_switch(sub_100469F0C, v1, 0);
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100469CCC;
    uint64_t v3 = v0[6];
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 11, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E010, v3, &type metadata for Bool);
  }
}

uint64_t sub_10046A294()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100471CE8(v2);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100473D50((uint64_t)v3, v1);
  swift_release();
  swift_release();
  return _swift_task_switch(sub_10046A180, 0, 0);
}

void sub_10046A34C(void **a1)
{
  uint64_t v2 = *a1;
  unint64_t v17 = (void *)sub_1000172F8(&qword_100664120);
  uint64_t v18 = (void *)sub_10000DDFC(&qword_100664128, &qword_100664120);
  LOWORD(v16[0]) = 4;
  BYTE2(v16[0]) = 0;
  id v3 = v2;
  id v4 = sub_10043A980((uint64_t)v16, v3);
  uint64_t v6 = v5;

  if (v17) {
    sub_100014524((uint64_t)v16);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    type metadata accessor for AppInstallEntity.Entity();
    Class ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata();
    id v8 = v4;
    swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    while (v9 < *(void *)(v6 + 16))
    {
      uint64_t v10 = *(void *)(v6 + 8 * v9 + 32);
      id v11 = objc_allocWithZone(ObjCClassFromMetadata);
      id v12 = v8;
      id v4 = [v11 initWithPersistentID:v10 onConnection:v12];
      LODWORD(v11) = [v4 existsInDatabase];

      if (!v11)
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_12;
      }
      unint64_t v17 = &type metadata for Bool;
      uint64_t v18 = &protocol witness table for Bool;
      long long v19 = &protocol witness table for Bool;
      LOBYTE(v16[0]) = 1;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      id v13 = v4;
      JSONEncoder.init()();
      SQLiteEncodeValue(_:using:)(v16, v20);
      if (v1) {
        goto LABEL_14;
      }
      swift_release();
      ++v9;
      sub_100014524((uint64_t)v16);
      sub_10018AC60(v20, v20[3]);
      uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_100014524((uint64_t)v20);
      NSString v15 = String._bridgeToObjectiveC()();
      [v13 setValue:v14 forProperty:v15];

      swift_unknownObjectRelease();
      if (v7 == v9)
      {
        swift_bridgeObjectRelease_n();

        id v4 = v12;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    swift_release();
    sub_100014524((uint64_t)v16);
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_12:
  }
}

uint64_t sub_10046A60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  v4[9] = *(void *)(type metadata accessor for DownloadRequest() - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_10046A738, a4, 0);
}

uint64_t sub_10046A738(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 64) + 128);
  if (v4)
  {
    *(void *)(v3 + 120) = *(void *)(v4 + 208);
    sub_1004764D8(&qword_100663FA0, a2, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
    swift_retain();
    a1 = sub_10046A7F0;
    a2 = 0;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_10046A7F0()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = v0[8];
    return _swift_task_switch(sub_10046ADEC, v1, 0);
  }
  else
  {
    swift_beginAccess();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[16] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10046A91C;
    uint64_t v3 = v0[15];
    return withCheckedContinuation<A>(isolation:function:_:)((char *)v0 + 172, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E034, v3, &type metadata for Bool);
  }
}

uint64_t sub_10046A91C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10046AA18, 0, 0);
}

uint64_t sub_10046AA18()
{
  uint64_t v1 = *(void *)(v0 + 64);
  *(unsigned char *)(v0 + 173) = *(unsigned char *)(v0 + 172);
  return _swift_task_switch(sub_10046AA3C, v1, 0);
}

uint64_t sub_10046AA3C()
{
  if (*(unsigned char *)(v0 + 173) == 1)
  {
    static Logger.install.getter();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Limiting maximum active count due to thermal pressure", v3, 2u);
      swift_slowDealloc();
    }
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 4;
  }
  uint64_t v8 = *(void *)(v0 + 64);
  *(void *)(v8 + 168) = v7;
  uint64_t v9 = *(void *)(v8 + 184);
  *(void *)(v0 + 136) = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v0 + 144) = v10;
  if (!v10)
  {
LABEL_25:
    return _swift_task_switch(sub_10046AE70, 0, 0);
  }
  *(_DWORD *)(v0 + 168) = *(_DWORD *)(*(void *)(v0 + 72) + 80);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v0 + 152) = 0;
  uint64_t v11 = *(void *)(v0 + 136);
  if (*(void *)(v11 + 16))
  {
    unint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(v0 + 64);
      uint64_t v14 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v11 + ((*(unsigned __int8 *)(v0 + 168) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 168)) + v14 * v12, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v15 = *(void *)(v13 + 176);
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16 >= *(void *)(v13 + 168)) {
        break;
      }
      if (!v16) {
        goto LABEL_20;
      }
      unint64_t v17 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v17);
      Swift::Int v18 = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v15 + 32);
      unint64_t v20 = v18 & ~v19;
      if (((*(void *)(v15 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
        goto LABEL_20;
      }
      uint64_t v21 = ~v19;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v22 = *(uint64_t **)(v0 + 80);
        uint64_t v23 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v15 + 48) + v20 * v14, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v24 = *v22;
        uint64_t v25 = *v23;
        sub_1004758D4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v24 == v25) {
          break;
        }
        unint64_t v20 = (v20 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v0 + 144);
      uint64_t v27 = *(void *)(v0 + 152) + 1;
      sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v27 == v26) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v0 + 152) + 1;
      *(void *)(v0 + 152) = v12;
      uint64_t v11 = *(void *)(v0 + 136);
      if (v12 >= *(void *)(v11 + 16)) {
        goto LABEL_18;
      }
    }
    sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10046AF84;
  uint64_t v29 = *(void *)(v0 + 88);
  return sub_10046C85C(v29);
}

uint64_t sub_10046ADEC()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046AE70()
{
  if (static Task<>.isCancelled.getter())
  {
    uint64_t v1 = v0[8];
    return _swift_task_switch(sub_10046ADEC, v1, 0);
  }
  else
  {
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[16] = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10046A91C;
    uint64_t v3 = v0[15];
    return withCheckedContinuation<A>(isolation:function:_:)((char *)v0 + 172, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E034, v3, &type metadata for Bool);
  }
}

uint64_t sub_10046AF84()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1004785C4;
  }
  else
  {
    uint64_t v4 = sub_10046B0BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046B0BC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152) + 1;
  uint64_t v3 = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t)sub_10046AE70;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  else
  {
    while (1)
    {
      unint64_t v6 = *(void *)(v0 + 152) + 1;
      *(void *)(v0 + 152) = v6;
      uint64_t v7 = *(void *)(v0 + 136);
      if (v6 >= *(void *)(v7 + 16))
      {
        __break(1u);
        return _swift_task_switch(v3, v4, v5);
      }
      uint64_t v8 = *(void *)(v0 + 64);
      uint64_t v9 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v7 + ((*(unsigned __int8 *)(v0 + 168) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 168)) + v9 * v6, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v10 = *(void *)(v8 + 176);
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11 >= *(void *)(v8 + 168))
      {
        sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        goto LABEL_2;
      }
      if (!v11) {
        break;
      }
      unint64_t v12 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v12);
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v15 = v13 & ~v14;
      if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
        break;
      }
      uint64_t v16 = ~v14;
      swift_bridgeObjectRetain();
      while (1)
      {
        unint64_t v17 = *(uint64_t **)(v0 + 80);
        Swift::Int v18 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v10 + 48) + v15 * v9, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v19 = *v17;
        uint64_t v20 = *v18;
        sub_1004758D4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v19 == v20) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v0 + 144);
      uint64_t v22 = *(void *)(v0 + 152) + 1;
      uint64_t v3 = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v22 == v21) {
        goto LABEL_2;
      }
    }
LABEL_15:
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10046AF84;
    uint64_t v24 = *(void *)(v0 + 88);
    return sub_10046C85C(v24);
  }
}

uint64_t sub_10046B390()
{
  v1[8] = v0;
  v1[9] = *(void *)(type metadata accessor for DownloadRequest() - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_10046B45C, v0, 0);
}

uint64_t sub_10046B45C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 184);
  *(void *)(v0 + 96) = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 104) = v3;
  if (!v3)
  {
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  *(_DWORD *)(v0 + 128) = *(_DWORD *)(*(void *)(v0 + 72) + 80);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v0 + 112) = 0;
  uint64_t v4 = *(void *)(v0 + 96);
  if (*(void *)(v4 + 16))
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(void *)(v0 + 64);
      uint64_t v7 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v4 + ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128)) + v7 * v5, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v8 = *(void *)(v6 + 176);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9 >= *(void *)(v6 + 168)) {
        break;
      }
      if (!v9) {
        goto LABEL_15;
      }
      uint64_t v10 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v10);
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v14 = ~v12;
      swift_bridgeObjectRetain();
      while (1)
      {
        unint64_t v15 = *(uint64_t **)(v0 + 80);
        uint64_t v16 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v8 + 48) + v13 * v7, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v17 = *v15;
        uint64_t v18 = *v16;
        sub_1004758D4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v17 == v18) {
          break;
        }
        unint64_t v13 = (v13 + 1) & v14;
        if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void *)(v0 + 104);
      uint64_t v20 = *(void *)(v0 + 112) + 1;
      sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v20 == v19) {
        goto LABEL_19;
      }
      unint64_t v5 = *(void *)(v0 + 112) + 1;
      *(void *)(v0 + 112) = v5;
      uint64_t v4 = *(void *)(v0 + 96);
      if (v5 >= *(void *)(v4 + 16)) {
        goto LABEL_13;
      }
    }
    sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_10046B770;
  uint64_t v22 = *(void *)(v0 + 88);
  return sub_10046C85C(v22);
}

uint64_t sub_10046B770()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1004785D0;
  }
  else
  {
    uint64_t v4 = sub_10046B8A8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046B8A8()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112) + 1;
  uint64_t result = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    while (1)
    {
      unint64_t v5 = *(void *)(v0 + 112) + 1;
      *(void *)(v0 + 112) = v5;
      uint64_t v6 = *(void *)(v0 + 96);
      if (v5 >= *(void *)(v6 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = *(void *)(v0 + 64);
      uint64_t v8 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v6 + ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128)) + v8 * v5, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v9 = *(void *)(v7 + 176);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10 >= *(void *)(v7 + 168))
      {
        sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        goto LABEL_2;
      }
      if (!v10) {
        break;
      }
      Swift::Int v11 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v11);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v15 = ~v13;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v16 = *(uint64_t **)(v0 + 80);
        uint64_t v17 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v9 + 48) + v14 * v8, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v18 = *v16;
        uint64_t v19 = *v17;
        sub_1004758D4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v18 == v19) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v15;
        if (((*(void *)(v9 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v0 + 104);
      uint64_t v21 = *(void *)(v0 + 112) + 1;
      uint64_t result = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v21 == v20) {
        goto LABEL_2;
      }
    }
LABEL_15:
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10046B770;
    uint64_t v23 = *(void *)(v0 + 88);
    return sub_10046C85C(v23);
  }
}

uint64_t sub_10046BB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  v4[9] = *(void *)(type metadata accessor for DownloadRequest() - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  sub_1000172F8(&qword_100661C18);
  v4[12] = swift_task_alloc();
  uint64_t v6 = sub_1000172F8(&qword_100664100);
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v7 = sub_1000172F8(&qword_100664108);
  v4[16] = v7;
  v4[17] = *(void *)(v7 - 8);
  v4[18] = swift_task_alloc();
  return _swift_task_switch(sub_10046BD40, a4, 0);
}

uint64_t sub_10046BD40()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  uint64_t v4 = NWPathMonitor.init()();
  v0[19] = v4;
  sub_1001752CC(v4);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[20] = sub_1004764D8(&qword_100663FA0, v5, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
  swift_beginAccess();
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[8];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[21] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10046BEB8;
  uint64_t v9 = v0[16];
  uint64_t v10 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v10, v7, v6, v9);
}

uint64_t sub_10046BEB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_10046BFC8, v1, 0);
}

uint64_t sub_10046BFC8()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = type metadata accessor for NetworkPath();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  uint64_t v5 = *(void *)(v0 + 64);
  sub_10001729C(v1, &qword_100661C18);
  uint64_t v6 = *(void *)(v5 + 184);
  *(void *)(v0 + 176) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  *(void *)(v0 + 184) = v7;
  if (!v7) {
    goto LABEL_24;
  }
  *(_DWORD *)(v0 + 208) = *(_DWORD *)(*(void *)(v0 + 72) + 80);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(void *)(v0 + 192) = 0;
  uint64_t v8 = *(void *)(v0 + 176);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(void *)(v0 + 64);
      uint64_t v11 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v8 + ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208)) + v11 * v9, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v12 = *(void *)(v10 + 176);
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13 >= *(void *)(v10 + 168)) {
        break;
      }
      if (!v13) {
        goto LABEL_19;
      }
      unint64_t v14 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v14);
      Swift::Int v15 = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v17 = v15 & ~v16;
      if (((*(void *)(v12 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_19;
      }
      uint64_t v18 = ~v16;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v19 = *(uint64_t **)(v0 + 80);
        uint64_t v20 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v12 + 48) + v17 * v11, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v21 = *v19;
        uint64_t v22 = *v20;
        sub_1004758D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v21 == v22) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v18;
        if (((*(void *)(v12 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v0 + 184);
      uint64_t v24 = *(void *)(v0 + 192) + 1;
      sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v24 == v23) {
        goto LABEL_23;
      }
      unint64_t v9 = *(void *)(v0 + 192) + 1;
      *(void *)(v0 + 192) = v9;
      uint64_t v8 = *(void *)(v0 + 176);
      if (v9 >= *(void *)(v8 + 16)) {
        goto LABEL_17;
      }
    }
    sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v28 = *(void *)(v0 + 64);
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_10046BEB8;
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v31 = *(void *)(v0 + 96);
    return AsyncStream.Iterator.next(isolation:)(v31, v28, v27, v30);
  }
LABEL_17:
  __break(1u);
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v25;
  *uint64_t v25 = v0;
  v25[1] = sub_10046C400;
  uint64_t v26 = *(void *)(v0 + 88);
  return sub_10046C85C(v26);
}

uint64_t sub_10046C400()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_1004785C8;
  }
  else
  {
    uint64_t v4 = sub_10046C538;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046C538()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192) + 1;
  uint64_t v3 = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 64);
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v9;
    void *v9 = v0;
    v9[1] = sub_10046BEB8;
    uint64_t v6 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 96);
    uint64_t v4 = v8;
    uint64_t v5 = v7;
    return AsyncStream.Iterator.next(isolation:)(v3, v4, v5, v6);
  }
  else
  {
    while (1)
    {
      unint64_t v10 = *(void *)(v0 + 192) + 1;
      *(void *)(v0 + 192) = v10;
      uint64_t v11 = *(void *)(v0 + 176);
      if (v10 >= *(void *)(v11 + 16))
      {
        __break(1u);
        return AsyncStream.Iterator.next(isolation:)(v3, v4, v5, v6);
      }
      uint64_t v12 = *(void *)(v0 + 64);
      uint64_t v13 = *(void *)(*(void *)(v0 + 72) + 72);
      sub_100473CD0(v11 + ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208)) + v13 * v10, *(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v14 = *(void *)(v12 + 176);
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15 >= *(void *)(v12 + 168))
      {
        sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        goto LABEL_2;
      }
      if (!v15) {
        break;
      }
      uint64_t v16 = *(Swift::UInt64 **)(v0 + 88);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v16);
      Swift::Int v17 = Hasher._finalize()();
      uint64_t v18 = -1 << *(unsigned char *)(v14 + 32);
      unint64_t v19 = v17 & ~v18;
      if (((*(void *)(v14 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      uint64_t v20 = ~v18;
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v21 = *(uint64_t **)(v0 + 80);
        uint64_t v22 = *(uint64_t **)(v0 + 88);
        sub_100473CD0(*(void *)(v14 + 48) + v19 * v13, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v23 = *v21;
        uint64_t v24 = *v22;
        sub_1004758D4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v23 == v24) {
          break;
        }
        unint64_t v19 = (v19 + 1) & v20;
        if (((*(void *)(v14 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(v0 + 184);
      uint64_t v26 = *(void *)(v0 + 192) + 1;
      uint64_t v3 = sub_1004758D4(*(void *)(v0 + 88), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v26 == v25) {
        goto LABEL_2;
      }
    }
LABEL_15:
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10046C400;
    uint64_t v28 = *(void *)(v0 + 88);
    return sub_10046C85C(v28);
  }
}

uint64_t sub_10046C85C(uint64_t a1)
{
  v2[58] = a1;
  v2[59] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[60] = v3;
  v2[61] = *(void *)(v3 - 8);
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v2[65] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DownloadRequest();
  v2[66] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[67] = v5;
  v2[68] = *(void *)(v5 + 64);
  v2[69] = swift_task_alloc();
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  v2[72] = swift_task_alloc();
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  return _swift_task_switch(sub_10046CA0C, v1, 0);
}

uint64_t sub_10046CA0C()
{
  uint64_t v1 = v0[59];
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 176) + 16) >= *(void *)(v1 + 168))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[75] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10046CB98;
    return sub_10033DBD4();
  }
}

uint64_t sub_10046CB98(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472);
  *(unsigned char *)(*(void *)v1 + 728) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10046CCB0, v2, 0);
}

uint64_t sub_10046CCB0()
{
  if (*(unsigned char *)(v0 + 728) != 1)
  {
    uint64_t v21 = *(void *)(v0 + 552);
    uint64_t v22 = *(void *)(v0 + 464);
    static Logger.install.getter();
    sub_100473CD0(v22, v21, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 552);
    if (v25)
    {
      uint64_t v27 = *(void *)(v0 + 528);
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412290;
      uint64_t v30 = *(void **)(v26 + *(int *)(v27 + 32));
      *(void *)(v0 + 456) = v30;
      id v31 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v29 = v30;
      sub_1004758D4(v26, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Request policy not satisfied", v28, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004758D4(*(void *)(v0 + 552), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    }
    uint64_t v43 = *(void *)(v0 + 488);
    uint64_t v42 = *(void *)(v0 + 496);
    uint64_t v44 = *(void *)(v0 + 480);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v63 = *(uint64_t (**)(void))(v0 + 8);
    return v63();
  }
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = **(void **)(v0 + 464);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 136);
  if (*(void *)(v3 + 16))
  {
    unint64_t v4 = sub_10045257C(v2);
    if (v5)
    {
      uint64_t v6 = v0 + 96;
      uint64_t v7 = *(Swift::UInt64 **)(v0 + 592);
      uint64_t v9 = *(void *)(v0 + 464);
      uint64_t v8 = *(void *)(v0 + 472);
      sub_10019B17C(*(void *)(v3 + 56) + 40 * v4, v0 + 176);
      sub_10018B164((long long *)(v0 + 176), v0 + 96);
      swift_endAccess();
      sub_100473CD0(v9, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      swift_beginAccess();
      uint64_t v10 = *(void *)(v8 + 176);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v7);
      Swift::Int v11 = Hasher._finalize()();
      uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v13 = v11 & ~v12;
      if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
      {
        uint64_t v14 = ~v12;
        uint64_t v15 = *(void *)(*(void *)(v0 + 536) + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v16 = *(uint64_t **)(v0 + 592);
          Swift::Int v17 = *(uint64_t **)(v0 + 584);
          sub_100473CD0(*(void *)(v10 + 48) + v13 * v15, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
          uint64_t v18 = *v17;
          uint64_t v19 = *v16;
          sub_1004758D4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
          if (v18 == v19) {
            break;
          }
          unint64_t v13 = (v13 + 1) & v14;
          if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v6 = v0 + 96;
            uint64_t v20 = (long long *)(v0 + 16);
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = v0 + 96;
        uint64_t v20 = (long long *)(v0 + 16);
      }
      else
      {
        uint64_t v20 = (long long *)(v0 + 16);
LABEL_21:
        uint64_t v52 = *(void *)(v0 + 592);
        uint64_t v53 = *(Swift::UInt64 **)(v0 + 584);
        uint64_t v54 = *(void *)(v0 + 472);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_100473CD0(v52, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v64 = *(void *)(v54 + 176);
        *(void *)(v54 + 176) = 0x8000000000000000;
        sub_10032E26C(v53, v13, isUniquelyReferenced_nonNull_native);
        *(void *)(v54 + 176) = v64;
        swift_bridgeObjectRelease();
      }
      uint64_t v56 = *(void *)(v0 + 584);
      uint64_t v57 = *(void *)(v0 + 536);
      uint64_t v58 = *(void *)(v0 + 520);
      uint64_t v59 = *(void *)(v0 + 464);
      sub_1004758D4(*(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      swift_endAccess();
      uint64_t v60 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v58, 1, 1, v60);
      sub_10019B17C(v6, (uint64_t)v20);
      sub_100473CD0(v59, v56, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      unint64_t v61 = (*(unsigned __int8 *)(v57 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = 0;
      *(void *)(v62 + 24) = 0;
      sub_10018B164(v20, v62 + 32);
      sub_100474DE4(v56, v62 + v61, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      sub_100017544(v58, (uint64_t)&unk_100664018, v62);
      swift_release();
      sub_100014524(v6);
      goto LABEL_24;
    }
  }
  uint64_t v32 = *(void *)(v0 + 472);
  swift_endAccess();
  uint64_t result = *(void *)(v32 + 128);
  *(void *)(v0 + 608) = result;
  if (result)
  {
    uint64_t v34 = *(void *)(v0 + 576);
    uint64_t v35 = *(void *)(v0 + 464);
    swift_retain();
    static Logger.install.getter();
    sub_100473CD0(v35, v34, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(uint64_t **)(v0 + 576);
    if (v38)
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 134349056;
      uint64_t v41 = *v39;
      sub_1004758D4((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      *(void *)(v0 + 440) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Creating installation \"%{public}lld\" to resume download", v40, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_1004758D4(*(void *)(v0 + 576), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    }
    uint64_t v45 = *(void *)(v0 + 512);
    uint64_t v46 = *(void *)(v0 + 480);
    uint64_t v47 = *(void *)(v0 + 488);
    uint64_t v48 = *(void *)(v0 + 472);

    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    *(void *)(v0 + 616) = v49;
    *(void *)(v0 + 624) = (v47 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v49(v45, v46);
    uint64_t v50 = *(void *)(v48 + 120);
    swift_retain();
    uint64_t v51 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v51;
    *uint64_t v51 = v0;
    v51[1] = sub_10046D478;
    return sub_100238024(v50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046D478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)*v4;
  uint64_t v7 = (void *)*v4;
  v7[80] = a1;
  v7[81] = a2;
  v7[82] = v3;
  swift_task_dealloc();
  uint64_t v8 = v6[59];
  if (v3)
  {
    uint64_t v9 = sub_10046D890;
  }
  else
  {
    v7[83] = a3;
    uint64_t v9 = sub_10046D5C4;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10046D5C4()
{
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 608);
  unint64_t v4 = *(void **)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  *(void *)(v0 + 672) = *v4;
  uint64_t v5 = *(void *)(v3 + 112);
  *(void *)(v0 + 680) = v5;
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 688) = v6;
  long long v7 = *(_OWORD *)(v0 + 640);
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 48) = v1;
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 696) = v8;
  *(void *)(v8 + 16) = sub_10047500C;
  *(void *)(v8 + 24) = v6;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660718 + dword_100660718);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v9;
  void *v9 = v0;
  v9[1] = sub_10046D6FC;
  return v11((uint64_t)sub_10047501C, v8, v5);
}

uint64_t sub_10046D6FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 712) = a1;
  *(void *)(v4 + 720) = v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 472);
  if (v1) {
    uint64_t v6 = sub_10046DFA4;
  }
  else {
    uint64_t v6 = sub_10046D98C;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10046D890()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046D98C()
{
  uint64_t v1 = *(void *)(v0 + 712);
  if (v1)
  {
    *(void *)(v0 + 240) = type metadata accessor for IPA_AppInstall();
    *(void *)(v0 + 248) = &off_100642748;
    *(void *)(v0 + 216) = v1;
  }
  else
  {
    *(void *)(v0 + 248) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    *(_OWORD *)(v0 + 232) = 0u;
  }
  uint64_t v2 = *(void *)(v0 + 672);
  uint64_t v4 = *(uint64_t **)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  swift_beginAccess();
  sub_1002B5D44(v0 + 216, v2);
  swift_endAccess();
  uint64_t v5 = *v4;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 136);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_10045257C(v5), (v8 & 1) != 0))
  {
    uint64_t v46 = (long long *)(v0 + 56);
    uint64_t v9 = *(Swift::UInt64 **)(v0 + 568);
    uint64_t v11 = *(void *)(v0 + 464);
    uint64_t v10 = *(void *)(v0 + 472);
    sub_10019B17C(*(void *)(v6 + 56) + 40 * v7, v0 + 136);
    sub_10018B164((long long *)(v0 + 136), v0 + 256);
    swift_endAccess();
    sub_100473CD0(v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    swift_beginAccess();
    uint64_t v12 = *(void *)(v10 + 176);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v9);
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v15 = v13 & ~v14;
    uint64_t v47 = v0 + 256;
    if ((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
    {
      uint64_t v16 = ~v14;
      uint64_t v17 = *(void *)(*(void *)(v0 + 536) + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v18 = *(uint64_t **)(v0 + 584);
        uint64_t v19 = *(uint64_t **)(v0 + 568);
        sub_100473CD0(*(void *)(v12 + 48) + v15 * v17, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v20 = *v18;
        uint64_t v21 = *v19;
        sub_1004758D4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v20 == v21) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v16;
        if (((*(void *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v22 = *(Swift::UInt64 **)(v0 + 584);
      uint64_t v23 = *(void *)(v0 + 568);
      uint64_t v24 = *(void *)(v0 + 472);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100473CD0(v23, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      uint64_t v48 = *(void *)(v24 + 176);
      *(void *)(v24 + 176) = 0x8000000000000000;
      sub_10032E26C(v22, v15, isUniquelyReferenced_nonNull_native);
      *(void *)(v24 + 176) = v48;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v0 + 584);
    uint64_t v38 = *(void *)(v0 + 536);
    uint64_t v39 = *(void *)(v0 + 520);
    uint64_t v40 = *(void *)(v0 + 464);
    sub_1004758D4(*(void *)(v0 + 568), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    swift_endAccess();
    uint64_t v41 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v39, 1, 1, v41);
    sub_10019B17C(v47, (uint64_t)v46);
    sub_100473CD0(v40, v37, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    unint64_t v42 = (*(unsigned __int8 *)(v38 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = 0;
    *(void *)(v43 + 24) = 0;
    sub_10018B164(v46, v43 + 32);
    sub_100474DE4(v37, v43 + v42, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    sub_100017544(v39, (uint64_t)&unk_100664008, v43);
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    sub_100014524(v47);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 560);
    uint64_t v27 = *(void *)(v0 + 464);
    swift_endAccess();
    static Logger.install.getter();
    sub_100473CD0(v27, v26, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    id v31 = *(uint64_t **)(v0 + 560);
    if (v30)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 134349056;
      uint64_t v33 = *v31;
      sub_1004758D4((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      *(void *)(v0 + 448) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received unexpected download resumption for '%{public}lld'", v32, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_1004758D4(*(void *)(v0 + 560), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 616);
    uint64_t v35 = *(void *)(v0 + 504);
    uint64_t v36 = *(void *)(v0 + 480);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    v34(v35, v36);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_10046DFA4()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046E0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  sub_1000172F8(&qword_10065B220);
  v5[4] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AppInstallScheduler.ParkReason();
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10046E1C0, 0, 0);
}

uint64_t sub_10046E1C0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = sub_10018AC60(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  sub_100473CD0(v5, v2, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  sub_100473CD0(v2, v1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v7;
  sub_100474DE4(v1, (uint64_t)v10 + v9, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_retain();
  sub_1000163AC(v4, (uint64_t)&unk_100664020, (uint64_t)v10);
  swift_release();
  sub_1004758D4(v2, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10046E38C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a2;
  uint64_t v11 = a1;
  swift_retain();
  uint64_t v12 = (void *)sub_1005163F0();
  type metadata accessor for IPA_AppInstall();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return sub_1003349D4(v10, v11, a3, v12, a4, a5, a6);
}

uint64_t sub_10046E454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  sub_1000172F8(&qword_10065B220);
  v5[4] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AppInstallScheduler.ParkReason();
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = *(void *)(v7 + 64);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  return _swift_task_switch(sub_10046E55C, 0, 0);
}

uint64_t sub_10046E55C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = sub_10018AC60(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  sub_100473CD0(v5, v2, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  sub_100473CD0(v2, v1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v7;
  sub_100474DE4(v1, (uint64_t)v10 + v9, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_retain();
  sub_1000163AC(v4, (uint64_t)&unk_100664028, (uint64_t)v10);
  swift_release();
  sub_1004758D4(v2, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_10046E728()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10046E790()
{
  sub_10046E728();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AppInstallScheduler()
{
  return self;
}

uint64_t sub_10046E7E0(uint64_t a1, uint64_t a2)
{
  v3[40] = a2;
  v3[41] = v2;
  v3[39] = a1;
  sub_1000172F8(&qword_100663F90);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DownloadRequest();
  v3[44] = v4;
  v3[45] = *(void *)(v4 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[48] = v5;
  v3[49] = *(void *)(v5 - 8);
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  sub_1000172F8(&qword_10065F228);
  v3[52] = swift_task_alloc();
  sub_1000172F8(&qword_10065B220);
  v3[53] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AppInstallScheduler.ParkReason();
  v3[54] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[55] = v7;
  v3[56] = *(void *)(v7 + 64);
  v3[57] = swift_task_alloc();
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  return _swift_task_switch(sub_10046EA58, v2, 0);
}

uint64_t sub_10046EA58()
{
  uint64_t v105 = v0;
  sub_100473CD0(*(void *)(v0 + 320), *(void *)(v0 + 488), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v1 = *(void *)(v0 + 424);
      uint64_t v2 = *(void **)(v0 + 376);
      uint64_t v3 = *(void *)(v0 + 344);
      uint64_t v4 = *(void *)(v0 + 328);
      sub_100474DE4(*(void *)(v0 + 488), (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      swift_beginAccess();
      sub_10045BFA0(v2, v3);
      swift_endAccess();
      sub_10001729C(v3, &qword_100663F90);
      uint64_t v5 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
      uint64_t v7 = sub_1004764D8(&qword_100663FA0, v6, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
      uint64_t v8 = (void *)swift_allocObject();
      v8[2] = v4;
      v8[3] = v7;
      v8[4] = v4;
      swift_retain_n();
      sub_100017544(v1, (uint64_t)&unk_100663FB8, (uint64_t)v8);
      swift_release();
      uint64_t v9 = type metadata accessor for DownloadRequest;
      goto LABEL_40;
    case 1u:
      unint64_t v10 = v0 + 144;
      uint64_t v11 = *(Swift::UInt64 **)(v0 + 368);
      uint64_t v12 = *(void *)(v0 + 328);
      sub_100474DE4(*(void *)(v0 + 488), (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      swift_beginAccess();
      uint64_t v13 = *(void *)(v12 + 176);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*v11);
      Swift::Int v14 = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v16 = v14 & ~v15;
      if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        uint64_t v23 = 1;
        goto LABEL_27;
      }
      uint64_t v100 = (void *)(v12 + 176);
      unint64_t v101 = v0 + 144;
      uint64_t v17 = ~v15;
      uint64_t v18 = *(void *)(*(void *)(v0 + 360) + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v20 = *(uint64_t **)(v0 + 368);
        uint64_t v19 = *(uint64_t **)(v0 + 376);
        unint64_t v10 = v16 * v18;
        sub_100473CD0(*(void *)(v13 + 48) + v16 * v18, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v21 = *v19;
        uint64_t v22 = *v20;
        sub_1004758D4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        if (v21 == v22) {
          break;
        }
        unint64_t v16 = (v16 + 1) & v17;
        if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v23 = 1;
          unint64_t v10 = v0 + 144;
          goto LABEL_27;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v70 = v100;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v72 = *v100;
      *(void *)&v103[0] = *v100;
      *uint64_t v100 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_26;
      }
      while (1)
      {
        sub_10032F480();
        uint64_t v72 = *(void *)&v103[0];
LABEL_26:
        sub_100474DE4(*(void *)(v72 + 48) + v10, *(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        sub_1004716FC(v16);
        *uint64_t v70 = *(void *)&v103[0];
        swift_bridgeObjectRelease();
        uint64_t v23 = 0;
        unint64_t v10 = v101;
LABEL_27:
        uint64_t v70 = *(void **)(v0 + 368);
        uint64_t v74 = *(void *)(v0 + 328);
        uint64_t v73 = *(void *)(v0 + 336);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 360) + 56))(v73, v23, 1, *(void *)(v0 + 352));
        swift_endAccess();
        sub_10001729C(v73, &qword_100663F90);
        swift_beginAccess();
        *(void *)(swift_task_alloc() + 16) = v70;
        uint64_t v75 = sub_1004711D4((uint64_t (*)(unint64_t))sub_100473D38);
        int64_t v76 = *(void *)(*(void *)(v74 + 184) + 16);
        if (v76 >= v75) {
          break;
        }
        __break(1u);
      }
      uint64_t v77 = *(void *)(v0 + 424);
      uint64_t v78 = *(void *)(v0 + 368);
      uint64_t v79 = *(void *)(v0 + 328);
      sub_1005544A4(v75, v76);
      swift_task_dealloc();
      swift_endAccess();
      uint64_t v80 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v77, 1, 1, v80);
      uint64_t v82 = sub_1004764D8(&qword_100663FA0, v81, (void (*)(uint64_t))type metadata accessor for AppInstallScheduler);
      BOOL v83 = (void *)swift_allocObject();
      v83[2] = v79;
      v83[3] = v82;
      v83[4] = v79;
      swift_retain_n();
      sub_100017544(v77, (uint64_t)&unk_100663FA8, (uint64_t)v83);
      swift_release();
      uint64_t v84 = type metadata accessor for DownloadRequest;
      uint64_t v85 = v78;
LABEL_41:
      sub_1004758D4(v85, (uint64_t (*)(void))v84);
      goto LABEL_42;
    case 2u:
      uint64_t v24 = *(void *)(*(void *)(v0 + 328) + 128);
      if (!v24)
      {
        __break(1u);
        JUMPOUT(0x10046F94CLL);
      }
      uint64_t v25 = *(void *)(*(void *)(v24 + 144) + 16);
      uint64_t v26 = (unsigned char *)(v25 + 16);
      uint64_t v27 = (os_unfair_lock_s *)(v25 + 32);
      swift_retain();
      os_unfair_lock_lock(v27);
      sub_10035D0D8(v26, v103);
      os_unfair_lock_unlock(v27);
      char v57 = v103[0];
      swift_release();
      if (v57)
      {
        uint64_t v58 = *(void *)(v0 + 328);
        swift_beginAccess();
        uint64_t v59 = *(void *)(v58 + 136);
        if (*(void *)(v59 + 16) && (unint64_t v60 = sub_10045257C(*(void *)(v0 + 312)), (v61 & 1) != 0))
        {
          sub_10019B17C(*(void *)(v59 + 56) + 40 * v60, v0 + 56);
          if (*(void *)(v0 + 80))
          {
            uint64_t v62 = *(void *)(v0 + 480);
            uint64_t v63 = *(void *)(v0 + 440);
            uint64_t v64 = *(void *)(v0 + 424);
            uint64_t v65 = *(void *)(v0 + 320);
            sub_10019B17C(v0 + 56, v0 + 16);
            sub_10001729C(v0 + 56, &qword_10065F220);
            swift_endAccess();
            uint64_t v66 = *sub_10018AC60((void *)(v0 + 16), *(void *)(v0 + 40));
            uint64_t v67 = type metadata accessor for TaskPriority();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 1, 1, v67);
            sub_100473CD0(v65, v62, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            unint64_t v68 = (*(unsigned __int8 *)(v63 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
            uint64_t v69 = (void *)swift_allocObject();
            v69[2] = 0;
            v69[3] = 0;
            v69[4] = v66;
            sub_100474DE4(v62, (uint64_t)v69 + v68, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            swift_retain();
            sub_1000163AC(v64, (uint64_t)&unk_100663FC8, (uint64_t)v69);
            swift_release();
            sub_100014524(v0 + 16);
            goto LABEL_42;
          }
        }
        else
        {
          *(void *)(v0 + 88) = 0;
          *(_OWORD *)(v0 + 56) = 0u;
          *(_OWORD *)(v0 + 72) = 0u;
        }
        sub_10001729C(v0 + 56, &qword_10065F220);
        swift_endAccess();
      }
      else
      {
        uint64_t v86 = *(void *)(v0 + 432);
        uint64_t v87 = *(void *)(v0 + 440);
        uint64_t v88 = *(void *)(v0 + 416);
        uint64_t v89 = *(void *)(v0 + 312);
        sub_100473CD0(*(void *)(v0 + 320), v88, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v88, 0, 1, v86);
        swift_beginAccess();
        sub_1002B6214(v88, v89);
        swift_endAccess();
      }
LABEL_42:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v97 = *(uint64_t (**)(void))(v0 + 8);
      return v97();
    case 5u:
      static Logger.install.getter();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = *(void *)(v0 + 312);
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 134217984;
        *(void *)(v0 + 304) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Shutting down \"%lld\"", v44, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v45 = *(void *)(v0 + 328);
      uint64_t v46 = *(void *)(v0 + 312);
      (*(void (**)(void, void))(*(void *)(v0 + 392) + 8))(*(void *)(v0 + 408), *(void *)(v0 + 384));
      uint64_t v104 = 0;
      memset(v103, 0, sizeof(v103));
      swift_beginAccess();
      sub_1002B5D44((uint64_t)v103, v46);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v47 = swift_task_alloc();
      *(void *)(v47 + 16) = v46;
      uint64_t v48 = swift_bridgeObjectRetain();
      uint64_t v49 = sub_100474A8C(v48, (uint64_t (*)(char *, void))sub_100474DB4, v47);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_retain();
      sub_100474418(v49, v45);
      swift_release();
      swift_release();
      uint64_t v50 = *(void *)(v45 + 112);
      *(void *)(v0 + 496) = v50;
      uint64_t v51 = swift_task_alloc();
      *(void *)(v0 + 504) = v51;
      *(void *)(v51 + 16) = v46;
      uint64_t v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660708 + dword_100660708);
      swift_retain();
      uint64_t v52 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v52;
      *uint64_t v52 = v0;
      v52[1] = sub_10046F980;
      return v102((uint64_t)sub_100474DC4, v51, v50);
    default:
      uint64_t v28 = *(void *)(v0 + 472);
      uint64_t v29 = *(void *)(v0 + 320);
      static Logger.install.getter();
      sub_100473CD0(v29, v28, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      BOOL v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      BOOL v32 = os_log_type_enabled(v30, v31);
      uint64_t v33 = *(void *)(v0 + 472);
      if (v32)
      {
        os_log_type_t v99 = v31;
        uint64_t v35 = *(void *)(v0 + 456);
        uint64_t v34 = *(void *)(v0 + 464);
        uint64_t v36 = *(void *)(v0 + 312);
        uint64_t v37 = swift_slowAlloc();
        *(void *)&v103[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 134218242;
        *(void *)(v0 + 296) = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v37 + 12) = 2082;
        sub_100473CD0(v33, v34, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        sub_100473CD0(v34, v35, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        unint64_t v38 = 0xEF79746972756365;
        uint64_t v39 = 0x7320656369766564;
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v39 = 0xD000000000000010;
            sub_1004758D4(*(void *)(v0 + 456), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            uint64_t v40 = "dequeue download";
            goto LABEL_33;
          case 2u:
            break;
          case 3u:
            unint64_t v38 = 0xE700000000000000;
            uint64_t v39 = 0x6C6C6174736E69;
            break;
          case 4u:
            unint64_t v38 = 0xE600000000000000;
            uint64_t v39 = 0x646573756170;
            break;
          case 5u:
            unint64_t v38 = 0xE800000000000000;
            uint64_t v39 = 0x6E776F6474756873;
            break;
          case 6u:
            unint64_t v38 = 0xE700000000000000;
            uint64_t v39 = 0x74726174736572;
            break;
          default:
            uint64_t v39 = 0xD000000000000010;
            sub_1004758D4(*(void *)(v0 + 456), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
            uint64_t v40 = "enqueue download";
LABEL_33:
            unint64_t v38 = (unint64_t)(v40 - 32) | 0x8000000000000000;
            break;
        }
        uint64_t v90 = *(void *)(v0 + 472);
        uint64_t v92 = *(void *)(v0 + 392);
        uint64_t v91 = *(void *)(v0 + 400);
        uint64_t v98 = *(void *)(v0 + 384);
        sub_1004758D4(*(void *)(v0 + 464), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        *(void *)(v0 + 288) = sub_1000143F4(v39, v38, (uint64_t *)v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1004758D4(v90, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        _os_log_impl((void *)&_mh_execute_header, v30, v99, "Parking \"%lld\" for reason: %{public}s", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v98);
      }
      else
      {
        uint64_t v55 = *(void *)(v0 + 392);
        uint64_t v54 = *(void *)(v0 + 400);
        uint64_t v56 = *(void *)(v0 + 384);
        sub_1004758D4(*(void *)(v0 + 472), (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);

        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      }
      uint64_t v2 = *(void **)(v0 + 488);
      uint64_t v93 = *(void *)(v0 + 432);
      uint64_t v94 = *(void *)(v0 + 440);
      uint64_t v95 = *(void *)(v0 + 416);
      uint64_t v96 = *(void *)(v0 + 312);
      sub_100473CD0(*(void *)(v0 + 320), v95, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v93);
      swift_beginAccess();
      sub_1002B6214(v95, v96);
      swift_endAccess();
      uint64_t v9 = type metadata accessor for AppInstallScheduler.ParkReason;
LABEL_40:
      uint64_t v84 = v9;
      uint64_t v85 = (uint64_t)v2;
      goto LABEL_41;
  }
}

uint64_t sub_10046F980()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 328);
  if (v0)
  {
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_1004785CC;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = sub_10046FB08;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10046FB08()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10046FC0C(void **a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  type metadata accessor for AppInstallEntity.Entity();
  id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v13 = v11;
  id v14 = [v12 initWithPersistentID:a2 onConnection:v13];
  LOBYTE(v12) = [v14 existsInDatabase];

  if ((v12 & 1) == 0)
  {

LABEL_14:
    *a3 = 0;
    return;
  }
  id v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 valueForProperty:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v36, 0, sizeof(v36));
  }
  sub_1001CD9F8((uint64_t)v36, (uint64_t)&v34);
  if (!v35)
  {
    sub_10001729C((uint64_t)v36, (uint64_t *)&unk_10065C9C0);

LABEL_13:
    sub_1001A0E84(v15);

    goto LABEL_14;
  }
  uint64_t v37 = v8;
  sub_1001C5DD4(&v34, v33);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v18 = sub_1002443D8(v33);
  if (!v3)
  {
    uint64_t v19 = (void *)v18;
    swift_release();
    sub_100014524((uint64_t)v33);
    sub_10001729C((uint64_t)v36, (uint64_t *)&unk_10065C9C0);

    static Logger.install.getter();
    uint64_t v20 = v19;
    BOOL v32 = v10;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v31 = 0;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v28 = (void *)swift_slowAlloc();
      uint64_t v29 = v7;
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)&v36[0] = v20;
      uint64_t v25 = v20;
      BOOL v30 = a3;
      uint64_t v26 = v25;
      uint64_t v7 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v20;

      a3 = v30;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%@] Shutting down", v24, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v21 = v20;
    }

    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v7);
    goto LABEL_13;
  }
  swift_release();
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_10046FFE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000176B4;
  return sub_10046B390();
}

unint64_t sub_100470074()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppInstallScheduler.ParkReason();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100473CD0(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  unint64_t v5 = 0x7320656369766564;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      return v5;
    case 3u:
      unint64_t v5 = 0x6C6C6174736E69;
      break;
    case 4u:
      unint64_t v5 = 0x646573756170;
      break;
    case 5u:
      unint64_t v5 = 0x6E776F6474756873;
      break;
    case 6u:
      unint64_t v5 = 0x74726174736572;
      break;
    default:
      unint64_t v5 = 0xD000000000000010;
      sub_1004758D4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
      break;
  }
  return v5;
}

uint64_t sub_100470240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v4[5] = swift_task_alloc();
  v4[2] = a4;
  return _swift_task_switch(sub_1004702DC, 0, 0);
}

void sub_1004702DC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void **)(*(void *)(v0[4] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) + 120);
  v0[6] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v0 + 2;
  uint64_t v8 = (char *)&dword_10065C340 + dword_10065C340;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10047044C;
  __asm { BR              X8 }
}

uint64_t sub_10047044C()
{
  uint64_t v1 = *(void **)(*v0 + 48);
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v5 = *v0;
  swift_task_dealloc();

  swift_task_dealloc();
  sub_10001729C(v2, (uint64_t *)&unk_100661AB0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1004705A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a1;
  v4[4] = a4;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v4[5] = swift_task_alloc();
  v4[2] = a4;
  return _swift_task_switch(sub_100470644, 0, 0);
}

void sub_100470644()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void **)(*(void *)(v0[4] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) + 120);
  v0[6] = v2;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_task_alloc();
  v0[7] = v4;
  *(void *)(v4 + 16) = v0 + 2;
  uint64_t v8 = (char *)&dword_10065C340 + dword_10065C340;
  id v5 = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1004785F0;
  __asm { BR              X8 }
}

uint64_t sub_1004707B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v5[6] = swift_task_alloc();
  v5[2] = a4;
  return _swift_task_switch(sub_100470854, 0, 0);
}

void sub_100470854()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = *(void **)(*(void *)(v0[4] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine) + 120);
  v0[7] = v3;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = swift_task_alloc();
  v0[8] = v5;
  *(void *)(v5 + 16) = v0 + 2;
  *(void *)(v5 + 24) = v2;
  uint64_t v8 = (char *)&dword_10065C340 + dword_10065C340;
  id v6 = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  void *v7 = v0;
  v7[1] = sub_1004709CC;
  __asm { BR              X8 }
}

uint64_t sub_1004709CC()
{
  uint64_t v2 = *(void **)(*v1 + 56);
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *v1;
  *(void *)(v4 + 80) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100470B78, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
}

uint64_t sub_100470B78()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100470BDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v33 = a1;
  uint64_t v34 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v35 = v8;
  uint64_t v36 = 0;
  uint64_t v37 = v11 & v9;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1003A48A0(v31);
  if (!v32)
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10024A370();
    return swift_release();
  }
  while (1)
  {
    uint64_t v13 = *(void *)&v31[0];
    sub_10018B164((long long *)((char *)v31 + 8), (uint64_t)v30);
    uint64_t v14 = *a5;
    unint64_t v16 = sub_10045257C(v13);
    uint64_t v17 = *(void *)(v14 + 16);
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (*(void *)(v14 + 24) >= v19)
    {
      if (a4)
      {
        if (v15) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_10052C088();
        if (v20) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      sub_100524528(v19, a4 & 1);
      unint64_t v21 = sub_10045257C(v13);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_22;
      }
      unint64_t v16 = v21;
      if (v20)
      {
LABEL_6:
        sub_10019B17C(*(void *)(*a5 + 56) + 40 * v16, (uint64_t)v28);
        sub_10019B17C((uint64_t)v28, (uint64_t)v29);
        sub_100014524((uint64_t)v28);
        sub_100014524((uint64_t)v30);
        uint64_t v12 = *(void *)(*a5 + 56) + 40 * v16;
        sub_100014524(v12);
        sub_10018B164(v29, v12);
        goto LABEL_7;
      }
    }
    uint64_t v23 = (void *)*a5;
    *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(void *)(v23[6] + 8 * v16) = v13;
    sub_10018B164(v30, v23[7] + 40 * v16);
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_21;
    }
    uint64_t v23[2] = v26;
LABEL_7:
    sub_1003A48A0(v31);
    a4 = 1;
    if (!v32) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100470E34(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  return sub_100470E60(a1, a2, (unint64_t)sub_10055ACEC);
}

uint64_t sub_100470E60(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t i)
{
  id v6 = (uint64_t *)v3;
  unint64_t v9 = *v3;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_100459304(a1, a2, v9);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if (v4) {
    return v10;
  }
  if ((v12 & 1) == 0)
  {
    unint64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_55;
    }
    if ((unint64_t)*v6 >> 62)
    {
LABEL_56:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13 != v26) {
        goto LABEL_6;
      }
    }
    else if (v13 != *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      uint64_t v28 = (uint64_t (*)(uint64_t))i;
      for (unint64_t i = v10 + 5; ; ++i)
      {
        unint64_t v13 = i - 4;
        uint64_t v14 = *v6;
        if ((*v6 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_46;
          }
          uint64_t v15 = *(void *)(v14 + 8 * i);
          swift_retain();
        }
        uint64_t v30 = v15;
        char v16 = a1(&v30);
        swift_release();
        if ((v16 & 1) == 0)
        {
          if (v13 != v10)
          {
            uint64_t v17 = *v6;
            if ((*v6 & 0xC000000000000001) != 0)
            {
              uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v17 = *v6;
            }
            else
            {
              if ((v10 & 0x8000000000000000) != 0) {
                goto LABEL_49;
              }
              if (v10 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_50;
              }
              uint64_t v18 = swift_retain();
            }
            uint64_t v29 = v18;
            if ((v17 & 0xC000000000000001) != 0)
            {
              uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v17 = *v6;
            }
            else
            {
              if ((v13 & 0x8000000000000000) != 0) {
                goto LABEL_51;
              }
              if (v13 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_52;
              }
              uint64_t v19 = *(void *)(v17 + 8 * i);
              swift_retain();
            }
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *id v6 = v17;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
            {
              uint64_t v17 = v28(v17);
              *id v6 = v17;
            }
            *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v19;
            swift_release();
            specialized Array._endMutation()();
            uint64_t v21 = *v6;
            int v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *id v6 = v21;
            if (!v22 || v21 < 0 || (v21 & 0x4000000000000000) != 0)
            {
              uint64_t v21 = v28(v21);
              *id v6 = v21;
            }
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_53;
            }
            if (v13 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_54;
            }
            *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v29;
            swift_release();
            specialized Array._endMutation()();
          }
          BOOL v23 = __OFADD__(v10++, 1);
          if (v23) {
            goto LABEL_48;
          }
        }
        BOOL v23 = __OFADD__(v13, 1);
        unint64_t v13 = i - 3;
        if (v23) {
          goto LABEL_47;
        }
        if ((unint64_t)*v6 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v24 = *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v13 == v24) {
          return v10;
        }
      }
    }
    return v10;
  }
  if (!((unint64_t)*v6 >> 62)) {
    return *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_1004711D4(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DownloadRequest() - 8;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v33 = (uint64_t)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v35 = (uint64_t)&v30 - v11;
  unint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v31 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    uint64_t v30 = v1;
    uint64_t v32 = v15;
    while (v21 < v19)
    {
      int v22 = v3;
      uint64_t v36 = v20;
      uint64_t v23 = v35;
      sub_100473CD0(v12 + v20, v35, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      char v24 = a1(v23);
      uint64_t result = sub_1004758D4(v23, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          unint64_t v26 = *v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = sub_100473CD0(v26 + v31 + v16 * v32, v33, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
          if (v21 >= v27) {
            goto LABEL_34;
          }
          sub_100473CD0(v26 + v36, v34, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = v30;
          *uint64_t v30 = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10055AD6C(v26);
            unint64_t v26 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = sub_100475634(v34, v26 + v31 + v16 * v25);
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = sub_100475634(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      unint64_t v12 = *v3;
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v36 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100471558(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *char v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1004716FC(unint64_t a1)
{
  uint64_t v26 = type metadata accessor for DownloadRequest();
  uint64_t v3 = *(void *)(v26 - 8);
  uint64_t result = __chkstk_darwin(v26);
  unint64_t v6 = (Swift::UInt64 *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v25 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v13 = v3;
      unint64_t v14 = (v12 + 1) & v11;
      uint64_t v15 = *(void *)(v13 + 72);
      while (1)
      {
        int64_t v16 = v15 * v10;
        sub_100473CD0(*(void *)(v7 + 48) + v15 * v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*v6);
        Swift::Int v17 = Hasher._finalize()();
        sub_1004758D4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        unint64_t v18 = v17 & v11;
        if ((uint64_t)a1 >= (uint64_t)v14) {
          break;
        }
        if (v18 < v14) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v19 = v15 * a1;
        if ((uint64_t)(v15 * a1) < v16 || *(void *)(v7 + 48) + v15 * a1 >= *(void *)(v7 + 48) + v16 + v15)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v19 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_16;
        }
      }
      if (v18 < v14) {
        goto LABEL_6;
      }
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v18) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_16:
    *(void *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v25;
  }
  else
  {
    *(void *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v20 = *v1;
  uint64_t v21 = *(void *)(*v1 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
  return result;
}

uint64_t sub_100471998(int64_t a1)
{
  uint64_t v3 = type metadata accessor for MessageRegistration();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      int64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_1004764D8(&qword_1006607F0, 255, (void (*)(uint64_t))&type metadata accessor for MessageRegistration);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

uint64_t sub_100471CB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = sub_10019B17C((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

void *sub_100471CE8(uint64_t isStackAllocationSafe)
{
  int64_t v2 = (void *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_100471E40((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return (void *)v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    int64_t v2 = (void *)sub_100471E40((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_100471E40(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  uint64_t v50 = sub_1000172F8(&qword_100663F50);
  __chkstk_darwin(v50);
  uint64_t v52 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DownloadRequest();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v44 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v43 = (uint64_t *)((char *)&v40 - v8);
  uint64_t v49 = sub_1000172F8(&qword_100664110);
  __chkstk_darwin(v49);
  unint64_t v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v54 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v48 = *(void *)(v54 - 8);
  uint64_t v11 = __chkstk_darwin(v54);
  uint64_t v55 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v40 - v13;
  uint64_t v42 = 0;
  int64_t v15 = 0;
  uint64_t v51 = a3;
  uint64_t v18 = a3[8];
  uint64_t v17 = a3 + 8;
  uint64_t v16 = v18;
  uint64_t v19 = 1 << *((unsigned char *)v17 - 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v16;
  uint64_t v45 = v17;
  int64_t v46 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v47 = (char *)&v40 - v13;
  while (2)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      int64_t v53 = v15;
      unint64_t v24 = v23 | (v15 << 6);
    }
    else
    {
      int64_t v25 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v25 >= v46) {
        return sub_1004724A4(v41, v40, v42, v51);
      }
      unint64_t v26 = v45[v25];
      int64_t v27 = v15 + 1;
      if (!v26)
      {
        int64_t v27 = v15 + 2;
        if (v15 + 2 >= v46) {
          return sub_1004724A4(v41, v40, v42, v51);
        }
        unint64_t v26 = v45[v27];
        if (!v26)
        {
          int64_t v27 = v15 + 3;
          if (v15 + 3 >= v46) {
            return sub_1004724A4(v41, v40, v42, v51);
          }
          unint64_t v26 = v45[v27];
          if (!v26)
          {
            uint64_t v28 = v15 + 4;
            if (v15 + 4 >= v46) {
              return sub_1004724A4(v41, v40, v42, v51);
            }
            unint64_t v26 = v45[v28];
            if (!v26)
            {
              while (1)
              {
                int64_t v27 = v28 + 1;
                if (__OFADD__(v28, 1)) {
                  break;
                }
                if (v27 >= v46) {
                  return sub_1004724A4(v41, v40, v42, v51);
                }
                unint64_t v26 = v45[v27];
                ++v28;
                if (v26) {
                  goto LABEL_22;
                }
              }
LABEL_39:
              __break(1u);
              JUMPOUT(0x100472488);
            }
            int64_t v27 = v15 + 4;
          }
        }
      }
LABEL_22:
      unint64_t v21 = (v26 - 1) & v26;
      int64_t v53 = v27;
      unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
    }
    uint64_t v29 = *(void *)(v51[6] + 8 * v24);
    sub_100473CD0(v51[7] + *(void *)(v48 + 72) * v24, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    *unint64_t v10 = v29;
    uint64_t v30 = (uint64_t)v10;
    uint64_t v31 = (uint64_t)v10 + *(int *)(v49 + 48);
    sub_100473CD0((uint64_t)v14, v31, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    uint64_t v32 = v55;
    swift_storeEnumTagMultiPayload();
    uint64_t v33 = v52 + *(int *)(v50 + 48);
    sub_100473CD0(v31, v52, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    sub_100473CD0(v32, v33, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_27;
        }
        goto LABEL_25;
      case 2u:
        BOOL v22 = swift_getEnumCaseMultiPayload() == 2;
        goto LABEL_5;
      case 3u:
        BOOL v22 = swift_getEnumCaseMultiPayload() == 3;
        goto LABEL_5;
      case 4u:
        BOOL v22 = swift_getEnumCaseMultiPayload() == 4;
        goto LABEL_5;
      case 5u:
        BOOL v22 = swift_getEnumCaseMultiPayload() == 5;
        goto LABEL_5;
      case 6u:
        BOOL v22 = swift_getEnumCaseMultiPayload() == 6;
LABEL_5:
        unint64_t v14 = v47;
        int64_t v15 = v53;
        if (!v22) {
          goto LABEL_6;
        }
        sub_1004758D4(v55, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        sub_10001729C((uint64_t)v10, &qword_100664110);
        sub_1004758D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        goto LABEL_34;
      default:
        if (swift_getEnumCaseMultiPayload())
        {
LABEL_25:
          sub_1004758D4(v52, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
          unint64_t v14 = v47;
          int64_t v15 = v53;
LABEL_6:
          sub_1004758D4(v33, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
          sub_1004758D4(v55, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
          sub_10001729C((uint64_t)v10, &qword_100664110);
          sub_1004758D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
          continue;
        }
LABEL_27:
        uint64_t v34 = v43;
        sub_100474DE4(v52, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v35 = v44;
        sub_100474DE4(v33, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        uint64_t v36 = *v34;
        uint64_t v37 = *v35;
        sub_1004758D4((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        sub_1004758D4((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        sub_1004758D4(v55, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        unint64_t v10 = (void *)v30;
        sub_10001729C(v30, &qword_100664110);
        unint64_t v14 = v47;
        sub_1004758D4((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        int64_t v15 = v53;
        if (v36 != v37) {
          continue;
        }
LABEL_34:
        *(unint64_t *)((char *)v41 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        if (!__OFADD__(v42++, 1)) {
          continue;
        }
        __break(1u);
        return sub_1004724A4(v41, v40, v42, v51);
    }
  }
}

uint64_t sub_1004724A4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1000172F8(&qword_100663E18);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v15 = result;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = *a1;
  }
  uint64_t v17 = 0;
  uint64_t v18 = result + 64;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v17 << 6);
    }
    else
    {
      uint64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v37) {
        return v15;
      }
      unint64_t v22 = v36[v21];
      ++v17;
      if (!v22)
      {
        uint64_t v17 = v21 + 1;
        if (v21 + 1 >= v37) {
          return v15;
        }
        unint64_t v22 = v36[v17];
        if (!v22)
        {
          uint64_t v17 = v21 + 2;
          if (v21 + 2 >= v37) {
            return v15;
          }
          unint64_t v22 = v36[v17];
          if (!v22)
          {
            uint64_t v23 = v21 + 3;
            if (v23 >= v37) {
              return v15;
            }
            unint64_t v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v37) {
                  return v15;
                }
                unint64_t v22 = v36[v17];
                ++v23;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v23;
          }
        }
      }
LABEL_24:
      unint64_t v16 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
    }
    uint64_t v24 = *(void *)(a4[6] + 8 * v20);
    uint64_t v25 = *(void *)(v38 + 72);
    sub_100473CD0(a4[7] + v25 * v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    sub_100474DE4((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v26 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v18 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v18 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v32 = v28 == v31;
        if (v28 == v31) {
          unint64_t v28 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v18 + 8 * v28);
      }
      while (v33 == -1);
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(void *)(v18 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(void *)(*(void *)(v15 + 48) + 8 * v29) = v24;
    uint64_t result = sub_100474DE4((uint64_t)v11, *(void *)(v15 + 56) + v29 * v25, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      return v15;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100472800(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  int64_t v46 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v42 = (char *)&v37 - v11;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1000172F8(&qword_100663E08);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *a1;
  }
  uint64_t v15 = 0;
  uint64_t v40 = a4;
  uint64_t v41 = v43 + 16;
  uint64_t v45 = v43 + 32;
  uint64_t v16 = result + 64;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v44 = v15;
      unint64_t v18 = v17 | (v15 << 6);
    }
    else
    {
      uint64_t v19 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v39) {
        return v13;
      }
      unint64_t v20 = v38[v19];
      uint64_t v21 = v15 + 1;
      if (!v20)
      {
        uint64_t v21 = v15 + 2;
        if (v15 + 2 >= v39) {
          return v13;
        }
        unint64_t v20 = v38[v21];
        if (!v20)
        {
          uint64_t v21 = v15 + 3;
          if (v15 + 3 >= v39) {
            return v13;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            uint64_t v22 = v15 + 4;
            if (v15 + 4 >= v39) {
              return v13;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v39) {
                  return v13;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v15 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v14 = (v20 - 1) & v20;
      uint64_t v44 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = v42;
    uint64_t v24 = v43;
    uint64_t v25 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v25 * v18, v8);
    uint64_t v26 = *(void *)(a4[7] + 8 * v18);
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27(v46, v23, v8);
    sub_1004764D8((unint64_t *)&unk_100660E70, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v13 + 48) + v31 * v25, v46, v8);
    *(void *)(*(void *)(v13 + 56) + 8 * v31) = v26;
    ++*(void *)(v13 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v40;
    uint64_t v15 = v44;
    if (!a3) {
      return v13;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100472BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1000176B4;
  return sub_100470240(a1, a2, a3, v8);
}

uint64_t sub_100472C8C(uint64_t a1, void *a2)
{
  *(void *)(v2 + 16) = *a2;
  return _swift_task_switch(sub_100472CB0, 0, 0);
}

uint64_t sub_100472CB0()
{
  v0[3] = *(void *)(v0[2] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100472D64;
  return sub_1005330C4(0);
}

uint64_t sub_100472D64()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100472E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_1000176B4;
  return sub_1004705A8(a1, a2, a3, v8);
}

uint64_t sub_100472F30(uint64_t a1, void *a2)
{
  *(void *)(v2 + 16) = *a2;
  return _swift_task_switch(sub_100472F54, 0, 0);
}

uint64_t sub_100472F54()
{
  v0[3] = *(void *)(v0[2] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004785EC;
  return sub_100533F40();
}

void sub_100473004(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for AppInstallEntity.Entity();
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v7 = a2;
  id v8 = [v6 initWithPersistentID:a1 onConnection:v7];
  LODWORD(a1) = [v8 existsInDatabase];

  if (!a1)
  {

    id v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_1004730A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1 & 1;
  uint64_t v20 = 0;
  type metadata accessor for AppInstallEntity.Entity();
  id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  uint64_t v11 = (void *)sub_10043DAEC(v9, a2);
  [v10 setPredicate:v11];

  id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a5 descriptor:v10];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = &v20;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001A2178;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_100334198;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_100647990;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a5;
  swift_retain();
  swift_release();
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v20;
    swift_release();
    return v18;
  }
  return result;
}

uint64_t sub_1004732B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = *a4;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10000B238;
  return sub_1004707B4(a1, a2, a3, v10, a5);
}

uint64_t sub_10047337C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)(v3 + 16) = a3;
  *(void *)(v3 + 24) = v4;
  return _swift_task_switch(sub_1004733A0, 0, 0);
}

uint64_t sub_1004733A0()
{
  v0[4] = *(void *)(v0[3] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon14IPA_AppInstall_engine);
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100473458;
  uint64_t v2 = v0[2];
  return sub_100538120(v2);
}

uint64_t sub_100473458()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001D9DF0, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100473594(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a1 & 1;
  unsigned __int8 v20 = 1;
  type metadata accessor for AppInstallEntity.Entity();
  id v10 = [objc_allocWithZone((Class)ASUSQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata() memoryEntityClass:0];
  uint64_t v11 = (void *)sub_10043DAEC(v9, a2);
  [v10 setPredicate:v11];

  id v12 = [objc_allocWithZone((Class)ASUSQLiteQuery) initOnConnection:a5 descriptor:v10];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = &v20;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100473B08;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_1001A2194;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100248D44;
  aBlock[3] = &unk_1006477D8;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a5;
  swift_retain();
  swift_release();
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = v20;
    swift_release();
    return v18;
  }
  return result;
}

BOOL sub_1004737AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100663F50);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DownloadRequest();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v17 - v12);
  uint64_t v14 = (uint64_t)&v7[*(int *)(v5 + 56)];
  sub_100473CD0(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  sub_100473CD0(a2, v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
  type metadata accessor for AppInstallScheduler.ParkReason();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 2u:
      if (swift_getEnumCaseMultiPayload() == 2) {
        goto LABEL_7;
      }
      goto LABEL_15;
    case 3u:
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 4u:
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 5u:
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_15;
      }
      goto LABEL_7;
    case 6u:
      if (swift_getEnumCaseMultiPayload() != 6) {
        goto LABEL_15;
      }
LABEL_7:
      BOOL v15 = 1;
      break;
    default:
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_3:
        sub_1004758D4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
LABEL_15:
        sub_1004758D4(v14, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
        BOOL v15 = 0;
      }
      else
      {
LABEL_5:
        sub_100474DE4((uint64_t)v7, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        sub_100474DE4(v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        BOOL v15 = *v13 == *v11;
        sub_1004758D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
        sub_1004758D4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DownloadRequest);
      }
      break;
  }
  return v15;
}

uint64_t type metadata accessor for AppInstallScheduler.ParkReason()
{
  uint64_t result = qword_100664210;
  if (!qword_100664210) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100473AD0()
{
  return _swift_deallocObject(v0, 48, 7);
}

void *sub_100473B08(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_100248CC4(a1, a2, a3, *(unsigned char **)(v3 + 16), *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_100473B14()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100473B24()
{
  return swift_release();
}

void sub_100473B2C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10045F3C0(a1, v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

uint64_t sub_100473B54(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&dword_100663F60 + dword_100663F60);
  return v7(a1, v4, v5, v1 + 4);
}

uint64_t sub_100473C1C(uint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *))((char *)&dword_100663F78 + dword_100663F78);
  return v6(a1, v4);
}

uint64_t sub_100473CD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_100473D38(void *a1)
{
  return *a1 == **(void **)(v1 + 16);
}

uint64_t sub_100473D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInstallScheduler.ParkReason();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v52 = v6;
  uint64_t v51 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_1000172F8(&qword_100664110);
  uint64_t v10 = __chkstk_darwin(v59);
  uint64_t v12 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  uint64_t v58 = (char *)&v47 - v13;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v55 = a1 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  char v57 = (uint64_t *)(a2 + 136);
  int64_t v56 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  uint64_t v50 = (char *)&type metadata for () + 8;
  uint64_t v48 = a1;
  uint64_t v54 = a2;
  uint64_t v53 = v5;
  uint64_t v49 = v9;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      int64_t v68 = v19;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_25;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v22 >= v56) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v55 + 8 * v22);
    int64_t v24 = v19 + 1;
    if (!v23)
    {
      int64_t v24 = v19 + 2;
      if (v19 + 2 >= v56) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v55 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v19 + 3;
        if (v19 + 3 >= v56) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v55 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v19 + 4;
          if (v19 + 4 >= v56) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v55 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v17 = (v23 - 1) & v23;
    int64_t v68 = v24;
    unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8 * v21);
    unint64_t v27 = v58;
    sub_100473CD0(*(void *)(a1 + 56) + *(void *)(v5 + 72) * v21, (uint64_t)&v58[*(int *)(v59 + 48)], (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    *unint64_t v27 = v26;
    sub_10001733C((uint64_t)v27, (uint64_t)v12, &qword_100664110);
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    uint64_t v28 = v12;
    uint64_t v29 = *v12;
    unint64_t v30 = v57;
    swift_beginAccess();
    uint64_t v31 = *v30;
    if (!*(void *)(v31 + 16) || (unint64_t v32 = sub_10045257C(v29), (v33 & 1) == 0))
    {
      uint64_t v67 = 0;
      long long v65 = 0u;
      long long v66 = 0u;
LABEL_5:
      sub_10001729C((uint64_t)&v65, &qword_10065F220);
      swift_endAccess();
      uint64_t v12 = v28;
      goto LABEL_6;
    }
    sub_10019B17C(*(void *)(v31 + 56) + 40 * v32, (uint64_t)&v65);
    if (!*((void *)&v66 + 1)) {
      goto LABEL_5;
    }
    sub_10019B17C((uint64_t)&v65, (uint64_t)v64);
    sub_10001729C((uint64_t)&v65, &qword_10065F220);
    swift_endAccess();
    BOOL v34 = sub_10018AC60(v64, v64[3]);
    uint64_t v35 = (uint64_t)v28 + *(int *)(v59 + 48);
    uint64_t v36 = *v34;
    uint64_t v37 = type metadata accessor for TaskPriority();
    uint64_t v38 = *(void *)(v37 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v9, 1, 1, v37);
    uint64_t v39 = v51;
    sub_100473CD0(v35, v51, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    unint64_t v40 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = 0;
    v41[3] = 0;
    v41[4] = v36;
    uint64_t v42 = v39;
    uint64_t v9 = v49;
    sub_100474DE4(v42, (uint64_t)v41 + v40, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48))(v9, 1, v37);
    swift_retain();
    if (v43 == 1)
    {
      sub_10001729C((uint64_t)v9, &qword_10065B220);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v37);
    }
    if (v41[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v44 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v46 = v45;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v46 = 0;
    }
    a1 = v48;
    if (v46 | v44)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = v44;
      uint64_t v63 = v46;
    }
    uint64_t v12 = v28;
    swift_task_create();
    swift_release();
    sub_100014524((uint64_t)v64);
    uint64_t v5 = v53;
LABEL_6:
    uint64_t result = sub_10001729C((uint64_t)v12, &qword_100664110);
    int64_t v19 = v68;
  }
  uint64_t v25 = v19 + 5;
  if (v19 + 5 >= v56) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v55 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v19 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v56) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v55 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_24;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100474418(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = sub_1000172F8(&qword_100663FE8);
  uint64_t v4 = __chkstk_darwin(v38);
  uint64_t v40 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v34 - v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  uint64_t v41 = a2;
  uint64_t v11 = (uint64_t *)(a2 + 152);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v39 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v42)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v42 = i;
      unint64_t v17 = v16 | (i << 6);
      goto LABEL_24;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v36) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v35 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v36) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v35 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v36) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v35 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = i + 4;
          if (i + 4 >= v36) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v35 + 8 * v20);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    int64_t v42 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_24:
    uint64_t v22 = v39;
    uint64_t v23 = *(void *)(v39 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 + 72);
    uint64_t v28 = (uint64_t)v37;
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v37, v23 + v27 * v17, v24);
    *(void *)(v28 + *(int *)(v38 + 48)) = *(void *)(*(void *)(v22 + 56) + 8 * v17);
    uint64_t v15 = v40;
    sub_10001733C(v28, v40, &qword_100663FE8);
    if ((swift_task_isCurrentExecutor() & 1) == 0) {
      swift_task_reportUnexpectedExecutor();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_10000F800(v15);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if (v31)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v33 = *v11;
      uint64_t v43 = *v11;
      *uint64_t v11 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10052E71C();
        uint64_t v33 = v43;
      }
      (*(void (**)(unint64_t, uint64_t))(v26 + 8))(*(void *)(v33 + 48) + v29 * v27, v24);
      uint64_t v14 = v43;
      sub_100430600(v29, v43);
      *uint64_t v11 = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = v40;
    }
    swift_endAccess();
    uint64_t result = sub_10001729C(v15, &qword_100663FE8);
  }
  uint64_t v21 = i + 5;
  if (i + 5 >= v36) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v35 + 8 * v21);
  if (v19)
  {
    int64_t v20 = i + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v36) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v35 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004747E8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, void))
{
  uint64_t v22 = a2;
  unint64_t v29 = a4;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v24 = 0;
  uint64_t v25 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v28 = v6 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v6 + 8;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26) {
      return sub_100472800(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v26) {
        return sub_100472800(v23, v22, v24, (void *)a3);
      }
      unint64_t v19 = *(void *)(v25 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v26) {
          return sub_100472800(v23, v22, v24, (void *)a3);
        }
        unint64_t v19 = *(void *)(v25 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(a3 + 48) + *(void *)(v6 + 72) * v16, v5);
    char v17 = v29(v9, *(void *)(*(void *)(a3 + 56) + 8 * v16));
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v17)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_100472800(v23, v22, v24, (void *)a3);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v26) {
    return sub_100472800(v23, v22, v24, (void *)a3);
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v26) {
      return sub_100472800(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100474A8C(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, void), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_1004747E8((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_1004747E8((unint64_t *)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_100474C08()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000176B4;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000176B4;
  return sub_10046B390();
}

uint64_t sub_100474CE0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000176B4;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000176B4;
  return sub_10046B390();
}

BOOL sub_100474DB4(uint64_t a1, uint64_t a2)
{
  return *(void *)(v2 + 16) == a2;
}

void sub_100474DC4(void **a1@<X0>, unsigned char *a2@<X8>)
{
  sub_10046FC0C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100474DE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100474E4C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AppInstallScheduler.ParkReason() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  char v7 = v1 + 4;
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  size_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000176B4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))((char *)&dword_100663FC0
                                                                              + dword_100663FC0);
  return v10(a1, v5, v6, v7, v8);
}

uint64_t sub_100474F54(uint64_t a1)
{
  uint64_t v5 = *(uint64_t **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  char v7 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))((char *)&dword_100663FD8 + dword_100663FD8);
  return v7(a1, v5, v4);
}

uint64_t sub_10047500C(void *a1)
{
  return sub_10046E38C(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10047501C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100475064(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DownloadRequest() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10000B238;
  return sub_10046E454(a1, v5, v6, v7, v8);
}

uint64_t sub_100475164()
{
  uint64_t v1 = (int *)type metadata accessor for DownloadRequest();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  sub_100014524(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v0 + v3 + v1[5];
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100014524(v0 + v3 + v1[7]);

  if (*(void *)(v0 + v3 + v1[12] + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5 + v1[13];
  sub_10033CB6C(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(void *)(v8 + 32), *(void *)(v8 + 40), *(void *)(v8 + 48), *(void *)(v8 + 56), *(void *)(v8 + 64), *(void *)(v8 + 72), *(void *)(v8 + 80), *(void *)(v8 + 88));
  uint64_t v9 = v5 + v1[14];
  if (*(void *)(v9 + 32)) {
    sub_100014524(v9 + 8);
  }
  uint64_t v10 = v5 + v1[16];
  if (*(void *)(v10 + 24)) {
    sub_100014524(v10);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10047532C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DownloadRequest() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_10046E0B8(a1, v5, v6, v7, v8);
}

uint64_t sub_10047542C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AppInstallScheduler.ParkReason() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() <= 1)
  {
    uint64_t v6 = (int *)type metadata accessor for DownloadRequest();
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100014524(v5 + v6[7]);

    if (*(void *)(v5 + v6[12] + 16) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = v5 + v6[13];
    sub_10033CB6C(*(void *)v9, *(void *)(v9 + 8), *(void *)(v9 + 16), *(void *)(v9 + 24), *(void *)(v9 + 32), *(void *)(v9 + 40), *(void *)(v9 + 48), *(void *)(v9 + 56), *(void *)(v9 + 64), *(void *)(v9 + 72), *(void *)(v9 + 80), *(void *)(v9 + 88));
    uint64_t v10 = v5 + v6[14];
    if (*(void *)(v10 + 32)) {
      sub_100014524(v10 + 8);
    }
    uint64_t v11 = v5 + v6[16];
    if (*(void *)(v11 + 24)) {
      sub_100014524(v11);
    }
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

BOOL sub_100475614(uint64_t a1)
{
  return sub_10045BDFC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100475634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DownloadRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100475698(void *a1)
{
  return sub_10045F180(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1004756A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004756E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004756F4(void *a1@<X0>, void *a2@<X8>)
{
  sub_100460604(a1, v2[2], v2[3], v2[4], a2);
}

id sub_100475700(void *a1)
{
  return sub_100460268(a1, *(void *)(v1 + 16));
}

uint64_t sub_100475708@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v5 & 1;
  return result;
}

uint64_t sub_100475758(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_1000176B4;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&dword_100664070 + dword_100664070);
  return v7(a1, v4, v5, v1 + 4);
}

uint64_t sub_100475820(uint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, void *))((char *)&dword_100664088 + dword_100664088);
  return v6(a1, v4);
}

uint64_t sub_1004758D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100475938()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  v3[5] = v2;
  return _swift_task_switch(sub_1004620A4, v2, 0);
}

uint64_t sub_1004759E8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  v3[8] = v2;
  return _swift_task_switch(sub_100460E3C, v2, 0);
}

uint64_t sub_100475A98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000B238;
  return sub_1004652FC(a1, v4, v5, v6);
}

uint64_t sub_100475B50()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000176B4;
  v3[5] = v2;
  return _swift_task_switch(sub_100469AE8, v2, 0);
}

uint64_t sub_100475C00(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_10046A60C(a1, v4, v5, v6);
}

uint64_t sub_100475CB8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000176B4;
  return sub_10046BB80(a1, v4, v5, v6);
}

uint64_t sub_100475D70(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_100475DB0(void *a1)
{
  return sub_10046974C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100475DB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

void sub_100475DFC(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a2)
  {

    sub_10033882C(a3, a4, a5, a6);
  }
}

uint64_t sub_100475E6C(void *a1)
{
  return sub_1004699F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100475E80()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000176B4;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000176B4;
  return sub_10033515C(v0 + 40);
}

uint64_t sub_100475F68()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100475FA4()
{
  swift_unknownObjectRelease();
  swift_release();

  sub_10033882C(*(void **)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

  return _swift_deallocObject(v0, 81, 7);
}

uint64_t sub_100476004()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000176B4;
  uint64_t v3 = (void *)swift_task_alloc();
  v2[2] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000176B4;
  return sub_10033515C(v0 + 40);
}

uint64_t sub_1004760EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100476148(uint64_t a1)
{
  return a1;
}

uint64_t sub_10047617C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1004761BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004761F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_100463B58(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1004762C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_100464A94(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100476388()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004763D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000176B4;
  return sub_100464424(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100476498()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004764D0(void *a1, uint64_t a2)
{
  return sub_100461B58(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1004764D8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100476520(void **a1@<X0>, __objc2_prot_list **a2@<X8>)
{
  sub_100462738(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

void *sub_100476544(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v35 = *a2;
    *a1 = *a2;
    a1 = (void *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      int64_t v36 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v37 = v36[5];
      uint64_t v38 = (char *)a1 + v37;
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
      uint64_t v41 = v36[6];
      int64_t v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      *int64_t v42 = *v43;
      *((void *)v42 + 1) = *((void *)v43 + 1);
      *((_WORD *)v42 + 8) = *((_WORD *)v43 + 8);
      uint64_t v44 = *((void *)v43 + 4);
      *((void *)v42 + 3) = *((void *)v43 + 3);
      *((void *)v42 + 4) = v44;
      uint64_t v45 = *((void *)v43 + 6);
      *((void *)v42 + 5) = *((void *)v43 + 5);
      *((void *)v42 + 6) = v45;
      v42[56] = v43[56];
      uint64_t v46 = v36[7];
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      long long v49 = *(_OWORD *)((char *)a2 + v46 + 24);
      *(_OWORD *)((char *)a1 + v46 + 24) = v49;
      uint64_t v50 = v49;
      uint64_t v51 = **(void (***)(char *, char *, uint64_t))(v49 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51(v47, v48, v50);
      uint64_t v52 = v36[8];
      uint64_t v53 = *(void **)((char *)a2 + v52);
      *(void *)((char *)a1 + v52) = v53;
      *((unsigned char *)a1 + v36[9]) = *((unsigned char *)a2 + v36[9]);
      uint64_t v54 = v36[10];
      uint64_t v55 = (char *)a1 + v54;
      int64_t v56 = (char *)a2 + v54;
      *(void *)uint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      *((unsigned char *)a1 + v36[11]) = *((unsigned char *)a2 + v36[11]);
      uint64_t v57 = v36[12];
      uint64_t v58 = (char *)a1 + v57;
      uint64_t v59 = (char *)a2 + v57;
      uint64_t v60 = *(void *)((char *)a2 + v57 + 16);
      id v61 = v53;
      if (v60 == 1)
      {
        long long v62 = *((_OWORD *)v59 + 1);
        *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v62;
        *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
      }
      else
      {
        char *v58 = *v59;
        *((void *)v58 + 1) = *((void *)v59 + 1);
        *((void *)v58 + 2) = v60;
        *((void *)v58 + 3) = *((void *)v59 + 3);
        v58[32] = v59[32];
        *((void *)v58 + 5) = *((void *)v59 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v79 = v36[13];
      uint64_t v80 = (void *)((char *)a1 + v79);
      uint64_t v81 = (void *)((char *)a2 + v79);
      uint64_t v82 = *v81;
      unint64_t v83 = v81[1];
      uint64_t v84 = v81[2];
      unint64_t v85 = v81[3];
      uint64_t v86 = v81[4];
      uint64_t v87 = v81[5];
      uint64_t v112 = v81[7];
      uint64_t v114 = v81[8];
      uint64_t v116 = v81[9];
      unint64_t v118 = v81[10];
      unint64_t v120 = v81[11];
      uint64_t v122 = v81[12];
      uint64_t v124 = v81[13];
      unint64_t v126 = v36;
      uint64_t v88 = v81[6];
      sub_100254D34(*v81, v83, v84, v85, v86, v87, v88, v112, v114, v116, v118, v120);
      *uint64_t v80 = v82;
      v80[1] = v83;
      v80[2] = v84;
      v80[3] = v85;
      v80[4] = v86;
      v80[5] = v87;
      v80[6] = v88;
      uint64_t v73 = v126;
      v80[7] = v112;
      v80[8] = v114;
      v80[9] = v116;
      v80[10] = v118;
      v80[11] = v120;
      v80[12] = v122;
      v80[13] = v124;
      uint64_t v89 = v126[14];
      uint64_t v90 = (char *)a1 + v89;
      uint64_t v91 = (char *)a2 + v89;
      uint64_t v92 = *(void *)((char *)a2 + v89 + 32);
      if (v92)
      {
        *uint64_t v90 = *v91;
        uint64_t v93 = *((void *)v91 + 5);
        *((void *)v90 + 4) = v92;
        *((void *)v90 + 5) = v93;
        (**(void (***)(uint64_t, uint64_t))(v92 - 8))((uint64_t)(v90 + 8), (uint64_t)(v91 + 8));
        *((_OWORD *)v90 + 3) = *((_OWORD *)v91 + 3);
      }
      else
      {
        long long v100 = *((_OWORD *)v91 + 1);
        *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
        *((_OWORD *)v90 + 1) = v100;
        long long v101 = *((_OWORD *)v91 + 3);
        *((_OWORD *)v90 + 2) = *((_OWORD *)v91 + 2);
        *((_OWORD *)v90 + 3) = v101;
      }
      *((unsigned char *)a1 + v126[15]) = *((unsigned char *)a2 + v126[15]);
      uint64_t v102 = v126[16];
      uint64_t v97 = (char *)a1 + v102;
      uint64_t v98 = (char *)a2 + v102;
      uint64_t v99 = *(void *)((char *)a2 + v102 + 24);
      if (!v99)
      {
        long long v105 = *((_OWORD *)v98 + 1);
        *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
        *((_OWORD *)v97 + 1) = v105;
        *((void *)v97 + 4) = *((void *)v98 + 4);
        goto LABEL_24;
      }
      goto LABEL_21;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      uint64_t v8 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v9 = v8[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      uint64_t v13 = v8[6];
      unint64_t v14 = (char *)a1 + v13;
      unint64_t v15 = (char *)a2 + v13;
      *unint64_t v14 = *v15;
      *((void *)v14 + 1) = *((void *)v15 + 1);
      *((_WORD *)v14 + 8) = *((_WORD *)v15 + 8);
      uint64_t v16 = *((void *)v15 + 4);
      *((void *)v14 + 3) = *((void *)v15 + 3);
      *((void *)v14 + 4) = v16;
      uint64_t v17 = *((void *)v15 + 6);
      *((void *)v14 + 5) = *((void *)v15 + 5);
      *((void *)v14 + 6) = v17;
      v14[56] = v15[56];
      uint64_t v18 = v8[7];
      unint64_t v19 = (char *)a1 + v18;
      int64_t v20 = (char *)a2 + v18;
      long long v21 = *(_OWORD *)((char *)a2 + v18 + 24);
      *(_OWORD *)((char *)a1 + v18 + 24) = v21;
      uint64_t v22 = v21;
      uint64_t v23 = **(void (***)(char *, char *, uint64_t))(v21 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23(v19, v20, v22);
      uint64_t v24 = v8[8];
      uint64_t v25 = *(void **)((char *)a2 + v24);
      *(void *)((char *)a1 + v24) = v25;
      *((unsigned char *)a1 + v8[9]) = *((unsigned char *)a2 + v8[9]);
      uint64_t v26 = v8[10];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      *(void *)uint64_t v27 = *(void *)v28;
      v27[8] = v28[8];
      *((unsigned char *)a1 + v8[11]) = *((unsigned char *)a2 + v8[11]);
      uint64_t v29 = v8[12];
      char v30 = (char *)a1 + v29;
      char v31 = (char *)a2 + v29;
      uint64_t v32 = *(void *)((char *)a2 + v29 + 16);
      id v33 = v25;
      if (v32 == 1)
      {
        long long v34 = *((_OWORD *)v31 + 1);
        *(_OWORD *)char v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v34;
        *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
      }
      else
      {
        *char v30 = *v31;
        *((void *)v30 + 1) = *((void *)v31 + 1);
        *((void *)v30 + 2) = v32;
        *((void *)v30 + 3) = *((void *)v31 + 3);
        v30[32] = v31[32];
        *((void *)v30 + 5) = *((void *)v31 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v63 = v8[13];
      uint64_t v64 = (void *)((char *)a1 + v63);
      long long v65 = (void *)((char *)a2 + v63);
      uint64_t v66 = *v65;
      unint64_t v67 = v65[1];
      uint64_t v68 = v65[2];
      unint64_t v69 = v65[3];
      uint64_t v70 = v65[4];
      uint64_t v71 = v65[6];
      uint64_t v111 = v65[7];
      uint64_t v113 = v65[8];
      uint64_t v115 = v65[9];
      unint64_t v117 = v65[10];
      unint64_t v119 = v65[11];
      uint64_t v121 = v65[12];
      uint64_t v123 = v65[13];
      uint64_t v125 = v8;
      uint64_t v72 = v65[5];
      sub_100254D34(*v65, v67, v68, v69, v70, v72, v71, v111, v113, v115, v117, v119);
      *uint64_t v64 = v66;
      v64[1] = v67;
      v64[2] = v68;
      v64[3] = v69;
      v64[4] = v70;
      void v64[5] = v72;
      uint64_t v73 = v125;
      v64[6] = v71;
      v64[7] = v111;
      v64[8] = v113;
      v64[9] = v115;
      v64[10] = v117;
      v64[11] = v119;
      v64[12] = v121;
      v64[13] = v123;
      uint64_t v74 = v125[14];
      uint64_t v75 = (char *)a1 + v74;
      int64_t v76 = (char *)a2 + v74;
      uint64_t v77 = *(void *)((char *)a2 + v74 + 32);
      if (v77)
      {
        *uint64_t v75 = *v76;
        uint64_t v78 = *((void *)v76 + 5);
        *((void *)v75 + 4) = v77;
        *((void *)v75 + 5) = v78;
        (**(void (***)(uint64_t, uint64_t))(v77 - 8))((uint64_t)(v75 + 8), (uint64_t)(v76 + 8));
        *((_OWORD *)v75 + 3) = *((_OWORD *)v76 + 3);
      }
      else
      {
        long long v94 = *((_OWORD *)v76 + 1);
        *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
        *((_OWORD *)v75 + 1) = v94;
        long long v95 = *((_OWORD *)v76 + 3);
        *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
        *((_OWORD *)v75 + 3) = v95;
      }
      *((unsigned char *)a1 + v125[15]) = *((unsigned char *)a2 + v125[15]);
      uint64_t v96 = v125[16];
      uint64_t v97 = (char *)a1 + v96;
      uint64_t v98 = (char *)a2 + v96;
      uint64_t v99 = *(void *)((char *)a2 + v96 + 24);
      if (!v99)
      {
        long long v104 = *((_OWORD *)v98 + 1);
        *(_OWORD *)uint64_t v97 = *(_OWORD *)v98;
        *((_OWORD *)v97 + 1) = v104;
        *((void *)v97 + 4) = *((void *)v98 + 4);
        goto LABEL_24;
      }
LABEL_21:
      uint64_t v103 = *((void *)v98 + 4);
      *((void *)v97 + 3) = v99;
      *((void *)v97 + 4) = v103;
      (**(void (***)(void))(v99 - 8))();
LABEL_24:
      uint64_t v106 = v73[17];
      uint64_t v107 = (void *)((char *)a1 + v106);
      uint64_t v108 = (void *)((char *)a2 + v106);
      uint64_t v109 = v108[1];
      *uint64_t v107 = *v108;
      v107[1] = v109;
      *((unsigned char *)a1 + v73[18]) = *((unsigned char *)a2 + v73[18]);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_100476CF4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = (int *)type metadata accessor for DownloadRequest();
    uint64_t v4 = a1 + v3[5];
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100014524(a1 + v3[7]);

    if (*(void *)(a1 + v3[12] + 16) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v6 = a1 + v3[13];
    sub_10033CB6C(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(void *)(v6 + 32), *(void *)(v6 + 40), *(void *)(v6 + 48), *(void *)(v6 + 56), *(void *)(v6 + 64), *(void *)(v6 + 72), *(void *)(v6 + 80), *(void *)(v6 + 88));
    uint64_t v7 = a1 + v3[14];
    if (*(void *)(v7 + 32)) {
      sub_100014524(v7 + 8);
    }
    uint64_t v8 = a1 + v3[16];
    if (*(void *)(v8 + 24)) {
      sub_100014524(v8);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100476E58(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    long long v34 = (int *)type metadata accessor for DownloadRequest();
    uint64_t v35 = v34[5];
    int64_t v36 = (char *)a1 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    uint64_t v39 = v34[6];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    *uint64_t v40 = *v41;
    *((void *)v40 + 1) = *((void *)v41 + 1);
    *((_WORD *)v40 + 8) = *((_WORD *)v41 + 8);
    uint64_t v42 = *((void *)v41 + 4);
    *((void *)v40 + 3) = *((void *)v41 + 3);
    *((void *)v40 + 4) = v42;
    uint64_t v43 = *((void *)v41 + 6);
    *((void *)v40 + 5) = *((void *)v41 + 5);
    *((void *)v40 + 6) = v43;
    v40[56] = v41[56];
    uint64_t v44 = v34[7];
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    long long v47 = *(_OWORD *)((char *)a2 + v44 + 24);
    *(_OWORD *)((char *)a1 + v44 + 24) = v47;
    uint64_t v48 = v47;
    long long v49 = **(void (***)(char *, char *, uint64_t))(v47 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49(v45, v46, v48);
    uint64_t v50 = v34[8];
    uint64_t v51 = *(void **)((char *)a2 + v50);
    *(void *)((char *)a1 + v50) = v51;
    *((unsigned char *)a1 + v34[9]) = *((unsigned char *)a2 + v34[9]);
    uint64_t v52 = v34[10];
    uint64_t v53 = (char *)a1 + v52;
    uint64_t v54 = (char *)a2 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    *((unsigned char *)a1 + v34[11]) = *((unsigned char *)a2 + v34[11]);
    uint64_t v55 = v34[12];
    int64_t v56 = (char *)a1 + v55;
    uint64_t v57 = (char *)a2 + v55;
    uint64_t v58 = *(void *)((char *)a2 + v55 + 16);
    id v59 = v51;
    if (v58 == 1)
    {
      long long v60 = *((_OWORD *)v57 + 1);
      *(_OWORD *)int64_t v56 = *(_OWORD *)v57;
      *((_OWORD *)v56 + 1) = v60;
      *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    }
    else
    {
      *int64_t v56 = *v57;
      *((void *)v56 + 1) = *((void *)v57 + 1);
      *((void *)v56 + 2) = v58;
      *((void *)v56 + 3) = *((void *)v57 + 3);
      v56[32] = v57[32];
      *((void *)v56 + 5) = *((void *)v57 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v77 = v34[13];
    uint64_t v78 = (void *)((char *)a1 + v77);
    uint64_t v79 = (void *)((char *)a2 + v77);
    uint64_t v80 = *v79;
    unint64_t v81 = v79[1];
    uint64_t v82 = v79[2];
    unint64_t v83 = v79[3];
    uint64_t v84 = v79[4];
    uint64_t v85 = v79[5];
    uint64_t v110 = v79[7];
    uint64_t v112 = v79[8];
    uint64_t v114 = v79[9];
    unint64_t v116 = v79[10];
    unint64_t v118 = v79[11];
    uint64_t v120 = v79[12];
    uint64_t v122 = v79[13];
    uint64_t v124 = v34;
    uint64_t v86 = v79[6];
    sub_100254D34(*v79, v81, v82, v83, v84, v85, v86, v110, v112, v114, v116, v118);
    *uint64_t v78 = v80;
    v78[1] = v81;
    v78[2] = v82;
    v78[3] = v83;
    v78[4] = v84;
    v78[5] = v85;
    v78[6] = v86;
    uint64_t v71 = v124;
    v78[7] = v110;
    v78[8] = v112;
    v78[9] = v114;
    v78[10] = v116;
    v78[11] = v118;
    v78[12] = v120;
    v78[13] = v122;
    uint64_t v87 = v124[14];
    uint64_t v88 = (char *)a1 + v87;
    uint64_t v89 = (char *)a2 + v87;
    uint64_t v90 = *(void *)((char *)a2 + v87 + 32);
    if (v90)
    {
      *uint64_t v88 = *v89;
      uint64_t v91 = *((void *)v89 + 5);
      *((void *)v88 + 4) = v90;
      *((void *)v88 + 5) = v91;
      (**(void (***)(uint64_t, uint64_t))(v90 - 8))((uint64_t)(v88 + 8), (uint64_t)(v89 + 8));
      *((_OWORD *)v88 + 3) = *((_OWORD *)v89 + 3);
    }
    else
    {
      long long v98 = *((_OWORD *)v89 + 1);
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      *((_OWORD *)v88 + 1) = v98;
      long long v99 = *((_OWORD *)v89 + 3);
      *((_OWORD *)v88 + 2) = *((_OWORD *)v89 + 2);
      *((_OWORD *)v88 + 3) = v99;
    }
    *((unsigned char *)a1 + v124[15]) = *((unsigned char *)a2 + v124[15]);
    uint64_t v100 = v124[16];
    long long v95 = (char *)a1 + v100;
    uint64_t v96 = (char *)a2 + v100;
    uint64_t v97 = *(void *)((char *)a2 + v100 + 24);
    if (!v97)
    {
      long long v103 = *((_OWORD *)v96 + 1);
      *(_OWORD *)long long v95 = *(_OWORD *)v96;
      *((_OWORD *)v95 + 1) = v103;
      *((void *)v95 + 4) = *((void *)v96 + 4);
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    uint64_t v7 = (int *)type metadata accessor for DownloadRequest();
    uint64_t v8 = v7[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = v7[6];
    uint64_t v13 = (char *)a1 + v12;
    unint64_t v14 = (char *)a2 + v12;
    *uint64_t v13 = *v14;
    *((void *)v13 + 1) = *((void *)v14 + 1);
    *((_WORD *)v13 + 8) = *((_WORD *)v14 + 8);
    uint64_t v15 = *((void *)v14 + 4);
    *((void *)v13 + 3) = *((void *)v14 + 3);
    *((void *)v13 + 4) = v15;
    uint64_t v16 = *((void *)v14 + 6);
    *((void *)v13 + 5) = *((void *)v14 + 5);
    *((void *)v13 + 6) = v16;
    v13[56] = v14[56];
    uint64_t v17 = v7[7];
    uint64_t v18 = (char *)a1 + v17;
    unint64_t v19 = (char *)a2 + v17;
    long long v20 = *(_OWORD *)((char *)a2 + v17 + 24);
    *(_OWORD *)((char *)a1 + v17 + 24) = v20;
    uint64_t v21 = v20;
    uint64_t v22 = **(void (***)(char *, char *, uint64_t))(v20 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v18, v19, v21);
    uint64_t v23 = v7[8];
    uint64_t v24 = *(void **)((char *)a2 + v23);
    *(void *)((char *)a1 + v23) = v24;
    *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
    uint64_t v25 = v7[10];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
    uint64_t v28 = v7[12];
    uint64_t v29 = (char *)a1 + v28;
    char v30 = (char *)a2 + v28;
    uint64_t v31 = *(void *)((char *)a2 + v28 + 16);
    id v32 = v24;
    if (v31 == 1)
    {
      long long v33 = *((_OWORD *)v30 + 1);
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v33;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    else
    {
      *uint64_t v29 = *v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      *((void *)v29 + 2) = v31;
      *((void *)v29 + 3) = *((void *)v30 + 3);
      v29[32] = v30[32];
      *((void *)v29 + 5) = *((void *)v30 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v61 = v7[13];
    long long v62 = (void *)((char *)a1 + v61);
    uint64_t v63 = (void *)((char *)a2 + v61);
    uint64_t v64 = *v63;
    unint64_t v65 = v63[1];
    uint64_t v66 = v63[2];
    unint64_t v67 = v63[3];
    uint64_t v68 = v63[4];
    uint64_t v69 = v63[6];
    uint64_t v109 = v63[7];
    uint64_t v111 = v63[8];
    uint64_t v113 = v63[9];
    unint64_t v115 = v63[10];
    unint64_t v117 = v63[11];
    uint64_t v119 = v63[12];
    uint64_t v121 = v63[13];
    uint64_t v123 = v7;
    uint64_t v70 = v63[5];
    sub_100254D34(*v63, v65, v66, v67, v68, v70, v69, v109, v111, v113, v115, v117);
    *long long v62 = v64;
    v62[1] = v65;
    v62[2] = v66;
    v62[3] = v67;
    v62[4] = v68;
    v62[5] = v70;
    uint64_t v71 = v123;
    v62[6] = v69;
    v62[7] = v109;
    v62[8] = v111;
    v62[9] = v113;
    v62[10] = v115;
    v62[11] = v117;
    v62[12] = v119;
    v62[13] = v121;
    uint64_t v72 = v123[14];
    uint64_t v73 = (char *)a1 + v72;
    uint64_t v74 = (char *)a2 + v72;
    uint64_t v75 = *(void *)((char *)a2 + v72 + 32);
    if (v75)
    {
      *uint64_t v73 = *v74;
      uint64_t v76 = *((void *)v74 + 5);
      *((void *)v73 + 4) = v75;
      *((void *)v73 + 5) = v76;
      (**(void (***)(uint64_t, uint64_t))(v75 - 8))((uint64_t)(v73 + 8), (uint64_t)(v74 + 8));
      *((_OWORD *)v73 + 3) = *((_OWORD *)v74 + 3);
    }
    else
    {
      long long v92 = *((_OWORD *)v74 + 1);
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v92;
      long long v93 = *((_OWORD *)v74 + 3);
      *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
      *((_OWORD *)v73 + 3) = v93;
    }
    *((unsigned char *)a1 + v123[15]) = *((unsigned char *)a2 + v123[15]);
    uint64_t v94 = v123[16];
    long long v95 = (char *)a1 + v94;
    uint64_t v96 = (char *)a2 + v94;
    uint64_t v97 = *(void *)((char *)a2 + v94 + 24);
    if (!v97)
    {
      long long v102 = *((_OWORD *)v96 + 1);
      *(_OWORD *)long long v95 = *(_OWORD *)v96;
      *((_OWORD *)v95 + 1) = v102;
      *((void *)v95 + 4) = *((void *)v96 + 4);
      goto LABEL_22;
    }
LABEL_19:
    uint64_t v101 = *((void *)v96 + 4);
    *((void *)v95 + 3) = v97;
    *((void *)v95 + 4) = v101;
    (**(void (***)(void))(v97 - 8))();
LABEL_22:
    uint64_t v104 = v71[17];
    long long v105 = (void *)((char *)a1 + v104);
    uint64_t v106 = (void *)((char *)a2 + v104);
    uint64_t v107 = v106[1];
    *long long v105 = *v106;
    v105[1] = v107;
    *((unsigned char *)a1 + v71[18]) = *((unsigned char *)a2 + v71[18]);
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_1004775C4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004758D4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      long long v33 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v34 = v33[5];
      uint64_t v35 = (char *)a1 + v34;
      int64_t v36 = (char *)a2 + v34;
      uint64_t v37 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
      uint64_t v38 = v33[6];
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      *uint64_t v39 = *v40;
      *((void *)v39 + 1) = *((void *)v40 + 1);
      v39[16] = v40[16];
      v39[17] = v40[17];
      *((void *)v39 + 3) = *((void *)v40 + 3);
      *((void *)v39 + 4) = *((void *)v40 + 4);
      *((void *)v39 + 5) = *((void *)v40 + 5);
      *((void *)v39 + 6) = *((void *)v40 + 6);
      v39[56] = v40[56];
      uint64_t v41 = v33[7];
      uint64_t v42 = (char *)a1 + v41;
      uint64_t v43 = (char *)a2 + v41;
      uint64_t v44 = *(void *)((char *)a2 + v41 + 24);
      *((void *)v42 + 3) = v44;
      *((void *)v42 + 4) = *(void *)((char *)a2 + v41 + 32);
      uint64_t v45 = **(void (***)(char *, char *, uint64_t))(v44 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v42, v43, v44);
      uint64_t v46 = v33[8];
      long long v47 = *(void **)((char *)a2 + v46);
      *(void *)((char *)a1 + v46) = v47;
      *((unsigned char *)a1 + v33[9]) = *((unsigned char *)a2 + v33[9]);
      uint64_t v48 = v33[10];
      long long v49 = (char *)a1 + v48;
      uint64_t v50 = (char *)a2 + v48;
      char v51 = v50[8];
      *(void *)long long v49 = *(void *)v50;
      v49[8] = v51;
      *((unsigned char *)a1 + v33[11]) = *((unsigned char *)a2 + v33[11]);
      uint64_t v52 = v33[12];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      uint64_t v55 = *(void *)((char *)a2 + v52 + 16);
      id v56 = v47;
      if (v55 == 1)
      {
        long long v57 = *(_OWORD *)v54;
        long long v58 = *((_OWORD *)v54 + 2);
        *((_OWORD *)v53 + 1) = *((_OWORD *)v54 + 1);
        *((_OWORD *)v53 + 2) = v58;
        *(_OWORD *)uint64_t v53 = v57;
      }
      else
      {
        char *v53 = *v54;
        *((void *)v53 + 1) = *((void *)v54 + 1);
        *((void *)v53 + 2) = *((void *)v54 + 2);
        uint64_t v75 = *((void *)v54 + 3);
        v53[32] = v54[32];
        *((void *)v53 + 3) = v75;
        *((void *)v53 + 5) = *((void *)v54 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v76 = v33[13];
      uint64_t v77 = (void *)((char *)a1 + v76);
      uint64_t v78 = (void *)((char *)a2 + v76);
      uint64_t v79 = *v78;
      unint64_t v80 = v78[1];
      uint64_t v81 = v78[2];
      unint64_t v82 = v78[3];
      uint64_t v83 = v78[4];
      uint64_t v124 = v33;
      uint64_t v84 = v78[7];
      uint64_t v110 = v78[6];
      uint64_t v112 = v78[8];
      uint64_t v114 = v78[9];
      unint64_t v116 = v78[10];
      unint64_t v118 = v78[11];
      uint64_t v120 = v78[12];
      uint64_t v122 = v78[13];
      uint64_t v85 = v78[5];
      sub_100254D34(*v78, v80, v81, v82, v83, v85, v110, v84, v112, v114, v116, v118);
      *uint64_t v77 = v79;
      v77[1] = v80;
      v77[2] = v81;
      v77[3] = v82;
      v77[4] = v83;
      v77[5] = v85;
      v77[6] = v110;
      v77[7] = v84;
      uint64_t v70 = v124;
      v77[8] = v112;
      v77[9] = v114;
      v77[10] = v116;
      v77[11] = v118;
      v77[12] = v120;
      v77[13] = v122;
      uint64_t v86 = v124[14];
      uint64_t v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      if (*(void *)((char *)a2 + v86 + 32))
      {
        *uint64_t v87 = *v88;
        uint64_t v89 = *((void *)v88 + 4);
        *((void *)v87 + 4) = v89;
        *((void *)v87 + 5) = *((void *)v88 + 5);
        (**(void (***)(uint64_t, uint64_t))(v89 - 8))((uint64_t)(v87 + 8), (uint64_t)(v88 + 8));
        *((void *)v87 + 6) = *((void *)v88 + 6);
        *((void *)v87 + 7) = *((void *)v88 + 7);
      }
      else
      {
        long long v97 = *(_OWORD *)v88;
        long long v98 = *((_OWORD *)v88 + 1);
        long long v99 = *((_OWORD *)v88 + 3);
        *((_OWORD *)v87 + 2) = *((_OWORD *)v88 + 2);
        *((_OWORD *)v87 + 3) = v99;
        *(_OWORD *)uint64_t v87 = v97;
        *((_OWORD *)v87 + 1) = v98;
      }
      *((unsigned char *)a1 + v124[15]) = *((unsigned char *)a2 + v124[15]);
      uint64_t v100 = v124[16];
      uint64_t v94 = (char *)a1 + v100;
      long long v95 = (char *)a2 + v100;
      uint64_t v96 = *(void *)((char *)a2 + v100 + 24);
      if (!v96)
      {
        long long v103 = *(_OWORD *)v95;
        long long v104 = *((_OWORD *)v95 + 1);
        *((void *)v94 + 4) = *((void *)v95 + 4);
        *(_OWORD *)uint64_t v94 = v103;
        *((_OWORD *)v94 + 1) = v104;
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      uint64_t v7 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      uint64_t v12 = v7[6];
      uint64_t v13 = (char *)a1 + v12;
      unint64_t v14 = (char *)a2 + v12;
      *uint64_t v13 = *v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      v13[16] = v14[16];
      v13[17] = v14[17];
      *((void *)v13 + 3) = *((void *)v14 + 3);
      *((void *)v13 + 4) = *((void *)v14 + 4);
      *((void *)v13 + 5) = *((void *)v14 + 5);
      *((void *)v13 + 6) = *((void *)v14 + 6);
      v13[56] = v14[56];
      uint64_t v15 = v7[7];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = *(void *)((char *)a2 + v15 + 24);
      *((void *)v16 + 3) = v18;
      *((void *)v16 + 4) = *(void *)((char *)a2 + v15 + 32);
      unint64_t v19 = **(void (***)(char *, char *, uint64_t))(v18 - 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
      uint64_t v20 = v7[8];
      uint64_t v21 = *(void **)((char *)a2 + v20);
      *(void *)((char *)a1 + v20) = v21;
      *((unsigned char *)a1 + v7[9]) = *((unsigned char *)a2 + v7[9]);
      uint64_t v22 = v7[10];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      char v25 = v24[8];
      *(void *)uint64_t v23 = *(void *)v24;
      v23[8] = v25;
      *((unsigned char *)a1 + v7[11]) = *((unsigned char *)a2 + v7[11]);
      uint64_t v26 = v7[12];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      uint64_t v29 = *(void *)((char *)a2 + v26 + 16);
      id v30 = v21;
      if (v29 == 1)
      {
        long long v31 = *(_OWORD *)v28;
        long long v32 = *((_OWORD *)v28 + 2);
        *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
        *((_OWORD *)v27 + 2) = v32;
        *(_OWORD *)uint64_t v27 = v31;
      }
      else
      {
        *uint64_t v27 = *v28;
        *((void *)v27 + 1) = *((void *)v28 + 1);
        *((void *)v27 + 2) = *((void *)v28 + 2);
        uint64_t v59 = *((void *)v28 + 3);
        v27[32] = v28[32];
        *((void *)v27 + 3) = v59;
        *((void *)v27 + 5) = *((void *)v28 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v60 = v7[13];
      uint64_t v61 = (void *)((char *)a1 + v60);
      long long v62 = (void *)((char *)a2 + v60);
      uint64_t v63 = *v62;
      unint64_t v64 = v62[1];
      uint64_t v65 = v62[2];
      unint64_t v66 = v62[3];
      uint64_t v123 = v7;
      uint64_t v67 = v62[6];
      uint64_t v68 = v62[7];
      uint64_t v109 = v62[5];
      uint64_t v111 = v62[8];
      uint64_t v113 = v62[9];
      unint64_t v115 = v62[10];
      unint64_t v117 = v62[11];
      uint64_t v119 = v62[12];
      uint64_t v121 = v62[13];
      uint64_t v69 = v62[4];
      sub_100254D34(*v62, v64, v65, v66, v69, v109, v67, v68, v111, v113, v115, v117);
      *uint64_t v61 = v63;
      v61[1] = v64;
      v61[2] = v65;
      v61[3] = v66;
      v61[4] = v69;
      v61[5] = v109;
      uint64_t v70 = v123;
      v61[6] = v67;
      v61[7] = v68;
      v61[8] = v111;
      v61[9] = v113;
      v61[10] = v115;
      v61[11] = v117;
      v61[12] = v119;
      v61[13] = v121;
      uint64_t v71 = v123[14];
      uint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      if (*(void *)((char *)a2 + v71 + 32))
      {
        *uint64_t v72 = *v73;
        uint64_t v74 = *((void *)v73 + 4);
        *((void *)v72 + 4) = v74;
        *((void *)v72 + 5) = *((void *)v73 + 5);
        (**(void (***)(uint64_t, uint64_t))(v74 - 8))((uint64_t)(v72 + 8), (uint64_t)(v73 + 8));
        *((void *)v72 + 6) = *((void *)v73 + 6);
        *((void *)v72 + 7) = *((void *)v73 + 7);
      }
      else
      {
        long long v90 = *(_OWORD *)v73;
        long long v91 = *((_OWORD *)v73 + 1);
        long long v92 = *((_OWORD *)v73 + 3);
        *((_OWORD *)v72 + 2) = *((_OWORD *)v73 + 2);
        *((_OWORD *)v72 + 3) = v92;
        *(_OWORD *)uint64_t v72 = v90;
        *((_OWORD *)v72 + 1) = v91;
      }
      *((unsigned char *)a1 + v123[15]) = *((unsigned char *)a2 + v123[15]);
      uint64_t v93 = v123[16];
      uint64_t v94 = (char *)a1 + v93;
      long long v95 = (char *)a2 + v93;
      uint64_t v96 = *(void *)((char *)a2 + v93 + 24);
      if (!v96)
      {
        long long v101 = *(_OWORD *)v95;
        long long v102 = *((_OWORD *)v95 + 1);
        *((void *)v94 + 4) = *((void *)v95 + 4);
        *(_OWORD *)uint64_t v94 = v101;
        *((_OWORD *)v94 + 1) = v102;
        goto LABEL_23;
      }
LABEL_20:
      *((void *)v94 + 3) = v96;
      *((void *)v94 + 4) = *((void *)v95 + 4);
      (**(void (***)(void))(v96 - 8))();
LABEL_23:
      uint64_t v105 = v70[17];
      uint64_t v106 = (void *)((char *)a1 + v105);
      uint64_t v107 = (void *)((char *)a2 + v105);
      void *v106 = *v107;
      v106[1] = v107[1];
      *((unsigned char *)a1 + v70[18]) = *((unsigned char *)a2 + v70[18]);
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100477DC8(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = (int *)type metadata accessor for DownloadRequest();
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    uint64_t v11 = v6[6];
    uint64_t v12 = (_OWORD *)((char *)a1 + v11);
    uint64_t v13 = (_OWORD *)((char *)a2 + v11);
    long long v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    v12[2] = v13[2];
    *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)v13 + 41);
    uint64_t v15 = v6[7];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    long long v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
    *((void *)v16 + 4) = *((void *)v17 + 4);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    uint64_t v19 = v6[10];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    uint64_t v22 = v6[12];
    uint64_t v23 = (_OWORD *)((char *)a1 + v22);
    uint64_t v24 = (long long *)((char *)a2 + v22);
    long long v25 = v24[2];
    long long v26 = *v24;
    v23[1] = v24[1];
    uint64_t v23[2] = v25;
    *uint64_t v23 = v26;
    uint64_t v27 = v6[13];
    uint64_t v28 = (_OWORD *)((char *)a1 + v27);
    uint64_t v29 = (_OWORD *)((char *)a2 + v27);
    long long v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    long long v31 = v29[6];
    long long v32 = v29[4];
    v28[5] = v29[5];
    v28[6] = v31;
    long long v33 = v29[3];
    v28[2] = v29[2];
    v28[3] = v33;
    v28[4] = v32;
    uint64_t v34 = v6[14];
    uint64_t v35 = (_OWORD *)((char *)a1 + v34);
    int64_t v36 = (_OWORD *)((char *)a2 + v34);
    long long v37 = v36[1];
    _OWORD *v35 = *v36;
    v35[1] = v37;
    long long v38 = v36[3];
    _OWORD v35[2] = v36[2];
    v35[3] = v38;
    *((unsigned char *)a1 + v6[15]) = *((unsigned char *)a2 + v6[15]);
    uint64_t v39 = v6[16];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    long long v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *((void *)v40 + 4) = *((void *)v41 + 4);
    *(_OWORD *)((char *)a1 + v6[17]) = *(_OWORD *)((char *)a2 + v6[17]);
    *((unsigned char *)a1 + v6[18]) = *((unsigned char *)a2 + v6[18]);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100478164(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1004758D4((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for AppInstallScheduler.ParkReason);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for DownloadRequest();
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      uint64_t v11 = v6[6];
      uint64_t v12 = (_OWORD *)((char *)a1 + v11);
      uint64_t v13 = (_OWORD *)((char *)a2 + v11);
      long long v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      v12[2] = v13[2];
      *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)((char *)v13 + 41);
      uint64_t v15 = v6[7];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      long long v18 = *((_OWORD *)v17 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v18;
      *((void *)v16 + 4) = *((void *)v17 + 4);
      *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
      *((unsigned char *)a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
      uint64_t v19 = v6[10];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      *((unsigned char *)a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
      uint64_t v22 = v6[12];
      uint64_t v23 = (_OWORD *)((char *)a1 + v22);
      uint64_t v24 = (long long *)((char *)a2 + v22);
      long long v25 = v24[2];
      long long v26 = *v24;
      v23[1] = v24[1];
      uint64_t v23[2] = v25;
      *uint64_t v23 = v26;
      uint64_t v27 = v6[13];
      uint64_t v28 = (_OWORD *)((char *)a1 + v27);
      uint64_t v29 = (_OWORD *)((char *)a2 + v27);
      long long v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      long long v31 = v29[6];
      long long v32 = v29[4];
      v28[5] = v29[5];
      v28[6] = v31;
      long long v33 = v29[3];
      v28[2] = v29[2];
      v28[3] = v33;
      v28[4] = v32;
      uint64_t v34 = v6[14];
      uint64_t v35 = (_OWORD *)((char *)a1 + v34);
      int64_t v36 = (_OWORD *)((char *)a2 + v34);
      long long v37 = v36[1];
      _OWORD *v35 = *v36;
      v35[1] = v37;
      long long v38 = v36[3];
      _OWORD v35[2] = v36[2];
      v35[3] = v38;
      *((unsigned char *)a1 + v6[15]) = *((unsigned char *)a2 + v6[15]);
      uint64_t v39 = v6[16];
      uint64_t v40 = (char *)a1 + v39;
      uint64_t v41 = (char *)a2 + v39;
      long long v42 = *((_OWORD *)v41 + 1);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *((_OWORD *)v40 + 1) = v42;
      *((void *)v40 + 4) = *((void *)v41 + 4);
      *(_OWORD *)((char *)a1 + v6[17]) = *(_OWORD *)((char *)a2 + v6[17]);
      *((unsigned char *)a1 + v6[18]) = *((unsigned char *)a2 + v6[18]);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100478524()
{
  uint64_t result = type metadata accessor for DownloadRequest();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1004785AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10047501C(a1, a2);
}

void sub_1004785F4(uint64_t a1, void *a2, void *a3)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a3)
  {
    id v5 = a3;
    sub_1000172F8(&qword_100664258);
    CheckedContinuation.resume(throwing:)();
  }
  else if (a2)
  {
    id v6 = a2;
    sub_1000172F8(&qword_100664258);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100478698(uint64_t a1)
{
  v2[30] = a1;
  v2[31] = v1;
  uint64_t v3 = sub_1000172F8(&qword_100664258);
  v2[32] = v3;
  v2[33] = *(void *)(v3 - 8);
  v2[34] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CellularSettings.Prompt();
  v2[35] = v4;
  v2[36] = *(void *)(v4 - 8);
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = type metadata accessor for ExpensiveNetworkEvaluator();
  v2[40] = swift_task_alloc();
  v2[41] = type metadata accessor for EvaluatorDownload();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[53] = v5;
  v2[54] = *(void *)(v5 - 8);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = swift_task_alloc();
  v2[63] = swift_task_alloc();
  return _swift_task_switch(sub_100478964, 0, 0);
}

uint64_t sub_100478964()
{
  uint64_t v1 = v0 + 30;
  uint64_t v2 = v0[30];
  uint64_t v4 = v0[51];
  uint64_t v3 = v0[52];
  uint64_t v5 = v0[50];
  static Logger.download.getter();
  sub_10047BB38(v2, v3, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  sub_10047BB38(v2, v4, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  sub_10047BB38(v2, v5, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[52];
    uint64_t v131 = v0[51];
    uint64_t v133 = v0[50];
    os_log_type_t v134 = v7;
    uint64_t v9 = (int *)v0[41];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412802;
    v128 = v0;
    uint64_t v12 = *(void **)(v8 + v9[8]);
    v0[28] = v12;
    uint64_t v13 = v0 + 28;
    id v14 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v12;
    sub_10047BBA0(v8, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    *(_WORD *)(v10 + 12) = 2048;
    uint64_t v15 = *(void *)(v131 + v9[6]);
    sub_10047BBA0(v131, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    v13[1] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 1024;
    LODWORD(v9) = *(unsigned char *)(v133 + v9[9]) & 1;
    sub_10047BBA0(v133, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    *((_DWORD *)v13 + 84) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v134, "[%@] Evaluating download, size = %{iec-bytes}ld automatic = %{BOOL}d", (uint8_t *)v10, 0x1Cu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v16 = v1;
    uint64_t v17 = v128;
  }
  else
  {
    uint64_t v19 = v0[51];
    uint64_t v18 = v0[52];
    sub_10047BBA0(v0[50], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    sub_10047BBA0(v19, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    sub_10047BBA0(v18, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v16 = v0 + 30;
    uint64_t v17 = v0;
  }

  uint64_t v20 = v17[63];
  uint64_t v21 = v17[53];
  uint64_t v22 = v17[54];
  uint64_t v23 = v17[40];
  uint64_t v24 = v17[41];
  uint64_t v26 = v17[30];
  uint64_t v25 = v17[31];
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v17[64] = v27;
  v17[65] = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v136 = v27;
  v27(v20, v21);
  LOBYTE(v24) = *(unsigned char *)(v26 + *(int *)(v24 + 36));
  sub_10047BB38(v25, v23, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
  uint64_t v28 = v17[40];
  if (v24)
  {
    char v29 = CellularSettings.allowAutomaticDownloads.getter();
    sub_10047BBA0(v28, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
    if ((v29 & 1) == 0)
    {
      long long v42 = v17 + 53;
      uint64_t v43 = v17 + 62;
      uint64_t v44 = v17[49];
      uint64_t v45 = v17[30];
      static Logger.download.getter();
      sub_10047BB38(v45, v44, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v49 = v17[49];
      if (v48)
      {
        uint64_t v50 = v17[41];
        char v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)char v51 = 138412290;
        uint64_t v53 = *(void **)(v49 + *(int *)(v50 + 32));
        v17[27] = v53;
        id v54 = v53;
        long long v42 = v17 + 53;
        uint64_t v43 = v17 + 62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v52 = v53;
        sub_10047BBA0(v49, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] Implicitly denied - automatic downloads are disabled", v51, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10047BBA0(v49, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      }

      unsigned int v130 = 0;
      long long v92 = v136;
      goto LABEL_35;
    }
  }
  else
  {
    sub_10047BBA0(v17[40], (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
  }
  if (CellularIdentity.isRoaming.getter())
  {
    uint64_t v30 = v17[48];
    uint64_t v31 = v17[30];
    static Logger.download.getter();
    sub_10047BB38(v31, v30, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    long long v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v17[48];
    if (v34)
    {
      uint64_t v36 = v17[41];
      v129 = v17;
      long long v37 = (uint8_t *)swift_slowAlloc();
      long long v38 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v37 = 138412290;
      uint64_t v39 = *(void **)(v35 + *(int *)(v36 + 32));
      v129[26] = v39;
      id v40 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v38 = v39;
      sub_10047BBA0(v35, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%@] Overriding cellular prompt - network is roaming", v37, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v17 = v129;
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(v17[48], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    }
    uint64_t v55 = v17[61];
    uint64_t v56 = v17[53];
    long long v57 = v17;
    uint64_t v58 = v17[38];
    uint64_t v60 = v57[35];
    uint64_t v59 = v57[36];

    v136(v55, v56);
    int v41 = enum case for CellularSettings.Prompt.always(_:);
    uint64_t v61 = v58;
    uint64_t v17 = v57;
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 104))(v61, enum case for CellularSettings.Prompt.always(_:), v60);
  }
  else
  {
    CellularSettings.cellularData.getter();
    int v41 = enum case for CellularSettings.Prompt.always(_:);
  }
  uint64_t v43 = v17 + 38;
  uint64_t v62 = v17[37];
  long long v42 = v17 + 35;
  uint64_t v63 = v17[35];
  uint64_t v64 = v17[36];
  (*(void (**)(uint64_t, void, uint64_t))(v64 + 16))(v62, v17[38], v63);
  int v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 88))(v62, v63);
  if (v65 == v41)
  {
    uint64_t v66 = v17[46];
    uint64_t v67 = v17[30];
    static Logger.download.getter();
    sub_10047BB38(v67, v66, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.default.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    uint64_t v71 = v17[46];
    if (v70)
    {
      uint64_t v72 = v17[41];
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 138412290;
      uint64_t v75 = *(void **)(v71 + *(int *)(v72 + 32));
      v17[24] = v75;
      id v76 = v75;
      long long v42 = v17 + 35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v74 = v75;
      sub_10047BBA0(v71, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%@] Implicitly denied - cellular prompt required", v73, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v43 = v17 + 38;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(v17[46], (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    }
    uint64_t v89 = v17[59];
    uint64_t v90 = v17[53];
    uint64_t v91 = v17[36];

    v136(v89, v90);
    unsigned int v130 = 0;
    long long v92 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
LABEL_35:
    v92(*v43, *v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v126 = (uint64_t (*)(void))v17[1];
    return v126(v130);
  }
  uint64_t v77 = *v16;
  if (v65 == enum case for CellularSettings.Prompt.never(_:))
  {
    uint64_t v78 = v17[47];
    static Logger.download.getter();
    sub_10047BB38(v77, v78, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    unint64_t v82 = v17;
    uint64_t v83 = v17[47];
    if (v81)
    {
      uint64_t v84 = v82[41];
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      BOOL v135 = v43;
      uint64_t v86 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 138412290;
      uint64_t v87 = *(void **)(v83 + *(int *)(v84 + 32));
      v82[25] = v87;
      id v88 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v86 = v87;
      sub_10047BBA0(v83, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%@] Implicitly allowed - cellular prompt disabled", v85, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v43 = v135;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(v83, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    }
    uint64_t v110 = v82[60];
    uint64_t v111 = v82[53];
    uint64_t v112 = v82[36];

    v136(v110, v111);
    long long v92 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
    unsigned int v130 = 1;
    uint64_t v17 = v82;
    goto LABEL_35;
  }
  uint64_t v93 = v17[41];
  uint64_t v95 = v17[36];
  uint64_t v94 = v17[37];
  uint64_t v96 = v17[35];
  long long v97 = v17;
  long long v98 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
  v97[66] = v98;
  v97[67] = (v95 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v98(v94, v96);
  uint64_t v99 = *(int *)(v93 + 24);
  *((_DWORD *)v97 + 141) = v99;
  if (*(uint64_t *)(v77 + v99) < 1)
  {
    uint64_t v113 = v97[43];
    uint64_t v114 = v97[30];
    static Logger.download.getter();
    sub_10047BB38(v114, v113, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    unint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.default.getter();
    BOOL v117 = os_log_type_enabled(v115, v116);
    uint64_t v118 = v97[43];
    if (v117)
    {
      uint64_t v119 = v97[41];
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      uint64_t v121 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v120 = 138412290;
      uint64_t v132 = v115;
      uint64_t v122 = *(void **)(v118 + *(int *)(v119 + 32));
      v97[19] = v122;
      id v123 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v121 = v122;
      unint64_t v115 = v132;
      sub_10047BBA0(v118, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v132, v116, "[%@] Implicitly denied - download size is unavailable", v120, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(v118, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    }
    uint64_t v124 = v97[56];
    uint64_t v125 = v97[53];

    v136(v124, v125);
    unsigned int v130 = 0;
    long long v92 = v98;
    uint64_t v17 = v97;
    goto LABEL_35;
  }
  uint64_t v101 = v97[33];
  uint64_t v100 = v97[34];
  uint64_t v102 = v97[32];
  long long v103 = self;
  NSString v104 = String._bridgeToObjectiveC()();
  NSString v105 = String._bridgeToObjectiveC()();
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [self bagForProfile:v105 profileVersion:v106];

  id v108 = [v103 networkConstraintsForMediaType:v104 withBag:v107];
  v97[68] = v108;

  v97[2] = v97;
  v97[7] = v97 + 18;
  v97[3] = sub_1004799BC;
  swift_continuation_init();
  v97[17] = v102;
  uint64_t v109 = sub_10019CE94(v97 + 14);
  sub_10047BC00();
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v101 + 32))(v109, v100, v102);
  v97[10] = _NSConcreteStackBlock;
  v97[11] = 1107296256;
  v97[12] = sub_1004785F4;
  v97[13] = &unk_100647C88;
  objc_msgSend(v108, "resultWithCompletion:");
  return _swift_continuation_await(v97 + 2);
}

uint64_t sub_1004799BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 552) = v1;
  if (v1) {
    uint64_t v2 = sub_100479FDC;
  }
  else {
    uint64_t v2 = sub_100479ACC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100479ACC()
{
  uint64_t v1 = *(void **)(v0 + 544);
  uint64_t v2 = *(int *)(v0 + 564);
  uint64_t v3 = *(void *)(v0 + 240);
  id v4 = *(id *)(v0 + 144);

  id v5 = [v4 sizeLimitForNetworkType:AMSNetworkTypeCellular];
  uint64_t v6 = *(void *)(v3 + v2);
  uint64_t v7 = *(void *)(v0 + 240);
  if ((uint64_t)v5 < v6)
  {
    uint64_t v8 = (uint64_t *)(v0 + 456);
    uint64_t v19 = *(void *)(v0 + 352);
    static Logger.download.getter();
    sub_10047BB38(v7, v19, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v10, v20);
    uint64_t v13 = *(void *)(v0 + 352);
    if (v21)
    {
      uint64_t v33 = v6;
      uint64_t v22 = *(void *)(v0 + 328);
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      id v34 = v5;
      uint64_t v25 = *(void **)(v13 + *(int *)(v22 + 32));
      *(void *)(v0 + 184) = v25;
      id v26 = v25;
      uint64_t v6 = v33;
      uint64_t v8 = (uint64_t *)(v0 + 456);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      id v5 = v34;
      sub_10047BBA0(v13, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v10, v20, "[%@] Implicitly denied - exceeded cellular limit", v23, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(v0 + 464);
    uint64_t v9 = *(void *)(v0 + 360);
    static Logger.download.getter();
    sub_10047BB38(v7, v9, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 360);
    if (v12)
    {
      uint64_t v32 = v6;
      uint64_t v14 = *(void *)(v0 + 328);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v17 = *(void **)(v13 + *(int *)(v14 + 32));
      *(void *)(v0 + 176) = v17;
      id v18 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v17;
      uint64_t v6 = v32;
      sub_10047BBA0(v13, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%@] Implicitly allowed - cellular limit applies", v15, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v8 = (uint64_t *)(v0 + 464);
      swift_slowDealloc();
LABEL_6:
      swift_slowDealloc();
      goto LABEL_8;
    }
  }
  sub_10047BBA0(v13, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
LABEL_8:
  BOOL v35 = (uint64_t)v5 >= v6;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v28 = *v8;
  uint64_t v29 = *(void *)(v0 + 424);

  v27(v28, v29);
  (*(void (**)(void))(v0 + 528))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v30(v35);
}

uint64_t sub_100479FDC()
{
  uint64_t v1 = *(void **)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 240);
  swift_willThrow();

  static Logger.download.getter();
  sub_10047BB38(v3, v2, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  swift_errorRetain();
  swift_errorRetain();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v19 = v4;
    os_log_type_t v18 = v5;
    uint64_t v6 = *(void *)(v0 + 328);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    uint64_t v10 = *(void **)(v7 + *(int *)(v6 + 32));
    *(void *)(v0 + 160) = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    sub_10047BBA0(v7, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 168) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v9[1] = v12;
    id v4 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v18, "[%@] Implicitly denied - failed to load constraints: %{public}@", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10047BBA0(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  uint64_t v14 = *(void *)(v0 + 440);
  uint64_t v15 = *(void *)(v0 + 424);

  v13(v14, v15);
  swift_errorRelease();
  (*(void (**)(void))(v0 + 528))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16(0);
}

uint64_t sub_10047A3B0(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v5 = type metadata accessor for NWInterface.InterfaceType();
  v3[18] = v5;
  v3[19] = *(void *)(v5 - 8);
  v3[20] = swift_task_alloc();
  type metadata accessor for NetworkPath();
  v3[21] = swift_task_alloc();
  v3[22] = type metadata accessor for EvaluatorDownload();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v3[32] = v6;
  v3[33] = *(void *)(v6 - 8);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&dword_100664250 + dword_100664250);
  uint64_t v7 = (void *)swift_task_alloc();
  v3[40] = v7;
  void *v7 = v3;
  v7[1] = sub_10047A620;
  return v9(a1);
}

uint64_t sub_10047A620(__int16 a1)
{
  *(_WORD *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10047A720, 0, 0);
}

uint64_t sub_10047A720()
{
  uint64_t v102 = v0;
  int v1 = *(unsigned __int16 *)(v0 + 360);
  *(unsigned char *)(v0 + 364) = v1 & 1;
  *(unsigned char *)(v0 + 365) = BYTE1(v1) & 1;
  if ((v1 & 0x1010101) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 120);
    uint64_t v3 = *(int *)(*(void *)(v0 + 176) + 36);
    if (*(unsigned char *)(v2 + v3))
    {
      uint64_t v9 = *(void *)(v0 + 240);
      uint64_t v8 = *(void *)(v0 + 248);
      static Logger.download.getter();
      sub_10047BB38(v2, v8, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      sub_10047BB38(v2, v9, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = *(void *)(v0 + 240);
      uint64_t v14 = *(void *)(v0 + 248);
      if (v12)
      {
        uint64_t v15 = *(void *)(v0 + 176);
        uint64_t v92 = v15;
        uint64_t v16 = swift_slowAlloc();
        uint64_t v94 = v10;
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138412546;
        os_log_type_t v18 = *(void **)(v14 + *(int *)(v15 + 32));
        *(void *)(v0 + 56) = v18;
        id v19 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = (void *)v17;
        uint64_t v10 = v94;
        *uint64_t v20 = v18;
        sub_10047BBA0(v14, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        *(_WORD *)(v16 + 12) = 2048;
        uint64_t v21 = *(void *)(v13 + *(int *)(v92 + 24));
        sub_10047BBA0(v13, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        *(void *)(v0 + 80) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v94, v11, "[%@] Download of size %{iec-bytes}ld exceeds cellular limit, but not prompting for automatic download.", (uint8_t *)v16, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10047BBA0(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        sub_10047BBA0(v14, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      }

      (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 256));
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 168);
      uint64_t v5 = *(void *)(v0 + 128);
      char v6 = NWPath.isExpensive.getter();
      sub_10047BB38(v5, v4, (uint64_t (*)(void))type metadata accessor for NetworkPath);
      uint64_t v7 = *(void *)(v0 + 168);
      if (v6)
      {
        sub_10047BBA0(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for NetworkPath);
LABEL_8:
        uint64_t v100 = v3;
        uint64_t v27 = *(void *)(v0 + 208);
        uint64_t v26 = *(void *)(v0 + 216);
        uint64_t v28 = *(void *)(v0 + 120);
        static Logger.download.getter();
        sub_10047BB38(v28, v26, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        sub_10047BB38(v28, v27, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        BOOL v31 = os_log_type_enabled(v29, v30);
        uint64_t v32 = *(void *)(v0 + 208);
        uint64_t v33 = *(void *)(v0 + 216);
        if (v31)
        {
          uint64_t v34 = *(void *)(v0 + 176);
          uint64_t v35 = swift_slowAlloc();
          os_log_type_t typea = v30;
          uint64_t v36 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 138412546;
          uint64_t v99 = v29;
          long long v37 = *(void **)(v33 + *(int *)(v34 + 32));
          *(void *)(v0 + 104) = v37;
          id v38 = v37;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v36 = v37;
          sub_10047BBA0(v33, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
          *(_WORD *)(v35 + 12) = 2048;
          uint64_t v39 = *(void *)(v32 + *(int *)(v34 + 24));
          sub_10047BBA0(v32, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
          *(void *)(v0 + 112) = v39;
          uint64_t v29 = v99;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v99, typea, "[%@] Download of size %{iec-bytes}ld exceeds cellular limit, asking how to proceed.", (uint8_t *)v35, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10047BBA0(*(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
          sub_10047BBA0(v33, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        }

        uint64_t v60 = *(void *)(v0 + 296);
        uint64_t v61 = *(void *)(v0 + 256);
        uint64_t v62 = *(void *)(v0 + 264);
        uint64_t v63 = *(void *)(v0 + 176);
        uint64_t v64 = *(void *)(v0 + 120);
        int v65 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        *(void *)(v0 + 328) = v65;
        *(void *)(v0 + 336) = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v65(v60, v61);
        char v66 = CellularIdentity.isRoaming.getter();
        unsigned int v67 = *(unsigned __int8 *)(v2 + v100);
        uint64_t v68 = (uint64_t *)(v64 + *(int *)(v63 + 20));
        unint64_t v69 = v68[1];
        uint64_t v70 = *(void *)(v64 + *(int *)(v63 + 24));
        int v71 = (v67 >> 2) & 1;
        int v72 = v66 & 1;
        uint64_t v73 = *v68;
        if ((v67 & 2) != 0) {
          id v74 = sub_10017C700(v73, v69, v70, v72, v71);
        }
        else {
          id v74 = sub_10017CB7C(v73, v69, v70, v72, v71);
        }
        *(void *)(v0 + 344) = v74;
        uint64_t v75 = (void *)swift_task_alloc();
        *(void *)(v0 + 352) = v75;
        *uint64_t v75 = v0;
        v75[1] = sub_10047B2C0;
        return sub_10042D9F4();
      }
      uint64_t v23 = *(void *)(v0 + 152);
      uint64_t v22 = *(void *)(v0 + 160);
      uint64_t v24 = *(void *)(v0 + 144);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for NWInterface.InterfaceType.cellular(_:), v24);
      char v25 = NWPath.usesInterfaceType(_:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      sub_10047BBA0(v7, (uint64_t (*)(void))type metadata accessor for NetworkPath);
      if (v25) {
        goto LABEL_8;
      }
      uint64_t v77 = *(void *)(v0 + 224);
      uint64_t v76 = *(void *)(v0 + 232);
      uint64_t v78 = *(void *)(v0 + 120);
      static Logger.download.getter();
      sub_10047BB38(v78, v76, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      sub_10047BB38(v78, v77, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      BOOL v81 = os_log_type_enabled(v79, v80);
      uint64_t v82 = *(void *)(v0 + 224);
      uint64_t v83 = *(void *)(v0 + 232);
      if (v81)
      {
        uint64_t v84 = *(void *)(v0 + 176);
        os_log_type_t v96 = v80;
        uint64_t v85 = swift_slowAlloc();
        uint64_t v86 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 138412546;
        uint64_t v87 = *(void **)(v83 + *(int *)(v84 + 32));
        *(void *)(v0 + 72) = v87;
        id v88 = v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v86 = v87;
        sub_10047BBA0(v83, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        *(_WORD *)(v85 + 12) = 2048;
        uint64_t v89 = *(void *)(v82 + *(int *)(v84 + 24));
        sub_10047BBA0(v82, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        *(void *)(v0 + 40) = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v79, v96, "[%@] Download of size %{iec-bytes}ld exceeds cellular limit, but not prompting for inexpensive network.", (uint8_t *)v85, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10047BBA0(*(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
        sub_10047BBA0(v83, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      }

      (*(void (**)(void, void))(*(void *)(v0 + 264) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 256));
    }
  }
  uint64_t v40 = *(void *)(v0 + 184);
  uint64_t v41 = *(void *)(v0 + 120);
  static Logger.download.getter();
  sub_10047BB38(v41, v40, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  char v95 = *(unsigned char *)(v0 + 364);
  char v93 = *(unsigned char *)(v0 + 365);
  long long v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v46 = *(void *)(v0 + 264);
  uint64_t v45 = *(void *)(v0 + 272);
  uint64_t v47 = *(void *)(v0 + 184);
  if (v44)
  {
    uint64_t v48 = *(void *)(v0 + 176);
    uint64_t v91 = *(void *)(v0 + 256);
    uint64_t v49 = swift_slowAlloc();
    uint64_t v50 = (void *)swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 138412546;
    uint64_t v90 = v45;
    char v51 = *(void **)(v47 + *(int *)(v48 + 32));
    *(void *)(v0 + 48) = v51;
    id v52 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v50 = v51;
    sub_10047BBA0(v47, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    *(_WORD *)(v49 + 12) = 2080;
    *(unsigned char *)(v0 + 362) = v95;
    *(unsigned char *)(v0 + 363) = v93;
    uint64_t v53 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = sub_1000143F4(v53, v54, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%@] Evaluation for download completed with result: %s", (uint8_t *)v49, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v90, v91);
  }
  else
  {
    uint64_t v55 = *(void *)(v0 + 256);
    sub_10047BBA0(v47, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v55);
  }
  swift_beginAccess();
  unsigned int type = *(unsigned __int8 *)(v0 + 364);
  int v56 = *(unsigned __int8 *)(v0 + 365);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v56) {
    int v57 = 256;
  }
  else {
    int v57 = 0;
  }
  uint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
  return v58(v57 | type);
}

uint64_t sub_10047B2C0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 366) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10047B3E0, 0, 0);
}

uint64_t sub_10047B3E0()
{
  uint64_t v54 = v0;
  id v52 = (char *)(v0 + 364);
  uint64_t v1 = *(void *)(v0 + 120);
  if (*(unsigned char *)(v0 + 366))
  {
    uint64_t v2 = (uint64_t *)(v0 + 280);
    uint64_t v3 = *(void *)(v0 + 192);
    static Logger.download.getter();
    sub_10047BB38(v1, v3, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = *(void *)(v0 + 192);
    if (v6)
    {
      uint64_t v8 = *(void *)(v0 + 176);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      os_log_type_t v11 = *(void **)(v7 + *(int *)(v8 + 32));
      *(void *)(v0 + 88) = v11;
      id v12 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      sub_10047BBA0(v7, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] We were asked to download later. Requiring inexpensive data.", v9, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      uint64_t v2 = (uint64_t *)(v0 + 280);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(*(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    }
    char v21 = 0;
  }
  else
  {
    uint64_t v2 = (uint64_t *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 200);
    static Logger.download.getter();
    sub_10047BB38(v1, v13, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v4, v14);
    uint64_t v16 = *(void *)(v0 + 200);
    if (v15)
    {
      uint64_t v17 = *(void *)(v0 + 176);
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 138412290;
      id v19 = *(void **)(v16 + *(int *)(v17 + 32));
      *(void *)(v0 + 96) = v19;
      id v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v19;
      sub_10047BBA0(v16, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      _os_log_impl((void *)&_mh_execute_header, v4, v14, "[%@] We were asked to download now. Not requiring inexpensive data.", v18, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      char v21 = 1;
      swift_arrayDestroy();
      uint64_t v2 = (uint64_t *)(v0 + 288);
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10047BBA0(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
      char v21 = 1;
    }
  }
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v23 = *v2;
  uint64_t v24 = *(void *)(v0 + 256);

  v22(v23, v24);
  *(unsigned char *)(v0 + 364) = v21;
  *(unsigned char *)(v0 + 365) = 1;
  uint64_t v25 = *(void *)(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 120);
  static Logger.download.getter();
  sub_10047BB38(v26, v25, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
  char v27 = *v52;
  char v28 = *(unsigned char *)(v0 + 365);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v33 = *(void *)(v0 + 264);
  uint64_t v32 = *(void *)(v0 + 272);
  uint64_t v34 = *(void *)(v0 + 256);
  uint64_t v35 = *(void *)(v0 + 184);
  if (v31)
  {
    uint64_t v51 = *(void *)(v0 + 256);
    uint64_t v36 = *(void *)(v0 + 176);
    char v47 = v28;
    uint64_t v37 = swift_slowAlloc();
    os_log_type_t type = v30;
    id v38 = (void *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138412546;
    uint64_t v39 = *(void **)(v35 + *(int *)(v36 + 32));
    *(void *)(v0 + 48) = v39;
    id v40 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v38 = v39;
    sub_10047BBA0(v35, (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);
    *(_WORD *)(v37 + 12) = 2080;
    *(unsigned char *)(v0 + 362) = v27;
    *(unsigned char *)(v0 + 363) = v47;
    uint64_t v41 = String.init<A>(describing:)();
    *(void *)(v0 + 64) = sub_1000143F4(v41, v42, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, type, "[%@] Evaluation for download completed with result: %s", (uint8_t *)v37, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v51);
  }
  else
  {
    sub_10047BBA0(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for EvaluatorDownload);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  swift_beginAccess();
  unsigned int v50 = *v52;
  int v43 = *(unsigned __int8 *)(v0 + 365);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v43) {
    int v44 = 256;
  }
  else {
    int v44 = 0;
  }
  uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
  return v45(v44 | v50);
}

uint64_t type metadata accessor for ExpensiveNetworkEvaluator()
{
  uint64_t result = qword_1006642C0;
  if (!qword_1006642C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10047BB38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10047BBA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10047BC00()
{
  unint64_t result = qword_100664260;
  if (!qword_100664260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100664260);
  }
  return result;
}

uint64_t sub_10047BC40(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

uint64_t *sub_10047BC48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for CellularIdentity();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CellularSettings();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10047BD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CellularIdentity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CellularSettings();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_10047BDF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CellularIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CellularSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_10047BEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CellularIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CellularSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10047BF68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CellularIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CellularSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10047C020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CellularIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CellularSettings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10047C0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047C0EC);
}

uint64_t sub_10047C0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CellularIdentity();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for CellularSettings();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10047C1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047C1F8);
}

uint64_t sub_10047C1F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CellularIdentity();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for CellularSettings();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_10047C2FC()
{
  uint64_t result = type metadata accessor for CellularIdentity();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CellularSettings();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10047C3C4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_10047C460(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL.applicationSupportDirectory.getter();
  sub_1000172F8(&qword_10065D360);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1005A4070;
  *(void *)(v14 + 32) = 0xD000000000000017;
  *(void *)(v14 + 40) = 0x80000001005B7710;
  uint64_t v30 = a1;
  *(void *)(v14 + 48) = a1;
  *(void *)(v14 + 56) = a2;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v6);
  sub_100017B14();
  swift_bridgeObjectRetain();
  URL.appending<A>(components:directoryHint:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v15 = [self defaultManager];
  URL._bridgeToObjectiveC()(v16);
  os_log_type_t v18 = v17;
  id v36 = 0;
  unsigned int v19 = [v15 createDirectoryAtURL:v17 withIntermediateDirectories:1 attributes:0 error:&v36];

  id v20 = v36;
  if (v19)
  {
    return v20;
  }
  else
  {
    id v31 = v36;
    id v22 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v23 = v34;
    static Logger.general.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      char v27 = (void *)swift_slowAlloc();
      id v36 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1000143F4(v30, a2, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2114;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v35 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Creating folder for '%{public}s' failed: %{public}@", (uint8_t *)v26, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    return (id)(*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, v33);
  }
}

uint64_t sub_10047C9F4()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for PersistenceStore();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10047CA98()
{
  sub_10047C9F4();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PersistenceActor()
{
  return sub_100259AC0();
}

uint64_t sub_10047CADC()
{
  return sub_1001A1E7C();
}

uint64_t type metadata accessor for PersistenceStore()
{
  return sub_100259AC0();
}

uint64_t sub_10047CB10()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10047CB9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047CBB0);
}

uint64_t sub_10047CBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10047CC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047CC30);
}

uint64_t sub_10047CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void *sub_10047CCA0(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[7];
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v34 = *(void *)(v13 - 8);
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35(v12, 1, v13))
    {
      uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
      memcpy(__dst, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v16 = a3[9];
    *((unsigned char *)v4 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v17 = (char *)v4 + v16;
    os_log_type_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = a3[10];
    uint64_t v20 = a3[11];
    char v21 = (void *)((char *)v4 + v19);
    id v22 = (void *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *char v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)((char *)v4 + v20);
    os_log_type_t v25 = (void *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    *(void *)((char *)v4 + v27) = *(void *)((char *)a2 + v27);
    uint64_t v28 = a3[14];
    uint64_t v29 = a3[15];
    uint64_t v30 = (void *)((char *)v4 + v28);
    id v31 = (void *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    *(void *)((char *)v4 + v29) = *(void *)((char *)a2 + v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10047CF0C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10047D030(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = a3[7];
  __dst = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33(v11, 1, v12))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
    memcpy(__dst, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dst, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v14 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)((char *)a1 + v17);
  uint64_t v20 = (void *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  id v22 = (void *)((char *)a1 + v18);
  uint64_t v23 = (void *)((char *)a2 + v18);
  uint64_t v24 = v23[1];
  *id v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v26 = a3[14];
  uint64_t v27 = a3[15];
  uint64_t v28 = (void *)((char *)a1 + v26);
  uint64_t v29 = (void *)((char *)a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10047D24C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v15 = a3[9];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[10];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[11];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[14];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10047D53C(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  uint64_t v17 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  uint64_t v18 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  return a1;
}

void *sub_10047D6C8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v32) = *(void *)((char *)a2 + v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[14];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10047D930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047D944);
}

uint64_t sub_10047D944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10047D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047DA0C);
}

uint64_t sub_10047DA0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000172F8(&qword_10065C3C0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MediaAPIMetadata()
{
  uint64_t result = qword_100664450;
  if (!qword_100664450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10047DB04()
{
  sub_10026B458();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10047DBEC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v152 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v148 = *(void *)(v5 - 8);
  uint64_t v149 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v144 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v144 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  int v17 = (char *)&v144 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v144 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v144 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v144 - v24;
  uint64_t v26 = type metadata accessor for MediaAPIMetadata();
  uint64_t v150 = *(void *)(v26 - 8);
  v151 = (int *)v26;
  __chkstk_darwin(v26);
  v153 = ((char *)&v144 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v154[0] = 0x656C746974;
  v154[1] = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v28 = sub_100451EDC((uint64_t)&v155), (v29 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v157);
LABEL_12:
    static Logger.install.getter();
    uint64_t v33 = v152;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    v153 = v34;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = a3;
      id v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138412290;
      *(void *)&long long v155 = v33;
      uint64_t v39 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v38 = v33;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      a3 = v37;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v33;
    }
    uint64_t v8 = v25;
    goto LABEL_61;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v30 = v154[1];
  uint64_t v145 = v154[0];
  *(void *)&long long v157 = 0x6D614E74726F6873;
  *((void *)&v157 + 1) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v31 = sub_100451EDC((uint64_t)&v155);
    if (v32)
    {
      sub_1000144C8(*(void *)(a1 + 56) + 32 * v31, (uint64_t)&v157);
    }
    else
    {
      long long v157 = 0u;
      long long v158 = 0u;
    }
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  uint64_t v147 = a3;
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    int v40 = swift_dynamicCast();
    uint64_t v41 = v154[0];
    if (!v40) {
      uint64_t v41 = 0;
    }
    uint64_t v144 = (objc_class *)v41;
    if (v40) {
      uint64_t v42 = v154[1];
    }
    else {
      uint64_t v42 = 0;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
    uint64_t v144 = 0;
    uint64_t v42 = 0;
  }
  v154[0] = 0xD000000000000016;
  v154[1] = 0x80000001005B7AA0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v43 = sub_100451EDC((uint64_t)&v155);
    if (v44)
    {
      sub_1000144C8(*(void *)(a1 + 56) + 32 * v43, (uint64_t)&v157);
    }
    else
    {
      long long v157 = 0u;
      long long v158 = 0u;
    }
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v157);
LABEL_37:
    static Logger.install.getter();
    uint64_t v48 = v152;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    v153 = v49;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      id v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138412290;
      *(void *)&long long v155 = v48;
      uint64_t v53 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v52 = v48;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v48;
    }
    uint64_t v8 = v23;
    goto LABEL_60;
  }
  uint64_t v146 = v30;
  sub_1000172F8(&qword_10065FEA0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  uint64_t v45 = v154[0];
  if (*(void *)(v154[0] + 16) && (unint64_t v46 = sub_100016D20(0x6C70704173707061, 0xE900000000000065), (v47 & 1) != 0))
  {
    sub_1000144C8(*(void *)(v45 + 56) + 32 * v46, (uint64_t)&v155);
  }
  else
  {
    long long v155 = 0u;
    long long v156 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v156 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v155);
LABEL_52:
    static Logger.install.getter();
    uint64_t v60 = v152;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    v153 = v61;
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 138412290;
      *(void *)&long long v155 = v60;
      int v65 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v64 = v60;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v60;
    }
    uint64_t v8 = v20;
    goto LABEL_60;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  uint64_t v54 = v157;
  if (!*(void *)(v157 + 16)
    || (unint64_t v55 = sub_100016D20(0x65756C6176, 0xE500000000000000), (v56 & 1) == 0)
    || (sub_1000144C8(*(void *)(v54 + 56) + 32 * v55, (uint64_t)&v155), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.install.getter();
    char v66 = v152;
    unsigned int v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    v153 = v67;
    if (os_log_type_enabled(v67, v68))
    {
      unint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v69 = 138412290;
      *(void *)&long long v155 = v66;
      int v71 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v70 = v66;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v66;
    }
    uint64_t v8 = v17;
    goto LABEL_60;
  }
  int v57 = (objc_class *)v157;
  if (*(void *)(v54 + 16) && (unint64_t v58 = sub_100016D20(1701667182, 0xE400000000000000), (v59 & 1) != 0))
  {
    sub_1000144C8(*(void *)(v54 + 56) + 32 * v58, (uint64_t)&v155);
  }
  else
  {
    long long v155 = 0u;
    long long v156 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v156 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v155);
LABEL_72:
    static Logger.install.getter();
    BOOL v81 = v152;
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    v153 = v82;
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v84 = 138412290;
      *(void *)&long long v155 = v81;
      uint64_t v86 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v85 = v81;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v81;
    }
    uint64_t v8 = v14;
    goto LABEL_60;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }
  long long v78 = v157;
  strcpy((char *)v154, "developerId");
  HIDWORD(v154[1]) = -352321536;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v79 = sub_100451EDC((uint64_t)&v155);
    if (v80)
    {
      sub_1000144C8(*(void *)(a1 + 56) + 32 * v79, (uint64_t)&v157);
    }
    else
    {
      long long v157 = 0u;
      long long v158 = 0u;
    }
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v157);
LABEL_85:
    static Logger.install.getter();
    uint64_t v91 = v152;
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    v153 = v92;
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      char v95 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 138412290;
      *(void *)&long long v155 = v91;
      os_log_type_t v96 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v95 = v91;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v91;
    }
    uint64_t v8 = v11;
    goto LABEL_60;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  uint64_t v88 = v154[0];
  uint64_t v87 = v154[1];
  strcpy((char *)v154, "developerName");
  HIWORD(v154[1]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v89 = sub_100451EDC((uint64_t)&v155);
    if (v90)
    {
      sub_1000144C8(*(void *)(a1 + 56) + 32 * v89, (uint64_t)&v157);
    }
    else
    {
      long long v157 = 0u;
      long long v158 = 0u;
    }
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100016E7C((uint64_t)&v157);
    goto LABEL_98;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_98:
    static Logger.install.getter();
    NSString v104 = v152;
    NSString v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    v153 = v105;
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (uint8_t *)swift_slowAlloc();
      id v108 = (void *)swift_slowAlloc();
      *(_DWORD *)id v107 = 138412290;
      *(void *)&long long v155 = v104;
      uint64_t v109 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v108 = v104;

      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v153 = v104;
    }
LABEL_60:
    a3 = v147;
LABEL_61:
    uint64_t v73 = v150;
    int v72 = v151;
    uint64_t v75 = v148;
    uint64_t v74 = v149;

    (*(void (**)(char *, uint64_t))(v75 + 8))(v8, v74);
    uint64_t v76 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v73 + 56))(a3, v76, 1, v72);
  }
  uint64_t v97 = v154[0];
  uint64_t v98 = v154[1];
  uint64_t v99 = v153;
  uint64_t v100 = (objc_class *)v146;
  v153->isa = (Class)v145;
  v99[1].isa = v100;
  v99[2].isa = v144;
  v99[3].isa = (Class)v42;
  uint64_t v101 = v151;
  *(_OWORD *)((char *)&v99->isa + v151[11]) = v78;
  *(Class *)((char *)&v99->isa + v101[12]) = v57;
  v99[4].isa = (Class)v88;
  v99[5].isa = (Class)v87;
  v99[6].isa = (Class)v97;
  v99[7].isa = (Class)v98;
  strcpy((char *)&v157, "isDistributor");
  HIWORD(v157) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v102 = sub_100451EDC((uint64_t)&v155), (v103 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v102, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    sub_100016E7C((uint64_t)&v157);
    goto LABEL_106;
  }
  if (!swift_dynamicCast())
  {
LABEL_106:
    char v110 = 0;
    goto LABEL_107;
  }
  char v110 = v154[0];
LABEL_107:
  uint64_t v111 = v151;
  uint64_t v112 = v153;
  *((unsigned char *)&v153->isa + v151[8]) = v110;
  *(void *)&long long v157 = 0x5574726F70707573;
  *((void *)&v157 + 1) = 0xEA00000000006C72;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v113 = sub_100451EDC((uint64_t)&v155), (v114 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v113, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    int v115 = swift_dynamicCast();
    uint64_t v116 = v154[0];
    uint64_t v117 = v154[1];
    if (!v115)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
    uint64_t v116 = 0;
    uint64_t v117 = 0;
  }
  uint64_t v118 = (uint64_t *)((char *)v112 + v111[14]);
  *uint64_t v118 = v116;
  v118[1] = v117;
  *(void *)&long long v157 = 0xD000000000000016;
  *((void *)&v157 + 1) = 0x80000001005BFEB0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v119 = sub_100451EDC((uint64_t)&v155), (v120 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v119, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    int v121 = swift_dynamicCast();
    uint64_t v122 = v154[0];
    if (!v121) {
      uint64_t v122 = 0;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
    uint64_t v122 = 0;
  }
  *(Class *)((char *)&v112->isa + v111[15]) = (Class)v122;
  v154[0] = 1852793705;
  v154[1] = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v123 = sub_100451EDC((uint64_t)&v155), (v124 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v123, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (!*((void *)&v158 + 1))
  {
    sub_100016E7C((uint64_t)&v157);
    goto LABEL_132;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_132:
    uint64_t v125 = (char *)v153 + v151[7];
    uint64_t v126 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v125, 1, 1, v126);
    goto LABEL_133;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
LABEL_133:
  strcpy((char *)v154, "genreID");
  v154[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v127 = sub_100451EDC((uint64_t)&v155), (v128 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v127, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v129 = sub_1004CFBD4(v154[0], v154[1]);
      char v131 = v130 & 1;
      goto LABEL_142;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
  }
  uint64_t v129 = 0;
  char v131 = 1;
LABEL_142:
  int v72 = v151;
  uint64_t v132 = v153;
  uint64_t v133 = (char *)v153 + v151[9];
  *(void *)uint64_t v133 = v129;
  v133[8] = v131;
  *(void *)&long long v157 = 0x6D614E65726E6567;
  *((void *)&v157 + 1) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v134 = sub_100451EDC((uint64_t)&v155), (v135 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v134, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    int v136 = swift_dynamicCast();
    uint64_t v137 = v154[0];
    uint64_t v138 = v154[1];
    if (!v136)
    {
      uint64_t v137 = 0;
      uint64_t v138 = 0;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
    uint64_t v137 = 0;
    uint64_t v138 = 0;
  }
  v139 = (uint64_t *)((char *)v132 + v72[10]);
  uint64_t *v139 = v137;
  v139[1] = v138;
  *(void *)&long long v157 = 0x65726E6567627573;
  *((void *)&v157 + 1) = 0xE900000000000073;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v140 = sub_100451EDC((uint64_t)&v155), (v141 & 1) != 0))
  {
    sub_1000144C8(*(void *)(a1 + 56) + 32 * v140, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  a3 = v147;

  swift_bridgeObjectRelease();
  sub_10025C22C((uint64_t)&v155);
  if (*((void *)&v158 + 1))
  {
    sub_1000172F8(&qword_1006644B0);
    int v142 = swift_dynamicCast();
    uint64_t v143 = v154[0];
    if (!v142) {
      uint64_t v143 = 0;
    }
  }
  else
  {
    sub_100016E7C((uint64_t)&v157);
    uint64_t v143 = 0;
  }
  uint64_t v73 = v150;
  *(Class *)((char *)&v132->isa + v72[13]) = (Class)v143;
  sub_10019C950((uint64_t)v132, a3);
  uint64_t v76 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v73 + 56))(a3, v76, 1, v72);
}

uint64_t sub_10047F370(unsigned __int8 a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1000172F8(&qword_10065C3A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A6B00;
  *(void *)(inited + 32) = 0x7562697274736964;
  *(void *)(inited + 40) = 0xEB00000000726F74;
  *(void *)(inited + 48) = a2;
  *(void *)(inited + 56) = a3;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "isMarketplace");
  *(_WORD *)(inited + 94) = -4864;
  *(unsigned char *)(inited + 96) = a4;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(void *)(inited + 128) = 0x6974756C6F736572;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 136) = 0xEA00000000006E6FLL;
  *(void *)(inited + 144) = a1;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_10044B428(inited);
  sub_1002DFC2C(0, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10047F490(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  return sub_10047FD20(v3, a1);
}

uint64_t sub_10047F54C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001005B75E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xD000000000000014 && a2 == 0x80000001005B8C80)
  {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10047F620(uint64_t a1)
{
  unint64_t v2 = sub_100481938();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047F65C(uint64_t a1)
{
  unint64_t v2 = sub_100481938();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10047F698()
{
  return sub_10047F54C(*v0, v0[1]);
}

void *sub_10047F6A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v3 = sub_1003DB240(v1, v2, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 localizedName];

    uint64_t v4 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v4;
}

Swift::Int sub_10047F75C()
{
  Swift::Int v0 = sub_100010C5C((uint64_t)&off_1006378F0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_10047F7A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10047FA14(a1, &qword_100664558, (void (*)(void))sub_100481938, a2);
}

uint64_t sub_10047F7E4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10047FBD8(a1, a2, a3, &qword_100664568, (void (*)(void))sub_100481938);
}

uint64_t sub_10047F830()
{
  return 0x6E69616D6F64;
}

uint64_t sub_10047F844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10047F8D4(uint64_t a1)
{
  unint64_t v2 = sub_10048198C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10047F910(uint64_t a1)
{
  unint64_t v2 = sub_10048198C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10047F94C()
{
  sub_1004E8A24(*(void *)v0, *(void *)(v0 + 8));
  if (!v1) {
    swift_bridgeObjectRetain();
  }
}

Swift::Int sub_10047F98C()
{
  Swift::Int v0 = sub_100010C5C((uint64_t)&off_100637BF0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_10047F9D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10047FA14(a1, &qword_100664570, (void (*)(void))sub_10048198C, a2);
}

uint64_t sub_10047FA14@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = sub_1000172F8(a2);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return sub_100014524((uint64_t)a1);
  }
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  uint64_t result = sub_100014524((uint64_t)a1);
  *uint64_t v11 = v12;
  v11[1] = v14;
  return result;
}

uint64_t sub_10047FB9C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10047FBD8(a1, a2, a3, &qword_100664580, (void (*)(void))sub_10048198C);
}

uint64_t sub_10047FBD8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v13 = a5;
  uint64_t v7 = sub_1000172F8(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  sub_10018AC60(a1, a1[3]);
  v13();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10047FD20(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, a2);
  if (swift_dynamicCast() || (uint64_t result = swift_dynamicCast(), result))
  {
    uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
    v8(a1, a2);
    uint64_t v9 = v10;
    v8(v6, a2);
    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10047FE78(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v21 = a3;
  int v24 = a4;
  uint64_t v20 = a2;
  uint64_t v5 = sub_1000172F8(&qword_100664540);
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000172F8(&qword_100664548);
  uint64_t v17 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000172F8(&qword_100664550);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10048183C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v24)
  {
    LOBYTE(v22) = 1;
    sub_100481890();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    sub_100480F90();
    uint64_t v15 = v19;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v15);
  }
  else
  {
    LOBYTE(v22) = 0;
    sub_1004818E4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v22 = v20;
    uint64_t v23 = v21;
    sub_100481198();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100480194()
{
  if (*v0) {
    return 6448503;
  }
  else {
    return 0x65766974616ELL;
  }
}

uint64_t sub_1004801C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100481240(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004801EC(uint64_t a1)
{
  unint64_t v2 = sub_10048183C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100480228(uint64_t a1)
{
  unint64_t v2 = sub_10048183C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100480264()
{
  return 12383;
}

uint64_t sub_100480274(uint64_t a1)
{
  unint64_t v2 = sub_1004818E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004802B0(uint64_t a1)
{
  unint64_t v2 = sub_1004818E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004802EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10048036C(uint64_t a1)
{
  unint64_t v2 = sub_100481890();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004803A8(uint64_t a1)
{
  unint64_t v2 = sub_100481890();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1004803E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10048131C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_100480418(void *a1)
{
  return sub_10047FE78(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100480438(uint64_t a1, uint64_t a2)
{
  return sub_1004805C0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int sub_100480454()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  return Hasher._finalize()();
}

uint64_t sub_1004804D0()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return sub_10018ACBC();
}

Swift::Int sub_100480548()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  sub_10018ACBC();
  return Hasher._finalize()();
}

uint64_t sub_1004805C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100480604(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v42 - v9;
  id v11 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v19 = sub_1003DB240(a1, a2, 1);
  id v20 = [v19 iTunesMetadata];

  id v21 = [v20 distributorInfo];
  if (!v21)
  {
    static Logger.install.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      uint64_t v43 = v4;
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000143F4(a1, a2, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "App is supposed to be installed but unable to locate record: %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v43);
      return 0;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = v8;
LABEL_5:
    v15(v16, v4);
    return 0;
  }
  id v22 = [v21 localizedDistributorName];
  if (!v22)
  {
    static Logger.install.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v43 = v4;
      v45[0] = v37;
      *(_DWORD *)uint64_t v36 = 136446210;
      v42[1] = v36 + 4;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000143F4(a1, a2, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No localized distributor names found for %{public}s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v43);
      return 0;
    }

    swift_bridgeObjectRelease_n();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = v10;
    goto LABEL_5;
  }
  uint64_t v23 = v22;
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = static Locale.preferredLanguages.getter();
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    if (*(void *)(v24 + 16))
    {
      unint64_t v32 = sub_100016D20(0, 0xE000000000000000);
      if (v33)
      {
        uint64_t v17 = *(void *)(*(void *)(v24 + 56) + 16 * v32);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        return v17;
      }
    }

    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v27 = 0;
  unint64_t v28 = (uint64_t *)(v25 + 40);
  while (1)
  {
    if (*(void *)(v24 + 16))
    {
      uint64_t v30 = *(v28 - 1);
      uint64_t v29 = *v28;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_100016D20(v30, v29);
      LOBYTE(v30) = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v30) {
        break;
      }
    }
    ++v27;
    v28 += 2;
    if (v26 == v27) {
      goto LABEL_16;
    }
  }
  if (v26 == v27)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (v27 >= *(void *)(v25 + 16))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!*(void *)(v24 + 16))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v38 = *(v28 - 1);
  uint64_t v39 = *v28;
  swift_bridgeObjectRetain_n();
  unint64_t v40 = sub_100016D20(v38, v39);
  if (v41)
  {
    uint64_t v17 = *(void *)(*(void *)(v24 + 56) + 16 * v40);
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v17;
  }
LABEL_30:
  uint64_t result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

uint64_t destroy for AnyDistributor()
{
  return sub_10018ACBC();
}

uint64_t _s28ManagedAppDistributionDaemon14AnyDistributorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001C617C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyDistributor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1001C617C();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10018ACBC();
  return a1;
}

uint64_t assignWithTake for AnyDistributor(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10018ACBC();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyDistributor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyDistributor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100480D48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100480D50(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnyDistributor()
{
  return &type metadata for AnyDistributor;
}

ValueMetadata *type metadata accessor for NativeDistributor()
{
  return &type metadata for NativeDistributor;
}

ValueMetadata *type metadata accessor for WebDistributor()
{
  return &type metadata for WebDistributor;
}

unint64_t sub_100480D90()
{
  unint64_t result = qword_1006644B8;
  if (!qword_1006644B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644B8);
  }
  return result;
}

unint64_t sub_100480DE8()
{
  unint64_t result = qword_1006644C0;
  if (!qword_1006644C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644C0);
  }
  return result;
}

unint64_t sub_100480E40()
{
  unint64_t result = qword_1006644C8;
  if (!qword_1006644C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644C8);
  }
  return result;
}

uint64_t sub_100480E94(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048108C(a1, a2, a3, (uint64_t (*)(void))sub_100480EE8, (uint64_t (*)(void))sub_100480F3C, (uint64_t (*)(void))sub_100480F90, (uint64_t (*)(void))sub_100480FE4);
}

unint64_t sub_100480EE8()
{
  unint64_t result = qword_1006644D0;
  if (!qword_1006644D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644D0);
  }
  return result;
}

unint64_t sub_100480F3C()
{
  unint64_t result = qword_1006644D8;
  if (!qword_1006644D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644D8);
  }
  return result;
}

unint64_t sub_100480F90()
{
  unint64_t result = qword_1006644E0;
  if (!qword_1006644E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644E0);
  }
  return result;
}

unint64_t sub_100480FE4()
{
  unint64_t result = qword_1006644E8;
  if (!qword_1006644E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644E8);
  }
  return result;
}

uint64_t sub_100481038(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048108C(a1, a2, a3, (uint64_t (*)(void))sub_1004810F0, (uint64_t (*)(void))sub_100481144, (uint64_t (*)(void))sub_100481198, (uint64_t (*)(void))sub_1004811EC);
}

uint64_t sub_10048108C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_1004810F0()
{
  unint64_t result = qword_1006644F0;
  if (!qword_1006644F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644F0);
  }
  return result;
}

unint64_t sub_100481144()
{
  unint64_t result = qword_1006644F8;
  if (!qword_1006644F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006644F8);
  }
  return result;
}

unint64_t sub_100481198()
{
  unint64_t result = qword_100664500;
  if (!qword_100664500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664500);
  }
  return result;
}

unint64_t sub_1004811EC()
{
  unint64_t result = qword_100664508;
  if (!qword_100664508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664508);
  }
  return result;
}

uint64_t sub_100481240(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65766974616ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6448503 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_10048131C(void *a1)
{
  uint64_t v23 = sub_1000172F8(&qword_100664510);
  uint64_t v25 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned int v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_1000172F8(&qword_100664518);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1000172F8(&qword_100664520);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1[3];
  uint64_t v26 = a1;
  uint64_t v12 = sub_10018AC60(a1, v11);
  sub_10048183C();
  uint64_t v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v28 = v8;
    uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v14 + 16) == 1)
    {
      int v22 = *(unsigned __int8 *)(v14 + 32);
      if (v22)
      {
        LOBYTE(v27) = 1;
        sub_100481890();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        sub_100480F3C();
        uint64_t v15 = v23;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v3, v15);
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v10, v7);
      }
      else
      {
        LOBYTE(v27) = 0;
        sub_1004818E4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        sub_100481144();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v20 = v28;
        (*(void (**)(unsigned char *, uint64_t))(v24 + 8))(v6, v4);
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v10, v7);
      }
      uint64_t v12 = v27;
    }
    else
    {
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      sub_1000172F8(&qword_10065DF58);
      *uint64_t v18 = &type metadata for AnyDistributor;
      uint64_t v12 = v10;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v10, v7);
    }
  }
  sub_100014524((uint64_t)v26);
  return v12;
}

unint64_t sub_10048183C()
{
  unint64_t result = qword_100664528;
  if (!qword_100664528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664528);
  }
  return result;
}

unint64_t sub_100481890()
{
  unint64_t result = qword_100664530;
  if (!qword_100664530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664530);
  }
  return result;
}

unint64_t sub_1004818E4()
{
  unint64_t result = qword_100664538;
  if (!qword_100664538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664538);
  }
  return result;
}

unint64_t sub_100481938()
{
  unint64_t result = qword_100664560;
  if (!qword_100664560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664560);
  }
  return result;
}

unint64_t sub_10048198C()
{
  unint64_t result = qword_100664578;
  if (!qword_100664578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664578);
  }
  return result;
}

ValueMetadata *type metadata accessor for WebDistributor.CodingKeys()
{
  return &type metadata for WebDistributor.CodingKeys;
}

ValueMetadata *type metadata accessor for NativeDistributor.CodingKeys()
{
  return &type metadata for NativeDistributor.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AnyDistributor.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100481AD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyDistributor.CodingKeys()
{
  return &type metadata for AnyDistributor.CodingKeys;
}

ValueMetadata *type metadata accessor for AnyDistributor.NativeCodingKeys()
{
  return &type metadata for AnyDistributor.NativeCodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon14WebDistributorV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100481BB4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyDistributor.WebCodingKeys()
{
  return &type metadata for AnyDistributor.WebCodingKeys;
}

unint64_t sub_100481BF0()
{
  unint64_t result = qword_100664588;
  if (!qword_100664588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664588);
  }
  return result;
}

unint64_t sub_100481C48()
{
  unint64_t result = qword_100664590;
  if (!qword_100664590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664590);
  }
  return result;
}

unint64_t sub_100481CA0()
{
  unint64_t result = qword_100664598;
  if (!qword_100664598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664598);
  }
  return result;
}

unint64_t sub_100481CF8()
{
  unint64_t result = qword_1006645A0;
  if (!qword_1006645A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645A0);
  }
  return result;
}

unint64_t sub_100481D50()
{
  unint64_t result = qword_1006645A8;
  if (!qword_1006645A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645A8);
  }
  return result;
}

unint64_t sub_100481DA8()
{
  unint64_t result = qword_1006645B0;
  if (!qword_1006645B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645B0);
  }
  return result;
}

unint64_t sub_100481E00()
{
  unint64_t result = qword_1006645B8;
  if (!qword_1006645B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645B8);
  }
  return result;
}

unint64_t sub_100481E58()
{
  unint64_t result = qword_1006645C0;
  if (!qword_1006645C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645C0);
  }
  return result;
}

unint64_t sub_100481EB0()
{
  unint64_t result = qword_1006645C8;
  if (!qword_1006645C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645C8);
  }
  return result;
}

unint64_t sub_100481F08()
{
  unint64_t result = qword_1006645D0;
  if (!qword_1006645D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645D0);
  }
  return result;
}

unint64_t sub_100481F60()
{
  unint64_t result = qword_1006645D8;
  if (!qword_1006645D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645D8);
  }
  return result;
}

unint64_t sub_100481FB8()
{
  unint64_t result = qword_1006645E0;
  if (!qword_1006645E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645E0);
  }
  return result;
}

unint64_t sub_100482010()
{
  unint64_t result = qword_1006645E8;
  if (!qword_1006645E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645E8);
  }
  return result;
}

unint64_t sub_100482068()
{
  unint64_t result = qword_1006645F0;
  if (!qword_1006645F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645F0);
  }
  return result;
}

unint64_t sub_1004820C0()
{
  unint64_t result = qword_1006645F8;
  if (!qword_1006645F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006645F8);
  }
  return result;
}

uint64_t sub_100482118(void *a1, int a2)
{
  int v18 = a2;
  uint64_t v3 = sub_1000172F8(&qword_100664760);
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000172F8(&qword_100664768);
  uint64_t v6 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100664770);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100485618();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v18)
  {
    char v20 = 1;
    sub_10048566C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    char v19 = 0;
    sub_1004856C0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  }
  return (*v13)(v12, v9);
}

uint64_t sub_1004823C8(void *a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_1000172F8(&qword_100664708);
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  uint64_t v28 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_100664710);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  __chkstk_darwin(v5);
  uint64_t v25 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100664718);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000172F8(&qword_100664720);
  uint64_t v22 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000172F8(&qword_100664728);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_100485474();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v31)
  {
    case 1:
      char v33 = 1;
      sub_100485570();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
      break;
    case 2:
      char v34 = 2;
      sub_10048551C();
      uint64_t v17 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v26;
      uint64_t v18 = v27;
      goto LABEL_5;
    case 3:
      char v35 = 3;
      sub_1004854C8();
      uint64_t v17 = v28;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v29;
      uint64_t v18 = v30;
LABEL_5:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      break;
    default:
      char v32 = 0;
      sub_1004855C4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_100482810(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = sub_1000172F8(&qword_100664688);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  char v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_100664690);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100664698);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_1006646A0);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_1006646A8);
  uint64_t v23 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000172F8(&qword_1006646B0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10048527C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v35)
  {
    case 1:
      char v37 = 1;
      sub_1004853CC();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    case 2:
      char v38 = 2;
      sub_100485378();
      uint64_t v19 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v27;
      uint64_t v20 = v28;
      goto LABEL_7;
    case 3:
      char v39 = 3;
      sub_100485324();
      uint64_t v19 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v30;
      uint64_t v20 = v31;
      goto LABEL_7;
    case 4:
      char v40 = 4;
      sub_1004852D0();
      uint64_t v19 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v33;
      uint64_t v20 = v34;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      break;
    default:
      char v36 = 0;
      sub_100485420();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_100482D14(char *a1, char *a2)
{
  return sub_10051EB68(*a1, *a2);
}

Swift::Int sub_100482D20()
{
  return Hasher._finalize()();
}

uint64_t sub_100482DA8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100482E1C()
{
  return Hasher._finalize()();
}

uint64_t sub_100482EA0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639DE0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100482F00(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6D6563616C706572;
  if (*v1) {
    uint64_t v2 = 0x61746C6564;
  }
  unint64_t v3 = 0xEB00000000746E65;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

ValueMetadata *type metadata accessor for AppInstallSource()
{
  return &type metadata for AppInstallSource;
}

ValueMetadata *type metadata accessor for AppInstallPriority()
{
  return &type metadata for AppInstallPriority;
}

ValueMetadata *type metadata accessor for AppInstallIntent()
{
  return &type metadata for AppInstallIntent;
}

ValueMetadata *type metadata accessor for AppPackageType()
{
  return &type metadata for AppPackageType;
}

unint64_t sub_100482F94()
{
  unint64_t result = qword_100664600;
  if (!qword_100664600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664600);
  }
  return result;
}

uint64_t sub_100482FE8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100483048()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100483098()
{
  if (*v0) {
    return 0x657461647075;
  }
  else {
    return 0x6C616974696E69;
  }
}

uint64_t sub_1004830D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100483B70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004830F8(uint64_t a1)
{
  unint64_t v2 = sub_100485618();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483134(uint64_t a1)
{
  unint64_t v2 = sub_100485618();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100483170(uint64_t a1)
{
  unint64_t v2 = sub_1004856C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004831AC(uint64_t a1)
{
  unint64_t v2 = sub_1004856C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004831E8(uint64_t a1)
{
  unint64_t v2 = sub_10048566C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483224(uint64_t a1)
{
  unint64_t v2 = sub_10048566C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100483260@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100483C5C(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_100483290(void *a1)
{
  return sub_100482118(a1, *v1);
}

unint64_t sub_1004832B0()
{
  unint64_t result = qword_100664608;
  if (!qword_100664608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664608);
  }
  return result;
}

unint64_t sub_100483308()
{
  unint64_t result = qword_100664610;
  if (!qword_100664610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664610);
  }
  return result;
}

uint64_t sub_10048335C()
{
  uint64_t result = 0x6C616E7265747865;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D6574737973;
      break;
    case 2:
      uint64_t result = 0x65726F7473;
      break;
    case 3:
      uint64_t result = 0x6C7074656B72616DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004833EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004840AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100483414(uint64_t a1)
{
  unint64_t v2 = sub_100485474();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483450(uint64_t a1)
{
  unint64_t v2 = sub_100485474();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048348C(uint64_t a1)
{
  unint64_t v2 = sub_1004855C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004834C8(uint64_t a1)
{
  unint64_t v2 = sub_1004855C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100483504(uint64_t a1)
{
  unint64_t v2 = sub_1004854C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483540(uint64_t a1)
{
  unint64_t v2 = sub_1004854C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048357C(uint64_t a1)
{
  unint64_t v2 = sub_10048551C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004835B8(uint64_t a1)
{
  unint64_t v2 = sub_10048551C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004835F4(uint64_t a1)
{
  unint64_t v2 = sub_100485570();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483630(uint64_t a1)
{
  unint64_t v2 = sub_100485570();

  return CodingKey.debugDescription.getter(a1, v2);
}

char *sub_10048366C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100484270(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100483698(void *a1)
{
  return sub_1004823C8(a1, *v1);
}

uint64_t sub_1004836B4(uint64_t a1)
{
  unint64_t v2 = sub_100485420();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004836F0(uint64_t a1)
{
  unint64_t v2 = sub_100485420();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048372C()
{
  uint64_t result = 0x756F72676B636162;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65726F74736572;
      break;
    case 2:
      uint64_t result = 0x74696E4972657375;
      break;
    case 3:
      uint64_t result = 0x7469615772657375;
      break;
    case 4:
      uint64_t result = 0x6F69725072657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004837FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004848A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100483824(uint64_t a1)
{
  unint64_t v2 = sub_10048527C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483860(uint64_t a1)
{
  unint64_t v2 = sub_10048527C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048389C(uint64_t a1)
{
  unint64_t v2 = sub_1004853CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004838D8(uint64_t a1)
{
  unint64_t v2 = sub_1004853CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100483914(uint64_t a1)
{
  unint64_t v2 = sub_100485378();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483950(uint64_t a1)
{
  unint64_t v2 = sub_100485378();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10048398C(uint64_t a1)
{
  unint64_t v2 = sub_1004852D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004839C8(uint64_t a1)
{
  unint64_t v2 = sub_1004852D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100483A04(uint64_t a1)
{
  unint64_t v2 = sub_100485324();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100483A40(uint64_t a1)
{
  unint64_t v2 = sub_100485324();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100483A80()
{
  unint64_t result = qword_100664618;
  if (!qword_100664618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664618);
  }
  return result;
}

uint64_t sub_100483AD4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100484B34(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100483B00(void *a1)
{
  return sub_100482810(a1, *v1);
}

unint64_t sub_100483B1C()
{
  unint64_t result = qword_100664620;
  if (!qword_100664620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664620);
  }
  return result;
}

uint64_t sub_100483B70(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616974696E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657461647075 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100483C5C(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_100664730);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  __chkstk_darwin(v2);
  char v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100664738);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100664740);
  uint64_t v24 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60((void *)a1, *(void *)(a1 + 24));
  sub_100485618();
  uint64_t v12 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    goto LABEL_7;
  }
  uint64_t v13 = v25;
  uint64_t v21 = v6;
  uint64_t v26 = a1;
  uint64_t v14 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    sub_1000172F8(&qword_10065DF58);
    *uint64_t v18 = &type metadata for AppInstallIntent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, enum case for DecodingError.typeMismatch(_:), v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
    a1 = v26;
LABEL_7:
    sub_100014524(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v14 + 32);
  if (a1)
  {
    LODWORD(v25) = *(unsigned __int8 *)(v14 + 32);
    char v28 = 1;
    sub_10048566C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v9);
    a1 = v25;
  }
  else
  {
    char v27 = 0;
    sub_1004856C0();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v24;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  }
  sub_100014524(v26);
  return a1;
}

uint64_t sub_1004840AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616E7265747865 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726F7473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C7074656B72616DLL && a2 == 0xEB00000000656361)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

char *sub_100484270(void *a1)
{
  uint64_t v41 = sub_1000172F8(&qword_1006646B8);
  uint64_t v45 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_1000172F8(&qword_1006646C0);
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000172F8(&qword_1006646C8);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  char v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_1006646D0);
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000172F8(&qword_1006646D8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  unint64_t v46 = a1;
  sub_10018AC60(a1, v14);
  sub_100485474();
  uint64_t v15 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v35 = v7;
  char v36 = v9;
  uint64_t v16 = v43;
  uint64_t v17 = v44;
  uint64_t v47 = 0;
  uint64_t v18 = v45;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v22 = (char *)v21;
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v13 = v22;
    uint64_t v26 = v10;
    char v28 = v27;
    sub_1000172F8(&qword_10065DF58);
    *char v28 = &type metadata for AppInstallSource;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v26);
LABEL_7:
    uint64_t v29 = (uint64_t)v46;
    goto LABEL_8;
  }
  uint64_t v13 = (char *)*(unsigned __int8 *)(v21 + 32);
  switch(*(unsigned char *)(v21 + 32))
  {
    case 1:
      char v49 = 1;
      sub_100485570();
      uint64_t v31 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v31) {
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v39);
      goto LABEL_14;
    case 2:
      char v50 = 2;
      sub_10048551C();
      uint64_t v32 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v32) {
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v40);
      goto LABEL_14;
    case 3:
      char v51 = 3;
      sub_1004854C8();
      uint64_t v33 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
      uint64_t v29 = (uint64_t)v46;
      break;
    default:
      char v48 = 0;
      sub_1004855C4();
      uint64_t v23 = v36;
      uint64_t v24 = v47;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v24)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
        goto LABEL_7;
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v35);
LABEL_14:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v10);
      uint64_t v29 = (uint64_t)v46;
      break;
  }
LABEL_8:
  sub_100014524(v29);
  return v13;
}

uint64_t sub_1004848A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x756F72676B636162 && a2 == 0xEA0000000000646ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F74736572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74696E4972657375 && a2 == 0xED00006465746169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7469615772657375 && a2 == 0xEB00000000676E69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F69725072657375 && a2 == 0xEF64657A69746972)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100484B34(void *a1)
{
  uint64_t v41 = sub_1000172F8(&qword_100664628);
  uint64_t v34 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1000172F8(&qword_100664630);
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v43 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000172F8(&qword_100664638);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100664640);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100664648);
  uint64_t v33 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_100664650);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  uint64_t v45 = a1;
  sub_10018AC60(a1, v16);
  sub_10048527C();
  uint64_t v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    unint64_t v46 = v11;
    uint64_t v31 = v9;
    uint64_t v32 = v13;
    uint64_t v18 = v8;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    uint64_t v21 = v44;
    uint64_t v22 = v15;
    uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v23 + 16) == 1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v23 + 32);
      switch(*(unsigned char *)(v23 + 32))
      {
        case 1:
          uint64_t v30 = v32;
          char v48 = 1;
          sub_1004853CC();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
          goto LABEL_12;
        case 2:
          uint64_t v30 = v32;
          char v49 = 2;
          sub_100485378();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
LABEL_12:
          swift_bridgeObjectRelease();
          uint64_t v24 = v30;
          goto LABEL_10;
        case 3:
          uint64_t v24 = v32;
          char v50 = 3;
          sub_100485324();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v37);
          goto LABEL_13;
        case 4:
          char v51 = 4;
          sub_1004852D0();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
          break;
        default:
          uint64_t v24 = v32;
          char v47 = 0;
          sub_100485420();
          uint64_t v25 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v31);
LABEL_13:
          swift_bridgeObjectRelease();
LABEL_10:
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v12);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      uint64_t v15 = swift_allocError();
      char v28 = v27;
      sub_1000172F8(&qword_10065DF58);
      *char v28 = &type metadata for AppInstallPriority;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
    }
  }
  sub_100014524((uint64_t)v45);
  return v15;
}

unint64_t sub_10048527C()
{
  unint64_t result = qword_100664658;
  if (!qword_100664658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664658);
  }
  return result;
}

unint64_t sub_1004852D0()
{
  unint64_t result = qword_100664660;
  if (!qword_100664660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664660);
  }
  return result;
}

unint64_t sub_100485324()
{
  unint64_t result = qword_100664668;
  if (!qword_100664668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664668);
  }
  return result;
}

unint64_t sub_100485378()
{
  unint64_t result = qword_100664670;
  if (!qword_100664670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664670);
  }
  return result;
}

unint64_t sub_1004853CC()
{
  unint64_t result = qword_100664678;
  if (!qword_100664678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664678);
  }
  return result;
}

unint64_t sub_100485420()
{
  unint64_t result = qword_100664680;
  if (!qword_100664680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664680);
  }
  return result;
}

unint64_t sub_100485474()
{
  unint64_t result = qword_1006646E0;
  if (!qword_1006646E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006646E0);
  }
  return result;
}

unint64_t sub_1004854C8()
{
  unint64_t result = qword_1006646E8;
  if (!qword_1006646E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006646E8);
  }
  return result;
}

unint64_t sub_10048551C()
{
  unint64_t result = qword_1006646F0;
  if (!qword_1006646F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006646F0);
  }
  return result;
}

unint64_t sub_100485570()
{
  unint64_t result = qword_1006646F8;
  if (!qword_1006646F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006646F8);
  }
  return result;
}

unint64_t sub_1004855C4()
{
  unint64_t result = qword_100664700;
  if (!qword_100664700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664700);
  }
  return result;
}

unint64_t sub_100485618()
{
  unint64_t result = qword_100664748;
  if (!qword_100664748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664748);
  }
  return result;
}

unint64_t sub_10048566C()
{
  unint64_t result = qword_100664750;
  if (!qword_100664750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664750);
  }
  return result;
}

unint64_t sub_1004856C0()
{
  unint64_t result = qword_100664758;
  if (!qword_100664758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664758);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon16AppInstallIntentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004857E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInstallIntent.CodingKeys()
{
  return &type metadata for AppInstallIntent.CodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallIntent.InitialCodingKeys()
{
  return &type metadata for AppInstallIntent.InitialCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallIntent.UpdateCodingKeys()
{
  return &type metadata for AppInstallIntent.UpdateCodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon16AppInstallSourceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100485904);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInstallSource.CodingKeys()
{
  return &type metadata for AppInstallSource.CodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallSource.ExternalCodingKeys()
{
  return &type metadata for AppInstallSource.ExternalCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallSource.SystemCodingKeys()
{
  return &type metadata for AppInstallSource.SystemCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallSource.StoreCodingKeys()
{
  return &type metadata for AppInstallSource.StoreCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallSource.MarketplaceCodingKeys()
{
  return &type metadata for AppInstallSource.MarketplaceCodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon18AppInstallPriorityOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100485A48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppInstallPriority.CodingKeys()
{
  return &type metadata for AppInstallPriority.CodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallPriority.BackgroundCodingKeys()
{
  return &type metadata for AppInstallPriority.BackgroundCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallPriority.RestoreCodingKeys()
{
  return &type metadata for AppInstallPriority.RestoreCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallPriority.UserInitiatedCodingKeys()
{
  return &type metadata for AppInstallPriority.UserInitiatedCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallPriority.UserWaitingCodingKeys()
{
  return &type metadata for AppInstallPriority.UserWaitingCodingKeys;
}

ValueMetadata *type metadata accessor for AppInstallPriority.UserPrioritizedCodingKeys()
{
  return &type metadata for AppInstallPriority.UserPrioritizedCodingKeys;
}

unint64_t sub_100485AD4()
{
  unint64_t result = qword_100664778;
  if (!qword_100664778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664778);
  }
  return result;
}

unint64_t sub_100485B2C()
{
  unint64_t result = qword_100664780;
  if (!qword_100664780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664780);
  }
  return result;
}

unint64_t sub_100485B84()
{
  unint64_t result = qword_100664788;
  if (!qword_100664788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664788);
  }
  return result;
}

unint64_t sub_100485BDC()
{
  unint64_t result = qword_100664790;
  if (!qword_100664790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664790);
  }
  return result;
}

unint64_t sub_100485C34()
{
  unint64_t result = qword_100664798;
  if (!qword_100664798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664798);
  }
  return result;
}

unint64_t sub_100485C8C()
{
  unint64_t result = qword_1006647A0;
  if (!qword_1006647A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647A0);
  }
  return result;
}

unint64_t sub_100485CE4()
{
  unint64_t result = qword_1006647A8;
  if (!qword_1006647A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647A8);
  }
  return result;
}

unint64_t sub_100485D3C()
{
  unint64_t result = qword_1006647B0;
  if (!qword_1006647B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647B0);
  }
  return result;
}

unint64_t sub_100485D94()
{
  unint64_t result = qword_1006647B8;
  if (!qword_1006647B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647B8);
  }
  return result;
}

unint64_t sub_100485DEC()
{
  unint64_t result = qword_1006647C0;
  if (!qword_1006647C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647C0);
  }
  return result;
}

unint64_t sub_100485E44()
{
  unint64_t result = qword_1006647C8;
  if (!qword_1006647C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647C8);
  }
  return result;
}

unint64_t sub_100485E9C()
{
  unint64_t result = qword_1006647D0;
  if (!qword_1006647D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647D0);
  }
  return result;
}

unint64_t sub_100485EF4()
{
  unint64_t result = qword_1006647D8;
  if (!qword_1006647D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647D8);
  }
  return result;
}

unint64_t sub_100485F4C()
{
  unint64_t result = qword_1006647E0;
  if (!qword_1006647E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647E0);
  }
  return result;
}

unint64_t sub_100485FA4()
{
  unint64_t result = qword_1006647E8;
  if (!qword_1006647E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647E8);
  }
  return result;
}

unint64_t sub_100485FFC()
{
  unint64_t result = qword_1006647F0;
  if (!qword_1006647F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647F0);
  }
  return result;
}

unint64_t sub_100486054()
{
  unint64_t result = qword_1006647F8;
  if (!qword_1006647F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006647F8);
  }
  return result;
}

unint64_t sub_1004860AC()
{
  unint64_t result = qword_100664800;
  if (!qword_100664800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664800);
  }
  return result;
}

unint64_t sub_100486104()
{
  unint64_t result = qword_100664808;
  if (!qword_100664808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664808);
  }
  return result;
}

unint64_t sub_10048615C()
{
  unint64_t result = qword_100664810;
  if (!qword_100664810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664810);
  }
  return result;
}

unint64_t sub_1004861B4()
{
  unint64_t result = qword_100664818;
  if (!qword_100664818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664818);
  }
  return result;
}

unint64_t sub_10048620C()
{
  unint64_t result = qword_100664820;
  if (!qword_100664820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664820);
  }
  return result;
}

unint64_t sub_100486264()
{
  unint64_t result = qword_100664828;
  if (!qword_100664828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664828);
  }
  return result;
}

unint64_t sub_1004862BC()
{
  unint64_t result = qword_100664830;
  if (!qword_100664830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664830);
  }
  return result;
}

unint64_t sub_100486314()
{
  unint64_t result = qword_100664838;
  if (!qword_100664838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664838);
  }
  return result;
}

unint64_t sub_10048636C()
{
  unint64_t result = qword_100664840;
  if (!qword_100664840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664840);
  }
  return result;
}

unint64_t sub_1004863C4()
{
  unint64_t result = qword_100664848;
  if (!qword_100664848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664848);
  }
  return result;
}

unint64_t sub_10048641C()
{
  unint64_t result = qword_100664850;
  if (!qword_100664850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664850);
  }
  return result;
}

unint64_t sub_100486474()
{
  unint64_t result = qword_100664858;
  if (!qword_100664858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664858);
  }
  return result;
}

unint64_t sub_1004864CC()
{
  unint64_t result = qword_100664860;
  if (!qword_100664860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664860);
  }
  return result;
}

unint64_t sub_100486524()
{
  unint64_t result = qword_100664868;
  if (!qword_100664868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664868);
  }
  return result;
}

uint64_t sub_100486578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  sub_1000172F8((uint64_t *)&unk_100661AB0);
  v3[5] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LogKey.Prefix();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_10048666C, 0, 0);
}

void sub_10048666C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 16);
  (*(void (**)(void, void, void))(*(void *)(v0 + 56) + 104))(*(void *)(v0 + 64), enum case for LogKey.Prefix.license(_:), *(void *)(v0 + 48));
  id v3 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  *(void *)(v0 + 72) = LogKey.init(prefix:)();
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = v2;
  uint64_t v8 = (char *)&dword_10065C340 + dword_10065C340;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10048680C;
  __asm { BR              X0; sub_100008B8C }
}

uint64_t sub_10048680C()
{
  uint64_t v2 = *(void **)(*(void *)v1 + 72);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  sub_10001729C(v3, (uint64_t *)&unk_100661AB0);

  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_1004869F0;
  }
  else {
    uint64_t v4 = sub_100486980;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100486980()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004869F0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100486A60()
{
  unint64_t v0 = sub_10044C31C((uint64_t)_swiftEmptyArrayStorage);
  sub_1000172F8(&qword_1006648D0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_100664870 = result;
  return result;
}

uint64_t sub_100486AB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  if (*(void *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_100016D20(a2, a3);
    if (v9)
    {
      unint64_t v10 = v8;
      uint64_t v11 = *(void *)(v5 + 56);
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void *)(v12 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(a4, v11 + *(void *)(v13 + 72) * v10, v12);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, v12);
    }
    else
    {
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a4, 1, 1, v16);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a4, 1, 1, v14);
  }
}

uint64_t sub_100486C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000172F8(&qword_10065B8F0);
  __chkstk_darwin(v5 - 8);
  long long v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Date.init()();
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  return sub_1002B6474((uint64_t)v7, a2, a3);
}

uint64_t sub_100486D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[43] = a3;
  v4[44] = a4;
  v4[42] = a2;
  uint64_t v5 = type metadata accessor for LogKey.Prefix();
  v4[45] = v5;
  v4[46] = *(void *)(v5 - 8);
  v4[47] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v4[48] = v6;
  v4[49] = *(void *)(v6 - 8);
  v4[50] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Data.Iterator();
  v4[51] = v7;
  v4[52] = *(void *)(v7 - 8);
  v4[53] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[54] = v8;
  v4[55] = *(void *)(v8 - 8);
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  v4[58] = swift_task_alloc();
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  return _swift_task_switch(sub_100486F80, 0, 0);
}

uint64_t sub_100486F80()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[37] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Checking for expiring licenses", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = v0[60];
  uint64_t v7 = v0[54];
  uint64_t v8 = v0[55];
  char v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[61] = v9;
  v0[62] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v6, v7);
  uint64_t v10 = dword_100660850;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[63] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100487194;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660850 + v10))((uint64_t)sub_100489CD4, 0);
}

uint64_t sub_100487194(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 512) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100487390, 0, 0);
  }
}

uint64_t sub_100487390()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(v0 + 512);
  *(void *)(v0 + 320) = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v0 + 320);
    uint64_t v5 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v3 >= *(void *)(v1 + 16)) {
        __break(1u);
      }
      uint64_t v7 = (uint64_t *)(v1 + 32 + 24 * v3);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = *v4;
      if (!*(void *)(*v4 + 16)) {
        goto LABEL_13;
      }
      uint64_t v12 = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_13;
      }
      uint64_t v15 = *(void *)(v11 + 48);
      if (*(void *)(v15 + 8 * v14) != v10) {
        break;
      }
LABEL_4:
      if (++v3 == v2)
      {
        uint64_t v0 = v48;
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    uint64_t v16 = ~v13;
    while (1)
    {
      unint64_t v14 = (v14 + 1) & v16;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      if (*(void *)(v15 + 8 * v14) == v10) {
        goto LABEL_4;
      }
    }
LABEL_13:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_10028ED9C(0, v5[2] + 1, 1, v5);
    }
    unint64_t v18 = v5[2];
    unint64_t v17 = v5[3];
    if (v18 >= v17 >> 1) {
      uint64_t v5 = sub_10028ED9C((void *)(v17 > 1), v18 + 1, 1, v5);
    }
    v5[2] = v18 + 1;
    uint64_t v6 = &v5[2 * v18];
    v6[4] = v8;
    v6[5] = v9;
    sub_10032A280(&v49, v10);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_19:
  *(void *)(v0 + 520) = v5;
  *(void *)(v0 + 304) = _swiftEmptyArrayStorage;
  uint64_t v19 = v5[2];
  *(void *)(v0 + 528) = v19;
  if (v19)
  {
    *(_DWORD *)(v0 + 612) = enum case for MarketplaceKitError.invalidLicense(_:);
    *(_DWORD *)(v0 + 616) = enum case for LogKey.Prefix.undefined(_:);
    *(void *)(v0 + 536) = 0;
    uint64_t v20 = v5[4];
    *(void *)(v0 + 544) = v20;
    uint64_t v21 = v5[5];
    *(void *)(v0 + 552) = v21;
    swift_bridgeObjectRetain();
    uint64_t v22 = swift_task_alloc();
    *(void *)(v0 + 560) = v22;
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v21;
    uint64_t v23 = swift_task_alloc();
    *(void *)(v0 + 568) = v23;
    *(void *)(v23 + 16) = sub_10029CC74;
    *(void *)(v23 + 24) = v22;
    uint64_t v24 = dword_1006607A8;
    swift_bridgeObjectRetain();
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_100487AAC;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006607A8 + v24))(v0 + 192, (uint64_t)sub_10049B8A0, v23);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.ald.getter();
    uint64_t v27 = *(void *)(v0 + 304);
    swift_bridgeObjectRetain();
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412546;
      uint64_t v32 = sub_1005163F0();
      *(void *)(v0 + 240) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v32;
      *(_WORD *)(v30 + 12) = 2050;
      *(void *)(v0 + 248) = *(void *)(v27 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Found %{public}ld licenses to renew", (uint8_t *)v30, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(void, void))(v0 + 488))(*(void *)(v0 + 472), *(void *)(v0 + 432));
    swift_beginAccess();
    uint64_t v33 = *(void *)(v0 + 304);
    *(void *)(v0 + 592) = v33;
    if (*(void *)(v33 + 16))
    {
      uint64_t v34 = dword_1006648D8;
      uint64_t v35 = (void *)swift_task_alloc();
      *(void *)(v0 + 600) = v35;
      void *v35 = v0;
      v35[1] = sub_100488E78;
      uint64_t v36 = *(void *)(v0 + 344);
      uint64_t v37 = *(void *)(v0 + 352);
      uint64_t v38 = *(void *)(v0 + 336);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))((char *)&dword_1006648D8
                                                                                                 + v34))(v33, v38, v36, v37, 0, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      static Logger.ald.getter();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 138412290;
        uint64_t v43 = sub_1005163F0();
        *(void *)(v0 + 264) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v42 = v43;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "[%@] Expiring license check completed", v41, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      uint64_t v45 = *(void *)(v0 + 456);
      uint64_t v46 = *(void *)(v0 + 432);

      v44(v45, v46);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
  }
}

uint64_t sub_100487AAC()
{
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1004891C4;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = sub_100487C08;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100487C08()
{
  uint64_t v3 = v0 + 192;
  uint64_t v2 = *(void *)(v0 + 192);
  int v115 = (_OWORD *)(v0 + 16);
  uint64_t v4 = (void *)(v0 + 144);
  os_log_type_t v110 = v0 - 88;
  uint64_t v112 = (void *)(v0 + 288);
  unint64_t v5 = *(void *)(v0 + 200);
  if (qword_10065B130 != -1) {
    swift_once();
  }
  char v114 = (uint64_t *)(v0 + 256);
  uint64_t v117 = (void **)(v0 + 304);
  NSString v104 = (uint64_t *)(v0 + 312);
  char v103 = (void **)(v0 + 328);
  unint64_t v6 = v5 >> 62;
  id v107 = (void **)(v0 + 272);
  switch(v5 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v2), v2))
      {
        uint64_t v7 = HIDWORD(v2) - (int)v2;
        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_78;
    case 2uLL:
      uint64_t v10 = *(void *)(v2 + 16);
      uint64_t v9 = *(void *)(v2 + 24);
      uint64_t v7 = v9 - v10;
      if (__OFSUB__(v9, v10))
      {
        __break(1u);
LABEL_9:
        sub_100013510(v2, v5);
        *(void *)(v0 + 48) = 0;
        *int v115 = 0u;
        *(_OWORD *)(v0 + 32) = 0u;
        uint64_t v8 = _swiftEmptyArrayStorage;
        goto LABEL_26;
      }
LABEL_12:
      sub_100012670(v2, v5);
      if (v7)
      {
LABEL_13:
        if (v7 < 1)
        {
          uint64_t v8 = _swiftEmptyArrayStorage;
        }
        else
        {
          sub_1000172F8(&qword_100663C60);
          uint64_t v8 = (int64_t *)swift_allocObject();
          size_t v11 = j__malloc_size(v8);
          v8[2] = v7;
          v8[3] = 2 * v11 - 64;
        }
        uint64_t v12 = *(void *)(v0 + 416);
        unint64_t v13 = *(void *)(v0 + 424);
        uint64_t v14 = *(void *)(v0 + 408);
        uint64_t v15 = v2;
        uint64_t v16 = Data._copyContents(initializing:)();
        (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v13, v14);
        BOOL v17 = v16 == v7;
        uint64_t v2 = v15;
        uint64_t v3 = v0 + 192;
        if (!v17)
        {
          __break(1u);
          goto LABEL_76;
        }
      }
      else
      {
LABEL_5:
        uint64_t v8 = _swiftEmptyArrayStorage;
      }
      sub_100013510(v2, v5);
      uint64_t v4 = (void *)(v0 + 16);
      *(void *)(v0 + 48) = 0;
      *int v115 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
      if (!v6) {
        goto LABEL_26;
      }
      if (v6 != 1)
      {
        uint64_t v20 = *(void *)(v2 + 16);
        uint64_t v19 = *(void *)(v2 + 24);
        unint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_24;
        }
LABEL_79:
        __break(1u);
LABEL_80:
        uint64_t v4 = sub_100290DE4(0, v4[2] + 1, 1, v4);
        goto LABEL_34;
      }
      if (__OFSUB__(HIDWORD(v2), v2))
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      unint64_t v18 = HIDWORD(v2) - (int)v2;
LABEL_24:
      if ((v18 & 0x8000000000000000) != 0 || HIDWORD(v18)) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
LABEL_26:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10028F0F4(0, v8[2], 0, v8);
      }
      uint64_t v21 = *(void *)(v0 + 584);
      unsigned int v22 = TBQFRWlW();
      swift_bridgeObjectRelease();
      sub_1004E166C(v22);
      if (v21)
      {
        uint64_t v23 = *(unsigned int *)(v0 + 612);
        uint64_t v24 = type metadata accessor for MarketplaceKitError();
        sub_100013B94((unint64_t *)&qword_10065B538, (void (*)(uint64_t))&type metadata accessor for MarketplaceKitError);
        uint64_t v25 = swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v26, v23, v24);
        swift_willThrow();
        swift_errorRelease();
        sub_100013510(v2, v5);
        *(void *)(v0 + 288) = v25;
        swift_errorRetain();
        sub_1000172F8(&qword_10065B260);
        if (swift_dynamicCast())
        {
          uint64_t v27 = *(void **)(v0 + 136);
          if (v27)
          {
            uint64_t v29 = *(void *)(v0 + 120);
            uint64_t v28 = *(void *)(v0 + 128);
            *(void *)(v0 + 208) = 0;
            *(void *)(v0 + 216) = 0xE000000000000000;
            _StringGuts.grow(_:)(18);
            swift_bridgeObjectRelease();
            strcpy((char *)(v0 + 224), "Error code: ");
            *(unsigned char *)(v0 + 237) = 0;
            *(_WORD *)(v0 + 238) = -5120;
            *(_DWORD *)(v0 + 608) = v29;
            v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v30);
            swift_bridgeObjectRelease();
            v31._uint64_t countAndFlagsBits = 8236;
            v31._object = (void *)0xE200000000000000;
            String.append(_:)(v31);
            v32._uint64_t countAndFlagsBits = v28;
            v32._object = v27;
            String.append(_:)(v32);
            swift_bridgeObjectRelease();
            uint64_t v2 = *(void *)(v0 + 224);
            unint64_t v13 = *(void *)(v0 + 232);
          }
          else
          {
            unint64_t v13 = 0xEF6E6F6973736573;
            uint64_t v2 = 0x2064696C61766E49;
          }
        }
        else
        {
          swift_getErrorValue();
          uint64_t v52 = *(void *)(*(void *)(v0 + 176) - 8);
          swift_task_alloc();
          (*(void (**)(void))(v52 + 16))();
          uint64_t v2 = String.init<A>(describing:)();
          unint64_t v13 = v53;
          swift_task_dealloc();
        }
        static Logger.ald.getter();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled((os_log_t)v7, v54))
        {
          char v56 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
          uint64_t v57 = *(void *)(v0 + 448);
          uint64_t v58 = *(void *)(v0 + 432);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();

          v56(v57, v58);
LABEL_55:
          char v66 = *v117;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v66 = sub_100290DE4(0, v66[2] + 1, 1, v66);
          }
          unint64_t v68 = v66[2];
          unint64_t v67 = v66[3];
          if (v68 >= v67 >> 1) {
            char v66 = sub_100290DE4((void *)(v67 > 1), v68 + 1, 1, v66);
          }
          uint64_t v69 = *(void *)(v0 + 552);
          uint64_t v70 = *(void *)(v0 + 544);
          v66[2] = v68 + 1;
          int v71 = &v66[3 * v68];
          v71[4] = v70;
          v71[5] = v69;
          *((unsigned char *)v71 + 48) = 1;
          swift_errorRelease();
          *(void *)(v0 + 304) = v66;
          goto LABEL_60;
        }
        os_log_type_t v110 = v54;
        unint64_t v5 = swift_slowAlloc();
        uint64_t v112 = (void *)swift_slowAlloc();
        uint64_t *v114 = swift_slowAlloc();
        *(_DWORD *)unint64_t v5 = 138412802;
        if (qword_10065B150 == -1)
        {
LABEL_48:
          TaskLocal.get()();
          uint64_t v55 = *(void *)(v0 + 96);
          if (!v55) {
            goto LABEL_53;
          }
          swift_release();
          swift_release();
          swift_release();
          os_unfair_lock_lock((os_unfair_lock_t)(v55 + 24));
          sub_100006250((void **)(v55 + 16), v107);
          os_unfair_lock_unlock((os_unfair_lock_t)(v55 + 24));
          uint64_t v62 = (uint64_t)*v107;
          swift_release();
          if (!v62)
          {
LABEL_53:
            (*(void (**)(void, void, void))(*(void *)(v0 + 368) + 104))(*(void *)(v0 + 376), *(unsigned int *)(v0 + 616), *(void *)(v0 + 360));
            id v63 = objc_allocWithZone((Class)type metadata accessor for LogKey());
            uint64_t v62 = LogKey.init(prefix:)();
          }
          unint64_t v64 = *(void *)(v0 + 552);
          uint64_t v65 = *(void *)(v0 + 544);
          uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
          uint64_t v105 = *(void *)(v0 + 432);
          uint64_t v106 = *(void *)(v0 + 448);
          *(void *)(v5 + 4) = v62;
          *uint64_t v112 = v62;
          *(_WORD *)(v5 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v5 + 14) = sub_1000143F4(v65, v64, v114);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v5 + 22) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v5 + 24) = sub_1000143F4(v2, v13, v114);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v110, "[%@] Unable to read license info for %{public}s: %{public}s", (uint8_t *)v5, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v109(v106, v105);
          goto LABEL_55;
        }
LABEL_76:
        swift_once();
        goto LABEL_48;
      }
      uint64_t v34 = *(void *)(v0 + 392);
      uint64_t v33 = *(void *)(v0 + 400);
      uint64_t v35 = *(void *)(v0 + 384);
      double v1 = (double)*(unint64_t *)(v0 + 48);
      Date.init()();
      Date.timeIntervalSince1970.getter();
      double v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      if (v37 + 100800.0 <= v1)
      {
        sub_100013510(v2, v5);
        swift_bridgeObjectRelease();
        goto LABEL_60;
      }
      uint64_t v4 = *v117;
      swift_bridgeObjectRetain();
      uint64_t v102 = v2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_80;
      }
LABEL_34:
      unint64_t v39 = v4[2];
      unint64_t v38 = v4[3];
      if (v39 >= v38 >> 1) {
        uint64_t v4 = sub_100290DE4((void *)(v38 > 1), v39 + 1, 1, v4);
      }
      uint64_t v40 = *(void *)(v0 + 552);
      uint64_t v41 = *(void *)(v0 + 544);
      v4[2] = v39 + 1;
      uint64_t v42 = &v4[3 * v39];
      v42[4] = v41;
      v42[5] = v40;
      *((unsigned char *)v42 + 48) = 1;
      *(void *)(v0 + 304) = v4;
      static Logger.ald.getter();
      swift_bridgeObjectRetain();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v116 = v5;
        uint64_t v45 = swift_slowAlloc();
        unint64_t v113 = (void *)swift_slowAlloc();
        *NSString v104 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 138412802;
        if (qword_10065B150 != -1) {
          swift_once();
        }
        TaskLocal.get()();
        uint64_t v46 = *(void *)(v0 + 64);
        if (!v46) {
          goto LABEL_41;
        }
        swift_release();
        swift_release();
        swift_release();
        os_unfair_lock_lock((os_unfair_lock_t)(v46 + 24));
        sub_100006250((void **)(v46 + 16), v103);
        os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 24));
        uint64_t v47 = (uint64_t)*v103;
        swift_release();
        if (!v47)
        {
LABEL_41:
          (*(void (**)(void, void, void))(*(void *)(v0 + 368) + 104))(*(void *)(v0 + 376), *(unsigned int *)(v0 + 616), *(void *)(v0 + 360));
          id v48 = objc_allocWithZone((Class)type metadata accessor for LogKey());
          uint64_t v47 = LogKey.init(prefix:)();
        }
        unint64_t v49 = *(void *)(v0 + 552);
        uint64_t v50 = *(void *)(v0 + 544);
        uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
        uint64_t v51 = *(void *)(v0 + 464);
        uint64_t v108 = *(void *)(v0 + 432);
        *(void *)(v45 + 4) = v47;
        void *v113 = v47;
        *(_WORD *)(v45 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v45 + 14) = sub_1000143F4(v50, v49, v104);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v45 + 22) = 2050;
        *(double *)(v45 + 24) = v1;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "[%@] License associated with %{public}s expires at %{public}f, will attempt renewal", (uint8_t *)v45, 0x20u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100013510(v102, v116);

        v111(v51, v108);
      }
      else
      {
        char v59 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
        uint64_t v60 = *(void *)(v0 + 464);
        uint64_t v61 = *(void *)(v0 + 432);
        swift_bridgeObjectRelease_n();
        sub_100013510(v102, v5);

        v59(v60, v61);
      }
LABEL_60:
      uint64_t v72 = *(void *)(v0 + 536) + 1;
      if (v72 == *(void *)(v0 + 528))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        static Logger.ald.getter();
        uint64_t v73 = *(void *)(v0 + 304);
        swift_bridgeObjectRetain();
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc();
          uint64_t v77 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v76 = 138412546;
          uint64_t v78 = sub_1005163F0();
          *(void *)(v0 + 240) = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v77 = v78;
          *(_WORD *)(v76 + 12) = 2050;
          *(void *)(v0 + 248) = *(void *)(v73 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "[%@] Found %{public}ld licenses to renew", (uint8_t *)v76, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(void, void))(v0 + 488))(*(void *)(v0 + 472), *(void *)(v0 + 432));
        swift_beginAccess();
        uint64_t v87 = *(void *)(v0 + 304);
        *(void *)(v0 + 592) = v87;
        if (*(void *)(v87 + 16))
        {
          uint64_t v88 = dword_1006648D8;
          unint64_t v89 = (void *)swift_task_alloc();
          *(void *)(v0 + 600) = v89;
          *unint64_t v89 = v0;
          v89[1] = sub_100488E78;
          uint64_t v90 = *(void *)(v0 + 344);
          uint64_t v91 = *(void *)(v0 + 352);
          uint64_t v92 = *(void *)(v0 + 336);
          return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))((char *)&dword_1006648D8 + v88))(v87, v92, v90, v91, 0, 0, 0);
        }
        else
        {
          swift_bridgeObjectRelease();
          static Logger.ald.getter();
          os_log_type_t v93 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v93, v94))
          {
            char v95 = (uint8_t *)swift_slowAlloc();
            os_log_type_t v96 = (void *)swift_slowAlloc();
            *(_DWORD *)char v95 = 138412290;
            uint64_t v97 = sub_1005163F0();
            *(void *)(v0 + 264) = v97;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *os_log_type_t v96 = v97;
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "[%@] Expiring license check completed", v95, 0xCu);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
          uint64_t v99 = *(void *)(v0 + 456);
          uint64_t v100 = *(void *)(v0 + 432);

          v98(v99, v100);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v101 = *(uint64_t (**)(void))(v0 + 8);
          return v101();
        }
      }
      else
      {
        *(void *)(v0 + 536) = v72;
        uint64_t v79 = *(void *)(v0 + 520) + 16 * v72;
        uint64_t v80 = *(void *)(v79 + 32);
        *(void *)(v0 + 544) = v80;
        uint64_t v81 = *(void *)(v79 + 40);
        *(void *)(v0 + 552) = v81;
        uint64_t v82 = swift_task_alloc();
        *(void *)(v0 + 560) = v82;
        *(void *)(v82 + 16) = v80;
        *(void *)(v82 + 24) = v81;
        uint64_t v83 = swift_task_alloc();
        *(void *)(v0 + 568) = v83;
        *(void *)(v83 + 16) = sub_10029CC74;
        *(void *)(v83 + 24) = v82;
        uint64_t v84 = dword_1006607A8;
        swift_bridgeObjectRetain();
        uint64_t v85 = (void *)swift_task_alloc();
        *(void *)(v0 + 576) = v85;
        *uint64_t v85 = v0;
        v85[1] = sub_100487AAC;
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006607A8 + v84))(v3, (uint64_t)sub_10049B8A0, v83);
      }
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v7 = BYTE6(v5);
      if (!BYTE6(v5)) {
        goto LABEL_5;
      }
      goto LABEL_13;
  }
}

uint64_t sub_100488E78()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100488FBC, 0, 0);
}

uint64_t sub_100488FBC()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[33] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Expiring license check completed", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  unint64_t v6 = v1;
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[61];
  uint64_t v8 = v0[57];
  uint64_t v9 = v0[54];

  v7(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1004891C4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)(v0 + 288) = *(void *)(v0 + 584);
  swift_errorRetain();
  sub_1000172F8(&qword_10065B260);
  if (swift_dynamicCast())
  {
    uint64_t v1 = *(void **)(v0 + 136);
    if (v1)
    {
      uint64_t v3 = *(void *)(v0 + 120);
      uint64_t v2 = *(void *)(v0 + 128);
      *(void *)(v0 + 208) = 0;
      *(void *)(v0 + 216) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      strcpy((char *)(v0 + 224), "Error code: ");
      *(unsigned char *)(v0 + 237) = 0;
      *(_WORD *)(v0 + 238) = -5120;
      *(_DWORD *)(v0 + 608) = v3;
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 8236;
      v5._object = (void *)0xE200000000000000;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = v2;
      v6._object = v1;
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      uint64_t v7 = *(void *)(v0 + 224);
      unint64_t v8 = *(void *)(v0 + 232);
    }
    else
    {
      unint64_t v8 = 0xEF6E6F6973736573;
      uint64_t v7 = 0x2064696C61766E49;
    }
    uint64_t v64 = v7;
  }
  else
  {
    swift_getErrorValue();
    uint64_t v9 = *(void *)(*(void *)(v0 + 176) - 8);
    swift_task_alloc();
    (*(void (**)(void))(v9 + 16))();
    uint64_t v64 = String.init<A>(describing:)();
    unint64_t v8 = v10;
    swift_task_dealloc();
  }
  static Logger.ald.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  size_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_t log = (os_log_t)(v0 + 272);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v61 = (void *)swift_slowAlloc();
    id v63 = (uint64_t *)(v0 + 256);
    *(void *)(v0 + 256) = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412802;
    if (qword_10065B150 != -1) {
      swift_once();
    }
    TaskLocal.get()();
    uint64_t v14 = *(void *)(v0 + 96);
    if (!v14) {
      goto LABEL_14;
    }
    swift_release();
    swift_release();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
    sub_100006250((void **)(v14 + 16), (void **)&log->isa);
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    uint64_t isa = (uint64_t)log->isa;
    swift_release();
    if (!isa)
    {
LABEL_14:
      (*(void (**)(void, void, void))(*(void *)(v0 + 368) + 104))(*(void *)(v0 + 376), *(unsigned int *)(v0 + 616), *(void *)(v0 + 360));
      id v19 = objc_allocWithZone((Class)type metadata accessor for LogKey());
      uint64_t isa = LogKey.init(prefix:)();
    }
    unint64_t v20 = *(void *)(v0 + 552);
    uint64_t v21 = *(void *)(v0 + 544);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v58 = *(void *)(v0 + 432);
    uint64_t v59 = *(void *)(v0 + 448);
    *(void *)(v13 + 4) = isa;
    *uint64_t v61 = isa;
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v13 + 14) = sub_1000143F4(v21, v20, v63);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v13 + 24) = sub_1000143F4(v64, v8, v63);
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Unable to read license info for %{public}s: %{public}s", (uint8_t *)v13, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v60(v59, v58);
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
    uint64_t v16 = *(void *)(v0 + 448);
    uint64_t v17 = *(void *)(v0 + 432);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    v15(v16, v17);
  }
  unsigned int v22 = *(void **)(v0 + 304);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v22 = sub_100290DE4(0, v22[2] + 1, 1, v22);
  }
  unint64_t v24 = v22[2];
  unint64_t v23 = v22[3];
  if (v24 >= v23 >> 1) {
    unsigned int v22 = sub_100290DE4((void *)(v23 > 1), v24 + 1, 1, v22);
  }
  uint64_t v25 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  v22[2] = v24 + 1;
  uint64_t v27 = &v22[3 * v24];
  v27[4] = v26;
  v27[5] = v25;
  *((unsigned char *)v27 + 48) = 1;
  swift_errorRelease();
  *(void *)(v0 + 304) = v22;
  uint64_t v28 = *(void *)(v0 + 536) + 1;
  if (v28 == *(void *)(v0 + 528))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.ald.getter();
    uint64_t v29 = *(void *)(v0 + 304);
    swift_bridgeObjectRetain();
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v62 = v30;
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412546;
      uint64_t v34 = sub_1005163F0();
      *(void *)(v0 + 240) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v33 = v34;
      Swift::String v30 = v62;
      *(_WORD *)(v32 + 12) = 2050;
      *(void *)(v0 + 248) = *(void *)(v29 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v31, "[%@] Found %{public}ld licenses to renew", (uint8_t *)v32, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(void, void))(v0 + 488))(*(void *)(v0 + 472), *(void *)(v0 + 432));
    swift_beginAccess();
    uint64_t v43 = *(void *)(v0 + 304);
    *(void *)(v0 + 592) = v43;
    if (*(void *)(v43 + 16))
    {
      uint64_t v44 = dword_1006648D8;
      uint64_t v45 = (void *)swift_task_alloc();
      *(void *)(v0 + 600) = v45;
      void *v45 = v0;
      v45[1] = sub_100488E78;
      uint64_t v46 = *(void *)(v0 + 344);
      uint64_t v47 = *(void *)(v0 + 352);
      uint64_t v48 = *(void *)(v0 + 336);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))((char *)&dword_1006648D8
                                                                                                 + v44))(v43, v48, v46, v47, 0, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      static Logger.ald.getter();
      unint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 138412290;
        uint64_t v53 = sub_1005163F0();
        *(void *)(v0 + 264) = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v52 = v53;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Expiring license check completed", v51, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      os_log_type_t v54 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
      uint64_t v55 = *(void *)(v0 + 456);
      uint64_t v56 = *(void *)(v0 + 432);

      v54(v55, v56);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
      return v57();
    }
  }
  else
  {
    *(void *)(v0 + 536) = v28;
    uint64_t v35 = *(void *)(v0 + 520) + 16 * v28;
    uint64_t v36 = *(void *)(v35 + 32);
    *(void *)(v0 + 544) = v36;
    uint64_t v37 = *(void *)(v35 + 40);
    *(void *)(v0 + 552) = v37;
    uint64_t v38 = swift_task_alloc();
    *(void *)(v0 + 560) = v38;
    *(void *)(v38 + 16) = v36;
    *(void *)(v38 + 24) = v37;
    uint64_t v39 = swift_task_alloc();
    *(void *)(v0 + 568) = v39;
    *(void *)(v39 + 16) = sub_10029CC74;
    *(void *)(v39 + 24) = v38;
    uint64_t v40 = dword_1006607A8;
    swift_bridgeObjectRetain();
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v41;
    void *v41 = v0;
    v41[1] = sub_100487AAC;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006607A8 + v40))(v0 + 192, (uint64_t)sub_10049B8A0, v39);
  }
}

uint64_t sub_100489CD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10043B2E4();
  *a1 = result;
  return result;
}

id sub_100489D10(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v7 = v6;
  id v16 = 0;
  id v8 = [v3 initWithURL:v6 allowPlaceholder:a2 & 1 error:&v16];

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL();
    size_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a1, v10);
  }
  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

uint64_t sub_100489E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[115] = a4;
  v4[114] = a3;
  v4[113] = a2;
  v4[112] = a1;
  uint64_t v5 = type metadata accessor for LogKey.Prefix();
  v4[116] = v5;
  v4[117] = *(void *)(v5 - 8);
  v4[118] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v4[119] = v6;
  v4[120] = *(void *)(v6 - 8);
  v4[121] = swift_task_alloc();
  v4[122] = type metadata accessor for NewLicenseBatch(0);
  v4[123] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LicenseUtilities.Batch();
  v4[124] = v7;
  v4[125] = *(void *)(v7 - 8);
  v4[126] = swift_task_alloc();
  v4[127] = swift_task_alloc();
  v4[128] = swift_task_alloc();
  v4[129] = swift_task_alloc();
  v4[130] = swift_task_alloc();
  sub_1000172F8(&qword_1006648B0);
  v4[131] = swift_task_alloc();
  v4[132] = type metadata accessor for ConfigurationBag.LicenseConfiguration(0);
  v4[133] = swift_task_alloc();
  sub_1000172F8(&qword_1006648B8);
  v4[134] = swift_task_alloc();
  v4[135] = swift_task_alloc();
  v4[136] = swift_task_alloc();
  v4[137] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ConfigurationBag(0);
  v4[138] = v8;
  v4[139] = *(void *)(v8 - 8);
  v4[140] = swift_task_alloc();
  v4[141] = swift_task_alloc();
  v4[142] = swift_task_alloc();
  v4[143] = swift_task_alloc();
  v4[144] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v4[145] = v9;
  v4[146] = *(void *)(v9 - 8);
  v4[147] = swift_task_alloc();
  v4[148] = swift_task_alloc();
  v4[149] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v4[150] = swift_task_alloc();
  v4[151] = swift_task_alloc();
  v4[152] = swift_task_alloc();
  v4[153] = swift_task_alloc();
  v4[154] = swift_task_alloc();
  v4[155] = swift_task_alloc();
  v4[156] = swift_task_alloc();
  return _swift_task_switch(sub_10048A2B4, 0, 0);
}

uint64_t sub_10048A2B4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 896) + 16);
  *(void *)(v0 + 1256) = v1;
  if (!v1)
  {
    Swift::String v4 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  uint64_t v126 = (long long *)(v0 + 440);
  uint64_t v127 = v0 + 560;
  unint64_t v134 = (uint64_t *)(v0 + 816);
  char v130 = (void **)(v0 + 832);
  uint64_t v129 = (void **)(v0 + 864);
  char v128 = (void **)(v0 + 872);
  *(_DWORD *)(v0 + 1552) = enum case for LogKey.Prefix.undefined(_:);
  uint64_t v2 = (char *)(v0 + 1556);
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  Swift::String v4 = _swiftEmptyArrayStorage;
  do
  {
    *(void *)(v0 + 1280) = v4;
    *(void *)(v0 + 1272) = v3;
    *(void *)(v0 + 1264) = &_swiftEmptyDictionarySingleton;
    uint64_t v11 = *(void *)(v0 + 896) + 24 * v3;
    uint64_t v12 = *(void *)(v11 + 32);
    *(void *)(v0 + 1288) = v12;
    id v13 = *(void **)(v11 + 40);
    *(void *)(v0 + 1296) = v13;
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 48);
    *uint64_t v2 = v11;
    if (v11 == 1)
    {
      id v14 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      NSString v15 = String._bridgeToObjectiveC()();
      sub_1001C3EC0(v12, (uint64_t)v13, 1);
      void *v130 = 0;
      id v16 = [v14 initWithBundleIdentifier:v15 allowPlaceholder:0 error:v130];

      uint64_t v17 = *v130;
      if (!v16)
      {
        id v18 = v17;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        unint64_t v20 = v19;
        *(void *)(v0 + 800) = 0;
        *(void *)(v0 + 808) = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 784) = 0x20746F6E20707041;
        *(void *)(v0 + 792) = 0xEF2820646E756F66;
        v21._uint64_t countAndFlagsBits = v12;
        v21._object = v13;
        String.append(_:)(v21);
        v22._uint64_t countAndFlagsBits = 41;
        v22._object = (void *)0xE100000000000000;
        String.append(_:)(v22);
        uint64_t v23 = *(void *)(v0 + 784);
        uint64_t v24 = *(void *)(v0 + 792);
        *unint64_t v20 = 0x6C6177656E6572;
        v20[1] = 0xE700000000000000;
        v20[2] = v23;
        v20[3] = v24;
LABEL_19:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_50;
      }
    }
    else
    {
      id v25 = objc_allocWithZone((Class)LSApplicationRecord);
      void *v129 = 0;
      id v26 = [v25 initWithStoreItemIdentifier:v12 error:v129];
      uint64_t v17 = *v129;
      if (!v26)
      {
        id v39 = v17;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        uint64_t v41 = v40;
        *(void *)(v0 + 720) = 0;
        *(void *)(v0 + 728) = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 752) = 0x20746F6E20707041;
        *(void *)(v0 + 760) = 0xEF2820646E756F66;
        *(void *)(v0 + 888) = v12;
        v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._uint64_t countAndFlagsBits = 41;
        v43._object = (void *)0xE100000000000000;
        String.append(_:)(v43);
        uint64_t v44 = *(void *)(v0 + 752);
        uint64_t v45 = *(void *)(v0 + 760);
        void *v41 = 0x6C6177656E6572;
        v41[1] = 0xE700000000000000;
        v41[2] = v44;
        v41[3] = v45;
        goto LABEL_19;
      }
      id v16 = v26;
    }
    *(void *)(v0 + 1304) = v16;
    uint64_t v27 = *(void *)(v0 + 920);
    id v28 = v17;
    if (v27)
    {
      swift_bridgeObjectRetain();
      id v29 = [v16 iTunesMetadata];
      id v30 = [v29 distributorInfo];

      id v31 = [v30 distributorID];
      uint64_t v32 = *(void *)(v0 + 920);
      if (!v31)
      {
        swift_bridgeObjectRelease();
LABEL_21:
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        *uint64_t v46 = 0x6C6177656E6572;
        v46[1] = 0xE700000000000000;
        v46[2] = 0x20746F6E20707041;
        unint64_t v47 = 0xED0000646E756F66;
LABEL_40:
        v46[3] = v47;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        goto LABEL_50;
      }
      uint64_t v33 = *(void *)(v0 + 912);
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      if (v34 == v33 && v32 == v36)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0) {
          goto LABEL_21;
        }
      }
    }
    id v48 = [v16 iTunesMetadata];
    id v49 = [v48 distributorInfo];

    id v50 = [v49 distributorID];
    if (!v50) {
      goto LABEL_39;
    }
    uint64_t v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;

    id v55 = [v16 bundleIdentifier];
    if (!v55)
    {
LABEL_30:
      *(void *)(v0 + 464) = &type metadata for NativeDistributor;
      unint64_t v62 = sub_1002F9EF8();
      uint64_t v2 = (char *)(v0 + 1556);
      goto LABEL_34;
    }
    uint64_t v56 = v55;
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;

    if (v52 == v57 && v54 == v59)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v61 & 1) == 0) {
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    id v63 = [v49 domain];
    uint64_t v2 = (char *)(v0 + 1556);
    if (!v63)
    {
LABEL_39:

      *(void *)(v0 + 472) = 0;
      *uint64_t v126 = 0u;
      *(_OWORD *)(v0 + 456) = 0u;
      sub_10001729C((uint64_t)v126, &qword_10065D3A0);
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      *uint64_t v46 = 0x6C6177656E6572;
      v46[1] = 0xE700000000000000;
      v46[2] = 0xD000000000000014;
      unint64_t v47 = 0x80000001005BFF30;
      goto LABEL_40;
    }
    uint64_t v64 = v63;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v65;

    *(void *)(v0 + 464) = &type metadata for WebDistributor;
    unint64_t v62 = sub_1002BEA38();
LABEL_34:
    *(void *)(v0 + 472) = v62;

    *(void *)(v0 + 440) = v52;
    *(void *)(v0 + 448) = v54;
    sub_10018B164(v126, v127);
    id v66 = [v16 iTunesMetadata];
    id v67 = [v66 distributorInfo];

    id v68 = [v67 accountID];
    if (!v68)
    {
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      void *v81 = 0x6C6177656E6572;
      v81[1] = 0xE700000000000000;
      v81[2] = 0xD000000000000013;
      v81[3] = 0x80000001005BFF50;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      uint64_t v82 = v0 + 560;
LABEL_43:
      sub_100014524(v82);
      goto LABEL_50;
    }
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;

    *(void *)(v0 + 1312) = v69;
    *(void *)(v0 + 1320) = v71;
    id v72 = [v16 bundleIdentifier];
    if (!v72)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      *uint64_t v83 = 0x6C6177656E6572;
      v83[1] = 0xE700000000000000;
      v83[2] = 0xD000000000000013;
      v83[3] = 0x80000001005BFF70;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      uint64_t v82 = v0 + 560;
      goto LABEL_43;
    }
    uint64_t v73 = v72;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    *(void *)(v0 + 1328) = v74;
    *(void *)(v0 + 1336) = v76;
    sub_10019B17C(v127, v0 + 360);
    sub_1000172F8(&qword_10065C450);
    if (swift_dynamicCast())
    {
      uint64_t countAndFlagsBits = *(void *)(v0 + 736);
      object = *(void **)(v0 + 744);
      goto LABEL_71;
    }
    id v77 = [v16 iTunesMetadata];
    id v78 = [v77 distributorInfo];

    id v79 = [v78 sourceURL];
    if (v79)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v80 = 0;
    }
    else
    {
      uint64_t v80 = 1;
    }
    uint64_t v84 = *(void *)(v0 + 1248);
    uint64_t v85 = *(void *)(v0 + 1240);
    uint64_t v86 = *(void *)(v0 + 1168);
    uint64_t v87 = *(void *)(v0 + 1160);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v85, v80, 1, v87);
    sub_10026400C(v85, v84);
    int v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v84, 1, v87);
    uint64_t v89 = *(void *)(v0 + 1248);
    if (!v88)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
      sub_10001729C(v89, &qword_10065C3C0);
      Swift::String_optional v90 = URL.host(percentEncoded:)(1);
      if (!v90.value._object)
      {
        (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      uint64_t countAndFlagsBits = v90.value._countAndFlagsBits;
      object = v90.value._object;
      uint64_t v117 = URL.port.getter();
      if ((v118 & 1) == 0)
      {
        uint64_t v119 = v117;
        *(Swift::String_optional *)(v0 + 768) = v90;
        v120._uint64_t countAndFlagsBits = 58;
        v120._object = (void *)0xE100000000000000;
        String.append(_:)(v120);
        *(void *)(v0 + 856) = v119;
        v121._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v121);
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = *(void *)(v0 + 768);
        object = *(void **)(v0 + 776);
      }
      (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
LABEL_71:
      *(void *)(v0 + 1352) = object;
      *(void *)(v0 + 1344) = countAndFlagsBits;
      uint64_t v122 = swift_task_alloc();
      *(void *)(v0 + 1360) = v122;
      *(void *)(v122 + 16) = v74;
      *(void *)(v122 + 24) = v76;
      uint64_t v123 = swift_task_alloc();
      *(void *)(v0 + 1368) = v123;
      *(void *)(v123 + 16) = sub_10049A624;
      *(void *)(v123 + 24) = v122;
      uint64_t v124 = dword_100660778;
      uint64_t v125 = (void *)swift_task_alloc();
      *(void *)(v0 + 1376) = v125;
      *uint64_t v125 = v0;
      v125[1] = sub_10048B75C;
      return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v124))((uint64_t)sub_10049A654, v123);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v89, &qword_10065C3C0);
LABEL_49:
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v91 = 0x6C6177656E6572;
    v91[1] = 0xE700000000000000;
    v91[2] = 0xD000000000000010;
    v91[3] = 0x80000001005BFF90;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_100014524(v127);
    uint64_t v2 = (char *)(v0 + 1556);
LABEL_50:
    char v92 = *v2;
    uint64_t v93 = *(void *)(v0 + 1296);
    uint64_t v94 = *(void *)(v0 + 1288);
    static Logger.ald.getter();
    swift_errorRetain();
    sub_1001C3ED0(v94, v93, v92);
    swift_errorRetain();
    char v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      os_log_type_t v133 = v96;
      uint64_t v97 = swift_slowAlloc();
      char v135 = (void *)swift_slowAlloc();
      *unint64_t v134 = swift_slowAlloc();
      *(_DWORD *)uint64_t v97 = 138412802;
      if (qword_10065B150 != -1) {
        swift_once();
      }
      TaskLocal.get()();
      uint64_t v98 = *(void *)(v0 + 608);
      if (!v98) {
        goto LABEL_55;
      }
      swift_release();
      swift_release();
      swift_release();
      os_unfair_lock_lock((os_unfair_lock_t)(v98 + 24));
      sub_100006250((void **)(v98 + 16), v128);
      os_unfair_lock_unlock((os_unfair_lock_t)(v98 + 24));
      uint64_t v99 = (uint64_t)*v128;
      swift_release();
      uint64_t v2 = (char *)(v0 + 1556);
      if (!v99)
      {
LABEL_55:
        (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
        id v100 = objc_allocWithZone((Class)type metadata accessor for LogKey());
        uint64_t v99 = LogKey.init(prefix:)();
      }
      int v101 = *v2;
      *(void *)(v97 + 4) = v99;
      *char v135 = v99;
      *(_WORD *)(v97 + 12) = 2082;
      if (v101 == 1)
      {
        uint64_t v102 = *(void *)(v0 + 1296);
        swift_bridgeObjectRetain();
        uint64_t v103 = *(void *)(v0 + 1288);
        char v104 = 1;
        uint64_t v105 = v103;
        unint64_t v106 = v102;
      }
      else
      {
        *(void *)(v0 + 848) = *(void *)(v0 + 1288);
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v106 = v107;
        char v104 = *v2;
        uint64_t v102 = *(void *)(v0 + 1296);
        uint64_t v103 = *(void *)(v0 + 1288);
      }
      uint64_t v108 = *(void *)(v0 + 960);
      uint64_t v131 = *(void *)(v0 + 952);
      uint64_t v132 = *(void *)(v0 + 968);
      *(void *)(v97 + 14) = sub_1000143F4(v105, v106, v134);
      swift_bridgeObjectRelease();
      sub_1001C3EC0(v103, v102, v104);
      sub_1001C3EC0(v103, v102, v104);
      *(_WORD *)(v97 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v109 = *(void *)(*(void *)(v0 + 688) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v109 + 16))();
      uint64_t v110 = String.init<A>(describing:)();
      unint64_t v112 = v111;
      swift_task_dealloc();
      *(void *)(v97 + 24) = sub_1000143F4(v110, v112, v134);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v132, v131);
    }
    else
    {
      char v5 = *v2;
      uint64_t v6 = *(void *)(v0 + 1296);
      uint64_t v7 = *(void *)(v0 + 1288);
      uint64_t v8 = *(void *)(v0 + 968);
      uint64_t v9 = *(void *)(v0 + 960);
      uint64_t v10 = *(void *)(v0 + 952);
      swift_errorRelease();
      sub_1001C3EC0(v7, v6, v5);
      sub_1001C3EC0(v7, v6, v5);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
    Swift::String v4 = *(void **)(v0 + 1280);
    uint64_t v3 = *(void *)(v0 + 1272) + 1;
    uint64_t v2 = (char *)(v0 + 1556);
  }
  while (v3 != *(void *)(v0 + 1256));
  swift_bridgeObjectRelease();
  if (v4[2]) {
    goto LABEL_62;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  Swift::String v4 = 0;
LABEL_62:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v113 = *(uint64_t (**)(void *))(v0 + 8);
  return v113(v4);
}

uint64_t sub_10048B75C(uint64_t a1, char a2)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 1384) = a1;
  *(unsigned char *)(v4 + 1557) = a2;
  *(void *)(v4 + 1392) = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    char v5 = sub_100491E18;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    char v5 = sub_10048B924;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10048B924()
{
  uint64_t v1 = *(void *)(v0 + 1352);
  uint64_t v2 = *(void **)(v0 + 1320);
  uint64_t v282 = *(void *)(v0 + 1312);
  uint64_t v284 = *(void *)(v0 + 1344);
  v291 = *(void **)(v0 + 1304);
  uint64_t v295 = *(void *)(v0 + 1264);
  uint64_t v3 = *(void *)(v0 + 1168);
  uint64_t v287 = *(void *)(v0 + 1232);
  uint64_t v290 = *(void *)(v0 + 1160);
  sub_10019B17C(v0 + 560, v0 + 240);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)sub_1005163F0();
  id v5 = [self ephemeralSessionConfiguration];
  [v5 setHTTPShouldSetCookies:0];
  [v5 setHTTPCookieAcceptPolicy:1];
  [v5 setRequestCachePolicy:1];
  sub_100373694(1);
  id v6 = [self sessionWithConfiguration:v5];

  type metadata accessor for PlainHTTP();
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 24) = 0;
  *(void *)(v7 + 16) = v6;
  uint64_t v8 = type metadata accessor for DecoratedHTTP();
  *(void *)(v0 + 1400) = v8;
  swift_allocObject();
  uint64_t v280 = sub_1002C20CC(v7, v0 + 240, v282, (unint64_t)v2, 0, v4);
  *(void *)(v0 + 1408) = v280;
  *(void *)(v0 + 704) = v284;
  *(void *)(v0 + 712) = v1;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 45;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + 584);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v281 = v0 + 560;
  sub_10018AC60((void *)(v0 + 560), v10);
  v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 45;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = v282;
  v14._object = v2;
  String.append(_:)(v14);
  uint64_t v15 = *(void *)(v0 + 704);
  *(void *)(v0 + 1416) = v15;
  uint64_t v16 = *(void *)(v0 + 712);
  *(void *)(v0 + 1424) = v16;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  *(void *)(v0 + 1432) = v17;
  *(void *)(v0 + 1440) = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v17(v287, 1, 1, v290);
  id v18 = [v291 iTunesMetadata];
  id v19 = [v18 storeItemIdentifier];

  *(void *)(v0 + 880) = v19;
  uint64_t v293 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 1448) = v293;
  *(void *)(v0 + 1456) = v20;
  if (!*(void *)(v295 + 16))
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1112) + 56);
    v27(*(void *)(v0 + 1096), 1, 1, *(void *)(v0 + 1104));
LABEL_7:
    *(void *)(v0 + 1464) = v27;
    sub_10001729C(*(void *)(v0 + 1096), &qword_1006648B8);
    *(void *)(v0 + 344) = v8;
    *(void *)(v0 + 352) = &off_10063FB70;
    *(void *)(v0 + 320) = v280;
    swift_retain();
    uint64_t v32 = sub_1005163F0();
    *(void *)(v0 + 1472) = v32;
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 1480) = v33;
    *uint64_t v33 = v0;
    v33[1] = sub_10048DF28;
    uint64_t v34 = *(void *)(v0 + 1352);
    uint64_t v35 = *(void *)(v0 + 1344);
    uint64_t v36 = *(void *)(v0 + 1080);
    return sub_1002CDB18(v36, v35, v34, v0 + 320, v32);
  }
  unint64_t v21 = v20;
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_100016D20(v15, v16);
  if (v23)
  {
    uint64_t v24 = *(void *)(v0 + 1112);
    uint64_t v25 = *(void *)(v0 + 1104);
    uint64_t v26 = *(void *)(v0 + 1096);
    sub_10049A770(*(void *)(*(void *)(v0 + 1264) + 56) + *(void *)(v24 + 72) * v22, v26, type metadata accessor for ConfigurationBag);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v27(v26, 0, 1, v25);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1112) + 56);
    v27(*(void *)(v0 + 1096), 1, 1, *(void *)(v0 + 1104));
  }
  uint64_t v28 = *(void *)(v0 + 1112);
  uint64_t v29 = *(void *)(v0 + 1104);
  uint64_t v30 = *(void *)(v0 + 1096);
  swift_bridgeObjectRelease();
  id v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v31(v30, 1, v29) == 1) {
    goto LABEL_7;
  }
  uint64_t v38 = *(void *)(v0 + 1152);
  uint64_t v39 = *(void *)(v0 + 1104);
  uint64_t v40 = *(void *)(v0 + 1096);
  swift_bridgeObjectRelease();
  sub_10049A708(v40, v38, type metadata accessor for ConfigurationBag);
  uint64_t v41 = *(void *)(v38 + *(int *)(v39 + 36));
  if (!v41 || !*(void *)(v41 + 16))
  {
    v27(*(void *)(v0 + 1088), 1, 1, *(void *)(v0 + 1104));
LABEL_17:
    uint64_t v47 = *(void *)(v0 + 1224);
    uint64_t v48 = *(void *)(v0 + 1168);
    uint64_t v49 = *(void *)(v0 + 1160);
    uint64_t v50 = *(void *)(v0 + 1152);
    uint64_t v51 = *(void *)(v0 + 1144);
    uint64_t v52 = *(void *)(v0 + 1104);
    uint64_t v53 = *(void *)(v0 + 1056);
    sub_10001729C(*(void *)(v0 + 1088), &qword_1006648B8);
    sub_10049A770(v50, v51, type metadata accessor for ConfigurationBag);
    sub_10001893C(v51 + *(int *)(v52 + 20) + *(int *)(v53 + 20), v47);
    sub_10049A7D8(v51, type metadata accessor for ConfigurationBag);
    BOOL v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v47, 1, v49) != 1;
    sub_10001729C(v47, &qword_10065C3C0);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  unint64_t v42 = sub_100016D20(v293, v21);
  if (v43)
  {
    sub_10049A770(*(void *)(v41 + 56) + *(void *)(*(void *)(v0 + 1112) + 72) * v42, *(void *)(v0 + 1088), type metadata accessor for ConfigurationBag);
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = 1;
  }
  uint64_t v45 = *(void *)(v0 + 1104);
  uint64_t v46 = *(void *)(v0 + 1088);
  v27(v46, v44, 1, v45);
  swift_bridgeObjectRelease();
  if (v31(v46, 1, v45) == 1) {
    goto LABEL_17;
  }
  uint64_t v100 = *(void *)(v0 + 1152);
  uint64_t v101 = *(void *)(v0 + 1144);
  sub_10001729C(*(void *)(v0 + 1088), &qword_1006648B8);
  sub_10049A770(v100, v101, type metadata accessor for ConfigurationBag);
  sub_10049A7D8(v101, type metadata accessor for ConfigurationBag);
  BOOL v54 = 0;
LABEL_18:
  v276 = (long long *)(v0 + 440);
  v292 = (uint64_t *)(v0 + 816);
  v277 = (void **)(v0 + 864);
  v278 = (void **)(v0 + 832);
  uint64_t v55 = *(void *)(v0 + 1232);
  uint64_t v56 = *(void *)(v0 + 1216);
  v279 = (void **)(v0 + 872);
  uint64_t v57 = *(void *)(v0 + 1152);
  uint64_t v58 = *(void *)(v0 + 1136);
  uint64_t v59 = *(void *)(v0 + 1104);
  uint64_t v60 = *(void *)(v0 + 1064);
  uint64_t v61 = *(void *)(v0 + 1056);
  sub_1002CE45C(v293, v21, v58);
  sub_10049A770(v58 + *(int *)(v59 + 20), v60, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  sub_10049A7D8(v58, type metadata accessor for ConfigurationBag);
  sub_10001893C(v60 + *(int *)(v61 + 32), v56);
  sub_10049A7D8(v60, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  swift_bridgeObjectRelease();
  sub_10049A7D8(v57, type metadata accessor for ConfigurationBag);
  sub_10001729C(v55, &qword_10065C3C0);
  sub_10026400C(v56, v55);
  uint64_t v62 = *(void *)(v0 + 1392);
  uint64_t v294 = *(void *)(v0 + 1264);
  *(void *)(v0 + 1496) = v294;
  if (*(unsigned char *)(v0 + 1557))
  {
    uint64_t v96 = sub_1004FC2F8();
    if (v97 >> 60 != 15)
    {
      uint64_t v98 = v96;
      unint64_t v99 = v97;
      if (qword_10065B130 != -1) {
        swift_once();
      }
      sub_1004E3CC0(v98, v99, v0 + 480);
      if (v62)
      {
        swift_errorRelease();
        sub_10018AE44(v98, v99);
      }
      else
      {
        id v63 = (uint64_t *)(v0 + 496);
        sub_10018AE44(v98, v99);
        if (v54) {
          goto LABEL_20;
        }
      }
    }
  }
  else
  {
    id v63 = (uint64_t *)(v0 + 1384);
    if (v54)
    {
LABEL_20:
      uint64_t v296 = *v63;
      uint64_t v64 = *(void *)(v0 + 1336);
      uint64_t v65 = *(void *)(v0 + 1328);
      id v66 = *(void **)(v0 + 1304);
      uint64_t v67 = *(void *)(v0 + 1280);
      sub_1001C3EC0(*(void *)(v0 + 1288), *(void *)(v0 + 1296), *(unsigned char *)(v0 + 1556));
      id v68 = [v66 iTunesMetadata];
      id v69 = [v68 storeItemIdentifier];

      id v70 = [v66 iTunesMetadata];
      id v71 = [v70 versionIdentifier];

      LOBYTE(v70) = [v66 isManagedAppDistributor];
      id v72 = [v66 localizedName];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      *(void *)(v0 + 112) = v65;
      *(void *)(v0 + 120) = v64;
      *(void *)(v0 + 128) = v69;
      *(void *)(v0 + 136) = v71;
      *(void *)(v0 + 144) = v296;
      *(unsigned char *)(v0 + 152) = (_BYTE)v70;
      *(void *)(v0 + 160) = v73;
      *(void *)(v0 + 168) = v75;
      uint64_t v273 = v67;
      uint64_t v76 = *(void *)(v67 + 16);
      if (!v76)
      {
        swift_bridgeObjectRetain();
LABEL_46:
        uint64_t v102 = 1;
        goto LABEL_58;
      }
      uint64_t v77 = *(void *)(v0 + 1000);
      uint64_t v78 = *(void *)(v0 + 1280)
          + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
      uint64_t v79 = *(void *)(v77 + 72);
      swift_bridgeObjectRetain_n();
      uint64_t v297 = v79;
      while (1)
      {
        uint64_t v80 = *(void *)(v0 + 1040);
        uint64_t v81 = *(void *)(v0 + 1032);
        sub_10049A770(v78, v80, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        sub_10049A770(v80, v81, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_10049A7D8(*(void *)(v0 + 1032), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        }
        else
        {
          uint64_t v82 = *(void *)(v0 + 1032);
          uint64_t v83 = *(void **)v82;
          if (*(void *)(*(void *)v82 + 40) == *(void *)(v0 + 1344)
            && *(void *)(*(void *)v82 + 48) == *(void *)(v0 + 1352))
          {
            sub_10019B17C(v281, v0 + 280);
LABEL_32:
            uint64_t v86 = v83[10];
            uint64_t v87 = v83[11];
            sub_10018AC60(v83 + 7, v86);
            uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 40))(v86, v87);
            uint64_t v90 = v89;
            uint64_t v91 = *(void *)(v0 + 304);
            uint64_t v92 = *(void *)(v0 + 312);
            sub_10018AC60((void *)(v0 + 280), v91);
            if (v88 == (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 40))(v91, v92) && v90 == v93)
            {
              swift_bridgeObjectRelease_n();
              swift_release();
              sub_100014524(v0 + 280);
LABEL_57:
              uint64_t v125 = *(void *)(v0 + 1048);
              uint64_t v126 = *(void *)(v0 + 1040);
              swift_bridgeObjectRelease();
              sub_10049A708(v126, v125, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
              uint64_t v102 = 0;
LABEL_58:
              uint64_t v127 = *(void *)(v0 + 1048);
              uint64_t v128 = *(void *)(v0 + 1000);
              uint64_t v129 = *(void *)(v0 + 992);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v127, v102, 1, v129);
              swift_bridgeObjectRelease();
              int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v127, 1, v129);
              uint64_t v131 = *(void *)(v0 + 1048);
              if (v130 == 1)
              {
                sub_10001729C(v131, &qword_1006648B0);
                goto LABEL_62;
              }
              sub_10049A708(v131, *(void *)(v0 + 1024), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                sub_10049A7D8(*(void *)(v0 + 1024), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
LABEL_62:
                uint64_t v132 = *(void *)(v0 + 1408);
                uint64_t v133 = *(void *)(v0 + 1400);
                uint64_t v288 = *(void *)(v0 + 1352);
                uint64_t v285 = *(void *)(v0 + 1344);
                uint64_t v274 = *(void *)(v0 + 1312);
                uint64_t v275 = *(void *)(v0 + 1320);
                uint64_t v134 = *(void *)(v0 + 1232);
                uint64_t v135 = *(void *)(v0 + 1216);
                uint64_t v136 = *(void **)(v0 + 1016);
                sub_10019B17C(v281, v0 + 520);
                sub_1000172F8(&qword_1006648C0);
                uint64_t inited = (_OWORD *)swift_initStackObject();
                inited[1] = xmmword_1005A3EC0;
                long long v138 = *(_OWORD *)(v0 + 160);
                long long v140 = *(_OWORD *)(v0 + 112);
                long long v139 = *(_OWORD *)(v0 + 128);
                inited[4] = *(_OWORD *)(v0 + 144);
                inited[5] = v138;
                inited[2] = v140;
                inited[3] = v139;
                Swift::Int v141 = sub_1003B98C0((uint64_t)inited);
                swift_setDeallocating();
                swift_arrayDestroy();
                sub_10001893C(v134, v135);
                *(void *)(v0 + 424) = v133;
                *(void *)(v0 + 432) = &off_10063FB70;
                *(void *)(v0 + 400) = v132;
                type metadata accessor for LicenseRenewalBatch();
                int v142 = (void *)swift_allocObject();
                v142[4] = &_swiftEmptySetSingleton;
                v142[2] = v274;
                v142[3] = v275;
                swift_beginAccess();
                v142[4] = v141;
                swift_retain_n();
                swift_bridgeObjectRelease();
                v142[5] = v285;
                v142[6] = v288;
                sub_10018B164((long long *)(v0 + 520), (uint64_t)(v142 + 7));
                sub_10018B164((long long *)(v0 + 400), (uint64_t)(v142 + 12));
                sub_10026400C(v135, (uint64_t)v142 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LicenseRenewalBatch_resolutionURL);
                swift_release();
                *uint64_t v136 = v142;
                swift_storeEnumTagMultiPayload();
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v144 = *(void *)(v0 + 1280);
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  unint64_t v144 = sub_10028FC84(0, *(void *)(v273 + 16) + 1, 1, *(void *)(v0 + 1280));
                }
                unint64_t v146 = *(void *)(v144 + 16);
                unint64_t v145 = *(void *)(v144 + 24);
                if (v146 >= v145 >> 1) {
                  unint64_t v144 = sub_10028FC84(v145 > 1, v146 + 1, 1, v144);
                }
                uint64_t v147 = *(void **)(v0 + 1304);
                uint64_t v148 = *(void *)(v0 + 1232);
                uint64_t v149 = *(void *)(v0 + 1016);
                uint64_t v150 = *(void *)(v0 + 1000);
                *(void *)(v144 + 16) = v146 + 1;
                sub_10049A708(v149, v144+ ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))+ *(void *)(v150 + 72) * v146, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
                swift_release();
                swift_release();

                sub_10001729C(v148, &qword_10065C3C0);
              }
              else
              {
                v151 = *(void **)(v0 + 1304);
                uint64_t v152 = *(void *)(v0 + 1232);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_beginAccess();
                sub_1003292E4(v0 + 176, (uint64_t *)(v0 + 112));
                swift_endAccess();
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10001729C(v152, &qword_10065C3C0);
                unint64_t v144 = *(void *)(v0 + 1280);
              }
              sub_100014524(v281);
              uint64_t v294 = *(void *)(v0 + 1496);
              while (2)
              {
                uint64_t v262 = *(void *)(v0 + 1272) + 1;
                if (v262 == *(void *)(v0 + 1256))
                {
                  swift_bridgeObjectRelease();
                  if (!*(void *)(v144 + 16))
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v144 = 0;
                  }
                  swift_bridgeObjectRelease();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  v263 = *(uint64_t (**)(unint64_t))(v0 + 8);
                  return v263(v144);
                }
                *(void *)(v0 + 1280) = v144;
                *(void *)(v0 + 1272) = v262;
                *(void *)(v0 + 1264) = v294;
                uint64_t v153 = *(void *)(v0 + 896) + 24 * v262;
                uint64_t v154 = *(void *)(v153 + 32);
                *(void *)(v0 + 1288) = v154;
                long long v155 = *(void **)(v153 + 40);
                *(void *)(v0 + 1296) = v155;
                LODWORD(v153) = *(unsigned __int8 *)(v153 + 48);
                *(unsigned char *)(v0 + 1556) = v153;
                if (v153 == 1)
                {
                  id v156 = objc_allocWithZone((Class)LSApplicationRecord);
                  swift_bridgeObjectRetain_n();
                  NSString v157 = String._bridgeToObjectiveC()();
                  sub_1001C3EC0(v154, (uint64_t)v155, 1);
                  *v278 = 0;
                  id v158 = [v156 initWithBundleIdentifier:v157 allowPlaceholder:0 error:v278];

                  uint64_t v159 = *v278;
                  if (!v158)
                  {
                    id v160 = v159;
                    _convertNSErrorToError(_:)();

                    swift_willThrow();
                    swift_errorRelease();
                    type metadata accessor for InternalError();
                    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                    swift_allocError();
                    uint64_t v162 = v161;
                    *(void *)(v0 + 800) = 0;
                    *(void *)(v0 + 808) = 0xE000000000000000;
                    _StringGuts.grow(_:)(18);
                    swift_bridgeObjectRelease();
                    *(void *)(v0 + 784) = 0x20746F6E20707041;
                    *(void *)(v0 + 792) = 0xEF2820646E756F66;
                    v163._uint64_t countAndFlagsBits = v154;
                    v163._object = v155;
                    String.append(_:)(v163);
                    v164._uint64_t countAndFlagsBits = 41;
                    v164._object = (void *)0xE100000000000000;
                    String.append(_:)(v164);
                    uint64_t v165 = *(void *)(v0 + 784);
                    uint64_t v166 = *(void *)(v0 + 792);
                    *uint64_t v162 = 0x6C6177656E6572;
                    v162[1] = 0xE700000000000000;
                    v162[2] = v165;
                    v162[3] = v166;
                    goto LABEL_83;
                  }
LABEL_74:
                  *(void *)(v0 + 1304) = v158;
                  uint64_t v169 = *(void *)(v0 + 920);
                  id v170 = v159;
                  if (!v169) {
                    goto LABEL_87;
                  }
                  swift_bridgeObjectRetain();
                  id v171 = [v158 iTunesMetadata];
                  id v172 = [v171 distributorInfo];

                  id v173 = [v172 distributorID];
                  uint64_t v174 = *(void *)(v0 + 920);
                  if (v173)
                  {
                    uint64_t v175 = *(void *)(v0 + 912);
                    uint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v178 = v177;

                    if (v176 == v175 && v174 == v178)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_87;
                    }
                    char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v180)
                    {
LABEL_87:
                      id v189 = objc_msgSend(v158, "iTunesMetadata", v273);
                      id v190 = [v189 distributorInfo];

                      id v191 = [v190 distributorID];
                      if (!v191) {
                        goto LABEL_95;
                      }
                      v192 = v191;
                      uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v195 = v194;

                      id v196 = [v158 bundleIdentifier];
                      if (!v196) {
                        goto LABEL_97;
                      }
                      v197 = v196;
                      uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v200 = v199;

                      if (v193 == v198 && v195 == v200)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_93;
                      }
                      char v201 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if (v201)
                      {
LABEL_93:
                        swift_bridgeObjectRelease();
                        id v202 = [v190 domain];
                        if (v202)
                        {
                          v203 = v202;
                          uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v195 = v204;

                          *(void *)(v0 + 464) = &type metadata for WebDistributor;
                          unint64_t v205 = sub_1002BEA38();
                          goto LABEL_98;
                        }
LABEL_95:

                        *(void *)(v0 + 472) = 0;
                        long long *v276 = 0u;
                        *(_OWORD *)(v0 + 456) = 0u;
                        sub_10001729C((uint64_t)v276, &qword_10065D3A0);
                        type metadata accessor for InternalError();
                        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                        swift_allocError();
                        void *v206 = 0x6C6177656E6572;
                        v206[1] = 0xE700000000000000;
                        v206[2] = 0xD000000000000014;
                        v206[3] = 0x80000001005BFF30;
LABEL_96:
                        swift_storeEnumTagMultiPayload();
                        swift_willThrow();
                      }
                      else
                      {
LABEL_97:
                        *(void *)(v0 + 464) = &type metadata for NativeDistributor;
                        unint64_t v205 = sub_1002F9EF8();
LABEL_98:
                        *(void *)(v0 + 472) = v205;

                        *(void *)(v0 + 440) = v193;
                        *(void *)(v0 + 448) = v195;
                        sub_10018B164(v276, v281);
                        id v207 = [v158 iTunesMetadata];
                        id v208 = [v207 distributorInfo];

                        id v209 = [v208 accountID];
                        if (v209)
                        {
                          uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v212 = v211;

                          *(void *)(v0 + 1312) = v210;
                          *(void *)(v0 + 1320) = v212;
                          id v213 = [v158 bundleIdentifier];
                          if (v213)
                          {
                            v214 = v213;
                            uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                            uint64_t v217 = v216;

                            *(void *)(v0 + 1328) = v215;
                            *(void *)(v0 + 1336) = v217;
                            sub_10019B17C(v281, v0 + 360);
                            sub_1000172F8(&qword_10065C450);
                            if (swift_dynamicCast())
                            {
                              uint64_t countAndFlagsBits = *(void *)(v0 + 736);
                              object = *(void **)(v0 + 744);
LABEL_135:
                              *(void *)(v0 + 1352) = object;
                              *(void *)(v0 + 1344) = countAndFlagsBits;
                              uint64_t v270 = swift_task_alloc();
                              *(void *)(v0 + 1360) = v270;
                              *(void *)(v270 + 16) = v215;
                              *(void *)(v270 + 24) = v217;
                              uint64_t v116 = swift_task_alloc();
                              *(void *)(v0 + 1368) = v116;
                              *(void *)(v116 + 16) = sub_10049A624;
                              *(void *)(v116 + 24) = v270;
                              uint64_t v271 = dword_100660778;
                              v272 = (void *)swift_task_alloc();
                              *(void *)(v0 + 1376) = v272;
                              void *v272 = v0;
                              v272[1] = sub_10048B75C;
                              uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v271);
                              Swift::String v120 = sub_10049A654;
                              goto LABEL_51;
                            }
                            id v218 = [v158 iTunesMetadata];
                            id v219 = [v218 distributorInfo];

                            id v220 = [v219 sourceURL];
                            uint64_t v221 = 1;
                            if (v220)
                            {
                              static URL._unconditionallyBridgeFromObjectiveC(_:)();

                              uint64_t v221 = 0;
                            }
                            uint64_t v222 = *(void *)(v0 + 1248);
                            uint64_t v223 = *(void *)(v0 + 1240);
                            uint64_t v224 = *(void *)(v0 + 1168);
                            uint64_t v225 = *(void *)(v0 + 1160);
                            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v224 + 56))(v223, v221, 1, v225);
                            sub_10026400C(v223, v222);
                            int v226 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v224 + 48))(v222, 1, v225);
                            uint64_t v227 = *(void *)(v0 + 1248);
                            if (v226)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              sub_10001729C(v227, &qword_10065C3C0);
                            }
                            else
                            {
                              (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
                              sub_10001729C(v227, &qword_10065C3C0);
                              Swift::String_optional v231 = URL.host(percentEncoded:)(1);
                              uint64_t countAndFlagsBits = v231.value._countAndFlagsBits;
                              if (v231.value._object)
                              {
                                object = v231.value._object;
                                uint64_t v265 = URL.port.getter();
                                if ((v266 & 1) == 0)
                                {
                                  uint64_t v267 = v265;
                                  *(Swift::String_optional *)(v0 + 768) = v231;
                                  v268._uint64_t countAndFlagsBits = 58;
                                  v268._object = (void *)0xE100000000000000;
                                  String.append(_:)(v268);
                                  *(void *)(v0 + 856) = v267;
                                  v269._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                                  String.append(_:)(v269);
                                  swift_bridgeObjectRelease();
                                  uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                                  object = *(void **)(v0 + 776);
                                }
                                (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                                goto LABEL_135;
                              }
                              (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                            }
                            type metadata accessor for InternalError();
                            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                            swift_allocError();
                            void *v233 = 0x6C6177656E6572;
                            v233[1] = 0xE700000000000000;
                            v233[2] = 0xD000000000000010;
                            v233[3] = 0x80000001005BFF90;
                          }
                          else
                          {
                            swift_bridgeObjectRelease();
                            type metadata accessor for InternalError();
                            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                            swift_allocError();
                            void *v230 = 0x6C6177656E6572;
                            v230[1] = 0xE700000000000000;
                            v230[2] = 0xD000000000000013;
                            v230[3] = 0x80000001005BFF70;
                          }
                          swift_storeEnumTagMultiPayload();
                          swift_willThrow();

LABEL_111:
                          uint64_t v229 = v0 + 560;
                        }
                        else
                        {
                          type metadata accessor for InternalError();
                          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                          swift_allocError();
                          void *v228 = 0x6C6177656E6572;
                          v228[1] = 0xE700000000000000;
                          v228[2] = 0xD000000000000013;
                          v228[3] = 0x80000001005BFF50;
                          swift_storeEnumTagMultiPayload();
                          swift_willThrow();

                          uint64_t v229 = v0 + 560;
                        }
                        sub_100014524(v229);
                      }
LABEL_113:
                      v234 = (char *)(v0 + 1556);
                      char v235 = *(unsigned char *)(v0 + 1556);
                      uint64_t v236 = *(void *)(v0 + 1296);
                      uint64_t v237 = *(void *)(v0 + 1288);
                      static Logger.ald.getter();
                      swift_errorRetain();
                      sub_1001C3ED0(v237, v236, v235);
                      swift_errorRetain();
                      v238 = Logger.logObject.getter();
                      os_log_type_t v239 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v238, v239))
                      {
                        os_log_type_t v289 = v239;
                        uint64_t v240 = swift_slowAlloc();
                        v298 = (void *)swift_slowAlloc();
                        uint64_t *v292 = swift_slowAlloc();
                        *(_DWORD *)uint64_t v240 = 138412802;
                        if (qword_10065B150 != -1) {
                          swift_once();
                        }
                        TaskLocal.get()();
                        uint64_t v241 = *(void *)(v0 + 608);
                        if (!v241) {
                          goto LABEL_118;
                        }
                        swift_release();
                        swift_release();
                        swift_release();
                        os_unfair_lock_lock((os_unfair_lock_t)(v241 + 24));
                        sub_100006250((void **)(v241 + 16), v279);
                        os_unfair_lock_unlock((os_unfair_lock_t)(v241 + 24));
                        uint64_t v242 = (uint64_t)*v279;
                        swift_release();
                        if (!v242)
                        {
LABEL_118:
                          (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
                          id v243 = objc_allocWithZone((Class)type metadata accessor for LogKey());
                          uint64_t v242 = LogKey.init(prefix:)();
                        }
                        int v244 = *v234;
                        *(void *)(v240 + 4) = v242;
                        void *v298 = v242;
                        *(_WORD *)(v240 + 12) = 2082;
                        if (v244 == 1)
                        {
                          uint64_t v245 = *(void *)(v0 + 1296);
                          swift_bridgeObjectRetain();
                          uint64_t v246 = *(void *)(v0 + 1288);
                          char v247 = 1;
                          uint64_t v248 = v246;
                          unint64_t v249 = v245;
                        }
                        else
                        {
                          *(void *)(v0 + 848) = *(void *)(v0 + 1288);
                          uint64_t v248 = dispatch thunk of CustomStringConvertible.description.getter();
                          unint64_t v249 = v256;
                          char v247 = *v234;
                          uint64_t v245 = *(void *)(v0 + 1296);
                          uint64_t v246 = *(void *)(v0 + 1288);
                        }
                        uint64_t v257 = *(void *)(v0 + 960);
                        uint64_t v283 = *(void *)(v0 + 952);
                        uint64_t v286 = *(void *)(v0 + 968);
                        *(void *)(v240 + 14) = sub_1000143F4(v248, v249, v292);
                        swift_bridgeObjectRelease();
                        sub_1001C3EC0(v246, v245, v247);
                        sub_1001C3EC0(v246, v245, v247);
                        *(_WORD *)(v240 + 22) = 2082;
                        swift_getErrorValue();
                        uint64_t v258 = *(void *)(*(void *)(v0 + 688) - 8);
                        swift_task_alloc();
                        (*(void (**)(void))(v258 + 16))();
                        uint64_t v259 = String.init<A>(describing:)();
                        unint64_t v261 = v260;
                        swift_task_dealloc();
                        *(void *)(v240 + 24) = sub_1000143F4(v259, v261, v292);
                        swift_bridgeObjectRelease();
                        swift_errorRelease();
                        swift_errorRelease();
                        sub_1000172F8(&qword_10065DB10);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();

                        swift_errorRelease();
                        (*(void (**)(uint64_t, uint64_t))(v257 + 8))(v286, v283);
                      }
                      else
                      {
                        char v250 = *v234;
                        uint64_t v251 = *(void *)(v0 + 1296);
                        uint64_t v252 = *(void *)(v0 + 1288);
                        uint64_t v253 = *(void *)(v0 + 968);
                        uint64_t v254 = *(void *)(v0 + 960);
                        uint64_t v255 = *(void *)(v0 + 952);
                        swift_errorRelease();
                        sub_1001C3EC0(v252, v251, v250);
                        sub_1001C3EC0(v252, v251, v250);
                        swift_errorRelease();
                        swift_errorRelease();

                        (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v253, v255);
                      }
                      unint64_t v144 = *(void *)(v0 + 1280);
                      continue;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  type metadata accessor for InternalError();
                  sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                  swift_allocError();
                  *(void *)uint64_t v188 = 0x6C6177656E6572;
                  *(void *)(v188 + 8) = 0xE700000000000000;
                  strcpy((char *)(v188 + 16), "App not found");
                  *(_WORD *)(v188 + 30) = -4864;
                  goto LABEL_96;
                }
                break;
              }
              id v167 = objc_allocWithZone((Class)LSApplicationRecord);
              *v277 = 0;
              id v168 = [v167 initWithStoreItemIdentifier:v154 error:v277];
              uint64_t v159 = *v277;
              if (v168)
              {
                id v158 = v168;
                goto LABEL_74;
              }
              id v181 = v159;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              type metadata accessor for InternalError();
              sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
              swift_allocError();
              uint64_t v183 = v182;
              *(void *)(v0 + 720) = 0;
              *(void *)(v0 + 728) = 0xE000000000000000;
              _StringGuts.grow(_:)(18);
              swift_bridgeObjectRelease();
              *(void *)(v0 + 752) = 0x20746F6E20707041;
              *(void *)(v0 + 760) = 0xEF2820646E756F66;
              *(void *)(v0 + 888) = v154;
              v184._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v184);
              swift_bridgeObjectRelease();
              v185._uint64_t countAndFlagsBits = 41;
              v185._object = (void *)0xE100000000000000;
              String.append(_:)(v185);
              uint64_t v186 = *(void *)(v0 + 752);
              uint64_t v187 = *(void *)(v0 + 760);
              *uint64_t v183 = 0x6C6177656E6572;
              v183[1] = 0xE700000000000000;
              v183[2] = v186;
              v183[3] = v187;
LABEL_83:
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              goto LABEL_113;
            }
            char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            sub_100014524(v0 + 280);
            uint64_t v79 = v297;
            if (v95) {
              goto LABEL_57;
            }
            goto LABEL_23;
          }
          char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_10019B17C(v281, v0 + 280);
          if (v85) {
            goto LABEL_32;
          }
          swift_release();
          sub_100014524(v0 + 280);
        }
LABEL_23:
        sub_10049A7D8(*(void *)(v0 + 1040), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        v78 += v79;
        if (!--v76)
        {
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
      }
    }
  }
  uint64_t v103 = *(void **)(v0 + 1304);
  swift_bridgeObjectRelease();
  id v104 = [v103 iTunesMetadata];
  id v105 = [v104 distributorInfo];

  id v106 = [v105 sourceURL];
  unint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1432);
  uint64_t v108 = *(void *)(v0 + 1200);
  if (!v106)
  {
    v107(*(void *)(v0 + 1200), 1, 1, *(void *)(v0 + 1160));
    goto LABEL_55;
  }
  uint64_t v109 = *(void *)(v0 + 1176);
  uint64_t v110 = *(void *)(v0 + 1168);
  uint64_t v111 = *(void *)(v0 + 1160);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32);
  v112(v108, v109, v111);
  v107(v108, 0, 1, v111);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v108, 1, v111) == 1)
  {
LABEL_55:
    Swift::String v121 = *(void **)(v0 + 1304);
    uint64_t v122 = *(void *)(v0 + 1232);
    uint64_t v123 = *(void *)(v0 + 1200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v123, &qword_10065C3C0);
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v124 = 0x726961706572;
    v124[1] = 0xE600000000000000;
    v124[2] = 0xD000000000000011;
    v124[3] = 0x80000001005BFFB0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    sub_10001729C(v122, &qword_10065C3C0);
    goto LABEL_111;
  }
  uint64_t v113 = *(void *)(v0 + 1336);
  uint64_t v114 = *(void *)(v0 + 1328);
  v112(*(void *)(v0 + 1184), *(void *)(v0 + 1200), *(void *)(v0 + 1160));
  uint64_t v115 = swift_task_alloc();
  *(void *)(v0 + 1504) = v115;
  *(void *)(v115 + 16) = v114;
  *(void *)(v115 + 24) = v113;
  uint64_t v116 = swift_task_alloc();
  *(void *)(v0 + 1512) = v116;
  *(void *)(v116 + 16) = sub_10049A69C;
  *(void *)(v116 + 24) = v115;
  uint64_t v117 = dword_100660770;
  char v118 = (void *)swift_task_alloc();
  *(void *)(v0 + 1520) = v118;
  *char v118 = v0;
  v118[1] = sub_100490304;
  uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660770 + v117);
  Swift::String v120 = sub_10049A6C8;
LABEL_51:
  return v119((uint64_t)v120, v116);
}

uint64_t sub_10048DF28()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void **)(v2 + 1472);
    swift_errorRelease();

    uint64_t v4 = sub_1004932F8;
  }
  else
  {

    sub_100014524(v2 + 320);
    uint64_t v4 = sub_10048E094;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10048E094()
{
  uint64_t v261 = v0 + 560;
  uint64_t v1 = *(void **)(v0 + 1304);
  uint64_t v2 = *(void *)(v0 + 1128);
  uint64_t v3 = *(void *)(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 1080);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464))(v4, 0, 1, v3);
  sub_10049A708(v4, v2, type metadata accessor for ConfigurationBag);
  id v5 = [v1 iTunesMetadata];
  id v6 = [v5 storeItemIdentifier];

  *(void *)(v0 + 840) = v6;
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v9 = *(void *)(v2 + *(int *)(v3 + 36));
  if (v9 && *(void *)(v9 + 16) && (unint64_t v10 = sub_100016D20(v7, v8), (v11 & 1) != 0))
  {
    Swift::String v12 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
    uint64_t v13 = *(void *)(v0 + 1128);
    uint64_t v14 = *(void *)(v0 + 1120);
    uint64_t v15 = *(void *)(v0 + 1104);
    uint64_t v16 = *(void *)(v0 + 1072);
    sub_10049A770(*(void *)(v9 + 56) + *(void *)(*(void *)(v0 + 1112) + 72) * v10, v16, type metadata accessor for ConfigurationBag);
    v12(v16, 0, 1, v15);
    sub_10001729C(v16, &qword_1006648B8);
    swift_bridgeObjectRelease();
    sub_10049A770(v13, v14, type metadata accessor for ConfigurationBag);
    sub_10049A7D8(v14, type metadata accessor for ConfigurationBag);
    BOOL v254 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 1208);
    uint64_t v18 = *(void *)(v0 + 1168);
    uint64_t v19 = *(void *)(v0 + 1160);
    uint64_t v20 = *(void *)(v0 + 1128);
    uint64_t v21 = *(void *)(v0 + 1120);
    uint64_t v22 = *(void *)(v0 + 1104);
    uint64_t v23 = *(void *)(v0 + 1072);
    uint64_t v24 = *(void *)(v0 + 1056);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1464))(v23, 1, 1, v22);
    sub_10001729C(v23, &qword_1006648B8);
    swift_bridgeObjectRelease();
    sub_10049A770(v20, v21, type metadata accessor for ConfigurationBag);
    sub_10001893C(v21 + *(int *)(v22 + 20) + *(int *)(v24 + 20), v17);
    sub_10049A7D8(v21, type metadata accessor for ConfigurationBag);
    BOOL v254 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v17, 1, v19) != 1;
    sub_10001729C(v17, &qword_10065C3C0);
  }
  uint64_t v248 = (long long *)(v0 + 440);
  unint64_t v25 = *(void *)(v0 + 1456);
  uint64_t v258 = (uint64_t *)(v0 + 816);
  uint64_t v26 = *(void *)(v0 + 1448);
  unint64_t v249 = (void **)(v0 + 864);
  char v250 = (void **)(v0 + 832);
  uint64_t v27 = *(void *)(v0 + 1424);
  uint64_t v28 = *(void *)(v0 + 1416);
  uint64_t v29 = *(void *)(v0 + 1264);
  uint64_t v262 = *(void *)(v0 + 1232);
  uint64_t v259 = *(void *)(v0 + 1216);
  uint64_t v30 = *(void *)(v0 + 1136);
  uint64_t v31 = *(void *)(v0 + 1128);
  uint64_t v32 = *(void *)(v0 + 1104);
  uint64_t v33 = *(void *)(v0 + 1064);
  uint64_t v257 = *(void *)(v0 + 1056);
  sub_10049A770(v31, v30, type metadata accessor for ConfigurationBag);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10052A0FC(v30, v28, v27, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002CE45C(v26, v25, v30);
  sub_10049A770(v30 + *(int *)(v32 + 20), v33, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  sub_10049A7D8(v30, type metadata accessor for ConfigurationBag);
  sub_10001893C(v33 + *(int *)(v257 + 32), v259);
  sub_10049A7D8(v33, type metadata accessor for ConfigurationBag.LicenseConfiguration);
  swift_bridgeObjectRelease();
  sub_10049A7D8(v31, type metadata accessor for ConfigurationBag);
  sub_10001729C(v262, &qword_10065C3C0);
  sub_10026400C(v259, v262);
  uint64_t v35 = *(void *)(v0 + 1488);
  uint64_t v260 = v29;
  *(void *)(v0 + 1496) = v29;
  if (*(unsigned char *)(v0 + 1557))
  {
    uint64_t v69 = sub_1004FC2F8();
    if (v70 >> 60 != 15)
    {
      uint64_t v71 = v69;
      unint64_t v72 = v70;
      if (qword_10065B130 != -1) {
        swift_once();
      }
      sub_1004E3CC0(v71, v72, v0 + 480);
      if (v35)
      {
        swift_errorRelease();
        sub_10018AE44(v71, v72);
      }
      else
      {
        uint64_t v36 = (uint64_t *)(v0 + 496);
        sub_10018AE44(v71, v72);
        if (v254) {
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    uint64_t v36 = (uint64_t *)(v0 + 1384);
    if (v254)
    {
LABEL_8:
      uint64_t v263 = *v36;
      uint64_t v37 = *(void *)(v0 + 1336);
      uint64_t v38 = *(void *)(v0 + 1328);
      uint64_t v39 = *(void **)(v0 + 1304);
      uint64_t v40 = *(void *)(v0 + 1280);
      sub_1001C3EC0(*(void *)(v0 + 1288), *(void *)(v0 + 1296), *(unsigned char *)(v0 + 1556));
      id v41 = [v39 iTunesMetadata];
      id v42 = [v41 storeItemIdentifier];

      id v43 = [v39 iTunesMetadata];
      id v44 = [v43 versionIdentifier];

      LOBYTE(v43) = [v39 isManagedAppDistributor];
      id v45 = [v39 localizedName];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;

      *(void *)(v0 + 112) = v38;
      *(void *)(v0 + 120) = v37;
      *(void *)(v0 + 128) = v42;
      *(void *)(v0 + 136) = v44;
      *(void *)(v0 + 144) = v263;
      *(unsigned char *)(v0 + 152) = (_BYTE)v43;
      *(void *)(v0 + 160) = v46;
      *(void *)(v0 + 168) = v48;
      uint64_t v245 = v40;
      uint64_t v49 = *(void *)(v40 + 16);
      if (!v49)
      {
        swift_bridgeObjectRetain();
LABEL_33:
        uint64_t v73 = 1;
        goto LABEL_45;
      }
      uint64_t v50 = *(void *)(v0 + 1000);
      uint64_t v51 = *(void *)(v0 + 1280)
          + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      uint64_t v52 = *(void *)(v50 + 72);
      swift_bridgeObjectRetain_n();
      uint64_t v264 = v52;
      while (1)
      {
        uint64_t v53 = *(void *)(v0 + 1040);
        uint64_t v54 = *(void *)(v0 + 1032);
        sub_10049A770(v51, v53, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        sub_10049A770(v53, v54, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          sub_10049A7D8(*(void *)(v0 + 1032), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        }
        else
        {
          uint64_t v55 = *(void *)(v0 + 1032);
          uint64_t v56 = *(void **)v55;
          if (*(void *)(*(void *)v55 + 40) == *(void *)(v0 + 1344)
            && *(void *)(*(void *)v55 + 48) == *(void *)(v0 + 1352))
          {
            sub_10019B17C(v261, v0 + 280);
LABEL_20:
            uint64_t v59 = v56[10];
            uint64_t v60 = v56[11];
            sub_10018AC60(v56 + 7, v59);
            uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 40))(v59, v60);
            uint64_t v63 = v62;
            uint64_t v64 = *(void *)(v0 + 304);
            uint64_t v65 = *(void *)(v0 + 312);
            sub_10018AC60((void *)(v0 + 280), v64);
            if (v61 == (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 40))(v64, v65) && v63 == v66)
            {
              swift_bridgeObjectRelease_n();
              swift_release();
              sub_100014524(v0 + 280);
LABEL_44:
              uint64_t v97 = *(void *)(v0 + 1048);
              uint64_t v98 = *(void *)(v0 + 1040);
              swift_bridgeObjectRelease();
              sub_10049A708(v98, v97, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
              uint64_t v73 = 0;
LABEL_45:
              uint64_t v99 = *(void *)(v0 + 1048);
              uint64_t v100 = *(void *)(v0 + 1000);
              uint64_t v101 = *(void *)(v0 + 992);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v99, v73, 1, v101);
              swift_bridgeObjectRelease();
              int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v99, 1, v101);
              uint64_t v103 = *(void *)(v0 + 1048);
              uint64_t v104 = v0 + 560;
              if (v102 == 1)
              {
                sub_10001729C(v103, &qword_1006648B0);
                goto LABEL_49;
              }
              sub_10049A708(v103, *(void *)(v0 + 1024), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                sub_10049A7D8(*(void *)(v0 + 1024), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
LABEL_49:
                uint64_t v105 = *(void *)(v0 + 1408);
                uint64_t v106 = *(void *)(v0 + 1400);
                uint64_t v255 = *(void *)(v0 + 1352);
                uint64_t v252 = *(void *)(v0 + 1344);
                uint64_t v246 = *(void *)(v0 + 1312);
                uint64_t v247 = *(void *)(v0 + 1320);
                uint64_t v107 = *(void *)(v0 + 1232);
                uint64_t v108 = *(void *)(v0 + 1216);
                uint64_t v109 = *(void **)(v0 + 1016);
                sub_10019B17C(v261, v0 + 520);
                sub_1000172F8(&qword_1006648C0);
                uint64_t inited = (_OWORD *)swift_initStackObject();
                inited[1] = xmmword_1005A3EC0;
                long long v111 = *(_OWORD *)(v0 + 160);
                long long v113 = *(_OWORD *)(v0 + 112);
                long long v112 = *(_OWORD *)(v0 + 128);
                inited[4] = *(_OWORD *)(v0 + 144);
                inited[5] = v111;
                inited[2] = v113;
                inited[3] = v112;
                Swift::Int v114 = sub_1003B98C0((uint64_t)inited);
                swift_setDeallocating();
                swift_arrayDestroy();
                sub_10001893C(v107, v108);
                *(void *)(v0 + 424) = v106;
                *(void *)(v0 + 432) = &off_10063FB70;
                *(void *)(v0 + 400) = v105;
                type metadata accessor for LicenseRenewalBatch();
                uint64_t v115 = (void *)swift_allocObject();
                v115[4] = &_swiftEmptySetSingleton;
                v115[2] = v246;
                v115[3] = v247;
                swift_beginAccess();
                v115[4] = v114;
                swift_retain_n();
                swift_bridgeObjectRelease();
                v115[5] = v252;
                v115[6] = v255;
                sub_10018B164((long long *)(v0 + 520), (uint64_t)(v115 + 7));
                sub_10018B164((long long *)(v0 + 400), (uint64_t)(v115 + 12));
                sub_10026400C(v108, (uint64_t)v115 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LicenseRenewalBatch_resolutionURL);
                swift_release();
                *uint64_t v109 = v115;
                swift_storeEnumTagMultiPayload();
                swift_retain();
                char v116 = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v117 = *(void *)(v0 + 1280);
                if ((v116 & 1) == 0) {
                  unint64_t v117 = sub_10028FC84(0, *(void *)(v245 + 16) + 1, 1, *(void *)(v0 + 1280));
                }
                unint64_t v119 = *(void *)(v117 + 16);
                unint64_t v118 = *(void *)(v117 + 24);
                uint64_t v104 = v0 + 560;
                if (v119 >= v118 >> 1) {
                  unint64_t v117 = sub_10028FC84(v118 > 1, v119 + 1, 1, v117);
                }
                Swift::String v120 = *(void **)(v0 + 1304);
                uint64_t v121 = *(void *)(v0 + 1232);
                uint64_t v122 = *(void *)(v0 + 1016);
                uint64_t v123 = *(void *)(v0 + 1000);
                *(void *)(v117 + 16) = v119 + 1;
                sub_10049A708(v122, v117+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(void *)(v123 + 72) * v119, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
                swift_release();
                swift_release();

                sub_10001729C(v121, &qword_10065C3C0);
              }
              else
              {
                uint64_t v124 = *(void **)(v0 + 1304);
                uint64_t v125 = *(void *)(v0 + 1232);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_beginAccess();
                sub_1003292E4(v0 + 176, (uint64_t *)(v0 + 112));
                swift_endAccess();
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10001729C(v125, &qword_10065C3C0);
                unint64_t v117 = *(void *)(v0 + 1280);
              }
              sub_100014524(v104);
              uint64_t v260 = *(void *)(v0 + 1496);
              while (2)
              {
                uint64_t v234 = *(void *)(v0 + 1272) + 1;
                if (v234 == *(void *)(v0 + 1256))
                {
                  swift_bridgeObjectRelease();
                  if (!*(void *)(v117 + 16))
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v117 = 0;
                  }
                  swift_bridgeObjectRelease();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  swift_task_dealloc();
                  char v235 = *(uint64_t (**)(unint64_t))(v0 + 8);
                  return v235(v117);
                }
                *(void *)(v0 + 1280) = v117;
                *(void *)(v0 + 1272) = v234;
                *(void *)(v0 + 1264) = v260;
                uint64_t v126 = *(void *)(v0 + 896) + 24 * v234;
                uint64_t v127 = *(void *)(v126 + 32);
                *(void *)(v0 + 1288) = v127;
                uint64_t v128 = *(void **)(v126 + 40);
                *(void *)(v0 + 1296) = v128;
                int v129 = *(unsigned __int8 *)(v126 + 48);
                *(unsigned char *)(v0 + 1556) = v129;
                if (v129 == 1)
                {
                  id v130 = objc_allocWithZone((Class)LSApplicationRecord);
                  swift_bridgeObjectRetain_n();
                  NSString v131 = String._bridgeToObjectiveC()();
                  sub_1001C3EC0(v127, (uint64_t)v128, 1);
                  *char v250 = 0;
                  id v132 = [v130 initWithBundleIdentifier:v131 allowPlaceholder:0 error:v250];

                  uint64_t v133 = *v250;
                  uint64_t v134 = (void **)(v0 + 872);
                  if (!v132)
                  {
                    id v135 = v133;
                    _convertNSErrorToError(_:)();

                    swift_willThrow();
                    swift_errorRelease();
                    type metadata accessor for InternalError();
                    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                    swift_allocError();
                    uint64_t v137 = v136;
                    *(void *)(v0 + 800) = 0;
                    *(void *)(v0 + 808) = 0xE000000000000000;
                    _StringGuts.grow(_:)(18);
                    swift_bridgeObjectRelease();
                    *(void *)(v0 + 784) = 0x20746F6E20707041;
                    *(void *)(v0 + 792) = 0xEF2820646E756F66;
                    v138._uint64_t countAndFlagsBits = v127;
                    v138._object = v128;
                    String.append(_:)(v138);
                    v139._uint64_t countAndFlagsBits = 41;
                    v139._object = (void *)0xE100000000000000;
                    String.append(_:)(v139);
                    uint64_t v140 = *(void *)(v0 + 784);
                    uint64_t v141 = *(void *)(v0 + 792);
                    goto LABEL_70;
                  }
LABEL_61:
                  *(void *)(v0 + 1304) = v132;
                  uint64_t v144 = *(void *)(v0 + 920);
                  id v145 = v133;
                  if (!v144) {
                    goto LABEL_74;
                  }
                  swift_bridgeObjectRetain();
                  id v146 = [v132 iTunesMetadata];
                  id v147 = [v146 distributorInfo];

                  id v148 = [v147 distributorID];
                  uint64_t v149 = *(void *)(v0 + 920);
                  if (v148)
                  {
                    uint64_t v150 = *(void *)(v0 + 912);
                    uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v153 = v152;

                    if (v151 == v150 && v149 == v153)
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v134 = (void **)(v0 + 872);
                      goto LABEL_74;
                    }
                    char v155 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v134 = (void **)(v0 + 872);
                    if (v155)
                    {
LABEL_74:
                      id v161 = [v132 iTunesMetadata];
                      id v162 = [v161 distributorInfo];

                      id v163 = [v162 distributorID];
                      if (!v163) {
                        goto LABEL_82;
                      }
                      Swift::String v164 = v163;
                      uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v167 = v166;

                      id v168 = [v132 bundleIdentifier];
                      if (!v168) {
                        goto LABEL_84;
                      }
                      uint64_t v169 = v168;
                      uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v172 = v171;

                      if (v165 == v170 && v167 == v172)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_80;
                      }
                      char v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if (v173)
                      {
LABEL_80:
                        swift_bridgeObjectRelease();
                        id v174 = [v162 domain];
                        uint64_t v134 = (void **)(v0 + 872);
                        if (v174)
                        {
                          uint64_t v175 = v174;
                          uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v167 = v176;

                          *(void *)(v0 + 464) = &type metadata for WebDistributor;
                          unint64_t v177 = sub_1002BEA38();
                          goto LABEL_85;
                        }
LABEL_82:

                        *(void *)(v0 + 472) = 0;
                        *uint64_t v248 = 0u;
                        *(_OWORD *)(v0 + 456) = 0u;
                        sub_10001729C((uint64_t)v248, &qword_10065D3A0);
                        type metadata accessor for InternalError();
                        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                        swift_allocError();
                        void *v178 = 0x6C6177656E6572;
                        v178[1] = 0xE700000000000000;
                        v178[2] = 0xD000000000000014;
                        v178[3] = 0x80000001005BFF30;
LABEL_83:
                        swift_storeEnumTagMultiPayload();
                        swift_willThrow();
                      }
                      else
                      {
LABEL_84:
                        *(void *)(v0 + 464) = &type metadata for NativeDistributor;
                        unint64_t v177 = sub_1002F9EF8();
                        uint64_t v134 = (void **)(v0 + 872);
LABEL_85:
                        *(void *)(v0 + 472) = v177;

                        *(void *)(v0 + 440) = v165;
                        *(void *)(v0 + 448) = v167;
                        sub_10018B164(v248, v104);
                        id v179 = [v132 iTunesMetadata];
                        id v180 = [v179 distributorInfo];

                        id v181 = [v180 accountID];
                        if (v181)
                        {
                          uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v184 = v183;

                          *(void *)(v0 + 1312) = v182;
                          *(void *)(v0 + 1320) = v184;
                          id v185 = [v132 bundleIdentifier];
                          if (v185)
                          {
                            uint64_t v186 = v185;
                            uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                            uint64_t v189 = v188;

                            *(void *)(v0 + 1328) = v187;
                            *(void *)(v0 + 1336) = v189;
                            sub_10019B17C(v104, v0 + 360);
                            sub_1000172F8(&qword_10065C450);
                            if (swift_dynamicCast())
                            {
                              uint64_t countAndFlagsBits = *(void *)(v0 + 736);
                              object = *(void **)(v0 + 744);
LABEL_121:
                              *(void *)(v0 + 1352) = object;
                              *(void *)(v0 + 1344) = countAndFlagsBits;
                              uint64_t v242 = swift_task_alloc();
                              *(void *)(v0 + 1360) = v242;
                              *(void *)(v242 + 16) = v187;
                              *(void *)(v242 + 24) = v189;
                              uint64_t v87 = swift_task_alloc();
                              *(void *)(v0 + 1368) = v87;
                              *(void *)(v87 + 16) = sub_10049A624;
                              *(void *)(v87 + 24) = v242;
                              uint64_t v243 = dword_100660778;
                              int v244 = (void *)swift_task_alloc();
                              *(void *)(v0 + 1376) = v244;
                              *int v244 = v0;
                              v244[1] = sub_10048B75C;
                              uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v243);
                              uint64_t v91 = sub_10049A654;
                              goto LABEL_38;
                            }
                            id v190 = [v132 iTunesMetadata];
                            id v191 = [v190 distributorInfo];

                            id v192 = [v191 sourceURL];
                            uint64_t v193 = 1;
                            if (v192)
                            {
                              static URL._unconditionallyBridgeFromObjectiveC(_:)();

                              uint64_t v193 = 0;
                            }
                            uint64_t v194 = *(void *)(v0 + 1248);
                            uint64_t v195 = *(void *)(v0 + 1240);
                            uint64_t v196 = *(void *)(v0 + 1168);
                            uint64_t v197 = *(void *)(v0 + 1160);
                            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v196 + 56))(v195, v193, 1, v197);
                            sub_10026400C(v195, v194);
                            int v198 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v194, 1, v197);
                            uint64_t v199 = *(void *)(v0 + 1248);
                            if (v198)
                            {
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              sub_10001729C(v199, &qword_10065C3C0);
                            }
                            else
                            {
                              (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
                              sub_10001729C(v199, &qword_10065C3C0);
                              Swift::String_optional v203 = URL.host(percentEncoded:)(1);
                              uint64_t countAndFlagsBits = v203.value._countAndFlagsBits;
                              if (v203.value._object)
                              {
                                object = v203.value._object;
                                uint64_t v237 = URL.port.getter();
                                if ((v238 & 1) == 0)
                                {
                                  uint64_t v239 = v237;
                                  *(Swift::String_optional *)(v0 + 768) = v203;
                                  v240._uint64_t countAndFlagsBits = 58;
                                  v240._object = (void *)0xE100000000000000;
                                  String.append(_:)(v240);
                                  *(void *)(v0 + 856) = v239;
                                  v241._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                                  String.append(_:)(v241);
                                  swift_bridgeObjectRelease();
                                  uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                                  object = *(void **)(v0 + 776);
                                }
                                (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                                goto LABEL_121;
                              }
                              (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                            }
                            type metadata accessor for InternalError();
                            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                            swift_allocError();
                            *unint64_t v205 = 0x6C6177656E6572;
                            v205[1] = 0xE700000000000000;
                            v205[2] = 0xD000000000000010;
                            v205[3] = 0x80000001005BFF90;
                            swift_storeEnumTagMultiPayload();
                            swift_willThrow();

LABEL_98:
                            sub_100014524(v261);
                            uint64_t v134 = (void **)(v0 + 872);
                            goto LABEL_99;
                          }
                          swift_bridgeObjectRelease();
                          type metadata accessor for InternalError();
                          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                          uint64_t v201 = v104;
                          swift_allocError();
                          *uint64_t v200 = 0x6C6177656E6572;
                          v200[1] = 0xE700000000000000;
                          id v202 = "Not bundle ID found";
                        }
                        else
                        {
                          type metadata accessor for InternalError();
                          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                          uint64_t v201 = v104;
                          swift_allocError();
                          *uint64_t v200 = 0x6C6177656E6572;
                          v200[1] = 0xE700000000000000;
                          id v202 = "No account ID found";
                        }
                        v200[2] = 0xD000000000000013;
                        v200[3] = (unint64_t)(v202 - 32) | 0x8000000000000000;
                        swift_storeEnumTagMultiPayload();
                        swift_willThrow();

                        sub_100014524(v201);
                      }
LABEL_99:
                      v206 = (char *)(v0 + 1556);
                      char v207 = *(unsigned char *)(v0 + 1556);
                      uint64_t v208 = *(void *)(v0 + 1296);
                      uint64_t v209 = *(void *)(v0 + 1288);
                      static Logger.ald.getter();
                      swift_errorRetain();
                      sub_1001C3ED0(v209, v208, v207);
                      swift_errorRetain();
                      uint64_t v210 = Logger.logObject.getter();
                      os_log_type_t v211 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v210, v211))
                      {
                        os_log_type_t v256 = v211;
                        uint64_t v212 = swift_slowAlloc();
                        uint64_t v265 = (void *)swift_slowAlloc();
                        *uint64_t v258 = swift_slowAlloc();
                        *(_DWORD *)uint64_t v212 = 138412802;
                        if (qword_10065B150 != -1) {
                          swift_once();
                        }
                        TaskLocal.get()();
                        uint64_t v213 = *(void *)(v0 + 608);
                        if (!v213) {
                          goto LABEL_104;
                        }
                        swift_release();
                        swift_release();
                        swift_release();
                        os_unfair_lock_lock((os_unfair_lock_t)(v213 + 24));
                        sub_100006250((void **)(v213 + 16), v134);
                        os_unfair_lock_unlock((os_unfair_lock_t)(v213 + 24));
                        uint64_t v214 = (uint64_t)*v134;
                        swift_release();
                        if (!v214)
                        {
LABEL_104:
                          (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
                          id v215 = objc_allocWithZone((Class)type metadata accessor for LogKey());
                          uint64_t v214 = LogKey.init(prefix:)();
                        }
                        int v216 = *v206;
                        *(void *)(v212 + 4) = v214;
                        *uint64_t v265 = v214;
                        *(_WORD *)(v212 + 12) = 2082;
                        if (v216 == 1)
                        {
                          uint64_t v217 = *(void *)(v0 + 1296);
                          swift_bridgeObjectRetain();
                          uint64_t v218 = *(void *)(v0 + 1288);
                          char v219 = 1;
                          uint64_t v220 = v218;
                          unint64_t v221 = v217;
                        }
                        else
                        {
                          *(void *)(v0 + 848) = *(void *)(v0 + 1288);
                          uint64_t v220 = dispatch thunk of CustomStringConvertible.description.getter();
                          unint64_t v221 = v228;
                          char v219 = *v206;
                          uint64_t v217 = *(void *)(v0 + 1296);
                          uint64_t v218 = *(void *)(v0 + 1288);
                        }
                        uint64_t v229 = *(void *)(v0 + 960);
                        uint64_t v251 = *(void *)(v0 + 952);
                        uint64_t v253 = *(void *)(v0 + 968);
                        *(void *)(v212 + 14) = sub_1000143F4(v220, v221, v258);
                        swift_bridgeObjectRelease();
                        sub_1001C3EC0(v218, v217, v219);
                        sub_1001C3EC0(v218, v217, v219);
                        *(_WORD *)(v212 + 22) = 2082;
                        swift_getErrorValue();
                        uint64_t v230 = *(void *)(*(void *)(v0 + 688) - 8);
                        swift_task_alloc();
                        (*(void (**)(void))(v230 + 16))();
                        uint64_t v231 = String.init<A>(describing:)();
                        unint64_t v233 = v232;
                        swift_task_dealloc();
                        *(void *)(v212 + 24) = sub_1000143F4(v231, v233, v258);
                        swift_bridgeObjectRelease();
                        swift_errorRelease();
                        swift_errorRelease();
                        sub_1000172F8(&qword_10065DB10);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();

                        swift_errorRelease();
                        (*(void (**)(uint64_t, uint64_t))(v229 + 8))(v253, v251);
                      }
                      else
                      {
                        char v222 = *v206;
                        uint64_t v223 = *(void *)(v0 + 1296);
                        uint64_t v224 = *(void *)(v0 + 1288);
                        uint64_t v225 = *(void *)(v0 + 968);
                        uint64_t v226 = *(void *)(v0 + 960);
                        uint64_t v227 = *(void *)(v0 + 952);
                        swift_errorRelease();
                        sub_1001C3EC0(v224, v223, v222);
                        sub_1001C3EC0(v224, v223, v222);
                        swift_errorRelease();
                        swift_errorRelease();

                        (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v225, v227);
                      }
                      unint64_t v117 = *(void *)(v0 + 1280);
                      uint64_t v104 = v0 + 560;
                      continue;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
                  type metadata accessor for InternalError();
                  sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                  swift_allocError();
                  *(void *)uint64_t v160 = 0x6C6177656E6572;
                  *(void *)(v160 + 8) = 0xE700000000000000;
                  strcpy((char *)(v160 + 16), "App not found");
                  *(_WORD *)(v160 + 30) = -4864;
                  goto LABEL_83;
                }
                break;
              }
              id v142 = objc_allocWithZone((Class)LSApplicationRecord);
              *unint64_t v249 = 0;
              id v143 = [v142 initWithStoreItemIdentifier:v127 error:v249];
              uint64_t v133 = *v249;
              uint64_t v134 = (void **)(v0 + 872);
              if (v143)
              {
                id v132 = v143;
                goto LABEL_61;
              }
              id v156 = v133;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              type metadata accessor for InternalError();
              sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
              swift_allocError();
              uint64_t v137 = v157;
              *(void *)(v0 + 720) = 0;
              *(void *)(v0 + 728) = 0xE000000000000000;
              _StringGuts.grow(_:)(18);
              swift_bridgeObjectRelease();
              *(void *)(v0 + 752) = 0x20746F6E20707041;
              *(void *)(v0 + 760) = 0xEF2820646E756F66;
              *(void *)(v0 + 888) = v127;
              v158._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v158);
              swift_bridgeObjectRelease();
              v159._uint64_t countAndFlagsBits = 41;
              v159._object = (void *)0xE100000000000000;
              String.append(_:)(v159);
              uint64_t v140 = *(void *)(v0 + 752);
              uint64_t v141 = *(void *)(v0 + 760);
LABEL_70:
              void *v137 = 0x6C6177656E6572;
              v137[1] = 0xE700000000000000;
              v137[2] = v140;
              v137[3] = v141;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              goto LABEL_99;
            }
            char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            sub_100014524(v0 + 280);
            uint64_t v52 = v264;
            if (v68) {
              goto LABEL_44;
            }
            goto LABEL_11;
          }
          char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_10019B17C(v261, v0 + 280);
          if (v58) {
            goto LABEL_20;
          }
          swift_release();
          sub_100014524(v0 + 280);
        }
LABEL_11:
        sub_10049A7D8(*(void *)(v0 + 1040), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
        v51 += v52;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
      }
    }
  }
  uint64_t v74 = *(void **)(v0 + 1304);
  swift_bridgeObjectRelease();
  id v75 = [v74 iTunesMetadata];
  id v76 = [v75 distributorInfo];

  id v77 = [v76 sourceURL];
  uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1432);
  uint64_t v79 = *(void *)(v0 + 1200);
  if (!v77)
  {
    v78(*(void *)(v0 + 1200), 1, 1, *(void *)(v0 + 1160));
    goto LABEL_42;
  }
  uint64_t v80 = *(void *)(v0 + 1176);
  uint64_t v81 = *(void *)(v0 + 1168);
  uint64_t v82 = *(void *)(v0 + 1160);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
  v83(v79, v80, v82);
  v78(v79, 0, 1, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v79, 1, v82) == 1)
  {
LABEL_42:
    uint64_t v93 = *(void **)(v0 + 1304);
    uint64_t v94 = *(void *)(v0 + 1232);
    uint64_t v95 = *(void *)(v0 + 1200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v95, &qword_10065C3C0);
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v96 = 0x726961706572;
    v96[1] = 0xE600000000000000;
    v96[2] = 0xD000000000000011;
    v96[3] = 0x80000001005BFFB0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    sub_10001729C(v94, &qword_10065C3C0);
    goto LABEL_98;
  }
  uint64_t v84 = *(void *)(v0 + 1336);
  uint64_t v85 = *(void *)(v0 + 1328);
  v83(*(void *)(v0 + 1184), *(void *)(v0 + 1200), *(void *)(v0 + 1160));
  uint64_t v86 = swift_task_alloc();
  *(void *)(v0 + 1504) = v86;
  *(void *)(v86 + 16) = v85;
  *(void *)(v86 + 24) = v84;
  uint64_t v87 = swift_task_alloc();
  *(void *)(v0 + 1512) = v87;
  *(void *)(v87 + 16) = sub_10049A69C;
  *(void *)(v87 + 24) = v86;
  uint64_t v88 = dword_100660770;
  uint64_t v89 = (void *)swift_task_alloc();
  *(void *)(v0 + 1520) = v89;
  *uint64_t v89 = v0;
  v89[1] = sub_100490304;
  uint64_t v90 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660770 + v88);
  uint64_t v91 = sub_10049A6C8;
LABEL_38:
  return v90((uint64_t)v91, v87);
}

uint64_t sub_100490304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[191] = a1;
  v4[192] = a2;
  v4[193] = v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    id v5 = sub_100494994;
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    id v5 = sub_1004904DC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004904DC()
{
  id v162 = (long long *)(v0 + 440);
  char v173 = (uint64_t *)(v0 + 816);
  Swift::String v164 = (void **)(v0 + 832);
  uint64_t v161 = v0 + 560;
  id v163 = (void **)(v0 + 864);
  uint64_t v165 = (void **)(v0 + 872);
  uint64_t v1 = *(void *)(v0 + 1536);
  if (!v1)
  {
    uint64_t v27 = *(void **)(v0 + 1304);
    uint64_t v28 = *(void *)(v0 + 1232);
    uint64_t v29 = *(void *)(v0 + 1184);
    uint64_t v30 = *(void *)(v0 + 1168);
    uint64_t v31 = *(void *)(v0 + 1160);
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v32 = 0x726961706572;
    v32[1] = 0xE600000000000000;
    v32[2] = 0xD000000000000019;
    v32[3] = 0x80000001005BFFD0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    sub_10001729C(v28, &qword_10065C3C0);
    uint64_t v33 = v0 + 560;
LABEL_13:
    sub_100014524(v33);
    uint64_t v174 = *(void *)(v0 + 1496);
    goto LABEL_63;
  }
  id v2 = [*(id *)(v0 + 1304) iTunesMetadata];
  id v3 = [v2 storeItemIdentifier];

  if (!v3)
  {
    uint64_t v34 = *(void **)(v0 + 1304);
    uint64_t v35 = *(void *)(v0 + 1232);
    uint64_t v36 = *(void *)(v0 + 1184);
    uint64_t v37 = *(void *)(v0 + 1168);
    uint64_t v38 = *(void *)(v0 + 1160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v39 = 0x726961706572;
    v39[1] = 0xE600000000000000;
    unint64_t v40 = 0xD000000000000011;
    id v41 = "Item ID not found";
LABEL_12:
    v39[2] = v40;
    v39[3] = (unint64_t)(v41 - 32) | 0x8000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
    sub_10001729C(v35, &qword_10065C3C0);
    uint64_t v33 = v0 + 560;
    goto LABEL_13;
  }
  id v4 = [*(id *)(v0 + 1304) iTunesMetadata];
  id v5 = [v4 storeItemIdentifier];

  id v6 = sub_1004FBAD4();
  if (v7)
  {
    uint64_t v34 = *(void **)(v0 + 1304);
    uint64_t v35 = *(void *)(v0 + 1232);
    uint64_t v36 = *(void *)(v0 + 1184);
    uint64_t v37 = *(void *)(v0 + 1168);
    uint64_t v38 = *(void *)(v0 + 1160);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v39 = 0x726961706572;
    v39[1] = 0xE600000000000000;
    unint64_t v40 = 0xD000000000000014;
    id v41 = "Version ID not found";
    goto LABEL_12;
  }
  id v8 = v6;
  uint64_t v170 = *(void *)(v0 + 1408);
  uint64_t v172 = *(void *)(v0 + 1528);
  uint64_t v166 = *(void *)(v0 + 1400);
  long long v168 = *(_OWORD *)(v0 + 1312);
  uint64_t v9 = *(void *)(v0 + 1184);
  uint64_t v10 = *(void *)(v0 + 1168);
  uint64_t v11 = *(void *)(v0 + 1160);
  uint64_t v12 = *(void *)(v0 + 1008);
  uint64_t v13 = *(void *)(v0 + 984);
  uint64_t v14 = *(int **)(v0 + 976);
  sub_1001C3EC0(*(void *)(v0 + 1288), *(void *)(v0 + 1296), *(unsigned char *)(v0 + 1556));
  sub_10019B17C(v161, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13 + v14[7], v9, v11);
  uint64_t v15 = (void *)(v13 + v14[8]);
  v15[3] = v166;
  v15[4] = &off_10063FB70;
  *uint64_t v15 = v170;
  *(_OWORD *)(v13 + 40) = v168;
  *(void *)(v13 + 56) = v172;
  *(void *)(v13 + 64) = v1;
  *(void *)(v13 + v14[9]) = v5;
  *(void *)(v13 + v14[10]) = v8;
  sub_10049A770(v13, v12, type metadata accessor for NewLicenseBatch);
  swift_storeEnumTagMultiPayload();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v17 = *(void *)(v0 + 1280);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v17 = sub_10028FC84(0, *(void *)(v17 + 16) + 1, 1, *(void *)(v0 + 1280));
  }
  unint64_t v19 = *(void *)(v17 + 16);
  unint64_t v18 = *(void *)(v17 + 24);
  if (v19 >= v18 >> 1) {
    unint64_t v17 = sub_10028FC84(v18 > 1, v19 + 1, 1, v17);
  }
  uint64_t v20 = *(void **)(v0 + 1304);
  uint64_t v175 = *(void *)(v0 + 1232);
  uint64_t v21 = *(void *)(v0 + 1184);
  uint64_t v22 = *(void *)(v0 + 1168);
  uint64_t v23 = *(void *)(v0 + 1160);
  uint64_t v24 = *(void *)(v0 + 1008);
  uint64_t v25 = *(void *)(v0 + 1000);
  uint64_t v26 = *(void *)(v0 + 984);
  *(void *)(v17 + 16) = v19 + 1;
  sub_10049A708(v24, v17+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v19, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
  swift_release();

  sub_10049A7D8(v26, type metadata accessor for NewLicenseBatch);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  sub_10001729C(v175, &qword_10065C3C0);
  sub_100014524(v161);
  uint64_t v174 = *(void *)(v0 + 1496);
  while (1)
  {
    uint64_t v42 = *(void *)(v0 + 1272) + 1;
    if (v42 == *(void *)(v0 + 1256)) {
      break;
    }
    *(void *)(v0 + 1280) = v17;
    *(void *)(v0 + 1272) = v42;
    *(void *)(v0 + 1264) = v174;
    uint64_t v43 = *(void *)(v0 + 896) + 24 * v42;
    uint64_t v44 = *(void *)(v43 + 32);
    *(void *)(v0 + 1288) = v44;
    id v45 = *(void **)(v43 + 40);
    *(void *)(v0 + 1296) = v45;
    LODWORD(v43) = *(unsigned __int8 *)(v43 + 48);
    *(unsigned char *)(v0 + 1556) = v43;
    if (v43 == 1)
    {
      id v46 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      NSString v47 = String._bridgeToObjectiveC()();
      sub_1001C3EC0(v44, (uint64_t)v45, 1);
      *Swift::String v164 = 0;
      id v48 = [v46 initWithBundleIdentifier:v47 allowPlaceholder:0 error:v164];

      uint64_t v49 = *v164;
      if (v48) {
        goto LABEL_20;
      }
      id v50 = v49;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      uint64_t v52 = v51;
      *(void *)(v0 + 800) = 0;
      *(void *)(v0 + 808) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 784) = 0x20746F6E20707041;
      *(void *)(v0 + 792) = 0xEF2820646E756F66;
      v53._uint64_t countAndFlagsBits = v44;
      v53._object = v45;
      String.append(_:)(v53);
      v54._uint64_t countAndFlagsBits = 41;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      uint64_t v55 = *(void *)(v0 + 784);
      uint64_t v56 = *(void *)(v0 + 792);
    }
    else
    {
      id v57 = objc_allocWithZone((Class)LSApplicationRecord);
      *id v163 = 0;
      id v58 = [v57 initWithStoreItemIdentifier:v44 error:v163];
      uint64_t v49 = *v163;
      if (v58)
      {
        id v48 = v58;
LABEL_20:
        *(void *)(v0 + 1304) = v48;
        uint64_t v59 = *(void *)(v0 + 920);
        id v60 = v49;
        if (!v59) {
          goto LABEL_33;
        }
        swift_bridgeObjectRetain();
        id v61 = [v48 iTunesMetadata];
        id v62 = [v61 distributorInfo];

        id v63 = [v62 distributorID];
        uint64_t v64 = *(void *)(v0 + 920);
        if (v63)
        {
          uint64_t v65 = *(void *)(v0 + 912);
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          if (v66 == v65 && v64 == v68)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_33;
          }
          char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v70)
          {
LABEL_33:
            id v76 = [v48 iTunesMetadata];
            id v77 = [v76 distributorInfo];

            id v78 = [v77 distributorID];
            if (v78)
            {
              uint64_t v79 = v78;
              uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v82 = v81;

              id v83 = [v48 bundleIdentifier];
              if (!v83) {
                goto LABEL_43;
              }
              uint64_t v84 = v83;
              uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v87 = v86;

              if (v80 == v85 && v82 == v87)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v88 & 1) == 0)
                {
LABEL_43:
                  *(void *)(v0 + 464) = &type metadata for NativeDistributor;
                  unint64_t v92 = sub_1002F9EF8();
LABEL_44:
                  *(void *)(v0 + 472) = v92;

                  *(void *)(v0 + 440) = v80;
                  *(void *)(v0 + 448) = v82;
                  sub_10018B164(v162, v161);
                  id v94 = [v48 iTunesMetadata];
                  id v95 = [v94 distributorInfo];

                  id v96 = [v95 accountID];
                  if (v96)
                  {
                    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v99 = v98;

                    *(void *)(v0 + 1312) = v97;
                    *(void *)(v0 + 1320) = v99;
                    id v100 = [v48 bundleIdentifier];
                    if (v100)
                    {
                      uint64_t v101 = v100;
                      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v104 = v103;

                      *(void *)(v0 + 1328) = v102;
                      *(void *)(v0 + 1336) = v104;
                      sub_10019B17C(v161, v0 + 360);
                      sub_1000172F8(&qword_10065C450);
                      if (swift_dynamicCast())
                      {
                        uint64_t countAndFlagsBits = *(void *)(v0 + 736);
                        object = *(void **)(v0 + 744);
LABEL_78:
                        *(void *)(v0 + 1352) = object;
                        *(void *)(v0 + 1344) = countAndFlagsBits;
                        uint64_t v157 = swift_task_alloc();
                        *(void *)(v0 + 1360) = v157;
                        *(void *)(v157 + 16) = v102;
                        *(void *)(v157 + 24) = v104;
                        uint64_t v158 = swift_task_alloc();
                        *(void *)(v0 + 1368) = v158;
                        *(void *)(v158 + 16) = sub_10049A624;
                        *(void *)(v158 + 24) = v157;
                        uint64_t v159 = dword_100660778;
                        uint64_t v160 = (void *)swift_task_alloc();
                        *(void *)(v0 + 1376) = v160;
                        void *v160 = v0;
                        v160[1] = sub_10048B75C;
                        return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v159))((uint64_t)sub_10049A654, v158);
                      }
                      id v105 = [v48 iTunesMetadata];
                      id v106 = [v105 distributorInfo];

                      id v107 = [v106 sourceURL];
                      uint64_t v108 = 1;
                      if (v107)
                      {
                        static URL._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v108 = 0;
                      }
                      uint64_t v109 = *(void *)(v0 + 1248);
                      uint64_t v110 = *(void *)(v0 + 1240);
                      uint64_t v111 = *(void *)(v0 + 1168);
                      uint64_t v112 = *(void *)(v0 + 1160);
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v110, v108, 1, v112);
                      sub_10026400C(v110, v109);
                      int v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v109, 1, v112);
                      uint64_t v114 = *(void *)(v0 + 1248);
                      if (v113)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_10001729C(v114, &qword_10065C3C0);
                      }
                      else
                      {
                        (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
                        sub_10001729C(v114, &qword_10065C3C0);
                        Swift::String_optional v120 = URL.host(percentEncoded:)(1);
                        uint64_t countAndFlagsBits = v120.value._countAndFlagsBits;
                        if (v120.value._object)
                        {
                          object = v120.value._object;
                          uint64_t v152 = URL.port.getter();
                          if ((v153 & 1) == 0)
                          {
                            uint64_t v154 = v152;
                            *(Swift::String_optional *)(v0 + 768) = v120;
                            v155._uint64_t countAndFlagsBits = 58;
                            v155._object = (void *)0xE100000000000000;
                            String.append(_:)(v155);
                            *(void *)(v0 + 856) = v154;
                            v156._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                            String.append(_:)(v156);
                            swift_bridgeObjectRelease();
                            uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                            object = *(void **)(v0 + 776);
                          }
                          (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                          goto LABEL_78;
                        }
                        (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      type metadata accessor for InternalError();
                      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                      swift_allocError();
                      void *v122 = 0x6C6177656E6572;
                      v122[1] = 0xE700000000000000;
                      v122[2] = 0xD000000000000010;
                      v122[3] = 0x80000001005BFF90;
                      swift_storeEnumTagMultiPayload();
                      swift_willThrow();

                      uint64_t v117 = v0 + 560;
                      goto LABEL_62;
                    }
                    swift_bridgeObjectRelease();
                    type metadata accessor for InternalError();
                    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                    swift_allocError();
                    *uint64_t v115 = 0x6C6177656E6572;
                    v115[1] = 0xE700000000000000;
                    char v116 = "Not bundle ID found";
                  }
                  else
                  {
                    type metadata accessor for InternalError();
                    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
                    swift_allocError();
                    *uint64_t v115 = 0x6C6177656E6572;
                    v115[1] = 0xE700000000000000;
                    char v116 = "No account ID found";
                  }
                  v115[2] = 0xD000000000000013;
                  v115[3] = (unint64_t)(v116 - 32) | 0x8000000000000000;
                  swift_storeEnumTagMultiPayload();
                  swift_willThrow();

                  uint64_t v117 = v0 + 560;
LABEL_62:
                  sub_100014524(v117);
                  goto LABEL_63;
                }
              }
              swift_bridgeObjectRelease();
              id v89 = [v77 domain];
              if (v89)
              {
                uint64_t v90 = v89;
                uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v82 = v91;

                *(void *)(v0 + 464) = &type metadata for WebDistributor;
                unint64_t v92 = sub_1002BEA38();
                goto LABEL_44;
              }
            }

            *(void *)(v0 + 472) = 0;
            *id v162 = 0u;
            *(_OWORD *)(v0 + 456) = 0u;
            sub_10001729C((uint64_t)v162, &qword_10065D3A0);
            type metadata accessor for InternalError();
            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
            swift_allocError();
            void *v93 = 0x6C6177656E6572;
            v93[1] = 0xE700000000000000;
            v93[2] = 0xD000000000000014;
            v93[3] = 0x80000001005BFF30;
            goto LABEL_42;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        *(void *)uint64_t v75 = 0x6C6177656E6572;
        *(void *)(v75 + 8) = 0xE700000000000000;
        strcpy((char *)(v75 + 16), "App not found");
        *(_WORD *)(v75 + 30) = -4864;
LABEL_42:
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        goto LABEL_63;
      }
      id v71 = v49;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      uint64_t v52 = v72;
      *(void *)(v0 + 720) = 0;
      *(void *)(v0 + 728) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 752) = 0x20746F6E20707041;
      *(void *)(v0 + 760) = 0xEF2820646E756F66;
      *(void *)(v0 + 888) = v44;
      v73._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v73);
      swift_bridgeObjectRelease();
      v74._uint64_t countAndFlagsBits = 41;
      v74._object = (void *)0xE100000000000000;
      String.append(_:)(v74);
      uint64_t v55 = *(void *)(v0 + 752);
      uint64_t v56 = *(void *)(v0 + 760);
    }
    *uint64_t v52 = 0x6C6177656E6572;
    v52[1] = 0xE700000000000000;
    uint64_t v52[2] = v55;
    v52[3] = v56;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_63:
    uint64_t v123 = (char *)(v0 + 1556);
    char v124 = *(unsigned char *)(v0 + 1556);
    uint64_t v125 = *(void *)(v0 + 1296);
    uint64_t v126 = *(void *)(v0 + 1288);
    static Logger.ald.getter();
    swift_errorRetain();
    sub_1001C3ED0(v126, v125, v124);
    swift_errorRetain();
    uint64_t v127 = Logger.logObject.getter();
    os_log_type_t v128 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v127, v128))
    {
      os_log_type_t v171 = v128;
      uint64_t v129 = swift_slowAlloc();
      uint64_t v176 = (void *)swift_slowAlloc();
      uint64_t *v173 = swift_slowAlloc();
      *(_DWORD *)uint64_t v129 = 138412802;
      if (qword_10065B150 != -1) {
        swift_once();
      }
      TaskLocal.get()();
      uint64_t v130 = *(void *)(v0 + 608);
      if (!v130) {
        goto LABEL_68;
      }
      swift_release();
      swift_release();
      swift_release();
      os_unfair_lock_lock((os_unfair_lock_t)(v130 + 24));
      sub_100006250((void **)(v130 + 16), v165);
      os_unfair_lock_unlock((os_unfair_lock_t)(v130 + 24));
      uint64_t v131 = (uint64_t)*v165;
      swift_release();
      if (!v131)
      {
LABEL_68:
        (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
        id v132 = objc_allocWithZone((Class)type metadata accessor for LogKey());
        uint64_t v131 = LogKey.init(prefix:)();
      }
      int v133 = *v123;
      *(void *)(v129 + 4) = v131;
      void *v176 = v131;
      *(_WORD *)(v129 + 12) = 2082;
      if (v133 == 1)
      {
        uint64_t v134 = *(void *)(v0 + 1296);
        swift_bridgeObjectRetain();
        uint64_t v135 = *(void *)(v0 + 1288);
        char v136 = 1;
        uint64_t v137 = v135;
        unint64_t v138 = v134;
      }
      else
      {
        *(void *)(v0 + 848) = *(void *)(v0 + 1288);
        uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v138 = v145;
        char v136 = *v123;
        uint64_t v134 = *(void *)(v0 + 1296);
        uint64_t v135 = *(void *)(v0 + 1288);
      }
      uint64_t v146 = *(void *)(v0 + 960);
      uint64_t v167 = *(void *)(v0 + 952);
      uint64_t v169 = *(void *)(v0 + 968);
      *(void *)(v129 + 14) = sub_1000143F4(v137, v138, v173);
      swift_bridgeObjectRelease();
      sub_1001C3EC0(v135, v134, v136);
      sub_1001C3EC0(v135, v134, v136);
      *(_WORD *)(v129 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v147 = *(void *)(*(void *)(v0 + 688) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v147 + 16))();
      uint64_t v148 = String.init<A>(describing:)();
      unint64_t v150 = v149;
      swift_task_dealloc();
      *(void *)(v129 + 24) = sub_1000143F4(v148, v150, v173);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v169, v167);
      unint64_t v17 = *(void *)(v0 + 1280);
    }
    else
    {
      char v139 = *v123;
      uint64_t v140 = *(void *)(v0 + 1296);
      uint64_t v141 = *(void *)(v0 + 1288);
      uint64_t v142 = *(void *)(v0 + 968);
      uint64_t v143 = *(void *)(v0 + 960);
      uint64_t v144 = *(void *)(v0 + 952);
      swift_errorRelease();
      sub_1001C3EC0(v141, v140, v139);
      sub_1001C3EC0(v141, v140, v139);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v142, v144);
      unint64_t v17 = *(void *)(v0 + 1280);
    }
  }
  swift_bridgeObjectRelease();
  if (!*(void *)(v17 + 16))
  {
    swift_bridgeObjectRelease();
    unint64_t v17 = 0;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v118 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v118(v17);
}

uint64_t sub_100491E18()
{
  uint64_t v126 = (long long *)(v0 + 440);
  int v133 = (uint64_t *)(v0 + 816);
  uint64_t v124 = v0 + 856;
  os_log_type_t v128 = (void **)(v0 + 864);
  uint64_t v129 = (void **)(v0 + 832);
  uint64_t v1 = (void **)(v0 + 872);

  uint64_t v127 = v0 + 560;
  sub_100014524(v0 + 560);
  id v2 = (char *)(v0 + 1556);
  uint64_t v134 = *(void *)(v0 + 1264);
  char v136 = (char *)(v0 + 1556);
  while (1)
  {
    char v5 = *v2;
    uint64_t v6 = *(void *)(v0 + 1296);
    uint64_t v7 = *(void *)(v0 + 1288);
    static Logger.ald.getter();
    swift_errorRetain();
    sub_1001C3ED0(v7, v6, v5);
    swift_errorRetain();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v132 = v9;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v135 = (void *)swift_slowAlloc();
      *int v133 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412802;
      if (qword_10065B150 != -1) {
        swift_once();
      }
      TaskLocal.get()();
      uint64_t v11 = *(void *)(v0 + 608);
      if (!v11) {
        goto LABEL_9;
      }
      swift_release();
      swift_release();
      swift_release();
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
      sub_100006250((void **)(v11 + 16), v1);
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
      uint64_t v12 = (uint64_t)*v1;
      swift_release();
      if (!v12)
      {
LABEL_9:
        (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
        id v13 = objc_allocWithZone((Class)type metadata accessor for LogKey());
        uint64_t v12 = LogKey.init(prefix:)();
      }
      int v14 = *v136;
      *(void *)(v10 + 4) = v12;
      *uint64_t v135 = v12;
      *(_WORD *)(v10 + 12) = 2082;
      if (v14 == 1)
      {
        uint64_t v15 = *(void *)(v0 + 1296);
        swift_bridgeObjectRetain();
        uint64_t v16 = *(void *)(v0 + 1288);
        char v17 = 1;
        uint64_t v18 = v16;
        unint64_t v19 = v15;
      }
      else
      {
        *(void *)(v0 + 848) = *(void *)(v0 + 1288);
        uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v19 = v26;
        char v17 = *v136;
        uint64_t v15 = *(void *)(v0 + 1296);
        uint64_t v16 = *(void *)(v0 + 1288);
      }
      uint64_t v27 = *(void *)(v0 + 960);
      uint64_t v130 = *(void *)(v0 + 952);
      uint64_t v131 = *(void *)(v0 + 968);
      *(void *)(v10 + 14) = sub_1000143F4(v18, v19, v133);
      swift_bridgeObjectRelease();
      sub_1001C3EC0(v16, v15, v17);
      sub_1001C3EC0(v16, v15, v17);
      *(_WORD *)(v10 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v28 = *(void *)(*(void *)(v0 + 688) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v28 + 16))();
      uint64_t v29 = String.init<A>(describing:)();
      unint64_t v31 = v30;
      swift_task_dealloc();
      *(void *)(v10 + 24) = sub_1000143F4(v29, v31, v133);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v131, v130);
      uint64_t v1 = (void **)(v0 + 872);
    }
    else
    {
      char v20 = *v2;
      uint64_t v21 = *(void *)(v0 + 1296);
      uint64_t v22 = *(void *)(v0 + 1288);
      uint64_t v23 = *(void *)(v0 + 968);
      uint64_t v24 = *(void *)(v0 + 960);
      uint64_t v25 = *(void *)(v0 + 952);
      swift_errorRelease();
      sub_1001C3EC0(v22, v21, v20);
      sub_1001C3EC0(v22, v21, v20);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    }
    uint64_t v32 = *(void *)(v0 + 1272) + 1;
    id v2 = (char *)(v0 + 1556);
    if (v32 == *(void *)(v0 + 1256)) {
      break;
    }
    *(void *)(v0 + 1272) = v32;
    *(void *)(v0 + 1264) = v134;
    uint64_t v33 = *(void *)(v0 + 896) + 24 * v32;
    uint64_t v34 = *(void *)(v33 + 32);
    *(void *)(v0 + 1288) = v34;
    uint64_t v35 = *(void **)(v33 + 40);
    *(void *)(v0 + 1296) = v35;
    LODWORD(v33) = *(unsigned __int8 *)(v33 + 48);
    *char v136 = v33;
    if (v33 == 1)
    {
      id v36 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      NSString v37 = String._bridgeToObjectiveC()();
      sub_1001C3EC0(v34, (uint64_t)v35, 1);
      void *v129 = 0;
      id v38 = [v36 initWithBundleIdentifier:v37 allowPlaceholder:0 error:v129];

      uint64_t v39 = *v129;
      if (!v38)
      {
        id v40 = v39;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        uint64_t v42 = v41;
        *(void *)(v0 + 800) = 0;
        *(void *)(v0 + 808) = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 784) = 0x20746F6E20707041;
        *(void *)(v0 + 792) = 0xEF2820646E756F66;
        v43._uint64_t countAndFlagsBits = v34;
        v43._object = v35;
        String.append(_:)(v43);
        v44._uint64_t countAndFlagsBits = 41;
        v44._object = (void *)0xE100000000000000;
        String.append(_:)(v44);
        uint64_t v45 = *(void *)(v0 + 784);
        uint64_t v46 = *(void *)(v0 + 792);
        *uint64_t v42 = 0x6C6177656E6572;
        v42[1] = 0xE700000000000000;
        void v42[2] = v45;
        v42[3] = v46;
        goto LABEL_27;
      }
LABEL_21:
      *(void *)(v0 + 1304) = v38;
      uint64_t v49 = *(void *)(v0 + 920);
      id v50 = v39;
      if (!v49) {
        goto LABEL_30;
      }
      swift_bridgeObjectRetain();
      id v51 = [v38 iTunesMetadata];
      id v52 = [v51 distributorInfo];

      id v53 = [v52 distributorID];
      uint64_t v54 = *(void *)(v0 + 920);
      if (!v53)
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      uint64_t v55 = *(void *)(v0 + 912);
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      if (v56 == v55 && v54 == v58)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v66)
      {
LABEL_30:
        id v67 = objc_msgSend(v38, "iTunesMetadata", v124);
        id v68 = [v67 distributorInfo];

        id v69 = [v68 distributorID];
        if (!v69) {
          goto LABEL_2;
        }
        char v70 = v69;
        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v73 = v72;

        id v74 = [v38 bundleIdentifier];
        if (v74)
        {
          uint64_t v75 = v74;
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v78 = v77;

          if (v71 == v76 && v73 == v78)
          {
            swift_bridgeObjectRelease();
LABEL_37:
            swift_bridgeObjectRelease();
            id v80 = [v68 domain];
            id v2 = (char *)(v0 + 1556);
            if (v80)
            {
              uint64_t v81 = v80;
              uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v73 = v82;

              *(void *)(v0 + 464) = &type metadata for WebDistributor;
              unint64_t v83 = sub_1002BEA38();
              goto LABEL_40;
            }
LABEL_2:

            *(void *)(v0 + 472) = 0;
            *uint64_t v126 = 0u;
            *(_OWORD *)(v0 + 456) = 0u;
            sub_10001729C((uint64_t)v126, &qword_10065D3A0);
            type metadata accessor for InternalError();
            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
            swift_allocError();
            *id v3 = 0x6C6177656E6572;
            v3[1] = 0xE700000000000000;
            v3[2] = 0xD000000000000014;
            unint64_t v4 = 0x80000001005BFF30;
            goto LABEL_3;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v79) {
            goto LABEL_37;
          }
        }
        *(void *)(v0 + 464) = &type metadata for NativeDistributor;
        unint64_t v83 = sub_1002F9EF8();
        id v2 = (char *)(v0 + 1556);
LABEL_40:
        *(void *)(v0 + 472) = v83;

        *(void *)(v0 + 440) = v71;
        *(void *)(v0 + 448) = v73;
        sub_10018B164(v126, v127);
        id v84 = [v38 iTunesMetadata];
        id v85 = [v84 distributorInfo];

        id v86 = [v85 accountID];
        if (!v86)
        {
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          *uint64_t v99 = 0x6C6177656E6572;
          v99[1] = 0xE700000000000000;
          v99[2] = 0xD000000000000013;
          v99[3] = 0x80000001005BFF50;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          uint64_t v100 = v0 + 560;
          goto LABEL_47;
        }
        uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v89 = v88;

        *(void *)(v0 + 1312) = v87;
        *(void *)(v0 + 1320) = v89;
        id v90 = [v38 bundleIdentifier];
        if (v90)
        {
          uint64_t v91 = v90;
          uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v94 = v93;

          *(void *)(v0 + 1328) = v92;
          *(void *)(v0 + 1336) = v94;
          sub_10019B17C(v127, v0 + 360);
          sub_1000172F8(&qword_10065C450);
          if (swift_dynamicCast())
          {
            uint64_t countAndFlagsBits = *(void *)(v0 + 736);
            object = *(void **)(v0 + 744);
LABEL_64:
            *(void *)(v0 + 1352) = object;
            *(void *)(v0 + 1344) = countAndFlagsBits;
            uint64_t v120 = swift_task_alloc();
            *(void *)(v0 + 1360) = v120;
            *(void *)(v120 + 16) = v92;
            *(void *)(v120 + 24) = v94;
            uint64_t v121 = swift_task_alloc();
            *(void *)(v0 + 1368) = v121;
            *(void *)(v121 + 16) = sub_10049A624;
            *(void *)(v121 + 24) = v120;
            uint64_t v122 = dword_100660778;
            uint64_t v123 = (void *)swift_task_alloc();
            *(void *)(v0 + 1376) = v123;
            void *v123 = v0;
            v123[1] = sub_10048B75C;
            return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v122))((uint64_t)sub_10049A654, v121);
          }
          id v95 = [v38 iTunesMetadata];
          id v96 = [v95 distributorInfo];

          id v97 = [v96 sourceURL];
          if (v97)
          {
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v98 = 0;
          }
          else
          {
            uint64_t v98 = 1;
          }
          uint64_t v102 = *(void *)(v0 + 1248);
          uint64_t v103 = *(void *)(v0 + 1240);
          uint64_t v104 = *(void *)(v0 + 1168);
          uint64_t v105 = *(void *)(v0 + 1160);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v103, v98, 1, v105);
          sub_10026400C(v103, v102);
          int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v102, 1, v105);
          uint64_t v107 = *(void *)(v0 + 1248);
          if (v106)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10001729C(v107, &qword_10065C3C0);
          }
          else
          {
            (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
            sub_10001729C(v107, &qword_10065C3C0);
            Swift::String_optional v108 = URL.host(percentEncoded:)(1);
            if (v108.value._object)
            {
              uint64_t countAndFlagsBits = v108.value._countAndFlagsBits;
              object = v108.value._object;
              uint64_t v115 = URL.port.getter();
              if ((v116 & 1) == 0)
              {
                uint64_t v117 = v115;
                *(Swift::String_optional *)(v0 + 768) = v108;
                v118._uint64_t countAndFlagsBits = 58;
                v118._object = (void *)0xE100000000000000;
                String.append(_:)(v118);
                *(void *)(v0 + 856) = v117;
                v119._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v119);
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                object = *(void **)(v0 + 776);
              }
              (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
              goto LABEL_64;
            }
            (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          *uint64_t v109 = 0x6C6177656E6572;
          v109[1] = 0xE700000000000000;
          v109[2] = 0xD000000000000010;
          v109[3] = 0x80000001005BFF90;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          sub_100014524(v127);
          id v2 = (char *)(v0 + 1556);
        }
        else
        {
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          *uint64_t v101 = 0x6C6177656E6572;
          v101[1] = 0xE700000000000000;
          v101[2] = 0xD000000000000013;
          v101[3] = 0x80000001005BFF70;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          uint64_t v100 = v0 + 560;
LABEL_47:
          sub_100014524(v100);
        }
      }
      else
      {
LABEL_35:
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        *id v3 = 0x6C6177656E6572;
        v3[1] = 0xE700000000000000;
        v3[2] = 0x20746F6E20707041;
        unint64_t v4 = 0xED0000646E756F66;
LABEL_3:
        v3[3] = v4;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
    }
    else
    {
      id v47 = objc_allocWithZone((Class)LSApplicationRecord);
      void *v128 = 0;
      id v48 = [v47 initWithStoreItemIdentifier:v34 error:v128];
      uint64_t v39 = *v128;
      if (v48)
      {
        id v38 = v48;
        goto LABEL_21;
      }
      id v59 = v39;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      id v61 = v60;
      *(void *)(v0 + 720) = 0;
      *(void *)(v0 + 728) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 752) = 0x20746F6E20707041;
      *(void *)(v0 + 760) = 0xEF2820646E756F66;
      *(void *)(v0 + 888) = v34;
      v62._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._uint64_t countAndFlagsBits = 41;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      uint64_t v64 = *(void *)(v0 + 752);
      uint64_t v65 = *(void *)(v0 + 760);
      *id v61 = 0x6C6177656E6572;
      v61[1] = 0xE700000000000000;
      v61[2] = v64;
      v61[3] = v65;
LABEL_27:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  uint64_t v110 = *(void *)(v0 + 1280);
  swift_bridgeObjectRelease();
  if (*(void *)(v110 + 16))
  {
    uint64_t v125 = v110;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v125 = 0;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v111 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v111(v125);
}

uint64_t sub_1004932F8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1464);
  uint64_t v2 = *(void *)(v0 + 1104);
  uint64_t v3 = *(void *)(v0 + 1080);
  sub_100014524(v0 + 320);
  v1(v3, 1, 1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001729C(v3, &qword_1006648B8);
  uint64_t v162 = *(void *)(v0 + 1264);
  *(void *)(v0 + 1496) = v162;
  if (*(unsigned char *)(v0 + 1557))
  {
    uint64_t v4 = sub_1004FC2F8();
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = v4;
      unint64_t v7 = v5;
      if (qword_10065B130 != -1) {
        swift_once();
      }
      sub_1004E3CC0(v6, v7, v0 + 480);
      sub_10018AE44(v6, v7);
    }
  }
  id v8 = *(void **)(v0 + 1304);
  swift_bridgeObjectRelease();
  id v9 = [v8 iTunesMetadata];
  id v10 = [v9 distributorInfo];

  id v11 = [v10 sourceURL];
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1432);
  uint64_t v13 = *(void *)(v0 + 1200);
  if (!v11)
  {
    v12(*(void *)(v0 + 1200), 1, 1, *(void *)(v0 + 1160));
    goto LABEL_13;
  }
  uint64_t v14 = *(void *)(v0 + 1176);
  uint64_t v15 = *(void *)(v0 + 1168);
  uint64_t v16 = *(void *)(v0 + 1160);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  char v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  v17(v13, v14, v16);
  v12(v13, 0, 1, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v16) == 1)
  {
LABEL_13:
    uint64_t v152 = v0 + 856;
    uint64_t v154 = (long long *)(v0 + 440);
    uint64_t v161 = (uint64_t *)(v0 + 816);
    Swift::String v156 = (void **)(v0 + 864);
    uint64_t v157 = (void **)(v0 + 832);
    uint64_t v27 = *(void **)(v0 + 1304);
    uint64_t v28 = (void **)(v0 + 872);
    uint64_t v29 = *(void *)(v0 + 1232);
    uint64_t v30 = *(void *)(v0 + 1200);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001729C(v30, &qword_10065C3C0);
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    void *v31 = 0x726961706572;
    v31[1] = 0xE600000000000000;
    long long v31[2] = 0xD000000000000011;
    v31[3] = 0x80000001005BFFB0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();

    sub_10001729C(v29, &qword_10065C3C0);
    uint64_t v155 = v0 + 560;
    sub_100014524(v0 + 560);
    uint64_t v32 = (char *)(v0 + 1556);
    while (1)
    {
      while (1)
      {
        char v35 = *v32;
        uint64_t v36 = *(void *)(v0 + 1296);
        uint64_t v37 = *(void *)(v0 + 1288);
        static Logger.ald.getter();
        swift_errorRetain();
        sub_1001C3ED0(v37, v36, v35);
        swift_errorRetain();
        id v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          os_log_type_t v160 = v39;
          uint64_t v40 = swift_slowAlloc();
          id v163 = (void *)swift_slowAlloc();
          *uint64_t v161 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 138412802;
          if (qword_10065B150 != -1) {
            swift_once();
          }
          TaskLocal.get()();
          uint64_t v41 = *(void *)(v0 + 608);
          if (!v41) {
            goto LABEL_21;
          }
          swift_release();
          swift_release();
          swift_release();
          os_unfair_lock_lock((os_unfair_lock_t)(v41 + 24));
          sub_100006250((void **)(v41 + 16), v28);
          os_unfair_lock_unlock((os_unfair_lock_t)(v41 + 24));
          uint64_t v42 = (uint64_t)*v28;
          swift_release();
          uint64_t v32 = (char *)(v0 + 1556);
          if (!v42)
          {
LABEL_21:
            (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
            id v43 = objc_allocWithZone((Class)type metadata accessor for LogKey());
            uint64_t v42 = LogKey.init(prefix:)();
          }
          int v44 = *v32;
          *(void *)(v40 + 4) = v42;
          *id v163 = v42;
          *(_WORD *)(v40 + 12) = 2082;
          if (v44 == 1)
          {
            uint64_t v45 = *(void *)(v0 + 1296);
            swift_bridgeObjectRetain();
            uint64_t v46 = *(void *)(v0 + 1288);
            char v47 = 1;
            uint64_t v48 = v46;
            unint64_t v49 = v45;
          }
          else
          {
            *(void *)(v0 + 848) = *(void *)(v0 + 1288);
            uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v49 = v56;
            char v47 = *v32;
            uint64_t v45 = *(void *)(v0 + 1296);
            uint64_t v46 = *(void *)(v0 + 1288);
          }
          uint64_t v57 = *(void *)(v0 + 960);
          uint64_t v158 = *(void *)(v0 + 952);
          uint64_t v159 = *(void *)(v0 + 968);
          *(void *)(v40 + 14) = sub_1000143F4(v48, v49, v161);
          swift_bridgeObjectRelease();
          sub_1001C3EC0(v46, v45, v47);
          sub_1001C3EC0(v46, v45, v47);
          *(_WORD *)(v40 + 22) = 2082;
          swift_getErrorValue();
          uint64_t v58 = *(void *)(*(void *)(v0 + 688) - 8);
          swift_task_alloc();
          (*(void (**)(void))(v58 + 16))();
          uint64_t v59 = String.init<A>(describing:)();
          unint64_t v61 = v60;
          swift_task_dealloc();
          *(void *)(v40 + 24) = sub_1000143F4(v59, v61, v161);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v159, v158);
          uint64_t v28 = (void **)(v0 + 872);
        }
        else
        {
          char v50 = *v32;
          uint64_t v51 = *(void *)(v0 + 1296);
          uint64_t v52 = *(void *)(v0 + 1288);
          uint64_t v53 = *(void *)(v0 + 968);
          uint64_t v54 = *(void *)(v0 + 960);
          uint64_t v55 = *(void *)(v0 + 952);
          swift_errorRelease();
          sub_1001C3EC0(v52, v51, v50);
          sub_1001C3EC0(v52, v51, v50);
          swift_errorRelease();
          swift_errorRelease();

          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
        }
        uint64_t v62 = *(void *)(v0 + 1272) + 1;
        uint64_t v32 = (char *)(v0 + 1556);
        if (v62 == *(void *)(v0 + 1256))
        {
          uint64_t v140 = *(void *)(v0 + 1280);
          swift_bridgeObjectRelease();
          if (*(void *)(v140 + 16))
          {
            uint64_t v153 = v140;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v153 = 0;
          }
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v141 = *(uint64_t (**)(uint64_t))(v0 + 8);
          return v141(v153);
        }
        *(void *)(v0 + 1272) = v62;
        *(void *)(v0 + 1264) = v162;
        uint64_t v63 = *(void *)(v0 + 896) + 24 * v62;
        uint64_t v64 = *(void *)(v63 + 32);
        *(void *)(v0 + 1288) = v64;
        uint64_t v65 = *(void **)(v63 + 40);
        *(void *)(v0 + 1296) = v65;
        LODWORD(v63) = *(unsigned __int8 *)(v63 + 48);
        *(unsigned char *)(v0 + 1556) = v63;
        if (v63 != 1) {
          break;
        }
        id v66 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain_n();
        NSString v67 = String._bridgeToObjectiveC()();
        sub_1001C3EC0(v64, (uint64_t)v65, 1);
        *uint64_t v157 = 0;
        id v68 = [v66 initWithBundleIdentifier:v67 allowPlaceholder:0 error:v157];

        id v69 = *v157;
        if (!v68)
        {
          id v70 = v69;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
          swift_allocError();
          uint64_t v72 = v71;
          *(void *)(v0 + 800) = 0;
          *(void *)(v0 + 808) = 0xE000000000000000;
          _StringGuts.grow(_:)(18);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 784) = 0x20746F6E20707041;
          *(void *)(v0 + 792) = 0xEF2820646E756F66;
          v73._uint64_t countAndFlagsBits = v64;
          v73._object = v65;
          String.append(_:)(v73);
          v74._uint64_t countAndFlagsBits = 41;
          v74._object = (void *)0xE100000000000000;
          String.append(_:)(v74);
          uint64_t v75 = *(void *)(v0 + 784);
          uint64_t v76 = *(void *)(v0 + 792);
          *uint64_t v72 = 0x6C6177656E6572;
          v72[1] = 0xE700000000000000;
          v72[2] = v75;
          v72[3] = v76;
          goto LABEL_39;
        }
LABEL_33:
        *(void *)(v0 + 1304) = v68;
        uint64_t v79 = *(void *)(v0 + 920);
        id v80 = v69;
        if (!v79) {
          goto LABEL_42;
        }
        swift_bridgeObjectRetain();
        id v81 = [v68 iTunesMetadata];
        id v82 = [v81 distributorInfo];

        id v83 = [v82 distributorID];
        uint64_t v84 = *(void *)(v0 + 920);
        if (!v83)
        {
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        uint64_t v85 = *(void *)(v0 + 912);
        uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v88 = v87;

        if (v86 == v85 && v84 == v88)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v96)
        {
LABEL_42:
          id v97 = objc_msgSend(v68, "iTunesMetadata", v152);
          id v98 = [v97 distributorInfo];

          id v99 = [v98 distributorID];
          if (!v99) {
            goto LABEL_14;
          }
          uint64_t v100 = v99;
          uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v103 = v102;

          id v104 = [v68 bundleIdentifier];
          if (v104)
          {
            uint64_t v105 = v104;
            uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v108 = v107;

            if (v101 == v106 && v103 == v108)
            {
              swift_bridgeObjectRelease();
LABEL_49:
              swift_bridgeObjectRelease();
              id v110 = [v98 domain];
              if (v110)
              {
                uint64_t v111 = v110;
                uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v103 = v112;

                *(void *)(v0 + 464) = &type metadata for WebDistributor;
                unint64_t v113 = sub_1002BEA38();
                goto LABEL_52;
              }
LABEL_14:

              *(void *)(v0 + 472) = 0;
              *uint64_t v154 = 0u;
              *(_OWORD *)(v0 + 456) = 0u;
              sub_10001729C((uint64_t)v154, &qword_10065D3A0);
              swift_allocError();
              *uint64_t v33 = 0x6C6177656E6572;
              v33[1] = 0xE700000000000000;
              _OWORD v33[2] = 0xD000000000000014;
              unint64_t v34 = 0x80000001005BFF30;
              goto LABEL_15;
            }
            char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v109) {
              goto LABEL_49;
            }
          }
          *(void *)(v0 + 464) = &type metadata for NativeDistributor;
          unint64_t v113 = sub_1002F9EF8();
LABEL_52:
          *(void *)(v0 + 472) = v113;

          *(void *)(v0 + 440) = v101;
          *(void *)(v0 + 448) = v103;
          sub_10018B164(v154, v155);
          id v114 = [v68 iTunesMetadata];
          id v115 = [v114 distributorInfo];

          id v116 = [v115 accountID];
          if (v116)
          {
            uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v119 = v118;

            *(void *)(v0 + 1312) = v117;
            *(void *)(v0 + 1320) = v119;
            id v120 = [v68 bundleIdentifier];
            if (v120)
            {
              uint64_t v121 = v120;
              uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v124 = v123;

              *(void *)(v0 + 1328) = v122;
              *(void *)(v0 + 1336) = v124;
              sub_10019B17C(v155, v0 + 360);
              sub_1000172F8(&qword_10065C450);
              if (swift_dynamicCast())
              {
                uint64_t countAndFlagsBits = *(void *)(v0 + 736);
                object = *(void **)(v0 + 744);
LABEL_77:
                *(void *)(v0 + 1352) = object;
                *(void *)(v0 + 1344) = countAndFlagsBits;
                uint64_t v149 = swift_task_alloc();
                *(void *)(v0 + 1360) = v149;
                *(void *)(v149 + 16) = v122;
                *(void *)(v149 + 24) = v124;
                uint64_t v21 = swift_task_alloc();
                *(void *)(v0 + 1368) = v21;
                *(void *)(v21 + 16) = sub_10049A624;
                *(void *)(v21 + 24) = v149;
                uint64_t v150 = dword_100660778;
                uint64_t v151 = (void *)swift_task_alloc();
                *(void *)(v0 + 1376) = v151;
                void *v151 = v0;
                v151[1] = sub_10048B75C;
                uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v150);
                uint64_t v25 = sub_10049A654;
                goto LABEL_9;
              }
              id v125 = [v68 iTunesMetadata];
              id v126 = [v125 distributorInfo];

              id v127 = [v126 sourceURL];
              if (v127)
              {
                static URL._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v128 = 0;
              }
              else
              {
                uint64_t v128 = 1;
              }
              uint64_t v133 = *(void *)(v0 + 1248);
              uint64_t v134 = *(void *)(v0 + 1240);
              uint64_t v135 = *(void *)(v0 + 1168);
              uint64_t v136 = *(void *)(v0 + 1160);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v134, v128, 1, v136);
              sub_10026400C(v134, v133);
              int v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v133, 1, v136);
              uint64_t v138 = *(void *)(v0 + 1248);
              if (v137)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10001729C(v138, &qword_10065C3C0);
                uint64_t v32 = (char *)(v0 + 1556);
              }
              else
              {
                (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
                sub_10001729C(v138, &qword_10065C3C0);
                Swift::String_optional v139 = URL.host(percentEncoded:)(1);
                uint64_t v32 = (char *)(v0 + 1556);
                if (v139.value._object)
                {
                  uint64_t countAndFlagsBits = v139.value._countAndFlagsBits;
                  object = v139.value._object;
                  uint64_t v144 = URL.port.getter();
                  if ((v145 & 1) == 0)
                  {
                    uint64_t v146 = v144;
                    *(Swift::String_optional *)(v0 + 768) = v139;
                    v147._uint64_t countAndFlagsBits = 58;
                    v147._object = (void *)0xE100000000000000;
                    String.append(_:)(v147);
                    *(void *)(v0 + 856) = v146;
                    v148._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v148);
                    swift_bridgeObjectRelease();
                    uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                    object = *(void **)(v0 + 776);
                  }
                  (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                  goto LABEL_77;
                }
                (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_allocError();
              *uint64_t v131 = 0x6C6177656E6572;
              v131[1] = 0xE700000000000000;
              v131[2] = 0xD000000000000010;
              unint64_t v132 = 0x80000001005BFF90;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_allocError();
              *uint64_t v131 = 0x6C6177656E6572;
              v131[1] = 0xE700000000000000;
              v131[2] = 0xD000000000000013;
              unint64_t v132 = 0x80000001005BFF70;
            }
            v131[3] = v132;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();

            uint64_t v130 = v0 + 560;
          }
          else
          {
            swift_allocError();
            void *v129 = 0x6C6177656E6572;
            v129[1] = 0xE700000000000000;
            v129[2] = 0xD000000000000013;
            v129[3] = 0x80000001005BFF50;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();

            uint64_t v130 = v0 + 560;
          }
          sub_100014524(v130);
        }
        else
        {
LABEL_47:
          swift_allocError();
          *uint64_t v33 = 0x6C6177656E6572;
          v33[1] = 0xE700000000000000;
          _OWORD v33[2] = 0x20746F6E20707041;
          unint64_t v34 = 0xED0000646E756F66;
LABEL_15:
          v33[3] = v34;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
        }
      }
      id v77 = objc_allocWithZone((Class)LSApplicationRecord);
      *Swift::String v156 = 0;
      id v78 = [v77 initWithStoreItemIdentifier:v64 error:v156];
      id v69 = *v156;
      if (v78)
      {
        id v68 = v78;
        goto LABEL_33;
      }
      id v89 = v69;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      swift_allocError();
      uint64_t v91 = v90;
      *(void *)(v0 + 720) = 0;
      *(void *)(v0 + 728) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 752) = 0x20746F6E20707041;
      *(void *)(v0 + 760) = 0xEF2820646E756F66;
      *(void *)(v0 + 888) = v64;
      v92._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      v93._uint64_t countAndFlagsBits = 41;
      v93._object = (void *)0xE100000000000000;
      String.append(_:)(v93);
      uint64_t v94 = *(void *)(v0 + 752);
      uint64_t v95 = *(void *)(v0 + 760);
      *uint64_t v91 = 0x6C6177656E6572;
      v91[1] = 0xE700000000000000;
      v91[2] = v94;
      v91[3] = v95;
LABEL_39:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  uint64_t v18 = *(void *)(v0 + 1336);
  uint64_t v19 = *(void *)(v0 + 1328);
  v17(*(void *)(v0 + 1184), *(void *)(v0 + 1200), *(void *)(v0 + 1160));
  uint64_t v20 = swift_task_alloc();
  *(void *)(v0 + 1504) = v20;
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = swift_task_alloc();
  *(void *)(v0 + 1512) = v21;
  *(void *)(v21 + 16) = sub_10049A69C;
  *(void *)(v21 + 24) = v20;
  uint64_t v22 = dword_100660770;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 1520) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100490304;
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660770 + v22);
  uint64_t v25 = sub_10049A6C8;
LABEL_9:
  return v24((uint64_t)v25, v21);
}

uint64_t sub_100494994()
{
  uint64_t v129 = (long long *)(v0 + 440);
  int v137 = (uint64_t *)(v0 + 816);
  uint64_t v130 = (void **)(v0 + 864);
  uint64_t v131 = (void **)(v0 + 832);
  unint64_t v132 = (void **)(v0 + 872);
  uint64_t v1 = *(void **)(v0 + 1304);
  uint64_t v2 = *(void *)(v0 + 1232);
  uint64_t v3 = *(void *)(v0 + 1184);
  uint64_t v4 = *(void *)(v0 + 1168);
  uint64_t v5 = *(void *)(v0 + 1160);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10001729C(v2, &qword_10065C3C0);
  uint64_t v128 = v0 + 560;
  sub_100014524(v0 + 560);
  uint64_t v6 = (char *)(v0 + 1556);
  uint64_t v136 = *(void *)(v0 + 1496);
  Swift::String_optional v139 = (char *)(v0 + 1556);
  while (1)
  {
    char v9 = *v6;
    uint64_t v10 = *(void *)(v0 + 1296);
    uint64_t v11 = *(void *)(v0 + 1288);
    static Logger.ald.getter();
    swift_errorRetain();
    sub_1001C3ED0(v11, v10, v9);
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v135 = v13;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v138 = (void *)swift_slowAlloc();
      uint64_t *v137 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412802;
      if (qword_10065B150 != -1) {
        swift_once();
      }
      TaskLocal.get()();
      uint64_t v15 = *(void *)(v0 + 608);
      if (!v15) {
        goto LABEL_9;
      }
      swift_release();
      swift_release();
      swift_release();
      os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
      sub_100006250((void **)(v15 + 16), v132);
      os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
      uint64_t v16 = (uint64_t)*v132;
      swift_release();
      if (!v16)
      {
LABEL_9:
        (*(void (**)(void, void, void))(*(void *)(v0 + 936) + 104))(*(void *)(v0 + 944), *(unsigned int *)(v0 + 1552), *(void *)(v0 + 928));
        id v17 = objc_allocWithZone((Class)type metadata accessor for LogKey());
        uint64_t v16 = LogKey.init(prefix:)();
      }
      int v18 = *v139;
      *(void *)(v14 + 4) = v16;
      void *v138 = v16;
      *(_WORD *)(v14 + 12) = 2082;
      if (v18 == 1)
      {
        uint64_t v19 = *(void *)(v0 + 1296);
        swift_bridgeObjectRetain();
        uint64_t v20 = *(void *)(v0 + 1288);
        char v21 = 1;
        uint64_t v22 = v20;
        unint64_t v23 = v19;
      }
      else
      {
        *(void *)(v0 + 848) = *(void *)(v0 + 1288);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v23 = v30;
        char v21 = *v139;
        uint64_t v19 = *(void *)(v0 + 1296);
        uint64_t v20 = *(void *)(v0 + 1288);
      }
      uint64_t v31 = *(void *)(v0 + 960);
      uint64_t v133 = *(void *)(v0 + 952);
      uint64_t v134 = *(void *)(v0 + 968);
      *(void *)(v14 + 14) = sub_1000143F4(v22, v23, v137);
      swift_bridgeObjectRelease();
      sub_1001C3EC0(v20, v19, v21);
      sub_1001C3EC0(v20, v19, v21);
      *(_WORD *)(v14 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v32 = *(void *)(*(void *)(v0 + 688) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v32 + 16))();
      uint64_t v33 = String.init<A>(describing:)();
      unint64_t v35 = v34;
      swift_task_dealloc();
      *(void *)(v14 + 24) = sub_1000143F4(v33, v35, v137);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v134, v133);
    }
    else
    {
      char v24 = *v6;
      uint64_t v25 = *(void *)(v0 + 1296);
      uint64_t v26 = *(void *)(v0 + 1288);
      uint64_t v27 = *(void *)(v0 + 968);
      uint64_t v28 = *(void *)(v0 + 960);
      uint64_t v29 = *(void *)(v0 + 952);
      swift_errorRelease();
      sub_1001C3EC0(v26, v25, v24);
      sub_1001C3EC0(v26, v25, v24);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
    uint64_t v36 = *(void *)(v0 + 1272) + 1;
    uint64_t v6 = (char *)(v0 + 1556);
    if (v36 == *(void *)(v0 + 1256)) {
      break;
    }
    *(void *)(v0 + 1272) = v36;
    *(void *)(v0 + 1264) = v136;
    uint64_t v37 = *(void *)(v0 + 896) + 24 * v36;
    uint64_t v38 = *(void *)(v37 + 32);
    *(void *)(v0 + 1288) = v38;
    os_log_type_t v39 = *(void **)(v37 + 40);
    *(void *)(v0 + 1296) = v39;
    LODWORD(v37) = *(unsigned __int8 *)(v37 + 48);
    char *v139 = v37;
    if (v37 == 1)
    {
      id v40 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain_n();
      NSString v41 = String._bridgeToObjectiveC()();
      sub_1001C3EC0(v38, (uint64_t)v39, 1);
      *uint64_t v131 = 0;
      id v42 = [v40 initWithBundleIdentifier:v41 allowPlaceholder:0 error:v131];

      id v43 = *v131;
      if (!v42)
      {
        id v44 = v43;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        uint64_t v46 = v45;
        *(void *)(v0 + 800) = 0;
        *(void *)(v0 + 808) = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 784) = 0x20746F6E20707041;
        *(void *)(v0 + 792) = 0xEF2820646E756F66;
        v47._uint64_t countAndFlagsBits = v38;
        v47._object = v39;
        String.append(_:)(v47);
        v48._uint64_t countAndFlagsBits = 41;
        v48._object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        uint64_t v49 = *(void *)(v0 + 784);
        uint64_t v50 = *(void *)(v0 + 792);
        *uint64_t v46 = 0x6C6177656E6572;
        v46[1] = 0xE700000000000000;
        v46[2] = v49;
        v46[3] = v50;
        goto LABEL_27;
      }
LABEL_21:
      *(void *)(v0 + 1304) = v42;
      uint64_t v53 = *(void *)(v0 + 920);
      id v54 = v43;
      if (!v53) {
        goto LABEL_30;
      }
      swift_bridgeObjectRetain();
      id v55 = [v42 iTunesMetadata];
      id v56 = [v55 distributorInfo];

      id v57 = [v56 distributorID];
      uint64_t v58 = *(void *)(v0 + 920);
      if (!v57)
      {
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      uint64_t v59 = *(void *)(v0 + 912);
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v61;

      if (v60 == v59 && v58 == v62)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v70)
      {
LABEL_30:
        id v71 = [v42 iTunesMetadata];
        id v72 = [v71 distributorInfo];

        id v73 = [v72 distributorID];
        if (!v73) {
          goto LABEL_2;
        }
        Swift::String v74 = v73;
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v77 = v76;

        id v78 = [v42 bundleIdentifier];
        if (v78)
        {
          uint64_t v79 = v78;
          uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v82 = v81;

          if (v75 == v80 && v77 == v82)
          {
            swift_bridgeObjectRelease();
LABEL_37:
            swift_bridgeObjectRelease();
            id v84 = [v72 domain];
            uint64_t v6 = (char *)(v0 + 1556);
            if (v84)
            {
              uint64_t v85 = v84;
              uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v77 = v86;

              *(void *)(v0 + 464) = &type metadata for WebDistributor;
              unint64_t v87 = sub_1002BEA38();
              goto LABEL_40;
            }
LABEL_2:

            *(void *)(v0 + 472) = 0;
            long long *v129 = 0u;
            *(_OWORD *)(v0 + 456) = 0u;
            sub_10001729C((uint64_t)v129, &qword_10065D3A0);
            type metadata accessor for InternalError();
            sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
            swift_allocError();
            void *v7 = 0x6C6177656E6572;
            v7[1] = 0xE700000000000000;
            v7[2] = 0xD000000000000014;
            unint64_t v8 = 0x80000001005BFF30;
            goto LABEL_3;
          }
          char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v83) {
            goto LABEL_37;
          }
        }
        *(void *)(v0 + 464) = &type metadata for NativeDistributor;
        unint64_t v87 = sub_1002F9EF8();
        uint64_t v6 = (char *)(v0 + 1556);
LABEL_40:
        *(void *)(v0 + 472) = v87;

        *(void *)(v0 + 440) = v75;
        *(void *)(v0 + 448) = v77;
        sub_10018B164(v129, v128);
        id v88 = [v42 iTunesMetadata];
        id v89 = [v88 distributorInfo];

        id v90 = [v89 accountID];
        if (!v90)
        {
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          void *v103 = 0x6C6177656E6572;
          v103[1] = 0xE700000000000000;
          _OWORD v103[2] = 0xD000000000000013;
          unint64_t v104 = 0x80000001005BFF50;
          goto LABEL_47;
        }
        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v93 = v92;

        *(void *)(v0 + 1312) = v91;
        *(void *)(v0 + 1320) = v93;
        id v94 = [v42 bundleIdentifier];
        if (v94)
        {
          uint64_t v95 = v94;
          uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v98 = v97;

          *(void *)(v0 + 1328) = v96;
          *(void *)(v0 + 1336) = v98;
          sub_10019B17C(v128, v0 + 360);
          sub_1000172F8(&qword_10065C450);
          if (swift_dynamicCast())
          {
            uint64_t countAndFlagsBits = *(void *)(v0 + 736);
            object = *(void **)(v0 + 744);
LABEL_64:
            *(void *)(v0 + 1352) = object;
            *(void *)(v0 + 1344) = countAndFlagsBits;
            uint64_t v123 = swift_task_alloc();
            *(void *)(v0 + 1360) = v123;
            *(void *)(v123 + 16) = v96;
            *(void *)(v123 + 24) = v98;
            uint64_t v124 = swift_task_alloc();
            *(void *)(v0 + 1368) = v124;
            *(void *)(v124 + 16) = sub_10049A624;
            *(void *)(v124 + 24) = v123;
            uint64_t v125 = dword_100660778;
            id v126 = (void *)swift_task_alloc();
            *(void *)(v0 + 1376) = v126;
            *id v126 = v0;
            v126[1] = sub_10048B75C;
            return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660778 + v125))((uint64_t)sub_10049A654, v124);
          }
          id v99 = [v42 iTunesMetadata];
          id v100 = [v99 distributorInfo];

          id v101 = [v100 sourceURL];
          if (v101)
          {
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v102 = 0;
          }
          else
          {
            uint64_t v102 = 1;
          }
          uint64_t v105 = *(void *)(v0 + 1248);
          uint64_t v106 = *(void *)(v0 + 1240);
          uint64_t v107 = *(void *)(v0 + 1168);
          uint64_t v108 = *(void *)(v0 + 1160);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v106, v102, 1, v108);
          sub_10026400C(v106, v105);
          int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v105, 1, v108);
          uint64_t v110 = *(void *)(v0 + 1248);
          if (v109)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10001729C(v110, &qword_10065C3C0);
          }
          else
          {
            (*(void (**)(void, void, void))(*(void *)(v0 + 1168) + 16))(*(void *)(v0 + 1192), *(void *)(v0 + 1248), *(void *)(v0 + 1160));
            sub_10001729C(v110, &qword_10065C3C0);
            Swift::String_optional v111 = URL.host(percentEncoded:)(1);
            if (v111.value._object)
            {
              uint64_t countAndFlagsBits = v111.value._countAndFlagsBits;
              object = v111.value._object;
              uint64_t v118 = URL.port.getter();
              if ((v119 & 1) == 0)
              {
                uint64_t v120 = v118;
                *(Swift::String_optional *)(v0 + 768) = v111;
                v121._uint64_t countAndFlagsBits = 58;
                v121._object = (void *)0xE100000000000000;
                String.append(_:)(v121);
                *(void *)(v0 + 856) = v120;
                v122._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v122);
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = *(void *)(v0 + 768);
                object = *(void **)(v0 + 776);
              }
              (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
              goto LABEL_64;
            }
            (*(void (**)(void, void))(*(void *)(v0 + 1168) + 8))(*(void *)(v0 + 1192), *(void *)(v0 + 1160));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          *uint64_t v112 = 0x6C6177656E6572;
          v112[1] = 0xE700000000000000;
          v112[2] = 0xD000000000000010;
          v112[3] = 0x80000001005BFF90;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          sub_100014524(v128);
          uint64_t v6 = (char *)(v0 + 1556);
        }
        else
        {
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
          swift_allocError();
          void *v103 = 0x6C6177656E6572;
          v103[1] = 0xE700000000000000;
          _OWORD v103[2] = 0xD000000000000013;
          unint64_t v104 = 0x80000001005BFF70;
LABEL_47:
          v103[3] = v104;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();

          sub_100014524(v128);
        }
      }
      else
      {
LABEL_35:
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        void *v7 = 0x6C6177656E6572;
        v7[1] = 0xE700000000000000;
        v7[2] = 0x20746F6E20707041;
        unint64_t v8 = 0xED0000646E756F66;
LABEL_3:
        v7[3] = v8;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
    }
    else
    {
      id v51 = objc_allocWithZone((Class)LSApplicationRecord);
      void *v130 = 0;
      id v52 = [v51 initWithStoreItemIdentifier:v38 error:v130];
      id v43 = *v130;
      if (v52)
      {
        id v42 = v52;
        goto LABEL_21;
      }
      id v63 = v43;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      type metadata accessor for InternalError();
      sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      uint64_t v65 = v64;
      *(void *)(v0 + 720) = 0;
      *(void *)(v0 + 728) = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 752) = 0x20746F6E20707041;
      *(void *)(v0 + 760) = 0xEF2820646E756F66;
      *(void *)(v0 + 888) = v38;
      v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v66);
      swift_bridgeObjectRelease();
      v67._uint64_t countAndFlagsBits = 41;
      v67._object = (void *)0xE100000000000000;
      String.append(_:)(v67);
      uint64_t v68 = *(void *)(v0 + 752);
      uint64_t v69 = *(void *)(v0 + 760);
      *uint64_t v65 = 0x6C6177656E6572;
      v65[1] = 0xE700000000000000;
      v65[2] = v68;
      v65[3] = v69;
LABEL_27:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  uint64_t v113 = *(void *)(v0 + 1280);
  swift_bridgeObjectRelease();
  if (*(void *)(v113 + 16))
  {
    uint64_t v127 = v113;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v127 = 0;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v114 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v114(v127);
}

uint64_t sub_100495E44(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 120) = a2;
  *(void *)(v2 + 88) = a1;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 96) = v3;
  *(void *)(v2 + 104) = *(void *)(v3 - 8);
  *(void *)(v2 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_100495F34, 0, 0);
}

uint64_t sub_100495F34()
{
  uint64_t v42 = v0;
  if ((*(unsigned char *)(v0 + 120) & 1) == 0)
  {
    uint64_t v1 = **(void **)(v0 + 88);
    id v2 = objc_allocWithZone((Class)LSApplicationRecord);
    *(void *)(v0 + 56) = 0;
    id v3 = [v2 initWithStoreItemIdentifier:v1 error:v0 + 56];
    uint64_t v4 = *(void **)(v0 + 56);
    if (v3)
    {
      uint64_t v5 = v3;
      id v6 = v4;
      id v7 = [v5 bundleIdentifier];
      if (v7)
      {
        unint64_t v8 = v7;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v9 = objc_allocWithZone((Class)IXApplicationIdentity);
        NSString v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v11 = [v9 initWithBundleID:v10];

        uint64_t v12 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 80) = 0;
        LOBYTE(v12) = [(id)v12 updateSINFForAppWithIdentity:v11 sinfData:isa options:0 error:v0 + 80];

        uint64_t v14 = *(void **)(v0 + 80);
        if (v12)
        {
          id v15 = v14;

          goto LABEL_12;
        }
        id v22 = v14;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
      else
      {
        type metadata accessor for InternalError();
        sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
        swift_allocError();
        int v18 = v17;
        _StringGuts.grow(_:)(26);
        swift_bridgeObjectRelease();
        uint64_t v40 = 0xD000000000000018;
        unint64_t v41 = 0x80000001005BFF10;
        *(void *)(v0 + 72) = v1;
        v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t v20 = v40;
        unint64_t v21 = v41;
        *int v18 = 0x726961706572;
        v18[1] = 0xE600000000000000;
        _OWORD v18[2] = v20;
        v18[3] = v21;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
      }
    }
    else
    {
      id v16 = v4;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    static Logger.ald.getter();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v27 = *(void *)(v0 + 104);
    uint64_t v26 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 96);
    if (v25)
    {
      uint64_t v39 = *(void *)(v0 + 112);
      uint64_t v29 = swift_slowAlloc();
      uint64_t v37 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412546;
      uint64_t v38 = v28;
      uint64_t v30 = sub_1005163F0();
      *(void *)(v0 + 40) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v30;
      *(_WORD *)(v29 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v31 = *(void *)(*(void *)(v0 + 24) - 8);
      swift_task_alloc();
      (*(void (**)(void))(v31 + 16))();
      uint64_t v32 = String.init<A>(describing:)();
      unint64_t v34 = v33;
      swift_task_dealloc();
      *(void *)(v0 + 64) = sub_1000143F4(v32, v34, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Error saving app key: : %{public}s", (uint8_t *)v29, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v39, v38);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    }
  }
LABEL_12:
  swift_task_dealloc();
  unint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
  return v35();
}

uint64_t sub_1004964EC(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1004965AC, 0, 0);
}

uint64_t sub_1004965AC()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_task_alloc();
  v0[13] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v5 = (uint64_t (*)(void))((char *)&dword_100660670 + dword_100660670);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100496684;
  return v5();
}

uint64_t sub_100496684()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100496800;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1004967A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004967A0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100496800()
{
  Swift::String v19 = v0;
  swift_task_dealloc();
  static Logger.ald.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[10];
    uint64_t v17 = v0[12];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412546;
    uint64_t v5 = sub_1005163F0();
    v0[5] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    *(_WORD *)(v3 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v6 = *(void *)(v0[3] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v6 + 16))();
    uint64_t v7 = String.init<A>(describing:)();
    unint64_t v9 = v8;
    swift_task_dealloc();
    v0[7] = sub_1000143F4(v7, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Error saving license key: : %{public}s", (uint8_t *)v3, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  }
  else
  {
    uint64_t v11 = v0[11];
    uint64_t v10 = v0[12];
    uint64_t v12 = v0[10];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc();
  os_log_type_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100496B38(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 144) = a3;
  *(void *)(v4 + 152) = a4;
  *(unsigned char *)(v4 + 280) = a2;
  *(void *)(v4 + 136) = a1;
  *(void *)(v4 + 160) = type metadata accessor for NewLicenseBatch(0);
  *(void *)(v4 + 168) = swift_task_alloc();
  *(void *)(v4 + 176) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 184) = v5;
  *(void *)(v4 + 192) = *(void *)(v5 - 8);
  *(void *)(v4 + 200) = swift_task_alloc();
  *(void *)(v4 + 208) = type metadata accessor for ADPNewLicenseTask(0);
  *(void *)(v4 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100496C70, 0, 0);
}

uint64_t sub_100496C70()
{
  os_log_type_t v2 = *(int **)(v0 + 208);
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 152);
  char v4 = *(unsigned char *)(v0 + 280);
  sub_10049A770(*(void *)(v0 + 136), v1, type metadata accessor for NewLicenseBatch);
  uint64_t v5 = sub_1005163F0();
  *(unsigned char *)(v1 + v2[5]) = v4;
  *(void *)(v1 + v2[6]) = v5;
  *(void *)(v1 + v2[7]) = v3;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100496D5C;
  return sub_1002EAE10();
}

uint64_t sub_100496D5C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 232) = a1;
  *(void *)(v3 + 240) = v1;
  swift_task_dealloc();
  if (v1) {
    char v4 = sub_100497438;
  }
  else {
    char v4 = sub_100496E70;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100496E70()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 248) = v2;
  if (v2)
  {
    uint64_t v3 = v0 + 16;
    *(void *)(v0 + 256) = 0;
    long long v4 = *(_OWORD *)(v1 + 32);
    long long v5 = *(_OWORD *)(v1 + 48);
    long long v6 = *(_OWORD *)(v1 + 64);
    *(void *)(v0 + 64) = *(void *)(v1 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    *(_OWORD *)(v0 + 48) = v6;
    *(_OWORD *)(v0 + 16) = v4;
    char v7 = *(unsigned char *)(v0 + 48);
    swift_bridgeObjectRetain();
    sub_10049A5BC(v0 + 16);
    if (v7)
    {
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_10049733C;
      uint64_t v9 = *(void *)(v0 + 144);
      return sub_1004964EC(v3, v9);
    }
    else
    {
      os_log_type_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v13;
      *os_log_type_t v13 = v0;
      v13[1] = sub_100497048;
      return sub_100495E44(v3, 0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10049A7D8(*(void *)(v0 + 216), type metadata accessor for ADPNewLicenseTask);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(BOOL))(v0 + 8);
    BOOL v12 = *(void *)(v0 + 240) == 0;
    return v11(v12);
  }
}

uint64_t sub_100497048()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100497144, 0, 0);
}

uint64_t sub_100497144()
{
  uint64_t v1 = (_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256) + 1;
  sub_1002745A0(v0 + 16);
  if (v3 == v2)
  {
    swift_bridgeObjectRelease_n();
    sub_10049A7D8(*(void *)(v0 + 216), type metadata accessor for ADPNewLicenseTask);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v4 = *(uint64_t (**)(BOOL))(v0 + 8);
    BOOL v5 = *(void *)(v0 + 240) == 0;
    return v4(v5);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 256) + 1;
    *(void *)(v0 + 256) = v7;
    uint64_t v8 = *(void *)(v0 + 232) + 56 * v7;
    long long v10 = *(_OWORD *)(v8 + 32);
    long long v9 = *(_OWORD *)(v8 + 48);
    long long v11 = *(_OWORD *)(v8 + 64);
    *(void *)(v0 + 64) = *(void *)(v8 + 80);
    *(_OWORD *)(v0 + 32) = v9;
    *(_OWORD *)(v0 + 48) = v11;
    *uint64_t v1 = v10;
    char v12 = *(unsigned char *)(v0 + 48);
    sub_10049A5BC(v0 + 16);
    if (v12)
    {
      os_log_type_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v13;
      *os_log_type_t v13 = v0;
      v13[1] = sub_10049733C;
      uint64_t v14 = *(void *)(v0 + 144);
      return sub_1004964EC((uint64_t)v1, v14);
    }
    else
    {
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 264) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_100497048;
      return sub_100495E44((uint64_t)v1, 0);
    }
  }
}

uint64_t sub_10049733C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10049C378, 0, 0);
}

uint64_t sub_100497438()
{
  unint64_t v33 = v0;
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  sub_10049A7D8(v0[27], type metadata accessor for ADPNewLicenseTask);
  static Logger.ald.getter();
  sub_10049A770(v1, v2, type metadata accessor for NewLicenseBatch);
  sub_10049A770(v1, v3, type metadata accessor for NewLicenseBatch);
  swift_errorRetain();
  swift_errorRetain();
  long long v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v29 = v0[24];
    long long v6 = (void *)v0[22];
    uint64_t v30 = v0[23];
    uint64_t v31 = v0[25];
    uint64_t v25 = v0[20];
    uint64_t v26 = v0[21];
    os_log_t log = v4;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138413058;
    uint64_t v8 = sub_1005163F0();
    v0[15] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v8;
    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v9 = v6[3];
    uint64_t v10 = v6[4];
    sub_10018AC60(v6, v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
    v0[12] = sub_1000143F4(v11, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10049A7D8((uint64_t)v6, type metadata accessor for NewLicenseBatch);
    *(_WORD *)(v7 + 22) = 2050;
    uint64_t v13 = *(void *)(v26 + *(int *)(v25 + 36));
    sub_10049A7D8(v26, type metadata accessor for NewLicenseBatch);
    v0[13] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 32) = 2082;
    swift_getErrorValue();
    uint64_t v14 = *(void *)(v0[10] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v14 + 16))();
    uint64_t v15 = String.init<A>(describing:)();
    unint64_t v17 = v16;
    swift_task_dealloc();
    v0[16] = sub_1000143F4(v15, v17, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
  }
  else
  {
    uint64_t v19 = v0[24];
    uint64_t v18 = v0[25];
    uint64_t v21 = v0[22];
    uint64_t v20 = v0[23];
    sub_10049A7D8(v0[21], type metadata accessor for NewLicenseBatch);
    swift_errorRelease();
    sub_10049A7D8(v21, type metadata accessor for NewLicenseBatch);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = (uint64_t (*)(BOOL))v0[1];
  BOOL v23 = v0[30] == 0;
  return v22(v23);
}

uint64_t sub_100497904(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 192) = a4;
  *(void *)(v5 + 200) = a5;
  *(unsigned char *)(v5 + 288) = a2;
  *(void *)(v5 + 176) = a1;
  *(void *)(v5 + 184) = a3;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 208) = v6;
  *(void *)(v5 + 216) = *(void *)(v6 - 8);
  *(void *)(v5 + 224) = swift_task_alloc();
  return _swift_task_switch(sub_1004979CC, 0, 0);
}

uint64_t sub_1004979CC()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  char v3 = *(unsigned char *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 176);
  swift_retain();
  uint64_t v5 = sub_1005163F0();
  *(void *)(v0 + 232) = v5;
  *(void *)(v0 + 72) = v4;
  *(unsigned char *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = v5;
  *(void *)(v0 + 96) = v1;
  *(void *)(v0 + 104) = v2;
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100497AAC;
  return sub_1003BAFD4();
}

uint64_t sub_100497AAC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 248) = a1;
  *(void *)(v3 + 256) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100497FF0;
  }
  else {
    uint64_t v4 = sub_100497BC0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100497BC0()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 264) = v2;
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(v0 + 16);
    *(void *)(v0 + 272) = 0;
    long long v4 = *(_OWORD *)(v1 + 32);
    long long v5 = *(_OWORD *)(v1 + 48);
    long long v6 = *(_OWORD *)(v1 + 64);
    *(void *)(v0 + 64) = *(void *)(v1 + 80);
    *(_OWORD *)(v0 + 32) = v5;
    *(_OWORD *)(v0 + 48) = v6;
    *(_OWORD *)(v0 + 16) = v4;
    char v7 = *(unsigned char *)(v0 + 48);
    swift_bridgeObjectRetain();
    sub_10049A5BC(v0 + 16);
    if (v7)
    {
LABEL_5:
      unint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v16;
      *unint64_t v16 = v0;
      v16[1] = sub_100497D7C;
      uint64_t v17 = *(void *)(v0 + 184);
      return sub_1004964EC((uint64_t)v3, v17);
    }
    while (1)
    {
      uint64_t v8 = *(void *)(v0 + 264);
      uint64_t v9 = *(void *)(v0 + 272) + 1;
      sub_1002745A0(v0 + 16);
      if (v9 == v8) {
        break;
      }
      uint64_t v10 = *(void *)(v0 + 272) + 1;
      *(void *)(v0 + 272) = v10;
      uint64_t v11 = *(void *)(v0 + 248) + 56 * v10;
      long long v13 = *(_OWORD *)(v11 + 32);
      long long v12 = *(_OWORD *)(v11 + 48);
      long long v14 = *(_OWORD *)(v11 + 64);
      *(void *)(v0 + 64) = *(void *)(v11 + 80);
      *(_OWORD *)(v0 + 32) = v12;
      *(_OWORD *)(v0 + 48) = v14;
      *uint64_t v3 = v13;
      char v15 = *(unsigned char *)(v0 + 48);
      sub_10049A5BC(v0 + 16);
      if (v15) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = *(void **)(v0 + 232);
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v21 = *(void *)(v0 + 256) == 0;
  return v20(v21);
}

uint64_t sub_100497D7C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100497E78, 0, 0);
}

uint64_t sub_100497E78()
{
  uint64_t v1 = (_OWORD *)(v0 + 16);
  while (1)
  {
    uint64_t v2 = *(void *)(v0 + 264);
    uint64_t v3 = *(void *)(v0 + 272) + 1;
    sub_1002745A0(v0 + 16);
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = *(void *)(v0 + 272) + 1;
    *(void *)(v0 + 272) = v4;
    uint64_t v5 = *(void *)(v0 + 248) + 56 * v4;
    long long v7 = *(_OWORD *)(v5 + 32);
    long long v6 = *(_OWORD *)(v5 + 48);
    long long v8 = *(_OWORD *)(v5 + 64);
    *(void *)(v0 + 64) = *(void *)(v5 + 80);
    *(_OWORD *)(v0 + 32) = v6;
    *(_OWORD *)(v0 + 48) = v8;
    *uint64_t v1 = v7;
    char v9 = *(unsigned char *)(v0 + 48);
    sub_10049A5BC(v0 + 16);
    if (v9)
    {
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 280) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_100497D7C;
      uint64_t v11 = *(void *)(v0 + 184);
      return sub_1004964EC((uint64_t)v1, v11);
    }
  }
  swift_bridgeObjectRelease();
  long long v13 = *(void **)(v0 + 232);
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  long long v14 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v15 = *(void *)(v0 + 256) == 0;
  return v14(v15);
}

uint64_t sub_100497FF0()
{
  uint64_t v30 = v0;
  uint64_t v1 = (void *)v0[29];
  swift_release();

  swift_release();
  swift_release();
  static Logger.ald.getter();
  swift_retain_n();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v26 = v0[27];
    uint64_t v27 = v0[26];
    uint64_t v28 = v0[28];
    uint64_t v4 = (void *)v0[22];
    os_log_t log = v2;
    uint64_t v5 = swift_slowAlloc();
    BOOL v23 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138413058;
    os_log_type_t type = v3;
    uint64_t v6 = sub_1005163F0();
    v0[20] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v23 = v6;
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v8 = v4[10];
    uint64_t v7 = v4[11];
    sub_10018AC60(v4 + 7, v8);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v8, v7);
    v0[17] = sub_1000143F4(v9, v10, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 22) = 2082;
    uint64_t v11 = v4[5];
    unint64_t v12 = v4[6];
    swift_bridgeObjectRetain();
    v0[18] = sub_1000143F4(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 32) = 2082;
    swift_getErrorValue();
    uint64_t v13 = *(void *)(v0[15] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v13 + 16))();
    uint64_t v14 = String.init<A>(describing:)();
    unint64_t v16 = v15;
    swift_task_dealloc();
    v0[21] = sub_1000143F4(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {
    uint64_t v18 = v0[27];
    uint64_t v17 = v0[28];
    uint64_t v19 = v0[26];
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  BOOL v21 = v0[32] == 0;
  return v20(v21);
}

uint64_t sub_100498460(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 132) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  type metadata accessor for NewLicenseBatch(0);
  *(void *)(v5 + 48) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LicenseUtilities.Batch();
  *(void *)(v5 + 56) = v6;
  *(void *)(v5 + 64) = *(void *)(v6 - 8);
  *(void *)(v5 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_100498554, 0, 0);
}

uint64_t sub_100498554()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 80) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 64);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 128) = v4;
    *(void *)(v0 + 88) = *(void *)(v3 + 72);
    *(void *)(v0 + 96) = 0;
    *(unsigned char *)(v0 + 133) = 1;
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v6 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain();
    sub_10049A770(v6, v5, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v8 = *(uint64_t **)(v0 + 72);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10049A708((uint64_t)v8, *(void *)(v0 + 48), type metadata accessor for NewLicenseBatch);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v9;
      void *v9 = v0;
      v9[1] = sub_100498760;
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      char v13 = *(unsigned char *)(v0 + 132);
      return sub_100496B38(v10, v13, v11, v12);
    }
    else
    {
      uint64_t v16 = *v8;
      *(void *)(v0 + 112) = *v8;
      uint64_t v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v17;
      *uint64_t v17 = v0;
      v17[1] = sub_100498A88;
      uint64_t v18 = *(void *)(v0 + 32);
      uint64_t v19 = *(void *)(v0 + 40);
      uint64_t v20 = *(void *)(v0 + 24);
      char v21 = *(unsigned char *)(v0 + 132);
      return sub_100497904(v16, v21, v20, v18, v19);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v15(1);
  }
}

uint64_t sub_100498760(char a1)
{
  *(unsigned char *)(*(void *)v1 + 134) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100498860, 0, 0);
}

uint64_t sub_100498860()
{
  char v1 = *(unsigned char *)(v0 + 134);
  char v2 = *(unsigned char *)(v0 + 133);
  sub_10049A7D8(*(void *)(v0 + 48), type metadata accessor for NewLicenseBatch);
  char v3 = v1 & v2;
  uint64_t v4 = *(void *)(v0 + 96) + 1;
  if (v4 == *(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5(v3 & 1);
  }
  else
  {
    *(void *)(v0 + 96) = v4;
    *(unsigned char *)(v0 + 133) = v3 & 1;
    sub_10049A770(*(void *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128))+ *(void *)(v0 + 88) * v4, *(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v8 = *(uint64_t **)(v0 + 72);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10049A708((uint64_t)v8, *(void *)(v0 + 48), type metadata accessor for NewLicenseBatch);
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v9;
      void *v9 = v0;
      v9[1] = sub_100498760;
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      char v13 = *(unsigned char *)(v0 + 132);
      return sub_100496B38(v10, v13, v11, v12);
    }
    else
    {
      uint64_t v14 = *v8;
      *(void *)(v0 + 112) = *v8;
      unint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v15;
      *unint64_t v15 = v0;
      v15[1] = sub_100498A88;
      uint64_t v16 = *(void *)(v0 + 32);
      uint64_t v17 = *(void *)(v0 + 40);
      uint64_t v18 = *(void *)(v0 + 24);
      char v19 = *(unsigned char *)(v0 + 132);
      return sub_100497904(v14, v19, v18, v16, v17);
    }
  }
}

uint64_t sub_100498A88(char a1)
{
  *(unsigned char *)(*(void *)v1 + 135) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100498B88, 0, 0);
}

uint64_t sub_100498B88()
{
  char v1 = *(unsigned char *)(v0 + 135);
  swift_release();
  if (v1) {
    uint64_t v2 = *(unsigned __int8 *)(v0 + 133);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v0 + 96) + 1;
  if (v3 == *(void *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v4(v2);
  }
  else
  {
    *(void *)(v0 + 96) = v3;
    *(unsigned char *)(v0 + 133) = v2;
    sub_10049A770(*(void *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 128) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 128))+ *(void *)(v0 + 88) * v3, *(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = *(uint64_t **)(v0 + 72);
    if (EnumCaseMultiPayload == 1)
    {
      sub_10049A708((uint64_t)v7, *(void *)(v0 + 48), type metadata accessor for NewLicenseBatch);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 104) = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_100498760;
      uint64_t v9 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 24);
      uint64_t v11 = *(void *)(v0 + 32);
      char v12 = *(unsigned char *)(v0 + 132);
      return sub_100496B38(v9, v12, v10, v11);
    }
    else
    {
      uint64_t v13 = *v7;
      *(void *)(v0 + 112) = *v7;
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100498A88;
      uint64_t v15 = *(void *)(v0 + 32);
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v17 = *(void *)(v0 + 24);
      char v18 = *(unsigned char *)(v0 + 132);
      return sub_100497904(v13, v18, v17, v15, v16);
    }
  }
}

uint64_t sub_100498DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 96) = a6;
  *(void *)(v7 + 104) = a7;
  *(unsigned char *)(v7 + 176) = a5;
  *(void *)(v7 + 80) = a3;
  *(void *)(v7 + 88) = a4;
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a2;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v7 + 112) = v8;
  *(void *)(v7 + 120) = *(void *)(v8 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100498E7C, 0, 0);
}

uint64_t sub_100498E7C()
{
  uint64_t v45 = v0;
  unint64_t v1 = v0[13];
  static Logger.ald.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[8];
  if (v4)
  {
    os_log_type_t v38 = v3;
    os_log_t log = v2;
    uint64_t v6 = v0[13];
    uint64_t v39 = v0[12];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412802;
    uint64_t v9 = sub_1005163F0();
    v0[3] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    *(_WORD *)(v7 + 12) = 2082;
    if (v6) {
      uint64_t v10 = v39;
    }
    else {
      uint64_t v10 = 0xD000000000000017;
    }
    if (v6) {
      unint64_t v11 = v1;
    }
    else {
      unint64_t v11 = 0x80000001005B7710;
    }
    swift_bridgeObjectRetain();
    v0[4] = sub_1000143F4(v10, v11, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v40 = (uint8_t *)v7;
    *(_WORD *)(v7 + 22) = 2082;
    int64_t v12 = *(void *)(v5 + 16);
    uint64_t v13 = _swiftEmptyArrayStorage;
    if (v12)
    {
      uint64_t v14 = v0[8];
      id v44 = _swiftEmptyArrayStorage;
      sub_100455C1C(0, v12, 0);
      uint64_t v13 = v44;
      uint64_t v15 = (unsigned char *)(v14 + 48);
      do
      {
        uint64_t v16 = *((void *)v15 - 2);
        if (*v15 == 1)
        {
          uint64_t v17 = *((void *)v15 - 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          v0[7] = v16;
          uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v17 = v18;
        }
        id v44 = v13;
        unint64_t v20 = v13[2];
        unint64_t v19 = v13[3];
        if (v20 >= v19 >> 1)
        {
          sub_100455C1C(v19 > 1, v20 + 1, 1);
          uint64_t v13 = v44;
        }
        v13[2] = v20 + 1;
        char v21 = &v13[2 * v20];
        v21[4] = v16;
        v21[5] = v17;
        v15 += 24;
        --v12;
      }
      while (v12);
    }
    uint64_t v37 = v0[17];
    uint64_t v27 = v0[14];
    uint64_t v26 = v0[15];
    v0[5] = v13;
    sub_1000172F8((uint64_t *)&unk_10065C5D0);
    sub_10017B8C8();
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    v0[6] = sub_1000143F4(v28, v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v38, "[%@] %{public}s requested license renewal for %{public}s", v40, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v25(v37, v27);
  }
  else
  {
    uint64_t v22 = v0[17];
    uint64_t v23 = v0[14];
    uint64_t v24 = v0[15];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v25(v22, v23);
  }
  v0[18] = v25;
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100664880 + dword_100664880);
  uint64_t v31 = (void *)swift_task_alloc();
  v0[19] = v31;
  void *v31 = v0;
  v31[1] = sub_100499300;
  uint64_t v32 = v0[12];
  uint64_t v33 = v0[13];
  uint64_t v35 = v0[8];
  uint64_t v34 = v0[9];
  return v42(v35, v34, v32, v33);
}

uint64_t sub_100499300(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100499400, 0, 0);
}

uint64_t sub_100499400()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10049961C;
    char v3 = *(unsigned char *)(v0 + 176);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 72);
    return sub_100498460(v1, v3, v6, v4, v5);
  }
  else
  {
    static Logger.ald.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      uint64_t v12 = sub_1005163F0();
      *(void *)(v0 + 16) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v11 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] License renewal complete", v10, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 112);

    v13(v14, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
}

uint64_t sub_10049961C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100499734, 0, 0);
}

uint64_t sub_100499734()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)char v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] License renewal complete", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[18];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[14];

  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1004998C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v5[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[25] = v8;
  v5[26] = *(void *)(v8 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  return _swift_task_switch(sub_100499AA0, 0, 0);
}

uint64_t sub_100499AA0()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)char v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[10] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Starting license repair request", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = v0[28];
  uint64_t v7 = v0[25];
  uint64_t v8 = v0[26];
  uint64_t v9 = v0[23];
  uint64_t v10 = v0[21];
  uint64_t v32 = v0[24];
  uint64_t v33 = v0[22];
  uint64_t v12 = v0[19];
  uint64_t v11 = v0[20];
  uint64_t v13 = v0[17];
  uint64_t v14 = v0[18];
  uint64_t v15 = v0[16];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[29] = v16;
  v0[30] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))(v14, enum case for URL.DirectoryHint.inferFromPath(_:), v15);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  URL.deletingLastPathComponent()();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v0[31] = v17;
  v0[32] = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v9, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v33, v32, v11);
  id v18 = objc_allocWithZone((Class)LSApplicationRecord);
  id v19 = sub_100489D10(v33, 0);
  v0[33] = v19;
  uint64_t v22 = v19;
  id v23 = [v19 bundleIdentifier];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    sub_1000172F8(&qword_100663D10);
    uint64_t inited = swift_initStackObject();
    v0[34] = inited;
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    *(void *)(inited + 32) = v25;
    *(void *)(inited + 40) = v27;
    *(unsigned char *)(inited + 48) = 1;
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100664880 + dword_100664880);
    unint64_t v29 = (void *)swift_task_alloc();
    v0[35] = v29;
    *unint64_t v29 = v0;
    v29[1] = sub_100499F28;
    uint64_t v30 = v0[13];
    return v34(inited, v30, 0, 0);
  }
  else
  {
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    void *v31 = 0x726961706572;
    v31[1] = 0xE600000000000000;
    long long v31[2] = 0xD000000000000016;
    v31[3] = 0x80000001005BFED0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    ((void (*)(void, void))v0[31])(v0[24], v0[20]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_100499F28(uint64_t a1)
{
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  swift_setDeallocating();
  swift_arrayDestroy();
  return _swift_task_switch(sub_10049A060, 0, 0);
}

uint64_t sub_10049A060()
{
  uint64_t v1 = *(void *)(v0 + 288);
  if (v1)
  {
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10049A264;
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 104);
    return sub_100498460(v1, 0, v5, v3, v4);
  }
  else
  {
    uint64_t v7 = *(void **)(v0 + 264);
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v8 = 0x726961706572;
    v8[1] = 0xE600000000000000;
    v8[2] = 0xD000000000000014;
    v8[3] = 0x80000001005BFEF0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    (*(void (**)(void, void))(v0 + 248))(*(void *)(v0 + 192), *(void *)(v0 + 160));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_10049A264()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10049A37C, 0, 0);
}

uint64_t sub_10049A37C()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[9] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] License repair request complete", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v6 = (void *)v0[33];
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[31];
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[29];
  uint64_t v9 = v0[27];
  uint64_t v11 = v0[24];
  uint64_t v10 = v0[25];
  uint64_t v12 = v1;
  uint64_t v13 = v0[20];

  v8(v9, v10);
  v7(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t type metadata accessor for LicenseUtilities.Batch()
{
  uint64_t result = qword_100664968;
  if (!qword_100664968) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10049A5BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10049A5F8()
{
  return sub_10043C77C(*(id **)(v0 + 16));
}

void *sub_10049A624()
{
  return sub_10043C51C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10049A654@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10049A69C()
{
  return sub_10043C2A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10049A6C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10049A708(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10049A770(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10049A7D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10049A838(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 120) = a5;
  *(void *)(v6 + 128) = a6;
  *(void *)(v6 + 104) = a2;
  *(void *)(v6 + 112) = a4;
  *(unsigned char *)(v6 + 248) = a3;
  *(void *)(v6 + 96) = a1;
  sub_1000172F8(&qword_10065B8F0);
  *(void *)(v6 + 136) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 144) = v7;
  *(void *)(v6 + 152) = *(void *)(v7 - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 168) = v8;
  *(void *)(v6 + 176) = *(void *)(v8 - 8);
  *(void *)(v6 + 184) = swift_task_alloc();
  *(void *)(v6 + 192) = swift_task_alloc();
  return _swift_task_switch(sub_10049A9A0, 0, 0);
}

uint64_t sub_10049A9A0()
{
  id v23 = v0;
  static Logger.ald.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v18 = v0[22];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[24];
    unint64_t v3 = v0[13];
    uint64_t v17 = v0[12];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    uint64_t v6 = sub_1005163F0();
    v0[10] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = sub_1000143F4(v17, v3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] Starting license repair request for %s", (uint8_t *)v4, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v7(v20, v19);
  }
  else
  {
    uint64_t v8 = v0[24];
    uint64_t v9 = v0[21];
    uint64_t v10 = v0[22];
    swift_bridgeObjectRelease_n();

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v7(v8, v9);
  }
  v0[25] = v7;
  uint64_t v12 = v0[12];
  uint64_t v11 = v0[13];
  sub_1000172F8(&qword_100663D10);
  uint64_t inited = swift_initStackObject();
  v0[26] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 40) = v11;
  *(unsigned char *)(inited + 48) = 1;
  char v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100664880 + dword_100664880);
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[27] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10049ACAC;
  uint64_t v15 = v0[14];
  return v21(inited, v15, 0, 0);
}

uint64_t sub_10049ACAC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_setDeallocating();
  swift_arrayDestroy();
  return _swift_task_switch(sub_10049ADE4, 0, 0);
}

uint64_t sub_10049ADE4()
{
  uint64_t v1 = *(void *)(v0 + 224);
  if (v1)
  {
    os_log_type_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *os_log_type_t v2 = v0;
    v2[1] = sub_10049AF9C;
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 112);
    char v6 = *(unsigned char *)(v0 + 248);
    return sub_100498460(v1, v6, v5, v3, v4);
  }
  else
  {
    type metadata accessor for InternalError();
    sub_100013B94((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    *uint64_t v8 = 0x726961706572;
    v8[1] = 0xE600000000000000;
    v8[2] = 0xD000000000000014;
    v8[3] = 0x80000001005BFEF0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_10049AF9C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 249) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10049B0BC, 0, 0);
}

uint64_t sub_10049B0BC()
{
  if (*(unsigned char *)(v0 + 249) == 1 && *(unsigned char *)(v0 + 248) != 0)
  {
    if (qword_10065B118 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v13 = *(void *)(v0 + 104);
    uint64_t v15 = qword_100664870;
    uint64_t v16 = swift_task_alloc();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v13;
    os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
    sub_10049B7B4((uint64_t *)(v15 + 16), v12);
    os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
    uint64_t v17 = *(void *)(v0 + 144);
    uint64_t v18 = *(void *)(v0 + 152);
    uint64_t v19 = *(void *)(v0 + 136);
    swift_task_dealloc();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
    {
      sub_10001729C(*(void *)(v0 + 136), &qword_10065B8F0);
LABEL_16:
      uint64_t v26 = *(void *)(v0 + 96);
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v27 = (os_unfair_lock_s *)qword_100664870;
      uint64_t v28 = swift_task_alloc();
      *(void *)(v28 + 16) = v26;
      *(void *)(v28 + 24) = v25;
      os_unfair_lock_lock(v27 + 6);
      sub_10049B7D0((uint64_t)&v27[4]);
      os_unfair_lock_unlock(v27 + 6);
      swift_task_dealloc();
      uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10065E9A0 + dword_10065E9A0);
      unint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v29;
      *unint64_t v29 = v0;
      v29[1] = sub_10049B4A8;
      uint64_t v31 = *(void *)(v0 + 96);
      uint64_t v30 = *(void *)(v0 + 104);
      return v32(v31, v30, 0, 0);
    }
    uint64_t v21 = *(void *)(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v20, *(void *)(v0 + 136), v22);
    Date.timeIntervalSinceNow.getter();
    double v24 = v23;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    if (v24 <= -60.0) {
      goto LABEL_16;
    }
  }
  static Logger.ald.getter();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = sub_1005163F0();
    *(void *)(v0 + 72) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] License repair request complete", v4, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 168);

  v7(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10049B4A8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10049B60C, 0, 0);
  }
}

uint64_t sub_10049B60C()
{
  static Logger.ald.getter();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 138412290;
    uint64_t v5 = sub_1005163F0();
    v0[9] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%@] License repair request complete", v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[25];
  uint64_t v7 = v0[23];
  uint64_t v8 = v0[21];

  v6(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10049B7B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100486AB4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10049B7D0(uint64_t a1)
{
  return sub_100486C58(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10049B7EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000B238;
  return sub_100486D48(a1, v4, v5, v6);
}

uint64_t sub_10049B8A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10029B340(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10049B8BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      uint64_t v7 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v7;
      uint64_t v8 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v8;
      uint64_t v9 = (int *)type metadata accessor for NewLicenseBatch(0);
      uint64_t v10 = v9[7];
      uint64_t v18 = a1 + v10;
      uint64_t v11 = (uint64_t)a2 + v10;
      uint64_t v12 = type metadata accessor for URL();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v18, v11, v12);
      uint64_t v14 = v9[8];
      long long v15 = *(_OWORD *)((char *)a2 + v14 + 24);
      *(_OWORD *)(a1 + v14 + 24) = v15;
      (**(void (***)(void))(v15 - 8))();
      *(void *)(a1 + v9[9]) = *(uint64_t *)((char *)a2 + v9[9]);
      *(void *)(a1 + v9[10]) = *(uint64_t *)((char *)a2 + v9[10]);
    }
    else
    {
      *(void *)a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10049BAC4(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100014524(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = type metadata accessor for NewLicenseBatch(0);
    uint64_t v3 = a1 + *(int *)(v2 + 28);
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
    uint64_t v5 = a1 + *(int *)(v2 + 32);
    return sub_100014524(v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_10049BB98(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    uint64_t v5 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    uint64_t v6 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v6;
    uint64_t v7 = (int *)type metadata accessor for NewLicenseBatch(0);
    uint64_t v8 = v7[7];
    uint64_t v15 = a1 + v8;
    uint64_t v9 = a2 + v8;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v15, v9, v10);
    uint64_t v12 = v7[8];
    long long v13 = *(_OWORD *)(a2 + v12 + 24);
    *(_OWORD *)(a1 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
    *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
    *(void *)(a1 + v7[10]) = *(void *)(a2 + v7[10]);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10049BD50(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10049A7D8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = a2[3];
      a1[3] = v4;
      a1[4] = a2[4];
      (**(void (***)(void *, void *))(v4 - 8))(a1, a2);
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      uint64_t v5 = (int *)type metadata accessor for NewLicenseBatch(0);
      uint64_t v6 = v5[7];
      uint64_t v14 = (char *)a1 + v6;
      uint64_t v7 = (char *)a2 + v6;
      uint64_t v8 = type metadata accessor for URL();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9(v14, v7, v8);
      uint64_t v10 = v5[8];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = *(void *)((char *)a2 + v10 + 24);
      *((void *)v11 + 3) = v12;
      *((void *)v11 + 4) = *(void *)((char *)a2 + v10 + 32);
      (**(void (***)(void))(v12 - 8))();
      *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
      *(void *)((char *)a1 + v5[10]) = *(void *)((char *)a2 + v5[10]);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_10049BF44(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
    uint64_t v7 = (int *)type metadata accessor for NewLicenseBatch(0);
    uint64_t v8 = v7[7];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    uint64_t v12 = v7[8];
    long long v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    long long v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)long long v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    *((void *)v13 + 4) = *((void *)v14 + 4);
    *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
    *(void *)((char *)a1 + v7[10]) = *(void *)((char *)a2 + v7[10]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_10049C070(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10049A7D8((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for LicenseUtilities.Batch);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      uint64_t v7 = (int *)type metadata accessor for NewLicenseBatch(0);
      uint64_t v8 = v7[7];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      uint64_t v12 = v7[8];
      long long v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      long long v15 = *((_OWORD *)v14 + 1);
      *(_OWORD *)long long v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v15;
      *((void *)v13 + 4) = *((void *)v14 + 4);
      *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
      *(void *)((char *)a1 + v7[10]) = *(void *)((char *)a2 + v7[10]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10049C1C0()
{
  uint64_t result = type metadata accessor for NewLicenseBatch(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LicenseUtilities()
{
  return &type metadata for LicenseUtilities;
}

uint64_t destroy for LicenseUtilities.AppIdentifier(uint64_t a1)
{
  return sub_1001C3EC0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s28ManagedAppDistributionDaemon16LicenseUtilitiesO13AppIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001C3ED0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LicenseUtilities.AppIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1001C3ED0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001C3EC0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LicenseUtilities.AppIdentifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001C3EC0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LicenseUtilities.AppIdentifier()
{
  return &type metadata for LicenseUtilities.AppIdentifier;
}

ValueMetadata *type metadata accessor for Sinf()
{
  return &type metadata for Sinf;
}

uint64_t destroy for DPInfo(uint64_t a1)
{
  sub_100013510(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DPInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100012670(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DPInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100012670(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100013510(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DPInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100013510(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DPInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DPInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DPInfo()
{
  return &type metadata for DPInfo;
}

uint64_t sub_10049C62C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000172F8(&qword_1006649B0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10049CC70();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_10024A9C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10049C77C(uint64_t a1)
{
  unint64_t v2 = sub_10049CC70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10049C7B8(uint64_t a1)
{
  unint64_t v2 = sub_10049CC70();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10049C7F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10049CB00(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10049C820(void *a1)
{
  return sub_10049C62C(a1, *v1, v1[1]);
}

uint64_t sub_10049C83C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_1006649C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10049D020();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = *v3;
  char v12 = 0;
  sub_10024A9C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = v3[2];
    v11[0] = v3[1];
    v11[1] = v9;
    void v11[2] = v3[3];
    char v12 = 1;
    sub_10041CDE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10049C9D4()
{
  if (*v0) {
    return 0x747365676964;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_10049CA04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10049CCC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10049CA2C(uint64_t a1)
{
  unint64_t v2 = sub_10049D020();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10049CA68(uint64_t a1)
{
  unint64_t v2 = sub_10049D020();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10049CAA4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10049CDA0(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10049CAE8(void *a1)
{
  return sub_10049C83C(a1);
}

void *sub_10049CB00(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_1006649A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10018AC60(a1, a1[3]);
  sub_10049CC70();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_10024A974();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10049CC70()
{
  unint64_t result = qword_1006649A8;
  if (!qword_1006649A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649A8);
  }
  return result;
}

uint64_t sub_10049CCC4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747365676964 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10049CDA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_1006649B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_10049D020();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v25 = 0;
  sub_10024A974();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v18;
  unint64_t v10 = v19;
  char v25 = 1;
  sub_100012670(v18, v19);
  sub_10024AC10();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v11 = v18;
  unint64_t v13 = v19;
  uint64_t v12 = v20;
  uint64_t v17 = v21;
  int v24 = v22;
  uint64_t v14 = v23;
  sub_100012670(v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013510(v9, v10);
  sub_100014524((uint64_t)a1);
  sub_100013510(v9, v10);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v14;
  return result;
}

unint64_t sub_10049D020()
{
  unint64_t result = qword_1006649C0;
  if (!qword_1006649C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DPInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10049D140);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DPInfo.CodingKeys()
{
  return &type metadata for DPInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Sinf.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10049D214);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Sinf.CodingKeys()
{
  return &type metadata for Sinf.CodingKeys;
}

unint64_t sub_10049D250()
{
  unint64_t result = qword_1006649D0;
  if (!qword_1006649D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649D0);
  }
  return result;
}

unint64_t sub_10049D2A8()
{
  unint64_t result = qword_1006649D8;
  if (!qword_1006649D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649D8);
  }
  return result;
}

unint64_t sub_10049D300()
{
  unint64_t result = qword_1006649E0;
  if (!qword_1006649E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649E0);
  }
  return result;
}

unint64_t sub_10049D358()
{
  unint64_t result = qword_1006649E8;
  if (!qword_1006649E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649E8);
  }
  return result;
}

unint64_t sub_10049D3B0()
{
  unint64_t result = qword_1006649F0;
  if (!qword_1006649F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649F0);
  }
  return result;
}

unint64_t sub_10049D408()
{
  unint64_t result = qword_1006649F8;
  if (!qword_1006649F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006649F8);
  }
  return result;
}

uint64_t sub_10049D45C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v32[2] = a5;
  v32[3] = a6;
  uint64_t v36 = a3;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  __chkstk_darwin(v10);
  uint64_t v37 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for ApprovedDeveloper();
  uint64_t v12 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v39 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000084C4();
  if (v14) {
    long long v15 = (void *)v14;
  }
  else {
    long long v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v16 = v15[2];
  v32[1] = v6;
  if (v16)
  {
    v32[0] = a4;
    uint64_t v17 = (char *)v15 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    while (ApprovedDeveloper.identifier.getter() != a1 || v19 != a2)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_22;
      }
      v17 += v18;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        a4 = v32[0];
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
    uint64_t v31 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    notify_post((const char *)(v31 + 32));
    return swift_release();
  }
LABEL_11:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ApprovedDeveloper.init(name:identifier:supportURL:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v15 = (void *)sub_10028FBF4(0, v15[2] + 1, 1, (unint64_t)v15);
  }
  uint64_t v21 = v37;
  unint64_t v23 = v15[2];
  unint64_t v22 = v15[3];
  if (v23 >= v22 >> 1) {
    long long v15 = (void *)sub_10028FBF4(v22 > 1, v23 + 1, 1, (unint64_t)v15);
  }
  v15[2] = v23 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))((unint64_t)v15+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v23, v39, v33);
  unint64_t v41 = v15;
  swift_bridgeObjectRetain_n();
  int v24 = v38;
  sub_1004A01CC(&v41);
  uint64_t v39 = v24;
  if (v24)
  {
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease_n();
  char v25 = v41;
  static Logger.general.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    unint64_t v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1000143F4(a1, a2, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1000143F4(v36, a4, (uint64_t *)&v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Added approved developerID: %{public}s name:  %{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v35);
  }
  unint64_t v29 = v39;
  sub_10049E1E0(v25);
  uint64_t result = swift_release();
  if (!v29) {
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_10049D978(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for ApprovedDeveloper();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = (void *)sub_1000084C4();
  if (!v13) {
    return 0;
  }
  uint64_t v14 = v13;
  uint64_t v34 = v10;
  uint64_t v35 = v2;
  uint64_t v36 = v13;
  uint64_t v15 = v13[2];
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v30 = v12;
  uint64_t v31 = v7;
  uint64_t v32 = v6;
  uint64_t v33 = v3;
  uint64_t v16 = (char *)v13 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v17 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  while (ApprovedDeveloper.identifier.getter() != a1 || v19 != a2)
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_12;
    }
    ++v18;
    v16 += v17;
    if (v15 == v18)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
  if (v18 < v14[2])
  {
    int v24 = v30;
    uint64_t v23 = v31;
    uint64_t v25 = v32;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v30, v16, v32);
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v34;
    sub_10054EC70(v18, (uint64_t)v34);
    os_log_type_t v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v27(v26, v25);
    unint64_t v22 = v36;
    uint64_t v28 = v33;
    sub_10049E1E0(v36);
    if (v28)
    {
      v27((uint64_t)v24, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      static PrivateNotifications.priorityOrAllowedDevelopersChangedNotificationName.getter();
      uint64_t v29 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      notify_post((const char *)(v29 + 32));
      swift_release();
      unint64_t v22 = (void *)ApprovedDeveloper.name.getter();
      v27((uint64_t)v24, v25);
    }
    return (uint64_t)v22;
  }
  __break(1u);
  return result;
}

void sub_10049DC30(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void (***)(char *, uint64_t))(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v34 - v7;
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v43 = 0;
  uint64_t v16 = container_system_path_for_identifier();
  unint64_t v41 = (void *)v16;
  if (v43 <= 1 && v16)
  {
    uint64_t v39 = v2;
    uint64_t v40 = *(void (***)(char *, uint64_t))(v13 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v11, 1, 1, v12);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
    sub_10001729C((uint64_t)v11, &qword_10065C3C0);
    id v17 = [self defaultManager];
    URL._bridgeToObjectiveC()(v18);
    char v20 = v19;
    v44[0] = 0;
    unsigned int v21 = [v17 createDirectoryAtURL:v19 withIntermediateDirectories:1 attributes:0 error:v44];

    if (v21)
    {
      id v22 = v44[0];
      int v24 = v40;
      uint64_t v23 = v41;
    }
    else
    {
      uint64_t v38 = a1;
      id v28 = v44[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.general.getter();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_t v37 = v29;
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = (void *)swift_slowAlloc();
        uint64_t v36 = v31;
        *(_DWORD *)uint64_t v31 = 138412290;
        v34[1] = v31 + 4;
        swift_errorRetain();
        uint64_t v32 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v44[0] = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v35 = v32;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v33 = v37;
        _os_log_impl((void *)&_mh_execute_header, v37, v30, "Unable to obtain container path: error %@", v36, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      int v24 = v40;
      uint64_t v23 = v41;
      v3[1](v6, v39);
      a1 = v38;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v15, v12);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v24)(a1, 0, 1, v12);
LABEL_14:
    free(v23);
    return;
  }
  static Logger.general.getter();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v40 = v3;
    os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v27 = 134217984;
    swift_beginAccess();
    unint64_t v42 = v43;
    uint64_t v3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to obtain container path: error %llu", v27, 0xCu);
    swift_slowDealloc();
  }

  v3[1](v8, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
  uint64_t v23 = v41;
  if (v41) {
    goto LABEL_14;
  }
}

uint64_t sub_10049E1E0(void *a1)
{
  uint64_t v53 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v1 - 8);
  uint64_t v57 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v55 = (char *)&v48 - v5;
  uint64_t v54 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v48 - v18;
  __chkstk_darwin(v17);
  unsigned int v21 = (char *)&v48 - v20;
  sub_10001893C(v61 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon22ApprovedDeveloperStore_containerURL, (uint64_t)v11);
  id v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v61 = v12;
  if (v22(v11, 1, v12) == 1)
  {
    sub_10001729C((uint64_t)v11, &qword_10065C3C0);
    static Logger.general.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to save events without a container url", v25, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v4, v57);
  }
  else
  {
    uint64_t v49 = v16;
    uint64_t v50 = v13;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v11, v61);
    v60[0] = 0xD000000000000013;
    v60[1] = 0x80000001005B7F40;
    uint64_t v27 = v54;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v54);
    sub_100017B14();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
    swift_bridgeObjectRelease();
    id v28 = v55;
    static Logger.general.getter();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    id v51 = v21;
    id v52 = v19;
    if (v31)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136380675;
      uint64_t v54 = (uint64_t)(v32 + 4);
      swift_beginAccess();
      sub_1004A1A30(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v33 = v61;
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_1000143F4(v34, v35, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Saving approved events to: %{private}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v57);
      uint64_t v36 = v58;
      uint64_t v37 = v50;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v57);
      uint64_t v36 = v58;
      uint64_t v37 = v50;
      uint64_t v33 = v61;
    }
    uint64_t v38 = v53;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = _swiftEmptyArrayStorage;
    }
    v60[0] = (uint64_t)v39;
    swift_bridgeObjectRetain();
    sub_1000172F8(&qword_10065D078);
    sub_1004A199C(&qword_10065D090, &qword_10065D098);
    uint64_t v40 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v36)
    {
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
      v42(v51, v33);
      return ((uint64_t (*)(char *, uint64_t))v42)(v52, v33);
    }
    else
    {
      uint64_t v43 = v40;
      unint64_t v44 = v41;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v45 = v52;
      swift_beginAccess();
      uint64_t v46 = v49;
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v49, v45, v33);
      Data.write(to:options:)();
      Swift::String v47 = *(void (**)(char *, uint64_t))(v37 + 8);
      v47(v46, v33);
      swift_beginAccess();
      LOBYTE(v46) = sub_1004D11C8();
      swift_endAccess();
      if (v46)
      {
        swift_beginAccess();
        sub_1004D0820(0);
        swift_endAccess();
        sub_100013510(v43, v44);
        v47(v51, v33);
      }
      else
      {
        v47(v51, v33);
        sub_100013510(v43, v44);
      }
      return ((uint64_t (*)(char *, uint64_t))v47)(v45, v33);
    }
  }
}

uint64_t sub_10049E9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v7 = type metadata accessor for ApprovedDeveloper();
  v5[4] = v7;
  v5[5] = *(void *)(v7 - 8);
  v5[6] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v5[7] = v8;
  v5[8] = *(void *)(v8 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  uint64_t v11 = (char *)&dword_1006608A8 + dword_1006608A8;
  uint64_t v9 = (void *)swift_task_alloc();
  v5[12] = v9;
  void *v9 = v5;
  v9[1] = sub_10049EB84;
  return ((uint64_t (*)(uint64_t (*)@<X0>(void **@<X0>, uint64_t *@<X8>), void, uint64_t))v11)(sub_10049FCBC, 0, a4);
}

uint64_t sub_10049EB84(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_10049ECF4, 0, 0);
  }
}

uint64_t sub_10049ECF4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (!v1)
  {
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
    return v37();
  }
  static Logger.general.getter();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[Migration] Migrating approved developers", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 120) = v8;
  *(void *)(v0 + 128) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v5, v6);
  uint64_t v9 = *(void *)(v1 + 16);
  *(void *)(v0 + 136) = v9;
  if (!v9)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    BOOL v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "[Migration] Migrated approved developers", v33, 2u);
      swift_slowDealloc();
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v35 = *(void *)(v0 + 80);
    uint64_t v36 = *(void *)(v0 + 56);

    v34(v35, v36);
    goto LABEL_15;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(v0 + 40);
  int v12 = *(_DWORD *)(v11 + 80);
  *(_DWORD *)(v0 + 192) = v12;
  uint64_t v13 = *(void *)(v11 + 72);
  *(void *)(v0 + 144) = v13;
  uint64_t v14 = *(void (**)(void, unint64_t, void))(v11 + 16);
  *(void *)(v0 + 152) = v14;
  uint64_t v15 = *(void *)(v0 + 112);
  while (1)
  {
    *(void *)(v0 + 160) = v10;
    v14(*(void *)(v0 + 48), *(void *)(v0 + 104) + ((v12 + 32) & ~(unint64_t)v12) + v13 * v10, *(void *)(v0 + 32));
    uint64_t v16 = ApprovedDeveloper.identifier.getter();
    unint64_t v18 = v17;
    uint64_t v19 = ApprovedDeveloper.name.getter();
    unint64_t v21 = v20;
    uint64_t v22 = ApprovedDeveloper.supportURL.getter();
    sub_10049D45C(v16, v18, v19, v21, v22, v23);
    if (!v15) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138543362;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v26 + 4) = v28;
      *uint64_t v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to migrate developers approvals due to error: %{public}@", (uint8_t *)v26, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    uint64_t v29 = *(void *)(v0 + 136);
    uint64_t v30 = *(void *)(v0 + 160) + 1;
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    if (v30 == v29) {
      goto LABEL_12;
    }
    uint64_t v15 = 0;
    uint64_t v14 = *(void (**)(void, unint64_t, void))(v0 + 152);
    uint64_t v10 = *(void *)(v0 + 160) + 1;
    uint64_t v13 = *(void *)(v0 + 144);
    LOBYTE(v12) = *(unsigned char *)(v0 + 192);
  }
  uint64_t v39 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = swift_task_alloc();
  *(void *)(v0 + 168) = v40;
  *(void *)(v40 + 16) = v39;
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660798 + dword_100660798);
  unint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v41;
  void *v41 = v0;
  v41[1] = sub_10049F1F0;
  uint64_t v42 = *(void *)(v0 + 16);
  return v43((uint64_t)v43, (uint64_t)sub_1004A1A78, v40, v42);
}

uint64_t sub_10049F1F0()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10049F76C;
  }
  else {
    uint64_t v2 = sub_10049F324;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10049F324()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 160) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  if (v3 == v2)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[Migration] Migrated approved developers", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 56);

    v7(v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    while (1)
    {
      uint64_t v14 = *(void (**)(void, unint64_t, void))(v0 + 152);
      uint64_t v15 = *(void *)(v0 + 160) + 1;
      *(void *)(v0 + 160) = v15;
      v14(*(void *)(v0 + 48), *(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(void *)(v0 + 144) * v15, *(void *)(v0 + 32));
      uint64_t v16 = ApprovedDeveloper.identifier.getter();
      unint64_t v18 = v17;
      uint64_t v19 = ApprovedDeveloper.name.getter();
      unint64_t v21 = v20;
      uint64_t v22 = ApprovedDeveloper.supportURL.getter();
      sub_10049D45C(v16, v18, v19, v21, v22, v23);
      if (!v1) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      static Logger.general.getter();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 138543362;
        swift_errorRetain();
        uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v26 + 4) = v28;
        *uint64_t v27 = v28;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to migrate developers approvals due to error: %{public}@", (uint8_t *)v26, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 72), *(void *)(v0 + 56));
      uint64_t v12 = *(void *)(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 160) + 1;
      (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
      uint64_t v1 = 0;
      if (v13 == v12) {
        goto LABEL_2;
      }
    }
    uint64_t v29 = *(void *)(v0 + 48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = swift_task_alloc();
    *(void *)(v0 + 168) = v30;
    *(void *)(v30 + 16) = v29;
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660798 + dword_100660798);
    BOOL v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v31;
    void *v31 = v0;
    v31[1] = sub_10049F1F0;
    uint64_t v32 = *(void *)(v0 + 16);
    return v33((uint64_t)v33, (uint64_t)sub_1004A1A78, v30, v32);
  }
}

uint64_t sub_10049F76C()
{
  static Logger.general.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to migrate developers approvals due to error: %{public}@", (uint8_t *)v3, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 160) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 40) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  if (v7 == v6)
  {
    swift_bridgeObjectRelease();
    static Logger.general.getter();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[Migration] Migrated approved developers", v20, 2u);
      swift_slowDealloc();
    }
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 56);

    v21(v22, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    uint64_t v8 = *(void (**)(void, unint64_t, void))(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 160) + 1;
    *(void *)(v0 + 160) = v9;
    v8(*(void *)(v0 + 48), *(void *)(v0 + 104)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(void *)(v0 + 144) * v9, *(void *)(v0 + 32));
    uint64_t v10 = ApprovedDeveloper.identifier.getter();
    unint64_t v12 = v11;
    uint64_t v13 = ApprovedDeveloper.name.getter();
    unint64_t v15 = v14;
    uint64_t v16 = ApprovedDeveloper.supportURL.getter();
    sub_10049D45C(v10, v12, v13, v15, v16, v17);
    uint64_t v26 = *(void *)(v0 + 48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_task_alloc();
    *(void *)(v0 + 168) = v27;
    *(void *)(v27 + 16) = v26;
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660798 + dword_100660798);
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_10049F1F0;
    uint64_t v29 = *(void *)(v0 + 16);
    return v30((uint64_t)v30, (uint64_t)sub_1004A1A78, v27, v29);
  }
}

uint64_t sub_10049FB8C(void *a1)
{
  uint64_t v8 = sub_1000172F8(&qword_10065C6C8);
  LOWORD(v7) = 1;
  unint64_t v9 = sub_1002EAD64();
  *((void *)&v7 + 1) = 1;
  sub_1000172F8(&qword_10065C6D8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  sub_10018B164(&v7, inited + 32);
  id v3 = a1;
  sub_100555910(inited);
  uint64_t v4 = (void *)sub_1002EAB00(0, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)sub_1002EAA64, 0, v3);

  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = sub_100241A94(3, v4);

  return v5;
}

uint64_t sub_10049FCBC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10049FB8C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10049FCF0(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a1;
  uint64_t v4 = type metadata accessor for ApprovedDeveloper();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v30[-v9];
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Logger.general.getter();
  unint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a2, v4);
  uint64_t v37 = a2;
  v14(v8, a2, v4);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    os_log_t v32 = v15;
    uint64_t v19 = v18;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v40 = v33;
    *(_DWORD *)uint64_t v19 = 136446466;
    uint64_t v34 = v2;
    int v31 = v17;
    uint64_t v20 = ApprovedDeveloper.identifier.getter();
    uint64_t v39 = sub_1000143F4(v20, v21, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v22(v10, v4);
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v23 = ApprovedDeveloper.name.getter();
    uint64_t v39 = sub_1000143F4(v23, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v8, v4);
    os_log_t v25 = v32;
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "[Migration] Removing DB approved developerID: %{public}s name:  %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v26(v10, v4);
    v26(v8, v4);
  }
  (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v13, v36);
  uint64_t v27 = ApprovedDeveloper.identifier.getter();
  sub_1002EA3DC(v27, v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004A007C()
{
  sub_10001729C(v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon22ApprovedDeveloperStore_containerURL, &qword_10065C3C0);

  return swift_deallocClassInstance();
}

uint64_t sub_1004A00E8()
{
  return type metadata accessor for ApprovedDeveloperStore();
}

uint64_t type metadata accessor for ApprovedDeveloperStore()
{
  uint64_t result = qword_100664A30;
  if (!qword_100664A30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1004A013C()
{
  sub_10026B458();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

Swift::Int sub_1004A01CC(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ApprovedDeveloper() - 8);
  id v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v3 = (void *)sub_1002538BC(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004A0274(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1004A0274(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ApprovedDeveloper();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v153 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v165 = (char *)&v145 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  long long v168 = (char *)&v145 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v167 = (char *)&v145 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v148 = (char *)&v145 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v155 = (char *)&v145 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v151 = (char *)&v145 - v19;
  __chkstk_darwin(v18);
  uint64_t v150 = (char *)&v145 - v20;
  uint64_t v170 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v21);
  if (result >= v21)
  {
    if (v21 < 0) {
      goto LABEL_151;
    }
    if (v21) {
      return sub_1004A0F88(0, v21, 1, v170);
    }
    return result;
  }
  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_159;
  }
  Swift::Int v146 = result;
  if (v21 < 2)
  {
    uint64_t v26 = v5;
    uint64_t v28 = (char *)_swiftEmptyArrayStorage;
    unint64_t v156 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    char v145 = _swiftEmptyArrayStorage;
    if (v21 != 1)
    {
      unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_117:
      if (v30 >= 2)
      {
        uint64_t v136 = *v170;
        do
        {
          unint64_t v137 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_146;
          }
          if (!v136) {
            goto LABEL_158;
          }
          uint64_t v138 = v28;
          Swift::String_optional v139 = v28 + 32;
          uint64_t v140 = *(void *)&v28[16 * v137 + 32];
          uint64_t v141 = *(void *)&v28[16 * v30 + 24];
          uint64_t v142 = v26;
          sub_1004A12D4(v136 + *(void *)(v26 + 72) * v140, v136 + *(void *)(v26 + 72) * *(void *)&v139[16 * v30 - 16], v136 + *(void *)(v26 + 72) * v141, v156);
          if (v2) {
            break;
          }
          if (v141 < v140) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v138 = sub_1002538A8((uint64_t)v138);
          }
          if (v137 >= *((void *)v138 + 2)) {
            goto LABEL_148;
          }
          uint64_t v143 = &v138[16 * v137 + 32];
          *(void *)uint64_t v143 = v140;
          *((void *)v143 + 1) = v141;
          unint64_t v144 = *((void *)v138 + 2);
          if (v30 > v144) {
            goto LABEL_149;
          }
          uint64_t v28 = v138;
          memmove(&v138[16 * v30 + 16], &v138[16 * v30 + 32], 16 * (v144 - v30));
          *((void *)v138 + 2) = v144 - 1;
          unint64_t v30 = v144 - 1;
          uint64_t v26 = v142;
        }
        while (v144 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      v145[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v25 + 16) = v24;
    uint64_t v26 = v5;
    unint64_t v27 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    char v145 = (void *)v25;
    unint64_t v156 = v25 + v27;
  }
  Swift::Int v29 = 0;
  uint64_t v161 = v26 + 16;
  uint64_t v162 = (void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v166 = (char **)(v26 + 32);
  uint64_t v28 = (char *)_swiftEmptyArrayStorage;
  uint64_t v157 = v26;
  uint64_t v164 = v4;
  while (1)
  {
    Swift::Int v31 = v29;
    Swift::Int v32 = v29 + 1;
    Swift::Int v154 = v29;
    if (v29 + 1 >= v21)
    {
      Swift::Int v40 = v29 + 1;
      goto LABEL_69;
    }
    Swift::Int v163 = v21;
    uint64_t v149 = v28;
    uint64_t v33 = *v170;
    uint64_t v34 = *(void *)(v26 + 72);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v35(v150, *v170 + v34 * v32, v4);
    uint64_t v158 = (char *)v33;
    uint64_t v169 = v34;
    v35(v151, v33 + v34 * v31, v4);
    uint64_t v36 = ApprovedDeveloper.name.getter();
    uint64_t v38 = v37;
    if (v36 != ApprovedDeveloper.name.getter()) {
      goto LABEL_20;
    }
    if (v38 == v39) {
      LODWORD(v160) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v160) = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v41 = v148;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = *v162;
    uint64_t v43 = v164;
    (*v162)(v151, v164);
    v42(v150, v43);
    Swift::Int v40 = v154 + 2;
    if (v154 + 2 >= v163)
    {
      uint64_t v55 = v157;
    }
    else
    {
      uint64_t v147 = v2;
      uint64_t v159 = v169 * v32;
      uint64_t v44 = v158;
      uint64_t v45 = v169 * v40;
      while (1)
      {
        Swift::Int v46 = v40;
        uint64_t v47 = v164;
        v35(v155, (uint64_t)&v44[v45], v164);
        v35(v41, (uint64_t)&v44[v159], v47);
        uint64_t v48 = ApprovedDeveloper.name.getter();
        uint64_t v50 = v49;
        if (v48 == ApprovedDeveloper.name.getter() && v50 == v51) {
          int v52 = 0;
        }
        else {
          int v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v164;
        v42(v41, v164);
        v42(v155, v53);
        if ((v160 ^ v52)) {
          break;
        }
        Swift::Int v40 = v46 + 1;
        v44 += v169;
        if (v163 == v46 + 1)
        {
          Swift::Int v54 = v163;
          Swift::Int v40 = v163;
          uint64_t v2 = v147;
          uint64_t v55 = v157;
          goto LABEL_33;
        }
      }
      uint64_t v2 = v147;
      uint64_t v55 = v157;
      Swift::Int v40 = v46;
    }
    Swift::Int v54 = v163;
LABEL_33:
    uint64_t v28 = v149;
    Swift::Int v31 = v154;
    uint64_t v56 = v158;
    if ((v160 & 1) == 0) {
      break;
    }
    if (v40 < v154) {
      goto LABEL_152;
    }
    if (v154 >= v40) {
      break;
    }
    uint64_t v147 = v2;
    uint64_t v57 = 0;
    uint64_t v58 = v169 * (v40 - 1);
    uint64_t v59 = v40 * v169;
    Swift::Int v60 = v154;
    uint64_t v61 = v154 * v169;
    do
    {
      if (v60 != v40 + v57 - 1)
      {
        if (!v56) {
          goto LABEL_157;
        }
        id v63 = &v56[v58];
        os_log_type_t v160 = *v166;
        ((void (*)(char *, char *, uint64_t))v160)(v153, &v56[v61], v164);
        if (v61 < v58 || &v56[v61] >= &v56[v59])
        {
          uint64_t v62 = v164;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v62 = v164;
          if (v61 != v58) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        ((void (*)(char *, char *, uint64_t))v160)(v63, v153, v62);
        uint64_t v55 = v157;
        uint64_t v56 = v158;
      }
      ++v60;
      --v57;
      v58 -= v169;
      v59 -= v169;
      v61 += v169;
    }
    while (v60 < v40 + v57);
    uint64_t v2 = v147;
    Swift::Int v54 = v163;
    uint64_t v64 = v164;
    uint64_t v28 = v149;
    Swift::Int v31 = v154;
    if (v40 < v163) {
      goto LABEL_49;
    }
LABEL_69:
    if (v40 < v31) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_1002535B0(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v85 = *((void *)v28 + 2);
    unint64_t v84 = *((void *)v28 + 3);
    unint64_t v30 = v85 + 1;
    uint64_t v26 = v157;
    Swift::Int v163 = v40;
    if (v85 >= v84 >> 1)
    {
      os_log_type_t v135 = sub_1002535B0((char *)(v84 > 1), v85 + 1, 1, v28);
      uint64_t v26 = v157;
      uint64_t v28 = v135;
    }
    *((void *)v28 + 2) = v30;
    uint64_t v86 = v28 + 32;
    unint64_t v87 = &v28[16 * v85 + 32];
    Swift::Int v88 = v163;
    *(void *)unint64_t v87 = v31;
    *((void *)v87 + 1) = v88;
    if (v85)
    {
      while (1)
      {
        unint64_t v89 = v30 - 1;
        if (v30 >= 4)
        {
          id v94 = &v86[16 * v30];
          uint64_t v95 = *((void *)v94 - 8);
          uint64_t v96 = *((void *)v94 - 7);
          BOOL v100 = __OFSUB__(v96, v95);
          uint64_t v97 = v96 - v95;
          if (v100) {
            goto LABEL_134;
          }
          uint64_t v99 = *((void *)v94 - 6);
          uint64_t v98 = *((void *)v94 - 5);
          BOOL v100 = __OFSUB__(v98, v99);
          uint64_t v92 = v98 - v99;
          char v93 = v100;
          if (v100) {
            goto LABEL_135;
          }
          unint64_t v101 = v30 - 2;
          uint64_t v102 = &v86[16 * v30 - 32];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v100 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v100) {
            goto LABEL_137;
          }
          BOOL v100 = __OFADD__(v92, v105);
          uint64_t v106 = v92 + v105;
          if (v100) {
            goto LABEL_140;
          }
          if (v106 >= v97)
          {
            uint64_t v124 = &v86[16 * v89];
            uint64_t v126 = *(void *)v124;
            uint64_t v125 = *((void *)v124 + 1);
            BOOL v100 = __OFSUB__(v125, v126);
            uint64_t v127 = v125 - v126;
            if (v100) {
              goto LABEL_144;
            }
            BOOL v117 = v92 < v127;
            goto LABEL_106;
          }
        }
        else
        {
          if (v30 != 3)
          {
            uint64_t v118 = *((void *)v28 + 4);
            uint64_t v119 = *((void *)v28 + 5);
            BOOL v100 = __OFSUB__(v119, v118);
            uint64_t v111 = v119 - v118;
            char v112 = v100;
            goto LABEL_100;
          }
          uint64_t v91 = *((void *)v28 + 4);
          uint64_t v90 = *((void *)v28 + 5);
          BOOL v100 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          char v93 = v100;
        }
        if (v93) {
          goto LABEL_136;
        }
        unint64_t v101 = v30 - 2;
        uint64_t v107 = &v86[16 * v30 - 32];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v110 = __OFSUB__(v108, v109);
        uint64_t v111 = v108 - v109;
        char v112 = v110;
        if (v110) {
          goto LABEL_139;
        }
        uint64_t v113 = &v86[16 * v89];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v100 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v100) {
          goto LABEL_142;
        }
        if (__OFADD__(v111, v116)) {
          goto LABEL_143;
        }
        if (v111 + v116 >= v92)
        {
          BOOL v117 = v92 < v116;
LABEL_106:
          if (v117) {
            unint64_t v89 = v101;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v112) {
          goto LABEL_138;
        }
        uint64_t v120 = &v86[16 * v89];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v100 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v100) {
          goto LABEL_141;
        }
        if (v123 < v111) {
          goto LABEL_14;
        }
LABEL_108:
        unint64_t v128 = v89 - 1;
        if (v89 - 1 >= v30)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v170) {
          goto LABEL_156;
        }
        uint64_t v129 = v28;
        uint64_t v130 = &v86[16 * v128];
        uint64_t v131 = *(void *)v130;
        unint64_t v132 = &v86[16 * v89];
        uint64_t v133 = *((void *)v132 + 1);
        sub_1004A12D4(*v170 + *(void *)(v26 + 72) * *(void *)v130, *v170 + *(void *)(v26 + 72) * *(void *)v132, *v170 + *(void *)(v26 + 72) * v133, v156);
        if (v2) {
          goto LABEL_128;
        }
        if (v133 < v131) {
          goto LABEL_131;
        }
        if (v89 > *((void *)v129 + 2)) {
          goto LABEL_132;
        }
        *(void *)uint64_t v130 = v131;
        *(void *)&v86[16 * v128 + 8] = v133;
        unint64_t v134 = *((void *)v129 + 2);
        if (v89 >= v134) {
          goto LABEL_133;
        }
        uint64_t v28 = v129;
        unint64_t v30 = v134 - 1;
        memmove(&v86[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
        *((void *)v129 + 2) = v134 - 1;
        uint64_t v26 = v157;
        if (v134 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v30 = 1;
LABEL_14:
    Swift::Int v21 = v170[1];
    Swift::Int v29 = v163;
    uint64_t v4 = v164;
    if (v163 >= v21) {
      goto LABEL_117;
    }
  }
  uint64_t v64 = v164;
  if (v40 >= v54) {
    goto LABEL_69;
  }
LABEL_49:
  if (__OFSUB__(v40, v31)) {
    goto LABEL_150;
  }
  if (v40 - v31 >= v146) {
    goto LABEL_69;
  }
  if (__OFADD__(v31, v146)) {
    goto LABEL_153;
  }
  if (v31 + v146 >= v54) {
    Swift::Int v65 = v54;
  }
  else {
    Swift::Int v65 = v31 + v146;
  }
  if (v65 >= v31)
  {
    if (v40 != v65)
    {
      uint64_t v149 = v28;
      uint64_t v147 = v2;
      uint64_t v66 = *(void *)(v55 + 72);
      uint64_t v158 = *(char **)(v55 + 16);
      uint64_t v159 = v66;
      uint64_t v169 = v66 * (v40 - 1);
      Swift::Int v67 = v40 * v66;
      Swift::Int v152 = v65;
      do
      {
        uint64_t v70 = 0;
        Swift::Int v71 = v31;
        Swift::Int v163 = v40;
        os_log_type_t v160 = (char *)v67;
        while (1)
        {
          uint64_t v72 = *v170;
          uint64_t v73 = v67 + v70 + *v170;
          Swift::String v74 = v158;
          ((void (*)(char *, uint64_t, uint64_t))v158)(v167, v73, v64);
          ((void (*)(char *, uint64_t, uint64_t))v74)(v168, v169 + v70 + v72, v64);
          uint64_t v75 = ApprovedDeveloper.name.getter();
          uint64_t v77 = v76;
          if (v75 == ApprovedDeveloper.name.getter() && v77 == v78) {
            break;
          }
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v80 = *v162;
          uint64_t v64 = v164;
          (*v162)(v168, v164);
          v80(v167, v64);
          if ((v79 & 1) == 0) {
            goto LABEL_59;
          }
          uint64_t v81 = *v170;
          Swift::Int v67 = (Swift::Int)v160;
          if (!*v170) {
            goto LABEL_155;
          }
          uint64_t v82 = v81 + v169 + v70;
          char v83 = *v166;
          ((void (*)(char *, char *, uint64_t))*v166)(v165, &v160[v81 + v70], v64);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v83)(v82, v165, v64);
          v70 -= v159;
          ++v71;
          Swift::Int v69 = v163;
          if (v163 == v71) {
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v68 = *v162;
        uint64_t v64 = v164;
        (*v162)(v168, v164);
        v68(v167, v64);
LABEL_59:
        Swift::Int v69 = v163;
        Swift::Int v67 = (Swift::Int)v160;
LABEL_60:
        Swift::Int v40 = v69 + 1;
        v169 += v159;
        v67 += v159;
        Swift::Int v31 = v154;
      }
      while (v40 != v152);
      Swift::Int v40 = v152;
      uint64_t v2 = v147;
      uint64_t v28 = v149;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004A0F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::Int v46 = a4;
  uint64_t v34 = a1;
  uint64_t v6 = type metadata accessor for ApprovedDeveloper();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v48 = (char *)&v32 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v47 = (char *)&v32 - v13;
  uint64_t v42 = a3;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v35 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v36 = v6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v15 = v14 * (v42 - 1);
    uint64_t v39 = v14;
    uint64_t v16 = v14 * v42;
LABEL_6:
    uint64_t v18 = 0;
    uint64_t v19 = v34;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v20 = *v46;
      uint64_t v45 = v16 + v18;
      uint64_t v21 = v16 + v18 + v20;
      uint64_t v22 = v37;
      v37(v47, v21, v6);
      v22(v48, v15 + v18 + v20, v6);
      uint64_t v23 = ApprovedDeveloper.name.getter();
      uint64_t v25 = v24;
      if (v23 == ApprovedDeveloper.name.getter() && v25 == v26)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v36;
        uint64_t v17 = *v35;
        (*v35)(v48, v36);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v47, v6);
        uint64_t v16 = v40;
        uint64_t v15 = v41;
LABEL_5:
        v15 += v39;
        v16 += v39;
        if (++v42 == v33) {
          return result;
        }
        goto LABEL_6;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v36;
      uint64_t v28 = *v35;
      (*v35)(v48, v36);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v47, v6);
      uint64_t v16 = v40;
      uint64_t v15 = v41;
      if ((v27 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v46;
      if (!*v46) {
        break;
      }
      uint64_t v30 = v29 + v41 + v18;
      Swift::Int v31 = *v43;
      (*v43)(v44, v29 + v40 + v18, v6);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v30, v44, v6);
      v18 -= v39;
      if (v42 == ++v19) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A12D4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v66 = type metadata accessor for ApprovedDeveloper();
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  id v63 = (char *)&v58 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v65 = *(void *)(v17 + 72);
  if (!v65)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_69;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_70;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v65;
  unint64_t v69 = a1;
  unint64_t v68 = a4;
  uint64_t v20 = v18 / v65;
  if (v19 >= v18 / v65)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v65;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v40 = a4 + v22;
      unint64_t v67 = a4 + v22;
      unint64_t v69 = a2;
      uint64_t v62 = (char *)a1;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v65;
        uint64_t v65 = *(void *)(v8 + 16);
        unint64_t v60 = a4;
        uint64_t v61 = v8 + 16;
        uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v43 = a3;
          uint64_t v44 = (void (*)(char *, unint64_t, uint64_t))v65;
          uint64_t v45 = v66;
          ((void (*)(char *, unint64_t, uint64_t))v65)(v63, v40 + v42, v66);
          unint64_t v46 = a2 + v42;
          v44(v64, a2 + v42, v45);
          uint64_t v47 = ApprovedDeveloper.name.getter();
          uint64_t v49 = v48;
          if (v47 == ApprovedDeveloper.name.getter() && v49 == v50) {
            char v51 = 0;
          }
          else {
            char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v52 = v43 + v42;
          uint64_t v53 = *v59;
          uint64_t v54 = v66;
          (*v59)(v64, v66);
          v53(v63, v54);
          unint64_t v55 = v60;
          if (v51)
          {
            if (v43 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v69 += v42;
          }
          else
          {
            unint64_t v56 = v67;
            v67 += v42;
            if (v43 < v56 || v52 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != v56)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v46 = a2;
          }
          unint64_t v40 = v67;
          if (v67 <= v55) {
            break;
          }
          a2 = v46;
          a3 = v43 + v42;
        }
        while (v46 > (unint64_t)v62);
      }
LABEL_67:
      sub_1002536AC(&v69, &v68, (uint64_t *)&v67);
      return 1;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v65;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v64 = (char *)(a4 + v21);
    unint64_t v67 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      id v63 = *(char **)(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v24 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        unint64_t v25 = a3;
        uint64_t v26 = v66;
        char v27 = (void (*)(char *, unint64_t, uint64_t))v63;
        ((void (*)(char *, unint64_t, uint64_t))v63)(v16, a2, v66);
        v27(v62, a4, v26);
        uint64_t v28 = ApprovedDeveloper.name.getter();
        uint64_t v30 = v29;
        if (v28 == ApprovedDeveloper.name.getter() && v30 == v31) {
          break;
        }
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = *v24;
        uint64_t v36 = v66;
        (*v24)(v62, v66);
        v35(v16, v36);
        if ((v34 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v37 = v69;
        unint64_t v38 = a2 + v65;
        if (v69 < a2 || v69 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
          a3 = v25;
        }
        else
        {
          a3 = v25;
          if (v69 == a2) {
            unint64_t v37 = a2;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v69 = v37 + v65;
        a4 = v68;
        if (v68 < (unint64_t)v64)
        {
          a2 = v38;
          if (v38 < a3) {
            continue;
          }
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v32 = *v24;
      uint64_t v33 = v66;
      (*v24)(v62, v66);
      v32(v16, v33);
LABEL_31:
      unint64_t v37 = v69;
      unint64_t v39 = v68 + v65;
      if (v69 < v68 || v69 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack();
        a3 = v25;
      }
      else
      {
        a3 = v25;
        if (v69 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v68 = v39;
      unint64_t v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004A199C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10017B924(&qword_10065D078);
    sub_1004A1A30(a2, (void (*)(uint64_t))&type metadata accessor for ApprovedDeveloper);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004A1A30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004A1A78(uint64_t a1)
{
  return sub_10049FCF0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1004A1A94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  sub_100012670(*a1, v10);
  id v11 = sub_10054A958(v9, v10);
  sub_100013510(v9, v10);
  if (v4)
  {
    sub_100274568(a2);
  }
  else
  {
    int v16 = 0x8000;
    int64_t v18 = &type metadata for FairPlayDecryptionSession;
    uint64_t v19 = &off_100648B70;
    id v17 = v11;
    sub_1002745DC(a3, (uint64_t)v15);
    *(_OWORD *)(a4 + 40) = xmmword_1005A5CE0;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    *(_OWORD *)(a4 + 120) = 0u;
    sub_10019B17C((uint64_t)&v16, a4);
    sub_100274644((uint64_t)a2, (uint64_t)&v20);
    if ((void)v21 == 1)
    {
      sub_10001729C((uint64_t)v15, &qword_1006666D0);
      sub_100014524((uint64_t)&v16);
      sub_10001729C(a4 + 56, &qword_10065DFD8);
      *(_OWORD *)(a4 + 56) = 0u;
      *(_OWORD *)(a4 + 72) = 0u;
      *(_OWORD *)(a4 + 88) = 0u;
      *(_OWORD *)(a4 + 104) = 0u;
      *(_OWORD *)(a4 + 120) = 0u;
    }
    else
    {
      v23[0] = v20;
      v23[1] = v21;
      uint64_t v23[2] = v22;
      sub_1002745DC((uint64_t)v15, (uint64_t)v13);
      sub_100270A64((uint64_t)v23, (uint64_t)v13, (uint64_t)v14);
      sub_10001729C((uint64_t)v15, &qword_1006666D0);
      sub_100014524((uint64_t)&v16);
      sub_100274700((uint64_t)v14, a4 + 56);
    }
  }
  sub_1004A1D14((uint64_t)a1);
  return sub_10001729C(a3, &qword_1006666D0);
}

void sub_1004A1C6C(uint64_t *a1)
{
}

uint64_t sub_1004A1C88(uint64_t a1, unint64_t a2)
{
  return sub_10054AF00(a1, a2, *(void *)(v2 + 8));
}

uint64_t sub_1004A1CA4()
{
  uint64_t result = sub_1000199EC(*(void *)(v0 + 8));
  if (result)
  {
    uint64_t v2 = result;
    sub_1004A1D74();
    swift_allocError();
    *(void *)uint64_t v3 = v2;
    *(_OWORD *)(v3 + 8) = xmmword_1005B1D80;
    *(unsigned char *)(v3 + 24) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004A1D14(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for FairPlayDecryptionSession()
{
  return &type metadata for FairPlayDecryptionSession;
}

unint64_t sub_1004A1D74()
{
  unint64_t result = qword_100664AC0;
  if (!qword_100664AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664AC0);
  }
  return result;
}

uint64_t sub_1004A1DC8()
{
  uint64_t v0 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for URL.DirectoryHint.isDirectory(_:), v3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, 1, 1, v7);
  URL.init(filePath:directoryHint:relativeTo:)();
  id v11 = objc_allocWithZone((Class)NSBundle);
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v15 = [v11 initWithURL:v13];

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v15) {
    qword_10068DA88 = (uint64_t)v15;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A2008(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 568) = v5;
  *(void *)(v6 + 560) = a5;
  *(void *)(v6 + 552) = a4;
  *(unsigned char *)(v6 + 793) = a3;
  *(unsigned char *)(v6 + 792) = a2;
  *(void *)(v6 + 544) = a1;
  uint64_t v7 = sub_1000172F8((uint64_t *)&unk_10065DC50);
  *(void *)(v6 + 576) = v7;
  *(void *)(v6 + 584) = *(void *)(v7 - 8);
  *(void *)(v6 + 592) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 600) = v8;
  *(void *)(v6 + 608) = *(void *)(v8 - 8);
  *(void *)(v6 + 616) = swift_task_alloc();
  *(void *)(v6 + 624) = swift_task_alloc();
  *(void *)(v6 + 632) = swift_task_alloc();
  *(void *)(v6 + 640) = swift_task_alloc();
  *(void *)(v6 + 648) = swift_task_alloc();
  *(void *)(v6 + 656) = swift_task_alloc();
  *(void *)(v6 + 664) = swift_task_alloc();
  *(void *)(v6 + 672) = swift_task_alloc();
  *(void *)(v6 + 680) = swift_task_alloc();
  *(void *)(v6 + 688) = swift_task_alloc();
  *(void *)(v6 + 696) = swift_task_alloc();
  *(void *)(v6 + 704) = swift_task_alloc();
  return _swift_task_switch(sub_1004A21F0, 0, 0);
}

uint64_t sub_1004A21F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[70];
  uint64_t v3 = (void *)v1[69];
  static Logger.restore.getter();
  id v4 = v3;
  id v5 = v2;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v224 = v1;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (void *)v1[70];
    id v11 = (void *)v1[69];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412546;
    v1[66] = v11;
    id v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v11;

    *(_WORD *)(v12 + 12) = 2112;
    v1[67] = v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13[1] = v10;

    uint64_t v1 = v224;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@][%@)] Hard failing restore", (uint8_t *)v12, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v16 = (void *)v1[70];
    uint64_t v17 = (void *)v1[69];
  }
  uint64_t v18 = v1[88];
  uint64_t v19 = v1[76];
  uint64_t v20 = v1[75];
  long long v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v1[89] = v21;
  v1[90] = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v21(v18, v20);
  long long v22 = (void *)_convertErrorToNSError(_:)();
  id v23 = (id)IXCreateUserPresentableError();
  v1[91] = v23;

  if (!v23)
  {
    unint64_t v39 = (void *)v1[70];
    unint64_t v40 = (void *)v1[69];
    static Logger.restore.getter();
    id v41 = v40;
    id v42 = v39;
    id v43 = v41;
    id v44 = v42;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = (void *)v1[70];
    uint64_t v49 = (void *)v1[69];
    if (v47)
    {
      os_log_type_t typeb = v46;
      uint64_t v50 = swift_slowAlloc();
      char v51 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 138412546;
      v1[57] = v49;
      id v52 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v51 = v49;

      uint64_t v1 = v224;
      *(_WORD *)(v50 + 12) = 2112;
      v224[56] = v48;
      id v53 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v51[1] = v48;

      _os_log_impl((void *)&_mh_execute_header, v45, typeb, "[%@][%@] Failed to create error", (uint8_t *)v50, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v45 = v1[69];
    }
    uint64_t v73 = v1[81];
    uint64_t v74 = v1[75];
    goto LABEL_19;
  }
  unsigned __int8 v24 = [(id)v1[71] conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithUserDataPromise];
  unint64_t v25 = (void *)v1[71];
  if ((v24 & 1) == 0)
  {
    unint64_t v221 = v21;
    uint64_t v54 = (void *)_convertErrorToNSError(_:)();
    v1[46] = 0;
    unsigned int v55 = [v25 cancelForReason:v54 client:28 error:v1 + 46];

    unint64_t v56 = (void *)v1[46];
    uint64_t v57 = (void *)v1[70];
    uint64_t v58 = (void *)v1[69];
    if (v55)
    {
      id v59 = v56;
      static Logger.restore.getter();
      id v60 = v58;
      id v61 = v57;
      id v62 = v60;
      id v63 = v61;
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      BOOL v66 = os_log_type_enabled(v64, v65);
      unint64_t v67 = (void *)v1[70];
      unint64_t v68 = (void *)v1[69];
      if (v66)
      {
        os_log_type_t v208 = v65;
        uint64_t v69 = swift_slowAlloc();
        uint64_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 138412546;
        v1[36] = v68;
        *(void *)typec = v23;
        id v71 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v70 = v68;

        *(_WORD *)(v69 + 12) = 2112;
        v1[37] = v67;
        id v72 = v67;
        id v23 = *(id *)typec;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v70[1] = v67;

        uint64_t v1 = v224;
        _os_log_impl((void *)&_mh_execute_header, v64, v208, "[%@][%@] Canceled app coordinator", (uint8_t *)v69, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      v221(v1[87], v1[75]);
    }
    else
    {
      os_log_type_t typea = v23;
      id v92 = v56;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.restore.getter();
      id v93 = v58;
      id v94 = v57;
      swift_errorRetain();
      id v95 = v93;
      id v96 = v94;
      swift_errorRetain();
      uint64_t v97 = Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.error.getter();
      BOOL v99 = os_log_type_enabled(v97, v98);
      BOOL v100 = (void *)v1[70];
      unint64_t v101 = v1;
      uint64_t v102 = (void *)v1[69];
      if (v99)
      {
        os_log_type_t v211 = v98;
        uint64_t v103 = swift_slowAlloc();
        uint64_t v104 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 138412802;
        v101[45] = v102;
        id v105 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v104 = v102;
        uint64_t v106 = v104;

        *(_WORD *)(v103 + 12) = 2112;
        v101[34] = v100;
        id v107 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v104[1] = v100;

        *(_WORD *)(v103 + 22) = 2112;
        swift_errorRetain();
        uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
        v101[35] = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v106[2] = v108;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v97, v211, "[%@][%@] Unable to cancel coordinator due to error: %@", (uint8_t *)v103, 0x20u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      v221(v101[80], v101[75]);
    }
    goto LABEL_55;
  }
  os_log_type_t type = v23;
  unsigned int v26 = [v25 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise];
  char v27 = (void *)v1[71];
  if (!v26)
  {
    uint64_t v75 = (void *)_convertErrorToNSError(_:)();
    v1[38] = 0;
    unsigned int v76 = [v27 cancelForReason:v75 client:28 error:v1 + 38];

    uint64_t v77 = (void *)v1[38];
    uint64_t v78 = (void *)v1[70];
    char v79 = (void *)v1[69];
    if (!v76)
    {
      id v109 = v77;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.restore.getter();
      id v110 = v79;
      id v111 = v78;
      swift_errorRetain();
      id v112 = v110;
      id v113 = v111;
      swift_errorRetain();
      uint64_t v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.error.getter();
      BOOL v116 = os_log_type_enabled(v114, v115);
      BOOL v117 = (void *)v1[70];
      uint64_t v118 = (void *)v1[69];
      if (v116)
      {
        os_log_type_t v212 = v115;
        uint64_t v119 = v1 + 40;
        os_log_t log = (os_log_t)(v1 + 41);
        uint64_t v120 = swift_slowAlloc();
        char v222 = v21;
        uint64_t v121 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v120 = 138412802;
        v1[39] = v118;
        uint64_t v210 = v114;
        id v122 = v118;
        uint64_t v1 = v224;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v121 = v118;

        *(_WORD *)(v120 + 12) = 2112;
        *uint64_t v119 = v117;
        id v123 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v121[1] = v117;

        *(_WORD *)(v120 + 22) = 2112;
        swift_errorRetain();
        uint64_t v124 = _swift_stdlib_bridgeErrorToNSError();
        log->Class isa = (Class)v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v121[2] = v124;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v210, v212, "[%@][%@] Unable to cancel coordinator due to error: %@", (uint8_t *)v120, 0x20u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        long long v21 = v222;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      v21(v1[77], v1[75]);
      goto LABEL_55;
    }
    id v80 = v77;
    static Logger.restore.getter();
    id v81 = v79;
    id v82 = v78;
    id v83 = v81;
    id v84 = v82;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    BOOL v86 = os_log_type_enabled(v45, v85);
    unint64_t v87 = (void *)v1[70];
    Swift::Int v88 = (void *)v1[69];
    if (v86)
    {
      uint64_t v89 = swift_slowAlloc();
      uint64_t v209 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 138412546;
      v1[42] = v88;
      id v90 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v209 = v88;

      *(_WORD *)(v89 + 12) = 2112;
      v1[43] = v87;
      id v91 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v209[1] = v87;

      uint64_t v1 = v224;
      _os_log_impl((void *)&_mh_execute_header, v45, v85, "[%@][%@] Canceled app coordinator", (uint8_t *)v89, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v45 = v1[69];
    }
    uint64_t v73 = v1[82];
    uint64_t v74 = v1[75];

LABEL_19:
    v21(v73, v74);
    goto LABEL_55;
  }
  v1[44] = &OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise;
  uint64_t v28 = swift_dynamicCastObjCProtocolConditional();
  if (!v28)
  {
    __break(1u);
    return _swift_continuation_await(v28);
  }
  uint64_t v29 = (void *)v28;
  uint64_t v30 = (void **)(v1 + 62);
  id v31 = (id)v1[71];
  uint64_t v32 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
  if ([v29 hasAppAssetPromise])
  {
    *uint64_t v30 = 0;
    id v33 = [v29 appAssetPromiseWithError:v1 + 62];
    char v34 = *v30;
    if (v33)
    {
      uint64_t v35 = v33;
      uint64_t v36 = (void *)v1[71];
      id v37 = v34;

      self;
      id v38 = (id)swift_dynamicCastObjCClass();
      if (v38) {
        goto LABEL_47;
      }
      char v207 = v29;
      uint64_t v220 = v21;
    }
    else
    {
      char v207 = v29;
      uint64_t v220 = v21;
      uint64_t v125 = (void *)v1[71];
      uint64_t v126 = (void *)v1[70];
      uint64_t v127 = (void *)v1[69];
      id v128 = v34;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.restore.getter();
      id v129 = v127;
      id v130 = v126;
      swift_errorRetain();
      id v131 = v129;
      id v132 = v130;
      swift_errorRetain();
      uint64_t v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.error.getter();
      BOOL v135 = os_log_type_enabled(v133, v134);
      uint64_t v136 = (void *)v1[70];
      unint64_t v137 = (void *)v1[69];
      if (v135)
      {
        uint64_t v138 = swift_slowAlloc();
        Swift::String_optional v139 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v138 = 138412802;
        v224[63] = v137;
        id v140 = v137;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v139 = v137;

        *(_WORD *)(v138 + 12) = 2112;
        v224[64] = v136;
        id v141 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v139[1] = v136;

        *(_WORD *)(v138 + 22) = 2112;
        swift_errorRetain();
        uint64_t v142 = _swift_stdlib_bridgeErrorToNSError();
        v224[65] = v142;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v139[2] = v142;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "[%@][%@] Unable get asset promise due to error: %@", (uint8_t *)v138, 0x20u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        uint64_t v1 = v224;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
      v21(v1[86], v1[75]);
      uint64_t v32 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
    }
  }
  else
  {
    char v207 = v29;
    uint64_t v220 = v21;
  }
  uint64_t v143 = (void *)v1[70];
  unint64_t v144 = (void *)v1[69];
  static Logger.restore.getter();
  id v145 = v144;
  id v146 = v143;
  id v147 = v145;
  id v148 = v146;
  uint64_t v149 = Logger.logObject.getter();
  os_log_type_t v150 = static os_log_type_t.default.getter();
  BOOL v151 = os_log_type_enabled(v149, v150);
  Swift::Int v152 = (void *)v1[70];
  uint64_t v153 = (void *)v1[69];
  if (v151)
  {
    Swift::Int v154 = v1 + 61;
    uint64_t v155 = swift_slowAlloc();
    unint64_t v156 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v155 = 138412546;
    v1[60] = v153;
    id v157 = v153;
    uint64_t v1 = v224;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v156 = v153;

    *(_WORD *)(v155 + 12) = 2112;
    *Swift::Int v154 = v152;
    id v158 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v156[1] = v152;

    uint64_t v32 = &_s14MarketplaceKit25SecureButtonActionRequestV0E0O9preflightyAE10Foundation4DataVcAEmFWC_ptr;
    _os_log_impl((void *)&_mh_execute_header, v149, v150, "[%@][%@] Creating app asset promise", (uint8_t *)v155, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v149 = v1[69];
  }
  uint64_t v159 = v1[85];
  uint64_t v160 = v1[75];

  v220(v159, v160);
  sub_10044B8D0((uint64_t)_swiftEmptyArrayStorage);
  id v161 = objc_allocWithZone((Class)v32[465]);
  NSString v162 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v38 = [v161 initWithName:v162 client:28 streamingZipOptions:isa archiveSize:0 diskSpaceNeeded:0];
  v1[92] = v38;

  if (!v38)
  {

    goto LABEL_55;
  }
  self;
  uint64_t v164 = swift_dynamicCastObjCClass();
  if (v164)
  {
    uint64_t v165 = (void *)v164;
    uint64_t v166 = (void *)v1[71];
    id v167 = v38;
    v1[52] = 0;
    id v168 = v166;
    unsigned int v169 = [v207 setAppAssetPromise:v165 error:v1 + 52];
    uint64_t v170 = (void *)v1[52];
    if (v169)
    {
      uint64_t v171 = v1[74];
      uint64_t v172 = v1[73];
      uint64_t v173 = v1[72];
      uint64_t v174 = (void *)v1[71];
      id v175 = v170;

      uint64_t v176 = _convertErrorToNSError(_:)();
      v1[93] = v176;
      v1[2] = v1;
      v1[3] = sub_1004A3B5C;
      swift_continuation_init();
      v1[25] = v173;
      uint64_t v177 = sub_10019CE94(v1 + 22);
      sub_1000172F8(&qword_10065B260);
      CheckedContinuation.init(continuation:function:)();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v172 + 32))(v177, v171, v173);
      v1[18] = _NSConcreteStackBlock;
      v1[19] = 1107296256;
      v1[20] = sub_1004A74E0;
      v1[21] = &unk_100648C88;
      [v165 cancelForReason:v176 client:28 completion:v1 + 18];
      uint64_t v28 = (uint64_t)(v1 + 2);
      goto LABEL_59;
    }
    id v179 = v170;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v180 = (void *)v1[70];
    id v181 = (void *)v1[69];

    static Logger.restore.getter();
    id v182 = v181;
    id v183 = v180;
    swift_errorRetain();
    id v184 = v182;
    id v185 = v183;
    swift_errorRetain();
    uint64_t v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.error.getter();
    BOOL v188 = os_log_type_enabled(v186, v187);
    uint64_t v189 = (void *)v1[70];
    id v190 = (void *)v1[69];
    if (v188)
    {
      os_log_type_t v219 = v187;
      id v191 = v1 + 54;
      uint64_t v213 = v1 + 55;
      uint64_t v223 = (void *)v1[92];
      uint64_t v192 = swift_slowAlloc();
      uint64_t v193 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v192 = 138412802;
      v1[53] = v190;
      typed = v186;
      id v194 = v190;
      uint64_t v1 = v224;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v193 = v190;

      *(_WORD *)(v192 + 12) = 2112;
      void *v191 = v189;
      id v195 = v189;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v193[1] = v189;

      *(_WORD *)(v192 + 22) = 2112;
      swift_errorRetain();
      uint64_t v196 = _swift_stdlib_bridgeErrorToNSError();
      *uint64_t v213 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v193[2] = v196;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, typed, v219, "[%@][%@] Unable to cancel app asset promise due to error: %@", (uint8_t *)v192, 0x20u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v197 = (void *)v1[92];
    ((void (*)(void, void))v1[89])(v1[79], v1[75]);
    id v198 = v197;
    id v178 = (id)v1[92];
    goto LABEL_53;
  }
LABEL_47:
  id v178 = v38;
LABEL_53:
  v1[96] = v178;
  v1[95] = v178;
  if (([v178 isComplete] & 1) == 0)
  {
    uint64_t v201 = v1[74];
    uint64_t v202 = v1[73];
    uint64_t v203 = v1[72];
    uint64_t v204 = _convertErrorToNSError(_:)();
    v1[97] = v204;
    v1[10] = v1;
    v1[11] = sub_1004A415C;
    swift_continuation_init();
    v1[33] = v203;
    unint64_t v205 = sub_10019CE94(v1 + 30);
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v202 + 32))(v205, v201, v203);
    v1[26] = _NSConcreteStackBlock;
    v1[27] = 1107296256;
    v1[28] = sub_1004A74E0;
    v1[29] = &unk_100648C60;
    [v178 cancelForReason:v204 client:28 completion:v1 + 26];
    uint64_t v28 = (uint64_t)(v1 + 10);
LABEL_59:
    return _swift_continuation_await(v28);
  }

LABEL_55:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v199 = (uint64_t (*)(void))v224[1];
  return v199();
}

uint64_t sub_1004A3B5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 752) = v1;
  if (v1) {
    uint64_t v2 = sub_1004A45A8;
  }
  else {
    uint64_t v2 = sub_1004A3C98;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004A3C98()
{
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v2 = *(void **)(v0 + 552);

  static Logger.restore.getter();
  id v3 = v2;
  id v4 = v1;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v31 = *(void **)(v0 + 736);
    os_log_type_t v9 = *(void **)(v0 + 560);
    uint64_t v10 = *(void **)(v0 + 552);
    os_log_type_t type = v8;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v0 + 464) = v10;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v10;

    *(_WORD *)(v11 + 12) = 2112;
    *(void *)(v0 + 472) = v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v9;

    _os_log_impl((void *)&_mh_execute_header, v7, type, "[%@][%@] Set app asset fake promise", (uint8_t *)v11, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v15 = *(void **)(v0 + 736);
    int v16 = *(void **)(v0 + 560);

    id v7 = *(NSObject **)(v0 + 552);
  }
  uint64_t v17 = *(void **)(v0 + 736);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v19 = *(void *)(v0 + 672);
  uint64_t v20 = *(void *)(v0 + 600);

  v18(v19, v20);
  long long v21 = *(void **)(v0 + 736);
  *(void *)(v0 + 768) = v21;
  *(void *)(v0 + 760) = v21;
  id v22 = v17;
  if ([v21 isComplete])
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 592);
    uint64_t v26 = *(void *)(v0 + 584);
    uint64_t v27 = *(void *)(v0 + 576);
    uint64_t v28 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 776) = v28;
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 88) = sub_1004A415C;
    swift_continuation_init();
    *(void *)(v0 + 264) = v27;
    uint64_t v29 = sub_10019CE94((uint64_t *)(v0 + 240));
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 32))(v29, v25, v27);
    *(void *)(v0 + 208) = _NSConcreteStackBlock;
    *(void *)(v0 + 216) = 1107296256;
    *(void *)(v0 + 224) = sub_1004A74E0;
    *(void *)(v0 + 232) = &unk_100648C60;
    [v21 cancelForReason:v28 client:28 completion:v0 + 208];
    return _swift_continuation_await(v0 + 80);
  }
}

uint64_t sub_1004A415C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 784) = v1;
  if (v1) {
    uint64_t v2 = sub_1004A4AF0;
  }
  else {
    uint64_t v2 = sub_1004A4298;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004A4298()
{
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v2 = *(void **)(v0 + 552);

  static Logger.restore.getter();
  id v3 = v2;
  id v4 = v1;
  id v5 = v3;
  id v6 = v4;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = *(void **)(v0 + 560);
    uint64_t v10 = *(void **)(v0 + 552);
    os_log_type_t type = v8;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v0 + 400) = v10;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v10;

    *(_WORD *)(v11 + 12) = 2112;
    *(void *)(v0 + 408) = v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v9;

    _os_log_impl((void *)&_mh_execute_header, v7, type, "[%@][%@] Canceled app asset promise", (uint8_t *)v11, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    id v15 = (void **)(v0 + 760);
  }
  else
  {
    id v15 = (void **)(v0 + 552);
    int v16 = *(void **)(v0 + 560);

    id v7 = *(NSObject **)(v0 + 760);
  }
  uint64_t v17 = *v15;
  uint64_t v18 = *(void **)(v0 + 768);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v20 = *(void *)(v0 + 664);
  uint64_t v21 = *(void *)(v0 + 600);

  v19(v20, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_1004A45A8()
{
  swift_willThrow();
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v2 = *(void **)(v0 + 552);

  static Logger.restore.getter();
  id v3 = v2;
  id v4 = v1;
  swift_errorRetain();
  id v5 = v3;
  id v6 = v4;
  swift_errorRetain();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_t log = v7;
    id v31 = *(void **)(v0 + 736);
    os_log_type_t v9 = *(void **)(v0 + 560);
    uint64_t v10 = *(void **)(v0 + 552);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412802;
    *(void *)(v0 + 424) = v10;
    os_log_type_t type = v8;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v10;

    *(_WORD *)(v11 + 12) = 2112;
    *(void *)(v0 + 432) = v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v9;

    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 440) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[2] = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@][%@] Unable to cancel app asset promise due to error: %@", (uint8_t *)v11, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    int v16 = *(void **)(v0 + 560);
    uint64_t v17 = *(void **)(v0 + 552);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = *(void **)(v0 + 736);
  (*(void (**)(void, void))(v0 + 712))(*(void *)(v0 + 632), *(void *)(v0 + 600));
  uint64_t v19 = *(void **)(v0 + 736);
  *(void *)(v0 + 768) = v19;
  *(void *)(v0 + 760) = v19;
  id v20 = v18;
  if ([v19 isComplete])
  {
    uint64_t v21 = *(void **)(v0 + 728);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 592);
    uint64_t v25 = *(void *)(v0 + 584);
    uint64_t v26 = *(void *)(v0 + 576);
    uint64_t v27 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 776) = v27;
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 88) = sub_1004A415C;
    swift_continuation_init();
    *(void *)(v0 + 264) = v26;
    uint64_t v28 = sub_10019CE94((uint64_t *)(v0 + 240));
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v25 + 32))(v28, v24, v26);
    *(void *)(v0 + 208) = _NSConcreteStackBlock;
    *(void *)(v0 + 216) = 1107296256;
    *(void *)(v0 + 224) = sub_1004A74E0;
    *(void *)(v0 + 232) = &unk_100648C60;
    [v19 cancelForReason:v27 client:28 completion:v0 + 208];
    return _swift_continuation_await(v0 + 80);
  }
}

uint64_t sub_1004A4AF0()
{
  uint64_t v1 = *(void **)(v0 + 776);
  uint64_t v2 = *(void **)(v0 + 560);
  id v3 = *(void **)(v0 + 552);
  swift_willThrow();

  static Logger.restore.getter();
  id v4 = v3;
  id v5 = v2;
  swift_errorRetain();
  id v6 = v4;
  id v7 = v5;
  swift_errorRetain();
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v27 = *(void **)(v0 + 760);
    uint64_t v28 = *(NSObject **)(v0 + 768);
    uint64_t v26 = *(void **)(v0 + 728);
    uint64_t v10 = *(void **)(v0 + 560);
    uint64_t v11 = *(void **)(v0 + 552);
    uint64_t v12 = swift_slowAlloc();
    id v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412802;
    *(void *)(v0 + 376) = v11;
    id v14 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v13 = v11;

    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v0 + 384) = v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13[1] = v10;

    *(_WORD *)(v12 + 22) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 392) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13[2] = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@][%@] Unable to cancel app asset promise due to error: %@", (uint8_t *)v12, 0x20u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    os_log_type_t v8 = v28;
  }
  else
  {
    uint64_t v17 = *(void **)(v0 + 768);
    uint64_t v18 = *(void **)(v0 + 760);
    uint64_t v19 = *(void **)(v0 + 560);
    id v20 = *(void **)(v0 + 552);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 712);
  uint64_t v22 = *(void *)(v0 + 624);
  uint64_t v23 = *(void *)(v0 + 600);

  v21(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1004A4EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[39] = a5;
  v6[40] = v5;
  v6[37] = a3;
  v6[38] = a4;
  v6[35] = a1;
  v6[36] = a2;
  uint64_t v7 = sub_1000172F8((uint64_t *)&unk_10065DC50);
  v6[41] = v7;
  v6[42] = *(void *)(v7 - 8);
  v6[43] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v6[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URL();
  v6[45] = v8;
  v6[46] = *(void *)(v8 - 8);
  v6[47] = swift_task_alloc();
  v6[48] = type metadata accessor for MediaAPIMetadata();
  v6[49] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v6[50] = v9;
  v6[51] = *(void *)(v9 - 8);
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v6[54] = swift_task_alloc();
  return _swift_task_switch(sub_1004A50EC, 0, 0);
}

uint64_t sub_1004A50EC()
{
  if ([*(id *)(v0 + 320) creatorIdentifier] != (id)28
    || ([*(id *)(v0 + 320) hasPlaceholderPromise] & 1) != 0)
  {
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v37 = *(uint64_t (**)(void))(v0 + 8);
    return v37();
  }
  uint64_t v1 = *(void **)(v0 + 312);
  static Logger.restore.getter();
  id v2 = v1;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  id v6 = *(void **)(v0 + 312);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    *(void *)(v0 + 272) = v6;
    id v9 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] Configuring placeholder promise", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v11 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 408);
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = *(void *)(v0 + 288);
  id v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 440) = v15;
  *(void *)(v0 + 448) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v10, v11);
  sub_100269A78();
  swift_bridgeObjectRetain_n();
  id v16 = sub_1004E5B14(v13, v14, v13, v14, 2);
  *(void *)(v0 + 456) = v16;
  uint64_t v17 = v16;
  if (!v16)
  {
    sub_1003B1E70();
    swift_allocError();
    *uint64_t v36 = 3;
    swift_willThrow();
    goto LABEL_16;
  }
  id v18 = [objc_allocWithZone((Class)IXPlaceholderAttributes) init];
  *(void *)(v0 + 464) = v18;
  *(void *)(v0 + 232) = 0;
  unsigned int v19 = [v17 setPlaceholderAttributes:v18 error:v0 + 232];
  id v20 = *(void **)(v0 + 232);
  if (!v19
    || (uint64_t v21 = *(void *)(v0 + 296),
        *(void *)(v0 + 240) = 0,
        id v22 = v20,
        unsigned int v23 = [v17 setMetadata:v21 error:v0 + 240],
        id v20 = *(void **)(v0 + 240),
        !v23))
  {
    id v35 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_16;
  }
  uint64_t v24 = *(void **)(v0 + 296);
  id v25 = v20;
  id v26 = [v24 itemID];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)(v0 + 304);
    uint64_t v29 = *(void **)(v0 + 312);
    id v30 = [v26 unsignedLongLongValue];

    sub_10019B17C(v28, v0 + 112);
    *(void *)(v0 + 80) = v30;
    *(void *)(v0 + 88) = 0;
    *(unsigned char *)(v0 + 96) = 1;
    *(void *)(v0 + 104) = v29;
    id v31 = v29;
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 472) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_1004A5998;
    uint64_t v33 = *(void *)(v0 + 392);
    return sub_100273008(v33);
  }
  else
  {
    id v38 = *(void **)(v0 + 456);
    *(void *)(v0 + 216) = 0;
    unsigned int v39 = [v38 setConfigurationCompleteWithError:v0 + 216];
    unint64_t v40 = *(void **)(v0 + 216);
    if (!v39)
    {
      uint64_t v57 = *(void **)(v0 + 456);
      unint64_t v56 = *(void **)(v0 + 464);
      id v58 = v40;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_16;
    }
    uint64_t v41 = *(void *)(v0 + 456);
    id v42 = *(void **)(v0 + 320);
    *(void *)(v0 + 224) = 0;
    id v43 = v40;
    unsigned int v44 = [v42 setPlaceholderPromise:v41 error:v0 + 224];
    uint64_t v45 = *(void **)(v0 + 224);
    if (v44)
    {
      os_log_type_t v46 = *(void **)(v0 + 312);
      id v47 = v45;
      static Logger.restore.getter();
      id v48 = v46;
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v73 = *(void **)(v0 + 456);
        char v51 = *(void **)(v0 + 312);
        id v52 = (uint8_t *)swift_slowAlloc();
        id v53 = (void *)swift_slowAlloc();
        *(_DWORD *)id v52 = 138412290;
        *(void *)(v0 + 248) = v51;
        id v54 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v53 = v51;
        unsigned int v55 = (void **)(v0 + 464);

        _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] Placeholder promise configured", v52, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unsigned int v55 = (void **)(v0 + 312);
        unint64_t v68 = *(NSObject **)(v0 + 456);
        unint64_t v67 = *(void **)(v0 + 464);

        uint64_t v49 = v68;
      }

      uint64_t v69 = *v55;
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
      uint64_t v71 = *(void *)(v0 + 424);
      uint64_t v72 = *(void *)(v0 + 400);

      v70(v71, v72);
      goto LABEL_16;
    }
    id v59 = *(void **)(v0 + 456);
    uint64_t v61 = *(void *)(v0 + 336);
    uint64_t v60 = *(void *)(v0 + 344);
    uint64_t v62 = *(void *)(v0 + 328);
    id v63 = v45;
    *(void *)(v0 + 488) = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1003B1E70();
    swift_allocError();
    *uint64_t v64 = 2;
    uint64_t v65 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 496) = v65;
    swift_errorRelease();
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1004A692C;
    swift_continuation_init();
    *(void *)(v0 + 208) = v62;
    BOOL v66 = sub_10019CE94((uint64_t *)(v0 + 184));
    sub_1000172F8(&qword_10065B260);
    CheckedContinuation.init(continuation:function:)();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v61 + 32))(v66, v60, v62);
    *(void *)(v0 + 152) = _NSConcreteStackBlock;
    *(void *)(v0 + 160) = 1107296256;
    *(void *)(v0 + 168) = sub_1004A74E0;
    *(void *)(v0 + 176) = &unk_100648B98;
    [v59 cancelForReason:v65 client:28 completion:v0 + 152];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1004A5998()
{
  uint64_t v2 = *(void *)v1 + 80;
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  sub_10019CB0C(v2);
  if (v0) {
    id v3 = sub_1004A62BC;
  }
  else {
    id v3 = sub_1004A5AEC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A5AEC()
{
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  sub_10001893C(*(void *)(v0 + 392) + *(int *)(*(void *)(v0 + 384) + 28), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 352);
    sub_1003DF2E0(*(void *)(v0 + 392));
    sub_1002BDBEC(v4);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 376);
    id v6 = *(void **)(v0 + 312);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 368) + 32))(v5, *(void *)(v0 + 352), *(void *)(v0 + 360));
    id v7 = sub_1004A7808(v5, v6);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = *(void **)(v0 + 456);
      *(void *)(v0 + 264) = 0;
      unsigned __int8 v10 = [v9 setIconPromise:v8 error:v0 + 264];
      uint64_t v11 = *(void **)(v0 + 264);
      uint64_t v12 = *(void *)(v0 + 392);
      uint64_t v13 = *(void *)(v0 + 368);
      uint64_t v14 = *(void *)(v0 + 376);
      uint64_t v15 = *(void *)(v0 + 360);
      if (v10)
      {
        id v16 = v11;

        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
        sub_1003DF2E0(v12);
      }
      else
      {
        id v18 = v11;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
        sub_1003DF2E0(v12);
        static Logger.restore.getter();
        swift_errorRetain();
        swift_errorRetain();
        unsigned int v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v60 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 138412290;
          swift_errorRetain();
          uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 256) = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v60 = v22;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to set artwork: %@", v21, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 416), *(void *)(v0 + 400));
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 392);
      (*(void (**)(void, void))(*(void *)(v0 + 368) + 8))(*(void *)(v0 + 376), *(void *)(v0 + 360));
      sub_1003DF2E0(v17);
    }
  }
  unsigned int v23 = *(void **)(v0 + 456);
  *(void *)(v0 + 216) = 0;
  unsigned int v24 = objc_msgSend(v23, "setConfigurationCompleteWithError:", v0 + 216, v60);
  id v25 = *(void **)(v0 + 216);
  if (!v24)
  {
    id v42 = *(void **)(v0 + 456);
    uint64_t v41 = *(void **)(v0 + 464);
    id v43 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v44 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
    return v44();
  }
  uint64_t v26 = *(void *)(v0 + 456);
  uint64_t v27 = *(void **)(v0 + 320);
  *(void *)(v0 + 224) = 0;
  id v28 = v25;
  unsigned int v29 = [v27 setPlaceholderPromise:v26 error:v0 + 224];
  id v30 = *(void **)(v0 + 224);
  if (v29)
  {
    id v31 = *(void **)(v0 + 312);
    id v32 = v30;
    static Logger.restore.getter();
    id v33 = v31;
    char v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v61 = *(void **)(v0 + 456);
      uint64_t v36 = *(void **)(v0 + 312);
      id v37 = (uint8_t *)swift_slowAlloc();
      id v38 = (void *)swift_slowAlloc();
      *(_DWORD *)id v37 = 138412290;
      *(void *)(v0 + 248) = v36;
      id v39 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v38 = v36;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%@] Placeholder promise configured", v37, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v40 = (void **)(v0 + 464);
    }
    else
    {
      unint64_t v40 = (void **)(v0 + 312);
      id v54 = *(void **)(v0 + 456);
      id v53 = *(void **)(v0 + 464);
    }
    unsigned int v55 = *v40;
    unint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v57 = *(void *)(v0 + 424);
    uint64_t v58 = *(void *)(v0 + 400);

    v56(v57, v58);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned int v44 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_21;
  }
  uint64_t v45 = *(void **)(v0 + 456);
  uint64_t v47 = *(void *)(v0 + 336);
  uint64_t v46 = *(void *)(v0 + 344);
  uint64_t v48 = *(void *)(v0 + 328);
  id v49 = v30;
  *(void *)(v0 + 488) = _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_1003B1E70();
  swift_allocError();
  *os_log_type_t v50 = 2;
  uint64_t v51 = _convertErrorToNSError(_:)();
  *(void *)(v0 + 496) = v51;
  swift_errorRelease();
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1004A692C;
  swift_continuation_init();
  *(void *)(v0 + 208) = v48;
  id v52 = sub_10019CE94((uint64_t *)(v0 + 184));
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v47 + 32))(v52, v46, v48);
  *(void *)(v0 + 152) = _NSConcreteStackBlock;
  *(void *)(v0 + 160) = 1107296256;
  *(void *)(v0 + 168) = sub_1004A74E0;
  *(void *)(v0 + 176) = &unk_100648B98;
  [v45 cancelForReason:v51 client:28 completion:v0 + 152];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1004A62BC()
{
  uint64_t v1 = v0 + 216;
  static Logger.restore.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 256) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    uint64_t v1 = v0 + 216;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to set artwork: %@", v4, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 440))(*(void *)(v0 + 416), *(void *)(v0 + 400));
  id v7 = *(void **)(v0 + 456);
  *(void *)(v0 + 216) = 0;
  unsigned __int8 v8 = [v7 setConfigurationCompleteWithError:v1];
  id v9 = *(void **)(v0 + 216);
  if ((v8 & 1) == 0)
  {
    uint64_t v26 = *(void **)(v0 + 456);
    id v25 = *(void **)(v0 + 464);
    id v27 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_14:
    return v28();
  }
  uint64_t v10 = *(void *)(v0 + 456);
  uint64_t v11 = *(void **)(v0 + 320);
  *(void *)(v0 + 224) = 0;
  id v12 = v9;
  unsigned int v13 = [v11 setPlaceholderPromise:v10 error:v0 + 224];
  uint64_t v14 = *(void **)(v0 + 224);
  if (v13)
  {
    uint64_t v15 = *(void **)(v0 + 312);
    id v16 = v14;
    static Logger.restore.getter();
    id v17 = v15;
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unsigned int v44 = *(void **)(v0 + 456);
      os_log_type_t v20 = *(void **)(v0 + 312);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v0 + 248) = v20;
      id v23 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v20;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%@] Placeholder promise configured", v21, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unsigned int v24 = (void **)(v0 + 464);
    }
    else
    {
      unsigned int v24 = (void **)(v0 + 312);
      id v38 = *(void **)(v0 + 456);
      id v37 = *(void **)(v0 + 464);
    }
    id v39 = *v24;
    unint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
    uint64_t v41 = *(void *)(v0 + 424);
    uint64_t v42 = *(void *)(v0 + 400);

    v40(v41, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v28 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_14;
  }
  unsigned int v29 = *(void **)(v0 + 456);
  uint64_t v31 = *(void *)(v0 + 336);
  uint64_t v30 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 328);
  id v33 = v14;
  *(void *)(v0 + 488) = _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_1003B1E70();
  swift_allocError();
  *char v34 = 2;
  uint64_t v35 = _convertErrorToNSError(_:)();
  *(void *)(v0 + 496) = v35;
  swift_errorRelease();
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1004A692C;
  swift_continuation_init();
  *(void *)(v0 + 208) = v32;
  uint64_t v36 = sub_10019CE94((uint64_t *)(v0 + 184));
  sub_1000172F8(&qword_10065B260);
  CheckedContinuation.init(continuation:function:)();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 32))(v36, v30, v32);
  *(void *)(v0 + 152) = _NSConcreteStackBlock;
  *(void *)(v0 + 160) = 1107296256;
  *(void *)(v0 + 168) = sub_1004A74E0;
  *(void *)(v0 + 176) = &unk_100648B98;
  [v29 cancelForReason:v35 client:28 completion:v0 + 152];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1004A692C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 504) = v1;
  if (v1) {
    uint64_t v2 = sub_1004A6B68;
  }
  else {
    uint64_t v2 = sub_1004A6A68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004A6A68()
{
  uint64_t v1 = *(void **)(v0 + 456);
  uint64_t v2 = *(void **)(v0 + 464);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1004A6B68()
{
  uint64_t v1 = (void *)v0[62];
  os_log_type_t v3 = (void *)v0[57];
  uint64_t v2 = (void *)v0[58];
  swift_willThrow();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void sub_1004A6C74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v59 = a5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v54 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)v54 - v15;
  uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v17 - 8);
  os_log_type_t v19 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain();
    static Logger.install.getter();
    swift_errorRetain();
    id v24 = a4;
    swift_errorRetain();
    id v25 = v24;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      unsigned int v29 = (void *)swift_slowAlloc();
      unint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = (uint64_t)v25;
      aBlock = (void **)v56;
      *(_DWORD *)uint64_t v28 = 138412546;
      os_log_t v55 = v26;
      id v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned int v29 = v25;

      *(_WORD *)(v28 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v31 = Error.localizedDescription.getter();
      uint64_t v60 = sub_1000143F4(v31, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v26 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, v27, "[%@] Error fetching artwork data: %{public}s", (uint8_t *)v28, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v58);
    id v39 = v59;
    unint64_t v40 = (void *)_convertErrorToNSError(_:)();
    uint64_t v65 = nullsub_1;
    uint64_t v66 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256;
    id v63 = sub_1003C85EC;
    uint64_t v64 = &unk_100648C38;
    uint64_t v41 = _Block_copy(&aBlock);
    [v39 cancelForReason:v40 client:28 completion:v41];
    _Block_release(v41);

    swift_errorRelease();
  }
  else
  {
    sub_10001893C(a1, (uint64_t)v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_1002BDBEC((uint64_t)v19);
      static Logger.install.getter();
      id v33 = a4;
      char v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        id v37 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 138412290;
        aBlock = v33;
        id v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "[%@] Error fetching artwork data", v36, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        char v34 = v33;
      }

      (*(void (**)(char *, uint64_t))(v57 + 8))(v14, v58);
      sub_1003B1E70();
      swift_allocError();
      *uint64_t v47 = 3;
      uint64_t v48 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
      uint64_t v65 = nullsub_1;
      uint64_t v66 = 0;
      aBlock = _NSConcreteStackBlock;
      uint64_t v62 = 1107296256;
      id v63 = sub_1003C85EC;
      uint64_t v64 = &unk_100648C10;
      id v49 = _Block_copy(&aBlock);
      [v59 cancelForReason:v48 client:28 completion:v49];
      _Block_release(v49);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
      static Logger.install.getter();
      uint64_t v42 = a4;
      id v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        os_log_t v55 = (os_log_t)swift_slowAlloc();
        unint64_t v56 = v45;
        *(_DWORD *)uint64_t v45 = 138412290;
        v54[1] = v45 + 4;
        aBlock = v42;
        uint64_t v46 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v55->Class isa = (Class)v42;

        _os_log_impl((void *)&_mh_execute_header, v43, v44, "[%@] Artwork request completed successfully", v56, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v43 = v42;
      }

      (*(void (**)(char *, uint64_t))(v57 + 8))(v11, v58);
      id v50 = v59;
      [v59 setShouldCopy:0];
      URL._bridgeToObjectiveC()(v51);
      id v53 = v52;
      [v50 setTransferPath:v52];

      [v50 setComplete:1];
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    }
  }
}

void sub_1004A74E0(uint64_t a1, void *a2)
{
  sub_10018AC60((void *)(a1 + 32), *(void *)(a1 + 56));
  if (a2)
  {
    id v3 = a2;
    sub_1000172F8((uint64_t *)&unk_10065DC50);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_1000172F8((uint64_t *)&unk_10065DC50);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1004A7564(uint64_t a1)
{
  return sub_100014524(a1 + 32);
}

void sub_1004A756C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URLRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self ephemeralSessionConfiguration];
  id v14 = [self sessionWithConfiguration:v13];

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  aBlock[4] = v19;
  aBlock[5] = a3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B19F4;
  aBlock[3] = &unk_100648BE8;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v17 = [v14 downloadTaskWithRequest:isa completionHandler:v16];
  _Block_release(v16);

  [v17 resume];
}

id sub_1004A7808(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)IXPromisedTransferToPath);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithName:v9 client:28 diskSpaceNeeded:0];

  if (v10)
  {
    if (URL.isFileURL.getter())
    {
      [v10 setShouldCopy:1];
      URL._bridgeToObjectiveC()(v11);
      id v13 = v12;
      [v10 setTransferPath:v12];

      [v10 setComplete:1];
    }
    else
    {
      static Logger.install.getter();
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v26 = v5;
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        uint64_t v27 = a1;
        uint64_t v28 = v14;
        *(_DWORD *)id v17 = 138412290;
        v24[1] = v17 + 4;
        id v25 = v17;
        uint64_t v19 = v14;
        a1 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v18 = v14;

        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%@] Starting artwork request", v25, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        uint64_t v5 = v26;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v15 = v14;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v14;
      *(void *)(v20 + 24) = v10;
      uint64_t v21 = v14;
      id v22 = v10;
      sub_1004A756C(a1, (uint64_t)sub_1004A7B50, v20);
      swift_release();
    }
  }
  return v10;
}

uint64_t sub_1004A7B10()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004A7B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1004A6C74(a1, a2, a3, *(void **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_1004A7B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004A7B68()
{
  return swift_release();
}

unint64_t *sub_1004A7B90(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      unsigned int v29 = (unint64_t *)&_swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_100455C1C(0, v7, 0);
      uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_1000172F8(&qword_10065B548);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_1005A3EC0;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        unint64_t v18 = v17;
        unsigned int v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_100455C1C(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        v3[2] = v20 + 1;
        uint64_t v21 = &v3[2 * v20];
        v21[4] = v2;
        v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004A7F34(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v12 = *(void **)(v3 + 24);
  uint64_t result = sub_1004ABBA8(a1, v13, v12);
  if (v2) {
    return result;
  }
  uint64_t v60 = v5;
  uint64_t v61 = v6;
  unsigned int v15 = *(unsigned __int8 *)(v3 + 32);
  unsigned int v16 = *(unsigned __int8 *)(v3 + 33);
  unsigned int v17 = *(unsigned __int8 *)(v3 + 34);
  BOOL v18 = v15 > result;
  int v59 = result;
  if (v15 == result && (BOOL v18 = v16 > BYTE1(result), v16 == BYTE1(result)))
  {
    if (v17 <= BYTE2(result))
    {
LABEL_5:
      static Logger.sql.getter();
      swift_bridgeObjectRetain_n();
      swift_retain();
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        aBlock[0] = v58;
        *(_DWORD *)uint64_t v21 = 136446466;
        swift_bridgeObjectRetain();
        v70[0] = sub_1000143F4(v13, (unint64_t)v12, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 2082;
        uint64_t v22 = sub_1004AA22C();
        v70[0] = sub_1000143F4(v22, v23, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Schema '%{public}s' already up to date at version %{public}s", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v9, v60);
    }
  }
  else if (!v18)
  {
    goto LABEL_5;
  }
  unsigned int v53 = v17;
  unsigned int v54 = v16;
  unsigned int v55 = v15;
  static Logger.sql.getter();
  id v24 = *(uint64_t (**)(void))v3;
  uint64_t v25 = *(void *)(v3 + 8);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  uint64_t v58 = v26;
  int v52 = v27;
  BOOL v28 = os_log_type_enabled(v26, v27);
  unint64_t v56 = v12;
  uint64_t v57 = v25;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v51 = v24;
    uint64_t v30 = v29;
    id v50 = (void *)swift_slowAlloc();
    aBlock[0] = v50;
    *(_DWORD *)uint64_t v30 = 136446722;
    uint64_t v49 = v30 + 4;
    swift_bridgeObjectRetain();
    v70[0] = sub_1000143F4(v13, (unint64_t)v12, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2082;
    uint64_t v31 = sub_1004AA22C();
    v70[0] = sub_1000143F4(v31, v32, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2082;
    uint64_t v33 = sub_1004AA22C();
    v70[0] = sub_1000143F4(v33, v34, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_type_t v35 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v52, "Migrating schema '%{public}s' from %{public}s to %{public}s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v24 = v51;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v11, v60);
  uint64_t v37 = v24(v36);
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    uint64_t v61 = v37;
    uint64_t v39 = v37 + 32;
    while (1)
    {
      sub_10019B17C(v39, (uint64_t)aBlock);
      sub_10019B17C((uint64_t)aBlock, (uint64_t)v70);
      sub_1000172F8(&qword_10065C038);
      if (!swift_dynamicCast()) {
        break;
      }
      sub_1004AA36C(a1, v62, v63, v64, v65);
      sub_100014524((uint64_t)aBlock);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100014524((uint64_t)v70);
      v39 += 40;
      if (!--v38) {
        goto LABEL_18;
      }
    }
    uint64_t v62 = 0;
    uint64_t v63 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    sub_10018AC60(aBlock, (uint64_t)v67);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v48._object = (void *)0x80000001005C0160;
    v48._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v48);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_18:
    swift_bridgeObjectRelease();
    NSString v40 = String._bridgeToObjectiveC()();
    uint64_t v41 = swift_allocObject();
    long long v42 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v41 + 16) = *(_OWORD *)v3;
    *(_OWORD *)(v41 + 32) = v42;
    *(_DWORD *)(v41 + 47) = *(_DWORD *)(v3 + 31);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = sub_1004ABD88;
    *(void *)(v43 + 24) = v41;
    unint64_t v68 = sub_1004ABDA0;
    uint64_t v69 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1004A87A4;
    unint64_t v67 = &unk_100648D00;
    os_log_type_t v44 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v45 = [a1 executeStatement:v40 error:aBlock bindings:v44];
    _Block_release(v44);

    id v46 = aBlock[0];
    if (!v45)
    {
      uint64_t v47 = v46;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1004A87A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t sub_1004A87F8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v30 = a1;
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = &_swiftEmptyArrayStorage;
  char v34 = 0;
  os_log_type_t v35 = &_swiftEmptyArrayStorage;
  static Logger.sql.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = a3;
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v27 = v6;
    unsigned int v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v5;
    aBlock[0] = v17;
    uint64_t v26 = a4;
    *(_DWORD *)unsigned int v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1000143F4(v30, a2, aBlock);
    a3 = v25;
    a4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
  NSString v18 = String._bridgeToObjectiveC()();
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = &v33;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = &v35;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1004AC4D0;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = (uint64_t)sub_1004AD56C;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004AA074;
  id aBlock[3] = (uint64_t)&unk_100648F58;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v6 executeQuery:v18 withResults:v21];

  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v21)
  {
    __break(1u);
  }
  else
  {
    if (v34)
    {
      uint64_t v23 = (uint64_t)v33;
      swift_errorRetain();
      aBlock[0] = v23;
      sub_1000172F8(&qword_10065B260);
      swift_willThrowTypedImpl();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = (uint64_t)v35;
    }
    sub_1004AC4EC((uint64_t)v33, v34);
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_1004A8BE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v30 = a1;
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = &_swiftEmptyArrayStorage;
  char v34 = 0;
  os_log_type_t v35 = &_swiftEmptyArrayStorage;
  static Logger.sql.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = a3;
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v27 = v6;
    unsigned int v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v5;
    aBlock[0] = v17;
    uint64_t v26 = a4;
    *(_DWORD *)unsigned int v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1000143F4(v30, a2, aBlock);
    a3 = v25;
    a4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
  NSString v18 = String._bridgeToObjectiveC()();
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = &v33;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = &v35;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1004AC478;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = (uint64_t)sub_1004AD56C;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004AA074;
  id aBlock[3] = (uint64_t)&unk_100648E68;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v6 executeQuery:v18 withResults:v21];

  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v21)
  {
    __break(1u);
  }
  else
  {
    if (v34)
    {
      uint64_t v23 = (uint64_t)v33;
      swift_errorRetain();
      aBlock[0] = v23;
      sub_1000172F8(&qword_10065B260);
      swift_willThrowTypedImpl();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = (uint64_t)v35;
    }
    sub_1004AC4EC((uint64_t)v33, v34);
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_1004A8FD8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v30 = a1;
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = &_swiftEmptyArrayStorage;
  char v34 = 0;
  os_log_type_t v35 = &_swiftEmptyArrayStorage;
  static Logger.sql.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v25 = a3;
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v27 = v6;
    unsigned int v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v5;
    aBlock[0] = v17;
    uint64_t v26 = a4;
    *(_DWORD *)unsigned int v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1000143F4(v30, a2, aBlock);
    a3 = v25;
    a4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v27;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
  NSString v18 = String._bridgeToObjectiveC()();
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = &v33;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = &v35;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_1004AC3D0;
  *(void *)(v20 + 24) = v19;
  aBlock[4] = (uint64_t)sub_1004AC3EC;
  aBlock[5] = v20;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004AA074;
  id aBlock[3] = (uint64_t)&unk_100648D78;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v6 executeQuery:v18 withResults:v21];

  _Block_release(v21);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v21)
  {
    __break(1u);
  }
  else
  {
    if (v34)
    {
      uint64_t v23 = (uint64_t)v33;
      swift_errorRetain();
      aBlock[0] = v23;
      sub_1000172F8(&qword_10065B260);
      swift_willThrowTypedImpl();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = (uint64_t)v35;
    }
    sub_1004AC4EC((uint64_t)v33, v34);
    swift_release();
    return v23;
  }
  return result;
}

uint64_t sub_1004A93C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    uint64_t v7 = *(void *)a3;
    char v8 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = a2;
    *(unsigned char *)(a3 + 8) = 1;
    swift_errorRetain();
    uint64_t v9 = v7;
    char v10 = v8;
    return sub_1004AC4EC(v9, v10);
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v20 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(void *)a3;
    char v10 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = v20;
    *(unsigned char *)(a3 + 8) = 1;
    return sub_1004AC4EC(v9, v10);
  }
  unsigned int v16 = (void *)swift_allocObject();
  long long v16[2] = a3;
  void v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1004AC508;
  *(void *)(v17 + 24) = v16;
  v21[4] = sub_1004AD550;
  v21[5] = v17;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  _OWORD v21[2] = sub_1004A9FF4;
  v21[3] = &unk_100648FD0;
  NSString v18 = _Block_copy(v21);
  id v19 = a1;
  swift_retain();
  swift_release();
  [v19 enumerateRowsUsingBlock:v18];

  _Block_release(v18);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A95BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    uint64_t v7 = *(void *)a3;
    char v8 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = a2;
    *(unsigned char *)(a3 + 8) = 1;
    swift_errorRetain();
    uint64_t v9 = v7;
    char v10 = v8;
    return sub_1004AC4EC(v9, v10);
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v20 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(void *)a3;
    char v10 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = v20;
    *(unsigned char *)(a3 + 8) = 1;
    return sub_1004AC4EC(v9, v10);
  }
  unsigned int v16 = (void *)swift_allocObject();
  long long v16[2] = a3;
  void v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1004AC424;
  *(void *)(v17 + 24) = v16;
  v21[4] = sub_1004AC440;
  v21[5] = v17;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  _OWORD v21[2] = sub_1004A9FF4;
  v21[3] = &unk_100648DF0;
  NSString v18 = _Block_copy(v21);
  id v19 = a1;
  swift_retain();
  swift_release();
  [v19 enumerateRowsUsingBlock:v18];

  _Block_release(v18);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A97B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    uint64_t v7 = *(void *)a3;
    char v8 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = a2;
    *(unsigned char *)(a3 + 8) = 1;
    swift_errorRetain();
    uint64_t v9 = v7;
    char v10 = v8;
    return sub_1004AC4EC(v9, v10);
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v20 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(void *)a3;
    char v10 = *(unsigned char *)(a3 + 8);
    *(void *)a3 = v20;
    *(unsigned char *)(a3 + 8) = 1;
    return sub_1004AC4EC(v9, v10);
  }
  unsigned int v16 = (void *)swift_allocObject();
  long long v16[2] = a3;
  void v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1004AC4A4;
  *(void *)(v17 + 24) = v16;
  v21[4] = sub_1004AD550;
  v21[5] = v17;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  _OWORD v21[2] = sub_1004A9FF4;
  v21[3] = &unk_100648EE0;
  NSString v18 = _Block_copy(v21);
  id v19 = a1;
  swift_retain();
  swift_release();
  [v19 enumerateRowsUsingBlock:v18];

  _Block_release(v18);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19) {
    __break(1u);
  }
  return result;
}

void sub_1004A99A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr), uint64_t a6, char **a7)
{
  if (a2)
  {
    uint64_t v8 = *(void *)a4;
    char v9 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = a2;
    *(unsigned char *)(a4 + 8) = 1;
    swift_errorRetain();
    uint64_t v10 = v8;
    char v11 = v9;
LABEL_3:
    sub_1004AC4EC(v10, v11);
    return;
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v14 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(void *)a4;
    char v11 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = v14;
    *(unsigned char *)(a4 + 8) = 1;
    goto LABEL_3;
  }
  id v21 = a1;
  a5(&v22);
  if (v23)
  {
  }
  else
  {
    uint64_t v15 = v22;
    unsigned int v16 = *a7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unsigned int v16 = sub_10028FFA0(0, *((void *)v16 + 2) + 1, 1, v16);
      *a7 = v16;
    }
    unint64_t v19 = *((void *)v16 + 2);
    unint64_t v18 = *((void *)v16 + 3);
    uint64_t v20 = v21;
    if (v19 >= v18 >> 1)
    {
      unsigned int v16 = sub_10028FFA0((char *)(v18 > 1), v19 + 1, 1, v16);
      uint64_t v20 = v21;
    }
    *((void *)v16 + 2) = v19 + 1;
    *(void *)&v16[8 * v19 + 32] = v15;
    *a7 = v16;
  }
}

void sub_1004A9BA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr), uint64_t a6, char **a7)
{
  if (a2)
  {
    uint64_t v8 = *(void *)a4;
    char v9 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = a2;
    *(unsigned char *)(a4 + 8) = 1;
    swift_errorRetain();
    uint64_t v10 = v8;
    char v11 = v9;
LABEL_3:
    sub_1004AC4EC(v10, v11);
    return;
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v15 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(void *)a4;
    char v11 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = v15;
    *(unsigned char *)(a4 + 8) = 1;
    goto LABEL_3;
  }
  id v14 = a1;
  a5(&v23);
  uint64_t v16 = v24;
  if (v24)
  {
    uint64_t v17 = v23;
    unint64_t v18 = *a7;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v18 = sub_1002900B8(0, *((void *)v18 + 2) + 1, 1, v18);
      *a7 = v18;
    }
    unint64_t v21 = *((void *)v18 + 2);
    unint64_t v20 = *((void *)v18 + 3);
    if (v21 >= v20 >> 1)
    {
      unint64_t v18 = sub_1002900B8((char *)(v20 > 1), v21 + 1, 1, v18);
      *a7 = v18;
    }
    *((void *)v18 + 2) = v21 + 1;
    uint64_t v22 = &v18[16 * v21];
    *((void *)v22 + 4) = v17;
    *((void *)v22 + 5) = v16;

    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_1004A9DB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(long long *__return_ptr), uint64_t a6, char **a7)
{
  if (a2)
  {
    uint64_t v8 = *(void *)a4;
    char v9 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = a2;
    *(unsigned char *)(a4 + 8) = 1;
    swift_errorRetain();
    uint64_t v10 = v8;
    char v11 = v9;
    return sub_1004AC4EC(v10, v11);
  }
  if (!a1)
  {
    type metadata accessor for InternalError();
    sub_10019FE50();
    uint64_t v16 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(void *)a4;
    char v11 = *(unsigned char *)(a4 + 8);
    *(void *)a4 = v16;
    *(unsigned char *)(a4 + 8) = 1;
    return sub_1004AC4EC(v10, v11);
  }
  id v15 = a1;
  a5(&v25);
  if (*((void *)&v25 + 1))
  {
    long long v30[2] = v27;
    v30[3] = v28;
    uint64_t v31 = v29;
    v30[0] = v25;
    v30[1] = v26;
    sub_1004ABF94((uint64_t)v30, (uint64_t)&v25);
    uint64_t v17 = *a7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a7 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v17 = sub_1002900CC(0, *((void *)v17 + 2) + 1, 1, v17);
      *a7 = v17;
    }
    unint64_t v20 = *((void *)v17 + 2);
    unint64_t v19 = *((void *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      uint64_t v17 = sub_1002900CC((char *)(v19 > 1), v20 + 1, 1, v17);
      *a7 = v17;
    }
    *((void *)v17 + 2) = v20 + 1;
    unint64_t v21 = &v17[72 * v20];
    *((_OWORD *)v21 + 2) = v25;
    long long v22 = v26;
    long long v23 = v27;
    long long v24 = v28;
    *((void *)v21 + 12) = v29;
    *((_OWORD *)v21 + 4) = v23;
    *((_OWORD *)v21 + 5) = v24;
    *((_OWORD *)v21 + 3) = v22;

    return sub_1004AC390((uint64_t)v30);
  }
  else
  {

    return sub_10001729C((uint64_t)&v25, &qword_100664BC8);
  }
}

void sub_1004A9FF4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(void *, void *, uint64_t))(a1 + 32);
  id v9 = a2;
  id v8 = a3;
  v7(a2, a3, a4);
}

void sub_1004AA074(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
}

BOOL sub_1004AA0EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  BOOL v6 = v3 == v5;
  BOOL v7 = v3 < v5;
  if (v6) {
    BOOL v7 = a1[2] < a2[2];
  }
  if (v2 == v4) {
    return v7;
  }
  else {
    return v2 < v4;
  }
}

BOOL sub_1004AA12C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  BOOL v6 = v5 == v3;
  BOOL v7 = v5 < v3;
  if (v6) {
    BOOL v7 = a2[2] < a1[2];
  }
  if (v4 == v2) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = v4 < v2;
  }
  return !v8;
}

BOOL sub_1004AA170(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  BOOL v6 = v3 == v5;
  BOOL v7 = v3 < v5;
  if (v6) {
    BOOL v7 = a1[2] < a2[2];
  }
  if (v2 == v4) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = v2 < v4;
  }
  return !v8;
}

BOOL sub_1004AA1B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  BOOL v6 = v5 == v3;
  BOOL v7 = v5 < v3;
  if (v6) {
    BOOL v7 = a2[2] < a1[2];
  }
  if (v4 == v2) {
    return v7;
  }
  else {
    return v4 < v2;
  }
}

BOOL sub_1004AA1F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1004AA22C()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._uint64_t countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1004AA304()
{
  return sub_1004AA22C();
}

unint64_t sub_1004AA318()
{
  unint64_t result = qword_100664BB0;
  if (!qword_100664BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664BB0);
  }
  return result;
}

uint64_t sub_1004AA36C(void *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, void *a5)
{
  v95._uint64_t countAndFlagsBits = 0;
  v95._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v10._object = (void *)0x80000001005C01F0;
  v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v10);
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000023;
  v12._object = (void *)0x80000001005C0210;
  String.append(_:)(v12);
  sub_10025C280(0, 0xE000000000000000);
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v14 = a1;
  uint64_t v15 = sub_1004ABDD0(a4, a5, v14);
  uint64_t v17 = v16;
  id v78 = v14;
  char v79 = a5;
  uint64_t v82 = a4;
  int64_t v18 = *(void *)(v15 + 16);
  uint64_t v75 = v16;
  unsigned int v76 = a2;
  if (v18)
  {
    swift_bridgeObjectRetain();
    sub_100455F88(0, v18, 0);
    uint64_t countAndFlagsBits = &_swiftEmptyArrayStorage;
    uint64_t v20 = v15 + 32;
    do
    {
      sub_1004ABF94(v20, (uint64_t)&v96);
      Swift::String v95 = v96;
      v90._uint64_t countAndFlagsBits = (uint64_t)countAndFlagsBits;
      unint64_t v21 = countAndFlagsBits[2];
      unint64_t v22 = countAndFlagsBits[3];
      swift_bridgeObjectRetain();
      if (v21 >= v22 >> 1)
      {
        sub_100455F88(v22 > 1, v21 + 1, 1);
        uint64_t countAndFlagsBits = (void *)v90._countAndFlagsBits;
      }
      countAndFlagsBits[2] = v21 + 1;
      long long v23 = (Swift::String *)&countAndFlagsBits[11 * v21];
      Swift::String v24 = v96;
      uint64_t v23[2] = v95;
      _OWORD v23[3] = v24;
      Swift::String v25 = v97;
      Swift::String v26 = v98;
      Swift::String v27 = v99;
      v23[7]._uint64_t countAndFlagsBits = v100;
      v23[5] = v26;
      v23[6] = v27;
      v23[4] = v25;
      v20 += 72;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v17 = v75;
    a2 = v76;
  }
  else
  {
    uint64_t countAndFlagsBits = &_swiftEmptyArrayStorage;
  }
  if (countAndFlagsBits[2])
  {
    sub_1000172F8(&qword_100664BB8);
    long long v28 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    long long v28 = &_swiftEmptyDictionarySingleton;
  }
  v95._uint64_t countAndFlagsBits = (uint64_t)v28;
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_1004AB564(v29, 1, &v95);
  swift_bridgeObjectRelease();
  uint64_t v80 = v95._countAndFlagsBits;
  int64_t v30 = *(void *)(v17 + 16);
  if (v30)
  {
    v95._uint64_t countAndFlagsBits = (uint64_t)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100455F68(0, v30, 0);
    uint64_t v31 = (void *)v95._countAndFlagsBits;
    unint64_t v32 = (uint64_t *)(v17 + 40);
    do
    {
      uint64_t v33 = *(v32 - 1);
      uint64_t v34 = *v32;
      v95._uint64_t countAndFlagsBits = (uint64_t)v31;
      unint64_t v36 = v31[2];
      unint64_t v35 = v31[3];
      swift_bridgeObjectRetain_n();
      if (v36 >= v35 >> 1)
      {
        sub_100455F68(v35 > 1, v36 + 1, 1);
        uint64_t v31 = (void *)v95._countAndFlagsBits;
      }
      v32 += 2;
      long long v31[2] = v36 + 1;
      uint64_t v37 = &v31[4 * v36];
      v37[4] = v33;
      v37[5] = v34;
      v37[6] = v33;
      v37[7] = v34;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v78;
  uint64_t v39 = v79;
  if (v31[2])
  {
    sub_1000172F8(&qword_100664BC0);
    NSString v40 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v40 = &_swiftEmptyDictionarySingleton;
  }
  v95._uint64_t countAndFlagsBits = (uint64_t)v40;
  uint64_t v41 = (void *)swift_bridgeObjectRetain();
  sub_1004AB1C4(v41, 1, &v95);
  uint64_t v42 = swift_bridgeObjectRelease();
  uint64_t v43 = v95._countAndFlagsBits;
  uint64_t v44 = a2(v42);
  uint64_t v45 = *(void *)(v44 + 16);
  if (!v45)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v46 = v44 + 32;
  uint64_t v77 = v43;
  uint64_t v47 = v80;
  while (1)
  {
    sub_10019B17C(v46, (uint64_t)v94);
    sub_1000172F8(&qword_10065C038);
    if (!swift_dynamicCast()) {
      break;
    }
    v92[0] = v97;
    v92[1] = v98;
    v92[2] = v99;
    char v93 = v100;
    Swift::String v90 = v95;
    Swift::String v91 = v96;
    Swift::String v48 = v95;
    if (v95 == __PAIR128__(0xE300000000000000, 6580592) || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_61;
    }
    if (!*(void *)(v47 + 16))
    {
      uint64_t v87 = 0;
      Swift::String v85 = (Swift::String)0;
      Swift::String v86 = (Swift::String)0;
      Swift::String v83 = (Swift::String)0;
      Swift::String v84 = (Swift::String)0;
LABEL_47:
      sub_10001729C((uint64_t)&v83, &qword_100664BC8);
      v88[0]._uint64_t countAndFlagsBits = 0;
      v88[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      strcpy((char *)v88, "ALTER TABLE ");
      BYTE5(v88[0]._object) = 0;
      HIWORD(v88[0]._object) = -5120;
      swift_bridgeObjectRetain();
      v63._uint64_t countAndFlagsBits = v82;
      v63._object = v39;
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._uint64_t countAndFlagsBits = 0x4C4F432044444120;
      v64._object = (void *)0xEC000000204E4D55;
      String.append(_:)(v64);
      Swift::String v65 = v90;
      swift_bridgeObjectRetain();
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      v66._uint64_t countAndFlagsBits = 32;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      Swift::String v67 = v91;
      swift_bridgeObjectRetain();
      String.append(_:)(v67);
      swift_bridgeObjectRelease();
      if (v93 == 1)
      {
        v68._object = (void *)0xE90000000000004CLL;
        v68._uint64_t countAndFlagsBits = 0x4C554E20544F4E20;
        String.append(_:)(v68);
      }
      sub_100017238((uint64_t)v92, (uint64_t)&v83, &qword_10065CE70);
      if (v84._object)
      {
        sub_10025C214((long long *)&v83._countAndFlagsBits, v88);
        v83._uint64_t countAndFlagsBits = 0;
        v83._object = (void *)0xE000000000000000;
        v69._uint64_t countAndFlagsBits = 0x544C554146454420;
        v69._object = (void *)0xE900000000000020;
        String.append(_:)(v69);
        v70._uint64_t countAndFlagsBits = sub_1004ABFCC(v88);
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        sub_100014524((uint64_t)v88);
      }
      else
      {
        sub_10001729C((uint64_t)&v83, &qword_10065CE70);
      }
      NSString v71 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v88[0]._uint64_t countAndFlagsBits = 0;
      unsigned int v72 = [v38 executeStatement:v71 error:v88];

      if (!v72)
      {
        id v74 = (id)v88[0]._countAndFlagsBits;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
LABEL_59:
        sub_1001CD934((uint64_t)&v90);
        return sub_100014524((uint64_t)v94);
      }
      id v73 = (id)v88[0]._countAndFlagsBits;
      goto LABEL_27;
    }
    swift_bridgeObjectRetain();
    unint64_t v49 = sub_100016D20(v48._countAndFlagsBits, (uint64_t)v48._object);
    if (v50)
    {
      sub_1004ABF94(*(void *)(v47 + 56) + 72 * v49, (uint64_t)&v83);
    }
    else
    {
      uint64_t v87 = 0;
      Swift::String v85 = (Swift::String)0;
      Swift::String v86 = (Swift::String)0;
      Swift::String v83 = (Swift::String)0;
      Swift::String v84 = (Swift::String)0;
    }
    swift_bridgeObjectRelease();
    if (!v83._object) {
      goto LABEL_47;
    }
    v88[2] = v85;
    v88[3] = v86;
    uint64_t v89 = v87;
    v88[0] = v83;
    v88[1] = v84;
    if (v84 != v91 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      sub_10019FE50();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_1004AC390((uint64_t)v88);
      goto LABEL_59;
    }
    sub_1004AC390((uint64_t)v88);
LABEL_27:
    sub_1001CD934((uint64_t)&v90);
LABEL_28:
    sub_100014524((uint64_t)v94);
    v46 += 40;
    if (!--v45)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  if (swift_dynamicCast())
  {
    object = v95._object;
    uint64_t v81 = v95._countAndFlagsBits;
    Swift::String v52 = v96;
    int countAndFlagsBits_low = LOBYTE(v97._countAndFlagsBits);
    v90._uint64_t countAndFlagsBits = v82;
    v90._object = v39;
    swift_bridgeObjectRetain();
    v54._uint64_t countAndFlagsBits = 95;
    v54._object = (void *)0xE100000000000000;
    String.append(_:)(v54);
    swift_bridgeObjectRetain();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    Swift::String v55 = v90;
    if (*(void *)(v77 + 16) && (sub_100016D20(v90._countAndFlagsBits, (uint64_t)v90._object), (v56 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v78;
      uint64_t v39 = v79;
      uint64_t v47 = v80;
    }
    else
    {
      v90._uint64_t countAndFlagsBits = 0x455441455243;
      v90._object = (void *)0xE600000000000000;
      if (countAndFlagsBits_low)
      {
        v57._uint64_t countAndFlagsBits = 0x455551494E5520;
        v57._object = (void *)0xE700000000000000;
        String.append(_:)(v57);
      }
      v88[0]._uint64_t countAndFlagsBits = 0;
      v88[0]._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v88[0]._uint64_t countAndFlagsBits = 0x205845444E4920;
      v88[0]._object = (void *)0xE700000000000000;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v58._uint64_t countAndFlagsBits = 542002976;
      v58._object = (void *)0xE400000000000000;
      String.append(_:)(v58);
      uint64_t v39 = v79;
      swift_bridgeObjectRetain();
      v59._uint64_t countAndFlagsBits = v82;
      v59._object = v79;
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._uint64_t countAndFlagsBits = 10272;
      v60._object = (void *)0xE200000000000000;
      String.append(_:)(v60);
      swift_bridgeObjectRetain();
      v61._uint64_t countAndFlagsBits = v81;
      v61._object = object;
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v62._uint64_t countAndFlagsBits = 41;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      String.append(_:)(v88[0]);
      swift_bridgeObjectRelease();
      uint64_t v38 = v78;
      sub_10025C280(v90._countAndFlagsBits, (unint64_t)v90._object);
      swift_bridgeObjectRelease();
      uint64_t v47 = v80;
    }
    goto LABEL_28;
  }
  __break(1u);
LABEL_61:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

id sub_1004AAF0C(void *a1, unsigned __int8 *a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 bindString:v4 atPosition:1];

  uint64_t v5 = a2[34] + 1000000 * a2[32] + 1000 * a2[33];

  return [a1 bindInt64:v5 atPosition:2];
}

id sub_1004AAFA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result = [a1 int64ForColumnIndex:0];
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

id sub_1004AAFE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result = [a1 stringForColumnIndex:1];
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v5 = result;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  id v9 = [a1 stringForColumnIndex:2];
  if (!v9)
  {
    id result = (id)swift_bridgeObjectRelease();
LABEL_6:
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  Swift::String v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  unsigned int v14 = [a1 intForColumnIndex:3];
  unsigned int v15 = [a1 intForColumnIndex:5];
  if (ASUSQLiteCopyFoundationValue(a1, 4))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  sub_100016CB8((uint64_t)v16, (uint64_t)v17);
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v14 != 0;
  *(unsigned char *)(a2 + 33) = v15 != 0;
  return (id)sub_100016CB8((uint64_t)v17, a2 + 40);
}

void sub_1004AB14C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [a1 stringForColumnIndex:1];
  if (v3)
  {
    NSString v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

uint64_t sub_1004AB1C4(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v46 = a1[6];
  swift_bridgeObjectRetain();
  id v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_100016D20(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10052D014();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    *uint64_t v20 = v7;
    v20[1] = v6;
    unint64_t v21 = (void *)(v19[7] + 16 * v11);
    *unint64_t v21 = v46;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v19[2] = v24;
    uint64_t v25 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (int64_t i = a1 + 11; ; i += 4)
    {
      uint64_t v28 = *(i - 3);
      uint64_t v27 = *(i - 2);
      uint64_t v29 = *(i - 1);
      uint64_t v30 = *i;
      uint64_t v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_100016D20(v28, v27);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v23 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v23) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        sub_1005260EC(v36, 1);
        unint64_t v32 = sub_100016D20(v28, v27);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      NSString v40 = (uint64_t *)(v39[6] + 16 * v32);
      *NSString v40 = v28;
      v40[1] = v27;
      uint64_t v41 = (void *)(v39[7] + 16 * v32);
      void *v41 = v29;
      v41[1] = v30;
      uint64_t v42 = v39[2];
      BOOL v23 = __OFADD__(v42, 1);
      uint64_t v43 = v42 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v39[2] = v43;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1005260EC(v14, a2 & 1);
  unint64_t v16 = sub_100016D20(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x80000001005B9220;
  v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)();
  v45._uint64_t countAndFlagsBits = 39;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004AB564(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_100017238(a1 + 32, (uint64_t)&v58, &qword_100663BD8);
  uint64_t v7 = v58;
  uint64_t v8 = v59;
  uint64_t v56 = v58;
  uint64_t v57 = v59;
  long long v53 = v62;
  long long v54 = v63;
  uint64_t v55 = v64;
  long long v51 = v60;
  long long v52 = v61;
  id v9 = (void *)*a3;
  unint64_t v11 = sub_100016D20(v58, v59);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10052D1D0();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    unint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *unint64_t v21 = v7;
    v21[1] = v8;
    uint64_t v22 = v20[7] + 72 * v11;
    *(_OWORD *)uint64_t v22 = v51;
    long long v23 = v52;
    long long v24 = v53;
    long long v25 = v54;
    *(void *)(v22 + 64) = v55;
    *(_OWORD *)(v22 + 32) = v24;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 16) = v23;
    uint64_t v26 = v20[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v28;
    uint64_t v29 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 120; ; i += 88)
    {
      sub_100017238(i, (uint64_t)&v58, &qword_100663BD8);
      uint64_t v31 = v58;
      uint64_t v32 = v59;
      uint64_t v56 = v58;
      uint64_t v57 = v59;
      long long v53 = v62;
      long long v54 = v63;
      uint64_t v55 = v64;
      long long v51 = v60;
      long long v52 = v61;
      char v33 = (void *)*a3;
      unint64_t v34 = sub_100016D20(v58, v59);
      uint64_t v36 = v33[2];
      BOOL v37 = (v35 & 1) == 0;
      BOOL v27 = __OFADD__(v36, v37);
      uint64_t v38 = v36 + v37;
      if (v27) {
        break;
      }
      char v39 = v35;
      if (v33[3] < v38)
      {
        sub_100526414(v38, 1);
        unint64_t v34 = sub_100016D20(v31, v32);
        if ((v39 & 1) != (v40 & 1)) {
          goto LABEL_25;
        }
      }
      if (v39) {
        goto LABEL_10;
      }
      uint64_t v41 = (void *)*a3;
      *(void *)(*a3 + 8 * (v34 >> 6) + 64) |= 1 << v34;
      uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
      *uint64_t v42 = v31;
      v42[1] = v32;
      uint64_t v43 = v41[7] + 72 * v34;
      *(_OWORD *)uint64_t v43 = v51;
      long long v44 = v52;
      long long v45 = v53;
      long long v46 = v54;
      *(void *)(v43 + 64) = v55;
      *(_OWORD *)(v43 + 32) = v45;
      *(_OWORD *)(v43 + 48) = v46;
      *(_OWORD *)(v43 + 16) = v44;
      uint64_t v47 = v41[2];
      BOOL v27 = __OFADD__(v47, 1);
      uint64_t v48 = v47 + 1;
      if (v27) {
        goto LABEL_24;
      }
      v41[2] = v48;
      if (!--v29) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100526414(v14, a2 & 1);
  unint64_t v16 = sub_100016D20(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v19 = swift_allocError();
    swift_willThrow();
    uint64_t v65 = v19;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1004AC390((uint64_t)&v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v49._object = (void *)0x80000001005B9220;
  v49._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v49);
  _print_unlocked<A, B>(_:_:)();
  v50._uint64_t countAndFlagsBits = 39;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t *sub_1004AB980(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  Swift::String v2 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v1)
  {
    id v9 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_100455E18(0, v1, 0);
    Swift::String v2 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 32;
    do
    {
      sub_10019B17C(v4, (uint64_t)v8);
      id v9 = v2;
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100455E18(v5 > 1, v6 + 1, 1);
        Swift::String v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_10018B164(v8, (uint64_t)&v2[5 * v6 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1004ABA54(uint64_t a1)
{
  if (a1 > -1000000 && a1 < 256000000)
  {
    uint64_t v1 = a1 % 1000000;
    if (a1 % 1000000 > -1000 && v1 < 256000)
    {
      int v2 = (int)v1 / 1000;
      unsigned int v3 = (int)v1 % 1000;
      if ((v3 & 0x80000000) == 0 && v3 < 0x100) {
        return (v2 << 8) | ((int)a1 / 1000000) | (v3 << 16);
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004ABBA8(void *a1, uint64_t a2, void *a3)
{
  NSString v7 = String._bridgeToObjectiveC()();
  unsigned __int8 v8 = [a1 tableExists:v7];

  if ((v8 & 1) != 0 || (uint64_t result = sub_10025C280(0xD00000000000009BLL, 0x80000001005C0330), !v3))
  {
    _StringGuts.grow(_:)(66);
    v10._object = (void *)0x80000001005C03D0;
    v10._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v10);
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = a2;
    v11._object = a3;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 39;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t v13 = sub_1004A87F8(0, 0xE000000000000000, (uint64_t)sub_1004AAFA0, 0);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v3)
    {
      if (*(void *)(v13 + 16)) {
        uint64_t v14 = *(void *)(v13 + 32);
      }
      else {
        uint64_t v14 = 0;
      }
      swift_bridgeObjectRelease();
      return sub_1004ABA54(v14) & 0xFFFFFF;
    }
  }
  return result;
}

uint64_t sub_1004ABD48()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 51, 7);
}

id sub_1004ABD88(void *a1)
{
  return sub_1004AAF0C(a1, (unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1004ABD90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004ABDA0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004ABDC8()
{
  return swift_release();
}

uint64_t sub_1004ABDD0(uint64_t a1, void *a2, void *a3)
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  uint64_t v9 = sub_1004A8BE8(0xD000000000000012, 0x80000001005C0290, (uint64_t)sub_1004AAFE0, 0);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = a1;
    v10._object = a2;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    sub_1004A8FD8(0xD000000000000012, 0x80000001005C02B0, (uint64_t)sub_1004AB14C, 0);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t sub_1004ABF94(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1004ABFCC(void *a1)
{
  sub_10025B368((uint64_t)a1, (uint64_t)v25);
  sub_1000172F8(&qword_10065D950);
  sub_1000172F8(&qword_100664BD0);
  if (swift_dynamicCast())
  {
    sub_10018B164(&v24, (uint64_t)v22);
    *(void *)&long long v23 = 0;
    *((void *)&v23 + 1) = 0xE000000000000000;
    sub_10018AC60(v22, v22[3]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v3 = v23;
    sub_100014524((uint64_t)v22);
  }
  else
  {
    if (swift_dynamicCast())
    {
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0xE000000000000000;
      Double.write<A>(to:)();
    }
    else if (swift_dynamicCast())
    {
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0xE000000000000000;
      Float.write<A>(to:)();
    }
    else if (swift_dynamicCast())
    {
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0xE000000000000000;
      v22[0] = v23;
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (swift_dynamicCast())
      {
        v22[0] = 34;
        v22[1] = 0xE100000000000000;
        long long v23 = v24;
        v22[7] = 34;
        v22[8] = 0xE100000000000000;
        v22[5] = 8738;
        v22[6] = 0xE200000000000000;
        sub_100017B14();
        uint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        Swift::String v8 = v7;
        swift_bridgeObjectRelease();
        v9._uint64_t countAndFlagsBits = v6;
        v9._object = v8;
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._uint64_t countAndFlagsBits = 34;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        uint64_t v3 = 34;
        goto LABEL_10;
      }
      *(void *)&long long v24 = 0;
      *((void *)&v24 + 1) = 0xE000000000000000;
      v11._uint64_t countAndFlagsBits = 10072;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      sub_10018AC60(a1, a1[3]);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      if (v1)
      {
        uint64_t v3 = *((void *)&v24 + 1);
        swift_release();
        swift_bridgeObjectRelease();
        sub_100014524((uint64_t)v25);
        return v3;
      }
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      swift_release();
      unint64_t v16 = sub_1004A7B90(v14, v15);
      sub_100013510(v14, v15);
      v22[0] = v16;
      sub_1000172F8((uint64_t *)&unk_10065C5D0);
      sub_10017B8C8();
      uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 39;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
    }
    uint64_t v3 = v24;
  }
LABEL_10:
  sub_100014524((uint64_t)v25);
  return v3;
}

uint64_t sub_1004AC390(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004AC3C0()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004AC3D0(void *a1, uint64_t a2)
{
  return sub_1004A95BC(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1004AC3DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004AC3EC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004AC414()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004AC424(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1004A9BA4(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(uint64_t *__return_ptr))(v3 + 24), *(void *)(v3 + 32), *(char ***)(v3 + 40));
}

uint64_t sub_1004AC430()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004AC440()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004AC468()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004AC478(void *a1, uint64_t a2)
{
  return sub_1004A97B0(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1004AC484()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004AC494()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004AC4A4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004A9DB4(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(long long *__return_ptr))(v3 + 24), *(void *)(v3 + 32), *(char ***)(v3 + 40));
}

uint64_t sub_1004AC4B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004AC4C0()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004AC4D0(void *a1, uint64_t a2)
{
  return sub_1004A93C8(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1004AC4DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004AC4EC(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1004AC4F8()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004AC508(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1004A99A4(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(uint64_t *__return_ptr))(v3 + 24), *(void *)(v3 + 32), *(char ***)(v3 + 40));
}

uint64_t sub_1004AC514()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for SQLiteIndex(uint64_t a1, uint64_t a2)
{
  return sub_1004AD31C(a1, a2, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t initializeWithCopy for SQLiteIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SQLiteIndex(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SQLiteIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteIndex(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteIndex(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteIndex()
{
  return &type metadata for SQLiteIndex;
}

uint64_t destroy for SQLiteColumn(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    return sub_100014524(a1 + 32);
  }
  return result;
}

uint64_t initializeWithCopy for SQLiteColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v7 - 8))(a1 + 32, v6, v7);
  }
  else
  {
    long long v8 = v6[1];
    *(_OWORD *)(a1 + 32) = *v6;
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = v6[2];
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for SQLiteColumn(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v4)
    {
      *(void *)(a1 + 56) = v4;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_100014524(a1 + 32);
    goto LABEL_7;
  }
  sub_1004AC8E4((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t *sub_1004AC8E4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        Swift::String v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SQLiteColumn(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 56)) {
    sub_100014524(a1 + 32);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteColumn(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteColumn(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteColumn()
{
  return &type metadata for SQLiteColumn;
}

ValueMetadata *type metadata accessor for SQLiteTableMetadata.Index()
{
  return &type metadata for SQLiteTableMetadata.Index;
}

uint64_t destroy for SQLiteTableMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SQLiteTableMetadata(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SQLiteTableMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SQLiteTableMetadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteTableMetadata()
{
  return &type metadata for SQLiteTableMetadata;
}

uint64_t destroy for SQLiteTableMetadata.Column(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 64)) {
    return sub_100014524(a1 + 40);
  }
  return result;
}

uint64_t initializeWithCopy for SQLiteTableMetadata.Column(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(void *)(a1 + 64) = v6;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 40, v5, v6);
  }
  else
  {
    long long v7 = v5[1];
    *(_OWORD *)(a1 + 40) = *v5;
    *(_OWORD *)(a1 + 56) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for SQLiteTableMetadata.Column(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v4)
    {
      *(void *)(a1 + 64) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 40, a2 + 40);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v5;
    return a1;
  }
  if (!v4)
  {
    sub_100014524(a1 + 40);
    goto LABEL_7;
  }
  sub_1004ACFB4((uint64_t *)(a1 + 40), (uint64_t *)(a2 + 40));
  return a1;
}

uint64_t *sub_1004ACFB4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        Swift::String v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for SQLiteTableMetadata.Column(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64)) {
    sub_100014524(a1 + 40);
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteTableMetadata.Column(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteTableMetadata.Column(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteTableMetadata.Column()
{
  return &type metadata for SQLiteTableMetadata.Column;
}

uint64_t destroy for SQLiteTable(uint64_t a1, uint64_t a2)
{
  return sub_1004AD31C(a1, a2, (void (*)(void))&_swift_release);
}

uint64_t sub_1004AD31C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(*(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SQLiteTable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SQLiteTable(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SQLiteTable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteTable()
{
  return &type metadata for SQLiteTable;
}

uint64_t initializeBufferWithCopyOfBuffer for SQLiteSchemaVersion(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SQLiteSchemaVersion(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for SQLiteSchemaVersion(uint64_t result, int a2, int a3)
{
  if ((a3 + 0x1FFFFFF) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)uint64_t result = a2 - 1;
    *(unsigned char *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(unsigned char *)(result + 3) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteSchemaVersion()
{
  return &type metadata for SQLiteSchemaVersion;
}

uint64_t sub_1004AD570()
{
  sub_1004AE0E4(v0 + 32, (uint64_t)v27);
  uint64_t result = sub_1004AE0E4((uint64_t)v27, (uint64_t)&v28);
  uint64_t v2 = v29;
  if (!v29) {
    return 0;
  }
  uint64_t v3 = v28;
  uint64_t v4 = HIBYTE(v29) & 0xF;
  uint64_t v5 = v28 & 0xFFFFFFFFFFFFLL;
  if (!((v29 & 0x2000000000000000) != 0 ? HIBYTE(v29) & 0xF : v28 & 0xFFFFFFFFFFFFLL)) {
    return 0;
  }
  if ((v29 & 0x1000000000000000) == 0)
  {
    if ((v29 & 0x2000000000000000) == 0)
    {
      if ((v28 & 0x1000000000000000) != 0) {
        uint64_t v7 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v8 = (unint64_t)sub_1004D1D78(v7, v5, 10);
      char v10 = v9 & 1;
      goto LABEL_39;
    }
    v26[0] = v28;
    v26[1] = v29 & 0xFFFFFFFFFFFFFFLL;
    if (v28 == 43)
    {
      if (!v4) {
        goto LABEL_64;
      }
      if (v4 == 1 || (BYTE1(v28) - 48) > 9u) {
        goto LABEL_35;
      }
      unint64_t v8 = (BYTE1(v28) - 48);
      if (v4 != 2)
      {
        if ((BYTE2(v28) - 48) > 9u) {
          goto LABEL_35;
        }
        unint64_t v8 = 10 * (BYTE1(v28) - 48) + (BYTE2(v28) - 48);
        uint64_t v14 = v4 - 3;
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)v26 + 3;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_35;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_35;
            }
            BOOL v12 = __CFADD__(10 * v8, v16);
            unint64_t v8 = 10 * v8 + v16;
            if (v12) {
              goto LABEL_35;
            }
            char v10 = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_39;
            }
          }
        }
      }
    }
    else
    {
      if (v28 == 45)
      {
        if (v4)
        {
          if (v4 != 1)
          {
            unsigned __int8 v11 = BYTE1(v28) - 48;
            if ((BYTE1(v28) - 48) <= 9u)
            {
              unint64_t v8 = 0;
              BOOL v12 = v11 == 0;
              unint64_t v13 = -(uint64_t)v11;
              if (!v12) {
                goto LABEL_36;
              }
              if (v4 == 2)
              {
                char v10 = 0;
                unint64_t v8 = v13;
                goto LABEL_39;
              }
              unsigned __int8 v20 = BYTE2(v28) - 48;
              if ((BYTE2(v28) - 48) <= 9u && is_mul_ok(v13, 0xAuLL))
              {
                unint64_t v21 = 10 * v13;
                unint64_t v8 = v21 - v20;
                if (v21 >= v20)
                {
                  uint64_t v22 = v4 - 3;
                  if (v22)
                  {
                    long long v23 = (unsigned __int8 *)v26 + 3;
                    while (1)
                    {
                      unsigned int v24 = *v23 - 48;
                      if (v24 > 9) {
                        goto LABEL_35;
                      }
                      if (!is_mul_ok(v8, 0xAuLL)) {
                        goto LABEL_35;
                      }
                      BOOL v12 = 10 * v8 >= v24;
                      unint64_t v8 = 10 * v8 - v24;
                      if (!v12) {
                        goto LABEL_35;
                      }
                      char v10 = 0;
                      ++v23;
                      if (!--v22) {
                        goto LABEL_39;
                      }
                    }
                  }
                  goto LABEL_38;
                }
              }
            }
          }
LABEL_35:
          unint64_t v8 = 0;
LABEL_36:
          char v10 = 1;
          goto LABEL_39;
        }
        __break(1u);
LABEL_64:
        __break(1u);
        return result;
      }
      if (!v4 || (v28 - 48) > 9u) {
        goto LABEL_35;
      }
      unint64_t v8 = (v28 - 48);
      if (v4 != 1)
      {
        if ((BYTE1(v28) - 48) > 9u) {
          goto LABEL_35;
        }
        unint64_t v8 = 10 * (v28 - 48) + (BYTE1(v28) - 48);
        uint64_t v17 = v4 - 2;
        if (v17)
        {
          int64_t v18 = (unsigned __int8 *)v26 + 2;
          while (1)
          {
            unsigned int v19 = *v18 - 48;
            if (v19 > 9) {
              goto LABEL_35;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_35;
            }
            BOOL v12 = __CFADD__(10 * v8, v19);
            unint64_t v8 = 10 * v8 + v19;
            if (v12) {
              goto LABEL_35;
            }
            char v10 = 0;
            ++v18;
            if (!--v17) {
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }
  sub_10018B0F0((uint64_t)v27);
  unint64_t v8 = sub_1004D1D90(v3, v2, 10);
  char v10 = v25;
  sub_10018AFE0((uint64_t)v27);
LABEL_39:
  if (v10) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_1004AD884()
{
  sub_1004AE0E4(v0 + 48, (uint64_t)v27);
  uint64_t result = sub_1004AE0E4((uint64_t)v27, (uint64_t)&v28);
  uint64_t v2 = v29;
  if (!v29) {
    return 0;
  }
  uint64_t v3 = v28;
  uint64_t v4 = HIBYTE(v29) & 0xF;
  uint64_t v5 = v28 & 0xFFFFFFFFFFFFLL;
  if (!((v29 & 0x2000000000000000) != 0 ? HIBYTE(v29) & 0xF : v28 & 0xFFFFFFFFFFFFLL)) {
    return 0;
  }
  if ((v29 & 0x1000000000000000) == 0)
  {
    if ((v29 & 0x2000000000000000) == 0)
    {
      if ((v28 & 0x1000000000000000) != 0) {
        uint64_t v7 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v8 = (unint64_t)sub_1004D1D78(v7, v5, 10);
      char v10 = v9 & 1;
      goto LABEL_39;
    }
    v26[0] = v28;
    v26[1] = v29 & 0xFFFFFFFFFFFFFFLL;
    if (v28 == 43)
    {
      if (!v4) {
        goto LABEL_64;
      }
      if (v4 == 1 || (BYTE1(v28) - 48) > 9u) {
        goto LABEL_35;
      }
      unint64_t v8 = (BYTE1(v28) - 48);
      if (v4 != 2)
      {
        if ((BYTE2(v28) - 48) > 9u) {
          goto LABEL_35;
        }
        unint64_t v8 = 10 * (BYTE1(v28) - 48) + (BYTE2(v28) - 48);
        uint64_t v14 = v4 - 3;
        if (v14)
        {
          unint64_t v15 = (unsigned __int8 *)v26 + 3;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_35;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_35;
            }
            BOOL v12 = __CFADD__(10 * v8, v16);
            unint64_t v8 = 10 * v8 + v16;
            if (v12) {
              goto LABEL_35;
            }
            char v10 = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_39;
            }
          }
        }
      }
    }
    else
    {
      if (v28 == 45)
      {
        if (v4)
        {
          if (v4 != 1)
          {
            unsigned __int8 v11 = BYTE1(v28) - 48;
            if ((BYTE1(v28) - 48) <= 9u)
            {
              unint64_t v8 = 0;
              BOOL v12 = v11 == 0;
              unint64_t v13 = -(uint64_t)v11;
              if (!v12) {
                goto LABEL_36;
              }
              if (v4 == 2)
              {
                char v10 = 0;
                unint64_t v8 = v13;
                goto LABEL_39;
              }
              unsigned __int8 v20 = BYTE2(v28) - 48;
              if ((BYTE2(v28) - 48) <= 9u && is_mul_ok(v13, 0xAuLL))
              {
                unint64_t v21 = 10 * v13;
                unint64_t v8 = v21 - v20;
                if (v21 >= v20)
                {
                  uint64_t v22 = v4 - 3;
                  if (v22)
                  {
                    long long v23 = (unsigned __int8 *)v26 + 3;
                    while (1)
                    {
                      unsigned int v24 = *v23 - 48;
                      if (v24 > 9) {
                        goto LABEL_35;
                      }
                      if (!is_mul_ok(v8, 0xAuLL)) {
                        goto LABEL_35;
                      }
                      BOOL v12 = 10 * v8 >= v24;
                      unint64_t v8 = 10 * v8 - v24;
                      if (!v12) {
                        goto LABEL_35;
                      }
                      char v10 = 0;
                      ++v23;
                      if (!--v22) {
                        goto LABEL_39;
                      }
                    }
                  }
                  goto LABEL_38;
                }
              }
            }
          }
LABEL_35:
          unint64_t v8 = 0;
LABEL_36:
          char v10 = 1;
          goto LABEL_39;
        }
        __break(1u);
LABEL_64:
        __break(1u);
        return result;
      }
      if (!v4 || (v28 - 48) > 9u) {
        goto LABEL_35;
      }
      unint64_t v8 = (v28 - 48);
      if (v4 != 1)
      {
        if ((BYTE1(v28) - 48) > 9u) {
          goto LABEL_35;
        }
        unint64_t v8 = 10 * (v28 - 48) + (BYTE1(v28) - 48);
        uint64_t v17 = v4 - 2;
        if (v17)
        {
          int64_t v18 = (unsigned __int8 *)v26 + 2;
          while (1)
          {
            unsigned int v19 = *v18 - 48;
            if (v19 > 9) {
              goto LABEL_35;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_35;
            }
            BOOL v12 = __CFADD__(10 * v8, v19);
            unint64_t v8 = 10 * v8 + v19;
            if (v12) {
              goto LABEL_35;
            }
            char v10 = 0;
            ++v18;
            if (!--v17) {
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }
  sub_10018B0F0((uint64_t)v27);
  unint64_t v8 = sub_1004D1D90(v3, v2, 10);
  char v10 = v25;
  sub_10018AFE0((uint64_t)v27);
LABEL_39:
  if (v10) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_1004ADB98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a4;
  v12[1] = a5;
  uint64_t v7 = sub_1000172F8(&qword_100664C18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004AF0D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004ADD0C()
{
  if (*v0) {
    return 7371124;
  }
  else {
    return 6777953;
  }
}

uint64_t sub_1004ADD30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004AE910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004ADD58(uint64_t a1)
{
  unint64_t v2 = sub_1004AF0D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004ADD94(uint64_t a1)
{
  unint64_t v2 = sub_1004AF0D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004ADDD0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004AE9E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1004ADE00(void *a1)
{
  return sub_1004ADB98(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1004ADE20(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100664C20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1004AF080();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1004ADFD0()
{
  return qword_1005B22C0[*v0];
}

uint64_t sub_1004ADFE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004AEBEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004AE010(uint64_t a1)
{
  unint64_t v2 = sub_1004AF080();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004AE04C(uint64_t a1)
{
  unint64_t v2 = sub_1004AF080();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004AE088@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1004AED58(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1004AE0CC(void *a1)
{
  return sub_1004ADE20(a1);
}

uint64_t sub_1004AE0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065C4D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004AE14C()
{
  uint64_t v1 = sub_1003EBF94();
  if (v2 >> 60 == 15)
  {
    sub_1004AE6D8();
    swift_allocError();
    *uint64_t v3 = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v5 = v1;
    unint64_t v6 = v2;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1004AE830();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10018AE44(v5, v6);
    uint64_t result = swift_release();
    if (!v0) {
      return v7;
    }
  }
  return result;
}

uint64_t sub_1004AE23C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1003EBF94();
  if (v4 >> 60 == 15)
  {
    sub_1004AE6D8();
    swift_allocError();
    unsigned char *v5 = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v7 = v3;
    unint64_t v8 = v4;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1004AE7DC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10018AE44(v7, v8);
    uint64_t result = swift_release();
    if (!v1)
    {
      *(_OWORD *)a1 = v9;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)(a1 + 48) = v13;
    }
  }
  return result;
}

uint64_t sub_1004AE348@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v30[0] = 46;
  v30[1] = 0xE100000000000000;
  unint64_t v29 = v30;
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100365610(0x7FFFFFFFFFFFFFFFLL, 1, sub_1004476B0, (uint64_t)v28, a1, a2);
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 16) != 3)
  {
    swift_bridgeObjectRelease();
    sub_1004AE6D8();
    swift_allocError();
    *long long v12 = 0;
    swift_willThrow();
    return sub_10018AE44(0, 0xF000000000000000);
  }
  swift_bridgeObjectRetain();
  static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1004AE14C();
  if (v3)
  {
    swift_bridgeObjectRelease();
    return sub_10018AE44(0, 0xF000000000000000);
  }
  uint64_t v32 = v10;
  if (*(void *)(v7 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = result;
    uint64_t v14 = v9;
    uint64_t v15 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1004AE23C((uint64_t)v31);
    if (*(void *)(v7 + 16) >= 3uLL)
    {
      uint64_t v24 = v31[4];
      uint64_t v25 = v31[6];
      uint64_t v20 = v31[3];
      uint64_t v21 = v31[5];
      uint64_t v26 = v31[7];
      uint64_t v27 = v31[1];
      uint64_t v22 = v31[0];
      uint64_t v23 = v31[2];
      sub_1004AE72C((uint64_t)v31);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = sub_1003EBF94();
      unint64_t v19 = v17;
      uint64_t v18 = v16;
      sub_10018B2A8(v16, v17);
      sub_10018AE44(0, 0xF000000000000000);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10018B2A8(v18, v19);
      sub_10018AE44(v18, v19);
      sub_1004AE784((uint64_t)v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t result = sub_10018AE44(v18, v19);
      *a3 = v13;
      a3[1] = v14;
      a3[2] = v32;
      a3[3] = v15;
      a3[4] = v22;
      a3[5] = v27;
      a3[6] = v23;
      a3[7] = v20;
      a3[8] = v24;
      a3[9] = v21;
      a3[10] = v25;
      a3[11] = v26;
      a3[12] = v18;
      a3[13] = v19;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1004AE6D8()
{
  unint64_t result = qword_100664BD8;
  if (!qword_100664BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664BD8);
  }
  return result;
}

uint64_t sub_1004AE72C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004AE784(uint64_t a1)
{
  return a1;
}

unint64_t sub_1004AE7DC()
{
  unint64_t result = qword_100664BE0;
  if (!qword_100664BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664BE0);
  }
  return result;
}

unint64_t sub_1004AE830()
{
  unint64_t result = qword_100664BE8;
  if (!qword_100664BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664BE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallVerificationToken.Header()
{
  return &type metadata for InstallVerificationToken.Header;
}

ValueMetadata *type metadata accessor for InstallVerificationToken.Payload()
{
  return &type metadata for InstallVerificationToken.Payload;
}

ValueMetadata *type metadata accessor for InstallVerificationTokenError()
{
  return &type metadata for InstallVerificationTokenError;
}

unint64_t sub_1004AE8BC()
{
  unint64_t result = qword_100664BF0;
  if (!qword_100664BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664BF0);
  }
  return result;
}

uint64_t sub_1004AE910(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7371124 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004AE9E4(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100664C08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10018AC60(a1, a1[3]);
  sub_1004AF0D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100014524((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1004AEBEC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6580578 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7566185 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6580585 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 6580598 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1004AED58@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1000172F8(&qword_100664BF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004AF080();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100014524((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v26 = v9;
  char v30 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v13;
  uint64_t v25 = v12;
  char v29 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = v14;
  char v28 = 3;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain();
  sub_100014524((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v24;
  swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v26;
  a2[1] = v11;
  a2[2] = v25;
  a2[3] = v20;
  a2[4] = v23;
  a2[5] = v19;
  a2[6] = v22;
  a2[7] = v17;
  return result;
}

unint64_t sub_1004AF080()
{
  unint64_t result = qword_100664C00;
  if (!qword_100664C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C00);
  }
  return result;
}

unint64_t sub_1004AF0D4()
{
  unint64_t result = qword_100664C10;
  if (!qword_100664C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C10);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon29InstallVerificationTokenErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004AF1F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallVerificationToken.Header.CodingKeys()
{
  return &type metadata for InstallVerificationToken.Header.CodingKeys;
}

uint64_t destroy for InstallVerificationToken(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    return sub_100013510(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for InstallVerificationToken(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = a2 + 12;
  unint64_t v10 = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_100012670(*v9, v10);
    *(void *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v10;
  }
  return a1;
}

void *assignWithCopy for InstallVerificationToken(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 12;
  unint64_t v5 = a2[13];
  if (a1[13] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100012670(*v4, v5);
      uint64_t v8 = a1[12];
      unint64_t v9 = a1[13];
      a1[12] = v7;
      a1[13] = v5;
      sub_100013510(v8, v9);
      return a1;
    }
    sub_1002E9998((uint64_t)(a1 + 12));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 6) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_100012670(*v4, v5);
  a1[12] = v6;
  a1[13] = v5;
  return a1;
}

void *assignWithTake for InstallVerificationToken(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  unint64_t v10 = a2 + 12;
  unint64_t v11 = a1[13];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = a2[13];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[12];
      a1[12] = *v10;
      a1[13] = v12;
      sub_100013510(v13, v11);
      return a1;
    }
    sub_1002E9998((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *(_OWORD *)v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for InstallVerificationToken(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InstallVerificationToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallVerificationToken()
{
  return &type metadata for InstallVerificationToken;
}

unsigned char *storeEnumTagSinglePayload for InstallVerificationToken.Payload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004AF744);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InstallVerificationToken.Payload.CodingKeys()
{
  return &type metadata for InstallVerificationToken.Payload.CodingKeys;
}

unint64_t sub_1004AF780()
{
  unint64_t result = qword_100664C28;
  if (!qword_100664C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C28);
  }
  return result;
}

unint64_t sub_1004AF7D8()
{
  unint64_t result = qword_100664C30;
  if (!qword_100664C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C30);
  }
  return result;
}

unint64_t sub_1004AF830()
{
  unint64_t result = qword_100664C38;
  if (!qword_100664C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C38);
  }
  return result;
}

unint64_t sub_1004AF888()
{
  unint64_t result = qword_100664C40;
  if (!qword_100664C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C40);
  }
  return result;
}

unint64_t sub_1004AF8E0()
{
  unint64_t result = qword_100664C48;
  if (!qword_100664C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C48);
  }
  return result;
}

unint64_t sub_1004AF938()
{
  unint64_t result = qword_100664C50;
  if (!qword_100664C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664C50);
  }
  return result;
}

uint64_t sub_1004AF98C()
{
  v1[44] = v0;
  uint64_t v2 = type metadata accessor for FeatureFlag();
  v1[45] = v2;
  v1[46] = *(void *)(v2 - 8);
  v1[47] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for InstallConfirmationRequest();
  v1[48] = v3;
  v1[49] = *(void *)(v3 - 8);
  v1[50] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for InstallSheetContext();
  v1[51] = v4;
  v1[52] = *(void *)(v4 - 8);
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for InstallSheetContext.InstallType();
  v1[55] = v5;
  v1[56] = *(void *)(v5 - 8);
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v1[59] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InstallSheetContext.Source.WebInstallContext();
  v1[60] = v6;
  v1[61] = *(void *)(v6 - 8);
  v1[62] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for InstallSheetContext.Source();
  v1[63] = v7;
  v1[64] = *(void *)(v7 - 8);
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v1[68] = v8;
  v1[69] = *(void *)(v8 - 8);
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  return _swift_task_switch(sub_1004AFD14, 0, 0);
}

uint64_t sub_1004AFD14()
{
  uint64_t v84 = v0;
  uint64_t v1 = (id *)(v0 + 352);
  uint64_t v2 = *(void **)(v0 + 352);
  static Logger.install.getter();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(char **)(v0 + 352);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v9 = *(void **)&v6[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_logKey];
    *(void *)(v0 + 344) = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Requesting install confirmation", v7, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v11 = *v1;
  }
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 552);
  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void *)(v0 + 352);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 600) = v16;
  *(void *)(v0 + 608) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v12, v14);
  uint64_t v17 = (void *)(v15 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_distributor);
  sub_10019B17C(v15 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_distributor, v0 + 16);
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 224);
    id v20 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain();
    uint64_t v21 = v18;
    id v22 = sub_1003DB240(v18, v19, 0);
    uint64_t v48 = v22;
    if (v22)
    {
      id v49 = [v22 localizedName];

      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v50;

      uint64_t v23 = v21;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = v18;
      uint64_t v24 = v18;
      uint64_t v25 = v19;
    }
    long long v51 = (_OWORD *)(v0 + 96);
    uint64_t v52 = *(void *)(v0 + 536);
    long long v53 = *(uint64_t **)(v0 + 528);
    uint64_t v55 = *(void *)(v0 + 504);
    uint64_t v54 = *(void *)(v0 + 512);
    uint64_t v56 = *(void *)(v0 + 352);
    uint64_t *v53 = v24;
    v53[1] = v25;
    v53[2] = v23;
    v53[3] = v19;
    (*(void (**)(uint64_t *, void, uint64_t))(v54 + 104))(v53, enum case for InstallSheetContext.Source.distributor(_:), v55);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v54 + 32))(v52, v53, v55);
    uint64_t v57 = *(void *)(v56 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_bag);
    if (*(void *)(v57 + 16))
    {
      unint64_t v58 = sub_100016D20(0xD00000000000002DLL, 0x80000001005BA760);
      if (v59)
      {
        sub_1000144C8(*(void *)(v57 + 56) + 32 * v58, v0 + 96);
      }
      else
      {
        *long long v51 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
    }
    else
    {
      *long long v51 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    sub_1000172F8((uint64_t *)&unk_10065C9C0);
    swift_dynamicCast();
LABEL_30:
    uint64_t v70 = *(void *)(v0 + 520);
    uint64_t v62 = *(void *)(v0 + 512);
    uint64_t v72 = *(void *)(v0 + 504);
    uint64_t v73 = *(void *)(v0 + 536);
    uint64_t v63 = *(void *)(v0 + 464);
    uint64_t v65 = *(void *)(v0 + 440);
    uint64_t v64 = *(void *)(v0 + 448);
    uint64_t v74 = *(void *)(v0 + 456);
    uint64_t v75 = *(void *)(v0 + 432);
    uint64_t v66 = *(void *)(v0 + 416);
    uint64_t v80 = *(void *)(v0 + 424);
    uint64_t v67 = *(void *)(v0 + 352);
    buf = *(uint8_t **)(v0 + 408);
    if (*(unsigned char *)(v67 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_isMarketplace)) {
      Swift::String v68 = (unsigned int *)&enum case for InstallSheetContext.InstallType.marketplace(_:);
    }
    else {
      Swift::String v68 = (unsigned int *)&enum case for InstallSheetContext.InstallType.app(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v64 + 104))(v63, *v68, v65);
    *(void *)(v0 + 336) = *(void *)(v67
                                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_itemID);
    dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 328) = *(void *)(v67
                                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_versionID);
    dispatch thunk of CustomStringConvertible.description.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v70, v73, v72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v74, v63, v65);
    *(void *)(v0 + 616) = *(void *)(v67
                                      + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_logKey);
    LogKey.stringValue.getter();
    sub_10018B2A8(*(void *)(v67 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_authenticationContextData), *(void *)(v67+ OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_authenticationContextData+ 8));
    InstallSheetContext.init(itemID:versionID:source:type:logKey:learnMoreURL:authenticationContextData:showBiometricsForAppStoreInstall:)();
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v66 + 16))(v80, v75, buf);
    InstallConfirmationRequest.init(context:)();
    Swift::String v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v69;
    *Swift::String v69 = v0;
    v69[1] = sub_1004B07D4;
    return InstallConfirmationRequest.run()();
  }
  sub_10019B17C((uint64_t)v17, v0 + 56);
  if (swift_dynamicCast())
  {
    sub_1004E8A24(*(void *)(v0 + 200), *(void *)(v0 + 208));
    if (v26) {
      swift_bridgeObjectRelease();
    }
    NSString v71 = (_OWORD *)(v0 + 128);
    uint64_t v79 = *(void *)(v0 + 536);
    uint64_t v27 = *(void *)(v0 + 512);
    uint64_t v82 = *(void *)(v0 + 504);
    uint64_t v28 = *(void *)(v0 + 488);
    uint64_t v29 = *(void *)(v0 + 472);
    bufa = *(uint8_t **)(v0 + 496);
    uint64_t v78 = *(void *)(v0 + 480);
    uint64_t v81 = *(void *)(v0 + 352);
    uint64_t v30 = v81 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_metadata;
    uint64_t v31 = type metadata accessor for MediaAPIMetadata();
    sub_10001893C(v30 + *(int *)(v31 + 28), v29);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    InstallSheetContext.Source.WebInstallContext.init(domain:developerName:developerID:appName:iconURL:)();
    (*(void (**)(uint64_t, uint8_t *, uint64_t))(v28 + 16))(v79, bufa, v78);
    (*(void (**)(uint64_t, void, uint64_t))(v27 + 104))(v79, enum case for InstallSheetContext.Source.webWithContext(_:), v82);
    uint64_t v32 = *(void *)(v81 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_bag);
    if (*(void *)(v32 + 16))
    {
      unint64_t v33 = sub_100016D20(0xD000000000000035, 0x80000001005BA790);
      if (v34)
      {
        sub_1000144C8(*(void *)(v32 + 56) + 32 * v33, (uint64_t)v71);
      }
      else
      {
        *NSString v71 = 0u;
        *(_OWORD *)(v0 + 144) = 0u;
      }
    }
    else
    {
      *NSString v71 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    sub_1000172F8((uint64_t *)&unk_10065C9C0);
    swift_dynamicCast();
    (*(void (**)(void, void))(*(void *)(v0 + 488) + 8))(*(void *)(v0 + 496), *(void *)(v0 + 480));
    goto LABEL_30;
  }
  char v35 = *(void **)(v0 + 352);
  static Logger.install.getter();
  id v36 = v35;
  BOOL v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.fault.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = *(void *)(v0 + 584);
  uint64_t v41 = *(void *)(v0 + 544);
  uint64_t v42 = *(void **)(v0 + 352);
  if (v39)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446210;
    sub_10018AC60(v17, v17[3]);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = sub_1000143F4(v44, v45, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unknown distributor type: %{public}s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v47 = v41;
    uint64_t v46 = v40;
  }
  else
  {

    uint64_t v46 = v40;
    uint64_t v47 = v41;
  }
  v16(v46, v47);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v60 = *(uint64_t (**)(void))(v0 + 8);
  return v60(0);
}

uint64_t sub_1004B07D4(char a1)
{
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 640) = a1;
  *(void *)(v3 + 632) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1004B11C4;
  }
  else {
    uint64_t v4 = sub_1004B08EC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004B08EC()
{
  Swift::String v91 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 80);
  uint64_t v2 = (void *)v0[44];
  static Logger.install.getter();
  id v3 = v2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    int v74 = *v1;
    uint64_t v6 = (void *)v0[77];
    uint64_t v85 = (void (*)(uint64_t, uint64_t))v0[75];
    uint64_t v79 = v0[68];
    uint64_t v82 = v0[72];
    uint64_t v7 = (void *)v0[44];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    v90[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    v0[39] = v6;
    id v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v6;

    *(_WORD *)(v8 + 12) = 2082;
    if (v74) {
      uint64_t v11 = 0x65756E69746E6F63;
    }
    else {
      uint64_t v11 = 0x6C65636E6163;
    }
    if (v74) {
      unint64_t v12 = 0xE800000000000000;
    }
    else {
      unint64_t v12 = 0xE600000000000000;
    }
    v0[40] = sub_1000143F4(v11, v12, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] Asked to %{public}s the install", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    uint64_t v1 = (unsigned __int8 *)(v0 + 80);
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v85(v82, v79);
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[75];
    uint64_t v14 = v0[72];
    uint64_t v15 = v0[68];
    uint64_t v16 = (void *)v0[44];

    v13(v14, v15);
  }
  unsigned int v89 = *v1;
  if (v89 != 1) {
    goto LABEL_15;
  }
  uint64_t v17 = v0[46];
  uint64_t v18 = v0[47];
  uint64_t v19 = v0[45];
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v18, enum case for FeatureFlag.newInstallSheetFlow(_:), v19);
  char v20 = isFeatureEnabled(_:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  if ((v20 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v21 = v0[79];
  id v22 = (void *)(v0[44] + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_metadata);
  uint64_t v23 = v22[4];
  unint64_t v24 = v22[5];
  uint64_t v25 = v22[6];
  unint64_t v26 = v22[7];
  uint64_t v27 = type metadata accessor for MediaAPIMetadata();
  sub_10049D45C(v23, v24, v25, v26, *(void *)((char *)v22 + *(int *)(v27 + 56)), *(void *)((char *)v22 + *(int *)(v27 + 56) + 8));
  if (v21)
  {
    uint64_t v28 = (void *)v0[44];
    static Logger.install.getter();
    id v29 = v28;
    swift_errorRetain();
    id v30 = v29;
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    Swift::Int v88 = v31;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v58 = v25;
      unint64_t v33 = (void *)v0[77];
      uint64_t v59 = v23;
      uint64_t v67 = (void (*)(uint64_t, uint64_t))v0[75];
      uint64_t v64 = v0[68];
      uint64_t v65 = v0[70];
      uint64_t v83 = v0[63];
      uint64_t v86 = v0[67];
      uint64_t v77 = v0[58];
      uint64_t v80 = v0[64];
      uint64_t v72 = v0[56];
      uint64_t v75 = v0[55];
      uint64_t v66 = v0[52];
      uint64_t v69 = v0[51];
      uint64_t v71 = v0[54];
      uint64_t v61 = v0[49];
      uint64_t v62 = v0[48];
      uint64_t v63 = v0[50];
      char v34 = (void *)v0[44];
      uint64_t v35 = swift_slowAlloc();
      id v36 = (void *)swift_slowAlloc();
      v90[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 138413058;
      os_log_type_t type = v32;
      v0[35] = v33;
      id v37 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v36 = v33;

      *(_WORD *)(v35 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[36] = sub_1000143F4(v58, v26, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v35 + 22) = 2082;
      swift_bridgeObjectRetain();
      v0[37] = sub_1000143F4(v59, v24, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v35 + 32) = 2114;
      swift_errorRetain();
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      v0[38] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v36[1] = v38;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, type, "[%@] Failed to approve developer %{public}s (%{public}s): %{public}@", (uint8_t *)v35, 0x2Au);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      v67(v65, v64);
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v62);
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v71, v69);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v77, v75);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v86, v83);
    }
    else
    {
      uint64_t v70 = (void (*)(uint64_t, uint64_t))v0[75];
      uint64_t v68 = v0[70];
      uint64_t v50 = v0[68];
      uint64_t v51 = v0[64];
      uint64_t v84 = v0[63];
      uint64_t v87 = v0[67];
      uint64_t v52 = v0[56];
      uint64_t v78 = v0[55];
      uint64_t v81 = v0[58];
      uint64_t v53 = v0[52];
      uint64_t v73 = v0[51];
      uint64_t v76 = v0[54];
      uint64_t v55 = v0[49];
      uint64_t v54 = v0[50];
      uint64_t v56 = v0[48];
      uint64_t v57 = (void *)v0[44];

      swift_errorRelease();
      swift_errorRelease();

      swift_errorRelease();
      v70(v68, v50);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v76, v73);
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v81, v78);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v87, v84);
    }
  }
  else
  {
LABEL_15:
    uint64_t v39 = v0[67];
    uint64_t v41 = v0[63];
    uint64_t v40 = v0[64];
    uint64_t v42 = v0[58];
    uint64_t v43 = v0[55];
    uint64_t v44 = v0[56];
    uint64_t v45 = v0[54];
    uint64_t v46 = v0[51];
    uint64_t v47 = v0[52];
    (*(void (**)(void, void))(v0[49] + 8))(v0[50], v0[48]);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v48 = (uint64_t (*)(void))v0[1];
  return v48(v89);
}

uint64_t sub_1004B11C4()
{
  uint64_t v52 = v0;
  uint64_t v1 = (void *)v0[44];
  static Logger.install.getter();
  id v2 = v1;
  swift_errorRetain();
  id v3 = v2;
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  uint64_t v50 = v4;
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    uint64_t v6 = (void *)v0[77];
    unint64_t v33 = (void (*)(uint64_t, uint64_t))v0[75];
    uint64_t v30 = v0[68];
    uint64_t v31 = v0[71];
    uint64_t v46 = v0[63];
    uint64_t v48 = v0[67];
    uint64_t v42 = v0[58];
    uint64_t v44 = v0[64];
    uint64_t v38 = v0[56];
    uint64_t v40 = v0[55];
    uint64_t v32 = v0[52];
    uint64_t v35 = v0[51];
    uint64_t v37 = v0[54];
    uint64_t v27 = v0[49];
    uint64_t v28 = v0[48];
    uint64_t v29 = v0[50];
    uint64_t v7 = (void *)v0[44];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v0[31] = v6;
    uint64_t v51 = v10;
    *(_DWORD *)uint64_t v8 = 138412546;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v6;

    *(_WORD *)(v8 + 12) = 2082;
    swift_getErrorValue();
    uint64_t v12 = *(void *)(v0[21] - 8);
    swift_task_alloc();
    (*(void (**)(void))(v12 + 16))();
    uint64_t v13 = String.init<A>(describing:)();
    unint64_t v15 = v14;
    swift_task_dealloc();
    v0[34] = sub_1000143F4(v13, v15, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, type, "[%@] Error asking for install confirmation: %{public}s", (uint8_t *)v8, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v33(v31, v30);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v35);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v46);
  }
  else
  {
    id v36 = (void (*)(uint64_t, uint64_t))v0[75];
    uint64_t v34 = v0[71];
    uint64_t v16 = v0[68];
    uint64_t v17 = v0[64];
    uint64_t v47 = v0[63];
    uint64_t v49 = v0[67];
    uint64_t v18 = v0[56];
    uint64_t v43 = v0[55];
    uint64_t v45 = v0[58];
    uint64_t v19 = v0[52];
    uint64_t v39 = v0[51];
    uint64_t v41 = v0[54];
    uint64_t v20 = v0[49];
    uint64_t v21 = v0[50];
    uint64_t v22 = v0[48];
    uint64_t v23 = (void *)v0[44];

    swift_errorRelease();
    swift_errorRelease();

    swift_errorRelease();
    v36(v34, v16);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v41, v39);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v45, v43);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v49, v47);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24(0);
}

uint64_t sub_1004B17FC()
{
  return type metadata accessor for InstallConfirmationTask();
}

uint64_t type metadata accessor for InstallConfirmationTask()
{
  uint64_t result = qword_100664CC8;
  if (!qword_100664CC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004B1850()
{
  uint64_t result = type metadata accessor for MediaAPIMetadata();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1004B1934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = (uint64_t *)&v6[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_authenticationContextData];
  *uint64_t v13 = a4;
  v13[1] = a5;
  *(void *)&v6[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_approvedDeveloperStore] = *(void *)(a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_approvedDeveloperStore);
  uint64_t v30 = a3;
  sub_1002E6B40(a3, (uint64_t)&v6[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_metadata]);
  uint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_lockedStorage);
  uint64_t v15 = v14 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v14 + 16);
  uint64_t v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(void *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  uint64_t v17 = v6;
  sub_10018B2A8(a4, a5);
  swift_retain();
  os_unfair_lock_lock(v16);
  sub_1002BDC4C(v15, (uint64_t)v32);
  uint64_t v18 = a1;
  os_unfair_lock_unlock(v16);
  sub_10018B164(v32, (uint64_t)&v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_distributor]);
  uint64_t v19 = &v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_bag];
  long long v20 = *(_OWORD *)(a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag + 8);
  *(void *)uint64_t v19 = *(void *)(a2 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon23ADPInstallConfiguration_bag);
  *(_OWORD *)(v19 + 8) = v20;
  *(void *)&v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_logKey] = a6;
  uint64_t v21 = a1 + *(int *)(type metadata accessor for ADP() + 24);
  *(void *)&v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_itemID] = *(void *)(v21 + 16);
  *(void *)&v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_versionID] = *(void *)(v21 + 8);
  uint64_t v22 = *(void *)(v21 + 168);
  if (v22)
  {
    if (*(void *)(v21 + 160) == 0x6C7074656B72616DLL && v22 == 0xEB00000000656361) {
      LOBYTE(v23) = 1;
    }
    else {
      LOBYTE(v23) = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    unint64_t v24 = (objc_class *)ObjectType;
    uint64_t v25 = v30;
  }
  else
  {
    unint64_t v24 = (objc_class *)ObjectType;
    uint64_t v25 = v30;
    if (*(unsigned char *)(v21 + 184) == 1) {
      LOBYTE(v23) = 0;
    }
    else {
      uint64_t v23 = *(void *)(v21 + 176) & 1;
    }
  }
  v17[OBJC_IVAR____TtC28ManagedAppDistributionDaemon23InstallConfirmationTask_isMarketplace] = v23 & 1;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v26 = a6;

  v31.receiver = v17;
  v31.super_class = v24;
  id v27 = objc_msgSendSuper2(&v31, "init");
  sub_1004B1C08(v25, (uint64_t (*)(void))type metadata accessor for MediaAPIMetadata);
  sub_1004B1C08(v18, (uint64_t (*)(void))type metadata accessor for ADP);
  return v27;
}

uint64_t sub_1004B1C08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004B1C68(const char *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v44 = a3;
  uint64_t v43 = a2;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v38 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v13 = &v35[-v12];
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for OSSignposter();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = &v35[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = a1;
  *(void *)(v5 + 16) = a1;
  char v22 = v44;
  *(void *)(v5 + 24) = v43;
  *(unsigned char *)(v5 + 32) = v22;
  uint64_t v39 = v15;
  uint64_t v40 = v14;
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v43 = a4;
  v23(v17, a4, v14);
  OSSignposter.init(logger:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v19 + 32))(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16SignpostInterval_signposter, v21, v18);
  static OSSignpostID.exclusive.getter();
  unint64_t v24 = OSSignposter.logHandle.getter();
  int v25 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v27 = v42;
  int v36 = v25;
  if ((v22 & 1) == 0)
  {
    uint64_t v28 = v41;
    uint64_t v29 = v37;
    if (!v37)
    {
      __break(1u);
LABEL_5:

      uint64_t v28 = v41;
      uint64_t v27 = v42;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16))(v38, v13, v41);
LABEL_11:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v34 = OSSignpostIntervalState.init(id:isOpen:)();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v40);
      (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v13, v28);
      *(void *)(v5 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16SignpostInterval_interval) = v34;
      return v5;
    }
LABEL_10:
    uint64_t v30 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v42 + 16);
    objc_super v31 = v38;
    v30(v38, v13, v28);
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    os_signpost_id_t v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, (os_signpost_type_t)v36, v33, v29, "", v32, 2u);
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v31, v28);
    v30(v31, v13, v28);
    goto LABEL_11;
  }
  uint64_t v28 = v41;
  if ((unint64_t)v37 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v37 >> 11 != 27)
  {
    if (v37 >> 16 <= 0x10)
    {
      uint64_t v29 = &v45;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1004B2070()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v24[-v10];
  uint64_t v12 = *(const char **)(v0 + 16);
  char v13 = *(unsigned char *)(v0 + 32);
  uint64_t v29 = OBJC_IVAR____TtC28ManagedAppDistributionDaemon16SignpostInterval_interval;
  uint64_t v30 = (char *)v12;
  uint64_t v28 = v0 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon16SignpostInterval_signposter;
  uint64_t v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v25 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  if ((v13 & 1) == 0)
  {
    if (!v30)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v11, v5);
      uint64_t v16 = v28;
LABEL_14:
      uint64_t v23 = type metadata accessor for OSSignposter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v16, v23);
      swift_release();
      return v1;
    }
LABEL_10:
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v18 = v26;
    uint64_t v17 = v27;
    if ((*(unsigned int (**)(unsigned char *, uint64_t))(v26 + 88))(v4, v27) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v4, v17);
      uint64_t v19 = "";
    }
    uint64_t v16 = v28;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v9, v11, v5);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, (os_signpost_type_t)v25, v21, v30, v19, v20, 2u);
    swift_slowDealloc();

    char v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
    v22(v11, v5);
    v22(v9, v5);
    goto LABEL_14;
  }
  if ((unint64_t)v30 >> 32)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v30 >> 11 != 27)
  {
    if (v30 >> 16 <= 0x10)
    {
      uint64_t v30 = &v31;
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1004B23EC()
{
  sub_1004B2070();

  return swift_deallocClassInstance();
}

uint64_t sub_1004B2444()
{
  return type metadata accessor for SignpostInterval();
}

uint64_t type metadata accessor for SignpostInterval()
{
  uint64_t result = qword_100664D08;
  if (!qword_100664D08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004B2498()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004B2540(char a1)
{
  uint64_t result = 0x6F72656C65636361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x74696B7261;
      break;
    case 2:
      uint64_t result = 0x37766D7261;
      break;
    case 3:
      uint64_t result = 0x34366D7261;
      break;
    case 4:
      uint64_t result = 0x75636F466F747561;
      break;
    case 5:
      uint64_t result = 0x746F6F7465756C62;
      break;
    case 6:
      uint64_t result = 0x6C466172656D6163;
      break;
    case 7:
      uint64_t result = 0xD000000000000011;
      break;
    case 8:
      uint64_t result = 0x74696B656D6167;
      break;
    case 9:
      uint64_t result = 7565415;
      break;
    case 10:
      uint64_t result = 0x706F63736F727967;
      break;
    case 11:
      uint64_t result = 0x696B68746C616568;
      break;
    case 12:
      uint64_t result = 0xD000000000000010;
      break;
    case 13:
      uint64_t result = 0x6D6F74656E67616DLL;
      break;
    case 14:
      uint64_t result = 0x6C6174656DLL;
      break;
    case 15:
      uint64_t result = 0x6F68706F7263696DLL;
      break;
    case 16:
      uint64_t result = 6514286;
      break;
    case 17:
      uint64_t result = 0x73656C676E65706FLL;
      break;
    case 18:
      uint64_t result = 0x73656C676E65706FLL;
      break;
    case 19:
      uint64_t result = 0x73656C676E65706FLL;
      break;
    case 20:
      uint64_t result = 0x65506F5472656570;
      break;
    case 21:
      uint64_t result = 7564659;
      break;
    case 22:
      uint64_t v3 = 0x436C6C697473;
      goto LABEL_26;
    case 23:
      uint64_t result = 0x6E6F6870656C6574;
      break;
    case 24:
      uint64_t v3 = 0x436F65646976;
LABEL_26:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x6D61000000000000;
      break;
    case 25:
      uint64_t result = 1768319351;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B2888(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1004B2540(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1004B2540(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1004B2914()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004B2540(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004B2978()
{
  sub_1004B2540(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B29CC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004B2540(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004B2A2C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1004B2B58();
  *a1 = result;
  return result;
}

uint64_t sub_1004B2A5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004B2540(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_1004B2A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v7 = result;
    id v8 = (id)MobileGestalt_copy_productVersion_obj();

    if (v8)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v11 = 0xE000000000000000;
    }
    sub_100447360(v9, v11, &v14);
    sub_10018B0C4((uint64_t)&v14);
    BOOL v12 = v14 < a1;
    if (v14 == a1)
    {
      BOOL v12 = v15 < a2;
      if (v15 == a2) {
        BOOL v12 = v16 < a3;
      }
    }
    int v13 = v12;
    return (id)(v13 ^ 1u);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B2B58()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1A) {
    return 26;
  }
  else {
    return v0;
  }
}

uint64_t sub_1004B2BAC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (2)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_78;
    }
    if (v10 >= v6)
    {
LABEL_75:
      uint64_t v13 = 1;
      break;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_75;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_75;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v6) {
            goto LABEL_75;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          if (!v11)
          {
            int64_t v12 = v10 + 4;
            if (v12 < v6)
            {
              unint64_t v11 = *(void *)(v2 + 8 * v12);
              if (v11)
              {
                int64_t v7 = v12;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v7 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  break;
                }
                if (v7 >= v6) {
                  goto LABEL_75;
                }
                unint64_t v11 = *(void *)(v2 + 8 * v7);
                ++v12;
                if (v11) {
                  goto LABEL_21;
                }
              }
LABEL_78:
              __break(1u);
              JUMPOUT(0x1004B2ECCLL);
            }
            goto LABEL_75;
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    switch(*(unsigned char *)(*(void *)(a1 + 48) + v9))
    {
      case 1:
        if ((MobileGestalt_get_deviceSupportsARKit() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 2:
        if ((MobileGestalt_get_armV7ExecutionCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 3:
        if ((MobileGestalt_get_arm64ExecutionCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 4:
        if ((MobileGestalt_get_autoFocusCameraCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 5:
        if ((MobileGestalt_get_bluetoothLECapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 6:
        if ((MobileGestalt_get_cameraFlashCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 7:
        if ((MobileGestalt_get_frontFacingCameraCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 8:
        if ((MobileGestalt_get_gameKitCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 9:
        if ((MobileGestalt_get_gpsCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xA:
        if ((MobileGestalt_get_gyroscopeCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xB:
        if ((MobileGestalt_get_healthKitCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xC:
        if ((MobileGestalt_get_locationServicesCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xD:
        if ((MobileGestalt_get_magnetometerCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xE:
        if ((MobileGestalt_get_metalCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0xF:
        if ((MobileGestalt_get_microphoneCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x10:
        if ((MobileGestalt_get_deviceSupportsNFC() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x11:
        if ((MobileGestalt_get_openGLES1Capability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x12:
        if ((MobileGestalt_get_openGLES2Capability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x13:
        if ((MobileGestalt_get_openGLES3Capability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x14:
        if ((MobileGestalt_get_peer2PeerCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x15:
        if ((MobileGestalt_get_smsCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x16:
        if ((MobileGestalt_get_cameraCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x17:
        if ((MobileGestalt_get_telephonyCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x18:
        if ((MobileGestalt_get_videoCameraCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      case 0x19:
        if ((MobileGestalt_get_wifiCapability() & 1) == 0) {
          goto LABEL_74;
        }
        continue;
      default:
        if (MobileGestalt_get_accelerometerCapability()) {
          continue;
        }
LABEL_74:
        uint64_t v13 = 0;
        break;
    }
    break;
  }
  swift_release();
  return v13;
}

Swift::Int sub_1004B2F34(uint64_t a1)
{
  uint64_t v16 = &_swiftEmptySetSingleton;
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  Swift::Int result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v4)
  {
    v4 &= v4 - 1;
LABEL_20:
    swift_bridgeObjectRetain();
    Swift::Int result = sub_1004B2B58();
    if (result != 26) {
      Swift::Int result = sub_1003295EC(&v15, result);
    }
  }
  int64_t v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  if (v8 >= v5) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v8);
  ++v7;
  if (v9) {
    goto LABEL_19;
  }
  int64_t v7 = v8 + 1;
  if (v8 + 1 >= v5) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v7);
  if (v9) {
    goto LABEL_19;
  }
  int64_t v7 = v8 + 2;
  if (v8 + 2 >= v5) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v1 + 8 * v7);
  if (v9)
  {
LABEL_19:
    uint64_t v4 = (v9 - 1) & v9;
    goto LABEL_20;
  }
  int64_t v10 = v8 + 3;
  if (v10 < v5)
  {
    uint64_t v9 = *(void *)(v1 + 8 * v10);
    if (!v9)
    {
      while (1)
      {
        int64_t v7 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_27;
        }
        if (v7 >= v5) {
          goto LABEL_22;
        }
        uint64_t v9 = *(void *)(v1 + 8 * v7);
        ++v10;
        if (v9) {
          goto LABEL_19;
        }
      }
    }
    int64_t v7 = v10;
    goto LABEL_19;
  }
LABEL_22:
  swift_release();
  uint64_t v11 = (uint64_t)v16;
  id v12 = (id)MobileGestalt_get_current_device();
  if (v12)
  {
    id v13 = v12;
    char v14 = sub_1004B2BAC(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  return v14 & 1;
}

ValueMetadata *type metadata accessor for ADPPreflightTaskUtilities()
{
  return &type metadata for ADPPreflightTaskUtilities;
}

uint64_t getEnumTagSinglePayload for ADPPreflightTaskUtilities.Requirement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ADPPreflightTaskUtilities.Requirement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *Swift::Int result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B3274);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::Int result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ADPPreflightTaskUtilities.Requirement()
{
  return &type metadata for ADPPreflightTaskUtilities.Requirement;
}

unint64_t sub_1004B32B0()
{
  unint64_t result = qword_100664DA0;
  if (!qword_100664DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664DA0);
  }
  return result;
}

uint64_t sub_1004B3304(void *a1)
{
  int v2 = v1;
  uint64_t v55 = sub_1000172F8(&qword_100664E90);
  unint64_t v52 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v54 = (uint64_t)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v56 = sub_1000172F8(&qword_100664E98);
  uint64_t v53 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  unsigned int v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_100664EA0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_1000172F8(&qword_100664EA8);
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  id v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004B5914();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1004B58EC(v2, &v68);
  char v13 = v78;
  if (v78 >> 62)
  {
    if (v78 >> 62 == 1)
    {
      v78 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v50 = v68;
      uint64_t v14 = v69;
      unint64_t v49 = *((void *)&v68 + 1);
      unint64_t v15 = v70;
      LODWORD(v48) = v71;
      unint64_t v17 = v72;
      uint64_t v16 = v73;
      unint64_t v46 = v74;
      uint64_t v18 = v76;
      uint64_t v45 = v75;
      unint64_t v19 = v77;
      uint64_t v20 = v80;
      unint64_t v47 = v79;
      LOBYTE(v60) = 2;
      sub_100012670(v69, v70);
      swift_bridgeObjectRetain();
      uint64_t v53 = v18;
      unint64_t v56 = v19;
      sub_100012670(v18, v19);
      sub_1004B5968();
      uint64_t v51 = v20;
      swift_bridgeObjectRetain();
      uint64_t v21 = v54;
      uint64_t v22 = v59;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v60 = v50;
      unint64_t v61 = v49;
      uint64_t v62 = v14;
      uint64_t v50 = v14;
      unint64_t v63 = v15;
      LOBYTE(v64) = v48;
      unint64_t v65 = v17;
      uint64_t v66 = v16;
      char v81 = 0;
      sub_1004B5B60();
      uint64_t v23 = v55;
      uint64_t v24 = v58;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v24)
      {
        sub_100013510(v53, v56);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v21, v23);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v22);
        sub_100013510(v50, v15);
      }
      else
      {
        uint64_t v41 = v50;
        uint64_t v60 = v46;
        unint64_t v61 = v45;
        uint64_t v62 = v53;
        unint64_t v63 = v56;
        LOBYTE(v64) = v13 & 1;
        unint64_t v65 = v47;
        uint64_t v66 = v51;
        char v81 = 1;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        sub_100013510(v41, v15);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v21, v23);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v59);
        sub_100013510(v53, v56);
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      LOBYTE(v60) = 0;
      sub_1004B5B0C();
      uint64_t v40 = v59;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v12, v40);
    }
  }
  else
  {
    v78 &= 0x3FFFFFFFFFFFFFFFuLL;
    uint64_t v25 = v68;
    uint64_t v26 = v12;
    unint64_t v46 = *((void *)&v68 + 1);
    unint64_t v27 = v70;
    uint64_t v45 = v69;
    uint64_t v29 = v71;
    unint64_t v28 = v72;
    uint64_t v55 = (uint64_t)v6;
    uint64_t v31 = v73;
    unint64_t v30 = v74;
    uint64_t v33 = v75;
    unint64_t v32 = v76;
    LOBYTE(v60) = 1;
    sub_1003B5A3C(v68, *((unint64_t *)&v68 + 1), v69, v70, v71);
    uint64_t v48 = v33;
    unint64_t v47 = v32;
    sub_100012670(v33, v32);
    sub_1004B5A10();
    uint64_t v34 = v59;
    unint64_t v49 = (unint64_t)v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v50 = v25;
    uint64_t v60 = v25;
    unint64_t v35 = v46;
    uint64_t v36 = v45;
    unint64_t v61 = v46;
    uint64_t v62 = v45;
    uint64_t v51 = v27;
    unint64_t v63 = v27;
    uint64_t v64 = v29;
    uint64_t v54 = v29;
    unint64_t v52 = v28;
    unint64_t v65 = v28;
    uint64_t v66 = v31;
    uint64_t v37 = v55;
    unint64_t v67 = v30;
    char v81 = 0;
    sub_1004B5BB4();
    uint64_t v38 = v58;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    if (v38)
    {
      sub_100013510(v48, v47);
      (*(void (**)(uint64_t, unint64_t))(v53 + 8))(v37, v56);
      (*(void (**)(unint64_t, uint64_t))(v57 + 8))(v49, v34);
      return sub_10028E830(v50, v35, v36, v51, v54);
    }
    else
    {
      uint64_t v42 = v48;
      uint64_t v60 = v48;
      unint64_t v43 = v47;
      unint64_t v61 = v47;
      char v81 = 1;
      sub_1004B5C08();
      unint64_t v44 = v56;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_10028E830(v50, v35, v36, v51, v54);
      (*(void (**)(uint64_t, unint64_t))(v53 + 8))(v37, v44);
      (*(void (**)(unint64_t, uint64_t))(v57 + 8))(v49, v59);
      return sub_100013510(v42, v43);
    }
  }
}

unint64_t sub_1004B3BC0(char a1)
{
  unint64_t result = 0x666F5F7365747962;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x645F726568706963;
      break;
    case 2:
      unint64_t result = 0x73736572706D6F63;
      break;
    case 3:
      unint64_t result = 0x6F72705F61746164;
      break;
    case 4:
      unint64_t result = 0x747365676964;
      break;
    case 5:
      unint64_t result = 0x636F6C5F6B736964;
      break;
    case 6:
      unint64_t result = 0x6974707972636E65;
      break;
    case 7:
      unint64_t result = 0x6B636F6C625F7369;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0x695F746E65726170;
      break;
    case 10:
      unint64_t result = 0x5F74736575716572;
      break;
    case 11:
      unint64_t result = 0x7265696669726576;
      break;
    case 12:
      unint64_t result = 1701869940;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 7107189;
      break;
    case 15:
      unint64_t result = 0x746E6169726176;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B3E00()
{
  if (*v0) {
    return 0x4B65736E6563696CLL;
  }
  else {
    return 0x79654B707061;
  }
}

uint64_t sub_1004B3E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004B4D20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004B3E64(uint64_t a1)
{
  unint64_t v2 = sub_1004B5968();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B3EA0(uint64_t a1)
{
  unint64_t v2 = sub_1004B5968();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004B3EDC()
{
  uint64_t v1 = 0x79616C5072696166;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6563694C707061;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x707972636E656E75;
  }
}

uint64_t sub_1004B3F44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004B4E18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004B3F6C(uint64_t a1)
{
  unint64_t v2 = sub_1004B5914();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B3FA8(uint64_t a1)
{
  unint64_t v2 = sub_1004B5914();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004B3FE4()
{
  if (*v0) {
    return 1718511987;
  }
  else {
    return 0x6F666E497064;
  }
}

uint64_t sub_1004B4014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004B4F94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004B403C(uint64_t a1)
{
  unint64_t v2 = sub_1004B5A10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B4078(uint64_t a1)
{
  unint64_t v2 = sub_1004B5A10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004B40B4(uint64_t a1)
{
  unint64_t v2 = sub_1004B5B0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B40F0(uint64_t a1)
{
  unint64_t v2 = sub_1004B5B0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1004B412C(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1004B5070(a1, v4);
  if (!v2) {
    sub_1004B58EC(v4, a2);
  }
}

uint64_t sub_1004B4174(void *a1)
{
  sub_1004B58EC(v1, v4);
  return sub_1004B3304(a1);
}

uint64_t sub_1004B41C4(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1004B3BC0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1004B3BC0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1004B4250()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004B3BC0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004B42B4()
{
  sub_1004B3BC0(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004B4308()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1004B3BC0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1004B4368@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004B5C5C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1004B4398@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1004B3BC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1004B43C4(void *a1@<X8>)
{
  *a1 = &off_100636D50;
}

id sub_1004B4578()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppPackageEntity.Entity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppPackageEntity.Entity()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AppPackageEntity.Property(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B469CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPackageEntity.Property()
{
  return &type metadata for AppPackageEntity.Property;
}

ValueMetadata *type metadata accessor for AppPackageEntity()
{
  return &type metadata for AppPackageEntity;
}

uint64_t destroy for AppPackageEncryption(uint64_t a1)
{
  return sub_10028E770(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t *initializeWithCopy for AppPackageEncryption(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  sub_10041D3F8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  return a1;
}

uint64_t assignWithCopy for AppPackageEncryption(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v23 = a2[9];
  unint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  uint64_t v26 = a2[12];
  uint64_t v27 = a2[13];
  sub_10041D3F8(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, v24, v25);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v26;
  *(void *)(a1 + 104) = v27;
  sub_10028E770(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, *((unint64_t *)&v21 + 1));
  return a1;
}

uint64_t assignWithTake for AppPackageEncryption(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v14;
  long long v15 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 96) = a2[6];
  sub_10028E770(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((unint64_t *)&v11 + 1), v12, *((unint64_t *)&v12 + 1));
  return a1;
}

uint64_t getEnumTagSinglePayload for AppPackageEncryption(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 80) >> 60) & 3 | (4 * (*(_DWORD *)(a1 + 88) >> 1));
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AppPackageEncryption(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 104) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 80) = (unint64_t)(-(char)a2 & 3) << 60;
      *(void *)(a1 + 88) = ((unint64_t)-a2 >> 1) & 0x7FFFFFFE;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1004B4A54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1004B4A70(uint64_t result)
{
  *(void *)(result + 88) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1004B4A80(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *(void *)(result + 88) & 1 | (a2 << 62);
    *(void *)(result + 80) &= 0xCFFFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = v2;
  }
  else
  {
    *(void *)double result = (a2 - 2);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 88) = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPackageEncryption()
{
  return &type metadata for AppPackageEncryption;
}

unint64_t sub_1004B4AE0()
{
  unint64_t result = qword_100664DD0;
  if (!qword_100664DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664DD0);
  }
  return result;
}

unint64_t sub_1004B4B38()
{
  unint64_t result = qword_100664E08;
  if (!qword_100664E08)
  {
    sub_10017B924(&qword_100664E10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E08);
  }
  return result;
}

unint64_t sub_1004B4B98()
{
  unint64_t result = qword_100664E18;
  if (!qword_100664E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E18);
  }
  return result;
}

unint64_t sub_1004B4BEC(void *a1)
{
  a1[1] = sub_1004B4C24();
  a1[2] = sub_1004B4C78();
  unint64_t result = sub_1004B4CCC();
  a1[3] = result;
  return result;
}

unint64_t sub_1004B4C24()
{
  unint64_t result = qword_100664E20;
  if (!qword_100664E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E20);
  }
  return result;
}

unint64_t sub_1004B4C78()
{
  unint64_t result = qword_100664E28;
  if (!qword_100664E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E28);
  }
  return result;
}

unint64_t sub_1004B4CCC()
{
  unint64_t result = qword_100664E30;
  if (!qword_100664E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E30);
  }
  return result;
}

uint64_t sub_1004B4D20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79654B707061 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B65736E6563696CLL && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004B4E18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x707972636E656E75 && a2 == 0xEB00000000646574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79616C5072696166 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6563694C707061 && a2 == 0xEA00000000006573)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1004B4F94(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F666E497064 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1718511987 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

double sub_1004B5070@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v45 = sub_1000172F8(&qword_100664E38);
  uint64_t v47 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1000172F8(&qword_100664E40);
  uint64_t v46 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  unint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100664E48);
  uint64_t v49 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100664E50);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v51 = a1;
  sub_10018AC60(a1, v13);
  sub_1004B5914();
  uint64_t v14 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v15 = v49;
  uint64_t v43 = v6;
  uint64_t v16 = v50;
  *(void *)&long long v52 = v10;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v19 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v21 = v20;
    sub_1000172F8(&qword_10065DF58);
    *long long v21 = &type metadata for AppPackageEncryption;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, enum case for DecodingError.typeMismatch(_:), v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v9);
LABEL_9:
    sub_100014524((uint64_t)v51);
    return result;
  }
  if (*(unsigned char *)(v17 + 32))
  {
    if (*(unsigned char *)(v17 + 32) == 1)
    {
      LOBYTE(v53) = 1;
      sub_1004B5A10();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v61[0] = 0;
      sub_1004B5A64();
      uint64_t v18 = v44;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v38 = v53;
      uint64_t v41 = v54;
      uint64_t v50 = v55;
      uint64_t v39 = v56;
      uint64_t v43 = v57;
      uint64_t v42 = v58;
      uint64_t v28 = v60;
      uint64_t v49 = v59;
      char v66 = 1;
      sub_1004B5AB8();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v29 = 0;
      uint64_t v30 = v52;
      uint64_t v40 = 0;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v5, v18);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      long long v52 = *(_OWORD *)v61;
      uint64_t v34 = v50;
    }
    else
    {
      LOBYTE(v53) = 2;
      sub_1004B5968();
      unint64_t v24 = v16;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v61[0] = 0;
      sub_1004B59BC();
      uint64_t v25 = v45;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v26 = v54;
      uint64_t v38 = v53;
      uint64_t v34 = v55;
      uint64_t v39 = v56;
      uint64_t v43 = v57;
      uint64_t v42 = v58;
      uint64_t v49 = v59;
      char v66 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v40 = 0;
      uint64_t v41 = v26;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v9);
      uint64_t v28 = *(void *)v61;
      long long v52 = *(_OWORD *)&v61[8];
      uint64_t v31 = v62;
      uint64_t v29 = v64;
      uint64_t v33 = v65;
      uint64_t v32 = v63 | 0x4000000000000000;
    }
    uint64_t v22 = v38;
    uint64_t v23 = v39;
  }
  else
  {
    LOBYTE(v53) = 0;
    sub_1004B5B0C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v29 = 0;
    uint64_t v40 = 0;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v43);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v9);
    uint64_t v22 = 0;
    uint64_t v41 = 0;
    uint64_t v34 = 0;
    uint64_t v23 = 0;
    uint64_t v43 = 0;
    uint64_t v42 = 0;
    uint64_t v49 = 0;
    uint64_t v28 = 0;
    uint64_t v31 = 0;
    uint64_t v33 = 0;
    long long v52 = 0u;
    uint64_t v32 = 0x8000000000000000;
  }
  sub_100014524((uint64_t)v51);
  unint64_t v35 = v48;
  uint64_t v36 = v41;
  *uint64_t v48 = v22;
  v35[1] = v36;
  _OWORD v35[2] = v34;
  v35[3] = v23;
  uint64_t v37 = v42;
  unsigned char v35[4] = v43;
  v35[5] = v37;
  v35[6] = v49;
  v35[7] = v28;
  double result = *(double *)&v52;
  *((_OWORD *)v35 + 4) = v52;
  v35[10] = v31;
  v35[11] = v32;
  v35[12] = v29;
  v35[13] = v33;
  return result;
}

_OWORD *sub_1004B58EC(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  a2[3] = v4;
  a2[4] = v5;
  return a2;
}

unint64_t sub_1004B5914()
{
  unint64_t result = qword_100664E58;
  if (!qword_100664E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E58);
  }
  return result;
}

unint64_t sub_1004B5968()
{
  unint64_t result = qword_100664E60;
  if (!qword_100664E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E60);
  }
  return result;
}

unint64_t sub_1004B59BC()
{
  unint64_t result = qword_100664E68;
  if (!qword_100664E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E68);
  }
  return result;
}

unint64_t sub_1004B5A10()
{
  unint64_t result = qword_100664E70;
  if (!qword_100664E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E70);
  }
  return result;
}

unint64_t sub_1004B5A64()
{
  unint64_t result = qword_100664E78;
  if (!qword_100664E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E78);
  }
  return result;
}

unint64_t sub_1004B5AB8()
{
  unint64_t result = qword_100664E80;
  if (!qword_100664E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E80);
  }
  return result;
}

unint64_t sub_1004B5B0C()
{
  unint64_t result = qword_100664E88;
  if (!qword_100664E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664E88);
  }
  return result;
}

unint64_t sub_1004B5B60()
{
  unint64_t result = qword_100664EB0;
  if (!qword_100664EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EB0);
  }
  return result;
}

unint64_t sub_1004B5BB4()
{
  unint64_t result = qword_100664EB8;
  if (!qword_100664EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EB8);
  }
  return result;
}

unint64_t sub_1004B5C08()
{
  unint64_t result = qword_100664EC0;
  if (!qword_100664EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EC0);
  }
  return result;
}

unint64_t sub_1004B5C5C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639E30, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for AppPackageEncryption.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B5D74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPackageEncryption.CodingKeys()
{
  return &type metadata for AppPackageEncryption.CodingKeys;
}

ValueMetadata *type metadata accessor for AppPackageEncryption.UnencryptedCodingKeys()
{
  return &type metadata for AppPackageEncryption.UnencryptedCodingKeys;
}

ValueMetadata *type metadata accessor for AppPackageEncryption.FairPlayCodingKeys()
{
  return &type metadata for AppPackageEncryption.FairPlayCodingKeys;
}

unsigned char *_s28ManagedAppDistributionDaemon20AppPackageEncryptionO18FairPlayCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B5E9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPackageEncryption.AppLicenseCodingKeys()
{
  return &type metadata for AppPackageEncryption.AppLicenseCodingKeys;
}

unint64_t sub_1004B5ED8()
{
  unint64_t result = qword_100664EC8;
  if (!qword_100664EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EC8);
  }
  return result;
}

unint64_t sub_1004B5F30()
{
  unint64_t result = qword_100664ED0;
  if (!qword_100664ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664ED0);
  }
  return result;
}

unint64_t sub_1004B5F88()
{
  unint64_t result = qword_100664ED8;
  if (!qword_100664ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664ED8);
  }
  return result;
}

unint64_t sub_1004B5FE0()
{
  unint64_t result = qword_100664EE0;
  if (!qword_100664EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EE0);
  }
  return result;
}

unint64_t sub_1004B6038()
{
  unint64_t result = qword_100664EE8;
  if (!qword_100664EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EE8);
  }
  return result;
}

unint64_t sub_1004B6090()
{
  unint64_t result = qword_100664EF0;
  if (!qword_100664EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EF0);
  }
  return result;
}

unint64_t sub_1004B60E8()
{
  unint64_t result = qword_100664EF8;
  if (!qword_100664EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664EF8);
  }
  return result;
}

unint64_t sub_1004B6140()
{
  unint64_t result = qword_100664F00;
  if (!qword_100664F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664F00);
  }
  return result;
}

unint64_t sub_1004B6198()
{
  unint64_t result = qword_100664F08;
  if (!qword_100664F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664F08);
  }
  return result;
}

unint64_t sub_1004B61F0()
{
  unint64_t result = qword_100664F10;
  if (!qword_100664F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664F10);
  }
  return result;
}

unint64_t sub_1004B6248()
{
  unint64_t result = qword_100664F18;
  if (!qword_100664F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664F18);
  }
  return result;
}

char *sub_1004B629C(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    unsigned int v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    uint64_t v7 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v7;
    uint64_t v9 = a2[5];
    uint64_t v8 = a2[6];
    *((void *)a1 + 5) = v9;
    *((void *)a1 + 6) = v8;
    uint64_t v10 = a2[8];
    *((void *)a1 + 7) = a2[7];
    *((void *)a1 + 8) = v10;
    uint64_t v11 = a2[10];
    *((void *)a1 + 9) = a2[9];
    *((void *)a1 + 10) = v11;
    a1[88] = *((unsigned char *)a2 + 88);
    *((void *)a1 + 12) = a2[12];
    uint64_t v12 = *(int *)(a3 + 60);
    long long v20 = &a1[v12];
    uint64_t v21 = (uint64_t)a2 + v12;
    *(void *)&a1[v12] = *(char **)((char *)a2 + v12);
    uint64_t v13 = v5;
    swift_retain();
    swift_retain();
    uint64_t v14 = v9;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
    uint64_t v16 = &v20[v15];
    uint64_t v17 = v21 + v15;
    uint64_t v18 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_1004B6438(id *a1, uint64_t a2)
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  int v4 = (char *)a1 + *(int *)(a2 + 60);
  swift_release();
  uint64_t v5 = &v4[*(int *)(sub_1000172F8(&qword_10065E410) + 36)];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1004B6514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v10 = *(int *)(a3 + 60);
  uint64_t v18 = a1 + v10;
  uint64_t v19 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  id v11 = v4;
  swift_retain();
  swift_retain();
  id v12 = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v14 = v18 + v13;
  uint64_t v15 = v19 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

uint64_t sub_1004B6668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void **)(a2 + 40);
  uint64_t v10 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v9;
  id v11 = v9;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(a3 + 60);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_retain();
  swift_release();
  uint64_t v15 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v16 = v13 + v15;
  uint64_t v17 = v14 + v15;
  uint64_t v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1004B6814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v5 = *(int *)(a3 + 60);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)(a1 + v5) = *(void *)(a2 + v5);
  uint64_t v8 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v9 = v6 + v8;
  uint64_t v10 = v7 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1004B68E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_release();
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_release();
  uint64_t v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  uint64_t v10 = *(int *)(a3 + 60);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_release();
  uint64_t v13 = *(int *)(sub_1000172F8(&qword_10065E410) + 36);
  uint64_t v14 = v11 + v13;
  uint64_t v15 = v12 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1004B6A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004B6A48);
}

uint64_t sub_1004B6A48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1000172F8(&qword_10065E410);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004B6AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B6B10);
}

void *sub_1004B6B10(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1000172F8(&qword_10065E410);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 60);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for IPA_FailTask()
{
  uint64_t result = qword_100664F78;
  if (!qword_100664F78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1004B6C08()
{
  sub_100289CE8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1004B6CDC@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v54 = a6;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a7 = a4;
  id v53 = a4;
  id v16 = a1;
  id v17 = sub_100249BF4(v16);
  uint64_t v19 = v18;

  *(void *)(a7 + 8) = v17;
  *(void *)(a7 + 16) = v19;
  uint64_t v20 = sub_10041CE88(a2, (uint64_t)[v16 persistentID]);
  uint64_t v59 = a3;
  if (v21)
  {
    uint64_t v52 = a5;
    *(void *)(a7 + 24) = v20;
    *(void *)(a7 + 32) = v21;
    uint64_t v22 = (void *)a3[24];
    uint64_t v23 = (void *)v22[3];
    uint64_t v24 = a3[28];
    *(void *)(a7 + 40) = v23;
    *(void *)(a7 + 48) = v24;
    *(void *)(a7 + 56) = *(void *)(a3[30] + 16);
    uint64_t v25 = a3[2];
    *(void *)(a7 + 64) = v22[19];
    *(void *)(a7 + 72) = v25;
    uint64_t v48 = a3[21];
    *(void *)(a7 + 80) = v48;
    uint64_t v49 = v22[20];
    *(void *)(a7 + 96) = v49;
    uint64_t v26 = (uint64_t)v22 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19InstallDependencies_licenseStorage;
    uint64_t v27 = v21;
    uint64_t v28 = *(int *)(type metadata accessor for IPA_FailTask() + 60);
    uint64_t v50 = a7;
    sub_100017238(v26, a7 + v28, &qword_10065E410);
    id v29 = v16;
    id v30 = v23;
    swift_retain();
    uint64_t v31 = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v49 = v27;
    swift_retain();
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v29 valueForProperty:v32];

    if (v33)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v58, 0, sizeof(v58));
    }
    uint64_t v39 = v51;
    sub_100017238((uint64_t)v58, (uint64_t)&v56, (uint64_t *)&unk_10065C9C0);
    uint64_t v40 = v50;
    if (v57)
    {
      sub_1001C5DD4(&v56, v55);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      char v41 = sub_100242F64(v55);
      if (v39)
      {
        swift_release();
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1004B7304);
      }
      char v42 = v41;
      swift_release();
      sub_100014524((uint64_t)v55);
      sub_10001729C((uint64_t)v58, (uint64_t *)&unk_10065C9C0);

      char v43 = 1;
      switch(v42)
      {
        case 4:
          break;
        default:
          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
          break;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10001729C((uint64_t)v58, (uint64_t *)&unk_10065C9C0);
      swift_release();

      char v43 = 0;
    }

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t result = swift_release();
    *(unsigned char *)(v40 + 88) = v43 & 1;
  }
  else
  {
    uint64_t v51 = v13;
    static Logger.install.getter();
    uint64_t v34 = v16;
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = a5;
      uint64_t v38 = v37;
      *(_DWORD *)uint64_t v37 = 134217984;
      *(void *)&v58[0] = [v34 persistentID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No package available for \"%lld\"", v38, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      unint64_t v35 = v34;
    }
    uint64_t v44 = v50;
    uint64_t v45 = v51;

    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
    type metadata accessor for InternalError();
    sub_100013D8C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    return swift_release();
  }
  return result;
}

uint64_t sub_1004B7324(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  sub_1000172F8(&qword_10065E4D0);
  v2[26] = swift_task_alloc();
  sub_1000172F8(&qword_10065BD08);
  v2[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ManagedAppStatus.State();
  v2[28] = v3;
  v2[29] = *(void *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[33] = v4;
  v2[34] = *(void *)(v4 - 8);
  v2[35] = swift_task_alloc();
  sub_1000172F8(&qword_10065CFF0);
  v2[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AppInstallRequestType();
  v2[37] = v5;
  v2[38] = *(void *)(v5 - 8);
  v2[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MarketplaceKitError();
  v2[40] = v6;
  v2[41] = *(void *)(v6 - 8);
  v2[42] = swift_task_alloc();
  sub_1000172F8(&qword_10065E410);
  v2[43] = swift_task_alloc();
  sub_1000172F8(&qword_10065C9B0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v2[46] = v7;
  v2[47] = *(void *)(v7 - 8);
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = type metadata accessor for IPA_FailTask();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v2[56] = v8;
  v2[57] = *(void *)(v8 - 8);
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[61] = swift_task_alloc();
  v2[62] = type metadata accessor for InternalError();
  v2[63] = swift_task_alloc();
  return _swift_task_switch(sub_1004B77C4, 0, 0);
}

uint64_t sub_1004B77C4()
{
  uint64_t v159 = v0;
  uint64_t v1 = *(void *)(v0 + 200);
  Swift::String v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  uint64_t v3 = (void *)sub_100312E5C(12, v2);
  swift_release();
  if (!v3)
  {
    uint64_t v4 = *(void *)(v0 + 504);
    swift_storeEnumTagMultiPayload();
    sub_100013D8C((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    sub_1003EDAFC(v4, v5);
    uint64_t v3 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  *(void *)(v0 + 512) = v3;
  uint64_t v6 = *(void *)(v0 + 200);
  if ((*(unsigned char *)(v6 + 88) & 1) == 0)
  {
    uint64_t v7 = *(os_unfair_lock_s **)(v6 + 32);
    swift_retain();
    char v8 = sub_100312CB4(12, v7);
    swift_release();
    if (v8 != 2)
    {
      if (v8)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          goto LABEL_5;
        }
      }
      swift_retain();
      char v21 = sub_100312CE0(7, v7);
      swift_release();
      if (v21 != 2 && (v21 & 1) == 0)
      {
        uint64_t v22 = *(void *)(v0 + 440);
        uint64_t v23 = *(void *)(v0 + 200);
        static Logger.install.getter();
        sub_1004BD0E4(v23, v22);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        BOOL v26 = os_log_type_enabled(v24, v25);
        uint64_t v27 = *(void ***)(v0 + 440);
        if (v26)
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          id v157 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 138412290;
          id v29 = *v27;
          *(void *)(v0 + 184) = *v27;
          id v30 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v157 = v29;
          sub_1004BD148((uint64_t)v27);
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%@] Retrying update after delta package patch failed", v28, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1004BD148(*(void *)(v0 + 440));
        }

        Swift::String v95 = *(uint64_t **)(v0 + 192);
        (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 448));
        sub_1000172F8(&qword_10065DBF0);
        uint64_t v96 = *(void *)(type metadata accessor for AppInstallTaskResult() - 8);
        uint64_t v97 = *(void *)(v96 + 72);
        unint64_t v98 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
        uint64_t v99 = swift_allocObject();
        *(_OWORD *)(v99 + 16) = xmmword_1005A4070;
        uint64_t v100 = (void *)(v99 + v98);
        *uint64_t v100 = *(void *)(v6 + 24);
        swift_storeEnumTagMultiPayload();
        *((unsigned char *)v100 + v97) = 0;
        swift_storeEnumTagMultiPayload();

        uint64_t *v95 = v99;
LABEL_62:
        swift_storeEnumTagMultiPayload();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v143 = *(uint64_t (**)(void))(v0 + 8);
        return v143();
      }
    }
  }
LABEL_5:
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 360);
  uint64_t v12 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  sub_100311ADC(10, v12, v11);
  swift_release();
  unint64_t v156 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v156(v11, 1, v9) == 1)
  {
    sub_10001729C(*(void *)(v0 + 360), &qword_10065C9B0);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 400);
    (*(void (**)(void *, void, void))(*(void *)(v0 + 376) + 32))(v13, *(void *)(v0 + 360), *(void *)(v0 + 368));
    uint64_t v14 = sub_1004E6034(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [v14 error];
      if (v16)
      {
        uint64_t v17 = *(void *)(v0 + 400);
        uint64_t v18 = *(void *)(v0 + 368);
        uint64_t v19 = *(void *)(v0 + 376);

        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      }
      else
      {
        os_log_type_t v150 = v15;
        uint64_t v154 = v6;
        uint64_t v31 = *(void *)(v0 + 432);
        uint64_t v32 = *(void *)(v0 + 392);
        os_log_t v151 = *(os_log_t *)(v0 + 400);
        uint64_t v34 = *(void *)(v0 + 368);
        uint64_t v33 = *(void *)(v0 + 376);
        uint64_t v35 = *(void *)(v0 + 200);
        static Logger.install.getter();
        sub_1004BD0E4(v35, v31);
        (*(void (**)(uint64_t, os_log_t, uint64_t))(v33 + 16))(v32, v151, v34);
        os_log_type_t v36 = v3;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t type = static os_log_type_t.default.getter();
        BOOL v38 = os_log_type_enabled(v37, type);
        uint64_t v39 = *(void *)(v0 + 480);
        uint64_t v41 = *(void *)(v0 + 448);
        uint64_t v40 = *(void *)(v0 + 456);
        char v42 = *(void ***)(v0 + 432);
        uint64_t v43 = *(void *)(v0 + 376);
        uint64_t v148 = *(void *)(v0 + 368);
        uint64_t v149 = *(void *)(v0 + 392);
        if (v38)
        {
          os_log_t v152 = v36;
          uint64_t v44 = swift_slowAlloc();
          id v146 = (void *)swift_slowAlloc();
          uint64_t v158 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 138412802;
          uint64_t v145 = v39;
          os_log_t log = v37;
          uint64_t v45 = *v42;
          *(void *)(v0 + 160) = *v42;
          id v46 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v146 = v45;
          sub_1004BD148((uint64_t)v42);
          *(_WORD *)(v44 + 12) = 2080;
          sub_100013D8C((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 168) = sub_1000143F4(v47, v48, &v158);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v49(v149, v148);
          uint64_t v50 = v49;
          *(_WORD *)(v44 + 22) = 2114;
          *(void *)(v0 + 176) = v152;
          uint64_t v51 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v146[1] = v152;

          _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Failing coordinator \"%s\" with error: %{public}@", (uint8_t *)v44, 0x20u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          os_log_type_t v36 = v152;
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v145, v41);
        }
        else
        {
          sub_1004BD148((uint64_t)v42);
          uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v52(v149, v148);
          uint64_t v50 = v52;

          (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
        }
        uint64_t v53 = *(void *)(v0 + 400);
        uint64_t v54 = *(void *)(v0 + 368);
        if (*(unsigned char *)(v154 + 88)) {
          uint64_t v55 = 3;
        }
        else {
          uint64_t v55 = 1;
        }
        long long v56 = *(os_unfair_lock_s **)(v1 + 16);
        swift_retain();
        char v57 = sub_100312470(21, v56);
        swift_release();
        uint64_t v58 = v36;
        sub_1004E5384(v55, v57 & 1, (uint64_t)v36);

        v50(v53, v54);
      }
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 368));
    }
  }
  uint64_t v59 = *(void *)(v0 + 368);
  uint64_t v60 = *(void *)(v0 + 352);
  unint64_t v61 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  sub_100311ADC(15, v61, v60);
  swift_release();
  if (v156(v60, 1, v59) == 1)
  {
    sub_10001729C(*(void *)(v0 + 352), &qword_10065C9B0);
    uint64_t v62 = *(void *)(v0 + 200);
    sub_1003C5D1C();
    unsigned __int8 v63 = *(os_unfair_lock_s **)(v62 + 16);
    swift_retain();
    uint64_t v64 = sub_100312690(6, v63);
    uint64_t v66 = v65;
    swift_release();
    *(void *)(v0 + 528) = v66;
    if (v66)
    {
      sub_100017238(*(void *)(v0 + 200) + *(int *)(*(void *)(v0 + 408) + 60), *(void *)(v0 + 344), &qword_10065E410);
      uint64_t v67 = swift_task_alloc();
      *(void *)(v0 + 536) = v67;
      *(void *)(v67 + 16) = v64;
      *(void *)(v67 + 24) = v66;
      uint64_t v68 = dword_100660670;
      uint64_t v69 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v69;
      *uint64_t v69 = v0;
      v69[1] = sub_1004B972C;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660670 + v68))((uint64_t)v69, (uint64_t)sub_1004BD1C4, v67);
    }
    uint64_t v73 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
    swift_retain();
    uint64_t v74 = sub_1003122C0(36, v73);
    uint64_t v76 = v75;
    unsigned __int8 v78 = v77;
    int v79 = ~v77;
    swift_release();
    *(void *)(v0 + 560) = v74;
    *(void *)(v0 + 568) = v76;
    *(unsigned char *)(v0 + 792) = v78;
    if (!v79)
    {
LABEL_37:
      uint64_t v82 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
      swift_retain();
      char v83 = sub_100312470(13, v82);
      swift_release();
      if ((v83 & 1) == 0) {
        goto LABEL_57;
      }
      swift_retain();
      sub_100312690(6, v82);
      uint64_t v85 = v84;
      swift_release();
      if (!v85) {
        goto LABEL_57;
      }
      uint64_t v87 = *(void *)(v0 + 296);
      uint64_t v86 = *(void *)(v0 + 304);
      uint64_t v88 = *(void *)(v0 + 288);
      id v89 = [objc_allocWithZone((Class)BAAppStoreClient) init];
      swift_retain();
      sub_100312650(16, v82, v88);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v88, 1, v87) == 1)
      {
        sub_10001729C(*(void *)(v0 + 288), &qword_10065CFF0);
        char v90 = 0;
      }
      else
      {
        uint64_t v102 = *(void *)(v0 + 304);
        uint64_t v101 = *(void *)(v0 + 312);
        uint64_t v103 = *(void *)(v0 + 296);
        (*(void (**)(uint64_t, void, uint64_t))(v102 + 32))(v101, *(void *)(v0 + 288), v103);
        char v90 = AppInstallRequestType.isUserInitiated.getter();
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
      }
      uint64_t v105 = *(void *)(v0 + 272);
      uint64_t v104 = *(void *)(v0 + 280);
      uint64_t v106 = *(void *)(v0 + 264);
      URL.init(fileURLWithPath:)();
      NSString v107 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v108);
      id v110 = v109;
      id v111 = [self descriptorWithAppBundleIdentifier:v107 appBundleURL:v109 event:22 client:0];

      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
      [v111 setAutomaticInstall:(v90 & 1) == 0];
      [v111 setUserInitiated:v90 & 1];
      *(void *)(v0 + 144) = 0;
      unsigned int v112 = [v89 performEventWithDescriptor:v111 error:v0 + 144];
      id v113 = *(void **)(v0 + 144);
      uint64_t v114 = *(void *)(v0 + 200);
      os_log_type_t v115 = v89;
      if (v112)
      {
        uint64_t v155 = v89;
        BOOL v116 = (void *)(v0 + 472);
        uint64_t v117 = *(void *)(v0 + 424);
        id v118 = v113;
        static Logger.install.getter();
        sub_1004BD0E4(v114, v117);
        uint64_t v119 = Logger.logObject.getter();
        os_log_type_t v120 = static os_log_type_t.default.getter();
        BOOL v121 = os_log_type_enabled(v119, v120);
        id v122 = *(void ***)(v0 + 424);
        if (v121)
        {
          id v123 = (uint8_t *)swift_slowAlloc();
          uint64_t v124 = (void *)swift_slowAlloc();
          *(_DWORD *)id v123 = 138412290;
          uint64_t v125 = *v122;
          *(void *)(v0 + 136) = *v122;
          id v126 = v125;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v124 = v125;
          BOOL v116 = (void *)(v0 + 472);
          sub_1004BD148((uint64_t)v122);
          _os_log_impl((void *)&_mh_execute_header, v119, v120, "[%@] Sent install canceled to Background Assets", v123, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1004BD148(*(void *)(v0 + 424));
        }
      }
      else
      {
        BOOL v116 = (void *)(v0 + 464);
        uint64_t v127 = *(void *)(v0 + 416);
        id v128 = v113;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        static Logger.install.getter();
        sub_1004BD0E4(v114, v127);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v119 = Logger.logObject.getter();
        os_log_type_t v129 = static os_log_type_t.error.getter();
        BOOL v130 = os_log_type_enabled(v119, v129);
        id v131 = *(void ***)(v0 + 416);
        if (v130)
        {
          uint64_t v132 = swift_slowAlloc();
          uint64_t v133 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v132 = 138412546;
          uint64_t v153 = v119;
          os_log_type_t v134 = *v131;
          *(void *)(v0 + 152) = *v131;
          id v135 = v134;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v133 = v134;
          sub_1004BD148((uint64_t)v131);
          *(_WORD *)(v132 + 12) = 2114;
          swift_errorRetain();
          uint64_t v136 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 128) = v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v133[1] = v136;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v153, v129, "[%@] Failed to send install canceled to Background Assets: %{public}@", (uint8_t *)v132, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          BOOL v116 = (void *)(v0 + 464);
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
LABEL_56:
          (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*v116, *(void *)(v0 + 448));
LABEL_57:
          unint64_t v137 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
          swift_retain();
          uint64_t v138 = sub_100312690(11, v137);
          uint64_t v140 = v139;
          swift_release();
          *(void *)(v0 + 632) = v140;
          if (v140)
          {
            uint64_t v141 = *(void *)(v0 + 200);
            *(void *)(v0 + 640) = v138;
            uint64_t v142 = *(void *)(v141 + 56);
            *(void *)(v0 + 648) = v142;
            return _swift_task_switch(sub_1004BB308, v142, 0);
          }

          type metadata accessor for AppInstallTaskResult();
          goto LABEL_62;
        }
        swift_errorRelease();
        sub_1004BD148((uint64_t)v131);
        swift_errorRelease();
        swift_errorRelease();
      }

      goto LABEL_56;
    }
    swift_retain();
    unsigned __int8 v80 = sub_100312470(38, v73);
    int v81 = v80;
    *(unsigned char *)(v0 + 793) = v80;
    swift_release();
    if (v81 == 2)
    {
      sub_10018ACA4(v74, v76, v78);
      goto LABEL_37;
    }
    uint64_t v91 = *(void *)(*(void *)(v0 + 200) + 96);
    *(void *)(v0 + 576) = v91;
    uint64_t v92 = swift_task_alloc();
    *(void *)(v0 + 584) = v92;
    *(void *)(v92 + 16) = v74;
    *(void *)(v92 + 24) = v76;
    *(unsigned char *)(v92 + 32) = v78 & 1;
    uint64_t v93 = dword_100660740;
    swift_retain();
    id v94 = (void *)swift_task_alloc();
    *(void *)(v0 + 592) = v94;
    *id v94 = v0;
    v94[1] = sub_1004BA220;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660740 + v93))((uint64_t)v94, (uint64_t)sub_1004BD1A4, v92, v91);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 376) + 32))(*(void *)(v0 + 384), *(void *)(v0 + 352), *(void *)(v0 + 368));
    uint64_t v71 = (void *)swift_task_alloc();
    *(void *)(v0 + 520) = v71;
    *uint64_t v71 = v0;
    v71[1] = sub_1004B8B80;
    uint64_t v72 = *(void *)(v0 + 384);
    return sub_1002B7380(v72);
  }
}

uint64_t sub_1004B8B80()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1004B8CA8, 0, 0);
}

uint64_t sub_1004B8CA8()
{
  (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
  uint64_t v1 = *(void *)(v0 + 200);
  sub_1003C5D1C();
  Swift::String v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  uint64_t v3 = sub_100312690(6, v2);
  uint64_t v5 = v4;
  swift_release();
  *(void *)(v0 + 528) = v5;
  if (v5)
  {
    sub_100017238(*(void *)(v0 + 200) + *(int *)(*(void *)(v0 + 408) + 60), *(void *)(v0 + 344), &qword_10065E410);
    uint64_t v6 = swift_task_alloc();
    *(void *)(v0 + 536) = v6;
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = dword_100660670;
    char v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v8;
    *char v8 = v0;
    v8[1] = sub_1004B972C;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660670 + v7))((uint64_t)v8, (uint64_t)sub_1004BD1C4, v6);
  }
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
  swift_retain();
  uint64_t v11 = sub_1003122C0(36, v10);
  uint64_t v13 = v12;
  unsigned __int8 v15 = v14;
  int v16 = ~v14;
  swift_release();
  *(void *)(v0 + 560) = v11;
  *(void *)(v0 + 568) = v13;
  *(unsigned char *)(v0 + 792) = v15;
  if (!v16)
  {
LABEL_8:
    uint64_t v19 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
    swift_retain();
    char v20 = sub_100312470(13, v19);
    swift_release();
    if ((v20 & 1) == 0 || (swift_retain(), sub_100312690(6, v19), uint64_t v22 = v21, swift_release(), !v22))
    {
LABEL_26:
      uint64_t v68 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
      swift_retain();
      uint64_t v69 = sub_100312690(11, v68);
      uint64_t v71 = v70;
      swift_release();
      *(void *)(v0 + 632) = v71;
      if (v71)
      {
        uint64_t v72 = *(void *)(v0 + 200);
        *(void *)(v0 + 640) = v69;
        uint64_t v73 = *(void *)(v72 + 56);
        *(void *)(v0 + 648) = v73;
        return _swift_task_switch(sub_1004BB308, v73, 0);
      }
      else
      {

        type metadata accessor for AppInstallTaskResult();
        swift_storeEnumTagMultiPayload();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
        return v74();
      }
    }
    uint64_t v24 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 304);
    uint64_t v25 = *(void *)(v0 + 288);
    id v26 = [objc_allocWithZone((Class)BAAppStoreClient) init];
    swift_retain();
    sub_100312650(16, v19, v25);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
    {
      sub_10001729C(*(void *)(v0 + 288), &qword_10065CFF0);
      char v27 = 0;
    }
    else
    {
      uint64_t v33 = *(void *)(v0 + 304);
      uint64_t v32 = *(void *)(v0 + 312);
      uint64_t v34 = *(void *)(v0 + 296);
      (*(void (**)(uint64_t, void, uint64_t))(v33 + 32))(v32, *(void *)(v0 + 288), v34);
      char v27 = AppInstallRequestType.isUserInitiated.getter();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }
    uint64_t v36 = *(void *)(v0 + 272);
    uint64_t v35 = *(void *)(v0 + 280);
    uint64_t v37 = *(void *)(v0 + 264);
    URL.init(fileURLWithPath:)();
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v39);
    uint64_t v41 = v40;
    id v42 = [self descriptorWithAppBundleIdentifier:v38 appBundleURL:v40 event:22 client:0];

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
    [v42 setAutomaticInstall:(v27 & 1) == 0];
    [v42 setUserInitiated:v27 & 1];
    *(void *)(v0 + 144) = 0;
    unsigned int v43 = [v26 performEventWithDescriptor:v42 error:v0 + 144];
    uint64_t v44 = *(void **)(v0 + 144);
    uint64_t v45 = *(void *)(v0 + 200);
    id v46 = v26;
    if (v43)
    {
      uint64_t v76 = v26;
      uint64_t v47 = (void *)(v0 + 472);
      uint64_t v48 = *(void *)(v0 + 424);
      id v49 = v44;
      static Logger.install.getter();
      sub_1004BD0E4(v45, v48);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = *(void ***)(v0 + 424);
      if (v52)
      {
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 138412290;
        long long v56 = *v53;
        *(void *)(v0 + 136) = *v53;
        id v57 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v56;
        uint64_t v47 = (void *)(v0 + 472);
        sub_1004BD148((uint64_t)v53);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "[%@] Sent install canceled to Background Assets", v54, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1004BD148(*(void *)(v0 + 424));
      }
    }
    else
    {
      uint64_t v47 = (void *)(v0 + 464);
      uint64_t v58 = *(void *)(v0 + 416);
      id v59 = v44;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.install.getter();
      sub_1004BD0E4(v45, v58);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      BOOL v61 = os_log_type_enabled(v50, v60);
      uint64_t v62 = *(void ***)(v0 + 416);
      if (v61)
      {
        uint64_t v63 = swift_slowAlloc();
        uint64_t v64 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 138412546;
        os_log_t log = v50;
        uint64_t v65 = *v62;
        *(void *)(v0 + 152) = *v62;
        id v66 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v64 = v65;
        sub_1004BD148((uint64_t)v62);
        *(_WORD *)(v63 + 12) = 2114;
        swift_errorRetain();
        uint64_t v67 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 128) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v64[1] = v67;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v60, "[%@] Failed to send install canceled to Background Assets: %{public}@", (uint8_t *)v63, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v47 = (void *)(v0 + 464);
        swift_slowDealloc();

        swift_errorRelease();
LABEL_25:
        (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*v47, *(void *)(v0 + 448));
        goto LABEL_26;
      }
      swift_errorRelease();
      sub_1004BD148((uint64_t)v62);
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_25;
  }
  swift_retain();
  unsigned __int8 v17 = sub_100312470(38, v10);
  int v18 = v17;
  *(unsigned char *)(v0 + 793) = v17;
  swift_release();
  if (v18 == 2)
  {
    sub_10018ACA4(v11, v13, v15);
    goto LABEL_8;
  }
  uint64_t v28 = *(void *)(*(void *)(v0 + 200) + 96);
  *(void *)(v0 + 576) = v28;
  uint64_t v29 = swift_task_alloc();
  *(void *)(v0 + 584) = v29;
  *(void *)(v29 + 16) = v11;
  *(void *)(v29 + 24) = v13;
  *(unsigned char *)(v29 + 32) = v15 & 1;
  uint64_t v30 = dword_100660740;
  swift_retain();
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v31;
  void *v31 = v0;
  v31[1] = sub_1004BA220;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660740 + v30))((uint64_t)v31, (uint64_t)sub_1004BD1A4, v29, v28);
}

uint64_t sub_1004B972C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  sub_10001729C(*(void *)(v2 + 344), &qword_10065E410);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_1004BCA18;
  }
  else {
    uint64_t v3 = sub_1004B98D4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004B98D4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
  swift_retain();
  uint64_t v2 = sub_1003122C0(36, v1);
  uint64_t v4 = v3;
  unsigned __int8 v6 = v5;
  int v7 = ~v5;
  swift_release();
  *(void *)(v0 + 560) = v2;
  *(void *)(v0 + 568) = v4;
  *(unsigned char *)(v0 + 792) = v6;
  if (!v7)
  {
LABEL_4:
    uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
    swift_retain();
    char v11 = sub_100312470(13, v10);
    swift_release();
    if ((v11 & 1) == 0 || (swift_retain(), sub_100312690(6, v10), uint64_t v13 = v12, swift_release(), !v13))
    {
LABEL_22:
      os_log_type_t v60 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
      swift_retain();
      uint64_t v61 = sub_100312690(11, v60);
      uint64_t v63 = v62;
      swift_release();
      *(void *)(v0 + 632) = v63;
      if (v63)
      {
        uint64_t v64 = *(void *)(v0 + 200);
        *(void *)(v0 + 640) = v61;
        uint64_t v65 = *(void *)(v64 + 56);
        *(void *)(v0 + 648) = v65;
        return _swift_task_switch(sub_1004BB308, v65, 0);
      }
      else
      {

        type metadata accessor for AppInstallTaskResult();
        swift_storeEnumTagMultiPayload();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        id v66 = *(uint64_t (**)(void))(v0 + 8);
        return v66();
      }
    }
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v14 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 288);
    id v17 = [objc_allocWithZone((Class)BAAppStoreClient) init];
    swift_retain();
    sub_100312650(16, v10, v16);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15) == 1)
    {
      sub_10001729C(*(void *)(v0 + 288), &qword_10065CFF0);
      char v18 = 0;
    }
    else
    {
      uint64_t v25 = *(void *)(v0 + 304);
      uint64_t v24 = *(void *)(v0 + 312);
      uint64_t v26 = *(void *)(v0 + 296);
      (*(void (**)(uint64_t, void, uint64_t))(v25 + 32))(v24, *(void *)(v0 + 288), v26);
      char v18 = AppInstallRequestType.isUserInitiated.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    }
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v27 = *(void *)(v0 + 280);
    uint64_t v29 = *(void *)(v0 + 264);
    URL.init(fileURLWithPath:)();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v31);
    uint64_t v33 = v32;
    id v34 = [self descriptorWithAppBundleIdentifier:v30 appBundleURL:v32 event:22 client:0];

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    [v34 setAutomaticInstall:(v18 & 1) == 0];
    [v34 setUserInitiated:v18 & 1];
    *(void *)(v0 + 144) = 0;
    unsigned int v35 = [v17 performEventWithDescriptor:v34 error:v0 + 144];
    uint64_t v36 = *(void **)(v0 + 144);
    uint64_t v37 = *(void *)(v0 + 200);
    NSString v38 = v17;
    if (v35)
    {
      uint64_t v68 = v17;
      uint64_t v39 = (void *)(v0 + 472);
      uint64_t v40 = *(void *)(v0 + 424);
      id v41 = v36;
      static Logger.install.getter();
      sub_1004BD0E4(v37, v40);
      id v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      BOOL v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = *(void ***)(v0 + 424);
      if (v44)
      {
        id v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = (void *)swift_slowAlloc();
        *(_DWORD *)id v46 = 138412290;
        uint64_t v48 = *v45;
        *(void *)(v0 + 136) = *v45;
        id v49 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v47 = v48;
        uint64_t v39 = (void *)(v0 + 472);
        sub_1004BD148((uint64_t)v45);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%@] Sent install canceled to Background Assets", v46, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1004BD148(*(void *)(v0 + 424));
      }
    }
    else
    {
      uint64_t v39 = (void *)(v0 + 464);
      uint64_t v50 = *(void *)(v0 + 416);
      id v51 = v36;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      static Logger.install.getter();
      sub_1004BD0E4(v37, v50);
      swift_errorRetain();
      swift_errorRetain();
      id v42 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v42, v52);
      uint64_t v54 = *(void ***)(v0 + 416);
      if (v53)
      {
        uint64_t v55 = swift_slowAlloc();
        long long v56 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 138412546;
        os_log_t log = v42;
        id v57 = *v54;
        *(void *)(v0 + 152) = *v54;
        id v58 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *long long v56 = v57;
        sub_1004BD148((uint64_t)v54);
        *(_WORD *)(v55 + 12) = 2114;
        swift_errorRetain();
        uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 128) = v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v56[1] = v59;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v52, "[%@] Failed to send install canceled to Background Assets: %{public}@", (uint8_t *)v55, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v39 = (void *)(v0 + 464);
        swift_slowDealloc();

        swift_errorRelease();
LABEL_21:
        (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*v39, *(void *)(v0 + 448));
        goto LABEL_22;
      }
      swift_errorRelease();
      sub_1004BD148((uint64_t)v54);
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_21;
  }
  swift_retain();
  unsigned __int8 v8 = sub_100312470(38, v1);
  int v9 = v8;
  *(unsigned char *)(v0 + 793) = v8;
  swift_release();
  if (v9 == 2)
  {
    sub_10018ACA4(v2, v4, v6);
    goto LABEL_4;
  }
  uint64_t v19 = *(void *)(*(void *)(v0 + 200) + 96);
  *(void *)(v0 + 576) = v19;
  uint64_t v20 = swift_task_alloc();
  *(void *)(v0 + 584) = v20;
  *(void *)(v20 + 16) = v2;
  *(void *)(v20 + 24) = v4;
  *(unsigned char *)(v20 + 32) = v6 & 1;
  uint64_t v21 = dword_100660740;
  swift_retain();
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1004BA220;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100660740 + v21))((uint64_t)v22, (uint64_t)sub_1004BD1A4, v20, v19);
}

uint64_t sub_1004BA220()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10018ACA4(*(void *)(v2 + 560), *(void *)(v2 + 568), *(unsigned char *)(v2 + 792));
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = sub_1004BCBF8;
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = sub_1004BA3C8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004BA3C8()
{
  if (*(unsigned char *)(v0 + 792))
  {
    uint64_t v1 = &type metadata for WebDistributor;
    unint64_t v2 = sub_1002BEA38();
  }
  else
  {
    uint64_t v1 = &type metadata for NativeDistributor;
    unint64_t v2 = sub_1002F9EF8();
  }
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v38 = *(void *)(v0 + 200);
  char v39 = *(unsigned char *)(v0 + 793) & 1;
  *(void *)(v0 + 80) = v1;
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 56) = v4;
  *(void *)(v0 + 64) = v3;
  sub_10018B164((long long *)(v0 + 56), v0 + 16);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_10018AC60((void *)(v0 + 16), v6);
  int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  sub_1001C617C();
  uint64_t v8 = v7(v6, v5);
  uint64_t v10 = v9;
  sub_100014524(v0 + 16);
  if (*(unsigned char *)(v38 + 88)) {
    unsigned __int8 v11 = 2;
  }
  else {
    unsigned __int8 v11 = 1;
  }
  sub_10047F370(v11, v8, v10, v39);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(os_unfair_lock_s **)(v38 + 16);
  swift_retain();
  uint64_t v13 = sub_100312690(2, v12);
  unint64_t v15 = v14;
  swift_release();
  if (!v15 || (unint64_t v16 = sub_1004CF960(v13, v15), (v17 & 1) != 0))
  {
    char v28 = *(unsigned char *)(v0 + 792);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v30 = *(void *)(v29 + 80);
    uint64_t v31 = *(os_unfair_lock_s **)(v29 + 16);
    swift_retain();
    uint64_t v32 = sub_100312690(6, v31);
    uint64_t v34 = v33;
    swift_release();
    *(void *)(v0 + 616) = v34;
    unsigned int v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 624) = v35;
    void *v35 = v0;
    v35[1] = sub_1004BA998;
    uint64_t v36 = *(void *)(v0 + 568);
    uint64_t v37 = *(void *)(v0 + 560);
    return sub_10056C26C(v37, v36, v28 & 1, v30, v32, v34);
  }
  else
  {
    uint64_t v18 = v16;
    char v19 = *(unsigned char *)(v0 + 792);
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v21 = *(void *)(*(void *)(v0 + 200) + 80);
    id v22 = *(id *)(v0 + 512);
    sub_100501394(v20);

    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 608) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_1004BA6F0;
    uint64_t v24 = *(void *)(v0 + 568);
    uint64_t v25 = *(void *)(v0 + 560);
    uint64_t v26 = *(void *)(v0 + 336);
    return sub_10056DDE8(v25, v24, v19 & 1, v21, v18, 0, 0, v26);
  }
}

uint64_t sub_1004BA6F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  uint64_t v2 = *(void *)(*(void *)v0 + 328);
  uint64_t v3 = *(void *)(*(void *)v0 + 320);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1004BA874, 0, 0);
}

uint64_t sub_1004BA874()
{
  char v1 = *(unsigned char *)(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v2 + 80);
  uint64_t v4 = *(os_unfair_lock_s **)(v2 + 16);
  swift_retain();
  uint64_t v5 = sub_100312690(6, v4);
  uint64_t v7 = v6;
  swift_release();
  *(void *)(v0 + 616) = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 624) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1004BA998;
  uint64_t v9 = *(void *)(v0 + 568);
  uint64_t v10 = *(void *)(v0 + 560);
  return sub_10056C26C(v10, v9, v1 & 1, v3, v5, v7);
}

uint64_t sub_1004BA998()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 568);
  uint64_t v2 = *(void *)(*(void *)v0 + 560);
  unsigned __int8 v3 = *(unsigned char *)(*(void *)v0 + 792);
  swift_task_dealloc();
  sub_10018ACA4(v2, v1, v3);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1004BAB28, 0, 0);
}

uint64_t sub_1004BAB28()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
  swift_retain();
  char v2 = sub_100312470(13, v1);
  swift_release();
  if (v2)
  {
    swift_retain();
    sub_100312690(6, v1);
    uint64_t v4 = v3;
    swift_release();
    if (v4)
    {
      uint64_t v6 = *(void *)(v0 + 296);
      uint64_t v5 = *(void *)(v0 + 304);
      uint64_t v7 = *(void *)(v0 + 288);
      id v8 = [objc_allocWithZone((Class)BAAppStoreClient) init];
      swift_retain();
      sub_100312650(16, v1, v7);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) == 1)
      {
        sub_10001729C(*(void *)(v0 + 288), &qword_10065CFF0);
        char v9 = 0;
      }
      else
      {
        uint64_t v11 = *(void *)(v0 + 304);
        uint64_t v10 = *(void *)(v0 + 312);
        uint64_t v12 = *(void *)(v0 + 296);
        (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v10, *(void *)(v0 + 288), v12);
        char v9 = AppInstallRequestType.isUserInitiated.getter();
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      }
      uint64_t v14 = *(void *)(v0 + 272);
      uint64_t v13 = *(void *)(v0 + 280);
      uint64_t v15 = *(void *)(v0 + 264);
      URL.init(fileURLWithPath:)();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v17);
      char v19 = v18;
      id v20 = [self descriptorWithAppBundleIdentifier:v16 appBundleURL:v18 event:22 client:0];

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      [v20 setAutomaticInstall:(v9 & 1) == 0];
      [v20 setUserInitiated:v9 & 1];
      *(void *)(v0 + 144) = 0;
      unsigned int v21 = [v8 performEventWithDescriptor:v20 error:v0 + 144];
      id v22 = *(void **)(v0 + 144);
      uint64_t v23 = *(void *)(v0 + 200);
      uint64_t v24 = v8;
      if (v21)
      {
        uint64_t v55 = v8;
        uint64_t v25 = (void *)(v0 + 472);
        uint64_t v26 = *(void *)(v0 + 424);
        id v27 = v22;
        static Logger.install.getter();
        sub_1004BD0E4(v23, v26);
        char v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = os_log_type_enabled(v28, v29);
        uint64_t v31 = *(void ***)(v0 + 424);
        if (v30)
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v33 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 138412290;
          uint64_t v34 = *v31;
          *(void *)(v0 + 136) = *v31;
          id v35 = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v33 = v34;
          uint64_t v25 = (void *)(v0 + 472);
          sub_1004BD148((uint64_t)v31);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%@] Sent install canceled to Background Assets", v32, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1004BD148(*(void *)(v0 + 424));
        }
      }
      else
      {
        uint64_t v25 = (void *)(v0 + 464);
        uint64_t v36 = *(void *)(v0 + 416);
        id v37 = v22;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        static Logger.install.getter();
        sub_1004BD0E4(v23, v36);
        swift_errorRetain();
        swift_errorRetain();
        char v28 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        BOOL v39 = os_log_type_enabled(v28, v38);
        uint64_t v40 = *(void ***)(v0 + 416);
        if (v39)
        {
          uint64_t v41 = swift_slowAlloc();
          id v42 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 138412546;
          os_log_t log = v28;
          os_log_type_t v43 = *v40;
          *(void *)(v0 + 152) = *v40;
          id v44 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v42 = v43;
          sub_1004BD148((uint64_t)v40);
          *(_WORD *)(v41 + 12) = 2114;
          swift_errorRetain();
          uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 128) = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v42[1] = v45;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v38, "[%@] Failed to send install canceled to Background Assets: %{public}@", (uint8_t *)v41, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v25 = (void *)(v0 + 464);
          swift_slowDealloc();

          swift_errorRelease();
LABEL_15:
          (*(void (**)(void, void))(*(void *)(v0 + 456) + 8))(*v25, *(void *)(v0 + 448));
          goto LABEL_16;
        }
        swift_errorRelease();
        sub_1004BD148((uint64_t)v40);
        swift_errorRelease();
        swift_errorRelease();
      }

      goto LABEL_15;
    }
  }
LABEL_16:
  id v46 = *(os_unfair_lock_s **)(*(void *)(v0 + 200) + 16);
  swift_retain();
  uint64_t v47 = sub_100312690(11, v46);
  uint64_t v49 = v48;
  swift_release();
  *(void *)(v0 + 632) = v49;
  if (v49)
  {
    uint64_t v50 = *(void *)(v0 + 200);
    *(void *)(v0 + 640) = v47;
    uint64_t v51 = *(void *)(v50 + 56);
    *(void *)(v0 + 648) = v51;
    return _swift_task_switch(sub_1004BB308, v51, 0);
  }
  else
  {

    type metadata accessor for AppInstallTaskResult();
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v52 = *(uint64_t (**)(void))(v0 + 8);
    return v52();
  }
}

uint64_t sub_1004BB308()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = *(void *)(v0[81] + 112);
  v0[82] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[83] = v4;
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_task_alloc();
  v0[84] = v5;
  *(void *)(v5 + 16) = sub_10023CA38;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = dword_100660660;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[85] = v7;
  void *v7 = v0;
  v7[1] = sub_1004BB450;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100660660 + v6))((uint64_t)sub_1001C3EFC, v5, v3);
}

uint64_t sub_1004BB450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *v3;
  *(void *)(v5 + 688) = a2;
  *(void *)(v5 + 696) = v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 648);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v2) {
    uint64_t v7 = sub_1004BBA3C;
  }
  else {
    uint64_t v7 = sub_1004BB608;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004BB608()
{
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1004BB69C, 0, 0);
}

uint64_t sub_1004BB69C()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[86];
  uint64_t v2 = *(void *)(v0[25] + 64);
  v0[88] = v2;
  swift_retain();
  uint64_t v3 = sub_100311910(5, v1);
  uint64_t v5 = v4;
  swift_release();
  v0[89] = v5;
  if (!v5) {
    __break(1u);
  }
  v0[90] = v3;
  return _swift_task_switch(sub_1004BB77C, v2, 0);
}

uint64_t sub_1004BB77C()
{
  uint64_t v1 = v0[90];
  uint64_t v2 = v0[89];
  uint64_t v3 = swift_task_alloc();
  v0[91] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = swift_task_alloc();
  v0[92] = v4;
  *(void *)(v4 + 16) = sub_1001C3F18;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = dword_100660820;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[93] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1004BB8B8;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100660820 + v5))((uint64_t)sub_1004BD0C8, v4);
}

uint64_t sub_1004BB8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[94] = a2;
  v4[95] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[88];
    uint64_t v6 = sub_1004BC344;
  }
  else
  {
    uint64_t v7 = v4[88];
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = sub_1004BBCD0;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004BBA3C()
{
  swift_errorRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1004BBADC, 0, 0);
}

uint64_t sub_1004BBADC()
{
  type metadata accessor for AppInstallTaskResult();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BBCD0()
{
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1004BBD64, 0, 0);
}

uint64_t sub_1004BBD64()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 752);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v4 = *(void *)(v0 + 216);
    swift_retain();
    sub_100311C88(2, v1, v4);
    swift_release();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 232);
    (*(void (**)(void, void, uint64_t))(v8 + 32))(*(void *)(v0 + 256), *(void *)(v0 + 216), v7);
    uint64_t v9 = enum case for ManagedAppStatus.State.failed(_:);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v6, enum case for ManagedAppStatus.State.failed(_:), v7);
    sub_100013D8C(&qword_10065CF30, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.State);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v11 = *(void *)(v0 + 248);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = *(void *)(v0 + 232);
    if (*(void *)(v0 + 96) == *(void *)(v0 + 112) && *(void *)(v0 + 104) == *(void *)(v0 + 120))
    {
      swift_bridgeObjectRelease_n();
      swift_release();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v14(v11, v12);
      v14(v10, v12);
LABEL_8:

      swift_release();
      type metadata accessor for AppInstallTaskResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v17 = *(uint64_t (**)(void))(v0 + 8);
      return v17();
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    NSString v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v11, v12);
    v16(v10, v12);
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = enum case for ManagedAppStatus.State.failed(_:);
  }
  uint64_t v18 = *(os_unfair_lock_s **)(v0 + 688);
  uint64_t v19 = *(void *)(v0 + 208);
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 232) + 104))(*(void *)(v0 + 240), v9, *(void *)(v0 + 224));
  uint64_t v20 = enum case for ManagedAppStatus.Reason.installFailed(_:);
  uint64_t v21 = type metadata accessor for ManagedAppStatus.Reason();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104))(v19, v20, v21);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  swift_retain();
  uint64_t v23 = sub_100311910(4, v18);
  uint64_t v25 = v24;
  uint64_t result = swift_release();
  *(void *)(v0 + 768) = v25;
  if (!v25)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v26 = *(os_unfair_lock_s **)(v0 + 688);
  swift_retain();
  char v27 = sub_100311928(9, v26);
  swift_release();
  char v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 776) = v28;
  *char v28 = v0;
  if (v27 == 2)
  {
    v28[1] = sub_1004BD1F8;
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v31 = v23;
    uint64_t v32 = v25;
    char v33 = 0;
  }
  else
  {
    v28[1] = sub_1004BC650;
    uint64_t v29 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 240);
    uint64_t v31 = v23;
    uint64_t v32 = v25;
    char v33 = v27;
  }
  return sub_10023FB0C(v30, v29, v31, v32, v33);
}

uint64_t sub_1004BC344()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004BC404, 0, 0);
}

uint64_t sub_1004BC404()
{
  uint64_t v1 = (os_unfair_lock_s *)v0[86];
  uint64_t v2 = v0[26];
  (*(void (**)(void, void, void))(v0[29] + 104))(v0[30], enum case for ManagedAppStatus.State.failed(_:), v0[28]);
  uint64_t v3 = enum case for ManagedAppStatus.Reason.installFailed(_:);
  uint64_t v4 = type metadata accessor for ManagedAppStatus.Reason();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 104))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  swift_retain();
  uint64_t v6 = sub_100311910(4, v1);
  uint64_t v8 = v7;
  swift_release();
  v0[96] = v8;
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = (os_unfair_lock_s *)v0[86];
  swift_retain();
  char v10 = sub_100311928(9, v9);
  swift_release();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[97] = v11;
  *uint64_t v11 = v0;
  if (v10 == 2)
  {
    v11[1] = sub_1004BD1F8;
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[30];
    uint64_t v14 = v6;
    uint64_t v15 = v8;
    char v16 = 0;
  }
  else
  {
    v11[1] = sub_1004BC650;
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[30];
    uint64_t v14 = v6;
    uint64_t v15 = v8;
    char v16 = v10;
  }
  return sub_10023FB0C(v13, v12, v14, v15, v16);
}

uint64_t sub_1004BC650()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v2[98] = v0;
    uint64_t v4 = v2[29];
    uint64_t v3 = v2[30];
    uint64_t v5 = v2[28];
    uint64_t v6 = v2[26];
    swift_bridgeObjectRelease();
    sub_10001729C(v6, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = sub_1004BCDD8;
  }
  else
  {
    uint64_t v9 = v2[29];
    uint64_t v8 = v2[30];
    uint64_t v10 = v2[28];
    uint64_t v11 = v2[26];
    swift_bridgeObjectRelease();
    sub_10001729C(v11, &qword_10065E4D0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v7 = sub_1004BC818;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004BC818()
{
  swift_release();
  type metadata accessor for AppInstallTaskResult();
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BCA18()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BCBF8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BCDD8()
{
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BCFC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    uint64_t v6 = &type metadata for WebDistributor;
    unint64_t v7 = sub_1002BEA38();
  }
  else
  {
    uint64_t v6 = &type metadata for NativeDistributor;
    unint64_t v7 = sub_1002F9EF8();
  }
  uint64_t v15 = v6;
  unint64_t v16 = v7;
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  sub_10018B164(&v14, (uint64_t)v17);
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  sub_10018AC60(v17, v18);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 40);
  sub_1001C617C();
  uint64_t v11 = v10(v8, v9);
  sub_1003B7E98(v11, v12);
  swift_bridgeObjectRelease();
  return sub_100014524((uint64_t)v17);
}

uint64_t sub_1004BD0B0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return sub_1004B6CDC(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1004BD0C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001BD4A0(a1, *(uint64_t (**)(void))(v2 + 16), a2);
}

uint64_t sub_1004BD0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IPA_FailTask();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BD148(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IPA_FailTask();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004BD1A4(uint64_t a1)
{
  return sub_1004BCFC0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

void sub_1004BD1C4()
{
  sub_10043AF3C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004BD1F8()
{
  return sub_1004BC650();
}

uint64_t sub_1004BD26C(void *a1)
{
  return sub_1004BD380(a1);
}

uint64_t sub_1004BD284@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004BD578(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004BD2B0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

Swift::Int sub_1004BD2F4()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1004BD33C()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1004BD380(void *a1)
{
  uint64_t v2 = *v1;
  sub_10018AC60(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  uint64_t v6 = v2;
  dispatch thunk of CustomStringConvertible.description.getter();
  sub_100239C90((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return sub_100014524((uint64_t)v4);
}

uint64_t sub_1004BD448@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004BDC48(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

BOOL sub_1004BD474(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1004BD488(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1004BD49C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1004BD4B0(void *a1, void *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1004BD4C8()
{
  unint64_t result = qword_100664FE0;
  if (!qword_100664FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664FE0);
  }
  return result;
}

unint64_t sub_1004BD520()
{
  unint64_t result = qword_100664FE8;
  if (!qword_100664FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100664FE8);
  }
  return result;
}

uint64_t sub_1004BD578(void *a1)
{
  uint64_t v3 = a1[3];
  sub_10018AC60(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
    return v3;
  }
  sub_10018AC60(v32, v32[3]);
  uint64_t v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  uint64_t v8 = HIBYTE(v5) & 0xF;
  uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x2000000000000000) != 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10) {
    goto LABEL_66;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v3 = sub_1004D1D90(v4, v7, 10);
    char v13 = v28;
    goto LABEL_41;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    uint64_t v30 = v4;
    uint64_t v31 = v7 & 0xFFFFFFFFFFFFFFLL;
    if (v4 == 43)
    {
      if (v8)
      {
        if (v8 != 1 && (BYTE1(v4) - 48) <= 9u)
        {
          uint64_t v3 = (BYTE1(v4) - 48);
          if (v8 == 2) {
            goto LABEL_40;
          }
          if ((BYTE2(v4) - 48) <= 9u)
          {
            uint64_t v3 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
            uint64_t v17 = v8 - 3;
            if (v17)
            {
              uint64_t v18 = (unsigned __int8 *)&v30 + 3;
              while (1)
              {
                unsigned int v19 = *v18 - 48;
                if (v19 > 9) {
                  goto LABEL_37;
                }
                if (!is_mul_ok(v3, 0xAuLL)) {
                  goto LABEL_37;
                }
                BOOL v15 = __CFADD__(10 * v3, v19);
                uint64_t v3 = 10 * v3 + v19;
                if (v15) {
                  goto LABEL_37;
                }
                char v13 = 0;
                ++v18;
                if (!--v17) {
                  goto LABEL_41;
                }
              }
            }
            goto LABEL_40;
          }
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (v4 != 45)
      {
        if (v8 && (v4 - 48) <= 9u)
        {
          uint64_t v3 = (v4 - 48);
          if (v8 == 1) {
            goto LABEL_40;
          }
          if ((BYTE1(v4) - 48) <= 9u)
          {
            uint64_t v3 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
            uint64_t v20 = v8 - 2;
            if (v20)
            {
              uint64_t v21 = (unsigned __int8 *)&v30 + 2;
              while (1)
              {
                unsigned int v22 = *v21 - 48;
                if (v22 > 9) {
                  goto LABEL_37;
                }
                if (!is_mul_ok(v3, 0xAuLL)) {
                  goto LABEL_37;
                }
                BOOL v15 = __CFADD__(10 * v3, v22);
                uint64_t v3 = 10 * v3 + v22;
                if (v15) {
                  goto LABEL_37;
                }
                char v13 = 0;
                ++v21;
                if (!--v20) {
                  goto LABEL_41;
                }
              }
            }
            goto LABEL_40;
          }
        }
LABEL_37:
        uint64_t v3 = 0;
LABEL_38:
        char v13 = 1;
        goto LABEL_41;
      }
      if (v8)
      {
        if (v8 != 1)
        {
          unsigned __int8 v14 = BYTE1(v4) - 48;
          if ((BYTE1(v4) - 48) <= 9u)
          {
            uint64_t v3 = 0;
            BOOL v15 = v14 == 0;
            unint64_t v16 = -(uint64_t)v14;
            if (!v15) {
              goto LABEL_38;
            }
            if (v8 == 2)
            {
              char v13 = 0;
              uint64_t v3 = v16;
              goto LABEL_41;
            }
            unsigned __int8 v23 = BYTE2(v4) - 48;
            if ((BYTE2(v4) - 48) <= 9u && is_mul_ok(v16, 0xAuLL))
            {
              unint64_t v24 = 10 * v16;
              uint64_t v3 = v24 - v23;
              if (v24 >= v23)
              {
                uint64_t v25 = v8 - 3;
                if (v25)
                {
                  uint64_t v26 = (unsigned __int8 *)&v30 + 3;
                  while (1)
                  {
                    unsigned int v27 = *v26 - 48;
                    if (v27 > 9) {
                      goto LABEL_37;
                    }
                    if (!is_mul_ok(v3, 0xAuLL)) {
                      goto LABEL_37;
                    }
                    BOOL v15 = 10 * v3 >= (unint64_t)v27;
                    uint64_t v3 = 10 * v3 - v27;
                    if (!v15) {
                      goto LABEL_37;
                    }
                    char v13 = 0;
                    ++v26;
                    if (!--v25) {
                      goto LABEL_41;
                    }
                  }
                }
LABEL_40:
                char v13 = 0;
                goto LABEL_41;
              }
            }
          }
        }
        goto LABEL_37;
      }
      __break(1u);
    }
    __break(1u);
LABEL_66:
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if ((v4 & 0x1000000000000000) != 0) {
    uint64_t v11 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t v3 = (uint64_t)sub_1004D1D78(v11, v9, 10);
  char v13 = v12 & 1;
LABEL_41:
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    sub_100014524((uint64_t)v32);
    sub_100014524((uint64_t)a1);
    return v3;
  }
LABEL_67:
  uint64_t v30 = 0x203A4F444F54;
  uint64_t v31 = 0xE600000000000000;
  v29._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004BD95C(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v7 = (unint64_t)sub_1004D1D78(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v25[0] = result;
    v25[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_63;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_33;
      }
      unint64_t v7 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_33;
        }
        unint64_t v7 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v13 = v3 - 3;
        if (v13)
        {
          unsigned __int8 v14 = (unsigned __int8 *)v25 + 3;
          while (1)
          {
            unsigned int v15 = *v14 - 48;
            if (v15 > 9) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v7, 0xAuLL)) {
              goto LABEL_33;
            }
            BOOL v11 = __CFADD__(10 * v7, v15);
            unint64_t v7 = 10 * v7 + v15;
            if (v11) {
              goto LABEL_33;
            }
            char v9 = 0;
            ++v14;
            if (!--v13) {
              goto LABEL_37;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1)
          {
            unsigned __int8 v10 = BYTE1(result) - 48;
            if ((BYTE1(result) - 48) <= 9u)
            {
              unint64_t v7 = 0;
              BOOL v11 = v10 == 0;
              unint64_t v12 = -(uint64_t)v10;
              if (!v11) {
                goto LABEL_34;
              }
              if (v3 == 2)
              {
                char v9 = 0;
                unint64_t v7 = v12;
                goto LABEL_37;
              }
              unsigned __int8 v19 = BYTE2(result) - 48;
              if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v12, 0xAuLL))
              {
                unint64_t v20 = 10 * v12;
                unint64_t v7 = v20 - v19;
                if (v20 >= v19)
                {
                  uint64_t v21 = v3 - 3;
                  if (v21)
                  {
                    unsigned int v22 = (unsigned __int8 *)v25 + 3;
                    while (1)
                    {
                      unsigned int v23 = *v22 - 48;
                      if (v23 > 9) {
                        goto LABEL_33;
                      }
                      if (!is_mul_ok(v7, 0xAuLL)) {
                        goto LABEL_33;
                      }
                      BOOL v11 = 10 * v7 >= v23;
                      unint64_t v7 = 10 * v7 - v23;
                      if (!v11) {
                        goto LABEL_33;
                      }
                      char v9 = 0;
                      ++v22;
                      if (!--v21) {
                        goto LABEL_37;
                      }
                    }
                  }
                  goto LABEL_36;
                }
              }
            }
          }
LABEL_33:
          unint64_t v7 = 0;
LABEL_34:
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_63:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_33;
      }
      unint64_t v7 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_33;
        }
        unint64_t v7 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v16 = v3 - 2;
        if (v16)
        {
          uint64_t v17 = (unsigned __int8 *)v25 + 2;
          while (1)
          {
            unsigned int v18 = *v17 - 48;
            if (v18 > 9) {
              goto LABEL_33;
            }
            if (!is_mul_ok(v7, 0xAuLL)) {
              goto LABEL_33;
            }
            BOOL v11 = __CFADD__(10 * v7, v18);
            unint64_t v7 = 10 * v7 + v18;
            if (v11) {
              goto LABEL_33;
            }
            char v9 = 0;
            ++v17;
            if (!--v16) {
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  unint64_t v7 = sub_1004D1D90(result, a2, 10);
  char v9 = v24;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_1004BDC48(void *a1)
{
  uint64_t v3 = a1[3];
  sub_10018AC60(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_10018AC60(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    sub_100014524((uint64_t)v5);
    sub_100014524((uint64_t)a1);
  }
  return v3;
}

ValueMetadata *type metadata accessor for AppleItemID()
{
  return &type metadata for AppleItemID;
}

ValueMetadata *type metadata accessor for AppleVersionID()
{
  return &type metadata for AppleVersionID;
}

uint64_t sub_1004BE090()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 72);
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1004BE200;
  }
  else {
    uint64_t v5 = sub_1004BE270;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004BE200()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BE270()
{
  uint64_t v17 = v0;
  static Logger.general.getter();
  swift_unknownObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 33554946;
    *(_WORD *)(v0 + 104) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 6) = 2080;
    swift_unknownObjectRetain();
    if (os_transaction_get_description())
    {
      uint64_t v5 = String.init(cString:)();
      unint64_t v7 = v6;
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v5 = 0;
      unint64_t v7 = 0xE000000000000000;
    }
    uint64_t v11 = *(void *)(v0 + 48);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 56);
    *(void *)(v0 + 16) = sub_1000143F4(v5, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[TXN%hx] 🐏 Releasing transaction (%s)", (uint8_t *)v4, 0x10u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v14);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 40);
    swift_unknownObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1004BE4D4()
{
  os_log_type_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1004BE690, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1004BE690()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004BE6FC()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004BE73C(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = a2;
  uint64_t v3 = type metadata accessor for EvaluatorDownload();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v109 = (uint64_t)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v98 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v98 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v98 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v111 = (uint64_t)v98 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unsigned __int8 v19 = (char *)v98 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unsigned int v22 = (char *)v98 - v21;
  __chkstk_darwin(v20);
  char v24 = (char *)v98 - v23;
  uint64_t v114 = type metadata accessor for Logger();
  uint64_t v25 = __chkstk_darwin(v114);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v27 = __chkstk_darwin(v26);
  __chkstk_darwin(v27);
  uint64_t v29 = __chkstk_darwin((char *)v98 - v28);
  uint64_t v31 = (char *)v98 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  os_log_type_t v38 = (char *)v98 - v37;
  unsigned int v112 = (int *)v3;
  if (*(unsigned char *)(a1 + *(int *)(v3 + 36)))
  {
    uint64_t v113 = v33;
    static Logger.download.getter();
    sub_1004C0218(a1, (uint64_t)v24);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      id v57 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 138412290;
      id v58 = *(void **)&v24[v112[8]];
      *(void *)&v115[0] = v58;
      id v59 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v57 = v58;
      sub_1004C027C((uint64_t)v24);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "[%@] Implicitly denied low data - automatic downloads are disabled", v56, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004C027C((uint64_t)v24);
    }

    (*(void (**)(char *, uint64_t))(v113 + 8))(v38, v114);
    return 0;
  }
  uint64_t v39 = v33;
  uint64_t v106 = v32;
  uint64_t v107 = v36;
  uint64_t v103 = v14;
  uint64_t v104 = v35;
  uint64_t v108 = v34;
  uint64_t v105 = v11;
  uint64_t v102 = v8;
  static Logger.download.getter();
  sub_1004C0218(a1, (uint64_t)v22);
  sub_1004C0218(a1, (uint64_t)v19);
  uint64_t v40 = v111;
  sub_1004C0218(a1, v111);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  int v43 = v42;
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v44 = swift_slowAlloc();
    int v99 = v43;
    uint64_t v45 = v44;
    id v46 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 138412802;
    v98[1] = v45 + 4;
    uint64_t v47 = v112[8];
    uint64_t v113 = v39;
    uint64_t v48 = *(void **)&v22[v47];
    uint64_t v101 = v41;
    uint64_t v100 = a1;
    uint64_t v49 = v112;
    *(void *)&v115[0] = v48;
    id v50 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v46 = v48;
    sub_1004C027C((uint64_t)v22);
    *(_WORD *)(v45 + 12) = 2048;
    uint64_t v51 = *(void *)&v19[v49[6]];
    uint64_t v52 = (uint64_t)v19;
    BOOL v53 = v49;
    a1 = v100;
    sub_1004C027C(v52);
    *(void *)&v115[0] = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 22) = 1024;
    LODWORD(v51) = *(unsigned char *)(v40 + v53[9]) & 1;
    sub_1004C027C(v40);
    LODWORD(v115[0]) = v51;
    uint64_t v39 = v113;
    uint64_t v41 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v99, "[%@] Evaluating download, size = %{iec-bytes}ld automatic = %{BOOL}d", (uint8_t *)v45, 0x1Cu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1004C027C(v40);
    sub_1004C027C((uint64_t)v19);
    sub_1004C027C((uint64_t)v22);
    BOOL v53 = v112;
  }
  uint64_t v60 = v110;

  uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  uint64_t v61 = v39 + 8;
  uint64_t v62 = v63;
  v63((uint64_t)v31, v114);
  if (*(void *)(v60 + 16) && (unint64_t v64 = sub_100016D20(0xD000000000000016, 0x80000001005BA690), (v65 & 1) != 0)) {
    sub_1000144C8(*(void *)(v60 + 56) + 32 * v64, (uint64_t)v115);
  }
  else {
    memset(v115, 0, sizeof(v115));
  }
  sub_1000172F8((uint64_t *)&unk_10065C9C0);
  if (swift_dynamicCast())
  {
    if ((v116 & 0x8000000000000000) != 0)
    {
      uint64_t v113 = v61;
      static Logger.download.getter();
      uint64_t v89 = (uint64_t)v103;
      sub_1004C0218(a1, (uint64_t)v103);
      char v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        uint64_t v93 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v92 = 138412290;
        id v94 = *(void **)(v89 + v53[8]);
        *(void *)&v115[0] = v94;
        id v95 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v93 = v94;
        sub_1004C027C(v89);
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "[%@] Implicitly allowed low data - threshold disabled", v92, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1004C027C(v89);
      }

      uint64_t v97 = v106;
      goto LABEL_36;
    }
    uint64_t v66 = *(void *)(a1 + v53[6]);
    if (v66 > 0)
    {
      if (v116 >= v66)
      {
        uint64_t v113 = v61;
        static Logger.download.getter();
        uint64_t v67 = (uint64_t)v102;
        sub_1004C0218(a1, (uint64_t)v102);
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          uint64_t v71 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 138412290;
          uint64_t v72 = *(void **)(v67 + v53[8]);
          *(void *)&v115[0] = v72;
          id v73 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v71 = v72;
          sub_1004C027C(v67);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "[%@] Implicitly allowed low data - threshold applies", v70, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1004C027C(v67);
        }

        uint64_t v97 = v104;
LABEL_36:
        v62(v97, v114);
        return 1;
      }
      goto LABEL_20;
    }
LABEL_22:
    static Logger.download.getter();
    uint64_t v81 = (uint64_t)v105;
    sub_1004C0218(a1, (uint64_t)v105);
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = swift_slowAlloc();
      uint64_t v113 = v61;
      uint64_t v85 = (uint8_t *)v84;
      uint64_t v86 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 138412290;
      uint64_t v87 = *(void **)(v81 + v53[8]);
      *(void *)&v115[0] = v87;
      id v88 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v86 = v87;
      sub_1004C027C(v81);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "[%@] Implicitly denied low data - download size is unavailable", v85, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004C027C(v81);
    }

    v62(v107, v114);
    return 0;
  }
  if (*(uint64_t *)(a1 + v53[6]) <= 0) {
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v113 = v61;
  static Logger.download.getter();
  sub_1004C0218(a1, v109);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = v109;
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    unsigned __int8 v78 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 138412290;
    int v79 = *(void **)(v76 + v53[8]);
    *(void *)&v115[0] = v79;
    id v80 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned __int8 v78 = v79;
    sub_1004C027C(v76);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "[%@] Implicitly denied low data - over threshold, or threshold unavailable", v77, 0xCu);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1004C027C(v109);
  }

  v62(v108, v114);
  return 0;
}

uint64_t sub_1004BF2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  v3[14] = type metadata accessor for EvaluatorDownload();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_1004BF43C, 0, 0);
}

uint64_t sub_1004BF43C()
{
  uint64_t v63 = v0;
  __int16 v1 = sub_1004BE73C(*(void *)(v0 + 88), *(void *)(v0 + 104));
  *(unsigned char *)(v0 + 234) = v1 & 1;
  *(unsigned char *)(v0 + 235) = HIBYTE(v1) & 1;
  if ((v1 & 0x101) == 0)
  {
    uint64_t v2 = *(void *)(v0 + 88);
    char v3 = *(unsigned char *)(v2 + *(int *)(*(void *)(v0 + 112) + 36));
    if (v3)
    {
      uint64_t v11 = *(void *)(v0 + 152);
      static Logger.download.getter();
      sub_1004C0218(v2, v11);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      uint64_t v15 = *(void *)(v0 + 152);
      if (v14)
      {
        uint64_t v16 = *(void *)(v0 + 112);
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        unsigned __int8 v19 = *(void **)(v15 + *(int *)(v16 + 32));
        *(void *)(v0 + 64) = v19;
        id v20 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v18 = v19;
        sub_1004C027C(v15);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Requires unconstrained network, but not prompting for automatic download.", v17, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1004C027C(*(void *)(v0 + 152));
      }

      uint64_t v31 = *(void *)(v0 + 208);
    }
    else
    {
      if (NWPath.isConstrained.getter())
      {
        uint64_t v4 = *(void *)(v0 + 112);
        uint64_t v5 = *(void *)(v0 + 88);
        uint64_t v6 = (uint64_t *)(v5 + *(int *)(v4 + 20));
        uint64_t v7 = *v6;
        uint64_t v8 = (void *)v6[1];
        uint64_t v9 = *(void *)(v5 + *(int *)(v4 + 24));
        if ((v3 & 2) != 0) {
          uint64_t v10 = sub_10035C2E0(v7, v8, v9);
        }
        else {
          uint64_t v10 = sub_10035C61C(v7, v8, v9);
        }
        *(void *)(v0 + 216) = v10;
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v32;
        *uint64_t v32 = v0;
        v32[1] = sub_1004BFB08;
        return sub_10042D9F4();
      }
      uint64_t v21 = *(void *)(v0 + 144);
      uint64_t v22 = *(void *)(v0 + 88);
      static Logger.download.getter();
      sub_1004C0218(v22, v21);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      BOOL v25 = os_log_type_enabled(v23, v24);
      uint64_t v26 = *(void *)(v0 + 144);
      if (v25)
      {
        uint64_t v27 = *(void *)(v0 + 112);
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v60 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 138412290;
        uint64_t v29 = *(void **)(v26 + *(int *)(v27 + 32));
        *(void *)(v0 + 72) = v29;
        id v30 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v60 = v29;
        sub_1004C027C(v26);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%@] Requires unconstrained network, but not prompting for current network.", v28, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1004C027C(*(void *)(v0 + 144));
      }

      uint64_t v31 = *(void *)(v0 + 200);
    }
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 168) + 8))(v31, *(void *)(v0 + 160));
  }
  uint64_t v34 = *(void *)(v0 + 120);
  uint64_t v35 = *(void *)(v0 + 88);
  static Logger.download.getter();
  sub_1004C0218(v35, v34);
  char v36 = *(unsigned char *)(v0 + 234);
  char v37 = *(unsigned char *)(v0 + 235);
  os_log_type_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v42 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 176);
  uint64_t v43 = *(void *)(v0 + 160);
  uint64_t v44 = *(void *)(v0 + 120);
  if (v40)
  {
    uint64_t v58 = *(void *)(v0 + 168);
    uint64_t v61 = *(void *)(v0 + 176);
    uint64_t v45 = *(void *)(v0 + 112);
    char v56 = v36;
    uint64_t v46 = swift_slowAlloc();
    os_log_type_t v55 = (void *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 138412546;
    os_log_type_t type = v39;
    char v47 = v37;
    uint64_t v48 = *(void **)(v44 + *(int *)(v45 + 32));
    *(void *)(v0 + 48) = v48;
    id v49 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v55 = v48;
    sub_1004C027C(v44);
    *(_WORD *)(v46 + 12) = 2080;
    *(unsigned char *)(v0 + 232) = v56;
    *(unsigned char *)(v0 + 233) = v47;
    uint64_t v50 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_1000143F4(v50, v51, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, type, "[%@] Evaluation for download completed with result: %s", (uint8_t *)v46, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v61, v43);
  }
  else
  {
    sub_1004C027C(*(void *)(v0 + 120));

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  }
  swift_beginAccess();
  unsigned int v59 = *(unsigned __int8 *)(v0 + 234);
  int v52 = *(unsigned __int8 *)(v0 + 235);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v52) {
    int v53 = 256;
  }
  else {
    int v53 = 0;
  }
  uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
  return v54(v53 | v59);
}

uint64_t sub_1004BFB08(char a1)
{
  *(unsigned char *)(*(void *)v1 + 236) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004BFC28, 0, 0);
}

uint64_t sub_1004BFC28()
{
  uint64_t v52 = v0;
  uint64_t v1 = *(void *)(v0 + 88);
  if (*(unsigned char *)(v0 + 236))
  {
    uint64_t v2 = *(void *)(v0 + 128);
    static Logger.download.getter();
    sub_1004C0218(v1, v2);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 128);
    if (v5)
    {
      uint64_t v7 = *(void *)(v0 + 112);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v10 = *(void **)(v6 + *(int *)(v7 + 32));
      *(void *)(v0 + 80) = v10;
      id v11 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v10;
      sub_1004C027C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%@] We were asked to cancel download. Denying network access.", v8, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004C027C(*(void *)(v0 + 128));
    }

    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 160));
    char v22 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 136);
    static Logger.download.getter();
    sub_1004C0218(v1, v12);
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 136);
    if (v15)
    {
      uint64_t v17 = *(void *)(v0 + 112);
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      unsigned __int8 v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412290;
      uint64_t v48 = v13;
      id v20 = *(void **)(v16 + *(int *)(v17 + 32));
      *(void *)(v0 + 56) = v20;
      id v21 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v20;
      os_log_type_t v13 = v48;
      sub_1004C027C(v16);
      _os_log_impl((void *)&_mh_execute_header, v48, v14, "[%@] We were asked to download now. Ignoring constrained network.", v18, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004C027C(*(void *)(v0 + 136));
    }

    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 160));
    char v22 = 1;
  }
  *(unsigned char *)(v0 + 234) = v22;
  *(unsigned char *)(v0 + 235) = 1;
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 88);
  static Logger.download.getter();
  sub_1004C0218(v24, v23);
  char v25 = *(unsigned char *)(v0 + 234);
  char v26 = *(unsigned char *)(v0 + 235);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v31 = *(void *)(v0 + 168);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v32 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 120);
  if (v29)
  {
    uint64_t v49 = *(void *)(v0 + 176);
    uint64_t v34 = *(void *)(v0 + 112);
    uint64_t v35 = swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 138412546;
    os_log_t log = v27;
    char v36 = v26;
    char v37 = v25;
    os_log_type_t v38 = *(void **)(v33 + *(int *)(v34 + 32));
    *(void *)(v0 + 48) = v38;
    id v39 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v38;
    sub_1004C027C(v33);
    *(_WORD *)(v35 + 12) = 2080;
    *(unsigned char *)(v0 + 232) = v37;
    *(unsigned char *)(v0 + 233) = v36;
    uint64_t v40 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_1000143F4(v40, v41, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v28, "[%@] Evaluation for download completed with result: %s", (uint8_t *)v35, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v49, v32);
  }
  else
  {
    sub_1004C027C(*(void *)(v0 + 120));

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  }
  swift_beginAccess();
  unsigned int v50 = *(unsigned __int8 *)(v0 + 234);
  int v42 = *(unsigned __int8 *)(v0 + 235);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v42) {
    int v43 = 256;
  }
  else {
    int v43 = 0;
  }
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44(v43 | v50);
}

uint64_t sub_1004C0218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EvaluatorDownload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C027C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EvaluatorDownload();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004C02D8(void *a1, int a2)
{
  uint64_t v5 = sub_1000172F8(&qword_1006651E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1004C3E2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int16 v11 = a2 & 0x101;
  v10[13] = 0;
  sub_1004C3ED4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[11] = BYTE2(a2) & 1;
    v10[12] = HIBYTE(a2) & 1;
    v10[10] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C0478()
{
  if (*v0) {
    return 0x69617274736E6F63;
  }
  else {
    return 0x7669736E65707865;
  }
}

uint64_t sub_1004C04C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C3B0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C04E8(uint64_t a1)
{
  unint64_t v2 = sub_1004C3E2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C0524(uint64_t a1)
{
  unint64_t v2 = sub_1004C3E2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C0560@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1004C3C24(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result) & 1;
    a2[3] = BYTE3(result) & 1;
  }
  return result;
}

uint64_t sub_1004C05A8(void *a1)
{
  if (v1[3]) {
    int v2 = 0x1000000;
  }
  else {
    int v2 = 0;
  }
  if (v1[2]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (v1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_1004C02D8(a1, v4 | *v1 | v3 | v2);
}

uint64_t sub_1004C0600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for NWPath();
  v4[6] = v5;
  _OWORD v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_1004C0720, 0, 0);
}

uint64_t sub_1004C0720()
{
  (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[3], v0[9]);
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004C07E8;
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  return sub_1004CEDDC(v2, v3, v4);
}

uint64_t sub_1004C07E8()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1004C0900, 0, 0);
}

uint64_t sub_1004C0900()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[2];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004C09B8(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1004C09DC, 0, 0);
}

uint64_t sub_1004C09DC()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v3 = *(unsigned char **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v4 = &v3[*(int *)(type metadata accessor for NetworkPolicy() + 20)];
  uint64_t v5 = type metadata accessor for CellularIdentity();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v4, v2, v5);
  *uint64_t v3 = v1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1004C0A94(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1004C4138;
  return v6(a1);
}

uint64_t sub_1004C0B70(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a3;
  return _swift_task_switch(sub_1004C4134, 0, 0);
}

uint64_t sub_1004C0B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for NWInterface.InterfaceType();
  v4[6] = v5;
  _OWORD v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for NetworkPath();
  v4[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CellularSettings();
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CellularIdentity();
  v4[13] = v7;
  v4[14] = *(void *)(v7 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = type metadata accessor for ExpensiveNetworkEvaluator();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  return _swift_task_switch(sub_1004C0D8C, 0, 0);
}

uint64_t sub_1004C0D8C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v39 = *(void *)(v0 + 80);
  uint64_t v40 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v41 = *(void *)(v0 + 16);
  uint64_t v43 = *(void *)(v0 + 152);
  uint64_t v9 = v8 + *(int *)(type metadata accessor for NetworkPolicy() + 20);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v10(v2, v9, v5);
  v10(v1, v2, v5);
  v10(v4, v2, v5);
  CellularSettings.init(for:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1 + *(int *)(v40 + 20), v6, v39);
  sub_1004C2D58(v1, v43);
  unsigned int v11 = *(_DWORD *)(v41 + *(int *)(type metadata accessor for EvaluatorDownload() + 28));
  if (v11 == 2)
  {
    uint64_t v44 = (uint64_t (*)(uint64_t))((char *)&dword_100664250 + dword_100664250);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1004C1314;
    uint64_t v13 = *(void *)(v0 + 16);
    return v44(v13);
  }
  int v15 = HIWORD(v11) & 1;
  *(unsigned char *)(v0 + 193) = v11 & 1;
  *(unsigned char *)(v0 + 192) = BYTE1(v11) & 1;
  *(unsigned char *)(v0 + 191) = BYTE2(v11) & 1;
  *(unsigned char *)(v0 + 190) = (v11 & 0x1000000) != 0;
  if ((**(unsigned char **)(v0 + 40) & 1) == 0) {
    goto LABEL_12;
  }
  if (v11)
  {
LABEL_7:
    if (v11 & 0x10000) == 0 && (NWPath.isConstrained.getter())
    {
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006650C0 + dword_1006650C0);
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 176) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_1004C1B60;
      uint64_t v17 = *(void *)(v0 + 24);
      uint64_t v18 = *(void *)(v0 + 32);
      uint64_t v19 = *(void *)(v0 + 16);
      return v45(v19, v17, v18);
    }
LABEL_12:
    char v20 = NWPath.isExpensive.getter();
    uint64_t v46 = v11 & 0x1000000;
    int v42 = v11 & 0x100;
    if (v11 & 1) != 0 && (v20)
    {
      sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
      id v21 = &_mh_execute_header;
      LOBYTE(v11) = 1;
    }
    else
    {
      char v22 = NWPath.isConstrained.getter();
      if (v11 & 0x10000) != 0 && (v22)
      {
        sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
        id v21 = &_mh_execute_header;
        int v15 = 1;
      }
      else
      {
        char v27 = NWPath.isExpensive.getter();
        uint64_t v28 = *(void *)(v0 + 152);
        if (v27)
        {
          sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
        }
        else
        {
          char v36 = NWPath.isConstrained.getter();
          sub_1004C2DBC(v28, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
          if ((v36 & 1) == 0)
          {
            id v21 = &_mh_execute_header;
            goto LABEL_29;
          }
        }
        id v21 = 0;
      }
    }
LABEL_29:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = 0x10000;
    if (!v15) {
      uint64_t v37 = 0;
    }
    os_log_type_t v38 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v38((unint64_t)v21 | v46 | v37 | v42 | v11 & 1);
  }
  uint64_t v23 = *(void *)(v0 + 72);
  uint64_t v24 = *(void *)(v0 + 24);
  char v25 = NWPath.isExpensive.getter();
  sub_1004C2CF0(v24, v23, (uint64_t (*)(void))type metadata accessor for NetworkPath);
  uint64_t v26 = *(void *)(v0 + 72);
  if (v25)
  {
    sub_1004C2DBC(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for NetworkPath);
  }
  else
  {
    uint64_t v30 = *(void *)(v0 + 56);
    uint64_t v29 = *(void *)(v0 + 64);
    uint64_t v31 = *(void *)(v0 + 48);
    (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))(v29, enum case for NWInterface.InterfaceType.cellular(_:), v31);
    char v32 = NWPath.usesInterfaceType(_:)();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    sub_1004C2DBC(v26, (uint64_t (*)(void))type metadata accessor for NetworkPath);
    if ((v32 & 1) == 0) {
      goto LABEL_7;
    }
  }
  char v47 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100664248 + dword_100664248);
  uint64_t v33 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_1004C183C;
  uint64_t v35 = *(void *)(v0 + 16);
  uint64_t v34 = *(void *)(v0 + 24);
  return v47(v35, v34);
}

uint64_t sub_1004C1314(__int16 a1)
{
  *(_WORD *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C1414, 0, 0);
}

uint64_t sub_1004C1414()
{
  int v1 = sub_1004BE73C(*(void *)(v0 + 16), *(void *)(v0 + 32));
  __int16 v2 = v1;
  __int16 v3 = *(_WORD *)(v0 + 184);
  *(unsigned char *)(v0 + 193) = v3 & 1;
  *(unsigned char *)(v0 + 192) = HIBYTE(v3) & 1;
  *(unsigned char *)(v0 + 191) = v1 & 1;
  *(unsigned char *)(v0 + 190) = BYTE1(v1) & 1;
  int v4 = v1;
  if (**(unsigned char **)(v0 + 40) != 1)
  {
LABEL_16:
    uint64_t v30 = v2 & 0x100;
    int v27 = v3 & 0x100;
    if (NWPath.isExpensive.getter() & 1) != 0 && (v3)
    {
      sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
      id v21 = &_mh_execute_header;
      LOBYTE(v3) = 1;
    }
    else if (NWPath.isConstrained.getter() & v4)
    {
      sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
      id v21 = &_mh_execute_header;
      LOBYTE(v4) = 1;
    }
    else
    {
      char v22 = NWPath.isExpensive.getter();
      uint64_t v23 = *(void *)(v0 + 152);
      if (v22)
      {
        sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
      }
      else
      {
        char v24 = NWPath.isConstrained.getter();
        sub_1004C2DBC(v23, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
        if ((v24 & 1) == 0)
        {
          id v21 = &_mh_execute_header;
          goto LABEL_26;
        }
      }
      id v21 = 0;
    }
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = 0x10000;
    if ((v4 & 1) == 0) {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v26(v25 | v27 | v3 & 1u | (v30 << 16) | (unint64_t)v21);
  }
  if (v3) {
    goto LABEL_3;
  }
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 24);
  char v7 = NWPath.isExpensive.getter();
  sub_1004C2CF0(v6, v5, (uint64_t (*)(void))type metadata accessor for NetworkPath);
  uint64_t v8 = *(void *)(v0 + 72);
  if (v7)
  {
    sub_1004C2DBC(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for NetworkPath);
LABEL_12:
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100664248 + dword_100664248);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1004C183C;
    uint64_t v20 = *(void *)(v0 + 16);
    uint64_t v19 = *(void *)(v0 + 24);
    return v29(v20, v19);
  }
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  uint64_t v16 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v14, enum case for NWInterface.InterfaceType.cellular(_:), v16);
  char v17 = NWPath.usesInterfaceType(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  sub_1004C2DBC(v8, (uint64_t (*)(void))type metadata accessor for NetworkPath);
  if (v17) {
    goto LABEL_12;
  }
LABEL_3:
  if (v2)
  {
    int v4 = 1;
    goto LABEL_16;
  }
  if ((NWPath.isConstrained.getter() & 1) == 0)
  {
    int v4 = 0;
    goto LABEL_16;
  }
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006650C0 + dword_1006650C0);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v9;
  void *v9 = v0;
  v9[1] = sub_1004C1B60;
  uint64_t v10 = *(void *)(v0 + 24);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 16);
  return v28(v12, v10, v11);
}

uint64_t sub_1004C183C(__int16 a1)
{
  *(_WORD *)(*(void *)v1 + 186) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C193C, 0, 0);
}

uint64_t sub_1004C193C()
{
  __int16 v1 = *(_WORD *)(v0 + 186);
  int v17 = v1 & 0x100;
  if ((v1 & 0x100) != 0)
  {
    if ((v1 & 1) == 0)
    {
      NWPath.isExpensive.getter();
      int v3 = 0;
      char v2 = *(unsigned char *)(v0 + 191);
      char v16 = *(unsigned char *)(v0 + 190);
      goto LABEL_9;
    }
    char v4 = *(unsigned char *)(v0 + 191);
    char v5 = *(unsigned char *)(v0 + 190);
    char v6 = NWPath.isConstrained.getter();
    char v16 = v6 | v5;
    char v2 = v6 | v4;
    int v3 = 1;
  }
  else
  {
    char v2 = *(unsigned char *)(v0 + 191);
    char v16 = *(unsigned char *)(v0 + 190);
    int v3 = v1 & 1;
  }
  char v7 = NWPath.isExpensive.getter();
  if (v3 && (v7 & 1) != 0)
  {
    sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
    uint64_t v8 = &_mh_execute_header;
    int v3 = 1;
    goto LABEL_17;
  }
LABEL_9:
  if (NWPath.isConstrained.getter() & 1) != 0 && (v2)
  {
    sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
    uint64_t v8 = &_mh_execute_header;
    char v2 = 1;
    goto LABEL_17;
  }
  char v9 = NWPath.isExpensive.getter();
  uint64_t v10 = *(void *)(v0 + 152);
  if (v9)
  {
    sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
LABEL_15:
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  char v11 = NWPath.isConstrained.getter();
  sub_1004C2DBC(v10, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
  if (v11) {
    goto LABEL_15;
  }
  uint64_t v8 = &_mh_execute_header;
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = 0x1000000;
  if ((v16 & 1) == 0) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0x10000;
  if ((v2 & 1) == 0) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v14(v13 | v12 | (unint64_t)v8 | v17 | v3);
}

uint64_t sub_1004C1B60(__int16 a1)
{
  *(_WORD *)(*(void *)v1 + 188) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C1C60, 0, 0);
}

uint64_t sub_1004C1C60()
{
  __int16 v1 = *(_WORD *)(v0 + 188);
  unsigned int v2 = *(unsigned __int8 *)(v0 + 193);
  int v12 = *(unsigned __int8 *)(v0 + 192);
  if ((NWPath.isExpensive.getter() & 1) != 0 && v2)
  {
    int v11 = v1 & 1;
    sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
    uint64_t v3 = &_mh_execute_header;
    unsigned int v2 = 1;
    goto LABEL_12;
  }
  if (NWPath.isConstrained.getter() & 1) != 0 && (v1)
  {
    sub_1004C2DBC(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
    uint64_t v3 = &_mh_execute_header;
    int v11 = 1;
    goto LABEL_12;
  }
  char v4 = NWPath.isExpensive.getter();
  uint64_t v5 = *(void *)(v0 + 152);
  int v11 = v1 & 1;
  if (v4)
  {
    sub_1004C2DBC(v5, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
LABEL_10:
    uint64_t v3 = 0;
    goto LABEL_12;
  }
  char v6 = NWPath.isConstrained.getter();
  sub_1004C2DBC(v5, (uint64_t (*)(void))type metadata accessor for ExpensiveNetworkEvaluator);
  if (v6) {
    goto LABEL_10;
  }
  uint64_t v3 = &_mh_execute_header;
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = 0x10000;
  if (!v11) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 256;
  if (!v12) {
    uint64_t v8 = 0;
  }
  char v9 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v9(v8 & 0xFFFFFFFFFEFFFFFFLL | ((((unint64_t)(v1 & 0x100) >> 8) & 1) << 24) | v2 | (unint64_t)v3 | v7);
}

uint64_t sub_1004C1E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 1488) = a6;
  *(unsigned char *)(v6 + 1672) = a5;
  *(void *)(v6 + 1480) = a4;
  *(void *)(v6 + 1432) = a3;
  *(void *)(v6 + 1384) = a2;
  *(void *)(v6 + 1336) = a1;
  uint64_t v7 = type metadata accessor for CellularIdentity();
  *(void *)(v6 + 1496) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 1504) = v8;
  *(void *)(v6 + 1512) = *(void *)(v8 + 64);
  *(void *)(v6 + 1520) = swift_task_alloc();
  *(void *)(v6 + 1528) = type metadata accessor for NetworkPolicy();
  *(void *)(v6 + 1536) = swift_task_alloc();
  *(void *)(v6 + 1544) = swift_task_alloc();
  *(void *)(v6 + 1552) = type metadata accessor for NetworkPath();
  *(void *)(v6 + 1560) = swift_task_alloc();
  *(void *)(v6 + 1568) = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  *(void *)(v6 + 1576) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  *(void *)(v6 + 1584) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 1592) = v10;
  *(void *)(v6 + 1600) = *(void *)(v10 + 64);
  *(void *)(v6 + 1608) = swift_task_alloc();
  *(void *)(v6 + 1616) = swift_task_alloc();
  return _swift_task_switch(sub_1004C204C, 0, 0);
}

uint64_t sub_1004C204C()
{
  uint64_t v1 = *(void *)(v0 + 1592);
  uint64_t v2 = *(void *)(v0 + 1584);
  uint64_t v3 = *(void *)(v0 + 1576);
  sub_10001893C(*(void *)(v0 + 1336), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_1002BDBEC(*(void *)(v0 + 1576));
    return _assertionFailure(_:_:file:line:flags:)();
  }
  else
  {
    unint64_t v5 = *(void *)(v0 + 1616);
    uint64_t v6 = *(void *)(v0 + 1608);
    uint64_t v7 = *(void *)(v0 + 1600);
    uint64_t v8 = *(void *)(v0 + 1592);
    uint64_t v9 = *(void *)(v0 + 1584);
    uint64_t v24 = *(void *)(v0 + 1520);
    uint64_t v10 = *(void *)(v0 + 1504);
    uint64_t v23 = *(void *)(v0 + 1496);
    char v25 = *(unsigned char *)(v0 + 1672);
    uint64_t v22 = *(void *)(v0 + 1480);
    uint64_t v11 = *(void *)(v0 + 1432);
    uint64_t v21 = *(void *)(v0 + 1384);
    uint64_t v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32);
    v12(v5, *(void *)(v0 + 1576), v9);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v6, v5, v9);
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = swift_allocObject();
    *(void *)(v0 + 1624) = v14;
    v12(v14 + v13, v6, v9);
    uint64_t v15 = (void *)(v14 + ((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v15 = v21;
    v15[1] = v11;
    uint64_t v16 = swift_task_alloc();
    *(void *)(v0 + 1632) = v16;
    *(void *)(v16 + 16) = &unk_1006650D8;
    *(void *)(v16 + 24) = v14;
    swift_bridgeObjectRetain();
    swift_asyncLet_begin();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v24, v22, v23);
    unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v0 + 1640) = v18;
    *(unsigned char *)(v18 + 16) = v25;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 32))(v18 + v17, v24, v23);
    uint64_t v19 = swift_task_alloc();
    *(void *)(v0 + 1648) = v19;
    *(void *)(v19 + 16) = &unk_1006650F8;
    *(void *)(v19 + 24) = v18;
    swift_asyncLet_begin();
    uint64_t v20 = *(void *)(v0 + 1544);
    return _swift_asyncLet_get(v0 + 656, v20, sub_1004C239C, v0 + 1296);
  }
}

uint64_t sub_1004C239C()
{
  sub_1004C2CF0(v0[193], v0[192], (uint64_t (*)(void))type metadata accessor for NetworkPolicy);
  uint64_t v1 = v0[196];
  return _swift_asyncLet_get(v0 + 2, v1, sub_1004C2428, v0 + 168);
}

uint64_t sub_1004C2428()
{
  sub_1004C2CF0(v0[196], v0[195], (uint64_t (*)(void))type metadata accessor for NetworkPath);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100665110 + dword_100665110);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[207] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004C24FC;
  uint64_t v2 = v0[195];
  uint64_t v3 = v0[186];
  uint64_t v4 = v0[167];
  return v6(v4, v2, v3);
}

uint64_t sub_1004C24FC(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 656;
  uint64_t v4 = *v1 + 1392;
  uint64_t v5 = *(void *)(*v1 + 1560);
  uint64_t v6 = *(void *)(*v1 + 1536);
  *(void *)(*v1 + 1664) = a1;
  swift_task_dealloc();
  sub_1004C2DBC(v5, (uint64_t (*)(void))type metadata accessor for NetworkPath);
  sub_1004C2DBC(v6, (uint64_t (*)(void))type metadata accessor for NetworkPolicy);
  uint64_t v7 = *(void *)(v2 + 1544);
  return _swift_asyncLet_finish(v3, v7, sub_1004C2690, v4);
}

uint64_t sub_1004C2690()
{
  return _swift_task_switch(sub_1004C26AC, 0, 0);
}

uint64_t sub_1004C26AC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 1568);
  return _swift_asyncLet_finish(v0 + 16, v1, sub_1004C2734, v0 + 1440);
}

uint64_t sub_1004C2734()
{
  return _swift_task_switch(sub_1004C2750, 0, 0);
}

uint64_t sub_1004C2750()
{
  uint64_t v1 = v0[202];
  uint64_t v2 = v0[199];
  uint64_t v3 = v0[198];
  uint64_t v6 = v0[208];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  return v4(v6 & 0x101010101);
}

uint64_t type metadata accessor for NetworkPolicy()
{
  uint64_t result = qword_100665190;
  if (!qword_100665190) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004C28C4()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1004C296C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000B238;
  return sub_1004C0600(a1, v6, v8, v9);
}

uint64_t sub_1004C2A84(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10000B238;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1006650E0 + dword_1006650E0);
  return v6(a1, v4);
}

uint64_t sub_1004C2B40(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CellularIdentity() - 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = v6;
  *(unsigned char *)(v7 + 32) = v5;
  *(void *)(v7 + 8) = sub_1000176B4;
  return _swift_task_switch(sub_1004C09DC, 0, 0);
}

uint64_t sub_1004C2C38(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  char v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000176B4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100665100 + dword_100665100);
  return v6(a1, v4);
}

uint64_t sub_1004C2CF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004C2D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ExpensiveNetworkEvaluator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C2DBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004C2E1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 760) = a5;
  *(unsigned char *)(v5 + 856) = a4;
  *(void *)(v5 + 752) = a3;
  *(void *)(v5 + 744) = a2;
  *(void *)(v5 + 696) = a1;
  uint64_t v6 = type metadata accessor for CellularIdentity();
  *(void *)(v5 + 768) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 776) = v7;
  *(void *)(v5 + 784) = *(void *)(v7 + 64);
  *(void *)(v5 + 792) = swift_task_alloc();
  *(void *)(v5 + 800) = type metadata accessor for NetworkPolicy();
  *(void *)(v5 + 808) = swift_task_alloc();
  *(void *)(v5 + 816) = swift_task_alloc();
  return _swift_task_switch(sub_1004C2F34, 0, 0);
}

uint64_t sub_1004C2F34()
{
  uint64_t v1 = *(void *)(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 776);
  uint64_t v3 = *(void *)(v0 + 768);
  char v4 = *(unsigned char *)(v0 + 856);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 752), v3);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 824) = v6;
  *(unsigned char *)(v6 + 16) = v4;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v6 + v5, v1, v3);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 832) = v7;
  *(void *)(v7 + 16) = &unk_100665128;
  *(void *)(v7 + 24) = v6;
  swift_asyncLet_begin();
  uint64_t v8 = *(void *)(v0 + 816);
  return _swift_asyncLet_get(v0 + 16, v8, sub_1004C3094, v0 + 656);
}

uint64_t sub_1004C3094()
{
  sub_1004C2CF0(v0[102], v0[101], (uint64_t (*)(void))type metadata accessor for NetworkPolicy);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100665110 + dword_100665110);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[105] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1004C3168;
  uint64_t v2 = v0[95];
  uint64_t v3 = v0[93];
  uint64_t v4 = v0[87];
  return v6(v4, v3, v2);
}

uint64_t sub_1004C3168(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1 + 16;
  uint64_t v4 = *v1 + 704;
  uint64_t v5 = *(void *)(*v1 + 808);
  *(void *)(*v1 + 848) = a1;
  swift_task_dealloc();
  sub_1004C2DBC(v5, (uint64_t (*)(void))type metadata accessor for NetworkPolicy);
  uint64_t v6 = *(void *)(v2 + 816);
  return _swift_asyncLet_finish(v3, v6, sub_1004C32CC, v4);
}

uint64_t sub_1004C32CC()
{
  return _swift_task_switch(sub_1004C32E8, 0, 0);
}

uint64_t sub_1004C32E8()
{
  uint64_t v1 = *(void *)(v0 + 848);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1 & 0x101010101);
}

uint64_t sub_1004C339C()
{
  uint64_t v1 = type metadata accessor for CellularIdentity();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004C342C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CellularIdentity() - 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = v6;
  *(unsigned char *)(v7 + 32) = v5;
  *(void *)(v7 + 8) = sub_1000176B4;
  return _swift_task_switch(sub_1004C4134, 0, 0);
}

uint64_t *sub_1004C3524(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for CellularIdentity();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1004C35F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for CellularIdentity();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

unsigned char *sub_1004C3658(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for CellularIdentity();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1004C36D4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for CellularIdentity();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1004C3750(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for CellularIdentity();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1004C37CC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for CellularIdentity();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1004C3848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C385C);
}

uint64_t sub_1004C385C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for CellularIdentity();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    unint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1004C390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C3920);
}

unsigned char *sub_1004C3920(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for CellularIdentity();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1004C39C4()
{
  uint64_t result = type metadata accessor for CellularIdentity();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for NetworkPolicy.Decision(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NetworkPolicy.Decision(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[4]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NetworkPolicy.Decision(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkPolicy.Decision()
{
  return &type metadata for NetworkPolicy.Decision;
}

uint64_t sub_1004C3B0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7669736E65707865 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69617274736E6F63 && a2 == 0xEB0000000064656ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004C3C24(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_1006651C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004C3E2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100014524((uint64_t)a1);
  }
  char v19 = 0;
  sub_1004C3E80();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = v20;
  int v8 = v21;
  char v16 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v10 = v17;
  int v11 = v18;
  sub_100014524((uint64_t)a1);
  if (v11) {
    int v12 = 0x1000000;
  }
  else {
    int v12 = 0;
  }
  if (v10) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v8) {
    int v14 = 256;
  }
  else {
    int v14 = 0;
  }
  return v14 | v7 | v13 | v12;
}

unint64_t sub_1004C3E2C()
{
  unint64_t result = qword_1006651D0;
  if (!qword_1006651D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006651D0);
  }
  return result;
}

unint64_t sub_1004C3E80()
{
  unint64_t result = qword_1006651D8;
  if (!qword_1006651D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006651D8);
  }
  return result;
}

unint64_t sub_1004C3ED4()
{
  unint64_t result = qword_1006651E8;
  if (!qword_1006651E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006651E8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NetworkPolicy.Decision.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C3FF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkPolicy.Decision.CodingKeys()
{
  return &type metadata for NetworkPolicy.Decision.CodingKeys;
}

unint64_t sub_1004C4030()
{
  unint64_t result = qword_1006651F0;
  if (!qword_1006651F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006651F0);
  }
  return result;
}

unint64_t sub_1004C4088()
{
  unint64_t result = qword_1006651F8;
  if (!qword_1006651F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006651F8);
  }
  return result;
}

unint64_t sub_1004C40E0()
{
  unint64_t result = qword_100665200;
  if (!qword_100665200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665200);
  }
  return result;
}

void sub_1004C413C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 < 2)
  {
    id v4 = [self personaAttributesForPersonaType:0];
    if (v4)
    {
      uint64_t v5 = v4;
      id v6 = [v4 userPersonaUniqueString];

      if (v6)
      {
        id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v9 = [v7 initWithBundleIdentifier:v8 personaUniqueString:v6];

        if (!v9) {
          return;
        }
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  if (a4 == 2)
  {
    id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v10 initWithBundleIdentifier:v11];

    if (!v9) {
      return;
    }
LABEL_5:

    return;
  }
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  id v9 = [v14 initWithBundleIdentifier:v15 personaUniqueString:v16];
  sub_1001C6440(a3, a4);

  if (v9) {
    goto LABEL_5;
  }
}

uint64_t sub_1004C4304()
{
  id v1 = [v0 personaIdentifier];
  if (!v1) {
    return 0;
  }
  BOOL v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  id v6 = [self sharedInstance];
  id v7 = [v6 personalPersonaUID];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (v3 == v8 && v5 == v10)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v12)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

unint64_t destroy for Persona(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s28ManagedAppDistributionDaemon7PersonaOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for Persona(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Persona(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Persona(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Persona(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1004C463C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1004C4654(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Persona()
{
  return &type metadata for Persona;
}

uint64_t sub_1004C4684(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  uint64_t v4 = sub_1000172F8(&qword_100665248);
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v24 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_100665250);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100665258);
  uint64_t v21 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSString v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_100665260);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  NSString v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004C55B4();
  uint64_t v16 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v16)
  {
    char v29 = 0;
    sub_1004C56B0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  if (v16 == 1)
  {
    char v30 = 1;
    sub_1004C565C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  char v31 = 2;
  sub_1004C5608();
  unsigned __int8 v18 = v24;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v19 = v27;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1004C4A3C()
{
  uint64_t v1 = 0x6C616E6F73726570;
  if (*v0 != 1) {
    uint64_t v1 = 0x6972707265746E65;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_1004C4A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C4EB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C4ABC(uint64_t a1)
{
  unint64_t v2 = sub_1004C55B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C4AF8(uint64_t a1)
{
  unint64_t v2 = sub_1004C55B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4B34()
{
  return 0x7453657571696E75;
}

uint64_t sub_1004C4B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7453657571696E75 && a2 == 0xEC000000676E6972)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1004C4C04(uint64_t a1)
{
  unint64_t v2 = sub_1004C5608();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C4C40(uint64_t a1)
{
  unint64_t v2 = sub_1004C5608();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4C7C(uint64_t a1)
{
  unint64_t v2 = sub_1004C56B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C4CB8(uint64_t a1)
{
  unint64_t v2 = sub_1004C56B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4CF4(uint64_t a1)
{
  unint64_t v2 = sub_1004C565C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C4D30(uint64_t a1)
{
  unint64_t v2 = sub_1004C565C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4D6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004C5008(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1004C4D98(void *a1)
{
  return sub_1004C4684(a1, *v1, v1[1]);
}

uint64_t sub_1004C4DB4(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

unint64_t sub_1004C4E14()
{
  unint64_t result = 0x7B616E6F73726550;
  uint64_t v2 = v0[1];
  if (v2)
  {
    if (v2 == 1)
    {
      return 0xD000000000000011;
    }
    else
    {
      uint64_t v3 = *v0;
      String.append(_:)(*(Swift::String *)(&v2 - 1));
      v4._uint64_t countAndFlagsBits = 125;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      return 0x7B616E6F73726550;
    }
  }
  return result;
}

uint64_t sub_1004C4EB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616E6F73726570 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6972707265746E65 && a2 == 0xEA00000000006573)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1004C5008(void *a1)
{
  uint64_t v25 = sub_1000172F8(&qword_100665208);
  uint64_t v27 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1000172F8(&qword_100665210);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  Swift::String v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_100665218);
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000172F8(&qword_100665220);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  char v29 = a1;
  uint64_t v13 = (uint64_t)sub_10018AC60(a1, v12);
  sub_1004C55B4();
  uint64_t v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    NSString v15 = v28;
    uint64_t v30 = v9;
    uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v16 + 16) == 1)
    {
      if (*(unsigned char *)(v16 + 32))
      {
        if (*(unsigned char *)(v16 + 32) == 1)
        {
          char v32 = 1;
          sub_1004C565C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v26);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
          uint64_t v13 = 0;
        }
        else
        {
          char v33 = 2;
          sub_1004C5608();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v21 = v25;
          uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v22 = v30;
          (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v21);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v8);
        }
      }
      else
      {
        char v31 = 0;
        sub_1004C56B0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v17 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      sub_1000172F8(&qword_10065DF58);
      void *v19 = &type metadata for Persona;
      uint64_t v13 = (uint64_t)v11;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for DecodingError.typeMismatch(_:), v17);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    }
  }
  sub_100014524((uint64_t)v29);
  return v13;
}

unint64_t sub_1004C55B4()
{
  unint64_t result = qword_100665228;
  if (!qword_100665228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665228);
  }
  return result;
}

unint64_t sub_1004C5608()
{
  unint64_t result = qword_100665230;
  if (!qword_100665230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665230);
  }
  return result;
}

unint64_t sub_1004C565C()
{
  unint64_t result = qword_100665238;
  if (!qword_100665238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665238);
  }
  return result;
}

unint64_t sub_1004C56B0()
{
  unint64_t result = qword_100665240;
  if (!qword_100665240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665240);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Persona.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C57D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Persona.CodingKeys()
{
  return &type metadata for Persona.CodingKeys;
}

ValueMetadata *type metadata accessor for Persona.NoneCodingKeys()
{
  return &type metadata for Persona.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for Persona.PersonalCodingKeys()
{
  return &type metadata for Persona.PersonalCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Persona.EnterpriseCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004C58C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Persona.EnterpriseCodingKeys()
{
  return &type metadata for Persona.EnterpriseCodingKeys;
}

unint64_t sub_1004C5900()
{
  unint64_t result = qword_100665268;
  if (!qword_100665268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665268);
  }
  return result;
}

unint64_t sub_1004C5958()
{
  unint64_t result = qword_100665270;
  if (!qword_100665270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665270);
  }
  return result;
}

unint64_t sub_1004C59B0()
{
  unint64_t result = qword_100665278;
  if (!qword_100665278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665278);
  }
  return result;
}

unint64_t sub_1004C5A08()
{
  unint64_t result = qword_100665280;
  if (!qword_100665280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665280);
  }
  return result;
}

unint64_t sub_1004C5A60()
{
  unint64_t result = qword_100665288;
  if (!qword_100665288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665288);
  }
  return result;
}

unint64_t sub_1004C5AB8()
{
  unint64_t result = qword_100665290;
  if (!qword_100665290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665290);
  }
  return result;
}

unint64_t sub_1004C5B10()
{
  unint64_t result = qword_100665298;
  if (!qword_100665298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665298);
  }
  return result;
}

unint64_t sub_1004C5B68()
{
  unint64_t result = qword_1006652A0;
  if (!qword_1006652A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006652A0);
  }
  return result;
}

unint64_t sub_1004C5BC0()
{
  unint64_t result = qword_1006652A8;
  if (!qword_1006652A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006652A8);
  }
  return result;
}

unint64_t sub_1004C5C18()
{
  unint64_t result = qword_1006652B0;
  if (!qword_1006652B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1006652B0);
  }
  return result;
}

uint64_t sub_1004C5C6C()
{
  v1[58] = v0;
  type metadata accessor for OAuthClient();
  v1[59] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Logger();
  v1[60] = v2;
  v1[61] = *(void *)(v2 - 8);
  v1[62] = swift_task_alloc();
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  sub_1000172F8(&qword_10065F858);
  v1[67] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OAuthCredential();
  v1[68] = v3;
  v1[69] = *(void *)(v3 - 8);
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v1[72] = v4;
  v1[73] = *(void *)(v4 - 8);
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[76] = swift_task_alloc();
  v1[77] = swift_task_alloc();
  sub_1000172F8(&qword_10065C3C0);
  v1[78] = swift_task_alloc();
  return _swift_task_switch(sub_1004C5EDC, 0, 0);
}

uint64_t sub_1004C5EDC()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 bagForProfile:v3 profileVersion:v4];

  URL.init(string:)();
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 624);
    uint64_t v10 = *(void *)(v0 + 464);
    type metadata accessor for LocalizationJetPack();
    uint64_t v11 = swift_allocObject();
    *(void *)(v0 + 632) = v11;
    swift_unknownObjectRetain();
    swift_defaultActor_initialize();
    *(void *)(v11 + 112) = 0;
    uint64_t v12 = v11 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_lastFailedLoadAttempt;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + OBJC_IVAR____TtC28ManagedAppDistributionDaemon19LocalizationJetPack_url, v9, v6);
    *(void *)(v11 + 120) = v5;

    char v14 = *(unsigned char *)(v10 + 48);
    *(unsigned char *)(v0 + 169) = v14;
    char v15 = *(unsigned char *)(v10 + 49);
    *(unsigned char *)(v0 + 170) = v15;
    BOOL v16 = (v15 & 1) == 0;
    uint64_t v17 = 18;
    if (v16) {
      uint64_t v17 = 16;
    }
    uint64_t v18 = 19;
    if (v16) {
      uint64_t v18 = 17;
    }
    if (v14) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v17;
    }
    *(void *)(v0 + 176) = v19;
    *(_OWORD *)(v0 + 184) = 0u;
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
    *(void *)(v0 + 232) = 0;
    *(unsigned char *)(v0 + 240) = 26;
    *(void *)(v0 + 104) = 15;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
    *(_OWORD *)(v0 + 144) = 0u;
    *(void *)(v0 + 160) = 0;
    *(unsigned char *)(v0 + 168) = 26;
    *(void *)(v0 + 248) = 4;
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    *(_OWORD *)(v0 + 288) = 0u;
    *(void *)(v0 + 304) = 0;
    *(unsigned char *)(v0 + 312) = 26;
    *(void *)(v0 + 320) = 1;
    *(void *)(v0 + 376) = 0;
    *(_OWORD *)(v0 + 344) = 0u;
    *(_OWORD *)(v0 + 360) = 0u;
    *(_OWORD *)(v0 + 328) = 0u;
    *(unsigned char *)(v0 + 384) = 26;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_1004C61D0;
    return sub_100560FFC(v0 + 104);
  }
  return result;
}

uint64_t sub_1004C61D0(uint64_t a1, uint64_t a2)
{
  NSString v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[81] = a1;
  v3[82] = a2;
  swift_task_dealloc();
  NSString v4 = (void *)swift_task_alloc();
  v3[83] = v4;
  *NSString v4 = v6;
  v4[1] = sub_1004C6328;
  return sub_100560FFC((uint64_t)(v3 + 22));
}

uint64_t sub_1004C6328(uint64_t a1, uint64_t a2)
{
  NSString v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[84] = a1;
  v3[85] = a2;
  swift_task_dealloc();
  NSString v4 = (void *)swift_task_alloc();
  v3[86] = v4;
  *NSString v4 = v6;
  v4[1] = sub_1004C6480;
  return sub_100560FFC((uint64_t)(v3 + 31));
}

uint64_t sub_1004C6480(uint64_t a1, uint64_t a2)
{
  NSString v3 = (void *)*v2;
  uint64_t v6 = (void *)*v2;
  v3[87] = a1;
  v3[88] = a2;
  swift_task_dealloc();
  NSString v4 = (void *)swift_task_alloc();
  v3[89] = v4;
  *NSString v4 = v6;
  v4[1] = sub_1004C65D8;
  return sub_100560FFC((uint64_t)(v3 + 40));
}

uint64_t sub_1004C65D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 720) = a1;
  *(void *)(v3 + 728) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C66DC, 0, 0);
}

uint64_t sub_1004C66DC()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 720);
  long long v10 = *(_OWORD *)(v0 + 672);
  long long v11 = *(_OWORD *)(v0 + 696);
  long long v9 = *(_OWORD *)(v0 + 648);
  uint64_t v3 = 18;
  if ((*(unsigned char *)(v0 + 170) & 1) == 0) {
    uint64_t v3 = 16;
  }
  uint64_t v4 = 19;
  if ((*(unsigned char *)(v0 + 170) & 1) == 0) {
    uint64_t v4 = 17;
  }
  if (*(unsigned char *)(v0 + 169)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v3;
  }
  type metadata accessor for SystemAlert();
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 736) = v6;
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 48) = v11;
  *(void *)(v6 + 64) = v2;
  *(void *)(v6 + 72) = v1;
  *(_WORD *)(v6 + 80) = 0;
  sub_10019C9FC(v5, 0, 0, 0, 0, 0, 0, 0, 26);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 744) = v7;
  void *v7 = v0;
  v7[1] = sub_1004C6830;
  return sub_10042D9F4();
}

uint64_t sub_1004C6830(char a1)
{
  *(unsigned char *)(*(void *)v1 + 171) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1004C6950, 0, 0);
}

uint64_t sub_1004C6950()
{
  uint64_t v88 = v0;
  if (*(unsigned char *)(v0 + 171))
  {
    uint64_t v1 = *(void *)(v0 + 464);
    static Logger.oauth.getter();
    sub_1004C8454(v1);
    sub_1004C8454(v1);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = *(void *)(v0 + 464);
    if (v4)
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412290;
      uint64_t v8 = *(void **)(v5 + 40);
      *(void *)(v0 + 392) = v8;
      id v9 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v8;
      sub_1004C84A4(v5);
      sub_1004C84A4(v5);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] User declined to provide OAuth authentication", v6, 0xCu);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004C84A4(*(void *)(v0 + 464));
      sub_1004C84A4(v5);
    }
    uint64_t v41 = *(void *)(v0 + 488);
    uint64_t v40 = *(void *)(v0 + 496);
    uint64_t v42 = *(void *)(v0 + 480);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    type metadata accessor for InternalError();
    sub_100013CFC((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
    return v43();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 552);
    uint64_t v11 = *(void *)(v0 + 544);
    uint64_t v12 = *(void *)(v0 + 536);
    uint64_t v13 = *(uint64_t **)(v0 + 464);
    uint64_t v14 = *v13;
    *(void *)(v0 + 752) = *v13;
    unint64_t v15 = v13[1];
    *(void *)(v0 + 760) = v15;
    uint64_t v16 = v13[2];
    *(void *)(v0 + 768) = v16;
    uint64_t v17 = v13[3];
    *(void *)(v0 + 776) = v17;
    uint64_t v18 = v13[5];
    *(void *)(v0 + 784) = v18;
    sub_1003C2ABC(v14, v15, v16, v17, v18, v12);
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v11);
    uint64_t v20 = *(void *)(v0 + 616);
    uint64_t v21 = *(void *)(v0 + 584);
    uint64_t v22 = *(void *)(v0 + 576);
    if (v19 == 1)
    {
      uint64_t v81 = v16;
      uint64_t v23 = *(void *)(v0 + 600);
      uint64_t v24 = *(void *)(v0 + 464);
      sub_1004C84F8(*(void *)(v0 + 536));
      UUID.init()();
      static Logger.oauth.getter();
      unint64_t v83 = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      v84(v23, v20, v22);
      sub_1004C8454(v24);
      sub_1004C8454(v24);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      uint64_t v28 = *(void *)(v0 + 584);
      uint64_t v77 = *(void *)(v0 + 576);
      uint64_t v79 = *(void *)(v0 + 600);
      uint64_t v29 = *(void *)(v0 + 520);
      uint64_t v30 = *(void *)(v0 + 480);
      uint64_t v31 = *(void *)(v0 + 488);
      uint64_t v32 = *(void *)(v0 + 464);
      if (v27)
      {
        os_log_type_t type = v26;
        uint64_t v85 = v18;
        uint64_t v33 = swift_slowAlloc();
        uint64_t v73 = v31;
        uint64_t v34 = (void *)swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 138412546;
        *(void *)(v0 + 432) = v85;
        uint64_t v35 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v34 = v85;
        sub_1004C84A4(v32);
        sub_1004C84A4(v32);
        *(_WORD *)(v33 + 12) = 2082;
        sub_100013CFC((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 440) = sub_1000143F4(v36, v37, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
        v38(v79, v77);
        _os_log_impl((void *)&_mh_execute_header, v25, type, "[%@] Generating new client identifier: %{public}s", (uint8_t *)v33, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v18 = v85;
        swift_slowDealloc();

        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
        v39(v29, v30);
      }
      else
      {
        sub_1004C84A4(*(void *)(v0 + 464));
        sub_1004C84A4(v32);
        os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
        v38(v79, v77);

        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
        v39(v29, v30);
      }
      uint64_t v16 = v81;
    }
    else
    {
      uint64_t v86 = v18;
      uint64_t v82 = v17;
      uint64_t v45 = *(void *)(v0 + 608);
      uint64_t v46 = *(void *)(v0 + 568);
      uint64_t v47 = *(void *)(v0 + 464);
      sub_1002C6984(*(void *)(v0 + 536), v46);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
      unint64_t v83 = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v48(v20, v46, v22);
      static Logger.oauth.getter();
      uint64_t v84 = v48;
      v48(v45, v20, v22);
      sub_1004C8454(v47);
      sub_1004C8454(v47);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      BOOL v51 = os_log_type_enabled(v49, v50);
      uint64_t v52 = *(void *)(v0 + 584);
      uint64_t v78 = *(void *)(v0 + 576);
      uint64_t v80 = *(void *)(v0 + 608);
      uint64_t v53 = *(void *)(v0 + 568);
      uint64_t v54 = *(void *)(v0 + 528);
      uint64_t v55 = *(void *)(v0 + 480);
      uint64_t v56 = *(void *)(v0 + 488);
      uint64_t v57 = *(void *)(v0 + 464);
      if (v51)
      {
        uint64_t v76 = *(void *)(v0 + 568);
        uint64_t v75 = *(void *)(v0 + 528);
        uint64_t v58 = swift_slowAlloc();
        unsigned int v59 = (void *)swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 138412546;
        os_log_type_t v72 = v50;
        *(void *)(v0 + 448) = v86;
        uint64_t v60 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unsigned int v59 = v86;
        sub_1004C84A4(v57);
        sub_1004C84A4(v57);
        *(_WORD *)(v58 + 12) = 2082;
        sub_100013CFC((unint64_t *)&qword_100665D30, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 456) = sub_1000143F4(v61, v62, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v38(v80, v78);
        _os_log_impl((void *)&_mh_execute_header, v49, v72, "[%@] Using existing client identifier: %{public}s", (uint8_t *)v58, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v39(v75, v55);
        uint64_t v18 = v86;
        sub_1004C8558(v76, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
        uint64_t v17 = v82;
      }
      else
      {

        os_log_type_t v38 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v38(v80, v78);
        sub_1004C84A4(v57);
        sub_1004C84A4(v57);
        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v39(v54, v55);
        sub_1004C8558(v53, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
        uint64_t v17 = v82;
        uint64_t v18 = v86;
      }
    }
    *(void *)(v0 + 808) = v84;
    *(void *)(v0 + 800) = v38;
    *(void *)(v0 + 792) = v39;
    uint64_t v63 = *(void *)(v0 + 616);
    uint64_t v64 = *(void *)(v0 + 592);
    uint64_t v65 = *(void *)(v0 + 576);
    uint64_t v66 = *(void *)(v0 + 464);
    *(void *)(v0 + 816) = v83;
    v84(v64, v63, v65);
    uint64_t v67 = *(void *)(v66 + 32);
    uint64_t v68 = v18;
    swift_bridgeObjectRetain();
    swift_retain();
    os_log_type_t v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 824) = v69;
    *os_log_type_t v69 = v0;
    v69[1] = sub_1004C73CC;
    uint64_t v70 = *(void *)(v0 + 592);
    uint64_t v71 = *(void *)(v0 + 472);
    return sub_10051F150(v71, v70, v16, (uint64_t)v17, v67, (uint64_t)v68);
  }
}

uint64_t sub_1004C73CC()
{
  uint64_t v2 = (void *)*v1;
  v2[104] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004C7FF4, 0, 0);
  }
  else
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    v2[105] = v3;
    *os_log_type_t v3 = v2;
    v3[1] = sub_1004C7550;
    uint64_t v4 = v2[98];
    uint64_t v5 = v2[97];
    uint64_t v6 = v2[96];
    uint64_t v7 = v2[95];
    uint64_t v8 = v2[94];
    return sub_100520A38(v8, v7, v6, v5, v4);
  }
}

uint64_t sub_1004C7550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[106] = a1;
  v6[107] = a2;
  v6[108] = a3;
  v6[109] = a4;
  v6[110] = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_1004C8154;
  }
  else {
    uint64_t v7 = sub_1004C7674;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004C7674()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[58];
  static Logger.oauth.getter();
  sub_1004C8454(v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1004C8454(v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v25 = v0[108];
    os_log_type_t v26 = (void *)v0[109];
    uint64_t v4 = (void *)v0[107];
    uint64_t v24 = v0[106];
    uint64_t v5 = (void *)v0[98];
    uint64_t v30 = v0[64];
    uint64_t v31 = (void (*)(uint64_t, uint64_t))v0[99];
    uint64_t v29 = v0[60];
    os_log_type_t type = v3;
    uint64_t v6 = v0[58];
    uint64_t v7 = swift_slowAlloc();
    os_log_t log = v2;
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412546;
    v0[52] = v5;
    id v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v5;
    sub_1004C84A4(v6);
    sub_1004C84A4(v6);
    *(_WORD *)(v7 + 12) = 2082;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10052286C(v24, v4, v25, v26);
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v0[53] = sub_1000143F4(v10, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%@] Received authorization code: %{public}s", (uint8_t *)v7, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v31(v30, v29);
  }
  else
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[99];
    uint64_t v14 = v0[64];
    uint64_t v15 = v0[60];
    uint64_t v16 = v0[58];
    sub_1004C84A4(v16);
    sub_1004C84A4(v16);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    v13(v14, v15);
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[111] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1004C7A0C;
  uint64_t v18 = v0[109];
  uint64_t v19 = v0[108];
  uint64_t v20 = v0[107];
  uint64_t v21 = v0[106];
  uint64_t v22 = v0[98];
  return sub_100521660((uint64_t)(v0 + 2), v21, v20, v19, v18, v22);
}

uint64_t sub_1004C7A0C()
{
  *(void *)(*(void *)v1 + 896) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1004C82D4;
  }
  else {
    uint64_t v2 = sub_1004C7B5C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1004C7B5C()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 464);
  static Logger.oauth.getter();
  sub_1004C8454(v1);
  sub_1002C684C(v0 + 16);
  sub_1004C8454(v1);
  sub_1002C684C(v0 + 16);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    os_log_t log = v2;
    uint64_t v4 = *(void **)(v0 + 784);
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v35 = *(void *)(v0 + 480);
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412546;
    *(void *)(v0 + 400) = v4;
    id v8 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v4;
    sub_1004C84A4(v5);
    sub_1004C84A4(v5);
    *(_WORD *)(v6 + 12) = 2082;
    sub_1002C684C(v0 + 16);
    uint64_t v9 = sub_100522D88();
    unint64_t v11 = v10;
    sub_1002C68B8(v0 + 16);
    *(void *)(v0 + 408) = sub_1000143F4(v9, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002C68B8(v0 + 16);
    sub_1002C68B8(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, log, v3, "[%@] Received access token: %{public}s", (uint8_t *)v6, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v36, v35);
  }
  else
  {
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 792);
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 480);
    uint64_t v15 = *(void *)(v0 + 464);
    sub_1004C84A4(v15);
    sub_1004C84A4(v15);
    sub_1002C68B8(v0 + 16);
    sub_1002C68B8(v0 + 16);

    v12(v13, v14);
  }
  uint64_t v32 = *(void **)(v0 + 784);
  unint64_t v31 = *(void *)(v0 + 776);
  uint64_t v16 = *(void *)(v0 + 768);
  unint64_t v17 = *(void *)(v0 + 760);
  uint64_t v18 = *(void *)(v0 + 752);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
  uint64_t v19 = *(void *)(v0 + 616);
  uint64_t v20 = *(void *)(v0 + 576);
  uint64_t v21 = *(void **)(v0 + 560);
  uint64_t v22 = *(void *)(v0 + 544);
  uint64_t v23 = *(void *)(v0 + 472);
  (*(void (**)(void *, uint64_t, uint64_t))(v0 + 808))(v21, v19, v20);
  uint64_t v24 = (char *)v21 + *(int *)(v22 + 20);
  long long v25 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(v0 + 16);
  *((_OWORD *)v24 + 1) = v25;
  long long v26 = *(_OWORD *)(v0 + 48);
  long long v27 = *(_OWORD *)(v0 + 64);
  long long v28 = *(_OWORD *)(v0 + 80);
  *((void *)v24 + 10) = *(void *)(v0 + 96);
  *((_OWORD *)v24 + 3) = v27;
  *((_OWORD *)v24 + 4) = v28;
  *((_OWORD *)v24 + 2) = v26;
  sub_1003C4AD4(v21, v18, v17, v16, v31, v32);
  swift_release();
  sub_1004C8558((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OAuthCredential);
  sub_1004C8558(v23, (uint64_t (*)(void))type metadata accessor for OAuthClient);
  v33(v19, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_1004C7FF4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v2 = v0[77];
  uint64_t v3 = v0[72];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004C8154()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v2 = v0[77];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[59];
  swift_release();
  sub_1004C8558(v4, (uint64_t (*)(void))type metadata accessor for OAuthClient);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004C82D4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[100];
  uint64_t v2 = v0[77];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[59];
  swift_release();
  sub_1004C8558(v4, (uint64_t (*)(void))type metadata accessor for OAuthClient);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1004C8454(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v3 = v2;
  return a1;
}

uint64_t sub_1004C84A4(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004C84F8(uint64_t a1)
{
  uint64_t v2 = sub_1000172F8(&qword_10065F858);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004C8558(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004C85B8()
{
  v1[55] = v0;
  uint64_t v2 = type metadata accessor for Platform();
  v1[56] = v2;
  v1[57] = *(void *)(v2 - 8);
  v1[58] = swift_task_alloc();
  sub_1000172F8(&qword_10065B8F0);
  v1[59] = swift_task_alloc();
  v1[60] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v1[61] = v3;
  v1[62] = *(void *)(v3 - 8);
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[65] = v4;
  v1[66] = *(void *)(v4 - 8);
  v1[67] = swift_task_alloc();
  v1[68] = swift_task_alloc();
  sub_1000172F8(&qword_1006652C8);
  v1[69] = swift_task_alloc();
  v1[70] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  v1[71] = v5;
  v1[72] = *(void *)(v5 - 8);
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  v1[76] = swift_task_alloc();
  type metadata accessor for ConfigurationBag(0);
  v1[77] = swift_task_alloc();
  v1[78] = swift_task_alloc();
  return _swift_task_switch(sub_1004C88BC, 0, 0);
}

uint64_t sub_1004C88BC()
{
  uint64_t v1 = v0[55];
  sub_10019B17C(v1, (uint64_t)(v0 + 36));
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 175);
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_1005163F0();
  id v6 = [self ephemeralSessionConfiguration];
  [v6 setHTTPShouldSetCookies:0];
  [v6 setHTTPCookieAcceptPolicy:1];
  [v6 setRequestCachePolicy:1];
  sub_100373694(1);
  id v7 = [self sessionWithConfiguration:v6];

  type metadata accessor for PlainHTTP();
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v7;
  uint64_t v9 = type metadata accessor for DecoratedHTTP();
  swift_allocObject();
  uint64_t v10 = sub_1002C20CC(v8, (uint64_t)(v0 + 36), v2, v3, v4, v5);
  v0[79] = v10;
  v0[44] = v9;
  v0[45] = &off_10063FB70;
  v0[41] = v10;
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc();
  v0[80] = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1004C8AD0;
  uint64_t v12 = v0[78];
  return sub_1004CB19C(v12, (uint64_t)(v0 + 41));
}

uint64_t sub_1004C8AD0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 648) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_1004CB020;
  }
  else
  {
    sub_100014524(v2 + 328);
    unint64_t v3 = sub_1004C8C20;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004C8C20()
{
  uint64_t v139 = v0;
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 440) + 56) + 16);
  if (!v1)
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_26;
  }
  uint64_t v124 = *(void *)(v0 + 576);
  uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
  unint64_t v3 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v125 = v1;
    uint64_t v7 = *(void *)(v0 + 616);
    uint64_t v8 = *(void *)(v0 + 608);
    uint64_t v9 = *(void *)(v0 + 600);
    uint64_t v10 = *(v2 - 3);
    unint64_t v11 = *(v2 - 2);
    uint64_t v12 = *v2;
    uint64_t v132 = *(v2 - 1);
    uint64_t v135 = *(v2 - 5);
    uint64_t v126 = *(v2 - 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1002CE45C(v10, v11, v7);
    sub_100458EB8(v7, v8);
    sub_1004CB7F8(v7, type metadata accessor for ConfigurationBag);
    sub_100458EB8(v8, v9);
    if (v3[2])
    {
      unint64_t v13 = sub_100452868(*(void *)(v0 + 600));
      uint64_t v14 = _swiftEmptyArrayStorage;
      if (v15)
      {
        uint64_t v14 = *(void **)(v3[7] + 8 * v13);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    sub_1004CB7F8(*(void *)(v0 + 600), type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = sub_10028FDC8(0, v14[2] + 1, 1, v14);
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1) {
      uint64_t v14 = sub_10028FDC8((void *)(v16 > 1), v17 + 1, 1, v14);
    }
    uint64_t v18 = *(void *)(v0 + 608);
    uint64_t v19 = *(void *)(v0 + 592);
    v14[2] = v17 + 1;
    uint64_t v20 = &v14[6 * v17];
    uint64_t v20[4] = v135;
    v20[5] = v126;
    v20[6] = v10;
    v20[7] = v11;
    v20[8] = v132;
    v20[9] = v12;
    sub_100458EB8(v18, v19);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v138[0] = (uint64_t)v3;
    unint64_t v23 = sub_100452868(v19);
    uint64_t v24 = v3[2];
    BOOL v25 = (v22 & 1) == 0;
    uint64_t v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
    }
    char v27 = v22;
    if (v3[3] < v26) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v22 & 1) == 0) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_10052CBA4();
      unint64_t v3 = (void *)v138[0];
      if ((v27 & 1) == 0)
      {
LABEL_20:
        uint64_t v31 = *(void *)(v0 + 592);
        v3[(v23 >> 6) + 8] |= 1 << v23;
        sub_100458EB8(v31, v3[6] + *(void *)(v124 + 72) * v23);
        *(void *)(v3[7] + 8 * v23) = v14;
        uint64_t v32 = v3[2];
        BOOL v33 = __OFADD__(v32, 1);
        uint64_t v34 = v32 + 1;
        if (v33) {
          goto LABEL_80;
        }
        v3[2] = v34;
        goto LABEL_4;
      }
    }
LABEL_3:
    uint64_t v4 = v3[7];
    swift_bridgeObjectRelease();
    *(void *)(v4 + 8 * v23) = v14;
LABEL_4:
    v2 += 6;
    uint64_t v5 = *(void *)(v0 + 608);
    uint64_t v6 = *(void *)(v0 + 592);
    swift_bridgeObjectRelease();
    sub_1004CB7F8(v6, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    sub_1004CB7F8(v5, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    uint64_t v1 = v125 - 1;
    if (v125 == 1)
    {
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v136 = (void *)(v0 + 16);
      id v118 = (Boolean *)(v0 + 233);
      uint64_t v117 = v0 + 440;
      *(void *)(v0 + 656) = v3;
      *(void *)(v0 + 408) = _swiftEmptyArrayStorage;
      char v35 = *((unsigned char *)v3 + 32);
      *(unsigned char *)(v0 + 234) = v35;
      uint64_t v36 = 1 << v35;
      if (v36 < 64) {
        uint64_t v37 = ~(-1 << v36);
      }
      else {
        uint64_t v37 = -1;
      }
      unint64_t v38 = v37 & v3[8];
      swift_bridgeObjectRetain();
      int64_t v39 = 0;
      while (!v38)
      {
        int64_t v47 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          goto LABEL_81;
        }
        int64_t v48 = (unint64_t)((1 << *(unsigned char *)(v0 + 234)) + 63) >> 6;
        if (v47 < v48)
        {
          uint64_t v43 = *(void *)(v0 + 656);
          uint64_t v49 = v43 + 64;
          unint64_t v50 = *(void *)(v43 + 64 + 8 * v47);
          if (v50) {
            goto LABEL_38;
          }
          int64_t v51 = v39 + 2;
          ++v39;
          if (v47 + 1 < v48)
          {
            unint64_t v50 = *(void *)(v49 + 8 * v51);
            if (v50) {
              goto LABEL_41;
            }
            int64_t v39 = v47 + 1;
            if (v47 + 2 < v48)
            {
              unint64_t v50 = *(void *)(v49 + 8 * (v47 + 2));
              if (v50)
              {
                v47 += 2;
LABEL_38:
                uint64_t v41 = (v50 - 1) & v50;
                unint64_t v42 = __clz(__rbit64(v50)) + (v47 << 6);
                int64_t v39 = v47;
LABEL_34:
                uint64_t v44 = *(void *)(v0 + 552);
                sub_100458EB8(*(void *)(v43 + 48) + *(void *)(*(void *)(v0 + 576) + 72) * v42, v44);
                uint64_t v45 = *(void *)(v43 + 56);
                uint64_t v46 = sub_1000172F8(&qword_1006652D8);
                *(void *)(v44 + *(int *)(v46 + 48)) = *(void *)(v45 + 8 * v42);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v44, 0, 1, v46);
                swift_bridgeObjectRetain();
                goto LABEL_53;
              }
              int64_t v51 = v47 + 3;
              int64_t v39 = v47 + 2;
              if (v47 + 3 < v48)
              {
                unint64_t v50 = *(void *)(v49 + 8 * v51);
                if (v50)
                {
LABEL_41:
                  int64_t v47 = v51;
                  goto LABEL_38;
                }
                while (1)
                {
                  int64_t v47 = v51 + 1;
                  if (__OFADD__(v51, 1)) {
                    goto LABEL_82;
                  }
                  if (v47 >= v48) {
                    break;
                  }
                  unint64_t v50 = *(void *)(v49 + 8 * v47);
                  ++v51;
                  if (v50) {
                    goto LABEL_38;
                  }
                }
                int64_t v39 = v48 - 1;
              }
            }
          }
        }
        uint64_t v52 = *(void *)(v0 + 552);
        uint64_t v53 = sub_1000172F8(&qword_1006652D8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
        uint64_t v41 = 0;
LABEL_53:
        *(void *)(v0 + 672) = v41;
        *(void *)(v0 + 664) = v39;
        uint64_t v54 = *(void *)(v0 + 560);
        sub_1004CB858(*(void *)(v0 + 552), v54);
        uint64_t v55 = sub_1000172F8(&qword_1006652D8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v54, 1, v55) == 1)
        {
          uint64_t v104 = *(void *)(v0 + 624);
          swift_release();
          swift_release();
          sub_1004CB7F8(v104, type metadata accessor for ConfigurationBag);
          uint64_t v123 = *(void *)(v0 + 408);
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v105 = *(uint64_t (**)(uint64_t))(v0 + 8);
          return v105(v123);
        }
        unint64_t v130 = v41;
        int64_t v133 = v39;
        uint64_t v56 = *(void *)(v0 + 584);
        uint64_t v57 = *(void *)(v0 + 568);
        uint64_t v58 = *(void *)(v0 + 560);
        uint64_t v59 = *(void *)(v0 + 440);
        uint64_t v60 = *(void *)(v58 + *(int *)(v55 + 48));
        sub_1004CB8C0(v58, v56);
        *(void *)(v0 + 368) = 0;
        *(void *)(v0 + 376) = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        uint64_t v61 = *(void *)(v59 + 24);
        uint64_t v62 = *(void *)(v59 + 32);
        sub_10018AC60((void *)v59, v61);
        uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 40))(v61, v62);
        uint64_t v65 = v64;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 384) = v63;
        *(void *)(v0 + 392) = v65;
        v66._uint64_t countAndFlagsBits = 45;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        uint64_t v67 = v56 + *(int *)(v57 + 20);
        v68._uint64_t countAndFlagsBits = URL.absoluteString.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v69._uint64_t countAndFlagsBits = 0xD000000000000017;
        v69._object = (void *)0x80000001005C0710;
        String.append(_:)(v69);
        uint64_t v70 = *(void *)(v0 + 392);
        *(void *)(v0 + 680) = *(void *)(v0 + 384);
        *(void *)(v0 + 688) = v70;
        if (*(unsigned char *)(v59 + 175)) {
          goto LABEL_73;
        }
        double v71 = (double)*(uint64_t *)(*(void *)(v0 + 584) + *(int *)(*(void *)(v0 + 568) + 24)) * 3600.0;
        if (os_variant_has_internal_content())
        {
          *id v118 = 0;
          os_log_type_t v72 = (__CFString *)String._bridgeToObjectiveC()();
          uint64_t v73 = (__CFString *)String._bridgeToObjectiveC()();
          int AppBooleanValue = CFPreferencesGetAppBooleanValue(v72, v73, v118);

          if (*v118)
          {
            if (AppBooleanValue)
            {
              static Logger.updates.getter();
              uint64_t v75 = Logger.logObject.getter();
              os_log_type_t v76 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v75, v76))
              {
                uint64_t v77 = (uint8_t *)swift_slowAlloc();
                uint64_t v127 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v77 = 138412290;
                uint64_t v78 = sub_1005163F0();
                *(void *)(v0 + 432) = v78;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v127 = v78;
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "[%@] Skipping minimum polling interval due to internal default being set", v77, 0xCu);
                sub_1000172F8(&qword_10065DB10);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              uint64_t v79 = *(void *)(v0 + 544);
              uint64_t v80 = *(void *)(v0 + 528);
              uint64_t v81 = *(void *)(v0 + 520);

              (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
              double v71 = 0.0;
            }
          }
        }
        uint64_t v82 = *(void *)(v0 + 488);
        uint64_t v83 = *(void *)(v0 + 496);
        uint64_t v85 = *(void *)(v0 + 472);
        uint64_t v84 = *(void *)(v0 + 480);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v85, 1, 1, v82);
        sub_10029AD08(1, v85, v84);
        sub_10001729C(v85, &qword_10065B8F0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v82) == 1)
        {
          sub_10001729C(*(void *)(v0 + 480), &qword_10065B8F0);
LABEL_73:
          uint64_t v107 = *(void *)(*(void *)v117 + 144);
          uint64_t v106 = *(void *)(*(void *)v117 + 152);
          char v108 = *(unsigned char *)(*(void *)v117 + 172);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v108)
          {
            uint64_t v134 = 0x534F64615069;
            unint64_t v137 = 0xE600000000000000;
          }
          else
          {
            uint64_t v129 = v107;
            uint64_t v131 = v106;
            uint64_t v109 = *(void *)(v0 + 456);
            uint64_t v110 = *(void *)(v0 + 464);
            uint64_t v111 = *(void *)(v0 + 448);
            static Platform.iOS.getter();
            uint64_t v134 = Platform.description.getter();
            unint64_t v137 = v112;
            uint64_t v113 = v111;
            uint64_t v107 = v129;
            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v113);
            uint64_t v106 = v131;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v0 + 264) = &type metadata for UpdatesRequest;
          *(void *)(v0 + 272) = sub_1004CB924();
          uint64_t v114 = (void *)swift_allocObject();
          *(void *)(v0 + 240) = v114;
          v114[2] = v60;
          v114[3] = v134;
          v114[4] = v137;
          v114[5] = v107;
          v114[6] = v106;
          *(unsigned char *)(v0 + 280) = 0;
          *(void *)(v0 + 696) = sub_1005163F0();
          sub_1002C66D0(v0 + 240, v0 + 192);
          uint64_t v115 = dword_10065F848;
          unint64_t v116 = (void *)swift_task_alloc();
          *(void *)(v0 + 704) = v116;
          *unint64_t v116 = v0;
          v116[1] = sub_1004C9BD8;
          return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t, char))((char *)&dword_10065F848 + v115))(v67, 1, v0 + 192, 0, 1);
        }
        (*(void (**)(void, void, void))(*(void *)(v0 + 496) + 32))(*(void *)(v0 + 512), *(void *)(v0 + 480), *(void *)(v0 + 488));
        Date.timeIntervalSinceNow.getter();
        if (fabs(v86) >= v71)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 496) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 488));
          goto LABEL_73;
        }
        uint64_t v87 = *(void *)(v0 + 440);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        static Logger.updates.getter();
        sub_1004CBA14(v87, (uint64_t)v136);
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.default.getter();
        BOOL v90 = os_log_type_enabled(v88, v89);
        uint64_t v91 = *(void *)(v0 + 584);
        uint64_t v92 = *(void *)(v0 + 536);
        uint64_t v93 = *(void *)(v0 + 528);
        uint64_t v128 = *(void *)(v0 + 520);
        uint64_t v94 = *(void *)(v0 + 512);
        uint64_t v96 = *(void *)(v0 + 488);
        uint64_t v95 = *(void *)(v0 + 496);
        if (v90)
        {
          uint64_t v122 = *(void *)(v0 + 512);
          uint64_t v97 = swift_slowAlloc();
          os_log_type_t v120 = (void *)swift_slowAlloc();
          v138[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v97 = 138412546;
          os_log_t log = v88;
          uint64_t v98 = sub_1005163F0();
          *(void *)(v0 + 416) = v98;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v120 = v98;
          *(_WORD *)(v97 + 12) = 2082;
          uint64_t v121 = v96;
          uint64_t v99 = *(void *)(v0 + 40);
          uint64_t v100 = *(void *)(v0 + 48);
          sub_10018AC60(v136, v99);
          uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 40))(v99, v100);
          *(void *)(v0 + 424) = sub_1000143F4(v101, v102, v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002F9CC8((uint64_t)v136);
          _os_log_impl((void *)&_mh_execute_header, log, v89, "[%@] minimum polling interval not met for %{public}s, skipping check", (uint8_t *)v97, 0x16u);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v128);
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v122, v121);
        }
        else
        {

          sub_1002F9CC8((uint64_t)v136);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v128);
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
        }
        sub_1004CB7F8(v91, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
        unint64_t v38 = v130;
        int64_t v39 = v133;
      }
      unint64_t v40 = __clz(__rbit64(v38));
      uint64_t v41 = (v38 - 1) & v38;
      unint64_t v42 = v40 | (v39 << 6);
      uint64_t v43 = *(void *)(v0 + 656);
      goto LABEL_34;
    }
  }
  uint64_t v28 = *(void *)(v0 + 592);
  sub_100525954(v26, isUniquelyReferenced_nonNull_native);
  unint64_t v3 = (void *)v138[0];
  unint64_t v29 = sub_100452868(v28);
  if ((v27 & 1) == (v30 & 1))
  {
    unint64_t v23 = v29;
    if ((v27 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_3;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1004C9BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[89] = a1;
  v5[90] = a2;
  uint64_t v6 = (uint64_t)(v5 + 24);
  v5[91] = a3;
  v5[92] = v3;
  swift_task_dealloc();
  if (v3)
  {
    sub_10001729C((uint64_t)(v5 + 24), &qword_10065B8E8);
    uint64_t v7 = sub_1004CAE30;
  }
  else
  {
    uint64_t v8 = (uint64_t)(v5 + 30);
    uint64_t v9 = (void *)v5[87];
    sub_10001729C(v6, &qword_10065B8E8);

    sub_1002C672C(v8);
    uint64_t v7 = sub_1004C9D64;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1004C9D64()
{
  uint64_t v135 = v0;
  if ([*(id *)(v0 + 728) statusCode] != (id)200)
  {
    uint64_t v9 = *(void **)(v0 + 728);
    unint64_t v10 = *(void *)(v0 + 720);
    uint64_t v11 = *(void *)(v0 + 712);
    uint64_t v12 = *(void *)(v0 + 624);
    uint64_t v13 = *(void *)(v0 + 584);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v14 = [v9 statusCode];
    sub_10029D4AC();
    swift_allocError();
    *(void *)uint64_t v15 = v14;
    *(unsigned char *)(v15 + 8) = 0;
    swift_willThrow();

    sub_100013510(v11, v10);
    swift_release();
    sub_1004CB7F8(v13, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    swift_release();
    uint64_t v8 = v12;
    goto LABEL_5;
  }
  uint64_t v1 = (uint64_t *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 736);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1004CB9C0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 728);
    unint64_t v4 = *(void *)(v0 + 720);
    uint64_t v5 = *(void *)(v0 + 712);
    uint64_t v6 = *(void *)(v0 + 624);
    uint64_t v7 = *(void *)(v0 + 584);
    swift_bridgeObjectRelease();
    swift_release();

    sub_100013510(v5, v4);
    swift_release();
    sub_1004CB7F8(v7, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v8 = v6;
LABEL_5:
    sub_1004CB7F8(v8, type metadata accessor for ConfigurationBag);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  swift_release();
  if (*(void *)(*v1 + 16)) {
    sub_100555930(*v1);
  }
  else {
    swift_bridgeObjectRelease();
  }
  uint64_t v132 = (void *)(v0 + 16);
  if (*(unsigned char *)(*(void *)(v0 + 440) + 175))
  {
    uint64_t v18 = *(void **)(v0 + 728);
    unint64_t v19 = *(void *)(v0 + 720);
    uint64_t v20 = *(void *)(v0 + 712);
    sub_1004CB7F8(*(void *)(v0 + 584), type metadata accessor for ConfigurationBag.UpdatesConfiguration);

    sub_100013510(v20, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Date.init()();
    id v21 = [self standardUserDefaults];
    if (v21)
    {
      char v22 = v21;
      unint64_t v23 = *(void **)(v0 + 728);
      uint64_t v24 = *(void *)(v0 + 712);
      unint64_t v125 = *(void *)(v0 + 720);
      uint64_t v128 = *(void *)(v0 + 584);
      uint64_t v26 = *(void *)(v0 + 496);
      uint64_t v25 = *(void *)(v0 + 504);
      uint64_t v27 = *(void *)(v0 + 488);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      NSString v29 = String._bridgeToObjectiveC()();
      [v22 setObject:isa forKey:v29];

      swift_bridgeObjectRelease();
      sub_100013510(v24, v125);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      uint64_t v30 = v128;
    }
    else
    {
      uint64_t v31 = *(void **)(v0 + 728);
      unint64_t v32 = *(void *)(v0 + 720);
      uint64_t v33 = *(void *)(v0 + 712);
      uint64_t v34 = *(void *)(v0 + 584);
      uint64_t v36 = *(void *)(v0 + 496);
      uint64_t v35 = *(void *)(v0 + 504);
      uint64_t v37 = *(void *)(v0 + 488);
      swift_bridgeObjectRelease();

      sub_100013510(v33, v32);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      uint64_t v30 = v34;
    }
    sub_1004CB7F8(v30, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  }
  uint64_t v117 = (Boolean *)(v0 + 233);
  uint64_t v116 = v0 + 440;
  unint64_t v38 = *(void *)(v0 + 672);
  for (int64_t i = *(void *)(v0 + 664); ; int64_t i = v129)
  {
    if (v38)
    {
      unint64_t v40 = __clz(__rbit64(v38));
      uint64_t v41 = (v38 - 1) & v38;
      unint64_t v42 = v40 | (i << 6);
      uint64_t v43 = *(void *)(v0 + 656);
LABEL_22:
      uint64_t v44 = *(void *)(v0 + 552);
      sub_100458EB8(*(void *)(v43 + 48) + *(void *)(*(void *)(v0 + 576) + 72) * v42, v44);
      uint64_t v45 = *(void *)(v43 + 56);
      uint64_t v46 = sub_1000172F8(&qword_1006652D8);
      *(void *)(v44 + *(int *)(v46 + 48)) = *(void *)(v45 + 8 * v42);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v44, 0, 1, v46);
      swift_bridgeObjectRetain();
      goto LABEL_41;
    }
    int64_t v47 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
    }
    int64_t v48 = (unint64_t)((1 << *(unsigned char *)(v0 + 234)) + 63) >> 6;
    if (v47 < v48)
    {
      uint64_t v43 = *(void *)(v0 + 656);
      uint64_t v49 = v43 + 64;
      unint64_t v50 = *(void *)(v43 + 64 + 8 * v47);
      if (v50) {
        goto LABEL_26;
      }
      int64_t v51 = i + 2;
      ++i;
      if (v47 + 1 < v48)
      {
        unint64_t v50 = *(void *)(v49 + 8 * v51);
        if (v50) {
          goto LABEL_29;
        }
        int64_t i = v47 + 1;
        if (v47 + 2 < v48)
        {
          unint64_t v50 = *(void *)(v49 + 8 * (v47 + 2));
          if (v50)
          {
            v47 += 2;
            goto LABEL_26;
          }
          int64_t v51 = v47 + 3;
          int64_t i = v47 + 2;
          if (v47 + 3 < v48)
          {
            unint64_t v50 = *(void *)(v49 + 8 * v51);
            if (v50)
            {
LABEL_29:
              int64_t v47 = v51;
LABEL_26:
              uint64_t v41 = (v50 - 1) & v50;
              unint64_t v42 = __clz(__rbit64(v50)) + (v47 << 6);
              int64_t i = v47;
              goto LABEL_22;
            }
            while (1)
            {
              int64_t v47 = v51 + 1;
              if (__OFADD__(v51, 1)) {
                goto LABEL_65;
              }
              if (v47 >= v48) {
                break;
              }
              unint64_t v50 = *(void *)(v49 + 8 * v47);
              ++v51;
              if (v50) {
                goto LABEL_26;
              }
            }
            int64_t i = v48 - 1;
          }
        }
      }
    }
    uint64_t v52 = *(void *)(v0 + 552);
    uint64_t v53 = sub_1000172F8(&qword_1006652D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
    uint64_t v41 = 0;
LABEL_41:
    *(void *)(v0 + 672) = v41;
    *(void *)(v0 + 664) = i;
    uint64_t v54 = *(void *)(v0 + 560);
    sub_1004CB858(*(void *)(v0 + 552), v54);
    uint64_t v55 = sub_1000172F8(&qword_1006652D8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v54, 1, v55) == 1) {
      break;
    }
    unint64_t v126 = v41;
    int64_t v129 = i;
    uint64_t v56 = *(void *)(v0 + 584);
    uint64_t v57 = *(void *)(v0 + 568);
    uint64_t v58 = *(void *)(v0 + 560);
    uint64_t v59 = *(void *)(v0 + 440);
    uint64_t v60 = *(void *)(v58 + *(int *)(v55 + 48));
    sub_1004CB8C0(v58, v56);
    *(void *)(v0 + 368) = 0;
    *(void *)(v0 + 376) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    uint64_t v61 = *(void *)(v59 + 24);
    uint64_t v62 = *(void *)(v59 + 32);
    sub_10018AC60((void *)v59, v61);
    uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 40))(v61, v62);
    uint64_t v65 = v64;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 384) = v63;
    *(void *)(v0 + 392) = v65;
    v66._uint64_t countAndFlagsBits = 45;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    uint64_t v67 = v56 + *(int *)(v57 + 20);
    v68._uint64_t countAndFlagsBits = URL.absoluteString.getter();
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = 0xD000000000000017;
    v69._object = (void *)0x80000001005C0710;
    String.append(_:)(v69);
    uint64_t v70 = *(void *)(v0 + 392);
    *(void *)(v0 + 680) = *(void *)(v0 + 384);
    *(void *)(v0 + 688) = v70;
    if (*(unsigned char *)(v59 + 175)) {
      goto LABEL_58;
    }
    double v71 = (double)*(uint64_t *)(*(void *)(v0 + 584) + *(int *)(*(void *)(v0 + 568) + 24)) * 3600.0;
    if (os_variant_has_internal_content())
    {
      *uint64_t v117 = 0;
      os_log_type_t v72 = (__CFString *)String._bridgeToObjectiveC()();
      uint64_t v73 = (__CFString *)String._bridgeToObjectiveC()();
      int AppBooleanValue = CFPreferencesGetAppBooleanValue(v72, v73, v117);

      if (*v117)
      {
        if (AppBooleanValue)
        {
          static Logger.updates.getter();
          uint64_t v75 = Logger.logObject.getter();
          os_log_type_t v76 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v75, v76))
          {
            uint64_t v77 = (uint8_t *)swift_slowAlloc();
            uint64_t v122 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v77 = 138412290;
            uint64_t v78 = sub_1005163F0();
            *(void *)(v0 + 432) = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v122 = v78;
            _os_log_impl((void *)&_mh_execute_header, v75, v76, "[%@] Skipping minimum polling interval due to internal default being set", v77, 0xCu);
            sub_1000172F8(&qword_10065DB10);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          uint64_t v79 = *(void *)(v0 + 544);
          uint64_t v80 = *(void *)(v0 + 528);
          uint64_t v81 = *(void *)(v0 + 520);

          (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
          double v71 = 0.0;
        }
      }
    }
    uint64_t v82 = *(void *)(v0 + 488);
    uint64_t v83 = *(void *)(v0 + 496);
    uint64_t v85 = *(void *)(v0 + 472);
    uint64_t v84 = *(void *)(v0 + 480);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v85, 1, 1, v82);
    sub_10029AD08(1, v85, v84);
    sub_10001729C(v85, &qword_10065B8F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v84, 1, v82) == 1)
    {
      sub_10001729C(*(void *)(v0 + 480), &qword_10065B8F0);
LABEL_58:
      uint64_t v106 = *(void *)(*(void *)v116 + 144);
      uint64_t v105 = *(void *)(*(void *)v116 + 152);
      char v107 = *(unsigned char *)(*(void *)v116 + 172);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v107)
      {
        uint64_t v131 = 0x534F64615069;
        unint64_t v133 = 0xE600000000000000;
      }
      else
      {
        uint64_t v124 = v106;
        uint64_t v127 = v105;
        uint64_t v108 = *(void *)(v0 + 456);
        uint64_t v109 = *(void *)(v0 + 464);
        uint64_t v110 = *(void *)(v0 + 448);
        static Platform.iOS.getter();
        uint64_t v131 = Platform.description.getter();
        unint64_t v133 = v111;
        uint64_t v112 = v110;
        uint64_t v106 = v124;
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v112);
        uint64_t v105 = v127;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = &type metadata for UpdatesRequest;
      *(void *)(v0 + 272) = sub_1004CB924();
      uint64_t v113 = (void *)swift_allocObject();
      *(void *)(v0 + 240) = v113;
      v113[2] = v60;
      v113[3] = v131;
      v113[4] = v133;
      v113[5] = v106;
      v113[6] = v105;
      *(unsigned char *)(v0 + 280) = 0;
      *(void *)(v0 + 696) = sub_1005163F0();
      sub_1002C66D0(v0 + 240, v0 + 192);
      uint64_t v114 = dword_10065F848;
      uint64_t v115 = (void *)swift_task_alloc();
      *(void *)(v0 + 704) = v115;
      *uint64_t v115 = v0;
      v115[1] = sub_1004C9BD8;
      return ((uint64_t (*)(uint64_t, char, uint64_t, uint64_t, char))((char *)&dword_10065F848 + v114))(v67, 1, v0 + 192, 0, 1);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 496) + 32))(*(void *)(v0 + 512), *(void *)(v0 + 480), *(void *)(v0 + 488));
    Date.timeIntervalSinceNow.getter();
    if (fabs(v86) >= v71)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 496) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 488));
      goto LABEL_58;
    }
    uint64_t v87 = *(void *)(v0 + 440);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static Logger.updates.getter();
    sub_1004CBA14(v87, (uint64_t)v132);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    BOOL v90 = os_log_type_enabled(v88, v89);
    uint64_t v91 = *(void *)(v0 + 584);
    uint64_t v92 = *(void *)(v0 + 536);
    uint64_t v93 = *(void *)(v0 + 528);
    uint64_t v123 = *(void *)(v0 + 520);
    uint64_t v94 = *(void *)(v0 + 512);
    uint64_t v96 = *(void *)(v0 + 488);
    uint64_t v95 = *(void *)(v0 + 496);
    if (v90)
    {
      uint64_t v121 = *(void *)(v0 + 512);
      uint64_t v97 = swift_slowAlloc();
      uint64_t v119 = (void *)swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v97 = 138412546;
      os_log_t log = v88;
      uint64_t v98 = sub_1005163F0();
      *(void *)(v0 + 416) = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v119 = v98;
      *(_WORD *)(v97 + 12) = 2082;
      uint64_t v120 = v96;
      uint64_t v99 = *(void *)(v0 + 40);
      uint64_t v100 = *(void *)(v0 + 48);
      sub_10018AC60(v132, v99);
      uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 40))(v99, v100);
      *(void *)(v0 + 424) = sub_1000143F4(v101, v102, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002F9CC8((uint64_t)v132);
      _os_log_impl((void *)&_mh_execute_header, log, v89, "[%@] minimum polling interval not met for %{public}s, skipping check", (uint8_t *)v97, 0x16u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v123);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v121, v120);
    }
    else
    {

      sub_1002F9CC8((uint64_t)v132);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v123);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    }
    sub_1004CB7F8(v91, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
    unint64_t v38 = v126;
  }
  uint64_t v103 = *(void *)(v0 + 624);
  swift_release();
  swift_release();
  sub_1004CB7F8(v103, type metadata accessor for ConfigurationBag);
  uint64_t v130 = *(void *)(v0 + 408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v104 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v104(v130);
}

uint64_t sub_1004CAE30()
{
  uint64_t v1 = (void *)v0[87];
  uint64_t v2 = v0[78];
  uint64_t v3 = v0[73];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_1004CB7F8(v3, type metadata accessor for ConfigurationBag.UpdatesConfiguration);
  swift_release();
  sub_1004CB7F8(v2, type metadata accessor for ConfigurationBag);
  sub_1002C672C((uint64_t)(v0 + 30));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1004CB020()
{
  swift_release();
  sub_100014524(v0 + 328);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004CB19C(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for Logger();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  return _swift_task_switch(sub_1004CB260, 0, 0);
}

uint64_t sub_1004CB260()
{
  sub_10019B17C(v0[13], (uint64_t)(v0 + 2));
  sub_1000172F8(&qword_10065C450);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v0[7];
    uint64_t v1 = v0[8];
    v0[17] = v2;
    v0[18] = v1;
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1005163F0();
    v0[19] = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[20] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1004CB414;
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[12];
    return sub_1002CDB18(v5, v2, v1, v6, v3);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MarketplaceKitError();
    sub_10026F43C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for MarketplaceKitError.featureUnavailable(_:), v8);
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1004CB414()
{
  uint64_t v2 = (void *)*v1;
  v2[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004CB574, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)v2[19];
    swift_bridgeObjectRelease_n();

    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1004CB574()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0;

  swift_bridgeObjectRelease();
  static Logger.updates.getter();
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = *(void *)(v0 + 144);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412546;
    uint64_t v7 = sub_1005163F0();
    *(void *)(v0 + 72) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    *(_WORD *)(v5 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 80) = sub_1000143F4(v13, v4, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%@] Error loading configuration bag for %{public}s", (uint8_t *)v5, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v1 + 112);
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v1 + 8);
  return v11();
}

uint64_t sub_1004CB7F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004CB858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_1006652C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004CB8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationBag.UpdatesConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004CB924()
{
  unint64_t result = qword_1006652E0;
  if (!qword_1006652E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006652E0);
  }
  return result;
}

uint64_t sub_1004CB978()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

unint64_t sub_1004CB9C0()
{
  unint64_t result = qword_1006652E8;
  if (!qword_1006652E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006652E8);
  }
  return result;
}

uint64_t sub_1004CBA14(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for FetchLatestUpdatesTask(uint64_t a1)
{
  sub_100014524(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FetchLatestUpdatesTask(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v10;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FetchLatestUpdatesTask(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  *(unsigned char *)(a1 + 174) = *(unsigned char *)(a2 + 174);
  *(unsigned char *)(a1 + 175) = *(unsigned char *)(a2 + 175);
  return a1;
}

__n128 initializeWithTake for FetchLatestUpdatesTask(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for FetchLatestUpdatesTask(uint64_t a1, uint64_t a2)
{
  sub_100014524(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  *(unsigned char *)(a1 + 174) = *(unsigned char *)(a2 + 174);
  *(unsigned char *)(a1 + 175) = *(unsigned char *)(a2 + 175);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchLatestUpdatesTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchLatestUpdatesTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchLatestUpdatesTask()
{
  return &type metadata for FetchLatestUpdatesTask;
}

ValueMetadata *type metadata accessor for VariantDescriptor()
{
  return &type metadata for VariantDescriptor;
}

unint64_t sub_1004CBEF4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004CBF24();
  unint64_t result = sub_1004CBF78();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004CBF24()
{
  unint64_t result = qword_1006652F0;
  if (!qword_1006652F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006652F0);
  }
  return result;
}

unint64_t sub_1004CBF78()
{
  unint64_t result = qword_1006652F8[0];
  if (!qword_1006652F8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1006652F8);
  }
  return result;
}

uint64_t sub_1004CBFCC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  unint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  unint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  __chkstk_darwin(v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

void sub_1004CC3C8(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

id sub_1004CC3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  if (a1)
  {
    __chkstk_darwin(a1);
    uint64_t v17 = a3;
    uint64_t v18 = v9;
    swift_bridgeObjectRetain();
    uint64_t v19 = a3;
    swift_getExtendedExistentialTypeMetadata_unique();
    uint64_t v10 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1004CBFCC((void (*)(char *, char *))sub_1004CC608, (uint64_t)v16, v10, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v12);
    swift_bridgeObjectRelease();
    uint64_t v8 = &selRef_predicateMatchingAnyPredicates_;
  }
  else
  {
    __chkstk_darwin(a1);
    uint64_t v17 = a3;
    uint64_t v18 = v4;
    swift_bridgeObjectRetain();
    uint64_t v19 = a3;
    swift_getExtendedExistentialTypeMetadata_unique();
    uint64_t v5 = type metadata accessor for Array();
    uint64_t v6 = swift_getWitnessTable();
    sub_1004CBFCC((void (*)(char *, char *))sub_1004CC608, (uint64_t)v16, v5, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Never, v6, (uint64_t)&protocol witness table for Never, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = &selRef_predicateMatchingAllPredicates_;
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(self, *v8, isa);

  return v14;
}

unint64_t sub_1004CC608@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004CC620(a1, a2);
}

unint64_t sub_1004CC620@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10018AC60(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  unint64_t result = sub_1004CC698();
  a2[3] = result;
  *a2 = v5;
  return result;
}

unint64_t sub_1004CC698()
{
  unint64_t result = qword_100663540;
  if (!qword_100663540)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100663540);
  }
  return result;
}

id sub_1004CC6D8(uint64_t a1)
{
  return sub_1004CC3D0(*v1, *((void *)v1 + 1), *(void *)(a1 + 16));
}

id sub_1004CC6EC()
{
  uint64_t v0 = self;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 isNullPredicateWithProperty:v1];

  return v2;
}

id sub_1004CC7D0(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v4 = v1 + *(int *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v5 = v13;
  long long v14 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = sub_10019CE94(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v6, v4, v5);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  SQLiteEncodeValue(_:using:)(v12, v15);
  swift_release();
  if (v3) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 1;
  }
  sub_100014524((uint64_t)v12);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10018AC60(v15, v15[3]);
  uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v10 = [self predicateWithProperty:v8 value:v9 comparisonType:v7];
  swift_unknownObjectRelease();

  sub_100014524((uint64_t)v15);
  return v10;
}

id sub_1004CC9C4(uint64_t a1)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v3 = JSONEncoder.init()();
  if (*(unsigned char *)(v1 + *(int *)(a1 + 60)) == 1)
  {
    uint64_t v4 = self;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 16);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of RawRepresentable.rawValue.getter();
    NSString v7 = String._bridgeToObjectiveC()();
    uint64_t v8 = swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v1 + *(int *)(a1 + 64));
    __chkstk_darwin(v8);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v28 = v6;
    uint64_t v29 = v9;
    uint64_t v30 = v5;
    long long v31 = *(_OWORD *)(a1 + 40);
    uint64_t v32 = v3;
    uint64_t v10 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1004CBFCC((void (*)(char *, char *))sub_1004CED80, (uint64_t)v27, v10, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v12);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [v4 doesNotContainPredicateWithProperty:v7 values:isa];

    swift_release();
    return v14;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 16);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v18 = dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v33 = *(void *)(v1 + *(int *)(a1 + 64));
    __chkstk_darwin(v18);
    uint64_t v19 = *(void *)(a1 + 24);
    uint64_t v28 = v17;
    uint64_t v29 = v19;
    uint64_t v30 = v16;
    long long v31 = *(_OWORD *)(a1 + 40);
    uint64_t v32 = v3;
    uint64_t v20 = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    uint64_t v21 = swift_getWitnessTable();
    uint64_t v23 = sub_1004CBFCC((void (*)(char *, char *))sub_1004CED64, (uint64_t)v27, v20, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Never, v21, (uint64_t)&protocol witness table for Never, v22);
    swift_bridgeObjectRelease();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v33 = v23;
    swift_bridgeObjectRetain();
    sub_1000172F8(&qword_100662430);
    uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v26 = [self containsPredicateWithProperty:v24 values:v25];
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    return v26;
  }
}

uint64_t sub_1004CCDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  void v11[5] = a4;
  _OWORD v11[3] = a2;
  v11[4] = a3;
  uint64_t v9 = sub_10019CE94(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v9, a1, a2);
  SQLiteEncodeValue(_:using:)(v11, a5);
  if (!v5) {
    return sub_100014524((uint64_t)v11);
  }
  sub_100014524((uint64_t)v11);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1004CCE8C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1004CCF2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1004CD008(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_1004CD084(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1004CD0FC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1004CD174(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1004CD1EC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1004CD264(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_1004CD414(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1004CD650);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for SQLitePredicateIsNull()
{
  return sub_100259AC0();
}

uint64_t sub_1004CD690(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004CD6C8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004CD70C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for SQLitePredicateGroup()
{
  return sub_100259AC0();
}

uint64_t sub_1004CD760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_1004CD768()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1004CD824(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
    *(void *)((((unint64_t)a1 + v6) & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1004CD93C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004CD9D0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004CDA7C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004CDB34(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t sub_1004CDBDC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004CDC8C(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1004CDE28);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((((unint64_t)a1 + v8) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void sub_1004CDE3C(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 16;
  if ((v8 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if ((v8 & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if ((v8 & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1004CE038);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = ((unint64_t)a1 + v8) & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = (a2 - 1);
          }
          *(void *)(v18 + 8) = v19;
        }
        else
        {
          uint64_t v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SQLitePredicateContains()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004CE078()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_1004CE164(void *a1, void *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((v11 + v8 + 1) & (unint64_t)~v11) + *(void *)(*(void *)(v9 - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v8 + v11 + 1) & ~v11, ((unint64_t)a2 + v8 + v11 + 1) & ~v11, v9);
  }
  return a1;
}

uint64_t sub_1004CE304(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (a1 + *(unsigned __int8 *)(v6 + 80) + *(void *)(v5 + 56) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t sub_1004CE3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = (unsigned char *)(v8 + a1);
  uint64_t v10 = (unsigned char *)(v8 + a2);
  unsigned char *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((unint64_t)&v9[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (unint64_t)&v10[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1004CE4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = (unsigned char *)(v8 + a1);
  uint64_t v10 = (unsigned char *)(v8 + a2);
  unsigned char *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))((unint64_t)&v9[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (unint64_t)&v10[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1004CE590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = (unsigned char *)(v8 + a1);
  uint64_t v10 = (unsigned char *)(v8 + a2);
  unsigned char *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((unint64_t)&v9[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (unint64_t)&v10[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1004CE670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = (unsigned char *)(v8 + a1);
  uint64_t v10 = (unsigned char *)(v8 + a2);
  unsigned char *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((unint64_t)&v9[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (unint64_t)&v10[*(unsigned __int8 *)(v11 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_1004CE750(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v14 = ((v11 + v10 + 1) & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_28:
      if (v8 == v13)
      {
        uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
        return v22(a1, v8, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v23 = (unsigned __int8 *)a1 + v10;
        if (v12 > 0xFE)
        {
          uint64_t v25 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v25((unint64_t)&v23[v11 + 1] & ~v11);
        }
        else
        {
          unsigned int v24 = *v23;
          if (v24 >= 2) {
            return v24 - 1;
          }
          else {
            return 0;
          }
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_28;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v20 = ((v11 + v10 + 1) & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v13 + (v21 | v19) + 1;
}

void sub_1004CE9F8(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(void *)(v9 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v10 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v14 <= 0xFE) {
    unsigned int v15 = 254;
  }
  else {
    unsigned int v15 = v14;
  }
  size_t v16 = ((v13 + v12 + 1) & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v15)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v15 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v15 < a2)
  {
    unsigned int v18 = ~v15 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1004CED1CLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v10 == v15)
        {
          uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v22(a1, a2, v10, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v23 = &a1[v12];
          if (v14 > 0xFE)
          {
            unsigned int v24 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
            v24((unint64_t)&v23[v13 + 1] & ~v13, a2);
          }
          else
          {
            *uint64_t v23 = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SQLitePredicateComparison()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004CED5C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_1004CED64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004CED9C(a1, a2);
}

uint64_t sub_1004CED80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004CED9C(a1, a2);
}

uint64_t sub_1004CED9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004CCDB0(a1, v2[3], v2[5], v2[6], a2);
}

uint64_t sub_1004CEDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for NWEndpoint();
  v4[6] = v5;
  _OWORD v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return _swift_task_switch(sub_1004CEEA0, 0, 0);
}

uint64_t sub_1004CEEA0()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v1, v4, v6);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NWEndpoint.url(_:), v3);
  type metadata accessor for NWParameters();
  static NWParameters.udp.getter();
  type metadata accessor for NWConnection();
  swift_allocObject();
  uint64_t v7 = NWConnection.init(to:using:)();
  v0[9] = v7;
  if (v5)
  {
    NWConnection.parameters.getter();
    swift_bridgeObjectRetain();
    NWParameters.sourceApplicationBundleID.setter();
    swift_release();
  }
  uint64_t v8 = swift_allocObject();
  v0[10] = v8;
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = swift_task_alloc();
  v0[11] = v9;
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[12] = v10;
  uint64_t v11 = type metadata accessor for NWPath();
  *uint64_t v10 = v0;
  v10[1] = sub_1004CF0A0;
  uint64_t v12 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v12, 0, 0, 0xD000000000000025, 0x80000001005BDEB0, sub_1004D2B54, v9, v11);
}

uint64_t sub_1004CF0A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004CF1B8, 0, 0);
}

uint64_t sub_1004CF1B8()
{
  NWConnection.forceCancel()();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1004CF23C()
{
  Swift::String_optional v0 = URL.host(percentEncoded:)(1);
  if (v0.value._object)
  {
    URL.port.getter();
    if ((v1 & 1) == 0)
    {
      v2._uint64_t countAndFlagsBits = 58;
      v2._object = (void *)0xE100000000000000;
      String.append(_:)(v2);
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
    }
  }
  return v0.value._countAndFlagsBits;
}

uint64_t sub_1004CF2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v2 = sub_1000172F8(&qword_100665590);
  __chkstk_darwin(v2);
  uint64_t v54 = (uint64_t *)((char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = type metadata accessor for DispatchTimeInterval();
  uint64_t v63 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v62 = (uint64_t *)((char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v64 = *(void *)(v5 - 8);
  uint64_t v65 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v60 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v48 - v8;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v58 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unsigned int v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_semaphore_t v57 = dispatch_semaphore_create(0);
  uint64_t v67 = swift_allocBox();
  uint64_t v17 = v16;
  unsigned int v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v18(v16, v1, v9);
  uint64_t v51 = v17;
  uint64_t v53 = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = v1;
  URL._bridgeToObjectiveC()(v20);
  uint64_t v59 = v21;
  sub_100176BD4();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.utility(_:), v12);
  uint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = v56;
  uint64_t v52 = v19;
  uint64_t v50 = v10 + 16;
  uint64_t v49 = v18;
  v18((uint64_t)v56, v19, v9);
  unint64_t v24 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v25 = (v58 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v67;
  unint64_t v27 = v26 + v24;
  uint64_t v28 = v9;
  uint64_t v58 = v10;
  uint64_t v29 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v29(v27, v23, v9);
  dispatch_semaphore_t v30 = v57;
  *(void *)(v26 + v25) = v57;
  aBlock[4] = sub_1004D296C;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004D1C54;
  id aBlock[3] = &unk_10064A238;
  long long v31 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v32 = v30;
  swift_release();
  uint64_t v33 = v59;
  ACSLocateCachingServer();
  _Block_release(v31);

  uint64_t v34 = v60;
  static DispatchTime.now()();
  uint64_t v36 = v62;
  uint64_t v35 = v63;
  *uint64_t v62 = 10;
  uint64_t v37 = v66;
  (*(void (**)(void *, void, uint64_t))(v35 + 104))(v36, enum case for DispatchTimeInterval.seconds(_:), v66);
  unint64_t v38 = v61;
  DispatchTime.advanced(by:)();
  (*(void (**)(void *, uint64_t))(v35 + 8))(v36, v37);
  uint64_t v39 = v65;
  unint64_t v40 = *(void (**)(char *, uint64_t))(v64 + 8);
  v40(v34, v65);
  OS_dispatch_semaphore.wait(timeout:)();
  v40(v38, v39);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    uint64_t v41 = v51;
    swift_beginAccess();
    unint64_t v42 = v54;
    sub_1004D2A2C(v41, (uint64_t)v54);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v44 = v55;
    uint64_t v45 = v58;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v68 = *v42;
      sub_1000172F8(&qword_10065B260);
      swift_willThrowTypedImpl();

      swift_errorRelease();
      uint64_t v46 = 1;
    }
    else
    {
      v29(v55, (char *)v42, v28);

      uint64_t v46 = 0;
    }
  }
  else
  {

    uint64_t v44 = v55;
    v49(v55, v52, v28);
    uint64_t v46 = 0;
    uint64_t v45 = v58;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44, v46, 1, v28);
  return swift_release();
}

unint64_t sub_1004CF960(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = sub_1004D1DA8(a1, a2, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004D1EA0);
    char v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v8 = (unint64_t)sub_1004D1EA0(v7, v5, 10);
    char v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }
LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      unsigned int v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        unsigned int v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v21);
        unint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      unint64_t v2 = 0;
      unint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            BOOL v14 = 10 * v8 >= v13;
            unint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            char v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    unint64_t v8 = 0;
    char v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  char v10 = 1;
  unint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease();
  if (v10) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_1004CFBD4(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_1004D211C(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = sub_1004D1DA8(result, a2, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004D211C);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_1004CFE38@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v5 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for URLComponents();
  uint64_t v8 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.queryItems.setter();
  if (os_variant_has_internal_content())
  {
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v42 = 58;
    unint64_t v43 = 0xE100000000000000;
    sub_100017B14();
    if (StringProtocol.contains<A>(_:)())
    {
      uint64_t v44 = a1;
      uint64_t v45 = a2;
      uint64_t v42 = 58;
      unint64_t v43 = 0xE100000000000000;
      uint64_t v11 = (void *)StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      if (v11[2] == 2)
      {
        swift_bridgeObjectRetain();
        URLComponents.host.setter();
        if (v11[2] < 2uLL)
        {
          __break(1u);
        }
        else
        {
          uint64_t v13 = v11[6];
          unint64_t v12 = v11[7];
          swift_bridgeObjectRetain();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v15 = HIBYTE(v12) & 0xF;
          uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
          if ((v12 & 0x2000000000000000) != 0) {
            uint64_t v17 = HIBYTE(v12) & 0xF;
          }
          else {
            uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
          }
          if (v17)
          {
            if ((v12 & 0x1000000000000000) != 0)
            {
              sub_1004D1DA8(v13, v12, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004D211C);
            }
            else
            {
              if ((v12 & 0x2000000000000000) != 0)
              {
                uint64_t v44 = v13;
                uint64_t v45 = v12 & 0xFFFFFFFFFFFFFFLL;
                if (v13 == 43)
                {
                  if (v15)
                  {
                    if (v15 != 1
                      && (BYTE1(v13) - 48) <= 9u
                      && v15 != 2
                      && (BYTE2(v13) - 48) <= 9u)
                    {
                      uint64_t v24 = 10 * (BYTE1(v13) - 48) + (BYTE2(v13) - 48);
                      uint64_t v25 = v15 - 3;
                      if (v25)
                      {
                        uint64_t v26 = (unsigned __int8 *)&v44 + 3;
                        do
                        {
                          unsigned int v27 = *v26 - 48;
                          if (v27 > 9) {
                            break;
                          }
                          uint64_t v28 = 10 * v24;
                          if ((unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63) {
                            break;
                          }
                          uint64_t v24 = v28 + v27;
                          if (__OFADD__(v28, v27)) {
                            break;
                          }
                          ++v26;
                          --v25;
                        }
                        while (v25);
                      }
                    }
                    goto LABEL_53;
                  }
                }
                else
                {
                  if (v13 != 45)
                  {
                    if (v15)
                    {
                      if ((v13 - 48) <= 9u && v15 != 1 && (BYTE1(v13) - 48) <= 9u)
                      {
                        uint64_t v29 = 10 * (v13 - 48) + (BYTE1(v13) - 48);
                        uint64_t v30 = v15 - 2;
                        if (v30)
                        {
                          long long v31 = (unsigned __int8 *)&v44 + 2;
                          do
                          {
                            unsigned int v32 = *v31 - 48;
                            if (v32 > 9) {
                              break;
                            }
                            uint64_t v33 = 10 * v29;
                            if ((unsigned __int128)(v29 * (__int128)10) >> 64 != (10 * v29) >> 63) {
                              break;
                            }
                            uint64_t v29 = v33 + v32;
                            if (__OFADD__(v33, v32)) {
                              break;
                            }
                            ++v31;
                            --v30;
                          }
                          while (v30);
                        }
                      }
                    }
                    goto LABEL_53;
                  }
                  if (v15)
                  {
                    if (v15 != 1
                      && (BYTE1(v13) - 48) <= 9u
                      && v15 != 2
                      && (BYTE2(v13) - 48) <= 9u)
                    {
                      uint64_t v34 = -10 * (BYTE1(v13) - 48) - (BYTE2(v13) - 48);
                      uint64_t v35 = v15 - 3;
                      if (v35)
                      {
                        uint64_t v36 = (unsigned __int8 *)&v44 + 3;
                        do
                        {
                          unsigned int v37 = *v36 - 48;
                          if (v37 > 9) {
                            break;
                          }
                          uint64_t v38 = 10 * v34;
                          if ((unsigned __int128)(v34 * (__int128)10) >> 64 != (10 * v34) >> 63) {
                            break;
                          }
                          uint64_t v34 = v38 - v37;
                          if (__OFSUB__(v38, v37)) {
                            break;
                          }
                          ++v36;
                          --v35;
                        }
                        while (v35);
                      }
                    }
                    goto LABEL_53;
                  }
                  __break(1u);
                }
                __break(1u);
                return result;
              }
              if ((v13 & 0x1000000000000000) != 0) {
                uint64_t v18 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else {
                uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              }
              sub_1004D211C(v18, v16, 10);
            }
          }
        }
LABEL_53:
        swift_bridgeObjectRelease();
        URLComponents.port.setter();
        goto LABEL_15;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  URLComponents.url.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_1002BDBEC((uint64_t)v7);
    uint64_t v23 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v20, v7, v21);
    uint64_t v23 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, v23, 1, v21);
}

uint64_t sub_1004D0418()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String_optional v4 = URL.host(percentEncoded:)(1);
  if (v4.value._object)
  {
    sub_1004E8A24(v4.value._countAndFlagsBits, (unint64_t)v4.value._object);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    static Logger.general.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "URL does not have a valid host.", v9, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  return v6;
}

uint64_t sub_1004D0588()
{
  uint64_t v0 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String_optional v7 = URL.host(percentEncoded:)(1);
  if (!v7.value._object) {
    return 0;
  }
  unint64_t v8 = ((unint64_t)v7.value._object >> 56) & 0xF;
  if (((uint64_t)v7.value._object & 0x2000000000000000) == 0) {
    unint64_t v8 = v7.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = URL.scheme.getter();
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      URLComponents.init()();
      URLComponents.scheme.setter();
      URLComponents.host.setter();
      URL.port.getter();
      URLComponents.port.setter();
      URLComponents.url.getter();
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v13) != 1)
      {
        uint64_t v11 = URL.absoluteString.getter();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v13);
        return v11;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      sub_1002BDBEC((uint64_t)v2);
      return 0;
    }
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1004D0820(char a1)
{
  int v1 = a1 & 1;
  uint64_t v2 = type metadata accessor for Logger();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for URLResourceValues();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1004D11C8();
  if ((result & 1) != v1)
  {
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    URL.setResourceValues(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1004D0BDC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for NWInterface.InterfaceType();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for NWEndpoint();
  v1[6] = v3;
  v1[7] = *(void *)(v3 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for NWPath();
  v1[9] = v4;
  v1[10] = *(void *)(v4 - 8);
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_1004D0D54, 0, 0);
}

uint64_t sub_1004D0D54()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[2];
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for NWEndpoint.url(_:), v3);
  type metadata accessor for NWParameters();
  static NWParameters.udp.getter();
  type metadata accessor for NWConnection();
  swift_allocObject();
  uint64_t v6 = NWConnection.init(to:using:)();
  v0[12] = v6;
  uint64_t v7 = swift_allocObject();
  v0[13] = v7;
  *(unsigned char *)(v7 + 16) = 0;
  uint64_t v8 = swift_task_alloc();
  v0[14] = v8;
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  void *v9 = v0;
  v9[1] = sub_1004D0F14;
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v10, 0, 0, 0xD000000000000025, 0x80000001005BDEB0, sub_10033E8A0, v8, v11);
}

uint64_t sub_1004D0F14()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004D102C, 0, 0);
}

uint64_t sub_1004D102C()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  NWConnection.forceCancel()();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NWInterface.InterfaceType.loopback(_:), v6);
  char v7 = NWPath.usesInterfaceType(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8(v7 & 1);
}

uint64_t sub_1004D1150()
{
  uint64_t v1 = sub_1000172F8(&qword_100660C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + 16, v1);

  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004D11C8()
{
  uint64_t v0 = type metadata accessor for URL();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for Logger();
  _OWORD v11[3] = *(void *)(v1 - 8);
  v11[4] = v1;
  __chkstk_darwin(v1);
  void v11[5] = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URLResourceValues();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_10065B558);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 32) = NSURLIsExcludedFromBackupKey;
  uint64_t v8 = NSURLIsExcludedFromBackupKey;
  sub_100332774(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  char v9 = URLResourceValues.isExcludedFromBackup.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9 & 1;
}

void sub_1004D165C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[1] = a2;
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_10065B278);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  swift_retain();
  NWConnection.pathUpdateHandler.setter();
  sub_100176BD4();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  uint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  NWConnection.start(queue:)();
}

uint64_t sub_1004D1898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath();
  uint64_t result = __chkstk_darwin(v4);
  if ((atomic_exchange((atomic_uchar *volatile)(a2 + 16), 1u) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
    sub_1000172F8(&qword_10065B278);
    return CheckedContinuation.resume(returning:)();
  }
  return result;
}

uint64_t sub_1004D1984()
{
  uint64_t v1 = sub_1000172F8(&qword_10065B278);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004D1A54(uint64_t a1)
{
  sub_1000172F8(&qword_10065B278);
  uint64_t v3 = *(void *)(v1 + 16);

  return sub_1004D1898(a1, v3);
}

Swift::Int sub_1004D1ACC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_1000172F8(&qword_100665590);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = swift_projectBox();
  if (a1)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (a3)
    {
      type metadata accessor for CFError(0);
      sub_1004D2AFC();
      uint64_t v12 = swift_allocError();
      *uint64_t v13 = a3;
      *uint64_t v10 = v12;
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      id v14 = a3;
      goto LABEL_6;
    }
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v10, a5, v16);
  }
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
LABEL_6:
  sub_1004D2A94((uint64_t)v10, v11);
  return OS_dispatch_semaphore.signal()();
}

void sub_1004D1C54(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t sub_1004D1CFC(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_1004D1D78(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_1004D1EA0(a1, a2, a3);
}

uint64_t sub_1004D1D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004D1DA8(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004D1EA0);
}

uint64_t sub_1004D1DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    id v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1004D2398();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    id v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    id v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1004D1EA0(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1004D211C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1004D2398()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1004D2418(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1004D2418(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1004D2570(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100014940(v9, 0),
          unint64_t v12 = sub_1004D2670((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1004D2570(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1004D1CFC(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1004D1CFC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1004D2670(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1004D1CFC(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1004D1CFC(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1004D2884()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

Swift::Int sub_1004D296C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1004D1ACC(a1, a2, a3, v8, v9);
}

uint64_t sub_1004D2A24()
{
  return swift_release();
}

uint64_t sub_1004D2A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100665590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004D2A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_100665590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004D2AFC()
{
  unint64_t result = qword_10065D608;
  if (!qword_10065D608)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10065D608);
  }
  return result;
}

uint64_t sub_1004D2B58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1004D2BAC()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchQoS.QoSClass();
  v1[14] = v3;
  v1[15] = *(void *)(v3 - 8);
  v1[16] = swift_task_alloc();
  return _swift_task_switch(sub_1004D2D10, 0, 0);
}

uint64_t sub_1004D2D10()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 64) + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 7;
  os_unfair_lock_lock(v1 + 7);
  sub_1004D4DEC(v2, v29);
  os_unfair_lock_unlock(v3);
  if (v29[0])
  {
    static Logger.restore.getter();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[RestoreStateObserver] Restore criteria fulfilled notification has already been sent", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v9 = *(void *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    goto LABEL_16;
  }
  if (BYSetupAssistantNeedsToRun())
  {
    *(_DWORD *)(v0 + 136) = 0;
    uint64_t result = BYSetupAssistantFinishedDarwinNotification;
    if (!BYSetupAssistantFinishedDarwinNotification)
    {
      __break(1u);
      return result;
    }
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 64);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100176BD4();
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v13);
    uint64_t v15 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(void *)(v0 + 48) = sub_1004D444C;
    *(void *)(v0 + 56) = v14;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256;
    *(void *)(v0 + 32) = sub_1004D2B58;
    *(void *)(v0 + 40) = &unk_10064A260;
    uint64_t v16 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    swift_release();
    uint64_t v17 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint32_t v18 = notify_register_dispatch((const char *)(v17 + 32), (int *)(v0 + 136), v15, v16);
    swift_release();
    _Block_release(v16);

    if (v18)
    {
      char v19 = (uint64_t *)(v0 + 96);
      static Logger.restore.getter();
      char v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 67109120;
        *(_DWORD *)(v0 + 140) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v23 = "[RestoreStateObserver] Failed to start observing Setup completion due to status: %u";
        uint32_t v24 = 8;
LABEL_13:
        uint64_t v25 = *v19;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, v23, v22, v24);
        swift_slowDealloc();
LABEL_15:
        uint64_t v26 = *(void *)(v0 + 72);
        uint64_t v27 = *(void *)(v0 + 80);

        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
        goto LABEL_16;
      }
    }
    else
    {
      char v19 = (uint64_t *)(v0 + 104);
      static Logger.restore.getter();
      char v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint32_t v24 = 2;
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        unint64_t v23 = "[RestoreStateObserver] Started observing Setup completion";
        goto LABEL_13;
      }
    }
    uint64_t v25 = *v19;
    goto LABEL_15;
  }
  *(unsigned char *)(swift_task_alloc() + 16) = 1;
  os_unfair_lock_lock(v3);
  sub_1004D4440(v2);
  os_unfair_lock_unlock(v3);
  swift_task_dealloc();
  sub_1004D31AC();
LABEL_16:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1004D31AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000172F8(&qword_10065B220);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_100176B74((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_100665660;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    void v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1004D33E8(int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  notify_cancel(a1);
  static Logger.restore.getter();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[RestoreStateObserver] Setup complete notification", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v9 = BYSetupAssistantNeedsToRun();
  __chkstk_darwin(v9);
  v15[-16] = v10;
  uint64_t v12 = (uint64_t)&v11[4];
  uint64_t v13 = v11 + 7;
  os_unfair_lock_lock(v11 + 7);
  sub_1004D4E04(v12);
  os_unfair_lock_unlock(v13);
  return sub_1004D31AC();
}

uint64_t sub_1004D359C(unint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065E560);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  unint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = sub_1002907F0(0, *(void *)(v8 + 16) + 1, 1, v8);
  }
  unint64_t v10 = *(void *)(v8 + 16);
  unint64_t v9 = *(void *)(v8 + 24);
  if (v10 >= v9 >> 1) {
    unint64_t v8 = sub_1002907F0(v9 > 1, v10 + 1, 1, v8);
  }
  *(void *)(v8 + 16) = v10 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, v7, v4);
  *a1 = v8;
  return result;
}

uint64_t sub_1004D3718(char a1)
{
  uint64_t v3 = sub_1000172F8(&qword_10065E560);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v7 = *(os_unfair_lock_s **)(v1 + 16);
  unint64_t v8 = v7 + 4;
  unint64_t v9 = v7 + 7;
  os_unfair_lock_lock(v7 + 7);
  sub_1004D38C4(v8, &v20);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = *(void *)(v20 + 16);
  if (v10)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v11 = v4 + 16;
    uint64_t v12 = v13;
    unint64_t v14 = (*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64);
    v19[1] = v20;
    uint64_t v15 = v20 + v14;
    uint64_t v16 = *(void *)(v11 + 56);
    char v17 = a1 & 1;
    do
    {
      v12(v6, v15, v3);
      LOBYTE(v20) = v17;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t))(v11 - 8))(v6, v3);
      v15 += v16;
      --v10;
    }
    while (v10);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

void *sub_1004D38C4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  *uint64_t result = &_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1004D38DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for NWPath();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  sub_1000172F8(&qword_100661C18);
  v4[6] = swift_task_alloc();
  uint64_t v6 = sub_1000172F8(&qword_100664100);
  _OWORD v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v7 = sub_1000172F8(&qword_100664108);
  v4[10] = v7;
  v4[11] = *(void *)(v7 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[13] = v8;
  v4[14] = *(void *)(v8 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_1004D3AF8, 0, 0);
}

uint64_t sub_1004D3AF8()
{
  type metadata accessor for NWPathMonitor();
  swift_allocObject();
  uint64_t v1 = NWPathMonitor.init()();
  v0[17] = v1;
  static Logger.restore.getter();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[RestoreStateObserver] Waiting for available network interface", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[14];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = v0[7];

  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v0[18] = v11;
  v0[19] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v11(v5, v6);
  sub_1001752CC(v1);
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[20] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1004D3CCC;
  uint64_t v13 = v0[10];
  uint64_t v14 = v0[6];
  return AsyncStream.Iterator.next(isolation:)(v14, 0, 0, v13);
}

uint64_t sub_1004D3CCC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1004D3DC8, 0, 0);
}

uint64_t sub_1004D3DC8()
{
  uint64_t v26 = v0;
  uint64_t v1 = v0[6];
  uint64_t v2 = type metadata accessor for NetworkPath();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1) {
    goto LABEL_2;
  }
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v1, v7);
  sub_100176940(v1);
  uint64_t v8 = NWPath.availableInterfaces.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v10 = *(os_unfair_lock_s **)(v0[2] + 16);
    uint64_t v11 = (uint64_t)&v10[4];
    uint64_t v12 = v10 + 7;
    os_unfair_lock_lock(v10 + 7);
    sub_1004D4128(v11, v25);
    os_unfair_lock_unlock(v12);
    if ((v25[0] & 1) == 0)
    {
      static Logger.restore.getter();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint32_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint32_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "[RestoreStateObserver] Sending restore criteria fulfilled notification", v18, 2u);
        swift_slowDealloc();
      }
      char v19 = (void (*)(uint64_t, uint64_t))v0[18];
      uint64_t v20 = v0[15];
      uint64_t v21 = v0[13];

      v19(v20, v21);
      os_unfair_lock_lock(v12);
      sub_1004D4134(v11);
      os_unfair_lock_unlock(v12);
      uint64_t v23 = v0[11];
      uint64_t v22 = v0[12];
      uint64_t v24 = v0[10];
      sub_1004D3718(1);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      goto LABEL_3;
    }
LABEL_2:
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    swift_release();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  uint64_t v13 = (void *)swift_task_alloc();
  v0[20] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1004D3CCC;
  uint64_t v14 = v0[10];
  uint64_t v15 = v0[6];
  return AsyncStream.Iterator.next(isolation:)(v15, 0, 0, v14);
}

uint64_t sub_1004D4128@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 9);
  return result;
}

uint64_t sub_1004D4134(uint64_t result)
{
  *(unsigned char *)(result + 9) = 1;
  return result;
}

uint64_t type metadata accessor for RestoreStateObserver()
{
  return self;
}

unint64_t sub_1004D4168()
{
  unint64_t result = qword_100665638[0];
  if (!qword_100665638[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100665638);
  }
  return result;
}

void sub_1004D41BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 16);
  p_os_unfair_lock_opaque = (unint64_t *)&v2[4]._os_unfair_lock_opaque;
  uint64_t v4 = v2 + 7;
  os_unfair_lock_lock(v2 + 7);
  sub_1004D4424(p_os_unfair_lock_opaque);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_1004D4218(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = *v1;
  return _swift_task_switch(sub_1004D4240, 0, 0);
}

uint64_t sub_1004D4240()
{
  if (static Task<>.isCancelled.getter())
  {
    **(unsigned char **)(v0 + 16) = 2;
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_10035DCF8;
    uint64_t v4 = *(void *)(v0 + 24);
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 40, 0, 0, 0x29287478656ELL, 0xE600000000000000, sub_10035E03C, v4, &type metadata for Bool);
  }
}

uint64_t sub_1004D435C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1006611F8 + dword_1006611F8);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 32) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10035DEE0;
  return v8(a2, a3, v3 + 16);
}

uint64_t sub_1004D4424(unint64_t *a1)
{
  return sub_1004D359C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1004D4440(uint64_t result)
{
  *(unsigned char *)(result + 8) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_1004D444C(int a1)
{
  return sub_1004D33E8(a1);
}

uint64_t sub_1004D4454()
{
  return swift_release();
}

uint64_t sub_1004D445C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004D449C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10000B238;
  return sub_1004D38DC(a1, v4, v5, v6);
}

uint64_t sub_1004D4550()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D4588(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self standardUserDefaults];
  if (!v10) {
    return 1;
  }
  uint64_t v11 = v10;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 stringForKey:v12];

  if (!v13) {
    return 1;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (v14 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      return 1;
    }
  }
  static Logger.restore.getter();
  id v20 = a3;
  swift_bridgeObjectRetain_n();
  id v21 = v20;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc();
    int v32 = v24;
    uint64_t v26 = v25;
    uint64_t v30 = (void *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v35 = (uint64_t)v21;
    uint64_t v36 = v33;
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v34 = v7;
    os_log_t v31 = v22;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v30 = v21;

    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000143F4(a1, a2, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v28 = v31;
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "[RestoreStateObserver] [%@] Already displayed prompts for build: %s", (uint8_t *)v26, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return 0;
}

uint64_t sub_1004D491C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self standardUserDefaults];
  if (v10)
  {
    uint64_t v11 = v10;
    NSString v12 = String._bridgeToObjectiveC()();
    NSString v13 = String._bridgeToObjectiveC()();
    [v11 setObject:v12 forKey:v13];
  }
  static Logger.restore.getter();
  id v14 = a3;
  swift_bridgeObjectRetain_n();
  id v15 = v14;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    os_log_t v28 = v9;
    uint64_t v19 = v18;
    int v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v29 = (uint64_t)v15;
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v19 = 138412546;
    uint64_t v26 = v7;
    uint64_t v27 = v6;
    uint64_t v20 = a1;
    id v21 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v24 = v15;

    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_1000143F4(v20, a2, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[RestoreStateObserver] [%@] Updating last marketplace restore dialogs to build: %s", (uint8_t *)v19, 0x16u);
    sub_1000172F8(&qword_10065DB10);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v27);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_1004D4C58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RestoreStateObserver.RestoreState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t initializeWithTake for RestoreStateObserver.RestoreState(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for RestoreStateObserver.RestoreState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RestoreStateObserver.RestoreState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 10)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RestoreStateObserver.RestoreState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 10) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RestoreStateObserver.RestoreState()
{
  return &type metadata for RestoreStateObserver.RestoreState;
}

ValueMetadata *type metadata accessor for RestoreStateObserver.AsyncIterator()
{
  return &type metadata for RestoreStateObserver.AsyncIterator;
}

uint64_t sub_1004D4DEC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1004D4128(a1, a2);
}

uint64_t sub_1004D4E04(uint64_t a1)
{
  return sub_1004D4440(a1);
}

uint64_t sub_1004D4E1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004D7544(&qword_100661828, (void (*)(uint64_t))type metadata accessor for Restore);
  uint64_t result = sub_1004D7544(&qword_100661910, (void (*)(uint64_t))type metadata accessor for Restore);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for Restore()
{
  uint64_t result = qword_1006656E8;
  if (!qword_1006656E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004D4EEC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v157 = a1;
  uint64_t v7 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v155 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8((uint64_t *)&unk_100661AB0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  unint64_t v137 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  NSString v13 = (char *)&v130 - v12;
  id v14 = (int *)type metadata accessor for Restore();
  uint64_t v15 = a4 + v14[10];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56);
  uint64_t v154 = v15;
  uint64_t v152 = v16;
  uint64_t v148 = v17 + 56;
  uint64_t v149 = v18;
  ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v15, 1, 1);
  uint64_t v19 = (uint64_t *)(a4 + v14[12]);
  uint64_t *v19 = 0;
  v19[1] = 0;
  uint64_t v139 = v19;
  uint64_t v20 = (uint64_t *)(a4 + v14[13]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v131 = v20;
  id v21 = (uint64_t *)(a4 + v14[14]);
  *id v21 = 0;
  v21[1] = 0;
  uint64_t v132 = v21;
  uint64_t v22 = a4 + v14[15];
  *(void *)uint64_t v22 = 0;
  uint64_t v140 = (void *)v22;
  *(unsigned char *)(v22 + 8) = 1;
  uint64_t v23 = a4 + v14[16];
  *(void *)uint64_t v23 = 0;
  uint64_t v141 = (void *)v23;
  *(unsigned char *)(v23 + 8) = 1;
  uint64_t v24 = a4 + v14[17];
  uint64_t v25 = type metadata accessor for URL();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
  uint64_t v28 = v26 + 56;
  uint64_t v146 = v24;
  v27(v24, 1, 1, v25);
  uint64_t v29 = (void *)(a4 + v14[18]);
  *uint64_t v29 = 0;
  v29[1] = 0;
  id v147 = v29;
  uint64_t v30 = (void *)(a4 + v14[19]);
  *uint64_t v30 = 0;
  v30[1] = 0;
  uint64_t v135 = v30;
  os_log_t v31 = (uint64_t *)(a4 + v14[20]);
  uint64_t *v31 = 0;
  v31[1] = 0;
  unint64_t v133 = v31;
  uint64_t v32 = a4 + v14[21];
  *(void *)uint64_t v32 = 0;
  uint64_t v134 = v32;
  *(unsigned char *)(v32 + 8) = 1;
  uint64_t v145 = a4 + v14[23];
  uint64_t v153 = v25;
  uint64_t v150 = v28;
  os_log_t v151 = v27;
  ((void (*)(void))v27)();
  UUID.init()();
  uint64_t v33 = a4 + v14[7];
  uint64_t v34 = type metadata accessor for AppInstallRequestType();
  uint64_t v143 = *(void *)(v34 - 8);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v143 + 16);
  uint64_t v156 = a2;
  uint64_t v144 = v34;
  v35(v33, a2);
  *(void *)(a4 + v14[6]) = a3;
  id v36 = a3;
  id v37 = v157;
  id v38 = [v157 identity];
  id v39 = [v38 bundleID];

  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  unint64_t v43 = (uint64_t *)(a4 + v14[9]);
  *unint64_t v43 = v40;
  v43[1] = v42;
  sub_1000172F8(&qword_10065D360);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1005A4070;
  id v142 = v36;
  *(void *)(v44 + 32) = LogKey.description.getter();
  *(void *)(v44 + 40) = v45;
  *(void *)(v44 + 48) = v40;
  *(void *)(v44 + 56) = v42;
  uint64_t v158 = (void *)v44;
  swift_bridgeObjectRetain();
  *(unsigned char *)(a4 + v14[22]) = sub_1003A6924() & 1;
  id v46 = [v37 identity];
  id v47 = [v46 bundleID];

  uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v13, 1, 1, v48);
  uint64_t v138 = v13;
  uint64_t v49 = (uint64_t)v137;
  sub_1000114D4((uint64_t)v13, (uint64_t)v137);
  swift_bridgeObjectRetain_n();
  uint64_t v50 = sub_100011088("LSApplicationRecord", 19, 2, 0, 1, 1, v49, (void *)&_mh_execute_header);
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  if (qword_10065B150 != -1) {
    swift_once();
  }
  v159[0] = v50;
  v159[1] = (void *)v52;
  v159[2] = v54;
  v159[3] = v56;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000172F8(&qword_10065F9C0);
  swift_task_localValuePush();
  os_unfair_lock_lock((os_unfair_lock_t)(v52 + 24));
  sub_100006238((void **)(v52 + 16), v159);
  os_unfair_lock_unlock((os_unfair_lock_t)(v52 + 24));
  dispatch_semaphore_t v57 = v159[0];
  if (v159[0])
  {
    sub_10000E2EC();
  }
  id v58 = objc_allocWithZone((Class)LSApplicationIdentity);
  swift_bridgeObjectRetain();
  NSString v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v60 = [v58 initWithBundleIdentifier:v59 URL:0 personaUniqueString:0 personaType:4];

  v159[0] = 0;
  uint64_t v61 = (char *)[v60 findApplicationRecordFetchingPlaceholder:3 error:v159];
  uint64_t v62 = v159[0];
  unint64_t v137 = v61;
  if (v61)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v63 = v62;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    uint64_t v61 = 0;
  }
  swift_task_localValuePop();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001729C((uint64_t)v138, (uint64_t *)&unk_100661AB0);
  swift_bridgeObjectRelease();
  if (v61)
  {
    id v64 = [v61 iTunesMetadata];
    id v65 = [v64 distributorInfo];
    id v66 = [v65 domain];

    if (v66)
    {
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v69 = v68;
    }
    else
    {
      uint64_t v67 = 0;
      uint64_t v69 = 0;
    }
    uint64_t v77 = v132;
    uint64_t v78 = v131;
    uint64_t v79 = v139;
    swift_bridgeObjectRelease();
    *uint64_t v79 = v67;
    v79[1] = v69;
    id v80 = [v64 distributorInfo];
    id v81 = [v80 distributorID];

    if (v81)
    {
      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v84 = v83;
    }
    else
    {
      uint64_t v82 = 0;
      uint64_t v84 = 0;
    }
    swift_bridgeObjectRelease();
    *uint64_t v78 = v82;
    v78[1] = v84;
    v159[0] = [v64 storeItemIdentifier];
    uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = v86;
    uint64_t v88 = v158;
    unint64_t v90 = v158[2];
    unint64_t v89 = v158[3];
    if (v90 >= v89 >> 1) {
      uint64_t v88 = sub_10028ED9C((void *)(v89 > 1), v90 + 1, 1, v158);
    }
    v88[2] = v90 + 1;
    uint64_t v158 = v88;
    uint64_t v91 = &v88[2 * v90];
    v91[4] = v85;
    v91[5] = v87;
    id v92 = [v64 storeItemIdentifier];
    uint64_t v93 = v140;
    *uint64_t v140 = v92;
    *((unsigned char *)v93 + 8) = 0;
    id v94 = [v61 iTunesMetadata];
    id v95 = [v94 distributorInfo];

    id v96 = [v95 accountID];
    if (v96)
    {
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v99 = v98;
    }
    else
    {
      uint64_t v97 = 0;
      uint64_t v99 = 0;
    }
    id v75 = v157;
    uint64_t v76 = v154;
    swift_bridgeObjectRelease();
    *uint64_t v77 = v97;
    v77[1] = v99;
    id v100 = [v61 iTunesMetadata];
    id v101 = [v100 versionIdentifier];

    unint64_t v102 = v141;
    *uint64_t v141 = v101;
    *((unsigned char *)v102 + 8) = 0;
    id v103 = [v64 distributorInfo];
    id v104 = [v103 marketplaceDomain];

    if (v104)
    {
      uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v107 = v106;
    }
    else
    {
      uint64_t v105 = 0;
      uint64_t v107 = 0;
    }
    uint64_t v74 = (uint64_t)v155;
    uint64_t v108 = v134;
    uint64_t v109 = v133;
    swift_bridgeObjectRelease();
    *uint64_t v109 = v105;
    v109[1] = v107;
    id v110 = [v64 distributorInfo];
    id v111 = [v110 marketplaceItemID];

    if (v111)
    {
      id v112 = [v111 unsignedLongLongValue];

      BOOL v113 = v112 == 0;
    }
    else
    {
      id v112 = 0;
      BOOL v113 = 1;
    }
    *(void *)uint64_t v108 = v112;
    *(unsigned char *)(v108 + 8) = v113;
    id v114 = [v64 distributorInfo];
    id v115 = [v114 localizedDistributorName];

    if (v115)
    {
      uint64_t v116 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v73 = v156;
      if (*(void *)(v116 + 16))
      {
        unint64_t v117 = sub_100016D20(0, 0xE000000000000000);
        uint64_t v118 = 0;
        id v115 = 0;
        if (v119)
        {
          uint64_t v120 = (uint64_t *)(*(void *)(v116 + 56) + 16 * v117);
          uint64_t v118 = *v120;
          id v115 = (id)v120[1];
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v118 = 0;
        id v115 = 0;
      }

      swift_bridgeObjectRelease();
    }
    else
    {

      uint64_t v118 = 0;
      uint64_t v73 = v156;
    }
    uint64_t v121 = v135;
    swift_bridgeObjectRelease();
    void *v121 = v118;
    v121[1] = v115;
  }
  else
  {
    uint64_t v70 = v139;
    swift_bridgeObjectRelease();
    *uint64_t v70 = 0;
    v70[1] = 0;
    double v71 = v140;
    *uint64_t v140 = 0;
    *((unsigned char *)v71 + 8) = 1;
    os_log_type_t v72 = v141;
    *uint64_t v141 = 0;
    *((unsigned char *)v72 + 8) = 1;
    uint64_t v74 = (uint64_t)v155;
    uint64_t v73 = v156;
    id v75 = v157;
    uint64_t v76 = v154;
  }
  id v122 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  *(void *)(a4 + v14[5]) = LogKey.init(strings:)();
  id v123 = [v75 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v73, v144);
  v149(v74, 0, 1, v152);
  sub_10018AD2C(v74, v76, &qword_10065C9B0);
  uint64_t v124 = v153;
  unint64_t v125 = v151;
  v151(a4 + v14[8], 1, 1, v153);
  uint64_t v126 = v146;
  sub_10001729C(v146, &qword_10065C3C0);
  v125(v126, 1, 1, v124);
  uint64_t v127 = v145;
  sub_10001729C(v145, &qword_10065C3C0);
  v125(v127, 1, 1, v124);
  uint64_t v128 = v147;
  uint64_t result = swift_bridgeObjectRelease();
  void *v128 = 0;
  v128[1] = 0;
  *(unsigned char *)(a4 + v14[11]) = 0;
  return result;
}

unint64_t sub_1004D5BA4(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4B676F4C6C6C7566;
      break;
    case 2:
      unint64_t result = 0x79654B676F6CLL;
      break;
    case 3:
      unint64_t result = 0x546C6C6174736E69;
      break;
    case 4:
      unint64_t result = 0x556B726F77747261;
      break;
    case 5:
      unint64_t result = 0x4449656C646E7562;
      break;
    case 6:
      unint64_t result = 0x616E6964726F6F63;
      break;
    case 7:
      unint64_t result = 0x6574617473;
      break;
    case 8:
      unint64_t result = 0x6E69616D6F64;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0x49746E756F636361;
      break;
    case 11:
      unint64_t result = 0x657449656C707061;
      break;
    case 12:
      unint64_t result = 0x726556656C707061;
      break;
    case 13:
      unint64_t result = 0x4C5255706461;
      break;
    case 14:
      unint64_t result = 0xD000000000000018;
      break;
    case 15:
      unint64_t result = 0xD000000000000016;
      break;
    case 16:
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 18:
      unint64_t result = 0xD000000000000014;
      break;
    case 19:
      unint64_t result = 0x6572616853707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004D5E18(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100665680);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004D749C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  type metadata accessor for UUID();
  sub_1004D7544(&qword_10065CF80, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for Restore();
    uint64_t v17 = v3;
    uint64_t v18 = (int *)v9;
    uint64_t v19 = *(void *)(v3 + *(int *)(v9 + 20));
    char v21 = 1;
    type metadata accessor for LogKey();
    sub_1004D7544(&qword_100662C08, (void (*)(uint64_t))&type metadata accessor for LogKey);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = *(void *)(v17 + v18[6]);
    char v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 3;
    type metadata accessor for AppInstallRequestType();
    sub_1004D7544(&qword_100662C00, (void (*)(uint64_t))&type metadata accessor for AppInstallRequestType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    type metadata accessor for URL();
    sub_1004D7544(&qword_10065CFE0, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v19) = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = *(unsigned char *)(v17 + v18[11]);
    char v21 = 7;
    sub_1004D758C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v19) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v19) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = (uint64_t *)(v17 + v18[15]);
    uint64_t v11 = *v10;
    LOBYTE(v10) = *((unsigned char *)v10 + 8);
    uint64_t v19 = v11;
    char v20 = (char)v10;
    char v21 = 11;
    sub_100411EB4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = (uint64_t *)(v17 + v18[16]);
    uint64_t v13 = *v12;
    LOBYTE(v12) = *((unsigned char *)v12 + 8);
    uint64_t v19 = v13;
    char v20 = (char)v12;
    char v21 = 12;
    sub_100411E60();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v19) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v19) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    id v14 = (uint64_t *)(v17 + v18[21]);
    uint64_t v15 = *v14;
    LOBYTE(v14) = *((unsigned char *)v14 + 8);
    uint64_t v19 = v15;
    char v20 = (char)v14;
    char v21 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v19) = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004D64F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v134 = a1;
  uint64_t v109 = a2;
  uint64_t v2 = sub_1000172F8(&qword_10065C9B0);
  __chkstk_darwin(v2 - 8);
  id v112 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000172F8(&qword_10065C3C0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v108 = (uint64_t)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v110 = (uint64_t)&v104 - v8;
  __chkstk_darwin(v7);
  BOOL v113 = (char *)&v104 - v9;
  uint64_t v10 = type metadata accessor for AppInstallRequestType();
  uint64_t v117 = *(void *)(v10 - 8);
  uint64_t v118 = v10;
  __chkstk_darwin(v10);
  id v114 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v115 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_1000172F8(&qword_100665668);
  uint64_t v116 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  unint64_t v133 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for Restore();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v20 = &v19[*(int *)(v17 + 40)];
  uint64_t v119 = v13;
  char v21 = *(void (**)(void))(v13 + 56);
  uint64_t v130 = (uint64_t)v20;
  uint64_t v121 = v12;
  v21();
  uint64_t v22 = &v19[v16[12]];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  int64_t v129 = v22;
  uint64_t v23 = &v19[v16[13]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v128 = v23;
  uint64_t v24 = &v19[v16[14]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v127 = v24;
  uint64_t v25 = &v19[v16[15]];
  *(void *)uint64_t v25 = 0;
  id v111 = v25;
  v25[8] = 1;
  uint64_t v26 = &v19[v16[16]];
  *(void *)uint64_t v26 = 0;
  v26[8] = 1;
  uint64_t v27 = (uint64_t)&v19[v16[17]];
  uint64_t v28 = type metadata accessor for URL();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v126 = v27;
  v29(v27, 1, 1, v28);
  uint64_t v30 = &v19[v16[18]];
  *(void *)uint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  unint64_t v125 = v30;
  os_log_t v31 = &v19[v16[19]];
  *(void *)os_log_t v31 = 0;
  *((void *)v31 + 1) = 0;
  uint64_t v124 = v31;
  uint64_t v32 = &v19[v16[20]];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  id v123 = v32;
  uint64_t v33 = &v19[v16[21]];
  *(void *)uint64_t v33 = 0;
  v33[8] = 1;
  uint64_t v132 = v16;
  uint64_t v34 = (uint64_t)&v19[v16[23]];
  v29(v34, 1, 1, v28);
  sub_10018AC60(v134, v134[3]);
  sub_1004D749C();
  uint64_t v35 = v131;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v122 = v34;
  if (v35)
  {
    uint64_t v131 = v35;
    uint64_t v36 = v121;
    unsigned int v37 = 1697600;
    goto LABEL_3;
  }
  uint64_t v106 = v26;
  uint64_t v105 = v33;
  uint64_t v107 = v28;
  LOBYTE(v135) = 0;
  sub_1004D7544((unint64_t *)&unk_10065C920, (void (*)(uint64_t))&type metadata accessor for UUID);
  id v39 = v115;
  uint64_t v36 = v121;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v40 = v130;
  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v19, v39, v36);
  type metadata accessor for LogKey();
  char v137 = 1;
  sub_1004D7544(&qword_10065CF68, (void (*)(uint64_t))&type metadata accessor for LogKey);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v41 = (uint64_t)v19;
  uint64_t v42 = v132;
  *(void *)(v41 + v132[5]) = v135;
  char v137 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v41 + v42[6]) = v135;
  LOBYTE(v135) = 3;
  sub_1004D7544(&qword_10065D000, (void (*)(uint64_t))&type metadata accessor for AppInstallRequestType);
  unint64_t v43 = v114;
  uint64_t v44 = v118;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v117 + 32))(v41 + v42[7], v43, v44);
  LOBYTE(v135) = 4;
  uint64_t v45 = sub_1004D7544(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v46 = (uint64_t)v113;
  id v115 = (char *)v45;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10026400C(v46, v41 + v42[8]);
  LOBYTE(v135) = 5;
  uint64_t v47 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v48 = (uint64_t *)(v41 + v42[9]);
  *uint64_t v48 = v47;
  v48[1] = v49;
  LOBYTE(v135) = 6;
  uint64_t v50 = (uint64_t)v112;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v19 = (char *)v41;
  sub_10018AD2C(v50, v40, &qword_10065C9B0);
  char v137 = 7;
  sub_1004D74F0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v41 + v132[11]) = v135;
  LOBYTE(v135) = 8;
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v60 = v59;
  uint64_t v61 = (uint64_t *)v129;
  swift_bridgeObjectRelease();
  *uint64_t v61 = v58;
  v61[1] = v60;
  LOBYTE(v135) = 9;
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v131 = 0;
  uint64_t v64 = v62;
  uint64_t v65 = v63;
  id v66 = v128;
  swift_bridgeObjectRelease();
  void *v66 = v64;
  v66[1] = v65;
  LOBYTE(v135) = 10;
  uint64_t v67 = v131;
  uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v131 = v67;
  if (v67) {
    goto LABEL_26;
  }
  uint64_t v70 = v68;
  uint64_t v71 = v69;
  os_log_type_t v72 = v127;
  swift_bridgeObjectRelease();
  *os_log_type_t v72 = v70;
  v72[1] = v71;
  char v137 = 11;
  sub_10024A634();
  uint64_t v73 = v131;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v131 = v73;
  if (v73) {
    goto LABEL_26;
  }
  char v74 = v136;
  id v75 = v111;
  *(void *)id v111 = v135;
  v75[8] = v74;
  char v137 = 12;
  sub_10024A5E0();
  uint64_t v76 = v131;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v131 = v76;
  if (v76) {
    goto LABEL_26;
  }
  char v77 = v136;
  uint64_t v78 = v106;
  *(void *)uint64_t v106 = v135;
  v78[8] = v77;
  LOBYTE(v135) = 13;
  uint64_t v79 = v131;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v131 = v79;
  if (v79) {
    goto LABEL_26;
  }
  sub_10018AD2C(v110, v126, &qword_10065C3C0);
  LOBYTE(v135) = 14;
  uint64_t v80 = v131;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v131 = v80;
  if (v80) {
    goto LABEL_26;
  }
  uint64_t v83 = v81;
  uint64_t v84 = v82;
  uint64_t v85 = v125;
  swift_bridgeObjectRelease();
  *uint64_t v85 = v83;
  v85[1] = v84;
  LOBYTE(v135) = 15;
  uint64_t v86 = v131;
  uint64_t v87 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v131 = v86;
  if (v86)
  {
LABEL_26:
    unsigned int v37 = 649087;
    (*(void (**)(char *, uint64_t))(v116 + 8))(v133, v120);
LABEL_3:
    uint64_t v38 = v130;
    sub_100014524((uint64_t)v134);
    int v51 = (v37 >> 2) & 1;
    int v52 = (v37 >> 3) & 1;
    int v53 = (v37 >> 4) & 1;
    int v54 = (v37 >> 5) & 1;
    if ((v37 & 1) == 0)
    {
      if ((v37 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
    int v56 = (v37 >> 1) & 1;
LABEL_13:
    (*(void (**)(char *, uint64_t))(v119 + 8))(v19, v36);
    if ((v56 & 1) == 0)
    {
LABEL_7:
      uint64_t v55 = v132;
      if (v51) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v55 = v132;

    if (v51)
    {
LABEL_8:

      if ((v52 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_15:
    if (!v52)
    {
LABEL_9:
      if (v53) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
LABEL_16:
    (*(void (**)(char *, uint64_t))(v117 + 8))(&v19[v55[7]], v118);
    if (v53)
    {
LABEL_10:
      sub_10001729C((uint64_t)&v19[v55[8]], &qword_10065C3C0);
      if ((v54 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_17:
    if (!v54)
    {
LABEL_19:
      sub_10001729C(v38, &qword_10065C9B0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001729C(v126, &qword_10065C3C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_10001729C(v122, &qword_10065C3C0);
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v89 = v87;
  uint64_t v90 = v88;
  uint64_t v91 = v124;
  swift_bridgeObjectRelease();
  *uint64_t v91 = v89;
  v91[1] = v90;
  LOBYTE(v135) = 16;
  uint64_t v92 = v131;
  uint64_t v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v131 = v92;
  if (v92) {
    goto LABEL_31;
  }
  uint64_t v95 = v93;
  uint64_t v96 = v94;
  uint64_t v97 = v123;
  swift_bridgeObjectRelease();
  *uint64_t v97 = v95;
  v97[1] = v96;
  char v137 = 17;
  uint64_t v98 = v131;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v131 = v98;
  if (v98) {
    goto LABEL_31;
  }
  char v99 = v136;
  id v100 = v105;
  *(void *)uint64_t v105 = v135;
  v100[8] = v99;
  LOBYTE(v135) = 18;
  uint64_t v101 = v131;
  char v102 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v131 = v101;
  if (v101
    || (*(unsigned char *)(v41 + v132[22]) = v102 & 1,
        LOBYTE(v135) = 19,
        uint64_t v103 = v131,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(),
        (uint64_t v131 = v103) != 0))
  {
LABEL_31:
    (*(void (**)(char *, uint64_t))(v116 + 8))(v133, v120);
    sub_100014524((uint64_t)v134);
    LOBYTE(v56) = 1;
    int v51 = 1;
    int v52 = 1;
    int v53 = 1;
    int v54 = 1;
    uint64_t v38 = v130;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v116 + 8))(v133, v120);
  sub_10018AD2C(v108, v122, &qword_10065C3C0);
  sub_10017B7DC(v41, v109);
  sub_100014524((uint64_t)v134);
  return sub_10017B840(v41);
}

unint64_t sub_1004D73B8()
{
  return sub_1004D5BA4(*v0);
}

uint64_t sub_1004D73C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DA6F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1004D73E8(unsigned char *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_1004D73F4(uint64_t a1)
{
  unint64_t v2 = sub_1004D749C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7430(uint64_t a1)
{
  unint64_t v2 = sub_1004D749C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D746C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D64F4(a1, a2);
}

uint64_t sub_1004D7484(void *a1)
{
  return sub_1004D5E18(a1);
}

unint64_t sub_1004D749C()
{
  unint64_t result = qword_100665670;
  if (!qword_100665670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665670);
  }
  return result;
}

unint64_t sub_1004D74F0()
{
  unint64_t result = qword_100665678;
  if (!qword_100665678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665678);
  }
  return result;
}

uint64_t sub_1004D7544(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004D758C()
{
  unint64_t result = qword_100665688;
  if (!qword_100665688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665688);
  }
  return result;
}

uint64_t sub_1004D75E0(void *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = sub_1000172F8(&qword_1006657E8);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000172F8(&qword_1006657F0);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  __chkstk_darwin(v5);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000172F8(&qword_1006657F8);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v26 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_100665800);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_100665808);
  uint64_t v23 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000172F8(&qword_100665810);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018AC60(a1, a1[3]);
  sub_1004DB8C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v35)
  {
    case 1:
      char v37 = 1;
      sub_1004DBA18();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    case 2:
      char v38 = 2;
      sub_1004DB9C4();
      uint64_t v19 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v27;
      uint64_t v20 = v28;
      goto LABEL_7;
    case 3:
      char v39 = 3;
      sub_1004DB970();
      uint64_t v19 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v30;
      uint64_t v20 = v31;
      goto LABEL_7;
    case 4:
      char v40 = 4;
      sub_1004DB91C();
      uint64_t v19 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v33;
      uint64_t v20 = v34;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
      break;
    default:
      char v36 = 0;
      sub_1004DBA6C();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_1004D7AE4(uint64_t a1)
{
  unint64_t v2 = sub_1004DB970();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7B20(uint64_t a1)
{
  unint64_t v2 = sub_1004DB970();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D7B5C(uint64_t a1)
{
  unint64_t v2 = sub_1004DBA18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7B98(uint64_t a1)
{
  unint64_t v2 = sub_1004DBA18();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1004D7BD4()
{
  unint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
    case 3:
      unint64_t result = 0x61727473746F6F62;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x516F547964616572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004D7C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DAF2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D7CB0(uint64_t a1)
{
  unint64_t v2 = sub_1004DB8C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7CEC(uint64_t a1)
{
  unint64_t v2 = sub_1004DB8C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D7D28(uint64_t a1)
{
  unint64_t v2 = sub_1004DBA6C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7D64(uint64_t a1)
{
  unint64_t v2 = sub_1004DBA6C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D7DA0(uint64_t a1)
{
  unint64_t v2 = sub_1004DB91C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7DDC(uint64_t a1)
{
  unint64_t v2 = sub_1004DB91C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D7E18(uint64_t a1)
{
  unint64_t v2 = sub_1004DB9C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D7E54(uint64_t a1)
{
  unint64_t v2 = sub_1004DB9C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D7E90@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1004DB180(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004D7EBC(void *a1)
{
  return sub_1004D75E0(a1, *v1);
}

ValueMetadata *type metadata accessor for Restore.RestoreState()
{
  return &type metadata for Restore.RestoreState;
}

uint64_t getEnumTagSinglePayload for Restore.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Restore.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *uint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004D8048);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Restore.CodingKeys()
{
  return &type metadata for Restore.CodingKeys;
}

void *sub_1004D8080(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v79 = *(void *)(v7 - 8);
    uint64_t v81 = v7;
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    ((void (*)(void *, void *))v78)(a1, a2);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for AppInstallRequestType();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    id v17 = v10;
    id v18 = v11;
    v16(v13, v14, v15);
    uint64_t v19 = a3[8];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    uint64_t v80 = v23;
    if (v82(v21, 1, v22))
    {
      uint64_t v24 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v26 = a3[9];
    uint64_t v27 = a3[10];
    uint64_t v28 = (void *)((char *)a1 + v26);
    uint64_t v29 = (void *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = (char *)a1 + v27;
    uint64_t v32 = (char *)a2 + v27;
    uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
    swift_bridgeObjectRetain();
    if (v33(v32, 1, v81))
    {
      uint64_t v34 = sub_1000172F8(&qword_10065C9B0);
      memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      v78(v31, v32, v81);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v31, 0, 1, v81);
    }
    uint64_t v35 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    char v36 = (void *)((char *)a1 + v35);
    char v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *char v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = a3[13];
    uint64_t v40 = a3[14];
    uint64_t v41 = (void *)((char *)a1 + v39);
    uint64_t v42 = (void *)((char *)a2 + v39);
    uint64_t v43 = v42[1];
    void *v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = (void *)((char *)a1 + v40);
    uint64_t v45 = (void *)((char *)a2 + v40);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = a3[15];
    uint64_t v48 = a3[16];
    uint64_t v49 = (char *)a1 + v47;
    uint64_t v50 = (char *)a2 + v47;
    *(void *)uint64_t v49 = *(void *)v50;
    v49[8] = v50[8];
    int v51 = (char *)a1 + v48;
    int v52 = (char *)a2 + v48;
    *(void *)int v51 = *(void *)v52;
    v51[8] = v52[8];
    uint64_t v53 = a3[17];
    int v54 = (char *)a1 + v53;
    uint64_t v55 = (char *)a2 + v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v82(v55, 1, v22))
    {
      uint64_t v56 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v54, v55, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v54, 0, 1, v22);
    }
    uint64_t v57 = a3[18];
    uint64_t v58 = a3[19];
    uint64_t v59 = (void *)((char *)a1 + v57);
    uint64_t v60 = (void *)((char *)a2 + v57);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    uint64_t v62 = (void *)((char *)a1 + v58);
    uint64_t v63 = (void *)((char *)a2 + v58);
    uint64_t v64 = v63[1];
    *uint64_t v62 = *v63;
    v62[1] = v64;
    uint64_t v65 = a3[20];
    uint64_t v66 = a3[21];
    uint64_t v67 = (void *)((char *)a1 + v65);
    uint64_t v68 = (void *)((char *)a2 + v65);
    uint64_t v69 = v68[1];
    void *v67 = *v68;
    v67[1] = v69;
    uint64_t v70 = (char *)a1 + v66;
    uint64_t v71 = (char *)a2 + v66;
    *(void *)uint64_t v70 = *(void *)v71;
    v70[8] = v71[8];
    uint64_t v72 = a3[22];
    uint64_t v73 = a3[23];
    char v74 = (char *)a1 + v73;
    id v75 = (char *)a2 + v73;
    *((unsigned char *)a1 + v72) = *((unsigned char *)a2 + v72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v82(v75, 1, v22))
    {
      uint64_t v76 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v74, v75, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v74, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t sub_1004D85D0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);

  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (!v11(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v9, v10);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4)) {
    v6(v12, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = a1 + a2[17];
  if (!v11(v13, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + a2[23];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v14, 1, v10);
  if (!result)
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
    return v16(v14, v10);
  }
  return result;
}

uint64_t sub_1004D88B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v79 = v6;
  uint64_t v76 = *(void (**)(void *, const void *, uint64_t))(v77 + 16);
  ((void (*)(uint64_t, uint64_t))v76)(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for AppInstallRequestType();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  id v16 = v9;
  id v17 = v10;
  v15(v12, v13, v14);
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v80 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v78 = v22;
  if (v80(v20, 1, v21))
  {
    uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = (void *)(a1 + v24);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = (void *)(a1 + v25);
  uint64_t v30 = (const void *)(a2 + v25);
  uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v77 + 48);
  swift_bridgeObjectRetain();
  if (v31(v30, 1, v79))
  {
    uint64_t v32 = sub_1000172F8(&qword_10065C9B0);
    memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    v76(v29, v30, v79);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v29, 0, 1, v79);
  }
  uint64_t v33 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = a3[13];
  uint64_t v38 = a3[14];
  uint64_t v39 = (void *)(a1 + v37);
  uint64_t v40 = (void *)(a2 + v37);
  uint64_t v41 = v40[1];
  *uint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = (void *)(a1 + v38);
  uint64_t v43 = (void *)(a2 + v38);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  uint64_t v45 = a3[15];
  uint64_t v46 = a3[16];
  uint64_t v47 = a1 + v45;
  uint64_t v48 = a2 + v45;
  *(void *)uint64_t v47 = *(void *)v48;
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  uint64_t v49 = a1 + v46;
  uint64_t v50 = a2 + v46;
  *(void *)uint64_t v49 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  uint64_t v51 = a3[17];
  int v52 = (void *)(a1 + v51);
  uint64_t v53 = (const void *)(a2 + v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80(v53, 1, v21))
  {
    uint64_t v54 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v78 + 16))(v52, v53, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v52, 0, 1, v21);
  }
  uint64_t v55 = a3[18];
  uint64_t v56 = a3[19];
  uint64_t v57 = (void *)(a1 + v55);
  uint64_t v58 = (void *)(a2 + v55);
  uint64_t v59 = v58[1];
  *uint64_t v57 = *v58;
  v57[1] = v59;
  uint64_t v60 = (void *)(a1 + v56);
  uint64_t v61 = (void *)(a2 + v56);
  uint64_t v62 = v61[1];
  *uint64_t v60 = *v61;
  v60[1] = v62;
  uint64_t v63 = a3[20];
  uint64_t v64 = a3[21];
  uint64_t v65 = (void *)(a1 + v63);
  uint64_t v66 = (void *)(a2 + v63);
  uint64_t v67 = v66[1];
  *uint64_t v65 = *v66;
  v65[1] = v67;
  uint64_t v68 = a1 + v64;
  uint64_t v69 = a2 + v64;
  *(void *)uint64_t v68 = *(void *)v69;
  *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
  uint64_t v70 = a3[22];
  uint64_t v71 = a3[23];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (const void *)(a2 + v71);
  *(unsigned char *)(a1 + v70) = *(unsigned char *)(a2 + v70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v80(v73, 1, v21))
  {
    uint64_t v74 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v78 + 16))(v72, v73, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v72, 0, 1, v21);
  }
  return a1;
}

uint64_t sub_1004D8DB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v83 = v6;
  uint64_t v81 = *(void (**)(void *, const void *, uint64_t))(v82 + 24);
  ((void (*)(uint64_t, uint64_t))v81)(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = a3[6];
  uint64_t v12 = *(void **)(a2 + v11);
  uint64_t v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  uint64_t v84 = v22;
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    uint64_t v27 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  uint64_t v28 = a3[9];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (const void *)(a2 + v31);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  int v35 = v34(a1 + v31, 1, v83);
  int v36 = v34((uint64_t)v33, 1, v83);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v82 + 16))(v32, v33, v83);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v82 + 56))(v32, 0, 1, v83);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v82 + 8))(v32, v83);
LABEL_12:
    uint64_t v37 = sub_1000172F8(&qword_10065C9B0);
    memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v81(v32, v33, v83);
LABEL_13:
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v38 = a3[12];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[14];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  void *v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[15];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t *)(a2 + v47);
  uint64_t v50 = *v49;
  *(unsigned char *)(v48 + 8) = *((unsigned char *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = a3[16];
  uint64_t v52 = a1 + v51;
  uint64_t v53 = (uint64_t *)(a2 + v51);
  uint64_t v54 = *v53;
  *(unsigned char *)(v52 + 8) = *((unsigned char *)v53 + 8);
  *(void *)uint64_t v52 = v54;
  uint64_t v55 = a3[17];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = (void *)(a2 + v55);
  int v58 = v24((void *)(a1 + v55), 1, v84);
  int v59 = v24(v57, 1, v84);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v56, v57, v84);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v56, 0, 1, v84);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v56, v84);
LABEL_18:
    uint64_t v60 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v56, v57, v84);
LABEL_19:
  uint64_t v61 = a3[18];
  uint64_t v62 = (void *)(a1 + v61);
  uint64_t v63 = (void *)(a2 + v61);
  *uint64_t v62 = *v63;
  v62[1] = v63[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v64 = a3[19];
  uint64_t v65 = (void *)(a1 + v64);
  uint64_t v66 = (void *)(a2 + v64);
  *uint64_t v65 = *v66;
  v65[1] = v66[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[20];
  uint64_t v68 = (void *)(a1 + v67);
  uint64_t v69 = (void *)(a2 + v67);
  *uint64_t v68 = *v69;
  v68[1] = v69[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[21];
  uint64_t v71 = a1 + v70;
  uint64_t v72 = (uint64_t *)(a2 + v70);
  uint64_t v73 = *v72;
  *(unsigned char *)(v71 + 8) = *((unsigned char *)v72 + 8);
  *(void *)uint64_t v71 = v73;
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  uint64_t v74 = a3[23];
  id v75 = (void *)(a1 + v74);
  uint64_t v76 = (void *)(a2 + v74);
  int v77 = v24((void *)(a1 + v74), 1, v84);
  int v78 = v24(v76, 1, v84);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v75, v76, v84);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v75, v84);
    goto LABEL_24;
  }
  if (v78)
  {
LABEL_24:
    uint64_t v79 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v75, v76, v84);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v75, 0, 1, v84);
  return a1;
}

char *sub_1004D94E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v44 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v44(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[7];
  id v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = a3[8];
  id v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  if (v45(v15, 1, v16))
  {
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v19], 1, v6))
  {
    uint64_t v22 = sub_1000172F8(&qword_10065C9B0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v44(v20, v21, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  }
  uint64_t v23 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  uint64_t v24 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  uint64_t v25 = a3[15];
  uint64_t v26 = a3[16];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(void *)uint64_t v27 = *(void *)v28;
  v27[8] = v28[8];
  uint64_t v29 = &a1[v26];
  uint64_t v30 = &a2[v26];
  v29[8] = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v31 = a3[17];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  if (v45(&a2[v31], 1, v16))
  {
    uint64_t v34 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v32, v33, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v32, 0, 1, v16);
  }
  uint64_t v35 = a3[19];
  *(_OWORD *)&a1[a3[18]] = *(_OWORD *)&a2[a3[18]];
  *(_OWORD *)&a1[v35] = *(_OWORD *)&a2[v35];
  uint64_t v36 = a3[21];
  *(_OWORD *)&a1[a3[20]] = *(_OWORD *)&a2[a3[20]];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  v37[8] = v38[8];
  uint64_t v39 = a3[23];
  a1[a3[22]] = a2[a3[22]];
  uint64_t v40 = &a1[v39];
  uint64_t v41 = &a2[v39];
  if (v45(v41, 1, v16))
  {
    uint64_t v42 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v40, v41, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v40, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_1004D9958(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v91 = *(void *)(v6 - 8);
  uint64_t v92 = v6;
  uint64_t v90 = *(void (**)(void *, const void *, uint64_t))(v91 + 40);
  ((void (*)(uint64_t, uint64_t))v90)(a1, a2);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[6];
  id v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for AppInstallRequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  uint64_t v93 = v18;
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    uint64_t v23 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  int v33 = v32(a1 + v29, 1, v92);
  int v34 = v32((uint64_t)v31, 1, v92);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, const void *, uint64_t))(v91 + 32))(v30, v31, v92);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(v30, 0, 1, v92);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v91 + 8))(v30, v92);
LABEL_12:
    uint64_t v35 = sub_1000172F8(&qword_10065C9B0);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  v90(v30, v31, v92);
LABEL_13:
  uint64_t v36 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[13];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[15];
  uint64_t v52 = a3[16];
  uint64_t v53 = a1 + v51;
  uint64_t v54 = a2 + v51;
  *(void *)uint64_t v53 = *(void *)v54;
  *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
  uint64_t v55 = a1 + v52;
  uint64_t v56 = a2 + v52;
  *(void *)uint64_t v55 = *(void *)v56;
  *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
  uint64_t v57 = a3[17];
  int v58 = (void *)(a1 + v57);
  int v59 = (void *)(a2 + v57);
  int v60 = v20((void *)(a1 + v57), 1, v93);
  int v61 = v20(v59, 1, v93);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v58, v59, v93);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v58, 0, 1, v93);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v61)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v58, v93);
LABEL_18:
    uint64_t v62 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v58, v59, v93);
LABEL_19:
  uint64_t v63 = a3[18];
  uint64_t v64 = (void *)(a1 + v63);
  uint64_t v65 = (uint64_t *)(a2 + v63);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  *uint64_t v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  uint64_t v68 = a3[19];
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (uint64_t *)(a2 + v68);
  uint64_t v72 = *v70;
  uint64_t v71 = v70[1];
  *uint64_t v69 = v72;
  v69[1] = v71;
  swift_bridgeObjectRelease();
  uint64_t v73 = a3[20];
  uint64_t v74 = (void *)(a1 + v73);
  id v75 = (uint64_t *)(a2 + v73);
  uint64_t v77 = *v75;
  uint64_t v76 = v75[1];
  *uint64_t v74 = v77;
  v74[1] = v76;
  swift_bridgeObjectRelease();
  uint64_t v78 = a3[21];
  uint64_t v79 = a3[22];
  uint64_t v80 = a1 + v78;
  uint64_t v81 = a2 + v78;
  *(void *)uint64_t v80 = *(void *)v81;
  char v82 = *(unsigned char *)(a2 + v79);
  *(unsigned char *)(v80 + 8) = *(unsigned char *)(v81 + 8);
  *(unsigned char *)(a1 + v79) = v82;
  uint64_t v83 = a3[23];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (void *)(a2 + v83);
  int v86 = v20((void *)(a1 + v83), 1, v93);
  int v87 = v20(v85, 1, v93);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v84, v85, v93);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v84, v93);
    goto LABEL_24;
  }
  if (v87)
  {
LABEL_24:
    uint64_t v88 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v84, v85, v93);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v84, 0, 1, v93);
  return a1;
}

uint64_t sub_1004DA000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DA014);
}

uint64_t sub_1004DA014(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_12:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = type metadata accessor for AppInstallRequestType();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[7];
LABEL_11:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_12;
  }
  uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[8];
    goto LABEL_11;
  }
  uint64_t v17 = sub_1000172F8(&qword_10065C9B0);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a3[10];

  return v18(v20, a2, v19);
}

uint64_t sub_1004DA1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DA1FC);
}

uint64_t sub_1004DA1FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for AppInstallRequestType();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[7];
LABEL_9:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_1000172F8(&qword_10065C3C0);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[8];
    goto LABEL_9;
  }
  uint64_t v17 = sub_1000172F8(&qword_10065C9B0);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[10];

  return v18(v20, a2, a2, v19);
}

void sub_1004DA3D0()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AppInstallRequestType();
    if (v1 <= 0x3F)
    {
      sub_1004147D4(319, (unint64_t *)&qword_100661BB0, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F)
      {
        sub_1004147D4(319, (unint64_t *)&unk_100662CD0, (void (*)(uint64_t))&type metadata accessor for UUID);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

unint64_t sub_1004DA59C()
{
  unint64_t result = qword_100665768;
  if (!qword_100665768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665768);
  }
  return result;
}

unint64_t sub_1004DA5F4()
{
  unint64_t result = qword_100665770;
  if (!qword_100665770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665770);
  }
  return result;
}

unint64_t sub_1004DA64C()
{
  unint64_t result = qword_100665778;
  if (!qword_100665778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665778);
  }
  return result;
}

unint64_t sub_1004DA6A4()
{
  unint64_t result = qword_100665780;
  if (!qword_100665780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665780);
  }
  return result;
}

uint64_t sub_1004DA6F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B676F4C6C6C7566 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79654B676F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x546C6C6174736E69 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x556B726F77747261 && a2 == 0xEA00000000004C52 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616E6964726F6F63 && a2 == 0xED00004449726F74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001005C0800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x49746E756F636361 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x657449656C707061 && a2 == 0xEB0000000044496DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x726556656C707061 && a2 == 0xEE0044496E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x4C5255706461 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001005B7DC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001005C0820 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001005C0840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001005C0860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001005C0880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6572616853707061 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 19;
    }
    else {
      return 20;
    }
  }
}

uint64_t sub_1004DAF2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61727473746F6F62 && a2 == 0xED0000676E697070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001005C08A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61727473746F6F62 && a2 == 0xEC00000064657070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x516F547964616572 && a2 == 0xEC00000065756575)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1004DB180(void *a1)
{
  uint64_t v41 = sub_1000172F8(&qword_100665788);
  uint64_t v34 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_1000172F8(&qword_100665790);
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v43 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000172F8(&qword_100665798);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000172F8(&qword_1006657A0);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000172F8(&qword_1006657A8);
  uint64_t v33 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000172F8(&qword_1006657B0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  uint64_t v45 = a1;
  sub_10018AC60(a1, v16);
  sub_1004DB8C8();
  uint64_t v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v46 = v11;
    uint64_t v31 = v9;
    uint64_t v32 = v13;
    uint64_t v18 = v8;
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    int v21 = v44;
    uint64_t v22 = v15;
    uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v23 + 16) == 1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v23 + 32);
      switch(*(unsigned char *)(v23 + 32))
      {
        case 1:
          uint64_t v30 = v32;
          char v48 = 1;
          sub_1004DBA18();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
          goto LABEL_12;
        case 2:
          uint64_t v30 = v32;
          char v49 = 2;
          sub_1004DB9C4();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
LABEL_12:
          swift_bridgeObjectRelease();
          uint64_t v24 = v30;
          goto LABEL_10;
        case 3:
          uint64_t v24 = v32;
          char v50 = 3;
          sub_1004DB970();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v37);
          goto LABEL_13;
        case 4:
          char v51 = 4;
          sub_1004DB91C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v41);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
          break;
        default:
          uint64_t v24 = v32;
          char v47 = 0;
          sub_1004DBA6C();
          uint64_t v25 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v31);
LABEL_13:
          swift_bridgeObjectRelease();
LABEL_10:
          (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v12);
          break;
      }
    }
    else
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      uint64_t v15 = swift_allocError();
      uint64_t v28 = v27;
      sub_1000172F8(&qword_10065DF58);
      *uint64_t v28 = &type metadata for Restore.RestoreState;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v12);
    }
  }
  sub_100014524((uint64_t)v45);
  return v15;
}

unint64_t sub_1004DB8C8()
{
  unint64_t result = qword_1006657B8;
  if (!qword_1006657B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657B8);
  }
  return result;
}

unint64_t sub_1004DB91C()
{
  unint64_t result = qword_1006657C0;
  if (!qword_1006657C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657C0);
  }
  return result;
}

unint64_t sub_1004DB970()
{
  unint64_t result = qword_1006657C8;
  if (!qword_1006657C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657C8);
  }
  return result;
}

unint64_t sub_1004DB9C4()
{
  unint64_t result = qword_1006657D0;
  if (!qword_1006657D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657D0);
  }
  return result;
}

unint64_t sub_1004DBA18()
{
  unint64_t result = qword_1006657D8;
  if (!qword_1006657D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657D8);
  }
  return result;
}

unint64_t sub_1004DBA6C()
{
  unint64_t result = qword_1006657E0;
  if (!qword_1006657E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006657E0);
  }
  return result;
}

unsigned char *_s28ManagedAppDistributionDaemon7RestoreV12RestoreStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DBB8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.CodingKeys()
{
  return &type metadata for Restore.RestoreState.CodingKeys;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.NoneCodingKeys()
{
  return &type metadata for Restore.RestoreState.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.BootstrappingCodingKeys()
{
  return &type metadata for Restore.RestoreState.BootstrappingCodingKeys;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.WaitingForMarketPlaceCodingKeys()
{
  return &type metadata for Restore.RestoreState.WaitingForMarketPlaceCodingKeys;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.BootstrappedCodingKeys()
{
  return &type metadata for Restore.RestoreState.BootstrappedCodingKeys;
}

ValueMetadata *type metadata accessor for Restore.RestoreState.ReadyToQueueCodingKeys()
{
  return &type metadata for Restore.RestoreState.ReadyToQueueCodingKeys;
}

unint64_t sub_1004DBC18()
{
  unint64_t result = qword_100665818;
  if (!qword_100665818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665818);
  }
  return result;
}

unint64_t sub_1004DBC70()
{
  unint64_t result = qword_100665820;
  if (!qword_100665820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665820);
  }
  return result;
}

unint64_t sub_1004DBCC8()
{
  unint64_t result = qword_100665828;
  if (!qword_100665828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665828);
  }
  return result;
}

unint64_t sub_1004DBD20()
{
  unint64_t result = qword_100665830;
  if (!qword_100665830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665830);
  }
  return result;
}

unint64_t sub_1004DBD78()
{
  unint64_t result = qword_100665838;
  if (!qword_100665838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665838);
  }
  return result;
}

unint64_t sub_1004DBDD0()
{
  unint64_t result = qword_100665840;
  if (!qword_100665840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665840);
  }
  return result;
}

unint64_t sub_1004DBE28()
{
  unint64_t result = qword_100665848;
  if (!qword_100665848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665848);
  }
  return result;
}

unint64_t sub_1004DBE80()
{
  unint64_t result = qword_100665850;
  if (!qword_100665850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665850);
  }
  return result;
}

unint64_t sub_1004DBED8()
{
  unint64_t result = qword_100665858;
  if (!qword_100665858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665858);
  }
  return result;
}

unint64_t sub_1004DBF30()
{
  unint64_t result = qword_100665860;
  if (!qword_100665860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665860);
  }
  return result;
}

unint64_t sub_1004DBF88()
{
  unint64_t result = qword_100665868;
  if (!qword_100665868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665868);
  }
  return result;
}

unint64_t sub_1004DBFE0()
{
  unint64_t result = qword_100665870;
  if (!qword_100665870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665870);
  }
  return result;
}

unint64_t sub_1004DC038()
{
  unint64_t result = qword_100665878;
  if (!qword_100665878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665878);
  }
  return result;
}

uint64_t sub_1004DC08C(char a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)((char *)v1 + *(int *)(type metadata accessor for IdentifiableAvailableUpdate(0) + 44));
    uint64_t v3 = *v2;
    unsigned int v4 = (void *)v2[1];
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = v3;
    v5._object = v4;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x203A545649202CLL;
    unsigned int v6 = (void *)0xE700000000000000;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = (void *)0xE000000000000000;
  }
  _StringGuts.grow(_:)(53);
  v8._uint64_t countAndFlagsBits = 0x4920656C646E7562;
  v8._object = (void *)0xEB00000000203A44;
  String.append(_:)(v8);
  uint64_t v9 = v1[2];
  uint64_t v10 = (void *)v1[3];
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x49206D657469202CLL;
  v12._object = (void *)0xEB00000000203A44;
  String.append(_:)(v12);
  uint64_t v13 = v1[4];
  uint64_t v14 = (void *)v1[5];
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
  v16._object = (void *)0xEE00203A4449206ELL;
  String.append(_:)(v16);
  uint64_t v17 = v1[6];
  uint64_t v18 = (void *)v1[7];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x203A504441202CLL;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  type metadata accessor for IdentifiableAvailableUpdate(0);
  type metadata accessor for URL();
  sub_1004DF200(&qword_10065C4D8, (void (*)(uint64_t))&type metadata accessor for URL);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = v7;
  v22._object = v6;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for IdentifiableAvailableUpdate(uint64_t a1)
{
  return sub_10019B200(a1, qword_100665980);
}

uint64_t sub_1004DC2E4()
{
  _StringGuts.grow(_:)(17);
  uint64_t v1 = v0[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = v1;
  v2._uint64_t countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v3 = v0[4];
  unsigned int v4 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v7 = v0[6];
  Swift::String v8 = (void *)v0[7];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 2108704;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  uint64_t v11 = type metadata accessor for IdentifiableAvailableUpdate(0);
  Swift::String v12 = (void *)((char *)v0 + *(int *)(v11 + 40));
  uint64_t v13 = *v12;
  uint64_t v14 = (void *)v12[1];
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 40;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  uint64_t v17 = (void *)((char *)v0 + *(int *)(v11 + 36));
  uint64_t v18 = *v17;
  Swift::String v19 = (void *)v17[1];
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v23;
}

ValueMetadata *type metadata accessor for UpdatesResponse()
{
  return &type metadata for UpdatesResponse;
}

ValueMetadata *type metadata accessor for UpdatesRequest()
{
  return &type metadata for UpdatesRequest;
}

uint64_t *sub_1004DC470(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a3[8];
    uint64_t v27 = (char *)a1 + v10;
    uint64_t v25 = a2[7];
    uint64_t v26 = (char *)a2 + v10;
    a1[6] = a2[6];
    a1[7] = v25;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v27, v26, v11);
    uint64_t v14 = a3[9];
    uint64_t v15 = a3[10];
    Swift::String v16 = (uint64_t *)((char *)v4 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *Swift::String v16 = *v17;
    v16[1] = v18;
    Swift::String v19 = (char *)v4 + v15;
    Swift::String v20 = (char *)a2 + v15;
    Swift::String v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v21(v20, 1, v11))
    {
      uint64_t v22 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v13(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t sub_1004DC668(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 40);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  }
  return result;
}

void *sub_1004DC798(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = a2[7];
  uint64_t v9 = a3[8];
  uint64_t v25 = (char *)a1 + v9;
  uint64_t v24 = (char *)a2 + v9;
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = v11;
  swift_bridgeObjectRetain();
  v12(v25, v24, v10);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  Swift::String v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *Swift::String v16 = *v17;
  v16[1] = v18;
  Swift::String v19 = (char *)a1 + v15;
  Swift::String v20 = (char *)a2 + v15;
  Swift::String v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v21(v20, 1, v10))
  {
    uint64_t v22 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v10);
  }
  return a1;
}

char *sub_1004DC944(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 4) = a2[4];
  *((void *)a1 + 5) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 6) = a2[6];
  *((void *)a1 + 7) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = a3[9];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (void *)((char *)a2 + v12);
  *(void *)uint64_t v13 = *v14;
  *((void *)v13 + 1) = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  Swift::String v16 = &a1[v15];
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v18(&a1[v15], 1, v9);
  int v19 = v18(v17, 1, v9);
  if (!v7)
  {
    if (!v19)
    {
      v11(v16, v17, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

_OWORD *sub_1004DCB98(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v14 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  uint64_t v15 = (char *)a1 + v14;
  Swift::String v16 = (char *)a2 + v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    uint64_t v17 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  return a1;
}

char *sub_1004DCCF8(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  *((void *)a1 + 4) = a2[4];
  *((void *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  *((void *)a1 + 6) = a2[6];
  *((void *)a1 + 7) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v11) = v24(&a1[v21], 1, v13);
  int v25 = v24(v23, 1, v13);
  if (!v11)
  {
    if (!v25)
    {
      v15(v22, v23, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v23, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
  return a1;
}

uint64_t sub_1004DCEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DCF10);
}

uint64_t sub_1004DCF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1004DD040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DD054);
}

uint64_t sub_1004DD054(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AvailableUpdate(uint64_t a1)
{
  return sub_10019B200(a1, qword_1006658D8);
}

void sub_1004DD1A4()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10026B458();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1004DD27C(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v33 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[8];
    uint64_t v35 = (char *)a2 + v11;
    uint64_t v36 = (char *)a1 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = v13;
    v14(v36, v35, v12);
    uint64_t v16 = a3[9];
    uint64_t v17 = a3[10];
    uint64_t v18 = (uint64_t *)((char *)v4 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (uint64_t *)((char *)v4 + v17);
    uint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    uint64_t v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (char *)v4 + v25;
    uint64_t v30 = (char *)a2 + v25;
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31(v30, 1, v12))
    {
      uint64_t v32 = sub_1000172F8(&qword_10065C3C0);
      memcpy(v29, v30, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v14(v29, v30, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v29, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t sub_1004DD4B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  }
  return result;
}

void *sub_1004DD604(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = a3[8];
  uint64_t v33 = (char *)a2 + v10;
  uint64_t v34 = (char *)a1 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = v12;
  v13(v34, v33, v11);
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (void *)((char *)a1 + v15);
  uint64_t v18 = (void *)((char *)a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)((char *)a1 + v16);
  uint64_t v21 = (void *)((char *)a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = (void *)((char *)a1 + v23);
  uint64_t v26 = (void *)((char *)a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (char *)a1 + v24;
  uint64_t v29 = (char *)a2 + v24;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30(v29, 1, v11))
  {
    uint64_t v31 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    v13(v28, v29, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v11);
  }
  return a1;
}

char *sub_1004DD7EC(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 4) = a2[4];
  *((void *)a1 + 5) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 6) = a2[6];
  *((void *)a1 + 7) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  uint64_t v12 = a3[9];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = (void *)((char *)a2 + v12);
  *(void *)uint64_t v13 = *v14;
  *((void *)v13 + 1) = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (void *)((char *)a2 + v15);
  *(void *)uint64_t v16 = *v17;
  *((void *)v16 + 1) = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (void *)((char *)a2 + v18);
  *(void *)uint64_t v19 = *v20;
  *((void *)v19 + 1) = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[12];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v7) = v24(&a1[v21], 1, v9);
  int v25 = v24(v23, 1, v9);
  if (!v7)
  {
    if (!v25)
    {
      v11(v22, v23, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v22, v9);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v22, v23, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v22, 0, 1, v9);
  return a1;
}

_OWORD *sub_1004DDA98(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v14 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v15 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11))
  {
    uint64_t v18 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

char *sub_1004DDC0C(char *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  *((void *)a1 + 4) = a2[4];
  *((void *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  *((void *)a1 + 6) = a2[6];
  *((void *)a1 + 7) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  uint64_t v16 = a3[9];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *(void *)uint64_t v17 = v20;
  *((void *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)uint64_t v22 = v25;
  *((void *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[11];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *(void *)uint64_t v27 = v30;
  *((void *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v11) = v34(&a1[v31], 1, v13);
  int v35 = v34(v33, 1, v13);
  if (!v11)
  {
    if (!v35)
    {
      v15(v32, v33, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v13);
    goto LABEL_6;
  }
  if (v35)
  {
LABEL_6:
    uint64_t v36 = sub_1000172F8(&qword_10065C3C0);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v32, v33, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v32, 0, 1, v13);
  return a1;
}

uint64_t sub_1004DDE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DDE5C);
}

uint64_t sub_1004DDE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 48);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1004DDF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DDFA0);
}

uint64_t sub_1004DDFA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1000172F8(&qword_10065C3C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 48);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1004DE0D0()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10026B458();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1004DE1AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_1006659D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1004DEE28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_1000172F8(&qword_1006659E8);
  sub_1004DEE7C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1004DE358(char a1)
{
  unint64_t result = 0x657449656C707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726556656C707061;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x6556656C646E7562;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6572616853707061;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1004DE474(char a1)
{
  unint64_t result = 0x657449656C707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726556656C707061;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x6556656C646E7562;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6572616853707061;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004DE590@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065C3C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v28 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1000172F8(&qword_100665A28);
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for AvailableUpdate(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v32 = a1;
  sub_10018AC60(a1, v13);
  sub_1004DF248();
  uint64_t v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return sub_100014524((uint64_t)v32);
  }
  uint64_t v15 = v7;
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  char v40 = 0;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v18;
  char v39 = 1;
  void v12[2] = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12[3] = v19;
  char v38 = 2;
  sub_1004DF200(&qword_10065CFD8, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v33 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v12 + v10[8], v15, v5);
  char v37 = 3;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = (uint64_t *)((char *)v12 + v10[9]);
  *uint64_t v21 = v20;
  v21[1] = v22;
  char v36 = 4;
  v12[4] = KeyedDecodingContainer.decode(_:forKey:)();
  v12[5] = v23;
  char v35 = 5;
  v12[6] = KeyedDecodingContainer.decode(_:forKey:)();
  v12[7] = v24;
  char v34 = 6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v31);
  sub_10026400C(v28, (uint64_t)v12 + v10[10]);
  sub_1004DF29C((uint64_t)v12, v27);
  sub_100014524((uint64_t)v32);
  return sub_1004DF300((uint64_t)v12);
}

uint64_t sub_1004DEB00(uint64_t a1)
{
  unint64_t v2 = sub_1004DEE28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DEB3C(uint64_t a1)
{
  unint64_t v2 = sub_1004DEE28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004DEB78(void *a1)
{
  return sub_1004DE1AC(a1);
}

uint64_t sub_1004DEB90(unsigned __int8 *a1, char *a2)
{
  return sub_10051D4A0(*a1, *a2);
}

Swift::Int sub_1004DEB9C()
{
  return sub_10044AAB8();
}

uint64_t sub_1004DEBA8()
{
  return sub_100449F7C();
}

Swift::Int sub_1004DEBB0()
{
  return sub_10044AAB8();
}

unint64_t sub_1004DEBB8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004DEF44(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1004DEBE8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1004DE358(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1004DEC14()
{
  return sub_1004DE474(*v0);
}

unint64_t sub_1004DEC1C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004DEF44(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004DEC44(uint64_t a1)
{
  unint64_t v2 = sub_1004DF248();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DEC80(uint64_t a1)
{
  unint64_t v2 = sub_1004DF248();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004DECBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004DE590(a1, a2);
}

uint64_t sub_1004DECD4()
{
  return 0x73657461647075;
}

uint64_t sub_1004DECEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73657461647075 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1004DED84(uint64_t a1)
{
  unint64_t v2 = sub_1004DF108();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DEDC0(uint64_t a1)
{
  unint64_t v2 = sub_1004DF108();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1004DEDFC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1004DEF90(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_1004DEE28()
{
  unint64_t result = qword_1006659E0;
  if (!qword_1006659E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006659E0);
  }
  return result;
}

unint64_t sub_1004DEE7C()
{
  unint64_t result = qword_1006659F0;
  if (!qword_1006659F0)
  {
    sub_10017B924(&qword_1006659E8);
    sub_1004DEEF0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006659F0);
  }
  return result;
}

unint64_t sub_1004DEEF0()
{
  unint64_t result = qword_1006659F8;
  if (!qword_1006659F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006659F8);
  }
  return result;
}

unint64_t sub_1004DEF44(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100639FD0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void *sub_1004DEF90(void *a1)
{
  uint64_t v3 = sub_1000172F8(&qword_100665A00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = sub_10018AC60(a1, a1[3]);
  sub_1004DF108();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100014524((uint64_t)a1);
  }
  else
  {
    sub_1000172F8(&qword_100665A10);
    sub_1004DF15C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v7 = (void *)v9[1];
    sub_100014524((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1004DF108()
{
  unint64_t result = qword_100665A08;
  if (!qword_100665A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A08);
  }
  return result;
}

unint64_t sub_1004DF15C()
{
  unint64_t result = qword_100665A18;
  if (!qword_100665A18)
  {
    sub_10017B924(&qword_100665A10);
    sub_1004DF200(&qword_100665A20, (void (*)(uint64_t))type metadata accessor for AvailableUpdate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A18);
  }
  return result;
}

uint64_t sub_1004DF200(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004DF248()
{
  unint64_t result = qword_100665A30;
  if (!qword_100665A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A30);
  }
  return result;
}

uint64_t sub_1004DF29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AvailableUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004DF300(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AvailableUpdate(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AvailableUpdate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DF428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AvailableUpdate.CodingKeys()
{
  return &type metadata for AvailableUpdate.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for UpdatesResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004DF4FCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdatesResponse.CodingKeys()
{
  return &type metadata for UpdatesResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for UpdatesRequest.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DF600);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdatesRequest.CodingKeys()
{
  return &type metadata for UpdatesRequest.CodingKeys;
}

unint64_t sub_1004DF63C()
{
  unint64_t result = qword_100665A38;
  if (!qword_100665A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A38);
  }
  return result;
}

unint64_t sub_1004DF694()
{
  unint64_t result = qword_100665A40;
  if (!qword_100665A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A40);
  }
  return result;
}

unint64_t sub_1004DF6EC()
{
  unint64_t result = qword_100665A48;
  if (!qword_100665A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A48);
  }
  return result;
}

unint64_t sub_1004DF744()
{
  unint64_t result = qword_100665A50;
  if (!qword_100665A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A50);
  }
  return result;
}

unint64_t sub_1004DF79C()
{
  unint64_t result = qword_100665A58;
  if (!qword_100665A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A58);
  }
  return result;
}

unint64_t sub_1004DF7F4()
{
  unint64_t result = qword_100665A60;
  if (!qword_100665A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A60);
  }
  return result;
}

unint64_t sub_1004DF84C()
{
  unint64_t result = qword_100665A68;
  if (!qword_100665A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A68);
  }
  return result;
}

unint64_t sub_1004DF8A4()
{
  unint64_t result = qword_100665A70;
  if (!qword_100665A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A70);
  }
  return result;
}

unint64_t sub_1004DF8FC()
{
  unint64_t result = qword_100665A78;
  if (!qword_100665A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665A78);
  }
  return result;
}

uint64_t sub_1004DF950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10051D38C(*a1, *a2);
}

Swift::Int sub_1004DF95C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004DF9FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004DFA88()
{
  return Hasher._finalize()();
}

unint64_t sub_1004DFB24@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E01E8(*a1);
  *a2 = result;
  return result;
}

void sub_1004DFB54(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xEA00000000007265;
  uint64_t v5 = 0x696669746E656469;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F6973726576;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701869940;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1004DFBB0(void *a1@<X8>)
{
  *a1 = &off_10063A100;
}

id sub_1004DFD60()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DDMUpdateEntity.Entity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DDMUpdateEntity.Entity()
{
  return self;
}

unint64_t sub_1004DFDB8()
{
  sub_1000172F8(&qword_100665AA8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A6B00;
  *(unsigned char *)(inited + 32) = 0;
  long long v3 = v0[1];
  long long v7 = *v0;
  long long v2 = v7;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &protocol witness table for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(_OWORD *)(inited + 40) = v2;
  *(unsigned char *)(inited + 88) = 1;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = &protocol witness table for String;
  *(void *)(inited + 136) = &protocol witness table for String;
  *(_OWORD *)(inited + 96) = v3;
  *(unsigned char *)(inited + 144) = 2;
  long long v5 = v0[2];
  long long v6 = v3;
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &protocol witness table for String;
  *(void *)(inited + 192) = &protocol witness table for String;
  *(_OWORD *)(inited + 152) = v0[2];
  sub_10018B0F0((uint64_t)&v7);
  sub_10018B0F0((uint64_t)&v6);
  sub_10018B0F0((uint64_t)&v5);
  return sub_10044BBDC(inited);
}

unsigned char *storeEnumTagSinglePayload for DDMUpdateEntity.Property(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DFF5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DDMUpdateEntity.Property()
{
  return &type metadata for DDMUpdateEntity.Property;
}

ValueMetadata *type metadata accessor for DDMUpdateEntity()
{
  return &type metadata for DDMUpdateEntity;
}

unint64_t sub_1004DFFA8()
{
  unint64_t result = qword_100665AB0;
  if (!qword_100665AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665AB0);
  }
  return result;
}

unint64_t sub_1004E0000()
{
  unint64_t result = qword_100665AE8;
  if (!qword_100665AE8)
  {
    sub_10017B924(&qword_100665AF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665AE8);
  }
  return result;
}

unint64_t sub_1004E0060()
{
  unint64_t result = qword_100665AF8;
  if (!qword_100665AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665AF8);
  }
  return result;
}

unint64_t sub_1004E00B4(void *a1)
{
  a1[1] = sub_1004E00EC();
  a1[2] = sub_1004E0140();
  unint64_t result = sub_1004E0194();
  a1[3] = result;
  return result;
}

unint64_t sub_1004E00EC()
{
  unint64_t result = qword_100665B00;
  if (!qword_100665B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665B00);
  }
  return result;
}

unint64_t sub_1004E0140()
{
  unint64_t result = qword_100665B08;
  if (!qword_100665B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665B08);
  }
  return result;
}

unint64_t sub_1004E0194()
{
  unint64_t result = qword_100665B10;
  if (!qword_100665B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665B10);
  }
  return result;
}

unint64_t sub_1004E01E8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A098, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

void sub_1004E0234()
{
  type metadata accessor for SlotMachine();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  id v1 = [objc_allocWithZone((Class)type metadata accessor for SlotDrawer()) init];
  id v2 = [objc_allocWithZone((Class)UISSlotMachine) initWithSlotDrawer:v1 options:1];

  *(void *)(v0 + 112) = v2;
  qword_10068DAA0 = v0;
}

uint64_t sub_1004E02BC()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SlotMachine()
{
  return self;
}

id sub_1004E0468()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SlotDrawer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SlotDrawer()
{
  return self;
}

uint64_t sub_1004E04C0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 0x2064696C61766E49;
  }
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "Error code: ");
  BYTE5(v9[1]) = 0;
  HIWORD(v9[1]) = -5120;
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  return v9[0];
}

uint64_t sub_1004E05B4()
{
  type metadata accessor for AppLicenseDelivery();
  swift_allocObject();
  uint64_t result = sub_1004E0788();
  qword_100665C60 = result;
  return result;
}

unint64_t sub_1004E05F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_1000172F8(&qword_10065C3A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = a2;
    *(void *)(inited + 56) = a3;
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1000172F8(&qword_10065C3A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v7;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001DLL;
    *(void *)(inited + 56) = 0x80000001005C0B60;
  }
  return sub_10044B428(inited);
}

uint64_t sub_1004E06E4(uint64_t a1)
{
  unint64_t v2 = sub_1004E480C();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1004E0720(uint64_t a1)
{
  unint64_t v2 = sub_1004E480C();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1004E075C()
{
  if (v0[2]) {
    return *(int *)v0;
  }
  else {
    return 1;
  }
}

unint64_t sub_1004E0774(uint64_t a1)
{
  return sub_1004E05F0(a1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1004E077C()
{
  return sub_1004E04C0(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_1004E0788()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = xrPnDyPw();
  if (v5 != noErr.getter())
  {
    uint64_t v14 = v2;
    int v13 = v5;
    static Logger.ald.getter();
    uint64_t v15 = v4;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412546;
      uint64_t v11 = sub_1005163F0();
      uint64_t v17 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      *(_WORD *)(v9 + 12) = 1026;
      int v16 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%@] Unable to initialize ALD: %{public}d", (uint8_t *)v9, 0x12u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v15, v1);
    abort();
  }
  return v0;
}

uint64_t sub_1004E098C(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*a3 & 0x8000000000000000) != 0 || HIDWORD(*a3))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unsigned int v3 = FbLnABIk();
    return sub_1004E1B24(v3);
  }
  return result;
}

uint64_t sub_1004E0AA0(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000020, 0x80000001005C0AA0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000020;
    v10[2] = 0x80000001005C0AA0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E0CFC(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000022, 0x80000001005C0A70, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000022;
    v10[2] = 0x80000001005C0A70;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E0F58(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD00000000000001ALL, 0x80000001005C0A20, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD00000000000001ALL;
    v10[2] = 0x80000001005C0A20;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E11B4(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000039, 0x80000001005C09E0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000039;
    v10[2] = 0x80000001005C09E0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E1410(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000022, 0x80000001005C0A40, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000022;
    v10[2] = 0x80000001005C0A40;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E166C(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD00000000000001ALL, 0x80000001005C0AD0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD00000000000001ALL;
    v10[2] = 0x80000001005C0AD0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E18C8(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000014, 0x80000001005C0B20, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000014;
    v10[2] = 0x80000001005C0B20;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E1B24(unsigned int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.ald.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67240450;
      LODWORD(v12) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 8) = 2082;
      uint64_t v12 = sub_1000143F4(0xD000000000000017, 0x80000001005C0B40, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v9, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_1004E4414();
    swift_allocError();
    *uint64_t v10 = a1;
    v10[1] = 0xD000000000000017;
    v10[2] = 0x80000001005C0B40;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E1D80(uint64_t a1, void *a2, uint64_t a3)
{
  id v35 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  int v11 = QSIlMWCo();
  if (v11 != noErr.getter())
  {
    static Logger.ald.getter();
    uint64_t v12 = v35;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    int v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v33 = v8;
      uint64_t v17 = v16;
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      uint64_t v34 = v5;
      uint64_t v32 = a3;
      v30[1] = v17 + 12;
      char v36 = v12;
      uint64_t v19 = v12;
      int v31 = v15;
      uint64_t v20 = v19;
      uint64_t v5 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v12;

      *(_WORD *)(v17 + 12) = 1026;
      LODWORD(v36) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v31, "[%@] Unable to dispose of license response: %{public}d", (uint8_t *)v17, 0x12u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      os_log_type_t v8 = v33;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v13 = v12;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  int v21 = cdHFeFDJ();
  uint64_t result = noErr.getter();
  if (v21 != result)
  {
    static Logger.ald.getter();
    uint64_t v23 = v35;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v34 = v5;
      uint64_t v28 = v27;
      uint64_t v33 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412546;
      LODWORD(v35) = v26;
      char v36 = v23;
      uint64_t v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v33 = v23;

      *(_WORD *)(v28 + 12) = 1026;
      LODWORD(v36) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v35, "[%@] Unable to destroy context: %{public}d", (uint8_t *)v28, 0x12u);
      sub_1000172F8(&qword_10065DB10);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v34;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v24 = v23;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t type metadata accessor for AppLicenseDelivery()
{
  return self;
}

void sub_1004E21AC(void *a1, unsigned int a2, unint64_t *a3)
{
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1004E248C((int *)&v18, a2, a3);
      uint64_t v9 = v18;
      unint64_t v10 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_5;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v11 = *((void *)&v18 + 1);
      uint64_t v12 = *(void *)(v18 + 16);
      uint64_t v13 = *(void *)(v18 + 24);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
        JUMPOUT(0x1004E247CLL);
      }
      if (__OFSUB__(v12, __DataStorage._offset.getter())) {
        goto LABEL_14;
      }
      if (__OFSUB__(v13, v12)) {
        goto LABEL_16;
      }
      __DataStorage._length.getter();
      os_log_type_t v14 = sub_10054A00C(a2, *a3);
      unint64_t v15 = v14[1].u64[0];
      if (v15 >> 61) {
        goto LABEL_17;
      }
      sub_1004E098C((uint64_t)v14[2].i64, (uint64_t)v14[2].i64 + 4 * v15, a3);
      swift_bridgeObjectRelease();
      *a1 = v18;
      a1[1] = v11 | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      uint64_t v16 = sub_10054A00C(a2, *a3);
      unint64_t v17 = v16[1].u64[0];
      if (v17 >> 61) {
        goto LABEL_15;
      }
      sub_1004E098C((uint64_t)v16[2].i64, (uint64_t)v16[2].i64 + 4 * v17, a3);
      swift_bridgeObjectRelease();
      return;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v3;
      BYTE10(v18) = BYTE2(v3);
      BYTE11(v18) = BYTE3(v3);
      BYTE12(v18) = BYTE4(v3);
      BYTE13(v18) = BYTE5(v3);
      BYTE14(v18) = BYTE6(v3);
      uint64_t v7 = sub_10054A00C(a2, *a3);
      unint64_t v8 = v7[1].u64[0];
      if (v8 >> 61)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      sub_1004E098C((uint64_t)v7[2].i64, (uint64_t)v7[2].i64 + 4 * v8, a3);
      swift_bridgeObjectRelease();
      uint64_t v9 = v18;
      unint64_t v10 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_5:
      *a1 = v9;
      a1[1] = v10;
      break;
  }
}

void sub_1004E248C(int *a1, unsigned int a2, unint64_t *a3)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v6, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      uint64_t v7 = sub_10054A00C(a2, *a3);
      unint64_t v8 = v7[1].u64[0];
      if (!(v8 >> 61))
      {
        sub_1004E098C((uint64_t)v7[2].i64, (uint64_t)v7[2].i64 + 4 * v8, a3);
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_8;
    }
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
  }
  __break(1u);
}

void *sub_1004E257C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_1000172F8(&qword_100663C60);
          unint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          long long v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_100012670(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_100013510(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1004E2728);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004E2738(uint64_t a1)
{
  uint64_t v9 = sub_1000172F8(&qword_10065FE38);
  uint64_t v10 = sub_10000DDFC((unint64_t *)&qword_10065FE40, &qword_10065FE38);
  v8[0] = a1;
  uint64_t v2 = sub_10018AC60(v8, v9);
  unint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_10052F360(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100014524((uint64_t)v8);
  return v5;
}

uint64_t sub_1004E27F8(uint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  sub_100264C84(a3, a4);
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      unint64_t v13 = HIDWORD(a3) - (int)a3;
LABEL_5:
      if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
        goto LABEL_28;
      }
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      unint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_5;
      }
      goto LABEL_25;
    default:
      break;
  }
  sub_100264C84(a5, a6);
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_26;
      }
      unint64_t v16 = HIDWORD(a5) - (int)a5;
LABEL_11:
      if ((v16 & 0x8000000000000000) != 0 || HIDWORD(v16)) {
        goto LABEL_28;
      }
LABEL_13:
      unsigned int v19 = fyzGzQHg();
      uint64_t result = sub_1004E0AA0(v19);
      if (v6) {
        return result;
      }
      unint64_t v21 = *(void *)(a1 + 16);
      unint64_t v22 = HIDWORD(v21);
      if (a2)
      {
        if (!v22)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_10028EFBC(0, v21, 0, (char *)a1);
          }
          goto LABEL_22;
        }
LABEL_28:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1004E2C50);
      }
      if (v22) {
        goto LABEL_28;
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10028EFBC(0, v21, 0, (char *)a1);
      }
LABEL_22:
      unsigned int v23 = niaOacKH();
      swift_bridgeObjectRelease();
      sub_1004E0CFC(v23);
      uint64_t v24 = type metadata accessor for MarketplaceKitError();
      sub_10026F43C();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for MarketplaceKitError.invalidLicense(_:), v24);
      swift_willThrow();
      qENIaLkr();
      return qENIaLkr();
    case 2uLL:
      uint64_t v18 = *(void *)(a5 + 16);
      uint64_t v17 = *(void *)(a5 + 24);
      unint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_11;
      }
      goto LABEL_27;
    default:
      goto LABEL_13;
  }
}

unint64_t sub_1004E2C70(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v77 = a8;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v18 - 8);
  uint64_t v79 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  os_log_t v75 = (os_log_t)((char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v74 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  uint64_t v76 = (char *)&v73 - v23;
  int v83 = a7;
  if (!a7)
  {
    sub_100264C84(a1, a2);
    switch(a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_52;
        }
        unint64_t v53 = HIDWORD(a1) - (int)a1;
LABEL_31:
        if ((v53 & 0x8000000000000000) != 0 || HIDWORD(v53))
        {
LABEL_56:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1004E3630);
        }
LABEL_33:
        sub_100264C84(a3, a4);
        switch(a4 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_54;
            }
            unint64_t v56 = HIDWORD(a3) - (int)a3;
LABEL_37:
            if ((v56 & 0x8000000000000000) != 0 || HIDWORD(v56)) {
              goto LABEL_56;
            }
LABEL_39:
            unsigned int v59 = fyzGzQHg();
            sub_1004E0F58(v59);
            if (v10) {
              return a2;
            }
            unsigned int v60 = niaOacKH();
            sub_1004E11B4(v60);
            break;
          case 2uLL:
            uint64_t v58 = *(void *)(a3 + 16);
            uint64_t v57 = *(void *)(a3 + 24);
            unint64_t v56 = v57 - v58;
            if (!__OFSUB__(v57, v58)) {
              goto LABEL_37;
            }
            goto LABEL_55;
          default:
            goto LABEL_39;
        }
        break;
      case 2uLL:
        uint64_t v55 = *(void *)(a1 + 16);
        uint64_t v54 = *(void *)(a1 + 24);
        unint64_t v53 = v54 - v55;
        if (!__OFSUB__(v54, v55)) {
          goto LABEL_31;
        }
        goto LABEL_53;
      default:
        goto LABEL_33;
    }
  }
  a2 = (unint64_t)a10;
  sub_100012670(a5, a6);
  uint64_t v24 = sub_1004E257C(a5, a6);
  sub_100013510(a5, a6);
  uint64_t v85 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v26 = *(void *)(a5 + 16);
      uint64_t v25 = *(void *)(a5 + 24);
      unint64_t v27 = v25 - v26;
      if (!__OFSUB__(v25, v26)) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_7:
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
      }
      unint64_t v27 = HIDWORD(a5) - (int)a5;
LABEL_9:
      if ((v27 & 0x8000000000000000) != 0 || HIDWORD(v27)) {
        goto LABEL_56;
      }
LABEL_11:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
      }
        sub_10028F0F4(0, v24[2], 0, v24);
LABEL_13:
      unsigned int v28 = jYWQDEvI();
      swift_bridgeObjectRelease();
      sub_1004E1410(v28);
      if (v10) {
        return a2;
      }
      if (!v85)
      {
        os_log_t v47 = v75;
        static Logger.ald.getter();
        char v48 = a10;
        char v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          char v51 = (uint8_t *)swift_slowAlloc();
          a2 = swift_slowAlloc();
          *(_DWORD *)char v51 = 138412290;
          uint64_t v81 = (uint64_t)v48;
          uint64_t v52 = v48;
          os_log_t v47 = v75;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)a2 = v48;

          _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%@] No license provided from response", v51, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          char v49 = v48;
        }
        uint64_t v67 = v78;
        uint64_t v66 = v79;

        (*(void (**)(os_log_t, uint64_t))(v67 + 8))(v47, v66);
        goto LABEL_49;
      }
      uint64_t v29 = sub_1002D56EC(*(_DWORD *)(v85 + 16), *(_DWORD *)(v85 + 20), *(char **)(v85 + 24), v77, a9);
      if (!v29)
      {
        a2 = (unint64_t)v74;
        static Logger.ald.getter();
        char v48 = a10;
        int v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)swift_slowAlloc();
          uint64_t v64 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v63 = 138412290;
          uint64_t v81 = (uint64_t)v48;
          uint64_t v65 = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v64 = v48;

          _os_log_impl((void *)&_mh_execute_header, v61, v62, "[%@] No license parsed from response", v63, 0xCu);
          sub_1000172F8(&qword_10065DB10);
          swift_arrayDestroy();
          a2 = (unint64_t)v74;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          int v61 = v48;
        }
        uint64_t v69 = v78;
        uint64_t v68 = v79;

        (*(void (**)(unint64_t, uint64_t))(v69 + 8))(a2, v68);
LABEL_49:
        uint64_t v70 = type metadata accessor for MarketplaceKitError();
        sub_10026F43C();
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v70 - 8) + 104))(v71, enum case for MarketplaceKitError.invalidLicense(_:), v70);
        swift_willThrow();
        sub_1004E1D80((uint64_t)&v85, v48, (uint64_t)&v83);
        return a2;
      }
      a2 = (unint64_t)v29;
      uint64_t v30 = v76;
      static Logger.ald.getter();
      id v31 = a10;
      swift_bridgeObjectRetain_n();
      id v32 = v31;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      int v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = swift_slowAlloc();
        char v37 = (void *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v84 = v77;
        *(_DWORD *)uint64_t v36 = 138412546;
        os_log_t v75 = v33;
        uint64_t v81 = (uint64_t)v32;
        LODWORD(v74) = v35;
        id v38 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v37 = v32;

        *(_WORD *)(v36 + 12) = 2082;
        uint64_t v80 = *(void *)(a2 + 16);
        uint64_t v39 = v80;
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v82 = v40;
        v41._uint64_t countAndFlagsBits = 32;
        v41._object = (void *)0xE100000000000000;
        String.append(_:)(v41);
        v42._uint64_t countAndFlagsBits = 7955819;
        v42._object = (void *)0xE300000000000000;
        String.append(_:)(v42);
        if (v39 == 1) {
          uint64_t v43 = 0;
        }
        else {
          uint64_t v43 = 115;
        }
        if (v39 == 1) {
          unint64_t v44 = 0xE000000000000000;
        }
        else {
          unint64_t v44 = 0xE100000000000000;
        }
        unint64_t v45 = v44;
        String.append(_:)(*(Swift::String *)&v43);
        swift_bridgeObjectRelease();
        uint64_t v81 = sub_1000143F4(v81, v82, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v46 = v75;
        _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "[%@] Successfully fetched %{public}s", (uint8_t *)v36, 0x16u);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v79);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v30, v79);
      }
      sub_1004E1D80((uint64_t)&v85, v32, (uint64_t)&v83);
      return a2;
    case 3uLL:
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      goto LABEL_12;
    default:
      goto LABEL_11;
  }
}

uint64_t sub_1004E3660(unsigned int a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v11._object = (void *)0x80000001005C0AF0;
    v11._uint64_t countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = a2;
    v12._object = a3;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    uint64_t v15 = v23;
    unint64_t v14 = v24;
    static Logger.ald.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = v6;
      uint64_t v19 = v18;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v19 = 67240450;
      LODWORD(v25) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 8) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_1000143F4(v15, v14, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Got ALD error: %{public}d: %{public}s", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v22);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    sub_1004E4414();
    swift_allocError();
    *uint64_t v20 = a1;
    v20[1] = v15;
    v20[2] = v14;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1004E393C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_100012670(a5, a6);
  id v32 = sub_1004E257C(a5, a6);
  sub_100013510(a5, a6);
  sub_100012670(a7, a8);
  id v31 = sub_1004E257C(a7, a8);
  sub_100013510(a7, a8);
  sub_100012670(a3, a4);
  uint64_t v20 = sub_1004E257C(a3, a4);
  sub_100013510(a3, a4);
  sub_100012670(a1, a2);
  uint64_t v21 = sub_1004E257C(a1, a2);
  sub_100013510(a1, a2);
  if (HIDWORD(v21[2]) || HIDWORD(v20[2])) {
    goto LABEL_24;
  }
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1004E3CA0);
      }
      unint64_t v22 = HIDWORD(a5) - (int)a5;
LABEL_7:
      if ((v22 & 0x8000000000000000) != 0 || HIDWORD(v22)) {
        goto LABEL_24;
      }
LABEL_9:
      switch(a8 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a7), a7)) {
            goto LABEL_22;
          }
          unint64_t v26 = HIDWORD(a7) - (int)a7;
LABEL_13:
          if ((v26 & 0x8000000000000000) != 0 || HIDWORD(v26)) {
            goto LABEL_24;
          }
LABEL_15:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_10028F0F4(0, v32[2], 0, v32);
          }
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_10028F0F4(0, v31[2], 0, v31);
          }
          unsigned int v29 = g4Bksweo();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRetain();
          sub_1004E3660(v29, a11, a12);
          return swift_bridgeObjectRelease();
        case 2uLL:
          uint64_t v28 = *(void *)(a7 + 16);
          uint64_t v27 = *(void *)(a7 + 24);
          unint64_t v26 = v27 - v28;
          if (!__OFSUB__(v27, v28)) {
            goto LABEL_13;
          }
          goto LABEL_23;
        default:
          goto LABEL_15;
      }
    case 2uLL:
      uint64_t v24 = *(void *)(a5 + 16);
      uint64_t v23 = *(void *)(a5 + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      unint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_7;
      }
      goto LABEL_21;
    default:
      goto LABEL_9;
  }
}

uint64_t sub_1004E3CC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_100012670(a1, a2);
  unint64_t v8 = sub_1004E257C(a1, a2);
  sub_100013510(a1, a2);
  memset(v16, 0, sizeof(v16));
  switch(v7)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        __break(1u);
      }
      unint64_t v11 = HIDWORD(a1) - (int)a1;
      goto LABEL_9;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      unint64_t v11 = v9 - v10;
      if (__OFSUB__(v9, v10))
      {
        __break(1u);
LABEL_5:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
LABEL_9:
        if ((v11 & 0x8000000000000000) != 0 || HIDWORD(v11))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1004E3F40);
        }
LABEL_11:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
        }
          sub_10028F0F4(0, v8[2], 0, v8);
      }
      unsigned int v12 = TBQFRWlW();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1004E166C(v12);
      if (v3)
      {
        uint64_t v14 = type metadata accessor for MarketplaceKitError();
        sub_10026F43C();
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v15, enum case for MarketplaceKitError.invalidLicense(_:), v14);
        swift_willThrow();
        return swift_errorRelease();
      }
      else
      {
        *(void *)a3 = *(void *)v16;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)&v16[8];
        *(_OWORD *)(a3 + 24) = *(_OWORD *)&v16[24];
      }
      return result;
    case 3uLL:
      goto LABEL_5;
    default:
      goto LABEL_11;
  }
}

uint64_t sub_1004E3F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  unsigned int v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  sub_100012670(v7, v6);
  unint64_t v8 = sub_1004E257C(v7, v6);
  sub_100013510(v7, v6);
  uint64_t v9 = *(void *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  sub_100012670(v9, v10);
  unint64_t v11 = sub_1004E257C(v9, v10);
  sub_100013510(v9, v10);
  switch(v6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v7), v7))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      unint64_t v12 = HIDWORD(v7) - (int)v7;
LABEL_5:
      if ((v12 & 0x8000000000000000) != 0 || HIDWORD(v12))
      {
LABEL_28:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1004E43F4);
      }
LABEL_7:
      switch(v10 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v9), v9)) {
            goto LABEL_27;
          }
          unint64_t v17 = HIDWORD(v9) - (int)v9;
LABEL_15:
          if ((v17 & 0x8000000000000000) != 0 || HIDWORD(v17)) {
            goto LABEL_28;
          }
LABEL_17:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_18:
          }
            sub_10028F0F4(0, v8[2], 0, v8);
LABEL_19:
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_10028F0F4(0, v11[2], 0, v11);
          }
          int v18 = CWeMQvFE();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t result = v31;
          if (!v31)
          {
            static Logger.ald.getter();
            uint64_t v20 = Logger.logObject.getter();
            os_log_type_t v21 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v20, v21))
            {
              uint64_t v22 = swift_slowAlloc();
              uint64_t v23 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v22 = 138412546;
              uint64_t v24 = sub_1005163F0();
              uint64_t v30 = v24;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v23 = v24;
              *(_WORD *)(v22 + 12) = 1026;
              LODWORD(v30) = v18;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%@] Failed to instantiate ALD decoder session: %{public}d", (uint8_t *)v22, 0x12u);
              sub_1000172F8(&qword_10065DB10);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v28);
            sub_1004E4414();
            swift_allocError();
            v25[1] = 0;
            v25[2] = 0;
            *BOOL v25 = 0;
            return swift_willThrow();
          }
          return result;
        case 2uLL:
          uint64_t v16 = *(void *)(v9 + 16);
          uint64_t v15 = *(void *)(v9 + 24);
          unint64_t v17 = v15 - v16;
          if (!__OFSUB__(v15, v16)) {
            goto LABEL_15;
          }
          __break(1u);
LABEL_11:
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3uLL:
          goto LABEL_11;
        default:
          goto LABEL_17;
      }
    case 2uLL:
      uint64_t v14 = *(void *)(v7 + 16);
      uint64_t v13 = *(void *)(v7 + 24);
      unint64_t v12 = v13 - v14;
      if (!__OFSUB__(v13, v14)) {
        goto LABEL_5;
      }
      goto LABEL_26;
    default:
      goto LABEL_7;
  }
}

unint64_t sub_1004E4414()
{
  unint64_t result = qword_100665D00;
  if (!qword_100665D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppLicenseDelivery.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AppLicenseDelivery.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t sub_1004E4510(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1004E4528(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *unint64_t result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[2] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLicenseDelivery.Error()
{
  return &type metadata for AppLicenseDelivery.Error;
}

void sub_1004E4560(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 >> 62;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_8;
      }
      __break(1u);
LABEL_6:
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v6 = (int)v6;
LABEL_8:
      if (v6 >= 0) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 0x7FFF;
      }
      uint64_t v19 = v10 >> 15;
      if ((unint64_t)(v6 + 0x7FFF) <= 0xFFFE)
      {
        if (v5)
        {
          if (v5 == 1)
          {
            LODWORD(v11) = HIDWORD(v3) - v3;
            if (__OFSUB__(HIDWORD(v3), v3))
            {
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
            uint64_t v11 = (int)v11;
          }
          else
          {
            uint64_t v17 = *(void *)(v3 + 16);
            uint64_t v16 = *(void *)(v3 + 24);
            BOOL v9 = __OFSUB__(v16, v17);
            uint64_t v11 = v16 - v17;
            if (v9)
            {
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else
        {
          uint64_t v11 = BYTE6(v4);
        }
        if (v11 < 1 || (a3 & 1) == 0)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v19 = 1;
        if (!v5) {
          goto LABEL_30;
        }
        goto LABEL_18;
      }
      if (v6 < 0x8000) {
        goto LABEL_40;
      }
      if (v5)
      {
LABEL_18:
        if (v5 != 1)
        {
          uint64_t v15 = v3 + 16;
          uint64_t v14 = *(void *)(v3 + 16);
          uint64_t v13 = *(void *)(v15 + 8);
          BOOL v9 = __OFSUB__(v13, v14);
          unint64_t v12 = v13 - v14;
          if (!v9) {
            goto LABEL_22;
          }
          goto LABEL_37;
        }
        LODWORD(v12) = HIDWORD(v3) - v3;
        if (!__OFSUB__(HIDWORD(v3), v3))
        {
          unint64_t v12 = (int)v12;
LABEL_22:
          if ((v12 & 0x8000000000000000) == 0 && !HIDWORD(v12)) {
            goto LABEL_31;
          }
LABEL_42:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1004E473CLL);
        }
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
LABEL_30:
      LODWORD(v12) = BYTE6(v4);
LABEL_31:
      if (v12 >= 0x8000) {
        unsigned int v18 = 0x8000;
      }
      else {
        unsigned int v18 = v12;
      }
      sub_1004E21AC(a1, v18, (unint64_t *)&v19);
      return;
    case 3uLL:
      goto LABEL_41;
    default:
      uint64_t v6 = BYTE6(v4);
      goto LABEL_8;
  }
}

uint64_t sub_1004E474C(uint64_t a1)
{
  uint64_t v9 = sub_1000172F8(&qword_10065C1A0);
  uint64_t v10 = sub_10000DDFC(&qword_100665D08, &qword_10065C1A0);
  v8[0] = a1;
  uint64_t v2 = sub_10018AC60(v8, v9);
  uint64_t v3 = (unsigned char *)(*v2 + 32);
  unint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_retain();
  sub_10052F360(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100014524((uint64_t)v8);
  return v5;
}

unint64_t sub_1004E480C()
{
  unint64_t result = qword_100665D10;
  if (!qword_100665D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D10);
  }
  return result;
}

uint64_t sub_1004E4860(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  int v8 = a5;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  sub_10018B2A8(a3, a4);
  URLRequest.httpBody.setter();
  if (v8 != 2)
  {
    if (v8) {
      unint64_t v12 = 0xD000000000000010;
    }
    else {
      unint64_t v12 = 0xD000000000000021;
    }
    if (v8) {
      unint64_t v13 = 0x80000001005BE4E0;
    }
    else {
      unint64_t v13 = 0x80000001005BE500;
    }
    unint64_t v14 = v13;
    v15._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
    v15._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v12, v15);
    swift_bridgeObjectRelease();
  }
  sub_10018AE44(a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

uint64_t sub_1004E4A30(unsigned __int8 *a1, char *a2)
{
  return sub_10051E694(*a1, *a2);
}

Swift::Int sub_1004E4A3C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004E4B2C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004E4C04()
{
  return Hasher._finalize()();
}

unint64_t sub_1004E4CF0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004E4FDC(*a1);
  *a2 = result;
  return result;
}

void sub_1004E4D20(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xED00006E6F697461;
  uint64_t v3 = 0x7A69726F68747541;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000065707954;
      uint64_t v3 = 0x2D746E65746E6F43;
      goto LABEL_3;
    case 2:
      *a1 = 0x6567412D72657355;
      a1[1] = 0xEA0000000000746ELL;
      break;
    case 3:
      *a1 = 0x65676E6152;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unsigned char *storeEnumTagSinglePayload for HTTPHeader(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E4E9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeader()
{
  return &type metadata for HTTPHeader;
}

uint64_t sub_1004E4ED4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004E4F34()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1004E4F88()
{
  unint64_t result = qword_100665D18;
  if (!qword_100665D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D18);
  }
  return result;
}

unint64_t sub_1004E4FDC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10063A128, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_1004E5028()
{
  unint64_t result = qword_100665D20;
  if (!qword_100665D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D20);
  }
  return result;
}

void sub_1004E507C(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter()) {
    return;
  }
  unint64_t v3 = (const char *)XPC_EVENT_KEY_NAME.getter();
  if (!xpc_dictionary_get_string(a1, v3)) {
    return;
  }
  String.init(cString:)();
  xpc_object_t v4 = xpc_dictionary_get_dictionary(a1, "UserInfo");
  if (!v4) {
    goto LABEL_7;
  }
  xpc_type_t v5 = xpc_get_type(v4);
  if (v5 != (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    swift_unknownObjectRelease();
LABEL_7:
    id v6 = [self defaultCenter];
    id v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v6 postNotificationName:v11 object:0];

    return;
  }
  if (_CFXPCCreateCFObjectFromXPCObject() && (sub_1000172F8(&qword_10065DFD0), swift_dynamicCast())) {
    uint64_t v7 = v12;
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = [self defaultCenter];
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v7)
  {
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.Class isa = 0;
  }
  [v8 postNotificationName:v9 object:0 userInfo:v10.super.isa];
  swift_unknownObjectRelease();
}

void sub_1004E52A0(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == (xpc_type_t)XPC_TYPE_DICTIONARY.getter())
  {
    unint64_t v3 = (const char *)XPC_EVENT_KEY_NAME.getter();
    if (xpc_dictionary_get_string(a1, v3))
    {
      String.init(cString:)();
      id v4 = [self defaultCenter];
      id v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v4 postNotificationName:v5 object:0];
    }
  }
}

void sub_1004E5384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = (id)IXCreateUserPresentableError();

  if (!v13) {
    __break(1u);
  }
  unint64_t v14 = (void *)_convertErrorToNSError(_:)();
  id v42 = 0;
  unsigned int v15 = [v3 cancelForReason:v14 client:28 error:&v42];

  if (v15)
  {
    id v16 = v42;
  }
  else
  {
    id v17 = v42;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    static Logger.install.getter();
    id v18 = v3;
    swift_errorRetain();
    id v19 = v18;
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v39 = v8;
      uint64_t v24 = v23;
      id v38 = (void *)swift_slowAlloc();
      id v42 = v38;
      *(_DWORD *)uint64_t v24 = 136315394;
      id v25 = objc_msgSend(v19, "uniqueIdentifier", v24 + 4);
      int v36 = v22;
      id v26 = v25;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1004E66F0();
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = v9;
      unint64_t v29 = v28;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
      uint64_t v41 = sub_1000143F4(v27, v29, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t ErrorValue = swift_getErrorValue();
      __chkstk_darwin(ErrorValue);
      (*(void (**)(char *))(v32 + 16))((char *)&v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v41 = sub_1000143F4(v33, v34, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v36, "An error occurred while canceling coordinator '%s': %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v39);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

uint64_t sub_1004E588C()
{
  if ([v0 creatorIdentifier] == (id)28) {
    return 1;
  }
  v8[1] = &OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise;
  uint64_t v2 = swift_dynamicCastObjCProtocolConditional();
  if (v2)
  {
    unint64_t v3 = (void *)v2;
    v8[0] = 0;
    id v4 = v0;
    id v5 = [v3 appAssetPromiseResponsibleClientWithError:v8];
    if (v8[0])
    {
      id v6 = v8[0];
      swift_willThrow();
    }
    else
    {
      id v7 = v5;

      if (v7 == (id)28) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1004E598C(uint64_t a1, void *a2)
{
  unint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

void sub_1004E59E4()
{
  id v1 = objc_allocWithZone((Class)IXPromisedOutOfBandTransfer);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithName:v2 client:28 diskSpaceNeeded:0];

  if (v3)
  {
    [v3 setPercentComplete:1.0];
    [v3 setComplete:1];
    id v6 = 0;
    if ([v0 setPreparationPromise:v3 withError:&v6])
    {
      id v4 = v6;
    }
    else
    {
      id v5 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
  }
}

id sub_1004E5B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = 0;
  id v9 = [v6 initAppPlaceholderWithBundleName:v7 bundleID:v8 installType:a5 client:28 error:&v13];

  if (v9)
  {
    id v10 = v13;
  }
  else
  {
    id v11 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v9;
}

BOOL sub_1004E5C40(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 uniqueIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v10 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    swift_beginAccess();
    id v11 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = a1;

    id v12 = a1;
  }
  return (v10 & 1) == 0;
}

void sub_1004E5D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1000172F8(&qword_100665D38);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  Class ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_1004E67DC;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004E5FBC;
  id aBlock[3] = &unk_10064AAF8;
  id v13 = _Block_copy(aBlock);
  swift_release();
  [ObjCClassFromMetadata uninstallAppWithIdentity:a3 options:a4 completion:v13];
  _Block_release(v13);
}

uint64_t sub_1004E5F4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_1000172F8(&qword_100665D38);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_1000172F8(&qword_100665D38);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_1004E5FBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void *sub_1004E6034(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  id v38 = &v33[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v37 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v9 = &v33[-v8];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  uint64_t v41 = v10 + 16;
  unint64_t v11 = self;
  uint64_t v12 = *(void (**)(unsigned char *, void *, uint64_t))(v5 + 16);
  int v36 = a1;
  v12(v9, a1, v4);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v15 = (char *)swift_allocObject();
  (*(void (**)(char *, unsigned char *, uint64_t))(v5 + 32))(&v15[v13], v9, v4);
  *(void *)&v15[v14] = v10;
  aBlock[4] = sub_1004E664C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1004E598C;
  id aBlock[3] = &unk_10064AAA8;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(v9) = [v11 enumerateCoordinatorsWithError:aBlock usingBlock:v16];
  _Block_release(v16);
  id v17 = aBlock[0];
  if (!v9)
  {
    id v18 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    id v19 = v38;
    static Logger.install.getter();
    uint64_t v20 = v37;
    v12(v37, v36, v4);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      int v36 = (void *)swift_slowAlloc();
      aBlock[0] = v36;
      *(_DWORD *)uint64_t v24 = 136446466;
      os_log_t v35 = v21;
      sub_1004E66F0();
      int v34 = v23;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_1000143F4(v25, v26, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v20, v4);
      *(_WORD *)(v24 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v27 = Error.localizedDescription.getter();
      uint64_t v42 = sub_1000143F4(v27, v28, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v29 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v34, "Error looking for coordinator with ID: %{public}s: %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v20, v4);
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
  }
  swift_beginAccess();
  uint64_t v30 = *(void **)(v10 + 16);
  id v31 = v30;
  swift_release();
  return v30;
}

uint64_t sub_1004E6570()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004E65A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

BOOL sub_1004E664C(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1004E5C40(a1, v1 + v4, v5);
}

uint64_t sub_1004E66E8()
{
  return swift_release();
}

unint64_t sub_1004E66F0()
{
  unint64_t result = qword_100665D30;
  if (!qword_100665D30)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D30);
  }
  return result;
}

uint64_t sub_1004E6748()
{
  uint64_t v1 = sub_1000172F8(&qword_100665D38);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004E67DC(uint64_t a1, uint64_t a2)
{
  sub_1000172F8(&qword_100665D38);

  return sub_1004E5F4C(a1, a2);
}

unsigned char *_s5ErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004E692CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_1004E6968()
{
  unint64_t result = qword_100665D40;
  if (!qword_100665D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665D40);
  }
  return result;
}

uint64_t *sub_1004E69C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for ManagedAppDistributionError();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = type metadata accessor for MarketplaceKitError();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 4u:
      case 6u:
      case 7u:
      case 0xBu:
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
      case 9u:
        uint64_t v11 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
      case 0xAu:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[2];
        uint64_t v15 = a2[3];
        a1[2] = v14;
        a1[3] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1004E6D04(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for ManagedAppDistributionError();
      goto LABEL_9;
    case 1:
      uint64_t v3 = type metadata accessor for MarketplaceKitError();
      goto LABEL_9;
    case 3:
    case 4:
    case 6:
    case 7:
    case 11:
      goto LABEL_4;
    case 5:
    case 9:
      uint64_t v3 = type metadata accessor for UUID();
LABEL_9:
      unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 8:
    case 10:
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1004E6E1C(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for ManagedAppDistributionError();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_8;
    case 1u:
      uint64_t v7 = type metadata accessor for MarketplaceKitError();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_8;
    case 3u:
    case 4u:
    case 6u:
    case 7u:
    case 0xBu:
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
    case 9u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_8;
    case 8u:
    case 0xAu:
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = a2[2];
      uint64_t v11 = a2[3];
      a1[2] = v10;
      a1[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1004E70F0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003EDBC4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for ManagedAppDistributionError();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_9;
      case 1u:
        uint64_t v7 = type metadata accessor for MarketplaceKitError();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_9;
      case 3u:
      case 4u:
      case 6u:
      case 7u:
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
      case 9u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_9;
      case 8u:
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for InternalError()
{
  uint64_t result = qword_100665DC0;
  if (!qword_100665DC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1004E7468(void *a1, const void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for ManagedAppDistributionError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      goto LABEL_6;
    case 1u:
      uint64_t v7 = type metadata accessor for MarketplaceKitError();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      goto LABEL_6;
    case 5u:
    case 9u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1004E7650(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003EDBC4((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for ManagedAppDistributionError();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        goto LABEL_7;
      case 1u:
        uint64_t v7 = type metadata accessor for MarketplaceKitError();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        goto LABEL_7;
      case 5u:
      case 9u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1004E7848()
{
  uint64_t result = type metadata accessor for ManagedAppDistributionError();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MarketplaceKitError();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for UUID();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1004E7984()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v1 - 8);
  uint64_t v63 = v1;
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MarketplaceKitError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ManagedAppDistributionError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InternalError();
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1003EDB60(v0, (uint64_t)v14);
  uint64_t v15 = 0xD00000000000002CLL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v14, v4);
      uint64_t v15 = MarketplaceKitError.description.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v15;
    case 2u:
      uint64_t v16 = *v14;
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      id v17 = [objc_allocWithZone((Class)NSByteCountFormatter) init];
      id v18 = [v17 stringFromByteCount:v16];

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();

      v64[0] = v19;
      v64[1] = v21;
      unint64_t v22 = 0xD00000000000002DLL;
      unint64_t v23 = 0x80000001005C1150;
      goto LABEL_18;
    case 3u:
      uint64_t v24 = (void *)v14[1];
      if (!v24) {
        return 0xD00000000000002ELL;
      }
      uint64_t v25 = *v14;
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v26._uint64_t countAndFlagsBits = 0xD000000000000038;
      v26._object = (void *)0x80000001005C0FB0;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = v25;
      v27._object = v24;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      unint64_t v22 = 34;
LABEL_17:
      unint64_t v23 = 0xE100000000000000;
LABEL_18:
      String.append(_:)(*(Swift::String *)&v22);
      return v64[0];
    case 4u:
      uint64_t v28 = *v14;
      os_log_t v29 = (void *)v14[1];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      v64[0] = 0xD000000000000019;
      v64[1] = 0x80000001005C0F60;
      v30._uint64_t countAndFlagsBits = v28;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      unint64_t v22 = 0x766E692073692022;
      unint64_t v23 = 0xEC00000064696C61;
      goto LABEL_18;
    case 5u:
      uint64_t v32 = v62;
      uint64_t v31 = v63;
      (*(void (**)(char *, uint64_t *, uint64_t))(v62 + 32))(v3, v14, v63);
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v64[0] = 0xD00000000000001FLL;
      v64[1] = 0x80000001005C0E30;
      sub_1004E66F0();
      v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      uint64_t v34 = 34;
      unint64_t v35 = 0xE100000000000000;
      goto LABEL_14;
    case 6u:
      uint64_t v36 = *v14;
      uint64_t v37 = (void *)v14[1];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v64[0] = 0xD000000000000015;
      v64[1] = 0x80000001005C0DC0;
      v38._uint64_t countAndFlagsBits = v36;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      return v64[0];
    case 7u:
      uint64_t v39 = (void *)v14[1];
      if (!v39) {
        return 0xD000000000000022;
      }
      uint64_t v40 = *v14;
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v41._uint64_t countAndFlagsBits = 0xD000000000000033;
      v41._object = (void *)0x80000001005C0D80;
      String.append(_:)(v41);
      v42._uint64_t countAndFlagsBits = v40;
      v42._object = v39;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      return v64[0];
    case 8u:
      uint64_t v43 = *v14;
      unint64_t v44 = (void *)v14[1];
      uint64_t v45 = v14[2];
      os_log_t v46 = (void *)v14[3];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      strcpy((char *)v64, "Failed to ");
      BYTE3(v64[1]) = 0;
      HIDWORD(v64[1]) = -369098752;
      v47._uint64_t countAndFlagsBits = v43;
      v47._object = v44;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = 0x65736E6563696C20;
      v48._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v48);
      v49._uint64_t countAndFlagsBits = v45;
      v49._object = v46;
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      return v64[0];
    case 9u:
      uint64_t v32 = v62;
      uint64_t v31 = v63;
      (*(void (**)(char *, uint64_t *, uint64_t))(v62 + 32))(v3, v14, v63);
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      strcpy((char *)v64, "Coordinator '");
      HIWORD(v64[1]) = -4864;
      sub_1004E66F0();
      v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      uint64_t v34 = 0x6F6620746F6E2027;
      unint64_t v35 = 0xEB00000000646E75;
LABEL_14:
      String.append(_:)(*(Swift::String *)&v34);
      uint64_t v15 = v64[0];
      (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v31);
      return v15;
    case 0xAu:
      uint64_t v51 = *v14;
      uint64_t v52 = (void *)v14[1];
      uint64_t v53 = v14[2];
      uint64_t v54 = (void *)v14[3];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v64[0] = 0xD00000000000001ALL;
      v64[1] = 0x80000001005C0C90;
      v55._uint64_t countAndFlagsBits = v53;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._object = (void *)0x80000001005C0CB0;
      v56._uint64_t countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v56);
      v57._uint64_t countAndFlagsBits = v51;
      v57._object = v52;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      unint64_t v22 = 39;
      goto LABEL_17;
    case 0xBu:
      uint64_t v58 = *v14;
      unsigned int v59 = (void *)v14[1];
      v64[0] = 0;
      v64[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v64[0] = 0xD00000000000001CLL;
      v64[1] = 0x80000001005C0B90;
      v60._uint64_t countAndFlagsBits = v58;
      v60._object = v59;
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      unint64_t v22 = 41;
      goto LABEL_17;
    case 0xCu:
      return v15;
    case 0xDu:
      return 0xD000000000000050;
    case 0xEu:
      return 0xD000000000000019;
    case 0xFu:
      return 0xD00000000000001BLL;
    case 0x10u:
      return 0xD000000000000048;
    case 0x11u:
      return 0xD00000000000003ELL;
    case 0x12u:
      return 0x6874756120746F4ELL;
    case 0x13u:
      return 0xD00000000000002ALL;
    case 0x14u:
      return 0xD000000000000049;
    case 0x15u:
      return 0xD000000000000024;
    case 0x16u:
      return 0xD00000000000001ALL;
    case 0x17u:
      return 0xD000000000000011;
    case 0x18u:
      return 0xD000000000000013;
    case 0x19u:
      return 0xD000000000000021;
    case 0x1Au:
      return 0xD000000000000013;
    case 0x1Bu:
      return 0xD000000000000012;
    case 0x1Cu:
      return 0xD00000000000001CLL;
    case 0x1Du:
      return 0xD00000000000001FLL;
    case 0x1Eu:
      return 0xD000000000000010;
    case 0x1Fu:
      return 0xD000000000000020;
    case 0x20u:
      return 0xD000000000000026;
    case 0x21u:
      return 0xD000000000000016;
    case 0x22u:
      return 0xD000000000000035;
    case 0x23u:
      return 0xD000000000000011;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
      uint64_t v15 = ManagedAppDistributionError.description.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return v15;
  }
}

uint64_t sub_1004E83C8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unsigned __int8 v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v4 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        unsigned __int8 v4 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      }
      else {
        unsigned __int8 v4 = *(unsigned char *)_StringObject.sharedUTF8.getter();
      }
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

uint64_t sub_1004E845C()
{
  sub_100455F40(0, 16, 0);
  uint64_t v0 = 0;
  while (1)
  {
    uint64_t result = sub_1004E83C8(*(uint64_t *)((char *)&off_100637FA0 + v0 + 32), *(unint64_t *)((char *)&off_100637FA0 + v0 + 40));
    if ((result & 0x100) != 0) {
      break;
    }
    char v2 = result;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    unint64_t v3 = _swiftEmptyArrayStorage[3];
    if (v4 >= v3 >> 1) {
      sub_100455F40(v3 > 1, v4 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v4 + 1;
    *((unsigned char *)&_swiftEmptyArrayStorage[4] + v4) = v2;
    v0 += 16;
    if (v0 == 256)
    {
      swift_arrayDestroy();
      uint64_t result = dispatch thunk of static Digest.byteCount.getter();
      if (result + 0x4000000000000000 >= 0)
      {
        __chkstk_darwin(2 * result);
        uint64_t v5 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        swift_release();
        return v5;
      }
      __break(1u);
      break;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E85E0(void *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  int64_t v14 = a2;
  uint64_t v7 = type metadata accessor for LazySequence();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v13 - v9;
  Sequence.lazy.getter();
  uint64_t v15 = a4;
  sub_1000172F8(&qword_10065FE38);
  swift_getWitnessTable();
  sub_1004E8908();
  uint64_t v11 = Sequence.flatMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1004E8818(v11, a1, v14);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1004E8780@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = *a1;
  sub_1000172F8(&qword_100663C60);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1005A4070;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 <= v5 >> 4)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(result + 32) = *(unsigned char *)(a2 + 32 + (v5 >> 4));
    if (v7 > (v5 & 0xF))
    {
      *(unsigned char *)(result + 33) = *(unsigned char *)(a2 + 32 + (v5 & 0xF));
      *a3 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E8818(uint64_t a1, void *__dst, int64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return v3;
  }
  if (v3 > a3)
  {
    __break(1u);
  }
  else
  {
    if (!__dst) {
      return v3;
    }
    if (a1 + 32 >= (unint64_t)__dst + v3 || a1 + 32 + v3 <= (unint64_t)__dst)
    {
      memcpy(__dst, (const void *)(a1 + 32), v3);
      return v3;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004E88C8(void *a1, int64_t a2)
{
  return sub_1004E85E0(a1, a2, v2[4], v2[5], v2[6]);
}

uint64_t sub_1004E88EC@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004E8780(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_1004E8908()
{
  unint64_t result = qword_100665DF8;
  if (!qword_100665DF8)
  {
    sub_10017B924(&qword_10065FE38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665DF8);
  }
  return result;
}

uint64_t sub_1004E8964(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
  v10._uint64_t countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  String.append(_:)(v11);
  if (a1 == 1)
  {
    a2 = 0;
    a3 = (void *)0xE000000000000000;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v12._uint64_t countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14;
}

void sub_1004E8A24(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a1;
  unint64_t v44 = a2;
  uint64_t v47 = 46;
  unint64_t v48 = 0xE100000000000000;
  sub_100017B14();
  uint64_t v8 = (void *)StringProtocol.components<A>(separatedBy:)();
  uint64_t v9 = v8;
  uint64_t v47 = (uint64_t)v8;
  if (v8[2])
  {
    BOOL v10 = v8[4] == 7829367 && v8[5] == 0xE300000000000000;
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_100553480(0, 1);
      uint64_t v9 = (void *)v47;
    }
  }
  unint64_t v11 = v9[2];
  if (!v11)
  {
    static Logger.general.getter();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "URL does not have a valid host.", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_34;
  }
  if (v11 == 1
    || ((Swift::String v12 = v9 + 4, !v9[4]) ? (v13 = v9[5] == 0xE000000000000000) : (v13 = 0),
        v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v14 = v9 + 7;
  unint64_t v15 = v11;
  while (--v15)
  {
    if (*(v14 - 1)) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = *v14 == 0xE000000000000000;
    }
    if (!v16)
    {
      v14 += 2;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        continue;
      }
    }
    goto LABEL_34;
  }
  if (v11 <= v9[2])
  {
    uint64_t v20 = &v12[2 * v11 - 2];
    uint64_t v21 = *v20;
    unint64_t v22 = (void *)v20[1];
    uint64_t v43 = 46;
    unint64_t v44 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v26 = v43;
    uint64_t v25 = (void *)v44;
    NSString v27 = String._bridgeToObjectiveC()();
    int IsDomainTopLevel = _CFHostIsDomainTopLevel();

    if (IsDomainTopLevel)
    {
      os_log_t v29 = (void **)&v9[2 * v11 + 1];
      while (1)
      {
        if (--v11 > v9[2]) {
          goto LABEL_39;
        }
        uint64_t v30 = (uint64_t)*(v29 - 1);
        uint64_t v31 = *v29;
        uint64_t v43 = 46;
        unint64_t v44 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v32._uint64_t countAndFlagsBits = v30;
        v32._object = v31;
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        v33._uint64_t countAndFlagsBits = v26;
        v33._object = v25;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        uint64_t v26 = v43;
        uint64_t v25 = (void *)v44;
        NSString v34 = String._bridgeToObjectiveC()();
        LODWORD(v30) = _CFHostIsDomainTopLevel();

        if (!v30) {
          break;
        }
        v29 -= 2;
        if (v11 <= 1)
        {
          swift_bridgeObjectRelease();
          unint64_t v11 = 0;
          unint64_t v35 = v9[2];
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v35 = v9[2];
      if (v35 < v11) {
        goto LABEL_42;
      }
LABEL_36:
      uint64_t v43 = (uint64_t)v9;
      unint64_t v44 = (unint64_t)(v9 + 4);
      unint64_t v45 = v11;
      uint64_t v46 = (2 * v35) | 1;
      swift_bridgeObjectRetain();
      sub_1000172F8(&qword_100665E00);
      sub_1004E8E8C();
      uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
      Swift::String v38 = v37;
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_40;
      }
      if (v11 - 1 < v9[2])
      {
        uint64_t v39 = &v12[2 * v11 - 2];
        unint64_t v40 = v39[1];
        uint64_t v43 = *v39;
        unint64_t v44 = v40;
        swift_bridgeObjectRetain();
        v41._uint64_t countAndFlagsBits = 46;
        v41._object = (void *)0xE100000000000000;
        String.append(_:)(v41);
        v42._uint64_t countAndFlagsBits = v36;
        v42._object = v38;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

unint64_t sub_1004E8E8C()
{
  unint64_t result = qword_100665E08;
  if (!qword_100665E08)
  {
    sub_10017B924(&qword_100665E00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665E08);
  }
  return result;
}

id sub_1004E8EE8(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_1004FEF4C();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for MarketplaceCertificateEntity.Property, (uint64_t (*)(uint64_t))sub_1004EDCFC, &qword_100665F48);
  if (v2)
  {

    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for MarketplaceCertificateTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    unint64_t v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for MarketplaceCertificateEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for MarketplaceCertificateTemplate);
  }
  return a2;
}

id sub_1004E91BC(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_100416B1C();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for DDMDeclarationEntity.Property, (uint64_t (*)(uint64_t))sub_100417C20, &qword_100662DD8);
  if (v2)
  {

    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for DDMDeclarationTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    unint64_t v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for DDMDeclarationEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for DDMDeclarationTemplate);
  }
  return a2;
}

id sub_1004E9490(long long *a1, void *a2)
{
  long long v4 = *a1;
  long long v17 = a1[1];
  long long v18 = v4;
  long long v16 = a1[2];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  id v6 = (id)sub_1004DFDB8();
  uint64_t v7 = sub_1004ED544((uint64_t)v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for DDMUpdateEntity.Property, (uint64_t (*)(uint64_t))sub_1004DFFA8, &qword_100665F68);
  if (v2)
  {

    sub_10018AFE0((uint64_t)&v18);
    sub_10018AFE0((uint64_t)&v17);
    sub_10018AFE0((uint64_t)&v16);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    unint64_t v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for DDMUpdateEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    id v6 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([v6 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_10018AFE0((uint64_t)&v18);
    sub_10018AFE0((uint64_t)&v17);
    sub_10018AFE0((uint64_t)&v16);
  }
  return v6;
}

id sub_1004E9760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v11 = JSONEncoder.init()();
  unint64_t v12 = sub_10040FFE0(a1, a2, a3, a4);
  uint64_t v13 = sub_1004ED544(v12, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v11, (uint64_t)&type metadata for SecureStorageEntity.Property, (uint64_t (*)(uint64_t))sub_1004103F4, &qword_100665F60);
  if (v5)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a5;
  }
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (*(void *)(v14 + 16))
  {
    sub_1000172F8(&qword_10065CE48);
    unint64_t v15 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v15 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v21 = v15;
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_1004ED160(v16, 1, &v21);
  swift_bridgeObjectRelease();
  type metadata accessor for SecureStorageEntity.Entity();
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v18 = a5;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  a5 = [v17 initWithPropertyValues:isa onConnection:v18];

  if (([a5 existsInDatabase] & 1) == 0)
  {
    type metadata accessor for InternalError();
    sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a5;
}

id sub_1004E9A50(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_1004ECB78();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for DDMDeclarationStatusEntity.Property, (uint64_t (*)(uint64_t))sub_10024A31C, &qword_10065CE80);
  if (v2)
  {

    sub_1004EDC9C(a1, type metadata accessor for DDMDeclarationStatusTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    unint64_t v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for DDMDeclarationStatusEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, type metadata accessor for DDMDeclarationStatusTemplate);
  }
  return a2;
}

id sub_1004E9D20(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v4 = v3;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000172F8(&qword_100665F20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 72) = &protocol witness table for String;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_10044BE28(inited);
  uint64_t v10 = sub_1004ED928(v9, (void (*)(long long *__return_ptr, long long *, _OWORD *))sub_100249FCC);
  if (v4)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    if (*(void *)(v11 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      id v12 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      id v12 = &_swiftEmptyDictionarySingleton;
    }
    id v18 = v12;
    uint64_t v13 = swift_bridgeObjectRetain();
    sub_1004ED160(v13, 1, &v18);
    swift_bridgeObjectRelease();
    type metadata accessor for DDMInstallHistoryEntryEntity.Entity();
    id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v15 = a3;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a3 = [v14 initWithPropertyValues:isa onConnection:v15];

    if ([a3 existsInDatabase])
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  return a3;
}

id sub_1004E9FE8(long long *a1, id a2)
{
  long long v4 = *a1;
  long long v15 = a1[1];
  long long v16 = v4;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_10041B058();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for LicenseStorageEntity.Property, (uint64_t (*)(uint64_t))sub_10041AE18, &qword_100666190);
  if (v2)
  {

    sub_10018AFE0((uint64_t)&v16);
    sub_10018AFE0((uint64_t)&v15);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      unint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    id v17 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v17);
    swift_bridgeObjectRelease();
    type metadata accessor for LicenseStorageEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = objc_msgSend(v11, "initWithPropertyValues:onConnection:", isa, v12, v15, v16);

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_10018AFE0((uint64_t)&v16);
    sub_10018AFE0((uint64_t)&v15);
  }
  return a2;
}

id sub_1004EA2A0(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_1002E06FC();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for MarketplaceUpdateEntity.Property, (uint64_t (*)(uint64_t))sub_1004EDD50, &qword_100665F58);
  if (v2)
  {

    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for MarketplaceUpdateTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      unint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    long long v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for MarketplaceUpdateEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for MarketplaceUpdateTemplate);
  }
  return a2;
}

id sub_1004EA574(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_1004109AC();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for AppInstallEntity.Property, (uint64_t (*)(uint64_t))sub_1001A1238, &qword_100665F38);
  if (v2)
  {

    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      unint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    long long v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for AppInstallEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for AppInstallTemplate);
  }
  return a2;
}

id sub_1004EA848(uint64_t a1, id a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v5 = JSONEncoder.init()();
  unint64_t v6 = sub_10041B608();
  uint64_t v7 = sub_1004ED544(v6, (void (*)(long long *__return_ptr, long long *, char *))sub_100249FCC, v5, (uint64_t)&type metadata for AppPackageEntity.Property, (uint64_t (*)(uint64_t))sub_1004B4AE0, &qword_100665F30);
  if (v2)
  {

    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      sub_1000172F8(&qword_10065CE48);
      unint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      unint64_t v9 = &_swiftEmptyDictionarySingleton;
    }
    long long v15 = v9;
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1004ED160(v10, 1, &v15);
    swift_bridgeObjectRelease();
    type metadata accessor for AppPackageEntity.Entity();
    id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v12 = a2;
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
    a2 = [v11 initWithPropertyValues:isa onConnection:v12];

    if (([a2 existsInDatabase] & 1) == 0)
    {
      type metadata accessor for InternalError();
      sub_1004ECFE4((unint64_t *)&qword_10065D340, (void (*)(uint64_t))type metadata accessor for InternalError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_release();
    sub_1004EDC9C(a1, (uint64_t (*)(void))type metadata accessor for AppPackageTemplate);
  }
  return a2;
}

unint64_t *sub_1004EAB1C()
{
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A3EC0;
  *(void *)(inited + 56) = &type metadata for SQLiteTable;
  *(void *)(inited + 64) = &off_1006493B8;
  uint64_t v1 = (void *)swift_allocObject();
  *(void *)(inited + 32) = v1;
  v1[2] = sub_1004EAC00;
  v1[3] = 0;
  v1[4] = 0xD000000000000016;
  v1[5] = 0x80000001005BDC40;
  uint64_t v2 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  return v2;
}

unint64_t *sub_1004EAC00()
{
  strcpy(v38, "declaration_id");
  v38[15] = -18;
  uint64_t v0 = 1415071060;
  unint64_t v1 = 0xE400000000000000;
  uint64_t v39 = 1415071060;
  unint64_t v40 = 0xE400000000000000;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  char v44 = 0;
  v33[0] = 0x746172616C636564;
  v33[1] = 0xEF79656B5F6E6F69;
  _OWORD v33[2] = 1415071060;
  v33[3] = 0xE400000000000000;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  v28[0] = 0x6574617473;
  v28[1] = 0xE500000000000000;
  type metadata accessor for ManagedAppStatus.State();
  uint64_t v2 = swift_dynamicCastMetatype();
  long long v3 = 0uLL;
  uint64_t v4 = 1415071060;
  if (!v2)
  {
    uint64_t v4 = 0x52454745544E49;
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      unint64_t v1 = 0xE700000000000000;
    }
    else
    {
      uint64_t v4 = 1279346002;
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        type metadata accessor for UUID();
        if (swift_dynamicCastMetatype()) {
          uint64_t v4 = 1145656661;
        }
        else {
          uint64_t v4 = 1112493122;
        }
      }
    }
    long long v3 = 0uLL;
  }
  void v28[2] = v4;
  v28[3] = v1;
  long long v29 = v3;
  long long v30 = v3;
  long long v31 = v3;
  char v32 = 0;
  strcpy((char *)v21, "update_state");
  HIBYTE(v21[6]) = 0;
  v21[7] = -5120;
  type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v5 = swift_dynamicCastMetatype();
  unint64_t v6 = 0xE400000000000000;
  if (!v5)
  {
    uint64_t v0 = 0x52454745544E49;
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      unint64_t v6 = 0xE700000000000000;
    }
    else
    {
      uint64_t v0 = 1279346002;
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        type metadata accessor for UUID();
        if (swift_dynamicCastMetatype()) {
          uint64_t v0 = 1145656661;
        }
        else {
          uint64_t v0 = 1112493122;
        }
      }
      unint64_t v6 = 0xE400000000000000;
    }
  }
  uint64_t v22 = v0;
  unint64_t v23 = v6;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  char v27 = 0;
  v16[0] = 0x736E6F73616572;
  v16[1] = 0xE700000000000000;
  _OWORD v16[2] = 1112493122;
  void v16[3] = 0xE400000000000000;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  char v20 = 0;
  sub_1000172F8((uint64_t *)&unk_100663BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A4B40;
  *(void *)(inited + 56) = &type metadata for SQLiteColumn;
  *(void *)(inited + 64) = &off_1006493B0;
  uint64_t v8 = swift_allocObject();
  *(void *)(inited + 32) = v8;
  sub_1001CD8D8((uint64_t)v38, v8 + 16);
  *(void *)(inited + 96) = &type metadata for SQLiteColumn;
  *(void *)(inited + 104) = &off_1006493B0;
  uint64_t v9 = swift_allocObject();
  *(void *)(inited + 72) = v9;
  sub_1001CD8D8((uint64_t)v33, v9 + 16);
  *(void *)(inited + 136) = &type metadata for SQLiteColumn;
  *(void *)(inited + 144) = &off_1006493B0;
  uint64_t v10 = swift_allocObject();
  *(void *)(inited + 112) = v10;
  sub_1001CD8D8((uint64_t)v28, v10 + 16);
  *(void *)(inited + 176) = &type metadata for SQLiteColumn;
  *(void *)(inited + 184) = &off_1006493B0;
  uint64_t v11 = swift_allocObject();
  *(void *)(inited + 152) = v11;
  sub_1001CD8D8((uint64_t)v21, v11 + 16);
  *(void *)(inited + 216) = &type metadata for SQLiteColumn;
  *(void *)(inited + 224) = &off_1006493B0;
  uint64_t v12 = swift_allocObject();
  *(void *)(inited + 192) = v12;
  sub_1001CD8D8((uint64_t)v16, v12 + 16);
  *(void *)(inited + 256) = &type metadata for SQLiteIndex;
  *(void *)(inited + 264) = &off_1006493A8;
  uint64_t v13 = swift_allocObject();
  *(void *)(inited + 232) = v13;
  strcpy((char *)(v13 + 16), "declaration_id");
  *(unsigned char *)(v13 + 31) = -18;
  *(void *)(v13 + 32) = 0xD000000000000012;
  *(void *)(v13 + 40) = 0x80000001005BF6A0;
  *(unsigned char *)(v13 + 48) = 0;
  id v14 = sub_1004AB980(inited);
  swift_setDeallocating();
  sub_1000172F8(&qword_10065C038);
  swift_arrayDestroy();
  sub_1001CD934((uint64_t)v16);
  sub_1001CD934((uint64_t)v21);
  sub_1001CD934((uint64_t)v28);
  sub_1001CD934((uint64_t)v33);
  sub_1001CD934((uint64_t)v38);
  return v14;
}

uint64_t sub_1004EB098(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000172F8(&qword_100666198);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10018AC60(a1, a1[3]);
  sub_1004EF02C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus(0);
    char v14 = 2;
    type metadata accessor for ManagedAppStatus.State();
    sub_1004ECFE4(&qword_10065CF58, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.State);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v13 = 3;
    type metadata accessor for ManagedAppStatus.UpdateState();
    sub_1004ECFE4(&qword_100665F18, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.UpdateState);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_1000172F8(&qword_10065CE50);
    sub_1004ED878(&qword_10065CF38, &qword_10065CF40);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004EB37C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = sub_1000172F8(&qword_10065BD00);
  __chkstk_darwin(v3 - 8);
  long long v24 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ManagedAppStatus.State();
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000172F8(&qword_100666180);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (void *)((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10018AC60(a1, a1[3]);
  sub_1004EF02C();
  uint64_t v28 = v9;
  uint64_t v13 = (uint64_t)v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return sub_100014524((uint64_t)a1);
  }
  char v14 = v7;
  long long v29 = a1;
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  char v35 = 0;
  uint64_t v17 = (uint64_t)v12;
  *uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[1] = v18;
  char v34 = 1;
  void v12[2] = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12[3] = v19;
  char v33 = 2;
  sub_1004ECFE4(&qword_10065CF50, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.State);
  v22[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))((char *)v12 + v10[6], v14, v5);
  type metadata accessor for ManagedAppStatus.UpdateState();
  char v32 = 3;
  sub_1004ECFE4(&qword_10065CE98, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.UpdateState);
  uint64_t v20 = (uint64_t)v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1004EF080(v20, v17 + v10[7]);
  sub_1000172F8(&qword_10065CE50);
  char v31 = 4;
  sub_1004ED878(&qword_10065CE58, &qword_10065CE60);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v16);
  *(void *)(v17 + v10[8]) = v30;
  sub_1004ED0F8(v17, v23, type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus);
  sub_100014524((uint64_t)v29);
  return sub_1004EDC9C(v17, type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus);
}

unint64_t sub_1004EB948()
{
  unint64_t result = 0xD000000000000015;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x746172616C636564;
      break;
    case 2:
      unint64_t result = 0x6574617473;
      break;
    case 3:
      unint64_t result = 0x7453657461647075;
      break;
    case 4:
      unint64_t result = 0x736E6F73616572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004EBA08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004EF0E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004EBA30(uint64_t a1)
{
  unint64_t v2 = sub_1004EF02C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004EBA6C(uint64_t a1)
{
  unint64_t v2 = sub_1004EF02C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004EBAA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004EB37C(a1, a2);
}

uint64_t sub_1004EBAC0(void *a1)
{
  return sub_1004EB098(a1);
}

uint64_t sub_1004EBAD8(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v81 = a1;
  uint64_t v3 = type metadata accessor for CocoaError.Code();
  uint64_t v78 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v77 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus(0);
  uint64_t v82 = *(void *)(v5 - 8);
  int v83 = (int *)v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for DDMDeclarationStatusTemplate(0);
  uint64_t v8 = __chkstk_darwin(v84);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v67 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v67 - v14;
  uint64_t v80 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v80 - 8);
  uint64_t v17 = __chkstk_darwin(v80);
  uint64_t v76 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v21 = v79;
  uint64_t v22 = Data.init(contentsOf:options:)();
  if (v21)
  {
    uint64_t v27 = v80;
    swift_errorRetain();
    uint64_t v28 = v77;
    static CocoaError.fileReadNoSuchFile.getter();
    sub_1004ECFE4((unint64_t *)&qword_10065D500, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    uint64_t v29 = v3;
    char v30 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v28, v29);
    if (v30)
    {
      return swift_errorRelease();
    }
    else
    {
      char v32 = v76;
      static Logger.ddm.getter();
      swift_errorRetain();
      swift_errorRetain();
      char v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        char v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)char v35 = 138543362;
        swift_errorRetain();
        uint64_t v36 = v16;
        char v37 = (void *)_swift_stdlib_bridgeErrorToNSError();
        uint64_t v85 = v37;
        uint64_t v27 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v84 = v37;
        uint64_t v16 = v36;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unable to read declaration status from disk: %{public}@", v35, 0xCu);
        sub_1000172F8(&qword_10065DB10);
        swift_arrayDestroy();
        swift_slowDealloc();
        char v32 = v76;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v32, v27);
    }
  }
  else
  {
    uint64_t v70 = v20;
    uint64_t v71 = v2;
    uint64_t v73 = v16;
    uint64_t v74 = v15;
    uint64_t v79 = v10;
    uint64_t v72 = v3;
    uint64_t v24 = v22;
    unint64_t v25 = v23;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    uint64_t v26 = PropertyListDecoder.init()();
    sub_1000172F8(&qword_100665EF8);
    sub_1004ECF40();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v67 = v26;
    uint64_t v68 = v24;
    unint64_t v69 = v25;
    Swift::String v38 = v85;
    uint64_t v75 = v85[2];
    if (v75)
    {
      uint64_t v39 = v70;
      static Logger.ddm.getter();
      swift_bridgeObjectRetain();
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        long long v42 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v42 = 134349056;
        uint64_t v85 = (void *)v38[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Migrating %{public}ld legacy declaration statuses", v42, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      uint64_t v43 = (uint64_t)v74;
      char v44 = v83;
      (*(void (**)(void *, uint64_t))(v73 + 8))(v39, v80);
      uint64_t v45 = 0;
      uint64_t v46 = v82;
      uint64_t v47 = *(unsigned __int8 *)(v82 + 80);
      uint64_t v70 = v38;
      uint64_t v74 = (char *)v38 + ((v47 + 32) & ~v47);
      uint64_t v48 = v84;
      do
      {
        uint64_t v49 = v45 + 1;
        if (__OFADD__(v45, 1)) {
          __break(1u);
        }
        sub_1004ED0F8((uint64_t)&v74[*(void *)(v46 + 72) * v45], (uint64_t)v7, type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus);
        Swift::String v50 = &v13[*(int *)(v48 + 28)];
        uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v50, 1, 1, updated);
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v7;
        uint64_t v52 = *((void *)v7 + 3);
        *((void *)v13 + 2) = *((void *)v7 + 2);
        *((void *)v13 + 3) = v52;
        uint64_t v53 = &v7[v44[6]];
        uint64_t v54 = &v13[*(int *)(v84 + 24)];
        uint64_t v55 = type metadata accessor for ManagedAppStatus.State();
        Swift::String v56 = v54;
        uint64_t v57 = (uint64_t)v79;
        uint64_t v58 = v53;
        char v44 = v83;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v56, v58, v55);
        uint64_t v59 = (uint64_t)v50;
        uint64_t v48 = v84;
        sub_1004ED02C((uint64_t)&v7[v44[7]], v59);
        *(void *)&v13[*(int *)(v48 + 32)] = *(void *)&v7[v44[8]];
        sub_1004ED094((uint64_t)v13, v43);
        sub_1004ED0F8(v43, v57, type metadata accessor for DDMDeclarationStatusTemplate);

        sub_1004EDC9C(v43, type metadata accessor for DDMDeclarationStatusTemplate);
        ++v45;
        uint64_t v46 = v82;
      }
      while (v49 != v75);
    }
    swift_bridgeObjectRelease();
    id v60 = objc_msgSend(self, "defaultManager", v67);
    URL._bridgeToObjectiveC()(v61);
    uint64_t v63 = v62;
    uint64_t v85 = 0;
    unsigned int v64 = [v60 removeItemAtURL:v62 error:&v85];

    if (v64)
    {
      uint64_t v65 = v85;
      swift_release();
      return sub_100013510(v68, v69);
    }
    else
    {
      uint64_t v66 = v85;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
      sub_100013510(v68, v69);
      return swift_errorRelease();
    }
  }
}

uint64_t sub_1004EC400(unsigned __int8 *a1, char *a2)
{
  return sub_10051BB84(*a1, *a2);
}

Swift::Int sub_1004EC40C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004EC51C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004EC608()
{
  return Hasher._finalize()();
}

unint64_t sub_1004EC714@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004EF338(*a1);
  *a2 = result;
  return result;
}

void sub_1004EC744(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEE0064695F6E6F69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF79656B5F6E6F69;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6574617473;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      strcpy((char *)a1, "update_state");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      *(void *)a1 = 0x736E6F73616572;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = 0x746172616C636564;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_1004EC80C(void *a1@<X8>)
{
  *a1 = &off_10063A240;
}

id sub_1004EC9BC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DDMDeclarationStatusEntity.Entity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DDMDeclarationStatusEntity.Entity()
{
  return self;
}

uint64_t sub_1004ECA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004ECA28);
}

uint64_t sub_1004ECA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1004ECA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004ECAA8);
}

uint64_t sub_1004ECAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DDMDeclarationStatusDatabaseConfig(uint64_t a1)
{
  return sub_10019B200(a1, qword_100665E90);
}

uint64_t type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus(uint64_t a1)
{
  return sub_10019B200(a1, (uint64_t *)&unk_100665FC8);
}

uint64_t type metadata accessor for DDMDeclarationStatusTemplate(uint64_t a1)
{
  return sub_10019B200(a1, qword_100666070);
}

unint64_t sub_1004ECB78()
{
  uint64_t v1 = sub_1000172F8(&qword_10065BD00);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000172F8(&qword_100665F10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1005A9D80;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 72) = &protocol witness table for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 40) = v5;
  *(void *)(inited + 48) = v6;
  v18[1] = v6;
  *(unsigned char *)(inited + 88) = 1;
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = &protocol witness table for String;
  *(void *)(inited + 136) = &protocol witness table for String;
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = v8;
  *(unsigned char *)(inited + 144) = 2;
  uint64_t v9 = (int *)type metadata accessor for DDMDeclarationStatusTemplate(0);
  uint64_t v10 = (char *)v0 + v9[6];
  uint64_t v11 = type metadata accessor for ManagedAppStatus.State();
  *(void *)(inited + 176) = v11;
  *(void *)(inited + 184) = sub_1004ECFE4(&qword_10065CF50, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.State);
  *(void *)(inited + 192) = sub_1004ECFE4(&qword_10065CF58, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.State);
  uint64_t v12 = sub_10019CE94((uint64_t *)(inited + 152));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v10, v11);
  *(unsigned char *)(inited + 200) = 3;
  sub_100017238((uint64_t)v0 + v9[7], (uint64_t)v3, &qword_10065BD00);
  uint64_t updated = type metadata accessor for ManagedAppStatus.UpdateState();
  uint64_t v14 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, updated) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10001729C((uint64_t)v3, &qword_10065BD00);
    *(_OWORD *)(inited + 208) = 0u;
    *(_OWORD *)(inited + 224) = 0u;
    *(_OWORD *)(inited + 240) = 0u;
  }
  else
  {
    *(void *)(inited + 232) = updated;
    *(void *)(inited + 240) = sub_1004ECFE4(&qword_10065CE98, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.UpdateState);
    *(void *)(inited + 248) = sub_1004ECFE4(&qword_100665F18, (void (*)(uint64_t))&type metadata accessor for ManagedAppStatus.UpdateState);
    uint64_t v15 = sub_10019CE94((uint64_t *)(inited + 208));
    (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(v15, v3, updated);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(inited + 256) = 4;
  uint64_t v16 = *(uint64_t *)((char *)v0 + v9[8]);
  *(void *)(inited + 288) = sub_1000172F8(&qword_10065CE50);
  *(void *)(inited + 296) = sub_1004ED878(&qword_10065CE58, &qword_10065CE60);
  *(void *)(inited + 304) = sub_1004ED878(&qword_10065CF38, &qword_10065CF40);
  *(void *)(inited + 264) = v16;
  swift_bridgeObjectRetain();
  return sub_10044BE00(inited);
}

unint64_t sub_1004ECF40()
{
  unint64_t result = qword_100665F00;
  if (!qword_100665F00)
  {
    sub_10017B924(&qword_100665EF8);
    sub_1004ECFE4(&qword_100665F08, (void (*)(uint64_t))type metadata accessor for DDMDeclarationStatusDatabaseConfig.LegacyDeclarationStatus);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100665F00);
  }
  return result;
}

uint64_t sub_1004ECFE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004ED02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000172F8(&qword_10065BD00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004ED094(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DDMDeclarationStatusTemplate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004ED0F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004ED160(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_100017238(a1 + 32, (uint64_t)&v47, &qword_100663CD0);
  long long v44 = v47;
  long long v45 = v48;
  uint64_t v46 = v49;
  sub_1001C5DD4(v50, v43);
  uint64_t v7 = (void *)*a3;
  unint64_t v9 = sub_100451EDC((uint64_t)&v44);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11)) {
    goto LABEL_23;
  }
  char v13 = v8;
  if (v7[3] >= v12)
  {
    if (a2)
    {
      if (v8) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10052B9C0();
      if (v13) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v9 >> 6) + 64) |= 1 << v9;
    uint64_t v19 = v18[6] + 40 * v9;
    long long v20 = v44;
    long long v21 = v45;
    *(void *)(v19 + 32) = v46;
    *(_OWORD *)uint64_t v19 = v20;
    *(_OWORD *)(v19 + 16) = v21;
    sub_1001C5DD4(v43, (_OWORD *)(v18[7] + 32 * v9));
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v18[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 104; ; i += 72)
    {
      sub_100017238(i, (uint64_t)&v47, &qword_100663CD0);
      long long v44 = v47;
      long long v45 = v48;
      uint64_t v46 = v49;
      sub_1001C5DD4(v50, v43);
      uint64_t v27 = (void *)*a3;
      unint64_t v28 = sub_100451EDC((uint64_t)&v44);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      BOOL v23 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v23) {
        break;
      }
      char v33 = v29;
      if (v27[3] < v32)
      {
        sub_100523A6C(v32, 1);
        unint64_t v28 = sub_100451EDC((uint64_t)&v44);
        if ((v33 & 1) != (v34 & 1)) {
          goto LABEL_25;
        }
      }
      if (v33) {
        goto LABEL_10;
      }
      char v35 = (void *)*a3;
      *(void *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      uint64_t v36 = v35[6] + 40 * v28;
      long long v37 = v44;
      long long v38 = v45;
      *(void *)(v36 + 32) = v46;
      *(_OWORD *)uint64_t v36 = v37;
      *(_OWORD *)(v36 + 16) = v38;
      sub_1001C5DD4(v43, (_OWORD *)(v35[7] + 32 * v28));
      uint64_t v39 = v35[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      _OWORD v35[2] = v40;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100523A6C(v12, a2 & 1);
  unint64_t v14 = sub_100451EDC((uint64_t)&v44);
  if ((v13 & 1) == (v15 & 1))
  {
    unint64_t v9 = v14;
    if ((v13 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v17 = swift_allocError();
    swift_willThrow();
    uint64_t v51 = v17;
    swift_errorRetain();
    sub_1000172F8(&qword_10065B260);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_100014524((uint64_t)v43);
      sub_10025C22C((uint64_t)&v44);
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001005B9220;
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}